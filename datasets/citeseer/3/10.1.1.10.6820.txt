brics rs larsen optimal strategies brics basic research computer science optimal strategies priced timed game automata patricia franck emmanuel kim larsen brics report series rs issn february copyright patricia franck emmanuel kim larsen 
brics department computer science university aarhus 
rights reserved 
reproduction part permitted educational research condition copyright notice included copy 
see back inner page list brics report series publications 
copies may obtained contacting brics department computer science university aarhus ny munkegade building dk aarhus denmark telephone telefax internet brics brics dk brics publications general accessible world wide web anonymous ftp urls www brics dk ftp ftp brics dk document subdirectory rs optimal strategies priced timed game automata patricia lsv umr cnrs ens de cachan france email franck umr cnrs nantes france email emmanuel brics computer science dept aalborg university denmark email kim larsen brics computer science dept aalborg university denmark email february priced timed game automata extends timed game automata costs locations transitions 
focus reachability games priced timed game automata prove optimal cost winning game computable conditions concerning non cost 
stronger conditions strictness constraints prove addition decidable optimal strategy case optimal strategy computed 
results extend previous decidability result requires underlying game automata acyclic 
results encoded prototype hytech applied small case study 
keywords optimality control controller synthesis strategy priced timed game 
years application model checking techniques scheduling problems established line research 
static scheduling problems timing constraints may formulated reachability problems timed automata viz 
possibility reaching winning state 
real time model checking tools kronos uppaal applied number industrial benchmark scheduling problems hlp ny bmf abd lar 
scheduling strategy needs take account uncertainty respect behavior environmental context 
situations scheduling problem dynamic timed game controller environment objective controller find dynamic strategy guarantee game winning state mps amps dahm 
optimality schedules may obtained framework timed automata associating run performance measure 
possible compare runs search optimal run initial configuration final winning target 
obvious performance measure timed automata clearly time 
time optimality timed automata considered cy proved computable 
related problem synthesizing time optimal winning strategies timed game automata shown computable am 
ability consider general performance measures 
priced extensions timed automata introduced cost associated location giving cost unit time spent 
ach cost bound reachability shown decidable 
bfh independently solve cost optimal reachability problem priced timed automata cient incorporation uppaal provided called priced zones main data structure 
rls implementation cost optimal reachability improved considerably exploiting duality linear programming problems zones min cost flow problems 
bbl problem computing optimal infinite schedules terms minimal limit ratios solved model priced timed automata 
combine notions game price solve problem cost optimal winning strategies priced timed game automata conditions concerning strictness constraints non cost 
results extend previous result requires underlying game automata acyclic 
existing results mentioned related timed game automata priced timed automata respectively various extensions called classical region zone techniques 
combined setting solution obtained radically di erent way 
consider priced timed game automata fig 

cost rates locations respectively 
environment may choose move dashed arrows uncontrollable 
due invariant choice instantaneous 
obviously reached optimal strategy controller move win immediately 
crucial remaining question long controller wait transition obviously order controller win duration time units 
optimal choice duration sense cost reaching win minimal 
denote chosen delay minimal cost minimal cost environment chooses transitions best choice controller delay bfh name linearly priced timed automata model named weighted timed automata 
reachability timed games rtg win controllable uncontrollable delay delay win delay win small priced time game automata 
optimal strategy cost max minimum giving minimal cost fig 
illustrate optimal strategy states reachable initial state 
outline follows section recall basics reachability timed games 
section introduces priced timed games give run definition optimality 
relate run definition optimality recursive previously 
section core show compute optimal cost optimal strategies 
section reports preliminary implementation experiments hytech 
reachability timed games rtg focus reachability games control objective enforce system eventually evolves particular state 
classical literature define reachability timed games rtg mps amps dahm model control problems 
section recall known general results rtg give additional result controller strategy synthesis rtg 
controller synthesis defined safety games additional care needed rtg shown section 
timed transition systems games definition timed transition systems 
timed transition system tts short tuple act set states set initial states reachability timed games rtg act finite set actions disjoint denote act set edges 
write common assumptions delay additivity continuity exists determinism run finite infinite sequence 
en states set states encountered 
denote finite ends runs set finite infinite runs starting set runs runs runs 
shorthand extends notation finite runs 
definition timed games adapted dahm 
timed game tg short act tts act partitioned controllable actions act uncontrollable actions act strategies reachability games strategy mps function cause game constantly gives information controller order win game 
situation strategy suggest controller particular controllable action ii delay specific amount time denoted special symbol 
instance wants delay clock value reaches strategy location fig 
strategy control action definition strategy 
act tg 
strategy partial function runs act 
denote strat set strategies strategy state runs implies 
state strategies called memory free strategies game theory tho dahm 
possible runs may realized controller follows particular strategy defined notion outcome dahm definition outcome 
act tg strategy outcome outcome subset runs defined inductively outcome determinism essential simplifies proofs sequel 
reachability timed games rtg outcome outcome runs conditions hold 
act 
act 

infinite run outcome finite prefixes outcome 
strategy realizable outcome defined exists exist outcome 
strategies realizable interesting generate empty set outcomes 
note realizability weaker notion implementability considered chr ddr 
consider tts induced timed au win timed game automaton fig 

game enforce state win 
natural strategy wait reaches value greater 
formally yields strategy realizable 
sequel build strategy assume constraint transition 
case start strategy realizable realizable take half delay action restrict attention realizable strategies simply refer strategies 
definition reachability timed games rtg 
reachability timed game win act timed game act distinguished set winning states win win implies win 
rtg run winning run states win 
denote set winning runs literature find definitions meaning uncontrollable actions mps amps uncontrollable actions win game ii help win game 
example consider game fig 

case bound happen reaches case win game case ii forced happen win game 
follow framework la torre uncontrollable actions help win 
choice sake simplicity mainly reachability timed games rtg proof theorem 
handle semantics mps case proofs involved formalize previous notions 
win winning winning 
maximal run infinite run finite run satisfies implies act discrete actions uncontrollable actions 
strategy winning maximal runs outcome 
note realizable 
state rtg winning exists winning strategy denote set winning states note set winning realizable strategies computation winning strategies section summarize previous results obtained particular classes rtg linear hybrid games 
due lack space define model refer hen details 
computation winning states definition controllable predecessors operator mps dahm 
win act rtg 
subset act define pred 
controllable uncontrollable discrete predecessors defined pred respectively pred 
need notion safe timed predecessors set set intuitively state pred reach time path avoid formally defined pred post post 
able define controllable predecessors operator follows pred note definition captures choice uncontrollable actions win 
denote semi algorithm computes fixed point win limit increasing sequence sets states starting initial set win 
result computation win denoted 
theorem symbolic algorithm hhm dahm 
symbolic semi algorithm computing winning states 
terminates subclass initialized rectangular games hhm 
controller synthesis previous algorithms allow compute winning states game strategy synthesis extraction detailed 
definition patched definition function def 

theorem holds case depends winning set states 
reachability timed games rtg point provide symbolic algorithm assuming time determinism synthesizes realizable strategies theorem theorem synthesis realizable strategies 
time deterministic 
semi algorithm terminates compute polyhedral strategy winning realizable state state 
proof 
proof theorem quite technical 
state predicate finite union regions form location convex polyhedron 
assume win state predicate 
note win contains due pred 
symbolic versions pred compute state predicates applied state predicate iteratively computes state predicates state predicates 
terminates denote fixed point win 
define mapping min 
notice 
pn finite partition viewed state predicate 
implies say mapping definable implies 
theorem consequence proposition 
proposition 
finite partition viewed state predicate definable definable state realizable winning strategy build definable state realizable winning strategy finite partition refines ii definable 
needs defined won game 
proof 
assume set controllable events act totally ordered 
secondly rewritten pred 
ect result just computes intermediary sets states bit di erent 
version proof 
pn finite partition viewed state predicate particular assume convex 
denote pred pred 

finite partition defined 
define 
define partition induced pred controllable event 
set events totally ordered order nonempty state predicates accordingly ordered set state predicates assume sets ordered larger note set 
partition strategy polyhedral finite union convex polyhedra location 
reachability timed games rtg non empty set define controllable event corresponds 
set note implies define 
finite partition refines easy see definable 
state definable 
show build realizable winning strategy convinced problem just remind example fig 

example get sets win win 
strategy realizable 
knowledge stated literature overcome problem build realizable winning strategy 
need alter little bit border 
described 
compute set states border time border pred border empty strategy realizable 
split border sets set states time leads convex polyhedra delay action set states time leads convex polyhedra tells controllable action 
set states corresponds defined border pred states lead state defined done states realizable induction hypothesis 
remains update strategy closest time successor polyhedra closest time successors polyhedra defined post 
get finite set convex polyhedra partition definition contain states time elapse 
take implies just split set states time unit range define unchanged 
bounded time convex polyhedra case states infinite amount time elapse 
case split parts 
define set note choice adjacent part element reachability timed games rtg change value pred defining refine partitioning replacing part convex decomposition possible 
new partitioning refines definable prove winning realizable strategy 
lemma 
exists post 
comes construction 
strategy realizable 
lemma 
controllable action implies 

uncontrollable action 

implies implies 

exists implies case implies 
proof 

assume controllable action 
possible cases 
case value second case easy induction hypothesis 
assume 
exists 

direct definition 

assume 
cases apply induction hypothesis 
means value strategy changed construction realizability 
precedes exists post 
intermediate states pred 
transition allowed 
priced timed games 
assume 
induction hypothesis 
means value strategy changed construction realizability bounded delay state reached 
apply point 
lemma 
construction reach state get 
conclude winning 
take maximal run 
applying previous lemma win get winning run winning realizable strategy 
polyhedral state 
concludes proof 
priced timed games section define priced timed games 
focus reachability aim reach particular state game lowest possible cost 
give run definition optimal cost 
review previous acyclic weighted timed automata salvatore la torre definition optimal cost state optimal cost function 
conclude section relating definitions proving equivalence 
priced timed games definition priced timed transition systems 
priced timed transition system pair cost act tts cost cost function mapping satisfies price additivity cost cost cost 
bounded cost rate exists cost transition cost cost transition note cost notions concerning runs tts extend straightforwardly 

en finite run cost defined cost cost 
interested defining cost infinite run costs winning runs finite games play 
priced timed games definition priced timed games 
priced timed game resp 
reachability pair cost tg resp 
rtg cost cost function 
notions strategies outcomes winning states defined tg carry natural way 
cost cost winning strategy defined cost sup cost outcome definition optimal cost 
state reachable costs set cost defined cost cost optimal cost inf cost 
optimal cost sup denotes set initial states definition optimal strategies 
state winning strategy said optimal cost 
example shows optimal winning strategies 
example optimal strategy 
gives described priced timed automaton introduced bfh 
meaning automaton cost staying time unit 
controllable action 
example define family strategies cost strategy 
get close want optimal winning strategy 
cost cost win reachable optimal cost 
aim fold 
want compute optimal cost winning decide optimal strategy case optimal strategy compute strategy 
recursive definition optimal cost salvatore la torre introduced method computing optimal cost acyclic priced timed game 
authors define optimal cost alternative definition take min consider initial state controllable 
priced timed games expect state function satisfying set recursive equations run definition subsection 
give definition function prove correspond run definition optimal cost 
definition function adapted 

function fixed point functional inf max min min sup max definition justified arguments item def 
gives maximum cost uncontrollable action lead taken note definition sup defined outermost max defined item gives best expect controllable fired controllable action taken time step leading finite ii state reachable semantics specify uncontrollable action win win win optimal cost 
theorem relates definitions theorem 
cost induced set states 
la torre authors fact definition optimal cost give corresponds fixed point functional computed iteratively defined win 
define inf max min min sup max note definition slightly di ers add term 
case win time righthand sides equations defines functional 
equipped natural lifting constitutes complete lattice 
quite easily seen monotonic functional lattice 
follows tarski fixed point theory fix point exists 
note state winning 
priced timed games state term needed framework 
sequel denote max assume min min sup max proof 
recall definition done section pred pred pred define inductively win prove lemma 

proof 
win induction step assume 
prove 
take note states give maximum terms equation mean uncontrollable action taken states reached contradict fact pred pred induction hypothesis get exists term equation finite 
term uncontrollable action taken finite intermediary states outside cost due time bounded assumption bounded cost rate def 

case get 
converse case term equation finite term defined 
induction hypothesis get term finite value means intermediary states 
prove result lemma 
inf cost assume time determinism cf 
def 
need determine state reached units time priced timed games restrict realizable strategies shown proof lemma 
proof 
prove result induction 
base case case 
win 
take want strategy win run starting state win winning 
induction step assume proof done want prove result 
proof inf cost 
fix want prove exists cost 
note strategy build may non state need find state strategy prove lemma 
definition define strategy case uncontrollable action taken time lead state induction hypothesis know strategy cost define runs cases arise minimum case lemma 
induction hypothesis strategy cost define runs cost supremum costs runs bounded cost ii costs runs uncontrollable actions taken bounded cost 
term bounded supremum get possible cost 
minimum term controllable action define know lemma suitable strategy cost define runs argument case applies prove cost 
note applying force state time units 
proved reducing priced timed games timed games winning strategy cost 
easy see construction realizable 
proof inf cost 
prove cost 
take 
applying reach finite amount time avoid bad states way delay reaching case cost cost may uncontrollable actions reach leading larger cost 
winning strategy apply induction hypothesis cost 
term lower cost cost 
delay time units case induction hypothesis get result cost uncontrollable action enabled cost cost applying induction hypothesis get cost 
follows cost 
lower bound cost consequently inf cost 
completes proof 
proof theorem continuous induced exists defined 
defined 
fix 
definition exists applying lemma get exists strategy cost get cost 
inf cost 
conversely take strategy 
note functional defined equation 

function cost satisfies fix point get 
reducing priced timed games timed games section show computing optimal cost win priced timed game amounts solving control problem cost 
idea note defined runs starting obtained applying possible view winning strategy reducing priced timed games timed games optimal reachability game reachability game assume want compute optimal cost win priced timed game define usual timed game ac follows variable cost stand cost value 
build ac discrete structure specify rate cost location cost increases rate unit time set derivative cost ac solve control problem win ac winning states win cost note priced timed automaton bfh game ac simple linear hybrid automaton hen 
intuitively speaking want solve control game distinguished variable cost decreases time elapses discrete transition fired costs priced timed game 
asking question minimal amount resource cost needed win control game ac case compute winning states ac algorithm solving hybrid games wt dahm terminates answer optimal reachability game intersect set initial states set winning states case empty projection cost axis obtain constraint cost cost 
definition winning set states reachability games largest set win cost lower winning deduce optimal cost 
deduce optimal strategy strict inequality 
rest section devoted formalizing reduction proving reduction correct 
focus computation optimal strategies investigate conditions compute optimal cost termination criterion 
definition rtg associated 
win act cost 
associate rtg cont qr win act cont cont sequel away subscript clear context transition relation referred 
note reduction cost information part state runs cont closely related 
focus subclasses reachability timed games obtained enriching timed automata ad costs priced weighted timed automata bfh 
enables rely symbolic algorithms computability results 
priced timed game automata finite set real valued variables called clocks 
denote set constraints generated grammar 
valuation variables mapping element 
valuation set denote valuation agrees zero denote valuation 
definition 
priced timed game automaton act inv tuple reducing priced timed games timed games finite set locations initial location act act act set actions partitioned controllable uncontrollable actions finite set real valued clocks act finite set transitions inv associates location invariant associates location cost rate discrete transition cost 
reachability distinguished set locations win defines winning set states win semantics act inv ga act cost consists discrete steps exists cost ii time steps inv cost 
note definition cost gives cost function defined def 

lemma 

exists distinguished extra variable cost cont ga gh proof 
act inv 
associate set locations set actions invariants extra variable cost clock special analog variable 
transitions transition transition cost cost location derivative cost cost add global invariant cost 
construction cont ga gh correctness reduction theorem theorem 
corresponding lemma 
semi algorithm terminates gh wh gh terminates ga wa def ga cost wh wh wa cost note gh tg gives semantics reducing priced timed games timed games proof 
item theorem denote respectively sets obtained iterations semi algorithm 
induction prove 
variable cost constrain transitions computation terminates iterations computation take iterations 
addition get wa cost wh prove item theorem 
part assume wa cost take maximal run outcome 
winning cost definition run wa win cost run gh win cost cost run states form cost run ga state projected 
define cost 
strategy defined winning winning run outcome verifies cost outcome realizable realizable 
winning state wh part 
wh theorem state realizable winning strategy wh 
build inductively strategy defined winning cost define 
assume build realizable strategy ii defined generates runs length iii outcome exists outcome cost 
runs length allowed define define runs length generated take outcome 
act induction hypothesis iii know exists outcome cost enabled wh allows entails outcome wh define 
induction hypothesis iii know exists outcome cost 
exists wh winning 
define 
winning ga define 
strategy satisfies ii 
satisfies 
satisfies iii build order satisfy iii 
define outcome 
winning cost winning gh completes proof theorem 
computation optimal cost strategy theorem 
corresponding 
semi algorithm terminates gh wa upward closure set cost equal wh 
length run number strict alternations delays actions 
upward closure set reals defined 
reducing priced timed games timed games proof 
direct consequence theorem 
corollary optimal cost 
corresponding 
semi algorithm terminates gh upward closure set cost computable form cost left closed cost left open addition get proof 
fact form cost cost direct theorem 
rational number considering symbolic algorithms 
iterative computation operator generates polyhedra defined rational inequations 
terminates result follows 
corollary existence optimal strategy 

upward closure set cost left open optimal strategy 
compute realizable winning optimal strategy 
proof 
direct consequence theorem 
note proof corollary build state strategy state strategy depends current value cost part state 
strategy dependent run memory free 
depends state run accumulated cost run 
straightforward build optimal state accumulated cost strategy shown example 
depicted fig 

natural way define state cost cost cost win cost cost life easy cost strategy take state action strategy state minimal doing result strategy 
strategy winning 
particular case build optimal strategy cost strategy optimal needs optimal state example 
observation see di cult exhibit algorithm building state cost winning strategy 
section exhibit restricted class automata synthesize optimal state strategies automatically 
challenges enlarge class automata 
reducing priced timed games timed games termination criterion optimal strategies theorem 
satisfying hypotheses bounded clocks bounded cost function strictly non zeno exists accumulated cost cycle region automaton associated 
semi algorithm terminates gh associated proof 
know semi algorithm terminates ga mps amps 
note respectively set states obtained iterations semi algorithm described section 
note wa ga wh gh 
exists wa polyhedral set location region wa exists piecewise ne function defined operator defined region wa region bounded exists constant take max wa take integer size region automaton 
take construction exists path 
path region appears times 
cost larger larger termination follows 
argued possible build state optimal strategies cost information 
characterize restricted classes automata synthesize state winning strategy 
theorem 
satisfying hypotheses 
bounded 
cost function strictly non zeno 
constraints controllable actions non strict 
constraints uncontrollable actions strict wa ga set winning states 
exists state strategy defined wa wa wa cost 
proof 
strategy build choose state optimal local choice correspond action optimal potentially state strategy state 
preliminary experiments lemma 
wa closed set topological meaning 
particular write wa wa finite set polyhedra ne functions defined operators pred preserve closed sets preserves open sets 
operator preserves closed sets 
define formally 
assume constructed theorem strategy wh winning point state realizable 
state note minimal cost belongs wh define 
problem frontiers polyhedra realizability 
having realizability constraint define controllable action polyhedron just 
note controllable constraints closed non strict action done state 
note continuity closeness constraints possible transition wh modified way realizable 
prove non blocking sense state run outcome winning ends win exists implies implies wa assume controllable action case 
assume note 
realizable clocks bounded interval upper bound previous lemma wa addition realizable 
controllable action need prove winning strategy states wa lifting runs runs starting 
precedes blocked apart win reached strongly non assumption cost get runs generated win 
winning strategy 
previous conditions build strategy globally optimal states wa preliminary experiments prototype implementing construction optimal strategies theorem hytech applied small example concerning energy optimal connection mobile base station 
preliminary experiments low high win jam jam antenna low high win jam jam antenna jam jam jam jam controllable uncontrollable mobile phone example 
example see fig 
consider mobile phone antenna emitting di erent frequencies 
making initial connection base station takes time units antenna 
statistically jam transmission collision phone may appear time units worst case 
collision observed antenna try transmit higher level energy depending latency antenna switch back normal mode 
switching back low consumption mode requires resources force interrupt transmission 
connection base station established message delivered energy consumption varying depending antenna antenna antenna 
hytech model example appendix case game clearly reachability game won antenna reaches state win 
may seen model assumptions theorem needed ensure termination existence state strategy hold 
graphical representation optimal strategy obtained model fig 

optimal cost 
strategy state composite location partition clock state space 
starting location low low strategy says delay 
unfortunately opponent probably produce jam system go higher energy transmission state 
note define strategy need zones classically timed automata 
note composed state high high splitting optimal strategy expressed classical zones regions 
file downloaded www lsv ens cachan fr aci 
preliminary experiments high high high high high low high low low high low low low win low win delay low low delay high low high low low win low win strategy mobile phone example 
abd 
de aide automates 
phd thesis institut national polytechnique de grenoble grenoble france 
ach rajeev alur courcoubetis thomas henzinger 
computing accumulated delays real time systems 
proc 
th international conference computer aided verification cav volume lecture notes computer science pages 
springer 
ad rajeev alur david dill 
theory timed automata 
theoretical computer science tcs 
rajeev alur salvatore la torre george pappas 
optimal paths weighted timed automata 
proc 
th int 

hybrid systems computation control volume lecture notes computer science pages 
springer 
am eugene asarin oded maler 
soon possible time optimal control timed automata 
proc 
nd int 

hybrid systems computation control volume lecture notes computer science pages 
springer 
amps eugene asarin oded maler amir pnueli joseph sifakis 
controller synthesis timed automata 
proc 
ifac symposium system structure control pages 
elsevier science 
bbl patricia ed brinksma kim larsen 
staying alive cheaply possible 
proc 
th international workshop hybrid systems computation control lecture notes computer science 
springer 
appear 
bfh gerd behrmann thomas kim larsen paul pettersson vaandrager 
minimum cost reachability priced timed automata 
proc 
th international workshop hybrid systems computation control volume lecture notes computer science pages 
springer 
bmf ed brinksma angelika 
verification optimization plc control schedule 
journal software tools technology transfer 
chr franck thomas henzinger jean raskin 
comparison control problems timed hybrid systems 
proc 
th int 
workshop hybrid systems computation control volume lecture notes computer science pages 
springer 
cy courcoubetis yannakakis 
minimum maximum delay problems real time systems 
formal methods system design 
dahm luca de alfaro thomas henzinger majumdar 
symbolic algorithms infinite state games 
proc 
th international conference concurrency theory concur volume lecture notes computer science pages 
springer 
ddr martin de wulf laurent jean raskin 
asap semantics timed models timed implementations 
proc 
th international workshop hybrid systems computation control lecture notes computer science 
springer 
appear 

scheduling steel plant timed automata 
proc 
th int 
conf 
real time computing systems applications pages 
ieee computer society press 
hen thomas henzinger 
theory hybrid automata 
proc 
th ieee annual logic computer science lics pages 
ieee computer society press 
hhm thomas henzinger benjamin horowitz majumdar 
rectangular hybrid games 
proc 
th international conference concurrency theory concur volume lecture notes computer science pages 
springer 
thomas henzinger pei hsin ho howard wong toi 
user guide hytech 
proc 
st international conference tools algorithms construction analysis systems tacas volume lecture notes computer science pages 
springer 
thomas henzinger pei hsin ho howard wong toi 
hytech model checker hybrid systems 
journal software tools technology transfer 
hlp thomas kim larsen paul pettersson 
guided synthesis control programs uppaal 
proc 
ieee int 

distributed systems verification validation pages 
ieee computer society press 
lar kim larsen 
resource cient scheduling real time systems 
proc 
rd international conference embedded software volume lecture notes computer science pages 
springer 
invited presentation 
kim larsen gerd behrmann ed brinksma thomas paul pettersson 
cheap possible cient cost optimal reachability priced timed automata 
proc 
th international conference computer aided verification cav volume lecture notes computer science pages 
springer 
salvatore la torre mukhopadhyay 
optimal reachability control acyclic weighted timed automata 
proc 
nd ifip international conference theoretical computer science tcs volume ifip conference proceedings pages 
kluwer 
mps oded maler amir pnueli joseph sifakis 
synthesis discrete controllers timed systems 
proc 
th annual symposium theoretical aspects computer science stacs volume pages 
springer 
peter stavros tripakis sergio yovine 
minimum time reachability timed automata 
proc 
th ieee mediterranean conference control automation 
ny peter sergio yovine 
computing cient operations schemes chemical plants multi batch mode 
european journal control 
rls jacob rasmussen kim larsen 
resource optimal scheduling priced timed automata 
proc 
th international conference tools algorithms construction analysis systems tacas lecture notes computer science 
springer 
appear 
tho wolfgang thomas 
synthesis strategies infinite games 
proc 
th annual symposium theoretical aspects computer science stacs volume pages 
springer 
invited talk 
wt howard wong toi 
synthesis controllers linear hybrid automata 
proc 
th ieee conference decision control pages 
ieee computer society press 
antenna mobile phone model antenna mobile phone model mobile example var clock analog cost cost cost analog cost cost cost cost cost parameter flag discrete legend flag uncontrollable action flag delay flag low win flag high flag low win flag high low changed controllable action changed uncontrollable action variables part model just need existential quantification compute lambda set automaton antenna jam initially low loc low wait flag cost cost goto win true sync jam goto high loc high flag goto low true sync jam goto high loc win wait antenna automaton antenna jam initially low loc low wait flag cost cost goto win true sync jam goto high loc high antenna mobile phone model flag goto low true sync jam goto high loc win wait antenna automaton jam jam initially loc true wait dt dt sync jam goto sync jam goto loc true wait dt dt sync jam goto sync jam goto computations var init initial states winning winning locations winning states winning states obtained backward computation winning strat winning states decorated extra information order extract strategies 
iterator iterator fix point computation reachable reachable regions uncontrollable predecessors leading winning states uncontrollable predecessors complement controllable predecessors strict set states elapse time predecessors reach avoid bar time paths leading compute interior 
represents states time elapse stay inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf region antenna mobile phone model initial region init loc antenna low loc antenna low loc winning region winning loc antenna win loc antenna win cost compute reachable regions prints prints reachable regions prints reachable iterate reachable hide cost cost cost cost cost cost cost cost flag init endhide reachable hide cost cost cost cost cost cost cost cost flag post reachable endhide backward analysis prints prints computing winning states prints winning states winning states winning reachable decorated winning states winning strat winning states backward analysis look fix point pi iterator iterate iterator winning uncontrollable predecessors complement hide pre iterator endhide controllable predecessors note union region form flag flag indicates controllable action taken reach particular region hide pre iterator endhide antenna mobile phone model time predecessors reach avoid bar time paths leading hide hide pre iterator endhide hide hide pre endhide endhide endhide compute interior flag hide pre endhide need hide value flag need compute iteration state space iterator hide flag endhide add winning regions set winning regions computed informations cost take particular action 
winning strat winning strat add newly computed regions set computed regions winning states winning states iterator intersect reachable regions winning strat winning strat reachable winning states winning states reachable loop prints prints prints optimal cost prints print hide flag winning states init endhide removing winning decorated winning states antenna mobile phone model winning strat winning strat winning prints prints prints strategy prints hide flag cost cost cost winning strat flag endhide hide flag cost cost cost winning strat flag endhide hide flag cost cost cost winning strat flag endhide hide flag cost cost cost winning strat flag endhide hide flag cost cost cost winning strat flag endhide compute inf hide hide inf hide cost hide cost cost endhide inf hide cost hide cost cost endhide inf hide cost hide cost cost endhide inf hide cost hide cost cost endhide inf hide cost hide cost cost endhide inf hide cost hide cost cost endhide inf hide cost hide cost cost endhide inf hide cost hide cost cost endhide inf hide cost hide cost cost endhide inf hide cost hide cost cost endhide inf hide cost hide cost cost endhide inf hide cost hide cost cost antenna mobile phone model endhide inf hide cost hide cost cost endhide inf hide cost hide cost cost endhide inf hide cost hide cost cost endhide inf hide cost hide cost cost endhide inf hide cost hide cost cost endhide inf hide cost hide cost cost endhide inf hide cost hide cost cost endhide inf hide cost hide cost cost endhide prints prints delay prints print inf inf inf inf inf inf inf inf prints prints low win prints print inf inf inf inf prints prints high low prints print inf inf inf inf prints prints low win prints print inf inf inf inf prints prints high low prints print inf inf inf inf brics report series publications rs patricia franck emmanuel kim larsen 
optimal strategies priced timed game automata 
february 
pp 
rs mads sig ager olivier danvy jan 
functional correspondence call need evaluators lazy machines 
february 
pp 
report supersedes earlier brics report rs 
extended version article appear information processing letters 
rs gerth rolf ulrich meyer norbert 
cache oblivious data structures algorithms undirected breadth search shortest paths 
february 
pp 
rs luca aceto willem jan fokkink anna ing bas 
split bisimilarity finite axiomatization ccs hennessy merge 
january 
pp 
rs goo peter mosses 
composing programming languages combining action semantics modules 
december 
pp 
appears science computer programming 
rs peter mosses 
pragmatics modular sos 
december 
pp 
invited published kirchner ringeissen editors algebraic methodology software technology th international conference amast proceedings lncs pages 
rs ulrich kohlenbach 
bounds iterations asymptotically quasi nonexpansive mappings 
december 
pp 
rs 
layer approach computability complexity real numbers 
december 
pp 
rs marius kim larsen brian nielsen 
online fly testing real time systems 
december 
pp 
rs kim larsen ulrik larsen brian nielsen arne skou andrzej 
trial project deliverables 
december 
pp 
