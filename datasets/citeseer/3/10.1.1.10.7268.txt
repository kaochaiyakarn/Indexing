measurement modeling analysis peer peer file sharing workload krishna gummadi richard dunn stefan saroiu steven gribble henry levy john zahorjan department computer science engineering university washington seattle wa gummadi gribble levy zahorjan cs washington edu peer peer file sharing accounts astonishing volume current internet traffic 
probes deeply modern file sharing systems forces drive 
doing seek increase understanding file sharing workloads implications multimedia workloads 
research uses tiered approach 
analyze day trace terabytes kazaa traffic collected university washington 
second develop model multimedia workloads lets isolate vary explore impact key system parameters 
model parameterize statistics trace lets confirm various hypotheses file sharing behavior observed trace 
third explore potential impact kazaa 
results reveal dramatic differences file sharing web traffic 
example show immutability kazaa multimedia objects leads clients fetch objects contrast world wide web client may fetch popular page cnn google thousands times 
demonstrate fetch behavior causes kazaa popularity distribution deviate substantially zipf curves see web deviation significant implications performance multimedia file sharing systems 
web workload driven document change demonstrate clients fetch behavior creation new objects addition new clients system primary forces drive multimedia workloads kazaa 
show substantial locality kazaa workload 
quantify potential bandwidth savings locality aware file sharing architectures achieve 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
sosp october bolton landing new york usa 
copyright acm 
categories subject descriptors performance systems modeling techniques computer communication networks distributed systems distributed applications general terms measurement performance design keywords peer peer multimedia workloads zipf law modeling measurement 
decade birth internet continues rapid surprising evolution 
studies shown dramatic shift internet traffic away html text pages images multimedia file sharing 
example march study university wisconsin bandwidth consumed napster edged ahead bandwidth 
years university washington study showed peer peer file sharing dominates campus network consuming bandwidth compared www traffic :10.1.1.127.6039
comparing bandwidth consumption statistics study similar campus workload portion network bytes ascribed audio video increased respectively year period 
question multimedia file sharing dominant factor today internet 
likelihood dominate internet barring effect legal 
traits today file sharing systems distinguish web content distribution 
current filesharing systems peer peer design peers voluntarily provide resources consume 
system dynamically adapt maintain service continuity individual peers come go 
second file sharing predominantly distribute multimedia files result file sharing workloads differ substantially web workloads :10.1.1.127.6039
multimedia files large megabytes gigabytes compared kilobytes typical web pages immutable currently far fewer distinct multimedia files web pages 
video demand vod systems distribute multimedia files contrast kazaa measurements analysis related vod systems section 
presents depth analysis modern multimedia file sharing workload considering peer topeer multimedia aspects workload independently 
goals 
understand fundamental properties multimedia file sharing systems independent design delivery system 
explore forces driving file sharing workloads anticipate potential impacts change 
demonstrate significant opportunity exists optimize performance current file sharing systems exploiting locality workload 
meet goals employ approaches 
analyze day trace kazaa traffic collected university washington may december 
traced terabytes traffic period distill key lessons kazaa workload 
second derive model multimedia traffic analysis 
model helps explain root causes trends shown kazaa predict trends may change workload evolves 
third trace driven simulation quantify significant potential exists improve performance multimedia file sharing environment 
analysis reveals kazaa workload driven considerably different forces web 
kazaa objects immutable result vast majority objects fetched client contrast web pages google cnn fetched thousands times client 
measurements show popularity distribution kazaa objects deviates substantially zipf curves commonly see web model confirms fetch behavior kazaa clients cause 
model demonstrates consequence object immutability web workload driven document change primary forces kazaa creation new objects addition new users 
forces fetch behavior drive system stagnation 
structure follows multi tiered approach cited 
section describes trace methodology presents trace analysis kazaa 
section analyze popularity distribution kazaa requests forces shape 
section uses observations analysis develop analytical model model explore processes drive kazaa behavior greater depth 
section considers performance potential bandwidth saving techniques suggested modeling analysis 
describe research related study section section summarizes results presents 

measured properties file sharing workloads section uses trace data identify key properties kazaa multimedia file sharing system 
stud trace length days hours minutes requests transactions unsuccessful transactions average transaction size kb transactions kb successful transactions users unique objects totaling tb bytes transferred tb content demanded tb table kazaa trace summary statistics 
transaction refers single kazaa transfer request refers set transactions client issues downloading object potentially pieces servers 
clients identified kazaa username 
statistics downloads university internal clients data university external peers 
ies described high level characteristics workloads :10.1.1.127.6039:10.1.1.13.1523:10.1.1.136.3479
goals section dig beneath high level studies uncover processes drive workloads demonstrate ways processes fundamentally differ web 
trace methodology data section day trace kazaa peer peer file sharing traffic collected university washington may th december th 
university washington uw large campus faculty students staff 
table describes trace saw terabytes incoming data resulting requests 
trace long observe seasonal traffic variations including spring quarter june summer months start fall quarter 
observed impact bandwidth rate limiting university networking organization midway trace attempt control cost kazaa traffic 
collected trace hardware software installed network border university internet 
hardware consists ghz pentium iii workstation monitored traffic flowing university internet 
workstation sufficient cpu network capacity ensure packets dropped peak load 
adjacent workstation acted terabyte file store archiving trace data 
software kernel packet filter deliver tcp packets user level process identified requests tcp flows 
trace packet filter reported packet drop rates 
sensitive information anonymous including ip addresses urls usernames object names compressing storing trace 
tracing analysis software consists lines code 
hardware monitored incoming outgoing traffic 
data including table direction requests university internal peers download data stored university imposed rate limits bounded upload traffic university population little effect download traffic university focus research 
external peers 
unidirectional trace captures requests issued stable complete user population period time 
kazaa control traffic consists primarily queries responses encrypted captured part trace 
term user refers person client refers application instance running behalf user 
assume largely correspondence users specific application instances environment may true draw users observations clients trace 
note client side caches may absorb requests users meaning client request rate observe trace may lower true user request rate directly observe 
kazaa clients supply kazaa specific usernames header transaction 
usernames ip addresses distinguish different users trace 
unfortunately unofficial version kazaa called popular tracing period compiled predefined username embedded application 
requests resorting distinguishing users ip addresses 
dhcp portions campus identifying users ip address known issues dhcp transactions trace clients :10.1.1.13.1523
furthermore clients appear days day trace 
kazaa file transfer traffic consists unencrypted transfers transfers include kazaa specific headers kazaa ip 
headers simple distinguish kazaa activity activity 
provide information identify precisely object transferred transaction 
client attempts download object object may downloaded pieces called chunks sources long period time 
define transaction single transfer client server request set transactions client participates download entire object 
failed transaction occurs client successfully contacts remote peer remote peer return data returning error code 
single request may span minutes hours days kazaa client software continue attempt download object long user asked 
occasionally client may download subset entire object user gives object permanently inaccessible middle request 
call partial request kazaa application auto update feature meaning running instance kazaa periodically check updated versions 
downloads new executable kazaa network 
chose filter auto update transactions logs representative multimedia requests users 
unofficial versions kazaa generic usernames appeared trace period finished precisely distinguishing peer peer users difficult ip addresses application specific usernames unique 
requests cdf mb objects mb objects mins hour day download latency week days users patient 
cdf object transfer times kazaa small mb large mb objects 
axis log scale 
filtering removed total transactions bytes trace 
user characteristics slice trace data focuses properties kazaa users 
previous studies shown peer peer users general greedy users consume data provide little return poor availability 
confirm characteristics explore user activity 
kazaa users patient web enterprise knows users sensitive page fetch latency 
certain small threshold measured seconds abandon site move possibly competing site 
reason online businesses engage services keynote tell quickly servers sufficiently responsive 
world web users expect instant gratification receive 
context behavior kazaa users surprising 
shows distribution transfer times kazaa transfer time defined difference start time transaction time transaction user request 
filtered partial requests counted transfers user eventually obtained entire object 
deal edge effects ignored requests transaction occurred month trace note tend result underestimate user patience 
results terms requests small objects mb typically audio files requests large objects mb typically video files 
show section natural representative way decompose workload 
results show incredible patience part kazaa users 
small objects requests take hour take nearly day 
large requests complete hour take day nearly users willing wait week downloads complete 
graph clear dynamics multimedia downloads differ totally web usage 
web interactive system users want immediate response 
kazaa batch mode delivery system downloads background tb requested tb requested population size week bytes requested population attrition function age 
older clients request smaller fraction bytes newer clients 
fewer old clients young clients attrition occurs gradual rate slowdown bytes requested 
content examined 
users wait content arrive 
go business eventually return review content received 
users slow age interesting question explored user interest kazaa varies time 
users content gain experience kazaa 
request rates relatively constant 
lose interest time 
answer questions significantly affects growth system 
understand user behavior time calculated average number bytes consumed clients function age 
methodology measurement complex trace finite length avoid effects short lived longlived users 
compensate counting transferred bytes clients births observe 
detectable birth events trace heuristic treating observed download client birth event full month elapsed trace seeing download 
compensate trace counted bytes clients born prior weeks trace 
threshold draw definitive clients behavior weeks lifetimes 
shows total number bytes requested population function age 
graph see older clients consume fewer bytes newer clients 
reasons effect attrition reduces number older clients clients may die leave system forever time clients may continue issue requests slower rate age 
explore turn 
attrition 
understand attrition system analyzed number clients remain alive function age shown 
population size declines gradual rate bytes requested weeks clients lifetimes 
attrition partially explains older clients demand aggregate system 
fully explain phenomenon clients slow request rates age 
slowing time 
older clients may slower population size data requested live client gb data requested probability request week client requests older clients slower request rates 
average clients system equally age having approximately chance system week request data session age 
note point corresponding new clients week artificially high definition new client requests object immediately 
request rates reasons may system may ask system 
shows clients equally system regardless age average clients chance making request week 
older clients slow ask time system system 
summary new clients generate load kazaa older clients consume fewer bytes age 
part attrition clients leave system permanently grow older 
older clients tend interact system constant rate ask interaction 
client activity quantifying availability clients peer peer system notoriously difficult metric accurately capture availability environment individual client exist fraction traced time period :10.1.1.13.1523
passive tracing methodology faced additional methodological problem detect users participating system clients transfer data downloading uploading files 
client line active observe 
report statistics client activity lower bound availability 
specific metrics quantify amount client transfer activity activity fraction measures fraction time client transferring content client lifetime duration entire trace average session length session defined unbroken period time client active transactions 
average session length measures typical duration periods client receiving transmitting data 
measurements indicate distributions average session length activity fraction measured population heavy tailed 
software designed difficult close program starts fooling users making clients available intended 
accordingly suggest client activity universally comparable stable indicator availability metrics 
cdf requests bytes consumed object size mb requests bytes requests bytes transferred object size mb bandwidth consumed vs object size 
cdfs total bandwidth consumed number requests generated function object size bandwidth consumed requests generated function object size grouped regions 
clients clients transfer activity fraction median lifetime th percentile activity fraction median trace th percentile total activity median hours hours trace th percentile hours hours average median mins mins session length th percentile mins mins table client session lengths activity fractions 
summary statistics different subsets client population clients clients transferred file 
show activity fraction summary statistics relative clients lifetimes entire trace 
table summarizes metrics 
average session lengths typically small median average session length minutes th percentile minutes 
clients high activity fractions relative lifetimes 
potentially misleading statistic clients short lifetimes leaving system permanently requesting file 
activity fraction clients greater request revealing statistic 
median client category active lifetime entire trace 
highly active clients category active lifetime clients typically active short fraction trace th percentile client activity fraction trace 
glance user patience statistics may appear odds average session length statistics 
median small object takes minutes download fully median average session length minutes 
apparent paradox reconciled facts transactions fail table producing short sessions periods activity may occur request client find available server object successful transactions short servers close connections prematurely chunk size requested small 
object characteristics turn attention characteristics requested objects 
kazaa objects consist mixture media types including audio video images executables :10.1.1.127.6039
trace captured requests different objects resulting transactions 
remainder section discuss prominent properties requested objects 
kazaa workload tend think system kazaa generating single workload kazaa better described blend workloads different properties 
shows percentage total bandwidth consumed trace function object size 
graph shows prominent regions small objects mb size medium sized objects mb size large objects close gb size 
relative web small objects orders magnitude larger average web object large objects nearly orders magnitude larger 
shown :10.1.1.127.6039
graphs percentage requests observed trace function object size demonstrating requests small objects 
closer look breaks number requests bytes transferred regions mb mb mb mb 
chose value mb corresponds obvious plateau serves upper bound size digitized audio clips 
chose value mb reasonable lower bound size digitized movies transferred 
majority requests objects smaller mb primarily audio clips majority bytes transferred due largest objects video files 
concern bandwidth consumption need focus small number requests large objects 
concern improve user experience focus majority requests small files despite relatively small bandwidth demand 
stark differences large small object workloads lead analyze behaviors independently evaluation follows 
overlap popular objects days trace newly popular objects born small objects large objects primarily audio primarily video top top top top table object popularity dynamics kazaa 
significant turnover set popular objects days days trace 
newly popular objects set popular objects days set days tend born 
kazaa object dynamics simple crucial difference multimedia web workloads multimedia objects immutable web pages 
obvious fact implications discussed research literature 
video clip meets clip tomorrow day changes 
hand web page cnn com may change hour access page personalized clients 
web workloads strongly driven dynamic content creation 
shown rate document change key factor internet behavior enormous implications caching performance content delivery general 
show immutability affects object dynamics 
kazaa clients fetch objects 
objects immutable take non trivial time download believe users typically download kazaa object 
traces confirm time kazaa client requests object time kazaa client requests object twice 
comparison web trace gathered days kazaa trace period web client requests object time 
popularity kazaa objects 
object immutability impact object popularity dynamics 
set popular pages remains relatively stable web pages account significant fraction accesses 
contrast popular audio video objects routinely replaced newly released objects weeks 
illustrate change popular kazaa objects compared days trace days trace 
day month long segments identified top popular top popular objects table 
small objects overlap top popular objects popular small objects changed completely space months 
large objects object common top segments 
top objects show small objects common segments objects common large objects 
popularity kazaa popular audio files tend lose popularity faster popular video files 
popular kazaa objects tend re born objects 
significant turnover popularity kazaa wanted understand objects popular old objects grown popularity time born objects enjoy sudden popularity 
month long segments calculated fraction objects newly popular top top month trace month trace receive requests month trace born month trace 
table shows results newly popular objects tend born kazaa true audio objects video objects 
requests old objects 
previous experiments confirmed popular objects tend decay popularity newly popular objects replace tend newly born 
related different question requests go old new objects 
categorize object old month passed observed request object 
categorize new month requested 
note sure object old sure object new may missed requests object trace began 
deal edge effects include month requests statistics help distinguish old new objects subsequent months 
methodology requests large objects go old objects go new objects 
small objects requests go old objects go new objects 
shows substantial fraction requests old objects 
large objects requested tend older small objects reinforcing assertion kazaa really mixture workloads pace life slower large objects small objects 
discussion clear forces driving kazaa workload differ ways driving web 
web users may download pages times kazaa users tend download objects 
arrival new objects plays important role file sharing systems changes existing pages important dynamic web 
discuss implications differences sections 
kazaa zipf written zipf qualities www 
fact researchers commonly quote zipf parameter popularity distributions seen traces part demonstrate results correct zipf property web access patterns thought basic fact nature small number objects extremely popular long tail unpopular requests 
zipf law states popularity ith popular object proportional zipf coefficient zipf parameter zipf distributions look linear plotted log log scale 
shows kazaa object popularity distribution log log scale large mb objects best fit zipf curve qualitatively similar curve exists small mb objects 
shows popularity distribution web objects drawn web trace 
www kazaa object request distribu requests www objects mb kazaa objects object rank kazaa zipf 
popularity distribution large objects flatter zipf predict popular object requested expected 
similarly shaped distributions exist small objects aggregate kazaa workload 
comparison show popularity distribution web requests subset kazaa trace period web described zipf 
tion observed trace follow zipf curve 
strongest difference zipf appears popular objects curves noticeably flatter zipf lines 
popular multimedia objects significantly popular zipf predict 
example trace shows popular large object requests objects requests 
popularity distributions web traffic slightly flattened heads objects flattened region account small percentage total requests bytes 
flattened portion kazaa popularity curve consists top objects objects account bandwidth consumed 
summary peer peer file sharing workloads driven considerably different processes web 
kazaa users patient web users waiting hours days cases weeks objects arrive 
median session length minutes transactions fail transactions short clients occasionally periods activity satisfying request 
kazaa clients age demand system 
part due attrition clients permanently leaving system part due older clients requesting fewer bytes session 
kazaa file sharing workload consists mixture large immutable audio video objects measured popularity distribution objects zipf 
popularity requested objects limited clients typically fetch objects web 
substantial non uniformity kazaa object popularity suggests caching potentially effective bandwidth savings tool 
kazaa object arrivals play important role web updates existing pages important dynamic 
section explore believe reasons kazaa workload appear follow zipf law 
compare kazaa non zipf behavior non zipf behavior systems including video demand servers web 
model multimedia workloads section model explore implications non zipf behavior 

zipf law multimedia loads previous studies multimedia workloads examined object popularity conflicting results noting zipf non zipf behavior :10.1.1.12.2253
section examines previous context goal explaining similarities differences causes behavior observed 
presenting hypothesis explains non zipf behavior kazaa 
discuss previous studies observed modeled non zipf workloads contrast hypothesis previous explanations 
attempt show generality claim revealing non zipf behavior previously studied workloads 
section supports hypothesis generative workload model output closely matches observations 
kazaa zipf previous section highlighted crucial difference web kazaa file sharing system kazaa objects immutable web objects change frequently 
observed section immutability kazaa objects causes important effects affecting user behavior object dynamics 
web clients fetch web page times fetch repeatedly 
contrast kazaa clients rarely request object twice fetch 
second web primary object dynamic updates existing pages 
contrast primary object dynamic kazaa workload arrival entirely new objects 
object user characteristics axes classifying systems immutable objects vs mutable objects fetch repeatedly clients vs clients 
systems large client side caches characteristics intimately linked behavior exists object updates web fetch user behavior exists object dynamic new arrivals kazaa system 
believe differences object user dynamics explain observed zipf request distributions measured web workload kazaa 
initial comparison fetch behavior simulated request distribution generated hypothetical user populations users fetch objects repeatedly fetch objects 
cases simulated initial zipf distribution zipf parameter objects 
fetch case prevented users making subsequent requests object 
section fully explains model simulation 
shows results users average requests 
fetch repeatedly behavior underlying zipf distribution fetch behavior shows markedly different results popular objects requested objects tail show elevated numbers requests 
behav requests fetch repeatedly fetch object rank simulated object popularity fetch repeatedly fetch behavior 
users fetch individual object resulting request distribution significantly flattened head approximating kazaa popularity distribution 
ior strikingly resembles measurement results shown confirming intuition fetch behavior key contributor non zipf popularity 
non zipf workloads systems non zipf popularity distributions observed previous studies 
compare results categories previous studies analyzed web workloads analyzed video multimedia workloads 
kazaa vs web workloads web studies conclude web popularity distributions follow zipf law studies observed non zipf behavior specifically workloads emerge traffic proxy cache :10.1.1.12.2253
web proxy caches design absorb requests popular documents consequently popular documents workload appear cold misses cache traces 
moderately popular documents occasionally absorbed proxy cache appear traffic capacity misses 
popular documents proxy cache assuming cache finite size hold entire object population 
result zipf workload fed shared proxy cache result non zipf popularity distribution flattened head visually similar non zipf distributions observed kazaa 
breslau derive equations relate zipf parameter workload fed proxy cache hit rate proxy cache experience 
proxy cache distributions may visually resemble measured kazaa popularity distributions believe workloads diverge zipf different reasons 
kazaa users requests flow shared proxy cache workload observed aggregate large number individual fetch streams absence shared proxy caches 
caches currently exist kazaa client side caches 
note practical difference true fetch user behavior fetch repeatedly user behavior filtered infinite client side caches resulting client behavior 
popular web object show time proxy cache trace 
popular object show times potentially times users fetch workload kazaa individual client caches 
result non zipf distributions different reasons 
kazaa vs multimedia workloads tang show streaming media server workloads exhibit flattened popularity distributions similar observed 
attribute flattened distribution long duration gathered trace 
hypothesis longer trace files similar popularity observed effect creating groups files similar properties 
zipf law appropriate describing popularity individual files show zipf law better describes popularity groups provide mathematical transformation inspired groups convert observed non zipf distributions zipf distribution 
believe fetch behavior cause non zipf popularity workload 
short trace cause non zipf workload appear zipf requests gathered trace objects similar popularity observed 
fact adequate sample size reveal non zipf workload explain true workload non zipf place 
length trace provide satisfactory explanation forces driving popularity system 
fetch behavior partially provides explanation 
additionally system experiences object births example new video objects available short trace may important birth events 
longer trace may reveal objects spread time equivalent short term popularity similar group effect tang proposed 
study almeida observe flattened zipf popularity distribution educational media server 
propose distribution described concatenation true zipf distributions 
data appears modeled zipf distributions study provide explanation causes effect 
studied multimedia workload video demand vod servers 
vod researchers frequently zipf distributions model popularity video documents systems 
surprisingly researchers appear base zipf assumption results published single data set week rental data video store 
results suggest workload requests immutable video objects reveal similar non zipf behavior stemming fetch client behavior 
understand apparent discrepancy assumptions results manually extracted video rental data set 
show data appeared plotted linear scale zipf curve fit 
shows data plotted log log scale zipf curve fit 
linear scale plot suggest data may described zipf law log log plot reveals data set appears show flattened head characteristic fetch systems 
gathered box office movie ticket sales data 
figures show data consistent rental frequency box office sales millions movie index movie index box office sales millions rental frequency movie index movie index video rental box office sales popularity 
popularity distribution video rental data set justify zipf law video demand papers zipf curve fit data set curve fit plotted log log scale 
contrary assumption papers video rental data appear follow zipf law 
distribution box office ticket sales linear scale zipf fit log log scale 
data set appears non zipf 
fetch popularity distribution 
vod community begun recognize importance object births video demand systems 
new video titles created high popularity popularity existing video titles tends diminish time vod workload models starting incorporate schemes changing popularity distributions time 
consistent earlier observations client object birth rates important factors multimedia workloads 
section model fetch systems 
model demonstrate implications resulting non zipf behavior explore importance client object birth rates system performance 
believe model relevant file sharing video demand systems 

model file sharing workloads previous section hypothesized non zipf behavior kazaa multimedia workloads general best explained fetch behavior clients 
section presents model file sharing systems enables explore hypothesis 
model generate previous section captures key parameters file sharing workload request rates number clients number objects changes set clients objects 
parameters produces stream client requests objects analyze 
varying model parameters explore underlying processes lead certain observable workload characteristics changes parameters affect system performance 
remainder section describes basic model file sharing system 
model shows impact symbol meaning base value clients objects user request rate objects day zipf parameter driving object popularity probability user requests object popularity rank probability newly arrived object inserted popularity rank cache size measured fraction objects zipf see text zipf varies object arrival rate varies client arrival rate varies table model structure notation 
parameter settings reflect values seen trace large mb objects 
fetch behavior object popularity 
caching lens observe addition new objects new clients affects performance file sharing system 
validate model comparing popularity distributions workload extracted trace data 
model description table summarizes parameters model 
chose parameter values reflect trace measurements large objects component dominates bandwidth consumption 
parameter value differs measured trace number clients 
order run substantially larger number experiments model sys tem clients roughly clients trace 
verified predictions model affected difference 
simplify model assumed objects system equal size 
model captures key aspects file sharing workload particular differences file sharing web workloads 
web workload clients select objects zipf distribution independent identically distributed fashion 
contrast object selection process file sharing system depends factors zipf distribution way new objects inserted distribution clients fetch behavior 
model generates requests follows 
average client requests objects day choosing object fetch zipf probability distribution parameter zipf 
hypothesize underlying popularity objects fetch file sharing system driven zipf law observed workload non zipf fetch clients 
model subsequent requests client obey distributions obtained removing fetched objects candidate object set re scaling total probability 
previously objects ratio probabilities client request objects identical ratio original zipf distribution 
fetch repeatedly systems request original zipf distribution 
modeling fetch systems object arrival rate 
object born fetch atmost system popularity rank determined selecting randomly zipf distribution 
pre existing objects equal lesser popularity pushed zipf position resulting distribution re normalized total probability 
fetch repeatedly systems set object arrival rate 
objects may updated simplicity ignore second order effect completely new objects request behavior 
trace shows requested objects observe total object population available objects accessed 
total object population key parameter model influences amount overlap occur requests different clients 
estimated base value total object population back inference large objects existed total saw distinct large objects requested trace 
find total population large media objects consistent trace data number base value 
number comparable statistics describe commercial movie releases internet movie database reports movie releases world wide past years 
quantify file sharing effectiveness hit rate aggregate workload experiences available shared cache lru replacement size vary experiment 
selected experiments optimal replacement showed qualitative differences lru results quantitative differences varied percent 
web fetch repeatedly scenarios attempting best fit zipf curve measured non zipf distribution resulted zipf parameter 
hit rate fetch fetch repeatedly days file sharing effectiveness diminishes client age 
initial cache warm period request stream generated fetch client behavior experiences rapidly decreasing cache performance stream generated fetch repeatedly clients remains stable 
effect shown various cache sizes objects 
optimistic assumption objects updated 
file sharing effectiveness diminishes client age imagine organization experiencing current demand external bandwidth due fetches file sharing objects 
organization expect bandwidth demand change time shared proxy cache 
address question static case new clients objects arrive 
static analysis allows focus factor time fetch behavior case 
relax assumptions subsections show impact factors new object client arrivals 
shows hit rate time various shared cache sizes assuming time zero clients fetched objects 
brief cache warm period hit rate decreases clients age cache hold file sharing objects 
fetch clients consume popular objects early 
requests selected nearly uniform likelihood increasingly large number objects 
system evolves locality objects chosen random large space 
behavior suggests client request rates remain constant time external bandwidth load increases requests directed objects available externally 
conversely hope stable bandwidth demand time clients behave way reduces intensity requests manner consistent shape hit rate decreases shown 
decrease hit rate time strong property fetch behavior 
underlying popularity distribution need heavy tailed occur 
performed experiments initial object popularity distributions higher locality zipf parameters larger 
fetch repeatedly context larger skew distributions popular objects file sharing easier hit rates rise 
fetch systems hit rates start higher clients age hit rate cache size cache size cache size cache size cache size object arrivals user request object arrivals improve performance 
cache hit rates improve new object arrival rates clients replenish supply popular objects 
improvement shown varying cache sizes objects 
axis shows global object arrival rate relative average client request rate 
average client requests day point implies new objects arrive globally day 
fall sharply 
file sharing system evolves way increases popularity requested objects hit rate existing clients existing objects decrease zero clients age 
new object arrivals improve performance decay hit rate client age explains surprising characteristic file sharing systems web performance suffers due object updates object arrivals beneficial file sharing system 
arrivals replenish supply popular objects source file sharing hits 
shows effect 
repeated previous simulation time introduced non zero object arrival rate 
realistic range arrival rate hit rates increase approaching maximum hit rate equivalent fetch repeatedly system 
parameters set base values model clients average requests day object arrival rate small twelve new objects introduced worldwide day compensates nearly loss due client aging 
arrival new objects file sharing system important force fetch behavior 
new popular objects choose existing clients quickly exhaust set popular objects forced choose remaining heavy tail unpopular objects 
infusion new objects workload fetch atmost system loses locality time 
new clients stabilize performance new clients higher hit rates old clients possible new clients joining file sharing system compensate performance loss due aging existing clients 
infusion new clients may limit object arrival rate high cache hit rate goes back zero objects arrive fast displaced newer objects client requests 
hit rate constant client arrival rate constant hit rate days client arrival rate clients day client arrivals stabilize performance 
constant client arrival rate hit rate decreases time 
maintain constant hit rate client arrival rate increase exponentially time 
equivalent force infusion new objects 
unfortunately practical sense turns case 
shows different results 
examine hit rate time new clients introduced constant rate 
initially new clients bring hit rate eventually constant arrival rate compensate increasing numbers old clients 
second shows estimate arrival rate needed keep hit rate constant system ages 
arrival rate line improves average hit rate allows decrease 
break arrival rate rises steeply time steeply realized practice short period 
plus fact bandwidth requirement increases proportion population size hit rate stable leads conclude new clients compensate hit rate penalty clients aging file sharing system 
model validation primary goal model capture peculiar characteristics fetch systems importance new object client arrivals 
confident aspects model assumptions validated trace data 
example assume client requests governed zipf distribution object arrivals obey variant zipf law terms placed popularity distribution 
directly verify assumptions verify observed behavior trace consistent model 
validated model replicate object popularity distribution measured trace 
parameterized model trace data extent possible compared popularity distributions generated model simulation observed trace 
emphasize driving simulation detailed trace simply getting put 
simulation driven synthetically model rate size parameters set average values measured trace 
set distributional parameters obtained trace values shown table 
possible set arrival rate new objects confidence trace data trace requests measured fetch modeled fetch repeatedly modeled object rank predicted versus measured object popularity 
popularity curves model actual trace data match remarkably 
supports conjecture measured popularity distribution non zipf fetch behavior 
measure worldwide new objects 
reason leave object arrival rate free parameter adjusting obtain tight correspondence model measured data possible 
shows results 
set new objects year popularity distribution predicted model remarkably close observed 
clearly deviates zipf influence fetch behavior object arrivals 
value reasonable comparison internet movie database tracked approximately new objects worldwide 
summary section developed model file sharing behavior client requests underlying zipf distribution 
model analysis shows 
fetch client behavior caused immutability objects file sharing systems leads significant deviation zipf popularity distributions 

result new objects clients file sharing system performance decreases time bandwidth demands rise client requests slide zipf curve 
new objects file sharing systems acts force counter balances impact fetch client behavior 

introducing new clients similar effect counteract hit rate penalty client aging occurs rate 
section examines scheme reducing external bandwidth consumption predicted model shown measurements 

exploring locality aware request routing previous studies shown significant fraction internet bandwidth consumed kazaa file sharing traffic :10.1.1.127.6039
result organizations curb filesharing bandwidth consumption shaping filtering bytes transferred objects large objects small objects bandwidth savings ideal proxy cache 
graph shows byte hit rate simulated ideal cache infinite capacity bandwidth 
tools 
section explores alternative strategy exploitation locality file sharing workload 
locality exploitation mean effective content available organization substantially decrease external bandwidth usage 
cache simulation show potential locality exploitation explore benefits locality aware file sharing request routing organization university 
measuring locality workload common technology capturing locality internet workload proxy cache placed organizational border 
proxy guarantees object downloaded organization cold additional requests previously downloaded object satisfied proxy consuming external bandwidth 
simulating ideal cache infinite capacity bandwidth gives upper bound bandwidth savings locality aware mechanism cache captures serves content transferred organization 
graphs byte hit rate ideal centralized proxy cache trace workload 
objects proxy cache result external bandwidth savings 
uw environment implies downloaded bytes existed clients time downloaded clients 
clear substantial locality exists kazaa workload kazaa exploit 
university deployed internal proxy cache file sharing content save substantial bandwidth money 
practice departments may wish support cache stores file sharing content current legal political problems 
reason explore alternative deployment centralized proxy cache organization mechanisms reducing external downloads 
schemes favor organization internal peers possible serve data effectively creating distributed cache local peers 
potential implementations locality aware architecture including 
centralized request redirection deploying cache organization deploy redirector boundary 
redirector index locations objects peers organization route internal clients requests inter hit nal peers possible 
redirector transparent file sharing protocols 

decentralized request redirection today file sharing systems employ supernodes distinguished peers index content peers 
current architectures kazaa data shows 
topological distance estimation techniques gnp idmaps king may possible supernodes locality awareness resulting fully distributed redirection architecture 
sections trace simulation assess potential benefits locality aware mechanisms 
methodology trace simulation evaluate locality aware scheme requests clients university washington redirected possible university peers 
simulated locality aware mechanism ideal perfect knowledge peers currently objects peer willing serve 
assume peers infinite storage capacity peer downloads object object available peers peer serve concurrent downloads number chosen approximate behavior file sharing systems including kazaa gnutella 
model peer finite upload bandwidth kb shared peer concurrent uploads external transfer bandwidth kb values approximate typical values saw trace 
verified qualitative results experiments differ wide range simulated internal external bandwidth settings 
proxy cache locality aware mechanism directly control availability content 
relies peers content available 
result object exists local peer object unavailable peer disconnected 
effectiveness limited object availability 
crucial importance availability provide lower bound benefits locality awareness making extremely conservative assumption peers available servers periods trace shows actively transferring objects 
reality peers available simulate locality aware architecture able achieve performance benefits show 
rest section explores locality aware scheme internal peers realize object availability external bandwidth savings competitive dedicated centralized proxy cache 
benefits locality awareness shows external bandwidth savings ideal locality aware scheme obtain 
chart accounts bytes downloaded internal peers broken hits successfully redirected internal peers misses requiring external bandwidth 
chart shows locality awareness obtains impressive byte hit rate large objects byte hit rate small objects saving tb tb bytes transferred busy busy busy objects large objects small objects cold busy unavailable hit bandwidth savings ideal locality aware request redirection 
graph accounts bytes transferred peers ideal locality aware scheme 
request hits available local host serve 
misses downloads external host 
misses may cold misses busy misses object exists locally available hosts busy unavailable misses object exists locally hosts available 
requests requests byte hit rate object sorted popularity correlating byte hit rate popularity large objects 
hit rate popularity appear related popular objects naturally replicated leading high byte hit rate 
external traffic respectively 
savings occur despite extremely conservative estimates peer availability 
cold misses result unavoidable external bandwidth consumption account large object bytes small object bytes 
busy misses object exists available internal peer peer serving maximum number concurrent transfers insignificant 
large small objects substantial number bytes attributable unavailable objects objects exist local peers unavailable request occurs 
locality aware mechanism avoid misses techniques data replication placement reduce rate large objects small objects 
accounting hits misses understand objects account unavailability misses explored relationship hit rate object experiences object popularity 
shows byte hit rate large object experiences plotted graph object popularity see similar results small objects 
popularity related byte hit rate popular object object naturally replicated file sharing system 
byte hit rate bytes cdf bytes served bytes consumed peers ranked availability highly available peers carry load 
cdf bytes served bytes consumed peers locality aware mechanism peers sorted availability large objects 
bytes served consumed come highly available peers 
result popular objects enjoy higher hit rates 
fact locality aware scheme spite conservative peer availability model surprised 
understand happened generated cdf bytes served peers peers sorted availability 
graph shows bytes served highly available peers bytes served available peers 
show cdf bytes consumed peers graph 
expected highly available peers tend consume bytes system serving 
highly available peers objects available peers reason may serving bytes 
intuitive available peers serve bytes 
conceivable set available peers able provide adequate object availability 
evaluate re ran simulation attempting spread load different subsets peer population 
concentrated load available peers including head excluding tail line shows redirector hit rate function number peers permitted serve bytes selecting highly available peers inclusion group 
concentrated load available peers excluding head including tail line shows hit rate function number peers excluded serving bytes excluding highly available peers 
results indicate highly available peers necessary sufficient obtain high hit rates 
top available peers served bytes obtain hit rate 
excluded top available peers relied available peers hit rate drop 
benefits increased availability explore impact conservative estimates availability results re ran simulations artificially augmenting availability peers 
added constant number hours availability population increase average peer availability explored spreading extra availability population different ways 
added availability available peers population preferentially adding avail byte hit rate including head excluding tail excluding head including tail peers included head ranked availability spreading load 
including head excluding tail line shows locality aware performance load concentrated available peers excluding head including tail line shows performance available peers excluded serving content 
data large objects 
byte hit rate improve head base availability trace improve tail improve uniformly availability relative entire trace hit rate vs availability 
effect increased average peer availability byte hit rate 
improve head line shows effect increasing availability available peers improve tail line shows effect increasing availability available peers improve uniformly line shows effect increasing availability uniformly peers 
data large objects 
able peer peer available adding available peer results shown improve head line 
added availability available peers similar methodology improve tail line 
spread availability population uniformly peers improve uniformly line 
results show impact hit rate depends hosts available 
adding extra hour availability available host pays higher hit rate dividend adding hour available host 
believe available hosts files available shown 
summary section demonstrates tremendous amount locality kazaa workload 
result large percentage externally downloaded bytes workload avoided organizational proxy 
alternative proxy caching trace driven simulation explore locality aware mechanisms reduce external bandwidth consumption maximizing content stored local peers 
results show conservative availability assumptions locality aware file sharing protocol organizational redirector achieve significant bandwidth reductions environment 

related measurement studies characterized basic properties peer peer file sharing systems 
saroiu analyzed behavior peers inside gnutella napster file sharing systems showing significant heterogeneity peers bandwidth availability transfer rates 
study backbone traffic confirmed results revealed significant skew distribution traffic ip addresses subnets autonomous systems 
bhagwan measured availability hosts overnet file sharing system understand impact ip aliasing measurement methodology :10.1.1.13.1523
performed cache study measurements fasttrack systems including kazaa 
studies explored host dynamics peer peer networks affect performance reliability 
kazaa trace substantially longer time period peer peer file sharing studies allows draw long term behavior 
distributed systems networks complex behavior researchers sought find high level trends summary statistics capture essential properties workloads 
breslau explore impact zipf law respect web caching showing popularity distributions cause cache hit rates grow logarithmically population size effects :10.1.1.12.2253
perform similar analysis demonstrating kazaa traffic exhibit zipf behavior resulting impact caching 
crovella bestavros argue factors converge cause self similarity web traffic including document size distributions caching user think time similar spirit show fetch behavior leads flattening zipf curve 
researchers proposed models web filesharing systems 
barford crovella proposed generative model web traffic behavior web clients 
ge proposed analytical model file sharing networks explore impact system performance model focuses query characteristics trace driven 
wolman derived analytical model web systems explore web caching performance scales population size demonstrate limits cooperative web caching 
proposed model file sharing traffic fetch client behavior rate objects clients join system 
wolman study shows web caching ultimately limited rate change documents study shows file sharing performance ultimately limited birth rates objects clients 
request redirection explored context content distribution networks wang show redirection strategies affect load balancing locality proximity 
consider effective ness request redirection different scale organizations explore different goals cache performance 

peer peer file sharing dominates sources traffic internet basic forces drive workload poorly understood 
analyzed day trace kazaa file sharing traffic collected university washington order dig deeper nature file sharing workloads 
results show file sharing workloads driven considerably different processes web 
kazaa batch mode system extremely patient users wait days weeks objects fully download 
kazaa clients age demand system partially attrition 
objects kazaa users exchange large immutable video audio objects causing typical client fetch object 
popularity kazaa objects changes time popularity tends short lived popular objects tend born 
results conclude client births object births fundamental processes driving filesharing workloads contrast web largely driven changes objects 
demonstrated fetch atmost behavior clients causes aggregate popularity distribution objects kazaa deviate substantially zipf curves typically see web 
demonstrated significant locality kazaa workload substantial opportunity caching reduce wide area bandwidth consumption 
evaluated impact topological proximity awareness kazaa simulating ideal version system nearby clients act distributed cache kazaa objects 
extremely conservative trace driven estimates client availability simulation results cache hit rate population 
deployed environment university traced distributed cache achieve substantial traffic savings 

wish brian helped tracing infrastructure david richardson art dong members computing communications organization university washington continued support 
guidance shepherd john wilkes anonymous reviewers invaluable 
gratefully acknowledge tom anderson brian bershad azer bestavros jeff chase mark crovella peter druschel anna karlin scott shenker andrew whitaker feedback discussions sharpened research presentation results 
material supported national science foundation itr ccr gift intel 

acharya smith 
characterizing user access videos world wide web 
proceedings acm spie multimedia computing networking january 
adar huberman 
free riding gnutella 
monday october 
www firstmonday dk issues issue adar 
almeida krueger eager vernon 
analysis educational media server workloads 
proceedings th international workshop network operating systems support digital audio video port jefferson ny june 
almeida fonseca jr 
analyzing behavior proxy server light regional cultural issues 
proceedings third international www caching workshop manchester england june 
hermes ja net events workshop 
barford crovella 
generating representative web workloads network server performance evaluation 
proceedings acm sigmetrics madison wi june 
bhagwan savage voelker :10.1.1.13.1523
understanding availability 
proceedings nd international workshop peer peer systems berkeley ca december 
breslau cao fan phillips shenker 
web caching zipf distributions evidence implications 
proceedings ieee infocom march 

characterizing locality evolution life span accesses enterprise media server workloads 
proceedings th international workshop network operating systems support digital audio video miami beach fl may 
crovella bestavros 
self similarity world wide web traffic evidence possible causes 
ieee acm transactions networking december 
dan sitaram 
scheduling policies demand video server batching 
proceedings acm multimedia october 
douglis feldmann krishnamurthy mogul 
rate change metrics live study world wide web 
proceedings usenix symposium internet technologies systems dec 
doyle chase gadde vahdat 
trickle effect web caching server request distribution 
proceedings sixth international workshop web caching content delivery boston ma june 
francis jamin jin jin raz shavitt zhang 
idmaps global internet host distance estimation service 
ieee acm transactions networking october 
gadde chase rabinovich 
web caching content distribution view interior 
proc 
th international web caching content delivery workshop may 
ge figueiredo kurose towsley 
modeling peer peer file sharing systems 
proceedings infocom santa fe nm october 
bar wolf 
long term movie popularity models video demand systems 
proceedings acm multimedia seattle wa november 
gummadi saroiu gribble 
king estimating latency arbitrary internet hosts 
proceedings second sigcomm internet measurement workshop marseille france november 
hua sheu 
skyscraper broadcasting new broadcasting scheme metropolitan video demand systems 
proceedings acm sigcomm cannes france september 
kazaa 
homepage www kazaa com july 
keynote systems homepage www keynote com july 
taylor seltzer 
self organization peer peer systems 
proceedings sigops european workshop st france september 
bergman ben shaul shavit 
file swapping networks cacheable 
characterizing traffic 
proc 
th int 
www caching workshop august 
liben nowell balakrishnan karger 
analysis evolution peer peer networks 
proceedings acm conference principles distributed computing monterey ca july 
mccanne jacobson 
bsd packet filter new architecture user level packet capture 
proceedings winter usenix conference pages 
ng zhang 
predicting internet network distance coordinates approaches 
proceedings ieee infocom newyork ny june 
nielsen august 
www nielsen com 
padmanabhan qiu 
content access dynamics busy web site findings implications 
proceedings acm sigcomm august 
plonka 
university wisconsin madison napster traffic measurement march 
available net doit wisc edu data napster march 
saroiu gummadi dunn gribble levy :10.1.1.127.6039
analysis internet content delivery systems 
proceedings fifth symposium operating systems design implementation osdi boston ma december 
saroiu gummadi gribble 
measurement study peer peer file sharing systems 
proceedings multimedia computing networking mmcn january 

distribution video demand residential networks 
lecture notes computer science 
sen wang 
analyzing peer peer traffic large networks 
proceedings second sigcomm internet measurement workshop marseille france november 
tang fu vahdat 
long term streaming media server workload analysis modeling 
technical report hpl hp laboratories january 
internet movie database august 
www imdb com 
video store magazine march 
published communications www com 
wang pai peterson 
effectiveness request redirection cdn robustness 
proceedings fifth symposium operating systems design implementation osdi boston ma december 
wolman voelker sharma cardwell brown karlin levy 
organization analysis web object sharing caching 
proceedings nd usenix symposium internet technologies systems oct 
wolman voelker sharma cardwell karlin levy 
scale performance cooperative web proxy caching 
proceedings th acm symposium operating systems principles dec 
