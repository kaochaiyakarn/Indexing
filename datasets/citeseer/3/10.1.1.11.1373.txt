brics rs reynolds meaning types intrinsic extrinsic semantics brics basic research computer science meaning types intrinsic extrinsic semantics john reynolds brics report series rs issn december copyright john reynolds 
brics department computer science university aarhus 
rights reserved 
reproduction part permitted educational research condition copyright notice included copy 
see back inner page list brics report series publications 
copies may obtained contacting brics department computer science university aarhus ny munkegade building dk aarhus denmark telephone telefax internet brics brics dk brics publications general accessible world wide web anonymous ftp urls www brics dk ftp ftp brics dk document subdirectory rs meaning types intrinsic extrinsic semantics john reynolds department computer science carnegie mellon university definition typed language said intrinsic assigns meanings typings arbitrary phrases ill typed phrases meaningless 
contrast definition said extrinsic phrases meanings independent typings typings represent properties meanings 
simply typed lambda calculus extended recursion subtypes named products give intrinsic denotational semantics denotational semantics underlying untyped language 
establish logical relations theorem semantics show logical relations bracketed retractions domains semantics 
results derive extrinsic semantics uses partial equivalence relations 
di erent ways giving denotational semantics programming language formal language nontrivial type system 
intrinsic semantics phrases satisfy typing judgements meanings 
meanings assigned typing judgements phrases phrase satisfies judgements meanings 
example consider simply typed functional language 
corresponding typing judgement int int intrinsic meaning identity function integers corresponding research supported part national science foundation ccr 
research carried productive visits brics basic research computer science www brics dk centre danish national research foundation aarhus denmark september november may june 
shorter simpler version report products subtyping omitted single primitive type appear essays programming methodology edited mciver carroll morgan copyright springerverlag rights reserved 
judgement bool bool intrinsic meaning identity function truth values 
hand satisfy typing judgement intrinsic meaning 
contrast extrinsic semantics meaning phrase untyped language regardless typing properties 
view typing judgement assertion meaning phrase possesses property 
example extrinsic meaning identity function universe values occur computation 
simple case integers booleans regarded members universe judgement int int asserts function maps integer integer judgement bool bool asserts function maps truth value truth value 
terms intrinsic extrinsic author chapter concepts older 
intrinsic view associated church called ontological leivant 
extrinsic view associated haskell curry called semantical leivant 
report consider denotational semantics typed callby name language primitive types functions named products subtyping recursion definitions values types 
give intrinsic semantics untyped semantics relate logical relations theorem 
define pairs domain specified type intrinsic semantics universal domain untyped semantics show pairs bracket logical relations 
result derive extrinsic semantics type denotes partial equivalence relation universal domain 
course report variety notations functions 
function write dom domain 

distinct write 
function domain dom 
maps arguments special case empty function write 

write composition functions diagrammatic order identity function domain assume function application left associative abbreviates syntax typing rules defining syntax type system illustrative language metavariables decorations range denumerably infinite sets syntactic entities identifiers phrases primitive types types type assignments 
identifiers variables field names 
write denote set identifiers 
language extension lambda calculus phrase may variable abstraction application 
operations constructing record named tuple selecting field record corresponding field name 

concrete representation phrase abstractly function set 
field names maps subphrase implies field names distinct permuting pairs change phrase 
addition fixed point expression defining value recursion conditional expression branches truth value choose evaluating di erent subexpressions primitives typical constants operations integers truth values true false primitive types types type assignments defined grammar int nat bool rcd 
abstractly type assignment record constructor function domain set 
case identifier mapped type identifiers distinct permuting pairs change type assignment 
informally primitive types int nat bool denote sets integers natural numbers nonnegative integers truth values respectively denotes set functions map values type values type rcd 
denotes set records fields named 
field named value type types formula subtype judgement read subtype 
valid subtype judgements defined inference rules judgements proved rules 
rules asserting preorder rules primitive types nat int nat bool 
informally implicit conversion natural numbers integers identity injection implicit conversion natural numbers truth values maps zero false positive numbers true 
recommend subtyping primitive types real programming language report illustrate variety implicit conversions possible 
instance conversion nat bool injective 
function types words type constructor antimonotone left argument monotone right argument 
rule record types describes implicit conversion fields forgotten remaining fields implicitly converted rcd 
rcd 
notice pairs permuted 
subset 

example unnecessarily complex proof subtype judgement written tree inferences rcd nat bool int nat rcd int nat nat nat int nat bool int nat nat bool nat int rcd int nat nat rcd nat bool int rcd nat bool int nat rcd nat bool int 
type assignment phrase type formula typing judgement briefly typing read type 
valid typing judgements defined inference rules 
subsumption rule captures syntactic essence subtyping subtype phrase type context requiring phrase type lambda calculus record operations fixed point expressions conditional expressions standard inference rules 
rules rely fact type assignments functions identifiers 
dom 

rcd 
rcd 
bool 
large number rules primitive constants operations form op 

treat rules uniformly prefix form primitive operations regard constants zero ary operations 
rule form say 
signature operator op 
giving individual rules explicitly list operator signatures operator signatures 
nat true false bool nat nat nat int int int bool bool bool int int int int int bool bool bool 
overloaded act truth values numbers intent act 
extreme act truth values general map natural numbers natural numbers 
intrinsic semantics give intrinsic denotational semantics illustrative language define meanings types type assignments subtype judgements typing judgements 
specifically give type domain values appropriate type assignment domain environments appropriate valid subtype judgement strict continuous function called implicit conversion valid typing judgement continuous function called meaning respect 
define predomain poset upper bounds increasing chains domain predomain element denote 
fact domains scott domains nonempty partially ordered sets directed complete bounded complete algebraic countably fact 
continuous function preserves upper bounds increasing chains strict preserves elements 
follows write sets integers natural numbers truth values respectively denumerable sets regarded discretely ordered predomains 
write domain obtained predomain adding new element 
predomain domain write pointwise ordered domain continuous functions meanings types type assignments defined induction structure definition types type assignments domains int nat bool rcd 



set right final equation cartesian product indexed identifiers 
domain ordered componentwise 
hand meanings subtype typing judgements defined induction structure proofs judgements 
specifically inference rule give semantic equation expresses meaning proof final inference instance rule terms meanings immediate subproofs 
write equations succinctly write denote proof judgement example corresponding inference rule subsumption semantic equation asserts meaning proof final inference instance subsumption rule functional composition meanings immediate subproofs 
proceeding warn reader illustrative language rich judgement may significantly di erent proofs nat nat nat nat nat nat nat nat nat nat nat bool nat nat nat nat nat bool nat nat nat nat nat bool nat nat bool 
intrinsic semantics sense take meaning proof judgement meaning property coherence definition intrinsic semantics said coherent proofs judgement meaning 
fact see section intrinsic semantics coherent 
fact depends critically details language design especially semantics implicit conversions overloaded operators signature chapter 
meanings subtype judgements defined semantic equations nat int nat bool true false rcd 
rcd 



semantic equations typing judgements variables functions records fixed point expressions conditional expressions equation subsumption earlier give meanings standard call name language 


rcd 

rcd 
rcd 
bool bool bool true bool false 
semantic equations primitive constants operations general form op 
op 
op 
suppose 
sets domain function subset function 


called componentwise strict extension 
special case constant function singleton domain particular interpretations primitive constants operations componentwise strict extensions standard functions function componentwise strict extension nat 
nat 

bool true 
true bool false 
false nat addition natural numbers int addition integers bool disjunction truth values nat multiplication natural numbers int multiplication integers bool conjunction truth values int subtraction integers bool equality integers bool ordering integers bool bool negation truth values 
untyped semantics consider untyped semantics illustrative language 
independently type system phrase possesses unique meaning mapping environments values environments map variables identifiers values values range universal domain 
vital untyped semantics call name rich contain representations typed values intrinsic semantics previous section 
conditions fully determine untyped semantics 
general specify particular universal domain simply state properties su cient development 
fact properties hold variety untyped call name models illustrative language 
specifically require domains integers viewed primitive values continuous functions viewed functional values environments viewed record values embeddable pairs continuous functions embedding retraction pair composition identity function embedded domain 
embedding retraction pairs straightforward give semantic equations defining untyped semantics variables functions records fixed points 



note records finite number fields represented records infinite number fields 
come conditional expressions encounter problem 
untyped viewpoint primitive values integers describe conditional expression branches argument understand integers represent truth values 
fact formalize section false represented zero true represented positive integer truth value represented negative integer 
leads semantic equation 
continuous function uuu 
want constrain untyped semantics necessary establish proper relationship intrinsic typed semantics 
semantic equations primitive constants operations general form op 
op 
op particular function componentwise strict extension 


true 
false 
addition integers multiplication integers subtraction integers eqint 
state necessary properties eqint eqint eqint 
note hold 
logical relations task connect intrinsic untyped semantics means type indexed family relations members family called logical relations 
informally means value type represented untyped value 
logical relations connect intrinsic typed semantics idea works just connect intrinsic untyped semantics 
relations defined induction structure type 
ects particular choice primitive types useful define primitive logical relations definition primitive types primitive logical relations int nat bool true false 
definition types logical relations 

rcd 

explicate logical relations domain theoretic properties necessary deal recursion definition relation domains strict chain complete increasing sequences lemma primitive types primitive logical relations strict chain complete 
proof 
definition immediate 
suppose increasing sequences respectively 
flat domains su ciently large 
proof lemma types logical relations strict 
proof 
note embedding retraction pair monotone continuous identity 
strict function 
main proof induction structure 
suppose primitive type 

strict function strict relation 
suppose increasing sequences respectively 
monotone increasing sequence continuous chain complete 
suppose strict 
element domain functions constant function yielding 
induction hypothesis holds 
suppose increasing sequences respectively 

function application monotone increasing sequences 
continuous upper bound functions distributes application induction hypothesis gives holds 
suppose rcd 



products ordered componentwise strict induction hypothesis gives 
holds 
rcd 

suppose 
increasing sequences rcd 
respectively 
rcd 

component selection function application monotone increasing sequences 
continuous upper bound functions distributes application induction hypothesis gives 
holds upper bounds products taken componentwise 

rcd 

proof establish connection subtyping logical relations theorem proof subtype judgement 
proof 
induction structure proof 
suppose 
suppose 
induction hypothesis induction hypothesis 
suppose nat int nat satisfies definition member int 
follows int 
suppose nat bool true false 
nat equation displayed implies true false satisfies definition member bool 
follows bool 
suppose 
suppose 
induction hypothesis 
induction hypothesis holds 
suppose rcd 
rcd 



suppose 
rcd 

induction hypothesis gives 
holds 

rcd 

proof establish signature primitive operator applying typed untyped interpretations operator related arguments yield related results type dependent notion related primitive logical relations lemma suppose 
signature op 

op 
op 

proof case analysis signature operator leave tedious details reader 
connection arithmetic boolean operations justifies cases signature bool bool bool suppose holds holds 
establish central result 
essentially asserts related environments typed untyped meanings expression give related values type dependent notion related logical relations theorem logical relations theorem suppose proof typing judgement dom 
dom 

proof 
induction structure proof 
precisely prove induction depth assumptions hold holds 
cases abstractions 
induction hypotheses applied values theorem proved 
abstractions exception binding construction language 
suppose final inference instance subsumption rule 
renamed metavariables interchanging 
assume 
induction hypothesis 
theorem 
suppose 
assume 

suppose 


assume suppose 
dom 
dom 
step follows induction hypothesis 
holds definition gives 
suppose 
assume 
induction hypothesis gives induction hypothesis gives definition 
suppose 
rcd 



assume 


step follows induction hypothesis 
definition rcd 
gives 

rcd 

suppose rcd 
rcd 
assume 
induction hypothesis gives rcd 
rcd 
rcd 
definition rcd 

suppose 
assume 
induction hypothesis 
show induction 
case follows lemma strict 
induction step induction hypothesis definition 
chain complete lemma 
suppose bool bool bool true bool false 
assume 
induction hypothesis bool bool bool bool bool 
definition bool cases bool 
belongs strict 
bool true 
belongs induction hypothesis 
bool false 
belongs induction hypothesis 
suppose op 
op 
op 

assume 
induction hypothesis 
op 
op 
op 
op 
lemma op 
op 

proof show logical relations possess property plausibly called convexity definition relation set domain said convex holds lemma primitive logical relations convex 
proof 
primitive type domain flat implies proof theorem logical relations convex 
proof 
induction structure 
suppose primitive type monotone convex 
suppose 
fx fx function application monotone induction hypothesis gives fx holds 
suppose rcd 


rcd 
application monotone induction hypothesis gives holds 
rcd 

proof bracketing show domains meanings types embedded universal domain type indexed family function pairs show embedding retraction pairs closely related logical relations defined previous section 
idea types denote retractions universal domain due scott 
definition logical relations useful define subsidiary kind function pair primitive types definition primitive types functions int int nat nat bool true false bool true false 
definition tedious case analysis reader may verify bear relationship primitive logical relations lemma primitive type 


define function pairs induction structure definition types functions rcd 


rcd 


function pairs related logical relations way analogous previous lemma theorem bracketing theorem type 


proof 
proof induction structure suppose primitive type 
fact identity part lemma 
definitions give 
suppose 
definition 
second part lemma definition give suppose 

second part induction hypothesis fact identity definition 
part induction hypothesis holds definition gives 
suppose 
part induction hypothesis definition 
second part induction hypothesis 
holds definition suppose rcd 
belongs rcd 
fact identity part induction hypothesis give 


definition rcd definition rcd give 
rcd 



rcd 
suppose 
rcd 
definition rcd 
second part induction hypothesis holds definition rcd gives rcd 



proof immediate consequence bracketing theorem corollary embedding retraction pairs 
proof 
suppose 
part bracketing theorem second part 
holds proof name bracketing theorem succinct formulation theorem subset relationship graphs functions relations 
writing reflection graph restate bracketing theorem type essence bracketing theorem connects notion representation provided logical relations di erent notion provided embedding retraction pairs 
typed value regard set preimage set untyped values weakly represent subset set untyped values represent member best canonical representation essential di erence representation weak representation total function untyped value weakly represents typed value 
combining bracketing theorem theorem express implicit conversions terms embedding retraction pairs theorem 
proof 
suppose 
part bracketing theorem 
theorem second part bracketing theorem 
proof combining bracketing theorem logical relations theorem express intrinsic typed semantics phrase terms untyped semantics theorem suppose 
dom 
proof 

dom 
dom definition part bracketing theorem 
logical relations theorem gives second part bracketing theorem gives 
proof theorem expresses meaning proof subtype judgement function retraction embedding pairs associated determined judgement proof 
similarly theorem expresses meaning proof typing judgement terms untyped meaning retraction embedding pairs associated components determined judgement proof 
proof judgement intrinsic semantics corollary intrinsic semantics coherent 
course coherence kind language considering known time believe unusually elegant proof 
noted theorem expresses particular intrinsic semantics terms variety untyped semantics untyped semantics meeting constraints section permitted variations universal domain way primitive values functions records embedded certain aspects primitive operations choice 
example take untyped semantics reduction preserve meaning section fixed point combinator 
fixed point operator 
extrinsic semantics suppose define type indexed family relations untyped values definition types relations 

abstractly relational composition def 
obviously symmetric 
relations transitive theorem 
proof 

second part bracketing theorem 
proof partial equivalence relations 
chosen define terms logical relations described directly induction structure 
see define subsidiary relations primitive types definition primitive types relation 

reader may verify definition lemma int nat bool 
described theorem 
rcd 

proof 
definitions 
suppose 
definition 
definition definition 
hand suppose 

definition 
half bracketing theorem gives definition 
supposition displayed symmetric transitive 
definition 
inclusions second part bracketing theorem gives function 
second inclusion written 
holds definition gives holds definition gives 
case rcd 

definitions rcd 
record 




proof terms notion representation captured logical relations means representation value type 
means value type 
defines set representations restricted set equivalence relation representing thing 
early extrinsic denotational semantics sethi macqueen model types played roles insight denote subsets universal domain untyped values due scott section section 
fact basic idea types represent equivalence relations subsets universe realizers older 
examples described troelstra hereditarily ective operations heo section section realizers natural numbers godel numbers extensional model hereditarily continuous functionals ecf section section realizers functions natural numbers natural numbers 
troelstra attributes heo kreisel section ecf kreisel independently kleene 
common thread systems continuous computable typed value represented realizer 
overview realizability amadio curien chapter 
combination untyped semantics gives called extrinsic semantics 
essential connection entities phrase satisfies typing judgement untyped meaning respects type dependent notion representation described 
precisely theorem suppose satisfy dom 

proof 
related supposed dom 
environment dom 
applications logical relations theorem 
proof connect family functions defined terms embedding retraction pairs bracket definition types function composition easily seen idempotent range set fixed points 
known set fixed points ordered sub partial ordering domain isomorphic 
related theorem plays role level similar bracketing theorem theorem type 




proof 


second part bracketing theorem gives 
part bracketing theorem 
definition gives 


second part bracketing theorem part bracketing theorem conjunction gives 
gives 
proof reader may verify consequences parts theorem 
equivalence class subset preimage fixed point 

fixed point belongs equivalence class 
preimage fixed point contains fixed point preimage fixed point contains equivalence class 

equivalence class contains fixed point 
preimage contains fixed point preimage fixed point contains equivalence class 
directions obviously extend approach languages richer type systems intersection polymorphic types 
year attempt conquer intersection types unable find semantics prove bracketing theorem 
described talk workshop intersection types related systems 
interest try move opposite direction extrinsic intrinsic semantics 
sense straightforward simply takes set equivalence classes 
precisely takes semantic category category chapter 
general may sensible way order set equivalence classes domain 
john reynolds 
theories programming languages 
cambridge university press cambridge england 
daniel leivant 
typing computational properties lambda expressions 
theoretical computer science 
john reynolds 
category theory design implicit conversions generic operators 
neil jones editor semantics directed compiler generation volume lecture notes computer science pages berlin 
springer verlag 
gordon plotkin 
lambda definability logical relations 
memorandum sai rm university edinburgh edinburgh scotland october 
dana scott 
data types lattices 
siam journal computing september 
pierre louis curien giorgio ghelli 
coherence subsumption minimum typing type checking mathematical structures computer science march 
david park 
combinator scott lambda calculus models 
symposium theory programming university warwick unpublished cited 
christopher wadsworth 
relation computational denotational properties scott models lambda calculus 
siam journal computing september 
david macqueen ravi sethi 
semantic model types applicative languages 
conference record acm symposium lisp functional programming pages new york 
acm 
david macqueen gordon plotkin ravi sethi 
ideal model recursive polymorphic types 
information control october november 
dana scott 
lambda calculus models philosophy 
jon barwise jerome keisler kenneth kunen editors kleene symposium volume studies logic foundations mathematics pages amsterdam 
north holland 
andrej bauer lars birkedal dana scott 
equilogical spaces 
appear theoretical computer science 
anne troelstra editor 
metamathematical investigation intuitionistic arithmetic analysis volume lecture notes mathematics 
springer verlag berlin 
anne troelstra 
realizability 
samuel buss editor handbook proof theory volume studies logic foundations mathematics pages 
elsevier amsterdam 
georg kreisel 
interpretation analysis means constructive functionals finite types 
heyting editor constructivity mathematics pages 
north holland amsterdam 
kleene 
countable functionals 
heyting editor constructivity mathematics pages 
north holland amsterdam 
roberto amadio pierre louis curien 
domains volume cambridge tracts theoretical computer science 
cambridge university press cambridge england 
john reynolds 
intrinsic semantics intersection types invited lecture 
proceedings workshop intersection types related systems 
slides lecture available ftp ftp cs cmu edu user ps gz 
brics report series publications rs john reynolds 
meaning types intrinsic extrinsic semantics 
december 
pp 
rs bernd julia lawall 
partial evaluation pattern matching strings revisited 
november 
pp 
rs ivan damg ard 
practical threshold rsa signatures trusted dealer 
november 
pp 
rs luigi 
alternation hierarchy theory lattices 
november 
pp 
extended appears abstracts international summer conference category theory ct como italy july 
rs luigi 
free lattices 
november 
pp 
short appeared proceedings category theory coimbra portugal july 
full version appear special conference issue journal pure applied algebra 
rs zolt werner kuich 
inductive semirings 
october 
pp 
rs sek modelling control discrete event dynamic systems 
october 
pp 
rs zolt 
continuous additive algebras injective simulations synchronization trees 
september 
pp 
rs claus brabrand michael schwartzbach 
growing languages metamorphic syntax macros 
september 
rs luca aceto anna ing pedersen jan 
characteristic formulae timed automata 
september 
pp 
rs thomas anders sandholm 
automata control synthesis case study 
september 
pp 
appears maibaum editor fundamental approaches software engineering international conference fase proceedings lncs pages 
