simple shortest path algorithm linear average time andrew goldberg star laboratory technologies patrick henry dr santa clara ca usa goldberg com 
simple shortest path algorithm 
input lengths positive uniformly distributed algorithm runs linear time 
worst case running time algorithm log number vertices arcs input graph respectively ratio largest smallest nonzero arc length 
shortest path problem nonnegative arc lengths common practice algorithms problem extensively studied theoretical computational viewpoints :10.1.1.10.9520
cient implementations dijkstra algorithm particular received lot attention 
step dijkstra algorithm selects processing labeled vertex smallest distance label 
nonnegative length function selection rule guarantees vertex scanned 
suppose input graph vertices arcs 
state previous results assume input arc lengths integral 
denote biggest arc length 
define ratio smallest nonzero arc length 
note lengths integral modulo precision problems arithmetic operation complexity results apply real valued arc lengths 
simplify comparing time bounds similarity assumption log log 
algorithms problem near linear worst case running times algorithm linear running time graph directed computational model established 
pointer model computation fibonacci heap data structure fredman tarjan leads log implementation dijkstra algorithm 
ram model word operations fastest currently known algorithms achieve bounds log log log log log log log 
undirected graphs thorup algorithm linear running time word ram model 
constant time priority queue yields linear time algorithm directed graphs non standard computation model supported currently existing computers 
meyer gives shortest path algorithm linear average time input arc lengths drawn independently uniform distribution 

proves conditions running time linear high probability 
meyer algorithm may scan vertices worst case time bound nm log far linear 
algorithm analysis complicated 
show improvement multi level bucket shortest path algorithm average running time linear worst case time log 
average time bound holds arc lengths distributed uniformly 

show arc lengths independent algorithm running time linear high probability 
algorithm analysis natural simple 
algorithm implementation dijkstra algorithm vertex selected scanning necessarily minimum labeled vertex 
selected vertex distance label equal correct distance vertex scanned 
relaxation dijkstra algorithm originally introduced full strength thorup 
technique improve worst case running time mentioned log log log algorithm raman log log log 
new bound applies input arc lengths real valued 
results advance understanding near linear shortest path algorithms 
computational studies graphs uniform arc lengths results show problems easy certain sense 
prove results uniform arc length distribution algorithm achieves improved bounds distributions 
results may practical implications addition theoretical ones 
multi level bucket algorithm works practice improvement algorithm natural easy implement :10.1.1.10.9520
possible variant algorithm competitive current state art implementations inputs outperforming implementations inputs 
algorithm looks attractive competing implementations highly optimized practicality results claimed careful implementation experimentation 
preliminaries input shortest path problem consider directed graph vertices arcs source vertex nonnegative arc lengths 
goal find shortest paths source vertices graph 
assume arc lengths integers interval 
denotes biggest arc length 
smallest nonzero arc length ratio biggest arc length 
arc lengths zero problem solved linear time loss generality assume log 
implies log 
say statement holds high probability probability statement true approaches 
assume word ram model computation see 
data structures need array addressing unit time word operations addition subtraction comparison arbitrary shifts 
allow higher level description algorithm strong ram computation model allows word operations including bitwise logical operations operation finding index significant bit words di er 
operation ac see discussion closely related operation 
powerful model improve amortized operation bounds simplifies description 
shortest path algorithm uses variant multi level bucket data structure fox 
describe result strong ram model follow obtain implementation algorithm weaker word ram model 
somewhat complicated describe formally implementation appears practical 
labeling method related results labeling method shortest path problem works follows see 
method maintains vertex distance label parent status labeled scanned 
initially nil 
method starts setting labeled 
labeled vertices method picks vertex scans arcs sets scanned 
scan arc checks true sets labeled 
length function nonnegative labeling method terminates correct shortest path distances shortest path tree 
ciency method depends rule chose vertex scan 
say exact distance equal 
easy see method selects vertex selection time exact vertex scanned 
dijkstra observed nonnegative labeled vertex smallest distance label exact 
linear time implementation dijkstra algorithm strong ram model appears hard 
thorup relaxation dijkstra selection rule get linear time algorithms special cases shortest path problem 
describe relaxation define vertex minimum length arc entering infinity arc enters lemma implicit 
lemma 
suppose nonnegative lower bound distance labels labeled vertices 
vertex 
exact 
algorithm description correctness algorithm multi level bucket implementation dijkstra algorithm lemma detect scan vertices exact necessarily minimum distance labels 
algorithm labeling algorithm 
initialization algorithm computes vertex algorithm keeps labeled vertices places set priority queue implemented allow constant time additions deletions example doubly linked list 
implemented multi level buckets described 
priority queue supports operations insert delete decrease key extract min 
insert operation may insert vertex decrease key operation may move vertex high level algorithm works follows 
vertices exact distance labels nonempty remove scan vertex empty remove scan vertex minimum distance label 
suppose distance label vertex decreases 
note belong belongs apply decrease key operation operation relocates discovers distance label exact moves apply insert operation inserted determined exact bucket structure contains levels buckets log 
top level level contains buckets 
conceptually top level contains infinitely buckets 
consecutive top level buckets nonempty time lemma maintain buckets wrapping modulo top level 
low level ciency may want wrap modulo power 
denote bucket level ranges bottom level top ranges top level discussed 
bucket contains set vertices maintained way allows constant time insertion deletion doubly linked list 
level maintain number vertices level 
maintain lower bound distance labels labeled vertices 
initially 
time extract min operation removes vertex set 
consider binary representation distance labels number bit positions starting significant bit 
denote th th significant bit denote th significant bit 
similarly denotes th significant bit likewise definitions 
note significant bits binary representation uniquely determine 
significant bits replaced respectively 
level corresponds range values 
fig 

multi level bucket example 

values bottom decimal 
values top binary significant bit bottom 
shaded bits determine positions corresponding elements 
bucket corresponds subrange containing integers range th bit equal top level bucket corresponds range 
width bucket level equal bucket contains distinct values 
say vertex range belongs range corresponding bucket 
position vertex depends belongs lowest level bucket containing 
formally index significant bit di er match 
note define position 
inserted inserted position vertex store position 
gives example bucket structure 
example 
instance find position vertex note binary representations di er bit remember start counting bit value 
belongs bucket level 
modification multi level bucket algorithm uses lemma insert operation put vertices lemma allows 
details follows 
insert insert vertex follows 
put compute position add 
decrease key decrease key element position follows 
remove 
set new value insert described 
extract min find lowest nonempty level find nonempty bucket level delete vertex 
case 
return examine elements delete minimum element 
note case set 
increased vertex positions may changed 
bucket expansion return understand bucket expansion note vertices changed positions exactly 
see old value consider vertex position respect choice cases common prefix common prefix position change 
hand vertices longer common prefix vertices need move lower level 
bucket expansion deletes vertices uses insert operation add vertices back appropriate 
formal description algorithm little complicated algorithm relatively simple step remove vertex empty remove minimum labeled vertex case expand bucket vertex removed necessary 
scan vertex update neighbors necessary 
terminate empty 
note bucket expansions empty expanded bucket contains labeled vertex minimum distance 
updated correctly 
original multi level bucket algorithm point execution labeled vertices contained consecutive top level buckets 
slightly weaker result holds algorithm 
lemma 
point execution labeled vertices range consecutive top level buckets 
proof 
current value top level bucket containing result holds trivially vertex labeled scan vertex removed case time scan contained 
case added di erence belongs 
algorithm correctness follows lemmas observations set minimum distance label labeled vertex remains lower bound labeled vertex labels monotonically nondecreasing contains vertices exact distance labels 
worst case analysis section prove worst case bound running time algorithm 
definitions lemmas introduced section section 
start analysis lemmas 
lemma 
compute position respect constant time 
find lowest nonempty level time 
lemma 
algorithm runs time total number times vertex moves bucket lower level bucket 
proof 
vertex scanned total scan time 
vertex added deleted total time devoted maintaining 
insert operation takes constant time operations caused inserting vertices time decrease key operations extract min operations 
take time account remaining ones jointly operations 
decrease key operation takes constant time caused decrease due scan arc 
arc scanned operations take total time 
accounted far linear 
consider extract min operations 
consider extract min operation returns operation takes time plus amount time proportional number vertices expanded bucket excluding vertices moves lower level get desired time bound 
log worst case time bound easy see 
show better bound define log 
lemma 
buckets level 
proof 
position vertex 
algorithm adds lemma implies bound 
theorem 
worst case running time algorithm log 
note lemma implies algorithm needs log words memory implement bucket data structure 
optimization improve data structures multi level buckets radix heaps hot queues 
data structures equivalent lemma allows replace time bound parameter particular bound hot queue implementation raman improves log log log 
modification raman algorithm obtain bound straightforward results current section 
average case analysis section prove linear time average high probability time bounds algorithm assumption input arc lengths uniformly distributed 

key lemma analysis follows 
lemma 
algorithm inserts vertex bucket level equal log 
proof 
suppose insert operation position log 
significant bit di er bit 
insert puts lemma motivates definitions 
weight arc defined log 
weight vertex defined maximum weight incoming arc zero incoming arcs 
lemma implies number times move lower level 
note depends input weights defined respect input 
probability distribution arc weights defined pr log 

definition yields pr 

pr 

theorem 
arc lengths uniformly distributed 
average running time algorithm linear 
proof 
show 
linearity expectation definition 
expected value ipr 
note bound holds 
proof theorem works arc length distribution 
particular theorem holds real valued arc lengths selected independently uniformly 
fact distribution high probability analysis simpler 
integer distribution shall see large result applies range 

somewhat interesting example test problem generators distribution 
note theorem require arc lengths independent 
proof high probability variant theorem requires independence 
show algorithm running time linear showing show smaller close mm lemmas 
set arcs weight note 
show increases expected value goes exponentially 
small values true deal large values show total number arcs large weights small contribution arcs sum arc weights 
space limit omit proofs lemmas 
lemma 

lemma 
mm mm independence arc weights cherno bound see pr pr mentioned bound contributions arcs large small weights di erently 
define log partition sets containing arcs containing arcs 
lemma 
proof 
assume mm lemmas happens assumption implies probability union bound fact probability maximized log mm log 

lemma 
proof 
empty lemma holds trivially 
consider case lemmas mm mm assume case 
assumption implies assumption combining get pr implies pr pr independence arc weights cherno bound pr replacing occurrence upper bound value second occurrence lower bound get pr 
arcs log log log log log 
theorem 
theorem 
arc lengths independent uniformly distributed 
high probability algorithm runs linear time 
expected high probability bounds apply arc lengths come 
case high probability arc zero length 
concluding remarks described algorithm binary multi level buckets buckets level top level 
easily extend algorithm base buckets integer 
gets worst case bound log log log moving vertices lower levels balances scanning empty buckets bucket expansion 
average case analysis reduces 
get linear running time constant empty bucket scans charged vertices nonempty buckets 
interesting open question get linear average running time better worst case running time example techniques running algorithms parallel 
optimization detect vertices exact distance labels vertices reach bottom level buckets place technique context multi level buckets context radix heaps hot queues 
acknowledgments author jim horning anna karlin rajeev raman bob tarjan eva tardos useful discussion comments draft 
anonymous referee pointing theorem need arc lengths independent 

aho hopcroft ullman 
design analysis computer algorithms 
addison wesley 

ahuja mehlhorn orlin tarjan 
faster algorithms shortest path problem 
assoc 
comput 
mach april 

carlsson karlsson munro 
worst case constant time priority queues 
proc 
th acm siam symposium discrete algorithms pages 

cherkassky goldberg 
negative cycle detection algorithms 
math 
prog 

cherkassky goldberg 
shortest paths algorithms theory experimental evaluation 
math 
prog 

cherkassky goldberg silverstein 
buckets heaps lists monotone priority queues 
siam comput 

cherno 
measure asymptotic ciency test hypothesis sum observations 
math 
stat 

cole vishkin 
deterministic coin tossing applications optimal parallel list ranking 
information control 

fox 
shortest route methods 
reaching pruning buckets 
oper 
res 

dial 
algorithm shortest path forest topological ordering 
comm 
acm 

dial glover 
computational analysis alternative algorithms labeling techniques finding shortest path trees 
networks 

dijkstra 
note problems connexion graphs 
numer 
math 

dinic 
economical algorithms finding shortest paths network 
yu editors transportation modeling systems pages 
institute system studies moscow 
russian 

ford 
network flow theory 
technical report rand 

ford jr fulkerson 
flows networks 
princeton univ press princeton nj 

fredman tarjan 
fibonacci heaps uses improved network optimization algorithms 
assoc 
comput 
mach 

fredman willard 
trans dichotomous algorithms minimum spanning trees shortest paths 
comp 
syst 
sci 

gabow 
scaling algorithms network problems 
comp 
sys 
sci 

gallo pallottino 
shortest paths algorithms 
annals oper 
res 

glover glover 
computational study improved shortest path algorithm 
networks 

goldberg silverstein 
implementations dijkstra algorithm multi level buckets 
pardalos hearn editors lecture notes economics mathematical system refereed proceedings pages 
springer verlag 

hagerup 
improved shortest paths word ram 
th int 
colloq 
automata languages programming geneva switzerland pages 

meyer 
single source shortest paths arbitrary directed graphs linear average time 
proc 
th acm siam symposium discrete algorithms pages 

meyer 
single source shortest paths arbitrary directed graphs linear average time 
technical report mpi max planck institut fur informatik germany 

motwani raghavan 
randomized algorithms 
cambridge university press 


theorem expected complexity dijkstra shortest path algorithm 
algorithms 

raman 
fast algorithms shortest paths sorting 
technical report tr king london 

raman 
priority queues small monotone trans dichotomous 
proc 
th annual european symposium algorithms pages 
springer verlag lect 
notes cs 

raman 
results single source shortest paths problem 
sigact news 

tarjan 
data structures network algorithms 
society industrial applied mathematics philadelphia pa 

thorup 
undirected single source shortest paths positive integer weights linear time 
assoc 
comput 
mach 

thorup 
ram priority queues 
siam journal computing 

zhan noon 
shortest path algorithms evaluation real road networks 
transp 
sci 
