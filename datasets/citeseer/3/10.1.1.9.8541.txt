approximate string matching sux trees ukkonen department computer science university helsinki box sf university helsinki finland email ukkonen cs helsinki fi 
classical approximate string matching problem nding locations approximate occurrences pattern string text string edit distance considered 
concentrate special case available preprocessing searches varying shown searches done fast sux tree augmented sux links preprocessed form applying dynamic programming tree 
variations search algorithm developed running times mq mq log size output size output 
jt jp varies depending problem instance case unit cost edit distance shown min alphabet 
approximate string matching problem nd approximate occurrences pattern text 
consider problem form text 
pattern 
pm alphabet number nd locations substrings edit distance edit distance minimum possible total cost sequence editing steps convert editing step applies rewriting rule forms deletion insertion change problem subcases 
preprocessing exact line string matching 

preprocessing exact line string matching 

preprocessing approximate line string matching 

preprocessing approximate line string matching 
case leads known boyer moore knuth morris pratt algorithms 
case optimal solutions sux trees sux automata dawg 
case received lot attention 
simplest solution dynamic programming time mn jp jt di erences problem edit operation cost fast special methods possible including kn time algorithms see 
supported academy finland alexander von humboldt foundation germany 
deals case called problem approximate string searches indexed les 
problem nd suitable preprocessing associated search algorithm nds approximate occurrences preprocessed varying show solved fast sux tree simplicity algorithms formulated sux trie augmented sux links applying dynamic programming tree 
recall sux tree basically trie representing suxes constructed time 
preprocessing phase algorithms linear 
natural way applying dynamic programming sux tree depth rst traversal nds substrings distance 
note exactly problem want points strings search easy organize possible substrings path starting root tree 
path followed edit distance corresponding substring pre xes backtracking point column edit distances evaluated node visited traversal 
type method described analyzed baeza yates gonnet see 
method applied nding signi cant alignments pairs substrings worst case method evaluates mn columns edit distances columns evaluated simple line algorithm preprocessing show apply dynamic programming sux tree worst case number evaluated columns stays case smaller 
explain idea 
case lot repetition line dynamic programming algorithm 
evaluates table column entries symbol call entry essential value occurrences essential entries entry column essential approximate occurrence edit distance column 
column essential part particular depend substring length 
call substring viable approximate pre columns viable pre essential part identical 
example columns corresponding viable pre essential part column 
avoid evaluating column viable pre occurred earlier store columns sux tree 
column viable pre stored state reached path root 
search algorithm performs traversal tree spells string traversal follow normal trie transitions sux transitions 
traversal new columns evaluated conclude viable pre older pre case evaluation skipped stored column essential part 
number columns evaluated method proportional total number di erent viable pre xes small considerably smaller elaborate idea algorithms di erent degree sophistication 
introductory algorithm section runs time mq needs time 
undesirable dependency eliminated complicated data structures algorithm section running time mq log size output 
algorithm section nally easy implement simpli cation algorithms evaluate columns running time size output 
show min min 
exponential growth function suggests methods fast small running time rapidly approaches time line algorithm grows 
interesting see myers points inherent diculty problem relieved dividing smaller subpatterns performing search reduced error level subpattern 
lters interesting regions attempts expand approximate occurrences subpatterns approximate occurrences simpler gram method similar lines described 
approximate string matching problem edit operation rewriting rule form deletion insertion change symbols alphabet empty string 
operation cost 
operation called identity operation 
cost 

am 
strings 
trace sequence edit operations identity operations 

cost trace 
edit distance minimum possible cost trace 
unit cost edit distance means edit operation cost denoted 
intuition de nition minimum possible total cost sequence editing steps convert symbol rewritten 
distance evaluated time mn simple form dynamic programming 
method evaluates table 



say approximation de nition 

pm pattern string 
text string number 
approximate string matching problem threshold nd edit distance substring 
approximate occurrence position approximate string matching problem solved line preprocessing slightly modi ed form dynamic programming edit distance minimum edit distance pre 
substrings table values evaluated min emphasized entries row table value corresponding table edit distance entry gets value 
solution problem read row table approximate occurrence position sequel important technical tool length shortest substring edit distance equals 
value obviously satis es elsif tables conveniently evaluated column column line left right scan columns produced symbol evaluation organized function dp return dp function dp return 
takes time evaluation takes total time mn 
line algorithms running kn expected time methods easily incorporated procedure dp kn worst case time unit cost edit distance known 
sections develop algorithms line respect assume preprocessed sux tree study evaluation organized ecient way 
approximate pre xes line solution problem section drawback dynamic programming explicitly repeated identical repeated substrings may create unnecessary content column depends relatively short substring substring occurs dynamic programming give column equal old column 
new algorithms avoid repetition identical calculations 
precise rst de ne essential entries approximate string matching problem solved entries call entry essential entry 
essential entry depends essential entries sense inessential entries replaced default value ecting content essential part 
columns corresponding columns pairs called equivalent denoted essential entries identical contents corresponding entries identical contents 
words 
de ne substring determines essential part 
recall knuth morris pratt algorithm exact string matching property nds text location longest pre 
pattern occurs 

approximation 
occurs seen generalization approximate case approximation 
occurs 
pre largest index essential 
obviously 
longest pre approximation string 
approximation fact shortest 
de nition 
string 
called viable approximate pre viable pre short 

string viable sense pre approximate occurrence viable pre determines essential part column theorem 

proof 
helpful consider table solution shortest path problem edit graph associated pattern matching problem 
graph consists nodes weighted directed arcs form regular grid follows arc weight arc weight weight arc weight gives length shortest path graph paths lead node row node 
value indicates start node steepest path smallest value shortest path starts 
theorem largest index jq 
shortest path starts node jq jq 
evaluate essential entries column correctly suces consider subgraph edit graph spanned nodes jq similarly evaluate essential entries column correctly suces consider subgraph spanned nodes jq graphs identical topology weights shortest path problems identical solutions particular essential entries identical corresponding entries 
example 

assume unit cost model edit distance edit operation cost 
table table viable pre xes essential entry ab abb bbb 
di erent viable pre xes 
theorem says viable pre start properly theorem 
sux proof 
interpretation solution shortest path problem see proof theorem rst notices values non decreasing grows 
rest proof simple case analysis largest index depend entries 
dynamic programming sux trees evaluate table represented sux tree 
recall alternative forms trees 
sux tree sux tree data structure representing suxes 
distinguish versions structure 
version sux tree called sux trie denoted strie 
unique deterministic nite state automaton recognizes suxes tree shaped transition graph 
transition graph trie representing strings root denote initial state transition function strie 
say goto transition state state input 
goto transition path input symbols catenation string write 
augment strie sux function de ned state root follows root symbol string root ax set state root say sux transition sux transition consume input 
size strie jt 
strie easy construct see quadratic size impractical 
fortunately strie linear size representations constructed linear time compact sux tree sux automaton dawg 
simplicity sux trie strie consisting functions description algorithms 
actual implementation done standard linear size sux tree sux automaton change complexity bounds derived strie 
algorithm algorithm traverse strie path goto sux transitions starts root spells goto transitions string combined columns correspond di erent viable pre xes evaluated 
column column stored state root 
traversal goes states root root root 
transition goto transition root root 
transition path consists zero sux transitions path exists theorem 
consider subpath goto transition taken rst 
cases case 
visited traversal follow sux transition path rst state encountered non empty values 
case 
visited evaluate pair columns dp 
see lemma 
equivalence implies jq essential entry algorithm follows sux link path state depth distance root jq algorithm saves columns traversal repeated initialization set root root 
entry entry 
algorithm output implemented algorithm outputs traversal 
consider correctness algorithm need notation sux write yjx sux write 
crucial point algorithm saves compared line algorithm case 
assume root visited earlier 
means belong sux link path jq jq hand lemma 
jq jq proof 
immediate viewed solution shortest path problem see proof theorem 
implies noting theorem pair columns equivalent stored 
dynamic programming skipped algorithm just follows sux transition path case correct 
correct algorithm columns equivalent actual columns essential entries new column determined essential entries previous column 
lemma 
lemma 
dp 
algorithm correctly outputs analysis 
fq ng jqj size number di erent viable pre xes 
fq ng jq algorithm evaluates pairs columns stores 
evaluation pair columns takes time space time consumption rest proportional note traversal takes goto transitions sux transitions obtain theorem 
algorithm runs time mq needs working space mq storing columns tables 
analyze growth detail special case unit cost edit distance 
fx je kg set strings unit cost edit distance size bound lemma 
theorem 
ju proof 
size number di erent traces edit scripts length applied trace consists actual editing steps zero identity steps number traces equals number di erent possibilities select actual steps 
estimated bounding number di erent ways applying exactly steps include actual steps identity steps 
steps divided groups steps form group contains possible identity operations steps form group 
group step unique selected di erent ways 
group consisting steps selected di erent ways 
group step selected di erent ways refers intervals letters selected independently di erent ways 
interval selected arbitrarily times 
group consisting steps selected di erent ways 
gives ju assumed 


ju theorem jq obtain noting theorem gives theorem 
algorithm runs di erences problem time 
min needs working space 
min 
finding viable pre fast method section understood advanced implementation algorithm algorithm needs time scans symbol symbol text algorithm developed dependency eliminated 
columns di erent viable pre xes dictionary operations implemented balanced search trees 
method lemma implementation heavily depends special properties strie 
assume algorithm performed dynamic programming obtained equivalent stored root 
algorithm examine state 
visited algorithm lemma dynamic programming skipped equal state root root sux link path algorithm examine 
unvisited state dynamic programming resumed 
nd directly rst observe set di erent viable pre xes grow remains unchanged set visited states remains unchanged string path root state form states belong set fs root states distance goto transition state reached root viable pre algorithm state strie key denote string root key set states keys set strings key associate state value loc de ned precisely gives smallest index key equal algorithm states kept dictionary records dictionary form loc loc search key dictionary support insertions deletions minimum extractions 
extracting minimum element get state smallest loc 
state loc 
new columns evaluated dynamic programming father symbol precise de nition loc need concepts elimination covering 
introduce consider strings detail 
mentioned equal viable pre longest viable pre xes suxes 
lemma 
jq jq proof 
interpretation solution shortest path problem proof theorem 
implies longest string keys sux string keys sux strings suxes longest 
mind de nition 
de nition 
string covers occurrence string jx jy string key longest element keys string keys covers key need concept elimination 
purpose incorporate lemma algorithm 
de nition 
strings eliminate state string key jq note states visited algorithm eliminated states de ned 
lemma dynamic programming need performed entering eliminated state 
de ne loc key eliminated rst occurrence key location covered string keys 
note loc de ned states members algorithm maintains values algorithm selects min loc dictionary contains loc states dynamic programming performed loc loc values changed updated represents algorithm follows sux link path root 
states path eliminated eliminated earlier case 
loc implemented simply removing add new elements corresponding updates loc values due covering 
happens new state visited earlier 
loc inserted symbol appropriate changes loc done key covered key 
sux transitions 
call state primary key 

note sux transitions constitute tree primary states leaves root root 
lemma follows de nition loc gives method updating recall denotes sux function 
lemma 
eliminated state loc primary eliminated loc depth loc min loc minimum means loc needs updating traversing sux link path new state state path updated loc evaluated 
di erent minimization done time log 
loc update performed 
summary algorithm starts inserting root loc root initially empty dictionary extract min performed loc values updated repeated empty 
column stored state marked output 
nal output phase lists occurrences key states marked output 
occurrences strie standard methods 
preprocessing phase creates st rie initializes values loc method lemma 
theorem 
algorithm runs time mq log size output needs working space mq dictionary columns dynamic programming tables 
proof 
algorithm evaluates columns dictionary implemented balanced search tree takes log jh time dictionary operation 
algorithm performs times selection time log jh evaluation new columns time traversal removal eliminated states time log jh insertion states time log jh 
new state inserted algorithm loc updated states sux link path root corresponding changes done length path updates take total time jh jm log log jh 
gives total time bound log jh log jh jh jm log log jh mq log jq jh jq assumed constant 
output time linear size output care devoted elimination duplicated output 
space requirement mq columns jq mq 
theorem upper bound shows small large algorithm faster algorithm simple algorithm dictionary mechanisms algorithm maintaining values loc create relatively large overhead 
describe algorithm simpli ed version algorithm uses elimination states loc values 
algorithm easy implement low overhead 
algorithm depth rst search states 
states saved pair columns kept stack 
transition top state stack state new columns evaluated dp 
columns state saved stack state state sux link path distance root depth equals length viable pre associated 
resulting algorithm 
function viable pre length gives length viable pre represented columns value largest index function output mark adds state list states represent locations approximate occurrences algorithm 
eliminated root true 
search root 

procedure search 
state 
eliminated 
dp 
length viable pre length 
depth length 
eliminated true 
depth length eliminated 
depth length eliminated 
output mark 
eliminated true 

root eliminated true 
eliminated true 
search 
algorithm selection order state loc 
algorithm select state selected algorithm optimal selection order implemented algorithm result total covering elimination come selected 
fortunately fatal error select means algorithm rst nds short viable pre locations nd correct long pre 
di erent essential parts columns ultimately evaluated 
viable pre length 
nding correct pre algorithm may nd proper suxes 
total number extra columns evaluated mq 
case algorithm evaluates columns algorithm total number columns mq mq theorem 
theorem 
algorithm runs time size output needs working space 
concluding remarks relevant questions concerning new algorithms remained unanswered 
notably include theoretical analysis expected running times experimental comparison related algorithms 
modestly long feasible implement algorithms compact sux tree adapting methods sux automata simple 
long texts better space economical sux array 
details practical ne tuning implementation subject study 

altschul gish miller myers lipman 
basic local alignment search tool 
molecular biology 

baeza yates gonnet sequence matching extended 

blumer blumer haussler ehrenfeucht chen 
smallest automaton recognizing subwords text 
theor 
comp 
sci 


chang 
theoretical empirical comparisons approximate string matching algorithms 
proc 
combinatorial pattern matching tucson april lect 
notes computer science springer verlag pp 


chang lawler approximate string matching sublinear expected time 
proc 
ieee ann 
symp 
foundations computer science pp 


crochemore 
transducers repetitions 
theor 
comp 
sci 


crochemore 
string matching constraints 
proc 
mfcs symposium 
lect 
notes computer science springer verlag pp 


dowling hall 
approximate string matching 
acm comput 
surv 


galil giancarlo 
data structures algorithms approximate string matching 
complexity 

galil park 
improved algorithm approximate string matching 
siam computing 

gonnet 
tutorial computational biochemistry darwin 
informatik switzerland 

gonnet baeza yates snider 
lexicographical indices text inverted les vs pat trees 
report oed uw centre new oxford english dictionary text research 

jokinen ukkonen 
algorithms approximate string matching static texts 
proc 
mfcs lect 
notes computer science springer verlag pp 


landau vishkin 
fast string matching di erences 
comp 
syst 
sci 


manber myers 
sux arrays new method line string searches 
soda pp 


mccreight 
space economical sux tree construction algorithm 
acm 

myers sublinear algorithm approximate keyword searching 
tr department computer science univ arizona tucson appear algorithmica 
sellers 
theory computation evolutionary distances pattern recognition 
algorithms 

tarhio ukkonen 
boyer moore approach approximate string matching 
nd scand 
workshop algorithm theory lect 
notes computer science springer verlag pp 

full version appear siam comput 


ukkonen 
finding approximate patterns strings 
algorithms 

ukkonen 
approximate string matching grams maximal matches 
theoretical computer science 

ukkonen 
constructing sux trees line linear time 
van leeuwen ed algorithms software architecture 
information processing vol 
pp 

elsevier 

ukkonen wood approximate string matching sux automata 
algorithmica appear 

wagner fischer 
string string correction problem 
acm 

weiner 
linear pattern matching algorithms 
proc 
th ieee symp 
switching automata theory pp 


wu manber 
fast text searching allowing errors 
comm 
acm 
article processed macro package llncs style 
