parallel computer workload modeling markov chains song carsten ramin computer engineering institute university dortmund dortmund germany email song carsten ramin udo edu 
order evaluate different scheduling strategies parallel computers simulations executed 
scheduling quality highly depends workload served parallel machine representative workload model required 
common approaches probability distribution model capture static feature real workloads consider temporal relation traces 
workload model uses markov chains modeling job parameters 
order consider interdependence individual parameters requiring large scale markov chains novel method transforming states different markov chains 
results show model yields closer results real workloads common approaches 
parallel computers workstation clusters common approach solving problems 
efficient allocation processing nodes jobs task scheduling system 
quality scheduling system high impact performance parallel computer 
researchers developed various job scheduling subsystems parallel computers 
pointed performance scheduling algorithm highly depends workload applied 
single scheduling algorithm best scenarios 
evaluation scheduling algorithms different workloads important step designing scheduling system 
effort put characterization modeling workload parallel computers 
typical approach performance evaluation scheduling system application existing workload trace recorded existing machine 
represents realistic user behavior real machine drawbacks 
instance workload trace directly applied configurations different original machine 
addition size workload number jobs trace scaled easily 
statistical workload model adopted alternative 
common approach probability distribution function model pdf 
pdf model omits dynamic characteristics workloads 
sequential correlation different jobs taken account 
propose extended job model markov chains uses information previous job consider sequential dependencies job submission 
discussion necessary background section discuss section relevant model parameters 
section model constructed 
quality model evaluated comparing outcome real workload data section 
ends short 
background parallel computers supercomputers space sharing strategy efficient execution parallel computational jobs 
means job runs exclusively allocated processor set 
carsten member collaborative research center computational intelligence university dortmund financial support deutsche forschungsgemeinschaft dfg 
jobs executed completion preemption 
scheduling problem online scenario jobs known advance continuously submitted scheduling systems users 
workload model description parameters jobs workload 
job consists parameters instance number required processing nodes job runtime memory requirements 
concentrate modeling required number nodes corresponding runtime 
approach general easily extended consider parameters 
note model submission time inter arrival time jobs 
task adequate models available 
mentioned probability distribution function model chosen modeling workload parameters 
parameters typically considered independently consequently individual distributions created parameter 
example hyper erlang distribution match moments observed distribution 
alternatively uri dror feitelson stage hyper gamma distribution fit original data 
isolated modeling attribute correlations different attributes important 
lo demonstrated different degrees correlation job size job runtime lead discrepant evaluation scheduling performance 
consider correlations divided job sizes subranges created separate model inter arrival time service time range may risk fitting unknown parameters 
furthermore feitelson considered runtime attribute stage distribution linear relation job size parameters runtime distribution longer runtime emphasized distribution higher mean 
pdf models adapted fit observed original distribution sequential dependencies workload lost 
instance feitelson showed users tend submit jobs similar predecessor 
realistic model sought incorporates correlation sequence job submissions 
analysis analysis available workload traces shows temporal relations job parameters complex 
examined traces publicly available 
contains thousands job submitted time frame months shown table 
analyzing statistical parameter data series including temporal relations software named chosen extract statistical information 
identifier nasa ctc kth lanl sdsc sp sdsc sdsc machine ipsc sp sp cm sp sp sp period processors jobs table 
workloads research 
analyzing workload data short examined time frame limited variance number required node runtime user requests 
considered time frame week 
jobs identical subsequently submitted user 
considering continuous submission average continous submission average continous submission nasa real spm number nodes lanl real spm number nodes average continous submission average continous submission sdsc real spm number nodes sp real spm number nodes average continous submission average continous submission ctc real spm number nodes sdsc number nodes fig 

continuous submission jobs similar node requirements 
real spm average continous submission kth real spm number nodes identical jobs feitelson zipf distribution model number repetitions 
examination holds jobs workload trace differentiating submitting user 
probably caused fact limited number users active system time frame 
inter arrival time jobs relatively small 
addition jobs submitted continuity 
job series workload extract requested number nodes uj job examined average continued appearance node requirement sequence job node requirement workload trace number direct repetitions considered 
note consider job submissions workload jobs submitted user 
workloads contain predominantly jobs power number nodes restrict examination jobs requiring node nodes nodes neglect jobs power node requirement 
average subsequent appearances job requirement real workload shown 
average number occurrences shown simple probability distribution model modeling node requirements 
strategy denoted spm model parameter independently statistical occurrences original trace 
seen sequences node requirement occur significantly real workload pdf model 
shows simple distribution model correctly represent effect 
furthermore jobs real traces nodes requirements higher probability subsequent node identical jobs requiring nodes 
jobs parallelism higher probability repeatedly submitted 
continuously appearing elements removed sequential dependencies 
element kept sequence identical node requirements 
average number nodes successors average number nodes successors nasa number nodes lanl number nodes average number nodes successors average number nodes successors sdsc number nodes sdsc sp number nodes average number nodes successors average number nodes successors ctc number nodes sdsc number nodes fig 

temporal relation node requirements average number nodes successors kth number nodes create example excerpt series node requirements transformed 
note consider jobs node requirements power 
step transform log 
node requirement rounded lower power 
distinct node requirement calculate average number nodes requested successor 
shows successors jobs large node requirement tend request large number nodes workloads 
traces jobs high node requirements followed jobs high higher node requirement 
lines show average node requirements workload 
behavior nasa sdsc lanl clear 
nasa workload noted workload general shows unusual behavior jobs submitted free resources available 
jobs start immediately submission 
small number different node requirements occur traces 
temporal relations runtime jobs 
grouped jobs integer part logarithm runtime group average runtime successors calculated 
result shown 
sequential dependencies may important optimizing scheduling algorithms backfilling 
instance algorithms utilize probability information job arrivals 
data included heuristics current job allocations 
method capture sequential dependencies workload beneficial 
shown figures characteristic relation subsequent jobs varies different node requirements runtimes 
ln average runtime successors ln average runtime successors nasa ln runtime lanl ln runtime ln average runtime successors ln average runtime successors sdsc ln runtime sdsc sp ln runtime ln average runtime successors ln average runtime successors ctc ln runtime sdsc ln runtime fig 

temporal relation sequence runtime requirements 
modeling markov chains ln average runtime successors kth ln runtime classical methods analyze stochastic processes 
example arima model uses lags shifts historical data uncover patterns moving averages predict 
theory arima model assumption process stationary hold workloads shown 
common approach neural networks analyze model sequential dependencies 
difficult adapt extend model 
markov chains chosen modeling described patterns section 
chains important characteristic transition state just depends previous state 
markov chains kind memory transition probabilities move state model described transition matrix 
element matrix describes probability move state state system state workload modeling markov chains represent number nodes runtime requirements respectively 
shown necessary correlate chains 
similar requirements combining markov chains occur application areas 
instance advanced speed recognition systems called hidden markov models hmm represent phonemes smallest sound units words composed combination words 
method correlated different markov models called embedded hmm state model super states represent markov model embedded states 
method suitable problem workload modeling dramatically increase number parameters 
correspondingly model hard train 
propose new algorithm correlate markov chains increasing number states 
mentioned model independent markov chains 
chain model requested number nodes 
second chain represents runtime requirements 
chains independently constructed combined order create model generating incoming job 
note mentioned method consider modelling inter arrival times 
intended combination existing submission time models 
markov chain construction construction markov chain requested number nodes 
corresponding second markov chain runtime requirements similarly generated 
assume chain jobs series requested nodes described sequence tp 
key issues construction markov chain identify small set relevant states series 
markov chain require different states distinct node requirements traces considered 
transformation classifies node requirements power groups 
reduced sequence sp constructed follows si log ti distinct element considered separate state corresponding markov chain 
set states markov chain constructed follows lq li lj different values representing states calculated lj sx sx log tmax transformation original sequence represented order consider state changes original workload series denote order occurrences elements original stream job submissions 
define different states described ui lj si si lj 
sequence consists indices elements corresponding job sequence 
example consider table process reducing distinct number node requirements shown 
index ti si lj ui table 
example deriving states markov chains 
method leads construction transition matrix markov chain values calculated pij nij ni nij ni defined ni si lj li nij li lj 
transformations cause loss information precise number requested nodes reduced power values 
addition quality ratio cj calculated state markov chain 
ratio indicates real value original group exactly matched representing number nodes state chain 
precisely set quality ratios calculated cj cj ti lj 
si lj definition quality ratios cj needed model exact node number job 
system state corresponding value lj system output probability cj 
probability cj uniform distribution lj lj create final value requested number nodes 
mentioned earlier method constructing markov chain applied runtime requirements 
yields second markov chain 
dimensions matrices considered workload representations table 
dimension dimension number runtime chain nodes chains cor cor nasa sdsc ctc kth lanl sp sdsc table 
parameters workload modeling 
correlation runtime number nodes runtime number nodes weak positive correlation examined workloads jobs requiring nodes longer runtime time average 
shown correlation impact performance scheduling algorithms 
key feature correlation reflected model 
independent markov chains node runtime requirements combined incorporate correlation 
straight forward approach merging markov chains single markov chain 
yield high dimensional chain combinations states original chains 
markov chain difficult analyze approach scale incorporating additional job parameters 
algorithm applied transition markov chains 
adjusts new state markov chain node requirements latest transition chain runtime 
example consider observation jobs requiring longer runtime tend request large number processing nodes 
markov chain job runtime state representing longer runtime state markov chain node requirements move state requesting nodes certain probability vice versa 
runtime requirement changes dramatically chain request nodes tendency change 
transformation states different markov chains incorporate correlations examined parameter 
detailed correlation algorithm markov chains correlation value requested number nodes sequence required runtime sequence calculated original workload 
transformation path number nodes denoted represented runtime transformation path 
procedure adjusting state node requirement chain depends independent state changes chains 
distinguish cases 
markov chain number nodes change adjustment applied 
second state changed chain node requirement runtime state node requirement chain adjusted state runtime chain correlation factor cor chains 
third states changed chains correlation order differences cor change runtime chain adjust state node requirement chain 
mathematical description explains detail markov chains combined 
parameter ni specifies node request sequences corresponding mean denoted regards runtime sequence similar definitions apply ri correlation cor sequences calculated cor cor ni ri ri ni denotes expected value function 
index specify original sequences modifications 
furthermore order difference correlation cor denote changes transformation path affect 
order define order correlation precisely variables introduced 
new sets built consist changes transformation path 
ni ni ni ni ni ri ri ri ri ri second shown section elements sequence differ 
consequence sequence order differences includes zero values 
modeling focuses changes system behavior elements removed number nodes required runtime changing 
procedure leads new sets sets formulated follows ni ni ni ri ri ri ni ri correlation cor defined cor cor 
actual values examinations cor cor table 
assume markov chains number nodes required runtime dimensions respectively 
assume synthetically generated transformation path requested number nodes connection state state exists connection synthetic transformation path runtime 
mentioned procedure summarized rules order adjust state markov chain requested number nodes markov chain required runtime 
transformation applied 
state markov chain number nodes changing adjustment markov chain required runtime needed 

destination state adjusted probability correlation 
means resulting number nodes changed probability correlation active state markov chain requested number nodes changed state runtime chain stayed constant 
factor normalization matrices 
value reflects fact markov chain runtime adjustment markov chain number nodes 
job higher runtime higher demand number nodes explained earlier 

destination state changed sign probability correlation 
rule situations markov chains states changing 
incremental changes adjustment 
term describes incremental change markov chain runtime requirement sign indicates direction change 
factor necessary normalization process 
terms describe change originating state basis 
similar step changes applied certain probability 
time calculation incremental changes 
results evaluation examined workloads standard workload archive table 
workloads corresponding markov chains requested number nodes required runtime created 
modeling algorithm new workload traces created markov chains 
quality modeling method measured comparing original newly generated traces statistical temporal criteria 
statistical comparison common method comparing sequences kolmogorov smirnov ks test 
small value indicates high degree similarity 
criteria comparing different workloads squashed area total resource consumptions jobs squashed area req run jobs furthermore calculate difference squashed area sa sa synthetic sa original sa 
original sa ks test ks test squashed area nodes runtime difference nasa sdsc ctc kth lanl sdsc sp sdsc table 
statistical comparison modeled original workloads 
seen table explained markov chains model match original traces 
addition shows distributions runtime node requirements kth workload example 
results squashed area ks test quite acceptable 
ctc workload squashed area criterion shows inappropriate deviation modeled amount workload 
squashed area amount total workload trace significant impact scheduling performance 
information criteria usually provided workload models 
cumulative distribution function kth number nodes sim real cumulative distribution function kth log runtime sim real fig 

comparison modeled original distributions runtime node requirements 
real data markov chain feitelson model model sdsc sdsc kth lanl table 
correlation node runtime requirements 
correlation parallelism runtime compared model model feitelson 
terms correlation models original traces seen table cases model closer real correlation value feitelson model 
note results feitelson model taken 
comprehensive comparison terms squashed area models failed implementation yielded different results 
addressed examinations 
temporal relations autocorrelation original trace modeled workloads examine temporal dependencies sequence 
table shows markov chain model correctly incorporates temporal dependency synthetic data close real data 
probability distribution function model contain dependency 
number nodes series runtime series real data mcm pdf real data mcm pdf sdsc sdsc kth lanl table 
comparison autocorrelation node requirements runtime sequences 
workload model markov chains 
model incorporates temporal dependencies correlation job parameters 
individual markov chains created runtime node requirements jobs 
information extracted real workload traces 
correlation job parameters requires combination different markov chains 
novel approach transforming states different markov chains proposed 
note method shown node runtime requirements 
approach general easily extended incorporate modelling job parameters 
quality modeling method evaluated existing real workload traces 
workload model yielded results comparison real traces 
statistical characteristics temporal dependencies jobs resembled model 
quality criteria assumption model create stream new jobs interaction 
create workload traces evaluation scheduling algorithms 
new scheduling systems benefit dynamic adaptation current system state 
enables scheduler dynamically adjust parametrization consequently behavior 
workload modeling dynamically predict job real job submission 
extension partially included workload model parameters created job depend job 
qualitative evaluation done part experiments 
currently models know incorporates job predictions 

aida 
effect job size characteristics job scheduling performance 
dror feitelson larry rudolph editors job scheduling strategies parallel processing pages 
springer verlag 
lect 
notes 
sci 
vol 


bahl frederick jelinek robert mercer 
maximum likelihood approach continuous speech recognition 
ieee transactions pattern analysis machine pami pages 
reprinted waibel lee pp 


george box jenkins 
time series analysis 
holden day publishing 
isbn 

cirne berman 
comprehensive model supercomputer workload 
th workshop workload characterization dec 

cirne berman 
model supercomputer jobs 
th intl 
parallel distributed processing symp apr 

connor martin atlas 
recurrent neural networks robust time series prediction 
ieee transactions neural networks 

allen downey 
parallel workload model implications processor allocation 
technical report csd university california berkeley november 

allen downey dror feitelson 
elusive goal workload characterization 
perf 
eval 
rev mar 

hamscher 
enhanced algorithms multi site scheduling 
proceedings rd international workshop grid computing baltimore 
springer verlag lecture notes computer science lncs 

hamscher 
advantages grid computing parallel job scheduling 
proc 
nd ieee acm int symp 
cluster computing grid ccgrid berlin may 
ieee press 

hamscher 
effects machine configurations parallel job scheduling computational grids 
international conference architecture computing systems arcs pages karlsruhe april 
vde 

carsten volker hamscher ramin 
economic scheduling grid computing 
dror feitelson larry rudolph uwe editors job scheduling strategies parallel processing pages 
springer verlag 
lect 
notes comput 
sci 
vol 


carsten song ramin 
scaling workload traces 
dror feitelson larry rudolph uwe editors job scheduling strategies parallel processing th international workshop seattle wa usa june volume lecture notes computer science lncs pages 
springer verlag heidelberg october 

carsten ramin 
grid resource management state art trends chapter applying economic scheduling methods grid environments pages 
kluwer academic publishers 

feitelson rudolph sevcik wong 
theory practice parallel job scheduling 
ipps workshop job scheduling strategies parallel processing pages 
springer berlin lecture notes computer science lncs april 

dror feitelson 
packing schemes gang scheduling 
dror feitelson larry rudolph editors job scheduling strategies parallel processing pages 
springer verlag 
lect 
notes comput 
sci 
vol 


dror feitelson 
workload modeling performance evaluation 
tucci editors performance evaluation complex systems techniques tools pages 
springer verlag 
lect 
notes comput 
sci 
vol 


van 
separation acoustic signals self organizing neural networks 
proceedings ieee neural network signal processing workshop madison wi usa pages 


workload evolution cornell theory center ibm sp 
feitelson rudolph editors ipps workshop job scheduling strategies parallel processing pages 
springer berlin lecture notes computer science lncs 

ross robert gentleman 
language data analysis graphics 
journal computational graphical statistics 

franke wang riordan 
modeling workload 
feitelson rudolph editors ipps workshop job scheduling strategies parallel processing pages 
springer verlag lecture notes computer science lncs 

jenkins 
stationary joint distributions arising analysis queue method imbedded markov chain 
journal applied physics 


kolmogorov smirnov test exponential distribution mean unknown 
jasa 

lo 
comparative study real workload traces synthetic workload models parallel job scheduling 
dror feitelson larry rudolph editors job scheduling strategies parallel processing pages 
springer verlag 
lect 
notes comput 
sci 
vol 


uri dror feitelson 
workload parallel supercomputers modeling characteristics rigid jobs 
parallel distributed comput nov 

lo 
minimizing message passing contention fragmentation free processor allocation 

hayes 
face recognition embedded hmm 

rabiner 
tutorial hidden markov models selected speech recognition 
waibel 
lee editors readings speech recognition pages 
kaufmann san mateo ca 

smirni lawrence giuseppe brian carlson 
robust partitioning policies multiprocessor systems 
performance evaluation 

gross 
impact job mix optimizations space sharing schedulers 
proceedings acm ieee conference supercomputing 

parallel workloads archive 
www cs huji ac il labs parallel workload may 

