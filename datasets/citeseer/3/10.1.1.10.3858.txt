constraint relaxation weighted feature structures frederik department computational linguistics saarland university saarbr cken germany coli uni sb de definition unification weighted feature structures designed deal constraint relaxation 
application phrase structure rules natural language processing system adapted inconsistent values lead failure penalised 
penalties signature shape feature structures realise elegant general approach relaxation 
typed feature logic carpenter basis natural language processing nlp systems linguistic knowledge base lkb attribute logic engine ale 
grammar rules framework applied unification fails values inconsistent 
large scale grammars successfully developed framework lingo project obtaining sufficient coverage requires considerable effort grammatical lexical description 
shall talk missing lexical entries 
approaches ensuring sufficient coverage 
extending grammar careful linguistic analysis lingo grammar underspecified language description results may subsequently filtered lexical functional grammar lfg 
cases inconsistent values lead result 
development strategy may beneficial able look consistent values detect may missing grammar 
hand unification failure control strategy available ative grammar formalisms 
relax constraints failure points postponed search space increases 
constraint relaxation new dl formalism devices re 
douglas instance uses patr ii model relaxation grammar constraints 
input analyses constructed constraints rules agree ment subcategorisation relaxed solution 
input ungrammatical technique extends search space rule checked constraints ignored 
promising scaling 
approach crucially relies typed feature logic relax ation keeps track degree ungrammaticality exploiting typed feature structures 
allows hand ignore relatively bad solutions keeps fall back option case promising solutions lead 
structured follows 
briefly recapitulate carpenter definition feature structures unification notion information feature structures shall 
outline intuitions proposal 
followed presentation weighted feature structures unification 
discussion proposals comes 
outline definition feature structures take basis refer carpenter book section 
furthermore rest reasons exposition assume bottom parser 
carpenter formalism rules rewrite number daughter feature structures mother feature structure 
typed feature structures elements define information fea tures types re entrancies 
unifications preserve information 
stream lined view content typed feature structures 
explicit sources information type values provided times example la pr tait fem sg president fem sg president masc sg instances feminine la pr masculine 
singular 
occurrence type implies supertypes occur 
instance semantic relation dog implies semantic relations animate non human 
feature structures nested feature structures value feature structure long path implies occurrence containing feature structure 
analogous feature nesting 
avm instance value head occur linguistic object type sign values synsem local cat 
sign synsem local cat head prep rest section explain 
example shown different values may provided different number times 
assume effect strength weight information value contains example value feminine stronger masculine 
unifications combine weights values unified new information preserved 
information sources viz 
type subsumption feature structure nesting maintained normal unification affect weight information feminine gender gender feminine gender type unification feminine feminine weights fem gender masc gender fem masc gender type unification fem masc weights taken account weight bookkeeping 
demonstrated 
weight type indicated subscript feminine type feminine weight 
simplicity just assume initial weight values reflecting value occurs values 
unification feminine gender weights feminine added gender 
rules define linguistic descriptions unified responsible adding weights type values unified 
potential uses weights choose value correcting mistakes idea floated value greatest weight 
example mean feminine 
direct keep track inconsistencies 
value incon sistent grammar rule unification ignore inconsistency discard 
weights counted separately type explicitly depicted relies type hierarchy completed distributive lattice 
value feature partly removed values specific meet value rule value input disposed 
generalisation values remains 
leads loss weight value sum weights removed type values 
constraint relaxation takes place 
meet relaxation operation carpenter logic types required precisely meet type bounded complete partial order simple task 
values rule general impose limitation case instance feature gender value gender gender general satisfying value feature value 
rule cause information disappear possible values compatible gender 
unification defined replaced case generalisation 
example shown 
lower types weights previous specific types fem masc weight 
value rule requires value masc fem lost 
sum information unification indicated ungrammaticality 
ungrammaticality recorded presence incompatible values fem masc 
shall return difference status values section 
previous robust unification types defined times clearly requires huge data structures 
possible split type hierarchy different classes disjoint counting supertypes harming robust behaviour 
derived signature grammar 
division greatly reduces data structures need reflect entire signature anymore class 
sections define weighted feature structures recovering unification unifies 
weighted feature structures figures shown single type values replaced complex values weights unification 
going happen feature structures 
definitions type set types ordered feat set feature labels 
reproduce feature structure definition 
definition feature structure typed feature structure tuple set nodes containing root node type total node typing function path partial feature value function 
feature structure set nodes linked function assigned type value function 
links labelled elements feat 
definition weighted feature structures redefined value assignment function removed 
definition weighted feature structure weighted feature structure tuple set nodes containing root node set type value nodes type total weight assignment function type total type value assignment function feat partial feature value function 
set weighted feature structures fw 
carpenter book feature structures consist nodes linked functions certain values attached 
function taken 
list list hd ne list anatomy weighted feature structure results feature structure functions 
ellipses elements small circles elements new perform task definition feature structure node describe feature structure nodes reached instance expresses feature leads type 
difference intermediate step type 
picture feature structure shown 
ne list hd function links feature structure nodes types weight 
node returns function takes type gives weight type node 
defined natural number real numbers instance possible 
important definition result node order preserving function 
constraint weight relative types hierarchy general type weight 
condition satisfied weight lost greater extent meet relaxation general 
links feature structure node type value node type 
function runs fact parallel ultimately returned weight returns type value node elements 
task function sure appropriateness values maintained loss information possible 
appropriateness requirements chapter define feature type values features carry 
function separates nodes different type values prevents features appearing types carry 
possible realise loss information join operation loss information represents generalisation ignoring type nodes inconsistent 
direct consequence values weights deeper feature structure discarded 
function links feature structure nodes feature structure nodes feature label links type value nodes feature structure nodes 
consists number equivalence classes nodes equivalent iff reached feature structure node 
considered collection copies various subtrees signature type 
unification define unification weighted feature structures distinction status values grammar needs discussed 
mentioned differences section 
kinds values feature structures phrase structure rules unification formalism need distinguish kinds values 
demonstrate example 
head verb index head head noun index version vp np rule 
rule head value shared left hand side daughter limited verb 
index value shared carry constraints 
value head value second daughter hard wired rule noun 
assumed bottom application rules unify daughter succeeds head index values consistent 
head index verb sing head index noun sing index value fact cause inconsistency maximally underspecified rule 
head value different re entrant verb imposes restriction daughter head value 
lead removal inconsistent information instance feature structure leftmost daughter 
intention case weight nodes specific noun verb incompatible verb removed 
relation values commutative normal unification 
single value noun second daughter performs function pass information mother feature structure 
inconsistency loss information preserved value passed 
important information loss carefully completely recorded consistency maintained analysis tree inconsistent values removed stay tree long consistent requirements rules 
value rule expected called value 
value comes input called ground value 
definition definition recovering unification fw required 
equivalence relation defined defined 
defined undefined feature structure node qp qp qp 

condition designates value 
feature structures unified walking parallel graphs starting feature structure root node 
graphs disjoint 
time feature structure node chosen node type value node element reached type feature structures 
type value nodes graph continued feature link feature structure node 
feature name feature structures 
shape graph links type value nodes feature links preserved result unification 
actual done weight type value node result type set value means value occur inconsistent path type value node contains weight type value nodes 
setting weight type value node removing 
condition ensures just root value feature structure lost entire feature structure goes 
remains shown unification feature structure feature structure 
follow lines proof carpenter 
proof finite set type value nodes finite number types finite 
finite reasons mutatis mutandis 
quotient set classes type value nodes related single feature structure node 
total nodes type values defined 
total nodes weight weights taken feature structures sum see 
operations keep order preserving 
paths depend type value nodes chosen type intro implies type values nodes equivalent reached type equivalent feature structure nodes depend chosen feature structure nodes equivalent path 
remarks discussed rule applications extent issues mentioned 
concerns lexical entries 
setup lexical entries contain original weights parsing begins 
values feed rules may lost 
reason information loss size feature structures different lexical entries vary considerably significance grammaticality lexical entries 
contrary equally 
subtracted information taken account reflects better happening information sum done 
bigger feature structures course lose information ungrammatical smaller ones spirit proposal centered information feature structures contain 
rule type value missing hard wired value left hand side 
clearly value get daughters re entrant value right hand side 
contributes information instance may trigger unification failure prohibit application rule 
keep monotonicity information loss see order able compare obtained information weight lexical entries input values initialised non zero weight satisfies constraints rule applied 
weight added original total weight input lost 
information loss counts 
item pertains weights values 
filter incompatible information compatible type values get weight greater feature structure values 
condition definition desired effect 
especially relevant joins incomparable types 
suppose defined unification keep weight 
clearly desired result weight set value greater 
discussion weights weights confused frequencies probabilities 
purpose measure feature structure lost rule application 
weight feature structure indicates useful information contains information lost 
pointed weights defined non negative integers limitation extend real numbers 
proposal specifies numbers represent 
possible kind value may think automatically collected weights different values 
weight type node reflects value time mentioned feature structure 
choice working value observed mathematical structures grammar done compiler 
intention suggest techniques algorithms obtain values 
expect topic research 
instance conceivable gender information noun weighted heavier determiner adjective 
effect weights clear solutions ranked original information lost 
amounts depends location value generalisation 
example head empty subcategorisation list head complement rule requires list empty 
assume hpsg subcategorisation principle applies re entrancy subcategorisation mother head daughter element list head daughter complement daughter 
weight complement daughter lost entirely re entrancy pass re entrancy active subcategorisation lists empty 
generalises values 
loss dramatic result useful 
initial tests toy grammars show information loss feature structures spiral considerable loss just bad rule applications 
rule applications compound effect 
information loss may able effectively fulfil function sign post search space 
rule definition framework way rules defined important 
choice specifying different specific values general value 
choice lead loss information increased ungrammaticality results 
general value needs rules variation values tolerated 
speculate best choice determined empirically grammar text type 
choice affect declarative meaning rule behave differently far linguistic descriptions concerned different effect degree ungrammaticality result 
evaluation concrete evaluation technique 
possible evaluation scenario text containing errors taken 
text corrected parsed non robust grammar interpretation 
versions text parsed robustly 
results robust parser coverage non robust text errors receive analyses corrected version guaranteed logical properties formalism 
analyses returned ungrammatical sentences inspected extent correct ranking candidate analyses 
places ranking tuned modifying weights values changing grammar rules see section signature 
possible restriction ordering weights order preserving acceptable 
constraint fundamental properties feature structures case representations take place feature structures 
monotonicity important arguments declarative approaches nlp monotonic 
clear case inconsistency information removed 
rely property 
clear monotonicity maintained case consistent values 
treatment inconsistent value falls categories 
value grammar rule part inconsistency values kept monotonic 
grammar rule causes value stripped feature generalises value chance values filled compatible original value non monotonicity appears 
loss weight inconsistency clearly marked possible treat results differently 
loss information monotonically increasing 
information added rule application registered lost 
investigated setup interacts default unification persistent associative default unification 
interesting note sch ter instance uses signature assumptions show similarities model defaults 
devices formal devices definite clauses lexical rules considered 
lexical rules usually different unary phrase structure rules apart mentioning potential problem circular applications discuss 
definite clauses exist instance ale different need closer study 
want offer remarks topic 
may necessary processing large scale grammars lingo english resource grammar written formalism far parsing concerned 
second may treated similar way phrase structure rules 
single head body clauses 
bottom application option weights carefully traced processing loss information stabilises 
approaches earlier descriptions constraint relaxation named 
types 
douglas instance works untyped unification formalism patr ii 
rules context free backbone annotated constraints satisfied 
extension douglas consists associating constraints relaxation control information grammar writer encode explicitly 
general proposal comes krieger sch fer weights 
allow grammar writer define open world types 
types unify explicitly defined incompatible 
gives behaviour combination type values 
main purpose aiding grammar development 
currently similar techniques proposed treatment coordination unification frameworks 
approaches need distinguish grammatical ungrammatical values remains seen similar really proposed 
example vogel cooper typed framework exploit advantage 
treatment clashes limited atomic types 
respect comparable 
kim describes version graded unification reduces unification unification atomic values focusses parsing strategies 
summary form typed unification deal inconsistent values 
unified values inconsistent consistent value expected rule consistent 
assumption grammar correct values input removed extent inconsistent 
loss information penalised 
obtained attaching weights feature structures property sets proposal 
relies underlying logic general elegant way realising typed constraint relaxation 
research funded university essex studentship collaborative re search centre sfb resource adaptive cognitive processes funded deutsche forschungsgemeinschaft 
doug arnold discussions anonymous re viewers helpful comments 
bod ronald kaplan 
probabilistic corpus driven model lexical functional analysis 
proceedings th conference acl th ternational conference computational linguistics volume pages universit de montr montreal quebec canada august 
international committee computational linguistics 
bob carpenter 
logic typed feature structures applications unification grammars logic programs constraint resolution 
number cambridge tracts computer science 
cambridge new york melbourne 
bob carpenter gerald penn ale 
attribute logic engine user guide ber 
version 
www cs toronto edu ale files 
ps gz 
ann copestake 
implementing typed feature structure grammars 
stanford ca 
ann copestake dan flickinger 
open source grammar development environment broad coverage english grammar hpsg 
proceedings lrec athens greece may june 
european language resource association 
douglas 
robust patr error detection correction 
sch ter vogel chapter pages 
frederik 
robust unification linguistics 
proceedings pages lausanne october 
albert kim 
graded unification framework interactive processing 
proceedings nd annual meeting acl pages las cruces new mexico usa june 
association computational linguistics 
tracy holloway king stefanie annette frank jonas kuhn john maxwell iii 
ambiguity management grammar writing 
hinrichs editors proceedings workshop linguistic theory gram mar implementation birmingham great britain august 
esslli 
hans ulrich krieger ulrich sch fer 
tdl type description language hpsg 
part overview 
research report rr deutsches forschungszentrum nstliche intelligenz dfki saarbr cken germany november 
alex lascarides ted briscoe nicholas asher ann copestake 
order independent persistent typed default unification 
linguistics philosophy february 
revised version ii wp august march 
chapter 
lingo 
english resource grammar 
available line 
lingo stanford edu ftp erg july 
version june 
andreas sch ter 
paraconsistent feature logic 
sch ter vogel chapter pages 
andreas sch ter carl vogel editors 
nonclassical feature systems volume ed working papers cognitive science 
centre cognitive science university edinburgh 
carl vogel robin cooper 
robust chart parsing mildly inconsistent feature structures 
sch ter vogel chapter pages 
