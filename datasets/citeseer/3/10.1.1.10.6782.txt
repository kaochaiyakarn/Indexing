schema scheduling event processors buffer minimization queries structured data streams christoph koch stefanie nicole bernhard technische universit wien vienna austria email koch dbai tuwien ac technische universit wien vienna austria email wit tuwien ac humboldt universit zu berlin berlin germany email informatik hu berlin de technische universit nchen munich germany email bernhard tum de introduce extension xquery language flux supports event query processing conscious handling main memory buffers 
purely event queries language executed streaming xml data direct way 
develop algorithm allows efficiently rewrite event flux language 
algorithm uses order constraints dtd schedule event handlers minimize amount buffering required evaluating query 
discuss various technical aspects query optimization query evaluation framework 
complemented experimental evaluation approach 
xml data exchange format internet 
stream processing naturally bears relevance data exchange context commerce 
increasingly important data management scenario processing streams exchanged xml data 
weaknesses xml semistructured data model observed time cf 
xquery xml streams seen prototypical instance problem queries structured vs flat tuple data streams 
query engines processing streams naturally main memory 
conversely ef support project austrian science fund fwf 
permission copy fee part material granted provided copies distributed direct commercial advantage vldb copyright notice title publication date appear notice copying permission large data base endowment 
copy republish requires fee special permission endowment 
proceedings th vldb conference toronto canada developing main memory xquery engines original emphasis stream processing bea observed worthwhile build systems stream processing operators 
excessive need buffers current main memory query engines causes scalability issue identified significant research challenge 
efficient evaluation xpath queries streams worked extensively past state art techniques little main memory done efficiently processing xquery streams 
nature xquery data transformation query language entirely different node selecting xpath requires new techniques dealing reducing main memory buffers 
state art xquery engines consume main memory large multiples actual size input xml documents 
projects addressed xquery streams transducer networks 
automata techniques usually quite elegant hard compare integrate approaches usually generalize real world query languages full xquery great expressive power odd features artifacts standardization process 
approach addressing problem reducing main memory consumption engine full xquery aims reducing amount data buffered main memory pre filtering data read stream paths occurring query 
realworld need substantial main memory buffers avoided general 
important goal devise principled machinery processing xquery parsimonious resources allows minimize amount buffering 
machinery needs intermediate representations queries syntactically close xquery allow algebraic approach query optimization buffering optimization target 
necessary allow extensibility leverage large body related earlier done database research community 
knowledge principled exists query optimization framework xquery automata structured data streams xml flat tuple streams honors special features stream processing 
framework optimizing queries structured data streams exists captures spirit stream processing allows query optimization schema information 
xquery algebras meant conventional query processing applying streaming context 
problem optimizing set constraints holding xml data model schema addressed 
attempt improve situation 
introduce query language flux extends xquery new construct event query processing called process stream 
flux motivates direct mode query evaluation data streams similar query evaluation provides strong intuition main memory buffers needed queries 
allows strongly buffer conscious mode query optimization 
main focus automatically rewriting event flux queries time optimizing reducing buffers schema information dtd 
consider xquery bibliography domain taken xml query cases xmp results root bib book return result title author result results book bibliography query lists title authors grouped inside result element 
note xquery language requires book titles output authors 
dtd element bib book element book title author specifies book node may title author children 
priori order items inferable dtd 
implement query may output title children inside book node soon arrive stream 
output author children needs delayed memory buffer reach closing tag book node time title nodes may encountered 
may flush buffer author nodes empty refill author nodes book 
need buffer author children book node time titles 
current main memory query engines exploit fact buffer entire book nodes optimization title author nodes book 
previous frameworks evaluating optimizing xquery provide means making subtlety explicit reasoning 
process stream construct flux allows express precisely mode query execution just described 
xquery phrased flux query follows results process stream root bib bib return process stream bib book book return result process stream book title return past title author return book author return result results process stream expression consists number handlers process children xml tree node bound variable left right 
handler fires child labeled visited traversal executing associated query expression 
process stream book expression past title author handler fires exactly soon dtd implies time author title node encountered children book 
observed weak dtd case soon child book seen 
query associated past title author handler may freely paths form book author book title paths encountered anymore may assume query engine buffered matches paths 
feasible task query engine buffer paths query employs see 
call query safe dtd informally guaranteed xquery subexpressions loop query refer paths may encountered stream 
flux query safe expression employs book author path part handler fire author nodes relative book seen 
path book author replaced say book price dtd production book element book title author price flux query safe 
case firing past title author buffer book price items empty query result incorrect 
query processed efficiently schema xml query cases element bib book element book title author editor publisher price buffering required execute query dtd asserts book title occurs strictly authors denote title author called order constraint 
may phrase query flux directly copy titles authors output arrive input stream 
data items need buffered 
results process stream root bib bib return process stream bib book book return result process stream book title return author return result results contributions follows 
introduce flux query language extends xquery natural stream processing construct discussed 
define safe flux queries dtd flux queries xquery subexpressions usual semantics executed data items referred fully read stream may assumed available main memory buffers 
algorithm schedules streams dtds transforms optimized flux queries 
discuss realization query engines flux runtime buffer management 
built prototype flux query engine evaluate means number experiments 
knowledge optimizing xquery schema constraints derived dtds main strength approach taken extensibility space limitations require restrict discussion powerful fragment xquery results generalized larger fragments 
discussion lay foundations algebraic optimization queries information schema 
structured follows 
start basics dtds regular languages section 
section defines query languages considered section specifies xquery fragment 
section defines flux language section singles safe flux queries 
section presents algorithms translating xquery simplify presentation restrict dtds required information derived xml schemata 
particular normal form section transforming normal form flux section 
examples transformation section 
section discuss implementation prototype system actual handling buffers query evaluation 
section experiments conclude discussion section 
preliminaries simplicity exposition consider fragment xml attributes data model 
note substantial restriction attributes handled way subelements 
focus valid documents documents conforming document type definition dtd 
set symbols tag names 
dtd extended context free grammar 
dtds local tree grammars competing nonterminals left hand sides productions production dtd unambiguously identified tag name 
regular expression symb set atomic symbols occur 
denote language defined set words symb recognizable 
word wi denote th symbol 
define binary relation ord ord wi wj ord holds word symbol preceded symbol 
symbols occur symbols 
refer constraint form ord order constraint 
example 
ord ord ord ord 
ord transitive ord 
dtds nice property regular expressions appearing right hand sides productions unambiguous 
guarantees equivalent deterministic finite automaton computed polynomial quadratic time 
show proposition regular expression dtd ord computed time :10.1.1.10.6782
regular expression 
word 
un symb past symb uw wi past past past 
un intuitively processing word uw left right past holds reading symbol earliest possible time know symbols seen anymore word uw 
query language section define syntax semantics flux query language extends xquery fragment denoted xquery construct event query processing 
defining flux xquery need notation 
write 
denote variables range xml trees 
overload meaning variable bound xml tree root labeled writing mean dtd production unambiguously identified element example dtd contains rule element regular expression write ord ord write symb symb 
fixed path sequence 
ai symbols dtd 
xpath expressions excluded 
atomic condition form relop exists relop string fixed paths relop 
condition boolean combination true atomic conditions 
xquery fragment xquery definition xquery xquery fragment xquery smallest set consisting expressions 
empty query 
output fixed string 
sequence 
return loop 
return conditional loop 
output subtrees reachable node path 
output subtree node 
conditional fixed path fixed string condition xquery expressions 
xquery similar fragment standard xquery differs treat fixed strings inside queries 
example string hello valid xquery standard xquery 
query result root bib book result understood standard xquery result node embedded query produce children 
query read sequence queries write string result bib book subtrees string result output 
subtlety hand convenient obtaining main results section hand proposition shows cause problems 
alternative semantics xquery basis optimizations internally query engine 
users formulate input queries standard xquery may assume usual semantics 
xquery resp xquery denote xml document stream produced evaluating query document xquery semantics resp standard xquery semantics 
proposition xquery parses xquery query 
input document xquery xquery 
syntax semantics flux simple expression xquery expression form possibly empty sequences strings expressions form condition string 
empty variable condition 
form atomic condition occurs contains variable instance simple expression 
definition flux class flux expressions smallest set expressions simple form process stream possibly empty strings variable list entries separated semicolons event handlers 
event handler types 
called handler past return symb xquery expression 
called handler return variable element name symb flux expression 
ps shortcut process stream past abbreviation past symb furthermore past place past 
examples flux expressions informal description flux semantics section examples section 
general evaluate expression process stream follows event handling statement considers children node currently bound variable list stream nodes processes list node time 
processing node children 
tn labels ti denoted label ti proceed follows 
times scan list event handlers 

doing test event handler event condition satisfied case event handler fires corresponding query expression executed handler return fires label ti handler past return fires past label 
label ti true time processing children symbol encountered anymore event handler fired previous scans 
summary possible events fire single node case processed order handlers occur 
run 
tn handler may fire zero times handler executed exactly 
flux xquery expression free set free variables defined analogously free variables formula order logic 
free free consists free variables appear 
free return contains variable variables free 
free process stream consists variable event handler form past return variables free likewise event handler form return variables free 
note expressions form return event handlers form return bind variable remove free variables 
flux query flux expression free variables special variable root corresponding root document bound 
query flux resp xquery require free root resp free root 
example shows xquery query transformed flux query straightforward way 
example xquery query equivalent flux query ps root past return section show depending dtd flux query transformed equivalent flux query evaluated efficiently 
size expression denoted refer size string representation 
parent variable flux xquery expression flux query denoted refer variable bound nearest root variable exists 
condition paths refer set paths condition occurs 
flux xquery expressions write resp denote subexpression resp proper subexpression 
xquery subexpression flux expression called maximal xquery expression note flux query may contain maximal expressions 
example maximal xquery subexpressions flux query section book author return 
safe queries define notion safety flux queries 
informally query called safe dtd guaranteed xquery subexpressions refer paths encountered input stream compliant dtd 
precise definition need notion 
set dependencies variable flux xquery expression defined dependencies ex 
condition path ex 
starts symbol return 
definition safe queries flux query called safe dtd subexpression ps conditions satisfied 
handler past return list true dependencies ex 
ord free symb ex 
ord 
return return return return return return new return return normal form rewrite rules 
rule applied downwards expression line replaced expression line 

handler return list maximal xquery subexpression true dependencies ord note definition simple shown notion safety sufficient ensure main memory buffers fully populated accessed query flux query evaluated straightforward way input streams compliant dtd 
examples safe flux queries sections 
precise flux queries occurring safe 
translating xquery flux section address problem rewriting query xquery fragment equivalent flux query employs little buffering possible 
rewriting proceeds steps transform xquery query equivalent query xquery normal form section 
depending dtd normalized query rewritten equivalent safe flux query section 
flux extensions manage event streaming execution query 
subqueries exclusively working buffered data xquery expressions 
normal form xquery xquery expression transformed normal form rewriting subexpressions rules changes possible 
xquery expression normal form properties hold paths inside conditionals simple step paths form 
expression normal form contain conditional loops normalization process pushes conditionals inside innermost loops 
subexpression form fixed string form variable theorem rule applications implemented way rewriting terminates input xquery expression rule applications unique result called normalization equivalent example xmp consider xquery books published addison wesley including year title 
bib root bib book publisher addison wesley year return book year title book bib abbreviate condition query 
normalization bib bib root bib return bib book return book year year return year title title return title book bib rewriting normalized xquery flux formulate main rewrite algorithm transforming normalized xquery queries equivalent safe flux queries need notation 
set tag names occurring dtd 
denote empty list 
list event handlers inductively define set handler symbols handler handler exists return past return algorithm recursively rewriting normalized xquery expressions flux shown 
note algorithm uses order constraints depends underlying dtd 
function rewrite variable set xquery returns simple dependencies return return ps past return rewrite match ps rewrite match ps return ps simple form return ps past dependencies return form return dependencies ord return ps past return return ps past return rewrite return ps return expression algorithm rewriting xquery flux 
query obtain corresponding flux query rewrite root 
example runs algorithm section 
goals design algorithm produce flux query safe dtd equivalent input xquery minimizes amount buffering needed evaluating query xml document 
meet goals particular order statements algorithm lines crucial 
set handler symbols passed recursive calls algorithm resulting flux query safe 
important construct meeting goal case distinction lines handler created provided safe handler created 
theorem dtd normalized xquery query rewrite root runs time produces safe flux query equivalent xml documents compliant dtd 
algorithm performs single traversal query tree 
runtime mainly caused need compute dependencies 
note resulting flux query normal form 
examples discuss effect rewrite algorithm sample queries xquery cases 
example xmp consider xquery xquery cases creates flat list title author pairs pair enclosed result element 
due space limitations omit give normalization similar original xquery results bib root bib return bib book return title return author return result result results dtd impose order constraints title author dtd section rewrite root proceeds follows decomposed subexpressions consisting line consisting lines 
rewrite algorithm recursively called 
simple call produces result ps root past return results call decomposes subexpressions consisting lines consisting line 
recursive call rewrite root executes lines algorithm loop parent variable root associated set 
result ps root bib bib return produced result produced recursive function call rewrite bib lines 
recursive call subquery executes lines algorithm producing expression ps bib book return result rewrite subquery lines 
rewrite queries attributes 
loop parent variable associated set author call line algorithm executed producing expression ps past author title return rewrite root returns flux query ps root past return results bib bib return ps bib book return ps past author title return title return author return result result past bib return results refer ps expression lines evaluating query xml document xquery inside evaluated author title nodes encountered buffered 
consider case dtd production element book author title order constraint author title met 
running rewrite root encounter situation author previous dtd 
processing recursive call rewrite lines algorithm executed eventually producing result ps title return ps past return author return result result rewrite root yields query differing lines replaced expression 
evaluating xml document compliant second dtd author nodes arrive title nodes buffered 
encountering title node input stream invokes actions value particular node buffered past delays execution complete title node seen 
iterate buffer containing collected author nodes time writing buffered title current author output 
contrast worstcase scenario buffer title time addition list authors 
title strategy clearly preferable 
demonstrate conditional loops optimized correspondingly 
example xmp consider query normalization example 
dtd impose order constraints dtd element bib book element book title publisher year function call rewrite root rewrites flux query ps root past return bib bib bib return ps bib book return ps past publisher year return book past publisher year return year year return year past publisher year title return title title return title past publisher year title return book past bib return bib handler lines delays query execution title nodes buffered publisher year nodes seen 
different dtd ensuring year title publisher title hold title nodes processed produced streaming fashion 
query rewrite root new dtd differs query subexpression lines replaced title title return title consequently titles buffered evaluation query 
rewrite algorithm capable optimizing joins join predicates demonstrated example part xquery cases 
example remain bibliography domain consider documents compliant dtd element bib book article element book title author editor publisher element article title author journal xquery retrieves authors articles coauthored people edited books results bib root bib return article bib article return book bib book article author book editor return result article author result results remainder example abbreviate join condition comparing authors articles editors books 
normalization yields query results bib root bib return article bib article return book bib book return result author article author return author result results executing rewrite root dtd recursive call rewrite bib eventually invoked subexpression lines 
loop parent variable bib associated set book line algorithm executed returning expression form ps bib past book article 
order constraint article book holds handler ensures ar books buffered 
altogether rewrite root produces flux query abbreviation loop books lines ps root past return results bib bib return ps bib past book article return article bib article return past bib return results different dtd imposes order books articles production element bib book article buffering book nodes evaluate processing article nodes streaming fashion 
executing rewrite root new dtd eventually encounter situation set lines line previous dtd executed 
altogether flux query produced differs query subexpression lines replaced ps bib article article return ps article past author return book nodes arrived article node encountered data books available buffers article node read 
processing children article node buffer author nodes query evaluated current article 
evaluation buffer authors single article addition data stored books evaluation requires authors articles buffered 
implementation section discuss implementation query engine evaluating flux queries obtained xquery rewriting algorithm previous section 
focus allocation buffers query evaluation 
flux query statically infer buffers necessary order avoid superfluous buffering 
prefiltering techniques generalize scenario certain parts input need buffered query processed fly 
buffers implemented lists sax events 
events stored buffer represent formed xml sense start element events element events properly nested 
renders data read stream replayed buffer indistinguishable data read input stream 
implementation employ set operators handling events originating streams buffers 
say flux query normal form maximal xquery subexpressions normal form 
safe flux query normal form 
flux query engine identifies nodes stored buffers nodes compared join conditions roots buffered subtrees output buffered nodes loops iterate 
formally xquery subexpression define set buffered paths starting variable return contains atomic condition relop relop 
variable safe flux query normal form define union maximal xquery subexpression prefix tree constructed merging paths 
intuitively prefix tree defines projection input document describes parts input tree buffered 
optimize prefix tree order restrict amount data buffered 
tree obtained marking node occurs join condition entire subtree rooted node output buffered 
unmarked nodes merely store sax events opening closing tag 
physical query evaluation proceeds way similar followed 
bib article book author publisher buffer trees variables bib article 
clearly node marked buffer subtree buffer subtrees descendant nodes time 
buffer data topmost marked nodes 
example need buffer subtrees reachable paths respectively prefix restrict buffering subtree identified 
pruned prefix tree obtained successively removing subtree rooted node ancestor node marked 
refer buffer tree 
assume variables queries uniquely variable name bound place query 
safe flux query normal form set variables free maximal xquery subexpressions variables precisely define buffers 
example flux query selects book publishers ceo published articles 
ps root bib bib return ps bib article article return ps article past author return book bib book return book publisher return article author book publisher ceo bib article compute sets buffer paths variable bib bib book publisher ceo bib book publisher article article author construct buffer tree variable nonempty set buffer paths 
obtain trees shown bullet denotes marked node 
note leaf node ceo pruned buffer tree variable bib 
evaluate safe flux query normal form follows 
compute construct buffer tree variable associate evaluator function variable variable bound node incoming xml tree evaluator eval responsible handling events generated processing children define buffer buffer variable evaluator calls eval buffer initialized entering scope freed re entering 
buffer tree considered schema events stored buffer buffer time buffer tree determines set evaluators extended buffers correctly filled 
node buffer tree reachable path 
implement corresponding buffering strategy set evaluators 
starting eval successively extend evaluators responsible handling children node labeled ai events opening closing tag respective node added buffer cases evaluator exists introduce new variables evaluators accordingly 
case statement evaluator event node label clear corresponding commands introduced 
case marked insert respective code adding events corresponding node subtree buffer example consider query example 
set buffer trees query publisher node replaced editor node 
flux evaluation strategy follows 
event eval root switch case ofp output results case bib initialize buffer bib eval bib node case ofp bib output results event eval bib switch case book buffer bib add book eval book node buffer bib add book case article initialize buffer article eval article node event eval book switch case editor buffer bib add node event eval article switch case author buffer article add node case ofp author execute subquery stream evaluator variable root handles event past denoted ofp writing opening tag results output 
correspondingly event ofp bib signals stream closing tag results output 
processing sax event opening tag root node bib buffer associated variable bib initialized evaluator bib takes handle events generated parsing children bib 
book nodes arriving stream stored buffer variable bib editor nodes buffered evaluator variable book complete subtrees 
safe flux queries may rely fact buffer flux galax benchmark results 
buffer bib filled time encounter article node 
buffer freed complete subtree node bound variable bib parsed 
processing children article node authors buffered buffer article event ofp author guarantees subquery executed correctly 
join conditions handled similarly buffering constituent paths condition 
simple conditions comparing path constant evaluated fly reading paths boolean flag required appropriately initialized entering relevant variable scope 
experiments order assess merits approach experimentally evaluated prototype query engine implemented java number queries data obtained xmark benchmark generator 
implementation supports xquery fragment defined section 
took selected queries xmark benchmark xquery include certain features queries adapted correspondingly 
detail attributes converted subelements parent element tests xmark dtd adjusted accordingly 
occurrences xpath step text replaced expressions print element 
eliminated count aggregations outputting 
xmark queries adjusted sketched 
extracted flwr subexpression original query computes persons income available novel query 
queries obtained full 
data generated xmark data generation tool sizes mb mb mb mb input data 
tests performed sun jdk built sax parser amd athlon xp ghz mb ram running linux linux kernel 
query engine implemented precisely described 
implementation galax query engine employed projection turned 
performance query evaluation studied measuring execution time seconds maximum memory consumption bytes engine 
memory cpu usage query engines measured internal monitoring functions excluding fixed memory consumption java virtual machine 
give broader overview performance approach evaluated queries additionally commercial xquery system major remain anonymous called 
unfortunately determine exact memory consumption system 
state execution time 
able parse query able list execution time 
shows results experiments 
evaluate queries input greater mb galax needed mb main memory running minutes caused system start swapping 
runs aborted 
obviously prototype engine clearly outperforms galax respect execution time memory consumption 
queries evaluated fly buffering order constraints imposed dtd 
query buffer single element time leads low memory consumption comparison traditional approach 
queries perform join subtrees people closed auction resp 
open auction inevitably buffer elements 
due effective projection scheme small fraction original data buffered 
rapid increase execution time due fact compute joins naive nested loops moment 
orthogonal vital issue 
comparison execution times shows competitiveness query engine 
ran memory processing queries marked maximum heap size java vm set mb cases give results case 
altogether optimization approach perform respect execution time max times taken query rewriting negligible reported separately experiments 
imum memory consumption maximum size xml documents processed 
discussion main memory probably critical resource streamed query processing 
keeping main memory consumption low vital scalability indirectly great impact query engine performance terms running time 
main contribution flux language algorithm automatically translating significant fragment xquery equivalent flux queries 
flux intended internal representation format queries language users provides strong intuition buffer conscious query processing structured data streams 
algorithm uses schema information schedule flux queries reduce buffers 
evidenced experiments approach dramatically increases scalability main memory xquery engines think close exhausting approach respect run time buffer management query processing query optimization 
particular constraints cardinality constraints derived dtd telling book node publisher child denoted publisher book simplify rewritten flux rewrite rules return return return form basis algebraic query optimization buffer minimization 
sequences loops iterating singletons natural product normalization process described 
example query root book return publisher name publisher address uses sequence loops publisher normal form rewritten rule 
merging loops possible obtain flux queries require buffering subsequent loops path generally cause path buffered 
important optimization push moved query tree obtain normal form back expression tree soon simplifications realized 
abiteboul buneman suciu 
data web 
morgan kaufmann publishers 
franklin 
efficient filtering xml documents selective dissemination information 
proc 
vldb pages cairo egypt 
br klein wood 
unambiguous regular languages 
information computation 
buneman koch 
path queries compressed xml 
proc 
vldb pages 
chan felber garofalakis rastogi 
efficient filtering xml documents xpath expressions 
proc 
icde san jose california usa february march 
deutsch tannen 
reformulation xml queries constraints 
proc 
icdt 
fegaras levine bose 
query processing streamed xml data 
proc 
cikm pages 
fernandez sim wadler 
semi structured data 
proc 
icdt pages 
florescu kossmann lucas riccardi carey agrawal 
bea streaming xquery processor 
proc 
vldb pages 
green miklau suciu 
processing xml streams deterministic automata 
proc 
icdt 
gupta suciu 
stream processing xpath queries predicates 
sigmod conference pages 
koch 
schema scheduling event processors buffer minimization queries structured data streams 
technical report cs db corr 
arxiv org abs cs db 
lud scher mukhopadhyay papakonstantinou 
transducer xml query processor 
proc 
vldb pages 
marian sim 
projecting xml documents 
proc 
vldb pages 
murata lee mani 
taxonomy xml schema languages formal language theory 
extreme markup languages montreal canada aug 
bry 
evaluation regular path expressions qualifiers xml streams 
proc 
icde bangalore mar 
poster session 
world wide web consortium 
xquery xpath formal semantics 
working draft aug th 
www org tr query algebra 
xml query cases 
working draft may 
www org tr 
