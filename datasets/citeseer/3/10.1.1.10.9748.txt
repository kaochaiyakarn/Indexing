classical search strategies test case generation constraint logic programming alexander pretschner institut informatik technische universit nchen germany www tum de test case generation concurrent reactive systems grounds symbolic execution basically amounts searching state space 
case model checkers different search strategies depth breadth best tabu different strategies storing visited states significant impact performance generation algorithm 
experimental data performance different search strategies discuss results account counter examples generated model checkers 
keywords 
case model checking state representations symbolic execution 
usually errors early software development design phases result disproportionately high costs corrected 
due increasing number implications design decision earlier decision implications involves 
commonly accepted solution problem incremental approach software hardware development 
idea get possibly executable pieces software models hardware early phases validation interacting respective customer verification specifications properties 
focus reactive embedded systems concentrate behavior models 
order get executable behavior models system suitable high level preferably graphical specification formalism needed 
finite state machines identified practically usable candidate 
adequate case tools systems built simulated verified 
simulation helps developer understanding system detecting errors customer interaction validation 
verification validation usually achieved testing checking certain input system output corresponds desired 
testing incomplete 
semi automatic proof systems model checkers aim guaranteeing system satisfies certain property 
basically exhaustively search system state space 
necessarily requires finite state spaces smv spin built abstractions uppaal hytech restricted class hybrid systems 
problem state space explosion obvious 
side practical considerations concept model checkers focus verifying properties models 
area embedded systems system model just step development process system implemented specification model respectively validated 
implementation process may introduce errors detected 
instance conformance testing amounts showing behaviors implementation constitute subset behaviors specification 
article continue series papers model test case generation reactive systems specified case tool autofocus :10.1.1.21.112
idea system model network hierarchic components associated behaviors supported dlr project dfg project ref 
generation test cases fed actual implementation hardware 
note test cases validating system model induces lack instance decides behavior exhibited test case correct testing implementation model plays role instance 
tool prototype takes autofocus system description translates constraint logic programming clp symbolically executes resulting system 
involves guessing procedure transition taken 
guessing procedure difference search strategies breadth depthfirst best 
re examine example earlier apply different search strategies test case generation procedure compare quantitatively 
contribution consists number statistics indicate superiority best search 
suitable fitness function defined random depth search global state storage deployed competitive parallel setting choice 
furthermore discusses conceptual differences search strategies model checkers strategies test case generation 
related 
incremental sw development processes include rapid prototyping spiral meta model extreme programming modeling geared reactive systems cleanroom model crm 
benefit models particularly acknowledged rational unified process crm 
embedding model testing incremental processes discussed 
theory formal testing tackled 
share commonality defining observational congruence selection hypotheses systems 
similar relations compute system model conforms specification 
differ approach want prove conformance relation approximate proof done traditional testing 
constraint logic programming test case generation approach differs class systems consider input language concept interface combined approach behavior specifications automata functional definitions transitions induced necessity powerful constraint handlers grounds constraint handling rules chr 
tool generation test cases lustre see 
difference approach model checkers random number generators generation test cases restriction boolean data types 
code generation grounds clp various non modular automata considered 
relationship model checking lp possibly tabled resolution procedures discussed :10.1.1.32.949:10.1.1.43.1094
bounded model checking propositional solvers test case generation considered 
test case generation grounds mutation analysis treated 
context mutation testing constraints generation test cases transformational systems 
idea formulate constraints approximate criteria killing mutants 
uses mixture bdds presburger constraints representation sets states reactive systems 
uses linear constraints real numbers model checking hybrid systems 
clearly focus model checking 
difference approach mixing enumerative symbolic techniques computing fixed points sets constraints chr constraint solvers arbitrary domains fd allowing convenient interactions user defined specifications test cases 
overview 
remainder organized follows 
section give brief overview specification concepts case tool autofocus introduce example taken assessing different search strategies smart card inhouse access control 
main part section approach test case generation grounds clp 
search strategies state storage algorithms discussed assessed 
examine relationship search strategies test case generation model checking 
section concludes outlook current 
assume familiarity basic concepts clp finite state machines depth breadth best search strategies 
terminology 
terminology 
test sequence sequence input output event tuples 
test case describes set test sequences imposing constraints unbound variables tuples 
test case specification formalization test purpose ensure coverage criterion aim test case generation find test cases sequences satisfy certain test case specification 
note may include test unspecified parts system behavior 
autofocus section briefly modeling concepts case tool autofocus autofocus tum de example earlier basis generation test cases clp 
autofocus 
similar uml rt systems modularly specified different views 
architectural view shows system structure consists possibly hierarchic components interconnected typed directed channels 
typing achieved predefined user defined data types possibly recursive types defined means gofer functional language 
bottom level component hierarchic component equipped extended finite state machine machine access component local variables 
transitions equipped guard accesses local variables means pattern matching input channels respective component 
language guards functional language mentioned possible define functionality means state machines means possibly recursive functions 
guard holds true transition may fire resulting update component local variables change current control state 
initial states marked black dot thing acceptance condition 
transition fire selected non deterministically system remains current state 
components timed global clock perform computations firing transitions simultaneously 
communication synchronous asynchronous communication implemented explicit buffer components 
addition architecture behavior data view autofocus sequence charts 
consider play important role development process specification definition test cases graphical representation simulation results 
autofocus equipped code generators java prolog ada 
furthermore connected plethora external tools 
include model checkers smv cke propositional solver sato coverage measurements test cases generated ada code doors requirements tracing 
example 
example model smart card may inhouse access 
inserting card personal identification number pin terminal terminal may may rights user owns access particular door 
involves running authentication identification protocols card terminal 
pin may blocked authentication process fails times unblocked corresponding personal unblocking key entered 
example part industrial case study carried order assess practical applicability tool prototype discussed detail 
card part system consider consists single component accepts commands input channel 
commands provided terminal include commands authentication identification reading writing data card output signal possible command possible command autha possible command reset reset read ok ready df admin auth key autha auth key autha auth auth pin key auth auth autha auth possible command df user reset reset reset possible command auth auth possible command mf df init auth key autha df user autha possible command read verify ch ok pin key df admin reset reset auth inhouse card df user signifies input command legal 
behavior depicted fig 

roughly speaking different states correspond different access right levels parts card data 
state changed adequate authentication process 
process fails respective counter state mf decremented card locked counters reaches zero 
providing corresponding unlocked 
test cases consider concern drive card different counters corresponding locked state 
cnt counter associated state df admin initial value cnt counter associated state df init initial value 
difficulty finding sequence decrements cnt zero lies fact decrements defined sequence transitions needs executed 
note example contains control state encoded internal variable 
stores current status authentication process possible values 
reflects experience finite state machines quickly complicated 
test case generation clp section describe algorithm computation test cases symbolic execution clp 
mentioned approach amounts searching system state space 
implementation part program concerned implementing search strategy held orthogonal rest 
modify search strategy altering rest code automatically generated autofocus specification 
user interface specifying search strategy employed subject current far strategy interleaved choice transitions generated automatically see 
description principal ideas discuss assess search strategies bounded depth naive left right choice transitions interleaved choice global local state storage best choice transitions 
briefly discuss breadth search 
addition take account possibility storing sets states means constraints 
code generation clp detail interleaving transitions setting described 
constraints described advantages constraints thoroughly discussed 
constraint logic programming 
logic programming problems specified sets order predicates disjunctions positive literal implications 
common lp languages prolog interpret solve predicates procedural manner resolution backtracking mechanisms built 
context possibility function inversion plays crucial role certain circumstances result function application infer function arguments set 
achieved binding free variables backtracking desired arguments 
pitfalls lp 
hand solutions programs models logical formulae carrier set term universe called minimal herbrand model 
hand implementations lp languages certain order predicates evaluated procedural sense see may result infinite evaluations succeeding predicate prevent infinite backtracking imposing constraints preceding predicate satisfy finite number ways 
led idea merging constraint languages lp constraint logic programming clp languages 
languages allow formulation constraints checked satisfiability step evaluation set logical formulae expansion node resolution tree necessitate mechanisms delaying subexpressions 
yields possibility priori cutting evaluation tree formulae generate test paradigm lp languages modified constrain generate 
hand clp calculate domains herbrand universe instance finite integer domains fd rational real numbers crucial point domains calculate finitely representable intervals 
instance formulate linear programming problems set unknown variables clp language equipped suitable constraint solvers simplex desired optimal results binding variables corresponding rational numbers intervals 
lp instance clp constraints equations terms finite trees respectively 
constraint solvers available turned people want calculate specific domain mixture different domains need create new domains constraint handlers 
led development constraint handling rules chr meta language allows definition new constraint handlers solvers subsequently translated corresponding target language clp case 
idea 
test case generation achieved running clp code automatically generated specifications 
clp allows unbound variables arguments run ordinary simulation specify inputs moments time 
fact restricting system get enumeration possible system traces 
bottom level component components associated behaviors translated set predicates models particular transition 
predicates heads include source destination states name transition formal parameters histories local variables input output channels connected component 
bottom level components predicates implement run driver predicate corresponds component contains bottom level components 
channels components modeled local variables existential quantification 
simple translation scheme applied recursively driver predicates reflect hierarchy autofocus components 
terms function data type definitions guards postconditions translated constraint handlers prolog code integrated model 
mentioned test case generation done simulating system constraints imposed test case specification 
constraints may refer structural transitions fired control states visited functional criteria find trace output happen output find trace includes input exhibits outputs set 
constraints formulated appropriate constraint handlers booleans enumerative types finite domains 
practice adequate formalization test purposes 
user defined constraint handlers constraint handling rules powerful tool specifying test cases predefined user defined constraint handlers integrated system 
possibility priori pruning search tree advantage constraints consider possibility restricting model key scalability designers know particular functional test case certain parts model irrelevant constraints allow ad hoc slice model altering 
leaves room techniques widely program analysis 
advantage constraints allow reducing number traces 
example consider transition guard 
cn input channel time commands cj elements data type command 
naive flattening prolog translation fragment transitions need tried bound cj 
constraints happy single member constraint cj 
way computed test case may represent set test sequences cj strengthened computation 
testing actual implementation need fully instantiated traces perform instantiation intelligently focus 
naive 
simplest possible search strategy naive left right choice transitions 
stated transitions encoded predicates contain things source destination state transition head 
choosing transition left evaluation mechanism clp transition predicate occurs tried second 
approach inefficient revisits states visited run cycles see 
interleaving 
previous papers described implementation bounded depth search interleaved choice transitions 
means state revisited outgoing transitions tried exactly order list transitions shifted 
tr 
tn sequence transitions tried order state ith time tr 
tn respective sequence visited st time 
simple mechanism imposing little overhead usually results significant performance gains terms time decreases likelihood running control state loops fig 
naive left right choice transitions dashed ones taken 
storing states globally 
problem naive bounded depth search states may visited 
state refers cross product tuples data control states component case example role internal communication channels discussed 
obvious solution store state visited 
price pay approach maximum search strategies depth search tree important 
fig 
black state trace satisfy corresponding test case specification reached horizontal line indicates maximum depth 
reason dashed transition taken destination state visited stored indicating considered search 
black state backtracking reached fewer steps maximum depth 
note testing purposes desirable exclude states visited twice reflects strange kind errors goes times 
storing states locally 
motivates search strategy 
states prevented revisited depth moment storage depth new visit fig 
right transition initial state may taken corresponding destination state visited 
problem approach necessitates storage large number additional states benefit usually allows detecting shorter traces ones detected strategies store states globally 
examples decremented counters performance gains achieved 
number possible traces increases local storage algorithm performance significantly reduced 
note structural test purposes find transition tour approach storing states applicable 
fig 
dashed transitions result unsuccessful traces initial state visited 
transition tour computed way 
note depends test case specification system stored states need include information input output channels 
storing sets states 
clp enables store sets states simply storing constraints describe set 
deciding stored state entails potentially reachable crucial deciding respective transition needs taken 
issue subject contains discussion setting deductive model checking clp :10.1.1.43.1094
illustrate idea consider naive implementation 
storing state ctl auth stat 
control state data state authentication process counters separately look stored state differs exactly component 
say difference occurs control component ctl auth stat 
ctl ctl 
delete database replace ctl ctl auth stat 

run state differs component delete corresponding entry database replace ctl ctl ctl auth stat 

doing components simple strategy results reduced need memory components vectors just need stored just 
storing sets states central issue go detail 
remarks order 
easy see simple strategy powerful restricting search visited states component look projection update database accordingly 
require intelligence different entries database correspond disjunction states components state vector correspond conjunctions consider stored vector ctl ctl ctl auth stat 
newly sp sorted forall sp tp trans sp sp tp tp trans sp return sp tp transition ordering best visited state ctl auth stat 
auth stat auth stat 
clearly simply coalesce entries ctl ctl ctl auth stat auth stat 

hand combine sets states sound requires efficient comparisons sets sets mentioned suitable definition entailment obviously looking generalizations binary decision diagrams domains booleans 
second aims direction 
see implementation idea result considerable reduction allocated memory 
implementation stores states mentioned manner computation traces 
enable compute sets states single states referred collecting semantics literature interpretation 
knowledge computed collecting semantics may turn starting point definition semantics turn actual interpretation 
best 
undermine quantitatively ordering transitions control state taken crucial performance test case generation 
issue increasingly important transitions state 
cases possible define fitness function test case specification computes approximately best transition taken 
case control states reached transitions taken fitness function comparatively easy define control state compute shortest path pc reach desired destination state implement best search defining transition ordering state follows 
transitions connect second state pc tried 
remaining transitions emanating choose lead state satisfying requirement length pd strictly shorter pd iterating procedure leads transition ordering tries transitions pc 
tries transitions lead states minimum shortest paths lead states second minimum paths algorithm works subpath optimal path optimal 
formally fig 
sp length sp sequence shortest paths sequences control states states assumed sorted shortest path occurring path modeling idle transition 
furthermore contain duplicates 
sequence denotes ith element sequences denotes concatenation 
transition sequence taken order state left 
trans returns sequence transitions arbitrary order 
existence idle transitions prevents trans returning empty sequence fig 

note path state occur element sequence sp 
implies transitions lead states reach safely ignored 
example interested optimal orderings reaching state df init decrementing cnt reaching df admin order decrement cnt transition responsible decrementing cnt transition responsible decrementing cnt algorithm reaching states capable finding transition orderings reaching transitions step move transitions front respective transition sequences 
note simple heuristics general applicable control states number data states may large 
system contains data states heuristic 
table cnt cmax states time mem mb len succ bf bf bf bf bf bf bf bf bf case example 
breadth 
desire get shortest possible traces breadth search come game guarantees traces minimum length 
breadth search severely suffers memory explosion employ symbolic representations bdds 
sake smaller memory allocation store traces experiment 
noteworthy architecture system necessitate implementation naive meta interpreter usually done breadth implementations prolog 
experiments 
give experimental data measured pentium iii mhz mb memory 
clp implementation eclipse www ic ac uk eclipse mentioned consider functional test case specifications decrement counters cnt cnt naive interleaving strategy storing states strategy local state storage resulted prohibitive amounts time needed omit mentioning respective numbers 
concerning test case decrements cnt zero tab 
summarizes resource allocation strategy globally storing states interleaving naive left right random table cnt cmax states time mem mb len succ bf bf bf bf best bf choice transitions 
random choice simulations run respective entries consist min mean max triples 
column shows number globally stored states second time needed find sequence satisfying test case specification third required memory including mb required runtime system code fourth length respective trace case random choice number runs led successful trace 
consider bounded depth search case give data values maximum depth cmax tab contains respective data cnt tab 
contains data breadth search 
considered test cases lead sequences longer maximum depth just show cumulative amounts time memory needed proceed specified depth 
conjunction breadth search implementation mentioned simple approach storing sets states allows resources enumerate states depth depth virtual memory mb gets exhausted 
experiment conducted consisted manually slicing model prohibiting system firing transitions lead decrements counters 
done means constraints altering model 
results identical best search 
approach imposing additional constraints sense general best search may possible define suitable fitness function 
slicing constraints hand necessitate detailed knowledge system consideration 
approach interactive slicing original study 
discussion 
mentioned local state storage increases performance examples necessary resources high consider strategy serious candidate 
advantage lies potentially detecting shorter sequences 
surprisingly breadth search results explosion memory requirements 
serious candidate deductive model checking storing sets states means constraints approximation procedures proposed taken account :10.1.1.43.1094
experiments depth search global storage exhibit commonality finding long sequences usual depth search 
suspected choice ordering transitions crucial performance algorithms 
evident results random choice transitions minimum maximum performance terms time differs orders magnitude 
storing states may lead unsuccessful table enumerating states depth time mem kb runs maximum search depth principle test case specification satisfied trace shorter maximum depth 
great importance transition ordering consistent data best search 
strategy able compute short sequences negligible overhead 
fact able compute traces minimum length regardless cmax resource allocation remained constant 
simpler version fitness function simply consists trying transitions respectively caring ordering remaining transitions leads sequences little longer comparable resources 
finding generalize systems control states tested 
fact second version model replaces data state set additional control states authentication protocols test case generation differences fitness functions result performance gains order magnitude fitness function shortest paths 
furthermore automaton heavily interconnected explains depth search interleaving comparably efficiently produces traces large maximum depths 
cases larger maximum depth quickly find trace 
noticed choice cmax important influence performance 
heuristics finding suitable maximum depths remain 
interleaving choice transitions usually preferable arbitrary fixed ordering advantage negligible growing cmax due nature depth search highly interconnected graphs augmented strategy stores states 
findings numbers random choice transitions high standard deviation easily explained 
optimal cases minimum requirements random choice favorable finding particular test sequence 
results suggests easy define fitness function consider best strategy 
try random choice transitions states globally stored perform computations simultaneously 
additional process interleaving choice 
process terminate successfully kills 
examples multiplies minimum requirements plus little overhead process scheduling reasonable account small requirements optimal solutions 
example concurrent encoding clp keeps different components separate assure results hold concurrent setting 
claim remains verified planning new study smart card systems best modeled concurrent components 
model checking 
resemblance issues discussed model checking eye catching 
reasons 
firstly capability model checkers produce counterexamples test case generation old idea 
fact reasonably short localizing errors specifications 
second problem identifying suitable search strategy constitute large parts done areas non symbolic fly model checkers spin 
thirdly obviously main problem consists computing approximations fixed points subsets thereof 
briefly address issues remainder section 
model checkers built abstraction capabilities uppaal hytech inherently restricted small finite systems 
clp approach test case generation 
explicitly construct parts state space fly constructing computing fixed points done symbolic checkers 
constraints sense generalization boolean formulae encoding transition relations encoded bdds useful ways 
firstly allow storing possibly infinite sets states see notes boundary traditional model checkers clp systems blurry case hytech :10.1.1.43.1094
secondly powerful self defined constraint handlers chrs interactively slicing model 
consider key scalability approach 
problem finding suitable search strategies similar non symbolic model checking 
fact bounded depth search option available tools approach really different 
conceptually slight difference model checking generating test cases tries find witness 
model checkers usually aim proving property entire system 
difference allows adopt search strategy test case specification note principally possible fly model checkers requires exact knowledge respective search algorithm 
noteworthy testing mainly interested existentially path quantified properties 
approach generating entire state space may prime solution context 
constraints help storing possibly infinite sets states conjunction suitable concept entailment may lead powerful search strategies 
claim remains verified empirically 
note partial reduction spin yield performance gains autofocus systems inherently synchronous 
consider interesting apply partial reduction test case generation discretized mixed discrete continuous hybrid systems 
clp suitable memoing techniques directly model checking 
results area deductive databases bottom evaluation magic templates may prove powerful model checking reactive systems 
idea generate fixed points approximations thereof bottom manner 
results deductive model checking procedures possibly infinite systems means widening narrowing operators 
far concentrated test case generation existing infrastructure directly provides experimentation platform deductive model checking post calculus appropriate query logics 
summarize model checking test case generation grounds clp different purpose reasonable advocate complementary 
quite similar terms problems related search strategies constraints may prove powerful tool handle complex systems 
experimental data search strategies implemented clp tool prototype generating test cases autofocus system specifications 
example earlier feasibility study identify circumstances certain strategies perform better 
furthermore discussed relationship model checking approach symbolic execution constraints 
main differences grounded handling infinite large state spaces opportunity constraints naturally slice models having alter 
plethora done area 
need research area fitness functions different system topologies properties tested obvious 
addition consider efficient strategies storing sets states prerequisite handling large systems 
pick additional aspects position 
issue approach generating test cases mixed discrete continuous systems 
storing sets states partial order reduction techniques promising candidates successfully tackle particularly difficult class systems 
exact relationship set test cases system tested entirely clear 
defining congruence traces congruence generate tests generate tests interested relate system specification tested 
result definition suitable approximation order finite state machines classical notions refinement abstraction chaos completion pose problems lifting traces systems concerned resulting input enabled nondeterministic systems role idling transitions systems difficult embed refinement context 
addition suitable input languages test case specifications needed 
consider message live sequence charts require intuitive notation semantics negation 
problem finding heuristics instantiating test cases test sequences mentioned 
numeric values limit analyses instantiating interval single values 
example leads notion bad test cases 
experience shows specifications incomplete simulation semantics particular idle transitions suggests completeness errors tend occur designers forgot specify special cases missing branch statement 
test case generators able compute test cases test cases related role idle transitions definition suitable coverage metrics 
state machines functional definitions allowed autofocus metrics author knowledge exist 
furthermore generating large sets test cases satisfy coverage metrics sense generated test cases level models lifted implementation level generated code hand written code generators produce inadequate code maintaining respective coverage criterion 
implementation level test cases certification authorities verify conformance standard aircraft 
component oriented specification language consider compositional approach test case generation promising generating test cases simple components combining test cases larger systems 
problem test case component may forbidden behavior composed system 
model development process automatic test case generation needs pay 
industrial partners area safety critical systems seriously consider implementing process provide opportunity assess benefits problems 
acknowledgment 
tool prototype developed heiko contributions gratefully acknowledged 
oscar built original model 
alur courcoubetis halbwachs henzinger ho nicollin olivero sifakis yovine 
algorithmic analysis hybrid systems 
theoretical computer science february 
black 
test generation recognition formal methods 
proc 
st intl 
workshop automated program analysis testing verification pages 
beck 
extreme programming explained embrace change 
addison wesley 
baier lamersdorf 
extreme modeling 
proc 
extreme programming flexible processes sw engineering xp 
brinksma 
theory derivation tests 
proc 
th intl 
conf 
protocol specification testing verification pages 

automated symbolic analysis reactive systems 
phd thesis university maryland 
fr 
constraint logic programming software validation 
th workshop german brazilian bilateral programme scientific technological cooperation germany march 
cousot cousot 
interpretation unified lattice model static analysis programs construction approximation fixpoints 
proc 
th acm symp 
principles programming languages popl pages 
cui dong du narayan kumar ramakrishnan ramakrishnan smolka warren 
logic programming model checking 
proc 
plilp alp springer lncs pages 
podelski :10.1.1.43.1094
model checking clp 
proc 
tools algorithms construction analysis systems tacas pages 
demillo offutt 
constraint automatic test data generation 
ieee transactions software engineering 
du bousquet 
overview specification tool testing synchronous software 
proc 
th ieee intl 
conf 
automated sw engineering october 
fribourg 
constraint logic programming applied model checking 
proc 
th int 
workshop logic program synthesis transformation lncs venice 
springer verlag 
fribourg veloso 
automates contraintes 
technique science 
fr 
constraint handling rules 
constraint programming basics trends lncs pages 
springer verlag 
gaudel 
testing formal 
proc 
intl 
conf 
theory practice software development tapsoft lncs pages aarhus denmark may 
gupta 
constraint approach specification verification realtime systems 
proc 
ieee real time symposium pages san francisco december 
huber sch tz 
consistent graphical specification distributed systems 
industrial applications strengthened foundations formal methods fme lncs pages 
springer verlag 
jaffar maher 
constraint logic programming survey 
logic programming 

rational unified process 
addison wesley 
pretschner 
autofocus constraint logic programming 
proc 
constraint logic programming software engineering london july 
pretschner 
testing concurrent reactive systems constraint logic programming 
proc 
nd workshop rule constraint reasoning programming singapore september 

test sequence generation lustre descriptions 
proc 
th ieee intl 
conf automated software engineering ase grenoble 

automatic test data generation constraint logic programming symbolic execution 
proc 
st intl 
workshop automated program analysis testing verification limerick 
ller 
modelling verification linear hybrid automata 
mathematical computer modeling dynamical systems march 
pretschner 
model testing constraint logic programming results challenges 
nd icse intl 
workshop automated program analysis testing verification may 
appear 
pretschner 
model testing evolutionary software development 
proc 
th ieee intl 
workshop rapid system prototyping rsp june 
appear 
pretschner 
model testing real inhouse card case study 
submitted 
pretschner 
developing correct safety critical hybrid embedded systems 
proc 
new information processing techniques military systems istanbul october 
nato research technology organization 
linger 
cleanroom software engineering 
addison wesley 
du bousquet ron 
approach symbolic test generation 
proc 
integrated formal methods 
tretmans 
test generation inputs outputs repetitive quiescence 
software concepts tools 
pretschner 
specification test sequence generation propositional logic 
software testing validation reliability 
