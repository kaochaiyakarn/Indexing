provisions obligations policy management security applications claudio bettini sushil jajodia sean wang dsi universit di milano italy bettini dsi unimi dept info software eng george mason university jajodia usa 
gmu edu policies widely different systems applications 
recognized response scenario just modern systems applications 
policies require certain conditions satisfied actions performed decision accordance policy 
address need introduces notions provisions obligations 
provisions conditions need satisfied actions performed decision rendered obligations conditions actions fulfilled users system decision 
formalizes rule policy framework includes provisions obligations investigates reasoning mechanism framework 
policy decision may supported derivation associated potentially different set provisions obligations called global po set 
reasoning mechanism derive global po sets specific policy decision facilitates selection best numerical weights assigned provisions obligations semantic relationships 
shows proposed policy framework security application discusses example various aspects system may compensate unfulfilled obligations 
permission copy fee part material granted provided copies distributed direct commercial advantage vldb copyright notice title publication date appear notice copying permission large data base endowment 
copy republish requires fee special permission endowment 
proceedings th vldb conference hong kong china policies widely play important role different contexts 
computer system policies provide basis design underlying control mechanisms 
example access control policy defines information users authorized read modify 
research policies traditional static policies decisions user requests 
modern applications business business consumer applications traditional static policies inflexible meet complex requirements 
example consider loan application management payment collection system 
allows users initiate loan application process registered system 
users opportunity register system supplying necessary information step successful permission proceed loan application process 
note initiation loan application statically assigned permission users 
users permission apply loan long satisfy conditions don satisfy conditions may able perform certain actions satisfy 
continuing example assume loan application approved 
case applicant access funds condition user agrees pay loan certain payment schedule 
condition different statically assigned permission sense user promises satisfy certain obligations system needs able monitor obligations take appropriate actions obligations met 
example see policies applications complex system requires flexible powerful mechanisms handle conditions actions certain decisions access loan funds applicant example 
sets conditions actions conceptually different require different management techniques distinguish calling provisions obligations respectively 
intuitively provisions specific actions performed fore decision taken obligations actions taken 
base formal policy model logic rules deductive databases 
similar static access control mechanism js 
example rule may specify user access funds loan user owner loan 
complex rules may possible rule user access insurance policy user owner policy canceled user manager insurance 
addition logic rules attach sets predicates provisions obligations 
separate sets predicates static parts policy rules order manage special specific manners 
example non satisfaction provision necessarily lead denial access may prompt user additional actions 
similarly obligation usual condition satisfied time access may prompt system monitor certain promises access 
glance provision may appear similar precondition obligation post condition 
designing implementing software systems precondition method function characterizes conditions method function expected perform specified lw 
responsibility user method function ensure method function called environment satisfying precondition 
notice evaluation provision called rule evaluated 
constitute precondition rule 
quite different rule says access granted provided provisions met 
secondly user method function able determine validity precondition prior call provision satisfaction called execution called rule 
different spirit execution strategy 
similarly method function execution comes completion environment stated post condition satisfied lw 
method function called environment satisfies preconditions responsibility method function ensure post condition satisfied execution terminates normally 
notice formulated obligations responsibility access control module subject 
satisfiable termination rule access 
notice obligation fulfillment stated loan example may take longer time valid immediately granting access privilege 
fact moment time reliability rating gives measure obligations met 
best generating required set obligations thought post condition firing access rule obligations 
focus reason policy rules presence provisions obligations 
specifically system deduce actions user may perform order gain access promises user gaining access 
possible number different set provisions obligations lead permission 
need mechanism allow user system choose appropriate ones 
specifically approach decomposition policy evaluation procedure steps decomposition enables materialization model specification alternative sets provisions obligations 
feature particularly valuable contexts access control number requests frequent updates policy efficiency concern 
reasoning framework independent specific applications long involve policies provisions obligations 
framework independent specific language define provision obligation actions 
order study concrete practical discuss special application framework security policies provisions obligations 
obligations promises users fulfilled monitoring obligation essential part system uses provisions obligations policies 
refer readers bj details 
contribution threefold 
firstly formalize provisions obligations rule policy language provide reasoning mechanism derive relevant provisions obligations particular policy decision 
secondly introduce mechanism allow automatic choice alternative provisions obligations 
lastly give example framework dynamic access control system 
rest organized follows 
section formalize policy rules provisions obligations mechanism reason 
section system considerations choice provisions obligations derived formal model previous section 
section discuss dynamic access control mechanism framework 
relate contributions section conclude section summary remarks research directions 
policy rule evaluation provisions obligations section describe formal approach rule evaluation provisions obligations 
initially assume policy represented set rules facts form positive datalog program rule fact associated provisions obligations 
discuss language represent policy rules extended expressive particular including negation 
representation policy rules recalling standard notions finite sets variables constants predicate symbols atom predicate symbol constant variable symbol 
atom said ground variable free 
rule formula written atoms called head body rule 
clausal form rule expressed fact ground atom represented rule empty body atom head 
safety requirement assume variable appearing head rule appears body 
ignore provisions obligations define policy set policy rules 
general case logic programs semantics set policy rules characterized herbrand model 
case datalog rules know model finite effectively derived bottom evaluation 
policy denote herbrand model 
term model refer herbrand model stated 
example example set rules assuming set variable symbols set constant symbols case model 
ground atoms facts intensional predicate derived different rules applied give case policy rules certain ground atom model means specific decision represented atom supported policy rules 
note ignored provisions obligations rule applied unconditionally long atoms body satisfied 
representation provisions obligations represent provisions obligations disjoint sets predicate symbols disjoint set predicate symbols allowed pol icy rule specification language 
hand set variable constant symbols admitted predicates policy rules 
predicate symbols may nonnegative arity 
atom symbols predicate able clear context distinguish atoms policy calling constant vari atoms 
formula atom disjunction formulas conjunction formulas 
atom ground variable free formula ground atoms formula ground 
interpretation formula mapping ground atom constant true false atoms mapping constants true false respectively 
satisfaction formula defined inductively structure formula usual considering ground atoms basis conjunction disjunction operators appear formula 
policy rule associated formula denoted representing provisions obligations rule 
impose intuitive constraint variable appearing appear body note predicates part policy rule specification datalog program appear model example rules example labeled provision obligation predicates 
note obligation may involve constant symbols case appear rule body necessarily appear rule 
example may accept deal imposing obligation party part income charitable organization 
organization may identified constant appear policy rules 
rule po formula global provision obligation set assign ground atom model formula called global provision obligation set gpos 
intuitively gpos represents alternative sets provisions obligations satisfied derive example considering fragment policy specification example gpos reader easily see provision satisfied corresponding actions taken obligation accepted gpos satisfied conjunctive subformula satisfied 
case know derived 
rules fired provisions obligations 
similarly satisfaction second conjunctive subformula enables firing rules derive atoms model facts policy rules gpos simply associated formula 
formalize gpos concept need preliminary definition 
definition interpretation formula rule said enabled exists ground substitution variables satisfied rule said grounded obtained enabled rule applying head body rule 
note multiple grounded rules may exist rule necessarily variable free 
rule considered grounded interpretation formally define gpos 
definition set policy rules associated formulas ground atom global provision obligation set gpos ground formula interpretation model satisfies model set grounded rules showing gpos atom computed consider semantics aspect may allow system obtain equivalent simpler formulas 
unusual order satisfy provision may forced satisfy provisions 
example certain site policy order satisfy provision requires user entered credit card number necessary user registered site second requirement may provision different authorization rule implicitly satisfied 
say provision subsumed provision denoted satisfying implies satisfying note ground atoms relation explicitly stated administrator site designer 
cases provisions represented complex formulas different logic subsumption decidable subsumption hierarchy may automatically derived 
assume algorithm computing gpos atom uses subsumption hierarchies substitute provision obligation conjunctive formula subsumed 
bottom model computation want precompute gpos ground atoms convenient compute derivation model rules 
standard algorithms model computation substantially modified purpose 
assume predicate symbols appearing program computation associate set pairs form tuple constants 
sets pairs said equivalent pair pair logically equivalent vice versa 
perform computation func eval tion rule atoms appearing body pair set func tion ground atoms identified rule derive ground atom function returns pair conjunction formulas variables instantiated accordingly tuples algorithm derive model set rules gpos reported 
clearly algorithm efficiency greatly improved number possible optimizations 
sake simplicity presentation algorithm include 
input set policy rules associated formulas 
output model atom associated global set provisions 

repeat 
rule combination pairs respectively appears body head predicate eval 
equivalent 
model set ground atoms set contains pair gpos atom pairs algorithm model gpos computation example consider fragment policy specification example 
case predicates appearing rules sets value step iteration pair available step rules considered lead nonempty result eval function ones nonempty body 
iteration termination condition set empty step 
sets get verified second iteration performed 
pairs contained sets assigned sets 
consider detail step rule considered 
predicates body disregard possible combina tion set contains sin gle pair 
function eval returns pair new value iterations step considering derive pairs ones derived previous iteration repeat statement function eval application returns pair inserted termination condition repeat loop sat third loop iteration performed 
iteration new pair added signed final value loop termination condition true step gpos ones single formulas corresponding pairs 
theorem procedure terminates correct 
top procedure compute gpos model set rules computed global provision set ground atom intuitively procedure uses top strategy starting rule fact derivation collects associated set provisions obligations 
disjunction inserted alternative ground rules applied 
derived procedure 
input set rules associated formulas model ground atom output gpos 
rule ground substitution variables head predicate unified ground atom resulting body construct formula ground atom body computed recursively described ground version un der formula associated atom considered previous recursion current derivation 
detect useless cyclic derivation 

disjunction formulas obtained qualifying rule substitution 
top derivation global provision set example consider fragment policy specification example suppose want derive gpos rule substitution matches conditions substitution ground instances respectively model 
applying recursively procedure derive find applicable rule empty body 
easily obtain substituted formula obtaining second iteration step rule matches conditions possible substitution case dropped evaluates applying empty substitution 
step required gpos disjunction formulas derived iteration step 
extensions policy representation language significant extensions expressiveness language probably allowing negation atoms body rule 
example extension policy may establish certain individual access certain data certain individual access data policy rules 
extension achieved quite naturally allowing policy rules represented stratified locally stratified datalog program negation know minimal fixed points evaluation identified intended model 
recall rules stratified rule predicate head negated atom body predicate path dependency graph local stratification prz essentially impose condition considering ground instantiations rules 
known techniques check find stratification ull 
note rules safe variables limited appearing positive predicate body indirectly equated constant limited variable 
limited form negation requires extend logic formulas introducing negation additional logic operator clear discussion 
algorithm derive gpos take account stratification 
case algorithm illustrated steps applied stratum starting lowest 
considering stratum derivable ground instances predicates appearing lower strata dependency graph node predicate directed edge graph predicate appears possibly negated body rule predicate head 
associated gpos computed 
means appears body rule stratum stratification guarantees rules deriving lower strata atoms derived associated gpos identified 
true rule applied possible instantiations imposing pro visions associated provisions rule evaluation cycle stratum leads quite straightforwardly desired extension algorithm 
report details algorithm 
extensions policy rule specification language may obtained considering rules expressed datalog order temporal constraints 
example security policy language 
inclusion step repetition choice rules system perspective gpos atom indirectly represent alternative sets policy rules derive atom 
transform global provision set gpos certain ground atom disjunctive normal form dnf definition conjunctive subformula represents set provisions obligations sufficient satisfy order derive atom 
definition says necessary rules grounded rules policy interpretation satisfying subformula 
section investigate problem selecting minimum set provisions obligations indirectly rules sufficient derive user asking 
see minimality criteria simply number provisions obligations 
start definition 
definition set ground atoms called valid provision obligation set vpos ground atom conjunction atoms set logically implies gpos set atoms conjunctive subformula dnf representation gpos vpos accordingly definition 
subformula equivalent empty vpos 
satisfying provisions obligations vpos atom derivable accordingly policy 
provisions obligations typically satisfied external user performing certain actions system needs carefully examine alternative vpos possibly identifying best choice proposed external user 
simplifying gpos comparing vpos certainly best choice empty set provisions obligations identifying vpos equal means atom derived provision obligation 
step performed system evaluating gpos verify provisions obligations appearing formula satisfied 
note obligation predicates satisfaction simply meaning obligation accepted subject supposed fulfill 
practice test involves lookup data structure database similarly done external predicates 
satisfied predicate replaced formula 
negation allowed policy rules described subsection negation may applied formula gpos generation 
leads having negated ground atoms formula 
intuitively negated provision obligation simply means system check satisfied corresponding actions taken 
simplification gpos negated atom evaluates true substituted evaluates false substituted obligation predicates 
process illustrated may lead identifying vpos equal certainly best hope 
vpos contain predicate need compare 
order compare different vpos ordering provision obligation predicates established 
considering notion subsumption described section way decide alternative provisions know subsumed intuitively involve subset actions required fulfill preferred probably easier fulfill 
semantic considerations provision set provisions preferable 
example action sending confirmation email may evaluated easier satisfy registration site may appear alternative provisions derivation certain authorization security policy 
obligation notifying supplier obtain licenses time new installations software preferable asking buy separate copies software 
approach assign numeric weight provision predicate similarly obligation predicate intuitive meaning lower weight provisions preferable higher weight ones 
considering relation subsumption defined assignment weights satisfy condition subsumed clearly hold obligations 
rule guarantees weight system implicitly applies preference criteria subsumed provisions illustrated 
general weight system allows system assign global weight alternative set provisions 
formally vpos system computes weight sum weights predicates appearing 
note atoms vpos predicate weight participate sum different ground instances 
technique implicitly defines partial order different derivations atom allows system support certain decision asking minimum set provisions obligations allowed policy 
definition best provision obligation set bpos atom vpos having minimum weight vpos atom 
empty vpos exists global weight unique bpos 
report concise description procedure derive bpos 
function eval atom procedure simply checks provision obligation represented ground atom currently satisfied system 

transform gpos dnf 
conjunctive subformula set atoms forms vpos 

vpos step predicate vpos eval atom true replace vpos empty set unique bpos procedure terminates 
vpos returned step vpos indexes provisions obligations appearing vpos vpos index 
vpos weight equal weighted vpos bpos 
procedure find bpos theorem policy specification ground atom model assignment weights provisions obligations predicates procedure illustrated derives bpos atom 
example consider fragment policy specification example 
suppose user request need derive computing model policy rules see derived associated gpos computed previous examples case formula dnf vpos identify note ex vpos ample subsumption relation holds dropped gpos derivation 
step procedure evaluates atoms vpos suppose case provision satisfied substituted vpos equal procedure continues step 
suppose subsumed fulfilling obligation implies fulfilling suppose weights assigned follows ignored obtain vpos vpos case unique bpos equal assume single weight provision obligation predicate technique easily extended take account different weights assigned different ground instances predicate 
bpos extensions system provisions different preference criteria refine notion bpos considering specificity particular domain application 
example minimization provisions may precedence respect obligations 
case bpos defined vpos having minimum weight obligations vpos minimum weight provisions 
consistently procedure weight vpos defined pair new minimization criteria easily applied step procedure 
idea pushed forward considering different types provisions deserves discussed 
considered provisions mainly actions external user perform order policy rule applicable 
cases actions system perform considering policy rule applicable call system provisions syntactically disjoint set predicates distinguish 
provisions associated weight 
reasonable strategy may consider provisions secondary importance respect ones ask user satisfy 
case bpos may selected minimizing user provisions obligations candidate system provisions 
procedure easily extended implement strategy briefly discussed 
materialization system issues user request decision represented ground atom system return unique bpos user exists best case empty may instructed randomly select bpos leave choice user 
issues typically application dependent 
note choices affect possible optimizations applicable algorithms 
example weighting technique may prune derivations model construction admit possibility ignoring vpos 
clearly rules possibility giving alternative choices user application contexts may useful feature 
critical system consideration opportunity precomputing policy model gpos formulas 
general procedures described assume precomputation discuss conditions technique applied 
precompute model policy rules include external predicate state dependent potential problem model computed specific time changes system state reflected model 
solution problem considering state dependent predicate appearing policy rule system provision including formula associated rule 
way possible derivations involving rule considered evaluation time computing bpos satisfiability state dependent predicates enable disable derivation state system current time 
technically easily achieved extending step eval atom function predicates returns false atom replaced weight greater zero assigned predicate denoting system provision 
set predicates considered state dependent decided system administrator depending specific application requirements 
predicates semantically state dependent may left rules order speed system runtime example changes value occur rarely compared policy evaluation requests 
price pay speedup re materialization process done value changes 
interesting issue arises assume single transaction interaction user system asks provisions obligations user performs necessary actions system satisfies request 
problem independent materialization illustrated example suppose time user request system replies asking user satisfy provision accept obligation user performs required actions second request system time system denies derivation state dependent predicate body rule involved derivation satisfied system behavior certainly undesirable user point view 
way alleviate problem include system answer user required provisions obligations information current state contextual information changed guarantee sufficiency satisfying required provisions obligations 
example site may accept transaction business day provided user registered 
business day state dependent condition 
registered user asks perform transaction answered satisfy provision guarantee done request business day transaction allowed 
technically simply requires including state dependent predicates bpos answer user 
clearly possible ways address problem including offering alternatives user 
obligations management user accepting policy obligations agrees fulfill 
order ensure agreed obligations fulfilled system monitors obligation fulfilling case failure takes necessary compensating actions 
compensating action range decreasing trustworthiness user replacing unfulfilled obligations alternatives actions informing relevant authorities defaulted terminating policy force 
order replace obligations stringent ones user need informed changes contractual obligations 
similarly fulfilling obligations promised may result positive compensating action acknowledging payment monthly fees user upgrading trustworthiness referred reliability rating similar credit rating lending institutions united states 
complex issue please refer bj detailed discussion 
applications security policies section apply theory developed specific domain security policies access control wl js 
literature topic quite extensive different languages proposed specify access authorizations authorization rules different contexts relational models object oriented models multimedia systems xml deal concepts delegation negative authorizations role authorizations conflict resolution issues concerning administration policy 
specification security policy easily extended notion provisions obligations proposed languages authorizations specified special predicates rules represented datalog rules case negation 
particular extension applied expressive languages proposed js languages allow express time dependent periodic authorizations 
consider specific formalism simplified syntax sufficient illustrate extension including provisions obligations 
access authorizations represented ternary predicate access object subject access mode intuitive meaning authorizing access object certain access mode 
typical access modes read modify 
authorization rules allow authorizations derived authorizations certain predicates 
typed variables rules 
objects subjects may organized hierarchies typed variables predicates establish relations hierarchy authorizations provide access objects certain class subjects certain group 
provisions obligations associated single authorizations see facts authorization rules form formula 
recall predicate symbols provisions obligations appear rules constant symbols variable symbols shared particular constraint variable appearing provision obligation predicate attached rule appear rule body 
example security policy provisions obligations table report conditional rules may define security policy web site 
rules intuitive meaning rule says user web site read contract proposals posted suppliers provided registered web site 
rule says manager supplier write contract provided registered web site 
rule says authorization write contract authorization modify contract terms contract rule says manager read contract modify resulting counter offer contract proposal provided registered level provided second level authentication reserved operations system notifies supplier intention proposing obligation electronically signing contract days changes accepted counterpart 
rule simply says authorization modify object implies authorization modifying parts 
case contracts rule allows derive authorization modify contract terms exists authorization modify contract 
context access control authorizations derivation authorization obtained different sets rules 
may impact efficiency traditional authorization systems context considering different sets rules associated different sets provisions obligations 
illustrate application techniques described previous sections example 
suppose certain user asks permission modify terms contract proposal 
request interpreted authorization system considering userid uid user role specific object asks modify identified constant contract terms part 
system information originally issued user 
technically user asking authorization contract terms uid evaluated site security policy 
table reports output procedure applied fragment security policy reported table limiting constants required example 
atom column included model corresponding gpos 
note alternative sets provisions obligations desired authorization 
referring terminology previous sections vpos associated 
case vpos associated application rules second 
intuitively due fact policy allows issuer contract potential customer modify contract requiring different conditions provisions obligations 
example conditions satisfied external predicates uid manager issuer uid contract evaluate true authorization different vpos 
explained section system tries simplify gpos checking involved predicates satisfied 
example system checks user uid registered 
case vpos register uid equal authorization provisions obligations 
suppose gpos simplified involved provisions satisfied 
system compare vpos trying identify convenient satisfy user 
example observe register level uid provision subsumed register uid provision formally fact semantic information site designers 
condition imposed section subsumption implies weight associated register level uid higher associated register uid weight provision notify uid obligation sign days uid contract greater zero second vpos selected best provision obligation set bpos user simply asked register site order modify contract 
access contract read register access contract write manager issuer contract register access contract terms modify access contract write partof contract terms contract access contract modify access contract read manager issuer contract register level notify obl sign days contract access modify access modify partof table subset rules site security policy atom gpos access contract uid read register uid access contract uid write register uid access contract uid modify register level uid notify uid sign days uid contract register uid access contract terms uid modify register level uid notify uid sign days uid contract register uid domain related extensions applying general theory developed previous sections domain access control identified domain dependent aspects require specific solution 
provisions different subjects derivation path possible certain rule requires provision satisfied subject different requesting access 
example rule may state john read document ann write document may conditional authorization ann write document provided subscribe certain service 
system asks third party perform certain actions allow different user access data provisions evaluated conditions satisfied rule applied 
negative authorizations negative authorizations specified authorization language js proposals evaluation triggered access request involved 
model access control policy rules may include negative authorizations contract terms uid denying right terms 
rule may explicitly derived chain rule applications 
negative authorizations table example output 
rules deriving negative authorizations subject provisions provisions typically form actions performed system subject involved authorization 
example rule oid uid says operation object oid user uid denied email notification sent administrator 
derivation negative authorization may involve positive authorizations rules associated provisions obligations performed system considered conditions 
intuitively don want ask user perform certain actions order deny access requested explained don want ask users satisfy provisions derivations originated different user request 
provisions obligations associated authorization rule satisfied authorization rule 
presence negative authorizations rules criteria decide different vpos minimization sum weights associated 
explained system provisions obligations associated negative authorization resulting model minimization intuitively applies system resources memory space latency time computational power 
related contributions area policy specification languages policies network management security policies pol 
examples languages policy specification ponder language dd policy description language pdl lbn 
obligation policies ponder event triggered condition action rules policy management networks distributed systems 
similarly pdl policies event condition action rule paradigm active databases define policy function maps series events set actions 
goal propose full fledged policy specification language ponder contrary contribution emphasizes role policy rule conditions true actions external agents 
separating specification processing provisions obligations rest policy provide mechanism identifying convenient way deriving specific policy decision 
missing reasoning mechanisms underlying languages believe integration may interesting direction pursue 
numerous papers access control policies see wl js modeling number aspects including role access control delegation time dependent access control multiple access control policies models assume system authorizes access request denies 
concept provisional authorizations introduced 
kh proposes access control system xml documents optional provisional actions included specification authorization 
provisional action defined set functions log verify encrypt transform write create delete extending semantics authorization policy 
case actions taken system part xml document transformation triggered user request 
concept generalized formal treatment provisional authorizations rules proposed 
provisional authorization imposes access granted provided user system take certain actions prior authorization request 
identifies class logics specify provisional authorizations elaborates notion weakest precondition access granted 
notion provision analogous separate syntax semantics provisions obligations authorizations 
conceptually distinguish obligations provisions kh simply differ syntactically value attribute timing actions describe provisions obligations 
provide technique represent semantic relations provisions obligations allows system automatically identify preferable derivations set alternatives 
approach partially achieves goal lattice logical implication represent relationships different sets provisions lattice capture semantics hidden fixed interpretation atomic predicates 
may say complements contribution focused model theoretic semantics language focused algorithms techniques needed derive convenient authorizations 
technique compare different vpos relationship techniques assigning weights rules rule systems 
ac example authors consider production rule systems priorities associated rules 
user defined priorities assumed override default priorities 
proposes algorithm determining order rules default total order overriding partial order rules 
priorities may seen weights assign provisions obligations algorithm may adapted policy rules consider provisions obligations conditions rules 
technique allows decoupling evaluation process order precompute policy model leave runtime comparison vpos evaluation state dependent conditions 
significant advantage critical applications involving security policies 
logic rules controlling rights 
kagal finin ku horn claus rules stating access rights distributed trust 
rules permit conditional delegations access conditions conditional satisfied order obtain access privileges 
plan add obligations framework 
differs theirs major ways 
firstly obligations 
secondly provisions different conditions appear conditional access permissions critical way 
conditional predicates evaluated rule base responsible evaluation rule 
responsibility external agent communicate fulfillment provisions rule execution evaluation engine 
example registering auction house may handled access control module responsible granting authority place bids 
conditions kagal refer evaluated independent accesses obtained satisfying different conditions 
contrast provisioning framework looks best provisions asks external agent check validity 
line research dealing access policies trust management 
example blaze bfl bfs deals trust management issues decentralized environment 
trust granting accesses protected objects provisions obligations deal trust accesses 
illustrated policy management complex system calls dynamic mechanisms provisions obligations 
order successfully provisions obligations system provided reasoning mechanism system may render decisions ask actions provisions promises obligations user system 
believe policy language provisions obligations reasoning mechanism general applicable various situations 
example explored security application explaining proposed mechanism deals domain specific issues negative authorizations 
gives rise number interesting issues explored 
mentioned related section 
interesting direction investigate specification reasoning provisions obligations 
provided examples rigorous treatment needed provision obligations complex structures 
monitoring obligations may involved process quantitative temporal constraints part obligation specification realistic example complex policies regulating sites 
case temporal constraint reasoning techniques described may integrated proposed architecture 
ac agrawal cochrane lindsay 
maintaining priorities production rule system 
proc vldb pp 

bertino bettini ferrari samarati 
access control model supporting periodicity constraints temporal reasoning 
acm tods 
bfl feigenbaum lacy 
decentralized trust management 
ieee pro 
th symp 
security privacy 
bfs feigenbaum 
compliance checking policymaker trust management system 
proc 
financial crypto 
bj bettini jajodia sean wang 
obligation monitoring policy management 
appear ieee rd intern 
workshop policies distributed systems networks june 
bettini wang jajodia 
satisfiability quantitative temporal constraints multiple granularities 
proc 
cp 
dd damianou dulay lupu sloman ponder policy specification language pol 
gries 
science programming 
springer verlag 
kh kudo 
xml document security provisional authorization 
proc 
th acm conference computer communications security pp 

provisional authorizations 
jajodia kudo subrahmanian 
commerce security privacy ed pp 
kluwer academic press 
js jajodia samarati subrahmanian 
flexible support multiple access control policies 
acm transactions database systems 
kagal finin joshi 
trust security pervasive computing environments 
ieee computer december 
ku kagal joshi finin 
security architecture pervasive computing systems 
grace hopper women computing 
lw liskov wing 
behavioral notion subtyping 
acm transactions programming languages pages november 
lbn lobo bhatia naqvi 
policy description language 
proc 
national conference american association artificial intelligence orlando fl usa 
prz przymusinski 
declarative semantics deductive databases logic programs 
minker editor foundations deductive databases pages 
morgan kaufmann san mateo 
pol proceedings 
policies distributed systems networks international workshop pol icy bristol uk proceedings sloman lobo lupu eds springer lncs 
ull ullman 
database knowledge base systems 
computer science press 
wl woo lam 
authorizations distributed systems new approach 
journal computer security 
appendix proof theorem termination guaranteed fact finite number predicates constants 
number elements grow sets steps algorithm finite number ground atoms set finite number pairs different tuples 
number pairs tuple finite number equivalent formulas finite finite number associated tuple 
algorithm uses slightly different approach respect standard datalog naive evaluation algorithm ull easily seen equivalent 
applies possible ground rules starting facts fixed point reached 
show computed formula atom model gpos atom 
show atom model derived algorithm tion formula satisfies iff model grounded rules includes proceed induction number steps main recursive loop algorithm depth derivations 
consider case policy facts 
rule call associated formula considered iteration algorithm deriving pair rules deriv ing algorithm derives satisfies grounded rules model include direction model grounded rules includes means rule rules head 
hypothesis rule satisfies suppose theorem holds derivations depth prove depth assume satisfies easily seen satisfies derived step algorithm 
interested case derivation occurs depth suppose rule pairs arguments eval 
satisfies induction atom body model set grounded rules 
satis fies variables instantiated accordingly grounded rules 
model 
direction assume model grounded rules includes herbrand model exists grounded rule atom head atoms body fact essential rule case set grounded rules head cyclic rules 
contains rule model 
induction hypothesis satisfies associated formulas furthermore satisfies satisfies formula returned eval tuple evaluating rule 
step know formula appear possibly disjunction formulas satisfies proof theorem show vpos candidate bpos considered step 
ground atom gpos 
consider arbitrary vpos considered step 
definition logically im plies vpos derived step exists monotonicity addition positive numbers derive conclude bpos 
conclude proof just observe function step guarantees returned vpos bpos 
