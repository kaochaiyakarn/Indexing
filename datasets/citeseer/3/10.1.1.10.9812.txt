gadget toolkit optimization approaches interface display generation reveal potential numerical optimization approach generating interfaces displays 
optimization approaches allow mix independent goals constraints blended ways difficult describe algorithmically 
optimization techniques appear offer potential advantages research area hampered lack appropriate tools 
presents gadget experimental toolkit support optimization interface display generation 
gadget provides convenient abstractions optimization concepts 
gadget provides mechanisms help programmers quickly create optimizations including efficient lazy evaluation framework powerful configurable optimization structure library reusable components 
facilities provide appropriate tool enable exploration new class interface display generation techniques 
keywords toolkits numerical optimization display generation layout algorithms perceptually optimized displays 
exponential improvement computing speed described moore law enabled fundamental changes user interfaces 
early graphical interface displays monochrome dynamic effects limited carefully tuned assembly code employed provide acceptable response times user interface 
systems computers day limits 
contrast today computers easily display dynamic color spend processor cycles idle 
user interfaces common animation techniques computationally infeasible 
expect see new opportunities move infeasible commonplace 
james fogarty scott hudson human computer interaction institute carnegie mellon university pittsburgh pa scott hudson cs cmu edu including system system show potential technique numerical optimization interface display generation 
numerical optimization minimization maximization function subject constraints variables 
system generates aesthetic information enhance aesthetics space convey information 
aesthetics difficult define algorithmically system uses aesthetic templates define matching problem solves optimization 
similarly system uses optimization solve variety problems arise design rendering perceptually simplified route maps 
distortion simplification abstraction system generates route maps resemble hand drawn maps 
maps aid navigation prevent clutter created information irrelevant route 
constraints information arranged difficult manage algorithmically problem nicely described optimization 
computationally expensive optimization advantages general approach interface display generation 
optimization fit way people think elements interface display 
example common want elements information display near aligned color non overlapping 
similarly want distortions route map create false intersections roads intersect 
programmers identify bad features interface display create optimization simply combining independent criteria 
intuitive trying construct algorithm simultaneously satisfies variety conditions 
second optimization existing algorithms 
illustrate demonstrations programmers algorithm heuristic get reasonable solution optimization explore similar solutions 
alternatively programmers algorithms produce variety solutions optimization improve eventually choose 
optimization offers level flexibility sharp contrast fragile nature algorithms 
adding new goal constraint algorithm commonly require reevaluation part algorithm may break entirely 
contrast new goals constraints normally added optimization balanced existing requirements starting 
optimization difficult approach pursue current programming environments 
programmers may uncomfortable math required programming optimization 
optimization toolkits available typically require substantial specialized knowledge designed physics simulations traditional optimization problems 
optimization approach interface display generation hampered lack toolkit designed specifically problems 
presents gadget experimental toolkit designed support exploration optimization approach interface display generation 
section offer simple example optimization created gadget 
followed discussion major architectural features gadget including standard framework mathematics optimization generic property support integrated efficient lazy evaluation framework powerful configurable optimization structure library reusable components 
afterward show examples larger systems iterative improvement layouts generation route maps created automated dialog layout 
discuss related short 
simple example text polygon order explain programmers create gadget optimizations thorough explanation simple optimization 
problem arranging text shape arbitrary polygon 
posing problem optimization character text edge polygon characters displayed correct order characters spread length polygon 
examples included demonstrate application techniques larger interesting problems 
programmer creating optimization gadget toolkit needs supply components initializer iterations evaluations 
initializer creates initial solution optimized 
existing simplified algorithm done randomly 
iterations responsible transforming potential solution typically methods partially random 
evaluations judging different notions goodness solution 
define evaluations optimization 
derived base class provided simple arrangements text polygon toolkit evaluation examines part current state problem 
discuss section gadget provides reusable library evaluations 
purpose assume programmer implements necessary evaluations 
evaluation ensures characters placed edge polygon 
evaluation checks character determine close nearest edge polygon 
creates array double values distances returns array gadget 
indicates toolkit sum squares values array minimized 
component simple created knowledge complex optimization techniques 
second third evaluations equally simple 
second evaluation ensures characters displayed correct order 
builds array double values checking pair characters displayed correct order 
pair correct order evaluator adds zero array double values 
adds distance pair characters polygon array double values 
returns array doubles gadget indicates toolkit minimize sum squares values array 
third evaluation spreads characters length polygon 
creates array doubles adding entry array distance polygon pair characters 
evaluators array minimized 
evaluation returns array gadget indication toolkit maximize value smallest entry array 
push characters apart 
evaluations complete programmer provides set weights indicate relative importance evaluation 
giving evaluations weights respectively evaluation order magnitude important 
defining gadget evaluate possible solution need provide iterations indicate gadget generate different possible solutions 
iterations vary complexity optimization 
optimizations possible identify certain actions taken certain conditions met iteration look see condition satisfied appropriate change 
optimizations clear steps lead better solution iterations random changes relying evaluations select appropriate changes 
example simple iteration selects random character random distance random direction 
combined evaluations iteration yields results 
point worth noting solution require optimization approach simple algorithm achieve result faster 
picking arbitrary starting point polygon characters simply spaced intervals equal total length polygon divided number characters 
algorithm solution share common problem illustrated overlap characters corner triangle 
address problem shows result modifying optimization adding evaluation minimizes overlap bounding rectangles character 
smaller weight evaluations additional criteria shifts characters corners avoid overlap 
adding additional requirement algorithmic approach difficult adding optimization simple 
gadget architecture gadget architecture features designed support exploration optimization approaches interface display generation 
standard framework abstracts concepts constructs evaluations 
base class provides generic property support integrated efficient lazy evaluation framework 
default optimization structure provides adding overlap minimization variety useful features configurable optimization structure allows changes optimization structure meet specific needs 
gadget supports reusable library iterations evaluations 
evaluation standardization framework illustrated previous example gadget allows programmers focus creating evaluations measure criteria important problem 
gadget combines evaluations uses choose possible solutions problem 
process combining evaluations choosing possible solutions stages 
framework presents evaluation current possible solution call prior solution 
evaluation returns array double values representing interpretation prior solution 
call collection arrays double values prior result 
second framework uses iteration object modify prior solution creating new possible solution call post solution 
third framework presents post solution evaluations individual evaluations return interpretations combined create post result 
fourth framework uses method described paragraph compare prior result post result 
result comparison indicates framework accept post solution revert prior solution 
point imposed particular structure arrays double values individual evaluations create represent interpretations possible solutions 
providing flexibility programmer allows evaluations appropriate representation 
determining solution better requires standard form comparing results 
achieve standard form requiring evaluation capable comparing arrays double values created providing double value range indicates evaluation strong preference prior solution indicates evaluation indifferent indicates evaluation strong preference post solution 
choose prior post result values multiplied weight associated evaluation multiplied values summed 
sum greater framework prefers post solution 
evaluations method create value post prior arrays double values methods built framework 
methods minimize sum squares maximize sum squares maximize minimum value maximize maximum value minimize minimum value minimize maximum value 
methods uses formula resembling create value sign magnitude difference 
generic properties lazy evaluation framework gadget classes inherit base class provides support generic properties 
objects create named properties store value object 
objects stored value 
discuss section reusable library iterations evaluations support storing referencing property values helps programmers create general solutions 
example overlap minimization evaluation earlier example created list objects property name bounding rectangle stored object 
evaluation uses property get rectangles objects compute overlap 
evaluation minimize overlap set rectangles just rectangles associated characters earlier example 
generic property support gadget tightly integrated efficient framework lazy evaluation 
lazy evaluation algorithm framework uses local flags local dependency pointers avoid unnecessary computations 
lazy evaluation framework integrated generic properties class 
computed properties declared just property creating named property store computation object 
storing value property stores computation 
time value property requested computation executed compute value 
subsequent time value requested computation executed value changed computed 
lazy evaluation framework requires careful bookkeeping ensure cached values correct computations unnecessarily executed gadget framework responsible bookkeeping 
programmers define computation overriding functions base computation class 
function simply performs desired result result sign min max standardization formula minimize sum squares method computation returns computed value 
second function called framework immediately call 
function programmer declares objects computation dependent 
framework handles caching computed value monitoring computation dependencies 
example combined power generic properties lazy evaluation framework consider evaluation earlier example minimized distance character nearest edge polygon 
evaluation constructed list objects named property location stored object polygon locations resolved 
na implementation evaluation simply go object extract location object compute distance object location edge polygon select minimum distance build array minimum distances 
note iteration moves character evaluations 
computation determine edge point closest wasted characters 
generic property lazy evaluation framework evaluation programmed efficiently 
evaluation declares computed property distance point polygon 
instantiates computed property object list 
individual computations dependent location polygon location character 
computation executed character moved polygon changed computation executed 
cached value characters 
arranging characters polygon change represent fold improvement execution time evaluation 
optimization computationally expensive process ability easily sorts improvements specifically burdening programmer important toolkit 
powerful default optimization structure default gadget uses simulated annealing approach optimization 
simulated annealing general approach characterized temperature variable 
temperature variable initially high indicating hot system decreases time representing system gradually cooling optimal state 
temperature variable probabilistically accept changes appear represent improvement 
randomly accepting changes optimization trapped local maxima 
temperature variable evaluations iterations guide decisions optimization 
iterations example large changes solution temperature high smaller changes temperature low 
similarly evaluations temperature variable indicator estimation techniques computing full evaluation 
example evaluation performs expensive computation objects list temperature variable randomly sample percentage objects list 
estimates allow optimization approximate desired solution temperature high settle precise solution temperature 
default optimization structure includes features helpful creating optimizations 
weights associated evaluations represent maximum value particular evaluation contribute decision accept iteration gadget automatically avoids executing evaluations affect outcome decision 
provide event notifications intended allow programmer visualize optimization progress 
default optimization structure uses knowledge changes accepted rejected maintain cached version prior evaluation result preventing unnecessary execution evaluations 
configurable optimization structure order support development gadget allow optimizations changes specific needs gadget uses configurable optimization structure 
optimization structure represented finite state machine 
state machine represents action optimization sending event notification executing evaluation decaying temperature variable 
state number exit conditions optimization structure associates exit condition transition state 
design allows changes optimization structure adding new states changing transitions associated exit conditions 
allows actions reused entirely new optimization structures 
optimizations need standard optimization structure gadget uses builder objects configuration process 
example default optimization structure created single function call builder object creates simulated annealing optimization handful parameters including list evaluations execute list iterations rate temperature decay 
programmers create custom optimization structures extend builder create optimization structure resembles default structure simulated annealing structure added support logging possible solutions considered 
programmers create entirely new builder objects structures different default structure optimization genetic algorithm 
builder objects allow programmers easily custom optimization structures 
reusable library iterations evaluations gadget supports library reusable evaluations iterations intended help programmers quickly create optimizations 
library relatively small developed promising approaches creating effective library 
approach pursuing standard approach reusable libraries 
discussed section generic properties overlap minimization evaluation text layout example easily implemented minimize overlap set rectangles 
similarly iteration randomly nudge characters easily implemented randomly nudge objects property defines locations 
named properties objects type reuse easy include 
approach reusable library results reusable components clearly implement particular evaluation iteration 
programmers new gadget create optimizations combining clearly named evaluations iterations treating black boxes 
approach works components coverage problematic 
problem pursuing approach extensive computed properties 
understand approach structured consider evaluation ensures characters displayed correct order text layout example 
penalizes pair characters appears polygon order different order appear string 
evaluation programmed list characters named property location character polygon characters arranged evaluation relatively little reuse potential 
reuse potential evaluation improved substantially programmed list objects named property desired order object named property current order object 
case desired order index character string arranged 
current order computed property determines far character located edge polygon 
evaluation uses desired order current order properties penalize pair objects desired order 
structured way evaluation maintain arbitrary desired order list objects 
example partial implementation system section uses evaluation prevent short roads appearing longer long roads 
case desired order undistorted length road current order length road distortion 
approaches just help create reusable individual gadget components 
third approach intended approaches allows groups components prevent unnecessary duplication computation 
components require expensive intermediate computation create computed property store shared object expose property name 
components reuse computed property 
framework automatically ensure value date prior recomputed unnecessarily 
example evaluations share computation compute convex hull list objects convex hull computation efficiently find distant objects second evaluation convex hull computation compute total area covered objects 
iteration reuse convex hull computation move objects hull middle hull 
ability transparently share sorts computations components important helping create efficient optimizations 
example section shift discussing gadget general toolkit illustrating gadget solve particular problem 
problem discuss arises context layout algorithm created photomesa zoomable image browser groups images shared attribute 
problem addressed arrangement semantically clustered rectangles approximately rectangular regions wasting space 
words rectangles fit smallest possible total area related clusters arranged area approximate rectangular shapes 
method greedy pixel bucket fill algorithm 
seen algorithm yields fairly results 
related rectangles represented color kept edges clusters generally form clean boundaries 
produces solutions usually acceptable suffers fact greedy algorithm 
seen bottom cluster rectangles put solution settle space left 
border space jagged detracts quality solution 
address sort problem created approach combines optimization 
create reasonable solution explore nearby possible solutions see better 
combination algorithms optimization promising approach 
layout groups layout optimization shows result applying optimization result created shown 
optimization applied uses handful evaluations 
heavily weighted evaluation ensures rectangles particular cluster connected 
evaluations minimize area bounding rectangle cluster minimize area convex hull cluster 
evaluation minimizes number times clustered value changes row column layout 
iteration optimization demonstrates approach creating iterations difficult problems 
swapping approach selecting pairs rectangles swapping values 
may way find pairs rectangles swapped simple criteria selecting pairs rectangles high success rate 
randomly selecting swap substantial efficiency gained random selection list rectangles meet certain criteria 
case consider swapping rectangles border rectangles different color counting edges layout rectangles different color 
limits swapping corners undistorted distorted versions route map 
note loop avenue imperceptible distortion 
clusters limits swapping pairs result improvements swapped 
computation determine rectangles considered swapping inexpensive boolean computed property rectangle list stores rectangles property true 
general case problems random selection iteration method benefit simple filters increase efficiency random selections 
example system generate route maps www com 
maps simplify distort information typical road map clearly convey information critical navigating route 
shows views route carnegie mellon university nearby major shopping center 
route particularly interesting includes loop avenue easily confuse time driver route 
loop imperceptible typical road map short section avenue included route 
map generated partial implementation system size route segment distorted ensure visible 
resulting map clear time driver route able go directly south avenue 
deployed real world example optimization approach interface display generation important techniques system supported gadget 
system provide ideas effectively designing optimization approaches interface display generation 
section partial implementation system comment approaches taken system generalize optimizations 
interesting facet system decision split optimization multiple distinct stages optimizes different set conditions 
system uses optimization stages optimization stage distorts road length direction ensure roads route visible creating false missing intersections optimization stage places labels road route optimization stage includes contextual features cross streets landmarks 
optimization stages algorithmic stages simplify geographic data road segments optimization stage add decorative graphics route map optimization stage 
dividing different parts optimization stages system significantly reduces size problem solved optimization 
general approach division large optimization smaller optimizations helpful properties 
optimization searches smaller space optimization executed quickly 
smaller optimizations clearer evaluations iterations quickly lead solution 
helpful properties need balanced possibility early optimization create problem optimization remove 
example road location fixed prior label placement optimization impossible place labels creating overlaps 
label placement optimization able modify road placement handle problem 
possibility decision appropriate conduct optimization stages problem dependent 
worth noting system uses specific evaluation criteria designed detect prevent specific problems 
example false intersections prevented evaluation minimizes distance false intersection route 
pulls false intersection eventually passes endpoint removing false intersection 
evaluation pulls roads missing intersection 
evaluations conflict third evaluation identifies missing intersections contained loop created false intersection 
third evaluation rarely applies helps optimization recover situations evaluations conflict 
general approach creating evaluations identify resolve specific problems optimization beneficial 
broad general evaluation effective specific case creating evaluation specific situation preferable trying find different broad evaluation effective case 
discussed earlier benefits optimization approach display interface generation 
trying construct single algorithm evaluation handle condition independent goals constraints mixed achieve desired affect 
created partial implementation system evaluate compatibility gadget techniques system 
implementation includes full implementation road layout stage distorts road length direction ensure roads visible creating false missing intersections partial implementation labeling optimization stage 
implementation focused portions problem relate optimization portions related geographic databases rendering related graphics details 
optimizations straightforward gadget architecture 
shows undistorted route map distorted map generated implementation 
example automated dialog layout automated dialog layout problem investigated variety systems 
approach problem right bottom strategy places component right previous component set rules 
important difficulty strategy development effective set rules 
rule approaches similar problems 
automatically generated dialog layout 
shows automatically generated dialog layout created combination optimization right bottom strategy 
desired order text size components taken previous discussion automated layout 
layout created optimization determine place component right previous component 
components initially placed long column 
iteration toggles boolean property component indicate component placed right previous component layout results applying right bottom strategy boolean properties judged set evaluations 
evaluations optimization relatively simple 
evaluation tries keep labels associated component indicated flag input specification row component 
evaluation minimizes size dialog size group box 
third evaluation minimizes amount unused space dialog group box 
final evaluation penalizes layouts vertically large component appears right smaller component situation previously identified visually unpleasant 
additional evaluations improve robustness approach evaluations sufficient creating layout shown 
rules right bottom strategy implementation simple 
components placed uniform distance similar components adjacent rows left justified 
additional rules right justify ok cancel buttons handle similar highly specific layout issues 
hybrid strategy algorithm inside optimization demonstrates interesting point 
algorithmic portion efficiently handles understood portions problem spacing aligning components 
optimization handles understood portion problem deciding arrangement components 
resulting system efficient generating layout just second flexible appropriately arranging groups radio buttons specific knowledge radio buttons 
promising strategy structuring optimization approaches 
discussion related pursuit optimization general approach interface display generation relates previous constraints constraints user interface toolkits 
systems cassowary explicitly numerical optimization maintain constraints 
common associate weights constraints indicating conflicts constraints resolved manner consistent heavily weighted constraint 
constraint approaches difficult clear express desired constraint appropriate limited form linear equation inequality 
demonstrated technique sets linear constraints approximate nonlinear constraints general problem exists 
requiring programmers represent evaluations equations gadget allows programmers arbitrary code evaluation provides standardization framework allows arbitrary criteria combined 
flexibility important providing general support types problems gadget designed 
clearly tradeoff flexibility efficiency believe techniques illustrated examples algorithms approximate solution dividing large optimizations multiple stages provide insight manage tradeoff 
part intend explore additional methods provide toolkit support strategies manage efficiency 
gadget relates previous metric design automated usability analysis automated dialog layout generation 
order emphasize flexibility gadget includes examples outside traditional dialog layout problems 
metrics previously context dialog layout symmetry balance useful general aesthetic qualities large variety problems 
supporting library reusable evaluations gadget easy programmers designers include types generally useful evaluations systems 
metrics specific dialog layout layout appropriateness suggest approaches including task knowledge evaluations 
layout appropriateness evaluates positions components user move component attempting minimize distance mouse moved common sequences 
flexible nature gadget evaluations supports type task knowledge dialog layout problem 
stated generally gadget supports evaluations arrangement visual elements evaluations automated usability analysis knowledge human perception amount information conveyed parts information display 
optimization extensively approach problems graph visualization vlsi layout 
problems areas np complete making optimization approximation techniques important 
appropriately conducted level mathematical complexity comfort level typical programmer 
gadget works benefits optimization demonstrated fields typical programmers 
expect making optimization easier result additional problems 
experiences gadget abstractions reusable components easier develop optimizations 
new evaluation quickly combined existing set determine additional evaluation yields better result 
lazy evaluation framework effective allowing optimizations consider different small changes computational overhead re evaluating large parts problem unaffected changes 
primary difficulties encountered gadget expect approach optimization 
number variables manipulated optimization grows difficult ensure appropriate solution quickly 
partially points space considered due increasing difficulty understanding optimization space deducing new evaluations improve results 
discussing examples functionality provided gadget shown techniques managing problems 
particularly interested hybrid approaches combination algorithm optimization solve problem 
interested additional toolkit level support hybrid approaches strategies help people understand improve non trivial optimizations 
optimization approaches interface display generation promising area research important advances need 
carefully constructed optimizations run quickly current systems illustrated system optimizations remain computationally expensive current systems 
part solution problem come exponential improvement computing speed described moore law important develop strategies managing efficiency abstractions efficient optimizations 
gadget toolkit designed support optimization approaches interface display generation 
toolkit provides features designed support easy creation efficient optimizations 
include standard framework mechanics evaluations generic property support integrated efficient lazy evaluation framework powerful configurable optimization structure library reusable iterations evaluations 
strategies developing reusable efficient components demonstrated gadget interesting optimization problems 
appropriate tool new class interface display generation techniques gadget provides important support exploration techniques 
acknowledgments funded part national science foundation iis author nsf graduate research fellowship 
jodi lee identifying interesting route example providing undistorted image example 
jeffrey nichols comments automated dialog layout versions toolkit 

abbot 
romance dimensions 

agrawala 
rendering effective route maps improving usability generalization 
proceedings conference computer graphics interactive techniques siggraph 

borning stuckey 
cassowary linear arithmetic constraint solving algorithm 
acm transactions computer human interaction tochi 


bederson 
photomesa zoomable image browser quantum treemaps 
proceedings acm symposium user interface software technology uist 

bodart 
vanderdonckt 
dynamic strategy computer aided visual placement 
proceedings workshop advanced visual interfaces 

cong koh 
madden 
performance optimization vlsi interconnect layout 
integration vlsi journal 


decision tree optimization software 
plato la asu edu guide html 
di battista eades tamassia tollis 
graph drawing algorithms visualization graphs 
prentice hall 

fogarty hudson 
aesthetic information generating decorative displays contain information 
proceedings acm symposium user interface software technology uist 

gleicher 
graphics toolkit differential constraints 
proceedings acm symposium user interface software technology uist 

hentenryck saraswat 
strategic directions constraint programming 
acm computing surveys 



modular geometric constraint solver user interface applications 
proceedings acm symposium user interface software technology uist 

hudson 
incremental attribute evaluation flexible algorithm lazy update 
acm transactions programming languages systems toplas 


hurst marriott 
dynamic approximation complex graphical constraints linear constraints 
proceedings acm symposium user interface software technology uist 

ivory hearst 
state art automating usability evaluation user interfaces 
acm computing surveys 


kim foley 
providing high level control expert assistance user interface presentation design 
proceedings sigchi conference human factors computing systems chi 

kirkpatrick gelatt vecchi optimization simulated annealing science 

marriott stuckey 
programming constraints 
mit press cambridge ma 

microsoft streets trips 
www microsoft com streets 
ngo abdullah 
aesthetic measures assessing graphic scenes 
journal information science engineering 


nichols myers higgins hughes harris rosenfeld 
generating remote control interfaces complex appliances 
proceedings acm symposium user interface software technology uist 

nocedal wright 
numerical optimization 
springer new york 

sears 
aide step metric interface development tools 
proceedings acm symposium user interface software technology uist 

sears 
layout appropriateness metric evaluating user interface widget layout 
ieee transactions software engineering 


vander zanden 
incremental algorithm satisfying hierarchies multiway dataflow constraints 
acm transactions programming languages systems toplas 


vander zanden myers mcdaniel miller szekely 
lessons learned way dataflow constraints garnet amulet graphical toolkits 
acm transactions programming languages systems toplas 

