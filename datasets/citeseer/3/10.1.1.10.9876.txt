bamboo accelerating closed itemset mining deeply pushing length decreasing support constraint wang george karypis previous study shown mining frequent patterns length decreasing support constraint helpful removing uninteresting patterns observation short patterns tend interesting high support long patterns interesting support relatively low 
large number non closed redundant patterns filtered simply applying support constraint 
result desirable pattern discovery task mining closed patterns length decreasing support constraint 
study push deeply support constraint closed itemset mining particularly challenging problem due fact downward closure property prune search space 
proposed pruning methods optimization techniques enhance closed itemset mining algorithm developed cient algorithm bamboo 
extensive performance study various length decreasing support constraints datasets di erent characteristics shown bamboo generates concise result set runs orders magnitude faster cient pattern discovery algorithms including closet lpminer 
addition bamboo shows scalability terms database size 
keywords pattern discovery frequent closed itemset length decreasing support constraint association rule mining frequent itemset mining fundamental problem data mining research extensively studied :10.1.1.40.6757:10.1.1.28.1451
various cient frequent itemset mining algorithms developed apriori fp growth mine supported part nsf ccr eia aci aci aci digital technology center university minnesota army high performance computing research center auspices department army army research laboratory arl cooperative agreement number daad :10.1.1.3.2424
content necessarily reflect position policy government cial endorsement inferred 
access research computing facilities provided digital technology center minnesota supercomputing institute 
department computer science engineering digital technology center army hpc research center university minnesota op inverted matrix 
main problem algorithms may generate exponentially large number itemsets support low 
overcome problem classes techniques problem formulations developed 
focuses mining maximal closed itemsets studies illustrated lead compact result sets better ciency finding frequent long itemsets large datasets :10.1.1.27.6266:10.1.1.111.520:10.1.1.37.1102
second class attempts reduce number potentially uninteresting itemsets incorporating various anti monotone monotone convertible constraints constant support frequent pattern mining framework 
limitation approaches constant support value irrespective length discovered patterns 
general patterns contain items tend interesting high support long patterns interesting support relatively low 
pushing constraints constant support pattern mining lpminer algorithm uses length decreasing support constraint prune uninteresting patterns :10.1.1.28.9396
lpminer sift lot short infrequent itemsets encounters di culty mining long itemsets long frequent itemset implies lot short itemsets may satisfy support constraint 
consider length decreasing support constraint minimum support equals length greater length greater 
itemset support length means subsets length greater frequent itemset support length means subsets frequent 
result mining closed itemsets length decreasing support constraint desirable task 
mainly explore push deeply length decreasing support constraint closed itemset mining 
stated developing algorithm particularly challenging downward closure property derived constant support constraint reason lpminer introduced smallest valid extension sve property prune search space :10.1.1.28.9396
sve pruning methods ective enhancing performance fail take account specific characteristics transactions items pattern specific projected database 
propose pruning methods optimization techniques derived directly length decreasing support constraint develop efficient algorithm called bamboo finds closed itemsets satisfying length decreasing support constraint 
bamboo incorporates novel pruning methods called invalid item pruning unpromising prefix pruning sensitive structure projected databases quickly eliminate unpromising portions search space 
experimental study reveals bamboo find order magnitude fewer valid itemsets orders magnitude faster developed closed itemset mining algorithms lpminer 
rest organized follows 
section briefly describes problem related 
section introduces bamboo algorithm provides detailed description newly proposed pruning methods optimization techniques 
section presents thorough experimental evaluation compares bamboo performance achieved algorithms 
section provides concluding remarks 
problem statement related problem transaction database tdb set transactions transaction denoted tuple tid contains set items associated unique transaction identity tid 
db denote number transactions tdb 

complete set distinct items appearing tdb 
itemset non empty subset called itemset contains items 
itemset 
denoted transaction tid said contain itemset number transactions tdb containing itemset called support itemset denoted sup 
definition 
closed itemset itemset closed itemset exists proper superset sup sup 
name bamboo motivated fact shape bamboo plant schematically matches nature length decreasing closed itemsets 
definition 
length decreasing support constraint function respect transaction database tdb called length decreasing support constraint tdb satisfies db positive integer itemset frequent length decreasing support constraint sup 
definition 
frequent closed itemset support constraint transaction database tdb length decreasing support constraint itemset closed itemset frequent called frequent closed itemset 
example 
columns table show transaction database tdb running example 
sort list items support descending order get sorted item list called list 
example list 
list items transaction sorted list shown third column table 
itemset fc itemset support closed superset fcam support 
fcam frequent closed itemset 
assume length decreasing support constraint easy fcam complete set frequent closed itemsets 
tid set items ordered item list table transaction database tdb 
related mining frequent closed itemsets proposed proposed close algorithm 
cient closed itemset mining algorithms developed including closet charm carpenter closet cfp tree :10.1.1.27.6266:10.1.1.111.520
algorithms adopt similar search space pruning methods di erent di erent search strategies depth search vs definition see constant support threshold special case length decreasing support constraint non increasing function itemset length 
breadth search bottom traversal vs top traversal di erent dataset representation vertical format vs horizontal format data compression techniques di set vs fp tree database projection methods physical projection vs pseudo projection di erent closure checking schemes 
winning techniques algorithms employed designing bamboo algorithm 
fp tree algorithm called tfp introduced finding top frequent closed itemsets length value :10.1.1.12.9324
tfp allows users input number patterns discovered intuitive minimum support ective finding long frequent itemsets 
drawback tfp patterns shorter minimum length discovered appropriate applications 
lpminer algorithm finding itemsets satisfy length decreasing support constraint 
smallest valid extension sve property proposed design pruning methods :10.1.1.28.9396
lpminer number limitations 
result set may contain large number redundant non closed itemsets second sve pruning methods ective pruning invalid items unpromising prefix itemsets third overlap functionality limiting ectiveness 
itemset discovery algorithms multiple support constraints 
algorithm item minimum item support mis 
minimum support itemset lowest mis items itemset 
sorting items ascending order mis values minimum support itemset decreases length itemset grows making support itemsets downward closed 
apriori algorithm applied 
apriori algorithm finding frequent itemsets proposed allows set general support constraints 
possible represent support constraint formulation 
pushed minimum support itemset forced equal support value corresponding longest itemset 
prune search space ectively 
algorithm adopts di erent approach support constraint 
searches similar itemsets probabilistic algorithms guarantee frequent itemsets 
bamboo algorithm section develop bamboo algorithm step step 
briefly introduce algorithm nave algorithm mine closed itemsets length decreasing support constraint forms basis bamboo algorithm 
simply derived developed frequent closed itemset mining algorithm closet detail refer readers 
mainly focus search space pruning methods optimization techniques newly proposed bamboo algorithm 
nave solution fp tree structure design cient frequent itemset mining algorithm choose data structure represent original database 
tailored version closet algorithm adopts fp tree structure prefix tree representation list frequent items transactions shown cient representation transaction database studies :10.1.1.27.6266:10.1.1.3.2424
infrequent items build fp tree set transactions sharing subset items may share common prefix paths root fp tree fp tree high compression ratio representing original dataset especially dense datasets 
running example illustrate construction fp tree structure 
example 
fp tree running example built follows scan database count support item sort support descending order get list see running example section 
items support lower minimum support longest itemset support constraint infrequent building fp tree 
insert transaction fp tree infrequent items item removed remaining items transaction sorted item ordering list 
tree node record item id count sum transaction ids tids 
fp tree header table associated entry item header table 
fig 
shows global fp tree corresponding header table 
second third columns header table represent global count sum transaction ids respectively forth column side link pointer links nodes item id table fp tree running example 
bottom divide conquer adopts popularly divide andconquer paradigm mining frequent itemsets 
specifically uses bottom divide conquer method follows inverse list order infrequent item removed mine patterns containing item mine patterns containing mine patterns containing mine patterns containing mining patterns containing item current prefix itemset follow side link pointer recorded global header table locate conditional database prefix denoted tdb contains transactions fcam cb 
projected fp tree prefix built tdb fig 
shows infrequent item removed 
bottom divide conquer method applied recursive way 
example building conditional fp tree prefix mine patterns containing pm mine patterns containing pa 
conditional fp tree prefix pm shown fig 

search space pruning interested closed itemsets design pruning methods mining patterns unpromising prefix itemsets soon possible 
previous studies proposed methods adopt techniques popularly closed maximal itemset mining algorithms :10.1.1.111.520
pruning technique item merging 
prefix itemset complete set locally frequent items support merged form new prefix items ro ted fp tree ith ro ted fp tree ith pm table table pm conditional fp trees prefix pm 
safely removed list locally frequent items new prefix 
example shown fig 
set locally frequent items prefix item merged prefix form new prefix pc set locally frequent items 
second pruning technique sub itemset pruning 
frequent itemset currently consideration 
proper subset frequent closed itemset sup sup hope generate frequent closed itemsets pruned 
example want mine patterns prefix frequent closed itemset fcam mined bottom divide conquer paradigm proper superset support safely mining patterns prefix 
closure checking scheme search space pruning methods accelerate mining process removing unpromising prefix itemsets eliminate itemsets 
need subset checking mined frequent itemset order assure really closed itemset 
closet maintain set mined closed itemsets compact result tree structure 
fig 
shows example stores totally closed itemsets cp fcam 
getting new frequent itemset check set closed itemsets stored result tree see exists closed itemset support proper superset current itemset 
case current candidate itemset closed inserted result tree 
level hash indexing closet sum transaction ids hash key similar hash value index result tree order reduce search space pattern closure checking :10.1.1.111.520
example status fig 
getting new prefix sum transaction ids easy find closed itemset fcam support absorb 
non closed safely mining patterns prefix 
hash sum transaction ids link 
null null null 
hash indexed result tree structure 
simply integrating constraint mine complete set closed itemsets 
get set closed itemsets satisfy length decreasing support constraint straightforward find closed itemset simply check sup output valid itemset store result tree 
problem hold infrequent closed itemset result tree order check new itemset closure 
lemma 
result tree pruning current candidate prefix itemset pass checking length decreasing support constraint need keep result tree order check closure itemsets 
proof 
correctness lemma evident assume prefix itemset subsumed itemset sup sup 
sup sup sup hold sup hold 
means maintain result tree may able correctly check closure mined itemset kind itemsets invalid satisfy length decreasing support constraint 
checking prefix itemset pass support constraint cheaper checking pattern closure lemma get new prefix itemset check satisfy support constraint need check closed inserted result tree 
example cp inserted result tree appear fig 

algorithm shows algorithm calls subroutine pi cdb subroutine 
uses item merging method line sub itemset pruning method line prune search space 
itemset satisfies support constraint line passes closure checking line inserted result tree output valid pattern line 
adopts bottom divide conquer paradigm grow current prefix pi recursively calls lines 
algorithm tdb input tdb transaction database length decreasing support constraint function 
output sci complete set closed itemsets satisfy length decreasing support constraint 

sci result tree null 
call tdb subroutine pi cdb input pi prefix itemset cdb conditional database prefix pi 

item merging pi cdb 
pi 
sup pi pi 
sub itemset pruning pi result tree 
return 

insert result tree pi sci sci pi 



set local items pi 
fp tree construction cdb 

pi pi 
cdb build cond database pi 
call pi cdb 
deeply pruning seen tailored variant closet algorithm mine closed itemsets length decreasing support constraint full support constraint enhance performance 
lpminer cient pruning methods transaction pruning node pruning path pruning proposed smallest valid extension property sve short :10.1.1.28.9396
property 
smallest valid extension itemset sup sup min sup minimum length super itemset potentially satisfy length decreasing support constraint 
sve property pruning methods easily derived :10.1.1.28.9396
example transaction pruning method described transaction prefix conditional database pruned sup 
pruning methods adopted lpminer ective fully explore support constraint deeply prune search space 
deficiency fold hand sve property functionality overlapped extent hand prune space coarse granularity keep invalid items unpromising prefix itemsets mining 
therefor simply adopting previously developed pruning methods designed new pruning methods order deeply push length decreasing support constraint closed itemset mining 
invalid item pruning frequent itemset mining algorithms constant support constraint control inherently exponential pattern discovery complexity pruning infrequent items known downward closure property 
length decreasing support constraint straightforward way determine item frequent item infrequent short prefix itemset may frequent long prefix itemset 
need find way define prune unpromising items closed itemset satisfying length decreasing support constraint generated 
definition 
invalid item max maximal transaction length conditional database tdb particular prefix itemset item appears tdb maintain total number max counts denoted count max count max records total number occurrences item transactions shorter item called invalid item tdb max count 
lemma 
invalid item pruning particular prefix itemset conditional database tdb hope grow invalid item tdb get closed itemsets satisfying support constraint 
proof 
prove contradiction 
assume invalid item grow get closed itemset satisfies length decreasing constraint sup 
means count contradicts definition invalid item 
invalid item pruning method applied original database conditional database certain prefix 
running example show usefulness 
table know count count count count means count result item invalid pruned global fp tree shown fig 

similarly item invalid pruned global fp tree 
unpromising prefix itemset pruning bamboo uses pattern growth method mine frequent closed itemsets :10.1.1.3.2424
time prefix itemset longer frequent closed itemsets grown 
cases closed itemset satisfies length decreasing support constraint generated growing unpromising prefix itemsets detect kind prefix itemsets soon possible avoid mining patterns unpromising prefix itemsets 
definition 
unpromising prefix max maximal transaction length conditional database tdb particular prefix itemset maintain total number max counts denoted count max count max records total number transactions tdb length shorter prefix itemset called unpromising prefix itemset max count 
lemma 
unpromising prefix itemset pruning hope grow unpromising prefix itemset find closed itemsets satisfy support constraint safely pruned 
proof 
lemma proven contradiction 
assume prefix start point get closed itemset satisfies length decreasing constraint sup 
means count contradicts definition unpromising prefix itemset 
look example 
assume prefix itemset side link pointer item fig 
easily tdb contains transactions fcam cb 
get count count 
result count 
prefix itemset unpromising prefix itemset pruned 
optimizations pruning methods prune search space ectively may lead non negligible overheads 
explore sve property binning technique minimize potential overheads incurred methods 
sve enhancement consider sve property enhance unpromising prefix itemset pruning method 
record statistic information header table locally frequent item certain prefix prior checking prefix promising know support new prefix 
example global header table shown fig 
know support prefix 
sve property know conditional transactions may contribute set closed itemsets satisfy length decreasing support constraint result judge prefix promising 
running example current prefix itemset consideration compute sve sup means conditional transaction length shorter sup ignored compute count 
result prefix transactions cb ignored 
technique help lot short conditional transactions prefix itemset 
binning enhancement main overhead related invalid item pruning method caused memory manipulation 
remember need maintain total number max counts count max item max maximal transaction length corresponding conditional database 
allocating freeing resetting non trivial memory costly need reduce memory usage possible 
way achieve employ binning technique improve memory usage keeping count length range max keep subset counts count corresponding length count record number transactions shorter item appears 
lemma judge item invalid 
lemma 
relaxed invalid item particular prefix itemset conditional database tdb assume local item max maximal transaction length tdb count number transactions shorter item appears 
count max count item invalid prefix proof 
count max means itemset satisfy length decreasing support constraint count means itemset satisfy length decreasing support constraint 
result itemset length satisfy length decreasing support constraint contain item prefix technique implemented follows find item appears transaction length count incremented 
check item invalid start see count max holds count added count item valid 
general count holds count added count check count violates length decreasing support constraint 
find count safely say item invalid pruned consideration 
show example detect invalid item original database tdb 
assume maintain counts item 
scanning tdb get count count count 
count max count added count 
similarly count count added count 
count 
result know item invalid pruned 
algorithm bamboo tdb input tdb transaction database length decreasing support constraint function 
output sci complete set closed itemsets satisfy length decreasing support constraint 

sci result tree null 
call bamboo tdb subroutine bamboo pi cdb input pi prefix itemset cdb conditional database prefix pi 

invalid item pruning cdb 
item merging pi pi 
pi 
unpromising prefix pruning pi cdb 
return 

sup pi pi 
sub itemset pruning pi result tree 
return 

insert result tree pi sci sci pi 




cdb transaction pruning pi cdb 
fp tree construction cdb 

pi pi 
cdb build cond database pi 
call bamboo pi cdb 

algorithm incorporating pruning methods optimization techniques get bamboo algorithm shown algorithm 
algorithm bamboo calls subroutine bamboo pi cdb 
shown subroutine certain prefix itemset pi corresponding conditional database cdb bamboo pi cdb applies invalid item pruning method set valid items denoted line 
uses item merging technique identify set items support pi denoted merged pi removed line 
uses unpromising prefix pruning line result tree pruning line sub itemset pruning line methods prune non empty prefix lines 
itemset satisfy length decreasing support constraint line pass closure checking line closed itemset satisfies support constraint inserted result tree line 
transaction pruning method applied line conditional fp tree built line bamboo recursively calls mine closed itemsets length decreasing support constraint growing prefix pi bottom divide conquer paradigm lines 
empirical results section comprehensive experimental evaluation bamboo compare performance achieved algorithms 
results show incorporating length decreasing support constraint closed itemset mining bamboo generates compact result set better performance developed closed itemset mining algorithms lpminer algorithm ii newly proposed search space pruning methods bamboo ective enhancing performance iii bamboo scalability terms number transactions 
test environment dataset knowledge closet cfp tree developed frequent closed itemset mining algorithms 
compared bamboo algorithms ghz intel pentium pc gb memory windows installed 
algorithms implemented microsoft visual 
ran closet cfp tree support threshold chosen minimum support maximum itemset length corresponding length decreasing support constraint 
compared bamboo lpminer frequent itemset mining algorithm length decreasing support constraint :10.1.1.28.9396
experiments real datasets synthetic datasets popularly previous studies 
characteristics datasets shown table column shows average maximal transaction length 
dataset tuples items connect pumsb mushroom gazelle dx table dataset characteristics 
real datasets real datasets experiments connect pumsb mushroom gazelle respectively 
connect dataset dense dataset contains game state information pumsb dataset contains census data dense dataset mushroom dataset little dense contains characteristics various species mushrooms gazelle dataset contains clickstream data gazelle com sparse dataset long transactions 
synthetic datasets synthetic datasets generated ibm dataset generator contains totally distinct items average transaction length average frequent itemset length 
dataset contains transactions dataset series dx contain transactions test algorithm scalability 
support constraint length min sup min sup min sup min sup fig 

support constraint connect 
length min sup min sup min sup min sup fig 

support constraint connect 
length decreasing support constraints fig 
show various length decreasing support constraints tests di erent datasets 
fig 
fig 
depict sets stair style length decreasing support constraints dataset connect 
fig 
shows length decreasing support constraints minimum support itemsets longer set support constraint length min sup min sup min sup min sup fig 

support constraint pumsb 
length len len len len fig 

support constraint mushroom 
support constraint length len len len len len fig 

support constraint gazelle 
length min sup min sup min sup min sup min sup fig 

support constraint 
respectively fig 
shows constraints minimum support itemsets longer set respectively 
fig 
shows special length decreasing support constraints pumsb dataset minimum support itemsets longer set respectively 
dataset mushroom set linear support constraint functions support threshold set length linearly decreased length respectively axis fig 
log scale corresponding curves look linear functions fact linear 
similar situation happens fig 

dataset gazelle chose different support constraints starting support length support threshold linearly decreased length respectively 
fig 
shows set stair style length decreasing support constraints chosen dataset minimum support length greater set respectively 
performance testing number patterns minimum support constrained frequent patterns constrained frequent closed patterns fig 

frequent vs closed connect 
minimum support lpminer bamboo fig 

runtime comparison connect 
comparison lpminer compared bamboo lpminer order show mining constrained closed itemsets desirable task mining constrained frequent itemsets 
datasets listed showed similar picture bamboo generate concise result set cient lpminer 
due limited space comparison results connect dataset 
fig 
compares number frequent itemsets frequent closed itemsets satisfying set length decreasing support constraints shown fig minimum support fig 
represents length decreasing support constraint minimum support itemsets longer 
fig 
shows runtime algorithms set length decreasing support constraints 
see bamboo generates orders magnitude fewer patterns orders magnitude faster lpminer 
bamboo higher performance stems aspects hand mines smaller number valid itemsets lpminer hand adopts ective pruning methods full length decreasing support constraint prune search space quickly 
comparison closet cfp tree compared bamboo developed frequent closed itemset mining algorithms cfp tree closet 
comparing algorithms recorded total number frequent closed itemsets number closed itemsets satisfy corresponding length decreasing support constraints shown fig call number constrained closed patterns corresponding figures compared algorithms dataset connect support constraints shown fig 

fig 
see high support threshold bamboo times faster closet cfp tree low support bamboo orders magnitude faster closet cfp tree 
fig 
shows length decreasing support constraint ective shrinking result set hand implicates long find ective search space pruning methods bamboo potentially cient traditional closed pattern mining algorithms 
fig 
fig 
show comparison results dataset pumsb bamboo generates smaller number patterns runs faster closet cfp tree length decreasing support constraints shown fig 

example support bamboo times faster closet times faster cfp tree number constrained closed patterns times frequent closed patterns 
connect pumsb mushroom dataset relatively small dense large number frequent closed patterns low support threshold 
small dataset bamboo kind length decreasing support constraints reduce number valid closed patterns improve performance 
fig 
fig 
know support constraints shown fig 
bamboo times faster closet cfp tree result set times smaller 
gazelle sparse dataset generate long frequent closed itemsets low support threshold 
current closed itemset mining algorithms run slow support threshold lower certain threshold hand mining long patterns challenging hand large number short frequent closed patterns generated 
fig 
fig 
show interesting amazing results linearly length decreasing support constraint functions shown fig 
bamboo sift closed patterns long itemsets low support short itemsets high support left 
example support threshold linearly decreased length length bamboo finds valid itemsets longest itemset length 
fig 
fig 
show bamboo generates orders magnitude fewer patterns runs orders magnitude faster closet cfp tree 
sparse dataset lot short frequent closed itemsets mined low support thresholds 
fig 
fig 
demonstrate results dataset set stair style support constraints shown fig 

bamboo times faster closet orders magnitude faster cfp tree algorithm 
number closed itemsets satisfying length decreasing support constraints times smaller frequent closed itemsets 
number patterns minimum support frequent closed patterns constrained frequent closed patterns fig 

constrained vs non constrained connect 
minimum support cfp tree closet bamboo fig 

runtime comparison connect 
number patterns minimum support frequent closed patterns constrained frequent closed patterns fig 

constrained vs non constrained pumsb 
minimum support cfp tree closet bamboo fig 

runtime comparison pumsb 
number patterns length frequent closed patterns constrained frequent closed patterns fig 

constrained vs non constrained mushroom 
length cfp tree closet bamboo fig 

runtime comparison mushroom 
ectiveness pruning methods comparison results validated ectiveness number patterns length frequent closed patterns constrained frequent closed patterns fig 

constrained vs non constrained gazelle 
length cfp tree closet bamboo fig 

runtime comparison gazelle 
number patterns minimum support frequent closed patterns constrained frequent closed patterns fig 

constrained vs non constrained 
minimum support cfp tree closet bamboo fig 

runtime comparison 
length decreasing support constraints compressing result set bamboo generate orders magnitude fewer patterns traditional frequent closed pattern mining algorithms 
mean pattern discovery algorithms support constraint better performance frequent closed pattern mining algorithm 
ciency kind constrained algorithms mainly depends propose ective search space pruning methods 
performance comparison results extent demonstrated ectiveness pruning methods adopted bamboo 
dataset isolate ectiveness pruning method bamboo 
fig 
shows results support constraints fig 

legend pruning corresponds algorithm apply pruning methods unpromising prefix itemset pruning invalid item pruning transaction unpromising prefix itemset pruning sve enhanced version invalid item pruning optimized binning technique 
ing 
see compared algorithm pruning method ective boosting performance incorporate pruning methods bamboo achieves best performance 
addition comparison best sve pruning methods transaction pruning pruning methods proposed unpromising prefix itemset pruning invalid item pruning ective enhancing algorithm performance 
scalability test tested bamboo scalability terms base size synthetic dataset series dx 
varied base size tuples tuples ran bamboo di erent length decreasing support constraints shown fig 

presenting results legend represent length decreasing support constraint minimum support length greater 
fig 
know bamboo linear scalability number transactions dataset 
runtime seconds minimum support pruning transaction pruning invalid item pruning prefix itemset pruning bamboo fig 

comparison pruning methods 
base tuples fig 

scalability test base size dx 
previous studies elaborated mining frequent closed maximal itemsets large databases mining frequent itemsets length decreasing support constraints lead compact result set possibly better performance 
empirical study showed kinds algorithms generate patterns support low patterns long 
developed bamboo algorithm push deeply length decreasing support constraint traditional closed itemset mining order generate concise meaningful result set gain better ciency 
general framework downward closure property longer holds prune search space 
search space pruning methods unpromising prefix itemset pruning invalid item pruning plus optimization techniques newly proposed enhance performance 
thorough performance study shown bamboo generate orders magnitude fewer patterns orders magnitude faster developed frequent closed itemset mining algorithms lpminer frequent itemset mining algorithm length decreasing support constraint 
furthermore experimental study ectiveness pruning methods scalability bamboo terms number transactions 
acknowledgments grateful liu providing executable code cfp tree algorithm 
agrawal imielinski swami mining association rules sets items large databases acm sigmod may 
agrawal srikant fast algorithms mining association rules vldb sept 
bayardo ciently mining long patterns databases sigmod june 
brin motwani ullman tsur dynamic itemset counting implication rules market basket data sigmod may 
gehrke kifer white dual pruning algorithm itemsets constraints sigkdd july 
gehrke mafia maximal frequent itemset algorithm transactional databases icde april 
cohen datar fujiwara gionis indyk motwani ullman yang finding interesting associations support pruning icde feb 
el inverted matrix cient discovery frequent items large datasets context interactive mining sigkdd aug 
gunopulos mannila discovering specific sentences randomized algorithms icdt jan 
bayardo agrawal gunopulos constraintbased rule mining large dense databases icde mar 
han karypis kumar scalable parallel data mining association rules sigmod may 
han pei yin mining frequent patterns candidate generation sigmod may :10.1.1.3.2424
han wang lu mining topk frequent closed patterns minimum support icdm dec :10.1.1.12.9324
liu hsu ma mining association rules multiple minimum supports sigkdd aug 
liu lu lou yu computing storing querying frequent patterns sigkdd aug 
liu pan wang han mining frequent item sets opportunistic projection sigkdd july 
ng lakshmanan han mah exploratory mining constrained frequent set queries sigmod june 
pan cong tung yang zaki carpenter finding closed patterns long biological datasets aug 
park chen yu ective hash algorithm mining association rules sigmod may 
pasquier bastide taouil lakhal discovering frequent closed itemsets association rules icdt jan 
jian pei jiawei han push constraints frequent pattern mining 
sigkdd aug 
jian pei jiawei han laks lakshmanan mining frequent item sets convertible constraints icde april 
pei han lu nishio tang yang mine hyper structure mining frequent patterns large databases icdm nov 
pei han mao closet cient algorithm mining frequent closed itemsets dmkd may :10.1.1.27.6266
karypis lpminer algorithm finding frequent itemsets length decreasing support constraint icdm nov :10.1.1.28.9396
toivonen sampling large databases association rules vldb sept 
wang han pei closet searching best strategies mining frequent closed itemsets sigkdd aug 
wang han mining frequent itemsets support constraints vldb sept 
zaki generating non redundant association rules sigkdd aug 
zaki hsiao charm cient algorithm closed itemset mining sdm april :10.1.1.111.520
zheng kohavi mason real world performance association rule algorithms sigkdd aug 
