composing schema mappings second order dependencies rescue ronald fagin ibm almaden research center fagin almaden ibm com schema mapping specification describes data structured schema source schema transformed data structured different schema target schema 
schema mappings play key role numerous areas database systems including database design information integration model management 
fundamental problem context composing schema mappings successive schema mappings derive schema mapping source schema target schema second effect applying successively schema mappings 
give rigorous semantics composition schema mappings investigate definability computational complexity composition schema mappings 
study important case schema mappings specification finite set source tuple generating dependencies source target tgds 
show composition finite set full target tgds finite set tgds definable finite set source target tgds composition finite set source target tgds finite set full source target tgds may definable set finite infinite source target tgds furthermore may definable formula fixed point logic associated composition query may np complete 
introduce class existential second order formulas function symbols call second order tgds case right language composing schema mappings 
effect show composition finite sets source target tgds definable second order tgd 
composition second order tgds definable second order research partially supported nsf 
iis permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
pods june paris france 
copyright acm 

kolaitis uc santa cruz kolaitis cs ucsc edu wang tan uc santa cruz cs ucsc edu popa ibm almaden research center almaden ibm com tgd 
second order tgds allow equalities obvious way define require equalities 
allowing equalities second order tgds turns essence show second order tgds equalities sufficiently expressive define composition finite sets source target tgds 
show second order tgds possess properties data exchange 
particular chase procedure extended second order tgds produces polynomial time computable universal solutions data exchange settings specified second order tgds 

summary results problem transforming data structured schema data structured different schema old persistent problem arising different areas database management systems 
years problem received considerable attention context information integration data various heterogeneous sources transformed data structured mediated schema 
achieve interoperability data sharing architectures schema mappings describe data transformed representation 
schema mappings typically specified high level declarative formalisms possible describe correspondence different schemas logical level having specify physical details may relevant implementation run time phase 
particular declarative schema mappings form gav view lav local view generally glav global local view assertions data integration systems 
similarly source target dependencies source target tgds specifying data exchange relational source relational target nested xml style source target dependencies clio data exchange system :10.1.1.13.2900:10.1.1.19.6308
extensive schema mappings motivated need develop framework managing schema mappings related meta data 
bernstein introduced framework called model management main abstractions schemas mappings schemas operators manipulating schemas mappings :10.1.1.12.2729
fundamental operators framework composition operator combines successive schema mappings single schema mapping 
composition operator play useful role time target schema mapping source schema mapping 
scenario occurs instance schema evolution schema may undergo successive changes 
occurs peer peer data management systems piazza system extract transform load etl processes output transformation may input 
model management system able automatically compose successive schema mappings single schema mapping schema schema way captures interaction schema mappings entire sequence 
resulting single schema mapping run time phase various purposes query answering data exchange potentially significant performance benefits 
bernstein approach provides rich conceptual framework model management 
stage development framework provide rigorous meaningful semantics basic model management operators investigate properties semantics 
pointed bernstein semantics match operator worked certain extent semantics basic operators including composition operator developed :10.1.1.12.2729
problem composing schema mappings general formulation schema mapping schema schema schema mapping schema schema derive schema mapping schema schema equivalent successive application 
providing semantics composition operator amounts making precise equivalence means context 
madhavan halevy propose semantics composition operator :10.1.1.10.8486
effect defined semantics composition operator relative class queries schema stipulating equivalence means query certain answers coincide certain answers obtained successively applying schema mappings 
established number results semantics case schema mappings specified source tgds glav assertions class class conjunctive queries 
semantics composition operator proposed madhavan halevy significant step suffers certain drawbacks caused fact semantics relative class queries :10.1.1.10.8486
set formulas specifying composition relative class queries need unique logical equivalence 
semantics fragile schema mapping may composition respect class queries fail composition schema mappings respect slightly larger class queries 
introduce different semantics composition operator investigate definability computational complexity composition schema mappings new semantics 
semantics proposed madhavan halevy semantics carry class queries parameter :10.1.1.10.8486
specifically focus space instances schema mappings define schema mapping composition schema mappings space instances set theoretic composition spaces instances spaces viewed binary relations source instances target instances 
advantage approach set formulas defining composition unique logical equivalence refer schema mapping composition 
semantics robust defined terms schema mappings set queries 
fact easy see composition sense schema mappings composition schema mappings sense madhavan halevy relative class queries 
explore depth properties composition schema mappings specified finite set source target tuple generating dependencies source target tgds 
natural question ask composition schema mappings specified finite set source target tgds logical formalism expressed 
positive side show composition finite set full source target tgds finite set source target tgds definable finite set source target tgds source target tgd full existentially quantified variables occur tgd 
negative side show composition finite set source target tgds finite set full source target tgds may definable set finite infinite source target tgds 
noted madhavan halevy showed semantics composition finite sets source target tgds may specifiable finite set source target tgds appear considers possibility infinite set tgds suffice :10.1.1.10.8486
show composition finite set source tgds finite set full source target tgds may definable finite variable infinitary logic implies definable fixedpoint logic lfp associated composition query may np complete 
ameliorate negative results introduce class existential second order formulas function symbols called second order tgds express source target constraints subsume class order source target tgds 
case second order tgds right language specifying schema mappings composing schema mappings 
effect show composition finite sets source target tgds definable second order tgd 
composition second order tgds definable second order tgd give algorithm schema mappings specified second order tgds outputs second order tgd defines composition 
show secondorder tgds possess properties data exchange 
particular chase procedure extended second order tgds produces polynomial time computable univer sal solutions data exchange settings specified secondorder tgds 
result data exchange settings certain answers conjunctive queries computed polynomial time 
pointed arriving right concept second order tgds delicate matter 
may consider class second order formulas obtained order tgds existential order quantifiers existentially quantified function symbols 
process gives rise class existential second order formulas equalities 
obvious way define second order tgds formulas equalities 
interestingly show second order tgds equalities sufficiently expressive define composition query finite sets order source target tgds 
second order tgds strong fragment secondorder logic weak fragment 
weaker having equalities just noted sufficiently expressive capture composition query finite sets order tgds 
time strong carry chase process efficiently 
appreciate point consider computation certain answers conjunctive queries 
noted earlier data exchange setting defined second order tgds certain answers conjunctive query computed polynomial time doing chase 
contrast source schema described terms target schema means arbitrary order views conjunctive queries computing certain answers undecidable problem 
second order tgds form fragment second order logic ways behaved order logic 

semantics composition section define basic concepts meaning composing schema mappings 
schema finite sequence 
rk relation symbols fixed arity 
instance schema sequence 
finite relation arity ri 
call ri relation shall abuse notation ri denote relation symbol relation interprets 

sn 
tm schemas relation symbols common 
write denote schema sn tm instance instance write instance schema definition 
schema mapping short mapping triple st schemas relation symbols common st set formulas logical formalism st schema mapping instance instance satisfies formula set st write inst denote set instances inst say solution remarks order 
sequel st schema mapping refer source schema target schema 
formulas set st express constraints instance schema satisfy 
assume logical formalisms considered property satisfaction relation formulas instances preserved isomorphisms means instance satisfies formula isomorphic instance satisfies formula 
mild condition true standard logical formalisms order logic second order logic fixed point logics infinitary logics 
immediate consequence property inst closed isomorphisms inst isomorphic inst 
level generality formulas st may just source schema may just target schema set st may include constraints source schema target schema 
note term schema mapping mapping earlier literature instance bit misnomer schema mapping mapping traditional mathematical sense schema partitioned parts set constraints :10.1.1.10.8486
schema mapping st gives rise mapping instance associates set instances solutions note terminology solution comes solution data exchange problem associated mapping source instance binary relations definition composition binary relation :10.1.1.13.2900:10.1.1.13.2900
clearly st schema mapping inst binary relation instances instances follows define concept composition schema mappings composition binary relations inst inst 
definition 
schema mappings schemas relation symbol common pairwise 
schema mapping composition inst inst inst means inst exists inst inst 
inst inst closed isomorphisms composition inst inst closed isomorphisms 
consequently class inst inst identified query call composition query instances inst inst 
note definition asserting composition amounts saying composition query exactly set instances satisfy 
words means composition query definable formulas set 
known easy see query definable infinitary disjunction order sentences 
specifically finite structure satisfying query construct order formula defines structure isomorphism take disjunction formulas 
infinitary sentence defines query 
query definable set order formulas 
finite structure satisfy query construct negation order formula defines structure isomorphism form set formulas 
note infinite set firstorder formulas query satisfied finitely non isomorphic instances 
follows composition schema mappings exists schema mappings obtain composition singleton consisting infinitary formula defines composition query 
alternatively take usually infinite set firstorder formulas defines composition query 
furthermore composition unique logical equivalence sense compositions logically equivalent 
reason refer composition denote 
composition query definable infinitary disjunction order formulas infinite set order formulas natural investigate composition schema mappings definable expressive tractable logical formalisms 
natural investigate composition schema mappings definable logical formalism define schema mappings 
embark investigation section 

composing source target tgds source schema target schema 
target tuple generating dependency source target tgd order formula form conjunction atomic formulas conjunction atomic formulas assume variable appears full source tuple generating dependency full source target tgd recall query class finite structures closed isomorphisms 
source target tgd form conjunction atomic formulas conjunction atomic formulas assume variable appears source tgds formalize data exchange :10.1.1.13.2900:10.1.1.13.2900
data integration scenarios name glav assertions 
note full source target tgd logically equivalent finite set full source target tgds single atom right hand side 
specifically full source target tgd form ri xi equivalent set consisting full source target tgds ri xi 
contrast property fails arbitrary source target tgds existential quantifiers may bind variables different atomic formulas 
example 
consider schemas 
schema consists single binary relation symbol takes associates student names courses take 
schema consists similar binary relation symbol takes additional binary relation symbol student associates student name student id schema consists binary relation symbol enrollment associates student ids courses students take 
consider schema mappings takes takes takes student takes enrollment formulas source target tgds 
second formula example source target tgd full formulas full source tgds 
mapping associated set formulas requires copies tuples takes exist takes student name associated student id student 
second mapping associated formula requires pairs student id course exist relation enrollment provided associated student name 
define letting takes alice math alice art 
define letting takes student alice 
alice student id define letting enrollment math art 
easy verify inst inst 
inst inst 
main problems study find language schema mapping composition definition 
words looking involving instance inst inst satisfies 
section investigate definability com putational complexity composition schema mappings dependencies finite sets source target tgds 
show finite sets full source target tgds composition definable finite set full source target tgds 
furthermore finite set full source target tgds finite set source target tgds necessarily full composition definable finite set source target tgds 
turn implies associated composition query polynomial time computable 
contrast finite sets arbitrary source target tgds necessarily full composition may order definable associated composition query may np complete 
positive results positive result shows behavior composition mappings defined finite sets full source target tgds 
proposition 
schema mappings finite sets full source target tgds 
composition definable finite set full source target tgds 
consequently composition query polynomial time query 
proof 
sketch loss generality may assume full source target tgd single atom right hand side 
composition schema mapping constructed follows 
full source target tgd form rk xk full source target tgd form ri zi replace atom ri xi tgd formula zi xi zi xi result letting xi play role zi 
possible replacements performed process associates full target tgd finite set full source target tgds 
union sets finite set finite set 
clear inst inst satisfies 
converse hard verify satisfies result chasing inst inst inst inst 
special case proposition appeared lemma 
inspection proof proposition shows construction yields result 
proposition 
schema mappings finite set full source target tgds finite set source target tgds 
composition definable finite set source target tgds 
consequently composition query polynomial time query 
negative results series negative results associated composition schema mappings specified source tgds 
proposition 
exist schema mappings finite set source target tgds finite set full source target tgds hold composition 
definable finite set source tgds definable infinite set target tgds 

definable order formula 
consequently composition query polynomial time query 
proof 
sketch schema mappings prove proposition schema mappings example 
consider source target tgd 
ck takes 
takes ck enrollment 
enrollment ck easy verify composition schema mapping infinite set 

source target tgds 
easy see equivalent finite subset 
fact techniques show equivalent finite set source target tgds :10.1.1.13.2900
details omitted 
easy verify composition schema mappings definable order formula takes enrollment 
just example composition definable infinite set source target tgds definable finite set source target tgds 
different example composition definable infinite set source target tgds 
stated result amplifies limitations language source target tgds respect composition 
proof appears section develop necessary machinery 
proposition 
exist schema mappings consists single source target tgd finite set full source tgds composition defined finite infinite set source target tgds 
example proposition composition query polynomial time computable order 
follows show schema mappings finite set source target tgds consists single full source target tgd composition query np complete 
furthermore composition query definable formula finite variable infinitary logic powerful formalism subsumes fixed point logic lfp subsumes order logic datalog finite structures see 
theorem 
exist schema mappings finite set source target tgds consists full source tgd hold composition 
composition query np complete 

composition definable formula fixed point logic lfp 
proof 
sketch proposition shall show composition query schema mappings definable finite sets source target tgds np 
describe np hardness obtained reduction colorability composition query schema mappings 
schema consists single binary relation symbol schema consists binary relation symbols schema consists binary relation symbol set consists source target tgds 
consists single full source target tgd 
instance schema 
words contains pairs different colors colors graph instance consisting edge relation hard verify colorable inst inst 
reduction colorability composition query belongs class weak polynomialtime reductions known quantifier free reductions instance composition query defined instance quantifier free formulas see immerman precise definitions 
dawar showed colorability expressible finite variable infinitary logic 
follows composition query expressible 
note formula source target tgd proof theorem full source target tgd 
existential quantifiers occur source target tgd equivalent set source target tgds uc vc 
preceding theorem proposition yield sharp boundary definability composition schema mappings specified finite sets source target tgds 
precisely composition finite set full source target tgds finite set source target tgds definable order formula fact definable finite conjunction source target tgds composition finite set source target tgds having existential quantifier set consisting full source target tgd may definable 
similarly computational complexity associated composition query may jump solvable polynomial time np complete 
schema instances function homomorphism relation symbol tuple 

homomorphism problem schema decision problem instances homomorphism 
fundamental algorithmic problem shown feder vardi constraint satisfaction problems identified homomorphism problems 
particular sat colorability special cases homomorphism problem suitable schemas 
slight modification proof preceding theorem shows schema homomorphism problem simple quantifier free reduction composition query schema mappings specified finite sets source target tgds 
proposition 
schema 
rm schema mappings finite set source tgds finite set full source target tgds property homomorphism problem quantifier free reduction composition query 
proof 
schema schema 
rm schema tm binary relation symbol ti arity ri schema 
pm pi arity ri dependencies follows xk xk yk xk yk rm rm tm xk yk xk yk xk yk tm pm 

instances instance 
instance 
relation names reflect schema 
easy verify homomorphism inst inst 
result establishes upper bound computational complexity composition query associated schema mappings specified finite sets source tgds 
shows composition mappings definable existential second order formula 
proposition 
schema mappings finite sets source target tgds composition query np 
consequently composition definable existential second order formula 
proof 
sketch establish membership np suffices show inst inst instance size polynomial sizes 
proven homomorphic image canonical universal solution defined 
details omitted 
fact composition query np implies fagin theorem composition definable existential second order formula 
conclude section showing results proposition may fail dramatically schema mappings specified arbitrary order formulas 
proposition 
schema mappings consists single order formula empty set composition query undecidable 
proof 
sketch define way inst precisely encoding turing machine represents terminating computation turing machine consists order formula expresses connection 
schema consist say single unary relation symbol empty set 
composition consists encoding halting turing machine arbitrary 
result follows fact undecidable determine turing machine halting 

second order tgds seen previous section composition schema mappings specified finite sets source tgds may definable set finite infinite source target tgds 
proposition know composition definable existential second order formula 
shall show section fact composition schema mappings specified finite sets source target tgds definable restricted form existential second order formulas call second order tuple generating dependencies tgds 
intuitively tgd source target tgd suitably extended existentially quantified functions equalities 
furthermore tgd capable defining composition schema mappings specified tgds 
words tgds closed composition 
shall show section tgds possess properties data exchange 
properties justify tgds right language representing schema mappings composing schema mappings 
example 
proof proposition shows schema mappings example finite set source target tgds define composition 
contrast formula tgd defines composition takes enrollment formula function symbol associates student name student id 
tgd states student name associated course takes corresponding student id associated enrollment 
independent courses student takes student name associated courses 
ck takes associated 
ck enrollment 
verify define composition assume inst inst 

construct function follows 
takes set student guaranteed exist second source target tgd pick 
immediate satisfies tgd existentially quantified function symbol instantiated constructed conversely assume satisfies tgd 
function takes enrollment student takes takes verified 
example 
example illustrates slightly complex form second order tgd contains equalities terms 
consider schemas 
schema consists single unary relation symbol emp employees 
schema consists binary relation symbol mgr associates employee manager 
schema consists similar binary relation symbol mgr additional unary relation symbol intended store employees managers 
consider schema mappings emp mgr mgr mgr 
easy verify composition second order tgd emp mgr emp 
fact shall derive give composition algorithm 
example shortly show equalities tgds strictly necessary purposes composition give proof earlier proposition 
formally define tgds need define terms 
collection variables collection function symbols term defined recursively follows 
variable term 

ary function symbol 
tk terms 
tk term 
give precise definition tgd 
definition 
source schema target schema 
second order tuple generating dependency tgd formula form fm xn 
fi function symbol 

conjunction atomic formulas form yk ary relation symbol schema 
yk variables xi necessarily distinct equalities form terms xi 
fm 

conjunction atomic formulas tl ary relation symbol schema 
tl terms xi 
fm 

variable xi safe term respect 
fm safe term respect 
fm defined recursively variable occurring relational atomic formula variable occurring equality form safe term respect 
fm term 
tk 
fm 
tk safe terms respect 
fm 
fourth condition safety assumption second order tgds domain independent truth depend underlying domain active domain elements appear tuples source 
case order tgds equalities condition simpler requiring universally quantified variable appear relational atomic formulas left hand side tgd 
condition explicit literature definition order tgds 
explicit dependencies fagin observed condition dependencies domain independent 
formula valid example second order tgd universally quantified variables safe concretely safe appears inside safe equated safe equated safe safe 
contrast formulas valid second order tgds case safe second case safe 
remarks order 
easy verify tgds closed conjunction 
finite set tgds equivalent single tgd 
reason consider schema mappings specified tgds restrict attention case set st consists tgd 
identify singleton set st tgd refer st tgd 
describe normal form tgds 
define nesting depth term denoted nest follows 
variable nest 
form 
tk nest max nest 
nest tk 
say term nested nest 
nested nested 
easy see tgd logically equivalent tgd containing non nested terms 
intuitively equalities transform tgd equivalent tgd nested terms 
example consider tgd nested term 
tgd equivalent tgd nested terms 
restricted definition tgds allowing non nested terms appear sake naturalness choose allow nested terms 
come surprise firstorder source target tgd equivalent tgd 
fact easy see source target tgd equivalent tgd equalities 
specifically source target tgd 
xm 
xm 
yn 
xm 
yn 
equivalent tgd equalities obtained 
fn 
xm 
xm 
xm 
xm 
fn 
xm 
necessity equalities definition tgds allows equalities terms formulas just saw tgds represent order tgds require equalities 
show equalities necessary may possible define composition schema mappings 
theorem 
exist schema mappings single tgd set full tgds composition tgd equivalent tgd equalities 
proof 
example 
need show tgd equalities logically equivalent 
define letting emp bob 
define letting mgr bob susan 
define letting mgr bob bob 
easy see intuitively bob susan 
easy see contain bob 
shall show tgd equalities satisfied satisfied follows easily equivalent tgd equalities proves theorem 
fact note shows equivalent set infinite tgds equalities 
tgd equalities satisfied proof complete show satisfied assume fm xn 
showing appear 
assume appears shall derive contradiction 
definition tgd know term appears assumption contain equalities follows contains formulas form emp member xi 
satisfied letting bob play role variables xi 
empty follows satisfied assignment 
satisfied desired contradiction 
conclude proof showing satisfies 
role function symbol fj played constant functions appropriate arity take value bob 
consider clause xi 
show holds assignment variables xi holds assignment variables xi 
follows fourth condition definition tgds conjuncts precisely formulas form emp xi 
holds variable xi assigned value bob 
term assigned value bob 
assumption contain follows conjunct form mgr 
just showed assigned value bob follows holds 
shown 
noted proof proof shows example considered infinite set tgds equalities define composition 
target tgd equivalent tgd equalities proves proposition 
consider quite interesting allowing equalities tgds necessary sufficiently expressive 
particularly true obvious way define tgds allow equalities 
saw source target tgd obtain tgd equalities introduced 
composability second order tgds seen earlier sets source target tgds closed composition 
contrast show section tgds closed composition 
schema mappings tgds composition definable tgd 
show exhibiting composition algorithm giving theorem says composition algorithm correct 
algorithm compose input schema mappings tgds 
output schema mapping composition tgd 

split tgds 
initialize empty set 
assume tgd fm xn 
put implications 
likewise 
implication form vk rj tj contains universally quantified variables tj vector terms replace implication implications rk tk 
compose 
repeat relation symbol left hand side formula 
implication form atom relation symbol perform steps replace atoms 
equalities left unchanged 
tm implications right hand side relation symbol 
variables tgds renamed overlap variables 
implications exist remove 
implication ti conjunction equalities variables corresponding terms ti position position 
example conjunction equalities position position 
observe equality generated form variable term 
remove add implications follows replace add resulting implication 
construct 

implications constructed previous step 
tgd fs xr 
fs function symbols appear implications variables xi variables implication return 
intuition algorithm able eliminate relation symbols matters relations intermediate instance equality pattern tuples exact values 
note number formulas set size exponential maximum number relational atoms appear left hand side implication 
verified algorithm generates second order tgds valid definition 
concretely step algorithm equalities generated form variable safe term respect left hand side implication 
continues safe term respect new left hand side newly generated implication recall atomic formula replaced 
safe 
algorithm compose schema mappings specified finite sets target tgds transforming tgd described previous section passing resulting schema mappings composition algorithm 
example 
illustrate steps composition algorithm schema mappings example 
transform tgds emp mgr mgr mgr mgr run composition algorithm 
step sets consist implications emp mgr mgr mgr mgr step set contains implications emp mgr emp step algorithm returns tgd easily verified tgd equivalent tgd shown example 
essentially left hand side tgd contains equality form variable term occur replace occurrences remove equality obtain simplified tgd 
theorem 
tgds 
algorithm compose returns schema mapping tgd 

data exchange second order tgds main motivation studying composition schema mappings stems data exchange :10.1.1.13.2900:10.1.1.13.2900
specific case data exchange source schema target schema schema mapping specified set source target tgds 
instance source schema interested materializing target instance satisfies specification 
case successive data exchange scenarios final instance final target schema interest avoid materializing intermediate instances schema mapping composition sequence schema mappings 
argued far language source target tgds may longer appropriate case 
need secondorder tgds 
section describe modify classical chase technique handle tgds usual order tgds order produce universal solutions data exchange 
particular introduce chasing tgds variation logic program evaluation polynomial time computation give proposition says result universal solution 
example illustrate chase tgds 
keep discussion informal omit full details definition chase 
example 
consider schema mapping st st tgd formulas form appear scope existentially quantified functions thought source target tgd 
difference normal source target tgd function terms relational atoms equality atoms suppose source instance consists tuples 
chase starts instance form constructs instance form applying tgds tgds satisfied 
tgd applied left hand side tgd mapped corresponding right hand side exist case add applying tgd st tuple generate tuple note ground function terms may appear tuples ground term defined recursively value source function term form 
gk 
gk ground terms 
applying tgd time tuple generate ground function term appears 
tuple tgd generate apply second tgd st see combinations satisfy equality 
ground terms treated equal precisely syntactically identical 
chase generate tuples chase replace ground function terms special values call nulls 
sure ground terms replaced null precisely syntactically identical 
example obtain instance contains tuples distinct nulls replacing respectively 
relation remains contains source values 
concept universal solution data exchange problem introduced 
schema mapping st instance universal solution solution solution exists homomorphism defined section property source value occurs case st contains source target tgds known chasing st produces universal solution proposition asserts similar result holds chase source instance tgds 
proposition 
st schema mapping st tgd 
source instance chasing st terminates polynomial time size result universal solution proposition immediate important consequence terms query answering target schema 
concretely st schema mapping ary query target schema source instance set certain answers respect denoted defined set tuples values solution 
shown universal solution union conjunctive queries equals result evaluating keeping tuples formed entirely values equality holds arbitrarily specified schema mappings particular holds schema mappings specified tgds 
fact taken proposition implies result 
corollary 
st schema mapping st tgd 
union conjunctive queries target schema source instance set computed polynomial time size 
point interesting contrast result results query answering 
shown source schema described terms target schema means arbitrary firstorder views computing certain answers conjunctive queries undecidable 
contrast result shows schema mappings consider go order computing certain answers unions conjunctive queries remains polynomial time schema mappings specified source target tgds 
second order tgds form behaved fragment second order logic purposes data exchange query answering second order tgds behave similarly source target tgds 

introduced believe right notion composition schema mappings 
introduced second order tgds generalization finite sets source target tgds 
show second order tgds robust composition mappings second order tgd second order tgd 
contrast mappings proven general setting includes target constraints 
finite set source target tgds composition may definable infinite set source target tgds 
show second order tgds possess properties data exchange 
acknowledgments 
authors moshe vardi helpful suggestions 

abiteboul duschka 
complexity answering queries materialized views 
acm symposium principles database systems pods pages 
abiteboul hull vianu 
foundations databases 
addison wesley 
beeri vardi 
proof procedure data dependencies 
journal association computing machinery jacm 
beeri vardi 
formal systems tuple equality generating dependencies 
siam computing 
bernstein :10.1.1.12.2729
applying model management classical meta data problems 
conference innovative data systems research cidr pages 
chandra harel 
structure complexity relational queries 
journal computer system sciences 
dawar 
restricted second order logic finite structures 
information computation 
fagin 
generalized order spectra polynomial time recognizable sets 
karp editor complexity computation siam ams proceedings vol 
pages 
fagin 
horn clauses database dependencies 
journal association computing machinery jacm oct 
fagin kolaitis miller popa 
data exchange semantics query answering 
international conference database theory icdt pages 
fagin kolaitis popa 
data exchange getting core 
acm symposium principles database systems pods pages 
feder vardi 
computational structure monotone monadic snp constraint satisfaction study datalog group theory 
siam computing 
preliminary version proc 
th acm symp 
theory computing may pp 

halevy ives mork tatarinov 
piazza data management infrastructure semantic web applications 
international world wide web conference pages 
immerman 
descriptive complexity 
springer 
lenzerini 
data integration theoretical perspective 
acm symposium principles database systems pods pages 
lloyd 
foundations logic programming 
springer 
madhavan halevy 
composing mappings data sources 
international conference large data bases vldb pages 
miller haas hern ndez 
schema mapping query discovery 
international conference large data bases vldb pages 
popa miller hernandez fagin :10.1.1.19.6308
translating web data 
international conference large data bases vldb pages 
vassiliadis 
logical modeling etl processes 
international conference advanced information systems engineering caise pages 
