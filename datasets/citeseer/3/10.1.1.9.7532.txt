computational complexity designing bounded agents michael laurence paul dunne michael wooldridge department computer science university liverpool liverpool zf united kingdom ped csc liv ac uk october determine computational complexity agent design problem classes bounded agents 
agent design problem determining representation environment representation task carried environment possible construct agent guaranteed accomplish task environment 
previous research determined complexity agent design problem various classes environment task agent permitted perfect recall prior events 
investigate complexity problem agents various bounds placed memory 
specifically determine complexity agent design problem reactive agents decision solely current environment state reactive agents decision environment states oblivious agents information environment 
literature autonomous agents known distinction called deliberative cognitive agents behavioural reactive agents 
deliberative agents typically assumed employ explicit symbolic representations environments generally decisions action perform manipulating representations typically means symbolic reasoning 
widely accepted approaches merits drawbacks deliberative logic approaches benefit clear theoretical underpinning associated engineering methodology computationally costly contrast reactive agents tend economical computational resources frequently robust suffer lack engineering methodology 
comparatively little research addressed relative merits approaches theoretical standpoint 
tools computational complexity theory 
previous research complexity designing agents accomplish tasks particular environments investigated :10.1.1.43.7182:10.1.1.18.5443
agent design problem crudely understood follow representations task carried environment task carried determine exists agent carry task environment 
answer witness fact agent carry task 
problem studied range different environments deterministic versus non deterministic history dependent versus markovian finite versus infinite range different types tasks achievement tasks bring state affairs maintenance tasks maintain state affairs boolean combinations achievement maintenance tasks :10.1.1.43.7182:10.1.1.18.5443
common factor prior research agents permitted perfect recall allowed remember complete sequence events current state environment brought 
course fact exists agent principle accomplish task environment imply exists agent implemented practice actual implementation perfect recall agent require memory intractable computation carried constant time 
course exactly motivation russell notion bounded optimality 
reason aim consider complexity issues agent design problems required agent program bounded concise 
formally considering perfect recall agents prescribe action possible run consider reactive agents prescribe actions predicated constant length section current run reactive agent action determined solely final sequence state action pairs entirety 
primary virtue reactive agents programs implemented worst look table length number state action pairs 
section review formal model agents environments tasks distinct environment forms agents may operate :10.1.1.18.5443
section reactive agent design decision problems formulated proved markedly easier non reactive counterparts remain intractable complete second level polynomial time hierarchy 
introduce natural development reactive agents oblivious agents chosen actions determined solely length time agent operating independently current environment state 
dealt concluding section 
assume familiarity computational complexity theory 
agents environments tasks section formal model agents environments occupy 
model frame decision problems studied 
systems interest consist agent situated particular environment agent interacts environment performing actions environment responds actions changes state 
assumed environment may finite set 
en instantaneous states 
agents repertoire possible actions available transform state environment 
letting ac 
finite set actions behaviour environment defined state transformer function 
case simply function environment states actions sets environment states runs actions sets environment states 
allows behaviour environment dependent history system previous states environment previous actions agent play part determining environment behaves 
definition environment env tuple ac finite set environment states distinguished initial state ac finite set available actions 
denote sequences form ei ac subset sequences state 
state transformer function total mapping ac focus set runs environment 
set ac denote ac set subsequently interpret total mapping ac describing possibly empty set states may result performing action ac run 
run terminated ac 
subset comprising terminated runs denoted tenv 
length run total number actions states occurring denoted 
denotes final state run ac state transformer function encoded input instance deterministic turing machine description characteristics input form ac separator symbol 
program accepts 
number moves bounded polynomial 
set states constructed steps 
view agents performing actions environment causing state environment change 
general agent attempting control environment way order carry task 
agent best partial control environment 
definition agent ag environment env ac mapping ag ac 
symbol indicate agent finished operation agent invokes terminated runs tenv event referred agent having allowable actions 
system sys pair env ag comprising environment agent operating environment 
sequence adopt convention fail halted moves input ac called possible run agent ag environment env satisfies 
initial state ag 
ek ek ag ek noted general state transformer function domain ac non deterministic agent may number different possible runs environment 
denote ag env set possible runs agent ag environment env ag env subset terminated belong tenv 
agent ag define allowable action ac run ag env tenv agents may choose halt arbitrarily 
concentrate behaviour agents bound placed number actions performed 
precisely set critical runs agent ag environment env set ag env defined runs agent exactly actions performed terminated actions 
stated bounding function ac 
study agent design problems framework initiated extended :10.1.1.43.7182:10.1.1.18.5443
important decision problems introduced finite achievement design fad finite maintenance design fmd problems 
definition instance finite achievement design problem fad comprises environment ac subset instance accepted agent ag environment ac ag env occurs instance finite maintenance design problem fmd comprises environment ac subset instance accepted agent ag environment ac ag env occur analyses consider settings non deterministic deterministic history dependent history independent depends det non det state 
denoting cases fmd shown fad equivalent complexity varies pspace complete fad non det np complete det history independent cases 
similar results established problems fd boolean function variables environment state associated variable run induces instantiation xi state mapped xi occur xi state occurs 
fad fmd special cases corresponding unary functions respectively 
history dependent environments shows 
xk constant function fd equivalent complexity fad state transitions example environment arcs environment states labelled sets actions corresponding transitions 
note environment history dependent agents allowed perform action twice 
example agent reached state performing able perform order reach 
reactive agent design intractability fad non det creates drawback difficulty arises length program describing successful agent may exponential ac concise encoding action required relevant run 
try enforce short program regime limiting agents interest required specify actions predicated constant length fragment agent history 
example better understand notion reactive agent consider environment state transformer function illustrated graph 
environment agent just available actions respectively environment states 
history dependence environment arises agent allowed execute action twice 
arcs states labelled actions cause state transitions note environment non deterministic 
consider achievement task goal states 
clearly reactive agent accomplish task defined rules formally 
definition agent ag reactive pairs ag env holds ag ag 
reactive agent considers current state choosing action perform history leading 
important note state transition function continues history dependent existence agent solving fad det particular instance guarantee existence reactive agent doing 
limiting attention reactive agents disadvantage potentially successful agents may overlooked significant gain program agents requires log ac bits single action associated state assuming history dependent denote decision problem fad fmd fd solution agents required reactive 
recall complexity class comprises languages membership decidable np program having unit cost access np oracle 
alternatively defined ternary relation rl rl decided deterministic polynomial time rl satisfies theorem fad non det complete 
rl proof show fad non det suffices observe instance ac accepted exists reactive agent ag ac critical runs pass element reactive agent ag defined mapping ag ac 
ternary relation env ag ac ag env includes ag reactive agent defined mapping ag 
certainly case env ag decided env positive instance fad non det ag ac ag env env ag decidable program 
show problem hard give reduction complete problem 
instance boolean formula disjoint variable sets accepted holds instantiation instantiations render true 
completeness demonstrated 
instance 
xn 
yn construct instance env fad non det follows 
env ac set 
xn 

ac eval transition function xi xi xi eval eval instantiation defined xk eval xi yi suppose env positive instance fad non det reactive agent ag critical run reaches state 
consider mapping ag ac defining agent 
certainly case ag xi xi furthermore ag ag ag ag eval allowable actions states 
consider critical run agent ends state instantiation induced satisfies 
setting xi ag xi yields instantiation holds 
hand positive instance witnessed setting 
reactive agent defined ag 
xn 
eval achieves state witnesses positive instance fad non det theorem indicates deciding reactive agent exists usual assumptions significantly easier complete non deterministic cases deciding agent freedom determine actions entire history pspace complete 
contrast result shows deterministic environments difference complexity cases 
theorem fad det np complete 
proof membership np obvious instance env fad det simply non deterministically guess action state env define reactive agent 
env deterministic agent determines unique run suffices check contains state prove np hardness give reduction sat 

xn instance sat 
define instance env fad det env having state set 
xn initial state actions 
transition function xi xi xn xn 
easy see env positive instance fad det formula 
xn satisfiable proving theorem 
note easy corollaries theorems 
corollary fmd fd non det complete 
det np complete 
proof fmd simply choose set reductions sat 
minor modification required definition reactive agent simply associate disallowed action state action state set cases 
proof fd derives constructions omit details 
reactive agent design requiring agents specify single re action state gain guaranteed short program appropriate agent exists potential cost missing alternative solutions reactive agent possible 
case agent reacting current state agents solving specified design problem need specify actions predicated action state pairs run having examine history 
reactive agents described programs ac log ac bits realistic small values consider generalisation concept reactivity encompass reactive agents 
definition environment env positive integer agent ag ag env holds ag ag 
el el el el denote agent design problem solution agents required reactive 
theorem non det det fad log fad proof show fad log fad instance consists environment env subset define new environment env follows 
basic idea state env corresponds sequence states env state env new environment env states 

initial state env usual initial state env 
env action addition actions env set legal runs defined follows 
suppose env run en env run en en 
observe env deterministic env easy see reactive agent env exists runs pass contain state reactive agent env exists runs contain state 

show fad log fad instance env create instance env state env corresponds distinct actions states env 
omit details straightforward simulation establishing reactive agent solves env reactive agent solves env corollary fad fmd fd non det complete 
det np complete 
proof immediate theorems 
oblivious agent design concept reactive agent offers mechanism concise solutions agent design tasks may described history dependent environments 
consider superficially similar idea oblivious agent solution 
informally oblivious agent takes account current state choosing action number actions performed far regard oblivious agent respect concept reactivity reactive 
example recall example earlier 
environment oblivious agent accomplish achievement task goal states simply performing 
formally 
definition agent ag oblivious pairs ag env ag ag 
settings agents cease operations maximum number actions say oblivious agent specified mapping 
ac describing action performed stage initial state onwards 
design problem focused introduce oblivious variant follows 
definition instance oblivious achievement design problem fad consists environments env ac subset positive integer instance accepted mapping 
ac ag agent defined ag run ag env contains state oblivious agent specified log ac bits ac may represent significant saving reactive agents 
earlier results turns deciding oblivious agents exist easier deciding reactive ones 
theorem fad non det complete 
fad det np complete 
proof reduction theorem construct instance fad non det 
suffices observe xi actions determined odd indexed moves applicable actions indexed moves eval 
oblivious agent specified instance env results accepted 
proof similar 
far considered agents realise specified task achievement maintenance limited number actions respect critical runs length ac 
course deterministic environments oblivious agents determining agent eventually realises achievement tasks easily shown undecidable 
situation changes consider agents operating history independent environments change environment state specified depends current state action chosen 
conclude section presenting results concerning oblivious agent design tasks history independent non deterministic environments 
environment form naturally modeled directed graph vertices correspond possible states edge ei ej labelled ac ej ei 
oblivious agents setting may regarded simply mappings ag ac 
course non deterministic environments happen reaches different states ei ej actions performed ei ag ej ag convenient pre possibility adding special dead state environment pair ac directed graph contains edge labelled additionally edges labelled ac 
noted require assume acyclic 
general form oblivious agent design problem consider context history independent non deterministic environments defined 
definition 
xt non constant propositional logic function variables 
instance oblivious agent design problem oad consists edge labelled directed graph arising history independent non deterministic environment ac partial mapping 
xt associating state variable xi 
instance accepted value oblivious agent ag ac ag ac ag sm sequence states traversed ag instantiation 
xt defined xk state xk occurs xk state 
reasons limited space results merely stated proof 
theorem propositional functions 
xk problem oad decidable 
theorem oad pspace hard 
remarks regarding relationship theorem theorem may order appearing claim history independent version problem difficult history dependent counterpart 
important difference cases contrast oad instance fad non det include stated bound number actions oblivious agent allowed perform oad bound exists decided 
noted earlier exact oad history dependent environments fact undecidable relevance theorem 
related determined computational complexity designing agents various types imperfect recall 
general show problem apparently easier corresponding setting agents perfect recall complete opposed pspace complete simpler types problem setting example environment deterministic complexity problems perfect imperfect recall case coincide 
best knowledge represents attempt apply tools complexity theory comparative study reactive types agents related literature 
argues reactive agents general universal plans approach particular arguing approach scale due size representation required universal plans agents referred correspond precisely notion reactive agent 
argue prevailing ai notion optimal agent chooses best action principle argues forcefully focus finding agents best choice computational memory processor constraints operate 
studies various bounds may placed memory size agents game theoretic point view intuition exactly complexity theoretic results obtained 
brooks 
cambrian intelligence 
mit press cambridge ma 
dunne wooldridge laurence 
computational complexity boolean stochastic agent design problems 
proceedings international joint conference autonomous agents multiagent systems aamas pages bologna italy 
genesereth nilsson 
logical foundations artificial intelligence 
morgan kaufmann publishers san mateo ca 
ginsberg 
universal planning universally bad idea 
ai magazine 
papadimitriou 
computational complexity 
addison wesley reading ma 
rubinstein 
modeling bounded rationality 
mit press cambridge ma 
russell subramanian 
provably bounded optimal agents 
journal ai research 
schoppers 
universal plans reactive robots unpredictable environments 
proceedings tenth international joint conference artificial intelligence ijcai pages milan italy 
wooldridge 
computational complexity agent design problems 
proceedings fourth international conference multi agent systems icmas pages boston ma 
wooldridge dunne 
complexity agent design problems determinism history dependence 
technical report university liverpool dept computer science 

complete sets polynomial hierarchy 
theoretical computer science 

