computing persistent homology gunnar carlsson show persistent homology filtered dimensional simplicial complex simply standard homology particular graded module polynomial ring 
analysis establishes existence simple description persistent homology groups arbitrary fields 
enables derive natural algorithm computing persistent homology spaces arbitrary dimension field 
results generalizes extends previously known algorithm restricted coefficients 
study implies lack simple classification non fields 
give algorithm computing individual persistent homology groups arbitrary pids dimension 
study homology filtered dimensional simplicial complex allowing arbitrary pid ground ring coefficients 
filtered complex increasing sequence simplicial complexes shown 
determines inductive system homology groups family abelian groups homomorphisms homology computed field coefficients obtain inductive system vector spaces field 
vector space determined isomorphism dimension 
obtain simple classification inductive system vector spaces 
classification terms set research author partially supported nsf ccr itr 
research second author partially supported nsf dms 
research authors partially supported nsf dms 
department computer science stanford university stanford california 
department mathematics stanford university stanford california 
cd ad ac abc acd ab bc 
filtered complex newly added simplices highlighted 
intervals 
derive natural algorithm computing family intervals 
family may identify homological features persist filtration persistent homology filtered complex 
furthermore interpretation clear ground ring field exists similarly simple classification persistent homology 
structures complicated may assign interesting invariants simple classification available 
case provide algorithm computing single persistent group filtration 
rest section motivate study examples filtered complexes arise persistent homology interest 
discuss prior relationship 
conclude section outline 
motivation call filtered simplicial complex associated chain boundary maps persistence complex 
formalize concept section 
persistence complexes arise naturally attempting study topological invariants space computationally 
knowledge space limited imprecise 
consequently utilize multi scale approach capture connectivity space giving persistence complex 
example point cloud data suppose finite set points subspace call point cloud data pcd short 
reasonable believe sampling dense able compute topological invariants directly pcd 
may compute ech complex approximate rips complex 
complex vertex set 
declare set vertices 
span simplex iff vertices pairwise close pairs 
obvious inclusion words increasing sequence non negative real numbers obtain persistence complex 
example density samples geometric object heavily concentrated 
important compute measure density data sample 
instance may count number samples contained ball size sample may define rips subcomplex vertices increasing sequence non negative real numbers obtain persistence complex 
analyze complex compute topological invariants attached geometric object data concentrated 
example morse functions manifold equipped morse function may filter excursion sets 
choose increasing sequence non negative numbers get persistence complex 
morse function height function attached embedding persistent homology give information shape submanifolds homological invariants total manifold 
prior assume familiarity basic group theory refer reader foote 
extensive description algebraic homology recommend accessible resource non specialists 
large body efficient computation homology groups ranks 
persistent homology groups initially defined 
authors provide algorithm worked spaces coefficients 
algorithm generates set intervals filtered complex 
surprisingly authors show intervals allowed correct computation rank persistent homology groups 
words authors prove constructively persistent homology groups computed coefficients simple description terms set intervals 
build intervals algorithm pairs positive cycle creating simplices negative cycle destroying simplices 
computation algorithm ignores negative simplices looks youngest simplex 
authors prove correctness results algorithm underlying structure remains hidden 
motivated primarily unexplained results previous 
wish answer questions 
simple description exist persistent homology 
description exist rings coefficients arbitrary dimensional simplicial complexes 

ignore negative simplices computation 
look youngest simplex 

relationship persistence algorithm standard reduction scheme 
resolve questions uncovering elucidating structure persistent homology 
specifically show persistent homology filtered dimensional simplicial complex simply standard homology particular graded module polynomial ring 
analysis places persistent homology classical framework algebraic topology 
placement allows utilize standard structure theorem establish existence simple description persistent homology groups set intervals answering question 
description exists arbitrary fields just previous result resolving second question 
analysis enables derive persistence algorithm standard reduction scheme algebra resolving questions main lemmas 
algorithm generalizes extends previously known algorithm complexes arbitrary dimensions arbitrary fields coefficients 
show consider integer coefficients coefficients non field similar simple classification 
negative result suggests possibility interesting incomplete invariants inductive systems 
give algorithm classifying single homology group arbitrary pid 
spectral sequences filtered complex gives rise spectral sequence natural wonder relationship sequence persistence 
full discussion spectral sequences outside scope 
include remarks reader familiar subject 
may easily show persistence intervals filtration correspond nontrivial differentials spectral sequence arises filtration 
specifically interval length corresponds differential correspondence realize method spectral sequences computes persistence intervals order length finding intervals length computation term 
principle may method compute result algorithm 
method provide algorithm scheme tailored problem independently 
practitioner decide appropriate basis find zero terms sequence deduce nature differentials 
analysis persistent homology hand provides complete effective implementable algorithm filtered complex 
outline reviewing concepts algebra simplicial homology section 
re introduce persistent homology integers arbitrary dimensions 
section define study persistence module structure represents homology filtered complex 
addition establish relationship results prior 
analysis derive algorithm computation fields section 
non fields describe algorithm section computes individual persistent groups 
conclude section discussion current 
background section review mathematical algorithmic background necessary 
reviewing structure finitely generated modules principal ideal domains 
discuss simplicial complexes associated chain complexes 
putting concepts define simplicial homology outline standard algorithm computation 
conclude section describing persistent homology 
algebra assume ring commutative unity 
polynomial coefficients formal sum indeterminate 
example polynomials integer coefficients 
set polynomials forms commutative ring unity 
divisors zero ideals principal principal ideal domain pid 
purposes pid simply ring may compute greatest common divisor gcd pair elements 
key operation needed structure theorem discuss 
pids include familiar rings finite fields prime polynomials coefficients field pids effective algorithms computing gcd 
graded ring ring equipped direct sum decomposition abelian groups multiplication defined bilinear pairings rn rm rn elements single called homogeneous degree deg may grade polynomial ring non negatively standard grading 
grading homogeneous degree respectively sum homogeneous 
product terms degree required definition 
graded module graded ring module equipped direct sum decomposition action defined bilinear pairings rn mm mn main structure graded module include concrete examples clarify concept 
graded ring module non negatively graded 
standard structure theorem describes finitely generated modules graded modules pids 
theorem structure pid finitely generated module isomorphic direct sum cyclic modules 
decomposes uniquely form similarly graded module graded pid decomposes uniquely form homogeneous elements denotes shift upward grading 
cases theorem decomposes structures parts 
free portion left includes generators may generate infinite number elements 
portion vector space familiar readers 
decomposition vector space dimension 
torsional portion right includes generators may generate finite number elements 
example pid theorem represent generator capable creating elements 
torsional elements homogeneous 
intuitively theorem describes finitely generated modules graded modules structures looks vector spaces dimensions finite size 
simplicial complexes simplicial complex set collection subsets called simplices singular simplex ins call sets vertices clear context refer set complex 
say simplex dimension 
face orientation simplex 
equivalence class orderings vertices 

equivalent sign 
denote oriented simplex 
simplex may realized geometrically convex hull affinely independent points realization gives familiar low dimensional simplices vertices edges triangles tetrahedra shown 
realized complex simplices meet common faces 
subcomplex subset simplicial complex 
filtration complex nested subsequence complexes 
generality call filtered complex 
show small filtered complex 
tetrahedron triangle edge vertex 
oriented simplices 
orientation tetrahedron shown faces 
chain complex kth chain group free abelian group set oriented simplices differently oriented 
element chain coefficients boundary operator homomorphism defined linearly chain action simplex 


indicates deleted sequence 
boundary operator connects chain groups chain complex 

may define subgroups boundary operator cycle group ker boundary group im show examples cycles 
important property boundary operators boundary boundary empty 
fact definitions implies defined subgroups nested 
generality define null boundary operators dimensions empty 
homology kth homology group elements classes homologous cycles 
describe structure view abelian groups defined far 
dashed boundary rests surface torus 
solid cycles form basis homology class torus 
cycles non bounding boundary piece surface 

chain complex internals chain cycle boundary groups images boundary operators 
modules integers 
view allows alternate ground rings coefficients including fields 
ring pid module theorem applies rank free submodule betti number module torsion coefficients 
ground ring theorem describes structure finitely generated abelian groups 
field prime torsion submodule disappears 
module vector space fully described single integer rank depends chosen field 
reduction standard method computing homology reduction algorithm 
describe method integer coefficients familiar ring 
method extends modules arbitrary pids 
free oriented simplices form standard basis 
represent boundary operator relative standard bases chain groups integer matrix entries 
matrix called standard matrix representation columns rows number simplices respectively 
null space corresponds range space manifested 
reduction algorithm derives alternate bases chain groups relative matrix diagonal 
algorithm utilizes elementary row operations 
exchange row row 
multiply row 
replace row row row integer algorithm uses elementary column operations similarly defined 
column row operation corresponds change basis 
example ith jth basis elements respectively column operation type amounts replacing qe similar row operation basis elements replaces qe shall fact section 
algorithm systematically modifies bases elementary operations reduce smith normal form 
rank rank algorithm compute corresponding bases respectively unnecessary decomposition needed 
computing normal form dimensions get full characterization torsion coefficients precisely diagonal entries greater 
ii basis rank 
iii basis equivalently rank rank combining ii iii rank rank 
example complex standard matrix representation ab bc cd ad ac show bases matrix 
reducing matrix get normal form cd bc ab ad bc cd ab ac bc ab form basis basis may similar procedure compute homology graded pids 
homogeneous basis basis homogeneous elements 
representing relative standard basis homogeneous homogeneous basis reducing normal form read description provided direct sum new basis zero row contributes free term shift deg ii row diagonal term contributes torsional term homogeneous shift deg reduction algorithm requires elementary operations number simplices operations performed exact integer arithmetic 
problematic practice entries intermediate matrices may extremely large 
persistence section re introducing persistence 
filtered complex ith complex associated boundary operators matrices groups 
note superscripts indicate filtration index related cohomology 
persistent kth homology group 
definition defined groups denominator subgroups intersection group subgroup numerator 
persistent kth betti number rank free subgroup may define persistent homology groups injection maps homology class contains 
im 
extend definition arbitrary pids 
persistent homology groups modules theorem describes structure 
persistence module section take different view persistent homology order understand structure 
intuitively computation persistence requires compatible bases clear succinct description available compatible bases 
section combining homology complexes filtration single algebraic structure 
establish correspondence reveals simple description fields 
significantly illustrate persistent homology filtered complex simply standard homology particular graded module polynomial ring 
simple application structure theorem theorem gives needed description 
section illustrating relationship structures persistence equation equation 
definition persistence complex persistence complex family chain complexes chain map diagram filtered complex inclusion maps simplices persistence complex 
show portion persistence complex chain complexes expanded 
filtration index increases horizontally right chain maps dimension decreases vertically bottom boundary operators definition persistence module persistence module family modules homomorphisms example homology persistence complex persistence module simply maps homology class contains 
definition finite type persistence complex persistence module finite type component complex module finitely generated module maps respectively isomorphisms integer complex finite generates persistence complex finite type homology persistence module finite type 
showed complexes arise practice 
correspondence suppose persistence module ring equip standard grading define graded module module structure simply sum structures individual components action 

simply shifts elements module gradation 
theorem correspondence correspondence defines equivalence categories category persistence modules finite type category finitely generated non negatively graded modules 
proof rees theory commutative algebra 
intuitively building single structure contains complexes filtration 
computing direct sum complexes arriving larger space graded filtration ordering 
remember time simplex enters polynomial coefficient 
instance simplex enters filtration time 
shift simplex grading multiply simplex exists time exists time time 
key idea filtration ordering encoded coefficient polynomial ring 
utilize coefficients section derive persistence algorithm reduction scheme section 
decomposition correspondence established theorem suggests nonexistence simple classifications persistence modules ground ring field known commutative algebra classification modules extremely complicated 
possible assign interesting invariants modules simple classification available available 
hand correspondence gives simple decomposition ground ring field graded ring pid graded ideals homogeneous form structure module described sum theorem 
wish parametrize isomorphism classes modules suitable objects 
definition interval interval ordered pair 
associate graded module set intervals bijection define interval 
course 
set intervals 
define 
correspondence may restated follows 
corollary correspondence defines bijection finite sets intervals finitely generated graded modules graded ring 
consequently isomorphism classes persistence modules finite type bijective correspondence finite sets intervals 
interpretation proceeding recap far relate prior results 
recall input filtered complex interested kth homology 
dimension homology complex vector space field described fully rank need choose compatible bases filtration order compute persistent homology entire filtration 
form persistence module corresponding direct sum vector spaces 
structure theorem states basis exists module provides compatible bases vector spaces 
particular interval describes basis element homology vector spaces starting time time 
element cycle completed time forming new homology class 
remains non bounding time time joins boundary group intervals discussed precisely called intervals utilized describe persistent homology 
component homology groups torsion persistence appears torsional free elements persistence module 
interpretation allows ask basis element persistent groups recall equation 
know inequalities define triangular region index persistence plane drawn 
region gives values cycle basis element words just shown direct proof triangle lemma restate different form 
lemma set triangles defined intervals dimensional persistence module 
rank number triangles containing point 
consequently computing persistent homology field equivalent finding corresponding set intervals 
index 
inequalities define triangular region index persistence plane 
region defines cycle basis element homology vector space 
algorithm fields section devise algorithm computing persistent homology field 
theoretical development section approach simple simplify standard reduction algorithm properties persistence module 
arguments give algorithm computing intervals filtered complex directly field need constructing persistence module 
algorithm generalized version pairing algorithm shown 
derivation small filtration running example compute field 
persistence module corresponds module correspondence established theorem 
table reviews degrees simplices filtration homogeneous elements module 
ab bc cd ad ac abc acd table 
degree simplices filtration section represent homogeneous bases respectively 
relative homogeneous bases representation basic property deg deg deg denotes element location 
get ab bc cd ad ac example 
reader may verify equation example intuition deg ad deg table 
clearly standard bases chain groups homogeneous 
need represent relative standard basis homogeneous basis reduce matrix read description discussion section 
compute representations inductively dimension 
base case trivial 
standard basis may representing assume matrix representation relative standard basis homogeneous basis induction need compute homogeneous basis represent relative computed basis 
sorting basis reverse degree order done matrix equation 
transform form lower staircase form shown 
steps variable height width equal non zero elements may occur beneath staircase 
boxed value pivot row column pivot called 

column echelon form 
indicates non zero value pivots boxed 
pivot row column 
linear algebra know rank rank number pivots echelon form 
basis elements corresponding non pivot columns form desired basis example cd bc ab ad cd bc ab ac bc ab form homogeneous basis procedure arrives echelon form gaussian elimination columns utilizing elementary column operations types 
starting left column eliminate non zero entries occurring pivot rows order increasing row 
eliminate entry elementary column operation type maintains homogeneity basis matrix elements 
continue arrive zero column find new pivot 
needed perform column exchange type reorder columns appropriately 
lemma echelon form pivots form diagonal elements normal form 
degree basis elements pivot rows forms 
proof sort degree row basis elements monotonically decreasing top row 
fixed column deg constant equation deg degree elements column monotonically increasing row 
may eliminate nonzero elements pivots row operations change pivot elements degrees row basis elements 
place matrix diagonal form row column swaps 
lemma states interested degree basis elements may read echelon form directly 
may corollary standard structure theorem obtain description 
corollary column echelon form relative bases respectively 
row pivot contributes deg description contributes deg 
equivalently get deg deg deg respectively intervals example equation 
deg element contributes interval description 
unchanged elementary operations 
mk reduced echelon form mk column operations corresponding row operations zero rows mk correspond pivot columns mk wish represent terms basis computed standard matrix representation shown 
furthermore relationship unchanged elementary operations 
domain codomain elementary column operations transform echelon form give corresponding row operations row operations zero rows correspond non zero pivot columns give representation relative basis just computed precisely 
get hardly 
lemma basis change represent relative standard basis basis computed simply delete rows correspond pivot columns proof elementary column operations types variant gaussian elimination 
changes values matrix 
suppose replace column column column order eliminate element pivot row shown 
operation amounts replacing column basis element qe effect replacement row basis need replace row row row 
row eventually shown rows changed operation 
need row operations 
simply eliminate rows corresponding pivot columns dimension lower get desired representation terms basis completes induction 
example standard matrix representation abc acd ac ad cd bc ab get representation terms basis computed earlier simply eliminate bottom rows 
rows associated pivots equation 
get abc acd replaced ad ac corresponding basis elements ad bc cd ab ac bc ab 
algorithm discussion gives algorithm computing intervals module field turns simulate algorithm field need computing module 
significant observations derivation algorithm 
lemma guarantees eliminate pivots order decreasing degree may read entire description echelon form need reduce normal form 
second lemma tells simply noting pivot columns dimension eliminating corresponding rows dimension get required basis change 
need column operations procedure need matrix representation 
represent boundary operators set boundary chains corresponding columns abc acd ad cd bc ab ad ac ac 
data structure running algorithm filtration 
marked simplices bold italic 
matrix 
representation column exchanges type meaning operation need type 
data structure array slot simplex filtration shown example 
simplex gets slot table 
indexing need full ordering simplices complete partial order defined degree simplex sorting simplices dimension breaking remaining ties arbitrarily implicitly matrix representation 
need ability mark simplices indicate non pivot columns 
computing homology dimension independently compute homology dimensions incrementally concurrently 
algorithm shown stores list intervals dim mark dim store deg deg marked empty dim deg 
algorithm processes complex simplices 
stores sets intervals dimension lk simplex added check procedure see boundary chain corresponds zero pivot column 
chain empty corresponds zero column chain dim remove unmarked terms empty break coefficient return 
algorithm eliminates rows marked corresponding basis zk eliminates terms pivot rows 
mark column basis element corresponding row eliminated dimension 
chain corresponds pivot column term maximum index pivot procedure described module 
store index chain representing column 
applying corollary get interval deg deg 
continue exhaust filtration 
perform pass filtration search infinite intervals marked simplices slot empty 
give function 
initially function computes boundary chain simplex 
applies lemma eliminating terms involving unmarked simplices get representation terms basis rest procedure gaussian elimination order decreasing degree dictated discussion module 
term maximum index max potential pivot 
non empty pivot exists row inverse coefficient eliminate row chain 
pivot chain pivot column 
example filtration marked simplices simplices ad ac generate intervals respectively 
discussion derivation clear algorithm running time gaussian elimination fields 
takes worst case number simplices filtration 
algorithm simple represents matrices efficiently 
preliminary experiments seen linear time behavior algorithm 
algorithm pids correspondence established section eliminates hope simple classification persistent groups rings fields 
may interested computation 
section give algorithm compute persistent homology groups filtered complex fixed algorithm provide computes persistent homology pid coefficients utilizing reduction algorithm ring 
compute persistent group need obtain description numerator denominator quotient group equation 
know characterize numerator 
simply reduce standard matrix representation reduction algorithm 
denominator plays role boundary group equation 
reducing matrix need reduce alternate matrix describes boundary group 
obtain matrix follows reduce matrix normal form obtain basis fact ii section 
may merge computation numerator 
reduce matrix normal form obtain basis fact iii section 
columns matrix consist basis elements bases just computed respective submatrices defined bases 
reduce normal form find basis null space 
obtain basis fact ii 
vectors coefficients respectively 
note nu definition 
words element belongs span bases 
bases form matrix 
reduce normal form read torsion coefficients rank clear procedure computing persistent groups correctly giving 
theorem coefficients pid persistent homology groups computable order time space computing homology groups 
experiments section discuss experiments implementation persistence algorithm arbitrary fields 
aim elucidate contributions 
look scenarios previous algorithm applicable algorithm succeeds providing information topological space 
implementation implemented field algorithm prime coefficients 
implementation utilizes gnu mp multi precision library exact computation 
separate implementation coefficients computation greatly simplified field 
coefficients need orienting simplices maintaining coefficients 
chain simply list simplices coefficient 
simplex inverse reducing group operation symmetric difference sum chains 
ghz pentium dell pc gb ram running red hat linux computing timings 
data algorithm requires persistence complex input 
discussed persistence complexes arise naturally practice 
example discussed generating persistence complexes excursion sets morse functions manifolds 
implemented general framework computing complexes type 
emphasize persistence software processes persistence complexes origin 
framework takes tuple input produces persistence complex output 
dimensional simplicial complex underlying manifold 
vert discrete function vertices extend linearly remaining simplices function acts morse function manifold need morse purposes 
frequently complex augmented map embeds manifold euclidean space 
algorithm require computation provided discrete map vertices extended linearly 
example displays triangulated klein bottle immersed dataset table gives number simplices euler characteristic morse function compute excursion set filtration dataset 
table gives information resulting filtrations 

wire frame visualization dataset immersed triangulated klein bottle triangles 
len filt pers table 
filtrations 
number simplices filtration jkj length filtration number distinct values function time compute filtration time compute persistence coefficients 
field coefficients contribution generalization persistence algorithm arbitrary fields 
contribution important manifold study contains torsion 
clear compute homology klein bottle persistence algorithm 
interested betti numbers final complex filtration illustrative purposes 
non klein bottle visible 
change triangle orientation parametrization boundary leads rendering artifact sets triangles front facing 
homology non klein bottle manifests torsional cycle boundary bounds surface 
homology groups 
number simplices table 
datasets 
klein bottle shown 
potential electrostatic charges 
supersonic jet flow 
time table 
field coefficients 
betti numbers computed field time persistence algorithm 
separate implementation coefficients 
note rank 
height function morse function generate filtration table 
compute homology dataset field coefficients algorithm shown table 
get homology unable recognize torsional boundary coefficients 
observes additional class homology cycles 
euler poincare relation get class cycles compensate increase 
homology klein bottle torus 
field homology turns torsional cycle boundary inverse exists 
words observe torsion computing homology fields deduce existence comparing results different coefficient sets 
similarly compare sets intervals different computations discover torsion persistence complex 
note algorithm performance dataset arbitrary finite fields coefficients get large 
computation takes twice time space rational represented integers gnu mp 
higher dimensions second contribution extension persistence algorithm complexes arbitrary dimensions 
utilized capability computing homology klein bottle 
examine performance algorithm higher dimensions 
practical motivation large scale time varying volume data input 
advances data acquisition systems computing technologies resulted generation massive sets measured simulated data 
datasets usually contain time evolution physical variables temperature pressure flow velocity sample points space 
goal identify localize significant phenomena data 
propose persistence significance measure 
underlying space datasets space time manifold 
dataset triangulate convex hull samples get triangulation 
complex listed table homeomorphic dimensional ball 
dataset contains potential electrostatic charges vertex 
dataset records supersonic flow velocity jet engine 
values morse functions generate filtrations 
compute persistence coefficients get betti numbers 
give filtration sizes timings table 
displays dataset observe large number dimensional cycles voids codimension 
persistence allows decompose graph set intervals 
intervals dimension empty topological attribute created destroyed function level 
draw non empty intervals 
note intervals represent compact general shape descriptor arbitrary spaces 

graph dataset flow velocity 

non empty intervals dataset dimension 
amalgamation intervals gives graph 
large data sets compute persistence alternate fields computation requires excess gigabytes memory 
case finite fields may restrict prime computation fits integer 
reasonable restriction modern machines bit integers implies 
restriction coefficient representable byte integer 
gnu mp exact integer format hand requires bytes representing integer 
believe important contribution reinterpretation persistent homology classical framework algebraic topology 
interpretation allows 
establish correspondence fully describes structure persistent homology field previous result 
relate previous algorithm classic reduction algorithm extending arbitrary fields arbitrary dimensional complexes just previous result 
provide implementations algorithm fields show perform quite large datasets 
give algorithm computing persistent homology group fixed parameters arbitrary pids 
software dimensional complexes enables analyze arbitrary dimensional point cloud data derived spaces 
current project uses implementation feature recognition novel algebraic method 
project analyzes topological structures high dimensional data set derived natural images 
applies persistence derived spaces arrive compact shape descriptors geometric objects 
theoretical include examining invariants persistent homology non fields defining multivariate persistence persistence dimension 
example tracking morse function density sampling manifold 
reimplemented algorithm generic paradigm 
implementation soon part cgal library 
acknowledgments author herbert edelsbrunner john discussions homology leo guibas providing support encouragement 
authors anne collins thorough review manuscript providing simplicial complexes datasets original data part advanced visualization technology center data repository appears courtesy andrea laboratory astrophysics space research university chicago 
rendered stanford graphics lab 
basu bounding betti numbers computing euler characteristic semi algebraic sets 
discrete comput 
geom 

carlsson carlsson de silva algebraic topological method feature identification 
manuscript 
carlsson collins guibas persistence barcodes shapes 
appear proc 
symp 
geom 
process 
cgal 
computational geometry algorithms library 
www cgal org 
collins carlsson guibas barcode shape descriptor curve point cloud data 
appear proc 
symp 
pointbased graph 
cox little shea ideals varieties algorithms second ed 
springer verlag new york ny 
de silva carlsson topological estimation witness complexes 
appear proc 
symp 
point graph 
donald chang complexity computing homology type triangulation 
proc 
nd ann 
ieee sympos 
comput 
sci 
pp 

dumas saunders computing simplicial homology efficient smith normal form algorithms 
proc 
integration algebra geometry software systems 
published 
foote algebra 
john wiley sons new york ny 
edelsbrunner topological persistence simplification 
discrete comput 
geom 

commutative algebra view algebraic theory 
springer new york ny 
friedman computing betti numbers combinatorial laplacians 
proc 
th ann 
acm sympos 
theory comput 
pp 

granlund gnu multiple precision arithmetic library 
www com gmp 
hyperbolic groups 
essays group theory ed 
springer verlag new york ny pp 

elements algebraic topology 
addison wesley reading ma 
uhlig transform linear algebra 
prentice hall upper saddle river nj 
computing comprehending topology persistence hierarchical morse complexes 
phd thesis university illinois urbanachampaign 

