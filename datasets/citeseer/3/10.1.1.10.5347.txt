user centred approach functions excel simon peyton jones microsoft research cambridge simonpj microsoft com describe extensions excel spreadsheet integrate userdefined functions spreadsheet grid treating bolt 
objective bring benefits additional programming language features system recognised programming language 
second project involving evolution established language compatibility previous versions major issue maintaining compatibility second objective 
third important commercial success spreadsheets largely due fact people find usable programming languages programming tasks 
third objective resulting constraints maintain usability advantage 
simply making excel conventional programming language meet objectives constraints 
taken approach design emphasises cognitive requirements user primary design criterion 
analytic approach demonstrate project developments study programming usability including cognitive dimensions notations attention investment model abstraction 
believe approach applicable design extension programming languages environments 
categories subject descriptors programming languages language classifications functional languages programming languages language constructs features procedures functions subroutines models principles user machine systems general terms languages design appear international conference functional programming icfp uppsala th june alan blackwell cambridge university alan blackwell cl cam ac uk margaret burnett oregon state university burnett cs orst edu people programming language choice spreadsheet 
especially true people employed programmers write programs defined user programmers nar 
user programmer teacher engineer physicist secretary manager fact trained programmer 
people computers get job done interested programming se 
user programmers outnumber professional programmers numbers projected increase rapidly fact number user programmers expected reach compared professional programmers bab 
facts suggest spreadsheet widely commercially successful user programming language particularly significant target broader application programming language design principles 
may odd describe spreadsheet programming language 
great merits spreadsheets users need think doing programming functional programming simply write formulae build model 
imagine printing cells spreadsheet textual form plainly functional program 
thought programming language spreadsheet strange 
particular completely flat functions apart built ones 
entire program single flat collection equations form variable formula 
amazingly users spreadsheets build extremely elaborate models thousands cells formulae 
elaborate models constructed part reusing formulae cells cells clever spreadsheet copy techniques 
programming language point view spreadsheets lack fundamental mechanism control complexity ability define re usable abstractions 
effect deny user programmers powerful weapon 
imagine programming procedures clever editor copy paste technology 
describe possible extension excel supports user defined functions section 
turns support functions closely associated better support vectors matrices class values discuss section 
basic idea simple 
propose functions defined terms formulae contained specified part spreadsheet 
function signature defined allocating subset cells function parameters 
main contribution user defined function idea se large amount detailed design required integrate new view spreadsheet behaviour existing product continued survival depends genuine usefulness humans 
focus users professional programmers usability fundamental concern consciously guided research human computer interaction 
specific design shows principles drawn hci research applied design programming environments concrete practical way 
important ultimate goal programming technology people productive documented examples hard find 
hope may serve remind functional programming community large ignored group functional programmers users 
highly expressive programming particularly important group functional languages especially relevant 
active discussion excel developers possibility including user defined functions version excel 
progress discussions encouraging ultimately succeed endeavour course uncertain 
user centred approach language design despite deficiencies spreadsheets considered programming languages clear commercial success people find useful usable 
true extent traditional programming language 

contributing factor may programming languages channel communication people computers programming language research devoted computer channel 
comparatively little research considers people programming nc 
belief programming language design projects adopt approach order maintain sharp focus people intended benefit new language features environments created 
approach adopted extending spreadsheet capabilities 
groundwork project comes specialised research psychology programming empirical studies programmers bg cw dp gpb 
hard programming language designer find practically useful guidance research 
individual studies fields experimental investigations relatively constrained contexts points syntax hard find empirical evidence usefully informs design decisions new languages 
furthermore theoretical generalizations tend emphasise cognitive theories problem solving readily applicable programming language designers 
address problem hci researchers developed structured approaches considering human issues programming 
single cognitive dimensions attention investment successfully programming language environment design projects bbc 
sub sections briefly review frameworks 
abstraction gradient minimum maximum levels abstraction 
fragments encapsulated 
consistency language learnt rest inferred 
error proneness design notation induce careless mistakes 
hidden dependencies premature commitment progressive evaluation dependency overtly indicated directions 
indication perceptual symbolic 
programmers decisions information need 
partially complete program executed obtain feedback am doing 
reader see component program relates 
viscosity effort required perform single change 
visibility part code simultaneously visible assuming large display possible compare parts side 
code dispersed possible know order read 

cognitive dimensions gp cognitive dimensions cognitive dimensions notations cds framework knowledge psychology programming form help non psychologists assess usability design time gp bg :10.1.1.22.1477
cds language design rules provide vocabulary enumerates concepts important human problem solvers engaged programming tasks 
cds express concepts familiar language designers informal way 
result may obvious informally familiar design concerns easily forgotten attempting maximize properties conciseness 
benefit cds lies having explicit list design attributes summarizing empirical evidence programming language environment attributes important human problem solving checked referred design project 
design guided cds framework design process 
example cd consistency 
language designers know generally consistency thing consistency dimension concept expressing question language learnt rest inferred gp :10.1.1.22.1477
expressed way consistency dimension point particularly relevant project key users likelihood successfully user defined functions spreadsheets 
example viscosity amount effort required small change information structure 
example language lacks procedural functional abstraction highly viscous code repeated 
means changing code takes repeated locations changed 
summarises cds 
formative fact way inform design shape raising warnings design decision potentially odds research cognitive principles programming 
course cognitive dimensions prove problems remain 
eventually complementary devices aimed summative fact evaluation empirical studies needed 
attention investment attention investment model abstraction analyses actions taken programmer terms investments attentional effort bla 
idea 
programmers finite supply time spend concentrating attention invest 
invest effort activities expected payoff exceeds cost risk great 
cost investment amount attention user devoted accomplishing task 
expected payoff investment saving attentional effort achieving formulation reduce amount effort required cope similar problems 
perceived risk extent user believes investment produce payoff lead costs apparent 
simple investment model applied multiple levels granularity model actions decisions programming tasks 
model validated cognitive simulation programmer behaviour fine grain decisions bla evidence effective practical language design bb bbc 
cds framework language designers intuitive understanding issues 
model value making psychological concerns explicit analyse justify design decisions 
intellectual tool language designers strength attention investment model generality allows provide insights produced specific cd framework 
hand concrete enumeration issues cds prescriptive specific problems consider provides sharper questions language designers 
reason consider approaches complementary intellectual tools described 
user centred case functions goal extend excel making easier users define re libraries domain specific functions 
idea place 
spreadsheets evolved number years status quo near optimum 
section case user defined functions language attention investment consider potential payoffs costs human productivity standpoint 
payoffs 
users invest effort foresee reasonable payoff 
consider potential actual payoffs 
target audience perceive payoffs discussed relevant sections follow 
programming language folk hard see actual payoffs user defined functions avoid repetition 
suppose user repeatedly types formula blanks zero values 
repeated tiresome 
worse user wants formula sum duplicated formula 
user defined functions enable identify name re code blank zero blank zero sum 
reduce errors maintenance 
excel encourages paste complex formulae copied formula modified places copied updated error prone see 
named function encapsulates formula protecting source risk 
reduces user attentional cost reducing viscosity resistance change encapsulated formula needs changed place 
interview auditor major accounting firm revealed considers problems error proneness quite severe remind years checking literally hundreds business critical models team failed find errors real estate management 
function call takes cell invoke function definition spans cells 
provides natural way save real estate invoking sheet 
real estate management clearly important practice excel great deal support hiding rows columns collapsing groups 
encapsulate re domain specific expertise 
user defined functions directly support re 
local domain experts create libraries functions tailored particular application context re colleagues 
interview customer revealed high potential ascribed benefit crack ability reuse blocks code immensely valuable spreadsheet curb repetition spreadsheets form standard libraries intellectual property protection 
function bodies manifest 
user defined functions provide easy way encapsulate distribute intellectual property 
performance 
scenes function represented expression tree compiled byte code machine code substantial performance benefits 
interviews revealed certain important user groups notably finance performance critical 
generally goal simply provide users complexity management tools take granted professional programmers 
costs 
user defined functions fact available excel need define function visual basic trouble earlier versions excel supported user defined functions called macros confused excel currently calls macro 
macros looked superficially familiar visual basic spreadsheet user macro code laid grid cells 
semantics grid different ordinary worksheet fact imperative programming language sequential evaluation program counter excel formula language sublanguage 
attention investment cost high albeit high learning visual basic 
fact macros available right click worksheet tab select insert pick excel macro sheet documented encouraged 
cost terms attention investment high 
programming paradigm different imperative declarative notation different block text grid cells programming environment different complex visual studio debugging model different accessible debugging excel means looking values continuously displayed intermediate cells debugging visual basic means managing visual studio debugger 
differences lead high learning costs 
meetings excel users contributed insights additional costs real world excel opportunity package oft repeated calculations visual basic functions 
proposing preferred 
advantage performance vb functions slow 
vb functions break audit trail behaviour determined parameters retrieve data cells parameter list 
debugging vb functions requires programming skills requires standard skills costs hardly surprising users investment 
costs vs payoffs target audience design lowers total costs zero 
order understand costs design necessary identify learning cost elements zero prerequisite skill set expected intended audience 
prerequisite asset barrier designers build design features prerequisites people prerequisites expected succeed tasks require prerequisites 
design prerequisites users comfortable variety built functions just infix operators comfortable excel copy paste replicate operations formula systematically altered suit new location able worksheet third items provide scaffolding approach rests 
second item tied increasing attention payoff item long term maintenance costs users current procedures reduced 
people excel managing printing list information 
know simple formulae sum 
design little offer groups payoff approximately zero lower learning costs prerequisites 
primary target audience moderate users understand spreadsheet paradigm fairly thoroughly 
mastered prerequisites tackle ambitious long lived applications group payoff greater 
advanced users benefit 
advanced users understand visual basic write functions call excel formulae 
design valuable enables accomplish lower cost lower risk tasks previously required visual basic 
excel file contains consists worksheets columns arbitrary number rows 
multiple worksheets easier avoid logically separate computations bumping 

function instance sheet bottom invocation site top user defined functions excel user defined functions added excel 
section show cds model attention investment revealed answers number language design issues arose attempting answer question 
applying consistency cd recall consistency cd expressed language learnt rest inferred target audience prerequisite skills enumerated section able infer low cost way learning create view modify userdefined function applying consistency cd critical 
applied establishing ground rule key distinguishing feature design relative alternatives 
discuss related section 
implementation function defined spreadsheet computational paradigm understood target audience 
keeping ground rule design function implementation worksheet call function instance sheet just function instance short 
prerequisites list section established target users bring table understanding idea multiple worksheets worksheets linked writing formula worksheet refers cell 
consistent prerequisites design function sheet look behave linked worksheet 
shows example 
upper worksheet ordinary worksheet 
cell contains invocation user defined function converts temperatures fahrenheit 
implementation function instance sheet shown input parameter lands cell function instance cell contains intermediate value final result computed 
fact contains input result specified interface panel appears bottom function instance excel facilities show multiple worksheets 
defines external interface function 
notice input cell contains formula sheet explicit function instance gets input excel existing notation cross sheet links 
cells contain commentary written user 
clear user defined functions spreadsheets appearance 
consistency cd clear evaluate spreadsheets 
values continuously calculated displayed 
user changes value calling sheet new result invocation calculated displayed values cell sheet updated new values 
similarly change sheet immediately reflected re calculation 
maintain consistency worksheets function instance sheets contain formatting funny column widths fancy borders charts may help looking internals function 
short underlying principle design choice consistency way possible function instance sheets worksheets 
consistency helps align users perceived costs risks functions actual costs risks 
example function sheet immediate recalculation sends visual message user sheets ordinary worksheets user accustomed 
consistency built functions user defined function exactly status built function defined 
example excel existing function entry wizard little fx button left formula bar pops menu possible functions organised category chosen second dialogue pops box parameter name accompanying summary function 
design works user defined functions built ins 
consistency cd imply recursive functions dear hearts functional programmers 
recursion sense spreadsheet paradigm bad useful mainstream functional languages absence algebraic data types inductive type integers iterate integers arrays apl section recursion threaten consistency linked worksheet model number linked worksheets data dependent 
lastly recursion leads deeper invocation stacks translates function sheets potentially cluttering workspace element adds little new information human problem solver 
excel supports dangerous form iteration circular formulae 
sort recursion utterly breaks excel basic functional paradigm recalculation sweep computes fresh iteration value cell changes time 
proposals technique safer 
short recursion threatens consistency potentially adds attention investment costs adding corresponding payoffs 
reasons design chose support recursive user defined functions decision taken lightly conscious prioritisation usability generality 
visibility issues role expressiveness hidden dependencies cds influences design choices seen 
excel nice job expressing cell role calculation color coded rectangles extend technique clear roles actual formal parameters return value 
hidden dependencies dependency overtly indicated directions issue commercial version excel presence linked worksheets dataflow arrows spreadsheet 
design dataflow arrows connect linked worksheets shown 
shows devices explicit role new function relative worksheets 
visibility cd emphasizes importance part program simultaneously visible assuming large display 
side side aspect discussed gp brings importance human problem solvers able display related items side side :10.1.1.22.1477
cells values formulae clearly related design possible view formulae values side side shown 
visibility aspect cd design allow display formulae values simultaneously visible cells just cell time 
excel currently allows viewing cells values cell formula cells formulae cell value formula displayed separate window pane away values 
applying premature commitment cd programming languages professional programmers programmers realize want define function define function invoke function 
step occur step occur step 
target audience necessarily possess knowledge tells define user defined function recall prerequisites list prior experience user defined functions 
design required sequence ignoring premature commitment cd warns requiring audience decision information 
cd clear sequence followed target audience design support sequence require premature commitment 
sequence support user written code formulae works user decides code needs reused repeated user discovers low cost low risk way reuse existing code user defined functions user acts discovery converting existing code userdefined function automatically invoked sensible existing code 
user create recursive function accident 
formula edits user attempts enter recursive mutually recursive formula system attempt compute answer 
process doing system re invokes function name computing reject newly entered formula 
support sequence allow user start code written ways start formula single cell start existing ordinary worksheet range cells 
note case requires user know advance going create function provide ways take far encapsulate 
create function formula single cell user brings cell property menu right click selects function formula 
action creates new function sheet displayed second window 
user actual cost low right click pop property menu select option 
users encounter option reasons pop cell property menu 
risk losing invested effort creating previous formula low answer cell remains 
wording menu option deliberately chosen non destructive attempt communicate low risk fact ellipses sub menus attempts communicate low cost 
creating new function system automatically guesses number order parameters formula replaces original formula invocation new function name provisionally just 
number order parameters necessarily guess example formula parameters just 
just parameter 
system reasonable guess way sure 
case user readily fix guess editing interface section 
way create function larger portion existing worksheet 
user selects range cells selects copy function 
original range left unchanged copied new function sheet 
system guesses inputs outputs time dependencies range user edits result 
initially invocation new function 
consistency cd arises time opposition concepts attention investment 
clearly consistent design generating function range cells copy leaves original unchanged invoke new function generating function single cell replaces original formula call new function 
user perception cost risk adversely affected entire range cells formulae disappear replaced single call sheet 
likelihood correctness system guesses inputs outputs lower means user patch cell relationships having original version compare 
undo button rescue user functions wrong functions costly simply easy user decide go forward functions 
essence cost consistency high case terms user attention cost possible perception risk involved functions 
applying abstraction gradient cd programming languages accustomed distinguishing function definition see editor function invocation see debugger transient contents stack frame 
function definition sense include actual data specific instance invocation 
means writing function programmers model heads actual data function invoked 
modeling process additional attention cost bla causes problems users working functions languages 
cognitive challenges described cd abstraction gradient 
contrast involves definition invocation distinction 
function shown definition actual instance function invoked 
function instance populated live data originating specific invocation site cell function called name actual invoking cell interface panel 
invocations conceptually copies worksheet layout formulae populated different data 
thing definition sheet function function instance populated data 
means user immediately see effect change set concrete data 
feature analogous object oriented prototype instance model functional equivalent class defined prototype object additional copies instances 
best known language model self 
prototype instance paradigm function instances reduces user attention cost reducing abstraction gradient 
user experience function instances similar linked worksheets bringing benefits low learning cost consistency raises interesting design questions thousands invocations function avoid overwhelming user thousands worksheets section 
function instances displayed edit function definition section 
implications debugging functions section 
managing visibility costs design greatly increases amount kind logic visible worksheets increased visibility comes increased attention cost managing display 
example function instance displayed worksheet may great worksheets active 
user see just ones wants 
excel display multiple windows simultaneously inside excel frame 
window excel displays worksheet time 
user select worksheet displayed window clicking sheet named tab 
example shows window display different sheet selected 
obvious model named tab function instance meant worksheets leads immediate problems 
just bit copy paste easy create thousands function invocations 
second subtly hard name function instances concrete terms display function instance tab identify 
clearly name function unique name call site call site sheet naming problem function instance 
provide low cost ways user navigate sea 
function calls function function instances 
providing function instance direct link cell function instance invoked formula cell direct link function instance formula invoked direct connection instances function 
specifically invocation tree call tree function instances user navigate ways 
navigating tree 
suppose cell sheet ordinary sheet function instance formula containing invocation function foo 
user selects cell requests function instance sheet call cell response sheet appears invoking sheet 
example top sheet visible user interacted way cell screen appear shown 
navigating tree 
function instance sheet user find invocation tree sheet question answered looking function instance summary interface panel displayed bottom sheet 
says explicitly function invoked example called sheet called function foo 
case popup menu triangle appears called brings entire stack called specifications way ordinary function sheet 
selecting member stack causes displayed new window current navigating invocation tree 
local tree navigation metaphor immediate invoker displayed single click called button right clicking select show sheet foo 
link 
gives example nested function invocation showing popup menu popped sheet 
menu allows user locate particular function instance invocation tree alleviating lost hyperspace problem 
excel usual behaviour clicks tab specified worksheet replace currently displayed 
navigating call tree desirable show user function definition context time cd visibility 
design navigating tree current worksheet slides display specified function instance shown second window 
dually navigating tree current worksheet slides invoking sheet displayed 
function instances tab worksheets tab displays name function 
clicking tab brings viewed instance function front window shifting just normal tab behaviour 
effect instances particular function share single tab 
jumping tree 
user wants explore part invocation tree 
parts involve different functions just click tab appropriate function 
wants see side side excel fine existing support adding new windows 
parts involve different instances function matters clear tab function 
deal case adding drop menu function tab gives access visited instances function identified albeit ambiguously immediate call site 
applying hidden dependencies cd hidden dependencies cd rises particular importance consider issue change 
cd calls attention danger unintended consequences users changes full awareness dependencies involved 
hidden dependencies cd suggests way head problems dependencies explicit 
section show design acts suggestion change situations changing function implementation changing function interface 
consider changes function implementation 
obviously way user edits function implementation simply change cells function instances happens instances 
recall master copy function worksheet simply instance equal instances 
recurrent appointment electronic diary tries modify pop dialogue box shows saying want alter just appointment series design function editing works way 
user tries modify function instance pop box asks wants modify invocations function way default wants create special purpose copy function particular invocation 
invocation function common case developing function modify question asked 
asking potential ambiguity alt tab display windows operating system offers rapid ambiguous navigation running applications 
user explicitly intends global change draws attention gives control dependencies impacted change 
user asks modify invocations function function instance open especially multiple instance editing visual feedback effect question asked repeatedly greatly raise attention costs 
user asks modify just current invocation function automatically renamed genuinely new function distinct original 
second consider changes function interface example add parameter change name function 
user mechanics straightforward edit button interface panel allows interface edited bringing dialogue box shows complete interface includes function name information parameter devices add remove parameters documentation help text system respond function existing invocations straightforward 
user changed function name order parameters system response simply change invocation site 
deleting parameter way 
adding parameter problematic heuristics needed wrong guesses invisibly introduce bugs user realizing extent changes multiple locations including locations visible screen 
occurrence greatly increase user costs perception risk 
avoid problem case adding parameters invocation sites flagged broken foo foo 
approach useful broken instances easy user find 
excel way select visit cells certain properties holding error value holding boolean formula 
design technique find cells broken invocations cells invoke particular function 
invocations get fixed invoke non existent functions wrong number parameters result error values excel equivalent raising exceptions 
exceptions explicitly inform user dependencies requiring attention due interface changes 
applying progressive evaluation cd programming languages particular function invocation may exist execution program 
considerable planning corresponding attention cost may required halt program state exhibits fault reveals merely different earlier program state captured 
cd known progressive evaluation points way solution avoids costs automatically reflect incrementally specific values visible function instance resulting formula edit 
progressive evaluation cd describes incrementality research shows critical importance novice users gp :10.1.1.22.1477
design debugging functions kind debugging spreadsheets activity soon code building process begins program incomplete 
half complete functions contain live data continuously kept date 
obviously quite conventional debuggers notion stepping forward setting breakpoints programming model simply static tree linked worksheets facility known edit goto special 
active date 
example user wonder invocation gives result look intermediate values displayed instance call 
example illustrates design live data function instance persistent entire invocation tree persistent user view number function instances tree simultaneously 
generally term invocation call avoids today implications term 
example shows window view showing entire invocation tree small program 
absence recursion facilitates navigation invocation tree structure depend input data repetition expressed matrix operations section clutter invocation tree recursion 
debugging functional programs received quite bit attention programming language community strict languages lie fff ta lazy ones ho nil sr 
proceed working backwards erroneous result algorithmic debugging forward allowing user step redexes identifies 
efforts program fragments original source form 
debugging model different flavour mode change writing modifying program debugging 
changes source immediately reflected changes execution 
intermediate value readily accessible surrounded comments related values context programmer originally wrote 
integration debugging programming complete users may regard separate activity 
integration helps align perceived costs working userdefined functions actual costs 
progressive evaluation mean spreadsheets correct programs 
research surveyed pan shown spreadsheets typically errors users wildly estimate reliability spreadsheet models 
approaches proposed help address problems dav approaches directly applicable context excel functions 
matrix values spreadsheets may obvious need matrix type spreadsheet 
spreadsheet clearly visual representation matrix conventional way spreadsheets divide plane individual patches holding dimensional collection data values 
functions change picture consistency cd clear 
issue consistency user defined functions builtins 
consider built sum function 
takes vector matrix argument sum sum 
built functions excel take matrices arguments userdefined ones ought 
question 
consider user defined function compute sum squares elements vector 
function instance sheet input vector reside 
take row want specify function definition size vector built ins persistent user model implementation course cache recompute function instance data demand caching strategy 
accept matrices arbitrary size function matrices room unbounded matrix worksheet 
obvious solution allow input vector matrix live single cell 
values excel carry dynamic type information example strings numbers error values distinguishable 
required add extra run time type matrix 
deliberately terminology semantically oriented vector matrix implementation oriented array 
excel supports matrix values called array formulae support relies explicit size information propagation array values pointed violates consistency built functions 
design extends excel making matrices truly class citizens support consistency 
idea matrices class values rich library functions operate values apl widely languages diverse high performance fortran haskell 
trick course incorporate smoothly excel way target audience moderate users section 
ground rules cognitive dimensions consistency error proneness attention investment notions cost risk led basic design choices consistency formula matrix value 
consistency matrices dimensional keeping excel dimensional paradigm 
matrix element type including matrix offers power dimensional matrices 
consistency vector just special case matrix xn nx 
means horizontal vectors vertical vectors consistent users experience working rows columns spreadsheets 
error proneness cost risk excel default treating empty cells zero valued cells functions subtle differences doing kinds matrix operations matrix versus constant 
avoid risk subtle hard find errors arise define matrix scalar 
want impose user seemingly arbitrary cost turning scalars matrices 
scalar implicitly promoted matrix context matrix required 
example consider function combines matrices side bigger matrix 
formula works fine matrix simply promoted matrix 
reducing perceived costs risks working matrices user required time inclination go exploring matrix features order eventually discover matrices 
recall interest exploring new features prerequisites included defining target audience 
key design matrix values automatically created user starts creating functions 
example cell contains formula sum user uses function formula technique described section newly created function auto 
worksheet manipulates vectors 
matically vector input parameter landing input cell 
provides low cost entry point matrix values 
event occurred user perception risks involved low 
serve example discuss steps taken goal 
shows function form part teacher grading application 
takes vector marks input cell vector weights input cell computes weighted sum marks result cell 
cell contains vector result multiplying marks weights element wise 
formula sum cell adds elements vector argument sum vector 
invocation sheet shown look seen formulae input cells 
notation excel existing notation literal vector value 
key reducing perceived risk help user understand meaning current state 
dropping users state understand increase perception risk send directly undo button 
cd role expressiveness roles matrix values function explained user ways 
panel bottom shows role matrix values function 
second cell contains matrix value cells gives visual cue contents 
gives example possible cue cell contents shows values arrowhead suggesting values 
hovering mouse cell brings scrollable floating panel comment allows user examine modify value matrix 
shown 
potential risk trapped matrix risk perspective want gathering group values matrix mean propagations results values spread range cells 
example values range sheet gathered single cell 
range quite large sheet values visible scrolling floating panel 
possible translate matrix value back range cells users restricted view matrix matrix values propagated original 
uses propagations predicted clear case cd premature commitment requiring people decisions necessary information 
avoid potential risk allow matrix values spread range cells 
precisely range cells may single matrix valued formula value spread range 
example contains horizontal vector value 
spread value range cells syntax select range cells type formula 
equivalent strictly textual syntax 
value denoted formula spread selected cells 
value small unused cells blank big excess values shown accessible 
hovering mouse range cells share single formula way range highlights 
range small fit matrix value appropriate border highlighted range edge indicate non visible values 
drag handle corner resize range showing fewer elements matrix 
related approaches functions spreadsheets excel today provides user defined functions allowing user write function visual basic 
refer trapdoor approach simply exit usual language pre existing world traditional programmers 
research systems supported functions spreadsheets 
forms family discussed imperative 
examples imperative include hud action graphics hm siv crb spreadsheet images lev 
prograph similar trapdoor goes way takes trapdoor prograph spreadsheet imperatives 
mye uses semi declarative approach trapdoor lisp 
semi declarative mean declarative extent lisp notion declarative functions multiple sheets introduced forms amb 
forms language concept functions multiple sheets survived members family languages 
concept support functions multiple sheets extensively developed forms ba bad language influenced excel extension 
research systems luxury having support existing communities real world needs 
light realities introduced factors excel extensions described differ previous research number significant ways 
previous systems address creating function preexisting formula spreadsheet 
notion user explicitly define function building spreadsheet scratch 
defining functions pre existing formulae sheets critical creating gentle migration path allows legacy excel gradually transformed function time repeated code discovered 
second previous research deal important scalability issues related usability locate functions instances functions 
scalability critical point determines solutions look fine toy academic problems truly useful 
practical importance important issue design excel extension 
support forms approach functions features specifically included excel extension 
noticeable features automatic generalization function calls support recursion 
features expected importance target audience elected include 
usability techniques empirical evaluation usability study reasonably common approach evaluation new user interface designs 
research evaluations hci rely controlled experiments user performance experimental task compared alternative interfaces 
problem programming language design select suitably representative tasks reflecting scale variety potential programs created 
empirical studies address broad questions generally expensive inform design evolution value summative fact role 
intend follow standard microsoft practice conducting usability studies design brought market 
consider important reality check innovation 
empirically design 
researchers followed approach empirical studies conducted main design testing specific experimental hypotheses general measures utility 
examples approach include hands language pmm bla 
similarity philosophical emphasis human outset design process 
projects involve existing languages intended production experiments isolate factors interest evaluating contribution larger system 
means research process simpler constraints face 
research published able take advantage findings experimental studies testing aspects attention investment cognitive dimensions novel spreadsheet systems 
language design heuristics 
popular alternative expensive empirical studies heuristic evaluation nm 
summaries practice results previous research systematically compared new design order apply lessons things worked badly past 
heuristic evaluation normally applied programming languages exception manual compiled pane myers collecting usability factors programming language design pm 
concentrated factors relevant novice programmers mainly population seen suffering severely programming languages hard 
techniques briefly surveyed section concentrate evaluating improving specific features language programming environment 
case wanted approach problem principles usability concerns driving approach design common approach create cut design generic consideration user concerns target specific usability refinements empirical heuristic methods 
reason chose techniques focused cognitive needs programmers focusing aspects languages interfaces 
attention investment level addressing cognitive demands programming task 
cognitive dimensions applies demands specific ways order anticipate usability problems 
combination effective approach human issues account design programming languages 
status implementation empirical implemented demonstration concept prototypes concentrate front features described aspects user sees 
prototypes set excel macros written excel visual basic applications implements features userdefined functions matrices limited example powerpoint mock demonstrates functionality powerpoint event oriented animation features prototype macromedia director implements smaller subset features excel macro implementation larger range examples 
prototypes adequate real application experimental evaluation user interaction excel relies seamless recalculation response exploratory user action 
scenes aspects proper evaluation semantics sheet instantiation recalculation methods fully implemented forms regarded standalone prototype aspects 
forms implementation setting numerous empirical studies human subjects bad forms front aspects differ forms empirical precursor empirical studies evaluate approach described 
design process started popular limited user programming paradigm spreadsheet extended provide capabilities general purpose programming languages user defined functions matrices 
approached generic language design exercise 
example explicitly chosen support standard aspects functional paradigm recursion 
design tradeoffs give priority cognitive requirements spreadsheet users 
analytic approach taken design process developments study programming usability including cognitive dimensions notations framework attention investment model abstraction 
provide systematic description design criteria intuitively familiar usually applied ad hoc way programming language designers 
criteria establish review priorities design choices 
believe approach applicable user programmers generally difficulty learning new programming languages design extension programming languages environments professional programmers 
project unusual programming language research project extent highlights user concerns applies programming language insights product normally considered programming language 
exercise distinctive regard research programming language usability working evolve design established language practical starting scratch design new language research purposes 
believe putting human concerns forefront language design increasingly important 
ability integrate programming language principles human problem solving principles evolving established programming systems may factor differentiates successful applied programming language design research practice 
amb ambler 
forms expanding sheet languages 
workshop visual languages linkoping sweden august 
ba burnett ambler 
interactive visual data abstraction declarative visual programming language 
journal visual languages computing march 
bab boehm brown clark horowitz 
software cost ii 
prentice hall ptr upper saddle river nj 
bad margaret burnett john atwood rebecca walpole james sherry yang 
forms order visual language explore boundaries spreadsheet paradigm 
journal functional programming march 
bb af blackwell burnett 
applying attention investment user programming 
hcc hcc pages 
bbc beckwith burnett cook 
reasoning requirement relationships spreadsheets 
hcc hcc pages 
burnett cao castro atwood 
user programming time ordinary dimension grid oriented visual programming languages 
journal visual languages computing august 
bg brown gould 
experimental study people creating spreadsheets 
acm transactions office information systems 
bg af blackwell trg green 
notational systems cognitive dimensions notations framework 
jm carroll editor hci models theories frameworks interdisciplinary science 
morgan kaufmann 
bla blackwell 
see need helping users build abstractions 
journal visual languages computing october 
bla af blackwell 
steps programming rationale attention investment models 
hcc hcc pages 
crb chi riedl barry konstan konstan 
principles information visualization spreadsheets 
ieee computer graphics applications pages july 
cw wiedenbeck 
direction scope comprehension related activities procedural object oriented programmers empirical study 
international workshop program comprehension pages limerick ireland june 
dav js davis 
tools spreadsheet auditing 
international journal human computer studies 
dp joseph dumas paige parsons 
discovering way programmers think new programming environments 
communications acm june 
fff findler flanagan flatt krishnamurthi felleisen 
drscheme pedagogic programming environment scheme 
plilp pli pages 
gp trg green petre :10.1.1.22.1477
usability analysis visual programming environments cognitive dimensions framework 
journal visual languages computing 
gpb green petre bellamy 
comprehensibility visual textual programs test match mismatch conjecture 
empirical studies programmers fourth workshop new brunswick new jersey pages 
ablex december 
hcc ieee conference human centric computing languages environments arlington 
ieee computer society september 
christopher mann michael clancy 
novice programmers reuse code 
empirical studies programmers sixth workshop 
ablex 
hm hughes 
action graphics spreadsheet language animated simulation 
ichikawa korfhage editors visual languages applications pages 
plenum publishing 
ho cv hall jt donnell 
debugging sideeffect free programming environment 
proc acm symposium language issues programming environments 
acm seattle january 
hud hudson 
user interface specification enhanced spreadsheet model 
acm transactions graphics july 
takeo igarashi jock mackinlay bay wei chang zellweger 
fluid visualization spreadsheet structures 
ieee symposium visual languages halifax nova pages 
ieee september 
lev levoy 
spreadsheet images 
computer graphics 
li grundy hosking 
data mapping specification environment concrete business form metaphor 
hcc hcc pages 
lie lieberman 
steps better debugging tools lisp 
acm symposium lisp functional programming lfp pages 
acm 
mye myers 
graphical techniques spreadsheet specifying user interfaces 
acm conference human factors computing systems new orleans pages april 
nar nardi 
small matter programming perspectives user computing 
mit press cambridge ma 
nc newell sk card 
prospects psychological science human computer interaction 
human computer interaction 
nil henrik nilsson 
declarative debugging lazy functional languages 
phd thesis department computer information science link pings link ping sweden may 
nm nielsen 
heuristic evaluation user interfaces 
proceedings acm chi conference seattle pages april 
pan rr 
know spreadsheet errors 
journal user computing 
pli international symposium programming languages implementations logics programs plilp volume lecture notes computer science 
springer verlag september 
pm jf pane ba myers 
usability issues design novice programming systems 
technical report cmu cs carnegie mellon university school computer science august 
pmm pane myers miller 
hci techniques design usable programming system 
hcc hcc pages 
rothermel li burnett 
see test 
international conference software engineering kyoto pages april 
cox byrne 
expanding utility spreadsheets integration visual programming user interface objects 
advanced visual interfaces italy pages may 
sr runciman 
tracing lazy functional computations redex trails 
plilp pli 
ta ap tolmach aw appel 
debugging standard ml reverse engineering 
proc acm conference lisp functional programming nice 
acm june 
ungar smith 
self power simplicity 
acm conference object oriented programming systems languages applications oop sla pages october 
yang burnett zloof 
representation design benchmarks design time aid vpl navigable static representations 
journal visual languages computing oct dec 
