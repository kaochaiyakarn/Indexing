pre characterization free efficient power performance analysis embedded general purpose software applications presents novel approach efficient accurate estimation technique power consumption performance embedded general purpose applications 
approach adaptive nature detecting sections code characterized high temporal locality called hotspots execution profile benchmark executed target processor 
technique architecture input independent embedded general purpose processors 
implemented hybrid simulation engine significantly shorten simulation time fly profiling critical sections code reusing information power performance estimation rest code 
strategy able achieve better accuracy compared flat non adaptive sampling scheme simulation speed maximum error performance total energy wide variety media general purpose applications 
embedded portable computer systems play increasingly important role today quest achieving true ubiquitous computing 
power consumption performance direct impact success embedded high performance processors designers need efficient accurate tools evaluate efficacy software architectural innovations 
designer choice variety simulators estimate power consumption performance various levels abstraction ranging transistor architectural instruction level :10.1.1.17.3717
lowest level simulators provide detailed accurate statistics higher level simulators trade accuracy simulation speed portability 
high level simulators offer high speedup compared low level simulators time consuming may take days simulate large practical benchmarks 
time acceptable ranges research supported part nsf career award ccr 
ieee venkata diana marculescu department electrical computer engineering carnegie mellon university pittsburgh pa email vp ece cmu edu accuracy subject change refining design various stages design cycle 
desirable speed existing simulators various levels abstraction compromising accuracy 
describe strategy accelerating simulation speed significant loss accuracy 
strategy additional benefit able adapt behavior benchmark simulated 
predict power consumption performance statistics complete detailed analysis execution profile application executed pre characterization benchmark simulated 
strategy generic adopted simulator level abstraction accelerate simulation process 
prior software architecture level various schemes strategies proposed speeding power estimation process 
techniques function level power estimation energy caching proposed strategies accelerating power simulators keeping accuracy acceptable range 
functional level power estimation provide speedup cost time consuming pre characterization programs 
energy caching energy delay characteristics code segment statistics uniform entire execution code segment 
level simulation approach described estimating energy performance sufficient accuracy 
technique uses flat fixed window sampling scheme coupled program phase detection technique decides thefly detailed vs non detailed mode simulation 
approach adapt sampling window size application profile achieve better accuracy try detect finer grain changes program phase exploited better speed 
introduce hybrid simulation engine able fully adapt application behavior provide better accuracy fixed window sampling technique previously 
complements existing techniques gate rt level power estimation sequence compaction recognizing effect fine coarse grain temporal dependencies common software applications 
overview contributions main goal accelerate existing simulators predicting power performance values accurately 
scheme applied simulators various levels abstraction reduce simulation time compromising accuracy 
validate strategy baseline simulator chosen wattch framework architectural level power analysis optimizations 
wattch implemented top simplescalar tool set suite parameterizable power models 
power models wattch estimate power consumed various hardware structures cycle resource usage counts generated cycle accurate simulation 
wattch considerable speedup compared circuit level power estimation tools estimate results results generated spice 
speedup take long time simulate benchmarks practical interest 
desirable reduce simulation time trading accuracy 
wattch uses cycle statistics generated simplescalar estimate power consumed various components architecture simulated 
cycle accurate tools get sufficiently accurate statistics perform detailed simulation benchmark program cost increased simulation time 
wattch simplescalar program executed fast mode program executed correctly cycle accurate information 
strategy involves hybrid simulator capable switching detailed fast modes simulation 
rationale simulation strategy stems inherent behavior programs practical interest 
fact benchmark programs tightly coupled regions code hotspots program behaves predictable manner executing sections code high temporal locality 
program enters hotspot identify critical sections code simulated detailed mode record cycle information instructions cycle ipc energy cycle epc complete functional simulation hotspot switching fast mode 
strategy context fixed size sampling window identify shortcomings associated scheme propose truly application adaptive sampling scheme better accuracy 
scheme provides speed compared baseline cycle accurate simulation engine keeping accuracy average performance power consumption 
addition proposed approach offers superior accuracy fine grain module energy estimates compared estimation error energy performance run time profiles closely follow actual detailed profile benchmarks consideration 
organization rest organized follows section discusses hotspots behavior code inside hotspots 
describe proposed approach identifying program regularity strategy greater detail section 
practical considerations discussed section 
experimental results discuss section 
section concludes final remarks 
program behavior know common applications exhibit sections code high temporal locality 
characteristics define called hotspots collections tightly coupled basic blocks executing time 
application program enters hotspot executes basic blocks belonging hotspot rarely steps set basic blocks 
typical hotspots shown 
case code executes basic blocks hotspot significant portion total execution time starts executing hotspot program maintains high temporal locality enters hotspot due high temporal locality behaves predictable manner running inside hotspot 
hotspot hotspot 
example hotspots hotspot properties hotspots typically tight loops series instructions executed repetitively entire duration hotspot 
repetitive behavior reflected performance statistics behave 
fact inside hotspot functional units hardware blocks accessed specific repetitive pattern 
true architectures supporting order execution dynamic schedule set instructions results scheduled trace instructions inside hotspot 
hotspots create regular patterns execution profiles course execution benchmark 
due execution patterns essential cycle accurate detailed simulation entire duration hotspots 
ipc epc values sampling window predict behavior program 
exploit feature program execution behavior order accelerate micro architectural simulation 
section describe metrics interest obtained sampling inside detected hotspots 
hotspot detection hotspots mainly characterized behavior branches inside hotspot 
hotspot detected keeping track branches encountered execution program 
keep track branches cache data structure called branch behavior buffer bbb 
branch entry bbb consisting execution counter bit candidate flag cf 
execution counter incremented time branch taken counter exceeds certain threshold case branch question marked candidate branch setting cf bit branch 
simulator maintains saturating counter called hotspot detection counter hdc keeps track candidate branches 
initially counter set maximum value case time candidate branch taken counter decremented value time branch taken incremented value hdc decrements zero hotspot 
implementation chose exiting hotspot twice slow entering 
details hotspot detection scheme 
hybrid simulation described previously common programs exhibit high temporal locality various sections code behave predictable manner inside hotspots 
strategy employ level hybrid simulation paradigm perform architectural simulation different levels abstraction different speed accuracy characteristics 
low level simulation environment perform cycle accurate simulation provide accurate metrics associated program execution 
high level simulation environment perform correct functional simulation providing cycle accurate metrics 
detailed simulation outside hotspot hotspot detected flat sampling detailed simulation hotspot lost warm period fast profiling update statistics benchmark hotspot lost detailed simulation outside hotspot hotspot detected hotspot lost metrics converge warm period hotspot matched adaptive sampling detailed simulation fast profiling update statistics benchmark hotspot lost flat scheme adaptive scheme 
hybrid simulation chosen strategy achieve considerable speedup exploiting predictable behavior inside hotspots 
employ hotspot detection strategy described determining entry exit points hotspot 
low level simulation engine code outside hotspot fraction code executed inside hotspot called sampling window high level simulation remainder hotspot 
estimate metrics entire hotspot metrics acquired detailed simulation sampling window 
time spent program inside hotspot dependent program specific input observed average fraction time spent inside detected hotspots 
accelerating simulation code inside hotspots provide considerable speedup entire benchmark 
done prevent false exits hotspot 
estimating statistics associated hotspot imperative select suitable sampling window 
describe proposed sampling techniques remainder section 
flat sampling scheme corresponds sampling strategy employed illustrated detail 
program enters hotspot fixed window instructions selected sampling window 
metrics collected window estimating metrics hotspot 
window selected skipping warm window instructions 
convergence sampling flat scheme blindly chooses fixed window size assumes window achieving convergence power performance inside hotspots various applications 
assumption far valid 
account different behaviors sampling scheme proposed 
scheme simulator starts detailed mode switched fast mode convergence 
check convergence sampling window employed 
convergence declared metrics sampled number consecutive windows instructions threshold precision convergence 
convergence satisfied window size increased process repeated 
possible ways increasing window size exponentially increasing window size 
case current window size doubled convergence condition satisfied possible window sizes 
linearly increasing window sizes 
case current window size incremented fixed size convergence condition satisfied possible window sizes 
case convergence declared metrics maintained threshold consecutive windows size exponential approach attains large window sizes smaller number iterations starts smaller window size linear approach starts 
approaches different threshold values checking convergence 
hybrid simulation strategy illustrated 
expected trade speed accuracy cases 
exponentially window size may suit applications better may happen sampling window size increasing fast fine grain program phase changes may missed 
time linearly increasing window size may prove inappropriate cases convergence achieved large window sizes 
find compromise developed adaptive sampling mechanism tries identify fine grain program phases called 
adaptive sampling hotspot detection scheme sure tightly coupled basic blocks detected ensure sequencing information maintained 
example abbc abbc adf abbc abbc adf abbc abbc adf abbc abbc adf control flow graph execution trace hotspot 
detection control flow graph set basic blocks identified part hotspot 
effect means occurrence probability blocks sufficiently high related execution counter value section 
second higher order effects related sequencing information basic blocks completely ignored 
fact effects determine slower faster increasing sampling window size 
example execution hotspot basic blocks executed sampling window size directly related values adaptive sampling scheme tries match window size run time sequencing information basic blocks 
window called 
example shown possible series candidate branches executed typical hotspot shown letter represents basic block corresponding candidate branch 
example trace abb represents repeating 
detect keeping track occurrence candidate branch 
difference consecutive occurrences candidate branch larger current window size potential declared 
window size changed new difference simulator checks window convergence 
branch occurred metrics interest epc ipc converged window size stretched accommodate new occurrence candidate branch 
process continues checking candidate branches convergence achieved hotspot ends 
practice simulator starts exponential convergence scheme 
tries achieve convergence exponential scheme encounters potential defined set instructions occurrences candidate branch 
simulator continues detection stops doubling current window size 
metrics interest converge simulator switches fast mode profiling 
detailed diagram adaptive sampling scheme shown 
identifying advantage able select right size sampling window offers additional potential speeding simulation described 
classic notations formal language theory 
practical considerations speed simulation maintain monitor table reuse information earlier visited hotspots 
monitor table similar described cache information determining current hotspot visited earlier 
monitor table consists entries corresponding unique hotspot 
unique hotspot identified unique number hsp id characteristic signature 
signature top frequently executed branches hotspot period 
signature consists addresses branches corresponding frequencies 
entry contains necessary information required estimating statistics matched hotspot 
includes average ipc epc values entire hotspot average component epc values 
required accurately determine component energy values entire benchmark 
ipc epc values recorded values simulator switches fast mode profiling adaptive sampling converges 
program enters hotspot simulator tries match current hotspot entries monitor table terms branch addresses occurrence probability 
warm period simulator stores information frequent branches hotspot tries match current hotspot hotspots monitor table 
done comparing top branches current hotspot signature hotspot entry monitor table 
monitor table entries conjunction hybrid simulation mechanism shown simulation starts detailed mode continues monitor branch behavior 
hotspot detected simulator tries match current hotspot entries monitor table initial warmup period 
current hotspot matched simulator tries find appropriate sampling window estimation various values 
window determined adaptive sampling simulator switches fast mode profiling recording necessary values estimation power performance 
simulator keeps track branch behavior hotspot lost reverts back detailed mode simulation updating global power performance metrics 
hotspot lost adaptive sampling finds required sampling window simulator waits new hotspot detected starts 
simulator finds matching hotspot directly switches fast mode profiling 
various parameters matching hotspot updating metrics current hotspot ends 
current hotspot match existing entries added new entry monitor table hotspot sampled partially completely 
entry created irrespective metrics converged adaptive sampling 
hotspots achieve convergence metrics adaptive sampling simulated fast mode encountered 
exponential linear convergence sampling compare top branches hotspot observed frequencies candidate branches close sampling period frequent branches may change different execution contexts hotspot 
speedup ipc error epc error epic zip ijpeg mpeg pegwit benchmarks speedup epic zip ijpeg mpeg pegwit benchmarks ipc error epic go gzip ijpeg mpeg pegwit benchmarks epc error flat adaptive flat adaptive flat adaptive 
results way order processors schemes similar differ way check convergence metrics 
experimental results tested hybrid simulation strategy various benchmarks single instruction issue order processors way order superscalar processor 
compared performance schemes hybrid simulation described flat sampling linear exponential window sampling adaptive sampling monitor table 
configurations order single instruction issue way order superscalar processors assume direct mapped cache way set associative cache 
case superscalar machine width pipeline number alus assumed 
addition entry register update unit ruu entry load store queue lsq considered case 
cases benchmarks specint ijpeg go specint gzip mediabench mpeg pegwit epic 
speedup ipc error epc error epic zip ijpeg mpeg pegwit benchmarks speedup epic zip ijpeg mpeg pegwit benchmarks ipc error epic zip ijpeg mpeg pegwit benchmarks epc error flat flat adaptive adaptive flat adaptive 
results way order processors assess viability proposed hybrid simulation approach set experiments considered speed accuracy energy epc performance ipc metrics set benchmarks consideration 
comparative detailed study flat adaptive sampling schemes terms module accuracy 
comparative study sampling schemes terms predicting run time profile benchmark 
show figures results accuracy speed achieved sampling schemes proposed 
linear exponential convergence schemes considered different precision thresholds exponential similar linear case 
seen flat sampling case offers highest speed expense large error cases ipc estimation case go error epc case epic run way superscalar processor 
average epc hotspots component go flat go adp epic flat epic adp rename window lsq regfile icache dcache dcache alu clock original adaptive flat table 
component power errors go inorder instructions average epc hotspots original adaptive flat epic way instructions 
comparison schemes exponential linear convergence cases outperform adaptive sampling scheme cases terms accuracy unpredictable behavior depending benchmark 
adaptive sampling scheme offers consistent low error energy performance estimates irrespective type processor considered 
said linear exponential sampling schemes showing lack adaptability application run 
worst case achieved case flat sampling scheme benchmark go case single issue order processors epic case way superscalar processors show table estimation error energy cost module 
seen adaptive sampling case denoted adp table consistently produces results away exact cycle accurate values flat sampling denoted flat table scheme generate error cases 
analyzed sampling schemes proposed track actual run time profile application run 
show estimated epc values adaptive flat sampling cases compared original results provided wattch 
seen adaptive case preserves actual run time profile better original flat sampling results 
hybrid simulation strategy accelerate microarchitectural simulation trading accuracy 
strategy detection hotspots determining exact sampling window size estimation various metrics 
features exploited simulation acceleration monitor table reusing know information 
techniques able obtain substantial speedup negligible errors ipc epc values 
proposed adaptive sampling scheme offers superior accuracy compared simpler flat sampling scheme provides module estimation error faithfully tracks run time profile application consideration 
huang zhang deng design implementation proc 
intl 
workshop low power design pp 
april 
brooks tiwari martonosi wattch framework architectural level power analysis optimizations proc 
intl 
symp 
computer architecture pp 
vancouver bc canada june 
ye vijaykrishnan kandemir irwin design simplepower cycle accurate energy estimation tool proc 
acm ieee design automation conference los angeles ca usa june 
functionality energy estimation model bit microprocessors proc 
design automation conf pp 
june 
russell software power estimation optimization high performance bit embedded processors proc 
int 
conf 
computer design pages october 
balakrishnan speeding power estimation embedded software proc 
int 
symp 
low power electronics design italy 
tiwari malik wolfe power embedded software step software power minimization ieee tran 
vlsi systems december 
tan raghunathan jha highlevel software energy macro modelling proc 
acm ieee design automation conference las vegas nevada usa june 
raghunathan dey efficient power estimation techniques system chip design proc 
design test europe pp march 
qu potkonjak function level power estimation methodology microprocessors proc 
acm ieee design automation conference los angeles ca usa june 
marculescu marculescu pedram sequence compaction power estimation theory practice ieee tran 
computer aided design integrated circuits systems july 
burger austin simplescalar tool set version computer architecture news pp 
june 
matthew andrew trick christopher george john gyllenhaal wen mei hwu hardware driven profiling scheme identifying program hot spots support runtime optimization proc 
int 
symp 
computer architecture pp 
may 
sami instruction level power estimation embedded vliw cores proc 
intl 

hardware software codesign pp 
march 
sinha chandrakasan web tool software energy profiling proc 
acm ieee design automation conference las vegas nevada usa june 
marculescu iyer application driven processor design exploration power performance trade analysis proc 
ieee acm intl 
conf 
computer aided design san jose usa nov 
