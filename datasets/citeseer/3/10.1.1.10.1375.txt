stream window join tracking moving objects sensor network databases walid aref purdue university west lafayette usa aref cs purdue edu widespread sensor networks presents revolutionary opportunities life environmental science applications 
applications involve continuous queries require tracking monitoring correlation multi sensor data represent moving objects 
propose answer queries multi way stream window join operator 
form join multisensor data cope infinite nature sensor data streams delays network transmission 
introduces class join algorithms termed join joining multiple infinite data streams 
join addresses infinite nature data streams joining stream data items lie sliding window match certain join condition 
join track motion moving object detect propagation clouds hazardous material pollution spills time sensor network environment 
describe new algorithms join address variations local global optimizations related specifying nature window constraints fulfill posed queries 
performance proposed algorithms studied experimentally prototype stream database system synthetic data streams real time series data 
tradeoffs proposed algorithms advantages disadvantages highlighted variations aggregate arrival rates input data streams desired response times query 

widespread sensor networks introduce revolutionary opportunities different disciplines life environmental sciences civil engineering 
readings collected sensors form continuous supported part national science foundation iis eia iis iis eia 
ahmed elmagarmid hewlett packard palo alto ca usa ahmed elmagarmid hp com proceedings th international conference scientific statistical database management ssdbm ieee supply streaming data 
applications monitoring tracking surveillance applications involve continuous queries infinite supply streaming data multiple sensors 
important aspect stream query processing operators non blocking process infinite amounts data 
researchers expressed interest window aggregate operations data streams window defines prefix stream 
window join processing reported practical way join multiple infinite data streams 
telegraph project suggests implementing multi way join operator referred stem handle joining multiple data streams 
approach window defined terms tuple count new tuples stream force old tuples stream expire specific count tuples 
psoup uses notion time window data streams processes window constraint similar stem approach 
addresses window join streams arriving streams different arrival rates 
authors suggest asymmetric join nested loop stream building hash table stream reduce execution cost 
approach window join evaluation quite similar stem psoup 
approaches efficiently synchronized data streams delays tuples different data streams windows defined terms tuple counts 
windows defined terms time intervals delays may occur tuples different data streams 
case approaches tend provide approximate answers window join operation 
result old tuples expiring completely joining delayed tuples 
delays occur sensors connected network 
motivates need algorithms accommodate synchronous asynchronous arrivals tuples data streams 
class sliding time window join refer join 
examples join example spotting spread area pollution cloud sensor network 
user issues query monitor propagation expansion pollution cloud sensor network 
user specifies time window propagation occur wind speed maximum time cloud propagate sensors represents window interest readings sensors 
example tracking objects appear video data streams multiple cameras 
objects identified data stream maximum time object travel monitoring devices defines implicit time window join operation 
forms window join join forms depending existence window constraints pair joined streams 
start describing different forms 
sections develop window join algorithms handle different forms described 
introduce sql construct window define time window tuples streams form binary window join joins input streams single window constraint 
example sql query corresponding example maximum time needed objects move sensor sensor select gas sensor sensor window form path window join joins multiple streams window constraints connect streams path 
example object needs different times travel camera user may issue query select obj camera camera camera similar obj obj similar obj obj window window similar user defined function determines objects captured different cameras similar scope 
purposes reader may think function equivalent equality predicate object identifiers obj obj 
form graph window join joins multiple streams window constraints streams form graph structure 
example query tracks spread hazardous gas detected multiple sensors maximum time gas travel sensors defines time windows select gas sensor sensor sensor sensor gas gas gas gas gas gas window window window window notice window constraints may exist possible pairs streams streams may constrained window due existence barrier prevents gas spreading directly 
form clique window join generalization form window constraints exist pair joined streams 
previous example barriers pair sensors exists window constraint pair sensors represents maximum time gas travel 
special case form consider uniform clique window join streams joined single window constraint form windows pair streams equal 
example monitor sales multiple department stores sliding time window say administrator may issue query select store store store store window notice window applies stream pairs 
contributions proceedings th international conference scientific statistical database management ssdbm ieee introduces new algorithms backward forward evaluations join termed bew join join respectively evaluating time window constraints alternative forms join described previous section 
bew join join different way evaluate window constraints update underlying streams 
identify ranges arrival rates algorithm provides improved performance terms response time throughput 
join algorithms context uniform clique window join previous section 
addition adapt algorithms join handle forms join window constraints may query 
propose approaches global local conservative approaches gca lca respectively utilize filter refine paradigm 
gca chooses maximum window constraint reduce join uniform clique join applies join algorithms 
contrast lca optimizes join consider maximum window constraint sensor 
extensive performance study algorithms implemented prototype stream database system synthetic data streams real time series data 
preliminaries stream model model stream data item components value set values data item timestamp defines order stream sequence 
value data item single value vector values 
time default ordering domain 
timestamp considered sequence number implicitly attached new data item 
notion time may refer valid time transaction time valid time time assigned item source stream created transaction time time assigned data item query processing system 
synchronizing arrival tuples belong different data sources easy enforce especially sources independent uses clock generate timestamps valid time 
query processor adds timestamps arriving tuples transaction time tuple scheduling stream data systems delays tuples data streams may occur query execution 
algorithms propose handle stream data type timestamps 
join operation illustrate operation join shows join data streams 
position tuples axis represents arrival order time 
indices tuple represent order arrival tuple relative data stream 
black dots correspond tuples stream satisfy clause 
window constraint implies tuples window join 
tuple candidate join tuple window away 
join represents uniform clique join 
graph model join obtained representing tuples streams nodes graph edges correspond window constraint tuples stream window time 
model uniform clique join represents complete graph 
non uniform clique graph path joins shown respectively 
evident join operation need efficient approach continuously verifying window constraints input streams updating join buffers intermediate structures hold tuples stream join contain eligible tuples 
ae sliding window new tuples old tuples de ab non uniform clique join ab bc way join uniform clique join ac ce de cd graph join forms join operation 
variations join 
ab de cd path join brute force approach verify window constraints streams requires verifying constraint pair streams adding additional comparisons input tuple 
efficient approach suggested verify objects different class fixed radius 
similar approach introduced band join 
bew join algorithm adopts similar approach verify window constraints individual tuples 
algorithms deal infinite streams may block data delayed stream 
contrast bew join algorithm nonblocking provides online update join buffers reflect tuples reside window 
uniform clique join section introduce join algorithms context uniform clique join 
sections demonstrate address join query forms 
backward evaluation join algorithm identify tuples window bew join algorithm maintains period say includes timestamp new arriving tuple timestamps proceedings th international conference scientific statistical database management ssdbm ieee tuples different stream 
starts length equals twice size window constraint timestamp center 
period completely constructed includes tuple stream including difference maximum timestamp minimum timestamp tuples equal tuples currently belong satisfy bc window constraint checked satisfaction join predicate 
constructing tuple say stream say safely removed join buffer timestamp older newest tuples streams tuple guaranteed join new tuples streams need stored 
process updating updating join buffer repeated combination tuples join buffers streams 
step terminated combinations exhausted case algorithm process different new tuple necessarily stream construct new period similar fashion 
term iteration refer process joining new tuple algorithm ready process new tuple 
algorithm notion fixed outer stream starts join process block waiting tuples single stream 
new tuple new tuple old tuple new tuple processing tuple stream ii processing tuple stream old tuple 
bew join algorithm 
deleted depicts status algorithm processing tuple stream forming window length centered algorithm iterates tuples stream window tuple tuples shown inside rectangle satisfies join predicate illustration algo rithm assume black dots tuples stream satisfy join predicate located window included rectangle 
period modified shrunk include tu join predicate equi join algorithm types join predicate non equi join user defi ned functions 
ples 
new period test tuples stream shown rectangle stream 
process stream repeated streams respectively tuple reported output 
algorithm recursively backtracks consider tuples streams fi nal output tuples iteration starts tuple respectively 
iterating stream tuple located distance tuples streams tuples 
tuple safely dropped join buffer stream finishing tuple gorithm starts new iteration different new tuple 
example advance pointer stream process tuple iteration shown ii periods streams constructed respectively 
algorithm produces spurious duplicate tuples iteration new tuple considered join newest tuple stream 
output tuples iteration include new tuple duplicate tuples produced 
nested loop implementation bew join algorithm straightforward previous description 
join buffers fifo queues data stream algorithm keeps ordered vector timestamps newest tuples data stream 
new tuple say added queue corresponding data stream updates starts iterate update steam queues described 
hash implementation algorithm quite similar nested loop implementation fifo queues hash tables scanning replaced probing corresponding bucket hash tables 
bucket updating carried similarly nested loop vector discussion proceedings th international conference scientific statistical database management ssdbm ieee clear advantage previous algorithm block waiting tuples single data stream 
bew join algorithm processes stream tuples waiting join fixed outer data stream 
addition update data streams dropping old tuples performed join 
join buffers increase indefinitely join 
bew join may iterate tuples join illustrate example 
illustrates case data streams equal arrival rates data streams slow compared 
example bew join new tuple processing tuple stream 
bew join extra processing 
algorithm examine tuples streams respectively contribute final join results 
example illustrates bew join may fall cases include lengthy nested iteration tuples may satisfy window constraint 
addition iterative execution bew join algorithm verifies tuple period inclusion update period accordingly 
check update period adds time complexity processing tuple nested iteration examined iteration 
forward evaluation join join algorithm previous section repeated verification period inclusion update period increases execution time input tuple 
eliminate repeated window test need constrain join buffers store current tuples different data streams hold tuples window 
case blind window verification iteration performed verify join predicate 
algorithm achieves maintaining join buffers way reflects tuples different data streams window restricts window constraint test occur new tuple arrives 
algorithm description basic idea join algorithm current tuples join buffers determine combination tuples starting tuples bounds past tuples arrived rest data streams needs checked new tuple 
algorithm determines forward point time arriving tuples join need verify window constraint 
join buffers maintain tuples data stream time bounded tuple starting tuples describe details join algorithm follows 
join algorithm iterates modes mode mode 
mode plane sweep performed time axis incoming tuples streams 
target locate tuples window distance refers number joined streams 
tuple mode constructs period includes tuples determines mode tuples older starting tuples dropped streams buffers 
mode begins admitting tuples follow starting tuples timestamps period tuples guaranteed time units tuples included period 
result repeated verification window inclusion necessary joining new tuple ones period 
mode continues processing new tuples fall outside period 
case mode restarted determine new starting tuples new period 
new tuples output tuple mode start stream start stream proceedings th international conference scientific statistical database management ssdbm ieee old tuples ii pnew 
join algorithm 
iii deleted shows example joining streams assume tuples stream 
mode starts stream determines period includes 
algorithm proceeds stream tested determine falls period deter mined included inside period period modified shrunk include tuples window period adjustment stream 
processed similar stream step 
stream older current period dropped deleted join buffer tuple considered mode 
older current period current period discarded new period created step centered mode considers stream starting stream continues testing rest streams looping back stream stream processed 
older period dropped tuple stream tested 
included period dated step reflect inclusion 
streams processed similar stream steps 
step tuple stream added period streams participate single tuple final period indicates mode 
final tuple starting tuples mode 
note window join predicate considered mode period inclusion verified 
mode begins iterating tuples neighborhood tuples included mode start verifying join predicate starting tuples includes new tuples streams 
mode processes new tuple stream repeatedly long falls ii illustrates layout data streams new tuples output tuples illustrated ii time new tuple arrives 
note tuples generally mode need verify window constraint guaranteed tuples join buffer included period window 
algorithm stops mode tuple stream newer cur arrive respectively 
rent period iii tuples arrive mode drops tuple oldest tuple pe restarts mode search starting tuples 
discussion mode join algorithm updates buffers adding new tuples dropping tuples join buffers stream join buffers include tuples lie window 
algorithm avoids nested iteration tuples outside window 
addition mode needs test window inclusion admitting new tuple nested iteration tuples different streams 
advantages join algorithm comes expense increasing waiting time input tuples 
example mode switching mode de termine new period delayed new tuples different data streams newer current period 
waiting times tuples increase need wait tuples data streams processing 
case bew join new tuple processed immediately long bew join handle 
hash implementation join join described nested loop join 
section describe implementation algorithm tuples stream stored hash table 
requirement join tuples hash table organized order arrival 
case mode perform linear scan tuples stream update hash table 
requirement structure hash table maintains order tuples level bucket level hash table doubly linked lists dll 
mode uses dll links tuples hash table update hash table dropping old tuples 
new tuples inserted bucket similar hashing value links dlls dll bucket hash table updated accordingly 
mode iterates bucket probed new tuple 
performance study experiments setup proceedings th international conference scientific statistical database management ssdbm ieee implementation performed prototype stream database system steam predator modified accommodate stream processing 
modifications include introducing data type stream type represent source data types streaming capability 
stream type provide interfaces 
order collect data streams supply query execution engine developed stream manager new component stream database system 
main functionality stream manager register new stream access requests retrieve data registered streams local buffers supply data processed query execution engine 
stream manager runs separate thread schedules retrieval tuples round robin fashion scheduling options studied 
interface query execution plan stream manager introduce operator communicate stream manager receive new tuples collected stream manager 
performed experiments real time series data synthetic data streams 
real data logs transactions wal mart stores sold item store appears transaction customer purchases 
single transaction store includes item number addition information item description item unit price item quantity item purchase date time 
timestamp tuple time transaction valid time 
data extracted ncr teradata machine holds gbytes wal mart data 
consider synthetic data streams stream consists sequence integers inter arrival time numbers follows exponential distribution mean experiments run sun enterprise machine running solaris operating system gbytes main memory 
experimental results query execution throughput set experiments throughput performance measure query execution number tuples processed algorithm unit time 
throughput indicates fast algorithm executes 
measures collected steady state 
compute throughput measure total execution time tuples calculate average 
repeat calculation increasing number input tuples value unchanged 
repeat experiment varying arrival rate input data streams measure throughput case 
monitor throughput point join algorithm capable handling total arrival rate input data streams 
point join algorithms start drop tuples input data streams 
experiment repeated way joins hash nested loop implementations bew join join algorithms 
brevity results input rates data streams comparable significant differences input rates data stream 
experimented case arrival rate data streams different obtained results similar spirit arrival rates comparable 
synthetic data streams integer values range 
nested loop implementations queries window size seconds 
hash implementations queries window size minute 
shows maximum throughput sup donated purdue university wal mart ncr query execution throughput tuples sec 
query execution throughput tuples sec 
maximum throughput hash implementation join bew join number joined data streams maximum throughput nested loop implementation join bew join number joined data streams 
maximum execution throughput 
ported algorithm increase input arrival rates way joins 
join algorithm achieves higher maximum throughput falls earlier input arrival rates 
case experimented way joins 
improvement approximately way join hash implementations way nested loop implementations 
implementations difference maximum throughput bew join join reduced increase number joined data streams 
case algorithms spend execution time iterating large number tuples joining data streams increases exponentially number tuples test 
join algorithm increase arrival rates algorithm switches mode mode new tuple 
switch back forth mode mode increases overhead mode total execution time reduces save comparisons introduced mode 
response time proceedings th international conference scientific statistical database management ssdbm ieee section study average response time new tuple complete execution 
time includes waiting response time milliseconds way join bew join join total input rate tuples sec 

response time hash implementations time plus execution time tuple 
hash implementations bew join join algorithms 
experiment way join window size minute synthetic data streams 
change average arrival rate stream tuples sec 
measure time elapsed arrival new tuple completion averaged range input tuples 
illustrated low arrival rates algorithm low response time compared join algorithm 
mainly due behavior mode mode join algorithm 
modes need hold new input tuples finding starting tuples mode switching mode mode 
increases average waiting time new tuples join algorithm 
bew join algorithm processing new tuple independent arriving tuples data streams 
result waiting time minimal determined current waiting tuples join operation 
data arrival rate increases bew join algorithm spends time processing tuple response time increased 
join execution time smaller bew join algorithm increase arrival rate mode mode need wait tuples long periods time 
result response time algorithm decreases increase arrival rate 
maximum throughput bew join approximately tuples sec aggregate input arrival rate 
response time bew join crosses join algorithm gets higher 
output execution time real time series data experiment study performance proposed algorithms real time series data wal mart stores 
measure total output execution time algorithm various increasing sizes total execution time sec 
way join join bew join number output tuples thousands 
total execution time output tuples 
stream databases 
hash implementation algorithms run join queries similar example section 
window size hour conduct experiment way join 
illustrate results way join 
shows join algorithm produce output amount time bew join algorithm 
example join produce output tuples seconds way join bew join algorithm produces amount output tuples seconds 
variations join section study forms join window unique streams pairs streams window constrained form form described section 
path join form special case form graph join 
non uniform clique join proceedings th international conference scientific statistical database management ssdbm ieee bew join join algorithms described section require single window constraint applied streams 
having different window constraints pair streams requires adaptation algorithms 
conservative approach solving join different window constraints consider largest window constraint single window constraint streams apply bew join join algorithms find candidate tuples 
step referred filtering step 
filtering step result false positive answers tuples reported actual join refinement step windows constraints verified tuples included output tuples 
final test applied output filtering step 
refer approach global conservative approach gca short 
start stream start stream output tuple mode new tuples old tuples sp sp sp shortest path select objid sensor sensor sensor sensor objid objid objid objid objid objid window window window graph construction graph join path join lca approach 
variations join 
gca may assign unnecessarily large window size join resulting excessive number additional comparisons 
propose variant join algorithm uses maximum local windows stream 
call approach local conservative approach lca short 
lca filter refine steps gca 
filter step alternates modes mode mode similar join 
mode produces starting tuples period mode iterates tuples period produce results 
mode construction period considers maximum local window stream 
describe filtering step example shown 
example illustrates join streams 
assume window sizes ordered indices maximum window size 
execution steps lca similar join 
graph join path join graph path joins pairs streams window constrained types join propose approaches 
approach similar conservative approaches developed section 
second approach uses bew join approach assume connected graph regard window constraints streams 
update tuples add drop tuples data streams 
sections describe approaches 
conservative approaches absence window constraints implicit assumption streams join infinite window sizes 
due nature window constraints deduce practical values missing constraints 
shows way join window constraints streams specified 
upper bound missing constraint shortest path streams 
example window constraint streams min 
calculation shortest path performed query compilation time query execution time affected 
repeat construction bound evaluation missing window constraints arriving complete graph 
point conservative approaches described section 
variation bew join bew join algorithm drops tuple say stream time window older new tuples arrive joined data streams 
mechanism extended handle graph path joins way 
data stream say select subset window constraints participates 
refer subset tuples satisfy window constraints reported output evaluated filtered refinement step 
tuples violate window constraints dropped join 
hand tuples violate window constraints kept tuples may satisfy window constraints different combination tuples streams 
example window constraints stream follows assume represents timestamp tuple proceedings th international conference scientific statistical database management ssdbm ieee clear advantage modified bew join approach conservative approaches window size stream smaller 
advantage clear time windows larger time windows 
case path graph joins iterates tuples processes new tuple faster conservative approaches 
related seshadri provide seq model implementation sequence databases 
sequence defined set mapping function defined ordered domain 
provides data model chronicles sequences data items discusses complexity executing view described relational algebra operators 
includes study algorithm complexity computation data stream 
adaptive query processing execution continuous query address reordering operators execution long running queries managed 
cougar system focus executing queries sensor data stored data 
sensors represented new data types special functions extract sensor data requested 
stream project discusses new demands imposed data streams data management processing techniques 
stream addresses processing query operators bounded memory space suggesting queries data streams projection duplicate elimination operators may answered limited memory considering relationship terms clause 
identify different variations sliding time window joins referred join 
describe join algorithms bew join join 
bew join achieves low response time lower aggregate rates data streams 
join algorithm outperforms bew join algorithm arrival rate data streams increases 
join algorithm processes tuples faster bew join algorithm support high arrival rates input data streams starting thrash 
compared algorithms nested loop hash implementations real implementation prototype stream database system 
performance study validates previous 
proposed alternative ways solve variations join adaptations algorithms utilizing filter refine paradigm compared performance 
plan study similar techniques join data arrival rates higher system handle choice drop tuples hopefully insignificant ones 
acknowledgment michael franklin valuable comments 
proceedings th international conference scientific statistical database management ssdbm ieee arasu babcock babu widom 
characterizing memory requirements queries continuous data streams 
proc 
pods june 
aref barbar johnson mehrotra 
effi cient processing proximity queries large databases 
proc 
th icde march 
avnur hellerstein 
eddies continuously adaptive query processing 
proc 
sigmod conference 
babu widom 
continuous queries data streams 
sigmod record vol sept 
bonnet gehrke seshadri 
sensor database systems 
proc 
nd int 
conference mobile data management jan 
chandrasekaran franklin 
streaming queries streaming data 
proc 
vldb conference aug 
chen dewitt tian wang 
scalable continuous query system internet databases 
proc 
sigmod conference 
dewitt naughton schneider 
evaluation non equijoin algorithms 
th vldb conference sept 
gehrke korn srivastava 
computing correlated aggregates continual data streams 
proc 
sigmod conference 
henzinger raghavan rajagopalan 
computing data streams 
technical note digital systems research 
jagadish mumick silberschatz 
view maintenance issues chronicle data model 
proc 
pods may 
kang naughton 
evaluating window joins unbounded streams 
icde feb 
madden shah hellerstein raman 
continuously adaptive continuous queries streams 
proc 
sigmod conference june 
seshadri 
predator resource database research 
sig mod record 
seshadri livny ramakrishnan 
design implementation sequence database system 
proc 
th vldb conference sept 
snodgrass 
developing time oriented database applications sql 
morgan kaufmann 
yao gehrke 
query processing sensor networks 
proc 
conference innovative data systems research cidr appear jan 
