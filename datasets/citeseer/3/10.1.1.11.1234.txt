fundamental approaches software engineering fase barcelona spain march 
springer verlag lncs pp 

springer verlag operational semantics stateflow john rushby computer science laboratory sri international ravenswood avenue menlo park ca usa rushby csl sri com 
formal operational semantics stateflow graphical statecharts language matlab simulink tool suite widely model development embedded systems 
stateflow tricky features operational treatment yields surprisingly simple semantics subset generally recommended industrial applications 
validated semantics developing interpreter allows compare behavior matlab simulator 
semantics foundation developing prototype tools formal analysis stateflow designs 
design process embedded systems changed dramatically years 
increasingly designers model development environments allow system including software plant control environment operate represented graphical form high level abstraction 
model development environments provide extensive tools validation simulation code generators compile executable controller graphical representation 
widely environments kind matlab suite mathworks licensees widespread aerospace automotive industries ubiquitous engineering education 
stateflow component simulink graphical language matlab 
allows hierarchical state machine diagrams la statecharts combined flowchart diagrams flexible way 
stateflow generally specify discrete controller software model hybrid system continuous dynamics behavior plant environment specified capabilities simulink 
part matlab tool suite stateflow inherits simulation code generation capabilities 
material supported national science foundation 
ccr university illinois nasa langley research center contract nas 
evolution model development driven growing number embedded systems increasing complexity 
alongside developments increase criticality embedded systems regard human safety fly wire control systems cost faults systems deployed huge quantities automobiles domestic appliances 
increasing criticality creates need improved methods analysis verification provides opportunity formal methods 
formal methods provide tools check properties design apply computational procedure generation test cases systematically automatically parts design 
notations stateflow built formal methods mind appear suited formalization 
understanding stateflow stateflow complex language user guide pages long numerous complicated overlapping features lacking formal definition 
documentation chapter describes semantics informal operational terms supported numerous examples actual definition language simulation semantics behavior simulated matlab environment 
proposing formal tools stateflow requires giving formal definition 
complexity language seen obstacle formalization 
hand need tools help programmers clearly visible users language asking 
example stateflow program fail runtime exception reasons desirable able avoid failures able detect program may vulnerable 
popular way rely programming guidelines restrict language safe kernel 
guidelines formal basis language experience 
precisely identifying reasons runtime errors allow development static analysis tools guarantee absence 
framework formal tools propose formalization stateflow starting point definition formal tools 
choose language follow strictly simulation semantics mathworks documentation tools shortcomings 
main result lies understanding stateflow superficially similar statecharts notations truth sequential imperative language 
problems arising formalizing language di erent nature statechart languages di erent solutions required 
formal operational semantics precisely captures order execution different components stateflow chart 
operational approach satisfies goal able express complicated features language alternative approaches denotational get lost 
formalization development tools stateflow provides detailed understanding language readily supports construction static analyzers translation formal tools model checkers 
overview introduce stateflow example 
section develops formalization subset language gives operational semantics 
section compare approach related sketch approach proposed basis developing formal tools language 
stateflow stateflow language provides hierarchical state machines similar statecharts languages give di erent semantics state machines 
includes complicated features transitions complex transitions junctions portrayed small circles event broadcasting 
stateflow provides flowcharts specified internal transitions leading terminal junctions 
describing language scope simple example program includes kinds notation sketch execution 
stopwatch stateflow sec sec min min cent cent sec sec tic cent cent lap cent sec min disp cent disp sec disp min run running lap disp cent cent disp sec sec disp min min lap lap reset lap lap start start start start fig 

simple stopwatch stateflow presents stateflow specification stopwatch lap time measurement 
stopwatch contains counter represented variables min sec cent display represented variables disp min disp sec disp cent 
stopwatch controlled command buttons start lap 
start button switches time counter lap button fixes display show lap time counter running resets counter counter stopped 
behavior modeled exclusive states reset counter stopped 
receiving lap resets counter display receiving start changes control running mode 
lap counter stopped 
receiving lap changes reset mode receiving start lap mode 
running counter running display updated 
receiving start changes mode pressing lap changes lap mode 
lap counter running display updated showing value received 
receiving start changes lap receiving lap changes running 
states grouped pairs inside main states run active respectively counter counting stopped 
counter specified run state flowchart incrementing value time clock tic received 
executing stopwatch chart stateflow chart active state 
executing chart consists executing active state time event occurs environment 
events action buttons start lap clock tick tic 
executing active state done steps 
see transition leaving state taken goto step 
execute internal actions internal transitions actions 

execute internal state active 
transitions guarded events conditions trigger actions 
internal transition state reset example guarded lap event triggers series actions counter display 
supposing run state active running substate active receiving start event trigger sequence reactions transition leaving state transitions guarded start belong substates flowchart executed guarded tic active substate executed transition fired leading reset substate running run exited reset entered 
step completed execution continue newly active state time event received environment 
model contains flowchart implements counter 
flowcharts described transitions junctions 
states junction exited instantaneously entered flowchart executes terminal junction junction outgoing transitions reached paths failed 
backtracking occur wrong path tried 
example flowchart guarded tic event 
activated event cent variable incremented junction reached 
transitions leave guarded executed 
cent equal guarded transition taken cent initialized sec incremented second junction reached execution continues 
cent equal guarded transition fails unguarded tried unguarded succeeds leading third junction terminal execution ends 
short example stateflow features introduces hierarchical states transitions mixed design flowcharts 
informal description execution example close presentation language semantics documentation 
formalizing stateflow studying language came realize superficially similar statechart notations stateflow greatly di ers 
particular possibilities non determinism avoided relying strict ordering rules scheduling concurrent components statically known 
decided consider stateflow imperative language structural operational semantics sos adapted description languages 
semantics cient dealing complexity stateflow lies constructions concurrency non determinism 
stateflow subset introduce linear language strict subset stateflow 
language eliminates di culties graphical notation making order components explicit describe translation graphical form 
give language formal semantics 
language language 
basic components states junctions events actions conditions define active states state transition events event paths lists states 
transitions guarded transition event condition execute actions go destination path junction 
action executed soon transition valid second executed transition leads 
transitions grouped lists junction definition lists associate lists transitions junctions 
state definition lists sd associate state definitions sd states 
state definition triplet actions executed respectively entering executing exiting state internal composition list inner transitions list outgoing transitions junction definition list 
composition composition states composition 
composition defined boolean true composition active state definition list 
composition active state path set default transitions state definition list 
composition sa sd sd state definition sd state definition list sd sd sn junction definition list jn tn transition transition list state active state sa junction path destination event transition event action condition fig 

language notes language actions conditions expressions action language distinct stateflow keep distinction 
action language simple imperative language 
reason variables part action language stateflow 
transition list state definition lists sd ordered order significant 
graphical representation program order determined position components chart states ordered top bottom left right 
transitions ordered clock rule ordered partial ordering form guards transitions guarded event evaluated transitions guarded condition unguarded transitions come ordering fails ordered source clockwise starting clock position 
state definitions written nt representing triplet actions entering exit actions noted respectively example state stopwatch reset reset reset lap cent sec min disp cent disp sec disp min start run running 
lap lap lap reset 
start run lap 
symbol represents empty action empty condition 
name corresponds terminal junction state reset junctions anonymous stateflow unique ids translation 
see state containing composition states reset lap 
reset contains internal transition guarded lap transition guarded start going state run running lap contains transitions guarded lap going state reset guarded start going state run lap 
operational semantics executing stateflow program consists discrete step processing input event program 
processing modify value variables environment raise output events change program may change active states transitions occur 
propose sos semantics language 
semantics precisely expresses sequence actions involved processing event chart 
rules general form tv processing event environment program component produces new environment new program transition value tv 
denote syntactic class language 
transition values tv communication di erent parts chart 
rules particular syntactic classes extend slightly di er general form 
environments contain bindings variables action language values list output events raised current instant 
definition environment 
xn transition values indicate transition fired 
transition fired distinct values necessary distinguish failing transition final transition flowchart 
transition fired keep track destination eventual pending action 
definition transition value tv 
tv fire definition language detail semantics actions conditions consider semantics rules evaluating action processing event environment produces new environment evaluating condition processing produces boolean value semantic rules di erent syntactic classes 
brevity detail rules transitions transition lists parallel compositions full rules available appendix 
transitions transition fires destination corresponds processed event empty condition true 
case action immediately executed left pending returned value rule fire 
di erent processed event empty rule condition false rule transition fails returns 
transition lists lists transitions junctions model flowcharts complex transitions states 
important point list transitions processed sequentially transition fire taken shown rules fire 
transition fires junction list transitions associated junction needs processed evaluation continues instantaneously reaching transition 
goes fire path rule fire reach terminal junction rule fail case backtrack try transition list rule fire 
fire true ac ac fire ac false ac fig 

rules transitions fire fire act fire act tv tv fire fire fire fire fire fire fire tv tv fig 

rules transition list state definitions rules exhibit order execution 
di erent rules necessary entering executing exiting state 
executing state outgoing transitions tested fail code executed internal transitions internal composition 
composition fires transition actions executed followed exit code 
outgoing transitions fire transition actions executed internal composition exited exit code executed 
compositions rules compositions take care control changes states handle transitions 
currently active state executed 
state fires fires siblings case sibling entered active state fires outside composition 
compositions executing composition consists sequentially entering executing exiting parallel substates state executed environment returned execution predecessor 
important notice parallel construction fact completely sequential order execution statically known problems associated concurrency appears 
tv tv sd sd tv sd sn dn sd sn sd init sd sd sd sn dn sd sn sd exit sd sd sn dn sd sn sd fig 

rule compositions supporting local events extend treatment include features stateflow local events mechanism preceding semantics consider 
mechanism allows actions send event state occurs current processing interrupted sent event processed receiving state 
receiving state acts function action sending event function call 
mechanism introduces complicated cases fully supporting general case appears di cult 
exhibit restricted form mechanism expressive supports simple semantics 
try extend semantics simple interpretation local events 
action send sends event named state broadcasting event chart consists sending event main state 
behavior expressed rule send sd sd sd tv sd send sd sending state results processing definition extended environments definitions states definition environment 
xn vn sd sd list state definitions 
notation sd denotes environment associated sd 
rule fully handle event sending deeper modifications semantics needed 
processing local event changes definition destination state rule definition sd processing event 
destination state ancestor current state modified 
necessary action performed read eventually new definition current state continue execution corresponding control point new definition 
active state modified call return point may active anymore leads stateflow runtime error 
investigating mechanism understand behavior expressive power distinguished di erent usages describing recursive behaviors 
recursion occurs caller sends event ancestors 
practice recursions di cult control event sending action get executed recursive call understand 
providing tools check recursion di cult see 
recursions easily lead runtime errors discouraged industrial applications 
explicit scheduling parallel states 
parallel states normally ordered statically position chart 
local events explicit dynamic scheduling parallel states guarding states local events having caller executes expected order 
particular simpler understand 
proposition limit local events definition sequencing behaviors 
obtained imposing restrictions local events sent parallel states 
transitions parallel states forbidden imposed stateflow see section details 
loops broadcasting events forbidden state broadcasts event state turn broadcast event 
limitations sending event really seen function call 
forbidding transitions parallel states ensures context modifications kept local destination 
forcing sending parallel states forbidding loops ensures infinite calls occur 
rule sending event rule 
addition need change rule parallel execution sd sd sd sd dn dn dn rule similar original addition state definitions environment updated execution 
definition local events opinion captures interesting uses stateflow supports simple semantics introduce new runtime error infinite loop possibilities 
ford guideline stateflow local events exact way 
additional unsupported features subset supports nearly language restrictions local events 
interesting feature missing history junction mechanism keeps track configuration state exited re enters configuration 
semantics easily extends support mechanism omitted sake simplicity 
necessary modifications add history component boolean state definitions determine carry junctions add rules handle component entering leaving states compositions 
restrictions imposed transitions transitions parallel compositions transitions going junction forbidden 
transitions directly parallel state forbidden stateflow simulated transition substate parallel state 
behavior transitions quite unpredictable introduces possible runtime errors states fire simultaneously composition di erent destinations 
forbidding transitions junction allows semantics local 
transition state pending actions executed state closed entering destination 
transition goes junction sure leading close state opening destination 
keep equivalence stateflow impose local events sent visited states due initialization problems stateflow 
equivalence simulation semantics language intended strict subset stateflow tools developed apply programs designed mathworks tools long programs subset checked tool see section 
succeed semantics simulation semantics stateflow equivalent subset 
semantics conceived goal mind precisely stateflow documentation simulation semantics formal possible prove equivalence 
sos semantics directly executable easily define stateflow outputs compared matlab simulator 
done systematically examined examples examples traces obtained tools 
related operational semantics stateflow language 
semantics covers virtually language excluding features generally discouraged industrial applications 
formal semantics necessary basis building formal tools language 
operational approach chosen leads surprisingly simple semantics constitutes starting point developments 
related little directly addressed semantics stateflow 
natural idea considering stateflow evaluate formalization statecharts :10.1.1.20.461
languages di erent semantics stateflow includes flowcharts denotational approaches proposed statecharts semantics easily usefully adapt stateflow 
popular approach statecharts semantics translate language simpler formalism semantics known 
approach followed statemate translation hierarchical automata 
semantics adapted uml statecharts 
similar semantics proposed stateflow tiwari shankar rushby translation push automata 
encoding complex stateflow language constructions requires vast number control variables translation formal tools di cult 
luttgen von der cleaveland proposed sos semantics subset statecharts 
wanted define compositional semantics consider transitions 
notice ect semantics compositional language contains absolute states compositional forbidding transitions 
need consider execution micro macro level necessary due completely deterministic nature stateflow 
appeal proposed sos semantics stateflow exhibits sequential behavior stateflow language true concurrency kind nondeterminism 
seeing stateflow imperative language choice operational approach natural advantage scaling rich language allowing big subset considered 
similar approach implicit krogh describe translator stateflow input language smv model checker 
construct explicit semantics considerations guide translation close reflect similar focus sequential nature stateflow execution importance accurately representing sequencing rules 
basis formal tools goal propose formalization stateflow constitute foundation construction formal tools language 
semantics appears meet goal large rules semantics simple syntax directed adapted automatic processing 
kind tool interested static analysis detecting flaws programs enforce enhance programming guidelines 
proposed semantics giving low level view program execution possible understand causes runtime errors missing rules semantics 
developed tool checks possible runtime errors detects non fatal flaws possible backtracking reliance clock rule 
having syntax directed semantics allows precise diagnosis user 
tool verifies program lies subset considered semantics 
interested model checking check properties programs automate test case generation 
operational semantics provides basis ciently compiling stateflow imperative language input language model checker 
developed translator sal language sri model checkers translation produces cient code similar size stateflow model 
sal translation check properties design example contains bug model checker easily finds updating display done staying instant running state lap start events occur tics display show erroneous value 
currently translation automatic test case generation stateflow 
plan investigate formalization simulink stateflow environment 
possible direction combine existing simulink 

mathworks stateflow stateflow coder user guide 
release sp edn 

ford structured analysis design matlab simulink stateflow modeling style guidelines 
technical report ford motor available vehicle berkeley edu papers pdf 

buck rau modelling guidelines flowchart patterns stateflow 
trends 
plotkin structural approach operational semantics 
technical report daimi fn aarhus university 
tiwari shankar rushby invisible formal methods embedded control systems 
proceedings ieee 
harel statecharts visual formalism complex systems 
science computer programming 
lakhnech siegel formal semantics statecharts supported statemate 
nd bcs facs northern formal methods workshop bcs 
modular semantics uml statechart diagrams kernel extension branching time model checking 
journal logic algebraic programming 
luttgen von der cleaveland compositional approach statecharts semantics 
rosenblum ed eighth international acm symposium foundations software engineering san diego california 
krogh symbolic verification executable control specifications 
proceedings tenth ieee international symposium computer aided control system design coast island hawai hi 
heitmeyer model checking generate tests requirements specifications 
nierstrasz eds esec fse seventh european software engineering conference seventh acm sigsoft symposium foundations software engineering 
volume lecture notes computer science toulouse france springer verlag 
heimdahl coverage test case generation model checkers 
th annual ieee conference workshop engineering computer system 

caspi tripakis translating discretetime simulink lustre 
third international acm conference embedded software 
volume lecture notes computer science springer verlag complete semantics give complete semantics rules syntactic classes language transitions transition lists 
state definitions 
compositions figures 
compositions 
fire true ac ac fire ac false ac fire fire act fire act tv tv fire fire fire fire fire fire fire tv tv fig 

rules transitions lists transitions sd tv tv tv tv tv sd int fire tv tv tv tv tv fire fire sd fire fire fire sd init sd exit fig 

rules state definitions ext fire sd sd sd sd fire sd sd sd sd sd sd ext fire prefix sd sd fire sd sd sd sd fire tv tv sd sd tv sd sd sd sd int fire tv tv sd sd fire act sd sd tv sd sd sd sd sd sd fire tv tv sd sd fire prefix tv sd sd sd sd fire fig 

rules compositions init state init fire sd sd sd sd sd sd init sd sd sd sd sd sd exit sd sd sd sd sd sd fig 

rules entering exiting compositions tv tv sd sd tv sd sn dn sd sn sd init sd sd sd sn dn sd sn sd exit sd sd sn dn sd sn sd fig 

rule compositions 
