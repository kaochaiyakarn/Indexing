sound decidable type inference functional dependencies gregory duck simon peyton jones peter stuckey martin sulzmann department computer science software engineering university melbourne vic 
australia cs mu oz au microsoft research jj thomson avenue cambridge cb fb england simonpj microsoft com school computing national university singapore level science drive singapore sulzmann comp nus edu sg 
functional dependencies popular useful extension haskell style type classes 
give reformulation functional dependencies terms constraint handling rules chrs 
previous chrs employed describing user programmable type extensions context haskell style type classes 
chrs provide rst time concise result sucient conditions functional dependencies allow sound decidable type inference 
sucient conditions imposed functional dependencies limiting 
show safely relax conditions 
functional dependencies introduced mark jones jon proved attractive extension multi parameter type classes haskell :10.1.1.130.789
example consider class intended describe collection type containing values type class coll empty insert member bool part functional dependency indicates xing collection type element type functional dependencies proved useful allow programmer control type inference process precisely 
elaborate section 
purpose explore consolidate design space functional dependencies fds 
main tool exploration reformulation fds terms constraint handling rules chrs fr ss idea review section 
reformulation allows new contributions despite popularity functional dependencies formalised far know 
chrs give language explain precisely functional dependencies 
particular able socalled improvement rules implied fds explicit terms chrs 
understanding provide rst concise proof restrictions imposed jones functional dependencies jon ensure sound decidable type inference section :10.1.1.130.789
jones restrictions limiting 
propose useful extensions section liberal fds section 
establish concise conditions liberal fds sound 
provide various examples support usefulness improvement strategies 
related discussed section 
conclude section 
refer interested reader proofs additional material 
background functional dependencies haskell reviewing functional dependencies introduced jones jon assuming basic familiarity haskell style type classes :10.1.1.130.789
example 
recall collection class class coll empty insert member bool plus instance eq coll ins xs insert insert xs consider function ins 
absence functional dependencies type inference give ins coll coll course want expect type 
functional dependency expresses idea collection type xes element type type 
situation commonly say types improved jon 
functional dependencies useful di erent contexts 
representative examples 
example 
consider class representing state monads instances class sm new read write instance sm io ioref new read write instance sm st new read write part gives functional dependencies indicates xing monad type type vice versa 
consider code call print type string io clear io monad functional dependency ioref 
infer type io ioref example see main purpose functional dependencies allow programmer place stronger conditions set constraints generated type inference allow accurate types inferred 
absence infer type sm io io needlessly general 
situations ambiguity reported 
example io functional dependencies type system type reports ambiguous new read 
example 
consider application allowing overloaded multiplication base types int float user de nable types vectors 
simplicity omit obvious function bodies 
class mul instance mul int int int instance mul int float float type vec instance mul mul vec vec 
point argument types determine result type 
absence knowledge expression typed type intermediate result determined 
type checker report type ambiguity just faced classic example ambiguity read show 
example 
useful application fds encode family zip functions 
zip zip bs zip bs zip class zip zip instance zip zip zip instance zip zip zip bs cs zip zip bs cs de nitions zip ary function 
example may write bool char head zip true false bool char int head zip true false int functional dependencies tricky seen functional dependencies allow programmer exert control type inference process 
additional control unexpected consequences 
speci cally may lead inconsistency type inference engine deduces nonsense int bool may lead non termination type inference engine goes nite loop 
illustrate diculties example 
example 
suppose add instance mul int float int example 
declarations class mul instance mul int float float instance mul int float int note rst parameters meant uniquely determine third parameter 
case type inference encounters mul int float argue int instance declaration 
declaration imply float 
answers inconsistent allowing program inconsistent soundness type inference 
example 
assume add function classes instances example 
program text gives rise constraint mul vec improvement rules connected instance mul mul vec vec imply vec applying substitution gives constraint mul vec vec vec 
constraint simpli ed instance declaration giving rise simpler constraint mul vec unfortunately entire chain reasoning simply repeats 
nd type inference suddenly non terminating 
note instances functional dependency terminating 
bottom line 
want type inference sound decidable 
functional dependencies threaten happy situation 
obvious solution place restrictions functional dependencies type inference remains behaved discuss 
jones functional dependency restrictions assume fv takes syntactic term returns set free variables substitution simultaneously replaces corresponding jones original jon restrictions imposed functional dependencies :10.1.1.130.789
de nition haskell fd restrictions 
consider class declaration class tc fd fdm type variables class context consisting possibly empty set type class constraints 
fd functional dependency form fi ng 
commonly refer domain range 
conditions hold functional dependency fd consistency 
consider pair instance declarations instance tc instance tc particular type class tc 
substitution 
termination 
instance tc fv fv haskell systems allow functional dependencies usually allow dependencies form multiple type variables right arrow 
equivalent form rest deal case single type variable right arrow 
rst conditions rules inconsistent instance declarations see example turns second ensures termination informal argument jones original mention termination issue 
particular second restriction illegal recursive vec instance example fv fv prevents divergence example 
best knowledge proved restrictions ensure sound decidable type inference 
rst time section 
restrictions system behaved natural ask condition weakened 
consistency condition entirely reasonable seen examples termination restriction excludes entirely reasonable useful programs 
examples appears jones original number examples literature break termination condition kar ww ck 
section propose liberal form fds allows breaking termination condition additional conditions 
functional dependencies expressed chrs section explain translate functional dependencies lowerlevel notation called constraint handling rules chrs fr 
translation bene ts allows give precise account exactly functional dependencies mean allows formally verify jones conditions sucient ensure sound decidable type inference 
example 
return collection example class coll empty insert member bool class eq ord bool instance ord coll 
functional dependency generate improvement rules shall express chrs rule coll coll rule coll informally rst rule says constraints coll coll hold type 
rule generated class declaration expresses idea uniquely determines second rule generated instance declaration functional dependency states coll holds follows type inference inference engine required solve sets constraints apply improvement rules narrow choices 
chrs type class constraints left hand side equality constraints right 
logical interpretation implication 
operational interpretation ect type inference process type inference engine sees constraints matching left hand side adds constraints right hand side 
superclass relations generate chr rules 
superclass relationship class eq ord generates chr rule ord eq informally rule states constraint ord holds constraint eq holds 
typing rule check superclass constraints satis ed 
instance declaration generates chr rule allows simplify sets constraints remove class constraints known hold 
rule coll ord informally rule states constraint coll holds ord holds 
logical interpretation bi implication operational interpretation replace constraints left hand side right hand side 
relevant content rule generated instance intimately connected evidence translation program refer readers ss details 
translation chrs formalising translation class instance declarations translated chrs follows de nition chr translation 
consider class declaration class tc fd fdm type variables functional dependency fd form fi ng 
class declaration generate chrs class chr rule tc functional dependency chr functional dependency fd class declaration generate rule tc tc addition instance declaration form instance tc generate chrs instance chr rule tc case context empty introduce satis able constraint rue right hand side generated chrs 
instance improvement chr functional dependency fd class declaration rule tc set class instance declarations de ne simp set instance chrs generated prop set class functional dependency instance improvement chrs generated de ne prop class set class chrs prop similarly prop inst set instance improvement chrs prop class instance chrs rop class simp standard haskell functional dependency instance improvement chrs arise functional dependency extension haskell 
convenience case functional dependency imposed tc full able combine instance improvement instance rule rule 
situation instance tc full functional dependency generate chr rule tc having uniform description super class instance relations fds terms chrs establish important criteria terms chrs type inference sound decidable 
main result translation chrs allows phrase entire type inference process chr solving 
know earlier set chrs con uent terminating range restricted terms explain shortly achieve type inference sound answers correct complete answer type inference provide answer decidable type inference engine terminates ss 
main result follows theorem soundness decidability 
set haskell class instance declarations satis es haskell fd restrictions see de nition 
simp rop sets chrs de ned de nition 
set rop class simp chrs con uent terminating simp rop con uent terminating range restricted 
simp short simpli cation rule prop propagation rule terminology comes chr literature 
design haskell ensures chrs rop class simp represent haskell type system fd extension con uent terminating range restricted 
theorem says provide fds satisfy jones restrictions type inference sound decidable 
explain result need say mean set chrs con uent terminating range restricted 
con uence recall example translation chrs follows note functional dependency fully imposed 
rule mul mul rule mul int float float rule mul int float int nd contradicting chr derivations 
write denote chr derivation applies rule constraint store yielding store consider mul int mul int int 
problem code example manifests chr rules non con uence 
possible sequences applying rules lead di erent results 
just considering rules logical statements entire system unsatis able models satisfy set rules 
non con uence arises case overlapping instances 
assume add declaration code example 
instance eq coll case type inference encounters coll reduce constraint ord making original instance eq making instance 
derivations non joinable 
fact common assumption instances non overlapping case non con uence occurs due invalid fds 
note consistency condition sucient guarantee con uence assuming instances super classes con uent course 
example 
code fragment forms part type directed evaluator 
data nil nil data cons cons data env represents environment exp expression type resulting value class eval env exp env exp eval env exp instance eval cons env exp eval env exp eval env exp eval cons env exp translation chrs yields rule eval env exp eval env exp rule eval env exp eval cons env exp note termination condition violated consistency condition trivially ful lled instance 
nd chrs terminating non con uent 
nd applying twice eval env exp eval env exp eval cons env exp eval cons env exp note rule applied constraints nal store 
non joinable derivation applying rule eval env exp eval env exp eval cons env exp termination condition mis named example violation leads non con uence non termination 
termination recall example 
translation chrs yields 
rule mul vec vec mul program text example gives rise mul vec nd mul ec mul ec ec mul ec ec ec chr derivation type inference non terminating 
important point non termination introduced fd 
purpose generally assume instance chrs terminating 
exists sucient criteria ensure instance chrs terminating consider pey 
clearly possibly identify classes terminating instance chrs plan pursue 
note set chrs terminating easily test con uence checking critical pairs joinable abd 
range restriction range third condition impose chrs 
say chr range restricted grounding variables lefthand side chr grounds variables right hand side 
example 
consider class class instance translation chrs yields rule note rule range restricted 
grounding left hand side nd non ground variable right hand side 
range ensures unconstrained variables introduced derivation necessary condition complete type inference 
refer readers ss details 
extensions turn discuss extensions variations functional dependencies 
liberal functional dependencies earlier argued jones consistency condition reasonable termination condition onerous necessary excludes reasonable useful programs section 
section suggest replacing termination restriction weaker goal making useful programs legal 
de nition liberal fd 
consider class declaration class tc fd fdm type variables class context consisting possibly empty set type class constraints 
fd functional dependency form fi ng 
addition consistency condition see de nition condition hold liberal functional dependency fd context consistency 
instance tc fv closure fv ik closure vs tc tc ffv fv basic idea context consistency condition variables range captured fds imposed type classes context 
note context consistency condition resembles liberal version termination condition context consistency prevent non termination 
example satis es conditions resulting chrs non terminating 
precisely adding improvement rules rop terminating set simp instance chrs yields non terminating set simp rop 
result hold need assume chrs terminating 
theorem liberal fds soundness 
set haskell class instance declarations satis es liberal fd restrictions 
simp rop de ned de nition 
set simp rop class con uent range restricted simp rop terminating simp rop con uent range restricted 
note example satis es liberal fd conditions 
de nition generate improvement rules 
note functional dependency imposed full 
simplicity focus improvement rules 
rule zip zip rule zip zip rule zip rule zip rule zip rule zip rules generated second instance 
note rules introduce new variables violate termination condition 
rules harmless 
ectively replace rule zip true rule zip true trivial 
omit altogether 
observe safely violate termination condition breaking termination case improvement rules generated trivial right hand side chrs replaced true constraint 
case range component instance variable 
stronger improvement situations fds enforce sucient improvement 
note inferred types example zip bool char zip bool char int bool char bool char int example rule states see zip improve case see zip bool char improve bool char 
context safe replace rules rule zip imposes stronger improvement achieve desired typing 
note rule respects consistency termination conditions assuming enforce conditions user provided improvement rules 
retain con uence termination chrs 
course user provided improvement violates sucient conditions user responsibility ensure resulting chrs con uent terminating 
instance improvement stronger improvement desirable omit certain improvement rules 
example case context consistency condition violated recover con uence dropping functional dependency rule 
theorem instance improvement soundness 
set haskell class instance declarations satis es haskell fd consistency restriction 
set simp rop class con uent range restricted simp rop class rop inst terminating simp rop class rop inst con uent range restricted 
con uent variation example impose instance improvement rule 
data nil nil data cons cons data env represents environment exp expression type resulting value class eval env exp eval env exp impose instance improvement rule class fd rule eval env exp instance eval cons env exp eval env exp eval env exp eval cons env exp related idea improving types context haskell type classes new 
example chen hudak odersky cho introduce type classes parameterized speci parameter 
example declaration class sm example expressed parametric declaration class sm interestingly impose conditions similar jones consistency termination condition achieve sound decidable type inference 
approach limited 
functional dependencies form allow appear domain functional dependency 
furthermore consider extensions liberal fds 
jon jones introduces general theory simplifying improving types re nement theory quali ed types jon 
provide formal results improvement strategies lead sound decidable type inference 
subsequently jones extends multi parameter type classes functional dependencies jon :10.1.1.130.789
states conditions consistency termination nally verify sucient ensure sound decidable type inference 
surprisingly introduces example breaks termination condition motivation functional dependencies 
duggan describe improvement strategy domain driven unifying overload resolution similar functional dependencies 
rst point potential problem non termination type inference 
discuss extensions liberal fds consider cope termination problem 
stuckey sulzmann ss introduce general chr formulation type classes 
establish general conditions termination con uence terms chrs type inference sound decidable 
rephrase functional dependencies particular instance framework 
new perspective functional dependencies expressing improvement rules implied fds terms chrs 
veri ed rst time conditions termination consistency see de nition stated jones sucient guarantee sound decidable type inference see theorem 
examples demand dropping termination condition 
purpose introduced liberal fds section 
identi ed additional condition context consistency guarantees con uence see theorem 
discussed useful extensions stronger improvement rules section instance improvement rules section 
extensions harder guarantee decidability generated improvement rules trivial 
example liberal fd conditions ensure soundness decidability 
working identifying decidable classes chrs 
expect report results topic near 
line plan investigate safely drop consistency condition 
consider class insert ce ce insert ce ce instance ord insert instance insert float int intention insert elements collection 
class declaration states collection type uniquely determines element type 
rst instance states insert elements list list elements enjoy ordering relation 
second instance states special treatment case insert ints list floats example assume ints internally represented floats 
sounds reasonable program rejected consistency condition violated 
establish con uence require complicated set improvement rules 
plan pursue topic 
jeremy reviewers comments 
abd 
operational semantics con uence constraint propagation rules 
proc 
cp volume lncs pages 
springer verlag 
cho chen hudak odersky 
parametric type classes 
proc 
acm conference lisp functional programming pages 
acm press june 
ck chakravarty keller 
type analysis 
duggan 
type checking multi parameter type classes 
journal functional programming 
duck peyton jones stuckey sulzmann 
sound decidable type inference functional dependencies 
technical report national university singapore 
www comp nus edu sg sulzmann chr download fd chr ps gz 
fr fr 
constraint handling rules 
constraint programming basics trends volume lncs 
springer verlag 
fr fr 
theory practice constraint handling rules 
journal logic programming 
jon jones 
quali ed types theory practice 
phd thesis oxford university september 
jon jones 
simplifying improving quali ed types 
fpca conference functional programming languages computer architecture 
acm press 
jon jones :10.1.1.130.789
type classes functional dependencies 
proc 
th european symposium programming languages systems esop volume lncs 
springer verlag march 
kar 
structure interpretation quantum mechanics functional framework 
proc 
haskell workshop pages 
acm press 
pey peyton jones report programming language haskell february 
haskell org 
ss stuckey sulzmann 
theory overloading 
proc 
icfp pages 
acm press 
ww weirich 
boxes go bananas encoding higher order syntax parametric polymorphism 
proc 
icfp pages 
acm press 
