combining specification techniques processes data time jochen ernst olderog fachbereich informatik universit oldenburg oldenburg germany fax olderog informatik uni oldenburg de 
new combination csp oz dc researched formal techniques specification processes data time csp object duration calculus 
emphasis smooth integration underlying semantic models verifying properties csp oz dc specifications combined application model checkers fdr csp uppaal timed automata 
approach applied part case study radio controlled railway crossings 
keywords csp object duration calculus transformational semantic real time processes model checking fdr uppaal complex computing systems exhibit various behavioural aspects communication components state transformation inside components real time constraints communications state changes 
formal specification techniques systems able describe aspects 
unfortunately single specification technique suited aspects available 
finds various specialised techniques describing individual aspects system behaviour 
observation led research combination semantic integration specification techniques 
combine researched specification techniques csp object duration calculus 
communicating sequential processes csp originally introduced hoare developed 
central concepts csp synchronous communication channels different processes parallel composition hiding internal communication 
csp rich mathematical theory comprising operational denotational algebraic semantics consistency proofs developed 
tool support comes fdr model checker 
name stands failure divergence refinement refers standard semantic model csp failures divergence model notion process refinement 
research partially supported dfg ol 
butler petre eds ifm lncs pp 

springer verlag berlin heidelberg introduced early oxford abrial set theoretic predicate language specification data state spaces state transformations 
systematic description 
language published extensively case studies industrial projects 
particular schemas schema calculus enable structured way presenting large state spaces transformation 
object object oriented extension 
comprises concepts classes inheritance instantiation 
object come concept data refinement 
exist proof systems establishing properties specifications refinements hol 
object type checkers exist 
verification support developed extension hol 
duration calculus dc short originated provably correct systems project new logic calculus specifying behaviour real time systems 
notion observable obs interpreted time dependent function time data domain real time system described set observables 
links mathematical basis classical dynamic systems theory enables extensions cover hybrid systems 
duration calculus inspired interval temporal logic specifies interval properties observables 
name stems ability specify duration certain states interval integral 
choosing right set observables real time systems described various levels abstraction 
verification support general dc provided theorem provers specialised application dc translation timed automata model checking uppaal 
known consistent combination different specification techniques difficult 
popular currently uml unified modeling language 
collects widespread specification techniques objectoriented systems language 
extension uml rt intended cover real time systems 
closer examination shows extension just able deal reactive systems 
problem uml far missing semantic basis huge language 
topic ongoing research provide semantics suitable subsets uml 
believe best chances founded combination specification techniques researched individually 
example clear combination specification techniques csp oz 
extend csp oz aspect continuous real time 
done combining suitable way dc 
resulting specification language call csp oz dc 
organised follows 
section introduces main constructs csp oz dc 
section describes semantics combination 
section shows semantics utilized partially automatic verification properties csp oz dc specifications applies approach example radio controlled railway crossing 
conclude section 
psfrag replacements psfrag replacements combination csp oz dc section introduce new combined formalism examples taken case study radio controlled railway crossings see fig 

main issue study remotely operate points crossings radio communication keeping safety standard 
crossing fig 

case study radio controlled railway crossings point fig 
surveys controller architecture small part case study dealing safety level crossing 
diagram shows components connected communication channels 
discuss cross controller purpose secure crossing requests issued trains radio controller 
consider multi track level crossing request track set communication 
request withdrawn time clear communication 
cross controller starts securing cycle request 
continues cycle request withdrawn time 
crossing secured communicate secured events requested tracks 
train passes crossing wheel counter notice trigger passed communication 
requests pending crossing released 
wheel counter passed track requested tracks cross controller setlight light radio controller gate lights fig 

controller architecture set clear track secured track case study part priority research program integration specification techniques applications engineering german research council dfg tfs cs tu berlin de spp index html 
specify cross controller concepts handled described 
cross controller communicates components radio controller 
order communications easily specified csp mutually recursive process equations 
main equation distinguished process identifier main 
cross controller main assigned setlight yellow setlight red secure secure secured secure free setlight wait main symbol ordinary equals symbol distinguish csp process equations equations 
communication assigned local enabled request crossing pending see fig 

crossing secured steps switch yellow red light close gate 
process waits confirmation form gate closed 
crossing reached secure state behaviour modelled process secure 
waits requests cleared corresponding train passed gate 
gate opens lights switched 
cross controller multi track crossings 
needs remember set requested tracks 
handling data state information easily done object oz 
state space denoted unnamed schema track initial state described init schema init communication event set received radio controller state needs updated 
csp oz easy link data operation communication writing schema name com set specifying operation associated communication event com set 
track 
line schema declares operation may change line declares parameter decorated signify input parameter 
notice naming convention corresponds nicely naming conventions csp output channel set input schema 
state transformation expressed predicate relating state state transformation 
second state distinguished decorating prime 
case predicate states element 
added set requested tracks 
embedded controllers important aspect real time constraints 
case study want communication events occur certain time bounds 
hand events occur early 
means need timed progress stability constraints 
specifying real time constrains duration calculus dc 
dc state assertions describe time dependent properties observables obs time duration terms describe interval real values 
name calculus stems terms form measuring duration state assertion accumulated time holds considered interval 
simplest duration term symbol abbreviating denoting length interval 
duration formulae describe interval properties 
example abbreviates specifies holds non point interval 
sequential behaviour modelled chop operator formula specifies holds 
formula abbreviates true true expresses subinterval holds 
dual abbreviates states holds subintervals 
subset dc called due idioms time followed leads intuitively expresses pattern formula observed followed interval holds 
leads form pattern required length form bounded length consider variants formulae check event ev counting number occurrences ev ct ev ct ev cross controller require example progress constraint en assigned assigned true stating communication assigned enabled occur second 
example stability constraint consider dc formula en setlight red en setlight red en setlight red stating setlight red communication stay enabled seconds occur 
basic building block combined formalism csp oz dc class 
syntax csp oz new dc part see fig 
complete specification class 
communication channels class declared 
channel type restricting values communicate 
local channels visible inside class interaction csp dc parts 
second csp part follows system recursive process equations 
third part consists state space init schema communication schemas specifying state changes corresponding communication event occurs 
horizontal line dc part stated 
describe architectures fig 
classes combined larger specifications csp operators parallel composition hiding renaming 
semantics class csp oz dc specification denotes time dependent process 
section describe define process transformational way 
semantics constituents recalling semantic domains constituent specification techniques 
standard semantics untimed csp fd semantics failures divergence 
failure pair consisting finite sequence trace seq comm set comm communications socalled refusal set comm 
intuitively failure describes engaging trace process refuse engage communications refusal sets allow fine distinctions different nondeterministic process behaviour essential obtaining compositional definition parallel composition csp setting synchronous communication want observe deadlocks 
formally define sets traces seq comm refusals comm failures traces refusals 
divergence trace process engage infinite sequence internal actions 
fd semantics csp mappings csp failures csp traces 
csp process write fd 
certain formedness conditions relate values see 
fd semantics track color yellow red chan set clear passed secured track chan setlight color 
color chan status 
chan status 
local chan assigned free wait main assigned setlight yellow setlight red secure secure secured secure free setlight wait main track com set 
track 
com assigned en assigned en setlight yellow init com clear 
track 
com free assigned setlight yellow true true en free com secured 
track 
com passed 
track 
free true en setlight red en setlight red en setlight red en setlight red setlight red true en setlight en setlight en setlight en setlight setlight true en en en en true en true en wait en wait en wait en wait wait true fig 

multi track level crossing induces notion process refinement denoted fd csp processes relation defined follows fd iff intuitively fd means refines deterministic defined negative information refusal sets positive information process behaviour terms called acceptance sets 
trace acceptance set comm describes set communications possible set initial communications largest acceptance set acceptance sets due hennessy de nicola developed approach testing processes resulted process model equivalent failures divergence model acceptance sets refusal sets 
acceptance sets satisfy certain closure properties see 
example closed union 
formally acceptances comm process semantics csp traces acceptances acceptance sets refusal sets 
ad semantics process semantics write ad csp process proposition process refinement proved proposition 
fd iff lose process information acceptance sets refusal sets 
approach verification acceptance sets shall represent semantics untimed csp object oz describes state spaces collections typed variables say type dx possible transformation help action predicates example decorated version represents value transformation 
language comes usual notion data refinement 
duration calculus dc specifies properties observables obs interpreted finitely varying functions form time continuous time domain time data domain finitely varying means assume finitely different values finite time interval 
modelling real time systems dc refinement boils logical implication 
untimed semantics csp oz classes untimed semantics combination csp oz defined 
idea csp oz class denotes process semantic model csp 
achieved transforming part class csp process runs parallel communicates csp part class 
consider csp oz class interface local channels csp part part written horizontally spec part form st state space init st initial condition com st st 
communication schema notation com st st indicates communication schema relates state st successor state st input parameters 
output parameters 
part class transformed csp process defined system parametrised recursive equations indexed csp operators internal choice alternative composition st init st st st 
inputs 
outputs st com st st 
outputs st 
st com st st informally start state st satisfying init st 
st ready communication event 
channel input values 
communication schema com st st satisfiable output values 
successor state st input values 

st internally chosen yield 
recursive call st 
input output channels modelled subtle interplay csp alternative choice 
runs parallel explicit csp process class events parallel composition events semantics class defined fd fd events events local channels hidden 
hiding untimed csp communications occur autonomously delay 
hiding cause nondeterminism divergence 
process semantics csp oz refinement notion fd immediately available csp oz 
guidelines combining specification techniques refinement compositionality refinement parts imply refinement 
csp oz shown theorem 
process refinement fd implies refinement csp oz spec fd spec data refinement refinement relation implies refinement csp oz spec fd spec timed semantics csp oz dc classes semantic idea combination csp oz dc class denotes timed process 
lift semantics csp oz level time dependent observables 
timed setting behaviour internal actions studied carefully 
distinguish internal actions inherited form untimed csp setting internal wait actions induced hiding communications certain timing behaviour 
internal actions take time eliminated accordance fd semantics possibly inducing nondeterminism divergence internal wait actions time pass visible communication occur 
infinite sequence actions equivalent divergence infinite sequence wait actions equivalent deadlock 
simplicity consider case untimed part diverges 
semantics csp oz dc associate specification combined language timed process consisting set time dependent traces time dependent acceptances atime csp oz dc time traces time acceptances csp oz dc specification semantics atime described dc formula observables tr acc interpreted finitely varying functions tri time traces time acceptances 
dc formula denotes set interpretations tr acc formula true identified atime 
explain details csp oz dc class augments untimed csp oz class additional timing part expressed dc untimed components dc part shall expand horizontally spec 
semantics obtained csp process defined csp oz class interpreting setting time dependent observables tr acc conjoining time dependent restrictions expressed dc part untimed process semantics terms tr acc allow time dependent behaviour 
precisely untimed acceptance semantics assumed divergence free traces acceptances define timed semantics dc formula atime fu observables tr acc subformulae fu follows fu tr acc requires values observables tr acc taken untimed acceptance semantics tr true requires initially trace empty 
tr tr requires trace grow communication event occurs time 
modality quantifies subintervals time interval chop operator interval temporal logic dc 
subformula tr tr holds time interval non point interval tr assumes value second non point interval value differ communication event 
restriction finite variability require finitely communication events occur finite time interval communication event occurs time 
consequently semantics non zero time passes successive events 
tr tr tr true acc tr requires communication occur prior appearance acceptance set 
dc part restrict behaviour time dependent manner 
limited access observables tr acc expressions ct en set communication events 
definition ct comm comm ct tr ct counts number occurrences events trace tr 
en comm comm en acc en records events accepted 
definition enabledness acceptance sets easier refusals 
motivated choice semantic representation 
single communication event write ct en ct en 
expressions specify timing constraints visible communications 
altogether semantics timed class formula atime hide fu communications local channels hidden 
dc formula observables tr acc define hide tr acc tr squash tr acc acc tr tr acc acc hide dc formula observables tr acc values linked substitution tr tr acc acc original values observables describes timed semantics csp hiding operator 
timed semantics system specifications system specifications obtained combining class specifications csp operators parallel composition hiding renaming 
typical specification form parallel composition modelled parallel sets interface events 
dc formulae observables tr acc semantics parallel composition expressed similarly dc formula tr tr acc acc acc tr seq tr tr tr tr acc acc acc acc acc acc tr tr acc acc tr tr acc acc hiding denoted communication events internal 
semantically hiding defined operator hide introduced 
renaming denoted relation events rename communication events 
semantic definition straightforward 
refinement relation classes specifications interface modelled reverse logical implication semantic domain class refines class abbreviated atime atime holds 
show refinement compositionality holds csp oz dc 
theorem 
process refinement fd implies refinement csp oz dc spec spec data refinement refinement relation implies refinement csp oz dc spec spec time constraint refinement implies refinement csp oz dc spec spec proof 
statements immediate consequences theorem monotonicity fu refinements untimed class statement follows conjunctive form atime 
theorem possible reuse verification techniques components csp oz dc specification prove refinement results specification 
desired property specification depends semantic interplay components sophisticated verification techniques needed 
develop technique 
verification exploit style semantics partially automatic verification properties csp oz dc specifications satisfy restrictions csp part represents finite state process oz data types finite dc part obeys certain patterns described 
idea follows 
class spec proceed steps represent untimed process spec fdr csp input language fdr model checker csp 
fdr model checker output transition system tsu acceptance sets 
transform transition system tsu timed automaton ac representing timing restrictions dc semantics 
verify properties class applying model checker uppaal ac step follows approach 
steps currently require user interaction steps proceed fully automatic 
dc patterns timing restrictions handled step new variants dc introduced 
event set appearing subscript chop operator followed operator cf 
section indicates event happens corresponding chop point 
formally ct ct ct ct formula states stability constraint applies events set happen ct ct tool step developed supports dc patterns chop leads chop leads time state assertions 
event sets optional omitted 
upper bound formulas omitted 
tool implements algorithm applies dc formulae patterns transform transition system produced step timed automaton 
example show fig 
pseudo code leads pattern 
step algorithm adds new clock measure time transition system stayed state executing event state clock grow dc formula violated 
add step corresponding state invariant states 
clock needs reset state entered outside step event occurs pattern 
introduce new clock 
states add invariant ev 
transition tr add reset tr ev add reset tr ev add guard tr fig 

algorithm leads pattern control stays step 
outgoing events lead state communicate event happen time elapsed 
corresponding guard added step enriching transition system generated fdr tool adds timed supervisor automaton running parallel 
supervisor serves purposes ensures agreement dc semantics defined section non zero time passes successive events second hides local channels visible processes 
case study apply verification procedure case study introduced section 
result manual step fig 

shows fdr csp specification input language fdr model checker representing csp part combined cross controller specification fig 

representation constant declaration channel declaration csp part straightforward 
locations syntax needs adapted fdr 
transformation part csp process described section takes complete state parameter 
offers external choice communications corresponding schemas original specification 
readability applied simplifications part 
csp part put parallel synchronize common alphabet 
steps performed automatically tool 
step uses fdr model checker create compact finite transition system specification fig 

result sketched fig 

graph contains states transitions 
readable transitions labelled 
graph shaped cycle corresponds cyclic behaviour securing crossing releasing 
csp state expanded substates corresponding possible values variable part 
closer view top left part graph fig 

passed transitions omitted places clear transitions 
note initial state top constants track datatype color yellow red datatype channels channel set clear secured passed track channel setlight color channel channel assigned free wait class csp part main assigned setlight yellow setlight red secure secure secured secure free setlight wait main part diff track set union clear diff passed diff secured assigned free put csp part parallel main secured assigned free fig 

fdr csp specification cross controller detailed graph outgoing assigned transition 
part blocks transition empty 
transitions deterministic case study state acceptance set contains outgoing events 
step dc formulae applied 
dc formula new clock introduced new guards resets added transition 
tool starts dc formula en assigned true assigned instance leads pattern 
states en assigned holds states fig 
outgoing assigned transition 
assigned setlight yellow wait setlight red setlight free secured fig 

transition system generated fdr set set clear clear clear clear set set assigned assigned assigned wait wait wait fig 

detailed view transition system wait transitions depicted detailed view changed 
applying algorithm fig 
yields timed automaton depicted fig 

set set clear clear wait inv inv set clear clear set assigned assigned assigned inv wait wait fig 

timed automaton resulting dc formula wait applying dc formulae step terminates timed automaton representing complete csp oz dc class 
altogether algorithm adds clocks lot resets guards 
complete graph easily readable verify certain properties hold model checker uppaal 
model checking consider real time property train requests track clear request passes crossing get secured communication certain time wish determine exact value experimentally 
verify property build test automaton 
small timed automaton communicates cross controller channels defined csp oz dc specification 
identity track matter assume test automaton deals track 
link set clear passed secured communication events 
instruct tool hide communications occur time 
test automaton fig 

initial state idle automaton able communicate event 
communicating set resets clock waiting switches busy state 
state waits communicate secured 
returns idle state 
automaton put parallel cross controller 
clear passed secured set waiting idle busy secured fig 

test automaton ask uppaal reachable states test automaton idle state clock smaller integer constant 
query expressed uppaal syntax follows idle waiting applying cross controller uppaal quickly generates counter example showing property hold 
trace contains csp events possible compare csp oz dc specification 
turns property violated progress conditions 
need assumptions gate close open certain time bound say seconds train receive secured communication certain time 
note assumptions environment controller 
simplicity add specification 
formulae add en true en true en secured secured true run uppaal check different values choose value smaller uppaal finds counter example seconds 
property satisfied 
experimental results table fig 
gives timings steps 
times measured ultrasparc ii mhz 
steps verification procedure quite fast 
cross controller step needs second step needs seconds apply twelve dc formulae original specification plus formulae environment transition system generated step 
model checking step time consuming counter example exists reason difference columns 
counter example uppaal investigate complete state space 
consider larger system tracks 
adding track doubles state space resulting automaton states yields times transitions 
shown fig 
steps take time factor 
number step step step step tracks fig 

verification time seconds 
related 
closest way combining specification techniques real time object 
classes combination look similar lack csp dc part 
seen case study csp part convenient specifying sequencing constraints communications events 
furthermore csp offers parallel composition hiding structuring larger csp oz dc specifications 
real time object timing properties specified interval set theoretic notation 
interval approach terms researched duration calculus 
semantics real time object terms time dependent traces consider time dependent acceptances due presence csp 
related combination timed csp object 
obviously dc involved combination 
constructs timed csp specify time dependencies communications 
difference semantic integration csp object differs 
object operation schema denotes process csp oz dc specifies effect communication event state 
verification 
shown exploit transformational semantics csp oz dc partially automatic verification properties combined specifications 
developed novel systematic transformation csp oz dc classes timed automata model checked uppaal tool 
poses question timed automata semantics produced algorithm described section equivalent dc semantics section 
proof equivalence left 
notice similar equivalence proofs timed automata dc semantics 
perspectives 
automatic verification works finite data types part certain patterns timing constraints dc part 
infinite data general dc formula need interactive verification techniques 
dc part restricts timing communications 
general restrict timed behaviour class state 
pursue idea current state part observable special communication 

christian implemented algorithm transforming fdr transition systems dc patterns uppaal timed automata 

bengtsson larsen larsson pettersson wang yi 
uppaal tool suite automatic verification real time systems 
alur henzinger editors hybrid systems iii verification control volume lncs pages 
springer 

booch rumbaugh jacobson 
unified modeling language user guide 
object technology series 
addison wesley 

davies schneider 
brief history timed csp 
theoretical computer science 


plc automata new class implementable real time automata 
theoretical computer science 

vaandrager 
operational logical semantics polling real time systems 
ravn rischel editors volume lncs pages 
springer 


modelling verifying cash point service moby plc 
formal aspects computing 

hayes martin 
set theoretic model real time specification reasoning 
jeuring editor mathematics program construction volume lncs pages 
springer 

fischer 
csp oz combination object csp 
bowman derrick editors formal methods open object distributed systems volume pages 
chapman hall 

fischer 
combination implementation processes data csp oz java 
phd thesis bericht nr 
university oldenburg april 

fischer 
model checking csp oz specifications fdr 
araki taguchi editors integrated formal methods pages 
springer 

formal systems europe failures divergence refinement fdr dec 

hansen zhou 
duration calculus logical foundations 
formal aspects computing 

hoare fr ller 
olderog hansen ravn rischel 
provably correct systems 
langmaack 
de roever editors formal techniques real time fault tolerant systems volume lncs pages 
springer 


proof support duration calculus 
phd thesis dept inform 
technology tech 
univ denmark june 
tech 
report tr 

hennessy 
algebraic theory processes 
mit press 

hoare 
communicating sequential processes 
cacm 

hoare 
communicating sequential processes 
prentice hall 

hoare 
unifying theories programming 
prentice hall 


hol integrated formal support environment isabelle hol 
phd thesis univ bremen 
shaker verlag aachen 

luenberger 
dynamic systems 
theory models applications 
wiley 

dong 
blending object timed csp 
futatsugi kemmerer editors th international conference software engineering icse pages 
ieee computer society press 

dong 
sensors actuators 
wing woodcock davies editors fm formal methods volume lncs pages 
springer 

moszkowski 
temporal logic multi level reasoning hardware 
ieee computer 

moszkowski 
executing temporal logic programs 
cambridge univ press 

de nicola hennessy 
testing equivalences processes 
theoretical computer science 


olderog ravn refining system requirements program specifications 
heitmeyer mandrioli editors formal methods real time computing pages 
wiley 

ravn 
design embedded real time computing systems 
technical report id tr tech 
univ denmark 
thesis doctor 

ravn rischel hansen 
specifying verifying requirements real time systems 
ieee trans 
software engineering 

roscoe 
model checking csp 
roscoe editor classical mind essays honour hoare pages 
prentice hall 

roscoe 
theory practice concurrency 
prentice hall 


system 
bowen hinchey till editors zum volume lncs pages 
springer 

santen 
mechanized logical model object oriented specification 
phd thesis tech 
univ berlin juli 
shaker verlag aachen 


olderog 
transformational design real time systems part requirements program specifications 
acta inform 

selic rumbaugh 
uml modeling complex real time systems 
technical report 

verification real time logic 
phd thesis dept comp 
sci tech 
univ denmark nov 
tech 
report id tr 

smith 
object specification language 
kluwer academic publisher 

smith hayes 
real time object 
araki taguchi editors integrated formal methods pages 
springer 

spivey 
notation manual 
prentice hall international series computer science nd edition 

woodcock davies 
specification refinement proof 
prentice hall 

zhou hoare ravn 
calculus durations 
information processing letters 
