debugging overconstrained declarative models unsatisfiable cores ilya mit csail cambridge ma ilya shl mit edu robert mit csail cambridge ma mit edu daniel jackson mit csail cambridge ma lcs mit edu sridharan uc berkeley berkeley ca cs berkeley edu mit csail cambridge ma mit edu declarative models conjunction negation freely susceptible unintentional overconstraint 
core extraction new analysis mitigates problem context checker reduction sat 
exploits developed facility sat solvers provides unsatisfiable core unsatisfiable set clauses smaller clause set 
unsatisfiable core mapped back syntax original model showing user fragments model irrelevant 
information great help discovering localizing overconstraint cases pinpoints immediately 
construction mapping generalized modelling language justification soundness claim marked portions model irrelevant 
experiences applying core extraction variety existing models discussed 

benefits declarative modelling brings risk overconstraint 
overconstrained model trivially satisfies safety properties extreme bad transitions fact transitions 
risk overconstraint declarative specification languages vdm recognized long ago limited automatic tool support exists mitigate 
preconditions implicit regarded style operation precondition appear explicitly text operation schema 
discipline results proof obligations explicit conditions imply implicit preconditions 
checking obligations easier checking property specification similarly vdm implementability criterion leads similar obligation 
difficulty discharging proof obligations automatically tools vdm simply extract proof obligations leave user determine validity 
analysis tools support simulation checking liveness properties mitigate problem overconstraint risk remains safety property may hold subtle overconstraint may noticed host liveness checks passed 
counterexamples liveness may ruled overconstraint 
modeler suspects overconstraint identifying conflicting constraints frustrating 
currently systematic technique finding causes conflict declarative model manually disable individual constraints culprits identified 
task lengthy runs risk introducing new errors model 
model checker provides help user finding overconstraint report version model overconstrained 
discussed section testing addresses problem apply declarative models helps debug overconstrained properties overconstrained models 
presents core extraction new approach addressing problem declarative models 
satisfiability solvers developed facility extracting unsatisfiable core cnf formula subset clause set sufficient cause contradiction 
declarative model analyses cast satisfiability instances unsatisfiable core mapped back model 
words identify parts model responsible producing unsatisfiable cnf core 
parts suffice may harder precondition operation involves higher order quantification state components 
produce overconstraint identification help user find overconstraint 
showing unsatisfiable core may alert user unexpected presence overconstraint 
entire formula relevant necessary preventing counterexamples property checked raise confidence system description overconstrained safety property vacuous holds bounded domain 
analysis highlights small part system description highlight property checked indicates strong possibility model unintentionally overconstrained 
highlights safety property suggests property tautology vacuously satisfied 
presentation set context analysis order relational logic flavor model checking 
short system specified formula models correspond behaviours system assign values relations various arities 
safety property checked conjoining negation formula solutions new formula counterexamples 
solutions model correct property checked holds specified scope 
formula translated propositional formula bounding carrier sets relations draw values atoms 
models propositional formula sat solver translated back relational domain display user 
analysis scheme described previously counterexample information 
lack information complaint users tool 
developed techniques context declarative modeling language alloy case studies examples 
technique implementation intentionally kept general sufficiently modular apply language sat fashion techniques apply related settings bmc planning 
provide simple semantic guarantee correctness assuring user deleting constraints identified irrelevant preserve unsatisfiability model 
contributions include recognition problem overconstraint declarative models discussion existing techniques including testing techniques implementation apply non translations structure lost useful larger pinpoint source overconstraint extracted core 
checking liveness properties eliminate simple effective method discovering localizing overconstraint context checkers reduction sat exploiting unsatisfied core facility sat solvers justification semantic guarantee analysis level source model generalized modelling language reports preliminary experiments applying implementation method variety models demonstrating promise highlighting challenges 
problem overconstraint benefits core extraction illustrated toy example section 
framework described generic constraint language argument soundness section 
variety experiences implementation core extraction discussed section 
compare technique testing provides similar information operational modelers section 
readers unfamiliar declarative modeling appendix explains relationship operational modeling circumstances particularly beneficial 

toy example give flavor declarative modelling illustrate new analysis consider problem checking design web caching scheme 
challenge design get operation obtains page owner cache 
correctness get contingent assumptions freshness pages delivered owner record invariant 
complete albeit simplified alloy model problem shown module sig time sig url server records page url time 
sig server page time url 
page page expiration modeled set times page fresh 
sig page life set time page recorded server fresh fact server time url page page life cache may drop add entries owner stale pages may remain fun get time cache owner server url page cache page cache page owner page url page life cache owner page result get fresh page assert freshness time cache owner server url page get cache owner life check freshness detailed knowledge alloy needed grasp point example explanation order 
fuller explanation alloy may 
signature labelled sig introduces set atoms time atoms representing moments time url url documents page contents documents server caches owners 
field declared signature simply relation arity columns sets implicitly leftmost position signature 
life binary relation page time associating page set times current page relation arity containing tuple server maps url page time question mark declaration field page indicates page associated server time url 
remaining paragraphs model formulas play different roles 
assertion formula conjectured valid freshness asserts result get fresh page 
assertion function get parameterized formula simply inlined implicitly global facts 
arguments times servers cache owner url page 
case fact implicitly applied states servers yield fresh pages 
command check freshness instructs tool search counterexamples assertion default search conducted scope limits basic set atoms 
formulas fact function assertion written ascii form order logic enriched relational operators 
keyword subset operator set union set subtraction 
dot square brackets variants single relational image operator different precedence argument order 
example expression cache owner page things takes union sets cache owner takes image relation page takes image time relation yielding relation url pages representing aggregate contents cache server time takes image url relation gives set pages associated url cache owner time 
times represent moment just just get occurs 
function read follows mapping url pages cache cache page subset union mapping cache page mapping owner owner page minus entries pages longer fresh url page life 
words cache liberty drop entries add entries owner long stale pages remain 
fact crucial invariant recording assumption pages server fresh 
counterexample assertion model negation 
model gives values set relation constants 
tool quantifiers gives witnesses 
case example assertion valid tool give values relations page life witnesses particular times cache owner page url 
note built notion state machine states operation obtained examining relations map times 
case counterexample counterexample larger scope 
run unsat core analysis output syntax tree annotated roughly speaking information nodes relevant representing formulas free variables values variables 
examine tree top looking formulas deemed irrelevant 
surprisingly entire line get irrelevant page may taken cache specified second line cache updated irrelevant 
wrong 
check page taken new old value cache 
problem second line get correctly refers see blunder fact states servers yield fresh pages including cache assertion follows trivially 
absurd error fact author error unwittingly development example started elaborate model distinguished caches servers simplified erroneously 
fix model partition set servers caches owners modify fact constrain owners declare arguments get belong appropriate subsets module sig time sig url sig server page time url 
page part sig cache owner extends server sig page life set time fact owner time url page page life fun get time cache owner url page page page page url page life page assert freshness time cache owner url page get life check freshness running analysis shows formulas function fact relevant 
expression page page line get marked irrelevant 
sense stale pages removed cache set subtraction follows source additional pages irrelevant 
remaining formulas deemed relevant gives confidence model longer vacuous irrelevance particular expression suggests assertion authenticity page needed 
example suppose erroneously wrote page second line get page taken cache owner 
case fact entirety irrelevant cache page drawn purged stale entries 

core extraction algorithm core extraction run formulas unsatisfiable simulations behaviours checks counterexamples 
runs fully automatically user intervention 
result identification fragments original model irrelevant demonstrating unsatisfiability 
implementation fragments shown colored syntax tree synchronized text editor 
irrelevant fragment colored red may subformula expression 
quantified formulas tree indicates values bound variables body formula irrelevant 
section presents algorithm implementation generalized form 
starts syntax tree ast quantifiers implementation involves additional step mapping back tree resulting grounding quantifiers original syntax tree 
correctness criterion algorithm claim irrelevance sound 
precisely function computed ast node marked irrelevant replaced function leaves ast formed particular constant function appropriate type making resulting ast satisfiable 
irrelevant child node example read constant true 
cases means node removed entirely 
roadmap algorithm fits tool algorithm shown 

constraint language define constraint language expressing formulas collection variables formula expressed syntax tree node computes predefined function children 
root node computes boolean function value formula 
leaf nodes variables 
denote universe computable values constraint language ast model user sat solver sat solver ast browser showing relevant subset altered ast unsatisfiable cnf core annotated cnf clauses clauses cnf cnf conversion boolean encoding allocation variable cnf conversion allocation boolean encoding variable model analyze change delete nodes marked irrelevant analyze model highlight ast nodes yielded clauses core satisfiability subset analysis modeling user view core extraction algorithm sat solver superset satisfiability guarantee 
roadmap core extraction 
model created constraint language reducible sat structure preserving fashion 
translation cnf clause generated annotated ast node clause produced 
sat solver black box determines model unsatisfiable extracts unsatisfiable core subset cnf clauses unsatisfiable 
core mapped back original model marking relevant part ast indicated annotation clause cnf core 
analysis complete 
remaining steps concern guarantees user markings ast mean executed normal tool 
user guaranteed changing unmarked non relevant portions ast leave model unsatisfiable 
specifically cnf corresponding altered ast superset unsatisfiable core previously extracted unsatisfiable 
set node functions elements form trees defined ree ree assignment induces assignment ast node value leaf node value ast variable node value node ree ch computed applying node sets determined semantics particular constraint language 
example alloy contains relational boolean values includes relational boolean operators 
particular semantics unimportant 
function sequence values assigned children ch 
testing satisfiability ast involves finding assignment variables induces value true root node determining exists 

translation satisfiability formula tested converting boolean formula conjunctive normal form cnf 
translation framework illustrated 
convert ast cnf allocate ast node ree sequence boolean variables bv bv representing node value 
sequences boolean variables allocated nodes identical leaf nodes ast variable sequences disjoint 
define functions enc bool dec bool encoding decoding values binary strings 
assignment boolean values boolean variables allocated ast nodes corresponds assigning value ast node 
assignment values ast nodes consistent value non leaf node equals result applying node node function sequence values assigned node children 
translate ast cnf generating cnf clauses boolean variables allocated ast nodes conjunction clauses true assignment boolean variables iff boolean assignment corresponds consistent assignment values ast nodes 
translation done separately ast node 
node produce set cnf clauses relating boolean variables allocated node boolean variables allocated node children 
intuitively clauses true iff value represented nodes boolean variables equals result applying node node function sequence values represented boolean variables allocated node children 
clauses output translating ast node depend node function node computes children boolean variables allocated node children 
node function define corresponding cnf translation function bv bv clause takes sequence boolean variables domain bv corresponding result function sequence sequences boolean variables corresponding arguments returns set clauses encode function cnf 
correctness function justified respect encoding function semantics result evaluates true iff boolean variables allocated result encode value computed applying argument values encoded boolean variables allocated arguments 
individual translation functions translate tree 
function transl clause translates ast node cnf defined transl ree ch bv map bv ch cnf translation entire ast just union translations nodes ree nodes transl correct translation cnf requires node boolean assignment ba bv bool satisfying transl map dec map cv map ba cv map bv ch dec map ba bv node computes node function children ch 
test satisfiability constrain boolean variable allocated root represent value true adding appropriate unit clauses 

mapping back suppose cnf translated ast unsatisfiable sat solver identifies unsatisfiable core define predicate bool ast nodes true nodes translations contributed clauses unsatisfiable core transl claim node holds replace node function arbitrary node function making ast satisfiable 
show argue cnf translation mutated ast include unsatisfiable core 
proof function bv allocates boolean variables ast nodes depend node functions sequence boolean variables allocated ast node depends structure ast position node ast 
sequences boolean variables allocated ast nodes mutated ast original ast 
node node function changed transl output clause set 
node clause set contributed core node function transl output clause set node 
clause unsatisfiable core translation mutated ast meaning mutated ast unsatisfiable 

complications description ast clear implemented scheme alloy applied straightforwardly constraint language reduced sat 
description translation likewise allows accommodate advanced translations 
alloy analyzer example identifies opportunities sharing subformulas ast fact tree dag 
modelled having bv function allocate boolean variables 
root true 
translation ast cnf mapping back unsatisfiable core 
ast trivially unsatisfiable alloy formula form 
node sequence boolean variables allocated represent node value 
inner node translation produces set clauses relating node boolean variables boolean variables 
highlighted clauses form unsatisfiable core mapped back highlighted ast nodes 
different ast nodes 
similarly tools generate cnf analyzer uses auxiliary boolean variables prevent cnf explosion modeled having bv allocate additional boolean variables ast node 

experience evaluate technique performed variety experiments small studies 
examined logs common mistakes modelling identified detected core extraction 
second revisited models suffered overconstraint construction reinstated ran core extractor see fared 
describe case worked 
third ran extractor models expectation overconstraint surprise serious flaws 

common mistakes section describe pitfalls observed reported users common alloy modelling show core extraction helps highlight 
mistakes formalism course interesting true conceptual mistakes consequences just painful just deterrent potential modelers 
arguably reflect flaws language design language perfect include similar potentials error 
pitfall assuming variables different names distinct values quantifier may bound variables intended 
model signatures person name relation name person name write person name name say person unique name 
formula false set person empty satisfied extracted core include property checked constraint requiring non emptiness person quantified formula 
writing model overconstrained instances possible property checked may omitted extracted core 
case exists core contain property checked guarantee particular core extracted 
person person name name result larger core suggesting correct sensible 
pitfall omitting special case final state trace similar blunder trace models modeler constraints transitions states 
lift constraint state pairs constraint traces analyze traces bounded model checking 
example lifting formula state formula transition relation relation maps state successor 
particular attempt flawed yield empty trace set 
set states finite usually bound machine diameter computed analyzer help 
state empty set making fact states false 
classic error modelers just prone making mistake programmers 
extracted core show body quantified formula relevant state presence state facts fail 
big red flag user presumably expects states relevant 
correct formula state pitfall confusing constraints intended novice modellers mistake writing constraint explicitly implied constraints system 
consider leader election algorithm allow leader time 
paradigm modelling traces algorithms beginner may write erroneous declaration sig state leader option participant 
option keyword constrains leader map state atom participant 
correct declaration set keyword allowing number leader participants state forcing constraints enforce property leader 
checking property core error declaration obvious contain constraint generated option 

locating known took flawed versions models known suffer overconstraint extracted cores 
tests represent hardest cases know 
simpler cases overconstraint record core extraction isolate immediately took hours track manually 
iolus successful case involved analysis performed iolus scheme secure multicasting 
iolus nodes multicast messages nodes group membership changes dynamically 
scalability achieved partitioning groups subgroups arranged tree key distribution server maintaining local encryption key shared members subgroup 
member joins leaves subgroup generates new local key distributes updated list subgroup members 
modelled specifying member joins leaves key shared new members 
mistake model said key shared members entire group including nodes contained subgroups 
severely restricted trace set potentially masking errors 
attempted detect overconstraint constraint core functionality 
checked assertion stating node read messages sent group node group member correctness properties system 
counterexample unfortunately extracted core included constraints model 
result explained follows 
error model partial overconstraint error excludes legal traces system allows traces violating correctness property 
surprising constraints system required establish correctness 
just core contains model unfortunately imply model free overconstraint 
method finding situation check correctness properties restricted set traces expected constraints model core 
iolus model attempted check correctness property traces key distribution servers constraining size relations typical way restrict search space 
additional restriction core longer included constraints defining transitions system formula stating property clear indication overconstraint 
observations noted 
overconstraint partial subtle case thinking user necessary find source constraint core identifies existence 
issue fundamental formulas model system core help identify eliminating irrelevant formulas consideration reason remaining formulas contradict may obvious 
second process checking assertions restricted spaces find lacks automation important advantages process finding manually core extraction 
previously user suspected overconstraint model search explicitly checking classes legal traces ruled system 
new method inspecting cores restricted sets traces gives useful information class traces entirely ruled model core may show important constraints irrelevant class showing overconstraint lies 
model widely studied tree identify protocol suffered modelling blunder produced subtle overconstraint 
declarative form model allowed include topological constraint links nodes form connected acyclic graph analysis cover possible topologies involving number nodes 
model checking analyses contrast particular topology 
model reified operations entities declarations sig op disj sig extends op node node disj sig extends op link link static part sig elect extends static part sig resolve extends operations classified node link operations associated particular node link respectively 
fragment transition relation specification shows fun trans state op op op elect mode op node waiting mode op node elected analysis model produced bewildering results 
nodes trace repeated states longer states suggesting machine diameter 
assertion node elected bound violated 
subset traces ruled overconstraint 
retrospect flaw easy see 
modeller got confused atoms signature op represented operation types operation instances 
thinking types added keyword static declarations limiting set single element 
confusing exacerbated presence message type partitioned requests acknowledgments sufficient exactly message type contained information operation carries node link 
consequence operation performed single node link topologies ruled shortest traces 
core extraction give useful information 
trimmed model smaller smaller fragments aware location overconstraint 
way core extraction helped pruning pinpoint problem 
finding sort challenge 

discovered running core extractor revealed flaws models believed overconstrained 
explain 
different version tree identify protocol added stuttering operation minute failed adjust scopes analyses 
declaration operations read sig op static part sig init elect stutter extends op listing operation types 
command specified check op msg node link queue state incorrectly bounding number operation types 
declaration operations satisfied glaring overconstraint 
core extraction immediately showing irrelevant declaration 
imagine language improvements 
built enumerated type construct eliminate specific example overconstraint im possible analyzer detect constraints scopes general type overconstraint exist 
careless errors described section occur programs readily models 
eliminating errors models eliminate programs 
eliminating careless errors models may enable discovery subtler errors models missed 
finding errors models help prevent errors occurring programs 

performance core extraction modification zchaff satisfiability solver added core extraction functionality 
zchaff performance supports interactive identification 
modified solver performance unsatisfiable instances comparable performance original solver 
done experiments solver preliminary experiments indicate performance similar zchaff 
unsatisfiable core refined iterating solver core pruning away additional clauses irrelevant unsatisfiability 
running iterations reduce core 
subsequent iterations run smaller cnf files overhead iteration insignificant especially severely overconstrained models 
preliminary experiments significant benefit additional iterations terms portion model identified relevant 

related problem detecting property vacuously satisfied model addressed context temporal model checking 
temporal logic formula methods produce witness formula satisfied original formula vacuously satisfied 
vacuous satisfaction detected additional model checking run 
characteristics methods prevent solving problem overconstraint declarative models 
overconstraint occurs definition algorithm specification correctness properties 
published detection methods may alert user overconstraint showing entire correctness property irrelevant pinpoint location overconstraint model 
second methods described temporal logic formulas assume particular form formula require separate model checking run test irrelevance subformula 
limitations preclude published detection methods effective problem 

core extraction new analysis helps discover overconstraint declarative models 
utilizing unsatisfied core functionality sat solvers tool identifies set constraints model relevant preserving safety property exclusion seemingly relevant constraints set indicates overconstraint 
experience shown core extraction quickly identifies simple taken hours identify previously unnoticed months 
furthermore success applying core extraction subtle remains simplify debugging process case 
core extraction addresses key deficiency automatic analysis declarative models may useful application analyses rely sat planning bounded model checking 
supported nsf itr national defense science engineering graduate fellowship 
beer ben david eisner rodeh 
efficient detection temporal model checking 
formal methods system design 
biere cimatti clarke fujita zhu 
symbolic model checking sat procedures bdds 
design automation conference 
chockler kupferman vardi 
coverage metrics temporal logic model checking 
lecture notes computer science 
cimatti clarke giunchiglia roveri 
nusmv new symbolic model verifier 
proceeding international conference computer aided verification cav 
david dill andreas drexler yang 
protocol verification hardware design aid 
ieee international conference computer design vlsi computers processors pages 
goldberg 
fast robust sat solver 
proceedings design automation test europe date march 
goldberg 
verification proofs unsatisfiability cnf formulas 
proceedings design automation test europe date munich germany march 
holzmann 
model checker spin 
ieee trans 
software engineering 
ieee 
ieee standard high performance serial bus standard 
ieee aug 
jackson 
automating order relational logic 
proceedings acm sigsoft conference foundations software engineering san diego november 
jackson sridharan 
mechanism 
proceedings acm sigsoft symposium foundations software engineering fse september 
jones 
systematic software development vdm 
prentice hall upper saddle river nj usa 
kautz selman 
planning satisfiability 
proceedings tenth european conference artificial intelligence ecai 
khurshid jackson 
exploring design intentional naming scheme automatic constraint analyzer 
proceedings th ieee international conference automated software engineering ase september 
kupferman vardi 
detection temporal model checking 
conference correct hardware design verification methods pages 

iolus framework scalable secure multicasting 
proceedings acm sigcomm pages cannes september 
sridharan jackson 
exploiting subformula sharing automatic analysis quantified formulas 
ilya cc sharing ps may 
spivey 
notation manual nd ed 
prentice hall 

lightweight modelling automatic analysis multicast key management schemes 
master thesis massachusetts institute technology 
vardi fix grumberg 
enhanced detection linear temporal logic 
proceeding international conference computer aided verification cav 
zhang malik 
validating sat solvers independent resolution checker practical implementations applications 
proceedings design automation test europe date munich germany march 
appendix declarative modelling roughly speaking ways model transition system 
operational idiom transitions expressed assignment statements control flow conventional imperative program promela language spin model checker variant dijkstra guarded commands murphi smv 
declarative idiom transitions expressed constraints executions individual steps 
idea rooted early program verification operation specifications declarative languages vdm larch essentially pre post conditions hoare triples 
readers unfamiliar idioms may help think operational specification gives recipe constructing new states old ones declarative specification gives fact observed relationship old new states 
operational modeller asks happen declarative modeller asks recognize happened 
advantage operational idiom executability 
simulation random guided inputs user give useful feedback designer 
model checking ability generate state successor single computational step possible explore reachable state space depth search spin 
contrast declarative models viewed executable amenable automatic analysis general generating successors requires search 
developed analysis sat allows simulation systematic exploration declarative models 
common form analysis perform similar bounded model checking sat solver find traces violate specified properties 
fact earlier symbolic methods handle models declarative elements 
earliest versions smv example provided construct expressing transitions implicitly 
analysis symbolic hindered inability generate successors state constructively 
advantage declarative idiom expressibility 
kinds problem especially aspects system operational idiom natural direct 
cases especially software systems declarative idiom flexible natural surprisingly amenable analysis 
partial descriptions 
declarative idiom better supports partial descriptions 
operation interest 
study name server example lookup operation modelled analyzed operations storing distributing name records straightforward 
explicit invariant structure name database took place operations operational model define reachable states implicitly 
lookup operation written declaratively need account invariant generating initial states description essentially declarative 
underspecification 
need constrain model behaviour loosely arises ways 
arises implementation issues postponed ignored analysis cache protocol example establish correctness irrespective eviction policy 
arises analyzing family systems analysis check collection design style rules implies certain desirable properties system built conformance rules properties 
arises accounting unpredictable environment checking railway signalling protocol example possible train motions 
cases declarative description succinct natural operational idiom contrast require explicit enumeration possibilities 
cache eviction example specified saying resulting cache viewed set address value pairs subset original cache 
motion trains network specified saying new track segment occupied train old connected 
analyzing specifications 
specifications analysis subjects right 
easy mistakes writing specifications helps analyze properties directly check follows example generate executions specifications differ 
model specification written declarative language masking possible 
model fails properties want know problems correlated 
checking conjunction find fixing satisfies fix respect declarative analyzer helps refactoring fragment model specification compared candidate replacement equivalence 
non operational problems 
problems simply operational nature demand logical programmatic description 
alloy example check soundness refinement rule involved modelling state machines trace semantics checking rule related machines appropriately related semantics 
subjects described rule manner ontology models security policies software architectural styles example 
topology constraints 
particular aspect system declarative flavour 
example distributed algorithms designed network topology takes form ring tree 
declarative model constructed constrains network appropriately limit single topology 
analysis account executions acceptable topologies network bounded size 
example described section exploits 
avoiding initialization 
systems normal operation preceded initialization phase system configured 
operational description system suffer traces longer necessary initialization prefixes 
declarative description bypass initialization phase invariant captures possible results shortening traces 
result simpler description uncluttered details initialization efficient analysis bounded model checking analysis lower bound trace length reach states 
mechanisms give declarative modelling power conjunction negation bring curse risk overconstraint 
unfortunately easy write model fewer behaviours intended 
check safety property may pass offending behaviour accidentally ruled probably behaviours 
risk mitigated working carefully 
exploit ability build analyze model incrementally adding weak constraints possible establish required safety properties 
simulate model extensively adding conditions force execution interesting cases 
course formulate check liveness properties ruling lead deadlock 
approaches counter risk overconstraint relevant particular safety property 
worst ones rule behaviours usually easy detect ones rule exactly behaviours violate safety property 
purpose checking safety property precisely find behaviours violate hardly able formulate liveness constraint ensure behaviours possible 
course liveness check confounded overconstraint rules traces counterexamples liveness check 
property specific detection overconstraint required core extraction exactly analysis 
