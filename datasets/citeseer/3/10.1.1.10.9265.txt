comparison deforestation techniques functional programs tree transducers armin grundlagen der programmierung institut fur fakultat informatik technische universitat dresden dresden germany mail inf tu dresden de 
compare transformations elimination intermediate results order functional programs 
choose known deforestation technique wadler composition techniques theory tree transducers implementation functional programs take advantage 
identify syntactic classes function definitions techniques deliver equally efficient results technique powerful 
particular offers technique eliminates intermediate results certain kinds function definitions deforestation fails 
functional programs frequently compositions functions functions produce intermediate results consumed functions 
hand modular style programming simplifies design verification programs 
hand production consumption intermediate results cause inefficiencies particular intermediate results structured objects lists trees 
techniques transforming programs intermediate results programs 
compare deforestation known optimization technique functional programs composition techniques theory tree transducers :10.1.1.30.9032
comparison restricted twofold composition order functions defined extended scheme primitive recursion additionally simultaneous definitions functions nesting terms parameter positions allowed 
scheme called macro tree transducer short mtt cf 

mtt translates trees ranked alphabet input symbols trees ranked alphabet output symbols 
translation process uses ranked alphabet functions rank set equations 
function defined case analysis root symbol argument right hand side equation may contain recursive function calls argument function call variable refers subtree function rank called top tree transducer short 
app rev mir ex examples ex 
app app app mir mir mir app app mir mir app mir rev rev rev ex ex ex rev rev ex ex rev ex mtt app appends lists containing list elements lists represented monadic trees 
particular empty list represented symbol rank 
analogy rev reverses list starting application rev accumulating list elements second argument rev mtt mir combines features app rev appending list list results reversal starting application mir 
mtt ex exchanges list elements vice versa 
evaluate expression ex mir lists mir produces intermediate result 
particular traversed times mir traverses ex traverses reversed image 
deforestation applied program consists ex slight syntactic variant mir delivers expression mirex function mirex mirex mirex mirex mirex ex evaluation list traversed twice mirex traverses ex traverses reversed image 
shown composition mtt vice versa single mtt constructed performs computation producing intermediate result 
represents composition mtt mir ex get new expression mirex ex function mirex mirex mirex mirex mirex evaluation requires traversal show example composition mtt order deforestation successfully eliminates intermediate symbols occur outside topmost function calls right hand sides equations fails eliminating symbols inside function calls 
turns composition technique powerful additionally eliminates symbols 
compositions order transformation strategies composition technique deforestation correspond deliver equally efficient programs 
contains sections 
section fix elementary notions notations 
section introduces functional language 
section section deforestation composition techniques respectively 
section techniques compared 
section contains research topics 
preliminaries denote set natural numbers including set mg denoted 
sets fx fy fz recursion variables context variables expression variables variables respectively 
string lists wn strings pair overlaps denote wn string obtained substituting occurrence abbreviate substitution wn fw simply quantification clear context 
binary relation set denote fold composition transitive reflexive closure respectively 
called normal form respect denoted nf exists unique 
abbreviate nf nf clear 
ranked alphabet pair rank finite set rank mapping associates symbol natural number called rank symbol 
set elements rank denoted ranked alphabet subset set trees indexed denoted smallest subset abbreviated ts ts 
set variables occur denoted var number occurrences symbols subset denoted jtj simply jtj functional programs macro tree transducers consider simple order functional programming language source language transformations 
program consists 
simplicity choose unique ranked alphabet constructor symbols build input trees output trees mtt fact absence initial functions differ literature 
functions mtt defined case analysis argument recursion argument pattern matching flat patterns allowed 
arguments called context arguments 
definition ranked alphabets constructor symbols constructors function symbols functions respectively pairwise disjoint 
define classes mac programs function definitions right hand sides respectively grammar 
assume equipped indices range sets mac respectively 
program macro tree transducer yn function definition 
kq right hand side sets constructors functions occur denoted respectively 
set functions defined mac denoted fm addition grammar restrictions fulfilled fm mtt contains exactly function definition fm fm 
exactly equation form yn rhs rhs tcp fm fx ng 
fm mtt 
classes denoted top mac gamma top respectively 
tree called linear variable occurs mtt program respectively called linear right hand side equations linear 
add index respectively class mac subclasses function linear respectively considered 
note classes syntactic classes semantic classes classes computed functions studied theory tree transducers 
example ex top app rev mir mac gamma top turns deforestation general translates program program right hand sides mtt applications form gamma fm restriction occur 
denote target language set constructors functions occur respectively 
fix call name semantics call name reduction relation tcp fp proved contrast general order programs tcp fp normal form nf exists 
proof result mtt corresponding nondeterministic reduction relation terminating confluent 
framework function produces intermediate result consumed function iff application occurs argument application optimize evaluation expressions form tree constructor symbols 
particular constructor trees relevant transformations expression variables transform expressions form call composition expressions 
transformations deliver expressions form 
expressions special initial expressions programs defined follows 
definition range set initial expressions denoted defined follows equipped indices ranges initial expression program transformation techniques take elements class input 
class contains subclasses linear composition expressions compare transformation techniques 
definition class mac subclasses 
composition class set example consist ex mir mir ex ex mir top mac gamma top mac gamma top top 
tcp oe 
oe nf oe oe jt gamma nf oe 
transformations preserve semantics pairs formalized notion equivalence 
definition pairs called equivalent denoted substitution oe var var tcp nf oe nf oe deforestation classical deforestation technique seen algorithmic instance fold unfold technique :10.1.1.30.9032
presentation deforestation transformation obeys syntax language similar 
deforestation mimics call name reduction steps unfold steps expressions variables values unknown transformation time 
deforestation defines new functions case analysis handle unknown value recursion argument function application 
roughly speaking uses expansion possible constructor 
treeless programs essentially occurrence function right hand side equation applied variables termination deforestation ensured defined functions possible fold steps :10.1.1.30.9032
programs treeless may nesting terms parameter positions 
ensure termination deforestation assume context argument function application implicitly abstracted expression handle written vn vn 
choose explicit expressions expand description composition techniques comparison sections respectively 
transformation mac mac 
define function takes implicitly input 
assumes implicit abstraction specialized handle composition expressions 
shown rules perform complete disjoint case analysis set expressions encountered starting composition expression 
particular contain expressions forms 
symbols indices range sets fc respectively 
notation rules respectively refers function respectively constructed specified occur transformation result constructed :10.1.1.28.6971
way delivers new program new initial expression denote transformation result def 
rhs yn rhs 
kq yn rhs yn rhs yn 
kq yn rhs yn lemma mac mac def 
proving lemma formally argue showing similarities differences transformation deforestation described terminates composition functions respectively constructs functions 
rules reflect implicit abstraction context arguments expressions differ usual presentation cf 
rule 
show rule performs transformation transformation rules literature handle explicit expressions cf 
:10.1.1.30.9032
rule analogous argument holds 
abstraction expr 
vn function inlining note contrast introduce new function rule reasons hand allow functions sense defined pattern matching 
hand functions contribute elimination intermediate results 
omission function rule cause termination affect termination critical steps expansion variables performed new functions introduced 
note functions increase number reduction steps 
initial expressions app app composition expressions deforestation algorithm behave differently algorithm described app app treated expression app app :10.1.1.30.9032
example consist ex mir mir ex mir ex mir rhs ex mir ex mir ex mir ex mir rhs ex mir new initial expression new program contains equations function sides equation underlined 
def 
tcp oe 
oe jt nf oe 
example consist ex mir ex mir ex mir mirex mirex mirex mirex ex rhs mir mirex ex mir ex mir mirex ex mir ex rhs mir mirex ex mirex gamma ex mirex ex defined ex symbols gamma explained 
new initial expression mirex new program contains equations function mirex equations ex def 
note gamma equation mirex ex tcp oe 
oe jt gamma nf oe 
composition techniques shown composition simulated 
result generalized composition techniques construct mtt composition mtt mtt respectively 
proved construction composition class functions computed closed composition 
central idea composition techniques composition tree transducers observation roughly speaking intermediate results built right hand sides translating intermediate results right hand sides translated get equations new tree transducer purpose uses fm theta fm function set 
abbreviate pair fm theta fm fg 
composition technique composition class top mac transformation 
necessary extend call name reduction relation expressions containing variables handled ary constructors restrict call name reduction relation equations certain mtt denoted transformation top mac 
mtt 
construct new program new initial expression follows 
transformation result denoted com 

construct mtt able translate right hand sides equations note part contains equations add equation yn fg yn fg viewed additional unary ary constructor respectively 

constructed replacing mtt ffg fm rhs equation contains equation fg yn nf rhs 
lemma top mac com 
omit proof mention construction splits mtt device handling parameter substitutions composes composes resulting substitution device 
get transformation result step avoiding explicit splitting joining substitution devices 
example consist ex mir mir ex mtt mir equations mir mir mir mir mir mir ex new program contains mtt equations nf mir mir rhs ex nf mir mir ex nf mir mir ex new initial expression 
com 
tcp oe 
oe jt nf oe 
composition class mac gamma top top handled transformation 
additional observation fm fm instance initial expression results instances instances occur final output 
context arguments functions new mtt represent translations context arguments functions transformation mac gamma top top 
mtt 
fixed order functions fm construct new program new initial expression follows 
transformation result denoted com 

construct able translate right hand sides equations note part contains equations add equation xn fg xn xn fg viewed additional ary hn ary constructor respectively 
occurs right hand sides equations add equation viewed additional ary constructors 

constructed keeping replacing mtt hn ffg fm yn rhs equation contains equation fg gh gh nf rhs 
note composition expression 
lemma consequence result proved lemma mac top example consist ex mir ex mir ex equations ex ex ex ex mir mirex ex ex ex ex ex new program contains ex new mtt equations mirex ex mirex ex nf ex ex rhs mir nf ex ex mir mirex ex nf ex ex mir nf ex mirex ex mirex ex nf mex mirex ex mirex ex ex new initial expression mirex ex 
com 
tcp oe 
oe jt jt nf oe 
comparison transformations sections nonlinear programs restrict comparison linear nonlinear function definitions cause deterioration deforestation composition :10.1.1.30.9032
notions compare efficiencies 
definition 
call efficient efficient respectively denoted respectively oe var var tcp ff oe ff oe oe ff oe nf oe ff oe ff oe ff oe ff oe respectively call efficient denoted oe var var tcp ff oe ff oe oe ff oe nf oe ff oe ff oe compare transformations composition class mac mac 
turns different results disjoint subclasses top mac mac gamma top top mac gamma top mac 
deforestation composition behave similarly example consist ex mir mir ex 
examples show deforestation composition technique transform apart function renaming program initial expression 
particular def com 
observation generalized follows 
lemma top mac def com apart function renaming 
proof idea 
def com 
mtt 
deforestation generates body clause rule equation rhs composition generates 
transformation equation yn nf rhs yn identifying equations equal nf right hand side right hand sides recursion variables instantiated right hand sides proved induction additionally inner induction proof set way instantiated right hand sides performed 
function considered lemma remains principle valid composition technique constructs new functions evaluate instances new initial expression 
deforestation prevents construction superfluous functions mimics call name evaluation arbitrarily instantiated initial expression 
lemma top mac def com apart superfluous functions apart function renaming 
deforestation deteriorate efficiency cf 
get corollary top mac def com composition deforestation example consist ex mir ex mir 
get result com def examples 
example shows hand deforestation successful removing intermediate constructor outside recursive call mir replacing cf 
step marked example 
hand deforestation remove intermediate constructor inside recursive call mir cf 
step marked gamma example function ex reach context argument mir contrast step example shows ex moves context argument mir removing inside intermediate constructor 
different behaviour transformations caused different strategies handle meeting functions 
rule transformation shows deforestation generates new function simply moves context arguments changing equation transformation shows composition additionally sends functions context arguments 
observation allows improvement deforestation integrating behaviour rule 
equation negative aspect copies context arguments number functions produced program nonlinear 
know efficiency counting call need reduction steps programs constructed way related original programs 
restrict statement lemma function 
theorem mac gamma top top com def give proof idea discuss composition classes obtain strict improvements theorem 
example consist ex app rev ex app com def deforestation completely removes intermediate result 
ex rev com def deforestation fails removing intermediate result composition completely removes 
different results example caused different structures right hand sides app rev example rhs app constructor outside constructor inside recursive function call rhs rev vice versa 
roughly speaking deforestation eliminate intermediate constructors occur outside topmost function applications righthand sides composition additionally eliminates intermediate constructors inside topmost function applications 
idea define decomposition right hand sides top part bottom parts important state refinement theorem prove theorem 
definition define top tc yn um define define bot top bot bot 
example mir top mir bot 

theorem mac gamma top top 
mtt fm 
rhs cp def rhs cp var var equation condition com def proof idea theorems 
mac top def com 
mtt 
abbreviate top rhs top bot rhs bot rhs top bot bot 
deforestation generates demanded equation fg yn top bot bot body nf top bot bot rules nf top bot bot nf top bot bot rule nf top bot bot statements reflect functions respectively reproduced general 
proved induction composition generates equation fg nf top bot bot 
transformation nf top nf bot bot definition nf top nf bot nf bot tr 
tcp reduction start step top bot bot continuation reduction particular force evaluation top bot 
corresponding reduction step fg pd nf top bot bot saves steps evaluation top 
corresponding reduction step saves steps evaluation bot fg nf top nf bot nf bot holds corresponding instances informal explanation seen heart induction proof tcp additionally inner induction proof set right hand sides needed 
proof shows subtrees deleted affects reductions way 
rhs cp rhs cp bot rhs deleted precomputation top rhs bot rhs respectively really saves reduction steps 
holds substitutions tree symbol root 
deforestation composition mac gamma top mac gamma top composition techniques applicable define com get consequence theorem mac gamma top mac gamma top def com distinguish composition classes improved improved deforestation 
leads analysis deforestation contribute intended comparison techniques give representative examples classes example consist app rev app app def 
rev rev def 
qualitative comparisons deforestation composition techniques certain composition classes 
quantitative analysis exact efficiency measures useful order calculate speedups realized transformations 
extend research nonlinear programs specify composition classes nonlinearity harmless respect deforestation composition 
methods elimination intermediate results integrated comparison 
hand want analyze short cut cheap deforestation 
informal comparison classical deforestation cheap deforestation performed 
hand inspect composition methods attributed tree transducers abstractions attribute grammars 
composition results 
composition restricted class 
intended comparison consider macro attributed tree transducers suitable integration formalism 
acknowledgment morten heine heiko vogler stimulating discussions deforestation tree transducers respectively 

burstall darlington 
transformation system developing recursive programs 
assoc 
comput 
mach 

courcelle 
attribute grammars recursive program schemes 
theoret 
comput 
sci 

engelfriet 
open questions results tree transducers tree languages 
book editor formal language theory perspectives open problems pages 
new york academic press 

engelfriet vogler 
macro tree transducers 
comput 
syst 
sci 

ferguson wadler 
deforestation 
glasgow workshop functional programming pages 


attributed tree transducers 
acta cybernetica 

vogler 
syntax directed semantics formal models tree transducers 
monographs theoretical computer science eatcs series 
springer verlag 

ganzinger 
increasing modularity language independency automatically generated compilers 
science computer programming 

giegerich 
composition evaluation attribute coupled grammars 
acta informatica 

gill 
cheap deforestation non strict functional languages 
phd thesis university glasgow 

gill launchbury peyton jones 
short cut deforestation 
fpca copenhagen denmark proceedings pages 
acm press 

hamilton jones 
extending deforestation order functional programs 
glasgow workshop functional programming series workshops computing pages 
springer verlag 

hughes 
functional programming matters 
turner editor research topics functional programming 
addison wesley 

knuth 
semantics context free languages 
math 
syst 
th 
corrections math 
syst 
th 


benefits tree transducers optimizing functional programs 
fst tcs india proceedings volume lncs pages 
springer verlag december 

vogler 
synthesized inherited functions new computational model syntax directed semantics 
acta informatica 

rounds 
mappings grammars trees 
math 
syst 
th 

gluck jones 
unifying partial evaluation deforestation supercompilation gpc 
esop edinburgh proceedings volume lncs pages 
springer verlag 

thatcher 
generalized sequential machine maps 
comput 
syst 
sci 

wadler 
deforestation transforming programs eliminate trees 
theor 
comp 
sci 
