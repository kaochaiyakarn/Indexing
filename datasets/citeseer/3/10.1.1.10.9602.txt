appears nsdi hybrid global local indexing efficient peer peer information retrieval tang dwarkadas computer science department university rochester cs rochester edu content full text search remains particularly challenging problem peer peer systems 
traditionally index partitioning structures partitioning document space partitioning keywords 
requires search node system answer query transmits large amount data processing multi term queries 
propose esearch keyword search system novel hybrid indexing structure 
esearch node responsible certain terms 
document esearch uses modern information retrieval algorithm select small number top important terms document publishes complete term list document nodes responsible top terms 
selective replication term lists allows multi term query proceed local nodes responsible query terms 
propose automatic query expansion alleviate degradation quality search results due selective replication overlay source multicast reduce cost disseminating term lists techniques balance term list distribution nodes 
esearch scalable efficient obtains search results state art centralized systems 
despite replication esearch consumes bandwidth systems keyword partitioning publishing metadata document 
retrieval operation searches small number nodes typically transmits small amount data kb independent size corpus grows slowly logarithmically number nodes system 
esearch efficiency comes modest storage cost times systems keyword partitioning 
cost reduced adopting index compression pruning techniques 
peer peer systems gained tremendous interest user research community past years 
generation systems gnutella kazaa prevalent systems past cfs distributed hash tables dhts serious development iris project 
gigantic amount information systems impossible users remember know place precise id desired data 
capability retrieve documents content full text search greatly improve usability systems 
possible build dedicated search engine index contents systems way similar google indexes web search system built top nodes storage system particularly attractive low cost ease deployment availability scalability 
study challenging problem building keyword search systems 
facilitate retrieval documents distributed necessarily search system places information regarding occurrence terms words phrases documents form metadata certain places system 
metadata placement strategy existing systems local global indexing 
local indexing see metadata partitioned document space 
complete term list document stored node 
term list means document contains terms retrieval operation query broadcast nodes 
node complete term list documents responsible compute relevance query documents consulting 
drawback node involved processing query rendering systems type unscalable 
gnutella search engines www com variants local indexing 
global indexing see ii metadata distributed terms 
node stores complete inverted list terms 
inverted list indicates term appears document answer query consisting multiple terms query appears nsdi sent nodes responsible terms 
inverted lists transmitted network join identify documents contain multiple query terms performed 
communication cost join grows proportionally length inverted lists size corpus 
proposals keyword search global indexing enhancements reduce communication cost instance bloom filters summarize inverted lists incrementally transmitting inverted lists terminating early sufficient results obtained :10.1.1.12.3396:10.1.1.12.6196:10.1.1.19.7944
simply refer systems global systems 
challenging conventional wisdom uses local global indexing propose hybrid indexing structure combine benefits avoiding limitations 
basic tenet approach selective metadata replication 
global indexing hybrid indexing distributes metadata terms see iii 
node responsible inverted list term addition document inverted list term node stores complete term list document multi term query query sent nodes responsible terms 
nodes local search consulting complete term list documents inverted list 
system hybrid indexing called esearch 
uses distributed hash table dht map term node inverted list term stored 
chose chord esearch dhts pastry tapestry major changes design 
naively implemented esearch search efficiency obviously comes expense publishing metadata requiring communication storage 
propose optimizations reduce communication storage compared naive hybrid indexing 
outline important optimization top term selection 
document contains words 
central ideas described document majority just auxiliary words 
modern statistical information retrieval ir algorithms vector space model vsm assign weight term document :10.1.1.117.7676
terms central document automatically identified heavy weight 
esearch publish term list document nodes responsible top important terms document 
iv illustrates optimization 
document contains terms term list published computer term important optimization may degrade quality search results 
query term top terms document find document 
comparison distributed indexing structures 
gnutella local indexing 
ii global indexing 
iii hybrid indexing 
iv optimized hybrid indexing 
terms 
documents 
example distributes metadata documents contain terms small vocabulary computers 
term list means document contains term inverted list indicates term appears document argument query terms top terms document ir algorithms rank document best matching documents query anyway 
top search results query affected skipping document 
section quantify precision degradation due optimization 
results show esearch obtains search quality centralized baseline publishing document top terms 
order reduce chance missing relevant documents adopt automatic query expansion 
draw observation terms query document relevant query published query terms 
scheme automatically identifies additional terms relevant query searches nodes responsible terms 
propose overlay source multicast protocol efficiently disseminate term lists decentralized techniques balance distribution term lists nodes 
evaluate esearch simulations analysis 
results show owing optimization techniques esearch scalable efficient obtains search results centralized baseline 
despite metadata replication esearch consumes bandwidth global systems publishing document 
retrieval operation esearch typically transmits kb data 
costs independent size corpus grow slowly logarithmically number nodes appears nsdi system 
esearch efficiency comes modest storage cost times global systems reduced adopting index compression pruning 
quickly increasing capacity decreasing price disks believe trading modest disk space communication precision proper design choice systems 
blake rodrigues years disk capacity increased fold bandwidth user increased fold 
farsite project observed disk space desktops 
focus designing indexing architecture support efficient search 
architecture currently okapi state ofthe art content ir algorithm rank documents :10.1.1.117.7676
reality search engines combine ir techniques rank documents 
adoption evaluation techniques architecture subject 
remainder organized follows 
section provides overview esearch system architecture 
sections describe evaluate individual pieces techniques including top term selection automatic query expansion section overlay source multicast section balancing term list distribution section 
analyze esearch system resource usage compare global systems section 
related discussed section 
section concludes 
system architecture depicts esearch system architecture 
large number computers organized structured overlay network chord offer ir service 
nodes overlay collectively form esearch engine 
inside engine nodes completely homogeneous functions 
client node intending esearch connects engine node node publish documents submit queries 
engine nodes user nodes initiate document publishing search behalf user 
nodes system intentionally distinguish server engine nodes stable internet connectivity rest 
excluding ephemeral nodes engine avoids unnecessary maintenance operations 
stable node needs included engine long engine capacity offer desired level quality service 
new node joins system starts client 
stable threshold time minutes load inside engine high joins engine take load protocol system architecture esearch 
described section 
data stored engine node replicated neighbors 
node fail neighbors take job seamlessly 
inside engine nodes organized ring topology corresponding id space ranging 
node assigned id drawn id space responsible key range id id previous node ring 
term hashed key id space 
node id immediately follows term key responsible term 
instance node responsible inverted lists term computer information 
lookup node responsible key done routing overlay 
help additional links shown chord average routes message destination log hops number nodes overlay 
document metadata organized hybrid indexing structure 
publish document client sends document engine node connects 
engine node identifies top important terms document disseminates term list nodes responsible top terms overlay source multicast network bandwidth see section 
client starts search submitting query engine node connects uses overlay routing forward query nodes responsible terms query 
nodes local search identifying small number best matching documents return id relevance score numerical value specifies relevance document query documents node node gives returned documents global rank relevance score presents top documents client improve search quality node may expand query relevant terms learned returned documents start second round search final results client see section 
appears nsdi avoid processing query repeatedly alleviate hot spots corresponding popular queries query results cached certain amount time nodes processing query paths query forwarded 
query arrives node live cached results results returned immediately 
top term selection automatic query expansion section proposed hybrid indexing efficient search combining advantages local global indexing avoiding limitations 
global indexing distributes metadata terms 
local indexing stores complete term list document node 
query searches small number nodes avoids transmitting inverted lists network supporting efficient search 
drawback publishes metadata requiring storage potentially communication 
optimization avoid publishing document stopwords words common real effect differentiating document word 
simple optimization results great savings significant portion document content stopwords 
second optimization vector space model vsm identify top important terms document publish term list nodes responsible terms 
top term selection provide overview vsm 
vsm assigns weight term document query 
terms central document automatically identified heavy weight 
vsm computes relevance document query relevance term appearing document query term weight document term weight query documents highest relevance score returned search results 
weight term decided factors including length document frequency term document frequency term documents 
intuitively term appears document high frequency chance term differentiate document 
term appears documents importance penalized 
myriad term weighting schemes proposed okapi shown particularly effective :10.1.1.117.7676
instance systems achieved best performance trec ad hoc track okapi 
adopt okapi esearch omit details due space limitations 
okapi relies global statistics popularity terms compute term weights 
previous shown statistical ir algorithms estimated statistics 
esearch uses combining tree sample documents merge statistics disseminate combined statistics 
assume global statistics known 
evaluation esearch sensitivity estimated statistics subject ongoing 
conduct experiments volumes trec corpus determine true terms document important 
trec corpus standard benchmark widely ir community 
comes set carefully constructed queries manually selected relevant documents query quantitatively evaluate search quality system 
includes documents news magazines congressional records average length document bytes 
cornell smart system implements framework vsm 
extend implementation okapi index trec corpus 
smart comes list stopwords experiments 
smart stemmer modification strip word endings book books treated 
document sort terms decreasing okapi weight compute relative weight term biggest term weight document 
average normalized term weight documents computing mean term rank report means 
note axis log scale 
normalized term weight decreases exponentially term rank increases weight top terms drops faster 
confirms intuition small number terms important document 
analogy terms words keyword section esearch extracts automatically 
automatic query expansion publishing document top terms may degrade quality search results 
query term top terms document find document 
adopt automatic query expansion called automatic relevance feedback appears nsdi term rank ranked term weight trec corpus normalized biggest term weight document 
esearch precision respect number terms document published 
performance series equivalent centralized system 
average number retrieved relevant documents query returning documents 
esearch precision respect number expanded query terms 
alleviate problem 
draw observation terms query document relevant query published query terms 
scheme automatically expands short query additional relevant terms 
show important technique improve performance centralized ir systems 
experimented query expansion techniques complex ones marginally improve search quality trec corpus compared simple ones 
sake clarity describe simple scheme degenerated performance 
query esearch uses hybrid indexing structure retrieve small number best matching documents 
call documents feedback documents 
term feedback documents engine node starts search behalf client computes average weight terms feedback documents chooses terms biggest average weight 
terms assumed relevant query added query 
new query retrieve final set documents return 
recall vsm assigns weight query terms document terms see equation 
weight expanded query term assigned vsm average weight feedback documents divided constant 
experiments turned 
alternatively may set large number ranking equivalent expanded query terms search nodes corresponding expanded terms reduce chance missing relevant documents 
illustrate steps example 
suppose vsm identifies routing important term document query computer network esearch retrieves relevant documents computer network important terms 
look retrieved documents esearch finds routing important common word 
expands query computer network routing assigning routing relatively smaller weight weight original query terms computer network 
new query retrieve final set documents 
time find document experimental results experiment trec corpus determine proper parameters esearch including number top terms document published number expanded terms query 
title field trec topics queries 
average query consists terms manually identified relevant documents corpus 
note identification subjective user input implies document contains terms query necessarily relevant query document relevant query need contain terms query 
metric quantify quality search results precision defined number retrieved relevant documents divided number retrieved documents 
instance prec means returning documents query returned documents evaluated users really relevant query 
prec varies average precision single topic mean precision obtained relevant document retrieved zero precision relevant documents retrieved 
particularly interested high precision prec users usually view top search results 
reports esearch precision respect number terms document published shown axis 
expansion expansion series query expansion respectively 
experiment set number appears nsdi expanded terms 
means document published terms precision equal centralized ir system 
observations drawn 
esearch approach precision centralized baseline publishing document small number selected terms top terms 
automatic query expansion improves precision particularly documents published top terms 
examine performance returning large number documents query 
case user wishes retrieve relevant documents possible 
reports average number retrieved relevant documents query returning documents 
query expansion increases number retrieved relevant documents 
performance expansion series catches centralized baseline earlier expansion series showing query expansion allows esearch publish documents fewer terms achieve performance centralized systems 
shows precision respect number expanded query terms 
experiment document published top terms 
high precision sensitive query expansion 
average precision improves slowly number expanded terms exceeds 
adding terms query results searching nodes 
indicates benefit query expansion limited overhead esearch 
comparing expansion series figures find top search results relatively insensitive top term selection low rank search results affected severely 
accordingly query expansion useful improving low precision high precision 
observation leads optimization 
new query esearch retrieves small number documents query expansion 
user unsatisfied results esearch uses documents feedback documents expand query second round search return documents 
figures show esearch average retrieval quality centralized baseline 
table try understand difference individual queries esearch baseline 
documents published terms esearch performs badly queries 
instance publishing documents top terms query esearch finds relevant documents baseline find relevant documents 
number selected top terms increases esearch performance improves quickly 
publishing documents top terms worst rela difference top terms top terms top terms table difference number retrieved relevant documents esearch centralized baseline returning documents query 
columns correspond esearch different configurations query expansion 
entry value row entry value row means trec queries queries return relevant documents esearch baseline return fewer relevant documents top terms queries esearch returns fewer relevant documents baseline queries esearch performs baseline 
queries esearch better baseline inherent fuzziness okapi ranking function just focusing important terms may improve retrieval quality 
tive performance esearch query esearch retrieves fewer relevant documents 
discussions evaluation far assumed esearch publishes documents number top terms 
number varied document document 
intuitively may reasonable publish long documents terms 
current implementation includes heuristic publishes documents big term weights terms 
detailed discussion omitted due space limitations 
worst case scenario esearch query term important document phrase 
esearch return result documents containing term exist 
scenario exist theory practice esearch search quality widely trec benchmark corpus centralized baseline 
achieve retrieval quality absolute number selected top terms may vary corpus corpus expect small percentage total number unique terms document importance appears nsdi terms document decreases quickly see 
trend holds tested including med adi cran available smart package 
possible flood hard query node degrading esearch efficiency gnutella really rare cases 
emphasized esearch tied particular document ranking algorithm 
documents cross links link analysis algorithms google pagerank incorporated instance combining pagerank vsm assign term weights publishing important web pages identified pagerank terms 
disseminating document metadata new document esearch uses okapi identify top terms distributes term list nodes responsible terms 
data sent multiple recipients natural way bandwidth multicast data recipients 
due variety deployment issues ip multicast widely supported internet 
overlay multicast systems proposed narada 
systems usually target multimedia content distribution applications multicast session long 
amortize overhead network measurement multicast tree creation adaptation destruction long data session 
scenario term list dissemination quite different 
typically document kilobytes term list smaller 
result esearch disseminates data large number extremely short sessions 
absolute saving multicast single session small aggregate savings large number sessions huge 
requires protocol overhead multicast tree creation destruction small 
propose overlay source multicast distribute term lists 
costly messaging explicitly construct destroy multicast tree 
assisted internet distance estimation techniques gnp data source locally computes structure efficient multicast tree root includes recipients 
builds application level packet data disseminated payload structural information multicast tree header specifies ip addresses recipients parent child relationship 
sends packet level children multicast tree 
recipient packet inspects header find children multicast tree strips information header forwards rest packet children forth 
provide details method data source uses compute structure multicast tree 
method gnp 
node gnp measures rtts set known landmark nodes computes coordinates highdimensional cartesian space 
internet distance nodes estimated euclidean distance coordinates 
node wishes send term list nodes responsible top terms document performs concurrent dht lookups locate recipients 
recipient directly replies node ip address gnp coordinates 
hearing recipients node locally builds fully connected graph clique recipients vertices 
annotates edge estimated internet distance euclidean distance coordinates nodes incident edge 
practice factors bandwidth load considered assigning weights edges 
runs minimum spanning tree algorithm graph find efficient multicast tree 
lookup results recipients ip gnp coordinates cached reused certain amount time 
stale information times detected node receives term list responsible trigger recovery mechanism find correct recipient 
simulations quantify savings overlay source multicast 
data sets experiments 
derived node transit stub graph generated gt itm 
default edge weight link latency 
second derived nlanr day rtt measurements sites scattered 
filtering unreachable sites left fully connected sites latency pair 
median day measurements latency 
third internet autonomous system snapshot taken route views project april total es recorded 
latency adjacent es unknown assign latency randomly ms ms 
gt itm data set randomly assign user nodes routers es 
latency nodes computed latency shortest path 
reports performance overlay source multicast data sets 
experiments means clustering algorithm select center nodes landmarks gnp technique compute node coordinates dimensional cartesian space 
data set randomly choose nodes shown axis recipients join mul appears nsdi cost overlay source multicast normalized separate unicast deliver data 
tree 
cost multicast tree sum cost edges 
axis multicast tree cost normalized separate unicast deliver term list recipients 
data set opt curve normalized cost optimal minimum spanning tree assuming real latency pair nodes known 
real curve result scheme normalized cost minimum spanning tree constructed estimated internet distance 
seen nodes tree multicast reduces communication cost 
cases performance real curve approaches opt curve indicating gnp estimates internet distance reasonable precision 
performance gap opt real curve nlanr data set widens number tree nodes increases 
gnp accurate estimating short distances 
nlanr monitoring sites close particular east coast 
data set rtts ms 
nodes added multicast tree bigger chance close 
accordingly gnp estimation error increases resulting minimum spanning tree optimal 
balancing term list distribution problem addressed previous studies keyword search balance metadata distribution nodes :10.1.1.12.3396:10.1.1.12.6196:10.1.1.19.7944
popularity terms varies dramatically nodes responsible popular terms store data 
traditional approach balance load dhts virtual server physical node functions virtual nodes join network 
result number routing neighbors physical node monitors increases proportionally 
importantly find virtual server incapable balancing load length inverted lists varies dramatically 
comparison load balancing techniques equal size objects 
baseline basic chord virtual server 
vs chord virtual nodes running physical node 
split technique new node performs random lookups splits overloaded node 
solution combination techniques 
slightly modify chord node join protocol 
new node performs lookups random keys 
nodes responsible keys chooses stores largest amount data takes data 
second term hashed key range single key 
unpopular term key range mapped single node 
popular term key range may partitioned multiple nodes collectively store inverted list term 
experiments show techniques effectively balance load length inverted lists varies dramatically 
addition avoid extra maintenance overhead virtual server introduces 
node join protocol chord new node performs lookup random key splits key range node responsible key 
originally node responsible key range 
split new node node responsible key ranges respectively 
virtual server new node functions virtual nodes 
virtual node executes join protocol 
splitting key range random node technique seeks split key range overloaded node 
esearch new node performs lookups random keys 
nodes responsible keys chooses stores largest amount data split 
nodes heterogeneous storage capacity chooses highest relative load split 
compares load balancing techniques 
experiment distribute equal size objects node chord 
nodes sorted decreasing order number objects appears nsdi length inverted list sorted terms sorted terms length distribution trec corpus inverted lists documents published top terms terms 
store 
axis shows percentage total number nodes system axis gives percentage objects hosted corresponding nodes 
baseline basic chord virtual server 
vs chord virtual nodes running physical node 
split technique new node performs random lookups splits overloaded node 
closer graph linear evenly distributed load 
shows technique balances load better virtual server particularly small 
note benefit achieved virtual server maintenance overhead 
distributing load single term popularity terms varies dramatically length inverted lists 
plots length distribution trec inverted lists documents published top terms terms 
simply refer top terms load terms load 
note axis log scale numbers larger orders magnitude 
length distribution skewed cases particularly terms load 
publishing documents top terms greatly reduces length long inverted lists corresponding popular terms important documents appear 
variation length inverted lists load balancing techniques section 
complementary technique hash term key range single key 
key range unpopular term mapped single node key range popular term may mapped multiple nodes collectively store inverted list term 
chord uses bit keys 
partition keys parts high order bits low order bits 
document identify top terms 
top term generate key 
high order bits comparison load balancing schemes top terms load terms load 
key high order bits sha hashing term text 
bits generated randomly 
store document term list node responsible key result term lists documents term important terms stored key range 
key range partitioned multiple nodes inverted list term partitioned nodes automatically 
search process needs change 
query containing term routed node responsible key forwarded chord ring reaches node responsible key 
nodes range participate processing query hold part inverted list term node join protocol changed slightly 
new node arrives obtains random document means randomly chooses terms stopwords document 
chosen term uses process described compute key 
nodes responsible generated keys chooses stores largest amount data split 
reason random terms random document generate bootstrapping keys force distribution keys follow inverted list distribution long inverted lists split higher probability 
change chord needed 
importantly specific node maintains list nodes store inverted list term technique completely decentralized 
node joining partition term fail independently 
node failure handled chord default protocol 
describes node join protocol order balance load presence active joins similar protocol may stable nodes periodically redistribute load absence joins 
implement evaluate optimization 
experimental results compares load balancing techniques 
baseline vs split curves appears nsdi scalability load balancing technique split scatter 
metadata distribution 
average routing hops 
number partitioned terms 
number nodes partition longest inverted list 

split scatter complete load balancing scheme mapping term key range splitting overloaded nodes 
virtual server vs physical node functions virtual nodes 
techniques split split scatter new node selects overloaded node random nodes split 
distribute top terms load terms load node chord respectively 
terms load esearch works choose represent scenario length distribution esearch inverted lists extremely skewed instance term lists gigantic number documents stored esearch 
load baseline unbalanced due large variation length inverted lists 
terms load nodes store term lists 
virtual server improves situation marginally terms load nodes store term lists 
splitting overloaded nodes split performs better virtual server vs complete technique split scatter able balance load inverted lists extremely skewed owing ability partition inverted list single term multiple nodes 
rest experiments evaluate scalability split scatter terms load varying number nodes system 
load distribution reported 
curves overlap indicating split scatter scales system size 
shows average routing hops chord different configurations 
baseline default chord 
curves split scatter different loads 
curves overlap indicating modifications chord adversely affect chord routing performance 
reports number terms inverted lists stored node 
note axis axis log scale 
number nodes increases number partitioned terms increases proportionally 
curve top terms load grows faster 
inverted lists extremely skewed added nodes devoted partition unpartitioned terms terms load added nodes mainly repetitively partition terms extremely long inverted lists 
reports number nodes collectively host longest inverted list 
number nodes increases inverted list partitioned nodes proportionally 
partition terms load higher top terms load inverted list terms load longer 
load balance technique scales system size 
balances term list distribution different system sizes affect chord routing performance 
system size increases long inverted lists automatically partitioned nodes 
works quite different loads particularly extreme terms load expect scale corpus size 
analysis system resource usage section analyze esearch system resource usage publishing metadata document processing query compare systems global indexing called global systems :10.1.1.12.3396:10.1.1.12.6196:10.1.1.19.7944
don claim default values analysis representative situations 
just want give flavor esearch resource usage 
publishing document esearch executes phase protocol publish document 
phase uses dht routing locate nodes responsible top terms document obtain ip address gnp coordinates 
second phase uses overlay source multicast deliver document 
cost phase avoided needed information cached locally 
assume cache disabled analysis 
data transmitted locate recipients bytes number top terms average number routing hops appears nsdi node chord size message including byte tcp ip headers byte identifier specifies type message byte ip address data source byte dht key 
data replied recipients bytes size reply message including byte udp ip headers byte message identifier byte recipient ip address byte gnp coordinates dimensional cartesian space 
total data transmitted phase bytes 
second phase options content multicast recipients 
data source build term list document multicast term list 
alternatively data source multicast document leaving recipients build term list 
method efficient term list smaller document second method allows flexible retrieval 
document text hand esearch search exact matches quoted text provide sentence context matching terms support cached documents feature similar google 
opt multicasting document 
statistics trec corpus assume average document length bytes compressed bytes text compression ratio typical bzip 
udp ip headers message identifier structural information multicast tree add bytes multicast message resulting byte packet 
simulation results section conservatively estimate multicast save bandwidth 
consumes bytes bandwidth multicast document recipients 
total phase phase cost publishing document bytes 
calculate bandwidth consumption distribute metadata document global system 
systems propose stopword removal add step :10.1.1.12.3396:10.1.1.12.6196:10.1.1.19.7944
significantly reduces size metadata document content stopwords 
trec corpus document average contains unique terms stemming stopword removal 
metadata term document includes term id document id byte attribute specifying instance frequency term document 
information needs byte approximating level value provide sufficient precision 
term id dht key bytes 
actual delay stretch proximity aware overlay may smaller hop counts 
effect discussed 
analysis assume communication routing neighbors uses pre established tcp connections short communication non neighboring nodes uses udp 
assume document id bytes including ip address node stores document port number establish connection node byte document number differentiates documents node 
global system data transmitted publish document bytes number terms document routing hops chord size message including byte tcp ip headers byte message identifier byte term id byte document id byte attribute 
bandwidth consumption times esearch 
inefficiency due routing small packets overlay network 
suppose overhead overlay routing reduced approximately introducing proximity neighbor selection chord 
global system consumes bytes bandwidth publish document esearch consumes bytes bandwidth 
global systems send large number small messages publish document 
esearch contrast sends small number large messages document inefficiency processing large number small messages routers hosts counted savings esearch significant 
esearch distributes actual document allowing flexible retrieval 
processing query user intends retrieve small number best matching documents default query expansion esearch please refer discussion section 
bandwidth cost process query bytes number nodes responsible query terms routing hops chord size query message including byte tcp ip headers byte message identifier byte query text size search results including byte udp ip headers byte message identifier byte id byte relevance score matching documents 
query publishing costs independent size corpus grow slowly logarithmically number nodes system 
contrast local indexing system sends query node system cost process multi term queries global indexing system grows size corpus 
occasionally user satisfied search results requests feedback process retrieve larger number documents query expansion 
node started search collects metadata feedback documents order select terms added query 
bandwidth cost appears nsdi bytes number feedback documents bytes cost retrieve metadata feedback document 
starts second round search expanded query 
analysis bandwidth consumption similar round bytes searches nodes node returns documents 
total feedback round consumes bytes bandwidth majority due returning large number documents 
storage cost term list document replicated times esearch storage cost times global systems explained 
speed query processing esearch node locally builds inverted lists documents holds term lists 
maintains table maps document byte global id byte local id compression possible assume bytes non stopword term document bytes local document id byte attribute frequency term document total cost store metadata document esearch including cost mapping table bytes assuming document terms stemming stopword removal 
storing full document text additional feature count comparison 
global systems need bytes term document bytes global document id byte attribute 
total storage cost document metadata bytes 
systems information terms document distributed different nodes 
benefit technique maps document long global id short local id size entry mapping table exceeds size information term reused sufficiently justify cost 
storage space consumed esearch times global systems 
benefit low search cost 
blake rodrigues disk capacity increased times faster network bandwidth user 
believe trading modest disk space communication precision proper design choice systems 
plan adopt index compression pruning reduce storage consumption 
related compared architecture distributed ir systems gloss uses hierarchy summarize contents databases 
search summary referenced choose databases may contain relevant documents 
semantic information produced vsm guide term list replication 
carmel similar information guide index pruning centralized site 
classify proposed search systems categories type network operate 
search distributed hash table systems global indexing keyword search systems built top dhts relevant esearch 
answer multi term queries systems transmit inverted lists network perform join 
techniques proposed reduce cost 
kss system stores results possible queries consisting certain number terms 
number possible queries unfortunately grows exponentially number terms vocabulary 
reynolds vahdat adopted technique developed database community perform join efficiently 
technique transmits bloom filter inverted lists inverted lists 
suel adopted fagin algorithm compute top results transmitting entire inverted lists 
algorithm transmits inverted lists incrementally terminates early sufficient results obtained 
li suggested combining techniques reduce cost distributed join including caching bloom filter document clustering approaches orthogonal efforts esearch 
hybrid indexing architecture intends completely eliminate cost distributed join 
quantitative comparison search cost esearch interesting subject 
various optimizations expect cost grow corpus size rate slower basic global indexing system 
search unstructured peer peer networks centralized indexing systems napster suffer single point failure bottlenecks index server 
flooding techniques gnutella send query node system consuming huge amounts network bandwidth cpu cycles 
reduce search cost heuristic approaches try direct search fraction node population 
rhea kubiatowicz described method node uses bloom filters summarize neighbors content 
query forwarded neigh appears nsdi may relevant documents high probability 
planetp uses bloom filters summarize content node floods summary entire system 
crespo garcia molina introduced notion routing indices give promising direction relevant documents 
replication explored improve search efficiency 
fasttrack designates high bandwidth nodes super nodes 
super node replicates indices nodes 
cohen setting number object replicas square root searching rate object minimizes expected search size successful queries 
lv random walk search efficient flooding 
chawathe combined techniques including random walk topology adaption replication flow control improve gnutella 
search networks semantic locality schwartz described method organizes nodes similar content group 
search starts random walk proceeds deterministically hits group matching content 
sets arranges nodes topic segmented overlay topology links connect nodes similar content 
motivated research data mining cohen guide rules organize nodes satisfying certain predicates associative network 
sripanidkulchai extended existing network linking node nodes satisfied previous queries 
systems psearch ir system employs statistically derived conceptual indices keywords retrieval 
psearch uses latent semantic indexing lsi guide content placement content addressable network documents relevant query colocated small number nodes 
search psearch esearch transmit small amount data search small number nodes esearch relatively efficient compared quantitatively 
psearch problem efficiently deriving conceptual representation large corpus challenging 
psearch infrastructure supports content retrieval multimedia data image music files 
proposed new architecture information retrieval various optimization techniques improve system efficiency quality search results 
contributions challenging conventional wisdom uses local global indexing proposed hybrid indexing employs selective term list replication combine benefits local global indexing avoiding limitations 
semantic information provided modern ir algorithms guide replication 
term list document replicated nodes corresponding important terms document 
adopted automatic query expansion environment alleviate precision degradation introduced selective replication 
devised novel overlay source multicast protocol low protocol overhead order reduce term list dissemination cost 
introduced techniques balance term list distribution greater degree achievable existing load balancing techniques avoiding maintenance overhead 
quantified efficiency esearch terms bandwidth consumption storage cost quality search results experimenting largest benchmark corpora available public domain 
results show combination proposed techniques results system scalable efficient achieves search results centralized baseline uses okapi 
includes studying esearch sensitivity global statistics produced samples incorporating implementation google pagerank algorithm implementing index compression pruning reduce storage consumption 
plan experiment large html corpus crawled web 
acknowledgments related psearch project tang worked internship hp labs year 
mahalingam xu contributions psearch project gautam zhao anonymous reviewers shepherd robert morris valuable feedback james roche support maintaining experimental platform 
supported part nsf ccr ccr ecs eia darpa ito afrl contract dept energy office inertial confinement fusion cooperative agreement 
de fc sf equipment financial compaq ibm intel sun 
appears nsdi bawa manku raghavan 
sets search enhanced topic segmentation 
sigir 
blake rodrigues 
high availability scalable storage dynamic peer networks pick 
hotos may 
bolosky douceur ely theimer 
feasibility serverless distributed file system deployed existing set desktop pcs 
sigmetrics 
brin page 
anatomy large scale hypertextual web search engine 
computer networks isdn systems 
buckley 
implementation smart information retrieval system 
technical report tr department computer science cornell university ithaca ny may 
source code available ftp ftp cs cornell edu pub smart 
calvert doar zegura 
modeling internet topology 
ieee communications magazine june 
carmel cohen fagin 
static index pruning information retrieval systems 
sigir 
chawathe ratnasamy breslau lanham shenker 
making gnutella systems scalable 
sigcomm 
chu rao zhang 
case system multicast 
sigmetrics 
cohen fiat kaplan 
associative search peer peer networks harnessing latent semantics 
infocom april 
cohen shenker 
replication strategies unstructured peer peer networks 
sigcomm 
crespo garc molina 
routing indices peer peer systems 
icdcs july 
acuna martin nguyen 
planetp gossiping build content addressable peer peer information sharing communities 
th ieee international symposium high performance distributed computing hpdc june 
dabek kaashoek karger morris stoica 
wide area cooperative storage cfs 
sosp october 
fasttrack peer peer technology 
www fasttrack nu 

keyword set search system peerto peer networks 
master thesis massachusetts institute technology june 
gravano garc molina tomasic 
gloss text source discovery internet 
acm transactions database systems 
gummadi gummadi gribble ratnasamy shenker stoica 
impact dht routing geometry resilience proximity 
sigcomm august 
iris 
www project iris net 
li loo hellerstein kaashoek karger morris 
feasibility peer peer web indexing search 
iptps february 
long suel 
optimized query execution large search engines global page ordering 
vldb 
lv cao cohen li shenker 
search replication unstructured peer peer networks 
ics june 
mitra singhal buckley 
improving automatic query expansion 
sigir 
national institute standards technology 
secure hash standard fips april 
ng zhang 
predicting internet network distance coordinates approaches 
infocom 
nlanr 
watt nlanr net 
oregon route views project 
org 
reynolds vahdat 
efficient peer peer keyword searching 
middleware june 
rhea kubiatowicz 
probabilistic location routing 
infocom 

search engines web dynamics 
computer networks 
robertson walker jones 
okapi trec 
trec 
rowstron druschel 
storage management caching past large scale persistent peer peer storage utility 
sosp 
salton wong yang 
vector space model information retrieval 
journal american society information retrieval 
browne 
distributed pagerank systems 
th ieee international symposium high performance distributed computing hpdc june 
schwartz 
scalable non hierarchical resource discovery mechanism probabilistic protocols 
technical report tr cu cs university colorado 
singhal 
modern information retrieval brief overview 
ieee data engineering bulletin 
sripanidkulchai maggs zhang 
enabling efficient content location retrieval peer peer systems exploiting locality interests 
acm sigcomm computer communication review january 
stoica morris karger kaashoek balakrishnan 
chord scalable peer peer lookup service internet applications 
sigcomm 
suel mathur wu zhang long 
peer peer architecture scalable web search information retrieval 
webdb june 
tang xu dwarkadas 
peer peer information retrieval self organizing semantic overlay networks 
sigcomm 
text retrieval conference trec 
trec nist gov appears nsdi tomasic garcia molina 
query processing inverted indices shared document information retrieval systems 
vldb journal 
witten moffat bell 
managing gigabytes compressing indexing documents images 
morgan kaufmann second edition 
