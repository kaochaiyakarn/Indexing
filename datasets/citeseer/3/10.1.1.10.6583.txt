parsing expression grammars recognition syntactic foundation bryan ford massachusetts institute technology cambridge ma mit edu decades chomsky generative system grammars particularly context free grammars cfgs regular expressions res express syntax programming languages protocols 
power generative grammars express ambiguity crucial original purpose modelling natural languages power unnecessarily difficult express parse machine oriented languages cfgs 
parsing expression grammars pegs provide alternative recognition formal foundation describing syntax solves ambiguity problem introducing ambiguity place 
cfgs express nondeterministic choice alternatives pegs prioritized choice 
pegs address frequently felt expressiveness limitations cfgs res simplifying syntax definitions making unnecessary separate lexical hierarchical components 
linear time parser built peg avoiding complexity lr parsers inefficiency generalized cfg parsing 
pegs provide rich set operators constructing grammars reducible minimal recognition schemas developed ts tdpl gts gtdpl proven equivalent effective recognition power 
categories subject descriptors mathematical logic formal languages grammars rewriting systems grammar types programming languages formal definitions theory syntax programming languages processors parsing general terms languages algorithms design theory keywords context free grammars regular expressions parsing expression grammars bnf lexical analysis unified grammars scannerless parsing packrat parsing syntactic predicates tdpl gtdpl permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
popl january venice italy 
copyright acm language syntax theory practice generative systems regular expressions context free grammars language defined formally set rules applied recursively generate strings language 
recognition system contrast defines language terms rules predicates decide string language 
simple languages expressed easily paradigm 
example aa generative definition trivial language unary character set strings constructed concatenating pairs 
contrast mod recognition definition language string accepted length 
language theory adopts generative paradigm practical language applications computer science involve recognition structural decomposition parsing strings 
bridging gap generative definitions practical recognizers purpose expanding library parsing algorithms diverse capabilities trade offs 
chomsky generative system grammars ubiquitous context free grammars cfgs regular expressions res arise originally designed formal tool modelling analyzing natural human languages 
due elegance expressive power computer scientists adopted generative grammars describing machine oriented languages 
ability cfg express ambiguous syntax important powerful tool natural languages 
unfortunately power gets way cfgs machine oriented languages intended precise unambiguous 
ambiguity cfgs difficult avoid want general cfg parsing inherently super linear time problem 
develops alternative recognition formal foundation language syntax parsing expression grammars pegs 
pegs similar cfgs re features added extended backus naur form ebnf notation 
key difference place unordered choice operator indicate alternative expansions nonterminal ebnf pegs prioritized choice operator 
operator lists alternative patterns tested order unconditionally successful match 
ebnf rules equivalent cfg peg rules different 
second alternative peg rule succeed choice taken input string recognized begins 
peg may viewed formal description top parser 
closely related prior systems developed primarily purpose studying top parsers 
pegs far syntactic expressiveness ll language class typically associated top parsers express deterministic lr languages including non context free languages 
despite considerable expressive power pegs parsed linear time tabular parser 
properties strongly suggest cfgs pegs define incomparable language classes formal proof context free languages expressible pegs appears surprisingly elusive 
developing pegs formal system presents pragmatic examples demonstrate suitability describing realistic machine oriented languages 
languages generally designed unambiguous linearly readable place recognition oriented nature pegs creates natural affinity terms syntactic expressiveness parsing efficiency 
primary contribution provide language protocol designers new tool describing syntax practical rigorously formalized 
secondary contribution render formalism amenable analysis proving equivalence simpler formal systems originally named ts tmg recognition scheme gts generalized ts alexander birman early syntax directed compiler compiler 
systems called tdpl topdown parsing language gtdpl generalized tdpl respectively aho ullman 
extension prove minor caveats ts tdpl gts gtdpl equivalent recognition power unexpected result contrary prior conjectures 
rest organized follows 
section defines pegs informally presents examples usefulness describing practical machine oriented languages 
section defines pegs formally proves important properties 
section presents useful transformations pegs proves main result regarding reducibility pegs tdpl gtdpl 
section outlines open problems study section describes related section concludes 
parsing expression grammars shows example peg precisely specifies practical syntax pegs ascii character set 
example peg describes complete syntax including lexical characteristics 
elements grammar immediately recognizable familiar cfgs regular expressions 
grammar consists set definitions form nonterminal parsing expression 
operators constructing parsing expressions summarized table 
single double quotes delimit string literals square brackets indicate character classes 
literals character classes contain escape codes character classes include ranges 
constant matches single character 
sequence expression looks match immediately followed match backtracking starting point pattern fails 
choice expression attempts pattern attempts starting point fails 
hierarchical syntax grammar definition expression sequence prefix suffix primary open expression close literal class dot lexical syntax identifier literal char spacing class range char 
slash question star plus open close dot spacing comment space 
peg formally describing ascii syntax operators behave common regular expression syntax greedy nondeterministic 
option expression unconditionally consumes text matched succeeds repetition expressions consume successive matches possible 
expression example match string 
longest match parsing desired behavior options repetition occur practical machine oriented languages 
forms non greedy behavior available pegs desired predicates 
operators denote syntactic predicates provide practical expressive power pegs 
expression attempts match pattern unconditionally backtracks starting point preserving knowledge succeeded failed match 
conversely expression fails succeeds succeeds fails 
example subexpression definition comment matches single character long operator type precedence description primary literal string primary literal string primary character class primary character primary grouping 
unary suffix optional unary suffix zero unary suffix unary prefix predicate unary prefix predicate binary sequence binary prioritized choice table 
operators constructing parsing expressions match starting position 
expression identifier definition primary contrast matches identifier followed 
predicate prevents right hand side expression definition consuming left hand side identifier definition eliminating need explicit delimiter 
predicates involve arbitrary parsing expressions requiring amount lookahead 
unified language definitions conventional syntax descriptions split parts cfg specify hierarchical portion set regular expressions defining lexical elements serve terminals cfg 
cfgs unsuitable lexical syntax directly express common idioms greedy rule usually applies identifiers numbers negative syntax literal rule quoted string literals may contain character quote character 
regular expressions describe recursive syntax large expressions constructed inductively smaller expressions 
difficulties exist pegs demonstrated unified example grammar 
greedy nature repetition operator ensures sequence letters interpreted single identifier immediately adjacent shorter ones 
predicates describe appropriate negative constraints elements appear literals character classes comments 
alternative definition char ensures backslash literal character class part escape sequence 
definition example grammar represents distinct lexical token identifier literal uses spacing nonterminal consume whitespace comments immediately token 
definition grammar starts spacing order allow whitespace file 
associating whitespace immediately preceding token convenient convention pegs whitespace just easily associated token referring spacing token definition 
whitespace treated separate kind token consistent lexical traditions doing unified grammar require explicit spacing hierarchical portion syntax 
new syntax design choices able express existing machine oriented languages concise unified grammar pegs create new possibilities language syntax design 
consider example known problem syntax involving nested template type expressions vector space right angle brackets required scanner oblivious language hierarchical syntax interpret incorrectly right shift operator 
language described unified peg easy define language permit sequence interpreted token depending context spacing spacing create unexpected syntactic subtleties course caution taste order powerful syntax description paradigm means rope careless language designer hang 
traditional behavior operator tokens easily expressible desired follows spacing spacing freeing lexical syntax restrictions regular expressions enables tokens hierarchical characteristics refer back hierarchical portion language 
pascal comments example described regular expression easily expressed peg comment character string literals programming languages permit escape sequences kind express special characters dynamic string substitutions 
escapes usually highly restrictive syntax 
language described unified peg permit arbitrary expressions escapes advantage full power language expression syntax expression primary literal char place java string literal containing unicode math symbol example literal written unicode constant defined class named unicode 
priorities ambiguities specification flexibility provided pegs new syntax design choices create limited lexical portions language 
sensible syntactic constructs inherently ambiguous expressed cfg commonly leading language designers abandon syntactic formality rely informal metarules solve problems 
ubiquitous dangling problem classic example traditionally requiring informal meta rule severe expansion obfuscation cfg 
correct behavior easily expressed prioritized choice operator peg statement cond statement 
syntax contains ambiguities resolved amount cfg rewriting certain token sequences interpreted statement definition 
language specification resolves problem informal meta rule sequence interpreted definition possible 
similarly syntax lambda abstractions expressions conditionals haskell ambiguous cfg paradigm handled haskell specification informal longest match meta rule 
pegs provide necessary tools prioritized choice greedy repetition syntactic predicates define precisely resolve ambiguities 
tools language syntax design easy course 
place having determine possible alternatives cfg ambiguous pegs language designers analogous challenge determining alternatives expression reordered affecting language 
question obvious undecidable general 
discovering ambiguity cfgs hope finding automatic algorithms identify order sensitivity insensitivity conservatively common situations 
quirks limitations definition grammar ascii file starting correct definition interpreted correct grammar file unreadable garbage 
peculiarity arises fact parsing expression peg succeed consuming input text 
address minor issue nonterminal defined predicate expression matches file failing character available succeeding 
left right recursion permissible cfgs top parsing general left recursion unavailable pegs represents degenerate loop 
example cfg rules represent series cfg peg rule degenerate indicates order recognize nonterminal parser recognize nonterminal restriction applies direct left recursion example indirect mutual left recursion involving nonterminals 
left right recursion cfg merely represent repetition repetition easier express peg repetition operators limitation serious problem practice 
cfg peg purely syntactic formalism capable expressing languages syntax depends semantic predicates 
java language described single unified peg parsers require incrementally constructed symbol table distinguish ordinary identifiers typedef defined type identifiers :10.1.1.19.1269
haskell uses special stage syntactic pipeline inserted scanner parser implement language layout sensitive features 
formal development pegs section define pegs formally explore key properties 
properties proofs inspired closely related ts tdpl gts gtdpl systems formulation pegs substantially different 
definition peg concrete ascii syntax pegs illustrate characteristics pegs practical language description purposes 
formal analysis convenient syntax pegs represents essential structure 
defining syntax 
definition parsing expression grammar peg tuple finite set nonterminal symbols finite set terminal symbols finite set rules parsing expression termed start expression 
rule pair write parsing expression 
nonterminal exactly function nonterminals expressions write denote unique expression define parsing expressions inductively follows 
parsing expressions 
empty string 
terminal 
nonterminal 
sequence 

prioritized choice 

zero repetitions 

predicate 
subsequent unqualified term grammar refers specifically parsing expression grammars defined unqualified term expression refers parsing expressions 
variables represent terminals nonterminals strings terminals parsing expressions 
structural requirement function mapping nonterminal unique parsing expression precludes possibility expressions grammar containing undefined subroutine failures 
expression set set containing start expression expressions grammar rules subexpressions expressions 
repetition free grammar grammar expression set contains expressions constructed rule 
predicate free grammar expression set contains expressions constructed rule 
desugaring concrete syntax syntax include character classes character constant option operator operator predicate operator appear concrete syntax 
treat features concrete syntax syntactic sugar reducing parsing expressions local substitutions follows consider expression concrete syntax character class containing terminals 
terminals listed character class expression concrete syntax expanding ranges character class expression syntax expression 
option expression 
concrete syntax desugaring repetitions expression desugaring predicate desugaring interpretation grammar definition formalize syntactic meaning grammar define relation pairs form pairs form parsing expression input string recognized serves step counter indicates result recognition attempt 
output successful match portion input string recognized consumed distinguished symbol indicates failure 
write implied 
define inductively follows 
empty 
terminal success case ax 
terminal failure case bx 

nonterminal 

sequence success case 
expressions matched sequence succeeds consumes input portions respectively sequence succeeds consumes string 
sequence failure case 
tested fails sequence fails attempting 
sequence failure case 
succeeds fails sequence expression fails 

alternation case xy xy 
alternative tested succeeds expression succeeds testing 
alternation case 
fails tested result 

zero repetitions repetition case 

zero repetitions termination case 

predicate case xy xy 
expression succeeds consuming input syntactic predicate fails 

predicate case 
fails succeeds consumes 
define relation pairs outcomes iff exists 
say matches say fails match set expression set inputs matches expression handles string matches fails grammar handles string start expression handles complete handles strings expressions equivalent written implies vice versa 
resulting step counts need 
theorem prefix yz 
proof induction integer variable induction hypothesis proposition desired property holds theorem relation function 
proof induction variable induction hypothesis proposition holds induction technique subsequently referred simply induction step counts theorem repetition expression handle input string succeeds consuming input call loop condition 
proof induction step counts 
language properties section describes properties parsing expression languages pels class languages expressed pegs 
pels closed union intersection complement 
undecidable general peg represents nonempty language pegs represent language 
definition language peg set strings start expression matches note start expression needs succeed input string included need consume string example trivial grammar recognizes language just empty string start expression succeeds examine consume input 
definition contrasts ts gts partially consumed input strings excluded language classified partial acceptance failures 
definition language alphabet parsing expression language pel iff exists parsing expression grammar language theorem class parsing expression languages closed union intersection complement 
proof suppose grammars respectively describing languages 
assume loss generality renaming nonterminals necessary 
form new grammar 


theorem class pels includes non context free languages 
proof classic example language context free recognize peg contains definitions 
theorem undecidable general language arbitrary parsing expression grammar empty 
proof prove way cfgs undecidable intersection languages pegs empty 
pels closed intersection algorithm test emptiness language test empty implying emptiness undecidable 
instance 
post correspondence problem alphabet known undecidable non empty string built elements 

build grammar 

distinct terminals serve markers associated elements contains rules aa aa 
aa ba ba 
ba 


nonterminal matches strings form 

matches strings form 

nonterminal uses predicate operator match strings matching representing solutions correspondence problem 

definition desugared appropriately ensures empty solutions allowed 
ensure complete input consumed case 
algorithm decide nonempty solve correspondence problem yielding desired result 
definition pegs equivalent recognize language 
theorem equivalence arbitrary pegs undecidable 
proof algorithm decide equivalence pegs decide non emptiness problem simply comparing grammar tested trivial grammar empty language 
analysis grammars analyze behavior particular grammar arbitrary input strings 
interesting properties pegs undecidable general conservative analysis proves useful adequate practical purposes 
theorem undecidable arbitrary grammar complete succeeds fails input strings 
proof suppose arbitrary grammar define new grammar start expression succeeds input string input cause degenerate loop nonterminal incomplete 
empty complete fails inputs 
algorithm decide complete allow decide empty shown undecidable 
definition define relation consisting pairs form expression 
write implied 
relation represents simulation relation 
succeed input string consuming input 
succeed consuming terminal 
fail input 
variable represent outcome 
define simulation relation inductively follows 













relation depend input string finite number relevant expressions grammar compute relation grammar applying rules iteratively reach fixed point 
theorem relation summarizes follows 

proof induction step counts relation definition rules correspond rules case follows immediately inductive hypothesis cases repetition operator require loop condition theorem section 
formed grammars formed grammar grammar contains directly mutually left recursive rules prevent grammar handling input string 
checkable structural property implies completeness permissive purposes 
grammar left recursive rules complete degenerate loops unreachable little need grammars practice 
definition define inductive set wf follows 
write wf wf implied mean expression formed 
wf 

wf 

wf wf 

wf wf implies wf 

wf wf wf 

wf wf 
wf wf 
grammar formed expressions expression set formed relation wf set computed iteration fixed point 
lemma assume grammar formed expressions handle strings length 
expressions handle strings length 
proof induction step counts interesting cases follows nonterminal induction hypothesis allows assume handles strings length definition sequence assume handles strings length 
wf applies handles needs handle strings length 

wf condition ensures handles inputs length condition ensures recursive dependency success case needs handle strings length 
theorem formed grammar complete 
proof induction length input strings expression handles input string 
start expression follows 
grammar identities number important identities allow pegs transformed changing language represent 
identities subsequent results 
theorem sequence alternation operators associative expression equivalence proof trivial definition theorem sequence operators distributed choice operators left right 
proof left side case expression invokes twice starting point input string making result factored expression 
right side case suppose succeeds fails 
expression failure causes expression fail 
instance causes alternative fail second alternative tried succeed consumes different amount input 
theorem predicates moved left sequences distributively follows proof succeeds tested starting point case resulting behavior second case merely invokes twice position 
fails predicate tested 
predicate tested succeeds failure result failure due second instance definition expressions disjoint succeed disjoint sets input strings 
theorem choice expression commutative subexpressions disjoint 
proof fails string matter tested 
way language affected chang ing order succeed consume different amounts input 
disjointness precludes possibility 
results section imply disjointness undecidable general easy force choice expression disjoint simple transformation theorem equivalent choice expressions disjoint 
proof trivial case analysis 
reductions pegs section methods reducing pegs simpler forms may useful implementation easier reason formally 
describe eliminate repetition predicate operators show pegs mapped restrictive ts tdpl gts gtdpl systems 
eliminating repetition operators cfgs repetition expressions eliminated peg converting recursive nonterminals 
cfgs substitute nonterminal peg right recursive 
theorem repetition expression eliminated replacing new nonterminal definition proof induction length input string 
theorem peg equivalent repetition free grammar created 
proof simply eliminate repetition expressions nonterminal definitions start expression 
eliminating predicates section show eliminate predicate operators formed grammar language include empty string 
restriction grammars accept empty string minor unavoidable problem show impossible predicate free grammar accept empty string accepting input strings 
formed repetition free grammar create equivalent grammar formed repetition free 
process occurs normalization stages 
stage rewrite grammar sequence predicate expressions contain nonterminals choice expressions disjoint 
second stage rewrite grammar nonterminals succeed consuming input 
third stage eliminate predicates 
stage stage rewrite existing definitions original start expression adding new nonterminals corresponding definitions process produce add special nonterminals corresponding rules follows 
nonterminal matches single terminal definition concrete peg syntax desugaring 
nonterminal matches consumes input string avoid introducing repetition operators define tz nonterminal fails avoid predicates define zt define function recursively follows convert expressions original grammar normal form 

ab adding 
adding 
adding definition stage grammar new definitions resulting application new nonterminals resulting application 
lemma expression proof structural induction interesting case choice expressions uses identity theorem sequence predicate expressions expression set contain nonterminals subexpressions choice expressions disjoint 
proof direct construction stage rewrite stage grammar equivalent grammar nonterminals succeed consume nonempty input prefix fail 
transformation analogous reduction cfgs details different due predicates 
functions split expressions free parts respectively 
part expression expression yields result input strings succeeds consuming input fails 
free part likewise yields result inputs succeeds consumes terminal fails 
define recursively follows 




ab ab 



lemma function terminates formed 
proof structural induction wf relation 
termination relies ab recursively invoking 
define function primitive recursively follows 



ab ag ab 



definition stage grammar 
effectively split nonterminal definitions retaining free parts definitions substituting corresponding parts points nonterminals referenced order preserve original behavior 
points case rewrite operands predicate expressions case free sequences 
say splitting invariant holds true lemma assume splitting invariant holds input strings length 
splitting invariant holds strings length 
proof induction step counts theorem formed equivalent nonterminals 
proof direct consequence splitting invariant fact formed 
stage rewrite final grammar 
definition define function distributes nonterminal expression resulting stage function 







lemma move leftward nonterminal sequence expression 
proof structural induction identities section 
define function lemma expression 
proof succeeds succeeds consumes entire remaining input 
nonterminal sufficient rewritten stage free 
nonterminal free expression fail 
fails succeeds consuming making expression behave define function eliminate predicates producing expressions resulting functions 









lemma predicate free expression equivalent proof structural induction case handles predicates resulting directly form likewise expression resulting case similarly handles situation 
case rewrites sequence predicate analog law expressions 
simply consumes input succeeds cause part start wrong position 
define corresponding function eliminate predicates free expressions generated stage function 


ab ab 

nonterminal 

ae nonterminal 


lemma predicate free expression equivalent proof structural induction case know definition expression resulting function combine subsequent free nonterminal eliminate predicates case similar move left function applying predicate transformation 
definition predicate reduced grammar set nonterminals produced stage 
theorem formed repetition free predicate free equivalent proof repetition free repetition free introduced repetition operators 
previous result nonterminal equivalent corresponding nonterminal stage grammar 
result part new start expression equivalent free part original start expression new start expression succeeds consumes exactly terminal input string nonempty part original start expression succeeds 
assumption start original grammar accept empty string transformed grammar behaves identically degenerate case 
acceptance string language grammar depends success failure start expression input start expression consumes new grammar accepts exactly strings empty string limitation show hope avoiding restriction original grammar accept empty input string prove predicate free grammar accept empty input string accepting input strings 
lemma assume predicate free grammar expression input length iff holds input strings length 
proof induction step counts theorem repetition free grammar expression matches empty string iff matches input strings produces results 
consequence implies proof induction string length 
empty string limitation defining pegs require recognized strings include designated marker terminal birman original ts gts systems 
reduction ts tdpl reduce predicate free peg instance birman ts system renamed top parsing language tdpl aho ullman 
term 
tdpl uses set grammar definitions definitions fixed forms place open ended hierarchical parsing expressions 
view tdpl peg analog chomsky normal form cnf context free grammars 
defining tdpl ground birman simply define restricted form peg 
definition tdpl grammar peg nonterminal definitions forms 



bc third form representing unconditional failure considered primitive tdpl define terms parsing expression fourth form bc combines functions nonterminals sequencing choice 
tdpl grammar interpreted usual relation 
theorem predicate free peg reduced equivalent tdpl grammar 
proof add new nonterminal definition representing original start expression 
add nonterminals definitions respectively 
rewrite definition conform tdpl forms rules bc ba aho ullman define extended tdpl notation equivalent expressiveness repetition free predicate free pegs reduction rules identical 
reduction gts gtdpl birman generalized ts gts system named generalized tdpl gtdpl aho ullman similar tdpl uses slightly different basic rule forms effectively provide functionality predicates pegs 
definition gtdpl grammar peg nonterminal definitions forms 



theorem peg reduced equivalent gtdpl grammar 
proof add definitions tdpl 
rewrite non conforming definitions transformations parsing pegs corollary possible construct linear time parser peg reasonable random access memory machine 
proof reduce peg gtdpl grammar tabular parsing technique described aho ullman 
practice necessary reduce peg way tdpl gtdpl form typically necessary eliminate repetition operators 
practical methods constructing linear time parsers manually automatically particularly modern functional programming languages haskell discussed prior :10.1.1.19.1269
equivalence tdpl gtdpl theorem formed gtdpl grammar accept empty string reduced equivalent tdpl grammar 
proof treating original gtdpl grammar repetition free peg eliminate predicates section reduce resulting predicate free grammar tdpl section 
open problems section briefly outlines promising directions pegs related syntactic formalisms 
birman defined transformation gts converts loop failures caused grammar circularities ordinary recognition failures 
extension possible convert peg complete peg 
probably possible transform peg equivalent formed peg conjecture birman define structural formedness property gts 
transformation pegs conceivable despite undecidability grammar completeness transformation works essentially building run time circularity checks grammar trying decide statically compile time circular conditions reachable 
practical interest useful conservative algorithm determine choice expression grammar definitely disjoint commutative 
algorithm enable extend peg syntax unordered choice operator analogous choice operator ebnf syntax cfgs 
operator semantically identical express language designer assertion alternatives disjoint order independent tools peg analyzers peg parser generators verify assertions automatically 
final open problem relationship inter convertibility cfgs pegs 
birman proved ts gts simulate deterministic pushdown automata dpda implying pegs express deterministic lr class context free language 
informal evidence larger class cfgs recognizable pegs including cfgs conventional linear time parsing algorithm known 
proven exist recognized peg lower bounds complexity general cfg parsing matrix product shows general cfg parsing inherently super linear 
related inspired heavily birman ts tdpl gts gtdpl systems 
relation basic properties sections direct adaptations birman 
major new features extension support general parsing expressions repetition predicate operators structural analysis identity results sections predicate elimination procedure section 
parsing expressions conceivably treated merely syntactic sugar gtdpl grammars clear predicate elimination transformation reduction gtdpl tdpl accomplished general expression forms intermediate stages 
reason appears pegs represent useful formal notation right complementary minimalist tdpl gtdpl systems 
unfortunately appears tdpl gtdpl seen practical large measure originally developed formal models certain types top parsers useful syntactic foundation right 
adams tdpl modular language prototyping framework 
addition practical top parsing libraries toolkits including popular antlr parsec combinator library haskell provide backtracking capabilities conform model practice unintentionally 
existing systems generally naive backtracking methods risk exponential runtime worst case scenarios features implemented strictly linear time packrat parser :10.1.1.19.1269
positive form syntactic predicate predicate introduced parr antlr incorporated javacc name syntactic lookahead 
system includes limited fixed lookahead form syntactic predicates terms attractors traps 
negative form syntactic predicate predicate appears new effect achieved practical parsing systems antlr javacc semantic predicates 
extensions variations context free grammars developed indexed grammars grammars affix grammars tree adjoining grammars minimalist grammars conjunctive grammars 
extensions motivated requirements expressing natural languages difficult parse cfgs 
machine oriented language translators need process large inputs linear near linear time appears hope general cfg parsing better time parsing algorithms machine oriented languages focus handling subclasses cfgs 
classic deterministic top bottom techniques widely limitations frequently felt language designers implementors 
syntax definition formalism sdf increases expressiveness cfgs explicit disambiguation rules supports unified language descriptions combining lexical context free syntax definitions level formalism 
nondeterministic linear time nslr parsing algorithm powerful generate scannerless parsers unified syntax definitions treating lexical analysis separately algorithm severely restricts form cfgs written 
machine oriented syntax formalisms tools cfgs extended explicit disambiguation rules express lexical hierarchical syntax supporting unified syntax definitions cleanly giving strictly linear time parsing 
systems graft recognition functionality generative cfgs resulting hybrid generative recognition tic model 
pegs provide similar features simpler syntactic foundation adopting recognition paradigm start 
parsing expression grammars provide powerful formally rigorous efficiently implementable foundation expressing syntax machine oriented languages designed unambiguous 
implicit longest match recognition capability coupled explicit predicates pegs allow lexical hierarchical syntax language described concise grammar 
expressiveness pegs introduces new syntax design choices languages 
birman gtdpl system serves natural normal form peg easily reduced 
minor restrictions pegs rewritten eliminate predicates reduced tdpl minimalist form 
consequence shown tdpl gtdpl essentially equivalent recognition power 
despite ability express language constructs requiring unlimited lookahead backtracking pegs linear time suitable tabular algorithm 
acknowledgments advisor frans kaashoek francois pottier robert grimm terence parr popl reviewers valuable feedback discussion pointing errors original draft 
stephen robert adams 
modular grammars programming language prototyping 
phd thesis university southampton 
alfred aho 
indexed grammars extension contextfree grammars 
journal acm october 
alfred aho jeffrey ullman 
theory parsing translation compiling vol 
parsing 
prentice hall englewood cliffs 
alexander birman 
tmg recognition schema 
phd thesis princeton university february 
alexander birman jeffrey ullman 
parsing algorithms backtrack 
information control august 
claus brabrand michael schwartzbach mads 
system extensible parsing transformation 
third workshop language descriptions tools applications warsaw poland april 
bryan ford 
packrat parsing practical linear time algorithm backtracking 
master thesis massachusetts institute technology sep 
bryan ford 
packrat parsing simple powerful lazy linear time 
proceedings international conference functional programming oct 
dick jacobs 
parsing techniques practical guide 
ellis horwood chichester england 
heering hendriks klint rekers 
syntax definition formalism sdf manual 
sigplan notices 
simon peyton jones john hughes editors 
haskell report 
www haskell org 
aravind joshi yves schabes 
tree adjoining grammars 
handbook formal languages 
koster 
affix grammars 
peck editor algol implementation pages amsterdam 
north holland publ 
lillian lee 
fast context free grammar parsing requires fast boolean matrix multiplication 
journal acm 
leijen 
parsec fast combinator parser 
www cs uu nl 
sun microsystems 
java compiler compiler javacc 
https javacc dev java net 
sun microsystems 
javacc lookahead 
https javacc dev java net doc lookahead html 
alexander 
conjunctive grammars 
journal automata languages combinatorics 
international standards organization 
syntactic metalanguage extended bnf 
iso iec 
terence parr russell quong 
adding semantic syntactic predicates ll pred ll 
proceedings international conference compiler construction edinburgh scotland april 
terence parr russell quong 
antlr predicated ll parser generator 
software practice experience 
daniel salomon gordon cormack 
scannerless nslr parsing programming languages 
proceedings acm sigplan conference programming language design implementation pldi pages jul 
amir 
lower bounds matrix product 
ieee symposium foundations computer science pages 
edward 
derivational minimalism 
logical aspects computational linguistics pages 
bjarne stroustrup 
programming language 
addison wesley rd edition june 
kuo chung tai 
noncanonical slr grammars 
acm transactions programming languages systems oct 
van den brand visser 
disambiguation filters scannerless generalized lr parsers 
compiler construction 
van wijngaarden peck koster lindsey meertens 
report algorithmic language algol 
numer 
math 
eelco visser 
family syntax definition formalisms 
technical report programming research group university amsterdam 
niklaus wirth 
unnecessary diversity notation syntactic descriptions 
communications acm november 
