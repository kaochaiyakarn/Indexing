phobos front approach extensible compilers describes practical approach implementing domain specific languages extensible compilers 
compiler front languages introduce idea generic front allows syntactic semantic specification domainspecific languages 
phobos generic front offers modular language specification allowing programmer define new syntax semantics incrementally 
key feature approach open term language describe arbitrary syntax term rewriting engine encode semantic actions 
term language expressive 
scoping defined explicitly term rewrites second order substitution allowing higher order syntax needed 
language specification source string generic front constructs push automaton pda supplied grammar source string simulates constructed pda stream tokens obtained 
parsing rewrite rules associated grammar productions executed producing single term pda accepts 
term converted rewriting compiler representation compilation proceeds generate executable code 
proceedings th hawaii international conference system sciences general purpose programming languages offer numerous features applicable large domains problems 
software complexity increases number problems may appear due lack higher level formalisms 
naturally formalisms difficult obtain large problem spaces generalpurpose languages target 
efforts concentrated domain analysis restrict problem domain hand precise formalism guide development domain 
adam jason hickey california institute technology california blvd pasadena ca usa cs caltech edu domain specific languages dsl provide higher level abstraction notation best suits problem hand 
domain specific information perform optimization pinpoint conceptual flaws solution 
dsl larger complex domain specific problems easier solve requiring effort develop maintain code offering additional benefits code reuse modular design 
rewriting systems studied extensively relevance parsing process rewriting known 
furthermore express operational algebraic semantics programming languages natural investigate feasibility connecting syntactic specification formal semantic specification programming languages 
integration multilingual compiler theorem prover great difficulties greater advantages 
research concentrated endowing theorem provers ordinary computing abilities enabling formal verification compiler components source programs 
research focused creating formal compiler called mojave compiler collection mcc extensive metaprl logical programming environment lpe 
step integration developed generic front call phobos mojave compiler 
phobos provides domainspecific language framework programmer write language specifications define syntax semantics optimizations domain specific knowledge 
modules refined extended simple inheritance added mojave compiler dynamically enabling users compile language specification available 
rest structured follows 
section discusses related syntax extension formal language specification tool generation extensible grammars compilers 
sections discuss mojave compiler architecture relevant components phobos metaprl 
section illustrate design implementing small functional language higher order ieee syntax 
finish directions 
related proceedings th hawaii international conference system sciences strong ties syntax extension formal language specification extensible grammars compilers 
syntax extension existing programming languages widely studied 
macro languages preprocessors provide limited improvement expressiveness textual substitution ignoring important details variable capture typing scoping constraints 
approaches involve syntax similar tree constructs stream parsers typed macro systems 
successful forms syntax extension solves challenges specializing syntax programming language particular problem domain provides means incorporation domain specific semantics restricts class languages extended typically involves unintuitive programming 
representation uses term language encode higher order syntax underlying logical engine uses rewrite rules avoid variable capture 
furthermore aim decouple syntax semantics specification making easy incorporate domainspecific information 
formal language specification subsequent programming language tool generation challenging integral topics area domain specific languages 
aims provide formal descriptions syntax semantics studies efficient tool generation formal specifications 
asf sdf gem mex lisa examples systems available 
typically provide language editing capabilities efficient language tool generation including lexers parsers language specifications similar phobos 
allow dynamic extension integration concentrate separate tool generation line integration 
accomplished combining generic representations specification artifacts labeled trees grammar tables generated source code 
instance lisa generates java source files local templates compiles design time 
similarly asf sdf translates rewriting specifications code 
phobos differs systems primary goal allow dynamic extension mojave compiler intermediate source code compilation 
phobos generic front language syntax semantics specified target source files compiled 
central problem rewriting tool gen syntax scoping introducing new bindings semantic actions 
reason systems mentioned restricted functional languages awkward binding predicates simply offer guarantees proper typing 
phobos term representation includes binding structure rewriting rules automatically avoid variable capture substitutions alpha renaming 
hand systems notably mature robust commercial applications 
features deserve credit asf sdf list matching 
short survey programming language tools semantic specification :10.1.1.27.1551
extensible grammars form essential component similar systems 
phobos uses model developed cardelli matthes abadi moment system allows grammar addition extension update 
hand lexical specification quite complete includes multiple regular expressions terminal symbol allows inheriting language specifications extend remove override symbols 
allow generation illegal syntax caught conversion compiler representation 
furthermore system allows arbitrary number semantic action patterns grammar production specification lalr grammars extensible grammars ll 
system architecture mojave compiler architecture illustrated 
supports phobos extensible front multiple fixed front ends maps generalpurpose source language syntax distinct intermediate representation ir 
ir standardized low level intermediate languages continuationpassing style designed stepwise reduction various front features common mojave functional ir fir 
fir extension system constitutes core compiler 
aim exploit formal properties fir integrating metaprl formal system fir optimizations formal operations expressed including program verification type checking 
phobos allows syntactic semantic definition new languages extension general purpose front languages formal language defined directly metaprl 
illustrated paths ii respectively 
entire system written ocaml programming language 
metaprl uses term language represent program syntax mojave compiler uses internal representations 
fir metaprl links responsible converting mojave fir metaprl fir representations 
back ieee mojave ml java pascal phobos functional ir codegen machine code metaprl metaprl 
mojave compiler architecture generates object code currently intel platform 
phobos phobos provides generic scanning parsing designed take advantage metaprl formal system formal language development 
language definition source string phobos parses source syntax semantic actions defined language 
result metaprl term encodes meaning source string respect language specification provided 
compiler options guide process conversion resulting term 
may converted syntax representations supported fixed front ends compiler may passed metaprl fir conversion 
rationale simple may want phobos extend generalpurpose languages may want simplify task implementing new language reusing existing compilation path 
phobos metaprl fir path requires language designer perform compilation term rewriting languages quite difficult steps involved closure conversion frame allocation global optimizations needs global information guide program rewriting 
hand investigating performing transformations metaprl inference rules provide contexts conditional rewriting 
typical phobos language definition parts module module name include parent modules proceedings th hawaii international conference system sciences ii terms extend module term declarations global rewrites tokens longest lexical content left right symbols grammar start symbol grammar productions rewrites post parsing rewrites language module inheritance phobos implements simple scheme inheritance related language modules 
inheriting module imports syntax semantics implemented parent modules collisions resolved follows global rewrite rules new rules added defined parent modules 
rewrite rules redex takes precedence 
terminal symbols definitions extend remove override existing ones 
case matching definition priority longest matching symbol 
disambiguation rules sets rules defined inheriting modules replace parent module 
grammar rules latest production rule associated semantic actions overrides previous instances rule 
semantic analysis occurs post parsing rewrite rules 
inheriting language modules add new sets rules existing ones sets applied order definition 
modules included specified strings 
single identifier refer internal modules fc ast declares terms front syntax base defines basic arithmetic relational operators numbers numerous miscellaneous rewrite rules 
include module name module term declarations metaprl term implicitly encodes module defined scoping purposes 
similarly phobos occurrences terms rewritten include parent module specified directly phobos base number phobos base metaprl module phobos term declarations 
instance terms sum ieee prod declared part metaprl module expression 
occurrence sum rewritten expression sum 
furthermore special module designated reserved terms temporary nature terms encoding terminal symbols temporaries multi step term rewriting 
practice terms declared parameter types descriptive variable subterms see section term syntax 
terms extend expression declare sum prod 

term declarations global rewrite rules global rewrites define frequently term operations provide elegant concise notation hiding rewriting details 
global rewrites applied entire parsing process syntax related rewrite rules 
metaprl refiner applies rules top term repeatedly fixpoint reached 
phobos extends syntax terms wildcard term 
stands term 
rewrites subterms irrelevant prod 
lexical specification proceedings th hawaii international conference system sciences terminals symbols defined unique name set regular expressions 
hex extends num adding regular expression hexadecimal numbers may extend hex binary numbers overrides occurrences num hex grammar accompanies lexical specification 
hand binary numbers longer matched remove remove regexp option 
note terminals syntax discarded placing star symbol definition 
lexical analysis phobos constructs finite automata accept disjunction regular expressions associated terminal 
automata partition input string list tokens 
time new token source position calculated matched string corresponding terminal name added list tokens discovered 
input string reached symbol matches lexical error reported current position 
symbol matches order definition longest match selected 
tokens longest num token pos number hex extend num fa 
extend hex override num hex 
remove 
space 
lexical specification fragment syntax specification phobos allows definition ambiguous grammars descriptive natural uses precedence associativity information disambiguation 
associativity defined terminal symbols precedence derived ordering 
syntax defined context free grammars written backus naur form bnf production accompanied list rewrite patterns 
phobos accepts lalr languages standard parsing algorithm sources including appel 
gives examples grammar productions shorthand notation rewrite rules 
grammar definition complete nonterminal symbols declared start symbol specified option grammar section 
point actual start production created specified nonterminal eof body 
parsing performed pushdown automaton pda generated grammar 
pda stack contains terms represent symbols program 
language terms defined metaprl discussed section 
pda shifts pushes current term stack current state 
similarly reduces grammar production terms corresponding production body rewritten matching rewrite rule associated production 
associated rewrite rules stack terms combined default tuple term 
cases resulting term replaces related terms stack 
parsing tokens obtained lexical analyzer translated special token terms carry ieee left plus minus left times div grammar start exp exp num num num id id id exp plus exp sum exp times exp times times times times 

syntax specification fragment matched string source position may rewritten corresponding terminal symbol lexical rewrite rule 
instance part input string numbers rewritten metaprl number terms binary operators processed rewriting parser stack top right contain token position point grammar parser reduce multiplication replace top terms stack new term 
times parser encounters unexpected symbol rejects syntax error reported current position 
furthermore report error matching rewrite rule parser reducing production 
parsing proceeds tokens consumed final derivation start symbol obtained point parser accepts 
rewriting system parsing consists matching semantic rewrite rule associated current production possibly empty list global rewrite rules 
rewriting step done top term fix point reached 
conversion proceedings th hawaii international conference system sciences accepting resulting term may undergo rewriting 
sets rewrite rules applied consecutively final term obtained 
rewrites perform simple optimizations constant folding theories meta language logic engine term language theories language rewrite definitions tactics strategies rewriting proving refiner rewriter prover 
metaprl system architecture dead code elimination convert concrete terms instance front syntax fir 
mojave front supports ansi standard extensions exceptions polymorphism 
syntax sufficiently general high level constructs loops exceptions making target imperative languages 
corresponding term set defined module fc ast includes ocaml values true false type constructors option list 
declares terms representing basic list operations list create list append empty 
conversion internal compiler representation straightforward 
terms matched names subterms interpreted corresponding internal ocaml constructor 
case typing error exception raised term successfully converted passed back mojave compiler 
metaprl metaprl logical framework 
system architecture main parts shown 
refiner implements term rewriter meta language define term rewriting strategies theories phobos language definitions 
metaprl includes general purpose theorem prover develop logics program semantics languages define 
interest term rewriting system implemented refiner 
core refiner includes term module defines term syntax operations logic engine defines term rewriting theorem proving 
program syntax expressed language terms 
general syntax terms parts 
term operator name unique name identifies language operator term 
exam ieee ple operator name addition language fc ast add ast ast language definition specific operator language 
term optional list parameters representing constant values 
parameters build ground terms terminal symbols including numbers strings variables term may list subterms possible variable bindings 
syntax describe terms nuprl definition operator name examples shown right 
variables terms variable parameter name num proceedings th hawaii international conference system sciences pn parameters vm tm subterms printed form term number lambda apply var sum bers integer parameter 
lambda term contains binding occurrence variable bound subterm notation shorthand notation variables 
single quote uniquely identifies construction variable omit quote inferred context 
term rewriting defined set rules rule includes pattern rewritten redex value result rewrite contractum 
example rule beta reduction untyped lambda calculus expressed rule 
rewrite beta apply lambda declaration defines rewrite rule applied beta redex performing substitution 
note statement rewrite uses secondorder substitution 
pattern matches term variable allowed free term contractum constructs term matched substituted important property term rewriting system variable binding scoping explicit term rewriting avoids capture 
illustrate small example 
suppose want augment programming language iterate construction acts loop executes expression number iterations specified expression 
straightforward macro expansion terms loop introduce new iteration variable final index prevent evaluated 
rewrite defined follows conventional syntax simplify notation iterate int key part term representation declaration variables expansion defines binding occurrence variables 
expand program fragment iterate rewriter rename variables avoid capture producing program 
byproduct formal system capture avoidance necessary consistency 
int benefits metaprl term rewriting engine 
metaprl logical framework language definitions coupled semantics reason optimize transform programs 
metaprl implements broad set primitives data types lists sets trees functions data structures 
data structures transparently 
metaprl heavily optimized current implementations achieve millions rewrites second intel mhz pentium ii 
example section outline design small ml language numerical calculations evaluated parse time 
goal illustrate higher order syntax full power system describing complete program evaluation serve basis partial evaluation real applications integral part related optimizations including constant folding function inlining dead code elimination 
syntax defined 
task distinct steps parsing performing linear conversion evaluation 
parsing denote program variables metaprl variables binding performed 
linearize source program binding structure apparent 
evaluation proceeds substituting expressions place variables ultimately resulting constant 
ieee definition exp num var true false exp exp exp exp exp exp id exp var exp var var rec var var exp top var exp var var rec var var prog top parsing 
syntax including necessary functionality phobos base defines numbers booleans basic types basic arithmetic relational operators list operations miscellaneous rewrites 
term language encode syntax declared 
module include phobos base terms extend declare binop 
proceedings th hawaii international conference system sciences terminal symbols include numbers boolean values identifiers keywords operators 
note identifiers rewritten metaprl variables numbers rewritten built numbers 
tokens longest id za za token pos num token pos number 
define grammar language 
segment defines expressions programs 
note term resulting start production wrapped evaluation term subterm denotes evaluation context initially empty 
evaluation term responsible evaluating entire program 
wrap list top level definitions term reduced linear conversion defined 
furthermore note token precedence shown 
grammar start prog prog top list list eval nil linear list top id var eq exp var var id opt id list eq body body fun body rec id opt id list eq body body fun rec body exp num id true false exp plus exp binop 
exp exp exp id opt exp list apply exp linear conversion parsing main program represented list top level definitions 
impose variable bindings defined source program need linearize definitions 
result single term subterms bound variables modulo alpha renaming corresponding point source program 
linear conversion denoted similar continuation passing style cps conversion defined list terms el follows 
ieee exp exp rec rec rec rec translate directly rewrites 
rewrites linear cons number num nil number num linear cons var var nil var linear cons true nil true linear cons false nil false linear cons binop op nil binop op linear cons cond nil cond linear cons apply params nil apply params linear cons var var exp letvar exp linear linear cons fun var linear linear linear cons fun rec var rec linear linear evaluation proceedings th hawaii international conference system sciences specifying evaluation rules maintain environment contains function definitions current scope 
entry environment tuple rec params body rec indicates recursive denote rec rec 
number number true true false false binop binop true false rec pn en pn en rec pn en pn en params rec params rec params rec params top level evaluated follows 
params rec params rec params formal evaluation rules implemented rewrite rules straightforward manner 
evaluating constants 
eval env number num number num eval env true true eval env false false binary operations evaluated steps 
operands evaluated entire operation rewritten result term 
second step operation evaluated subterms result term 
instance subterms operation equality result true term 
arithmetic relational operators accept number operands mapped base operators 
eval env binop op eval env res op eval env eval env eval env res number number sum eval env res true true true 
evaluating expressions similar 
evaluate boolean condition 
true evaluate expression expression 
eval env cond eval env res eval env cond eval env res true eval env eval env res false eval env ieee function application bit complex 
look function called evaluation environment check right argument arity assign arguments formal parameters evaluate assignments followed body function 
note bind function variables definition inlining recursive functions capture causes alpha renamed recursive function variable 
function simplicity 
eval env apply args eval env inline function env args evaluating forms straightforward 
note binding variable declared bound expression follows 
add fun fun rec adds new function entry environment 
eval env letvar exp var rest var eval env rest eval env exp eval env var params rest eval add fun env var params rest eval env rec var params rest eval add fun rec env var params rest top level function definition assignment executes program 
eval env top letvar var exp eval env exp eval env top var params eval env eval env top rec var params eval add fun rec env var params formedness proceedings th hawaii international conference system sciences evaluation variable encountered free replaced evaluating earlier form 
eval env var error free variable program type checking programs performed additional step evaluation 
ultimately expressions mapped constants operations formedness expressions determined rewrite operations 
mentioned earlier operations valid operands evaluated encounter unreduced terms evaluation report error message 
rewrites eval env res error boolean condition eval env res op error invalid operands note raise error messages source locations treatment ignored position information simplicity reasons 
phobos provides convenient position handling extension straightforward 
furthermore reader referred complete definition 
outlined generic front phobos demonstrated formal language development simple functional language syntax operational semantics formally defined 
utilized formal system perform full program evaluation essential component advanced optimizations 
earlier design clip imperative language strong resemblance pascal showed definition extension formalized fir language phobos expressed formal optimizations metaprl :10.1.1.10.1420
current efforts concentrate formal definition optimization unity languages 
languages defined dynamic front ends mojave compiler 
phobos significant metaprl formal system 
metaprl provides features including language terms capture avoiding term rewriter broad set data structures 
plan take advantage metaprl logical framework program reasoning transformation synthesis 
realize limitations approach 
importantly consideration rewriting termination church rosser properties 
furthermore language designer familiar mojave compiler internal representations corresponding term sets 
furthermore order manage languages multiple ancestors useful hierarchical grammars lexical specifications 
hand phobos reuse mojave architecture including front fir optimizations 
initial aim offer open term language conversion internal representations dynamic addition source languages mojave compiler 
currently phobos convert front syntax fir 
demonstrated successfully converting imperative languages syntax ieee viable rewrite rules tedious accomplish involved transformations :10.1.1.10.1420
investigated formal approach language specification phobos parsing employing metaprl advanced inference rules transformations 
results promising currently working formal integrated design environments fide allow dynamic language specification formal reasoning 
phobos serve link application libraries domain specific languages 
functionality implemented application libraries imported new language specifications front features external function calls 
instance define dsl scientific computations high precision arithmetic implemented library users link compiling source programs mojave 
furthermore intend phobos define metalanguages express optimize code segments written different domain specific languages 
main advantage meta languages ability express computation language closest programmer intuition seamless integration computations 
proceedings th hawaii international conference system sciences aho johnson ullman 
deterministic parsing ambiguous grammars 
communications acm 
allen 
non type theoretic definition martin types 
proc 
second symp 
logic comp 
sci pages 
ieee june 
allen constable howe aitken 
semantics reflected proof 
proc 
fifth symp 
logic comp 
sci pages 
ieee june 
appel 
modern compiler implementation ml basic techniques 
cambridge university press 
hickey 
formal design environments 
international conference theorem proving higher order logics tphols 
appears nasa technical report nasa cp 
bachrach 
java syntactic extender 
proceedings oopsla conference object oriented programming systems languages applications pages 
acm press 
daniel de 

caml inria fr 

girard 
une extension de interpretation de del analyse elimination des coupures dans analyse la theorie des types 
nd scandinavian logic symp pages 
springer verlag ny 
hickey :10.1.1.10.1420
phobos front approach extensible compilers long version 
technical report computer science dept california institute technology 
heering klint 
semantics programming languages tool oriented approach 
acm sigplan notices 
hickey nogin 
fast tactic theorem proving 
theorem proving higher order logics tphols august 
hickey 
metaprl logical programming environment 
phd thesis computer science dept cornell university ithaca ny 
isabelle pascal alexandre didier parigot claude pasquier 
generator interactive environments tools 
reinhard wilhelm editor th international conference compiler construction volume pages 
lecture notes computer science springer verlag 
goguen malcolm 
algebraic semantics imperative programs 
mit press 
hickey smith gray 
mojave research group website 
mojave cs caltech edu 
jean pierre jouannaud 
rewrite proofs computations 
helmut schwichtenberg editor proof computation volume pages 
springer verlag 
johnson sethi 
yacc parser generator 
pages 
leeuwen editor 
handbook theoretical computer science vol 
elsevier science publishers 
luca cardelli florian matthes mart abadi 
extensible syntax lexical scoping 
technical report src digital equipment systems research center feb 
kutter 
formal aspects development environments montages 
sellink editor nd international workshop theory practice algebraic specifications asf sdf 
electronic workshops computing springer british computer society 
van den brand heering klint olivier 
compiling rewrite systems asf sdf compiler 
acm transactions programming languages systems 

lisa interactive environment programming language development volume 
lecture notes computer science springer verlag 
nogin hickey 
sequent schema derived rules 
theorem proving higher order logics tphols 
prieto az 
domain analysis 
acm sigsoft software engineering notes 
vouillon 
objective ml simple object oriented extension ml 
acm symposium principles programming languages pages 
steven ganz amr sabry walid taha 
macros multi stage computations type safe generative binding macros 
proceedings acm sig plan international conference functional programming pages 
acm press 
ieee 
