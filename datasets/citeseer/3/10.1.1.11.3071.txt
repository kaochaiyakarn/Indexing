markus noga universit karlsruhe program structures group karlsruhe germany markus noga de formalizes domain tree xml processing classifies implementation approaches 
lazy approach original contribution depth 
proceeding experimental measurements derive selection strategy implementation approaches maximize performance 
categories subject descriptors data data storage representations document text processing document preparation programming techniques applicative functional programming general terms measurement performance design keywords parsing lazy evaluation xml document object model 
xml data processing cornerstone contemporary applications 
examples include content management systems office packages web development electronic business suites ultimately manipulate xml documents 
certain simple operations xml documents defined textual document representation 
text substitution case 
operations aware nested structures visualizing route planning results vector graphics 
formulating operations textual representation hard 
trees convenient representation tasks 
computations xml trees performed xml processors 
general processor input output ports may typed dtds xml schemas permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
november mclean virginia usa 
copyright acm 
lazy xml processing steffen universit karlsruhe program structures group karlsruhe germany info steffen de xj msi software technology group xj sweden lowe msi se deserialize transform serialize simple xml processing network 

call processors sources processors sinks processors transformations 
example source xml parser textual xml representations trees 
correspondingly serialization performed xml writers simple sink 
restricted single input xslt scripts transformations sense 
processors require full access inputs 
generating outlines tree nodes corresponding chapters sections visited bulk paragraph nodes 
specific input tree define coverage processor input port fraction nodes visited 
processors term processor coverage 
individual processors connected form xml processing network 
architectural systems input port connected single output port 
data flows output input 
fig 
shows pipeline simple case processing network 
approaches implement xml processors network 
ignore issue distribution classify approaches control flow type information fig 

control flow push pull 
push model activity resides sources 
push data edges network irrespective attached processors real needs 
pull model sinks active 
pull exactly required partial documents processors attached inputs 
type information interpreted compiled 
interpreted typing types available run time 
interpret pass document types transformations interpret xsl transformations pass output types 
compiled typing type information available network composition 
admits static preprocessing 
dimensions control flow type information yield different approaches 
traditional eager processing simplest employs partial processing preprocessing 
lazy processing corresponds lazy evaluation functional programming languages address section 
data driven processing implements preprocessing 
demand driven ap control flow push pull interpreted lazy eager traditional type information compiled demand driven data driven approaches xml processing proach combines lazy processing preprocessing 
classification implementation approaches pose central question selection strategy maximize performance consumer uses entire document pull processing carry performance penalty push approaches due multiple invocations system boundary 
coverage decreases pull performance improve dramatically 
expect compiled approaches offer superior performance compared interpreted ones 
focuses claim analyzes quantitatively 
choose known domain measure tradeoffs push pull processing 
prior validates second claim restrict simpler dynamically typed case 
welcome side effect lazy produces information access profile consumer fly 
evaluating progress parsing fractions tree created accurate picture obtained 
access profile may prove useful tailoring static optimizations 
lazy interesting platform 
subsection examines state art 
describe lazy architecture section 
comparative measurements taken section 
section summarizes results outlines 

state art discuss lazy evaluation context functional programming languages 
focus xml examine textual representation standard dom interface xml trees xsl transformation language viewpoint pull processing 
examine available available parsers transformers classify fig 

check available xsl test suites measure tradeoff question 
summarize findings 
lazy evaluation functional languages functional programming originated kleene model algorithms recursive functions 
model functions taken predefined set composed substitution primitive recursion recursion 
lambda calculus simpler model 
consists function definitions function applications 
functional languages expressed completely terms lambda calculus 
lambda convenient model large subsets imperative languages 
illustrate lambda calculus short example 
simply returns argument 
succ successor function natural number represen tation succ succ return successor argument 
terms evaluated different strategies 
strategies evaluate term may differ performance 
direction evaluation function left right right left usually little impact 
treatment nested function applications important performance characteristic evaluation strategy 
consider strategies compute nested function applications bottom manner 
evaluate inner subterms combine results outer function 
example compute successors discard second result 
approach called eager evaluation 
inverse approach examines results required outer term computes combines 
example strategies determine uses argument compute needed successor 
approach called lazy evaluation 
lazy evaluation generally faster eager evaluation avoids unnecessary function applications 
example lazy evaluation requires successor evaluation eager evaluation requires 
successors computationally cheap difference pronounced expensive functions factorials 
lazy evaluation important advantage 
necessary subterms evaluated total number subterms may infinite 
tough problems easily expressed infinite intermediate representations 
functional languages lazy evaluation 
lazy approach instance approach 
unfortunately due preprocessing phase lazy parsers operate infinite intermediate structures 
structures may important concept lazy xsl transformation 
xml standards basic properties xml known 
xml files store pre order depth traversals xml trees 
pull processing interested parsing xml files partially 
unfortunately nesting structure encloses element content pairs corresponding opening closing tags 
linkage adjacent nodes stored explicitly subtrees skipped scanned 
words simple navigation operations tree translate expensive operations serialization format 
furthermore entire document contained single top level element 
document scanned entirety statement top level structure 
result partial parsing generally requires form preprocessing 
dom defines interface tree representations xml data 
established standard 
efficient pull processing tree interface offer highly selective access operations 
informally selectivity fraction nodes returned operation interested 
low selectivity burden eliminating undesired results resides caller 
selective interface tighter limits coverage preserved processing chain 
dom offers access operations position name 
sufficient determined priori 
xslt scripts specify transformations set xml documents 
inspired functional programming xslt operations free side effects tree output 
bound functionals may retained evaluated tree fragments time 
xslt wellsuited partial transformations input document fits concept pull processing 
xml parsers widely available xml parsers follow traditional approach interpreting dtds xml schemas 
examples genre apache xerces james clark xp sun parsers 
xerces produce dom output implement sax messaging 
prior includes compiler approaches xml parsing notably 
provide proprietary messaging dom interfaces 
xerces parser supports lazy processing defer node expansion feature 
documentation states feature set true dom nodes returned document expanded tree traversed 
faq document states precisely immediate children node created node children accessed 
unfortunately dearth specifics 
inspection source reveals deferred node expansion exactly says defers object encapsulation node data stored tables 
tables contain fully parsed document tree data performance gains bound small 
demand driven parsers 
xml transformers widely available transformers follow traditional approach interpreting xslt script immediate processing 
saxon xt xalan fall category 
xalan operate dom input contenders accept sax messages 
compiler approaches include 
uses proprietary specifications accepts standard xslt scripts 
lazy demand driven approaches 
xml test suites test suites xslt processors publicly available 
older suite historical interest newer incorporated completely 
contains variety test cases simultaneously serve regression performance tests 
unfortunately regression aspect highly dominant 
test case traverse entire document 
form valuable execution frameworks publicly available test suites ill suited evaluate partial processing 
summary lazy evaluation functional program important performance optimization additionally allows programmers infinite intermediate structures 
lazy evaluation interesting xml processing 
approach xerces called 
approaches require preprocessing 
dom canonical interface xml trees implemented lazy parser ensure comparability 
experiments tell dom selective retain coverage bounds 
transformation processors map xpath selection operations dom implementation dependent way sparse xpath selection need result sparse dom queries 
comparing lazy traditional parsing performance requires transformation context 
apache xalan provide context apache xerces dom mode suitable comparison candidate especially offers somewhat lazy mode operation 
existing test suites span wide coverage range custom test generator required 
section covers generic architecture lazy xml parser 

architecture discuss generic architecture lazy xml parsing 
subsequently refine architecture prepare ground dom implementation 
generic architecture discussed previous section xml immediately suitable partial parsing 
form preprocessing required locate closing tags determine nesting structure 
consequently process lazy parsing decomposed phases see fig 

xml preprocessing source document structure progressive parsing lazy xml parser architecture document tree illustrate operation phase xml character document xml lexing encoding progressive parsing article title mice men source section title unrelated internal grouped subject 
representation dom interface section title mice mice small felty 
section section title men men women tall 
section section section title hands great depression 
section article preprocessing phase skims source extract document structure tree 
representation stores node types hierarchical relationships nodes textual representation node 
possible types element text processing instruction document type entity 
hierarchy amounts storing children element 
non elements hierarchy trivial 
textual representation allows progressive parsing 
consumers access node detailed information parsed irrespective node environment 
conceptually resulting structure tree attributed types source see fig 

text line element line element line text line element line element line text line sample structure tree element line text line progressive parsing phase constructs highly detailed virtual document tree demand 
initially root node virtual tree exists 
remaining nodes virtual 
consumers invoke methods existing nodes retrieve attributes children 
parts document requested consumer respective parts source document parsed corresponding nodes virtual document tree created 
consider consumer creates high level outlines list toplevel sections article 
fig 
shows fragment virtual document tree created execution consumer 
name mice men article section section name unrelated name sample virtual document tree design concerns preprocessing progressive parsing encapsulated separately 
implementation preprocessing may reused various progressive parsers independent interfaces provide tree access 
build virtual document tree dom interface arbitrary proprietary ones 
refining architecture ready discuss concrete architecture low level access trees 
case document tree interface offers categories basic operations node objects hierarchical navigation namespace prefix resolution data retrieval 
examine characteristics requirements choosing design 
hierarchical navigation retrieves parent sibling descendant nodes node 
information document structure prerequisite task accomplished parsing solely relying information delivered preprocessing phase 
namespace prefix resolution maps prefix namespace declared element ancestor 
far enclosing elements unparsed resolution triggers parsing retrieve necessary information 
data retrieval operations obtain information node tag names attribute names values required information local node 
hierarchical navigation namespace prefix resolution require information directly available individual node objects 
consequently requests properly handled node objects 
processed delegation 
document tree root node initially available choose preprocessing data available 
non local requests nodes delegated document root 
necessarily apply data retrieval 
cases node needs parsed object creation 
information process data retrieval requests available creating node object 
freely choose augment node objects information realize data retrieval operations delegation consistent approach 
choose second alternative reasons consistency flexibility 
tag attribute names stored root 
consistent delegation keeps node objects lightweight 
data structures reside centrally root node object including bookkeeping data track progress parsing node objects created 
lazy parsing centralized affair 

implementation section discuss java implementation lazy parsing xml conforms preprocessing refined progressive architecture parsing previous section 
fig 
refines architecture 
source mentioned document choice virtual interface arbitrary 
structure give details salient data structures preprocessing discuss progressive parsing depth 
xml character encoding lexing source internal representation progressive parsing lazy xml parser implementation dom interface preprocessing preprocessing phase implementation analyzes document structure builds internal representation suitable partial parsing 
depicted left half fig 
phase consists steps 
pluggable reader converts various character encodings permitted xml sources stream unicode characters 
simple fast lexer assembles token sequence character stream 
token sequence controls recursive descent pre parser responsible building internal representation 
course recursive descent nodes indexed sequentially depth pre order document order 
node index assigned way serves uniquely identify individual nodes 
node recursive descent retains sibling parent siblings 
furthermore retain node types textual representations 
object creation single expensive operation java implementation departs architectural view structure tree nodes individual objects 
chose non interleaved memory representation employs contiguous arrays string buffer 
arrays accessed node index grown dynamically construction 
fig 
shows internal representation sample document section 
byte nodetype int int stringbuffer text article title mice men section title unrelated grouped sub ject section title mice mice rat small felty section title men women tall title hands great depression 
internal structure representation nodetype type array stores node types 
implementation choose ignore document type nodes 
different node types elements children text nodes comments processing instructions entity 
clarity choose byte array bit vectors 
array retains hierarchy stores node index sibling parent discussed 
parents lower node indices children kinds distinguished 
string buffer contains unicode sequences progressive parsing 
data nodes concatenated document order 
node types structure decoded delimiting character sequences 
counterparts omitted closing tags 
resolve strings individual nodes array stores index string buffer node 
representation consumes bytes node plus space textual representation 
implementation input stream decoded prior structure analysis textual representation stored unicode string consuming bits character 
assuming document authors generally chose efficient character encodings utf english text shift jis japanese refine lazy processing 
scenario storage saved computing token sequence raw input stream deferring character decoding progressive parsing 
due need multiple scanners pursued path 
progressive parsing fit measurement framework provide dom interface virtual document tree 
java bindings dom defined java api xml processing short 
xslt writes input confined read dom 
additionally included functions measure input coverage gathering access profiles 

measurements interested relative performances lazy tree construction traditional eager approach parsing building document trees 
lazy tree construction avoids parsing constructing parts tree accessed 
expect performance superior sparse coverage 
dynamic adaptation mechanism requires additional bookkeeping delegates numerous api calls central document object 
expect overheads worsen performance full coverage repeated accesses 
weak lazy approach xerces deferred node expansion fall eager lazy approaches 
validate expectations measure execution times full range coverage 
data particularly looking break point lazy traditional approaches 
test suite generator stated section benchmarks existing test suites cover full range coverage 
developed custom benchmark generator 
implemented java generates custom test cases configuration templates 
test case consists xml source document sets xslt scripts configuration file 
source document generated template xml file nested elements text describe structure output document 
text simply copied template output element configured specifying tag name number times content repeated 
xslt scripts describe simple transformations copy portions input document output document 
sets transformations span full range coverage 
set uses limits traversal breadth achieve partial coverage second employs limits depth 
way accumulate access profiles different kinds gradually increasing coverage 
configuration file inserts test cases benchmark framework 
specifies list transformations executed timed varying inputs 
benchmark compiled benchmark running lazy dom implementation eager implementation 
comparison choose apache xerces java parser release freely available traditional xml parser supports dom api shows fairly performance 
traditional deferred modes tested 
generated disparate test cases tool described 
java benchmark framework vorlage data xsl vorlage level vorlage data level vorlage data xsl vorlage level vorlage data level vorlage data xsl vorlage level vorlage data level vorlage data xsl vorlage level vorlage data level vorlage data xsl vorlage level vorlage data level vorlage data xsl vorlage data xsl vorlage data xsl vorlage data xsl vorlage data xsl vorlage data xsl vorlage data xsl vorlage data xsl vorlage data xsl vorlage data xsl vorlage data xsl vorlage data xsl vorlage data xsl vorlage data xsl vorlage data xsl vorlage data xsl vorlage data xsl lazy dom vorlage data xsl xerces dom vorlage data xsl xerces deferred dom vorlage data xsl vorlage data xsl vorlage data xsl vorlage data xsl vorlage data xsl coverage vorlage data xsl transformation time ms transformation time ms depth limited processing time lazy dom xerces dom xerces deferred dom coverage breadth limited processing time individual transformations applied apache xalan xslt transformer 
established standard implementation capable operating dom input 
unfortunately current versions xalan convert entire input tree internal representation resulting full coverage 
restricted xalan version 
input trees provided xerces running dom mode lazy dom parser respectively 
transformation dom implementation respectively cumulative runtime subsequent iterations measured compensating coarse resolution system clock 
order bypass disturbances caused jvm just time compilation conducted blind runs prior measured executions 
coverage measured gathering access profiles virtual document tree 
ran measurements mhz pentium iii mb memory windows professional sun java sdk standard edition version 
results fig 
show processing times depth limited breadth limited test cases respectively 
depth limited test case comprises binary xml tree kb source nesting depth levels 
breadth limited case contrasted tree nesting levels branching factor level kb source 
resulting graphs similar cases 
zero coverage lazy parsing outperforms eager approach considerable 
lead continuously de increasing coverage 
break lazy eager processing occurs coverage 
lazy processing incurs overhead full coverage 
xerces deferred node expansion consistently performs worse 
trade point versus eager processing lower 
results independent traversal limits lazy strategy appears convincing shallow breadth limits 
numbers validate initial expectations 
fig 
show memory consumption benchmarks 
zero coverage lazy processing outperforms eager approach 
lead declines increasing coverage reaching parity 
full coverage lazy processing incurs memory overhead eager processing 
memory consumption xerces deferred node expansion lies near average lazy eager processing similar tradeoff point lazy processing 

depth breadth limited transformations processing times lazy approach approximately linear percentage nodes visited 
traversal cases lazy approach breaks eager processing coverage 
coverage uniquely determines tradeoff lazy eager processing test cases 
limits breadth depth highly disparate cases 
general path tree traversals induced xsl transformations lie ex memory consumption mb memory consumption mb lazy dom xerces dom xerces deferred dom coverage depth limited memory consumption lazy dom xerces dom xerces deferred dom coverage breadth limited memory consumption 
propose strategy maximize performance choose lazy implementation coverage exceed eager 
low footprint devices memory overhead lazy processing high coverage may problem 
sketched final paragraphs section extending lazy approach character set decoding alleviate problem document authors suitable character encodings 
unfortunately xslt scripts standard test suites visit node document exhibit full coverage 
partially due dual purpose 
suites simultaneously benchmark validate processors complete processing desired 
cases disabling superfluous default processing rules goes long way ensure sparse coverage xslt scripts 
cases mapping xpath steps dom operations destroys sparseness 
dom support proper filtering sparse transformation xslt level maps complete dom tree traversal 
problem inherent dom may eliminated adopting new interface 
completed implementing lazy xsl transformations center new interface 
aim provide uniform access transformation processors preserving sparseness improve networked performance 
lazy xsl transformation available aim explore infinite intermediate documents 
structures contribute clean efficient designs remains open question xml processing networks 
exploring related idioms functional programming languages may promising direction 

anonymous reviewers dedication quality 
insightful comments really helpful enhancing 

xerces java parser 
apache xml project xml apache org xerces 
xalan java xslt processor 
apache xml project xml apache org xalan 
project 
group university karlsruhe pc info uni karlsruhe de 
bass clement kazman 
software architecture practice 
addison wesley 
church 
calculi lambda conversion 
princeton university press 
clark 
xp xml parser java 
www com xml xp 
clark 
xt 
www com xml xt 

von als xml 
universit karlsruhe ipd goos jun 
hughes 
functional programming matters 
computer journal 
kay 
saxon xslt processor 
saxon sf net 
kleene 
general recursive functions natural numbers 
math 
ann 
landin 
programming languages 
communications acm 
noga 
foundations fast communication xml 
annals software engineering jun 
noga 
scenario connector optimization 
lncs ifip acm cd pages 
springer jun 
mccarthy 
history lisp pages 
academic press new york 
noga 
aus xml schemata 
universit karlsruhe ipd goos www noga de markus xmlschema diplomarbeit pdf oct 
simple api xml processing 
www org 
schmitt 
entwicklung eines xslt 
universit karlsruhe ipd goos may 
shaw graham 
software architecture practice perspectives emerging discipline 
prentice hall 
document object model 
www org dom 
xml information set 
working draft july www org tr wd xml 
xml schema part structures 
recommendation may www org tr rec xmlschema 
xml schema part datatypes 
recommendation may www org tr rec xmlschema 
extensible markup language xml 
www org tr rec xml 
xsl transformations xslt 
www org tr xslt 
java api xml processing 
sun microsystems edition 
xml parser java 
ibm alphaworks alphaworks ibm com aw nsf xml 

tfi technology www tfi technology com xml html 

technology www com 
