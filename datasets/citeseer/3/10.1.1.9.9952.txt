design implementation tcp friendly transport protocol ad hoc wireless networks fu benjamin greenstein meng lu computer science department university california los angeles ben cs ucla edu transport protocol design mobile ad hoc networks challenging unique issues including disconnection reconnection high order delivery ratios channel errors network congestion 
describe design implementation tcp friendly transport protocol ad hoc networks 
key design novelty perform multi metric joint identification packet connection behaviors endto measurements 
testbed measurements ns simulations show significant performance improvement standard tcp ad hoc networks 
proliferation mobile computing devices spurred interest mobile ad hoc wireless networks 
networks mobile users may exchange data messages access internet large 
tcp predominant transport protocol wired internet deliver data consequently numerous internet applications developed run tcp 
important design transport protocol mobile users backward compatible tcp friendly 
tcp relies packet loss indication network congestion triggers efficient congestion control algorithms congestion detected 
known tcp efficient ad hoc networks 
addition congestion transport protocol ad hoc network handle mobility induced disconnection reconnection route change induced packet outof order delivery mobile hosts error wireless transmissions reaction events require transport control actions different congestion control 
better periodically probe link layer re transmissions mac packet loss occurs bursty channel error mac layer contentions 
network disconnection backoff exponentially sense simply re transmit packet lost random channel error multiplicatively decrease current congestion window 
correct action executed response type network event immediately obvious construct engine accurately detect classify events 
packet loss detect differentiate new network events 
literature tcp friendly transport mobile wireless networks network oriented approach 
approach network router implements monitoring mechanism generates notification message detects abnormal event tcp may react 
mobility triggers network disconnection called link failure event routing layer sends explicit link failure notification elfn tcp sender explicit congestion notification ecn message generated congestion loss occurs explicit loss notification eln sent tcp sender router observes wireless channel induced packet loss 
sound techniques improve tcp performance ad hoc networks rely global deployment node 
techniques may difficult adopt practice potential heterogeneity participating nodes 
nodes ranging high notebooks hand held devices varying resources consequently varying abilities adopt full blown network oriented transport solutions 
contrast approach easy implement deploy requires network support provides flexibility backward compatibility 
explore approach improve tcp performance mobile ad hoc networks 
implement design hosts rely explicit network notification mechanism 
measurements detect congestion disconnection route change channel error detection result triggers corresponding control actions 
measurement data ad hoc networks noisy consequently may lead false detections notifications 
robust detection noisy measurements poses great design challenge 
previous study shows single metric approach round trip time rtt packet inter arrival time encouraging large amount noise associated measurements 
false detection come forms 
network congestion example may go undetected conversely congestion may inferred network fact congested 
measurements host probability congestion go undetected low 
measurement metrics rtt inter arrival time increase network congested 
single metric measurements probability false congestion detection uncongested ad hoc network quite high 
sort false detection lead serious throughput degradation 
key innovation proposed multi metric joint identification 
exploiting degree independence measurement noise individual metrics probability false identification significantly reduced cross verification 
describe necessary network states ad hoc network identified tcp examine metrics measured 
particular metrics devised detect congestion idd inter delay difference stt short term throughput 
exhibit unique pattern congestion non congestion states influenced different network conditions way respective measurement noise largely independent 
multi metric joint identification approach able reduce false detection cross validation 
extensive network simulations real test bed measurements show technique viable achieving reasonably accurate detection improve tcp performance significantly 
remainder organized follows section provides overview design rationale 
section describes detection 
design implementation adtcp section 
simulation real test bed measurement results sections 
section discusses related concludes section 
design rationale measurements identify presence various network conditions left unchecked degrade throughput 
achieve determine network states tcp monitor 
states identification target 
determine available metrics accurately identify network state 
goal identification algorithm mapping metric measurements target states 
discuss problems section describe identification algorithm section 
states identified decide network states identified assume situation tcp knows packets lost consider tcp improve performance 
packet loss due congestion tcp apply congestion control mechanisms tcp better slow exponentially backoff timeout 
knowing current network congested important 
turns proper congestion identification proves biggest improvement tcp ad hoc networks 
second packet lost due reasons congestion tcp benefit knows loss due channel errors network disconnection 
loss due channel errors simple retransmission adequate 
due disconnection special probing mechanisms needed prompt transmission recovery network reconnection 
previous research indicated identifying network states necessary improve tcp performance ad hoc networks 
congestion cong network congestion occurs ad hoc transport adopt congestion control actions conventional tcp 
define congestion queue build packets dropped due buffer overflow nodes 
states considered network congestion channel err random packet loss occurs slowing sender re transmit lost packet 
route change delivery path hosts change time time disconnections short term result tcp timeout 
depending underlying routing protocol receiver may experience short burst order packet delivery packet losses 
cases sender estimate bandwidth new route setting current sending window current slow start threshold initiating congestion avoidance phase 
disconnection disc delivery path disconnected long cause tcp retransmission timeout backing exponentially sender freeze current state congestion window retransmission timeout perform periodic probing connection re established 
re established actions followed 
metric definition idd arrival time packet sending time sender stt received packets interval por po po order packets plr lost packets interval table 
proposed metrics packet loss may caused combined effects multiple network conditions 
example may cause multiple flows go hot spot cong losses occur bursty cause repeated link layer failures disc conditions eventually take place 
goal tcp friendly cong highest priority identification 
states considered network congested 
devising metrics measurement widely tcp 
round trip time rtt maintained tcp sender calculate retransmission timeout 
previous uses delay related metrics measure congestion level network 
example inter packet arrival delay uses rtt estimate expected throughput 
challenge ad hoc networks packet delay longer influenced network queue length susceptible conditions random packet loss routing path oscillations mac layer contention conditions measurement highly noisy 
pursue single metric robust dynamics network devise metrics tend influenced different conditions noise independence exploited multi metric joint identification 
inter packet delay difference idd metric idd measures delay difference consecutive packets table 
reflects congestion level forwarding delivery path directly sampling transient queue size variations intermediate nodes 
time sender receiver sides shown vertical arrows 
packet arrival receiver calculates idd value 
shows onset congestion queue length build process reflected series idd samples increasing values 
addition conventional inter packet arrival delay iad idd unaffected random channel errors packet sending behaviors 
second shows random packet losses influence iad measurement idd 
third assuming network congested packet sending behavior influences iad subtracting sending time difference idd affected 
ad hoc network number situations idd values give incorrect estimation congestion 
example idd influenced non congestion conditions mobility induced order packet delivery 
section evaluate accuracy idd detect network congestion 
accuracy decreases node mobility speed increases 
short term throughput stt compared idd stt intended network congestion identification 
provides observation time interval sensitive short term order packet delivery idd 
stt robust transient route changes frequent mobile ad hoc network 
stt detect congestion susceptible measurement noise introduced bursty channel error network disconnections altering tcp source rates 
section combine stt idd jointly identify network congestion 
aside delay related metrics consider metrics non congestion state identification 
packet order delivery ratio por packet counted order arrives packet sent tcp sender 
receiver records maximum sending time received packets tcp connection denoted received packet sending time stamp added por 
por intended indicate route change event 
route switching period multiple delivery paths exist 
packets new path may catch old path delivered order 
packet loss ratio plr time interval compute metric number missing packets current receiving window 
por measure intensity channel error 
section described network states important improving tcp performance ad hoc network metrics measured 
section study identify states metrics discussed 
choice provides trade metric accuracy responsiveness 
design choose half rtt 
idd idd idd sender receiver idd iad idd iad idd iad receiver sender idd iad idd iad idd iad idd iad idd iad sender receiver 
idd iad measurements left right incipient network congestion channel error tcp slow start phase identification multiple metrics section describes detect network states multi metric measurements introduces sample value classification technique improve detection accuracy 
achieved accuracy approach evaluated simulations 
simulation results shown section default settings follows specified 
ns simulator cmu wireless extension modules 
wireless nodes roam freely topology random waypoint mobility pattern pause time zero node constantly moving 
wireless link bandwidth bps ieee dsr mac routing layer protocols 
tcp newreno maximum window size packets 
packet size bytes 
simulation lasts seconds 
introduce congestion competing udp cbr flows run time intervals respectively 
udp flow transmits kbps 
identifying network states identifying congestion study relationship network congestion idd stt simulate static mobile topologies 
tcp flow competing udp cbr flows introduced simulation network 
figures fig 
show simulation results 
static case channel errors second mobile case node mobility speed channel error 
figures plot measured idd stt values respect instantaneous maximum buffer occupancy nodes network reflects network congestion level sampling time instance 
maximum buffer size node packets simulations 
observe maximum network queue size exceeds half buffer capacity packets idd clearly high stt clearly low 
formalize observation defining value high low respectively top bottom samples network queue size small non congestion case idd stt vary low high 
comparing left figures fig 
node mobility metrics noisy non congestion state small network queue 
single metric detection idd stt noise reduces accuracy significantly network congested especially scenarios mobility channel error 
joint detection approach metrics verify improve accuracy 
specifically identify congestion state idd high stt low non congestion state 
shows multi metric approach better detection accuracy single metric approach 
network congested probabilities idd high stt low respectively 
single metric accuracy acc idd cong acc stt cong multiple metric case acc multi cong 
simulations show see left figures fig 
accuracies roughly equal congestion state 
hand network congested probabilities idd high stt low 
similarly acc idd non cong acc stt non cong acc multi non cong 
noise probability non negligible multiple metrics achieve higher accuracy 
combining cases multi metric identification improves accuracy non congestion states threshhold determined empirically simulation results real testbed measurements 
idd samples high threshold top stt samples low threshold bottom idd seconds stt packets idd stt vs maximum queue length network mobility maximum queue length network packets idd samples high threshold top stt samples low threshold bottom stt packets maximum queue length network packets idd stt vs maximum queue length network mobility channel error por plr measurement mobility channel error simulation time sec error error error error sec error error error error sec error error error error sec 
por plr measurement mobility varying channel error simulation time sec plr rte changes 
metric measurement 
left idd stt measurement instantaneous maximum queue occupancy wireless nodes network 
static nodes second mobile nodes 
right por plr measurements number route changes 
third mobile nodes channel error 
fourth static nodes progressively increasing channel error 
maintaining comparable level accuracy congestion state 
achieves better identification performance variety network conditions 
key insight non congestion state idd stt influenced differently various network conditions route change channel error congestion state dominated prolonged queueing delay 
noise probabilities largely independent 
effective verification multiple metrics possible long conditions exist measurement time interval 
joint identification technique achieve perfect accuracy increase accuracy significantly show section identifying non congestion states network state congestion seek detect 
third fig shows data simulation run node mobility speed single tcp flow created competing flows 
plot por plr sample values number route changes forwarding path time 
clear correlation route change events bursts high por measurement 
congestion channel errors simulations plr remains stable significant outliers 
anomalies correspond situations packets old path excessively delayed lost 
simulation shown fourth fig nodes immobile increasing channel error rates introduced 
case plr idd stt por plr cong high low high low high high low high disc normal default table 
metrics patterns network states 
high top values low bottom values care gradually increases channel error rate increases 
note high channel error rate create route change network turn result bursts high por measurements 
burst high por sample values indication route change high plr indication high rate channel error 
noted network may state high channel error route change identified high values plr por 
disc disconnection happens packet delivery interrupted non congestion reasons long trigger retransmission timeout sender 
sender maintains previous network state estimation disc state identified sender current state estimation non congestion retransmission timeout triggered 
table summaries metrics patterns different network states 
identification rules adtcp 
show section identi fication method combined simple sample classification technique achieves accuracy average simulations scenarios 
sample value classification identification rules issue tell sampled value specific metric high low 
tcp newreno uses exponentially weighted moving average method smooth rtt 
apply technique sample values metric threshold value judge current sample high low 
absolute threshold network conditions change time judgment sample value high low relative history 
capture relative measure propose simple density technique rsd relative sample density infer sample value high low set history records 
assume sample values vary range 
rsd divides range intervals interval holds sample values ir 
denote total number samples number samples interval 
corresponding interval br nc 
decide high rsd calculates ratio sample values total number samples rsd cdf distribution rsd readily tell percentage sample values lower rsd value close infers high history records 
order rsd value reflect current network conditions need maintain updated history record 
forgetting mechanism applied 
sample taken increment corresponding counter calculate rsd value 
subtract proportionally interval counter forgetting original sample distribution maintained total number samples kept constant 
way give weight new samples exponentially weight older ones calculating rsd 
algorithm rsd calculation history maintenance shown 
algorithm needs memory space computations rsd calculation history maintenance 
detailed comparison rsd weighted average estimation 
identification accuracy apply rsd classification study accuracy multi metric congestion identification 
particular compare single metric idd stt multiple metric approaches 
run sets simulations non congested congested cases 
non congested case single tcp flow created topology 
second congested case competing udp flows created 
cases random channel error introduced mobility speed varied repeat simulations times speed reduce impact random topology factors 
simulation packet loss compare identified network state actual network state determine accuracy detection particular packet lost due network congestion algorithm gives non congestion estimation count incompatible error error detection causes adtcp aggressive tcp consequently tcp incompatible 
shows percentage inaccurate identification cases 
single tcp flow case left mobility channel error dominant reasons packet loss 
increase mobility speed reduces accuracy single metric identification quickly 
simulations multi metric approach results inaccurate identification 
achieved cross verification idd stt measurements eliminate false congestion alarms 
incompatible error remains 
multi flow cases right congestion happens frequently 
multi metric identification accuracy observed simulations incompatible errors 
single metric approach accuracy 
summary demonstrated multiple metrics combined rsd feasible approach detect network events measurements 
adtcp design implementation adtcp seeks maintain backward compatibility tcp newreno 
uses identical connection establishment teardown processes 
adopts window congestion control sender network congestion identified 
improve performance tcp newreno ad hoc networks adtcp extensions sender side receiver side 
real network state obtained global monitor implemented ns simulator 
see implementation details 
idd stt idd stt incompatible error idd stt interval inaccuracy congestion identification single tcp flows node mobility speed idd stt idd stt incompatible error idd stt interval inaccuracy congestion identification multiple flows node mobility speed 
identification accuracy 
left percent inaccurate identifications non congested case right inaccuracy ratio congested case rd ack triggered closed probing packet sent timeout close tcp congestion control packet re sent cwnd adjusted packet re sent received new ack congestion non non cong rte chg ch err non cong congestion retransmit timeout established received rd dup ack channel error route change congestion probing rto triggered disconnection established congestion probing timeout 
modified tcp state machine adtcp sender linux implementation packet arrival receiver normal operations values previously discussed metrics calculated network states estimated 
receiver passes state information sender outgoing ack packet 
similar soft state approach 
information persistent network states relayed multiple ack packets providing robustness possible ack lost 
sender maintains current state feedback received ack packets 
proceeds normal tcp operations interruption triggered retransmission timeout third duplicate ack 
sender takes control actions receiver network state estimation 
modified tcp state machine shown sender 
particular probing state introduced explicitly handle network disconnection 
non congestion induced retransmission timeout occurs sender adtcp freezes current transmission state enters probing state 
sender leaves probing state new ack received probing timed tcp connection closed similar probing mechanism proposed multiple failed probing attempts 
due space limitation detailed pseudo code adtcp sender receiver omitted 

discussion noted control actions adopted sender necessarily optimal big step direction improving tcp operation ad hoc networks 
sender takes control actions third duplicate ack retransmission timeout regardless network state feedback received events 
design receiver side identification treated enhancement tcp ad hoc networks may help sender take appropriate control improve transport performance significantly 
enhancements adtcp behave exactly newreno 
adtcp sender receiver able correctly conventional tcp hosts 
adtcp sender communicating conventional receiver receive explicit network state information ack packets consequently fall back standard tcp congestion control operation 
hand conventional tcp sender receives state information bits sent adtcp receiver option field ack simply ignore information 
backward compatibility requires option field tcp header 
discuss detail section 
linux implementation implemented adtcp linux kernel tcp ipv code unchanged 
implementation details discussed 
receiver side identification module plugged receiver side 
kernel space xn integers allocated storing metrics samples set 
rsd related calculations performed normal processing incoming data packet 
network state represented bits bit corresponding identified state 
introduce option field tcp header kind adtcp len bits state set corresponding bits outgoing ack packet 
sender side logic process adtcp option field tcp header introduced sender side read network state bits incoming ack packets 
extend code handles third duplicate acks retransmission timeouts follow adtcp design 
particular sender goes probing state caches current transmission state begins small packets bytes payload probe receiver receives reception probing packet 
leaving probing state previous transmission state restored 
implementation complexity complexity protocol lies metrics collection state identification process receiver side account total code added linux kernel 
altogether adtcp adds lines code ipv protocol stack 
code generates additional computational cost order packet reception additional memory space tcp connection 
rsd parameter set practice refer section 
acceptable ordinary user considering rapid increase cpu power wireless mobile devices 
performance evaluation section evaluates performance adtcp relative tcp newreno tcp elfn system extensive simulation 
endto measurements tcp elfn collects link state information directly network expected accurate 
performance gain close elfn indicates effectiveness adtcp 
examine adtcp performance improvement comes 
adtcp steal competing tcp flow fair share bandwidth tcp friendliness maintained cases 
property critical allow adtcp incrementally deployed benefit network wide performance 
performance improvement shows performance gain adtcp compared newreno elfn tcp flow 
simulation parameters set described section 
cases adtcp provides significantly better throughput newreno achieves throughput close elfn 
nodes mobile adtcp achieves throughput improvement newreno 
seen newreno performance sensitive node mobility adtcp 
mobility speed increases network disconnection common 
correctly identifying packet losses adtcp able recover interruption quickly achieve higher throughput 
presence channel error slightly increases performance gap adtcp elfn second 
gap comes identification inaccuracy adtcp 
mobility channel error metric samples idd stt highly noisy network state detection especially non congestion states difficult 
third tcp flow competes udp cbr flows congestion frequent throughput gap adtcp elfn reduces 
shows identification algorithm detects network congestion state accurately non congestion states 
tcp friendliness adtcp improves performance newreno differentiates packet loss reasons reacts appropriately 
tcp friendliness problem identification yields incompatible errors see section causing adtcp react aggressively 
order evaluate adtcp tcp friendliness run simulations tcp flows 
keep senders receivers flows static place edges network topology run bottleneck area network share bandwidth shows aggregate throughput newreno flows newreno flows 
aggregate throughputs flows shown 
third adtcp flows 
sets simulations show adtcp improves throughput network aggregate level 
bandwidth sharing identical flows perfectly fair cases 
mainly due topology edge effects unfairness 
second run simulations flows tcp newreno flows adtcp 
comparing second set simulations observe aggregate throughput newreno flows decrease traffic environments 
shows adtcp steal competing tcp flows performance improvement comes adtcp efficient utilization network resources 
simulations mobile nodes tend gather center topology random way point mobility pattern 
randomly choosing sender receiver results short delivery paths hops reduces chance bandwidth sharing competing flows mobility mobility speed tcp throughput bit sec newreno adtcp elfn mobility speed mobility channel error newreno adtcp elfn mobility channel error congestion mobility speed newreno adtcp elfn 
performance improvement adtcp 
left right mobility mobility channel error mobility channel error competing udp cbr flows newreno newreno mobility speed flow flow flow newreno adtcp mobility speed flow adtcp flow newreno flow adtcp adtcp mobility speed flow flow flow 
tcp friendliness adtcp mobility channel error 
left right newreno flows newreno adtcp flows adtcp flows real hardware measurements perform measurements adtcp implementation testbed testbed configuration described tcp flows run hop ad hoc network 
nodes move walking speed 
laptops ii equipped wavelan wireless cards operating mb cards run ad hoc mode rts cts option turned 
manual routing configured wireless nodes 
tcp parameters identical simulation settings 
run adtcp receiver side run adtcp tcp reno implemented linux sending host 
way able test performance adtcp reno tcp simultaneously ftp sessions created tcp connections 
tests run mb file transferred sessions 
run sets test results shown 
clear channel test potential performance overhead adtcp clear channel mobility mild congestion competing tcp flows scenario measured 
started newreno adtcp connections sender host simultaneously collected output traces tcpdump 
note tests reno tcp sender adtcp receiver create reno tcp connection adtcp backward compatible 
observe adtcp performs comparably reno tcp 
shows adtcp able share bandwidth fairly conventional tcp connections 
decrease throughput attributed slightly higher computational cost 
weak channel signal moved receiving host farther away rest mobile nodes signal weak channel error increases 
start tcp linux adtcp simultaneously traces plotted second 
observe throughput increase adtcp reno tcp 
mobility test impact node mobility 
took portable receiver walked create network disconnections keeping nodes static 
third observe performance gain adtcp tcp linux 
trace observe multiple disconnections happen file transfer adtcp recovers faster reno tcp network reconnected 
related types approaches detecting network congestion internet 
measurement feedback intermediate gateways network 
standard tcp uses measurement rtt packet loss detect transfer time msec tcp sequence number bytes measurement mild congestion tcp linux adtcp transfer time msec real measurement channel error tcp linux adtcp measurement mobility channel error transfer time msec tcp linux adtcp 
real hardware measurements 
tcp flows adtcp reno tcp linux 
left right clear channel weak signal high channel error rate mobility varying channel error congestion red ecn provides congestion notification monitoring instantaneous queue size network gateways 
wireless networks detecting network congestion critical improving tcp performance 
cellular networks directly monitor packet loss base station wireline packet losses congestion related wireless packet losses channel error related treated differently 
different approach propose receiver measurements packet interarrival time loss behaviors distinguish congestion losses wireless link losses 
mobile ad hoc network wireless channel error mobility induced link failure occurs frequently 
proposes explicit link failure notification elfn mechanism wireless node inform tcp sender 
way sender distinguish link failure losses congestion losses 
shows elfn improves standard tcp times mobile ad hoc network degradation static ad hoc networks 
measurement congestion detection studied approach single metrics measurement inter arrival delay throughput packet losses identify network congestion results encouraging 
simply noise single metric measurement especially node mobility channel errors 
explore feasibility congestion detection multi metric joint identification 
fundamental problem transport protocol design mobile ad hoc networks networks exhibit richer set behaviors including congestion channel error route change disconnection reliably detected addressed 
detection challenging measurement data noisy 
existing approaches typically rely network layer notification support router 
explores alternative approach relies solely mechanisms 
robustly detect network states presence measurement noise propose multiple metric joint detection technique 
technique network event signaled relevant metrics detect 
simulations real testbed measurements show adtcp able significantly reduce probability false detection keeping incompatible detection errors low greatly improves transportation performance tcp friendly way 
demonstrates approach viable ad hoc networks 
holland vaidya analysis tcp performance mobile ad hoc networks mobicom 
sinha sivakumar bharghavan wtcp reliable transport protocol wireless wide area networks mobicom 
balakrishnan seshan amir katz improving tcp ip performance wireless networks mobicom 
balakrishnan katz explicit loss notification wireless web performances globecom 
floyd tcp explicit congestion notification acm ccr 
fu meng lu bad tcp perform wireless ad hoc network ieee iscc ieee symposium computers communications italy july 
monks sinha bharghavan limitations tcp elfn ad hoc networks 
gerla tang bagrodia tcp performance wireless multihop networks wmcsa 
biaz vaidya distinguishing congestion losses wireless transmission losses ieee th int 
conf 
computer communications networks october 
brakmo malley peterson tcp vegas new techniques congestion detection avoidance acm sigcomm gerla mascolo wang tcp westwood bandwidth estimation enhanced transport wireless links acm mobicom allman paxson stevens tcp congestion control rfc april 
biaz vaidya discriminating congestion losses wireless losses inter arrival times receiver ieee symp 
asset march badrinath tcp indirect tcp mobile hosts proc 
th international conf 
distributed computing systems icdcs may fu ben greenstein lu design implementation tcp friendly transport protocol ad hoc wireless networks ucla technical report 
available www cs ucla edu wing 
