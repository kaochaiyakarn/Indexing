reordered speculative execution critical sections peter technical report department computer engineering chalmers university technology teborg sweden teborg february critical sections seriously limit inherent concurrency parallel program 
approach expose concurrency imposing programming effort synchronization overhead speculatively allow multiple threads access critical section simultaneously 
new method allows speculation 
unique feature approach take advantage fact priori execution order separate invocations critical section speculatively executed threads respect 
contrast previously proposed speculative synchronization schemes show selecting execution order removes data dependences possible method expose concurrency 
show method called speculative lock reordering implemented chip multiprocessor modest extensions published thread level data dependence speculation systems 
contents approach martinez 

experimental methodology benchmarks 

experimental results 


implementation sketch 
reordering 

ii critical sections key mechanism implement atomicity compound modifications data structures parallel program 
known performance problem critical sections may limit amount concurrency serializing concurrent accesses protected data structures 
limiting size scope critical sections potentially expose concurrency requires detailed analysis programmer avoid violating correctness program 
addition finer grain critical sections lead synchronization overhead 
leads delicate tradeoff concurrency hand programming effort synchronization overhead 
approach expose concurrency additional programming effort speculation system allows multiple threads simultaneously execute critical section speculatively 
inspired quite extensive body thread level data dependence speculation systems dependence violations lead re execution involved threads attempts apply approach synchronization primitives barriers critical sections 
scheme proposed martinez threads allowed execute critical section simultaneously assigning execution order dictated order speculative threads exit critical section 
speculation system capable eliminating name dependences local buffering modifications true data dependences bypassing data 
thread reads data thread earlier reached critical section modify thread experience restarted 
avoided thread reached critical section 
main contribution speculation system exploits fact inherent execution order respect multiple concurrent executions critical sections controlled lock variable 
exploit fact assigning execution order speculatively executed threads reached exit unlock point critical sections 
execution order defined way minimizes number dependence violations exploiting concurrency critical sections 
postponing establishment execution order long possible means modifications done locally bypassing feature exploited 
addition detected happen restart squashed thread immediately called eager restart possible scheme 
memory traces critical section invocations splash benchmark suite study tradeoff higher concurrency scheme potential savings bypassing eager restart 
find method extracts concurrency 
hand partly compensated aggressive strategy cut penalty scheme 
unfortunately bypassing capability scheme provide gains 
addition eager restart capability increase concurrency extent larger number eager restarts may limit concurrency 
sketch scheme implemented typical thread level dependence speculation system chip multiprocessor fairly modest additions infrastructure 
rest approach section 
move study performance tradeoffs scheme scheme martinez introducing methodology section followed results section 
sketch implementation scheme section conclude section 
approach architectural framework chip multiprocessor cache attached processor 
snoopy cache protocol maintains consistency caches shared bus shared cache attached 
time pre sentation focuses algorithmic properties speculation systems synchronizations framework noting consider implementation issues section 
review previously proposed speculative lock synchronization scheme martinez section 
approach speculative execution critical sections section 
martinez method exploring possibility speculatively executing mul tiple threads concurrently critical section 
scheme refer martinez method approach follows 
thread reaches critical section lock free enters critical section conventional non speculative lock implementation 
thread executes non speculative fashion performing reads writes usual 
conventional lock implementations subsequent threads reach critical section non speculative thread exited stall lock 
granted access critical section speculative fashion granted ownership lock 
name dependences removed letting speculative thread buffer modifications locally 
non speculative thread eventually releases lock speculative threads compete lock 
thread succeeds commit speculative state non speculative 
long dependence violations speculative threads eventually non speculative getting ownership lock 
understand true data dependences respected consider threads arrive critical section time shared variable modified wx rx assume get ownership lock 
modifies variable cache coherency check speculative thread read variable cache 
case reading thread detect data dependence violation invalidation caused write operation roll back execution entry point critical section operation referred eager restart 
hand issued wx issues rx experience coherence resolve data dependence reading cache thread process called bypassing 
note bypassing eager restart eliminate reduce penalty depen dence violations respectively 
problem speculation system establishes execution order dictated order threads happen reach leave critical section 
particular example eliminate dependence violation altogether selecting execution order executed motivation scheme propose 
speculative lock reordering scheme correct execution critical section protected locks needs ensure atomicity arbitrary execution order multiple threads concurrently want access allowed 
critical sections protected lock executed threads order abc acb bac bca cab cba considered correct execution long data protected section updated atomically 
exploit semantic property proposed scheme called speculative lock reordering slr short especially show expose opportunities eliminate costly data dependence violations 
multiple threads speculatively execute critical section protected lock slr scheme allows enter gets ownership lock time 
execution order established 
name dependences resolved buffering modifications locally 
long threads execute speculatively potential data dependence violations recorded explain necessarily lead squashing re execution threads 
assuming allow number threads speculatively execute thread exits critical section directed dependence graph called thread dependency graph built vertices threads arcs represent data dependences 
graph possible identify threads independent commit order threads depending resolves example acyclic thread dependency graph execution order cba eliminates dependence violations 
data dependences threads re executed 
establishing system wide execution order letting buffered data written memory order data dependences eliminated 
consider example thread writes variable thread reads variable 
executing parallel committing thread convert data dependency name dependency 
name dependences eliminated local buffering slr scheme case avoids costly violation suffer 
thread enters critical section write operations considered speculative buffered thread exits critical section 
release consistency allowed delay release lock critical section 
threads coming release point continue execution speculative mode keeping threads waiting exit critical section 
consider trivial examples 
shows example thread dependency graph thread depends thread thread depends thread writes critical sections kept local buffers thread valid execution order critical section invocations constructed committing state threads opposite dependence order general acyclic thread dependency graph commit threads starting sink backwards source data dependences resolved 
threads depend third committed arbitrary order 
example cyclic thread dependency graph 
re executing serially cycle broken execute parallel commits consider cyclic thread dependency graphs 
displays possible scenario dependences 
example dependences exist 
top dependency thread graph cyclic 
note impossible find global commit order conform serial execution threads 
important observation thread re executed dependences threads eliminated 
exploited break circular dependences thread dependency graph follows 
selecting threads re execution remove arcs thread graph 
example thread selected re execution find commit order consistent correct serial execution order executed followed general strategy expose concurrency possible remove threads possible thread dependency graph acyclic 
interesting note may possible remove subgraph break cycles graph 
subgraph acyclic threads subgraph re executed parallel 
take advantage opportunities rest note interesting topic explore 
experimental methodology speculative execution critical sections sense performance bottleneck application hand 
clearly depends algorithmic approach effort invested programmer tuning application 
assuming crit ical sections performance bottleneck key question understand merits limitations speculative lock reordering scheme slr experimental approach observations report goal mind 
section characterize workload section experimental approach 
benchmarks order evaluate performance tradeoffs slr martinez method run lock intensive programs splash suite 
programs suite tuned critical sections critical performance critical sections suite benchmark 
note boosted expected tuned programs enjoy significant impact performance 
programs picked include barnes cholesky fmm ocean radiosity raytrace volrend water 
programs included fft lu synchronized methods mainly barriers 
table show problem sizes application 
unique program problem size lock paths barnes particles cholesky tk fmm particles ocean ocean radiosity room ae en bf raytrace car env volrend head water molecules table applications splash suite problem sizes number paths critical sections evaluation 
experimental approach experimental approach understand extent slr martinez method limit concurrency envision program consists critical sections 
constructed sequential parallel execution trace program 
execution trace containing critical sections applications splash suite detailed previous section constructed follows 
collected execution trace contains memory shared data time consecutive memory critical section invocation including initial lock acquisition final lock release 
sequential execution trace simply concatenation critical section invocation traces 
order derive parallel execution trace assuming threads follows 
sorted execution traces way traces associated lock variable inserted bin 
unique trace thread 
threads bin constructed distinct pairs threads 
particular lock variable bin contains distinct traces construct pairs execution traces lock variable 
parallel execution trace contains pairs critical section memory traces assumed execute 
lock variables assuming mk pairs traces lock variable parallel execution trace constructed concatenating traces containing mk pairs traces pair associated lock variable 
parallel execution trace application contains possible combinations critical section invocations assuming threads result input data barrier pair traces 
execution trace critical section invocation derived follows 
generate memory traces invocations critical sections application suite turning tracing facility point lock acquisition turning release lock 
item execution trace memory time assuming memory takes unity time 
traces derive execution time assuming penalty memory system 
ideal case execution traces associated particular lock variable equally long speedup assuming threads 
deviation ideal number attributed load imbalance ability speculation methods resolve data dependences 
martinez method dictated ability bypass data ability salvage lost execution opportunities eager restart data dependence violation signaled 
slr method dictated extent reordering invocation thread eliminate data dependence violations 
results investigations section 
experimental results section address reordering capability slr method helps exposing concurrency critical sections comparison martinez method 
section focus big fraction concurrent thread pairs succeeds executing critical sections parallel methods 
section focus speedup obtained methods 
important insight eager restart capability martinez method partly offset gains slr method capability eliminate data dependence violations may result large number restarts may lead higher overheads run time 
section specifically analyzing relative number restarts carried schemes 
theme section 
potential gains recall workload analysis constructed sequence critical section invocations critical section invocations protected lock happen 
experiment threads execute program count number critical section invocation pairs successfully execute critical sections parallel 
show percentage fully parallel pairs pairs percent fully parallel paths barnes cholesky fmm fraction paths fully parallel 
ocean radiosity raytrace volrend water slr martinez method percentage thread pairs fully parallel method martinez method 

important observation applications cholesky fmm ocean volrend fair amount parallelism pairs encounter result data dependence violations 
hand barnes radiosity exhibit modest amounts parallelism raytrace water parallelism 
second important observation slr consistently manages discover concurrency 
example pairs succeed execute parallel ocean martinez method number slr 
slr manages pairs execute parallel compared martinez method 
measuring number thread pairs manage execute parallel provide insight key question impact expected execution time critical sections 
study issue 
effects speedup investigate speedup obtained executing threads speculatively parallel 
assume threads maximum speedup obtain 
show execution time critical section invocations normalized serial execution time application 
application left bar shows normalized execution time slr right bar shows normalized execution time martinez method 
observation manage get decent speedup applications cholesky fmm radiosity water 
radiosity close optimum normalized execution times schemes close 
interesting note water enjoys speedup despite fact execution pairs cause shown 
reason paths long constitute major part execution 
applications barnes ocean raytrace volrend main reason limited speedup severe load imbalance data dependence violations 
order understand exact cause broken execution time categories parallel execution time load imbalance bypass serial eager restart time 
category time spent executing threads fully parallel 
threads run parallel may execute different critical executions protected lock may different amounts done 
finishes idle second finishes idle time goes section denoted load imbalance 
load imbalance may prevent fully exploiting concurrency 
considering barnes vast majority time wasted due load imbalance execution time close serial 
limiting factor case load imbalance 
explains poor speedup ocean raytrace 
applications enjoy speedup contrast volrend virtually concurrency 
load imbalance problem target techniques study 
le focus detail schemes resolve data dependences 
categories break execution time explain overhead resolving data dependence violations 
middle section bypass tells execution time spent thread pairs resolve data dependence violations bypassing martinez method 
feature successful raytrace bypassing resolve significant part data dependence violations 
category serial eager restart depicts big fraction parallel execution time resolve data dependences re executing threads 
slr results serial re execution thread completed martinez method thread aborted time data dependence violation detected restarted immediately 
martinez method expected gets lost 
compare schemes fare far resolving data dependences 
methods provide speedup applications despite fact resolve data dependences fundamentally differently closer look reveals efficiency underlying mechanisms 
consider applications martinez method performs better slr barnes fmm volrend water 
starting barnes methods spend time serial re execution 
application eager restart appear successful saves penalty 
fmm volrend water parallel execution times methods eager restart facility manages execute threads faster slr 
clearly gets lost eager restart feature quite useful cases amount overlap 
continuing applications slr better cholesky ocean radiosity raytrace clearly seen time spent doing eager restart con longer time slr spends serially re executing threads 
eager restart takes place may happen thread experience data dependence violation 
contrast slr re executes thread threads finished re executing thread guaranteed succeed 
addition restarting thread may impose considerable overhead eagerly restarting threads may offset execution time normalized serial barnes cholesky fmm execution time split parts 
ocean radiosity serial eager bypass martinez load imbalance execution time critical sections normalized serial execution time 
gains speculative execution 
look issue closely 
effects number shows number slr normalized martinez method 
see slr consistently suffers fewer martinez method 
applications ocean radiosity volrend martinez method results twice 
applications martinez method results average slr 
chip multiprocessor results flushing buffered state restoring state restarting new thread 
actions associated non negligible overheads 
higher number severely offset gains speculative execution critical sections 
summary fair amount concurrency exploited critical sections 
slr manages expose concurrency mar method 
speedup systems 
martinez method manages overlap lost due data de eager restart mechanism 
showed raytrace volrend slr water martinez parallel percent compared martinez barnes cholesky fmm amount 
restarts 
ocean radiosity raytrace volrend water slr martinez method number slr normalized martinez method 
mechanism lead higher number 
taken account cost gains feature outweighed overhead carrying eager restart 
addition seen bypassing capability martinez method show significant gains 
implementation sketch speculative execution critical sections sufficiently important support chip multiprocessor remains open question 
interest ing see fit thread level dependence speculation system modest extensions 
section possible implementation slr common data speculation proposed :10.1.1.22.9644
envision general thread lation layer chip multiprocessors handle types data speculation synchronization speculation 
baseline system inst 
cache data cache speculation support cache cpu speculation coprocessor speculation write buffer read bus write bus hydra cmp commit order generator baseline system consider stanford hydra cmp ambitious project thread level speculation date amount detailed literature available implementation 
stanford hydra cmp processor chip multi processor private caches shared cache shown 
data cache processor uses write policy simplify cache coherence 
speculation support consists extra state associated data cache number write buffers caches responsible keeping speculative state 
speculation processor allows control speculation hardware software 
show support thread level dependence speculation re slr method running machine modes operations thread lock speculation 
modes may time 
assume processes thread speculation mode lock speculation mode 
model applies parallel programs partitioned epochs delimited barriers lock unlock 
explain support modes 
hydra caches extended accommodate thread speculation extending cache line modified bit apre invalidate bit plus sets bits indicating reads writes word line 
called read bits bits 
modified bit line indicates modification done line thread speculation mode 
thread needs restarted processor lines bit set invalidated 
slr mode semantics exactly 
pre invalidate bit set speculative processor writes line 
slr mode order processors exists bit 
read bits set processor reads word cache line 
doing possible detect true dependence violation write speculative processor seen bus 
slr mode ordering threads dependence detected writes speculative processor 
written bits set processor writes word line 
allow renaming memory addresses thread speculation 
slr mode bits detect dependence violation processor reads word 
processor issues write line cache invalidate line 
way read speculatively written line supplied cache local write buffer visible bus 
write buffers store speculatively written data produced processor 
speculative thread finished processor drains write buffer secondary cache commits speculative state entire system 
thread speculation mode bypassing data speculative threads allowed 
remove data dependencies speculative thread written data requested speculative thread 
slr mode bypassing possible lack ordering threads 
bypassing data write buffers processors allowed slr mode 
reordering finding correct commit order constitutes major extension support hy dra 
ability commit speculatively executed critical sections order removing data dependences differentiates slr competing methods 
seen previous sections data dependences critical sections represented dependence graph 
extract correct commit order dependence graph need rep resent graph way 
devised method matrix representing dependences threads 
simple logical operations matrix needed find valid commit order order exists 
mechanism determine commit order small unit called commit order generator cog 
cog connected processor listening de speculation extensions data cache shown 
processor detects dependence sends signal cog indicating processor conflict 
cog records information structure called dependence matrix 
dependence matrix keeps track dependencies pro cessors threads exited critical section commit order removing dependencies 
dependence matrix organized follows 
horizontal rows matrix repre sents producer threads 
vertical columns represents consumer threads 
processor produced value consumed processor bit position matrix set 
time commit cog generate commit mask 
commit mask vector length number processors 
bit row matrix set bit commit mask set 
processors bit commit mask set sent commit signal cog initiate drain write buffers 
committing processors non speculative allow non speculative processors read write buffers long emptied secondary cache 
way commit operation instantaneous 
soon cog sent commit signals removes rows dependence graph corresponding dependence matrix 
columns committed processors dependence matrix 
generates new commit mask sends commit signals processors removes dependence matrix 
cog continues doing processors committed circular dependence detected 
previously explained section circular dependence requires involved threads restarted processors committed 
shows example graph processor system thread produces data consumed threads thread produces data consumed threads 
matrix graph dependence matrix representing dependences graph 
crossed elements matrix stored intra thread dependences able cause dependence violations 
commit mask generated applying logical operation elements row matrix 
empty bits commit mask indicate threads threads depend 
shows procedure oring elements 
part see thread depends threads bits ored vector set shown graph 
means committed simultaneously cause inter thread dependences 
committed thread remove arcs pointing threads graph 
done removing rows columns matrix 
oring bits row dependence matrix reveals commit order 
shows threads commit shows thread commit 
part shows result operation thread commit thread depends anymore 
committing thread leaves thread commit 
additional support support slr need additional support hardware keep track lock currently speculatively executed 
entering critical section determined lock going speculatively executed 
need lock identifier store speculative lock variable 
lock identifier empty means critical section currently speculatively executed 
current lock update lock identifier enter critical section speculatively 
lock identifier set compare id current lock holder see enter critical section speculatively lock treated regular test set lock primitive 
necessary store lock identifier space dependence matrix cog 
introduced speculative lock reordering scheme slr extract con currency critical sections letting threads speculatively execute parallel 
unique feature slr exploits fact multiple threads execute critical section arbitrary order long modifications inside carried atomically 
threads speculatively execute critical section concurrently form dependency chain represented acyclic dependency graph execution order commits threads reverse dependency order convert true data dependences name dependences cause 
applied slr critical sections applications splash suite fair number executed parallel 
compared data dependence resolution strategy slr previously published lock speculation system execution order dictated order threads arrive leave critical section 
method resolve data dependences bypassing eager restart capabilities shown partly compensate improved concurrency slr 
speculative execution sense applications critical sections performance bottleneck 
instance splash applications analyzed fine tuned exhibit behavior 
supporting scheme slr add modest complexity thread data dependence speculation system 
showed slr implemented system quite simple extension 
extension decisions order threads committed dependences 
acknowledgments research supported swedish research council engineering sciences tfr contract 
sun microsystems contributed donation multiprocessor server instrumental carrying research 
valuable discussions done held thomas tomas ller jim nilsson fredrik 
gharachorloo lenoski laudon gibbons gupta hennessy 
memory consistency event ordering scalable shared memory multiprocessors proc 
th intl 
symp 
computer architecture pp 
may 
hammond olukotun 
data speculation support chip multiprocessor proc 
eighth acm conference architectural support programming languages operating systems pp 
oct 
krishnan torrellas 
hardware software support speculative execution binaries chip multiprocessor proc 
int 
conf 
supercomputing july 
magnusson dahlgren karlsson larsson nilsson werner sun virtual workstation proc 
usenix annual technical conference june 
martinez torrellas 
speculative locks concurrent execution critical sections shared memory multiprocessors proc 
workshop memory performance issues isca jul 
heine liao lam olukotun 
software hardware exploiting speculative parallelism multiprocessor tech 
report computer systems laboratory stanford university csl tr feb 
low cost thread level data dependence speculation multiprocessors proc 
workshop multithreading execution compilation micro pp 
dec 
sato ohno nakashima 
mechanism speculative memory accesses synchronizing operations proc 
intl 
parallel distributed processing symp 
ipdps pp 
may 
mowry 
potential thread level data speculation facilitate automatic parallelization proc 
fourth int 
symp 
high performance computer architecture pp 
feb 
woo singh gupta 
splash programs characterization methodological considerations proc 
nd intl 
symp 
computer architecture june 

