modular paradigm building self organizing peer peer applications rk jelasity alberto montresor babaoglu department computer science university bologna italy jelasity montresor babaoglu cs unibo 
peer peer technology undergone rapid growth producing new protocols applications enjoy considerable commercial success academic interest 
applications complex protocols behavior completely understood 
believe order enable widespread adoption systems commercial scientific applications needed modular paradigm understood predictable components clean interfaces combined implement arbitrarily complex functions 
goal promote idea describing initial experiences direction 
resulted collection simple robust components include aggregation membership management 
shows combine obtain novel load balancing algorithm close optimal respect load transfer 
describe briefly simulation environment explicitly designed efficiently support modular approach protocol design 
years witnessed rapid growth body scientific knowledge peer peer technology commercial applications 
features systems interesting scientific research include ability exploit distributed resources circumvent censorship potential extreme scalability robustness 
important candidate consumer technology computational grid supposed enable optimal exploitation large amounts resources available internet approach 
promises technology partially fulfilled numerous applications 
unfortunately underlying protocols built complex unpredictable 
behavior fully understood explained terms theory complex networks dynamic systems 
lack traditional hard guarantees regarding expected outputs users outside scientific community especially engineers application developers experience difficulties exploiting growing body available knowledge 
engineering self organising systems springer lnai pp 
partially supported emerging technologies unit european commission project bison ist 
mta hungary opinion significant exploitation technology requires modular paradigm understood predictable components clean interfaces combined implement arbitrarily complex functions 
goal report ideas initial results objective 
step advocated paradigm identify collection primitive components simple protocols building blocks constructing complex protocols applications 
informal classification building blocks broad classes possible overlay protocols maintain connected communication topologies set nodes 
refer topologies overlays built underlying networks internet 
example newscast maintains random overlay 
functional protocols aimed implementing basic functions components 
example function aggregation collective name functions provide global information distributed system 
functions include finding extremal values computing averages sums counting modular approach offers attractive possibilities 
allows developers plug different components implementing desired function existing new applications certain function performed predictable dependable manner 
interesting possibility combine building blocks form complex applications perform relatively sophisticated functions file sharing load balancing 
building blocks simple predictable extremely scalable robust 
way research focus self organization important emergent features burdened complexity protocols 
building blocks typically complicated cellular automaton swarm model ideal objects research 
result practical applications benefit potentially stable foundation predictability key concern fully distributed systems 
order demonstrate usefulness approach describe implement fairly complex function load balancing building blocks introduced newscast aggregation 
turns resulting protocol close optimal respect amount load transfers 
outline follows 
section define system model 
section describes basic building blocks load balancing example described section 
section give brief overview high level network simulator specifically developed support modular paradigm 
system model illustrates system model 
consider network comprising large collection nodes communicate exchange messages assigned unique identifiers 
network highly dynamic new nodes may join old ones leave time subject failures nodes may fail messages lost 
max avg topo max avg topo max avg topo max avg topo max avg topo max avg max avg fig 

simple example network 
environment consists set numeric values node 
protocols max avg find maximum average values respectively 
protocol topo task maintain overlay topology represented connections nodes 
node runs set protocols 
protocols standalone applications may provide service protocols 
protocol instance may communicate protocols located node import export service instances protocol type located remote nodes implement function 
assume nodes connected existing physical network 
protocols suggest deployed arbitrary physical networks including sensor ad hoc networks consider fully connected networks internet node potentially communicate node 
way arbitrary overlay topologies may constructed functional protocol may deploy appropriate overlay implementing functions 
physical network provides possibility communication 
communicate peers node know identifiers 
node task overlay protocol collect maintain date identifiers order form connected topology desired characteristics 
large scale dynamicity envisioned system collections normally limited small subsets entire network 
apart communicating peers protocols may interact environment 
input originates outside protocol set falls category 
environment may include user interactions sensor information application specific data load load balancing system free space distributed storage system 
model modularity implemented level protocols 
protocols provide implement defined interfaces order allow developers plug different implementations protocol applications 
example explained section aggregation protocols illustrated overlay protocol communicate peer nodes compute aggregates 
topo topo forever wait time units send sp receive sp active thread forever sp receive send sender sp sp passive thread fig 

skeleton push pull epidemic style protocol 
notation state node sp state peer implementation overlay long provides standard interfaces topology appropriate characteristics 
example building blocks section describe general purpose protocols newscast aggregation build load balancing scheme section 
descriptions provide necessarily brief informal serve simply introduce structure provide details characteristics 
additional information related papers 
protocols push pull epidemic style scheme illustrated 
node executes different threads 
active periodically initiates information exchange peer node selected randomly sending message containing local state waiting response selected node 
passive waits messages sent initiator replies local state 
term push pull refers fact information exchange performed symmetric manner peers send receive states 
method builds new local state previous local state state received information exchange 
output depends specific function implemented protocol 
local states peers information exchange necessarily may non deterministic may produce different outputs depending node initiator 
period wall clock time consecutive information exchanges called cycle length denoted system synchronous convenient talk cycles protocol simply consecutive wall clock time intervals length counted convenient starting point 
newscast newscast protocol example overlay protocol 
maintains random topology extremely robust basis functional protocols including broadcast aggregation 
newscast state node partial view fixed size set peer descriptors 
peer descriptor contains address peer timestamp corresponding time descriptor created 
fixed size partial view denoted method returns address selected randomly current partial view 
method merges partial views nodes involved exchange keeps descriptors creating new partial view 
new information enters system node sends partial view peer 
step node inserts newly created descriptor partial view 
old information gradually automatically removed system gets replaced new information name newscast 
feature allows protocol repair overlay topology forgetting dead links definition get updated owner longer active 
properties newscast newscast overlay topology defined content partial views 
descriptor partial view represents directed edge topology linking node holding descriptor node named descriptor 
basic assumption design protocol set nodes form network highly dynamic continuous flow nodes joining leaving system 
dynamicity reflected overlay topology constantly changing time removing obsolete information disseminating descriptors joining nodes 
shown resulting topology low diameter close random graph degree experimental results choosing sufficient stable robust connectivity 
shown single cycle number exchanges node modeled random variable distribution poisson 
words average exchanges cycle actively initiated passively received variance estimate 
implication property node important overloaded 
epidemic style aggregation case epidemic style aggregation state node numeric value 
practical setting value attribute environment storage capacity temperature load task protocol calculate aggregate value set numbers held nodes 
focus specific cases average maximum 
aggregate functions including sum counting variance estimation may easily computed similar scheme 
order function protocol needs overlay protocol provides implementation method 
assume service provided newscast overlay protocol 
case averaging method return 
state exchange sum values maintained nodes change just balanced values 
operation change global average decreases variance estimates system 
case maximum method return max 
case global maximum value effectively broadcast epidemic 
properties epidemic style averaging maximum averaging protocols different mathematical properties 
maximum existing results epidemic style broadcasting applicable 
focus averaging 
purposes important feature convergence speed averaging 
mentioned guaranteed value node converge true global average long underlying communication topology connected 
shown communication topology connected sufficiently random speed convergence exponential 
precise mathematical formulation empirical mean empirical variance cycle ai ai ai value maintained node 
cycle number nodes system 
shown 
simulations show approximation holds high precision 
equation clear convergence achieved high precision cycles irrespective network size confirms extreme scalability 
addition fast aggregation protocol robust 
node failures may perturb final result values stored crashed nodes lost analytical empirical studies shown effect generally marginal 
long overlay network remains connected link failures modify final value slow aggregation process 
load balancing example application define load balancing problem example application illustrating modular design paradigm 
assume node certain amount load nodes allowed transfer portions load 
goal reach state node amount load 
nodes decisions sending receiving load locally available information 
restrictions problem fact identical averaging problem described section 
realistic setting node ai 
ai decreasing order load values 
ai ai ai ai ai ai fig 

cycle optimal load balancing algorithm 
notation average load system network size quota 
limit quota amount load transfer cycle cycle defined section 
discussion denote quota assume node 
optimal algorithm sake comparison serve baseline give theoretical bounds performance load balancing protocol access global information 
ai 
ai represent individual loads cycle total number nodes 
average individual loads nodes 
note global average change result load transfers long conserved node failures 
clearly cycle minimum number additional cycles necessary reach perfectly balanced state max ai minimum amount total load needs transferred ai 
furthermore cycle ai 
divisible optimal number cycles optimal total transfer achieved protocol 
algorithm expressed local protocol run node global algorithm operating directly list individual loads 
relies global information ways 
decision average load global property relies globally ordered local load information select nodes specific characteristics loaded making sure quota exceeded 
easy see total load transfered optimal load node increases monotonically decreases monotonically exact global average reached communication stops 
words impossible reach balanced state load transfered 
algorithm achieves lower bound number cycles necessary perfect balance 
observe transfers exactly amount load moved 
means property ai 
divisible holds cycles execution algorithm 
show maxj ai kq max ai max ai 
see define maxj ai ai indices belong nodes maximally distant average 
show nodes different node assigned side average 
assume loss generality load nodes larger average smaller reasoning identical ii loaded nodes mixed pair loaded nodes remain impossible nodes assigned different pairs definition assumption nodes overloaded number loaded nodes large size maximally distant nodes got load difference reduced exactly proves 
motivated result assume initial load node integer value average integer allowed transfer unit load time 
setting satisfies assumptions results serves tool simplifying focusing discussion 
modular load balancing protocol observations optimal load balancing algorithm propose protocol purely local knowledge approximates optimal protocol extremely show section 
illustrates protocol propose 
basic idea node periodically attempts find peer side global average sufficient residual quota 
peer load transfer performed 
approximation global average obtained method peer information obtained method 
methods implemented appropriate component average calculation topology management 
assume cycle node access current load residual quota peers 
value represented local variable node initialized cycle updated decrementing actual transfered load 
information obtained simply asking directly peers 
introduce significant overhead assume load transfer orders magnitude expensive 
furthermore mentioned earlier number peers typically small typical 
note local load node equal global average node excluded considerations load balancing selected transfers 
excluding balanced nodes devote attention nodes benefit transfers 
protocol implements optimization method freeze 
node executes forever wait time units continue freeze null null active thread 
pc pi 
pic decreasing order neighbor load values 
pc pi pi return pi return null defined analogously peer selection fig 

modular load balancing protocol 
notations current load total quota residual quota number peers partial view determined overlay protocol 
method starts play dead overlay protocol 
result node removed communication topology remaining nodes reached average load meet higher probability 
words peer selection efficient final phases execution balancing protocol nodes reached average load 
optimization result communication topology partitioned problem easily solved adding overlay component take part load balancing responsible maintaining connected network 
note averaging component uses overlay component load balancing protocol 
key feature averaging overlay protocols potentially significantly faster load balancing protocol 
quota significantly smaller variance initial load distribution reaching final balanced state take arbitrarily long see equation 
hand averaging converges exponentially fast defined equation 
fact possible load balancing approximation global average supplied oracle access global information 
scenario protocols operate significantly different time scales solve problem encountered nature may characterize interesting general technique applicable larger class problems 
basic load balancing protocol order illustrate effectiveness averaging component suggest protocol rely average approximation 
protocol shown 
forever wait time units continue active thread 
pc pi 
pic decreasing order neighbor load values 
pc ordering defined 
pc pi return pi return null peer selection fig 

basic load balancing protocol 
notations current load total quota residual quota number peers partial view determined overlay protocol 
protocol attempts replace average approximation heuristics 
particular choosing peer side average node picks peer maximally different load larger smaller local load 
step replaced freeze operation 
performing operation depends crucially knowing global average load system 
empirical results empirical studies performed simulator described section 
implemented protocols described optimal algorithm modular protocol averaging protocol newscast basic protocol access global average load 
components methods instantiated aggregation protocol section averaging newscast overlay 
experiments network size fixed partial view size 
examined different initial load distributions linear peak 
case linear distribution initial load node 
set exactly units 
case peak distribution load exactly node set units rest nodes initial load 
total quota load transfer cycle set load unit 
experiments variance local load entire network recorded amount load transfered cycle 
show data variance give information speed reaching balanced state protocols identical optimal convergence performance initial distributions 
presents results total load transfered execution solutions 
curve corresponds single execution protocol variance results independent runs diminishing 
seen figures average load transfer node modular basic optimal cycles linear load distribution average load transfer node modular basic optimal cycles peak load distribution fig 

cumulative average load transferred node cycle network size curves corresponding optimal algorithm modular protocol overlap completely appear single lower curve 
final point graphs cycles respectively correspond state perfect balance reached protocols 
load transfered modular protocol indistinguishable amount optimal perfect balancing system 
dedicated simulator evaluating performance protocols complex task 
main reasons success extremely large scale may reach major obstacles evaluation 
networks incorporate hundreds thousands nodes uncommon time writing hosts connected kazaa fasttrack network 
source complexity high dynamicity systems networks continuous state flux new nodes joining existing nodes leaving crashing 
evaluating protocol real settings especially phases design clearly feasible 
larger distributed testbeds deploying planetary scale network services include nodes tiny compared size modern applications 
furthermore nodes testbeds characterized degree dynamicity typical nodes 
protocols analytical evaluation possible 
example simple epidemic style protocols average aggregation mechanism may analyzed mathematically due simplicity inherent probabilistic nature 
simulation invaluable tool understanding behavior complex protocols validating theoretical results 
results illustrated previous section obtained simulator called developed group specialized supporting simulation protocols modular paradigm pursued 
complements model enabling developers experiment protocols composition 
design objectives simulator systems may different objectives general purpose networks simulators extreme scalability 
simulated networks may composed millions nodes 
may obtained careful design memory layout simulator performed 
able store data large number nodes requirement large scale simulations simulation engine optimized trying reduce possible form overhead 
support dynamicity 
simulator capable deal nodes join leave network definitively temporarily 
implications memory management simulator requiring mechanisms removing nodes useful 
addition requirements modular approach pursuing reflected architecture simulation environment 
idea provide composition mechanism enables construction simulations collections components 
component simulation example protocols environment easily replaceable simple configuration files 
flexibility offered mechanism enable developers re implement needed component system freedom re existing components fast prototyping 
goals may appear contradictory 
example modular approach may introduce overhead limits performance simulator smart large data structures may improve speed may limit scalability simulator 
careful design needed trying obtain best equilibrium 
simplifying assumptions strong scalability requirements outlined previous section force introduce simplifying assumptions 
example low level details overhead associated communication stack tcp udp taken consideration simulating underlying protocols requires lot additional memory time price easily paid nodes range millions 
cases properties certain protocols enable apply assumptions additional ones sacrificing realism simulations 
example consider membership aggregation protocols section 
cycle node sends receives messages average 
protocols messages small bytes newscast bytes average aggregation 
fast convergence protocols real implementation cycle length chosen large guarantee messages arrive start cycle 
example choosing cycle length seconds performing cycles sufficient obtain variance reduction minutes needed obtain average independently size network 
result properties latency bandwidth may dropped models rendering simulations unrealistic 
reasons simulation model adopted ignores concurrency fact similar cellular automaton model 
model concept cycle 
cycle nodes chance perform basic operation current state possible communication current neighboring nodes neighborhood relation defined overlay protocol fixed communication topology 
architecture architecture illustrated 
described designed highly modular configurable incurring excessive overhead terms memory time 
configuration manager main component 
task read configuration files command line parameters compose simulation starting components listed configuration 
configuration manager fixed module simulation component interchangeable allow developers write customized optimized version needed 
configuration mechanism currently java property files collections pairs associating property name property value 
configuration file substantially list associations component identifiers name java class implementing particular protocol 
instantiation component responsible reading additional parameters needed implementation 
example membership component may read configured maximum size partial view 
definitions provided section simulated network composed collection nodes may host protocols 
communication protocol instances belonging node method invocations order provide service protocol implement defined interface 
example protocols maintain overlay topology implement linkable interface enables higher level services obtain information neighbors known node 
protocols implementing aggregation provide interface setting local value obtaining aggregated 
interaction environment protocols represented dynamics executed periodically simulation engine may interact simulated systems different levels example may modify network composition adding new nodes destroying existing ones may act level protocols example modifying overlay topology changing aggregated value 
observers play role global observation points possible analyze network nodes composing state protocols included order collect statistics behavior system 
observers dynamics executed periodically 
observers may highly customized observers dynamics simulation engine network node configuration manager load balancing load aggregation avg newscast neighbors fig 

architecture simulator 
simulation composed set nodes observers dynamics objects 
nodes composed set protocols 
composition single node shown protocols implement load balancing 
particular protocol example report variance reduction rate aggregation protocol may general example analyze graph theoretical properties maintained topologies diameter clustering 
protocols dynamics observers give designers protocols complete freedom simulate system want desired level accuracy presence growing library pre built components enable construction fast prototypes 
simulation engine module perform simulation task orchestrate execution different components loaded system 
described previous section engine adopts time stepped simulation model complex expensive event architecture 
time step nodes system selected random order callback method invoked protocols included node 
way protocol instances get chance execute cycle 
dynamics observers executed periodically associated scheduler object information stored configuration file decides frequently particular dynamics observer executed 
communication nodes left designer protocols algorithms developed far protocol instances invoke methods order reduce overhead associated creation enqueuing garbage collection messages 
compatible kind protocols simulated far 
approach nodes responsible check particular node reached due node crash communication failure method invocation discarded 
related known functional building block distributed hash table dht abstraction distributed data structure maintains associations keys nodes network 
proposals applying dhts building blocks construct complex applications including event notification systems distributed storage systems 
dhts complex conceptual framework looking possibilities decomposing smaller components 
load balancing problem example demonstrate usefulness approach oldest problem distributed systems 
past research proposed different load balancing strategies evaluated performance distributed systems multiprocessors 
studies topologies considered fixed structured graphs trees rings stars multi dimensional hypercubes complete graphs node knows identifier node 
results easily applicable networks 
due high dynamicity large scale networks constructing maintaining topologies overlay networks complex task reasons complete overlays possible 
furthermore importantly structured topologies exploit possibility constructing optimal overlay networks 
rao set algorithms solving load balancing problem dht networks 
algorithms called similar approach assume knowledge known target average load loaded node selects loaded nodes subset 
algorithm explain exactly average load may obtained exploit possibility progressively reducing overlay network nodes need balanced 
surveying existing literature simulation picture obtained highly fragmented current projects base results home grown simulators tuned particular protocols employed target systems 
papers general purpose detailed network simulators ns 
choice due high costs associated packet level simulations pose severe limits scalability 
despite fragmentation interesting simulation environments appeared 
limited file sharing applications incorporate notions documents keywords promising neuro grid designed extensibility mind 
approach scalability obtained 
initial results modular paradigm designing complex self organizing protocols 
load balancing protocol confirm validity idea simple components combined implement complex functions 
demonstrated utility applying averaging component overlay component obtain performance respect amount transfered load indistinguishable optimal case 
naturally focuses developing paradigm extending components applications 
interesting consider similarities approach object oriented design programming 
sense design phase designer treat building blocks objects maintain state interface modifying monitoring state performing functions 
usual relations dependence inheritance applied 
includes developing analogy 

barak 
distributed load balancing policy multicomputer 
software practice experience sept 

dabek zhao druschel kubiatowicz stoica 
common api structured peer peer overlays 
proc 
nd international workshop peer peer systems iptps berkeley ca usa feb 

demers greene hauser irish larson shenker sturgis swinehart terry 
epidemic algorithms replicated database management 
proc 
th annual acm symposium principles distributed computing podc pages vancouver aug 
acm 

druschel rowstron 
past persistent anonymous store 
hotos viii may 

foster iamnitchi 
death taxes convergence peer peer grid computing 
proc 
nd international workshop peer peer systems iptps berkeley ca usa feb 

jelasity kowalczyk van steen 
newscast computing 
submitted publication 

jelasity montresor 
epidemic style proactive aggregation large overlay networks 
appear 

joseph 
extendible open source simulator 
journal nov 

kok loh hsu 
network topology affects dynamic load balancing 
ieee parallel distributed technology sept 

milojicic lukose pruyne richard rollins xu 
peer peer computing 
technical report hpl hp labs palo alto 

network simulator 
www isi edu nsnam ns 

peterson anderson culler roscoe 
blueprint introducing disruptive technology internet 
proc 
acm workshop hot topics networks hotnets princeton nj oct 

rao lakshminarayanan surana karp stoica 
load balancing structured systems 
proc 
nd international workshop peer peer systems iptps berkeley ca usa feb 

rowstron 
kermarrec castro druschel 
scribe design largescale event notification infrastructure 
crowcroft hofmann editors networked group communication third international workshop ngc volume lecture notes computer science pages nov 

schlosser kamvar 
simulating file sharing network 
proc 
workshop semantics grid computing 

ting 
network simulator 
proc 
rd ieee international conference peer peer computing linkoping sweden sept 

van renesse 
importance aggregation 
schiper shvartsman weatherspoon zhao editors directions distributed computing number lecture notes computer science pages 
springer 

van steen 
epidemic protocol managing routing tables large peer peer networks 
proceedings th ifip ieee international workshop distributed systems operations management number lecture notes computer science 
springer 

zhao huang stribling rhea joseph kubiatowicz 
tapestry resilient global scale overlay service deployment 
appear ieee journal selected areas communications 
