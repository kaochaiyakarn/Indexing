program transformation stratego xt rules strategies tools systems eelco visser technical report uu cs institute information computing sciences utrecht university february appear visser 
program transformation stratego xt rules strategies tools systems stratego xt 
lengauer editors domain specific program generation lecture notes computer science 
spinger verlag 
see www stratego language org stratego copyright eelco visser address institute information computing sciences utrecht university box tb utrecht eelco visser visser acm org www cs uu nl people visser program transformation stratego xt rules strategies tools systems stratego xt eelco visser institute information computing sciences utrecht university box tb utrecht netherlands visser acm org www stratego language org 
stratego xt framework development transformation systems aiming support wide range program transformations 
framework consists transformation language stratego xt collection transformation tools 
stratego paradigm rewriting control programmable rewriting strategies 
xt tools provide facilities infrastructure transformation systems including parsing 
framework addresses entire range development process specification transformations composition transformation systems 
chapter gives overview main ingredients involved composition transformation systems stratego xt distinguish abstraction levels rules strategies tools systems 
program transformation automatic manipulation source programs emerged context compilation implementation components optimizers 
compilers specialized tools developed transformation systems widespread 
paradigm generative programming generation programs specifications forms key part software engineering process 
refactoring transformations restructure program order improve design 
applications program transformation include migration reverse engineering 
common goal transformations increase programmer productivity automating programming tasks 
advent xml transformation techniques spreading area programming language processing making transformation necessary operation scenario structured data play role 
techniques program transformation applicable document processing 
turn applications active server pages asp generation web pages dynamic html inspired creation program generators code templates specified concrete syntax object language instantiated application data 
stratego xt framework development transformation systems aiming support wide range program transformations 
framework consists transformation language stratego xt collection transformation tools 
stratego paradigm rewriting control programmable rewriting strategies 
xt tools provide facilities infrastructure transformation systems including parsing pretty printing 
framework addresses aspects construction transformation systems specification transformations composition transformation systems 
chapter gives overview main ingredients involved composition transformation systems stratego xt distinguish abstraction levels rules strategies tools systems 
transformation rule encodes basic transformation step rewrite syntax tree section 
syntax trees represented order prefix terms section 
decrease gap meta program object program transforms syntax tree fragments described concrete syntax object language section 
transformation strategy combines set rules complete transformation ordering application control traversal combinators section 
essential element capability defining traversals generically order avoid overhead spelling traversals specific data types 
expressive set strategy combinators allows programmers encode wide range transformation idioms section 
rewrite rules actual primitive actions program transformations 
broken basic actions matching building variable scope section 
standard rewrite rules context free difficult propagate context information transformation 
scoped dynamic rewrite rules allow run time generation rewrite rules encapsulating context information section 
transformation tool wraps composition rules strategies stand deployable component called command line tools transform terms terms section 
aterm format exchange syntax trees tools transparent 
transformation system composition tools performing complete source source transformation 
system typically consists parser pretty printer combined number transformation tools 
illustrates composition 
xtc transformation tool composition framework supports transparent construction systems section 
stratego xt designed artifacts levels abstraction named reused applications making construction transformation systems accumulative process 
chapter concludes brief overview typical applications created framework section 
chapter relevant stratego xt publications cited providing bibliography project 
program representation program transformation systems require representation programs allows easy correct manipulation 
programmers write programs texts text editors 
programming environments provide graphical visual interfaces programmers specify certain domain specific ingredients user interface components 
ultimately environments textual interface specifying details 
program tiger typecheck tiger eval value ast parse tree asfix ast tiger ast tiger tbl ast tiger partial eval ast tiger ast ast ast ast pp tiger specialized program tiger elim dead fig 

composition transformation system tools 
programs written structured format xml representation programmers generally text 
program transformation system needs manipulate programs text format 
trivial transformations structured textual representation needed 
bridging gap textual structured representation requires parsers 
xt provides formal syntax definition syntax definition formalism sdf parsing scannerless generalized lr parser representation trees aterms mapping parse trees syntax trees pretty printing target independent box language 
architecture transformation systems program transformation systems built stratego xt organized data flow systems illustrated data flow diagram depicts architecture interpreter partial evaluator appel tiger language 
program text parsed generic scannerless generalized lr parser parse table program input producing parse tree 
parse tree turned syntax tree asfix 
syntax tree transformed transformation tools 
example tiger removes tiger reconstructs syntactic sugar program tiger typecheck verifies type correctness program annotates variables type information tiger eval interpreter tiger partial eval partial evaluator 
application ast transformations results program case partial evaluation pretty printed program text pp tiger example 
concrete syntax definition parsers pretty printers signatures derived automatically syntax definition formal description syntax programming language 
stratego xt uses syntax definition formalism sdf associated generators 
sdf definition declarative integrated modular description aspects syntax language including lexical syntax 
fragment syntax definition tiger illustrates aspects sdf 
module tiger statements imports tiger lexical exports lexical syntax za za var context free syntax var exp exp cons assign exp exp exp exp cons exp exp exp cons var exp cons var exp exp exp left cons plus exp exp exp left cons minus lexical context free syntax language described context free productions form sn declaring concatenation phrases sort sn forms phrase sort 
sdf modular easy extensions language 
terms signatures parse trees contain details program including literals whitespace comments 
usually necessary performing transformations 
parse tree reduced syntax tree eliminating irrelevant information literal symbols layout 
furthermore sort names node labels constructors encode production node derived 
purpose productions syntax definition contain constructor annotations 
example syntax tree corresponding expression shown fig 

syntax trees represented means terms 
terms applications tn constructor terms ti lists tn strings integers syntax tree example corresponds term minus call var plus var int int 
syntax programming language data format described means algebraic signature 
signature declares constructor arity sorts arguments sm sort resulting term means constructor declaration sm 
term validated module tiger statements signature constructors assign var exp exp exp exp exp exp exp exp exp var string exp call string list exp exp plus exp exp exp minus exp exp exp fig 

signature syntax tree minus call int var plus var int signature format checker 
signatures derived automatically syntax definitions 
production cons syntax definition corresponding constructor declaration sm si sorts corresponding symbols aj leaving literals layout sorts 
signature describes syntax trees derived parse trees syntax definition 
pretty printing transformation syntax tree turned text useful program 
mapping tree text inverse parsing called unparsing 
attempt producing human readable just compiler parsable program text called pretty printer 
stratego xt uses pretty printing model provided generic pretty printing package gpp 
model tree unparsed box expression contains text markup pretty printing 
box expression interpreted different back ends produce formatted output different displaying devices plain text html atex 
transformation rules parsing produces syntax tree program actual transformation applied 
stratego language define transformations terms 
stratego rewrite rules express basic transformations terms 
rewrite rules rewrite rule form label rule term patterns left hand side right hand side respectively 
term pattern variable nullary constructor application pn ary constructor term patterns pi 
words term pattern term variables 
conditional rewrite rule rule form computation succeed order rule apply 
example rule constant folding rule plus int int int add reduces addition constants constant calling library function add adding integers 
example rule splits list bindings separate bindings 
term rewriting rule applies term pattern matches variables replaced terms way result precisely applying effect transforming term obtained replacing variables subterms bound matching 
example applying rule term plus int int reduces int term rewriting exhaustive application set rewrite rules term rule applies term 
process called normalization 
example minus plus int plus int int var reduced minus int var repeated application rule 
exhaustive rewriting standard way rewriting engines apply rewrite rules stratego define explicitly rules apply normalization strategy 
example simplifier applies certain set rules standard innermost strategy defined simplify innermost 
mechanism definition explained section 
concrete object syntax previous section saw rewrite rules define transformations syntax trees representing programs transformed text representations 
direct manipulation syntax trees unwieldy larger program fragments 
stratego supports specification transformation rules concrete syntax object language 
places normally term written code fragment concrete syntax object language written 
example concrete syntax constant folding rule addition expressed add equivalent transformation syntax trees previous page 
concrete syntax indicated quotation delimiters 
delimiters 
note right hand side rule matching left hand side written concrete syntax 
particular larger program fragments concrete syntax big difference 
example consider instrumentation rule function tid function tid var tid new adds calls entry exit functions 
writing rule syntax requires thorough knowledge syntax rule unreadable 
concrete syntax right hand side written normal program fragment holes 
specification transformation rules concrete syntax object language closes conceptual distance programs write representation transformation system 
implementation concrete syntax stratego completely generic aspects embedding object syntax stratego user definable including quotation anti quotation delimiters object language course 
general schema extending arbitrary languages concrete syntax application schema prolog discussed 
transformation strategies normal interpretation term rewriting terms normalized exhaustively applying rewrite rules subterms applications possible 
normalizing term respect rules specification desirable rewrite systems need confluent terminating careful control necessary 
common solution introduce additional constructors encode control means additional rules specify order original rules applied 
underlying problem rewriting strategy rewriting systems fixed implicit 
order provide full control application rewrite rules stratego rewriting strategy explicit programmable 
specification simplifier innermost normalization section required explicit indication rules strategy transformation 
strategy combinators strategies potentially program transformations including exhaustive innermost outermost normalization single pass bottom topdown transformation 
providing built implementations strategies stratego provides basic combinators composition strategies 
strategies defined highly generic manner 
strategies parameterized set rules general transformation applied strategy 
specification rules remain separate specification strategy rules reused different transformations 
formally strategy algorithm transforms term term fails doing 
strategies composed strategy combinators sequential composition choice try fails non deterministic choice order trying defined guarded choice succeeds commit testing ignores transformation achieved negation succeeds fails recursion rec 
strategies composed combinators named strategy definitions 
strategy definition form xn introduces user defined operator strategy arguments called providing argument strategies sn 
example definition try id defines combinator try applies current subject term 
fails applies id identity strategy term succeeds original term result 
similarly repeat strategy repeat try repeat repeats transformation fails 
note strategy definitions explicitly mention term applied strategies combine term transformations functions terms terms term transformations 
term traversal strategy combinators just described combine strategies apply transformation rules roots subject terms 
order apply rule subterm subject term term traversed 
stratego defines primitive operators expose direct subterms constructor application 
combined operators described define wide variety complete term traversals 
congruence operators provide mechanism term traversal stratego 
constructor corresponding congruence operator denoted ary constructor corresponding congruence operator defines strategy sn 
strategy applies terms form tn 
results term provided application strategy si term ti succeeds result application si ti fails application sn tn fails 
congruences allow specification data type specific traversals operator amounts declaring order argument strategies tried matter compiler allowed pick order 
typically case rules mutually exclusive 
map map applies transformation elements list 
example congruences control flow strategy control flow assign id id id id applies argument strategy typically partial evaluation strategy selected arguments order defer evaluation 
congruence operators support definition traversals specific data type stratego provides combinators composing generic traversals 
operator applies direct subterms ti constructor application tn 
succeeds application direct subterm succeeds 
case resulting term constructor application term obtained applying ti 
note identity constants constructor applications children 
example definition strategy bottomup bottomup bottomup strategy expression bottomup specifies applied recursively direct subterms subterms subject term 
succeeds applied resulting term 
definition bottomup captures generic notion bottom traversal term 
variations pass traversal defined strategies topdown topdown topdown applies term starting top 
applies frontier term 
tries apply root succeeds transformation complete 
transformation applied recursively direct subterms 
similar uses combinator apply transformation exactly direct subterm 
pass traversals shown definition fixpoint traversals innermost innermost bottomup try innermost exhaustively applies transformation starting innermost terms 
transformation idioms explicit control rewriting strategy strategy combinators admits wide variety transformation idioms 
section discuss idioms illustrate expressiveness strategies 
cascading transformations basic idiom program transformation achieved term rewriting cascading transformations 
applying single complex transformation algorithm program number small independent transformations applied combination program program unit achieve desired effect 
individual transformation step achieves little cumulative effect significant transformation feeds results ones came 
common cascading transformations accomplished exhaustively applying rewrite rules subject term 
stratego definition cascading normalization strategy respect rules 
rn formalized innermost strategy simplify innermost 
rn strategies possible 
example ghc simplifier applies rules single traversal program tree rules applied way way 
expressed stratego strategy simplify repeat 
rn staged transformations staged computation transformations applied subject term stages 
stage rules particular subset entire set available rules applied 
program transformation system idiom called sequence normal forms program tree transformed sequence steps performs normalization respect specified set rules 
stratego idiom expressed directly simplify innermost 
ak innermost 
bl 
innermost 
cm staged transformations applied fruitfully combination cascading transformations transformation sequence stages stage cascading transformation 
hand steps staged transformation quite different idioms involve complex monolithic computations 
advantage separating rules strategies particularly compelling case staged transformations 
rules defined independently particular stages easy reuse different stages 
local transformations conventional program optimization transformations applied program 
optimizing imperative programs example complex transformations applied entire programs 
ghc style compilation transformation small transformation steps applied programs 
local transformation style transformation mixture ideas 
applying complex transformation algorithm program staged cascading transformations accumulate small transformation steps large effect 
applying transformations subject program wish apply locally selected parts subject program 
allows transformations rules beneficial applied 
typical strategy achieving transformation follows pattern transformation trigger transformation innermost 
strategy descends term subterm encountered transformation succeeds 
case strategy trigger transformation recognizes program fragment transformed 
cascading transformations applied locally terms transformation triggered 
course sophisticated strategies finding application locations applying rules locally 
key observation underlying idiom remains transformations applied local special knowledge subject program point application 
allows application rules applicable 
class pattern matching far implied basic actions applied strategies rewrite rules 
distinction rules strategies methodological semantic 
rewrite rules just syntactic sugar strategies composed basic transformation actions matching building terms delimiting scope pattern variables 
making actions class citizens interesting idioms involving matching directly expressible 
understand idea consider happens rewrite rule applied plus int int int add matches subject term pattern plus int int left hand side 
means substitution variables sought pattern equal subject term 
match fails rule fails 
match succeeds condition strategy evaluated result bound variable binding instantiate right hand side pattern int 
instantiated term replaces original subject term 
furthermore rule limits scope variables occurring rule 
variables local rule 
rule applied bindings variables invisible 
primitive actions match pat build pat scope xn sequence events expressed plus int int add int action pat matches current subject term pattern pat binding variables 
action pat builds instantiation pattern pat current bindings variables pattern 
scope xn delimits scope term variables xi strategy fact stratego compiler rule definitions way 
general labeled conditional rewrite rule equivalent strategy definition xn xn free variables patterns 
similarly strategy application pat pat desugared sequence pat pat 
constructs anonymous unlabeled rules application strategies build int add contextual rules expressed basic actions 
generic term deconstruction generalization pattern matching generic term deconstruction 
normally patterns composed fixed constructor applications pn constructor name arity fixed 
precludes generic transformations specific name constructor irrelevant 
generic traversals provide way transform subterms spelling traversal constructor 
generic traversal structure term remains intact 
analysis problems syntax tree turned value different structure 
term deconstruction pat pat allows accessing constructor subterms term generically 
example consider strategy exp vars collects expression variable occurrences exp vars var xs foldr union exp vars xs foldr foldr term variable singleton list containing variable name produced 
list subterms xs obtained generic term deconstruction underscore pattern wildcard matching term variables subterm collected recursively union resulting lists produced 
frequently occuring pattern collect om strategy generically defines notion collecting outermost occurrences subterms exp vars collect om var collect om crush union collect om crush nul sum xs foldr nul sum xs note exp vars redefined passing pattern match collect om 
scoped dynamic rewrite rules programmable rewriting strategies provide control application rewrite rules 
limitation pure rewriting rewrite rules context free 
rewrite rule information obtained pattern matching subject term case conditional rewriting subterms subject term 
transformations information context program fragment needed 
extension strategies scoped dynamic rewrite rules possible access information 
standard rewrite rules stratego dynamic rules generated run time access information available generation contexts 
example strategy transformation rule defines replacement function call appropriate instantiation body definition fdec function ta rules rename fdec function ta zip farg ta var ta rule generated context definition function applied call sites 
achieved declaring scope match function definition fdec second line variables bound match fdec inherited rule declared rules 
construct 
left hand side rule fdec condition refer inherited bindings variables 
dynamic rules class entities applied part global term traversal 
possible restrict application dynamic rules certain parts subject terms rule scopes limit live range rules 
example defined simple inlining strategy inline try repeat simplify inline repeat simplify transformation performs single traversal syntax tree 
inlining functions generated functions encountered function calls inlined expressions simplified set simplify rules 
tree traversed recursive call inliner 
way simplification rules applied 
dynamic rule scope restricts scope generated rule strategy course actual inliner sophisticated strategy shown importantly inlining criterium added determine function inlined 
main idea 
generic traversal dynamic rules constituted key innovation stratego allow transformation problems addressed idiom strategic rewriting 
applications dynamic rules include bound variable renaming dead code elimination constant propagation data flow optimizations instruction selection type checking partial evaluation interpretation 
term annotations stratego uses terms represent syntax programs documents 
term consists constructor list argument terms 
useful record additional information term adapting structure creating constructor additional arguments 
purpose terms annotated 
results program analysis stored directly nodes tree 
stratego term list annotations 
empty list term annotations 
term annotations form am term defined section ai terms annotations 
term empty list annotations equivalent annotations terms transformations defined rules strategies applied 
annotations term retrieved pattern match attached build 
example build plus int create term plus term int annotation 
naturally annotation syntax match plus int 
note match accepts plus terms just annotation empty constructor application int 
match allow annotations 
rewrite rule just sugar strategy definition usage annotations rules just expected 
example rule typecheck plus int int plus int checks subterms plus annotation int attaches annotation int term 
rule typically part typechecker checks type correctness expressions program annotates types 
similarly program analyses expressed program transformation problems 
actual examples annotations include escaping variables analysis compiler imperative language strictness analysis lazy functional programs bound unbound variables analysis stratego 
annotations useful store information trees changing signature 
information part tree structure easily persistent exchange transformation tools section 
annotations bring problems 
transformations expected preserve annotations produced different transformations 
requires traversals preserve annotations case stratego traversal operators 
transforming term difficult preserve annotations original term done semantics annotations 
secondly longer straightforward determine equality relation terms 
equality computed certain annotations 
issues inherent annotation framework preclude smooth integration annotations features discussed research needed area 
transformation tools systems transformation defined rewrite rules strategies needs applied actual programs 
needs read input program transform write output program 
addition needs take care command line options level optimization 
stratego standard library provides facilities turning transformation terms transformation files containing programs intermediate representations programs 
aterm exchange format terms stratego uses internally correspond exactly terms aterm exchange format 
stratego run time system aterm library provides support internal term representation persistent representation files making trivial provide input output terms stratego exchange terms transformation tools 
transformation systems divided small reusable tools foreign function interface stratego foreign function interface possible call functions stratego functions 
operator prim tn calls function term arguments ti 
mechanism functionality arithmetic string manipulation hash tables process control incorporated library having include built ins language 
example definition read stream stream stream prim ssl read term stream stream introduces alias primitive reading term input stream 
fact language features started live collection primitives elevated level language construct examples dynamic rules annotations 
wrapping transformations tools transformation tool stratego standard library provides abstractions take care issues 
example illustrates simplify strategy turned tool module simplify imports lib tiger simplify strategies main io wrap simplify options simplify simplify options set config id set optimization level default main strategy represents tool 
defined io wrap strategy takes arguments non default command line options strategy apply 
wrapper strategy parses command line options providing standardized tool interface options input output file 
furthermore reads input term applies transformation writes resulting term output 
complexities hidden programmer 
tool collections stratego usage aterm exchange format support interface implementation easy small reusable tools 
spirit unix pipes filters model tools mixed matched different transformation systems 
transforming text files tools transform structured data 
approach enabled encouraged construction large library reusable tools 
core library xt bundle transformation tools provides generic tools useful construction generation transformation systems 
includes implementation formatters generic pretty printing package gpp coupling stratego transformation components sdf parsers tools parsing pretty printing generators deriving components transformation systems syntax definition 
collection application specific transformation components xt library emerging see section 
io tiger pe xtc io wrap tiger pe options parse tiger tiger tiger partial eval switch elim dead tiger elim dead switch tiger switch pp pp tiger tiger partial eval xtc transform tiger partial eval pass verbose 
fig 

example transformation tool composition 
transformation tool composition transformation system implements complete source source transformation tools just implement aspect 
construction complete transformation systems requires composition transformation tools 
long time composition transformation tools xt done conventional means makefiles shell scripts 
turn cause problems determining installation location tool requiring extensive configuration transforming terms level composition poor abstraction control facilities 
xtc model transformation tool composition designed order alleviate problems 
central xtc model repository registers locations specific versions tools 
allows fine grained search possible directory searches 
library abstractions implemented stratego supports transparently calling tools 
library tool applied just basic transformation step 
control facilities stratego composition 
illustrates xtc composition partial evaluator transformation components corresponding right branch data flow diagram 
stratego xt practice stratego language implemented means compiler translates stratego programs programs 
generated programs depend aterm library small stratego specific run time system 
stratego standard library provides large number generic data type specific reusable rules strategies 
compiler library number packages xt collection bundled stratego xt distribution available www org license 
website provides user documentation pointers publications applications users developers 
applications original application area stratego specification optimizers particular functional compilers 
stratego applied areas language processing compilers typechecking translation desugaring instruction selection optimization data flow optimizations vectorization ghc style simplification deforestation domain specific optimization partial evaluation specialization dynamic typing program generators pretty printer signature generation syntax definitions application generation dsls language extension preprocessors program migration grammar conversion program understanding documentation generation document generation transformation xml processing web services rest section gives overview applications categorized type source language 
functional languages simplification style glasgow haskell compiler target application stratego explored language mondrian optimizer helium compiler 
optimizations functional programs include warm fusion algorithm deforestation lazy functional programs partial evaluator subset scheme similix 
imperative languages tiger example language andrew appel text book compiler construction 
proven fruitful basis experimentation kinds transformations teaching 
results include techniques building interpreters implementing instruction selection maximal burg style dynamic programming specifying optimizations function inlining constant propagation 
techniques applied real imperative languages 
transformation framework domain specific optimization programs developed optimization programs written style 
application generators developed generation java programs 
transformation tools stratego compiler bootstrapped implemented stratego includes desugaring implementation concrete syntax semantic checks pattern match compilation translation various optimizations 
stratego implementation language numerous meta tools xt bundle program transformation tools 
includes implementation pretty printing formatters generic pretty printing package gpp coupling stratego transformation components sdf parsers 
languages documentation generator sdl stratego extract transition tables sdl specifications 
xml meta data software deployment structured representation data easy manipulation external representation stratego language processing xml documents structured data formats 
example system computes compositions bundles source packages analyzing dependencies package descriptions represented terms generates online package base descriptions 
application areas software deployment underway 
generation xhtml xml documents supported concrete syntax xml stratego example documentation generator stratego languages 
related term rewriting long established branch theoretical computer science 
systems program transformation term rewriting 
motivation design stratego directly influenced asf sdf elan languages 
algebraic specification formalism asf sdf pure rewriting concrete syntax strategies 
traversal functions added asf sdf reduce overhead traversal control 
elan system introduced ideas user definable rewriting strategies term rewriting systems 
generic traversal provided elan 
ideas programmable rewriting strategies generic term traversal developed asf sdf 
ideas developed design stratego 
generalization concrete syntax class pattern matching generic term deconstruction scoped dynamic rewrite rules annotations xtc component composition model contributions stratego xt 
earlier gives short overview version stratego language system addition concrete syntax dynamic rules xtc 
systems term rewriting include maude :10.1.1.51.9254
large number transformation systems directly term rewriting including txl jts 
thorough discussion commonalities stratego transformation systems scope 
papers individual language concepts cited discuss related mechanisms languages 
addition papers survey aspects strategies related mechanisms programming languages 
survey strategies program transformation systems introducing motivation programmable strategies discussing number systems support definition strategies 
essential ingredients paradigm strategic programming incarnations paradigms object oriented functional programming discussed 
comparison strategic programming adaptive programming 
program transformation wiki lists large number transformation systems 
broad overview concepts applications stratego xt framework language toolset supporting high level implementation program transformation systems 
framework applicable kinds transformations including compilation generation analysis migration 
framework supports aspects program transformation specification transformation rules composition strategies encapsulation strategies tools composition tools systems 
important design guideline stratego xt separation concerns achieve reuse levels abstractions 
separation rules strategies allows specification rules separately strategy applies generic strategy instantiated different rules 
similarly certain strategy different tools tool different transformation systems 
principle supports reuse transformations different levels granularity 
design guideline separation concerns draw artificial boundaries 
strict separation abstraction levels 
distinctions levels methodological idiomatic semantic 
instance rule really idiom certain type strategy 
rules strategies interchanged 
similarly xtc applies strategic control tools allows calling external tool rule 
general mix rules strategies tools systems appropriate system consideration making transformations compositional practice 
course consider tradeoffs doing overhead calling external process versus reuse obtained technical objection 
stratego xt designed developed open language system 
intial language rewriting syntax trees control strategies extended class pattern matching dynamic rules concrete syntax tool composition model order address new classes problems 
library accumulated generic transformation solutions 
compiler component aspects control programmer 
certain aspects language developed library general purpose language 
approach interesting right meets syntactic semantic limitations host language 
building domain specific language domain program transformation fruitful 
constructs matter provided syntactic overhead programmer 
separation concerns rules separately definable entities provided stratego hard achieve general purpose languages 
furthermore aterm library maximal sharing hash consing term model easy persistence provides distinct run time system available languages 
struggling host language design stratego guided needs transformation domain striving express transformations natural way 
symbolic manipulation generation programs increasingly important software engineering stratego xt expressive framework implementation 
ideas developed project useful settings 
example approach generic traversal transposed functional object oriented logic programming 
describes stratego xt release final 
host ideas improving extending language compiler library support packages new applications 
overview see www stratego language org 
acknowledgments stratego xt developed contributions people 
initial set strategy combinators designed bas 
prototype language design compiler developed benaissa andrew tolmach 
run time system stratego aterm library developed university amsterdam pieter olivier de jong 
sdf maintained developed cwi mark van den brand jurgen 
xt bundle set developed de jonge joost visser 
martin played important role xt collaborated development xtc contributed packages area xml java processing 
eelco came compilation porting issues 
approach data flow optimization developed 
rob developed documentation software stratego 
developed applications provided valuable feedback including otto arne de bruijn karl dick kieburtz patricia johann lennart swart van wijngaarden 
anonymous referees provided useful feedback earlier version 

www program transformation org 

haveraaen visser 
design transformation system domain specific optimisation programs 
binkley tonella editors third ieee international workshop source code analysis manipulation scam pages amsterdam september 
ieee computer society press 

batory smaragdakis 
jts tools implementing domain specific languages 
proceedings fifth international conference software reuse pages victoria bc canada 
ieee 

borovansk dubois kirchner kirchner 
moreau ringeissen vittek 
elan user manual 
loria nancy france edition january 

boyle 
programming program transformation approach reusing programs 
biggerstaff perlis editors software reusability volume pages 
acm press 

boyle winter 
program transforming system simplifying development numerical software 
arge editors modern software tools scientific computing pages 
birkh user 

van den brand de jong klint olivier 
efficient annotated terms 
software practice experience 

van den brand klint 
term rewriting traversal functions 
acm transactions software engineering methodology april 

visser 
rewriting strategies instruction selection 
tison editor rewriting techniques applications rta volume lecture notes computer science pages copenhagen denmark july 
springer verlag 

clavel dur eker lincoln mart oliet meseguer quesada 
maude specification programming rewriting logic 
theoretical computer science 

clavel eker lincoln meseguer 
principles maude 
meseguer editor proceedings international workshop rewriting logic applications volume electronic notes theoretical computer science pages asilomar pacific grove ca september 
elsevier 

cordy halliday 
txl programming language version april 

czarnecki eisenecker 
generative programming 
addison wesley 

de jonge 
pretty printer occasion 
ferguson gray scott editors proceedings nd international symposium constructing software engineering tools coset 
university australia 

de jonge 
source tree composition 
editor proceedings seventh international conference software reuse volume lncs pages 
springer verlag april 

de jonge 
cost effective maintenance tools proprietary languages 
proceedings international conference software maintenance icsm pages 
ieee computer society press november 

de jonge visser visser 
xt bundle program transformation tools 
van den brand editors workshop language descriptions tools applications volume electronic notes theoretical computer science 
elsevier science publishers april 

van deursen heering klint editors 
language prototyping 
algebraic specification approach volume amast series computing 
world scientific singapore september 

visser 
building interpreters rewriting strategies 
van den brand mmel editors workshop language descriptions tools applications volume electronic notes theoretical computer science grenoble france april 
elsevier science publishers 

fischer visser 
retrofitting program synthesis system concrete object syntax 
lengauer editors domain specific program generation lecture notes computer science 
spinger verlag june 
appear 

fowler 
refactoring improving design existing programs 
addison wesley 

heering hendriks klint rekers 
syntax definition formalism sdf manual 
sigplan notices 

johann visser 
warm fusion stratego case study generation program transformation systems 
annals mathematics artificial intelligence 

johann visser 
fusing logic control local transformations example optimization 
gramlich lucas editors workshop reduction strategies rewriting programming wrs volume electronic notes theoretical computer science utrecht netherlands may 
elsevier science publishers 

mmel visser visser 
essence strategic programming october 
draft 

mmel visser visser 
strategic programming meets adaptive programming 
proceedings aspect oriented software development aosd pages boston usa march 
acm press 

visser 
specification rewriting strategies 
sellink editor nd international workshop theory practice algebraic specifications asf sdf electronic workshops computing berlin november 
springer verlag 

muchnick 
advanced compiler design implementation 
morgan kaufmann publishers 

visser 
strategies source source constant propagation 
gramlich lucas editors workshop reduction strategies wrs volume electronic notes theoretical computer science page copenhagen denmark july 
elsevier science publishers 

peyton jones santos 
transformation optimiser haskell 
science computer programming september 


template engine generative programming 
european conference object oriented programming 

swart 
partial evaluation rewrite rules 
specification partial evaluator similix stratego 
master thesis utrecht university utrecht netherlands august 


term rewriting systems 
cambridge university press march 

visser 
syntax definition language prototyping 
phd thesis university amsterdam september 

visser 
strategic pattern matching 
narendran rusinowitch editors rewriting techniques applications rta volume lecture notes computer science pages trento italy july 
springer verlag 

visser 
language independent traversals program transformation 
jeuring editor workshop generic programming ponte de lima portugal july 
technical report uu cs department information computing sciences universiteit utrecht 

visser 
scoped dynamic rewrite rules 
van den brand verma editors rule programming rule volume electronic notes theoretical computer science 
elsevier science publishers september 

visser 
stratego language program transformation rewriting strategies 
system description stratego 
middeldorp editor rewriting techniques applications rta volume lecture notes computer science pages 
springer verlag may 

visser 
survey rewriting strategies program transformation systems 
gramlich lucas editors workshop reduction strategies rewriting programming wrs volume electronic notes theoretical computer science utrecht netherlands may 
elsevier science publishers 

visser 
meta programming concrete object syntax 
batory consel taha editors generative programming component engineering volume lecture notes computer science pages pittsburgh pa usa october 
springer verlag 

visser 
benaissa 
core language rewriting 
kirchner kirchner editors second international workshop rewriting logic applications volume electronic notes theoretical computer science pont france september 
elsevier science publishers 

visser 
benaissa tolmach 
building program optimizers rewriting strategies 
proceedings third acm sigplan international conference functional programming icfp pages 
acm press september 

www stratego language org 

