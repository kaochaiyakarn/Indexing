roci distributed framework multi robot perception control luiz anthony cowley taylor grasp laboratory university pennsylvania philadelphia pa usa presents roci framework developing applications multi robot teams 
roci robot considered node contains modules may export different types services capabilities nodes 
node runs kernel mediates interactions robots team 
kernel keeps updated database nodes functionalities export 
multi robot applications built changed dynamically connecting modules may running different nodes network 
example obstacle avoidance task implemented framework discuss roci multi robot scenario 
sensors actuators microprocessors wireless networks cheaper ubiquitous increasingly attractive consider employing teams small robots tackle various sensing manipulation tasks 
order exploit full capabilities teams need develop effective models methods programming distributed ensembles sensors actuators 
applications distributed dynamic robotic teams require different programming model employed traditional robotic applications 
traditional model programmer faced task developing software single processor interacting prescribed set sensors actuators 
typically assume configuration target system completely specified line code written 
hand developing code multi robot dynamic teams account fact number type robots available runtime predicted 
expect operate environment robots added removed continuously unpredictably 
expect environment robots heterogeneous capabilities example may equipped grasp cis upenn edu camera systems range sensors specialized actuators agents may stationary may offer specialized computational resources 
implies program able identify marshal resources required carry specified task automatically 
presents roci remote objects control interface self describing objected oriented strongly typed programming framework allows development robust applications dynamic multi robot teams 
building blocks roci applications self contained reusable modules 
basically module encapsulates process acts data available module inputs presents results outputs 
complex tasks built connecting inputs outputs specific modules 
connections pin architecture provides strongly typed network transparent communication framework 
analogy consider modules integrated circuit ic inputs outputs processing 
complex circuits built wiring ics individual ics reused different circuits 
core control element roci architecture roci kernel 
copy kernel running entity part roci network robots remote sensors 
entities considered roci nodes information acquired processed certain node exposed 
kernel responsible managing network maintaining updated database nodes services roci network 
kernel responsible handling module task allocation injection 
allows applications specified executed dynamically connecting available pins transferring code libraries nodes 
roci incorporates features modern distributed software environments open agent architecture grid computing 
frameworks cooperative robotics included advances hier reusable objects distributed sensing actuation capabilities abstraction modularity task decomposition 
modern programming languages graphical interfaces task specification important advances 
spite programming architectures distributed robots rely traditional programming models specific certain types robots control architectures 
believe roci certainly valuable contribution multi robot programming field 
organized follows section describes roci framework giving details architecture main features 
section shows implementation obstacle avoidance task roci section describes roci multi robot scenario 
section conclude discuss steps 
roci architecture roci dynamic self describing object oriented strongly typed programming framework distributed sensors actuators 
provides programmers network transparent framework strongly typed modules assemblies metadata byte code machine code consume process produce information 
roci modules automatically downloaded started remote machine reusable support automatic configuration xml provide strongly typed pin communications 
features coupled dynamic database available nodes network services allows programmer write code utilizes networks robots resources independent machines 
roci developed microsoft net platform 
modules limited language modules written mixtures 
system xml provide basic configuration options object reflection enforce type safety 
modules tasks building blocks roci application roci modules 
module computational block encapsulates process input performing operation making result operation available output 
specification code relating input come output go specification type data computational block deals 
create new module application developer decide types data input output inherit roci module parent class implementing virtual functions related allocation de allocation resources required new module 
modules designed knowledge runtime environment wired roci network great deal flexibility 
roci modules organized tasks 
roci task way describing instance collection roci modules run single node interact runtime 
tasks represent family modules accomplish goal chain building blocks transforms input data intermediate forms useful output 
task defined xml file outlines modules needed achieve goal connectivity modules 
tasks defined changed dynamically starting new modules connecting outputs inputs modules 
explained section connection modules pins 
pins connect modules task computer tasks computer tasks different computers 
shows example organization 
node task module pin node task task roci architecture tasks composed modules run inside nodes 
communication pins seamlessly done modules task modules different tasks different nodes 
pin communication wiring connects roci modules pin communications architecture 
pin communications roci designed network transparent high performance 
basically pin provides developer communications endpoint 
endpoints represent data producer data consumer 
pins system strongly typed fields module class connecting producer pin consumer pin simple setting producer consumer field 
modules pins automatically exposed discovered roci kernel reflection important feature programming dynamic networks 
consumer pin registers producer pin roci subsystem determines modules task domain 
consumer pin assigned producer pin 
roci creates remote procedure call channel assigns proxy consumer 
producer generates data assigns pin updated latest data 
assignment causes pin fire messages registered consumers network alerting availability fresh data 
typical usage system module blocking call input pins returns input pin gotten new data output pin registered 
alternatively module ask input pin copy data available immediately new 
pin data time stamped allowing consumers determine current data consumers completed processing data managed environment roci runs automatically marks data garbage collection freeing programmer memory management issues may arise complex producer consumer interconnections 
set pin input distinct ways useful different situations 
lower level pins connected dynamically program execution 
accomplished querying nodes roci network available pins usually type constraint may involve dynamically creating local pins bind discovered remote pins 
simpler way binding pins xml descriptions define roci tasks 
strongly typed pins enforce pins type connected 
exchange strongly typed objects raw data eliminates potential software bugs increasing robustness system 
robustness consequence self describing nature pins 
find exact type pin instance dynamically guarantee connected compatible pin 
roci kernel kernel core control element roci 
kernel manages remote procedure call rpc system real time network database module task allocation injection web services interface remote monitoring control 
copy kernel running entity part roci network robots remote sensors 
rpc system provides interfaces module management injection communication providing web interface current status network 
real time database contains information modules tasks communications channels network 
roci database locate appropriate sensor actuator solve problem find software modules needed local computation identify computer utilization congestion network 
database provides modules bird eye view environment allowing locate utilize hardware software resource network 
important mention roci kernel exposes interfaces simple object access protocol soap cross platform rpc standard 
standard allows non roci programs utilities easily interoperate utilize resources roci network 
roci browser job presenting network functionality user falls roci browser 
browser job give human user command control network situational awareness necessary informed decisions network operations 
roci network hierarchically human operator browse nodes network tasks running node modules task certain pins modules 
browser monitor status running tasks tap display outputs pins display routines exist 
browser user decide start task running node network 
user requests task started node kernel running locally node proper versions component modules available locally strong versioning useful feature net framework 
queries network node modules question downloads automatically 
byte code modules comprise task exists locally task loaded 
important features roci architecture modules pins self describing entities 
user browses tasks immediately complete description modules pins 
information browser automatically start appropriate modules locally tap remote data visualization processing purposes 
useful debugging purposes development situational awareness deployed execution 
simple obstacle roci mentioned application roci may composed multiple tasks 
tasks specified connecting building blocks modules offering specific service 
connections determine data flow block outputs block inputs 
fact connections seamlessly modules different tasks running different nodes 
demonstrate developed successfully executed simple obstacle avoidance task robots equipped omnidirectional camera ieee wireless network 
task robot heading computed range map constructed omnidirectional edge image environment 
edge image heading direction displayed simultaneously task running remote computer 
robot image captured edge extraction 
roci diagram application seen 
composed tasks running robot running remote computer 
main task obstacle comprised modules captures image exports modules video pin 
edge detector processes image available range mapper computes desired bearing robot 
range mapper receives calibration parameters exports video pin containing input image heading direction highlighted 
bearing exported robot controller module generates inputs grasp board interface servo motors 
running node task reduces resolution subsamples video stream exported range mapper better transmitted network 
video preview running computer allows remote operator observe video broadcast robot 
camera calibration edge detector range mapper robot controller grasp board video video bearing robot video lower resolution video remote computer video preview obstacle task lower resolution task video preview task diagram tasks modules obstacle implemented roci 
need reinforce modules self contained run independently 
consequently different applications specified performed reusing modules adding new ones 
example module tracking task connected feature extractor module edge detector receive input regular camera different task specification 
idea library modules executed robots capabilities 
execution connections modules dynamically changed allowing modules receive different inputs different sources 
example application described remote operator input lower resolution module modules outputs video pin 
operator information modules pins network database continuously updated 
consequently operator observe images directly module module exporting video pin moment 
discussed section capabilities especially important multi robot applications number robots communication sensor constraints may change dynamically execution 
multi robot scenario consider multi robot task robots perform visual reconnaissance certain area 
robot equipped gps omnidirectional camera objective send position xi image captured position base station 
roci task specified modules shown 
camera captures images exports video pin 
outputs camera parameters module moment 
module get robot gps coordinates third simply processes video robot position sends base station 
initially robot act independently teammates loosely coupled task roci kernel running robot continuously updates database keeping track nodes network 
video camera send info info camera parameters gps diagram reconnaissance task running robot 
suppose robots example robot loses gps information 
order continue performing task find way replacing information source 
robots team may able compute positions robot rely cooperative localization scheme localize 
cooperative localization works follows robot neighborhood computes position robots field view gps camera image exports information 
position estimates received neighbors robot able localize 
roci framework easy robot start cooperative localization dynamically 
updated list robots network perform localization roci kernel maintains information 
robot able inject new localizer module teammates dynamically pin modules running get information needs 
localizer receive information camera image calibration parameters gps export estimated position robots visible xj xj 
xjk 
robot start running local module called position estimation get position estimates neighbors compute position automatically input send info module output new module shown 
dynamic reconfiguration allows robot lost gps continue executing task 
camera send info info video camera param 
xj neighbor localization xjk gps position estimation xjk robot neighbors video robot send info info gps scenario robot loses gps robot injects new localizer module neighbors robot starts local module dynamically modules new information 
important note aspects cooperative task detailed description 
example define exactly concept neighborhood terms sensing communication 
give details cooperative localization controllers coordination techniques task 
points specified implementation task main objective roci framework showing allows multi robot teams adapt dynamic changes typically occur execution cooperative tasks 
roci programming framework distributed ensembles sensors actuators 
applications roci composed tasks built dynamically connecting modules gives great flexibility programmer 
modules completely self contained reused different tasks applications 
pin architecture connect modules 
connections seamlessly modules different tasks running different nodes creating network transparent programming environment 
roci framework strongly typed allowing development robust high performance applications 
roci main features roci kernel self describing nature modules pins 
allow creation updated view network nodes services data providing situational awareness users applications 
key requirement programming dynamic distributed multi robot teams 
directed implementing multi robot applications roci framework 
darpa mars project developing new team robots aerial terrestrial fully programmed controlled roci 
multi robot capabilities developed team outdoors navigation cooperative localization stereo obstacle avoidance communication sensitive behaviors 
multi robot team interact robots programmed different frameworks specifically player 
working common interface roci systems soap xml exchange data different platforms 
project provide excellent test bed roci framework expect important results soon 
acknowledgment part supported darpa mars nsf itr ccr 
alur das esposito hur kumar lee pappas taylor 
framework architecture multirobot coordination 
rus singh editors experimental robotics vii 
springer verlag 
balch 
behavioral diversity learning robot teams 
phd thesis college computing georgia institute technology 
das kumar taylor 
ad hoc networks localization control 
proceedings ieee conference decision control 
foster kesselman tuecke 
anatomy grid enabling scalable virtual organizations 
international journal supercomputer applications 
vaughan stoy howard sukhatme mataric 
valuable player robot device server distributed control 
proceedings ieee international conference intelligent robots systems pages 
mackenzie arkin cameron 
multiagent mission specification execution 
autonomous robots 
martin cheyer moran 
open agent architecture framework building distributed software systems 
applied artificial intelligence 
peterson hager hudak 
language declarative robotic programming 
proceedings ieee international conference robotics automation pages 
simmons 
task description language robot control 
proceedings ieee international conference intelligent robotics systems pages 
