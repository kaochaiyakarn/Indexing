implementations dijkstra algorithm multi level buckets andrew goldberg nec research institute independence way princeton nj avg research nj nec com craig silverstein computer science department stanford university stanford ca theory stanford edu november level bucket data structure shown perform dijkstra algorithm implementation 
study implementation performance depends number bucket levels 
particular interested best number levels practice 
part done author computer science department stanford university supported part nsf ccr 
shortest paths problem fundamental network optimization problem 
algorithms problem studied long time 
see 
important special case problem occurs arc length negative 
case implementations dijkstra algorithm achieve best time bounds 
implementation runs log time 
denote number nodes arcs network respectively 
improved time bound log log log obtained random access machine computation model allows certain word operations 
assumption arc lengths integers interval implementation runs log time 
computational study level bucket implementation dijkstra algorithm gave best performance codes studied 
particular implementation proved robust classical level bucket implementation 
study relative performance multi level bucket implementations algorithm 
conduct computational experiments explain results 
study leads better understanding multi level implementations confirms level implementation robust multi level implementations 
level implementation special problems problems small arc lengths 
hand implementations level buckets robust performing consistently wide range inputs performing poorly tests specifically designed difficult particular implementation 
definitions notation input source shortest paths problem hg directed graph 
length function source node 
assume length function nonnegative nodes reachable goal find node shortest path denote jv jej largest arc length shortest paths tree spanning tree rooted reversal path tree shortest path dijkstra algorithm dijkstra algorithm solving shortest path problem nonnegative length function works follows 
see detail 
node algorithm maintains distance label parent status labeled 
values initially nil node 
method starts setting labeled 
step algorithm selects labeled node smallest distance label applies scan operation 
labeled nodes algorithm terminates 
scan operation applied labeled node examines arcs 
set set set labeled 
set scanned 
algorithm terminates giving shortest paths lengths theorem length function nonnegative node reachable dijkstra algorithm scans node exactly terminates giving shortest path distances giving shortest path tree 
addition algorithm examines edge exactly 
worst case complexity dijkstra algorithm depends method find labeled node smallest distance label 
implementation fibonacci heaps runs log time 
implementation heaps runs log time 
multi level bucket implementation level bucket implementation way implement dijkstra algorithm bucket data structure proposed independently dial wagner 
implementation maintains array buckets th bucket containing nodes node distance label changes node removed bucket corresponding old distance label label finite inserted bucket corresponding new 
implementation maintains index initially property buckets empty 
empty incremented node scanned removed bucket theorem follows easily observation bucket deletion insertion takes constant time nc buckets need examined algorithm 
theorem length function nonnegative bucket implementation dijkstra algorithm runs nc time 
algorithm stated needs nc buckets easily modified 
key observation consecutive buckets occupied time wrap bucket array reached 
level bucket implementation level bucket structure reduces memory requirement improves time bound 
basic level bucket implementation works follows toplevel buckets contains bottom level buckets 
bottom level bucket holds distance label level implementation top level bucket holds range distance labels corresponding labels bottom level buckets contained top level bucket 
keep indices top bottom indicate current position data structure 
moving node new location find appropriate top level bucket node appropriate bottom level bucket top level bucket 
time space savings come modify basic algorithm keep set bottom level buckets set associated current top level bucket index top moving node put appropriate top level bucket 
move bottom level bucket node top level bucket top top changes bottom level buckets empty expand bucket new top putting nodes bucket top appropriate bottom level buckets 
destroy bottom level buckets bucket old top empty reuse space new active bucket 
empty buckets level implementation saves time top level buckets empty move need expand skipping distance values 
clear description total space requirement buckets 
expansion takes constant time node expand node 
addition node examine bottom level buckets may examine top level buckets 
time 
level bucket implementation scheme level buckets easily extended allow levels 
formally suppose bucket levels dc buckets level 
lowest bucket level gamma highest 
addition buckets level numbered gamma 
consider level associated level base distance currently active bucket associated bucket level interval jp gamma representing possible distance labels nodes bucket 
base distances indices gamma mod gamma algorithm repeatedly removes node active bucket lowest level updates distances neighbors 
distance node decreases try replace lowest level 
distance label fit interval lowest level buckets move level try fit node higher level bucket put node bucket fitting interval 
bottom level bucket empty update scanning non empty bucket lowest level 
go level repeat 
suppose find non empty bucket level update expand non empty bucket 
set gamma index non empty bucket expanded buckets 
necessary expand gamma new non empty active bucket bottom level 
algorithm continues 
space time bounds level implementation generalizations level case 
theorem length function nonnegative level implementation runs time uses theta kc buckets 
multi level implementation match best time bounds known problem time bound close performance practice competitive implementations 
heuristics implementation uses heuristics improve practical performance 
heuristics low overhead decrease performance give significant time savings 
heuristic call minimum length heuristic due 
smallest nonzero arc cost assume arc length positive 
bucket implementations remain correct th lowest level bucket contains nodes distance labels range im 
heuristic reduces number buckets 
minimum length heuristic allows bucket algorithms problems nonnegative real valued length functions 
achieved dividing arc lengths case defined ratio biggest smallest positive lengths 
second heuristic call cutoff heuristic due cherkassky 
heuristic keeps track nonempty bucket level allows algorithm skip empty buckets ends bucket array 
heuristic helpful may look 
particular consider level implementation recall implementation uses buckets wraps bucket array reached 
suppose input graph path arc length equal cutoff heuristic implementation takes theta nc time 
heuristic takes theta time 
bucket overhead study implementation performance depends number bucket levels 
interpret experimental results important understand overhead maintaining searching buckets 
major overhead sources follows 
count removing node bucket scanned part scanning node overhead 

examining empty buckets overhead proportional total number empty buckets examined 
empty bucket operation consists examining bucket turns empty 

expanding buckets overhead proportional total number nodes moved lower level bucket expansions 
expansion operation consists node move 

node moves due distance label decreases overhead proportional total number times node needs moved different bucket distance label decreases 
move operation consists node move 
experimental setup experiments conducted sun sparc workstation model mhz processor running sun unix version 
workstation meg 
memory problem instances fit memory 
code written compiled sun gcc compiler version gammao optimization option 
effort code efficient 
particular set bucket array sizes powers 
allows word shift operations computing bucket array indices 
report experimental results obtained types graphs levels buckets 
graph types chosen exhibit properties algorithm extremes paths start node nodes tend order theta path lengths order theta 
third graph type random graphs 
fourth type graphs meant easy hard specific implementation specific number bucket levels 
experimented additional problem families 
additional results consistent report add new insight 
bucket levels ranged distinction performance level implementation level implementation slight deeper nesting buckets significantly improve performance 
put performance bucket implementations perspective give data ary heap implementation dijkstra algorithm 
picked word shift operations 
ary heap data useful example gauge relative difference multi level bucket implementation performance see large costs bad multi level bucket implementations worst case analysis suggests 
point experiments described designed compare multi level bucket implementations ary heap implementation 
comparison level bucket implementation ary heap implementation appears data consistent 
graph types types graphs explored grids produced generator 
graphs characterized length width graph formed constructing layers path length order layers nodes name type description salient feature long grid grid nodes high path lengths theta nodes long wide grid grid nodes high path lengths theta nodes long random random degree path lengths theta log hard paths path nodes occupy path gamma buckets bottom level bins easy paths path nodes occupy second path buckets bottom level bins table graph types experiments 
number buckets level 
layer connect node corresponding node adjacent layers 
nodes layer connected source 
type graph long grid constant width nodes tests 
graphs different lengths ranging nodes 
arcs lengths chosen independently uniformly random range varied 
second type graph wide grid type 
graphs length limited layers width vary nodes 
long grids 
third type graphs includes random graphs uniform arc length distribution 
random graph nodes arcs 
fourth type graphs includes hard easy graphs 
input graphs number nodes desired number levels maximum arc length possible calculate number buckets level assuming implementation levels 
graphs consist paths connected source 
nodes path distance 
distance source path nodes path occupy bucket bottom level bins 
distance source path gamma hard graphs making nodes occupy bucket bottom level bin easy graphs making nodes occupy second bucket bottom level bin 
addition source connected node path arc length node second path arc length graph type graph family range values values long grid modifying modifying modifying wide grid modifying modifying modifying random graph modifying modifying modifying easy hard modifying table problem families experiments 
maximum arc length length width respectively grid graphs number levels easy hard graphs meant easy hard 
summary graph types appears table 
problem families graph type examined relative performance implementations changed increased various parameters 
type modification constitutes problem family 
families summarized table 
general family constructed varying parameter holding constant 
different families vary parameter different constant values 
instance problem family modifies modifies third modifies 
data interpretation overhead operation counts section explain data 
performed scanning nodes implementations variations cost come differing amounts overhead 
node scanned exactly helpful look number overhead operations node 
relative cost overhead operations important 
involved empty bucket operation involved expansion move operation 
move twice expensive expansion expansion merely involves insertion moving involves deletion 
scanning node involves removing appropriate bucket examining outgoing arcs potentially changing distance labels parent pointers neighbors 
networks study small degree scanning node takes time expansion move operation time empty bucket operation 
cost insertion deletion bounded constant uniform 
inserting empty bucket half expensive inserting non empty bucket due cost updating doubly linked list 
likewise deleting node bucket cheaper deleting penultimate earlier node 
usually necessary distinguish types insertions deletions refer fact needed explain data 
number overhead operations significant effect running time significantly overhead operation node 
relative implementation performance determined number empty bucket operations 
advantage multiple bucket levels examining empty bucket may increase large amount 
game diminishing returns rate decrease empty bucket operations rate increase expansion operations 
key statistics relate distribution path lengths 
define depth network highest distance source node reachable source 
network depth important parameter understanding performance implementations 
minimum length cutoff heuristics level implementation examines exactly buckets labeled nodes 
heuristics multiple levels number empty operations usually grows grows 
depth explain performance 
variance shortest path lengths important statistic 
distribution shortest path lengths highly non uniform large stretches empty buckets multi level implementations quickly skip 
equally crucial density distribution empty buckets overhead bucket expansion may higher overhead examining empty buckets favoring small numbers bucket levels 
distributions grids fairly uniform vary density varies 
gives fairly estimate distribution density shortest path lengths 
experimental results section experimental results 
tables denotes number bucket levels 
mentioned ary heap data calibration purposes 
data succinct interpretation give section 
varying grid size tables show relative performance implementations long grids size grid changes 
table concerns long small networks second long medium networks third long large networks 
long small networks comparable number empty bucket operations small multiple bucket levels help 
networks performance bucket implementations similar 
level implementation fastest small margin 
level implementations perform identically slowest small margin 
relative performance consistent operation counts 
number empty bucket operations number move operations similar implementations 
level implementation expansion operations bucket implementations expansion operation node relative running time differences small 
long medium networks greater level implementation slower bucket implementations performs empty bucket operations node 
running time level implementation dominated time spend examining empty buckets 
number move operations nodes comparison small data set level level level level heap nodes time empty expanded moved time empty expanded moved time empty expanded moved time empty expanded moved time moved table performance long grids grid length increases 
nodes comparison medium data set level level level level heap nodes time empty expanded moved time empty expanded moved time empty expanded moved time empty expanded moved time moved table performance long grids grid length increases 
nodes comparison large data set level level level level heap nodes time empty expanded moved time empty expanded moved time empty expanded moved time empty expanded moved time moved table performance long grids grid length increases 
implementations little node little effect relative performance 
level implementations empty buckets provide dominant cost 
level implementation examines times empty buckets level implementation level implementation examines times empty buckets level implementation 
cost expansion dominant level implementation fastest followed level implementations 
long large networks huge compared expect behavior long medium networks level implementations suffer due huge number empty buckets multi level implementations skip huge empty buckets increase expansion operations 
level implementation performs poorly 
implementations bucket levels perform similarly small large level implementation somewhat better 
tables show relative performance implementations wide grid families wide small wide medium wide large 
families respectively 
wide small family bounded 
family number empty bucket operations small implementations grow problem size grows 
number move operations similar bucket implementations 
number expansion operations grows number levels accounts difference performance 
implementations expansion operation node performance difference relatively small 
wide medium networks bounded 
number empty bucket operations number nodes grows slower 
number move operations similar implementations 
number expansion operations grows number bucket levels explains worse performance implementations bucket levels 
level implementation number operations node performance difference small 
wide large networks bounded 
small values large compared multi bucket implementations bucket levels perform better 
grows advantage level implementation 
erratic performance curve level implementation due cutoff heuristic 
number empty buckets seen level case increases 
heuristic successful level implementation empty buckets nodes comparison small data set level level level level heap nodes time empty expanded moved time empty expanded moved time empty expanded moved time empty expanded moved time moved table performance wide grids grid width increases 
nodes comparison medium data set level level level level heap nodes time empty expanded moved time empty expanded moved time empty expanded moved time empty expanded moved time moved table performance wide grids grid width increases 
nodes comparison large data set level level level level heap nodes time empty expanded moved time empty expanded moved time empty expanded moved time empty expanded moved time moved table performance wide grids grid width increases 
level implementations 
quite unusual 
tables show relative performance different bucket level implementations random graphs 
table concerns random small networks second random medium networks third random large networks 
networks expected value proportional log path length distribution fairly uniform 
log small random grids perform similarly wide grids proportional useful insight gained comparing tables large problem sizes 
number empty bucket operations higher long grids wide grids numbers similar overhead operations 
level case running times long grids better 
reason long grids buckets contain element wide grids usually elements bucket 
observed section linked list operations faster case 
list operations scanning expansion move operations family frequent empty bucket operations 
explains data 
similar phenomena occurs tables 
varying maximum arc length tables show relative performance implementations maximum arc length changes 
important theoretical bounds depend tables show results grids nodes 
value grows starting increasing factor step 
wide grid random graph families give similar results 
level implementation performs best small performance degrades quickly increases 
grows cost empty operations dominant 
long len family clear crossover 
wide len families data suggests crossovers larger values additional experiments confirm 
consider long len family 
number empty bucket operations small compared number nodes level implementation little faster multilevel implementations 
large number empty bucket operations increases multi bucket implementations faster 
wide len family bigger large 
number nodes comparison rand small data set level level level level heap nodes time empty expanded moved time empty expanded moved time empty expanded moved time empty expanded moved time moved table performance random graphs increases 
nodes comparison rand medium data set level level level level heap nodes time empty expanded moved time empty expanded moved time empty expanded moved time empty expanded moved time moved table performance random graphs increases 
nodes comparison rand large data set level level level level heap nodes time empty expanded moved time empty expanded moved time empty expanded moved time empty expanded moved time moved table performance random graphs increases 
comparison len data set level level level level heap time empty expanded moved time empty expanded moved time empty expanded moved time empty expanded moved time moved table performance long grids maximum arc length increases 

comparison len data set level level level level heap time empty expanded moved time empty expanded moved time empty expanded moved time empty expanded moved time moved table performance wide grids maximum arc length increases 

comparison rand len data set level level level level heap time empty expanded moved time empty expanded moved time empty expanded moved time empty expanded moved time moved table performance random graphs maximum arc length increases 

empty bucket operations grows remains number nodes 
number empty bucket operations decreases number bucket levels dependence long len family 
rand len family similar wide len family 
comparison heap implementation shows level implementation bucket implementations sensitive varying grid size maximum arc length natural experiment proportional tables show data long long families long grids 
family length grid 
second table 
tables show equivalent results wide wide families tables show results rand rand families 
long grids expected value grows level bucket implementation worst large margin 
level implementations perform similarly 
level implementation growth number empty bucket operations close quadratic theory suggests 
large values operations dominate running time 
multi level implementations growth rate slower superlinear 
usual levels decrease number empty bucket operations increase number expansion operations 
performance differences multi level implementations relatively small 
wide grids expected value linear bucket implementations perform similarly implementations fewer levels little faster 
number overhead operations comparable number nodes 
random graphs expected value linear log results similar wide grids 
hard easy problems bucket implementations level perform similarly problems discussed previous sections 
study problems designed hard easy implementation specific number bucket levels 
recall graphs problems consist source connected paths equal number arcs 
suppose problem designed implementation uses bucket levels 
path arcs length equal number buckets nodes comparison data set level level level level heap nodes time empty expanded moved time empty expanded moved time empty expanded moved time empty expanded moved time moved table performance long grids grid length maximum arc length grow 
nodes comparison data set level level level level heap nodes time empty expanded moved time empty expanded moved time empty expanded moved time empty expanded moved time moved table performance long grids grid length maximum arc length grow 

nodes comparison data set level level level level heap nodes time empty expanded moved time empty expanded moved time empty expanded moved time empty expanded moved time moved table performance wide grids grid width maximum arc length grow 
nodes comparison data set level level level level heap nodes time empty expanded moved time empty expanded moved time empty expanded moved time empty expanded moved time moved table performance wide grids grid width maximum arc length grow 

nodes comparison rand data set level level level level heap nodes time empty expanded moved time empty expanded moved time empty expanded moved time empty expanded moved time moved table performance random graphs grid width maximum arc length grow 
nodes comparison rand data set level level level level heap nodes time empty expanded moved time empty expanded moved time empty expanded moved time empty expanded moved time moved table performance random graphs grid width maximum arc length grow 

comparison hard data set level level level level heap time empty expanded moved time empty expanded moved time empty expanded moved time empty expanded moved time moved table hard problems level implementation 

comparison hard data set level level level level heap time empty expanded moved time empty expanded moved time empty expanded moved time empty expanded moved time moved table hard problems level implementation 

lowest level 
arcs source different length 
hard problems length gamma easy problems length 
case hard problems level algorithm examines empty bucket lowest level lowest level algorithm examines buckets ones occupied 
case easy problems algorithm examines buckets lowest level skips rest cutoff heuristic 
expects hard problems take long time level implementation performs gamma empty bucket operation node scans 
recall implementations number buckets level power 
result multi level implementation levels forced examine lowest level buckets number nodes lowest level buckets point execution small 
problem designed hard level implementation hard implementations fewer levels 
easy problems take relatively little time empty buckets examined corresponding implementation 
tables give data problem families hard hard designed hard level implementations respectively 
results expected 
hard family large values number empty bucket operations bigger level implementations 
level implementation performs equally poorly memory largest problem instances 
hard family large values number empty bucket operations bigger level implementations 
table gives data easy problem family designed easy level implementation 
family unusual number empty bucket operations multi level implementations increases number levels 
performance level implementation independent level implementations run slower increases 
largest value performance difference large 
heap implementation performance relative performance ary heap implementation depends graph type 
long grids heap contains nodes computation heap operations fast heap implementation usually outperforms multi level bucket implementations 
small overhead multi level bucket implementations small perform similarly heap implementation 
hard easy problems ary heap implementation contains nodes comparison easy data set level level level level heap time empty expanded moved time empty expanded moved time empty expanded moved time empty expanded moved time moved table easy problems level implementation 

heap point execution computation heap contains nodes 
heap operation overhead extremely small heap implementation fast problems 
wide grid random problem families heap contains relatively nodes 
problem families multi level bucket implementations relatively large overhead small large compared implementations lose heap implementation small large bucket implementations faster 
previous study concluded level implementation significantly outperforms significantly level implementation 
goal study evaluate effect number levels performance 
studied level implementations large collection problem families explained results interesting subset 
study confirms level implementation robust network depth large compared number nodes multi level implementations perform consistently problem classes 
exceptions study long large problems problems discussed section 
results suggests implementations exhibit consistent performance practical situations 
section studied classes problems designed hard easy certain implementations 
results show possible multi level implementations perform poorly 
multi level implementation dominates level implementation robust level implementations 
level implementation loses larger margins wins 
level implementation robust level implementation 
level implementation competitive level implementations large 
level implementations performed similarly families specifically designed differentiate see section 
note multi level implementations handle huge arc lengths 
example number buckets level implementations delta respectively 
level implementations buckets require words memory small amount modern computers 
note smaller applications natural bound bit computers 
natural bound bit computers numbers change delta number shows level implementation requires memory 
level implementation requires words buckets case big today tomorrow computers 
level implementation requires words 
level bucket implementation suggested robust choice shortest path problems nonnegative arc length 
results confirm show level bucket implementations robust choices 
multi level bucket data structure may useful applications 
application simulation event set problem calendar queue data structure respects similar level bucket data structure appears practice 
ahuja mehlhorn orlin tarjan 
faster algorithms shortest path problem 
assoc 
comput 
mach april 
bellman 
routing problem 
quart 
appl 
math 
brown 
queues fast priority queue implementation simulation event set problem 
comm 
acm 
cherkassky goldberg 
shortest paths algorithms theory experimental evaluation 
technical report stan cs department computer science stanford university 
cherkassky goldberg 
shortest paths algorithms theory experimental evaluation 
proc 
th acm siam symposium discrete algorithms pages 
cormen leiserson rivest 
algorithms 
mit press cambridge ma 
dial 
algorithm shortest path forest topological ordering 
comm 
acm 
dijkstra 
note problems connection graphs 
numer 
math 
dinic 
economical algorithms finding shortest paths network 
yu editors transportation modeling systems pages 
institute system studies moscow 
russian 
ford jr fulkerson 
flows networks 
princeton univ press princeton nj 
fredman tarjan 
fibonacci heaps uses improved network optimization algorithms 
assoc 
comput 
mach 
fredman willard 
trans dichotomous algorithms minimum spanning trees shortest paths 
comp 
syst 
sci 
gallo pallottino 
shortest paths algorithms 
annals oper 
res 
ju 
livshits 

transport moscow 
russian 
moore 
shortest path maze 
proc 
int 
symp 
theory switching pages 
harvard university press 
pape 
implementation efficiency moore algorithms shortest root problem 
math 
prog 
tarjan 
data structures network algorithms 
society industrial applied mathematics philadelphia pa 
wagner 
shortest path algorithm edge sparse graphs 
assoc 
comput 
mach 

