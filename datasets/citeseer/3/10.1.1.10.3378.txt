peer peer approach content publish subscribe wesley stefan andreas alejandro buchmann department computer science darmstadt university technology darmstadt germany ito tu darmstadt de tu darmstadt de az buchmann informatik tu darmstadt de publish subscribe systems successfully decouple distributed applications 
efficiency closely tied topology underlying network design neglected 
peer peer network topologies offer inherently bounded delivery depth load sharing self organisation 
contentbased publish subscribe system routed peer peer topology graph 
implications combining approaches explored particular implementation elements chord proven correct 
keywords publish subscribe content routing peer peer networks graph topology 
publish subscribe scalable flexible communication paradigm suits needs modern applications 
publish subscribe service conveys published notifications producer interested consumers matching subscription set 
manner clients source destination identifiers addresses 
inherent loose coupling producers consumers primary advantage systems 
achieve loose coupling consumers subscribe specific kinds event notifications 
flexible selection criteria notifications realized content selection 
particular publish subscribe model notification messages filtered content 
event notifications propagate producer interested consumers network filters 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
debs san diego ca usa copyright acm 
state art content publish subscribe systems static networks 
subscriptions change dynamically interests current clients routing network publish notifications remains unchanged 
furthermore network chosen tree order simplify routing algorithms 
approach introduces single points failure bottlenecks 
network topology significantly influences performance system carefully selected reduce network congestion minimise routing depth preserve properties face changing network nodes failures 
properties missing current systems 
hand peer peer networks address precisely issues 
self coordinate large network achieve common goal 
assumption design peer peer networks frequent node failure changing participation 
networks typically excellent routing depth guarantees 
peers equal traffic evenly distributed reducing congestion 
peer peer systems maintain guarantees assumption frequent failures 
modern peer peer networks great effect implementing form multicast 
topic publish subscribe primitive addressing model implemented peer peer multicast 
routing decisions peer peer networks generally simplistic 
publish subscribe routing policy allows decisions selection criteria flexible content publish subscribe 
provide reliable scalable topologies contentbased filtering general graphs tree maintained 
contribution take graph topology management peer peer network couple highly flexible routing publish subscribe system 
particular interest network preserves fully general filters guarantees logarithmic bound delivery depth evenly distributed congestion face dynamic participation failures 
remainder structured follows 
section briefly outline chord overlay routing scheme content publish subscribe system borrow ideas :10.1.1.105.3673
section motivates design system outline formal properties 
section proceeds prove correct publish subscribe algorithms 
discuss section preserve required network filter structure face node edge failures joins 
section compare system existing outline direction research 

communication paradigms communication architecture envisioned integrates content filtering strategies directly top network topology 
manage filters reuse algorithms filter covering merging :10.1.1.6.1383
topology network directly borrowed chord network :10.1.1.105.3673:10.1.1.105.3673
generalised routing algorithm implement publish subscribe interface focus 
maintenance graph implemented generalised routing algorithm chord native algorithm omit 
processes pub sub systems known event systems clients underlying notification service act producers consumers messages called event notifications notifications short 
notification message describes event 
notifications injected event system publish call published specific receiver 
conveyed underlying notification service consumers registered matching subscription subscribe 
subscriptions describe kind notifications consumers interested 
major characteristic notification service data model transmitted notifications language subscribing 
subject type addressing exists content filtering offers flexible scheme 
filters boolean functions entire content notification 
notification service relies network brokers forward notifications filter routing tables 
topology system constrained acyclic connected graph fig 
simplicity reasons 
edges point point connections forming overlay network underlying tcp network 
model simplifies implementation reasoning communication characteristics 
single network data dissemination comparable single spanning tree approach multicast algorithms 
single tree local client broker router network 
bottleneck system node single point failure central nodes carry major part load 
major advantage systems routing tables direct flow notifications interested nodes 
broker maintains routing table includes content filters 
routing notification goes link matched corresponding filter 
simplest form routing simple routing active filters simply added routing tables link originated 
obviously optimal respect routing table sizes grow linearly number subscriptions 
improvement check combine filters equal 
generally covering routing strategy tests filter accepts superset notifications second filter case replaces occurrences assigned link routing table significantly decreasing table size 
second step cover set filters merging create new filters cover existing ones 
resulting merged filter forwarded neighbour brokers covers replaces base filters 
merging done perfect imperfect way 
perfectly merged filters accept notifications accepted base filters imperfectly merged filters accept notifications base filters 
imperfect routing table entries increase network traffic notifications accepted forwarded neighbour brokers discarded 
hand filter table accepts notification need updated new covered subscription 
chord chord simple sound peer peer network :10.1.1.105.3673:10.1.1.105.3673
graph topology provides features help build efficient content filtered publish subscribe filtering system respect delivery depth load balancing 
chord scalable system node lookup dynamic peer peer system frequent node arrivals departures 
way similar distributed hash tables dhts :10.1.1.140.3129
chord supports just operation key part large circular key space 
maps key node 
achieves scalable manner limiting routing information node needs nodes 
routing table distributed chord node communicates neighbours order perform lookup 
steady state node system node maintains information log nodes resolves lookups log messages nodes 
chord maintains routing information nodes join leave system 
chord network topology general form 
basic principle node keeps directed edges nodes distances 
clockwise circle 
routing achieved successively refining search edges 
borrow concept refinement chord apply general concept filter coverage 
neighbour neighbour chord graph neighbour 
design section outline changes required publish subscribe system constraints network topology 
extending publish subscribe goals combining publish subscribe remove single bottleneck point failure exactly tree notifications filter updates 
avoid introducing routing cycles general redundant graph select notification spanning subtree entire graph 
routing provide test assure forwarding edges subtree 
provide routing algorithm understanding select edges subtree provide topology component 
furthermore want network robust brokers change fail 
keep graph correct maintain system routing tables reflect changes 
add components architecture maintain structure graph filters 
final change semantic nature relaxed assumption broker failures happen longer guarantee delivery published notifications match subscription 
despite changes implementation preserves apis implement invoke filters api publish subscribe notification 
new maintenance components simply existing publish subscribe api communication access routing table 
design illustrated 
filter invariant maintenance publish subscribe notifications graph topology maintenance generalized routing algorithm topology description publish subscribe filter engine point point routing components architecture topology trees know generalise graph 
keep system functioning requires graph structure 
important structure understood implement 
nodes topology graph special broker machines publish subscribe behalf possibly light weight poorly connected client machines 
maintain connections peer broker nodes order route notifications subscriptions 
directed edge topology graph network link joining brokers 
direction edge indicates direction published notifications flow 
possible nodes connected edges direction 
edge associate exactly contentbased filter determines event notification forwarded associated peer broker 
previously noted general graph tree required 
purpose sending notification filter update broker times 
fact want preserve guarantee single published notification matches subscription 
sense consider spanning subtree graph publish subscribe operation 
balance network congestion reduce single points failure different tree broker 
broker root distinct tree delivering published notification 
addition multiple trees notification presents difficulties 
prior generalised routing subscription notification followed tree 
lead correct behaviour general topology 
notification distributed tree subscription nodes tree propagate tree remains unchanged 
subscribe simultaneously propagate possible publish trees 
path denote route taken tree rooted publish notification subscription tree rooted follow reverse reach path taken 
case path filters supersets leading notification dropped early 
discussed detail section 
distribution notifications filter updates network essentially broadcast algorithm 
similar existing naive scheme implemented chord 
broadcast notifications heavily attenuated filters edges filter updates attenuated filter covering 

implementation order proofs explanation precise specific notation 
notation collected quick explained detail 
notation refer topology graph gv ge sets vertices edges respectively 
denote key space 
represents set event notifications 
gv number broker nodes graph 
ge denotes directed edge gv gv text denote readability 
denotes path gv gv ge denotes set peers node may forward notification 
loopback edge express clients subscriptions 
gv gv ge denotes set peers node may receive notification 
loopback edge publish notifications clients behalf 
gv denotes peer clockwise circle key gv function maps specific node key value ru gv returns subset key space node holds responsible 
ge function mapping edge set event notifications corresponding filter accepts 
due chord graph log edges entering node log edges leaving node 
call edges leaving node publishing edges denote set target nodes 
edges entering node call subscription edges nodes respectively 
terminology chosen reflect operations taken edges 
edges indicated edge interpreted direction relative publishing 
node publishing edges selected doubling property taken chord 

keeps edge node clockwise distance circle 
denote particular nodes 
edge kept peer node 
theorem related chord degree log :10.1.1.105.3673
chord key space mapped circle 
node location circle key key 
publishing select subtree 
achieve node takes nodes draws appropriate locations circle illustrated 
assigns responsibility ru section circle clockwise node node 
manner entire key space partitioned 
edge filter 
say filter accepts event notification 
rejected 
filter covers filter merging filters creating invariant order globally correct filter decisions locally node need guarantees structure filters 
invariant ensures published notifications follow path filters subsets 
manner early filter reject notification accepted 
ru ru ru ru ru partition responsibility notation section invariant expressed follows gv ru rv terms equation illustrated chord graph 
publishing notifications guarantee node receives notification twice 
publisher notification subscriber event notifications edges delivery path fail delivery guarantee receives messages carry event notification include range field range field denotes receiving node responsible delivering notification interested parties range key key space considered wrap 
publishing node starts algorithm setting initial range entire key space imagining notification received loopback edge node receives notification intersects range key set ru peer 
intersection non empty filter tested 
filter accepts published notification forwarded edge new range ru 
rv ru terms invariant order edges considered decreasing size ru 
case network contains nodes published notifications follow paths indicated 
pulling routing circle see binomial tree 
reason underlying guarantee log deliver steps 
inherited directly chord 
correctness argument structured inductive proof size ru 
inductive hypothesis node receives notification range ru key 
su ru nodes subscription guarantees deliver su ru ru 
assuming algorithm works ru prove works ru argue algorithm terminates completing proof 
ru ru ru su 
recall ru partition 
ru su partitions ru su respectively 
peer node key ru 
simply delivers subscribed clients exactly 
decides forward range iff ru ru 
need receive rv 
suppose forward needed means 
pick rv rv ru 
ru rv 
invariant 

contradiction 
needs nodes receives furthermore ru inductive hypothesis holds 
element partition ru met guarantee delivery ru meets guarantees disjoint sets 
furthermore delivered delivered sv union 
met guarantees problem size ru 
know node sees reduces number nodes remaining algorithm terminate 
algorithm claimed guarantees 
formally delivery depth related binomial tree log 
notification propagation binomial tree publish subscribe subscribing subscription simply updates loopback filter originating node invariant 
publish operation delivered clockwise chord ring subscribe operation delivered counterclockwise 
publish followed decreasing responsibility order subscribe follows increasing responsibility order 
illustrates case messages update invariant include state new filter apply edge 
goal subscribe algorithm reach node path publish follow reach subscriber require gv know ru 
know keys publishers pointing hold accountable 
node receives filter update peer filter checks filter covers cover may choose update filter 
cover set filter change stops processing 
considers subscription edges peers 
ru rv recalculates appropriate filter defined propagates ru rv unsubscribe exact procedure followed loopback filter changed 
algorithm directly maintains invariant need prove terminates 
show number filter update propagation edge decreases corresponding distance spanned key space increase 
tells eventually algorithm terminate edge crosses half circle 
fact number steps log due binomial tree 
sketch proof uses node separate ru rv illustrates 
rv ru visual termination proof recall received filter update 
consider case needs update 
contradiction set chose node clockwise distance chose distance clockwise clockwise distance far clockwise recall range ru counter clockwise key due construction section 
clockwise range rv clockwise ru rv 
contradicts assumption needed updated 
dealing failures fault tolerance recovery important issues distributed environment peer peer system 
node edge failures commonplace 
system relies correct structure provide maintenance algorithm allows recover edge node failures 
high redundancy system allows handle efficient way 
face edge failures delivery path guarantee best effort delivery semantics 
reader may noticed redundant topology retransmission guarantee exactly delivery subscribed nodes case simultaneous log edge failures 
significant amount history increased message overhead required give delivery guarantee face network split 
chose omit form failure recovery allow applications trade 
keeping graph chord shaped events temporarily break chord graph 
new node may join publish subscribe edges date 
worse edges may fail 
case critical neighbour goes missing entire circle may cut 
new node joining update receives published notifications 
define special notification published connects includes key 
brokers subscribe node join notification key key joins inside range update peer closer circle 
assist updating new node publish links nodes subscribe node location notification key range node counter clockwise 

manner node connects publishes node location event notification find best node 
publish edges 
nodes fail take associated edges 
edges reestablished edges comprising perimeter circle 
need prevent network falling apart 
research indicated network needs log edges expect keep edge alive network partition 
node keeps log edges nodes immediately clockwise 
discovered published node location notification 
edge 
edges simply sit dormant waiting case perimeter cut 
non perimeter edge fails node seeks new neighbour discovery procedure 
discovery responsibility ru failed node delegated neighbour counter clockwise noted published notifications section filtered range inclusion test 
know chord notifications filtered routed log messages 
keeping invariant true addition keeping graph appropriately shaped nodes preserve invariant filters 
cases invariant violated new edges edge failures 
node joins publishers connect graph preserving strategy section 
new edges may created graph tries preserve appropriate edge link structure 
new edge created receiving node informed range responsible published responsibility change event notification 
notifications filtered propagate hop 
receiving responsibility change notification local invariant maintenance component subscribed node sends update message containing computed filter union section 
propagation filter update proceeds normally establishing invariant 
edge disappears section dictated responsibility change 
case filter corrected 
achieve notification responsibility change event published case new edge 
invariant 
missing maintenance notifications correction routines assume reliable event notification delivery edges failing 
assumption required 
responsibility change event notification travels exactly edge 
edge fails node simply sends new responsibility change event notification newly responsible neighbour 
node discovery event appropriate publishing peers connect timely manner node retransmits notification 
duplicate messages issue node connects peer twice 
node join notification node retransmit 
link established keys exchanged 
node deduce missing subscription peer edges 
resolution algorithms robust face network flux efficient easily filtered notifications 

related systems focus efficient distributed search limiting search hash key lookup 
systems favour anonymous request reply scheme structured hash tables simple broadcast networks redundant centralised indices combination 
scalable design overlay networks introduced new class structured networks called distributed hash tables dht 
known representatives include chord pastry :10.1.1.140.3129:10.1.1.105.3673
systems built allow efficient key lookup 
structured networks allow multicast extension dht lookup scheme 
generally schemes efficient requiring log messages subscribe wasting messages interior tree nodes publish 
scheme proposed dht chord pastry map multicast group number specific node act rendezvous node group 
joining group means lookup rendezvous node nodes lookup path record route back new members 
variant scheme proposed 
idea rendezvous node act entry point distinct overlay network composed group members 
messages wasted publish node interested 
far publish subscribe systems structured networks implement topic publish subscribe 
system uses described overlay multicast called scribe implemented top pastry 
mapping topics multicast groups done simply hashing topic name 
hermes uses similar approach pastry 
additionally system tries get limitations topic publish subscribe implementing called type attribute publish subscribe model 
extends expressiveness subscriptions aims allow multiple inheritance event types 
networks efficiently implement simple form publish subscribe 
topic approach suffers limited expressiveness selectivity allowing predefined topics 
leave large part filtering leaf nodes event dissemination graph 
content filtering hand aims deliver useful matches 

assume specific filter model implemented top infrastructure number general constraints content filter models described 
addition system favours filter models allow limit size update messages nodes 
remains seen filter models implemented efficiently top architecture 
measuring performance network difficult task 
performance closely tied content filter selected probability distribution subscribes distribution publishes ratio publishes subscribes 
important open question put trade filter update event notification messages 
proofs correctness rely primarily partitioning responsibility peers 
maintenance graph depends peer peer network filter maintenance 
interested examining peer peer networks substrates algorithm particularly guarantees path length underlying network 
interesting challenge investigate impact physical locality behaviour publish subscribe 
expect trade offs choosing edges connect physically proximate nodes 

content publish subscribe system built top dynamic peer peer overlay network 
distributes load equally maintaining independent delivery trees node 
allows generalization publish subscribe routing strategy 
separate components ensure network self organises maintain optimal topology survive simultaneous failure half nodes 
argue system delivers binomial trees message delivery paths logarithmically bounded 
details algorithms provided proven correct 
main advantage system unique combination high expressiveness content filters scalability fault tolerance peer peer system 

partially founded german national science foundation dfg part graduate colleges enabling technologies commerce system integration ubiquitous computing 

nd international workshop peer peer systems iptps hotel berkeley ca usa feb 
bates bacon moody 
events scalable federation heterogeneous components 
bacon editors proceedings th acm sigops european workshop support composing distributed applications pages sintra portugal sept 
carzaniga rosenblum wolf 
challenges distributed event services scalability vs expressiveness 
emmerich editors icse workshop engineering distributed objects may 
carzaniga rosenblum wolf 
design evaluation wide area event notification service 
acm transactions computer systems 
deering cheriton 
multicast routing datagram internetworks extended lans 
acm transactions computer systems may 
el brand haridi 
efficient broadcast structured networks 
proceedings nd international workshop peer peer systems iptps 
eugster guerraoui damm 
objects events 
vlissides editors proceedings oopsla conference object oriented programming systems languages applications pages tampa bay fl usa 
acm press 
hl rtner 
modular event systems 
knowledge engineering review 
appear 
karger 
koorde simple degree optimal hash table 
proceedings nd international workshop peer peer systems iptps 
hl 
generic constraints content publish subscribe systems 
batini giunchiglia giorgini mecella editors proceedings th international conference cooperative information systems coopis volume lncs pages trento italy 
springer verlag 
hl 
large scale content publish subscribe systems 
phd thesis darmstadt university technology 
oki siegel skeen 
information bus architecture extensible distributed systems 
liskov editor proceedings th symposium operating systems principles pages asheville nc usa dec 
acm press 
bacon 
hermes distributed event middleware architecture 
bacon guerraoui jacobsen hl editors proceedings st international workshop distributed event systems debs july 
ratnasamy francis handley karp schenker 
scalable content addressable network 
proceedings conference applications technologies architectures protocols computer communications sigcomm pages san diego california united states 
acm press 
ratnasamy handley karp shenker 
application level multicast content addressable networks 
crowcroft hofmann editors proceedings third international cost workshop ngc volume lncs pages 
springer verlag nov 
rowstron druschel 
pastry scalable object location routing large scale peer peer systems 
guerraoui editor proceedings th ifip acm international conference distributed systems platforms middleware volume lncs pages heidelberg germany 
springer verlag 
rowstron 
kermarrec castro druschel 
scribe design large scale event notification infrastructure 
crowcroft hofmann editors third international conference networked group communication ngc volume lncs pages london uk 
springer verlag 
stoica morris karger kaashoek balakrishnan :10.1.1.105.3673
chord scalable peer peer lookup service internet applications 
proceedings acm sigcomm conference pages san diego california usa 
