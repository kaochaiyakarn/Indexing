methodology agent oriented analysis design michael wooldridge nicholas jennings david kinny department electronic engineering department computer science queen mary westfield college university melbourne london ns uk australia fm wooldridge qmw ac uk cs mu oz au presents methodology agent oriented analysis design 
methodology general applicable wide range multi agent systems comprehensive deals macro level societal micro level agent aspects systems 
methodology founded view system computational organisation consisting various interacting roles 
illustrate methodology case study agent business process management system 
progress software engineering past decades primarily development increasingly powerful natural abstractions model develop complex systems 
procedural abstraction data types objects examples abstractions 
belief agents represent similar advance abstraction may software developers naturally understand model develop important class complex distributed systems 
agents realise potential software engineering paradigm necessary develop software engineering techniques specifically tailored 
existing software development techniques example object oriented analysis design simply unsuitable task 
fundamental mismatch concepts object oriented developers mainstream software engineering paradigms agent oriented view 
particular extant approaches fail adequately capture agent flexible autonomous problem solving behaviour richness agent interactions complexity agent system organisational structures 
reasons outlines methodology specifically tailored analysis design agent systems 
remainder structured follows 
sub section discussing characteristics applications believe analysis design methodology appropriate 
section gives overview main concepts methodology 
agent analysis discussed section design section 
methodology demonstrated means case study section show applied design real world agent system business process management 
related discussed section section 
domain characteristics proceeding worth commenting scope particular characteristics domains believe methodology appropriate 
intended methodology appropriate development systems adept archon 
large scale real world applications main characteristics agents coarse grained computational systems making significant computational resources think agent having resources unix process 
assumed goal obtain system maximises global quality measure may suboptimal point view system components 
methodology intended systems admit possibility true conflict 
agents heterogeneous different agents may implemented different programming languages techniques 
assumptions delivery platform 
system contains comparatively small number agents 
methodology propose comprehensive deals macro societal level micro agent level aspects design 
represents advance previous agentoriented methodologies neutral respect target domain agent architecture see section detailed comparison 
conceptual framework methodology intended allow analyst go systematically statement requirements design sufficiently detailed implemented directly 
applying methodology analyst moves increasingly concrete concepts 
successive move introduces greater implementation bias shrinks space possible systems implemented satisfy original requirements statement 
permissions safety system roles responsibilities liveness properties properties analysis concepts protocols methodology borrows terminology notation object oriented analysis design specifically fusion 
simply naive attempt apply methods agent oriented development 
methodology provides agent specific set concepts software engineer understand model complex system 
particular methodology encourages developer think building agentbased systems process organisational design 
main concepts divided categories concrete 
entities analysis conceptualise system necessarily direct realisation system 
concrete entities contrast design process typically direct counterparts run time system 
entity concept hierarchy system see 
term system standard sense related meaning talking agent system mean society organisation 
think agent system artificial society organisation 
idea system society useful thinking level concept hierarchy roles 
may strange think computer system defined set roles idea quite natural adopting organisational view world 
consider human organisation typical 
roles president vice president 
note concrete realisation roles instantiated actual individuals individual takes role president individual takes role vice president 
instantiation necessarily static 
lifetime individuals may take role president example 
necessarily mapping roles individuals 
unusual particularly small informally defined organisations individual take roles 
example single individual take role tea maker mail 
conversely may individuals take single role salesman 
role defined attributes responsibilities permissions protocols 
responsibilities determine functionality key attribute associated role 
example responsibility associated role president calling shareholders meeting year 
responsibilities divided types liveness properties safety properties 
liveness properties intuitively state happens 
describe states affairs agent model roles model requirements statement services model interactions model acquaintance model analysis design relationships methodology models agent bring certain environmental conditions 
contrast safety properties invariants 
intuitively safety property states bad happens acceptable state affairs maintained states execution 
example ensure reactor temperature remains range 
order realise responsibilities role usually associated set permissions 
permissions rights associated role 
permissions role identify resources available role order realise responsibilities 
kinds system typically modelled permissions tend information resources 
example role associated ability read particular item information modify piece information 
role ability generate information 
role identified number protocols define way interact roles 
example seller role protocols dutch auction english auction associated 
summary analysis design thought process developing increasingly detailed models system constructed 
main models approach summarised elaborated sections 
analysis objective analysis stage develop understanding system structure implementation detail 
case understanding captured system organisation 
detail view organisation collection roles stand certain relationships take part systematic institutionalised patterns interactions roles 
define organisation suffices define roles organisation roles relate role interact roles 
aim analysis stage model system multi agent organisation precisely way 
organisation model comprised models roles model section interaction model section 
roles model roles model identifies key roles system 
role viewed description entity expected function 
terms role identical notion office sense prime minister attorney general united states secretary state education offices 
roles offices characterised types attribute permissions rights associated role 
role associated certain permissions relating type amount resources exploited carrying role 
case aspects captured attribute known role permissions 
responsibilities role 
role created order 
role certain functionality 
functionality represented attribute known role responsibilities 
permissions permissions associated role aspects identify resources legitimately carry role intuitively say spent carrying role state resource limits role executor operate intuitively say spent carrying role 
general permissions relate kind resource 
human organisation example role monetary budget certain amount person effort 
methodology think resources relating information knowledge agent 
order carry role agent typically able access certain information 
roles generate information may need access piece information modify may need modify information 
recognise richer model resources required moment restrict attention simply information 
formal notation expressing permissions fusion notation operation schemata pp 
illustrate notation 
responsibilities functionality role defined responsibilities 
responsibilities divided categories liveness safety responsibilities 
liveness responsibilities intuitively state happens 
liveness responsibilities called tend say done agent carrying role alive 
liveness responsibilities tend follow certain patterns 
example guaranteed response type achievement goal form request followed response 
infinite repetition achievement goal form happen infinitely 
note types requirements widely studied software engineering literature proven necessary capturing properties reactive systems 
order illustrate various concepts associated roles simple running example coffee filler role purpose role ensure coffee pot kept full coffee group workers 
examples liveness responsibilities role coffee empty fill fresh coffee sure workers know 
followed xj occurs occurs times occurs times occurs infinitely optional interleaved table operators liveness expressions model agent liveness properties specified liveness expression defines life cycle role 
liveness expressions similar life cycle expression fusion turn essentially regular expressions 
liveness properties additional operator infinite repetition see table details 
resemble regular expressions known suitable representing properties infinite computations :10.1.1.25.322
liveness expressions define potential execution trajectories various activities interactions protocols associated role 
general form liveness expression rolename expression rolename name role liveness properties defined expression liveness expression defining liveness properties rolename 
atomic components liveness expression protocols define protocols 
illustrate liveness expressions consider abovementioned responsibilities role fill expression says consists executing protocol fill followed protocol followed protocols 
protocols repeated infinitely 
moment shall treat protocols simply labels interactions shall worry defined matter returned section 
complex liveness expressions easier read structuring 
simple example illustrates done fill cases insufficient simply specify liveness responsibilities role 
agent carrying role required maintain certain invariants executing 
example require particular agent part electronic commerce application spends money allocated 
invariants called safety conditions usually relate absence undesirable condition arising 
safety requirements methodology specified means list predicates 
predicates typically expressed variables listed role permissions attribute 
returning role agent carrying role generally required ensure coffee stock empty 
means safety expression convention simply list safety expressions list item list expressing individual safety responsibility 
implicitly assumed responsibilities apply role schema name role description short english description role protocols protocols role plays part permissions rights associated role responsibilities liveness liveness responsibilities safety safety responsibilities template role schemata states system execution 
role infinitely long duration example invariants true 
possible precisely define roles model 
roles model comprised set role schemata role system 
role schema draws various attributes discussed single place 
exemplar instantiation role 
schema indicates permission read parameter indicates coffee machine role intended keep filled indicates machine full empty 
addition role permission change value 
interaction model inevitably dependencies relationships various roles multi agent organisation 
interplay central way system functions 
fact interactions obviously need captured represented analysis phase 
case links roles represented interaction model 
model consists set protocol definitions type inter role interaction 
protocol viewed institutionalised pattern interaction 
pattern interaction formally defined abstracted away particular sequence execution steps 
viewing interactions way means attention focused essential nature purpose interaction precise ordering particular message exchanges cf 
interaction diagrams pp scenarios fusion 
approach means single protocol definition typically give rise number message interchanges run time system 
example consider english auction protocol 
involves multiple roles sellers bidders potential patterns interchange specific price announcements corresponding bids 
analysis stage precise instantiation details unnecessary premature 
detail protocol definitions consist set attributes purpose brief description nature interaction information request schedule activity assign task initiator role responsible starting interaction responder role initiator interacts inputs information role initiator enacting protocol outputs information supplied protocol responder course interaction fill fill coffee machine supplied fill protocol definition processing brief description processing protocol initiator performs course interaction means illustration consider fill protocol forms part role 
states protocol fill initiated role involves role 
protocol involves putting coffee machine named results informed value 
see examples protocols section 
analysis process analysis stage methodology summarised 
identify roles system 
output prototypical roles model list key roles occur system informal description 

role identify document associated protocols 
protocols patterns interaction occur system various roles 
output interaction model captures recurring patterns inter role interaction 

protocol model basis elaborate roles model 
output fully elaborated roles model documents key roles occurring system permissions responsibilities protocols take part 

iterate stages 
design aim classical design process transform models derived analysis stage models sufficiently low level abstraction easily implemented 
case agent oriented design 
aim transform analysis models sufficiently low level abstraction traditional design techniques including object oriented techniques may applied 
put way agent oriented analysis design process concerned society agents cooperate realise systemlevel goals required individual agent order 
agent realises services scope methodology depend particular application domain 
design process involves generating models see 
agent model identifies agent types system agent instances instantiated types 
services model identifies main services associated agent type 
acquaintance model documents acquaintances agent type 
role schema description protocols permissions responsibilities liveness safety agent model role involves ensuring coffee kept filled informing workers fresh coffee 
fill reads supplied name coffee maker full empty changes stock level coffee fill purpose agent model document various agent types system development agent instances realise agent types run time 
agent type best thought set agent roles 
may fact correspondence roles identified roles model see section agent types 
need case 
designer choose package number closely related roles agent type purposes convenience 
efficiency major concern stage designer certainly want optimise design way doing aggregate number agent roles single type 
example decision may necessary footprint agent run time requirements terms processor power memory space large efficient deliver number roles single agent deliver number agents performing single role 
obviously trade coherence agent type easily functionality understood efficiency considerations come play designing agent types 
agent model defined simple agent type tree root nodes correspond roles defined roles model nodes correspond agent types 
agent type children means composed roles 
document agent instances appear system annotating agent types agent model cf 
qualifiers fusion 
annotation means exactly agents type run time system 
annotation means instances type run time system 
annotation means zero instances run time means instances run time 
note inheritance plays part agent models 
view agents coarse grained computational systems agent system typically contain small number roles types mapping 
reason believe inheritance useful part play design agent types 
comes implementing agents inheritance may normal oo fashion 
services model name suggests aim services model identify services associated agent role specify main properties services 
service mean function schema role agent 
oo terms service correspond method mean services available agents way object methods available object invoke 
service simply single coherent block activity agent engage 
service may performed agent necessary document properties 
specifically identify inputs outputs pre conditions post conditions service 
inputs outputs services derived obvious way protocols model 
pre post conditions represent constraints services 
derived safety properties role 
note definition role associated service 
services agent perform derived list protocols responsibilities associated role particular liveness definition role 
example returning coffee example protocols associated role fill 
service associated protocol 
case service may name take input stock level threshold value simply compare 
pre post conditions state coffee stock level greater condition safety conditions 
services model prescribe implementation services documents 
developer free realise services implementation framework deemed appropriate 
example may decided implement services directly methods object oriented language 
alternatively service may decomposed number methods 
acquaintance model final design model probably simplest acquaintance model 
acquaintance models simply define communication links exist agent types 
define messages sent messages sent simply indicate communication pathways exist 
particular purpose acquaintance model identify potential communication bottlenecks may cause problems run time see section example 
generally regarded practice ensure systems loosely coupled acquaintance model help doing 
basis acquaintance model may necessary revisit analysis stage rework system design remove problems 
agent acquaintance model simply graph nodes graph corresponding agent types arcs graph corresponding communication pathways 
agent acquaintance models directed graphs arc indicates send messages necessarily send messages acquaintance model may derived straightforward way roles protocols agent models 
design process design stage methodology summarised 
create agent model aggregate roles agent types refine form agent type hierarchy document instances agent type instance annotations 

develop services model examining protocols safety liveness properties roles 

develop acquaintance model interaction model agent model 
case study business process management section briefly illustrates methodology applied case study analysis design agent system managing british telecom business process see details 
reasons brevity omit details aim give general flavour analysis design 
particular application providing customers quote installing network deliver particular type telecommunications service 
activity involves departments customer service division csd design division dd legal division ld various organisations provide sourced service customers vcs 
process initiated customer contacting csd set requirements 
parallel capturing requirements csd gets customer 
customer fails procedure quote process terminates 
assuming customer satisfactory requirements mapped service portfolio 
met standard shelf item immediate quote offered 
case services process complex 
dd starts design solution satisfy customer requirements whilst occurring ld checks legality proposed service 
desired service illegal quote process terminates 
assuming requested service legal design eventually completed 
dd informs csd quote 
csd turn informs customer 
business process terminates 
moving behavioural description system operation organisational view comparatively straightforward 
cases mapping departments roles 
vc ld dd behaviour covered roles respectively 
csd behaviour falls distinct roles acting interface customer process inside organisation 
final role customer requires quote 
defines role omit role definitions interests brevity 
definition protocol 
turning design stage agent model application 
illustrates implemented system contains agent types roles aggregated agent type 
acquaintance model domain defined 
omit services model interests brevity 
qm cv select cv award contract qm cv ask customer cv qm perform return credit rating definition protocol roles qm cv customer agent model business process management related result development application robust agent technologies surge interest agent oriented methodologies modelling techniques years 
approaches take existing oo modelling techniques methodologies basis seeking extend adapt models define methodology directly extend applicability oo methodologies techniques design patterns design agent systems :10.1.1.27.9180
approaches build extend methodologies modelling techniques software knowledge engineering provide formal compositional modelling languages suitable verification system structure function 
valuable survey :10.1.1.53.3254
approaches usually attempt unify analysis design mas design implementation particular agent technology 
regard output analysis design process specification traditional lower level design methodologies may applied proposed allow architectural commitment analysis design fall short full elaboration design chosen framework 
approaches mentioned approach strong commitment particular agent architecture proposes design elaboration refinement process leads directly executable agent specifications :10.1.1.27.9180
proliferation available agent technologies clearly advantages role schema qm description protocols permissions responsibilities liveness safety responsible enacting quote process 
generates quote returns nil customer inappropriate service illegal reads supplied customer contact information detailed service requirements customer credit rating boolean requests generates quote completed quote nil bad quote nil false quote nil acquaintance model business process management general approach proposed 
disadvantage may need iteration entire process lower level design process reveal issues best resolved agent oriented level 
despite difference scope similarities approach proposed 
developed fulfill need principled approach specification complex multi agent systems belief bdi technology procedural reasoning system prs distributed multi agent reasoning system dmars 
methodology takes starting point object oriented modelling techniques exemplified adapts extends agent concepts 
methodology aimed construction set models fully elaborated define agent system specification 
main separation models developed external internal models 
external models system level view main components visible models agents primarily concerned agent relationships interactions including inheritance aggregation relationships allow abstraction agent structure 
contrast internal models associated distinct agent class entirely concerned internals agents beliefs goals plans 
primary external models agent model describes agent classes instances interaction model captures communications control relationships agents 
agent model divided agent class model agent instance model 
models define agent classes instances appear relate inheritance aggregation instantiation relations 
schema role agent classes define various attributes possessed agents attributes defining agent sets beliefs goals plans 
analyst able define attributes overridden inheritance 
example assumed default inherited plans lower priority subclasses 
analyst may tailor properties desired 
internal models represent beliefs goals plans particular agent classes direct extensions oo object models beliefs goals dynamic models plans 
example object model describe objects agent beliefs properties beliefs open closed world semantics 
dynamic models extended notions failure various attributes directly represent agent plans 
models quite specific bdi architecture employed dmars 
contrast external models applicable bdi agent architecture 
methodology aimed elaborating models described 
particular feature methodology emphasis agent classes means group roles analysis model refinement permits decisions boundaries concrete agents deferred late stage design process 
note analysis process iterative traditional methodologies 
outcome model comprises specifications form required dmars agent architecture 
result move design implementation dmars relatively simple 
seen similarities external models models proposed 
notion responsibility models quite informal safety liveness requirements explicit level lack notion permissions capture resource usage captured implicitly belief structure individual agents 
contrast protocols define permitted interactions agents may developed greater degree detail approach example protocols employed generic descriptions behaviour may involve entities modelled agents coffee machine 
significant difference inheritance agent classes permitted methodology proposed limited value specific architectural commitment 
definition various notions role responsibility interaction team society organization particular methods agent oriented analysis design inherited adapted general uses concepts multi agent systems including organization focussed approaches sociological approaches :10.1.1.41.4369
scope compare definition concepts heritage 
described methodology developed analysis design agent systems 
key concepts methodology roles associated responsibilities permissions protocols 
roles interact certain institutionalised ways defined protocols respective roles 
issues remaining 
importantly methodology attempt deal truly open systems agents may share common goals 
class systems represents arguably important application area multi agent systems essential methodology able deal 
aspect agent analysis design requires notion organisational structure 
moment structures implicitly defined methodology role interaction models 
direct explicit representations structures value applications 
example agents model large organisations organisations explicitly defined structure 
representing structures may way adequately capturing understanding organisation communication control structures 
generally development organisation design patterns useful reusing successful multi agent system structures cf 

believe successful methodology pragmatic value defined unambiguous formal semantics 
typical developer need aware existence semantics essential precise understanding concepts terms methodology mean 
booch 
object oriented analysis design second edition 
addison wesley reading ma 
brazier dunin keplicz jennings treur 
formal specification multi agent systems real world case 
proceedings international conference multi agent systems icmas pages san francisco ca june 
birgit burmeister 
models methodologies agent oriented analysis design 
klaus fischer editor working notes ki workshop agent oriented programming distributed systems 

dfki document 
castelfranchi 
commitments individual intentions groups organizations 
proceedings international conference multi agent systems icmas pages san francisco ca june 
coleman arnold hayes 
object oriented development 
prentice hall international hemel england 
inverno kinny luck wooldridge 
formal specification dmars 
singh rao wooldridge editors intelligent agents iv lnai volume pages 
springer verlag berlin germany 
jacques ferber olivier gutknecht 
meta model analysis design organizations multi agent systems 
proceedings third international conference multi agent systems icmas pages paris france 
gamma helm johnson vlissides 
design patterns 
addison wesley reading ma 
gasser hermann 
mace flexible testbed distributed ai research 
huhns editor distributed artificial intelligence pages 
pitman publishing london morgan kaufmann san mateo ca 
garijo gonzalez :10.1.1.53.3254
survey agentoriented methodologies 
ller singh rao editors intelligent agents proceedings fifth international workshop agent theories architectures languages atal lecture notes artificial intelligence 
springer verlag heidelberg 
toru ishida les gasser makoto yokoo 
organization self design production systems 
ieee transactions knowledge data engineering april 
jennings mamdani varga 
archon develop real world dai applications electricity transportation management particle acceleration control 
ieee expert december 
jennings faratin johnson norman brien wiegand 
agent business process management 
international journal cooperative information systems 
kinny 
agent interaction model 
ller singh rao editors intelligent agents proceedings fifth international workshop agent theories architectures languages atal lecture notes artificial intelligence 
springer verlag heidelberg 
kinny georgeff 
modelling design multi agent systems 
ller wooldridge jennings editors intelligent agents iii lnai volume pages 
springer verlag berlin germany 
kinny georgeff rao 
methodology modelling technique systems bdi agents 
van de velde editors agents breaking away proceedings seventh european workshop modelling autonomous agents multi agent world lnai volume pages 
springer verlag berlin germany 
david kinny 
distributed multi agent reasoning system architecture language specification 
australian ai institute level la street melbourne australia 
pnueli 
specification development reactive systems 
information processing 
elsevier science publishers amsterdam netherlands 
james rumbaugh michael blaha william premerlani frederick eddy william lorensen 
object oriented modeling design 
prentice hall englewood nj 
wooldridge 
agent software engineering 
iee proceedings software engineering february 
wooldridge jennings 
intelligent agents theory practice 
knowledge engineering review 
wooldridge jennings 
pitfalls agent oriented development 
proceedings second international conference autonomous agents agents pages minneapolis st paul mn may 
