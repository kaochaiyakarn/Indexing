general composition theorem secure reactive systems michael backes birgit pfitzmann michael waidner ibm zurich research lab mbc bpf wmi zurich ibm com 
consider compositional properties reactive systems secure cryptographic sense 
follow known simulatability approach modern cryptography specification ideal system real system sense simulate ideal 
show system consists polynomial number arbitrary ideal subsystems secure implementation sense blackbox simulatability securely replace ideal subsystems respective secure counterparts destroying blackbox simulatability relation 
prove theorem universal simulatability showing blackbox simulatability implies universal simulatability reasonable assumptions 
show results concrete security 
times analysis cryptographic protocols getting attention demand general frameworks representing cryptographic protocols security requirements rising 
enable cryptographically correct analysis cryptographic protocols frameworks capture probabilistic behaviors complexity theoretically bounded adversaries reactive environment protocol continuous interaction users adversary protocol runs 
clearly frameworks rigorously defined avoid ambiguities enable convincing proofs 
highly desirable frameworks provide link formal methods tool supported verification cryptographic protocols 
tool support minimize flaws occur quite distributed systems aspects cryptographic protocols analyzed hand 
ingredient model contain machine model turing machines 
model pfitzmann waidner suitable requirements rigorous foundation 
model introduced notion security preserving refinement called reactive simulatability 
notion captures idea refinement preserves integrity properties confidentiality properties 
intuitively stated follows applied relation real ideal system happen users real system presence arbitrary adversary terms implementation specification special cases cryptographic system 
naor ed theory cryptography conference tcc pages february 
springer verlag berlin heidelberg 
happen users ideal system attack capabilities usually restricted presence adversary particular comprises confidentiality notion happens users called view includes outputs system communication adversary 
includes adversary guess secrets users partial information 
desirable impose restrictions adversary ideal service constructed simulatability comes different flavors 
prominent ones general simulatability described impose restriction universal simulatability states independent actual users protocol seemingly restrictive notion black box simulatability states consists original adversary simulator may depend protocol 
key results considered model composition theorem 
states larger system designed specification subsystem implementation subsystem plugged entire implementation larger system secure design sense reactive simulatability 
theorem predecessor synchronous reactive model holds variants simulatability general universal blackbox restricted replacing system 
obviously constant number systems replaced applying theorem multiple times 
comprehensive composition theorem blackbox simulatability showing polynomial number security parameter arbitrary systems composed destroying simulatability relation 
proof relies called standard hybrid argument 
show universal simulatability implies black box simulatability reasonable assumptions 
independent interest particular allows prove theorem universal simulatability 
show results concrete security 
related literature 
simulatability sketched secure multi party function evaluation computation output tuple tuple secret inputs participant defined different degrees generality :10.1.1.21.4870
composition theorems special cases proven general composition theorem non reactive simulatability proven 
important step compositionality results reactive systems taken cryptographic security specific systems directly defined verified formal language calculus security expressed observational equivalence 
notion stronger reactive simulatability entire environment corresponding users adversary reactive simulatability able distinguish implementation specification 
correspondingly concrete specifications essentially comprise actual protocols including cryptographic details 
composition defined calculus defining processes holes processes allows composing constant number systems 
reactive simulatability definition proposed earlier sketches particular 
synchronous covers restricted class protocols programs restricted operators view constructive result simulatability defined information theoretic case done quantification input sequences active honest users 
composition theorem reactive simulatability general synchronous reactive model followed essentially composition theorem corresponding asynchronous model 
independently model asynchronous reactive systems composition theorem reactive simulatability developed 
theorem specific universal simulatability case general ones additionally allows securely composing polynomial number copies ideal service naturally correspond different protocol instances real implementation 
stress composition theorem captures secure composition polynomial number copies single ideal system polynomial number truly arbitrary systems 
inspired 
considering composition secure refinement property composition received interest literature considers question systems individually provide certain security properties properties run parallel systems 
safety liveness general theories kind compositionality exist sufficient reason functional system properties :10.1.1.33.1637
security properties safety liveness properties particular confidentiality 
compositional information flow properties investigated 
devoted identifying properties preserved composition restrictiveness forward separability 
certain security properties general preserved composition known restrict composition order preserve properties 
concentrated uniform basis reason property composition 
notions composition called preservation theorems exist state specific properties preserved reactive simulatability 
theorems exist integrity transitive non transitive non interference absence information flow class liveness properties 
outline 
section review model reactive systems asynchronous networks 
section contains composition theorem proof black box simulatability 
section show universal simulatability implies black box simulatability reasonable assumptions 
particular carry composition theorem universal simulatability 
asynchronous reactive systems section review model secure reactive systems asynchronous network 
definitions sketched important understanding results full detail 
details looked original 
general system model systems mainly consist interactive machines 
machines communicate ports local endpoints different potential channels messages strings alphabet 
inspired csp notation write output input ports 

respectively 
similar models channels defined implicitly naming convention separate graph port 
sends messages 
asynchronous timing message immediately delivered recipient stored special machine called buffer 
machine wants schedule th message buffer unique clock port sends see 
buffer outputs deletes th message 
port write denote port connects 
vice versa 
output ports port set port sequence denoted 
fig 

ports buffers 
specifications need spell black part 
primary machine model probabilistic state transition machines similar probabilistic automata lynch essentially 
machine switched receives input tuple input ports performs transition function 
yields new state output tuple deterministic case finite distribution pairs probabilistic case 
machine function bounding length considered inputs allows flexible time bounds independent environment 
definition 
machines machine tuple lm name finite sequence ports set states probabilistic state transition function length function lm sets initial final states 
input set im th element input tuple denotes input th port 
output set om empty word denotes output port 
probabilistically maps pair im pair om 
restrictions apply output distribution finite 


inputs ignored length bounds lm im denotes prefix notation lifted tuples 
demand lm 
text write 
set contrast sequence ports machine denoted ports similar sets machines 
collection machines set machines pairwise different machine names disjoint sets ports 
completion collection union machines buffers needed channel 
port collection called free connecting port collection 
ports connected users adversary 
free ports completion denoted free 
collection called closed completion free ports special master clock port clk 
closed collection represents runnable system probability space runs called traces executions defined 
machines switch sequentially exactly active machine time 
machine clock select message delivered scheduling buffer clock ports 
buffer contains message selected position delivers message receiving machine active machine 
tries schedule multiple messages taken schedules message exist master scheduler active 
formally runs defined follows 
definition 
runs views closed collection master scheduler runs probability spaces defined inductively algorithm tuple ini initial states 
algorithm maintains variables state machine treats port variable initialized clk 
maintains variable mcs current scheduler machine names initially mcs currently active non buffer machine variable resulting run initially empty list 
algorithm phases 
probabilistic choices occur phase 
switch current scheduler switch current machine mcs set mcs current state port values assign ports mcs 

termination final state run stops 
outputs case prevents repeated master clock inputs 

store outputs simple port 
mcs 
order switch buffer input 
assign ports 


clean scheduling clock port mcs value denote port assign 
clk mcs go phase 
deliver scheduled message switch buffer input set 
assign ports 

clk mcs mcs unique machine 
ports 
go phase 
machine may buffer switches add step run restrictions 
cut input respective length function replace lm 
secondly add step run happens reality 
gives random variable run ini tuple ini initial states similarly step prefixes run ini view subset machines run subsequence consisting steps machine switches 
gives random variable view ini tuple ini initial states similarly step prefixes view ini view 
singleton write view ini view ini 
security specific system model define specific collections security purposes 
start definition structures 
intuitively machines execute security protocol 
distinguished set service ports 
subset free ports intuitively certain service guaranteed remaining free ports meant adversary 
typical examples inputs service ports send message participant id message transmission system pay amount participant id payment system typical non service ports insecure network connections real system 
cryptographic purposes initial state machines structure security parameter unary representation 
definition 
structures service ports structure pair struc collection simple machines normal ports clock ports free 
set called service ports 
forbidden ports users structure clash port names machines link user non service port 
definition 
forbidden ports structure free call forb ports forbidden ports 
system set structures 
idea systems may different actual structures depending set malicious participants 
definition 
systems system sys set structures 
structure complemented configuration adding user machine adversary machine 
user restricted connecting service ports 
adversary closes collection connects remaining service ports free ports collection free ports user 
user adversary interact modeling active attacks 
definition 
configurations configuration structure tuple conf machine called user ports forb machine called adversary completion closed collection 
set configurations written conf 
notation conf lifted sets structures systems 
write conf conf component selection function similarly conf conf conf conf struc conf 
parametrized systems typical systems structures depend trust model security parameter parametrized system different 
system partitioned different subsystems different values normal systems naturally identified parametrized systems subsystems equal 
definition 
parametrized systems parametrized system system sys partitioning elements pairwise disjoint systems sys 
slight abuse notation call sequence partitions sys system called sys notation refers th element partition sequence 
bounding function parametrized system function runtime initial input bounded sense circuit complexity precisely circuit size 
parametrized system polynomial time polynomial bounding function 
circuit complexity non uniform complexity natural definition consider machine security parameter separate circuit 
meaningful uniform complexity definition requires universal machine simulates structures generation algorithm structures 
results reductions concrete security introduced general concept special notation usable wide range complexity measures 
reductions turing complexity defined full detail interacting machines 
define user adversary parametrized system 
definition 
user adversary parametrized system user adversary parametrized system sys families struc sys struc sys conf sys sys 
reason complexity users adversaries generally families machines define parametrized complexity 
definition 
parametrized complexity xk partitioned index set conventions systems ax family machines say complexity xk runtime ax initial input bounded sense circuit complexity 
write ta complexity defining security simulatability reactive simulatability essentially means happen honest user real system sys happen ideal system sys 
precisely configuration conf sys exists configuration conf sys user yielding indistinguishable views user 
typical situation illustrated 
th real configuration ideal configuration fig 

example simulatability 
view compared 
want compare structure sys arbitrary structures sys certain suitable ones 
suitable means concrete situation defined mapping sys sys mapping called valid maps structures service ports user connect 
definition 
valid mappings valid mapping systems sys sys function sys sys 
call corresponding structure 
systems parametrized require sys sys technical problem reactive simulatability correct user structure sys forbidden ports corresponding structure 
configurations happen called suitable restrict simulatability definition 
omit rigorous definition brevity 
valid mapping sys sys conf sys set suitable configurations 
definition indistinguishability families random variables common partitioned index set versions concrete security 
definition 
indistinguishability families varx var discrete probability distributions random variables common domains dx partitioned index set xk conventions systems 
called perfectly indistinguishable iff varx var called statistically indistinguishable function iff statistical distance stat varx var dx pr varx pr var xk 
algorithm dis called distinguisher varx var xk iff complexity dis pr dis varx pr dis var 
distributions called polynomially indistinguishable iff polynomials complexity parameter xk 
exists negligible function dis write indistinguishability perf poly respectively 
write want treat cases write perf 
need indistinguishability families random variables implies indistinguishability functions parts random variables 
lemma 
indistinguishability derived distributions var var families probability distributions partitioned index set common family domains family functions dx strings encoding domains strings explicit 
holds var var var var perf function 
distinguisher dis varx var gives rise distinguisher dis varx var denotes complexity bounds length random variables dx xk 
var poly var var poly var random variables polynomial length polynomial complexity 
clear perfect case easily shown computations statistical distances statistical case 
concrete complexity computational case distinguisher family dis original distributions defined dis xk length 
ready define reactive simulatability parametrized systems 
require exists extension fc valid structure mapping configuration mapping leaves user unchanged existence corresponding adversaries 
consider families user views view fc conf machines initial input security parameter configuration belongs 
families contains defined probability distribution configuration conf 
families distributions partitioned index set conf sys sys 
similarly obtain families view fc conf step prefixes user views 
definition 
reactive simulatability parametrized systems sys sys valid mapping 
reactive simulatability require exists function fc conf sys conf sys fc conf struc conf struc fc conf conf conf conf sys properties 
say fc mapping structure struc function complexity fc conf bounded conf conf struc 
entire fc mapping function conf conf sys fc conf 
say sys sec sys spoken secure conditions different cases abbreviate conf perf perfectly iff view fc conf perfectly indistinguishable conf conf sys 
statistically function iff conf conf sys view fc conf 
concrete security algorithm dis called distinguisher conf conf sys fc conf iff complexity dis conf dis conf pr dis pr dis view fc conf 
poly polynomially iff users adversary polynomial complexity views view sys view fc sys polynomially able fc mapping polynomial universal simulatability means fc conf conf depends 
write uni sec sec want emphasize case 
difference types security irrelevant write sec omit indices sec clear context 
essential ingredient composition theorem uses model notion combining machines lemma essential difference views 
combination defined canonical way considering combined state space letting transition function operate respective part 
omit details brevity 
combination set machines written comb write comb mj comb 
mj 
lemma 
machine combination collection buffers view set original machines comb includes view comb defined turing complexity comb sum complexities machines comb 
add notion blackbox simulatability definition 
combination fixed simulator sim machine identical port renaming 
definition 
blackbox simulatability notation definition blackbox simulatability means functions sys machines simulators structures sys port renaming functions conf conf sys fc conf comb sim sim 
computational security require sim polynomial time parametrized complexity sys polynomially bounded 
write bb sec sec want emphasize case respective superscripts 
composition composing systems typically want compose structure system structure certain matching ones 
instance individual machines sys implemented physical devices sys usual layered distributed system compose structures corresponding set corrupted physical devices 
conceivable situation 
define composition operator produces specific composition set possible compositions 
definition 
composability composition structures call structures 
mn sn composable ports mi forb mj sj si free mj sj free mi define composition 
mn sn 
mn 
sn free 
define composition systems potentially infinite supply systems finite number chosen composition security parameter definition 
parametrized composition systems sequence sys sys parametrized system function 
sized composition parametrized system sys structure sys unique representation 
mp composable structures mi si sys call mi si restriction sys write mi si sys 
systems sys joint bounding function bounding function sys particular polynomials sys polynomial time 
condition structure valid user 
second excludes cases free mi free mj clock port connection structures si sj 
general composition theorem blackbox simulatability section show reactive blackbox simulatability consistent composition parametrized number systems particular polynomially computational case 
basic idea assume proven potentially infinite supply systems sys secure systems sys sense black box simulatability 
want sys secure replacement sys implementation ideal system sys theorem shows modular proofs possible 
situation shown upper part 
additional conditions theorem corresponding structures composable polynomial case security system certain sense uniform 
theorem 
secure parametrized composition blackbox case sys sys sequences parametrized systems 
sequence valid mappings sys sys sys bb yi sec sys sys sys denote sized compositions respectively 
assume structural conditions hold structure sys restrictions mi si sys corresponding structures si mi si 
composition exists lies sys furthermore mi si sj composable ports ports mi sys bb sec sys perf yi perf yi function sum complexity systems user simulators 
concrete complexity conf conf sys distinguisher conf fc conf gives rise distinguisher conf fc conf conf conf sys polynomial independent 
details proof 
poly yi poly conditions function polynomially bounded systems sys joint bounding polynomial complexities simulator families induced mappings sim bounded joint polynomial qsim 
distinguishing probabilities system pairs sys sys uniformly bounded polynomials exists negligible function dis conf mi si conf sys th recall definition 
ta dis conf statement proved extracted lemma 
lemma 
conditions theorem mapping valid mapping sys sys proof straightforward heavy notation 
omit short version 
recall blackbox simulatability defined function selects fixed simulator structure definition 
definition 
simulator corresponding configurations conditions theorem sim simulator renaming functions composed blackbox simulatability 
compose functions sim sys follows sys simi sim mi si sim comb sim sim constructed sim equations definition blackbox simulatability 
complexity tsim simulator tsim lemma 
polynomial case exists polynomial qsim qsim tsim polynomially bounded qsim 
omit technical proof sys conf sys definition 
interesting proof parts verify compatibility channels difference service ports adversary ports compositions major part rigorous proof cryptographic aspects shorter standard 
concentrate proving simulator simulates correctly 
proof consists hybrid argument construct intermediate configurations differ machines system 
proof theorem 
configuration conf conf sys conf conf corresponding configuration defini tion 
sub structures mi si simulators simi functions various indices defined formulation theorem defini tion 
furthermore sim sim 
conf comb sim recall just port renaming simplifies outline hybrid argument follows 
fig 

configurations composition theorem blackbox simulatability 

define hybrid configurations conf hyb sys conf hyb sys 
conf hyb real structures replaced ideal counterparts conf hyb th structure replaced 
configurations correct configurations respective systems machines grouped hybrid user hyb shown bottom 
show correct corresponding configurations respect blackbox simulatability sys sys conf hyb equal 
show views equal conf conf hyb hyb conf conf gives kind indistinguishability chain configuration 
show views conf hyb view hyb conf view hyb conf 

show implies indistinguishability elements 
explain steps detail 
step machine collection th hybrid user hi mj hyb comb hi 
furthermore ai ai 
define hybrid configurations conf hyb mi si hyb ai conf hyb si hyb comb simi 
computational case show family hyb polynomial time 
holds hyb polynomially bounded assumption 
th tsim lemma addend step show conf hyb conf hyb conf sys essentially hybrid users non service ports 
short version omit proof 
definition conf hyb conf hyb immediately implies conf hyb hyb conf indistinguishable configurations blackbox simulatability sys sys step configurations conf hyb conf hyb consist collection machines hi simi 
combining different ways alter view lemma 
similarly view hyb conf view hyb conf view hyb conf view hyb conf 
step distinguish type simulatability relations sys bb yi sec sys perfect simulatability equation gives view hyb conf view hyb conf equations yields 
result arbitrary fixed configuration conf implies equality families views 
statistical simulatability sys statistically secure sys prefixes length ranging potential views length abbreviate pr pr qi pr view hyb conf pr hyb potential views qi equations 
desired statistical distance stat conf qp qp qi lemma gives stat conf stat view conf hyb view conf hyb 
stat view hyb conf li view hyb conf li li li sufficiently large numbers ensure step prefix view conf hyb subsequence li step prefix view hyb general bound complexity hyb bounded th tsim 
implies stat conf desired 
concrete complexity dis distinguisher dis definition dis pr dis view conf pr dis 
abbreviate pr dis view conf pr dis qi pr dis view hyb conf pr dis 
equations yield view hyb conf qi dis 
implies exists dis consider dis distinguisher dis function views actual user hyb th hybrid systems 
defined restriction view complexity linear 
lemma implies exists ti distinguisher dis view conf hyb hyb view hyb conf hyb bounds length views hyb complexity hyb hyb bounded th tsim showed tsim qsim 
length runs views current representation bounded square complexity improvable tighter encoding 
yields desired polynomial bound independent adversary complexity 
polynomial simulatability user adversary sys com plexity th ta polynomial dis distinguisher family complexity functions hyb ti tai ta polynomials 
assumption exists negligible function uniformly bounds advantage complexity max ti hyb ta system pairs 
configuration 
concrete security considerations conf equation imply dis conf hyb dis conf 
function negligible 
proves desired polynomial indistinguishability families user views conf sys conf sys 
black box universal simulatability show relation universal simulatability black box simulatability 
allows apply general composition theorem universal simulatability reasonable assumptions independent interest 
precisely show universal simulatability parametrized systems sys sys equivalent black box simulatability sys fulfills structural requirements clock port structure sys contained corresponding input output port 
means adversary allowed schedule messages connection sender recipient 
condition naturally fulfilled insecure channels adversary inserted connections machines system 
theorem 
relating black box universal simulatability sys sys parametrized systems valid mapping structure sys 

sys bb sec sys iff sys uni sec sys perf function poly sys polynomial time 
concrete security uni sec mapping fc obtain bb sec simulator complexity distinguisher views black box case gives rise distinguisher views universal case sum view length proof 
left right direction clear definition 
difficult direction show universal simulatability implies black box simulatability 
due lack space short sketch 
direction essentially consists steps 
configuration conf sub system sys 
derive configuration conf uni uni sys follows insert machine tsp called transparent scheduler connections simple ports 
forwards messages machines structure adversary 
parameters correspond ports transparent scheduler connects bound runtime joint runtime machines 
machine depends new user combination uni comb new adversary tsp show views identical configurations 

show conf uni conf sys apply precondition sys uni sec sys yields indistinguishable configuration conf uni sys new adversary 
definition universal simulatability depends tsp tsp depends adversary depends 
obtain original user simulator conf uni reversing combination uni defining simulator sim 
show affect view 
combining equalities views different configurations indistinguishability gives class indistinguishability 
summarized statements follow treatment configuration concrete security details omitted usual 
acknowledgments anupam datta dennis ralf sters john mitchell rn ller pavlovic rainer interesting discussions 

abadi lamport 
conjoining specifications 
acm transactions programming languages systems 

backes jacobi 
cryptographically sound machine assisted verification security protocols 
proc 
th annual symposium theoretical aspects computer science stacs volume lecture notes computer science pages 
springer 

backes pfitzmann 
computational probabilistic non interference 
proc 
th european symposium research computer security esorics volume lecture notes computer science pages 
springer 

backes pfitzmann 
intransitive non interference cryptographic purposes 
proc 
th ieee symposium security privacy pages 

backes pfitzmann steiner waidner 
polynomial fairness liveness 
proc 
th ieee computer security foundations workshop csfw pages 

beaver 
secure multiparty protocols zero knowledge proof systems tolerating faulty minority 
journal cryptology 

bellare killian rogaway 
security chaining 
advances cryptology crypto volume lecture notes computer science pages 
springer 

bellare rogaway 
optimal asymmetric encryption 
advances cryptology eurocrypt volume lecture notes computer science pages 
springer 

canetti 
security composition multiparty cryptographic protocols 
journal cryptology 

canetti 
universally composable security new paradigm cryptographic protocols 
proc 
nd ieee symposium foundations computer science focs pages 
extended version cryptology eprint archive report eprint 
iacr org 

datta derek mitchell pavlovic 
secure protocol composition extended 
proc 
st acm workshop formal methods security engineering pages 

goldreich 
foundations cryptography basic tools 
cambridge university press 

goldreich micali wigderson 
play mental game completeness theorem protocols honest majority 
proc 
th annual acm symposium theory computing stoc pages 

goldwasser levin 
fair computation general functions presence majority 
advances cryptology crypto volume lecture notes computer science pages 
springer 

goldwasser micali 
probabilistic encryption 
journal computer system sciences 

hirt maurer 
player simulation general adversary structures perfect multiparty computation 
journal cryptology 

hoare 
communicating sequential processes 
international series computer science prentice hall hemel 

johnson javier thayer 
security composition machines 
proc 
st ieee computer security foundations workshop csfw pages 

lincoln mitchell mitchell scedrov 
probabilistic poly time framework protocol analysis 
proc 
th acm conference computer communications security pages 

lincoln mitchell mitchell scedrov 
probabilistic polynomial time equivalence security analysis 
proc 
th symposium formal methods europe fme volume lecture notes computer science pages 
springer 

lynch 
distributed algorithms 
morgan kaufmann publishers san francisco 

mantel 
composition secure systems 
proc 
rd ieee symposium security privacy pages 

mccullough 
specifications multi level security hook property 
proc 
th ieee symposium security privacy pages 

mccullough 
theorem multilevel security 
ieee transactions software engineering 

mclean 
general theory composition trace sets closed selective interleaving functions 
proc 
th ieee symposium security privacy pages 

mclean 
general theory composition class possibilistic security properties 
ieee transactions software engineering 

micali rogaway 
secure computation 
advances cryptology crypto volume lecture notes computer science pages 
springer 

misra chandy 
proofs network processes 
ieee transactions software engineering 

pfitzmann waidner 
general framework formal notions secure systems 
research report university hildesheim apr 
www 
org lit abstr html 

pfitzmann waidner 
composition integrity preservation secure reactive systems 
proc 
th acm conference computer communications security pages 
extended version matthias ibm research report rz may www org publ ps gz 

pfitzmann waidner 
model asynchronous reactive systems application secure message transmission 
proc 
nd ieee symposium security privacy pages 
extended version cryptology eprint archive report eprint iacr org 

widom gries schneider 
trace network proof systems expressiveness completeness 
acm transactions programming languages systems 

yao 
protocols secure computations 
proc 
rd ieee symposium foundations computer science focs pages 

yao 
theory applications trapdoor functions 
proc 
rd ieee symposium foundations computer science focs pages 

