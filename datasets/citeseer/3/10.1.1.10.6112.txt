torx automated model testing cote de jan tretmans university nijmegen dept software technology faculty science box nl gl nijmegen tretmans cs kun nl ed brinksma university twente formal methods tools group faculty box nl ae enschede brinksma cs utwente nl systematic testing important assessing improving quality software systems 
testing turns expensive laborious time consuming error prone 
dutch research development project cote de worked methods techniques tools automating specification testing formal methods 
main achievement project test tool torx integrates automatic test generation test execution test analysis fly manner 
hand torx defined theory viz 
ioco test theory roots theory testing refusal equivalences transition systems 
hand applicability torx demonstrated testing academic industrial case studies 
summarizes main results project cote de keywords model testing specification testing formal methods test automation test generation 
software testing software quality issue currently attracts lot attention 
software society lives increasingly dependent 
complexity software growing 
consequently quality functional correctness reliability software issue increasing importance growing concern 
systematic testing software plays important role quest improved quality 
despite importance testing exposed phase software development process 
testing turned expensive di cult problematic 
source problems specifications usually imprecise incomplete ambiguous basis testing lacking 
source testing manual laborious process ective automation error prone consumes resources 
testing phase gets moving code delivery dates fixed custom delivery dates 
research development testing immature 
testing methodology ad hoc governed heuristics 
fortunately situation gradually improving 
triggered quest improved quality imposed increased product liability testing considered increasingly important treated seriously 
research software testing growing testing phase seriously planned managed software tester starting true profession 
cote de research development project cote de conformance testing reactive systems aimed improving testing process formal methods 
cote de supported dutch technology foundation stw context progress programme 
project cooperation philips research laboratories eindhoven lucent technologies centre twente eindhoven university technology university twente close relationships existed cmg 
man year project started ended 
model testing cote de worked improving software testing process enabling automatic testing software systems formal models systems 
doing cote de concentrated specification functional testing reactive systems 
reactive systems technical event driven software systems stimulus response behaviour important 
examples embedded systems communication protocols process control software 
administrative systems typically reactive systems 
testing involves checking correctness reactive system performing experiments systematic controlled way 
functional testing involves checking system behaves correctly system opposed testing performance robustness reliability user 
specification refers existence specification exactly prescribes system shall 
specification starting point testing 
system test referred sut considered black box internal details known 
formal model testing specification model formal language 
formal specification starting point testing sut 
automated testing di erent phases distinguished testing process 
test generation test suite developed starting specification sut 
test suite usually expressed way 
step rewrite implement test suite executed 
referred test implementation 
test execution implemented test suite executed sut 
test results analysed compared expected results test result analysis 
traditionally test automation refers automation test execution test analysis 
test devised humans written usually low level test tool specific scripting language automatic execution start 
cote de aimed automation testing process starting test generation including test result analysis 
opens way completely automatic testing system test formal specification required prerequisites 
overview outlines main results cote de project including pointers reading 
main result project test tool torx hand defined sound theoretical basis hand high practical applicability 
theoretical basis outlined section 
torx described section 
applicability evaluated performing di erent case studies supplied companies philips lucent cmg 
discussed section 
section gives main open issues hints research 
theory formal methods currently system specifications written natural languages english dutch 
informal specifications easily accessible incomplete liable di erent possibly inconsistent interpretations 
ambiguities basis testing clear system shall di cult test 
formal methods systems specified modelled applying techniques mathematics logic 
formal specifications models precise unambiguous semantics enables analysis systems reasoning mathematical precision rigour 
formal languages easily amenable automatic processing means tools 
example verification tools exist able verify fully automatically absence deadlock formal description design 
formal methods merely academic topic industrial software development increasing particular telecommunication software safety critical systems 
example project formal methods successfully control system storm surge barrier nieuwe near rotterdam 
cote de labelled transition systems underlying formal basis 
labelled transition system consists states representing states system labelled transitions states 
labels transitions represent observable actions system inputs outputs 
formal specification languages semantically expressed terms transition systems 
lotos promela sdl fsp 
testing formal methods formal specification precise consistent unambiguous basis software design code development testing 
define implementations correct respect transition system specification implementation relation satisfaction relation defined 
way determined implementations pass generated test suite implementations fail 
torx ioco test theory define correctness 
implementation relation ioco roots theory testing equivalences preorders transition systems 
formally definition ioco ioco def informally means implementation seen transition system ioco correct respect specification transition system possible behaviours specification output action produced implementation occur output specification 
particular hold special action quiescence models absence outputs 
formal notion correctness starting point test generation algorithm derives test suite transition system specification test ioco correctness 
test suite generated algorithm important provable properties soundness test fails implementation implementation ioco correct exhaustiveness implementation ioco correct test test suite fails 
formal methods provide rigorous sound basis algorithmic automatic generation tests 
having precise unambiguous specification clear notion correct implementation big advantage contrast traditional testing processes formal test basis usually lacking 
test selection disadvantage ioco test derivation algorithm realistic system exhaustive test suite contain infinitely test cases test suite executed 
finite selection infinite exhaustive test suite necessary 
making selection exhaustiveness lost soundness preserved 
test selection di cult task 
simple solution random selection experiments show quite satisfactory better adopt selection strategy apply selection criteria 
selection strategy aim detecting erroneous implementations possible restricted period time maximize chance detecting error minimizing cost executing test suite 
part cote de theoretical research devoted test selection 
approaches pursued referred test purposes approach heuristics approach 
important note test selection additional information test derivation process necessary 
formal specification prescribes behaviour allowed 
give information behaviour important behaviours contain errors 
information important test selection formal specification come 
test purposes test purposes approach user person performing tests supplies information behaviours important contain errors 
user specifying test purposes behaviours wants observe test sure correctly implemented 
approach referred user guided test selection 
test purposes approach formally elaborated 
framework developed test purposes formalized observation objectives hit missed executing test 
observation objective orthogonal correctness specific specific trace general behaviours inputs supplied sut quiescent 
approach worked ioco test derivation algorithm observation objective gives extra information guide test derivation direction test case hit observation objective 
new algorithm proved exhaustive sound details see 
heuristics alternative approach test selection provide extra information test selection form predefined strategies heuristics 
heuristics assumptions behaviour system test 
heuristic principles elaborated referred length heuristic testing finite prefix infinite trace assumed su cient cycling heuristic testing finite number iterations cycle assumed su cient reduction heuristic state infinitely outgoing transitions shape testing finite number su cient 
heuristics formalized defining distance function behaviour traces 
maximum distance traces test suite suite leads definition test suite coverage details see 
tool torx tool formal testing main achievements cote de prototype test tool torx 
torx provides automatic test generation test implementation test execution analysis fly manner 
torx implements ioco test derivation algorithm derive tests formal transition system specifications 
includes test selection means test purposes see section 
specifications expressed formal languages lotos promela fsp directly transition system aldebaran format 
languages mainly case studies see section useful educational purposes 
torx automatic test generation test execution done separate phases integrated complete test suite generated subsequently executed 
test execution tests derived fly lazily cf 
lazy evaluation functional programming languages 
test step torx computes test primitives formal specification needed step stimuli observations expected 
performs test step decides stimulating observing chooses stimulus sends implementation acquires observation implementation checks expected reports error 
sending stimulus checking observation finding error computes test primitives test step performs test step ioco primer explorer sut adapter driver fly test generation execution 
repeated derivation execution test steps done fully automatically user intervention described useful case studies semiautomatically control user useful demonstrations studying particular scenarios detail 
fully automatic derivation execution user provide maximum number test steps performed 
user controlled derivation execution test primitives computed user decide stimulating observing stimulating choose particular stimulus sent implementation 
test run collected log containing test steps executed form appear specification concrete form bits bytes communicated sut 
test log visualized fly message sequence chart 
recorded test log re executed 
architecture torx main characteristics torx flexibility openness 
flexibility obtained requiring modular architecture defined interfaces components allows easy replacement component improved modified version supports specification language test generation algorithm 
openness achieved standard interfaces link components tool environment enables integration third party components implement interfaces 
torx architecture consists basic components mandatory torx see explorer primer driver adapter 
components optional plugged particular feature needed combinator partitioner 
defined interfaces allow plugging 
depicts components linked fly test derivation execution 
sut system test 
role played simulated specification 
explorer specification language specific component ers functions primer explore state transition graph specification 
torx contains explorers lotos aldebaran development package promela spin fsp analyser automata aldebaran specification language open interface exists 
primer uses functions explorer implement test derivation algorithm generates test primitives state transition graph 
driver central component tool architecture 
controls testing process deciding stimulate sut observation check 
driver run modes see manual mode user full control automatic mode driver necessary choices randomly guided probabilities see 
adapter test application specific component provides connection sut 
responsible sending inputs receiving outputs sut request driver encoding decoding actions driver concrete bits bytes sut vice versa 
includes mapping time outs quiescence actions 
clearly adapter dependent specification version language sut 
optional combinator combine test primitives multiple sources combinators cascaded 
particular combine test primitives specification derived test purpose 
test purposes guide test stra obser vation state spec guide test pur pose fly test generation execution test purposes campaigns variable instantiation probabilistic choices 
represented languages specification explorers 
alternatively expressed processed special test purpose language 
optional partitioner steer fly derivation process 
normally want stimulate sut choose randomly equal distribution set possible inputs 
partitioner guide selection dividing possible input test primitives partitions weights probabilities assigned 
weights taken account input chosen 
cascaded partition input actions multiple criteria 
optional steer fly derivation process 
normally choose randomly equal distribution stimulating observing 
guide choice attaching weights probabilities stimulating observing 
weights taken account choice stimulating observing 
partitioner implement ideas 
optional instantiate free variables test primitives stimuli computed primer 
necessary adapter able encode stimuli contain free variables 
interfaces torx support openness torx architecture connect components pipes textual commands responses exchanged textual interfaces simple debug test individual components experiment unix style filters massage information exchanged split tool machines 
textual interfaces torx components form remote procedure call component issues request component component replies 
torx architecture components connected pairwise torx configuration forms tree components driver root 
pair component closest root tree parent take initiative issue requests component child reply order may issue request child ren responses compute response parent 
addition textual interfaces existing standard interfaces supported open interface gci interface 
test campaigns case studies turned desirable di erent test runs executed user interaction 
possible test campaigns developed 
test campaigns possible specify schedule manage test runs di erent torx configurations di erent parameters di erent input distributions di erent specifications implementations 
results test runs systematically archived 
implementation test campaigns consists layer top torx 
applications conference protocol case study cote de conference protocol 
simple realistic chatbox protocol runs top internet protocol udp 
conference protocol entities cpe tested torx specifications formal languages promela lotos 
implementations set di erent cpe implemented assumed correct erroneous mutants obtained introducing single errors correct modified ioco correct implementations 
aims conference protocol case study evaluate torx test tool prototype assess error detection power mutation analysis cpe implementations ii compare torx specification test tools iii benchmark versions torx experiment new functionality torx 
test method testing cpe black box conformance testing distributed test method tester torx played roles local cpe user remote conference partners 
tester access cpe test points control observation 
role local cpe user tester direct access upper service access point cpe role remote conference partners access underlying udp layer 
remote users really remote tests executed single computer testing tool cpe test running 
set cpe implementations torx able successfully detect erroneous ones 
test events needed detect errors random test selection 
correct implementations long test runs consisting test events generated executed completely automatically detecting error 
apart evaluating torx conference protocol bench marking experiment compare torx specification test generation tools 
firstly sdl specification conference protocol developed test cases generated sdl test tool tau 
test case executed cpe able detect erroneous mutants 
secondly fsm test generation tool conformance kit extended finite state machine specification developed test cases derived 
erroneous implementations passed test suite 
confirmed hypothesis fsm software testing inferior transition system testing 
thirdly test tool tgv lotos specification 
tgv ioco theory torx able detect erroneous implementations 
experimental comparisons theoretical comparison di erent test generation methods analogous results 
conference protocol small realistic turned suitable case study torx 
provided valuable feedback improving torx useful bench marking doing experiments new extensions demonstration purposes courses 
allow conference protocol bench mark testing tools web site constructed containing documentation formal specifications implementations 
cote de performed case study evaluate applicability formal testing techniques 
study consisted testing part payment box part advocated highway system dutch 
system automatically charges fees vehicle drivers pass toll gate highway 
fee paid electronically means exchanging digital certificates payment box toll gate electronic purse smart card passing vehicle 
vehicle passes toll gate system debit purse register balance increment payment box 
vehicles pass toll gate simultaneously vehicles travel high di erent speeds number parallel transactions progress large 
furthermore security reasons messages exchanged electronic payment transaction encrypted 
issues speed parallelism encryption contribute complexity testing 
object testing payment box side protocol payment box smart card 
payment box tested traditional way 
tests manually developed automatically executed dedicated test execution environment 
necessary meet speed encryption requirements 
starting developed generic step wise approach activities formal testing embedded 
subsequently case study carried approach 
studied iut implementation test wrote formal specifications lotos promela starting informal documents 
writing validating formal specification model checking spin detected important design error 
continuing error repaired 
second step studied test tools respect ability test iut means interface sut 
reused part existing test environment traditional testing 
third results second step combined basis development test environment containing test tools iut 
time spent phase 
turned able interact directly payment box due encryption involved electronic transactions 
furthermore deal real time requirements testing 
led significant ort implementing application specific tool component adapter see section extension iut specification contain test context 
fourth step test runs length test events automatically generated executed 
runs specified scheduled test campaigns see section 
test execution error detected study 
main result respect payment box defects 
important design error detected testing formal specification subsequent validation 
respect torx cote de methodology insu cient support theory tools testing applications real time behaviour 
particular di erence quiescence see section time confusing understood 
performance torx test derivation needs improved torx able calculate test primitives payment box gave time 
promela specification performed better respect lotos 
hypothesis torx easily deal parallelism confirmed 
having cars parallel conceptually problem gave problems respect performance see 
implementing test execution environment laborious process harder manual testing 
generic approaches implementation test environments adapters needed 
detecting error thing analysing repairing tool support test result analysis needed 
torx easily distributed multiple platforms payment box running vxworks adapter windows nt rest torx linux 
concept test campaigns mainly developed case study 
proved valuable 
altogether conclude cote de approach mature cope applications payment box mainly due timing real time performance requirements 
automated test approach turned flexible reliable fast large numbers long tests easily derived executed 
certainly formal specification validation type protocols payment box 
research point view case study successful step ahead formal testing realistic systems 
new ideas research items identified torx improved extended 
protocol philips protocol concerns communication video recorder television set 
tv side preset download feature protocol tested torx promela model 
functions initiating preset download stopping downloading middle shu ing tv remote control downloading tested see details test ort 
test environment messages vcr tv caught specialized probe allowed insert messages 
probe communicated pc communicated hp workstation main parts torx running 
results study promising non fatal faults detected slipped conventional testing procedures 
concluded automatic specification testing kind product feasible beneficial 
cmg tested cell broadcast centre 
lotos specification pp existing test environment adapter generated idl description component interfaces tests performed 
tests torx reveal errors detected conventional testing torx reached slightly higher code coverage 
lucent centre twente torx test implementation access network protocol lucent implementation etsi standard pstn access network protocol 
clear specification available serve basis formal model code re engineered 
testing torx feasible discover faults model derived code 
case studies cmg investigated torx testing control software studied combination torx method 
design torx inspired philips development new hardware design tester 
taken main outcomes case studies formal models serve precise arbiter testing valid tests generated tests test tested 
long tests depending case study test events automatically generated executed 
case studies faults detected slipped conventional testing procedures 
strong points torx easily cope high degree parallelism detect errors occur long sequences events 
cases comparison traditional test methods torx performed traditional testing 
building test environment executing generated tests laborious di er traditional test execution automation 
traditional test environments reused formal testing 
case studies making models relatively easy compared building test environment 
important errors usually testing development formal model testing model analysed model checking 
concluding remarks goal cote de develop theory tools applications automatic specification testing formal methods 
large extent goal achieved 
ioco test theory provides defined rigorous basis formal testing proved test derivation algorithms 
prototype test tool torx completely automatically derive tests formal specifications execute analyse results 
successful application torx di erent case studies showed feasibility methodology improvements testing process gained terms longer provably correct tests 
altogether results lead believe advantageous perform automatic testing formal model system test 
extra ort required developing necessary formal model compensated faster cheaper ective flexible testing 
formal methods improve testing process formal testing improve software development 
important benefit testing formalization validation process preceding formal testing process 
important errors design errors detected 
direction formal testing stimulate formal methods exploiting perceived benefits testing 
torx prototype case studies clearly shown cope kinds testing circumstances 
number important open testing problems 
mention important improvements test selection important research questions completeness coverage automatically generated test suite expressed measured computed ultimately controlled 
intriguing question test suite coverage related measure product quality 
product quality actual reason perform testing 
testing real time requirements important issue particular embedded systems 
theory torx currently deal 
large data domains lead state explosion 
symbolic ways representing manipulating data required 
systematic test data selection currently done needed 
action specification implemented sequence actions implementation 
called action refinement 
theoretical tool support needed 
case studies shown performance torx improved particular respect fly calculation test primitives 
implementing test environment particular adapter laborious 
support needed case studies showed feasible generating adapter interface description idl 
alternatives may asn xml 
support test log analysis improved particular localization error implementation currently supported 
cases concluded formal languages currently satisfactory 
language combines specification behaviour data formal semantics user friendly su cient tool support including seamless integration testing verification tools desirable 
torx tests functional properties 
extension non functional quality characteristics robustness performance usability reliability considered 
torx developed reactive systems 
possible extensions may consider kind software systems administrative systems 
torx continued cote de successor projects action refinement investigated research project real time data extensions torx studied project stress testing functions relations input output investigated application torx testing wafer scanners including necessary hybrid real time data extensions investigated 
availability torx freely available research purposes 
people contributed success cote de 
lex ron philips research laboratories eindhoven de lucent technologies centre twente erik henri dol kpn research loe eindhoven university technology axel jan rene de vries university twente peter christian robert cmg active participation project 
cmg particular van support gave performing case studies 
financial support stw nwo van gogh programme acknowledged 
atom splitting embedded systems testing 
fmt cs utwente nl projects html 

timed testing torx storm surge barrier 
editor handout rotterdam netherlands november 
cmg 
de vries 
specification formal testing case study 
progress nd workshop embedded systems pages utrecht netherlands october 
stw technology foundation 
de vries tretmans 
formal test automation simple experiment 
editors int 
workshop testing communicating systems pages 
kluwer academic publishers 
brady barker 
infrastructural tools information technology telecommunications conformance testing gci generic compiler interpreter interface gci interface specification version 
document number gci npl 
brinksma tretmans 
testing transition systems annotated bibliography 
ryan editors modeling verification parallel processes th summer school volume lecture notes computer science pages 
springer verlag 
ccitt 
specification description language sdl 
recommendation 
itu general secretariat switzerland 
christian 
specification testing idl formal methods case study test automation 
master thesis university twente enschede netherlands 
de nicola hennessy 
testing equivalences processes 
theoretical computer science 
du bousquet de vries 
formal test automation conference protocol tgv torx 
ural von editors testing communicating systems pages 
kluwer academic publishers 

probabilities torx test derivation algorithm 
graf editors sam nd workshop sdl msc pages 
verimag irisa sdl forum society june 
tretmans 
test selection trace distance heuristics 
konig wolisz editors testing communicating systems xiv pages 
kluwer academic publishers 

fernandez 
cadp aldebaran development package protocol validation verification toolbox 
alur henzinger editors computer aided verification cav 
lecture notes computer science springer verlag 

open open software architecture verification simulation testing 
ste en editor fourth int 
workshop tools algorithms construction analysis systems tacas pages 
lecture notes computer science springer verlag 

comparing torx tgv uio test algorithms 
reed reed editors sdl meeting uml volume lecture notes computer science pages 
springer verlag 
de 
automated testing pstn case study applicability automated model testing 
internal report lucent technologies centre twente enschede netherlands 
tretmans 
formal test automation conference protocol 
ural von editors testing communicating systems pages 
kluwer academic publishers 
holzmann 
design validation computer protocols 
prentice hall 
iso 
information processing systems open systems interconnection lotos formal description technique temporal ordering observational behaviour 
international standard 
iso 
koopman tretmans plasmeijer 
gast generic automated software testing 
pena editor ifl implementation functional programming languages volume lecture notes computer science pages 
springerverlag 
magee kramer 
concurrency models java programs 
wiley 
project consortium cote de 
conference protocol case study 
fmt cs utwente nl 

combining torx theory meets practice 
editor handout rotterdam netherlands november 
cmg 
stress systematic testing real time embedded software systems 
fmt cs utwente nl projects stress html 
model testing 
www nl 
torx test tool information 
fmt cs utwente nl tools torx 
tretmans 
test generation inputs outputs repetitive quiescence 
software concepts tools 
technical report centre telematics information technology university twente netherlands 
tretmans 
testing concurrent systems formal approach 
baeten editors concur th int 
conference concurrency theory volume lecture notes computer science pages 
springer verlag 
tretmans 
software engineering formal methods development storm surge barrier control system revisiting myths formal methods 
formal methods system design 
de vries 
automated testing practice highway system 
konig wolisz editors testing communicating systems xiv pages 
kluwer academic publishers 
de vries tretmans 
fly conformance testing spin 
software tools technology transfer 
de vries tretmans 
formal test purposes 
brinksma tretmans editors formal approaches testing software fates number ns brics notes series pages university aarhus denmark 
brics 
