nominal theory objects dependent types martin odersky vincent christine matthias zenger ecole polytechnique ed erale de lausanne inr lausanne switzerland proc 
ecoop springer verlag 
design study obj calculus dependent type system objects classes types members 
type members aliases types new types 
type system model essential concepts java inner classes virtual types family polymorphism beta gbeta 
model concepts sml style module systems including sharing constraints higher order functors excluding applicative functors 
type system basis unifying concepts far existed parallel advanced object systems module systems 
presents results con uence calculus soundness type system undecidability type checking 
development object module systems largely complementary 
module systems style sml caml excel abstraction allow precise control visibility names types including ability partially types 
object oriented languages excel composition er composition mechanisms lacking module systems including inheritance unlimited recursion objects classes 
hand object oriented languages usually express abstraction coarse grained way modi ers private protected limit accessibility name predetermined part system 
usually analogue signatures types module systems hide information binding outside unit de ning 
see convergence worlds 
module systems acquired form inheritance mixin modules rst class modules play role similar objects recursive modules investigated 
object side nested classes virtual types model essential properties signatures types ml module systems 
principle new development 
class nesting introduced simula virtual types beta gbeta rune scala 
essential ingredient systems objects type members 
currently explores uses concept object oriented programming 
type theoretic foundations just investigated 
case modules dependent types promising candidate foundation objects type members 
dependent products represent functors sml module systems classes object systems virtual types :10.1.1.39.7567
details ml module systems build long tradition corresponding foundations object systems virtual types far developed 
possible approach extend formalizations ml module systems object systems technical complexity dicult task 
alternative apply intuitions dependent types smaller calculus objects classes aim arriving combined foundation objects classes modules 
want achieve 
main contribution formal study type theory objects dependent types 
theory developed type theoretic foundation languages beta gbeta scala concepts far informal way 
characteristic calculus type system nominal 
comes play respects 
objects unique names reduction system 
name object passed copy object 
name passing strategy objects necessary regime dependent types object identity type label type shown refer object 
objects copied type equalities maintained reduction 
second introduce nominal binding types de nes name new type unfolds type de nitions de ne di erent types unfold type 
corresponds closely notion interfaces language java 
interface de nes new type structure completely known 
possible de ne values interface type giving implementations members interface 
type system represent members interface record type relationship interface name unfolding equality represent new type type create new values implementations type 
need third type binding standard alternative nominal new type bindings branding 
de ne type equality subtyping structurally introduce binder create new type names 
branding means creating new type combining structurally de ned type freshly created type name 
advantage branding approach orthogonal traditional structural type systems objects modules 
disadvantage corresponds de nitions implementations existing object oriented languages exception modula 
technical reason abandoning structural types brands approach recursion system dependent types type recursion involve terms means recursive types necessarily regular trees 
instance quali ed identi er object term member type member type depend type resulting tree regular 
little hope practical semi algorithms checking equality subtyping non regular trees 
sidestep problems follow strategy existing programming languages restrict non recursive type aliases introduce new kind type de nition de ned type subtype right hand side 
note similar problems type checking caused parameterized algebraic types recursive type constructor lead non regular trees 
common approach deal types nominal 
summary design study obj core calculus type system objects classes type members 
type members aliases types new types 
classes rst class composed mixin composition 
type system supports encodings concepts sml style module systems including sharing constraints higher order functors excluding applicative functors 
system full subtyping rule :10.1.1.35.8290
virtual types family polymorphism 
constructs mapped small language core possible express uni ed concepts 
particular theory promotes identi cations 
object module object type signature class method functor identi cations beta gbeta classes methods subsumed notion patterns 
language scala follows approach maintains distinction methods classes syntactical level 
generally intuitions inspired beta erik ernst mads torgerson build 
contribution de nition study ideas formal calculus type system 
main technical results con uence reduction relation 
undecidability type checking reduction problem type soundness typed program diverge reduces answer type 
related extends previous workshop contribution :10.1.1.11.2888
nominal type systems formalized java context examples :10.1.1.109.1141:10.1.1.23.8118:10.1.1.23.8118
di erence approaches rely global class graph describes membership inheritance 
di erence systems completely nominal sense types described name exceptions array types generic types fgj 
contrast classes local obj nominal types just construction structural type system 
attempts formalizations virtual types object oriented programming aware 
rst sketches nominal type system virtual types 
argues informally certain restrictions imposed usage virtual types fact equivalent types terminology type soundness ensured 
igarashi pierce proposed foundation virtual types type system adds dependent types core :10.1.1.39.7567
formal study type system properties attempted fact initial formalization lacked subject reduction property formalization dropped journal version :10.1.1.39.7567:10.1.1.39.7567
rest structured follows 
section presents context free syntax operational semantics type assignment rules object calculus obj 
section illustrates series examples calculus expresses common object oriented idioms 
section presents type structure obj types including derivation rules formedness equality subtyping 
section presents encoding obj 
section presents meta theory obj results con uence soundness undecidability 
section concludes 
obj calculus core language objects classes 
compared standard theory objects major di erences 
classes objects primitive concept 
classes rst class sense result evaluation term may associated label 
second calculus notion object identity object referenced name name object record passed 
third express object types type components components nominal 
context free syntax presents obj calculus terms syntax structural equivalence reduction relations 
alphabets 
proper term names subject renaming term labels type labels xed 
syntax name term label term variable selection new object sj class template composition de nition term de nition type de nition path value sj type label type type singleton type selection fxj dg record type sj class type compound type declaration term declaration type declaration type binder type alias new type concrete type binder structural equivalence renaming bound variables plus eh ui fn bn fn reduction select sj li sj bn fn mix sj evaluation context hi sj fig 

obj calculus term denotes object class 
forms 
simple name denotes object 
selection denote object class 
object creation de nes fresh instance class scope object term class template sj sequence de nitions associate term labels values type labels types 
acts template construct objects members de ned de nitions 
name type stands self object constructed template 
scope de nition sequence term type refer member object 
textual sequence constraint applies particular possible binding refers bindings de ned record 
distinguishes type system earlier type systems records modules :10.1.1.105.9035
mixin composition forms combined class classes evaluate 
type self combined class 
value simple name class template 
path name followed possibly empty sequence selections syntax types system closely follows syntax terms 
type forms 
singleton type type 
type represents set values element object referenced path singleton types way type depend term obj 
type selection represents type component labelled type record type fxj dg sequence declarations value bindings type bindings 
value binding associates term label type type bindings come di erent forms binding de nes alias second binding de nes new type expands type subtype exactly members de ned furthermore create objects type class de nes members third binding de nes type known subtype bound meta variable range range stands self type assumed record type 
letter range record types 
compound type type contains members types subtyping relation compound types intersection types formation rules restrictive 
member label compound type contains member de ned member de nition speci see section corresponding member de nition class type sj contains values classes instantiate objects type fxj dg subtype 
name self 
comes explicit type may di erent fxj dg 
de nitions missing play role members 
members referred de nitions class de ned class 
members de ned classes composed class mixin composition 
de nitions missing play sense role non virtual members referred self inside class overriding change existing behavior 
de nitions play role virtual members 
discussion notably missing core language functions including polymorphic ones parameterized types 
fact type variables missing completely identi ers denote bound terms 
omitted constructs expressed obj context free encodings 
shown 
section explains named monomorphic functions encoded 
section generalizes encoding system type syntax de nes singleton type type selection operates types conventional type selection operates terms types 
selection operation expressed syntax type having technical advantages decomposition express concepts conventional type selection 
self type class expressed singleton type type 
accurately model covariant self types 
contravariant self types need matching operation addition subtyping relation introduce 
second inner class kind exists java referenced type selection outer inner outer inner types 
selection risks non sensical presence type members outer class outer 
consequently typing rules prevent formation type de nition depends member note problem java type declarations 
syntactic sugar 
type shorthand type 
class type xj shorthand fxj 

class template xj shorthand fxj speci set declarations matching de nitions 
types fdg term shorthands fxj dg xj xj appear 
new shorthand 
shorthand fxj type 
shorthand implements overriding behavior mixin composition concrete de nition overrides de nition label 
furthermore de nitions concrete de nitions label second overrides rst 
scheme corresponds closely rules zenger component calculus useful straight second overrides rst rule systems mixins seen functions classes :10.1.1.23.8118
operational semantics speci es structural equivalence small step reduction relation calculus 
relations notion evaluation context determines term reduction may take place 
grammar evaluation contexts yield deterministic reduction relation leaves choice strict lazy evaluation strategy hybrid 
particular evaluation strategies obtained tightening grammar evaluation contexts 
notation write sequence entities implicitly identify permutations sequence take empty sequence unit 
domain dom dom sequence de nitions declarations set labels de nes 
restriction dj de nitions declarations set labels consists bindings de ne labels operator de nitions declarations denotes concatenation overwriting common labels 
aj dom name occurrence bound type term de nition declaration evaluation context enclosing object creation class template sj class type sj record type fxj dg occurrence scope name free names fn syntactic classes enumerated set names unbound occurrences bound names bn evaluation context names bound subterm scope contains hole hi context 
structural equivalence usual identify terms related renaming 
postulate scope extrusion rule allows lift binding evaluation context provided cause capture free variable names 
formally renaming equivalence smallest congruence types terms satisfying laws fn sj sj fn sj sj fn fxj dg dg fn structural equivalence smallest congruence containing satisfying law 
var sel type type type sub sj fxj dg fn new class wf wf contractive sj sj wf fig 

type assignment reduction reduction relation smallest relation contains rules closed structural equivalence formation evaluation contexts 

rst reduction rule select connects de nition object selection object 
rule requires external object internal self name arranged renaming 
second rule mix constructs class operand classes mixin composition combining de nitions classes operator 
multi step reduction 
smallest transitive relation includes 
type assignment presents rules assigning types terms 
expressed deduction rules type judgments type environment set bindings bound names assumed pairwise di erent 
usual tautology subsumption rules 
rule sel assigns selection type provided type member rules assign singleton types type terms denote unique objects 
rule new types expression term needs class type self type expands record type contains exactly declarations means declarations de ned type 
particular classes members instantiated 
body typed augmented environment contains binding type allowed refer rule class types class templates 
term de nitions template typed new environment includes binding class 
required terms contractive self 
means access self instantiation object class 
de ned formally follows 
de nition 
term contractive name holds 
fn class template sj mixin composition contractive object creation fn contractive requirement prevents accesses elds object elds de ned 
conventional object oriented languages correspond requirement self accessed methods initializers object elds 
liberal schemes possible require additional technical overhead type assignment rules 
envisage allow accesses self restrictions elds default value raising run time exception access de nition 
rule types compositions class terms 
self type composition required subtype self types components 
de nitions composed class obtained concatenating de nitions components 
deduction rules forms judgments types speci cally formedness judgment wf membership judgment expansion judgment subtyping judgment deduction rules judgments motivated section full accompanying technical report :10.1.1.11.2888
usual assume terms alpha renamed type assignments order prevent failed type derivations due duplicate variables environments 
type assignment judgment extended judgment relating de nitions declarations follows 
de nition 
declaration matches de nition environment written holds see section de nition declarations 
examples presenting remaining details theory demonstrate usage means examples 
obj calculus quite di erent standard object oriented notations rst example conventional object oriented language scala 
scala object model generalization object model java 
extensions important purposes types type aliases mixin composition classes 
subset scala maps easily obj restrict example code subset 
constructs higher order functions generics pattern matching de ned translation subset ultimately object calculus 
modules classes objects start class representing points dimensional space 
class point de ned member singleton object pt 
scala top level singleton objects play role modules 
addition coordinate class point de nes method eq comparing point point 
object pt class point def int def eq point boolean subset scala classes explicit constructor parameters 
parameters represented class members 
creating object subclass point provide concrete implementations members 
code twice mixin composition class point anonymous class de nes missing coordinate val new pt point def val new pt point def eq devise translation previous scala code calculus 
addition syntax de ned abstractions applications 
section explain encode constructs obj 
pt pt point fx int eq pt point point pt point eq pt point pt point pt point pt point pt point eq class represented entities object type type instances class class value construct objects 
name class name type name starting lower case letter name class value 
type includes signatures class members class value provides implementations non members 
general members self type class sj missing class de nitions non members functions encoding abstractions applications technique similar passing parameters class instantiations 
abstraction represented class member arg function argument concrete member fun refers expression computing function result farg tg fun res corresponds term occurrences get replaced arg 
explained section access arg directly righthand side fun 
fun packs body function class 
instantiation class trigger execution function body 
instance function pt point encoded class farg pt fun res arg type farg pt fun res boolean contains member arg concrete member fun 
obj application gets decomposed subsequent steps app arg eval app fun eval res instantiate function concrete argument yielding thunk app evaluate thunk creating instance eval 
extract result querying eld res eval instance call function eq previous code encoded app eq arg eval app fun eval res 
types suppose extend point class de ning new class colorpoint includes color information 
extended classes de ne subtypes scala override method eq contravariantly parameter eq type colorpoint 
exactly allow compare 
refactor code parameter type explicitly anticipation extensions 
code fragment de nes type class point bound point gets covariantly re ned subclasses colorpoint 
object pt class point type point def int def eq boolean object cpt class colorpoint extends pt point type colorpoint def col string override def eq boolean col col classes de ne point colorpoint instances 
val new pt point ftype pt point def val new cpt colorpoint ftype cpt colorpoint def def col blue val new cpt colorpoint ftype cpt colorpoint def def col green type system ensure able compare compatible objects able execute eq eq eq eq terms eq ill typed rejected typechecker 
encoding previous classes object calculus term 
pt pt point pt point int eq point pt point eq cpt cpt colorpoint pt point cpt colorpoint col colorpoint cpt colorpoint eq col col pt point pt point cpt colorpoint cpt colorpoint col blue eq example explain types shows calculus expressive model virtual types type safe way 
generic types evolved example shows obj encode generic classes 
code de nes module lst contains implementation generic lists consisting classes list nil cons 
object lst class list type scala object def isempty boolean def head def tail list ftype list class nil extends list def isempty true def head error def tail list ftype nil error class cons extends list def isempty false classes parameterized values types model element type list type class list 
similarly class parameters head tail cons cell represented functions 
note type tail value list object mixin composition list record type consists type binding ftype list tg 
forces element type list tail 
general mixin composition type bindings subsumes expressive power sharing constraints sml module systems 
class nil provides functions superclass list 
implementation head tail prede ned value error produces errors run time accessed 
error type 
formal treatment include bottom type adding straightforward 
class cons de nes function isempty 
functions constitute constructor parameters provided instantiation time 
example list abstraction applied 
code fragment constructs lists integers returns head second list 
mixin class composition emulate parameter passing 
val new lst nil ftype int val new lst cons ftype int def head def tail head java outer denotes identity enclosing outer object scope inner class outer 
translation previous scala code object calculus 
lst lst list fg isempty boolean head tail lst list ft nil lst list cons lst list nil lst nil isempty true head error tail error cons lst cons isempty false lst nil int lst cons int head tail head augment class list previous example function len computes length list 
scala done changing source code list class mixin object class extends lst list def tail type def len int isempty tail len class extends class list 
adds new len member narrows type existing tail member 
build lists len members add class mixin 
example usage val new lst nil type int def tail ftype int error val new lst cons type int def head def tail len translation program obj code fragment 
please note time encode function len directly class similar description 
time slightly simpler encoding function parameterized 
lst list tail ft tg len res int len res isempty tail len res lst nil int lst cons int head tail len res note type represented composition type list record type containing added overridden members 
turns type subtype type list 
type structure type structure obj de ned deduction rules kinds judgments wf type formed 
wf declaration formed 
type contains declaration types equal 
type expands type type upper bounded type type subtype type declarations speci declarations compared standard type systems non standard forms judgments membership judgment factors essence path dependent types 
second expansion judgment captures essential relation new type unfolding 
third judgment provides exact type information record type supertype type 
information needed correct treatment type bindings records 
essential typing rules judgments discussed 
notation write judgments predicates right turnstile abbreviation multiple judgments 
wf wf abbreviation judgments wf wf 
membership membership judgment states type member de nition judgment derived rules capture principles path dependent types 
single type fxj dg type type fn rule single de nes membership singleton types 
case de nition replaced path rule de nes membership arbitrary types terms single 
determine member type singleton invent fresh variable type determine corresponding member type type 
resulting member allowed depend note singleton type rule fails yields judgments rule single 
example consider type fx intg 
consider path term path type contains de nitions int 
hand contains de nitions int rule derive binding substituting self binding yield type formed 
equality type equality judgment states types aliases 
type equality smallest congruence closed derivation rules 
alias wf type type type single rule alias standard states type equal provided alias member de nition rule single expresses property path singleton type type know aliases singleton types type type equal 
rule type subtype type 
expansion type expansion judgment states type expands unfolds type expansion smallest transitive relation contains type equality closed derivation rules 
mixin fxj dom fxj fxj fxj rule expresses expansion type selections usual way 
rule mixin states combination record types expands record type containing concatenation de nitions label de ned de nition overrides de nition case de nition speci de nition upper bounds upper bound judgment states expansion tight upper bound 
primary relation determining type record type supertype information needed deriving membership judgment rule single 
upper binding smallest transitive relation contains expansion closed derivation rules 
type var sel type type rst rule de nes upper bounds types usual way 
rules take upper bound singleton type type type current environment 
note replaced rules simpler rule states type provided reason subsumption type assignments allow forget information path type 
guarantee simpler rule upper bounds tight 
subtyping subtyping judgment states subtype subtyping smallest transitive relation contains upper binding closed rules 
rec fxj fxj fxj class wf sj rules state behaves type intersection subtyping type subtype show type subtype needs show subtype remaining rules rec class determine subtyping record class types 
record types subtyping covariant declarations declarations subtype may dropped supertype 
class types subtyping contravariant self type covariant declarations premises restricted type checking reasons 
record types class type declares labels supertypes declared labels may forgotten 
ensures type labels composition fully determined 
instance fg abc label known bound string integer 
labels forgotten second operand composition widened subsumption empty class assign integer alternative typing derivation composite class term 
second contravariance self types limited smaller self type result larger self type composed record type 
hand allowed take nominal subtype restriction necessary ensure type assigned instances created class expression 
relation de ned declarations 
means declaration speci declaration predicate expressed derivation rules 
bind subtyping value declarations de ned usual 
type labels arbitrary type declaration speci type declaration provided types overridden concrete types long overriding type conforms type bound 
aliases new types hand overridden 
formedness formedness judgment form wf 
roughly type formed refers names labels de ned contain illegal cyclic dependencies 
requirements formalized rules 
remaining rules propagate requirements forms types full accompanying technical report :10.1.1.11.2888
single wf type wf wf wf wf wf wf wf wf wf wf rule single wf states type formed path referring object 
rules cover formedness type selection distinguish form de nition de ned alias type formed formed 
requirement excludes recursive types type label de ned alias type containing 
recursive type nite proof tree formedness 
hand de ned new type expands type requires turn expands record type 
requirement excludes cyclic de nitions fxj rg 
recursive label inside record class allowed fxj lgg 
de ned type bounded requires turn bounded record type 
requirement excludes situations type bounded directly indirectly fxj admits bounded polymorphism type appears inside bound fxj lgg 
relationship system encoded obj translation hh 
ii de ned types terms environments 
translation types obj types de ned follows 
hh ii fval farg fun res hht ii hht uii fval farg hht fun res fresh arg hh ii translation terms obj terms de ned follows 
hh tii new val farg hht fun res hht uii val arg fun res hh tii new val farg fun res hht ii val arg hht ii fun res arg translation environments obj environments 
hhx ii farg hht iig hhx ii farg hht iig hh ii hh ii hh ii hh ii translation letters names words consisting lowercase letters value labels words consisting upper case letters type labels 
speci cally arg labels value parameter arg labels type parameter res labels function result val labels class value 
translation polymorphic identity function expressed calculus 
new val farg fgg fun res new val farg fun res arg give sense encoding easily show properties 
lemma environment types term 
implies hh ii hht ii 

implies hh ii hht ii 
lemma implies garbage context form xn un hi name free 
garbage context previous lemma necessary translation abstraction application involves creation objects persistent contrary disappear lambda reduction rule 
lemma implies 
reduction relation call value small step semantics reduce argument reduced value passed function 
previous lemma lemma corollary typed term reduces irreducible term translation reduces translation term irreducible 
meta theory chapter establish results obj 
reduction relation con uent 
second typing rules sound respect operational semantics 
third subtyping relation type checking undecidable 
reasons space refer accompanying technical report proofs :10.1.1.11.2888
con uence theorem 
relation con uent 

exists term 

type soundness establish soundness obj type system syntactic technique wright felleisen :10.1.1.44.5122
rst show subject reduction result states typings preserved reduction 
characterize notion evaluation result called answer show typed non diverging term reduces answer type original term 
theorem subject reduction environment 
terms bn dom type 
establish type soundness subject reduction need show typed non diverging terms reduce answers 
notions de ned follows 
de nition 
term diverges written exists nite reduction sequence starting de nition 
answer value possibly nested binders classes de nitions fully evaluated 
syntax answers sj theorem type soundness 
answer undecidability type checking theorem exists algorithm decide judgment derivable 
develops calculus reasoning classes objects type members 
de ne con uent notion reduction sound type system dependent types 
areas worthwhile 
problem obj 
need develop decidable subsystems describe type reconstruction algorithms incomplete shown reasonably practice 
second explore extensions calculus imperative side ects richer notions information hiding 
third study detail relationships obj existing object oriented languages language proposals 
hope foundation research directions 
acknowledgments luca cardelli erik ernst benjamin pierce mads philip wadler christoph zenger discussions subject 
philippe st ephane comments previous versions 

abadi cardelli 
theory objects 
monographs computer science 
springer verlag 

ancona zucca 
primitive calculus module systems 
principles practice declarative programming lncs 

ancona zucca 
calculus module systems 
journal functional programming 

barendregt coppo dezani ciancaglini 
lter lambda model completeness type assignment 
journal symbolic logic 

bono patel shmatikov 
core calculus classes mixins 
proceedings th european conference object oriented programming pages lisbon portugal 

boudol 
recursive record semantics objects revisited 
technical report inria jun 
appear journal functional programming 

bracha 
programming language jigsaw mixins modularity multiple inheritance 
phd thesis university utah 

bracha griswold 
extending smalltalk mixins 
oopsla workshop extending smalltalk language april 

bracha lindstrom 
modularity meets inheritance 
proceedings ieee computer society international conference computer languages pages washington dc 
ieee computer society 

bruce 
foundations object oriented programming languages types semantics 
mit press cambridge massachusetts february 
isbn 

bruce petersen 
subtyping match object oriented languages 
proceedings european conference objectoriented programming pages 

bruce odersky wadler 
safe alternative virtual types 
proceedings th international workshop foundations objectoriented languages san diego usa 

cardelli donahue glassman jordan kalsow nelson 
modula language de nition 
acm sigplan notices august 

cardelli martini mitchell scedrov 
extension system subtyping 
information computation 

cardelli mitchell 
operations records 
mathematical structures computer science 

crary harper puri 
recursive module 
sigplan conference programming language design implementation pages 


dahl nygaard 
simula common base language 
technical report norwegian computing center october 

duggan 
mixin modules 
proceedings acm sigplan international conference functional programming pages philadelphia pennsylvania june 

ernst 
gbeta language virtual attributes block structure propagating dynamic inheritance 
phd thesis department computer science university aarhus denmark 

ernst 
family polymorphism 
proceedings european conference object oriented programming pages budapest hungary 

flatt krishnamurthi felleisen 
classes mixins 
proceedings th acm symposium principles programming languages pages san diego california 

gosling joy steele bracha 
java language speci cation 
java series sun microsystems second edition 
isbn 

harper lillibridge 
type theoretic approach higher order modules sharing 
proceedings st acm symposium principles programming languages january 

igarashi 
inner classes 
proceedings european conference object oriented programming cannes france june 

igarashi pierce 
foundations virtual types 
proc 
ecoop lecture notes computer science 

igarashi pierce 
foundations virtual types 
information computation 

pierce wadler 
featherweight java minimal core calculus java gj 
proc 
oopsla nov 

leroy 
syntactic theory type generativity sharing 
acm symposium principles programming languages popl portland oregon 

macqueen 
modules standard ml 
conference record acm symposium lisp functional programming pages new york august 

madsen ller pedersen 
virtual classes powerful mechanism object oriented programming 
proceedings oopsla pages october 

madsen ller pedersen nygaard 
object oriented programming beta programming language 
addison wesley june 
isbn 

nipkow von oheimb 
java light type safe de nitely 
cardelli editor conference record th symposium principles programming languages popl pages san diego california 
acm press 

odersky 
report programming language scala 
ecole polytechnique ed erale de lausanne switzerland 
lamp epfl ch odersky scala 

odersky zenger 
nominal theory objects dependent types 
technical report ic epfl switzerland september 
lamp epfl ch papers pdf 

odersky zenger 
nominal theory objects dependent types 
proc 
fool jan 
www cis upenn edu fool fool html 

ostermann 
dynamically composable collaborations delegation layers 
proceedings th european conference object oriented programming spain 

russo 
class structures standard ml 
proceedings th european symposium programming pages berlin germany 

smaragdakis batory 
implementing layered designs mixin layers 
lecture notes computer science 

thorup 
genericity java virtual types 
proceedings european conference object oriented programming lncs pages june 

thorup 
unifying genericity combining bene ts virtual types parameterized classes 
lecture notes computer science 


virtual types statically safe 
th workshop foundations object oriented languages san diego ca usa january 


inheritance specialization 
inheritance workshop ecoop june 
www cs auc dk 

wright felleisen 
syntactic approach type soundness 
information computation 

zenger 
type safe prototype component evolution 
proceedings european conference object oriented programming spain june 

