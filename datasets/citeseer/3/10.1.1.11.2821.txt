streamit language streaming applications william michal saman amarasinghe laboratory computer science massachusetts institute technology cambridge ma saman lcs mit edu 
characterize high performance streaming applications new distinct domain programs increasingly important 
streamit language provides novel high level representations improve programmer productivity program robustness streaming domain 
time streamit compiler aims improve performance streaming applications stream specific analyses optimizations 
motivate describe justify language features streamit include structured model streams messaging system control re initialization mechanism natural textual syntax 
applications structured notion stream increasingly important widespread 
evidence streaming media applications consuming cycles consumer machines continuing grow 
embedded domain applications hand held computers cell phones dsp centered stream voice video data 
stream abstraction fundamental highperformance applications intelligent software routers cell phone base stations hdtv editing consoles 
despite prevalence applications surprisingly little language compiler support practical large scale stream programming 
course notion stream programming abstraction decades number special purpose stream languages designed see review :10.1.1.52.9500
languages representations elegant theoretically sound lack features inflexible support straightforward development modern stream applications implementations inefficient practice 
consequently programmers turn general purpose languages implement stream programs 
reasons general purpose languages inadequate stream programming 
firstly mismatch application domain 
information streamit see compiler lcs mit edu streamit 
copyright springer verlag provide natural intuitive representation streams having negative effect readability robustness programmer productivity 
widespread parallelism regular communication patterns data streams left implicit general purpose languages compilers stream conscious perform stream specific optimizations 
result performance critical loops hand coded low level assembly language re implemented target architecture 
practice labor intensive error prone costly 
secondly general purpose languages mismatch emerging class grid architectures especially suited stream processing 
primary appeal provides common machine language von neumann architectures 
abstracts away idiosyncratic differences machines encapsulates common properties single program counter arithmetic operations monolithic memory 
grid architectures von neumann model longer holds multiple instruction streams distributed memory banks 
longer serves common machine language fact provides wrong abstraction underlying hardware architecture specific directives needed obtain reasonable performance 
greatly complicates job programmer hampers portability 
streamit language compiler specifically designed modern stream programming 
streamit language goals provide high level stream abstractions improve programmer productivity program robustness streaming domain second serve common machine language grid processors 
time streamit compiler aims perform stream specific optimizations achieve performance expert programmer 
motivates describes justifies high level language features streamit version 
major limitation streamit flow rates streams static applications compression dynamically varying flow rates subject 
large set applications implemented static rates dynamic rates require different runtime model essential fully analyse optimize static sub sections order obtain high performance 
organized follows 
section characterize domain streaming programs motivates design streamit section describe language features detail 
depth example software radio section preliminary results section related section section 
streaming application domain applications stream abstraction diverse targets ranging embedded devices consumer desktops high performance servers 
examples include systems click modular router booster copyright springer verlag fft fig 

block diagram frequency hopping software radio 
software radio specifications bluetooth communications protocol gsm amps cellular base station application developed microsoft library real network lincoln lab computing architecture 
identified number properties common applications characterize belonging distinct class programs refer streaming applications 
believe salient characteristics streaming application follows 
large streams data 
fundamental aspect streaming application operates large virtually infinite sequence data items referred data stream 
data streams generally enter program external source data item processed limited time discarded 
contrast scientific codes manipulate fixed input set large degree data reuse 

independent stream filters 
conceptually streaming computation represents sequence transformations data streams program 
refer basic unit transformation filter operation execution step reads items input stream performs computation writes items output stream 
filters generally independent self contained global variables filters 
stream program composition filters stream graph outputs filters connected inputs 

stable computation pattern 
structure stream graph generally constant steady state operation stream program 
certain set filters repeatedly applied regular predictable order produce output stream function input stream 

occasional modification stream structure 
arrangement filters executed long time dynamic modifications stream graph occur occasion 
instance wireless network interface experiencing high noise input channel react adding filters clean signal software radio re initializes portion stream graph user switches am fm 
re initializations synchronized data stream instance network protocol changes bluetooth certain point transmission 
typically enumerable number configurations stream graph adopt program possible arrangements filters known compile time 
copyright springer verlag class extends filter float weights int void init float weights float type setoutput float type weights weights weights length void float sum int sum input peek weights input pop output push sum class main extends pipeline void init add new datasource add new add new display fig 

fir filter streamit 
stream stream stream split join pipeline 
stream stream splitjoin 
stream stream join split 
fig 

stream structures supported streamit 

occasional stream communication 
addition high volume data streams passing filter filters communicate small amounts control information infrequent irregular basis 
examples include changing volume cell phone printing error message screen changing coefficient upstream fir filter 

high performance expectations 
real time constraints satisfied streaming applications efficiency terms latency throughput primary concern 
additionally embedded applications intended mobile environments power consumption memory requirements code size important 
language overview streamit includes stream specific abstractions representations designed improve programmer productivity domain programs described 
streamit legal java syntax java advantages including programmer familiarity availability compiler frameworks robust language specification 
resulting syntax cumbersome plan develop cleaner syntax designed specifically stream programs 
filters basic unit computation streamit filter 
example filter software radio see shown 
sake brevity code fragments lacking modifiers methods needed strictly legal java 
copyright springer verlag central aspect filter function describes filter fine grained execution step steady state 
function filter communicate neighboring blocks input output channels fifo queues declared fields filter base class 
high volume channels support intuitive operations pop removes item channel returns value peek returns value item spaces channel removing push writes front channel 
argument passed value object separate copy enqueued channel 
major restriction streamit requires filters static input output rates 
number items popped pushed filter constant invocation function 
fact described input output rates declared filter init function 
filter violates declared rates streamit throws runtime error subsequent behavior program undefined 
plan support dynamically changing rates version streamit 
filter contains init function called initialization time 
init function serves purposes 
firstly user establish initial state filter 
example records weights coefficients filtering 
filter push pop peek items init function needs set initial state channels usually necessary 
user instantiate filter constructor init function called implicitly arguments passed constructor second purpose init function specify filter types data rates streamit compiler 
types specified calls setoutput rates specified calls 
call peek count pop count 
rationale streamit representation filter improvement generalpurpose languages 
procedural language analog filter block statements complicated loop nest see 
representation unnatural expressing feedback parallelism inherent streaming systems 
clear abstraction barrier filter high volume stream processing global variables control flow 
loop nest re arranged input output ratios filter changes scheduling optimizations inhibit readability code 
contrast streamit places filter independent unit making explicit parallelism inter filter communication hiding details scheduling optimization programmer 
object oriented language implement stream abstraction see 
avoids problems associated design unnatural necessary allow inlining section re initialization section java syntax 
copyright springer verlag int int block size void step float input float output int int float sum int sum sum input fir coeff int sum sum input fir coeff output sum input getdata void main float input new float float output new float block size int input getdata true step input output int block size int step input output block size step input output output fig 

optimized fir filter procedural language 
complicated loop nest required avoid mod functions memory efficiently structure loops depends data rates block size stream 
actual implementation inline calls step 
class int float input int float getdata float output int offset int length input null input new float max length source getdata input length source getdata input length int length float sum int sum sum data fir coeff output offset sum int input input length void main datasource datasource new datasource filter new display display new display filter source datasource display source filter display run fig 

fir filter object oriented language 
pull model filter object retrieve chunk data source straight line code connects filter 
procedural loop nest programming model complicated efficiency concerns 
runtime library usually executes filters pull model filter operates block data retrieves input channel 
block size optimized cache size architecture hampers portability 
operating blocks obscures fundamental fine grained algorithm visible streamit filter 
absence runtime model favor automated scheduling optimization distinguishes streamit 
connecting filters streamit provides constructs composing filters communicating network pipeline splitjoin see 
structure specifies pre defined way connecting filters single input single output block henceforth refer stream 
stream class delay extends filter void init int delay float type setoutput float type int delay output push void output push input pop class extends splitjoin void init duplicate add new delay add new delay roundrobin class extends pipeline void init add new add new add new adder add new speaker adder defined 
fig 

echo effect streamit 
copyright springer verlag class extends void init roundrobin new filter void init integer type setoutput integer type void output push input peek input peek input pop duplicate int int index return index fig 

version 
instance filter pipeline splitjoin 
streamit program hierarchical composition stream structures 
pipeline construct building sequence streams 
filter pipeline init function called instantiation 
init component streams added pipeline successive calls add 
example init function adds streams pipeline adder speaker 
sequence statements automatically connects streams order specified 
function pipeline component streams fully specify behavior 
channel types data rates implicit connections 
stream constructs executed embedded enclosing stream structure 
execute independently component consumes items component produces items 
component stream inputs items stream outputs items 
stream embedded construct components stream implicitly connected stream neighbors parent construct 
splitjoin construct specify independent parallel streams diverge common splitter merge common joiner 
pipeline components splitjoin specified successive calls add init function 
example adds streams run parallel delay filter 
splitter specifies items input splitjoin distributed parallel components 
simplicity allow compiler defined splitters types duplicate replicates data item sends copy parallel stream roundrobin ik copyright springer verlag sends data items stream added data items stream added second null means parallel components require input input items split 
weights roundrobin assumed equal stream 
note roundrobin function exclusive selector weights zero 
likewise joiner indicate outputs parallel streams interleaved output channel splitjoin 
kinds roundrobin function analogous roundrobin splitter null means parallel components produce output output items join 
splitter joiner types specified calls respectively 
uses duplicate splitter item appears directly echo uses roundrobin joiner interleave immediate signals delayed ones 
adder combine pair interleaved signals 
construct provides way create cycles stream graph 
fibonacci stream illustrates construct 
contains body stream block backwards feedback path created loop stream perform computation feedback path splitter distributes data feedback path output channel bottom loop joiner merges items feedback path input channel top loop 
components specified init function calls respectively 
splitters splitjoin null 
call computation performed feedback path 
special semantics stream starting run 
items feedback path stream inputs items function defined index provides th initial input feedback joiner 
call init function user specify items calculated joiner looks data items feedback channel 
evident example feature streamit syntax inlining 
definition stream inlined point instantiation preventing definition small classes providing syntax reveals hierarchical structure streams indentation level code 
java syntax anonymous classes inlining 
rationale streamit differs languages imposes welldefined structure streams stream graphs built hierarchical composition pipelines 
contrast copyright springer verlag environments generally regard stream flat arbitrary network filters connected channels 
arbitrary graphs hard compiler analyze equally difficult programmer describe 
programmers resort straight line code links filter making hard visualize stream graph ad hoc graphical programming environment admits textual representation 
contrast streamit clean textual representation especially inlined streams easy see shape computation indentation level code 
comparison streamit structure arbitrary stream graphs likened difference structured control flow goto statements 
structure restricts expressiveness programmer gains robustness readability compiler analysis immense 
graphical programming languages gained large scale acceptance graphical editor streamit advantages stream graph precise textual equivalent edited programmer 
hierarchical structure stream graph simplify visualization 
glance statements streamit init function appear verbose api novel language 
careful design decision specify stream configuration information function calls init functions 
current syntax somewhat tedious great flexibility approach user configuration directives statements calculate configuration parameters 
allows fully parameterized graph construction fft stream inputs parameter adjusts number butterfly stages appropriately 
improves modularity readability code 
messages streamit provides dynamic messaging system passing irregular low volume control information filters streams 
messages sent body filter function change parameter filter 
example software radio code see stage sends message upstream change frequency receiver detects transmitter change frequencies 
sender continue execute message en route method invoked receiver argument freq message arrives 
message delivery asynchronous return value void methods message targets 
message timing central aspect messaging system sophisticated timing mechanism allows filters specify message received relative flow information sender receiver 
recall filter executes independently notion global time 
way filters talk time meaningful copyright springer verlag class extends filter int size count float weight void init int float freq float type setoutput float type freq void output push input pop weight count count size count void float freq frequency hop count message size carrier freq freq weight new float size int size weight math sin pi size class extends splitjoin void init roundrobin int int int add new filter void init float type setoutput float type void float val input pop val min threshold freq new latency output push val add new identity roundrobin class fft extends pipeline void init int add new splitjoin void init roundrobin int add new splitjoin void init roundrobin add new identity add new identity roundrobin roundrobin int add new butterfly class adder extends filter void init float type setoutput float type void output push input pop input pop float boolean void init bp boolean float type setoutput float type bp void float val input pop max val min val fail qual init true best effort true pass qual init false best effort false output push val class booster extends pipeline void init int boolean enabled enabled add new boost weights class extends pipeline int new new void init add new rf add new booster booster add new booster false add new fft add new add new false add new register rf register booster max latency class butterfly extends pipeline void init int int add new splitjoin void init roundrobin add new filter float weight new float int curr see fig 
diagram booster re initialization message void init float type setoutput float type int weight curr void output push input pop weight curr curr curr add new identity roundrobin add new splitjoin void init duplicate add new add new adder roundrobin fig 

streamit code software radio 
arrows denote paths messages 
copyright springer verlag terms data items passed streams 
streamit specify range latencies message delivery 
latency measured terms information wavefront filter 
example example sender indicates interval latencies 
means receiver receive message immediately invocation function produces item affecting output sender th th functions counting sender current function number 
due space limitations define notion precisely see formal semantics general idea simple receiver invoked sees information wavefront sender sees execution steps :10.1.1.16.1946
cases ability synchronize arrival message element data stream important 
example knows transmitter change frequency steps terms frame inputting 
ensure radio changes frequencies time lose data old new frequency instructs receiver switch frequencies receiver sees data items old frequency 
portals broadcast messaging 
streamit support modular broadcast messaging 
sender wants send message invoke method receiver arrival call object calls portal member 
portals typed containers forward messages receive elements container 
portals useful cases component filter library needs announce message shutting know list recipients user library pass filter portal containing interested receivers 
message delivery constraints user specifies single time interval message interval interpreted separately described receiver portal 
language generic data types portal implemented list 
java support templates automatically generate portal class class interface 
syntax portals evident class 
rationale stream programs challenge filters need regular high volume data transfer irregular low volume control communication 
problem reasoning relative time filters running asynchronously parallel 
different approach messaging embed control messages data stream providing separate mechanism dynamic message passing 
effect associating message time data item complicated error prone leads unreadable code 
hurt performance steady state filter check copyright springer verlag data item actual data control complicates compiler analysis 
send messages upstream creating separate data channel travel 
solution treat messages synchronous method calls 
delays progress stream message en route degrading performance program restricting compiler freedom reorder filter executions 
feel streamit messaging model advance separates notions low volume high volume data transfer programmer compiler losing defined semantics messages timed relative high volume data flow 
separating message communication category fewer connections needed steady state data transfer resulting stream graphs amenable structured stream programming 
re initialization characteristics streaming application need modify structure part stream graph 
streamit allows changes re initialization mechanism integrated messaging model 
sender targets message init function stream filter message arrives re executes initialization code replaces new version 
new version different structure original arguments init call re initialization different original initialization 
init message arrives kill data stream re initialized 
drains stream wavefront information defined messaging model top stream reached bottom 
draining occurs consuming data input channels re initialized region 
drain function filter invoked provide input input source frozen 
filter override drain function part definition 
programmer prefers kill data stream segment draining indicated sending extra argument message portal re initialization message 
rationale re initialization headache stream programmers done manually entire runtime system put hold re initialize portion stream 
interface starting stopping streams complicated explicit notion initialization time vs steady state execution time ad hoc draining techniques risk losing data system 
streamit improves situation abstracting re initialization process user 
control program needed drain old streams create new structure user need trigger weighted round robin round robin round robin copyright springer verlag weighted round robin weighted round robin round robin fig 

bit reversal phase fft 
bit reversal permutation swaps elements indices binary representations reverse 
butterfly stage similar lack space 
reinitialization process message 
additionally hierarchical stream construct automatically possible candidate re initialization due defined stream structure simple interface init function 
easy compiler recognize stream re initialization possibilities account possible configurations stream flow graph analysis optimization 
latency constraints lastly streamit provides simple way restricting latency information wavefront traveling input filter output downstream filter 
issuing directive max latency init means execute wavefront information see invocations function 
detailed example discuss streamit implementation radio illustrated 
radio frequency hopping system receiver switches set known frequencies hears certain tones transmitter 
toplevel class implemented stage pipeline see 
stage modulates input signal rf frequency band current frequency 
support change frequency frequency hopping occurs filter contains method invoked message stage 
message sent latency range means deliver items old modulation scheme changing new frequency 
copyright springer verlag optional booster stage provides amplification weak signals usually turned conserve power 
booster toggled re initialization message stage estimates signal quality shape frequency spectrum 
frequencies similar amplitudes assumes signal noise ratio low sends message activate booster 
message sent best effort delivery 
fft stage converts signal time domain frequency domain please refer diagram parallel fft algorithm 
streamit implementation consists bit reversal permutation followed series butterfly stages 
bit reversal phase illustrates data just splitjoin constructs see 
butterfly stage parameterized allow compact representation fft employs select groups items computation 
believe streamit version fft clean intuitive splitjoin constructs expose natural parallelism algorithm 
results implemented fully functional prototype streamit compiler extension java compiler component open source project 
time compiler proof concept include stream specific optimizations working generate code compiled streamit runtime library produce final executable 
developed library java allows streamit code executed pure java providing verification mechanism output compiler 
compilation process streaming programs contains novel aspects basic unit computation stream procedure 
order compile stream modules separately developed runtime interface analogous procedure call traditional codes specifies interact black box streaming computation 
stream interface contains separate phases initialization steady state execution execution phase interface includes contract input items output items possible message production consumption 
add optimizations compiler interesting evaluate baseline performance 
purpose developed streamit implementations applications gsm decoder takes gsm encoded parameters inputs uses synthesize audible speech system polymorphic computing architecture pca encapsulates core functionality modern radar sonar communications signal processors software fm radio equalizer performance test system implements orthogonal frequency division multiplexor ofdm 
table gives characteristics applications including number filters implemented size stream graph coded 
benchmark lines filters graph size pca demo fm radio gsm decoder table 
application characteristics copyright springer verlag benchmark streamit pca demo fm radio gsm decoder table 
performance results sec item table gives performance compiler comparing streamit implementation implementation case gsm hand optimized version 
high performance runtime library streaming programs implemented 
streamit language offers higher level abstraction see section streamit compiler able beat performance factor pca demo fm radio 
gsm application extensively hand optimized version incorporates transformations rely high level knowledge algorithm streamit performs order magnitude slower 
version compiler prototype intended compete handcoded code generation strategy currently inefficiencies plan generate optimized assembly code interfacing code generator 
believe stream conscious optimizations improve performance order magnitude uniprocessors consider parallel targets expect find pronounced benefits abundant parallelism regular communication patterns exposed streamit 
related large number programming languages included concept stream see survey :10.1.1.52.9500
related streamit synchronous dataflow languages lustre esterel require fixed number inputs arrive simultaneously firing stream node :10.1.1.34.5059
special purpose stream languages contain features messaging support modular program development essential modern stream applications 
languages unstructured compiler perform analysis optimization result efficient implementation 
level stream graphs streamit share number properties synchronous dataflow sdf domain considered ptolemy project 
node sdf graph produces consumes number items delays arcs nodes corresponding loosely items streamit 
streamit sdf graphs guaranteed static schedule number nice scheduling results incorporating code size execution time 
previous results sdf scheduling consider constraints imposed point point messages include notion streamit information wavefronts re initialization programming language support 
copyright springer verlag specification package industry bearing likeness streamit sdl specification description language 
sdl formal objectoriented language describing structure behavior large real time systems especially telecommunications applications 
includes notion asynchronous messaging queues receiver incorporate wavefront semantics streamit 
focus specification verification streamit aims produce efficient implementation 
presents streamit novel language high performance streaming applications 
stream programs emerging important class applications distinct properties recognized application classes 
develops fundamental programming constructs streaming domain 
primary goal streamit raise abstraction level stream programming sacrificing performance 
argued streamit mechanisms filter definition filter composition messaging re initialization improve programmer productivity program robustness streaming domain 
believe streamit viable common machine language architectures just common machine language von neumann machines 
streamit abstracts away target granularity memory layout network interconnect capturing notion independent processors communicate regular patterns 
developing fission fusion algorithms automatically adjust granularity stream graph match target 
number extensions planned version streamit language 
current version designed primarily uniform dimensional data processing constructs hierarchical frames data useful image processing 
version support dynamically varying rates filters stream 
expect support require new language constructs instance type dispatch splitter routes items components splitjoin type fall joiner pulls items stream splitjoin soon produced 
immediate focus developing high performance optimizing compiler streamit 
described structure streamit exploited compiler perform wide range stream specific optimizations 
goal match performance hand coded applications abstraction benefits streamit come performance penalty 
streamit compiler implemented michael gordon david maze applications support jeremy wong henry hoffman matthew brown copyright springer verlag matt frank helpful comments 
supported part mit oxygen project darpa dbt 

bandwidth efficient architecture media processing 
hpca dallas tx 
abelson sussman structure interpretation computer programs 
mit press cambridge ma 
stephens survey stream processing 
acta informatica 
mai ho dally horowitz smart memories modular architecture 
software raw machine 
mit lcs technical report cambridge ma 
nagarajan burger technology scalable architecture fast clocks high ilp 
ut austin tech report 
kohler morris chen jannotti kaashoek click modular router 
acm trans 
computer systems 
tennenhouse bose approach wireless signal processing 
wireless networks 
bose guttag virtual radios 
ieee jsac special issue software radios april 
volume july bluetooth spec 
vol 

bluetooth consortium 
gsm system mobile communications 
cell sys palaiseau france 
eia tia mobile station land station compatibility spec 
tech 
rep 
microsoft microsoft 
online documentation 
software developer kit 
online documentation 
computing architecture pca example applications description 
external report mit lincoln laboratory august 
gosling joy steele java language specification 
addison wesley 
amarasinghe streamit language streaming applications 
mit lcs technical memo tm cambridge ma august 
gordon maze wong hoffmann brown amarasinghe streamit compiler streaming applications 
mit lcs technical memo tm cambridge ma december 
cormen leiserson rivest algorithms 
mit electrical engineering computer science series 
mit press mcgraw hill 
vincent gay para thomas graf wais manual 
www dms docs html 
halbwachs caspi raymond pilaud synchronous data flow programming language lustre 
proceedings ieee 
berry gonthier esterel synchronous programming language design semantics implementation 
science computer programming 
lee overview ptolemy project 
ucb erl technical memorandum ucb erl dept eecs university california berkeley ca 
bhattacharyya murthy lee software synthesis dataflow graphs 
kluwer academic publishers pages 

ccitt recommendation specification description language 
itu geneva 
