folklore confirmed reducible flow graphs exponentially larger larry carter computer sci 
eng 
dept uc san diego gilman drive la jolla ca usa carter cs ucsd edu program analysis techniques compilers applicable programs control flow graphs reducible 
node splitting technique convert control flow graph reducible 
observed various node splitting algorithms exponential blowup size graph 
prove exponential blowup unavoidable 
particular show reducible graph equivalent complete graph nodes related control flow graphs nodes 
result surprise may relevant quest finding methods obfuscation software protection 
categories subject descriptors programming languages processors general terms algorithms security languages theory keywords compilers computational complexity programming languages safety security digital systems 
control flow graphs frequently optimizing compilers basis program analysis optimization 
intuitively control flow graph program directed graph represents program potential flow control 
reducible flow graphs defined section performed authors sabbatical university auckland 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
popl january new orleans louisiana usa 
copyright acm 
jeanne ferrante computer sci 
eng 
dept uc san diego gilman drive la jolla ca usa ferrante cs ucsd edu clark thomborson dept computer science university auckland private bag auckland new zealand cs auckland ac nz subclass control flow graphs include derived structured programs programs generated restricted set constructs continue break 
static analyses require code reducible flow graph may costly analyze applied large irreducible graph 
noted reducible flow graphs allow divide conquer approach interval analysis reduces complexity analysis 
irreducible flow graphs arise go constructs handled optimizing compilers 
appear machine code generated optimizing compilers 
commonly technique handling irreducible flow graphs node splitting 
technique eliminates unstructured program constructs making duplicate copies selected nodes control flow graph 
gives example 
observed literature various node splitting algorithms exponential blowup size program flow graph 
different ways choose nodes split choose order splitting nodes 
leaves open questions unable find answered published literature 
possible undiscovered node splitting algorithm avoids exponential blowup 
possible flow graph equivalent reducible flow graph result node splitting algorithm avoids exponential blowup 
answers questions negatively 
come surprise people familiar field fills gap considered folklore 
little concern possible blowup observed programs written humans reducible 
motivated technique adds extra predicate variables guard statements loop 
resulting program sense equivalent technical sense defined 
results apply program restructuring techniques 
see example 
cond goto goto cond left unstructured program corresponding irreducible control flow graph 
right equivalent structured program reducible flow graph 
take look question interest software obfuscation 
software obfuscator automatic technique transforms programs functionally equivalent variants difficult understand analyze 
obfuscation shown theoretically impossible computational power memory 
attempts construct embedded instances hard problems 
example shows instance pspace hard problem may embedded control flow obfuscated program 
example introduce additional variable aliases indirect addressing making control flow difficult determine 
uses fact alias detection np hard problem 
explored making control flow program harder analyze 
attacker expected attempt automatically decompile target code perform automated analyses 
noted automatic analysis statically obtain global information structure program enabling reverse engineering 
hope defend attack obfuscating control flow data flow original program 
done adding extra edges control flow graph irreducible 
accomplished inserting extra conditional branches program 
conditional branches values known run time mathematical identities scope optimizing compiler verify static analysis unable eliminate 
able develop techniques constructing complete irreducible flow graph original flow graph program confounding static analysis unable find techniques couldn easily symbolic execution analyzing runtime trace 
main result code flow graph equivalent complete graph nodes equivalent reducible flow graph nodes 
reducible flow graph exponential size attacker 
starting program modest size reducible equivalent may fit computer memory sheer mass frustrate human attempt understand code doing 

reducible flow graphs term reducible flow graph originally defined means graph reduced single node sequence applications transformations shown 
context data flow analysis flow graphs annotated information nodes assignment block code data flow algorithms manipulating information appropriately graph reduced producing summary information program assignment block block may uninitialized 
details algorithms need concern motivate definitions definition 
flow graph directed graph node function assigns node graph label chosen alphabet labels need unique 
definition 
finite string labels said produced flow graph nk nk path initial node 
denotes language set strings produced definition 
flow graphs equivalent 
example flow graphs equivalent 
general node splitting techniques transform arbitrary flow graph equivalent reducible flow graph 
note flow graphs set strings produce similar finite automata regular languages difference flow graphs labeled nodes finite automata labeled edges 
fact language flow graph regular flow graphs produce equivalent definitions reducible flow graph see 
overload symbol mean different contexts label node language flow graph ways associating set strings various objects leftist trees annotated flow graphs come 
label node put outgoing edge resulting finite automaton produces 
transformations simplify flow graphs 
eliminates self loops 
merges node parent 
arc child back parent self loop 
graph reducible repeated applications reduce single node 
restricted languages instance string label initial node 
continuing study flow graphs introduce leftist trees provide way producing set strings 
prove lower bound size leftist tree produces set strings alphabet symbol 
result allow prove similar result flow graphs 

leftist trees leftist tree simply rooted binary tree node zero children labels leaves 
denotes number nodes tr denote left right subtrees tr empty non empty 
define nl nr follows single node denote node 
leftmost leaf tl tr respectively 
sl bethe labels nl respectively 
tree understood context may drop notation 
instance tl nl sl denote left subtree leftmost leaf subtree symbol labeling leaf 
give method associating set strings leftist tree 
pk non empty sequence leaves tree leftist leaf sequence lls exists subtree ti pi ti pi nl ti ti 
intuitively starting pi move tree far want go child keep going left get leaf pi 
example see 
lls pk say string symbols sk produced si label pi 
define language denoted set strings produced lls start nl leftmost leaf observations follow easily definition leftist leaf sequence 
subtree mean node nodes ancestor 
tree sequence legal leftist leaf sequence 
lemma 
sequence leaves subtree lls lls lemma 
pj pj pk lls pj nl nr pk lls lemma 
pk lls pj subtree doesn include pj nl 
prove alternate characterization set strings produced tree theorem 
expressed recursively sl tl tl tr 
proof 
induction 
base case single node nl letting ti see sequence nl lls starting nl 
lls produce language sl 
inductive step assume theorem holds tl tr 
tl tl tr find lls tl tr substrings implied formula 
lemma lls lls standard notation strings xy concatenation sets strings ab represents set xy set strings concatenation zero strings anda aa lls begins nl tl nl nl tr nr concatenation lls lemma 
clear sequence begins nl 

conversely suppose 
generated lls begins nl 
decompose subsequences switches tl tr back 
lemma subsequences ssl tl tr 
lemma subsequence begins nl nr 
inductive hypothesis produce substrings tl orl tr 
begins nl substring tl 
concatenation substrings tl tl tr simple consequence theorem leftist tree 
need definitions definition 
say string suffix st 
definition 
alphabet say complete suffix 
examples structure leftist tree parentheses recursively 
write single node labeled andt 
example bc tree left subtree right subtree bc 
example 
ab 
complete 
example 
bc 
string ac suffix complete 
complete complete 
example 
ab cb complete 
example complete tree shown 
lemma 
suffix produced lls constraint node lls 
non trivial part proof show construct lls nl symbol string 
done leftmost leaves trees rooted nodes form path root leaf corresponding symbol lemmas provide insight structure complete trees 
lemma 
alphabet ift complete tree minimal size right subtree tr sl complete 
proof 
contradiction 
assume tr complete reduced alphabet sl 
exists string sl suffix tr 
minimal size tl complete exists shortest string suffix tl 
lengths complete know tu suffix 
denote tu string vj lls pj produces derive contradiction considering pj leaf corresponding symbol suppose pj tr 
vi sl symbol contains sl applying lemma inductively tells pi leaf tr 
mean lls pj pj produces contradicts chose suffix tr 
hand suppose pj tl 
pj lls tl suffix tl pj tr 
choose largest integer pm tr 
ensures pm pm pj lls tl 
furthermore pm tr pm tl sl lemma 
fact shortest non suffix tl conclude lls tl produces tm 
consider sequence mpm pj 
construction entirely tl produces lls lemma 
conclude produced lls tl contradicts fact 
lemma 
alphabet ift complete tree minimal size left subtree tl sr complete 
proof 
proof lemma roles tl tr reversed 
abbreviated proof follows 
suppose string sr length suffix tl 
tr complete shortest string suffix tl 
pj lls produces tu 
pj tr remainder leaf sequence stuck tl produce find pm pj lls tr 
initial substring pm shorter lls tr 
extending lls pm pj gives lls tr produces contradiction 
lemmas enable prove lower bound size complete trees 
theorem 
sn minimal number leaves complete tree proof 
induction induction basis established noting minimal sized tree generate symbol complete language inductive step sn sn established considering subtrees tl tr complete tree minimal size lemma subtree tl sr complete inductive hypothesis leaves 
lemma subtree tr sl complete induction leaves 
gives desired inequality 
theorem 
sn proof 
recursive construction match bound theorem 
basis alphabet node tree 
build tree leaves alphabet xn left subtree size sn tl xn right subtree size sn tr xn resulting language tl tl tr xn xn xn complete leaves 
tree complete illustrates recursive construction trees leaves alphabet size 
exponential blowup finite alphabet size flow graph comprising complete directed graph nodes node labeled distinct element label initial node 
language produced hard see regular language set strings 
section prove main result theorem 
reducible flow graph equivalent nodes cardinality 
proof 
show associate leftist tree reducible flow graph andl superset 
annotating node ni leftist tree tn reduce transformations build trees annotate nodes 
time reduced single node associated tree desired leftist tree 
intermediate annotated flow graph corresponds language natural way set strings form sk tn andn path flow graph 
course construction invariants hold 
language associated current annotated flow graph superset 

correspondence nodes leaves forest formed leftist trees annotations 
step construction annotate node ni leftist tree tn consisting single leaf node labeled ni label ni 
easy verify properties hold initially 
self loop elimination transformation applied node ni annotated graph don need adjust annotations 
property hold paths original flow graph longer paths transformed include repetitions node ni fact tn tn ensures arbitrary repetitions represented eliminating self loop 
transformation applied nodes edge edge 
transformation applied fuse nodes single node update annotation shown 
path pre flow graph occurrence immediately preceded 
substring si si si tn si tn contributes strings pre language substring included tn post flow graph 
property holds 
property remains construction transformations affect total number leaves forest annotations 
example annotation forest leaves 
reduced single node annotation node leftist tree associate noted may contain strings 
equivalent language contains strings starting theorem leaves 
correspondence leaves nodes proof completed 
new strings may added language instance example edge applied 
transformation annotation new fused node tree old annotations left right subtrees 
show steps transforming example graph resulting leftist tree 
theorem settles open questions posed section negatively 
section extend results show flow graphs outdegree suffer exponential blowup converted reducible flow graphs 

limiting outdegree suppose ni node flow graph outdegree 
replace ni tree nodes node new tree outdegree exactly 
creating new tree nodes outdegree node new node label original node ni 
direct edges new tree root leaves 
attach edges went ni root new tree attach outedges originally came ni nodes new tree way node outdegree exactly 
construction analogous implementing multi way case statement sequence binary branches 
doesn matter purposes tree balanced 
complete flow graph nodes earlier apply procedure node obtain flow graph nodes outdegree 
show reducible flow graph equivalent nodes 
shows construction 
language related string sk string sr 
words symbols duplicated certain number times produce show reducible flow graph produces number repetitions depends method expanding nodes binary trees 
superset thereof nodes size 
proving results similar lemmas structure reducible graph producing language 
need definitions 
strings contraction result eliminating adjacent duplicates instance contraction 
abba contraction contain symbol string duplicates 
leftist tree alphabet set strings covers exists suffix contraction lemma 
alphabet ift minimum size leftist tree covers right subtree tr covers sl proof 
contradiction 
assume tr cover sl exists string sl contraction suffix tr 
minimal size tl cover consequently exists shortest string contraction suffix tl 
covers know tu contraction suffix 
write vj contraction vj contraction vj vj lemma lls pj produces need handle messy detail 
happen vi sl pi nl 
happens replace pi nl 
notice modified string pi lls nl allowed follow node particular pi nl pi valid condition means adjacent occurrences label leftmost node lls produces uses leftmost node produce second occurrence 
ba example graph successively transformed transformations resulting leftist tree 
left flow graph outdegree 
right equivalent flow graph outdegree result applying procedure 
transition node 
making substitutions possible assume loss generality sequence moves tr tl pi tr pi nl vi sl 
need property moment 
mimic proof lemma derive contradiction 
consider pj leaf corresponding symbol isint suppose pj tr 
note vi sl symbol contains sl applying lemma inductively tells pi leaf tr 
mean vj vj suffix tr 
summarizing know contraction string vj vj suffix tr 
contradicts chose hand suppose pj tl 
pj lls tl contraction nodes pj tr 
choose largest integer pm tr 
ensures pm pm pj lls tl 
furthermore pm tr pm tl pm nl lemma 
messy detail assume vm sl 
ensures portion contraction vm shorter fact shortest non suffix tl conclude lls tl produces string covers consider sequence pm pj 
construction entirely tl covers lls lemma fact pm nl 
conclude covered string produced tl contradicts originally chosen 
qed prove analog lemma lemma 
alphabet ift minimum size leftist tree covers sr proof 
proof lemma roles tl tr reversed 
note corresponding messy detail ni sr pi nr handled replacing pi nr 
resulting leaf sequence lls pr legally follow note ready final result 
theorem 
alphabet size reducible flow graph equivalent generally superset nodes 
proof 
leftist tree associated tree associated construction theorem 
know 
know string contraction suffix string 
covers induction proof theorem lemmas leaves 
leaves completes theorem 

formalized proven portion folklore compiler analysis 
flow graphs particular ones equivalent complete flow graph equivalent reducible flow graph exponential size 
particular results show node splitting technique avoid exponential blowup 
little concern exponential blowup programs written programmers reducible automatic compiler analyses find handling large programs difficult 
analyses require code reducible flow graph costly analyze applied irreducible graph large size 
line defense reverse engineering programs distribute code flow graph irreducible 
code easily automatically analyzable difficult reverse engineer 
noted technique adding guard predicates obtain reducible flow graph irreducible covered results 
technique may considerably complicate program analysis 
leave open question analysis shown provably hard 

acknowledgments cse class ucsd fall helpful comments 

aho sethi andj ullman compilers principles techniques tools 
addison wesley 
allen cocke 
graph theoretic constructs program control flow analysis 
technical report rc ibm research 
allen 
control flow analysis 
acm sigplan notices 
allen kennedy 
optimizing compilers modern architectures 
morgan kaufmann 
allen kennedy porterfield warren 
conversion control dependence data dependence 
conference record acm symposium principles programming languages popl january 

control flow normalization algorithm complexity 
ieee transactions software engineering mar 
barak goldreich impagliazzo rudich sahai yang 
im possibility obfuscating programs 
proceedings crypto 
chow gu johnson 
approach obfuscation control flow sequential computer programs 
proceedings isc 
published springer verlag lncs 
cocke miller 
analysis techniques optimizing computer programs 
proceedings second intl 
conf 
systems science january 
collberg thomborson low 
breaking abstractions data structures 
ieee international conference computer languages iccl may 
collberg thomborson low 
manufacturing cheap resilient stealthy opaque constructs 
conference record acm symposium principles programming languages popl january 
hendren 
taming control flow structured approach eliminating goto statements 
international conference computer languages may 
hecht 
flow analysis computer programs 
north holland 
janssen 
controlled node splitting 
proceedings th international conference compiler construction pages linkoping sweden apr 
volume springer lecture notes computer science 
muchnick 
advanced compiler design implementation 
morgan kaufmann 
unger mueller 
handling irreducible loops optimized node splitting vs dj graphs 
technical report tr institut informatik humboldt university jan 
wang hill knight davidson 
software tamper resistance obstructing static analysis programs 
technical report cs university virginia 
