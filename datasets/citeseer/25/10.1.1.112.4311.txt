referring expression generation search problem bernd iis uni stuttgart de institute intelligent systems university stuttgart stuttgart germany widely explored issues natural language generation generation referring expressions gre entity want refer content referring expression uniquely identifies intended referent 
years number authors proposed wide range algorithms addressing different aspects problem different approaches taken difficult compare contrast algorithms provided meaningful way 
propose characterisation problem referring expression generation search problem allows recast existing algorithms way similarities differences clear 
major component task natural language generation nlg generation referring expressions entity want refer determine content referring expression uniquely identifies intended referent 
dale standard conception task literature follows 
assume knowledge base characterises entities domain terms set attributes values entities attributes example knowledge base represent fact entity value cup attribute type value red attribute colour 

typical context want refer ei call intended referent entities intended referent distinguished generally referred proceedings australasian language technology workshop macquarie university sydney december th 
copyright australian speech science technology association accepted full review robert dale robert dale mq edu au centre language technology macquarie university sydney nsw australia distractors 
example may want distinguish particular cup items context dining table 

goal referring expression generation find collection attributes values distinguish intended referent potential distractors context 
years wide variety algorithms proposed deal specific aspects problem 
example earlier algorithms focussed attributes correspond simple place predicates attempts address relational predicates looks incorporation boolean operators 
consequence considerable body research area difficult establish just different algorithms relate 
represents step consolidating results area aim developing framework different algorithms compared assessed 
structure follows 
section provide brief overview generation referring expressions date 
section borrow standard approach artificial intelligence ai represent problems elegant uniform way see example simon newell russell norvig sketching gre algorithms expressed terms problem solving search 
section explore known algorithms expressed framework 
section discuss approach enables fruitful comparison existing algorithms point ways 
page brief review date task referring expression generation discussed informally earlier nlg particular see winograd mcdonald appelt formally explicit algorithm introduced dale 
algorithm refer full brevity fb algorithm frequently basis gre algorithms 
fb algorithm searches best solution possible referring expressions entity algorithm derives smallest set attributes referent question producing referring expression adequate efficient 
initial algorithm limited application place predicates 
dale introduced constraint procedure generate referring expressions involving relations henceforth ir greedy heuristic guide search 
response computational complexity greedy algorithms reiter dale dale reiter introduced motivated incremental algorithm ia 
adapted algorithm observation people produce referring expressions informationally redundant algorithm uses preference ordering attributes referring expression accumulating attributes rule potential distractor 
years number important extensions ia context sensitive extension cs able generate referring expressions salient entity context boolean expressions algorithm van able derive expressions containing boolean operators cup handle sets algorithm set van extends basic approach sets red cups 
approaches combine algorithms reuse parts algorithms branch bound bab algorithm uses full brevity algorithm able generate referring expressions attributes relational descriptions graph technique 
proceedings australasian language technology workshop macquarie university sydney december th 
copyright australian speech science technology association accepted full review identified believe cited strands research area course algorithms described literature see example horacek bateman stone 
space limitations prevent complete summary intention extend analysis algorithms possible 
algorithms focus generation definite typically embedded higher level algorithm includes cases entity previously mentioned leading initial indefinite referent focus leading pronominal see example dale dale 
gre perspective problem solving algorithms choose useful uniform framework discuss compare algorithms unfortunately difficult variety different approaches taken problem 
wider context ai russell norvig elegant definition general algorithm problem solving search 
search graph consists nodes components state path cost problem represented initial state identifies new states search space queuing method determines order states considered path cost function determines cost reaching state 
framework search strategy determined combination queuing method path 
framework provide characterisation existing gre algorithms terms problem solving search 
conceptualise search space consisting states components description true intended referent set distractor entities description applies intended referent set properties intended referent considered describe referent 
page 
initial state form set distractors initial context set properties true intended referent 

goal state form xp xp term contains set properties intended referent virtue second term set distractors empty set distinguish intended referent contains properties intended referent description 

states search space intermediate states algorithm move adds new properties description 

search strategy carried expand method queuing method characterise specific gre algorithm example fb gh ia 

path cost function allows route search required take account salience weights embody kind heuristic search 
algorithm methods functions need implemented particular algorithms require function 
gre algorithms terms problem solving adopt object oriented formalism allows representation dependencies algorithms means inheritance overwriting 
enable fruitful comparison different gre algorithms want distinguish aspects algorithms true algorithms unique particular algorithm 
section describe elements shared algorithms go describe distinct aspects algorithm turn 
follow code conventions names classes start upper case characters names methods variables start lower case characters 
proceedings australasian language technology workshop macquarie university sydney december th 
copyright australian speech science technology association accepted full review common elements approach allows separate aspects various algorithms remain constant 
previous section definitions node state classes shown definition 
shows definitions initial state goal remain constant algorithms 
definition node state classes class node state path cost cost path getstate return returns state node class state set chosen properties relations set distractors set available properties relations return new state goal empty set distractors goal return true return false components main method represented definition 
takes arguments serve parameters distinguish algorithm expand method create successors state queue method defines insert nodes node queue 
depending order nodes inserted different search strategies realized example nodes inserted front queue search strategy depth nodes inserted queue search strategy breadth nodes queue sorted estimated distance goal search type best 
addition may require number general purpose methods number different algorithms 
method method takes property relations set distractors returns set distractors ruled page definition basic algorithm structure create initial queue single node new node node goal node getstate return node success queue expand node return nil failure machinery place redefine existing algorithms terms core differences correspond essentially different ways expanding search space 
full brevity algorithm distinctive property full brevity fb algorithm computes combinations available properties increasing length may find shortest combination succeeds identifying intended referent 
behaviour captured expand method shown definition 
method creates set successors creating node property pi far checked provided pi rules distractor 
fb algorithm uses breadth search implementation queue shown definition 
consequently solution goal returns true minimal number properties breadth search considers smaller combinations properties 
fb algorithm uses expand method method shown definition invoked call method shown definition 
incremental algorithm distinctive property incremental algorithm reduces computational complexity constructing referring expression considering properties se proceedings australasian language technology workshop macquarie university sydney december th 
copyright australian speech science technology association accepted full review definition full brevity algorithm expand node node getstate foreach node return node node getstate return new node return new node definition breadth queueing queue append nodes return quence predefined ordering available properties 
implementation expand method shown definition provides behaviour 
set properties current state empty property order chosen set properties current state node created new state method 
note method fb algorithm shown definition 
expand method fb algorithm set nodes returned contains node 
main method applies goal predicate node returns true node containing state list properties referring expression returned 
extension ia sets algorithms considered far concerned constructing descriptions individual referents van introduced algorithm extends ia sets 
extension shown terms framework definition 
page definition incremental algorithm predefined constant order properties expand node node getstate choose node return definition set algorithm set referents node describe entity return new node return new node expansion tree ir algorithm note precisely algorithm extension ia algorithm reuse expand method algorithm 
consequently extension requires rewriting method attribute pi chosen rule entities set referents rules entity set distractors property fulfil condition node current state returned process continued ia property 
gre involving relations algorithm gre involving relations ir introduced dale constraint 
search strategy fulfil constraints combination greedy search chooses relation leads smallest set distractors depth search describe entities intended referent entities referenced relations 
strategy explained best means tree shown 
top node represents state relational properties considered additions set chosen properties 
search step consists stages stage choose relation pi rules proceedings australasian language technology workshop macquarie university sydney december th 
copyright australian speech science technology association accepted full review largest number distractors second stage entity referenced chosen relation described repeating process recursively 
done depth manner related entity uniquely distinguished pj intended referent participates chosen 
process continues entities uniquely described success relations chosen failure 
bowl 
choose relation algorithm represented problem solving paradigm definition 
expand method chooses relation rules largest number distractors calls method recursively calls new referent contained relation 
context sensitive gre introduced number extensions ia salience weights order add definite article description salient entity contrastive properties order add properties impose contrast entities relational extension similar spirit form ir algorithm described 
sets algorithm commonality ia algorithm surfaces reuse algorithm expand method method needs rewritten definition 
model variant framework introduce additional methods cf 
contrastive takes referent property pi checks property consideration contrastive 
takes referent set prop page definition involving relations referent expand node node getstate pc nil chosen relation pc rules largest number distractors foreach pc nil pc pc node pc nil return return node node getstate extend description foreach rp rp referents rp nil return nil failure node getstate return new node erties set distractors checks entity set distractors lower salience weight foregoing shown number frequently discussed algorithms generation referring expressions represented common framework 
significant advantages approach 
allows determine algorithms common 
particularly interesting allows assemble collection core functionalities usable variety different approaches gre 
apparent terms general framework example notions states initialisation definition goal state algorithmic pattern shared terms helper routines modularised essence different algorithms 
proceedings australasian language technology workshop macquarie university sydney december th 
copyright australian speech science technology association accepted full review definition context sensitive algorithm referent node node getstate contrastive expresses relation getstate salient rules distractors return new node second possible see differences algorithms really consist 
original forms differences obscured due absence common vocabulary expressing algorithms representing algorithms common framework easier see algorithms differ differences simply due differences notation presentation 
framework problem solving search effectively decomposed algorithms number key elements search represented queuing method expand method encompasses aspects algorithm basic strategy adopted particular kinds referring expressions covered 
furthermore expand method decomposes general strategy expansion example full brevity algorithm incremental algorithm method varies depending kind referring expression targetted 
third allows see clearly logical space algorithms reside see ways combining aspects different algorithms 
simplest clearest respect kind search strategy algorithms 
formulations conflate choice search strategy aspects algorithm subsequent nodes search space com page puted approach separates different facets algorithms easier see choice search strategy independent decision 
consequently example easily experiment variant ir algorithm uses breadth search depth search 
far express widely known algorithms literature 
preliminary examination algorithms van forthcoming horacek suggests relatively straightforward express framework described 
capture algorithms framework intention tease inventory basic constituent elements reassembled integrated different ways derive better understanding nature problem referring expression generation 
appelt 

planning natural language utterances satisfy multiple goals 
ph thesis stanford university 
bateman 

aggregation selecting content generating referring expressions 
proceedings th annual meeting acl 
university 
dale 

generating referring expressions involving relations 
proceedings th eacl pages berlin germany 
dale reiter 

computational interpretations gricean maxims generation referring expressions 
cognitive science 
dale 

cooking referring expressions 
proceedings seventh annual meeting acl pages vancouver british columbia 
dale 

anaphora case discourse driven referring expression generation 
proceedings australasian language technology workshop 
university melbourne 
horacek 

algorithm generating referential descriptions flexible interfaces 
proceedings proceedings australasian language technology workshop macquarie university sydney december th 
copyright australian speech science technology association accepted full review th annual meeting acl 
university madrid 
horacek 

referring objects naturally 
bunt editors third international natural language generation conference pages 
springer verlag heidelberg 


efficient context sensitive generation referring expressions 
information sharing presupposition nlg interpretation pages 
csli 
van erk 

graph generation referring expressions 
computational linguistics 
mcdonald 

natural language generation process decisionmaking constraints 
ph thesis massachusetts institute technology 
reiter dale 

fast algorithm generation referring expressions 
proceedings th acl pages 
russell norvig 

artificial intelligence modern approach 
prentice hall englewood cliffs nj nd edition 
simon newell 

gps program simulates human thought 
computers thought pages 
stone 

identifying sets 
proceedings international natural language generation conference 
ramon 
van 
forthcoming 
graphs booleans generation referring expressions 
bunt editors computing meaning vol 
iii 
dordrecht kluwer 
van 

generating referring expressions boolean extensions incremental algorithm 
computational linguistics 
winograd 

understanding natural language 
academic press 
page 
