dynamic typing dependent types ou gang tan david walker department computer science princeton university cs princeton edu dependent type systems promising tools programmers increase reliability security programs 
unfortunately dependently typed programming languages require programmers annotate programs typing specifications help guide type checker 
shows process programming dependent types palatable defining language programmers fine grained control trade number dependent typing annotations place programs degree compile time safety 
specifically certain program fragments marked dependent case programmer annotates detail dependent type checker verifies compile time 
fragments marked simple case may dependent constraints verified run time 
dependent type systems powerful tools allow programmers specify enforce rich data invariants guarantee dangerous unwanted program behaviors happen 
consequently dependently typed programming languages important tools global computing environments users certify check deep properties mobile programs 
theory dependent types studied decades researchers begun able integrate rich specification mechanisms modern programming languages 
major stumbling block enterprise avoid design programmers place typing annotations programs dependent types trouble worth 
words avoid situation programmers spend time writing specifications guide type checker progress coding computation wish execute 
main solution problem explicitly avoid attempt full verification program correctness focus verification safety properties limited important domains 
xi pfenning zenger focused integer reasoning check safety array code simple symbolic constraints checking properties data types 
similarly language vault deline fahndrich form linear type dependency verify properties state improve robustness windows device drivers 
projects successful annotations required programming languages involving dependent types burden programmers particularly functional languages programmers accustomed complete type reconstruction algorithms 
instance set benchmarks analyzed xi pfenning indicates programmers expect percent code typing annotations order encourage programmers dependent specifications programs propose language design type system allows programmers add dependent specifications program fragments bit bit 
specifically certain program components marked dependent case type checker verifies statically programmer properly maintained dependent typing annotations 
portions program marked simple sections programmers free write code ordinary simply typed programming language 
control passes dependent simple fragments data flowing simply typed code dependently typed code checked dynamically ensure dependent invariants hold 
strategy allows programmers employ pay go approach comes dependent types 
instance prototyping system programmers may avoid dependent types invariants code structure may greater flux time simply need get project ground quickly possible 
may add dependent types piece piece satisfied level static verification 
generally strategy allows programmers achieve better compile time safety assurance gradual typesafe way 
main contributions formalize dependently typed functional language syntax directed type checking algorithm 
language admits programs freely mix dependently typed simply typed program fragments 
second formalize procedure inserting coercions higher order dependently typed simply typed code sections generation programs 
intermediate language programs dynamic checks explicit code completely dependently typed 
proven translation produces wellformed dependently typed code 
words formalize stage certifying compiler language 
translation total admissibility requirement dependently typed interface 
simply typed code fragment linked dependently typed fragment satisfies requirement compiler able insert sufficient coercions guarantee safety run time 
table xi pfenning shows ratios total lines type annotations lines code array benchmarks 
extend system 
ensure dependency interact safely prove correctness strategy mixing dependently typed code 
proof outlines theorems companion technical report 
language syntax overview core system dependently typed lambda calculus recursive functions pairs set pre defined constant symbols 
minimum constants include booleans true false conjunction negation equality 

denote function fix appear free denote 

fix language types includes collection base types include boolean type unit type may include types integer important application consideration 
function types form function argument may appear 
appear abbreviate function type 
note dependent types practical programming languages valid run time object purely compile time index 
reason choice compiler need generate run time tests types 
types contain constraints involving compile time indices generation run time tests may impossible 
specify interesting properties values programmers set types form boolean term involving intuitively type contains values base type equivalent true 
shorthand set type unit appear free essential type defined 
set type type checking algorithm language dependently typed languages involves deciding equivalence expressions appear types 
order type system sound tractable allow just lambda calculus term appear inside types 
particular allowing recursive functions inside types equivalence decision undecidable allowing effectful operations access mutable storage types type system unsound 
avoid difficulties categorize subset expressions pure terms 
purposes limit pure terms variables essential type base type constants simple type bn application pure terms pure terms 
pure term appear valid type 
note effectively limits dependent functions form pure typing annotations unnecessary cases 
non dependent function arbitrary domain type 
term system valid run time expression opposed compile time object 
example basic elements language consider typing context gives types collection operations manipulating integers type int integer vectors type 

int int int int int int bool type nat int length nat nat length sub nat length int takes natural number returns new integer vector length equal specified set type 
subscript operation sub takes arguments natural number integer vector returns component vector index type requires vector bound 
simple dependent typing 
allow programmers control precision type checker language add special commands surface language simple dependent assert informally simple means expression simply typed sufficient annotation statically verifying dependent constraints 
type checker insert dynamic checks ensure dependent constraints control passes dependent section 
instance suppose variable stands function defined dependently typed section requires argument set type int 
application site simple type checker verify integer may able verify nonnegative 
guarantee run time safety compiler automatically inserts dynamic check verify fact statically 
higher types simple checks general coercions data type 
hand dependent directs type checker verify typed dependent constraints consideration 
type checker verify dependent constraints statically fails alerts user 
provide convenient utility function assert checks run time expression produces value type 
commands allow users tightly control trade degree compile time guarantee ease programming 
fewer simple assert commands greater compile time guarantee greater burden programmer terms type annotations 
programmers control potential failures may happen occur inside simple scope assert expression 
instance consider function computes dot product simple dotprod 
fix loop sum sum loop sum sub sub length dotprod vec vec function dotprod takes vectors arguments returns sum multiplication corresponding components vectors 
entire function defined simple scope programmers need add typing annotations 
cost type checker infers integer integer vectors 
information concerning length vectors size integer checker verify sub operations bound 
result compiler insert dynamic checks points 
matter fact checks program crash length vec greater vec 
prevent clients dotprod function calling illegal arguments programmer give dotprod dependent type leaving body function simply typed dependent dotprod length length 
simple 
dotprod vec vec advantage adding typing annotation programmer formally documented condition correct dotprod function 
type checker prove length vec equal vec 
case error detected compile time 
compiler verify function called valid arguments needs insert run time checks vector accesses inside simple scope 
add extra degree compile time confidence programmer verify function body placing completely dependent scope adding appropriate loop invariant annotation shown 
dependent dotprod length length 
fix loop nat length nat sum int 
sum loop sum sub sub length dotprod vec vec new typing annotations simple integer arithmetic reasoning type checker verify dependent function applications function body typed 
code type checks failure run time 
illustrated example compiler freedom insert dynamic checks explicitly verify dependent constraints run time 
kind run tvar valid fail valid fix pure tp tpl tfun pure bool pure self 
type rules internal language time checks example simple careful objects passed dependent simple sections involve functions dependent constraints may appear covariant contravariant positions 
formalize process inserting dynamic checks type coercion judgment discussed section 
formal language semantics give formal semantics language main steps 
define type system internal dependently typed language contains dependent simple assert commands 
second simultaneously define syntax directed type system translation surface programming language internal language 
proven translation generates welltyped internal language terms 
proof constructive translation generates expressions sufficient information intermediate language type checker verify type correctness 
internal language typing 
judgment defines type system internal language 
context maps variables types maps constants types 
rules standard highlight 
fail expression mentioned safely terminate programs may type 
dependent function standard elimination rules 
case function type may dependent argument pure term judged pure pure terms may appear inside types 
second case argument may impure function non dependent type 
type checking tpr statement primary argument pure boolean term argument negation added context checking branch type system rule inspired dependent type systems developed reason modules 
rule applies function returns precise possible type term singleton type 
instance type int context self int produces type int type values exactly equal constant type int int int precise type int int int type functions add arguments 
type system weak sophisticated reasoning variables values 
function defined 
notice definition types pure term may 
self self self self type system includes notion subtyping reasoning dependent constraints occur 
technical report gives complete subtyping rules 
interesting case subtype relation set types 
stated subtype provided true assumptions 
term stands implication boolean terms 
valid valid logical entailment judgment infers truth application domains 
example may infer int 
want limit language particular set application domains leave judgment unspecified obey axioms standard classical logic 
precise set requirements logical entailment judgment may technical report 
surface language typing translation 
give formal semantics surface language type directed translation internal language 
translation form surface language expression resulting internal language expression type 
type checking mode dep sim 
mode dep dependent constraint statically verified mode sim type checker infer dependent constraints statically generate dynamic checks 
important note judgment syntax directed function inputs uniquely determined outputs translation succeeds 
words rules defines type checking translation algorithm surface language 
pure pure returns simple type pure term pure self pure self pure pure valid fix fix pure pure bool pure pure dep valid sim dep assert sim dep simple dep sim dependent 
surface language type checking translation constants variables singleton types pure function precise types 
translate function definition function body translated type 
type may match annotated result type type coercion judgment called coerce possibly inserting run time checks type checking mode sim 
type coercion judgment form function type checking mode context expression type target type generates new expression type output expression equivalent input expression aside possible presence run time checks 
discuss details judgment moment 
function application rules distinguished argument expression judged pure 
pure rule applies argument expression substituted result type 
argument expression impure rule coerces function expression potentially dependent type expression non dependent function type returns type occurrences variable removed 
defined set types follows recursively defined type structures types 
note application rules argument expression type may match function argument type coerced expression right type 
type checking expression branches may different types 
coerced common type 
informally recursively applies disjunction operation boolean expressions set types appear covariant positions applies conjunction operation contravariant positions 
example int int int int int int int int int precise definition technical report 
rules checking translating dependent simple expressions simply switch type checking mode sim dep vice versa 
rule assert uses type coercion judgment coerce expression type 
note coercion called sim mode allow insertion run time checks 
type coercion judgment 
complete rules type coercion judgment 
source type subtype target type conversion necessary 
remaining coercion rules implicitly assume subtype relation hold dynamic checks inserted appropriate places 
note rules require checking mode sim called mode dep coercion judgment just subtyping judgment type checker designed signal compile time error statically prove source subtype target 
sim fail cbase sim eb sim 
eb sim ex sim ex eb sim 
eb sim eb eb fail sim 
sim sim sim 
type coercion coercion base type case cbase straightforward 
expression ensures invariant expressed target set type holds 
runtime failure occur 
help logical entailment judgment type system able infer resulting expression set type 
general directly check run time function code precisely obeys behavioral specification expressed dependent type 
ensure time function called function argument meets dependent type requirement body produces value satisfies promised result type 
strategy sufficient ensuring run time safety 
coercion rules functions designed coerce function type function type deferring checks arguments results function called 
coercion rules function types 
cases expression generates function evaluated preserve order effects 
new function constructed checks argument result inserted necessary 
case new argument type subtype old need convert function body appropriate result type 
checks inserted sure argument type old function expects 
done recursively calling coercion judgment argument convert term ex type 
function type dependent receive ex argument 
dependent function receive ex argument ex contains dynamic checks impure consequently rule uses statement directly check constraint dependent argument possible pure term base type 
check succeeds directly passed function 
cases type system able prove resulting expression target function type 
mutable addition mutable language presents significant challenge 
sharing simple dependent code natural wish assign simple type simple code dependent type dependent code example int ref int ref 
types lead unsoundness 
surface language define classes ref 
invariant typing disallowing transfer piece code supplied assumed types equal 
flexible typing dynamically checked principles recipient responsible writing data maintains invariants donor 
second recipient protect ensuring data reads respects invariants 
internal language implemented pair functions unit unit intuitively function reads underlying coerces value right type second coerces input value type underlying writes coerced value 
define type translation translate surface language types internal language types 
recursively traverses type structure translates appearance dynamic shown 
coercion rules allow translation expression ref expression 
coercion rule ref expression potentially incur runtime failures expression type ref 
details solution companion technical report 
language properties section theorems state formal properties language 
leave details proofs precise definitions technical report 
proved type safety internal language standard dynamic semantics mutable simply write ex effects ex allow type system maintain proper dependency case 
theorem type safety won get stuck evaluation 
proof induction length execution sequence standard progress preservation theorems 
soundness type directed translation surface language formalized theorem 
theorem soundness translation surface language 
expression type appearing replaced dom 
source programs simply typed judged dependent interface satisfies admissibility requirement ref translation total sim mode theorem completeness translation assuming ref ref exist sim informally ref states unchecked type ref appear covariant positions 
reason restriction coerce checked unchecked 
related shown include fragments simply typed code context dependently typed language 
past researchers examined techniques including uni typed code code type scheme code context simply typed language means soft typing 
soft typing infers simple polymorphic types programs general dependent types 
necula developed soft typing system goal ensuring programs contain memory errors 
necula focus problem inferring status pointers presence casts pointer arithmetic safe typed requiring checks seq typed requiring bounds checking dynamic known 
contrast know simple type object pointed may know dependent refinements 
dependent types mix careful ensure system remains sound 
xi pfenning shows maintain soundness singleton types restricting language indices appear singleton types 
approach similar designated subset terms pure terms different accommodate true dependent types 
distinction minor main contribution interaction dependently typed world simply typed world 
walker shows compile simply typed lambda calculus intermediate language enforces safety policies specified simple state ma chines 
consider mixing general dependently typed language simply typed language problems concerning mutable 
earlier abadi showed add special type dynamic represent values completely unknown type typecase operation lambda calculus 
abadi type dynamic simple static type data unknown accessing objects persistent storage exchanging data programs 
thatte demonstrates relieve programmer having explicitly write abadi typecase operations having compiler automatically insert 
contrast thatte consider dependent types instrument programs mutable 
contract checking systems findler felleisen programmers place assertions defined program points procedure entries exits 
findler felleisen specifically looked enforce properties higher order code dynamically wrapping functions verify function inputs conform function expectations function outputs satisfy promised invariants 
strategy handling higher order code similar 
finder felleisen contracts enforce properties dynamically show blend dynamic mechanisms static verification 
acknowledgments 
grateful daniel wang comments earlier version 
arda nsf ccr ccr provided support research 
opinions findings recommendations expressed material authors necessarily reflect views arda nsf 
mart abadi luca cardelli benjamin pierce gordon plotkin 
dynamic typing statically typed language 
acm transactions programming languages systems april 
alex aiken edward wimmers lakshman 
soft typing conditional types 
acm symposium principles programming languages pages january 
cartwright fagan 
soft typing 
acm conference programming language design implementation pages 
cartwright fagan 
practical soft type system scheme 
acm transactions programming languages systems january 
rob deline manuel hndrich 
enforcing high level protocols low level software 
acm conference programming language design implementation pages snowbird utah june 
acm press 
robert bruce findler matthias felleisen 
contracts higher order functions 
acm international conference functional programming pages pittsburgh october 
acm press 
robert harper mark lillibridge 
type theoretic approach higher order modules sharing 
acm symposium principles programming languages pages portland january 
george necula scott weimer 
ccured type safe retrofitting legacy code 
acm symposium principles programming languages london january 
acm press 
ou gang tan david walker 
dynamic typing dependent types 
technical report tr department computer science princeton university 
thatte 
quasi static typing 
seventeenth acm symposium principles programming languages pages january 
david walker 
type system expressive security policies 
seventh acm symposium principles programming languages pages boston january 
hongwei xi frank pfenning 
eliminating array bound checking dependent types 
acm conference programming language design implementation pages montreal june 
christoph zenger 
indexed types 
theoretical computer science volume pages 
elsevier november 
