multiple inheritance bjarne stroustrup bell laboratories murray hill new jersey multiple inheritance ability class base class super class 
language multiple inheritance supported program structured set inheritance lattices just set inheritance trees 
widely believed important structuring tool 
widely believed multiple inheritance complicates programming language significantly hard implement expensive run 
demonstrate conjectures true 
describes implementation multiple inheritance mechanism provides rudimentary explanation multiple inheritance general 
particular variation general concept implemented primarily explained term implementation 
bit background multiple inheritance implementation technique multiple inheritance scheme implemented introduced stages basic scheme multiple inheritance basic strategy ambiguity resolution way implement virtual functions 
handling classes included inheritance lattice programmer choice multiply included base class result sub objects created 
details construction objects destruction objects access control 
complexities overheads introduced multiple inheritance scheme summarized 
multiple inheritance consider writing simulation network computers 
node network represented object user computer object communication line object class line 
way monitor simulation real network structure display state objects various classes screen 
object displayed represented object 
objects control display manager ensures regular update screen data base 
classes terminal switch derived class task provides basic facilities routine style behavior 
objects control task manager scheduler manages real processor 
ideally task displayed classes standard library 
want display terminal derived 
derived 
single inheritance language original version simula ways solving problem deriving task displayed deriving displayed earlier version european unix users group conference helsinki may 
revised match multiple inheritance scheme arrived experimentation thought 
information see 
published may issue users journal 
rights reserved 
ideal create dependency library versions fundamental independent concepts 
ideally want able choose saying terminal task displayed line displayed task switch 
ability express class hierarchy derive class base class usually referred multiple inheritance 
examples involve representation various kinds windows window system representation various kinds processors compilers multi machine multi environment debugger 
general multiple inheritance allows user combine independent independent concepts represented classes composite concept represented derived class 
common way multiple inheritance designer provide sets base classes intention user creates new classes choosing base classes relevant sets 
programmer creates new concepts recipe pick 
window example user specify new kind window selecting style window interaction set interaction base classes style appearance set base classes defining display options 
debugger example programmer specify debugger choosing processor compiler 
multiple inheritance concepts combined concepts need classes represent combined concepts 
single inheritance need replicate information provide classes 
single inheritance handles cases 
usefulness multiple inheritance avoiding replication hinges importance examples values larger 
appears examples uncommon window debugger examples described typically larger 
implementation strategy discussing multiple inheritance implementation describe main points traditional implementation single inheritance class concept 
object class represented contiguous region memory 
pointer object class points byte region memory 
compiler turns call member function ordinary function call extra argument extra argument pointer object member function called 
consider simple class int void int object class look int information placed integer specified user 
information relating non virtual member functions placed object 
call member pa pa transformed compiler ordinary function call data hiding issues ignored simplify discussion shorten examples 
examples illegal 
changing examples legal specifiers appropriate places 
published may issue users journal 
rights reserved pa objects derived classes composed concatenating members classes involved class int void int class int void int class int void int housekeeping information added object int int int compiler knows position members object derived class exactly object simple class generates optimal code cases 
implementing virtual functions involves table functions 
consider class int virtual void int virtual void int virtual void int class int void int class int void int case table virtual functions contains appropriate functions class pointer placed object 
looks int vtbl int int call virtual function transformed indirect call compiler 
example pc pc pc pc multiple inheritance mechanism preserve efficiency key features implementation scheme 
multiple base classes classes class 
class 
design third base classes class 
means acis ab 
equivalently possible side effects constructors destructors access global variables input operations output operations 
published may issue users journal 
rights reserved class 
object layout object laid contiguous object part part part accessing member classes handled exactly compiler knows location object member generates appropriate code spurious indirections overhead 
member function call calling member function identical done single inheritance case 
calling member function ac slightly involved pc pc bf assume bf member member named bf inherited naturally bf expects ab pointer 
provide constant added pc 
constant delta relative position part delta known compiler transforms call bf char pc delta overhead addition constant call kind 
execution member function function pointer points ofc pc part bf part part note space penalty involved second base class minimal time penalty incurred call 
published may issue users journal 
rights reserved ambiguities consider potential ambiguities public class int ii class char ii class members ii andb ii 
pc pc ii error ii ii illegal ambiguous 
ambiguities resolved explicit qualification pc ii ii pc ii ii similar ambiguity arises functionf class void class int class pc pc error pc pc alternative specifying base class call define call base class functions 
example class int return pc pc called solution usually leads cleaner programs localizes specification meaning name objects derived class declaration derived class 
casting explicit implicit casting may involve modifying pointer value delta pc pb pb pc pb char pc delta pb pc pb char pc delta pc pb error cast needed pc pb pc char pb delta casting yields pointer referring appropriate part object 
published may issue users journal 
rights reserved pc part pb part part comparisons interpreted way pc pb pc pb equivalently pc pb char pc delta pb equivalently pc char pb delta note casting operator produced value operator simply reinterpreted bit pattern 
example machines int causes code executed float int equal 
introducing multiple inheritance described introduce cases char char pointer type 
note base class ofc zero valued pointers pointers value zero cause separate problem context multiple base classes 
consider applying rules zero valued pointer pc pb pb pb pc pb char pc delta pb 
second test fail value char delta 
solution elaborate conversion casting operation test pointer value pc pb pb pb pc pb pc char pc delta pb 
added complexity run time overhead test increment 
virtual functions naturally member functions may virtual class virtual void class virtual void virtual void class void pa new pb new pc new published may issue users journal 
rights reserved pa pb pc calls 
follows directly definition derived 
implementation entry toc pointer point 
general known compile time part compiler subtract constant delta 
consequently delta stored run time 
calling virtual function obvious place store table virtual functions vtbl 
reasons explained delta stored function entry form struct vtbl entry void fct int delta object look vtbl part vtbl part delta part pb call register vtbl entry vt pb vtbl index vt fct char pb vt delta note object pointer may adjusted point correct sub object looking member pointing 
note combination base class derived class vtbl 
example vtbl different vtbl separately allocated implies general object derived class needs vtbl base class plus derived class 
single inheritance derived class share vtbl base example object plus 
int type stored delta limits size single object bad thing 
implementation uses fields structure shown virtual function call mechanism see 
published may issue users journal 
rights reserved ambiguities demonstrates problem class virtual void class virtual void class void pc new pc pc pc explicit qualification suppresses virtual calls really invoke base class functions 
problem 
usually 
anf need explicit qualification explicit qualification necessary correct 
trouble occur function added program contains explicitly qualified names 
case wonder want declare function virtual call explicit qualification 
iff virtual adding anf derived class clearly correct way resolving ambiguity 
case declared handled resolving ambiguities point call 
consider class virtual void class virtual void class error needed pc new pc ambiguous pa pc implicit conversion pa ambiguous calls potential ambiguity call detected point virtual function tables constructed 
words declaration illegal allow calls pa unambiguous type information lost implicit coercion call object ambiguous 
multiple inclusions class number base classes 
example class 
illegal specify class twice list base classes 
example class 
error reason restriction access member ambiguous illegal restriction simplifies compiler 
multiple sub objects class may included base class 
example class 
class 
class 
class 
cases multiple objects base class part object derived class 
example object forb published may issue users journal 
rights reserved part part part part part useful 
think link class simula style linked list 
case list list 
naming assume example 
refer tol obvious answer explicit qualification void nicely provided inherited 
necessary qualification syntax extended allow explicit void casting consider example 
fact copies casting explicit implicit andc ambiguous consequently illegal pc new pl pc error ambiguous pl pc error ambiguous pl pc pc pl error ambiguous pc pl error ambiguous pc pl containing don expect problem 
place surface cases bs handled functions expecting anl cases acceptable despite ana extern standard function aa cc aa fine cc error ambiguous cc fine casting explicit disambiguation 
published may issue users journal 
rights reserved virtual base classes base base classes give rise separate sub objects relate ways different 
call independent multiple inheritance 
proposed uses multiple inheritance assume dependence base classes example style providing selection features window described 
dependencies expressed term object shared various derived classes 
words way specifying base class give rise object final derived class mentioned base class times 
distinguish usage independent multiple inheritance base classes specified virtual class aw virtual 
class bw virtual 
class cw aw bw 
single object shared included cw result deriving cw aw bw 
giving rise unique object derived class base class behaves exactly non virtual base class 
property derivation specified aw bw property 
base inheritance dag refers object 
class may normal virtual base inheritance dag class virtual 
class virtual 
class 
class 
sub objects virtual normal virtual base classes provide way sharing information inheritance dag pushing shared information ultimate base class 
virtual bases improve locality 
way viewing classes derived common virtual base alternative composable interfaces virtual base 
representation object representing virtual base placed fixed position relative aw objects 
consequently pointer stored objects directly accessing object allow access independently relative position 
example aw paw new aw bw new bw cw pcw new cw paw 
aw part 
part published may issue users journal 
rights reserved 
bw part 
part pcw 
aw part 
bw part cw part 
part class arbitrary number virtual base classes 
cast derived class virtual base class virtual base class derived class 
involves virtual base pointer done information available run time 
storing back pointer enclosing object non trivial general considered unsuitable alternative strategy dynamically keeping track objects member function invocation operates 
uses back pointer mechanism warrant added implementation complexity extra space required objects added run time cost initialization 
information necessary cast virtual base class derived class part needed perform virtual call function declared virtual base overridden derived class 
absence back pointer compensated defining calling appropriate virtual functions class virtual void 
class virtual void 
void casting call explicit casting bets avoided technique leads better code cases 
virtual functions consider published may issue users journal 
rights reserved class virtual void virtual void virtual void virtual void 
class aw virtual void 
class bw virtual void 
class cw aw bw void 
cw pcw new cw pcw bw pcw aw pcw cw aw pcw bw acw object look 
aw part 
bw part cw part vtbl bw delta bw delta aw delta part cw delta general delta stored function pointer delta class defining function minus delta class constructed 
virtual function re defined aw bw cw ambiguity results 
ambiguities easily detected point constructed 
rule detecting ambiguities class lattice precisely directed acyclic graph dag classes re definitions virtual function virtual base class occur single path dag 
example drawn dag 
aw bw 
cw 
note call path dag virtual function may result call function re defined path happened call aw pcw example 
published may issue users journal 
rights reserved virtual bases programming virtual bases trickier programming non virtual bases 
problem avoid multiple calls function virtual class desired 
possible style class protected stuff public 
class provides protected function doing stuff derived classes public functionf interface general public class public virtual protected stuff public 
derived class stuff calling base classes stuff calling class public virtual protected stuff public 
particular style enables class indirectly derived twice class public public public virtual protected stuff public 
method combination schemes ones lisp systems multiple inheritance considered way reducing amount code programmer needed write cases 
schemes appeared sufficiently simple general efficient warrant complexity add 
published may issue users journal 
rights reserved constructors destructors constructors base classes called constructor derived class 
destructors base classes called destructor derived class 
destructors called reverse order declaration 
arguments base class constructors specified class int class int class virtual int int 
constructors executed order appear list bases virtual base constructed classes derived 
virtual base constructed derived class 
example class int 
class virtual int 
class virtual int 
class int 
access control int int examples ignore access control considerations 
base class may 
addition may 
example class private default non virtual default virtual private default virtual public public non virtual default public virtual 
note access specifier applies single base class 
example class public 
declares public private 
virtual class accessible path accessible paths private derivation 
overheads overhead scheme subtraction constant member base class included second subsequent base 
word function hold delta 
memory subtraction call virtual function 
memory subtraction access base class member virtual base class 
note overheads incurred multiple inheritance overheads incurred class virtual functions virtual function call multiple inheritance 
overheads incurred members second subsequent base accessed outside member function virtual base class incur special overheads accessing members class 
implies pay impose published may issue users journal 
rights reserved minor overhead virtual function mechanism single inheritance 
overhead avoided alternative implementation multiple inheritance don know implementation faster multiple inheritance case portable scheme described 
fortunately overheads significant 
time space complexity overheads imposed compiler implement multiple inheritance noticeable user 
simple 
language facility hard 
lots rules 
subtle differences rules 
inability automatically detect common errors 
lack generality 
deficiencies 
cases lead difficulty learning remembering causing bugs due misuse misunderstanding 
cases cause bugs confusion programmer tries circumvent rules simulate missing features 
case causes frustration programmer discovers mistakes hard way 
multiple inheritance scheme provides ways extending class name space base class 
virtual base class 
ways creating specifying new class ways creating different kinds classes 
rules resulting classes depend name space extended ambiguities illegal 
rules members single inheritance 
visibility rules single inheritance 
initialization rules single inheritance 
violations rules detected compiler 
words multiple inheritance scheme complicated existing single inheritance scheme extend class name space base class 
extend class name space ways way 
addition care taken take sharing account programming member functions classes virtual base classes see section 
appears minimal constitutes attempt provide formal comparatively safe set mechanisms observed practices needs 
think scheme described simple possible simpler potential source problems exists absence system provided back pointers virtual base class enclosing object 
contexts problem pointers sub objects extensively 
affect programs explicit casting non object pointer types char extra linguistic tools debuggers garbage collectors 
hopefully normally manipulation object pointers follows consistent rules explained invisible user 
multiple inheritance reasonably simple add way easy 
multiple inheritance hard implement requires minor syntactic extensions fits naturally static type structure 
implementation efficient time space 
compatibility affected 
portability affected 
published may issue users journal 
rights reserved long discussion stein university oslo norway 
devised scheme implementing multiple inheritance simula pointer manipulation addition constants 
describes 
tom jim coplien brian kernighan andy koenig larry doug mcilroy jonathan supplied valuable suggestions questions 
tom pi case study object oriented programming 
oopsla proceedings pp september 
stein efficient implementation simula classes multiple prefixing 
research report june university oslo institute informatics 
stan lippman bjarne stroustrup pointers members proc 
usenix conference denver october 
bjarne stroustrup programming language 
addison wesley 
bjarne stroustrup objet oriented programming 
proc 
ecoop springer verlag lecture notes computer science vol june 
bjarne stroustrup evolution 
usenix computing systems vol fall 
daniel weinreb david moon lisp machine manual 
symbolics 
appendix original multiple inheritance design conference helsinki may contained notion delegation 
briefly user allowed specify pointer class base classes class declaration object designated exactly object representing base class 
example class int void class int meant members object pointed accessed exactly members void object initialized gul agha overview actor languages 
sigplan notices pp october 
published may issue users journal 
rights reserved int int concept looked promising representing structures require flexibility provided ordinary inheritance 
particular assignment delegation pointer reconfigure object run time 
implementation trivial run time space efficiency ideal 
unfortunately user mechanism suffered serious bugs confusion 
delegation mechanism included 
suspect fundamental problem variant notion delegation functions delegating class override functions class derived 
allowing overriding odds strategy static type checking ambiguity resolution consider case object class virtual functions delegated objects different classes 
published may issue users journal 
rights reserved 
