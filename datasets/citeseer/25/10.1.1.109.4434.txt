formal molecular biology vincent danos december laneve language formal proteins calculus introduced 
interactions modeled domain level bonds represented means shared names reactions required satisfy causality requirement monotonicity 
example simplified signalling pathway introduced illustrate standard biological events expressed protein language 
comprehensive example operon developed bringing confidence formalism considered modeling language 
finer grained concurrent model calculus considered interactions binary 
show embed coarser grained language property call self assembly 
show finer grained language encoded calculus standard foundational language concurrency theory 
independent proposals fontana regev commonplace think formalisms derived process algebras concurrency potentially useful formal layout analysis biological networks molecular level 
restate goals relatively movement ideas explaining contribution particular 
cell moving pieces implementing life 
sugar collected processed power supply gather information 
better cell fed better computes 
signals detected collected compared decisions taken 
better cell computes better feeds environment 
life needs sugar process information needs information process sugar 
left wondering meaning life programming lesson understood computation cell concurrent asynchronous 
synchronization needed instance detect presence significant pps cnrs universit paris 
department computer science university bologna 
amounts signals time implemented 
second systems semantics depends probabilistic response remains deterministic macroscopic level 
values manipulated continuous discrete states choices implemented various levels behaviours obtained heavy feedback mechanisms 
delays involved computation steps partly reversible rates reactions influenced global parameters consequence local environments created means compartments 
bio computing radical departure ordinary computational models sequence actions chosen data discrete control centralized coarsely distributed design principles seek optimize efficiency fairly simple defined tasks 
considering breakthroughs experimental biology may time position understand computational models embedded cell develop symbolic biology time manageable theoretical object plausible idealization 
excitement domain concurrency 
new process algebras directed biological systems meant treat aspect specificities bio computing 
reversible ccs giving means directly express reversibility stochastic calculus equipped quantitative contextual semantics giving access simulations bio ambients membrane calculi dealing dynamics various cellular compartments 
proposed version calculus specific purpose representing protein interactions :10.1.1.109.4434
works refined version language 
calculus proteins language protein protein interactions essentially particular restricted kind graph rewriting operating graph sites lafont interaction nets 
bindings explicit formal protein node fixed number sites complex connected graph built nodes 
biological reactions modeled kinds rewriting rules monotonic antimonotonic 
kind represents say reactions low energy bonds formed various compounds 
kind symmetric represents 
respect reaction formats restrictive preceding version language :10.1.1.109.4434
expressive allow non linear reactions possible represent important reactions synthesis degradation 
significant rise expressive power low syntactic price 
illustrate gain expressivity typical signal transduction pathway 
comprehensive formalization effort done previously 
simplified relative calculus vast network reactions controlling mammalian cell cycle formalized kohn compilation 
take note signal transduction systems synthesis taken output doesn need modeled 
cell cycle things different 
synthesis plays major role chief regulators cell cycle called influencing synthesis complicated cascade interactions 
really describe inside model 
principle formalization recast language provided detail domain level interactions 
choose second example simpler documented system operon 
remaining tractable set reactions involved offers selection events finds bigger mammalian cell cycle control 
examples serve practical proof expressivity new version calculus second puts additional expressivity power 
difference previous version algebraic notation keeping graph rewriting presentation 
process algebraic notation closer multiset calculus proposed earlier allows flexible precise syntax reactions :10.1.1.109.4434
process algebra basic reactions place derive behaviour system means contextual rules 
possibility applying pattern basic reactions different contexts brings element prediction language 
respect calculus equivalent flat reaction centric view biological systems 
bringing notion contextual quantitative operational semantics la priami stochastic calculus evident unexpected evolutions system observed 
don quantitative semantics interesting issue remains explored 
self assembly simple close biological interactions language may restricted reactions considers plausibly taken atomic events 
biology decentralized computational scenario matter non local graph rewriting takes time accurately takes consensus 
implement consensus problem name self assembly problem 
specific case informal question higher level description calculus synthesize processes interacting proteins purely decentralized way binary synchronization means communication proteins going behave original higher level description 
second contribution rigorous sense question solve positive language 
calculus process language suited formalization self assembly introduce intermediate language calculus allows readable formulation solution problem 
finer grained view pro interaction calculus introduces interesting right argue biologically plausible 
basic entities called agents state may create names communicate binary interactions 
encode higher level reaction uses family binary interactions indexed edges directed acyclic graph spanning reactants 
graph guaranteed exist monotonicity condition 
correctness obtained definition simulation follows geometric construction 
new rule format compares previous format terms simplicity simulation :10.1.1.109.4434
calculus far graphic notation calculus provide embedding witnessing concluding section 
composing encodings gets distributed non deterministic implementation calculus current implementation calculus instance nomadic pict jocaml 
model propose supported precise notation descriptive capabilities reducible protein centric purely local language interactions calculus 
properties models evaluated 
structure opening section informal presentation language section defines calculus properly zooms particular format reactions interested 
section develops small example signal transduction pathway illustrates syntax bigger known example operon 
turns matter self assembly 
section devoted presentation lower level language state problem section presents actual embedding 
section proposes embedding lower level language calculus 
visual notation pictorial formal calculus 
presentation formal model right choose working notation section different calculus graphs 
want express language 
short answer combinatorics interaction proteins 
proteins involved network reactions implementing various high level tasks sugar chain energy stocks detection external signals stress growth death 
triggering appropriate behavioural modifications coordination internal signals controlling various phases cell cycle 
main purpose molecular biology identify tasks relate implementation molecular level 
going details protein interaction finds sub components commonly called domains determine proteins bind subsequently interact 
interactions may result changes folding participating proteins changes memorized 
various ways implemented common phosphorylation 
studied protein called known phosphorylation sites able bind proteins form various binary complexes resulting daunting combinatorial space 
depending way proteins folded space domains active behaviour protein different 
free domains global folding determines protein assemblage capable 
domains folding states sites 
sites may bound free free ones may visible hidden 
model bindings explicit internal states expressed just saying free sites visible 
proteins complexes 
draw proteins boxes sites written boundary identified distinct natural numbers 
written box 
see picture protein 
visible site hidden site bound site protein complex proteins may assembled protein complexes simply complexes 
complexes drawn connecting bound sites proteins building connected graphs represents compound connected biologically complex bundle proteins connected low energy bounds 
examples complexes shown 
biological reactions 
collections proteins complexes called solutions 
solutions evolve means reactions occur sub solution special shape called 
happens reactants change yield new sub solution 
examples reactions self ring complex double contact complexes activation rewriting rule biologically plausible 
stipulate section exact set reactions interested discuss informally 
reaction certainly set activation won rationale choice activation obviously needs physical contact take place 
reaction atomic event told story 
way activations biological systems usually product called substrate modified reaction called enzyme kinase catalyst left unchanged 
kinetic analysis reactions embodied formula explicitly mentions intermediate state substrate catalyst bound 
reasonable take kind reaction primitive 
roughly language language mean reaction inverse complex smaller parts 
subtle issues 
said restrictive allow linear reactions say reactions basic components preserved 
express important reactions synthesis degradation allow limited form duplication erasing relax somewhat strict preservation principle 
second reactions edge flipping reaction really lack monotonicity 
edge flipping reaction mean 
looks picture sees product reaction connected edge erased reach product 
total number edges constant intermediate unconnected state compounds edge erased phenomenon consequence fact model sites class citizens syntax 
sites represent resources bindings bindings constrained availability sites constraint plays important role biological causality see example pathway 
speaking causality monotonicity edges created erased reaction embodies causality constraint 
happen things contact 
stronger virtual connectedness condition imposing earlier version calculus 
asking temporary super complex formed reactants 
new choice temporary complexes explicit left hand side right hand side 
see new condition strictly stronger look activation example 
virtually connected left hand side pairs visible sites new requirement 
new condition natural comes micro implementation calculus calculus complex walked binary interactions check existence case build case 
observe reactions represented active sites left hand sides sites tested modified rule 
meaning sites kept intact reaction 
convenient notation introducing element pattern said doesn satisfy matching evaluation context operational semantics 
big deal computer scientist knowledge direct biological modeling language simple form contextual operational semantics 
calculus develop algebraic notation workable syntax graphs introduced previous section 
wonder alternative notation needed useful 
point favor new notation gives precise description classical style calculus leading nice reasoning principles 
having name creator new syntax allows clean syntactic treatment edge creations right hand sides reactions 
doesn bother freshness conditions defining operational semantics name creation structural congruence 
side observation interest concurrency theorists ordinary material process algebras just parallel composition name creation pretty minimal algebraic subset 
communication done la join means reactions additional edge structure messages imposed reactions 
minor advantage comes traditional notation tools specifically meant manipulate syntactic structures language proposed cardelli gardner ghelli provide natural environments development models second point having target intermediate language compiled calculus source language displayed syntactic styles eases translating 
point new notation place may consider advanced notions rewriting hypergraph rewriting interaction net rewriting explore 
instance asking advanced rewritings translatable words may implemented means binary interactions 
don worth pursuing 
course point syntax intuitive visual started introduced visual notation 
syntax syntax calculus relies countable set protein names ranged countable set edge names ranged signature map written natural numbers protein name number sites pair accordingly called site interfaces 
interface partial map similar symbols 
domain range interface set names free written usually ranged respectively denoted obtained deal interfaces finite domain 
empty interface denoted site said visible interface hidden free visible hidden bound interface uniquely decomposes disjoint sum called free interface interfaces depict partial states sites 
state depicted may partial may contain called state interface 
choice terminology meant insist fact interface going determine interaction capabilities protein interface 
example 
declares site visible defined interface map site hidden site bound name write simply take note way writing things operation represents disjoint sum terms sum disjoint domains 
proteins solutions 
syntax table defines solution empty solution protein interface domain group solutions solution prefixed new name constructor solution empty solution protein group new table syntax calculus convenient abbreviation write new operator binder scope binder inductively defines set free names solution occurrence bound occurs sub solution solution closed occurrences names scope binder bound equivalently instance occurrences bound occurrence outside bound particular scope closed 
structural congruence notation certainly precise rigid separates solutions don want distinguish semantic reason 
introduce equivalence relation solutions called structural congruence 
definition structural congruence written equivalence closed syntactic constructions containing equivalence injective renaming bound variables associative choice symbol suggests commutative neutral element satisfying scope laws coming back example reader want check observe property holds general free names invariant structural equivalence 
intuitively equivalent solutions describe underlying object 
graph likeness far language describe general objects just sites 
instance may write interesting study said natural interpretation hypergraphs 
reactions defined terms encode sort hypergraph rewriting 
primarily interested concern home simple notation expressive representing biological interaction 
definition graph likeness solution said graph free names occur twice binders bind zero occurrences 
addition free names occurs exactly twice say strongly graph 
bound names supposed represent edges edge endpoints second condition speaks 
condition just needs cope solutions free names 
take note check point reactions defined properly preserve graph likeness 
worth pointing relationship graph sites preceding section algebraic notation developed 
translation uses intermediate constructs graphs sites labeled names 
definition function graph solutions graphs sites 

graph single node labeled sites bound sites labeled free sites state pre scribed union graph sites labeled name connected edge common name erased 
easy see solutions closed graph meaning structural equivalence graph solutions clear equivalent denoting graph sites 
turn graph closed graph solution 
informally node protein solution edge fresh name put edge ends appropriate sites expression closed new operators edges 
easy see second construction inverse closed graph solutions 
term calculus really textual notation graphs case graph solutions 
instance structural congruence define connectedness complexes connected connected connected connected connected connected 
complex closed connected graph solution readily proved complex seen examples correspond terms biological reactions keep track interfaces construct growth relation partial interfaces 
relation parameterized set names written represent superset edges grown reaction 
written defined inductively clauses table 
reflex hv switch create vh switch table growth relation suppose derive switch clauses may toggle free sites visible hidden create clause may bind sites visible formal intuition hidden sites accessible binding visible way available 
important transitive relation despite notation 
deduce unintended get access hidden sites 
domain sites bound freed created edges belong separated names specified reflex clause 
typically sum partial interface range related partial interface domain 
writing biological reactions great convenience address part proteins changed checked reaction specifying interface 
define pre protein partial interface similarly define pre solutions combinations pre proteins obtained table 
said extend growth relation groups pre proteins shown table 
take note nil table extended growth relation synth group definition applies pre solutions new 
growing means creating edges possibly creating proteins synth clause 
observe clause requires newly created protein complete interface interface new names asks edges lemma pre solutions proof easy induction growth relation shows analog statement interfaces second induction shows preserved pre solution extension 
purpose synth clause see express synthesis mechanisms dual relation express degradation 
definition pre solutions said monotonic reaction graph connected 
said anti monotonic reaction dual monotonic 
reaction monotonic antimonotonic called biological reaction referred respectively reactants products 
direct consequence lemma free names preserved biological reactions 
sense refer common free names free names reaction denoted growth condition sure common free names connect sites reactants products 
consequence edges created monotonic reaction deleted antimonotonic syntactically bound 
just recap basic principle bound names correspond created resp 
deleted edges free names correspond edges left intact 
reactions syntactically reversible define monotonic reactions embed reversibility definition transition system 
intuitive kinds reactions directly syntax 
choice monotonic format reactions embodies postulate protein interaction 
accordance detailed descriptions biologists give systems meshes taken atomic step kinetic analysis biochemical reactions 
course argue reactions atomic lower level biology blind reactions decomposed binary interactions 
problem address section 
way constrained reactions asking reactants products strongly graph 
examples developed section devoted biological systems seriously additional expressivity choice allows 
explore matter self assembly turn right choice 
relaxing format 
considered constrained reactions mixing monotonic features edge created antimonotonic ones edge deleted 
higher level granularity reactions taken basic decomposed monotonic reaction followed antimonotonic notion may depend derivation presence synthesis 
symmetries derivations 
example derived ways depending right synthesized 
corresponding monotonic reaction applied give different results 
completely accurate get rid ambiguity order implementation instance incorporate derivation definition reaction 
intermediate product decomposition making explicit connected reasonable consider sequence synchronous composition 
case edge flipping reaction know section different isn free site bind perform similar de composition 
reaction decomposed antimonotonic reaction monotonic intermediate connected product guarantee reactions applied sequence 
synchronisation needs specific control mechanism 
biological transition systems renaming finite partial injection identity maps definition matching monotonic reaction says pair solutions matches written exists renaming partial interfaces 


matching defined symmetry antimonotonic rules condition sure created names extensions second condition merely saying renaming extensions instantiate worth mentioning solutions interfaces complete ones result non graph created names bound graph appear exactly twice uses occurrences name doesn really ask dealing graph solutions clearer prove just format definition respects graph likeness 
second inclusion monotonicity 
equivalent view matching possible 
derivations defined tables renamed injective renaming extended picking larger interfaces reflex clauses 
defines defined match ciation preorder derivations derived way derivation preorder 
condition definition taken care reflex clause second automatically satisfied preorder 
lemma monotonic reaction pair matching solutions occurrences free names bijection graph proof suppose graph consider name occurring condition graph occurrences come partial injection means exactly occurrences occurrences 
occurrences created introduced create clause synth clause clause asks names introduced derivation inherited reflex clause provided interface extension cases occurrences exist names deleted monotonic reaction 
suppose conversely graph occurs name bound occurrences provided reflex clause interface extension cases occurrences exist occurrences created name created monotonic reaction bound 
observe argument doesn connectedness assumption completely different reasons explained length preceding section 
examples matching 
match monotonic reaction somewhat subtler example deal free bound variable notice may overlap bound names may free names match definition set biological reactions associated system set solutions called transition relation pair binary relation mon new struct group contextual rules allow focus reacting parts system 
definition may give example goes wrong violates side condition create clause group mon resulting non graph right hand side 
done properly definition reactions able extend lemma show example happens proper reactions 
proposition suppose occurrences free names bijection graph proof basic case corresponds lemma remains prove contextual rules preserve property 
new rule clearly properties graph free name occurrence invariants structural equivalence noticed earlier 
group rule obviously preserves conditions 
graph iff occurs twice struct rule reactions accompanying transition systems preserve sense restrict graph solutions going 
formal biological systems defined language idealized protein interactions thing needs examples measure language performs description typical biological systems 
example protein protein interaction language passes expressivity test problem 
second example richer simple model obtained meant assessment language stage 
modeling practice refine picture give better sense extensions needed 
signals steps signal cascade triggered growth factor egf detailed give minute description going form growth factor egf binds receptors egfr known egf receptors cross tyrosine kinase sites done activate second binding site bind adapter protein shc activate 
signal goes passes proteins description 
keep things readable rename signal receptor adapter biological description choose respective arities 
particular site stands receptor tyrosine kinase site 
formal rendering signal receptor interaction cascade key constraint dormant capacity site woken reaction cascade possible 
reactions run minimal interesting system shown table starting quiescent state hidden receptor active right away hidden active 
nature chosen simpler design letting signal activator kinase resorting receptor activation 
solution receptor suspended state activation capability triggered signal 
constraint table run cascade 
design solution reasonable just matter chance don know 
may sees calculus expresses causality involved transduction precise natural way 
operon turn comprehensive example 
escherichia coli studied organisms glucose glu input important metabolic pathway leading production acid eventually atp major energy currency cell 
isn glucose coli feed alternative food 
lac coli trigger synthesis gal turn glucose helps bigger enter cell 
flows cell back business 
need control happens may switch back ordinary behaviour feed directly glucose 
description molecular level implementation control major discoveries early molecular biology 
occasion review typical molecular events test expressiveness language discuss possible extensions 
molecular control 
describe molecular control biological terms 
said particular system studied lot questions open happy somewhat simplified description 
reader curious learn may refer kimball biology pages 
operon sequence genes transcribed collectively repressor protein block transcription genes 
contains genes coding respectively gal repressor protein aptly named rep device cell wants turn handle glucose 
upstream operon small regions dna site complex cap camp bind positive influence operon transcription promoter site transcription machinery binds opens dna helix proceeds strand transcription process overlapping promoter called operator site rep bind prevent recruitment blocking transcription operon synthesis associated proteins 
absence lac rep binds dna switches operon 
likewise abundant presence glu production camp inhibited complex cap camp doesn bind operon 
turn low level glu cap camp binds 
needs certain amount lac gal produced 
form binds rep changes shape repressor dna activating operon 
sudden change glucose environment coli produce gal reaches mass enormous considering water accounts total mass important food 
formalization 
mentioned different molecules involved may turn reactions 
direction best sense respect intended behaviour fact reversible 
ease reading sites explicit names keep things short don write obvious synthesis reaction rep cap degradation reactions participating products 
operon synthesis cap rep syn syn rep cap syn syn lac lac syn syn lac lac syn syn lac lac basic switching mechanism expressed synthesis begins repressor absent auxiliary cap 
shorten reaction test bound cap site reaction graph strongly occurs side 
products competing cap specific binding cap 
reactions composed single monotonic reaction kind see discussion relaxing format preceding section 
operon control rep rep rep rep cap camp cap camp cap cap cap binds independent occupancy state sites 
hand rep hiding sites mutually exclusive 
camp rep rep rep rep regulations cap rep camp cap rep rep rep rep rep descriptions said able complex rep rep landed dna dna 
expressed means subsequent 
way directly reaction rep inert hiding binding capability 
gal activity lac lac lac lac gal lac loaded loaded loaded lac lac gal loaded loaded gal lac loaded rep rep reaction effect lac inside cell 
encode site state 
class notion membrane written replace membrane variant lac lac gal lac lac gal direct account doing 
extending calculus membranes idea looking forward adapt existing membrane calculi 
reactions decomposing action beta enzyme 
monotonicity principle forces bit introduce intermediate somewhat imaginary state loaded enzyme loaded decided smaller glu gal form 
direct solution write alternative reactions lac lac gal gal lac lac rep consider taken account monotonicity constraints 
mild adaptation language amounts adding new inference rule growth relation applies sense small molecules different set bio chemical interactions larger proteins 
reader wonder mechanism glu reduces camp level 
mechanism known matter discussion camp model correct 
points shortcoming language wants build actual models explicit molecular mechanism able incorporate knowledge model 
calculus turn issue implementing calculus discuss distributed implementation agents exchanging channel names rendez vous communications 
calculus finer grained language describes idealized formal biology 
agents solutions 
wants decentralize systems natural put intelligence agents 
syntax calculus calculus discussed section basic components call agents information disposal 
site additional state effect agent log connection 
emphasize process nature calculus restricted form reactions called interactions 
names agents keep set names definition signature addition edge names need confuse sugar gal protein gal 
rule example uppercase proteins capitalized lowercase 
biological tradition 
countable set group names ranged 
means build transient cooperative structures low level systems 
edge group names supposed disjoint 
extended interface finite map ranged similar symbols 
integer part referred log 
agent pair written extended interface defined extended interfaces written lightweight notation previously may simply write indulge writing log instance convenient consequence notational abuse proteins particular case agents 
solutions built section 
new operator binding kinds names accompanying notion free names extended stand include group names 
structural congruence unchanged particular scope extrusion applies usual side condition logs additional information sites forgotten means projection map projection extends obvious way interfaces agents solutions 
interactions 
calculus agents may interact time 
definition pre solutions said interaction consist agents contain new group names 
specific condition demanded group names free names right hand side occur left hand side left hand side doesn restrict 
technical proviso ensure inter actions translated calculus 
group names specific constraint graph likeness express calculus interaction amounts testing agent knowing name solution 
definition interaction said monotonic resp 
antimonotonic projection monotonic resp 
reaction 
general interactions defined translated really concerned study monotonic antimonotonic interactions restricted class translate suppose interactions monotonic antimonotonic consider solutions graph specific sense project graph solutions 
recall section graph solutions stable monotonic reactions assumptions sensible 
examples interactions interaction monotonic antimonotonic logs states names changed projects identical reaction 
group names forgotten projection reactants monotonic antimonotonic interactions graph respect edge names second reaction monotonic occurs twice right 
section group names distinguish concurrent instances reaction representing edges 
renamings respect kinds names send said notions matching transition system extend easily 
calculus calculus decompose reaction calculus follow protocol gradually reactants constructs products means binary unary interactions 
protocol consists phase recruitment subsequent phase completion 
recruitment begins signal sent specific agent called initiator 
sends propagates kinds signals downward signals recruit necessary reactants upward signals report success back initiator 
phase initiator knows global reaction completed completion phase information propagated reactants 
ship various signals need statically predetermined structure define useful notation pertaining ways signals may may propagate 
scenarios definition micro scenario monotonic reaction micro scenario triple isomorphic acyclic orientation called flow graph tree spanning written common root belongs isomorphism recall solution denotes associated graph sites notation defined section 
loss generality assume oriented graph sites integers nodes scenarios different reactions chosen disjoint set nodes 
way agents identify global reaction take part role soon recruited handed node micro scenarios exist 
connected graph admits acyclic orientation obtained instance choosing arbitrary root constructing depth tree spanning graph directing remaining edges tree ordering 
connected monotonicity micro scenario reaction node chosen root assume depth 
loops edges node 
completely precise say orientation acyclic loops 
escape notational trouble may suppose doesn loops 
techniques described adapt easily case loops purely local node 
think map sites write accordingly connected free considered map partial involution write inverse course corresponds reverse orientation underlying graph inverse scenario special case sink 
considerations apply map notation case 
may decompose uniquely ll notation complement involution fixed points site bind bounded sites naturally partitioned input output sites 
site output belongs domain input belongs range 
words site output input definition signal ordering define binary relation sites written smallest transitive relation input output acyclic strict finite partial order sites 
order defined coincide depth 
definition input output interfaces tuple indexed set inputs resp 
outputs values define input resp 
output interfaces interfaces describe states inputs resp 
outputs log disjoint domains union partial interface monotonic protocol protein name translated agent name auxiliary site written special site log little additional information needs role reaction node corresponds group name identifying uniquely current attempted high level reaction 
translation extends solutions likewise solution write denote translation 
purpose subsection extend translation reactions inter reaction wants define associated family actions capable simulating sense precise 
family depends choice micro scenario means unique solution self assembly initiator spanning tree restricted kind considering room different choices :10.1.1.109.4434
said suppose choice micro scenario proceed definition definition depend reaction interest monotonic antimonotonic 
give detailed account monotonic case sketch antimonotonic case simpler 
subsection discuss antimonotonic case various properties translation sketches correctness argument 
interactions divided shown table completions shown table 
ease reading systematically abbreviated notation input output interfaces introduced 
top inference rule defining conditions interaction 
glance tables shows interactions involve agents recommended definition edge created time option reactants products strongly graph lot 
reader verify rest conditions satisfied interactions going review closely fact monotonic sense definition 
init table initiation contacts 
table contacts responses 
fc lc initiation init 
initial reaction possible quiescent agent bearing correct name moment name current attempt reaction created 
understood notation taken sequel respective names flow graph 
take note name map nodes names injective 
limit case biology complicated reaction lc fc fc shift exit table completions 
involving copies protein 
roles needed 
initiation verifies modifies initiator free interface 
specifically common domain free sites exit respectively map values specified take note sites free free monotonicity tested modified stage 
sites free bound visible taken care steps fc lc see 
contacts fc fc 
interactions con fc 
forms contact list increasing order creativity edge may exist may created exists edge may created 
cases newly contacted agent named handed role logs special site contact logged sides 
important fact overlooked short version resulting self assembly correct participants reaction statically different names :10.1.1.109.4434
roles allow handle general case dynamically allocating different names reactants 
contacts logged taken reaction attempt 
consequence allocation roles injective set agents participating attempt 
tree spans selects predecessors different parent parent responsible recruitment phase contacting agent name hand initiation case contacts occasion verify modify free interface newly contacted agent 
case fc fc common domain free sites respectively map values specified case node fc creation different 
takes interface defined mapping sites bound allow binding sites free values specified 
lc lc contacts 
come contacts needed tree 
forms contacts edge contacted means particular exists 
contact doesn need check free interfaces need pass role taken care contact just log contact sides 
noteworthy point contact demanding inputs contacting agent log 
imposes constraint way signals may propagate discuss 
just say constraint strong flow graph acyclic 
lesser importance set contact interactions behaves correctly case parallel edges edges source target 
group parallel edges belong spanning tree dealt contact interaction dealt contact 
special workaround needed 
response 
type interaction recruitment phase response pushes signal upwards back initiator 
successors responded 
step freely taken leaves re contacted leaves successors condition logs output interface vacuously satisfied 
important flow graph acyclic chance fire responses 
phase shift shift 
second phase begins phase shift interaction 
moment initiator knows gone right hand side correctly built 
propagation exit exit exit 
global reaction complete process sending success signal materialized log agents recruited reaction know reaction succeeded 
signal sent downwards leaves role ll show example kind failure happen contacts concur freely 
agent received signal inputs passed outputs may exit asynchronously project quiescent agent 
initiator agents needs different propagation exit rules really kind 
discussion antimonotonic reactions connected left hand side corresponding recruitment simpler 
consists checking neighborhood initiator contains left hand side 
created node edge needs init fc lc phase shift project identity reaction dually monotonic reactions deletions performed phase shift reaches 
easily implemented flow graph don give explicit interactions 
take note antimonotonic reactions actual change done side phase shift underlying solution 
discussion sees composite reactions say reactions decompose monotonic reaction followed antimonotonic discussed earlier subsection easily implemented 
side phase shift monotonic part job rest 
claim take basic easy deal monotonic antimonotonic ones 
spanning tree 
observed spanning tree serves way imposing parental priority contacts 
parent allowed wake child recruit reactants contact interaction 
don strange self deadlocks may happen 
instance starting reaction solution supposing priority contacts recruit distinct sense recruitment defeats 
having tree sort doing contact solves question 
depth 
suppose spanning tree depth agent contacted time predecessors predecessors recruited connected follow intuition connected communication instantaneous symbolic counterpart interaction components brought physical contact interactions waiting needed timeout thinks time conscious implementation fc kind 
correspond biologically collisions solution process takes time 
collisions 
way take note non deterministic steps collection interactions precisely fc kind 
deterministic sense interaction reacting agents agent pair matches interaction 
interactions blind search mechanism embodied interactions fail 
observable interactions 
conclude series remarks decomposition note interactions observable higher language fc lc creative done fc interfaces modified 
interactions project identical reactions modifying logs semantically serve purpose propagating information 
simulation correctness fc free rest section suppose deal system obtained translation just defined 
write associated transition systems 
notions manipulate sense general meaningful particular translated systems 
important invariant set interactions respects moment set agents bearing group name connected 
connected sub solutions disjoint initial reactions generate new group name uniquely identifies session begins contact commits oneself participate current session see interactions fc fc interact agents fc session see binary interactions 
logically call disjoint connected set agents groups 
agents belonging group called quiescent 
group involves agents currently attempting instance reaction 
reaction may may succeed 
say group monotonic antimonotonic depending associated reaction trying complete monotonic antimonotonic 
high level reaction match solution firing reaction simulated corresponding low level solution 
proposition solutions proof sketch prove step transition application reaction step transition corresponding matching renaming extension sub solution composing inclusion isomorphism find initiator reaction fire init rule 
creates unique identifier attempted reaction say define order fire interactions correctness statement demands 
possibility grow contact interactions 
things take care 
non deterministic contact fc embedding guess agent agent create edge 
second contact sites just order way consistent constraints inputs asked contact interactions 
constraints amount asking time group upward closed respect signal ordering see definition 
growth constraint satisfiable acyclicity satisfiable flow graph acyclic 
somewhat subtle point proved directly depth case noticed ancestors agent recruited agent upward closed growth obtained performing lc contacts agent ancestors immediately recruiting 
lc sees constraints operate flow graph tree 
contacts done edges ends log remains move response back initiator response interaction 
time find downward closed way proceed possible reason 
various signals reached initiator recruitment trigger phase shift subsequent interactions 
observe high level step generates number small steps number edges right hand side number nodes 
simulation stays linear size result says little terms correctness want know low level system doesn generate solutions projections unreachable higher level solution 
definition solutions defines cleanup written solution obtained completion groups past phase shift see table projection antimonotonic groups pre phase shift see section deletions monotonic groups pre phase shift see discussion erasure auxiliary sites 
completions possible past phase shift fail 
antimonotonic groups projected antimonotonic recruitment pure checking changes logs 
monotonic groups delete edges proteins added creative steps fc fc lc ones new products side 
correctness solution self assembly question stated follows 
theorem solution proof sketch proves induction possible interactions side phase shift group sites log resp 
forming upward closed resp 
downward closed connected subset group sites 
immediate consequence phase shift happens just happens precise logs group bounded sites set group renaming extensions equal downward closed subset sites contains initiator sites set sites 
consequence definition response interactions pairing sites exactly responses happened logs set strictly 
reaction attempt succeeds reaches phase shift point 
reach phase shift cleaned explained 
seen decomposition simulation mistakes 
time discuss sense decomposition fail words kind notion correctness try reach 
case deadlock may happen reactions competing reactants 
case conflicting reactions occurrences reaction initiated concurrently run resources resulting deadlock 
second case deadlock single decomposed reaction gets stuck search space imagine instance solution reaction translation essence guess instances bind site second 
fc look exactly far tell local interaction series interactions try produce twisted complex suppose initiator guessed wrongly giving role nected con fortunately group stuck newly recruited try fire fc interactions succeed connected conversely 
mistake doesn spread agents see locally connected connected role 
summarize sources deadlocks contentions guesses 
think extending adding pre phase shift interactions invert contact response interactions give group ability escape deadlocks 
reasonable long agents test take step backwards inconsistencies 
invariant preserve downward resp 
upward closure sites log resp 
consider simpler example reverse signal 
recall plain forward version write just backward dual verifying outputs set verifies dually input set signal hasn gone 
way key closure invariants clearly preserved 
smarter agents smarter management failures instance timeouts alarms alarm propagation management checkpoints backups interesting richer time conscious framework robotics distributed system design transaction models 
anyway remains seen write correct set reversed interactions haven checked details 
set internalize cleanup procedure described escape deadlocks keeping agent reasonably dumb suits formal biological model 
calculus calculus final section brief calculus detail compilation calculus 
compilation protein centric say proteins translated processes behaviour obtained interactions participate 
line regev direct representations various biological pathways second encoding provided preceding dealing multiset version :10.1.1.109.4434
calculus calculus uses countable sets names ranged 
agent names ranged bya 
variables 
usual address tuples write corresponding set 
calculus extended natural numbers distinguish syntactic categories values written matches written processes written grammar detailed 
values matches processes values natural numbers names variables 
variables represent formal parameters corresponding parameter name simply name variable 
matches sequences equalities values 
process inert process process performing internal move input output choice parallel composition match guarding processes restricted process form new operator limits scope agent invocation case ask unique equation defining restrictions bind binds name free likewise names input agent definition bind variables free occurrences variables names variables bound called free usual write bind table collects semantics calculus symmetric forms rules sum par omitted 
semantics described transition set names variables system syntactic processes transitions labelled certain actions 
inferred table actions written types internal actions outputs empty output action says bounded output 
tuple names represents bounded names inputs process exporting context 
bounded outputs transitions satisfy defines generated rules par com new open side conditions controlling bounded output involving specifically conditions ensure tau com new sum match inp open par variable occurs mismatch app table operational semantics calculus 
exported bounded names don capture variables appear right hand side rule com doesn send bound name 
rules standard agent may go state reduction labeled carries values numbers channels 
send variable 
translation calculus translation calculus written defined interfaces interfaces encoded tuples state site corresponding elements tuple state site encoded elements second 
reader wonder needs encode type information state site technicality reflects fact notion matching implicitly checks type 
instance isn match left hand side 
prevent match translation calculus situation dynamically typecheck names carried corresponding processes inserting matches form suitable places see encoding order type information available processes 
encoding extends naturally solutions defined notation means interaction likewise means product name left right sums indexed disjoint sets interactions subset interactions non empty left hand sides complement subset interactions empty left hand sides 
complete definition translation remains define parame order conveniently set processes new notations 
filters partial extended interface tuple variables sequence matches denotes suppose length greater filter matches check protein may participate interaction 
particular matches verify logs right value site visible hidden carries group name carries edge name lastly item occurrences name interface tuple 
needs binary analog filter operator 
partial extended interfaces tuples variables suitable length denotes sequence matches binary filter operator produces series matches cross check names identical identical updates needs implement effect interaction extended interface specified partial extended interfaces products 
partial extended interfaces set names tuples variables appropriate lengths defines tuple values length follows interfaces represent interfaces left hand side interaction interface represent interface agent right hand side stands created edges 
definition bit peculiar clauses ambiguous 
isn unique tuple satisfying instance doesn matter resolves choice ambiguity options lead processes behaving identically 
notation doesn mention needed parameters clear context 
note exactly sites referred interface product modified see clause 
processes assume binary monotonic interaction monotonic interaction reactants unique associated name name represents capacity agents interact visible sites 
know sites exist definition monotonic interactions 
binary interactions choose agent translated sender receiver 
course artefact translation counterpart comes fact communication model calculus asymmetric 
specific case reactants exactly agent give sum sending receiving behaviours 
enumerate cases interactions total number agents involved reactants products agents involved case case case 
time corresponding contributions behaviour reactants 
case take assume role sender agent verifies current interface compatible interaction agent sends new names reaction channel success reset interface represented agent charge verifying properly connected uses matching operator 
connection creates new edges send success channel sends interface case group names needed update interface agents update interfaces 
connection match sends reset signal agents return preceding state 
case definition antimonotonic interaction reactants connected exists name channel interaction triggered case need name associated reaction send integer coding reaction 
observe binders left hand side encoded calculus 
third clause definition names may edge names solutions supposed graph names may occur agents definition occur doesn need test names private 
fortunate possible 
edges deletions performed mimicked processes done updates mimicked erasure binder correctness established garbage collection 
case case analog case successful continuation replaced case agent left doesn need synchronisation move 
recall synth clause interface complete clause definition updates applies occur process definition defined case case similar preceding case case similar preceding case case similar case agent case cases just replace successful continuation case case define process subcases complete 
accordingly defined examples subsection review examples illustrating various aspects translation explained 
consider swap interaction interaction satisfies definition monotonic antimonotonic sides connected 
monotonic just 
respective contributions behaviour processes cross check needed case empty match process needs name carried 
said introducing slight variation interaction obtain monotonic interaction 
corresponding terms slightly shortened translation sending relevant names logs type indications 
done 
example illustrate cross checking part encoding 
consider antimonotonic unbind reaction sending relevant name preceding example find corresponding contributions contrast preceding examples sees verify task performed cross check observations correctness conclude state correctness properties encoding 
set interactions write binary monotonic interaction matches reactants observation relation extends arbitrary solutions follows observations called barbs 
write abbreviate denote transitive closure define barbs calculus side input output action name usual congruence calculus closed renaming bound variables equivalence making associative commutative neutral element satisfying scope laws recall name associated binary monotonic interaction theorem system closed solution 

binary monotonic interaction 
proof sketch suppose closed order observe edge exists names see case 
said points obvious 
suppose graph default assumption section problems news left hand side see discussion case 
points proved establishing possible kinds transitions pair processes public channel private channel going unstable state cross checks interfaces success signal private channel interaction finalized failure signal private channel pair processes rolls back previous state 
theorem powerful corresponding result encoding calculus calculus 
specifically item ensures deadlock introduced encoding rules 
item meshes intuition observe antimonotonic interaction internal event 
easy consequence items weak barbed bisimilar ity coarse grained calculus proteins worked formalization operon illustrating ease precision language describe protein interactions similar basic events biological systems synthesis transformation 
notation choose explicit edge residuals built treatment name generation elegant compares graph formalism particular allows clean definition notion monotonic reaction 
dynamic annotation language useful different purposes archiving playing comparing models 
representational abilities important structural property called self assembly theorem 
finer grained calculus binary interactions limited additional local structure encode coarser grained reactions 
notational investment really pays simplicity encoding seen syntax 
despite spartan syntax finer grained calculus endow agents intelligence biologically meaningful wonder effort explain high level reactions incorporating proteins led contemplating unrealistically talented proteins 
don think 
way understanding combinatorial power agents enormous anyway see digital translation combinatorics true proteins embedded space 
forward engineering biological systems focuses analysis construction basic components engineer biological systems 
self assembly result valuable step understanding aspect biocomputing world asynchrony norm low level binary synchronization events building blocks engineer arbitrary synchronizations 
berry boudol 
chemical machine 
theoretical computer science 
laneve montanari 
orchestrating transactions join calculus 
proceedings concur volume lncs pages 
springer 
cardelli 
calculi 
proceedings bio concur marseille france volume electronic notes theoretical computer science 
elsevier 
appear 
cardelli gardner ghelli 
manipulating trees hidden labels 
proceedings fossacs volume lecture notes computer science pages 
springer 
danos 
core modeling language working molecular biologist 
proceedings volume lncs page 
springer 
danos krivine 
formal molecular biology done ccs 
proceedings bio concur marseille france volume electronic notes theoretical computer science 
elsevier 
appear 
danos laneve :10.1.1.109.4434
core formal molecular biology 
proceedings th european symposium programming esop warsaw poland volume lncs pages 
springer apr 
danos laneve :10.1.1.109.4434
graphs formal molecular biology 
proceedings international workshop computational methods systems biology italy volume lncs pages 
springer feb 

graph theory 
springer new york 

jocaml conception impl mentation un langage agents mobiles 
phd thesis 
ecole polytechnique france 
fontana buss 
barrier objects dynamical systems bounded organizations 
editors boundaries barriers pages 
addison wesley 
fournet gonthier 
reflexive chemical machine join calculus 
rd acm symposium principles programming languages popl 

exact stochastic simulation coupled chemical reactions 
phys 
chem 
hasty collins 
engineered gene circuits 
nature nov 

mechanism responsible glucose escherichia coli challenge camp model 
genes cells 
kimball 
kimball biology pages 
online biology textbook 

automatic synthesis controllers assembly formation forming 
proceedings international conference robotics automation 
kohn 
molecular interaction map mammalian cell cycle control dna repair systems 
molecular biology cell 
lafont 
interaction combinators 
information computation 
milner parrow walker 
calculus mobile processes ii 
information computation 
jacob 
general mechanisms cellular metabolism growth differentiation 
cold spring harbor symposia quantitative biology cellular regulatory mechanisms 
priami 
stochastic pi calculus general distributions 
editor proceedings 
priami regev shapiro silverman 
application stochastic name passing calculus representation simulation molecular processes 
information processing letters 
regev silverman cardelli shapiro 
abstraction biological compartments 
theoretical computer science 
appear 
regev shapiro 
cells computation 
nature september 
regev silverman shapiro 
representation simulation biochemical processes calculus process algebra 
altman hunter klein editors pacific symposium biocomputing volume pages singapore 
world scientific press 

enzyme kinetics behavior analysis rapid equilibrium steady state enzyme systems 
john wiley sons new york 
sewell 
nomadic pict correct communication infrastructure mobile computation 
proceedings popl 

