automated environment generation software model checking matthew cis kansas state ks usa dwyer cis ksu edu corina technology llc nasa ames research field ca usa email arc nasa gov key problem model checking open systems en vironment modeling representing behavior execution context system analysis 
fundamentally open behavior dependent patterns invocation system components defined outside system referenced system 
reasoning behavior program components model environment essential enabling tractable verification 
describe approach generating en java program fragments 
approach integrates formally specified assumptions sound abstractions environment implementations form model environment 
approach bandera environment generator beg describe experience reason properties non trivial concurrent java programs 
model checking source code realistic software sys tems challenge currently topic large number research efforts :10.1.1.29.3872:10.1.1.32.5769
primary chal lies overcoming enormous cost model checking grows product number indepen dent program components threads control 
researchers agree abstraction key ing challenge 
research abstracting data state programs techniques predicate abstraction steadily increasing size complexity programs efficiently analyzed :10.1.1.134.652
approach involves decomposing program checking properties components composing anal ysis results draw behavior program 
order model check component isolation needs incorporate model environ ment component interacts 
case components satisfy properties specific contexts rise assume guarantee style reasoning model environment restricted provided developer 
variety forms compositional modular verification studied adapted software written modern programming languages 
bandera environment gen erator beg toolset automates generation environments provide restricted form modular modelchecking java programs 
specifically consider decomposition java program parts unit un der analysis environment 
unit collection java classes environment consists unit interacts 
unit source code subject verification model externally observable behavior 
environment model derived specifications written called environment assumptions results analyzing source code implements environment com ponents 
existing abstraction techniques may applied local unit data data flows unit environment 
resulting abstracted unit environment may analyzed unit existing java model checking frameworks bandera java pathfinder jpf :10.1.1.29.3872:10.1.1.32.5769
experience shown developing software model checking sufficiently precise enable effective reasoning restrictive mask faulty system behaviors significant challenge 
developing environ ment may require understanding unstated assumptions system usage software interfaces careful ensure assumptions satisfied restrictive way evaluation model checking unit analysis 
beg aimed reducing effort required generate environment models increasing fidelity respect assump tions environment behavior 
specifically beg automates discovery unit environment interface basedon user supplied information unit synthesis environment models user supplied environment assump tions automatic extraction environment models environment implementations 
thorough treatment mechanisms en vironment may influence behavior unit essential sound reasoning 
environment may unit control invoking methods unit interface data modifying unit data environment 
reason believe multiple sources information combined gen erate environment models reflect broad range realistic environment behaviors capture data interaction unit environment 
beg allows users specify environment properties formal notations 
linear temporal logic ltl regular expression capture patterns program actions unit method calls field assignments environment may exe cute 
specifications possible side effects execution environment methods may produce unit fed beg focus primarily assumptions capture ordering rela tionships program actions 
envision ways beg ef component development adjunct traditional unit testing approaches program vali dation enable efficient reasoning model code components component development individual classes classes constitute cohesive functional components structured java packages may complete code interact client code written 
setting class es forma unit missing classes interact form environment 
enable effective checking expect need encode assumptions behavior environment unit interface 
sumptions subsequently checked implementations missing environment classes complete 
program validation considering may break system parts enable efficient checking program properties 
set ting user selects classes comprise unit analysis environment model automatically ex 
applications interact external entities embedded control software processing data devices developers may incorporate assumptions interactions generate representative model beg code environment effects analyzer java model unit properties abstraction environment implementations assumptions environment environment models assumptions translator java modeling primitives 
beg architecture external environment approach builds existing reasoning program flow analysis 
details program analysis synthesis techniques model environment implementations 
focuses control effects environment sev eral contributions including defining language program actions specify environment behav iors ii adapting existing specification forms defining patterns environment behavior iii synthesizing sourcecode models environment behavior processed existing model checking frameworks iv prelim evaluation effectiveness beg supporting modular source code model checking 
beg checking java source code fundamental concepts embodies broadly applicable section describes basic approach example 
section de formalisms specifying environment behavior generating environment models java source code section discusses soundness environments relative specified assumptions 
overview case stud ies beg section 
compare contrast existing research section section 
basic approach example fundamental assumption beg precise rea unit desired precision modeling environment may sacrificed 
safely approximate environment data environment statements may influence unit behavior modeling effect environment statements achieved combination user specifications anal ysis java source code 
shows high level architecture beg 
users identify unit naming classes interfaces packages comprise unit 
beg accepts multiple information sources generating environment model 
users may assumptions patterns unit method calls unit field definitions 
implementation environment available beg may automatically extract en vironment assumptions static analysis techniques generate environment models extracted sumptions 
environment models synthesized combination assumption specifications analyzing implementations 
environment models encoded java source code collection primitives express atomic execution environment actions encode non determinism environ ment reflect approximation analysis results 
unit combined environment existing model checking frameworks may verify unit properties distinguish categories java classes depending hold thread control class containing main method classes extend implement java lang thread runnable labeled active rest termed passive :10.1.1.29.3872
consistency reuse terminology previous active environment classes drivers passive environment classes stubs 
approach provides wide range driver stub behaviors may safely approximated illustrate approach small program implemented java observable library components 
shows class subject observable field type buffer shown right side container registered 
watcher class contains bookkeeping field registered keeps track registered subject 
suppose interested reasoning notified subject updates 
property specified asserting true point subject calls update 
interface discovery user designates unit analysis collection java classes properties need verified 
general selection classes unit properties wants reason 
example mentioned property subject unit 
unit classes analyzed discover public fields unit may referenced environment 
define program actions may specify patterns environment behavior example public methods add delete class subject may invoked en vironment components 
unit classes analyzed discover ex classes methods fields referenced inside unit 
external drive generation components directly referenced unit 
example java util observable java util observer buffer environment 
note actual environment may classes due transitive class method dependencies example java util vector class environment supertype buffer 
environments compact beg generates en vironment components immediately referenced unit 
beg safely approximates rest environ ment incorporating summaries classes indirect effect unit generated 
driver specification synthesis may specify assumptions sequences envi ronment initiated program actions 
beg generates set driver threads implement liberal model thatis consistent assumptions computation model satisfies assumptions compu tation satisfies assumption computation model 
illustrates assumption instanceof subject pair threads behavior regular expressions parameter values elided elided parameters interpreted value selected non possible values parameter type 
thread repeatedly calls method ona selected subject second calls sequence add delete calls non subject non deterministically selected watcher 
shows generated drivers assumed behavior 
allocates specified instances starts execution threads thread implementations model assumption specifications invoking modeling primitives underlying model checker non deterministic choice set values true alse 
allocated instances class program state call executed 
public class subject extends observable boolean changed false buffer obs public subject obs new buffer public void public synchronized void add watcher obs register public synchronized void delete watcher obs unregister public void notify object arg watcher cw buffer lb new buffer synchronized changed return obs copy lb changed false obs size lb size cw null lb isempty cw lb cw update arg protected synchronized void changed true public class watcher implements observer public boolean registered false public void update observable object arg public class buffer extends vector public boolean register watcher contains registered true super addelement return true return false public boolean unregister watcher super registered false return true return false public watcher watcher result result return result 
customized observer implementation environment instantiations subject watcher regular assumptions add delete public class public static void main java lang string subject new subject watcher new watcher watcher new watcher new start new start public class extends java lang thread public subject public watcher public subject watcher watcher public void run bandera public class extends java lang thread public void run bandera switch bandera case delete bandera watcher break case add bandera watcher break 
user assumptions driver models stub analysis synthesis series static analyses including points side effects analyses applied determine environment methods influence unit data 
example analysis buffer implementation calculates effects environment fields method unregister may side effect field registered models generated reflect possible sideeffects calculated analyses 
safely re possibility side effect code generated execute assignments non deterministically left shows extracted assumptions right generated environment buffer 
example access watcher instance call approximated return nondeterministically chosen instance watcher call watcher 
model checking environment models generated com code unit jpf bandera verify unit properties 
model checking jpf environment models figures mentioned spurious counter example unregistered watcher notified update 
due cision generated code method return allocated instance type watcher boosting precision buffer model precise analysis eliminates spurious counter example reveals property violation due race condition implementation notify due limitation scope synchronized statement improved performance 
method register watcher registered true return method unregister watcher registered false return method return watcher public class buffer public boolean register watcher registered true return public boolean unregister watcher registered false return public watcher return watcher 
buffer extracted assumptions stub model tool support observer example illustrated basic beg 
beg supports specification wide range assumptions environment behavior compactly expressions ltl defined program actions data side effects summaries 
absence speci fied assumptions beg configured reasonable assumptions intended environment 
ex ample assumed calling environment consists number specified command line unit threads exhibit universal behavior perform sequence program actions ex posed unit environment interface 
addition beg extract environment assumptions envi ronment implementations 
capabilities beg toolset effective supporting modular rea properties number realistic systems discussed section 
driver specification synthesis section focus specification behavior environment drivers 
building blocks specifications definition data stances environment may description program actions instances may control data state unit analysis specification patterns actions correspond sumed environment behavior 
describe turn remainder section 
environment instantiation name scope defines region developer may introduce names bound specific class instances single global name scope defined annotating environment instantiations introduced names instantiation number instances allocated type environment instances may named 
bindings names values holds specified assumptions 
named instances subset set instances ofa type 
set environment unit allocated instances 
set forms universe deterministic choice primitives types evaluated example rewrite assumption specification explicitly name lone subject stance regular expression environment instantiations subject 
regular assumptions add delete 
local name scope defines value applies portion assumption specification 
clarity environment specification names global local scopes disallowed 
default local names bound non deterministically se lected value type binding holds body expression follows name tion 
local names serve function similar universal quantifiers logics primary occurrences different program actions specify multiple actions applied 
preceding example rewritten scope environment instantiations subject 
regular assumptions subject add delete 
examples single instance subject specifications discussed semantically equivalent general case 
scopes may nested may restrict universe values non deterministically selected example subject subject introduces names guaranteed re fer distinct instances subject 
local names may bound values unit 
example ref introduces name bound value returned call subse quently perform call method 
syntax name scope section 
alphabet program actions set classes comprise unit denote set java built types 
alphabet actions consisting classes actions field assignments method calls assignments static field assignments assignments object unit type 
assign ments form rhs type scalar unit type rhs scalar constant op denotes possible value type target assignment introduced name desired type class static field assignment specified 
method call actions defined standard java syn tax partial specification parameters allowed 
missing parameters method call interpreted ac tual parameters value op formal param eter type 
example consider methods named class signatures public 
method public 
method public 
method denote occurrence call receiver object type specific value forx value op 
meaning action non deterministic choice call method set calls constructed instances receiver param eter respectively parameter occurrence call subset methods named elide parameter list suffix elements set 
example denotes method receiver object action denotes call methods legal parameter values 
specifying patterns actions regular expressions defined alphabet pro gram actions describe language actions initiated environment 
simplest regular single program action 
complex environment assumptions built standard operators concatenation disjunction closure 
optional occurrence 
positive closure concatenation occurrences generalization bounded iteration spec action spec spec spec spec spec spec 
spec spec spec spec type spec name spec name name type name 
assumption syntax 
supported 
appear introduced name scopes names referenced program actions inthe expression 
syntax assumption specifications spec action action fun value returning method call action name introduced name type program type name pair ordered natural numbers 
specifications satisfy additional constraints 
specifically type expressions involve named variables introduced enclosing name scope type conformant type 
may involve function return type conformant type initialized name 
generally defining program actions satisfy type rules java 
example java util iterator presents standard interface generating elements instance container 
semantically interface instance class implementing iterator interface denoted introduced name clients call methods order consistent specification environment regular assumptions iterator iterator hasnext remove expresses required sequencing calls iterator instance class implements iterator interface precede call allowable optional calls occurrence single remove call call instance iterator 
switch case code break case code break code code code 
code code int code int code type name type name type code type name type name code type name 
name type name true name name name continue name continue break code 
assumption semantics assumption specifications code environment code generation separated ac tion code generation regular expression code generation 
code generated syntax trees expressions matching patterns tree emitting java code 
actions form leaves regular ex pression syntax trees code generation actions simply method call regular expression code gen eration pass 
action code generation action specifications usually involve approximation ex ample description assigned value method parameter 
approximate values specified action specifications 
code generation dependent type information field type left hand side assignment formal parame ter type method call 
types op 
scalars translation case booleans types op token preserved subse quent abstraction tools 
method calls additional complication need resolve elided parameters including receiver object method name overloading 
section elided parameters interpreted op values code generated 
treatment name overloading greatly simplified query operations program internal representation 
specify partial list formal parame ter types query returns list methods match signature 
example query method formal parameter type list class described insection return full descriptions methods 
code emitted allowed possible calls follows regular expression code generation regular expression assumption specifications java templates shown clarity refer distinct instances syntax 
templates non deterministic choice constructs mentioned previously defined re code refer code fragment subexpression 
expressions program ac tions code call generates code described preceding section view name scope subexpression prefixing special name binding action subex pression 
name scopes supported introducing local variables body driver run method select instance bound name point name binding action embedded regular expression 
forms illus java fragments achieve local name non deterministic binding binding func tion return restriction universe nondeterministic binding performed 
global name scopes variable declarations global body driver run method behavior generated model code internal environment 
internal environment states hidden models embedding atomic statements 
atomic statements defined method calls 
lexical structuring calls required anatomic statement extends path instance instance hide environment details emitting calls immediately code program action calls immediately code program action 
additionally statement thread 
strategy consequences environment behavior contribute state explosion internal actions elided counter examples making shorter easier read 
regular expressions familiar formal notation developers experience find easier temporal logics 
support assump tions specified ltl generate java models approach similar developed ada mod eling 
soundness synthesized environments section justify soundness respect assumption specifications results side effects analyses 
preliminaries model behavior concurrent program writ java labelled transition system 
corbett shows model behavior java programs transi tion systems defined standard techniques constructing control flow graphs labelled transition system act ri set typed set states representing variables act alphabet actions act transition relation 

set variables denotes valuation variables win state labels transitions represent variable assignments variable tests actions modeling control procedure 
system may interact environment variables actions 
partitioned int set internal variables system may modify com set common shared variables 
act partitioned denotes set inter nal actions symbol representing internal action system alphabet system denotes set communication interface actions 
hs act hs act say compatible sets variables sets internal actions disjoint 
compatible systems composition denoted system hs act ri act act act iff acti inti inti 
acti vi vi ri systems synchronize interface actions asynchronously interleave actions 
inter nal variables pi may modified actions pi common variables may modified 
environment system system compatible program model general capture different interactions system environment shared data control communication actions model directly capture dynamic alloca tion data put limit number objects flow system environment 
environ ments represent stubs drivers 
simulation preservation results proceed define system sound tion 
abstracting means having details respecting behaviors original system 
hs act hs act systems 
say sound abstraction denoted iff simulation simulation pair aes aea aes aea act act aes 
state action act 
aes aea specifying properties software systems universal temporal logics reason hold possible execution path 
standard result see says simulations preserve satis faction formulas logics 
universal temporal formula oe oe implies oe 
oe hold mean oe necessarily false completeness 
beg synthesizes environment models user speci fied assumptions written regular expressions ltl formulae 
environment assumption transition system corresponding environment generated beg 
explain synthesis model ltl assumptions show environment model sound abstraction conform assumption environment satisfies 
similar argu ment applies assumptions regular expressions transition system corresponds code synthesized beg finite state automaton accepts set strings 
alternatively beg uses actual environment implemen tations extract assumptions build models show sound abstractions actual environments 
proposition system environment assumption actual environment implementation oe wish check oe 
oe 
proof 
follows fact generated environments sound abstractions actual environments simulation preserves universal temporal properties 
words result model checking univer sal temporal property program uses environment models generated beg true property program uses actual environment implementation environment models sound tions real environments 
note user specified assumptions discharged actual environ ment implementations satisfy order hold 
experience beg beg implemented soot framework beg uses soot symbol table control flow graph address ssa bytecode representation jimple form analyses analysis unit code discover unit interface analysis 
tools produce java code output includes calls modeling methods introduced insection 
section describes experience applying beg generate environments portions programs appeared literature java verification 
actual verification performed jpf 
case studies environment generation applied beg variety examples 
num ber multi threaded java programs subject analysis literature re verified gener ating previously hand built environments beg 
addition observer observable example exam ples include producers consumers framework exercising bounded buffer generic readers writers synchro framework dining philosophers host classic synchronization problem beg proved quite useful generating environments small systems tool support valuable attempting reason properties larger software systems 
increasingly object oriented software systems frameworks 
frameworks provide large scale reuse collecting threads control operations data structures relate specific problem domain swing isa java framework supports development graphic user interfaces gui 
frameworks rich allow application specific processing coordinated framework 
frameworks quite difficult due complexity interfaces degree parameterization possible configure 
current state practice framework testing relies groups cases drive testcase generation 
beg enables synthesis drivers capture multiple framework cases mode state ma chines 
furthermore non determinism assumption specifications allows drivers span configura tion settings 
great advantage allowing configuration independent properties analyzed having enumerate combinations configuration settings explore beg support analyzing realistic programming frameworks consider non trivial 
autopilot swing gui md autopilot simulator nasa application 
parameterizable parallel job scheduling framework 
autopilot md autopilot tutor web graphical user interface gui simulates autopilot mode control panel primary flight md aircraft autopilot 
user may click buttons dial desired altitude vertical speed aircraft goal altitude 
autopilot implemented applet 
application code consists details examples bandera 
projects cis ksu edu 
lines code clustered class 
mea sures true complexity system intensive java awt java swing gui frame works influences behavior system fact main thread control owned framework ap plication methods invoked application call backs 
system checked mode confusion ing model user understanding aircraft state 
user model integrated system inputs 
assertions inserted compare state system data structures state model violations indicated mismatch user model software state implies confusion 
analyze system beg generate gui framework components generate drivers encode assumptions user behavior 
attention generation drivers complete description see 
main class system autopilot ex tends java applet applet turn extends awt classes 
applet large number awt methods order create update simulated cockpit displays 
properties wished reason independent state gui chose autopilot class unit 
beg calculated data effects awt autopilot class generated safe approximation data effects explicitly defined autopilot fields inherited awt classes 
system useful name improve readability assumption specifications generated counter examples 
beg allows define mnemonics gui interface actions define assumptions terms 
model checking autopilot class generated environment jpf produced follow ing counter example init fly fly indicated mode confusion anomaly tutor 
interesting note previous effort build application required months manual yielded environment model actual environment implementation 
relatively simple specifications running side effects analysis gui components application beg generated environment minutes consistent implementation modulo fidelity assumption specifications 
environment instantiations new new new new user new autopilot definitions fly regular assumptions init fly fly 
autopilot assumptions environment import ca instantiations new configuration synch top top regular assumptions top execute destroy 
rw assumptions replicated workers rw configurable support parallelization simulations 
previous applied largely manual model check collection properties ada implementation framework 
subsequent rewritten java widely frameworks replicated workers inversion control simplify application programming 
means program threads created internally framework 
clients control degree parallelism framework passing parameters constructor framework instance 
workers framework significant interfaces enable call backs client supplied compu tations parallelized 
environment replicated workers define instantiate classes interfaces framework define appropriate configuration information checked properties bandera spin back able reproduce results study difference 
framework instance environment defined deadlock actual deadlock 
java implementation barrier synchronization utility 
discovery surprising implementing non trivial parallel simulation applications bug dis covered 
replaced barrier implementation java util concurrent deadlock 
related modular approaches model checking stud ied decade 
carried theoretical level implementations game theoretic approaches reasoning open systems 
focus complexities unit environment interaction arise real programming language supporting extraction precise compact environment models approach environment generation specifications builds developed tool support analyzing partially implemented real time systems implemented ada specified graphical interval logic regular expressions 
addition programs customized specification languages better suit goal environment modeling extract environment models existing code 
modular approach checking multi implemented calvin 
approach aimed procedure checking relies user spec environment assumptions describe procedures system constrain interactions 
framework theirs allows simple invariant specifications requires programs obey class locking disciplines respect thread interactions generation environment assumptions optimistic environments described aimed finding environments unit satisfy required properties 
im portant direction pursue modular program checking believe extraction environments important role model checking kind unit testing approach existing code bases number examples applying static analysis techniques support modular analysis verification verisoft incorporates static analysis closing open systems calculating influence externally 
approach simple notion data dependence drive analysis ability control precision generated system 
stoller describes approach computes parti tion system inputs data flow analysis system 
idea single representative partition exercise behaviors system avoid exercising behavior twice 
beg generates environment values user specifications leaves values weakly specified op relies subsequent abstraction phases parti tion values prior model checking 
despite significant computational complexity checking proven effective analysis technique capable finding errors real programs replicated workers framework 
modular approaches promise scale model checking software 
bandera environment generator beg provides automated tool support effective enabling useful forms modular analysis continuing development foundations beg tool support 
specifically ing analysis program lock acquisition safely approximate synchronization interaction envi ronment unit 
addition adapting thread modular approaches enable model checking environment threads 
beg released part bandera toolset bandera projects cis ksu edu 
acknowledgments authors members jpf projects helpful discussions comments related 
part army research laboratory army research office agreement daad darpa program afrl contract nsf ccr intel 
aho sethi ullman 
compilers principles techniques tools 
addison wesley 
alur de alfaro grosu henzinger kang kirsch majumdar mang 
wang 
model checking tool exploits design struc ture 
proceedings rd annual ieee acm interna tional conference software engineering pages pp 

ieee computer society press 
avrunin corbett dillon 
implemented real time systems 
proceedings th international conference software engineering pages 
ball majumdar millstein rajamani :10.1.1.134.652
auto matic predicate abstraction programs 
proceedings acm sigplan conference programming lan guage design implementation pldi volume acm sigplan notices pages 
june 
giannakopoulou learning assumptions compositional verification 
tools algorithms construction analysis th international conference lncs apr 
colby godefroid jagadeesan 
open reactive programs 
sigplan conference programming language design implementation pages 
corbett 
constructing compact models programs 
young editor proceedings international symposium software testing analysis issta 
acm press march 
corbett dwyer hatcliff laubach robby zheng :10.1.1.29.3872
bandera extracting finite state models java source code 
proceedingsof nd international conference software engineering june 
corbett dwyer hatcliff robby 
express ing checkable properties dynamic systems bandera specification language 
international journal technology transfer 
dwyer hatcliff laubach robby visser zheng 
program abstraction finite state verification proceedings rd international conference software engineering may 
dwyer 
filter model check ing partial systems 
proceedings sixth acm sigsoft symposium foundations software engineering nov 
dwyer 
framework grid simulations 
concurrency practice experience 
flanagan qadeer 
thread modular model checking model checking software lncs may 
giannakopoulou pasareanu barringer 
sumption generation software component verification 
proceedings th ieee conference engineering may 
henzinger majumdar 

proceedings th acm symposium principles programming languages pages jan 
holzmann 
model checker spin 
ieee software engineering may 
manna pnueli 
temporal logic reactive systems specification 
springer verlag 
milner 
communication 
prentice hall 
penix visser larson andn 

verification time partitioning deos real time scheduling kernel 
proceedings nd ternational conference software engineering june 

deos kernel environment modeling ing ltl assumptions 
technical report technical report nasa arc ic nasa ames 

abstraction modular reasoning software 
phd thesis kansas state university 
dwyer huth 
assume guarantee model checking software comparative case study 
theoretical applied aspects spin modelchecking lncs sept 
stoller 
domain partitioning open reactive systems proceedings international symposium software testing analysis pages 
acm press 

adapting side effects analysis modular pro gram model checking 
master thesis kansas state university 
brat visser 
code level modelchecking discover automation surprises 
proceedings digital avionics systems conference oct 
dwyer 
adapting side effects anal ysis modular program model checking 
proceedings fourth joint meeting european software engi neering conference acm sigsoft symposium foundations software engineering sept 
valle rai hendren sundaresan lam gagnon soot java optimization framework 
proceedings cascon nov 
visser brat havelund park :10.1.1.32.5769
model check ing programs 
proceedings th ieee international conference automated software engineering sept 

