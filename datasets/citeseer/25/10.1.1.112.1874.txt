optimizing migration virtual computers constantine ramesh chandra ben pfaff monica lain mendel rosenblum computer science department stanford university jim chow blp lam mendel stanford edu shows quickly move state run ning computer network including state disks memory cpu registers devices 
call state capsule 
capsule state hardware state includes entire operating system applica tions running processes 
chosen move computer states computers common cheap run software tools migration 
unfortunately capsules large containing hundreds megabytes memory gigabytes disk data 
devel oped techniques reduce amount data sent network copy write disks track just updates capsule disks ballooning zeros unused memory de mand paging fetches needed blocks hashing avoids sending blocks exist remote 
demonstrate optimizations prototype system uses vmware gsx server virtual machine monitor create run capsules 
system tar gets networks slow kbps 
experimental results suggest efficient capsule migration improve user mobility system man agement 
software updates installations set machines accomplished simply distributing capsule new changes 
assuming presence prior capsule amount traffic incurred size update installation package 
capsule migration possible machines start running application minutes kbps link having install applica tion underlying operating system 
users capsules migrated commute home time 
beam computer 
today computing environments hard maintain hard move machines 
environ ments encompass state including operating sys tem installed software applications user individual data profile user logged set pro cesses 
state deeply coupled com puter hardware 
user data profile may mounted network file server operating sys tem applications installed storage local computer tied computer 
pro cesses tied tightly computer systems support process migration 
result users move computers resume 
system administration difficult 
operating systems applications hard maintain 
machines configurations meant drift apart different sets patches updates stalls applied different orders 
chose investigate issues including user mobility system administration addressed encapsulating state computing environments class objects named moved oth manipulated 
define capsule machine architecture data type encapsulating complete state running machine including operating sys tem applications data possibly processes 
capsules bound instance architecture allowed resume similarly suspended execution serialized 
computer architecture need implemented hardware directly implemented software ing virtual machine technology 
option particularly attractive easier extract state virtual computer 
virtual computer states usenix association th symposium operating systems design implementation referred virtual machines 
introduce term capsule distinguish con tents machine state data type machinery execute machine code 
bind machine states real hardware virtual machines 
run existing software chose standard architecture platform investigation 
architecture runs majority operating systems software programs today 
addition com virtual machine monitors available vmware gsx server vmm vir tual pc run multiple virtual machines hardware 
provide basic func tions writing state virtual machine binding serialized state virtual machine resuming execution 
goal research project explore design capsule system architecture named collective examine potential provide user mo bility recovery simpler system management 
com storage collective system act caches capsules 
users travel collective move capsules computers close giving users consistent environment 
capsules moved users commute home 
cap duplicated distributed different ma chines updated data form basis administering group computers 
capsules moved machines balance loads fail 
storing migrating capsules challenges addressed realize goals collective project focuses simple crucial afford time space store manipulate migrate capsules 
cap large 
inactive capsule con tain gigabytes disk storage active capsule include hundreds megabytes memory data internal machine registers device states 
copying gigabyte capsule standard kbps dsl link take hours 
clearly ward implementation copies entire capsule fore starting computation take long 
developed number optimizations re duce capsules storage requirements transfer time start time network 
techniques ible users require modifications operating system applications running inside 
techniques target dsl speeds support capsule migration home advantage availability similar capsules local machines 
speed transfer capsules reduce start times slow networks system works follows 
time start capsule save dates disk separate disk copy write 
snapshot execution represented incremental cost commensurate magnitude updates performed 

capsule serialized reduce mem ory state machine flushing non essential data disk 
done running user bal process acquires memory op erating system zeros data 
remaining subset memory transferred destination machine capsule started 

sending entire disk disk pages fetched demand capsule runs full advantage operating system ability ate disk fetch latencies 

collision resistant hashes avoid sending pages memory disk data exist destination 
network traffic compressed gzip 
implemented optimizations described basic prototype collective sys tem 
prototype platform uses vmware gsx server running red hat linux kernel execute capsules 
users retrieve capsules name move capsules file system start cap computer save capsules file system 
run linux windows capsules 
results show move capsules min kbps dsl fast move users capsules home com mute 
speed improves older version cap available destination 
software dis tribution show system sends roughly amount data software package newly installed software upgrades installed software 
results suggest cap migration offers new way software machines start running new application minutes need install application underlying operating system 
organization section describes virtual machine moni tor create resume capsules 
section motivates need optimizations discussing intended uses capsules 
section discusses optimizations reduce cost capsules 
section th symposium operating systems design implementation association describe experiments performed prototype system 
discusses related sec tion concludes section 
virtual machine monitors virtual machine monitor layer software sits directly raw hardware exports virtual machine abstraction imitates real machine software developed real machine runs virtual machine 
virtual ma chine monitor vmware gsx server generate serial ize execute capsules 
virtual machine monitors properties ideal platforms supporting capsules 
monitor layer encapsulates machine state nec essary run software mediates interactions tween software real hardware 
tion allows monitor suspend disconnect software virtual device state real hardware write machine state stream 
similarly monitor bind machine state real hard ware resume execution 
monitor requires cooperation software running monitor 
migration difficult myriad hard ware device interfaces 
gsx server simplifies migration providing device interfaces virtual machine regardless underlying hardware virtualization possible 
example gsx server exports bus logic scsi adapter amd lance ethernet controller virtual machine inde pendent actual interface disk controller net adapter 
gsx turn runs host operating sys tem currently linux windows implements virtual devices host os devices files 
virtual hard disks especially powerful 
disks backed just raw disk devices files host os file system 
file system abilities easily name create grow shrink storage greatly simplify management virtual hard disks 
devices need simple conver sion routines 
example moving capsule virtual network card communicate internet handled simply remapping de vice new computer network card 
new network card may network able receive packets capsule ip address 
virtualization layer interpose transparent capsule tunnel network packets capsule old network virtual private network vpn 
usages requirements collective system uses serialization mobility capsules provide user mobility backup software man agement hardware management 
describe applications capsules explain re capsule storage migration 
user mobility capsules tied particular machine follow users go 
suppose user wants home weekends 
user single active capsule migrates computer home 
way user resume exactly left similar convenience provided carrying lap top 
assume standard home office loads software engineering document creation web browsing mail calendar access 
system may data intensive applications video editing database accesses 
support working home system dsl cable speeds 
users feel instantaneous access ac tive environments 
possible start capsule having entirely transfer user need data capsule 
need ensure capsule responsive comes 
frustrate user get screen quickly find keystroke mouse click processed speed 
fortunately scenario state user active capsule home differences state need transferred dur ing migration 
furthermore user easily ini capsule migration commute user notice migration delay long capsule immediately available commute 
backups capsules serialized users system ad save snapshots capsules back ups 
user may choose checkpoint regular intervals just performing dangerous operations 
pro expensive write gigabytes disk time version saved 
optimize stor age recording differences successive versions capsule 
system management capsules ease burden managing software hardware 
system administrators install main usenix association th symposium operating systems design implementation tain set software multiple machines simply creating inactive capsule distributing machines 
approach allows cost sys tem administration amortized machines run ning configuration 
approach shares similarities concept disk imaging local disks new machines standard pre installed configuration 
disk imaging allows machine config 
hand system allows multiple capsules exist machine 
advantages allows multiple users different requirements machine machines classroom may contain different capsules different classes 
users machine run dif ferent capsules different tasks 
single customized capsule personal multiple capsules centrally updated system ad 
capsule technique causes dis old capsules need shut new capsules get deployed 
moving capsule machine network costly may faster laborious downloading installing software scratch 
moving subsequent capsules machines hold capsules faster happen ties capsules 
particular updates capsules naturally share common original ver sion 
take advantage mobility capsules simplify hardware resource management 
having software tied hardware select computing hardware availability load location factors 
tightly connected clusters mo bility allows load balancing 
migration allows machine taken stopping services 
internet scale migration move ap plications servers closer clients 
summary capsules support user mobility backup system management depends ability migrate capsules machines store effi ciently 
desirable system works dsl speed allow capsules migrated homes 
furthermore start delays migration minimized ensuring migrated capsules re main responsive 
optimizations designed exploit property similar capsules representing snap shots execution series software grades expected machines col system 
ideally cost storing transferring capsule similar version capsule proportional size difference 
observe largest components capsule memory disk members memory hierarchy computer pre existing management techniques leveraged 
specifically developed opti 
reduce memory state serialization 

reduce incremental cost saving capsule disk capturing differences 

reduce start time paging disk data de mand 

decrease transfer time sending data blocks exist sides 
ballooning today computers may contain hundreds megabytes memory take transfer dsl link 
possibility reduce start time fetch memory pages needed 
ing systems designed slow memory accesses approach render capsule unresponsive 
possibility flush non essential data memory transfer smaller working set page rest data needed 
observe clever algorithms eliminate page useful data system im plemented os virtual memory manager 
modifying os require enormous amount effort operating system chosen gray box approach problem 
trick os reclaiming physical memory existing processes running balloon program asks os large number physical pages 
program zeros pages making easily compressible 
call process ballooning term intro duced waldspurger vmware esx server :10.1.1.7.1541:10.1.1.7.1541
esx server uses ballooning return memory monitor uses ballooning zero memory compression 
ballooning reduces size compressed memory state reduces start time capsules 
technique works especially memory freed pages contents compressible 
reason transfer data pages cleared ballooning process 
discard ing pages holding cached data dirty buffers active th symposium operating systems design implementation usenix association data may negative effect 
pages immediately need fetched demand network 
capsule may start earlier system may sluggish initially 
implemented ballooning linux windows operating systems 
actual imple mentation ballooning process depends os 
windows uses local page replacement algorithm imposes minimum maximum working set size process 
effective windows balloon program ensure current working set size set maximum 
linux uses global page replacement algorithm hard limits memory usage processes simple program allocates zeros pages suf ficient 
linux balloon program de allocating memory linux define memory usage limits windows 
tests linux balloon program adopts simple heuristic stops memory allocation free swap space decreases mb 
ballooning programs explicitly write zeros allocated page oses map ping allocate pages single zero copy write page 
addition programs hook os power management support invoking ballooning os receives suspend request vmm 
capsule hierarchies capsules collective system seldom created scratch derived capsules explained section 
differences re lated capsules small relative total size capsules 
store disks capsules ef creating hierarchy child cap viewed inheriting parent cap differences disk state parent child captured separate copy write cow virtual disk 
root hierarchy root disk complete capsule disk 
nodes represent cow disk 
path cow disks originating root capsule hierarchy represents capsule disk cow disk path capsule disk latest disk 
directly run capsule latest disk leaf hierarchy 
derive new child capsule adding new child disk latest disk updates new disk 
capsules children immutable property simplifies caching cap 
shows example capsule hierarchy illus university 
capsule disk 
dle latest disk disk capsule department snapshot updated capsule latest disk student sp ul capsule latest disk student capsule student capsule latest disk latest disk example capsule hierarchy 
may university 
root cap contains software available students 
various departments university may choose extend basic capsules department specific soft ware 
department administrator update de capsule deriving new child capsules 
stu dents files assumed stored networked stor age servers students may different capsules dif ferent courses power users maintain private capsule personal 
time user logs looks latest department capsule de rives individual capsule 
capsule migrates student commutes destroyed logs 
note capsule disk updated derived capsules containing custom installed soft ware ported updated capsule 
exam ple university capsule disk updated department needs re create departmental capsule 
capsule hierarchies advantages migration capsule disk cow disks destination need transferred 
capsule hierarchies allow efficient usage disk space sharing common data different capsule disks 
translates efficient usage buffer cache host os multiple capsules sharing cow disks simultaneously execute host 
fi nally creating new capsule cow disks faster copying entire disks 
cow disk implemented bitmap file sequence extent files 
extent file sequence blocks cow disk gb size file systems nfs support larger files 
bitmap file contains bit kb block disk indicating block cow disk 
sparse file support linux file systems efficiently store large partially filled disks 
writes capsule disk performed writing data latest cow disk updating bitmap file 
reads involve searching latest cow disk disks turn required block 
root cow disk contains copy usenix association th symposium operating systems design implementation blocks search guaranteed terminate 
shows example capsule disk chain cow disks comprise 
note cow disk hierarchy visible vmm os applications inside capsule see normal flat disk illustrated 
cow disk implementation interfaces gsx server shim library sits gsx server library 
shim library inter cepts gsx server requests disk image files vmware plain disk format redirects local disk server 
plain disk format consists raw disk data laid sequence extent files 
local disk server translates requests cow disk requests executes operations cow disks 
suspend resume active capsule creates new active capsule adds cow layer disks 
create long cow disk chains 
avoid accumulation costs storing intermediate cow disks cost looking bitmaps imple mented promote primitive shortening chains 
promote cow disk level hierarchy adding disk parent blocks 
delete capsule promoting children removing latest disk 
apply promotion operations succession convert cow disk bottom hierarchy root disk 
final note vmware gsx server implements copy write format addition plain disk format 
necessary implement cow format vmware cow format complex conducive implementation hashing optimization described 
bitmap cow disk ii ii gates cow disk flat disk ii seen ihe capsule block cow disk example capsule disk 
demand paging capsule disks reduce start time capsule cow disks corresponding capsule disk read page page demand pre fetched 
demand pag ing useful cow disks especially root disks gigabytes size prefetching large disks cause unacceptable start delay 
typical user session working set disk blocks needed small fraction total blocks disk pre fetching disk unnecessary 
oses designed hide disk latency tolerate latency incurred demand paging capsule disk 
implementation capsule disk system includ ing demand paging shown 
shim li intercepts vmware accesses plain disks forwards disk server local machine 
disk server performs translation plain disk access corresponding access cow disks capsule 
cow disk local re mote 
remote cow disk corresponding local shadow cow disk contains locally cached blocks remote cow disk 
vmware virtual process machine capsule shim library local rpc local disk server process compute server network rpc hcp server remote cow disks implementation capsule disks demand paging 
latest cow disk local writes local 
reads hand local remote 
case remote read disk server requests block shadow cow disk 
block cached locally fetched remotely added shadow cow 
starting capsule machine done follows th symposium operating systems design implemen tion usenix association memory image bitmaps cow disks transferred available locally 
capsule extended new local latest cow disk remote cow disk corresponding shadow cow disk created ex ist 
gsx server invoked capsule 
note remote cow disks immutable cached blocks shadow cow disks re multiple capsules suspends resumes single capsule 
useful network traffic incurred cached blocks 
collective system uses ldap directory keep track hosts cow disk 
general cow disks capsule disk dis tributed hosts created different hosts 
disks uploaded background central storage server bet ter availability 
hash compression fourth technique speed data transfer low bandwidth links 
inspired low bandwidth file system lbfs rsync decrease transfer time sending hash data blocks data :10.1.1.10.8444
receiver find data local storage hashes value copies data local storage 
receiver requests data server 
call technique hcp hashed copy 
collective prototype uses hcp demand paging disks copying memory disk images 
expect find identical blocks data disk images memories different users cap 
memory systems caches disk blocks 
second expect users collec tive migrate couple locations home 
migrating couple times loca tions contain older memory disk images contain blocks identical images users tend applications day day 
users run code distributed binary form binary code copied un modified memory application runs binary code microsoft office netscape web browser distributed millions people 
result expect find common blocks different users capsules 
lbfs hcp uses strong cryptographic hash sha 
probability blocks map bit sha hash negligible error rate tcp connection memory 
malicious par ties practically come data generates hash 
hcp algorithm intended migrating capsules low bandwidth links dsl 
hcp disk seeks effective throughput mbps 
intended high bandwidth lan environments network bottleneck 
hash cache design hcp uses hash cache map hashes data 
rsync cache persistent hcp need gen erate table scanning file file system transfer saving time 
cache implemented hash table size fixed creation 
bits hash key index table 
file data stored table entry pointer file offset 
duplicating file data cache uses disk space 
cache read ahead file priming memory cache data blocks 
read ahead improves performance avoiding additional disk accesses files contain runs similar blocks 
lbfs cache reads file data referenced table checks matches byte sha hash provided 
maintains integrity lows couple performance improvements 
cache need notified changes file data invalidates table entries check fails 
second need lock concurrent cache writes corrupted entries affect correctness 
cache stores bytes hash table entry allowing store entries 
hash key indexes bucket entries currently memory page size 
lookup cache lin ear search entries bucket check matches hash 
cache adds entry bucket possibly evicting existing entry 
entry contains count cache increments hit 
adding entry cache hash cache chooses fraction entries random bucket replaces entry lowest count evicts hopefully useful entry group 
entries chosen random de crease chance entry overwritten parallel threads 
finding similar blocks hcp compress transfers sender receiver divide memory disk images blocks recur 
addition demand pag ing operating system running inside capsule es divides disk image issuing requests usenix association th symposium operating systems design implementation blocks disk 
systems memory page unit disk memory management chose memory pages blocks 
memory page largest common unit different memory images memory disk 
blocks larger page contain adjacent pages physical memory virtual mem ory adjacent physical pages tbr com pletely different objects little reason believe adjacent pages memory image adjacent memory image disk 
copying memory image divide file page sized blocks image file 
disk images effective naively chop disk page size chunks start disk file data disk consistently page aligned 
partitions architecture disks rarely start page bound ary 
second common file system fat start file pages page offset start partition 
solve problem parse par tables file system superblocks discover alignment file pages 
information kept disk ensure request properly aligned file data pages copying disk image 
related note ext fat nt file systems default block sizes kb creating smaller partitions result files may start page boundaries 
luckily operator specify kb larger block size creating file system 
hcp hashes page granularities deal insertions deletions may change page file disk memory despite hcp finds similar pages 
hcp protocol hcp protocol similar nfs lbfs 
re quests remote storage done remote procedure call rpc 
server maintains client state hcp layer simplifying error recovery 
illustrates protocol structure 
time increases vertical axis 
retrieving file hcp client connects appropriate hcp server retrieves file handle lookup command shown part 
client uses read hash ob tain hashes block file sequence looks hashes hash cache 
blocks hash cache copied output file additional request needed shown part 
blocks cached read server read part 
client keeps large number read hash read requests outstanding attempt fill bandwidth client server effectively possible 
typical hcp session session initiation hash cache hit hash cache 
experimental results prototype system vmware gsx server running red hat linux kernel 
shim library wrote code java sun jdk 
experiments ran ghz pentium machines gb memory 
separate computer running freebsd dummynet shaper simulated kbps symmetric dsl link ms round trip delay :10.1.1.57.2969
confirmed setup worked measuring ping times ms tcp data throughput kbps 
checked correctness hcp implementation ensuring hash keys generated evenly distributed 
configured virtual machines mb memory gb local disk 
operating system applications local disk stored user files 
versions system expect user files reside network file system tolerant low band widths 
evaluate system performed experiments 
evaluated migration propagate soft ware updates 

evaluated effectiveness interaction ballooning demand paging hash compression 

evaluated trade offs directly active capsule versus booting inactive capsule 

simulated scenario users migrate capsules travel home 
software management software upgrades common system administration task 
consider environment collection ma chines maintained run exactly software con figuration users files stored network storage 
capsule system administrator simply distribute updated capsule machines 
th symposium operating systems design implementation usenix association system assuming machines pre vious version capsule need send latest cow disk containing changes 
results show hcp transfer cow disks reduces transfer amounts levels competitive better current software install update techniques 
con sider system administration tasks upgrading operating system installing software pack ages updating software packages 
operating system upgrade experiment measure amount traffic incurred updating red hat version version 
case system administrator start scratch create new root disk updating version capturing changes cow disk 
installation created gb capsule 
hashing capsule hash cache containing version data redundant 
gzip need transfer gb capsule 
full operating system upgrade lengthy opera tion regardless method delivery due large amount data transferred net 
capsules may advantage grades data transfer take place back ground user older version capsule upgraded completely different cap 
software installations updates experiment installed packages capsule containing debian gnu linux upgraded packages capsule containing red hat linux 
red hat chosen experiment cause date packages readily available 
case booted capsule logged root ran debian apt get red hat apt rpm download install new package configured software saved capsule child original 
mi child capsule machine parent cached 
reduce cow disk size software packages downloaded temporary disk manually removed capsule shut 
shows difference size trans fer new cow disk hcp versus size software packages 
shows insta lations known packages data point labeled mega corresponds installation packages including window system tex shown fig ure updates number previously installed applications data point labeled large corresponds mb mb mb installations 


lo kb ib mb mb updates 




kb kb mb mb mb null dic gnome core ghc zebra user amaya tx mega null zlib apache bind glibc ge difference size hcp transfer cow disk holding changes installed packages update packages 
update packages installed previously new packages pulled updates 
software dates binary patches install included new versions files software package customary upgrade method debian red hat systems 
include null data point corresponds size cow disk created simply logging root shutting cap updating software 
amounts kb hcp gzip consisting nodes written due updated access times temporary files writ boot 
shown transfers small installations updates dominated rewriting mb text databases available software 
hash ing saves having send entire database due insertions change pages 
results dic wv dial illustrate effect 
larger installs cost transferring disk hcp near orig inal package overhead database bounded constant gzip job com pressing data 
larger updates hcp sent data packages updates con usenix association th symposium operating systems design implementation tained minor changes previous versions security patches bug fixes hashing similarities older installed packages 
experiment updates mb savings amount case 
results show distributing cow disks hcp reasonable alternative current software install update techniques 
package installations upgrades incur relatively low fixed cost benefits gained batching smaller installs 
case dates hcp exploit similarities new old packages decrease amount data transferred 
convenience tedious error prone update method advantage 
migration active capsules show capsules support user mobility formed sets experiments windows capsule second linux capsule 
simulated workload knowledge worker set gui intensive applications windows operating system 
rational visual test software record user activities generate scripts played back repeatedly different test con ditions 
started number common applications including microsoft word excel powerpoint plus forte java programming environment loaded large documents java sources saved active cap migrated machine proceeded applications 
linux tested migration interactive cpu bound jobs 
chose applica tions processor simulation linux kernel compilations gcc web serving apache 
imagine useful migrate large pro cessor simulations machines idle migrate fully configured dynamically adjust current demand 
experiment performed task migrated capsule repeated task 
evaluate contributions optimiza tions ran experiment twelve times 
exper results shown 
experimented network speeds kbps dsl switched mbps ethernet 
speed compared performance obtained bal 
varied hashing scheme ex periments run hashing hashing start ing empty hash cache hashing starting hash cache primed contents cap disk 
run measurements migration data time start capsule execution data transferred gzip mb lo migration nh hp nh hp nh hp nh hp nh hp nh hp apf windows sm tls linux kerr el linux 
time dsl tests minutes nh hp nh hp apache lint migration nh hp nh hp nh hp nh hp interactive apps windows nh hp nh hp kernel compile nh hp nh hp linux time lan tests minutes nh hp nh hp nh hp nh hp nh hp nh hp nh hp nh hp balloon interactive windows lim kernel lim apache linux migration experiments 
data transferred remote activations executions shown gzip 
time activate run experiments shown kbps dsl mbps switched 
labels nh hp denote hashing hashing empty hash cache hashing primed cache respectively 
data time took execute task started 
shows amounts data transferred network migration execution gzip 
amounts independent network speed assumed experiment 
memory image transferred migration step disk data transferred demand execution step 
gzip compresses mb memory data mb 
windows interactive benchmark applications incurs uncached disk accesses execution 
hashing empty cache little effect find similarities data trans 
results show hashing primed disk ballooning greatly reduce amount memory data transferred mb 
finding similarities old new capsules primed hashing reduces amount data transferred migration execution 
balloon th symposium operating systems design implementation usenix association ing reduces amount memory data needs transferred possible expense increasing data transferred execution 
effectiveness reducing total amount data trans application dependent apache large working set benefit tremendously bal 
combining ballooning primed hashing generally results amount data transferred 
timing results obtained kbps dsl link shown follow pattern 
execution takes longer proportionally involves computation just data trans fer 
optimization takes minutes just transfer memory image capsule start executing 
hashing priming reduces start minutes windows interactive experiment minutes appli cations 
ballooning reduces start time minutes 
combining ballooning priming yields best result cases 
exception apache demonstrates ballooning ap plications large working set slow significantly 
hashing designed optimization slow network connections fast network hashing slow transfer result computational overhead 
shows effect 
hashing primed cache worse additional tion performed ensure blocks tion machine match hash 
shows takes minutes transfer image minutes 
apache experiences slight slowdown bal decreases start time time 
windows experiment parts interactive part word excel powerpoint number large documents followed compiling source file building java archive jar file forte 
mer takes user minutes complete takes seconds running locally ing vmware 
test visual test plays back keystrokes mouse clicks quickly possible 
lan primed hashing interactive part takes minutes complete forte takes min 
dsl primed hashing interactive part takes minutes forte takes minutes 
dsl lan user sees adequate interactive response 
forte slower dsl performs small reads writes 
reads synchronous sensitive slow dsl link 
write kb cow block incur read block write fills block rarely case 
processor simulation kernel compile apache tasks take minutes respectively exe cute running vmware locally 
bal applications run mainly memory remote execution lan dsl slower local execution 
ballooning increase run time especially case apache 
results show active capsules migrated ef support user mobility 
users high speed connectivity students living university memory images transferred ballooning hashing just minutes 
users dsl links separate scenarios 
case commute home earlier capsule destination hashing migrate memory image 
foreign capsule bal helpful reduce start time applications 
active versus inactive capsules capsules possible machine collective system run application hav ing install application operating sys tem application runs 
possible user continue execution active capsule different machine having boot machine log run application 
ran experiments compare modes op eration 
experiments involved browsing web page local capsule mozilla running linux 
experiment results see active inactive capsules useful different scenarios capsules easier takes time installing required software machine 
different scenarios considered 
mounted inactive capsule file nfs dsl link 
booted inactive capsule ran mozilla browsed local webpage 
re suits test shown label nfs 
demand paging boot inactive capsule ran mozilla browse local webpage 
considered alternatives machine executed similar capsule empty hash cache machine executed capsule hash cache primed disk state capsule machine executed capsule capsule shadow disk required blocks lo cally cached 
results shown un usenix association th symposium operating systems design implementation der labels boot boot boot respectively 

activated active remote capsule ready running browser 
ran ballooning priming hash cache inactive capsule disk 
results shown labels active active active active bp 
execution migration nfs boot boot boot active active active active bp times activating browser capsule minutes 
capsules nfs booted nfs mounted disk boot remote capsule booted demand paging unprimed database boot remote capsule booted second time active migration capsule running browser 
suf fix indicates ballooning done suffix indi cates primed database 
bars show time taken perform ing test 
times split execution mi times 
expected inactive capsules scenarios negligible migration times execution times negligible active capsules scenario 
comparing dif ferent scenarios consider total times sum migration time execution time 
experiment demand paging empty hash cache performed better nfs 
demand paging brought total time min nfs minutes 
cache similar capsule total time inactive capsule dropped minutes 
inactive capsule activated required blocks locally cached capsule shadow disk took minutes comparable boot local cap vmware 
active capsule bal priming required minutes 
balloon ing active capsule brought time minutes priming hash cache brought fur ther minutes comparable time taken boot local machine bring mozilla 
times time taken install required software machine 
results suggest user previously inactive capsule user boot capsule user pre similar capsule user ac tive capsule executing capsule time user active 
capsule snapshots simulate migration user home machines series snapshots business benchmark 
simulation experiments show migration achieved typical user commute time 
benchmark exercises popular applica tions access excel powerpoint word mi project lotus notes norton antivirus netscape communicator 
benchmark replays user interaction fast possible resulting user session represents time compressed sequence user input events producing large amounts stress computer short time 
produce snapshots ran itera tion test suite complete images machine state minute execution took twelve snapshots starting minutes execution benchmark 
spends roughly minutes execution copying ap plication programs data plans begins actual workload copying finishes 
snapshots taken invoking balloon process reduce user memory state 
simulate effect user machine alter home measured transfer snapshot machine held previ ous snapshots 
shows amount data trans disk memory images snapshot 
includes amount data transferred hashing gzip 
amount data cow disk snapshot varied depending amount disk traffic win stone generated snapshot execution 
large size snapshot cow disk due win stone copying deal data benchmark 
size cow disks snapshots range mb gzip transferred completely min 
hashing gzip compresses cow disks raw size com presses memory images raw size 
reduction due effect bal process writing zero pages memory 
sizes compressed memory images fairly constant snapshots 
memory images require transfer mb data takes minutes dsl link 
results suggest time needed transfer new memory image capsule disk cases typical user commute time 
th symposium operating systems design implementation usenix association cow disks data transferred mb memory images data transferred mb raw hash hash gzip hash hash gzip snapshots benchmark showing disks memory images transferred 
raw sizes shown constant mb 
related done virtual machines hardware level interest revived disco denali projects vmware gsx server 
earlier demonstrated tion performance economic properties virtual machines 
chen noble suggested hardware level virtual machines user mobility 
satyanarayanan independently came idea vmware vmms achieve mobility 
looked distributing disk images managing large groups machines 
rauch partition repositories explored maintaining clusters machines distributing raw disk images cen repository 
rauch focus reducing size repository reducing time spent send ing disk images wan 
system reduces size successive images storing differences revisions 
hashes detect duplicate blocks store copy block 
emulab cluster demand distributing disk images help maintain groups computers 
term capsule introduced earlier authors schmidt 
capsules implemented solaris operating system groups solaris processes migrated 
looked migration checkpoint ing process object granularities 
systems working process level include condor 
object level systems clude legion emerald rover 
lbfs provided inspiration hcp hash cache :10.1.1.10.8444
lbfs splits blocks finger print function hcp hashes page aligned pages im prove performance memory disk images 
man ber sif uses content fingerprinting files summarize identify similar files :10.1.1.106.2691
shown system moves com puter state slow dsl link minutes hours 
kbps dsl link capsules experi ments move minutes 
examined optimization techniques 
copy write cow disks capture updates disks amount state transferred update cap proportional modifications cap 
cow disks created installing soft ware large larger convenient managing large numbers machines 
demand paging fetches portion capsule disk requested user tasks 
bal removes non essential data memory decreasing time transfer memory image 
demand paging ballooning leads fast loading new capsules 
hashing exploits similarities related capsules speed data transfer slow networks 
hashing especially useful com pressing memory images user commutes disk im ages software updates 
hopefully systems take advantage tech niques fast capsule migration computers eas ier maintain 
acknowledgments research supported part national sci ence foundation stanford graduate fellowships 
charles dis system management james norris ing earlier prototype shepherd jay lepreau mike david helpful comments 
fips 
announcement weakness se cure hash standard 
technical report national standards technology nist april 
usenix association th symposium operating systems design implementation arpaci dusseau arpaci dusseau 
information control gray box systems 
proceedings th acm symposium oper ating systems principles sosp pages october 
rosenblum 
trix network virtual machine monitors dynamic content distribution 
seventh interna tional workshop web content caching dis tribution august 
bugnion devine rosenblum 
disco running commodity operating systems scalable multiprocessors 
acm transactions computer systems november 
joux 
differential collisions sha 
proceedings crypto th international cryptology conference pages august 
chen noble 
virtual better real 
proceedings th ieee workshop hot topics operating systems may 
www cong 
deutsch 
zlib compressed data format specifica tion version may 
goldberg 
survey virtual machine research 
computer june 
grimshaw ferrari humphrey 
legion operating system wide area computing 
technical report cs dept computer science university virginia march 
ia intel architecture software developer manual volumes 
developer intel com design pentium manuals 
ibm virtual machine planning guide 
ibm 
joseph tauber kaashoek 
mobile computing rover toolkit 
ieee transac tions computers march 
jul levy hutchinson black 
fine grained mobility emerald system 
acm transaction computer systems february 
satyanarayanan 
internet sus pend resume 
proceedings workshop mobile computing systems applications pages june 
litzkow livny mutka 
condor hunter idle workstations 
proceedings th international conference distributed com puting systems pages june 
manber :10.1.1.106.2691
finding similar files large file sys tem 
proceedings usenix winter technical conference pages 
moore chase 
cluster demand 
tech nical report duke university may 
muthitacharoen chen mazi res :10.1.1.10.8444
low bandwidth network file system 
proceed ings th acm symposium operating sys tems principles sosp pages ber 

story tcp 
plank beck li 
transparent checkpointing unix 
proceed ings winter technical confer ence pages january 
rauch stricker 
partition repositories partition cloning os independent software maintenance large clusters pcs 
proceedings ieee international conference cluster computing pages 
rizzo :10.1.1.57.2969
dummynet simple approach evaluation network protocols 
acm computer communication review jan 
schmidt 
supporting ubiquitous computing stateless consoles computation caches 
phd thesis computer science department stan ford university august 

checkpointing process migration mpi 
proceedings loth ternational parallel processing symposium pages april 
theimer cheriton 
preemptable remote execution facilities system 
proc 
loth symposium operating systems principles pages december 
tridgell 
efficient algorithms sorting synchronization 
phd thesis australian national university april 
gsx server white 
www vmware com pdf gsx whitepaper pdf 
waldspurger :10.1.1.7.1541
memory resource management vmware esx server 
proceedings fifth symposium operating systems design im plementation december 
whitaker shaw gribble 
denali lightweight virtual machines distributed networked applications 
technical report univer sity washington february 
white integrated experimental environ ment distributed systems networks 
pro ceedings fifth symposium operating sys tems design implementation december 
architecture specifications 
www microsoft com specs 
th symposium operating systems design implementation usenix association 
