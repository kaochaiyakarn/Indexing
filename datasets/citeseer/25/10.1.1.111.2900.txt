chi april vienna austria intel research berkeley berkeley ca usa anind intel research net cappella programming demonstration context aware applications anind dey hamid chris beckmann ian li daniel hsu college computing georgia tech atlanta ga usa cc gatech edu context aware applications applications implicitly take context account adapting changes user activities environments 
intimate knowledge activities environments users 
currently support users build context aware applications dynamic settings 
address issue cappella programming demonstration context aware prototyping environment intended users 
users program desired context aware behavior situation associated action situ writing code demonstrating cappella annotating relevant portions demonstration 
meeting medicine scenario illustrate user demonstrate different behaviors cappella 
describe cappella underlying system explain supports users building behaviors study endusers illustrate feasibility usability 
categories subject descriptors information interfaces presentation user interfaces graphical user interfaces prototyping programming techniques visual programming 
probability statistics time series analysis general terms human factors design keywords context aware computing programming user programming statistical machine learning twelve years ago mark weiser introduced idea ubiquitous computing ubicomp computing moves desktop environment 
important component ubicomp context awareness applications dynamically adapt changes user activities environments 
common context aware applications include tour guides smart environments permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
chi april vienna austria copyright acm 
eecs uc berkeley berkeley ca usa beckmann cory cs berkeley edu university washington seattle wa usa ian li washington edu 
research context aware computing focused building infrastructures support programmers building applications applications despite tremendous value empowering users build applications :10.1.1.9.5130
describe cappella system designed empower users building types applications 
focus users 
users depth knowledge activities environments developer 
second developer control system behavior user unable evolve system environments activities change 
contextaware application system action implicitly sensed interpreted information user 
potential designing system performs wrong action seriously users quite high 
calls system placed hands users build configure application want want 
currently develop context aware application developers options may create essentially rulebased system composed individual components sensors avoid intelligence camp may build recognition system intelligence camp focus efforts integrating sensed data interpret user intent actions :10.1.1.9.5130
approaches inaccessible users 
majority research avoid intelligence camp toolkits support programmers built 
toolkits require large amounts code develop simple context aware behaviors sensed situations associated actions 
obviously realistic users tremendous difficulty programming vcr thermostat configurable device setting temperature different times day 
intelligence camp recognizers handcrafted period days weeks months attempt optimize recognition performance 
far ability programmers users specify tune features go recognizer 
programmers build context aware applications users having little control applications behave 
little emphasis volume number chi april vienna austria placed empowering users build contextaware applications 
past explored support enduser control rule approach 
valid approach limited situations user reasonably expected come static rule timely fashion accurately describes desired context aware behavior 
design process context aware behaviors cappella 
user actions shown dark shading system actions shown light shading 
focuses empowering users build context aware applications depend intelligence making inferences sensed information environment 
address issues introduced cappella context aware prototyping environment users build applications writing code 
cappella uses combination machine learning user input support building contextaware applications programming demonstration 
specifically user cappella demonstrates contextaware behavior includes situation associated action 
uses gui indicate portions demonstration relevant behavior trains cappella behavior time giving multiple examples 
trained run cappella enact demonstrated behavior performing demonstrated action detects demonstrated situation 
programming demonstration pbd approach available empower users believe offers long term potential supporting dynamic complex behaviors investigate potential 
pbd allows users build context aware behaviors situated manner cappella musical term means accompaniment 
named system empowers user act accompaniment programmer 
complex time consuming build 
cappella requires writing code supports building behaviors neatly articulated simple rule 
key idea cappella require users expertise creating recognizers creates recognizers leveraging natural abilities understand behaviors ability express behaviors 
consider example meeting 
context aware behavior meeting occurs load presentation file launch notes application 
meeting defined number different ways account number people location presence conversation ask people define meeting get different answers 
ask people watch video meeting similar insights features comprised meeting meeting started ended classic case recall vs recognition 
feature specification essence cappella 
section surveys previous research areas context aware computing user programming programming demonstration providing motivation 
sections example scenario describe users cappella build context aware behaviors 
describe user interface underlying machine learning system supports users 
demonstrate viability approach cappella learn meeting behavior medicine behavior 
describe results user study show cappella useful usable tool 
cappella exploration demonstrates feasibility programming demonstration approach building context aware behaviors 
conclude discussion current limitations approach provide directions research 
related pattern recognition difficult problem field research investigates build systems recognize classify patterns interest 
recognizing human activity rapidly growing sub field prominent hci community late research focuses techniques programmers build useful recognizers number systems investigate idea putting human loop build pattern recognizers 
scott study utility having humans loop optimization problems show useful approach long users focused tasks humans excel including identifying useful areas search space 
interactive evolutionary computation optimization method users asked subjectively evaluate output machine learning system 
volume number chi april vienna austria machine learning system optimizes learning obtain output preferred user 
traditionally programming demonstration systems focused supporting visually tasks filing email web browsing 
domain different motivated mixed initiative active learning 
mixed initiative approach uses agents graphical widgets obtain input user help recognizer improve recognition ability resolve ambiguity 
similarly active learning systems queries user perform experiments gather data expected maximize performance 
active learners demonstrated significant decreases amount data required achieve equivalent performance passive learners 
similarly cappella user provides data machine learning system focusing learning system input 
show approach requires small amounts time data produce reasonable activity recognizers 
systems take similar approach provided tremendous inspiration neural network house 
neural network house adaptive system controls utilities lighting heating house inferring appropriate behaviors observing inhabitants house 
mozer points subtle statistical behavior patterns exploited control adaptive system house 
system turns lights particular lighting level occupant enters room system learns occupant preferences behaviors 
adjusts lighting learns prefers different lighting level chose adjusts model user accordingly 
interesting approach order recognize complex behaviors meeting additional user input reinforcement learning required guide recognition system 
source inspiration cappella 
uses interactive machine learning allow users create image classifier 
users provide images classify annotate images coloring indicating areas image classifier look 
fails olsen showed users quickly create variety image classifiers skin laser pointer detectors 
image classifiers built application 
opens space imagebased recognizers users way cappella opens space recognizer contextaware applications users 
leveraging user input improve machine learning system supports users creating recognizers interesting context aware behaviors 
leverage discussed human loop reduce amount data time required build useful contextaware behaviors 
cappella empowers users create context aware behaviors require considerable programming expertise 
section presents example uses cappella build context aware behavior demonstrate usefulness tool 
revisit example describe details cappella 
example application describe users interact cappella create example behavior meeting 
imagine meeting scenario user having phone meeting wants turn lights launch application record notes meeting 
scenario quite common repeated workplace environments 
user wants smart environment recognize meeting easily define conditions comprise meeting 
current systems support priori creation static brittle heuristic true indicates meeting occurring 
meeting recognized perform desired actions 
users cappella specify context aware behaviors situ 
cappella user interface trained meeting 
user selected start time location rfid data streams 
actions shown turning lights starting notes recording program 
user ready create context aware behavior starts cappella recording system 
captures data sensors available system video camera microphone radio frequency identification system rfid switch indicates phone instrumented actuators detect actions logging logging computer sending email turning light starts meeting performs actions smart environment perform behalf 
meeting stops recording system uses cappella user interface view recorded 
user interface shown displays data streams recorded allows user play back 
volume number chi april vienna austria user interface divided parts 
left frame video player allows user view recorded video listen recorded audio 
right frame top user view events detected recorded sensor data bottom view actions took recorded session 
viewing captured data annotate data selecting streams information considers relevant behavior created actions wants cappella perform behalf 
sets start time streams indicate behavior started ended shown 
finished pruning data train cappella data 
user repeats process small number times period days weeks improves cappella ability recognize behavior new data 
subsequent iteration user test cappella ability recognize demonstrated behavior newly annotated data see performs necessary train additional data 
desired go back view previously trained data re test updated recognizer 
cappella improved recognizes captured data correctly regular basis user tells constantly collect data 
looks programmed situation meeting live data detected performs specified actions behalf 
summarize user records behavior situation action wants cappella learn 
selects relevant events recording uses train 
sufficient number training examples provided tells cappella recognize situation performs demonstrated actions 
cappella design describe design cappella show supports programming context aware behaviors demonstration 
cappella main components recording system event detection user interface machine learning system 
discuss detail 
recording system order user demonstrate context aware behavior cappella multimodal sensing capability capture situation action taken 
cappella currently uses overhead video camera microphone rfid antennas tags switch detects phone capture events occur demonstration situation 
uses instrumented light switch audio alarm instrumented computer login logout sending email loading files capturing user notes capture events occur demonstration action 
easy add additional sensors cappella plans 
sensors sufficient investigate feasibility approach 
user starts recording sensors storing time stamped data separate logs sensor 
event detection user stops recording system sensors sensing event detection data logs 
event detection process deriving higher level events raw data produced video camera microphone sensor directly produce higherlevel events 
frame captured video number people scene location video detected added event log 
sample captured audio volume level determination talking output 
additional detection added sufficient investigate approach 
visual events determine number people scene location built simplified implementation framework bramble :10.1.1.4.7932
bramble uses weighted mixture gaussian densities determine likelihood part scene belongs foreground added scene background existed scene people entered 
cappella installed background model created users tool provide 
capturing number short video clips containing background number different lighting conditions improve robustness 
foreground models created different numbers people improve visual event detection system ability detect people location captured video 
visual event detection system examines user captured video data uses condensation particle filtering framework 
technique hypothesizes existence objects interest multiple locations uses comparisons video frames foreground background model confirm hypotheses 
hypotheses checked respect observed image number people scene location estimated basis hypothesis 
estimates written new timestamped log file 
provide tool support users creating event detectors number people location imagine allow perform task easily 
audio events determine people talking scene provide tool helps user capture audio clips ambient sound talking 
tool takes clips uses means clustering analysis model conditions 
captured audio file compared clusters talking talking determine clusters conditions closer 
results comparison output new timestamped log file 
user interface cappella user interface drew inspiration commercial tools display users interact multiple streams information apple tm volume number chi april vienna austria adobe 
user interface designed iteratively starting prototype implementing multiple versions evaluations stage 
prototypes tested different representations logged data cell cell showed numerical value sensor strips data numerical value grouped icon icons abstractly represent sensor data color size density icons encode information 
created variations test users preferred view logged data time represented horizontally vertically 
gave prototypes users asked select relevant features sample demonstration user talking friend lab leaves room lunch 
user leaves room turns light 
prototypes represented streams information sensor augmented environment capture number people locations scene phone ringing conversation phone people scene user logging computer turning lights leaves room friend 
users asked select relevant features scene prototypes 
users preferred horizontal view data vertical view 
vertical view afforded natural horizontal scrolling data streams easily read horizontally audio 
users disliked icon view represented data abstractly wanted know numerical values 
mixed feelings strips cell views 
users preferred strips view provided cleaner interface easier locate transitions data 
third user preferred cell view showed delineation events clearly useful selecting multiple events 
views engendered different selection behaviors 
user chose transitions events data changed value user chose intervals focusing transitions selecting events value third chose 
support selection combined views labeling transitions delineating discrete events 
interface shown 
consists main panels events panel viewing captured events player panel watching listening captured audio video 
events panel displays events actions captured recognized cappella 
events displayed top panel actions displayed bottom 
different types events actions represented different ways 
currently cappella renders different types data feedback prototype users 
boolean data phone rendered colors labels 
integer data number people scene real number data sound level represented line graphs 
multiple point events location people scene represented points cartesian plane 
data types data requires horizontal vertical space represent 
resolution data rendered data types 
multiple string events actions represented icons hovering mouse icon reveals string represents 
created specific representation rfid events fit categories 
represented multiple line graphs values 
users select streams relevant demonstrated behavior clicking event checkboxes 
zoom slider right side panel allows users inspect select events finer granularity 
zooming event streams zoomed view top zoomed view bottom 
built versions interface 
supports selection number sets events event stream event streams choose time stream stream 
interface adequate investigating ability cappella support programming demonstration context aware behaviors informal tests users clear providing flexibility selecting features may complicated 
validation section discuss interface illustrate cappella usefulness 
second simpler interface created allowed users select single start time time applied selected streams described initial meeting scenario 
validation section discuss user study performed version 
synchronized time marker 
player panel shown allows user playback captured video audio event streams fig 

player panel synchronized time marker event panel helping users relate detected events different streams 
machine learning system user done selecting events believes relevant behavior demonstrated sends data cappella machine learning system testing volume number chi april vienna austria training 
case user indicates name behavior data tested cappella responds indication behavior recognized 
case user indicates name behavior train cappella updates model behavior new data 
case data collection time series data 
machine learning system cappella uses dynamic bayesian network dbn framework popular inference extraction stochastic framework modeling time series data 
particular dbn equivalent hidden markov models hmms support activity recognition 
hmms essentially particular instance dbns offer scalability generality dbns 
data user selects combined single stream observations observation time represented tuple containing data selected event streams 
disjoint time intervals selected different event streams null data entered streams selected indicate machine learning system event streams ignored time intervals 
output dbn probability distribution hidden states meeting place 
turn deterministic recognizer creating models user input demonstrated activity meeting occurring activity place meeting occurring 
models compared test data model produces higher likelihood wins 
comparison occurs continuously sliding window seconds 
second system compares output models account data previous seconds comparisons filtered remove noise 
entire process results short lag producing results try optimize 
machine learning systems recognizer hand created expert activity recognized 
key cappella user need know understand technical details dbns 
hidden user 
cappella user simply select event streams events thinks relevant behavior trained dbns 
user create behavior models train test data needing learn details models dbns 
validation case studies previous section described components cappella 
section demonstrate case studies user study cappella support users programming context aware behaviors demonstration 
case studies illustrate designers system cappella recognize common situations meetings medicine perform demonstrated actions behalf user 
user study shows users able create train effective models meeting cappella 
case study meeting scenario investigate cappella programming demonstration approach tested meeting scenario described example application 
cappella recorder system collected samples data contained people having meeting contained people having meeting contained person having meeting telephone contained person having meeting 
video minutes long 
videos partially scripted asked subjects videos act meeting 
videos contained sufficient variety different people different locations scene moving scene different times varying levels audio variety phone 
additional variability added event detection system 
randomly chose person meeting samples cappella interface selected data considered relevant meeting situation 
study initial complex interface allowed select different time series data different data streams 
data create train models cappella 
trained different models training sample second second training samples 
repeated creating new set models person meeting samples 
determine number demonstrations needed create robust model cappella approximately 
training model new demonstration took approximately seconds data samples 
learning curves meeting scenario models 
nm nm nm nm table 
confusion matrix actual classification test data meeting scenario models person meeting nm 
tested stable models test set person meetings non meetings person meetings non meetings 
confusion matrix showing results table 
correct classification volume number chi april vienna austria occurs model correctly indicates meeting occurring time interval specified user 
meeting recognizer recognized meetings test cases performed slightly worse detecting 
meeting recognizer recognized meetings test cases performing slightly better non meeting cases 
case study medicine scenario tested cappella second scenario show different scenarios requiring developer build entirely new machine learning frameworks 
scenario built model user medicine demonstrations 
user takes medicine activity logged medical journal 
take medicine certain time audio alarm goes reminding take 
scenario sensor modalities previous scenario 
rfid tags attached user medicine rfid reader attached medicine cabinet 
assumed user picked medicine bottle took medicine 
ideal case weight sensor detect change bottle weight 
audio alarm journal logging pc applications instrumented collect interaction data 
captured number data samples user entering scene medicine 
number people scene important person rfid events determine right user scene picked medicine bottle 
behavior built simple rule scenario illustrate cappella range complex behaviors requiring change underlying system 
situation straightforward cappella able detect user taken medicine accuracy records log time 
user take medicine cappella sets audio alarm 
summary case studies results show validity cappella approach 
small number demonstrations build models performed quite detecting meetings place close medicine situations 
test mode behaviors recognized cappella controls actuators environment perform actions demonstrated user turning lights launching note recording program setting alarms logging records 
validation user study validate cappella ability support users creating context aware behaviors demonstration conducted user study participants 
particular studied effectively users able create models meeting behavior cappella 
participants computer scientists variety backgrounds including actors special education teachers students ages ranging 
spent minutes user tutorial cappella interface describing task 
randomly chose person meeting data samples person data samples samples collected initial case study 
gave users random orders asked select event streams relevant meeting select time meeting began meeting ended 
feedback provided user choices samples samples 
user study intended test cappella complete system 
focused testing user ability interface previously captured data create effective models 
simplify task investigate differences models created different interfaces constrained interface user study 
interface allows users select relevant event streams single start time 
complex interface allows users select relevant event streams number sets events event stream streams 
data user created series models determine effective users creating models cappella interface 
tested video clips clips meeting non meeting meeting non meeting models 
averaging users meeting models created accurately detected meetings non meetings trials std 
dev 

individual users models ranged accuracy 
meeting models success rate std 
dev 

individual users models ranged accuracy 
despite low results person condition user study shows cappella effective allowing users create models 
person person cases training sets create models 
saw initial case study approximately training sets required reasonable model 
person condition results quite high improving number training sets increased correlation coefficient expected 
person condition results poorer improving number training sets correlation coefficient 
explanation poorer data compared case study includes fact data viewing people locations seen potentially causing random features selected meeting relevance 
addition possible selecting start time time appropriate event streams produces reliable results 
cappella user interface appeared shallow learning curve 
users require assistance interface study speed increased annotated demonstrations 
volume number chi april vienna austria suggested improvements interface making selection start times easier users reported system easy 
cappella context aware prototyping environment 
cappella supports users programming demonstration recognition contextaware behaviors 
opens space context aware computing users allowing build situ dynamic behaviors complex time consuming produce rule system 
users need expertise creating recognizers 
cappella takes care details creating recognizer input user determine recognize 
allows users demonstrate interesting behaviors small number times learns demonstrations 
user performs demonstration situation associated action annotates captured events helping cappella learn 
cappella recognizes demonstrated situation performs demonstrated actions 
validated feasibility approach cappella ways 
build common behaviors meeting medicine scenario 
tested cappella ability support users creating models small number demonstrations users creating models meeting scenario 
study showed users liked system able successfully create models 
creating interesting models difficult single person models cappella approach promising 
cappella investigation supporting programming demonstration context aware behaviors 
successful investigation see room improvements exploration 
plan cappella build wide variety scenarios perform thorough evaluation users 
experiment allowing users specify information temporal ordering events actions creating behavior models 
investigate scalability cappella supporting multiple recognizers simultaneously supporting multiple users multiple locations sensors 
data system higher dimensionality traditional desktop uses pbd 
requires examples data provided machine learning system 
interested improving algorithms reduce number examples required model desired behaviors 
interested recognizers built cappella part event detection system allow users build behaviors top trained recognizers 
funded part national science foundation iis intel 
john canny michael jordan stuart russell feedback assistance machine learning aspects 

abowd cyberguide mobile context aware tour guide 
acm wireless networks 

coen human computer interaction learned worrying love intelligent room 
ieee intelligent systems 

cooltown homepage 
cooltown hp com 
dey conceptual framework toolkit supporting rapid prototyping context aware applications 
hci journal 

duda hart stork pattern classification nd edition 
john wiley sons press 


fails olsen design tool camera interaction 
proc 
chi 

gajos user empowerment human centered pervasive computing 
proc 
pervasive 

energy revolution 
electronic house 

horvitz principles mixed initiative user interfaces 
proc 
chi 


hudson predicting human sensors wizard oz feasibility study 
proc 
chi 

humble playing bits user composition ubiquitous domestic environments 
proc 
ubicomp appear 

isard blake condensation conditional density propagation visual tracking 
international journal computer vision 

isard maccormick bramble bayesian multiple blob tracker 
presence 

user control cooperative computeraided design 
proc 
uist 

lieberman wish command programming example 
morgan kaufman 


mankoff interaction techniques ambiguity resolution recognition interfaces 
proc 
uist 

mozer neural network house environment adapts inhabitants 
proc 
aaai spring symposium intelligent environments 

murphy dynamic bayesian networks representation inference learning 
phd thesis uc berkeley 


oliver layered representations human activity recognition 
proc 
international conference multimodal interfaces 

pascoe stick note architecture extending interface user 
proc 
intelligent user interfaces 

rabiner tutorial hidden markov models selected applications speech recognition 
proc 
ieee 

schmidt van laerhoven build smart appliances 
ieee personal communications 

scott investigating human computer optimization 
proc 
chi 


sohn dey icap informal tool interactive prototyping context aware applications 
extended abstracts chi 

trevor issues personalizing shared ubiquitous devices 
proc 
ubicomp 

weiser computer st century 
scientific american 

wolfman collaborative interfaces learning tasks smartedit talks back 
proc 
iui 
volume number 
