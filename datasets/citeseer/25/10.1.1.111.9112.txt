symbolic dynamic programming order mdps craig boutilier dept computer science university toronto toronto cs toronto edu dynamic programming approach solution order markov decisions processes 
technique uses mdp dynamics represented variant situation calculus allowing stochastic actions 
produces logical description optimal value function policy constructing set order formulae minimally partition state space distinctions value function policy 
achieved operation known decision theoretic regression 
effect algorithm performs value iteration explicit enumeration state action spaces mdp 
allows problems involving relational fluents quantification solved requiring explicit state space enumeration conversion propositional form 
markov decision processes mdps de facto standard model decision theoretic planning problems 
classic dynamic programming algorithms mdps puterman require explicit state action enumeration 
example classical representation value function table vector associating value system state produced iterating state space 
state spaces grow exponentially number domain features direct application models ai planning problems limited 
consequence mdp research ai focussed representations algorithms allow complex planning problems specified concisely solved effectively 
techniques function approximation bertsekas tsitsiklis state aggregation boutilier proven reasonably effective solving mdps large state spaces 
approach strong connection classical planning decision theoretic regression dtr model boutilier 
state space mdp characterized number random variables propositions domain specified logical representations actions capture regularity effects actions 
instance bayesian networks decision trees algebraic ray reiter dept computer science university toronto toronto 
reiter cs toronto edu bob price department computer science university british columbia vancouver bc cs toronto edu decision diagrams adds probabilistic extensions strips concisely represent stochastic actions mdps 
representations exploited construction logical representation optimal value function policy obviating need explicit state space enumeration 
process viewed automatic state space abstraction able solve fairly substantial problems 
instance spudd algorithm hoey solve mdps hundreds millions states optimally producing logical descriptions value functions involve hundreds distinct values 
works suggests large mdps described logical fashion solved optimally exploiting logical structure problem 
unfortunately existing dtr algorithms designed propositional representations mdps realistic planning domains best represented firstorder terms exploiting existence domain objects relations objects ability express objectives action effects quantification 
existing dtr algorithms applied problems grounding domain 
unfortunately approach impractical number propositions grows quickly number domain objects relations relatively simple domains generate incredibly large numbers propositions grounded 
number propositions dramatic impact complexity algorithms 
specifying reasoning intuitively simple domain properties involving quantification problematic propositional setting 
instance simple objective want widget factory unwieldy relevant constants widget factory 
grounding domain description naturalness expressive power relational representations quantification specifying dynamics objective functions 
existing dtr algorithms require explicit action enumeration performing dynamic programming problematic order domains number ground actions grows dramatically domain size 
assumes finite domain domain infinite algorithms generally 
address difficulties proposing decision theoretic regression algorithm solving firstorder mdps 
adopt representation reiter boutilier stochastic actions objective functions specified situation calculus 
derive version value iteration bellman constructs order representations value functions policies exploiting logical structure mdp 
algorithm constructs minimal partitioning state space represented set order formulae associates values action choices element partition 
consequence dynamic programming algorithm solves order mdps explicit state space action enumeration domain 
furthermore technique propose reason purely symbolically value optimal action choice 
model viewed providing tight seamless integration classic knowledge representation techniques reasoning methods solution algorithms mdps 
viewed providing theoretical foundations order decision theoretic regression 
encouraged success dtr methods propositional mdps demonstrated mdps value functions policies represented concisely logical techniques 
doubt relations quantification ultimately enhance methods tremendously 
review mdps section briefly describe representation section 
derive symbolic dynamic programming technique detail section discuss various implementation issues section 
conclude discussion directions 
markov decision processes standard state formulation mdps 
assume domain interest modeled fully observable mdp bellman puterman states actions finite set actions induce stochastic state transitions denoting probability reached executed state 
assume real valued reward state action state utility immediate function stationary describes particular policy course action adopted agent action taken state 
decision problem faced agent mdp forming optimal policy maximizes expected total accumulated reward infinite horizon agent acts indefinitely 
compare policies adopting expected total discounted reward optimality criterion rewards discounted rate value policy denoted expected total discounted reward accrued optimal policies 
optimal value function policy value optimal policy 
denoting ignore actions costs ease exposition 
impose additional complications model 
value iteration bellman simple iterative approximation algorithm constructing optimal policies 
proceeds constructing series stage go tions value setting func recursively define stage functions value functions function denotes expected value performing stages go acting op 
functions sequence action state value produced value iteration converges linearly finite actions maximize eq 
form optimal policy approximates value 
refer puterman discussion stopping criteria 
definition function define value function 
exactly eq 
arbitrary value right hand denotes value state replacing function acting way value obtain performing side subsequently 
order representation mdps planning domains specified terms set random variables jointly determine state system 
example system state may assignment truth values set propositional variables 
addition variables may structured built various relations functions domain objects naturally lend order representation 
representing solving mdps circumstances generally impractical classic state transition matrices dynamic programming algorithms 
difficulty lies need explicitly enumerate state action spaces 
state spaces grow exponentially number propositional variables need characterize domain 
furthermore order domain number induced propositional variables grow dramatically number domain objects interest 
interested solving planning problems infinite domains 
representations propositionally factored mdps proposed including probabilistic variants strips dynamic bayes nets boutilier 
order representations proposed mdps including poole geffner bonet 
adopt order situation calculus mdp representation developed reiter boutilier dtgolog framework 
model unique features dynamic programming techniques viable 
review representational language methodology show stochastic actions represented framework 
introduce notation ease specification mdps 
ary relation domain size induces atoms 
situation calculus situation calculus mccarthy order language axiomatizing dynamic worlds 
years considerably extended classical language include processes concurrency time cases basic ingredients consist actions situations fluents 
actions actions order terms consisting action function symbol arguments 
example action putting block table denoted action term situations situation order term denoting sequence actions 
represented binary function symbol denotes sequence resulting adding action sequence special constant denotes initial situation empty action sequence 
lisp cons lisp blocks world situation term stack stack denotes sequence actions stack stack foundational axioms situations pirri reiter 
fluents relations truth values vary state state called fluents denoted predicate symbols argument situation term 
example bin relational fluent meaning state reached performing action sequence box paris 
axiomatizing domain theory domain theory axiomatized situation calculus classes axioms pirri reiter 
action precondition axioms axiom action function syntactic form poss formula free variables characterize preconditions action 
successor state axioms axiom fluent syntactic form formula free variables characterize truth values fluent situation terms current situation embody solution frame problem deterministic actions reiter 

unique names axioms actions state actions domain pairwise unequal 

initial database set order sentences situation term specifies initial state domain 
initial database play role 
regression situation calculus regression formula action formula holds prior performed iff holds 
successor state axioms support regression natural way 
suppose fluent successor state axiom inductively define regression formula situation arguments form follows regr regr regr regr regr regr regr regr stochastic actions situation calculus purposes representing probabilistic uncertainty ontology axiomatization situation calculus appear inadequate actions deterministic 
see requirement clearly syntactic form successor state axioms fluent truth value situation uniquely determined current situation state uniquely determined state action performed 
stochastic actions represented situation calculus 
trick decompose stochastic actions deterministic primitives nature control chooses deterministic action gets executed specified probability agent performs stochastic action 
formulate situation calculus domain axioms deterministic choices bacchus reiter boutilier 
illustrate approach simple example logistics domain consisting cities trucks boxes boxes loaded unloaded trucks trucks driven cities 
nature choices stochastic actions stochastic action specify deterministic choices available nature 
instance stochastic load action succeed denoted loads fail choice load loads similarly stochastic unload drive actions decompose successful unsuccessful alternatives chosen nature known probabilities 
unload choice drive drives choice probabilities nature choices choices nature associated action specify probability prob chosen performed situation prob loads load prob load prob unload rain rain prob unload prob unload prob drives drive prob drive see unloading succeed raining 
action preconditions deterministic actions poss loads bin tin poss bin poss poss poss drives true poss true tin nature choices action need common preconditions 
successor state axioms bin tin bin loads tin drives tin drives loads rain rain important points note example 
virtue decomposing stochastic actions deterministic primitives nature control get perfectly conventional situation calculus action precondition successor state axioms refer stochastic actions 
stochastic actions status different deterministic actions participate situation terms 

axioms restrict domain discourse prespecified set trucks boxes cities 
models axioms infinitely uncountably individuals 
solve mdp axiomatization valid obtain fact solution applies entire class mdps arbitrary domains trucks boxes cities 
additional notation follows notion state formula free variables non situation variables situation variable 
intuitively state formula refers properties situation 
set state formulae note nature choices specific action identical preconditions care taken axiomatization ensure probabilities sum situation 
partitions state space iff case notation simplify presentation introduce notation case abbreviation formula state formulae terms 
write case constants partition state space 
introduce operators case statements important section case case case case case case case case case case case case comes representing probabilities case notation stochastic action type possible assume probabilities outcomes specified case notation 
specifically choice probabilities prob case partition state space probability realized condition agent executes stochastic action choice unload stochastic action represented case notation prob unload case rain rain prob load case rain rain notice probability nature choice situation independent loads single case 
true specifying rewards values case notation mdp optimization theory contains axioms specifying reward function 
simplest form reward function axioms assert costs rewards function action taken properties current situation note action taken recovered situation term 
follows assume simple state reward model relational fluents determine reward assume reward function specified case notation case partition state space 
example rewarding presence box paris specified bin bin case restriction state reward simply keep exposition simple 
action costs easily modeled prototype implementation 
case notation represent value functions similar writing fashion concisely form case case statements viewed embodying form state space abstraction assigning values state state basis distinguish states conditions states satisfying treated state 
way represent value functions policies functions similarly state enumeration exploiting logical structure function 
similar abstraction models discussed boutilier ability partition state space order formulae 
dynamic programming logical representations mdps provide natural compact specifications planning domains obviating need explicit state space enumeration 
logical descriptions exploiting regularities value functions policies compact 
solving efficient logical structure value functions discovered inference logical mdp specification expected value computations performed state state 
dynamic programming algorithm works directly symbolic representations value functions offers great potential computational benefit 
section generalize notion decision theoretic regression propositional mdps construct order value iteration algorithm 
order decision theoretic regression suppose value order de cision theoretic regression action function type function logical description words set states corresponding regions state space constant wish pro duce corresponding abstraction analogous classical goal regression key differences action stochastic 
stochastic action corresponding nature ignoring preconditions choices defined classically different successor states arise different nature choices situation calculus analog prob described earlier assume functions described case state ments 
respectively denote substituting case expressions eq 
appealing case addition multiplication operators section obtain problem expression formula refers current situation situation died regression easily regr emphasize critical nature step 
representational methodology adopt treating stochastic actions deterministic nature choices allows apply regression directly derive properties pre action state determine value relevant properties state 
specifically classical regression applied directly case statement deterministic 
sums products case statements case statements expression case statement say case characterizes function action respect logical description derive conceptually viewed transforming abstraction state space suitable suitable hard show state formulae case statement partition state space key avoiding state defining action enumeration dynamic programming 
preconditions derivation ignores action preconditions 
handle longer treated function represented relation meaning value relation holds poss holds value undefined choices poss case poss distributed case statement conjoining result case statement relation 
function example consider value case bin bin rome rome box rome value value reward 
suppose identical discount rate unload action described illustrate 
regression unload results case statement simplification elements denoting unload bin rain rome rome tin bin rome rome rain tin bin rome rome tin bin rome associated values simplification case statement consisted formulae inconsistent pairs identical values 
important property produces abstraction state space describe abstracts action space 
small number logical formulae captures situation instantiation values state space abstraction explored context decision theoretic regression propositional representations mdps little focused abstracting action space way 
example works specific numerical values case statements purely symbolic descriptions value reasoned way 
example value action drive depends weight current situation value term case statement depend property truck situation weight 
prove especially useful reasoning continuous hybrid state action spaces 
symbolic dynamic programming setting value iteration consists repeatedly applying eq 
eq 
suitable termination condition met 
described symbolically implement eq 
logically need derive logical implementation eq 
order form dynamic programming compute optimal policies explicit state action enumeration method termination testing policy extraction 
follows assume values occurring case statements numerical constants means case statements property 
suppose computed stage go relations action type form case numerical constants 
denote stage go value function eq 
letting written assume stochastic action deterministic op executable situation function 
easily define relation 
derive series expressions equivalence 
assuming domain closure actions action types instances minimize notational clutter represent generically supposing determined values action type form case statement substitute eq 
previous expression get constants distribute existential quantifiers case expression writing recalling definition case union operator section suppose simplifies form recalling definition case notation get remaining task characterize expressions terms case statement suppose case statement easy show substituting expression expression gives numerical constants distribute universal quantifier existential quantifier antecedent implications get recalling introduced case expressions values get exploit fact numerical constants opposed symbolic terms compared 
allows write final expression case modify definition operator sorts rows identical values merges rows values get pleasing expression case determines simple case statement function completely defines value logical description algorithm producing relations relations provides means construct sequence value functions characterize value iteration purely symbolic fashion eliminating need state action enumeration 
hard defining show case conditions partition state space 
notice obtained case expression sequence equivalence preserving transformations definition function suitably modified accommodate action preconditions definition value function 
theorem case expression correct representation relative specifications function value function respectively 
pieces place summarize order value iteration follows input order representation case set statement action model perform steps termination 
action type compute case representation eq 


compute case representation eq 


increment 
termination order value iteration straightforward 
case statements value functions form simplify resulting case statement removal inconsistent elements 
case value term specified threshold value iteration terminates 
extraction optimal policy straightforward simply needs extract maximizing actions set functions derived optimal value function 
optimal policy represented symbolically case statement 
illustration give flavor form order value functions consider example reward function statements paris paris paris want box type paris accept box type type box unavailable 
actions include load unload drive actions described 
include action costs action unload cost load cost drive cost optimal stage policy chooses unloading op stage go driving loading value 
algorithm derives conditions unload executed paris tin paris bin rain bin paris box unloaded box truck paris box currently paris type box raining type box paris 
op executed negation condition holds step backup value discovered driving loading 
important note partitioning remains fixed partitioning resultant value function regardless number domain objects extraneous relations problem description 
get stronger abstraction possible version problem 
note describes conditions performs instance unload action 
way algorithm allows action abstraction allowing produce value functions policies explicit enumeration action instances 
preliminary implementation implemented prolog basic bellman backup operator single iterations step value iteration defined eq 
implementation entirely rewrite interpreter applies programmer specified rewrite rules situation calculus formulae rewrites possible 
program computes case statements values stochastic actions 
computes pairs required case statement case statement 
logical simplification applied specified rewrite rules subformulas current formula 
practical point view key component efficiently implementing order dtr logical simplification ensure manageable formulae describing partitions 
current implementation performs rudimentary logical simplification produce concise descriptions cases partitions 
eliminate inconsistent partitions 
main reason limitations current implementation lacks order theorem prover 
example mdps looked sophisticated theorem proving appears necessary simple minded simplification rules don know quantifiers simply weak 
ran value iteration termination implementation reward function gives reward having box paris zero reward simplicity treated terminal reward received 
simplifier include intermediate computations simplify resulting expressions 
obtained optimal value function rain bin paris rain bin paris rain tin tin bin paris bin paris rain rain tin bin tin bin paris bin paris bin paris tin rain emphasize value function applies matter domain objects 
algorithm competitive state art propositional mdp solvers largely solvers spudd hoey efficient implementations logical reasoning software 
currently developing version algorithm uses order theorem prover enhance performance 
course level argue propositional mdp solvers get ground trivial planning problems large number domain objects 
important issue hope address near hybrid representations mdps value functions allow adopt efficient data structures adds decision trees instantiate structures order formulae 
allow expressive power order model restrict syntactic form formulae somewhat simplification consistency checking implemented effectively typical problem instances 
bin tin concluding remarks described approach solving mdps specified order logic dynamic programming 
careful integration sophisticated kr methods classic mdp algorithms developed framework mdps specified concisely naturally solved explicit state action enumeration 
model prevents direct application infinite domains 
furthermore permits symbolic representation value functions policies 
number interesting directions remain explored 
mentioned practicality approach depends sophisticated simplification methods 
currently incorporating implementation 
dynamic programming algorithms modified policy iteration implemented directly framework 
approximation methods merging partitions similar values applied ease 
investigation symbolic dynamic programming continuous hybrid domains offers exciting possibilities 
research supported nserc iris project bac dealing actions referees helpful suggestions presentation 
bacchus bacchus halpern levesque 
reasoning noisy sensors situation calculus 
ijcai montreal 
bellman bellman 
dynamic programming 
princeton university press princeton 
bertsekas tsitsiklis bertsekas 
tsitsiklis 
neuro dynamic programming 
athena belmont ma 
boutilier boutilier dean hanks 
decision theoretic planning structural assumptions computational leverage 
art 
intel 
res 
boutilier boutilier dearden goldszmidt 
stochastic dynamic programming factored representations 
art 
intel 
boutilier boutilier reiter soutchanski thrun 
decision theoretic high level agent programming situation calculus 
aaai austin tx 
geffner bonet geffner bonet 
highlevel planning control incomplete information pomdps 
fall aaai symp 
cognitive robotics orlando fl 
hoey hoey st aubin hu boutilier 
spudd stochastic planning decision diagrams 
uai stockholm 
mccarthy mccarthy 
situations actions causal laws 
tech 
report stanford univ 
repr 
semantic information processing minsky ed mit press cambridge 
pirri reiter pirri reiter 
contributions metatheory situation calculus 
jacm 
poole poole 
independent choice logic modelling multiple agents uncertainty 
art 
intel 
puterman puterman 
markov decision processes discrete stochastic dynamic programming 
wiley 
reiter reiter 
frame problem situation calculus simple solution completeness result goal regression 
lifschitz ed artificial intelligence mathematical theory computation papers honor john mccarthy 
academic press 
reiter reiter 
knowledge action logical foundations describing implementing dynamical systems 
mit press cambridge ma 
