range query optimization leveraging peer heterogeneity dht data networks nikos pitoura peter triantafillou computer technology institute computer engineering informatics dept university patras rio greece 
pitoura peter gr 
address issue efficient processing range queries dht data networks 
novelty proposed approach lies architectures algorithms mechanisms identifying appropriately exploiting powerful nodes networks 
existence nodes documented literature plays key role architecture successful real world applications 
till heterogeneity taken account architecting solutions complex query processing especially dht networks 
attempt fill gap optimizing processing range queries 
significant performance improvements achieved due ensuring smaller hop count performance range queries ii avoiding dangers inefficiencies relying range query processing weak nodes respect processing storage communication capacities intermittent connectivity 
detailed experimental results validating performance claims 
structured systems provided community efficient combined routing location primitives 
goal accomplished maintaining structure system emerging way peers define neighbors 
systems usually referred distributed hash tables dhts 
dhts managed take routing location data items systems level nondeterministic flood techniques unstructured overlays dhts provide strong probabilistic node failures skewed data access distributions guarantees worst case number hops required route message node node system equivalently node system locate data items published 
unfortunately traditional dht overlays designed support exact match queries 
led researchers investigate enhance systems support complex queries 
axis main characteristics widely deployed networks gnutella kazaa participating peers largely heterogeneous regard processing power available main memory disk storage network bandwidth internet connection uptime 
relevant studies networks shown large heterogeneity depicted distribution query processing chores node population gnutella network nodes share files community nodes serve queries posed :10.1.1.160.7346
recognizing heterogeneity peers harnessing speed complex query processing done structured world workable real world applications utilize building multi level hybrid networks 
philosophy observation 
wish bring hybrid design dht world utilize complex query processing 
question efficiently 
believe harnessing power powerful altruistic nodes key providing efficient way expedite complex query processing setting 
discuss range query case 
note propose range overlay 
leverage functionality scalability performance network overlays layered architecture powerful nodes identified assigned extra tasks 
efficient low overhead way functionality provided underlying structured network significant gains range query processing costs 
knowledge look issue 
range queries dhts traditional dhts dhts bit circular identifier space nodes objects documents modulo arithmetic maximum number nodes documents system 
node document ids usually randomizing usually cryptographic hashing sha node document specific piece information 
nodes maintain links nodes overlay dht geometry distance function 
links dhts route nodes overlay log hops maintaining log links 
document inserted dht stored node id closer document id dht distance function 
node called document successor root 
assume data stored network structured attribute relation ak bl ai bi attributes tuple uniquely identified primary key key 
key attributes tuple calculated values attributes 
furthermore attributes ai single attribute indices ai characterized domain ai ai vmin ai ai vmax values 
suppose index tuple added dht id generated sha hashing attribute value 
result tuples spread participating nodes uniform manner lead tuples successive index values stored completely unrelated nodes 
fact renders traditional dhts highly inefficient range query processing range domain index values traditional dht execute queries value range interval 
range query consecutive values require average queries executed total log hops 
non densely populated value domain queries return data items 
nodes global knowledge value stored overlay ll call system enhanced dht skip queries non existing values 
values exist system take average queries log hops 
better log expensive real world system 
range dhts wave dhts peer peer research community started investigating structured overlays allow complex queries simple equality achieving performance scalability figures early dhts 
lead design implementation specially crafted dhts capable efficient complex query processing skipnet skip graphs op chord pier mercury trees works ganesan gupta examples systems 
common idea overlays regard range query processing traditional dhts destroy locality content due randomizing cryptographic hash functions construct document ids prior insertion locality desired property sequential access sought case range queries 
due overlays actual content attribute values rdbms environment file names file sharing system outcome cryptographic hash function sort store documents overlay 
document locality preserved range query processing consists locating node responsible start range ii hop successor pointers reach node responsible range gathering results 
desired range spans nodes overlay lead hopcount complexity log log hops phase plus hops phase ii 
term lp dht ring refer locality preserving range overlay rest 
rangeguard intention form second lp dht ring rangeguard ring lp dht ring fig 
composed powerful nodes rgs burdened extra functionality chores 
node responsible storing index tuples placed nodes predecessor rangeguard 
rgs system partition normal lp dht ring continuous disjoint ranges 
rg maintains routing information lower level ring rangeguard ring 
additionally direct link peer rg upper level ring rg responsible peer 
nodes lower level ring probe rg part standard lp dht stabilization process automatically update index tuples stores 
rgs powerful willing withstand extra storage processing communication load ii connected time provide hop count guarantees range queries avoid large transfers due joining leaving 
turn calls mechanism identify exploit candidate rgs effi rangeguard ring normal lp ring normal node rangeguard fig 

rangeguard architecture 
rgs form second lp dht ring responsibility consistent hashing ranges nodes lower level ring 
cient transparent manner functionality offered initial infrastructure rgs identified located follows 
node performance counters node performance relation npr administrator node selects wants node candidate rangeguard membership done super peers unstructured sharing applications 
candidate node id id keeps track amount retrieval just routing requests serves 
information updated periodically seconds called epoch 
keeps node performance counters requests served current previous epoch respectively 
information stored system attribute node performance relation pr id status primary key id indexed status boolean variable set true node member rangeguard 
counter incremented update tuple left shifted assuming little endian architecture update ii seconds timer reset update 
quantity depending measurable characteristics round trip ping time connection node node storing index tuple metadata 
encapsulates amount time peer stays connected network 
believe network uptime peer number requests served time evidence node power fitness rg ring 
elaborate metrics may intuition storing tuples lower lp dht ring investigation metrics open issue subject ongoing 
node wishes cease candidate rg suffices set low value updating information value decays inactivity 
note pr tuple node stored node primary key relation id attribute 
cost maintaining npr candidate rg nodes update pr index tuple remember pr tuples indexed field 
operation requires lp dht ring lookups epoch lookup delete index tuple old assume peers act maliciously leaving countermeasures behavior possibility case dht research 
value insert index tuple new value cost terms hops log lookup needs log hops bandwidth consumption minimal small size index tuples 
alternatively keep link node seen storing relevant index tuple start lookup follow soft state approach 
cost tunable trade pr index freshness bandwidth hops 
joining rangeguard node join rangeguard uses rg bootstrap node rangeguard ring 
rg responsible retrieving metadata candidate node checking powerful served requests predefined threshold stayed online long corresponding value allowed rangeguard 
prerequisites met standard lp dht join protocol executed candidate node promoted rg ring protocol terminates 
updates status field entry pr relation lower level ring reflect promotion rg status notifies nodes arc responsibility existence 
alternatively step may left part lower level ring stabilization maintenance process 
cost joining rangeguard ring consists cost contact send relevant np tuple rg responsible joining node hop ii cost standard lp dht ring join protocol rg ring 
hop count cost joining rg ring log extra bandwidth consumption minimal expected small size rg ring small size pr tuples 
admission rangeguard ways node admitted rangeguard promoted node rangeguard wishes shed load ii take region address space exists rg 
promotion due irregularities data access distribution rangeguard may get overloaded incoming requests 
possible region rangeguard imagine rangeguard ring setup phases 
cases member rangeguard ask support candidate promoting rg status 
infrastructure described earlier rg wants promote node rangeguard status region point id node distance point lower level ring access count greater previous epoch value merely executes range query select id pr id result set query contain ids candidate rgs region interest 
rg originated query select best candidate inform promotion initiate join protocol add rg ring 
thresholds probably vary depending semantics sought rangeguard 
calculating crisp theoretical thresholds orthogonal issue left 
ii 
candidate rgs may lie region lower level ring 
data access distribution irregularity reasons similar ones ask support possible regions low data access loads rangeguard responsible need support 
result large arcs ranges lower level ring mapped single rangeguard node located hops away lower level ring nodes arc issue steady state may increase time needed node arc find new rg current rg leave system abnormally 
allow candidate rg nodes lower level ring volunteer rg position candidate rg detects situation described earlier large distance rg contact ask promoted rg status 
rg responsible going checks admitting candidate rangeguard 
leaving rangeguard similarly rg may decide leave rangeguard finds situation arc responsibility small due candidate rgs promoted rg status vicinity load faces rg drops predefined threshold estimate load uniform data access load 
rg wishes leave rangeguard ring goes steps follows lp dht ring leave protocol transferring stored data appropriate node rg ring updates status field entry pr relation lower level ring denote longer rangeguard optionally notifies nodes link rg ring update links leaves done part rg ring stabilization maintenance process 
note approach uses standard lp dht ring operations set maintain rangeguard ring 
exception second step procedure described standard lp dht leave protocol 
note leaving rg need notify nodes arc responsibility new rg achieved lower level ring stabilization process 
consequently cost node leave rangeguard equal cost executing standard lp dht leave protocol rg ring data transfer minimal due small size pr tuples size rg ring 
hand requirement rangeguard peers enhanced capabilities 
unrealistic peers real life applications proved powerful 
notion exploitation harness power heterogeneity achieve higher efficiency range query processing 
range query processing rgs scene query ai vlow ai vhigh attribute ai sent requesting node directly hop rg responsible requesting node data 
point assume responsibility gather requested information lp dht algorithm described earlier rangeguard requested range rangeguard requesting node normal node rangeguard fig 

range query processing rgs 
operations take place rangeguard ring fig 

data placement lower ring reflected rangeguard ring requested index tuples reside responsible ai vlow responsible ai vhigh 
algorithm requires routing hop reach rangeguard ring log hops rg ring reach routing hops 
log term improved techniques similar 
probably fewer rgs system nodes powerful respect computing capacities network bandwidth network uptime average node system architecture significantly efficient earlier 
specifically rgs worst case hop count efficiency remains significantly lower constant modifier times lower hop count 
note require mere nodes powerful altruistic setting relevant research pointed expect average node population wide scale peer peer data sharing networks gnutella kazaa powerful altruistic nodes :10.1.1.160.7346
harnessing full power nodes achieve higher performance gains outlined 
modifications lp dht overlay extended underlying lp dht system fields 
provided appropriate protocols allow nodes join leave rangeguard ring guaranteeing correct operation system method discover candidate rgs described detail sect 

altered query processing protocol utilize harness extra functionality offered rangeguard described sect 

far routing state concerned added entry node point rg responsible 
fault tolerance reasons faster recovery failing leaving rgs may choose maintain links rgs 
note routing state size log 
extra information nodes routing tables need tweak stabilization process include rg entry set links probe 
standard stabilization process node issues query id rg ring 
relevant information design stored responsible rg response query originate rg currently responsible arc querying node located 
rg responsible node changed due candidate rgs joining rangeguard node get back response different rg update rg link 
node rg links failed simultaneously node fall back querying lower level ring rangeguard node status field set true vicinity 
load distribution rg ring order emulate observation nodes serve requests system nodes lp dht ring flip biased coin dispatch queries rg ring probability processing solely lp dht ring probability 
apart relevant provisions lp dht load balanced rg ring load aware join leave protocols 
far join leave concerned remember rgs may call support candidate rg nodes overloaded may decide leave rg ring load low arc responsibility narrow 
case rg calling help choose candidate rgs returned relevant query 
node knows part arc responsibility causes load choose appropriate candidate rg shed load 
algorithm able provide basics having balanced access load 
mentioned expect candidate uniformly distributed lower level ring 
calling help probability finding candidate rangeguard arc interest 
respect data placement popularity value depend position attributes domain value popular attributes system having multiple attributes mapped ring translates having multiple popular items distributed nodes system 
opposite case random easily computable offset value cryptographic hash attribute name added mod maximum document id values attribute domain 
provides randomization data placement guarantee similar results shall see sect 

note node system worst case skewed distribution value selected probability rest probability attributes required balanced load best case distribution load solely facts 
rg ring smaller lp dht ring required number attributes smaller attributes node rg ring furthermore due difference sizes rg lp dht rings rg node responsible values assigned multiple nodes lp dht ring leads smoother distribution load rg ring 
easily apply load balancing techniques developed underlying lp dht balance load lower level rg nodes virtual nodes load aware node migration op chord rely load balancing effects overlay skip graphs performance evaluation home lp dht op chord overlay choice 
op chord chord order preserving hash function sha document id generation range query processing principles discussed sect 

extended basic chord simulator available www pdos lcs mit edu chord adding support index tuples range queries implementing op chord rangeguard architectures 
chosen test aspects system hop count efficiency range query processing algorithm ii distribution storage requirements accesses participating rg nodes range query processing realistically skewed distributions 
hop count experiments single index attribute relation index attribute integer values zipf distribution 
range queries generated separate zipf distribution domain lower bound uniformly distributed range span ranging attribute domain 
report series queries experiments system nodes range guards tuples reported results sensitive values 
performance points compared hop count efficiency rg architecture plain chord representative traditional dhts ii imaginary enhanced chord ec range system knows ids nodes storing values ra iii op chord architecture iv hybrid system queries processed rg ring remaining dealt op chord ring see sect 

assume integer range query vlow vhigh 
assume requested index tuples stored nodes chord hashing scheme nodes managed scheme 
order gather possible results queries log hops needed 
ec queries log hops executed 
op route node holding vlow follow successor pointers log hop count 
rg route closest rg hop rg holding vlow log hops follow successor pointers log hop count 
op rg flip biased coin choose op rg processing hop count complexities outlined 
fig 
summarizes measured hop counts range query 
traditional dhts designed range queries mind chord performs poorly 
unrealistically enhanced chord brings required hop count chord 
total global knowledge required implement approach 
hand order preserving hashing scheme rangeguard architecture hop count decreased factor approx 
compared hops query plain chord enhanced chord op chord rangeguard op chord rangeguard range span attribute domain fig 

hop count range query log plot 
compared ec compared op different range spans performance op rg closely 
load distribution effect random offsets overlapping multiple attributes access storage load balancing beneficial setting 
showcase claim performed experiment assume op chord ring add nodes system random positions op chord ring simulating quasi uniform placement resulting sha system stabilize add multi attribute tuples system 
values index attributes drawn integer interval zipf distribution 
hand assume uniform value occurrence distribution opposed zipfian distribution results carry zipf load access distribution 
vary number index attributes tuple classic single attribute case currently available chord system attributes ii number nodes network 
note node case nodes rg nodes administer node network intuition described earlier 
shows ratio highest lowest load system 
naturally optimal load ratio case nodes system load 
zipfian value occurrence distribution node network highest lowest single attribute node access storage load ratio load dropping attributes 
noted figures load ratio single attribute case denoted load points number attributes required load drop denoted attributes points 
nodes placed lower level ring chord sha expect uniformly distributed ring 
situation holds lower level ring rangeguard ring architecture 
note increase number nodes network 
expect rg nodes small percentage network nodes results show rg ring load distribution acceptable bounds relevant mechanisms discussed sect 

larger networks shall need large number attributes achieve load distribution elaborate load balancing mechanisms 
max min node load ratio max min node load ratio ratio attributes nodes ratio related attributes nodes attributes ratio attributes nodes ratio fig 

highest lowest node load ratio 
nodes attributes attributes earlier research efforts focusing complex query processing dhts failed recognize exploit key fact appropriate utilization powerful nodes speed query processing significantly 
viewed complementary angle earlier research failed recognize large scale data sharing networks exist nodes weak respect processing storage communication capacity exist nodes orders magnitude horsepower 
proposal avoids pitfall relying weak nodes query processing 
furthermore follow data management approach discovering harnessing powerful nodes keeping metadata participating nodes relation lp dht ring allows swiftly efficiently locate nodes promoting rangeguard status core routing query processing 
address problem efficient range query processing structured networks 
approach leverages existing dht research 
approach centered new architecture facilitates exploitation powerful nodes coined network assigning specific tasks significant speedups range query processing 
architecture way efficiently identify collect ii mechanisms utilize range query processing 
performance results shown significant savings achieved proposed architecture 
importantly key advantage proposed architecture dangers inefficiencies relying weak nodes range query processing respect processing storage communication capacities intermittent connectivity avoided 
acknowledgments peter triantafillou partly funded fp eu ist 
nikos funded programme eu general secretariat research technology state 

stoica chord scalable peer peer lookup service internet applications 
proc 
acm sigcomm 

ratnasamy francis handley karp shenker scalable network 
proc 
acm sigcomm 

rowstron druschel pastry scalable distributed object location routing large scale peer peer systems 
proc 
middleware 

harvey jones saroiu theimer wolman skipnet scalable overlay network practical locality properties 
proc 
usits 

aspnes shah skip graphs 
proc 
soda 

gehrke shanmugasundaram querying peer peer networks trees 
proc 
webdb 

ganesan bawa garcia molina online balancing range partitioned data applications peer peer systems 
proc 
vldb 

ganesan yang garcia molina multi dimensional indexing peer peer systems 
proc 
webdb 

gupta agrawal abbadi approximate range selection queries peer peer systems 
proc 
cidr 

gupta agrawal abbadi query processing peer peer data sharing systems 
technical report ucsb csd uc santa barbara 
triantafillou pitoura unifying framework complex query processing structured peer peer data networks 
proc 


gribble peer peer databases vice versa 
proc webdb 

huebsch querying internet pier 
proc 
vldb 

bharambe agrawal seshan mercury supporting scalable multi attribute range queries 
proc 
sigcomm 

xu scalable efficient range queries grid information services 
proc 


adar huberman free riding gnutella 
monday 
saroiu gummadi gribble measurement study peer peer file sharing systems 
proc 
mmcn 

gummadi gummadi gribble ratnasamy shenker stoica impact dht routing geometry resilience proximity 
proc 
sigcomm 

gupta liskov rodrigues hop lookups peer peer overlays 
proc 
hotos ix 

triantafillou aesop altruism endowed self organizing peers 
proc 


rao load balancing structured systems 
proc 
iptps 

karger ruhl new algorithms load balancing systems 
proc 
iptps 

pitoura triantafillou range query processing load balancing peer peer data networks 
technical report tr computer technology institute 
