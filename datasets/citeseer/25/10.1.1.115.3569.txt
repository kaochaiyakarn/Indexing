logic authentication michael burrows mart abadi roger needham questions belief essential analyzing protocols authentication principals distributed computing systems 
motivate set exemplify logic speci cally designed analysis protocols di er subtly respect required initial assumptions participants nal beliefs 
formalism enabled isolate express di erences precision previously possible 
drawn attention features protocols authors previously unaware allowed suggest improvements protocols 
reasoning protocols mechanically veri ed 
starts informal account problem goes explain formalism gives examples application protocols literature shared key cryptography public key cryptography 
examples chosen practical importance serve illustrate subtle points logic explain 
discuss extensions logic motivated actual practice example order account hash functions signatures 
nal sections contain formal semantics logic 
src research report originally published february revised february 
main body revised version 
appendix revised version available separately 
digital equipment may copied reproduced part commercial purpose 
permission copy part payment fee granted educational research purposes provided partial copies include notice copying permission systems research center digital equipment palo alto california acknowledgment authors individual contributors applicable portions copyright notice 
copying reproducing republishing purpose shall require license payment fee systems research center 
rights reserved 

problem distributed computing systems similar networks computers necessary procedures various pairs principals people computers services satisfy mutually identity 
common way approach means secrets usually encryption keys 
outline authentication protocol guarantees principals really say possession shared secrets able recognize principals secrets see example needham schroeder 
example authentication protocols establish shared encryption keys principals subsequent communication 
authentication protocols public key cryptography see example rivest rst distribute public keys principals establish shared secrets :10.1.1.40.5588
protocols involving shared key cryptography server shares key principal typically generates new session keys communication principals 
public key protocols certi cation authority known public key trusted pass public keys principals 
authentication servers certi cation authorities trusted proper data hold executing authentication protocols authentication servers trusted generate new secrets proper manner example issue time 
authentication straightforward su ciently benign environment 
usually assumed particularly necessary take precautions confusion caused reissue old messages 
speci cally ensure replay force old possibly compromised secret 
part literature devoted ensuring information protocols act timely 
style precautions taken caused recognized long time dealing questions belief trust delegation recognized imprecisely formalism 
result varied design decisions appropriate di erent circumstances variety authentication protocols exist 
perceived need explicate formally understand extent really achieve results 
di er subtly nal states protocol may depend assumptions care 
de ne logic authentication order explain protocols step step initial assumptions explicit nal states clearly set 
examples sort questions able answer help formal methods protocol achieve 
protocol need assumptions 
protocol unnecessary left weakening 
protocol encrypt sent clear weakening 
sections logic able help answer questions number example protocols 
important note certain aspects authentication protocols deliberately ignored treatment 
operate level consider errors introduced concrete implementations protocol deadlocks inappropriate cryptosystems kent 
furthermore allow possibility hostile intruders attempt deal authentication untrustworthy principal detect weaknesses encryption schemes unauthorized release secrets dolev yao millen 
study concentrates beliefs trustworthy parties involved protocols evolution beliefs consequence communication 
experience authentication protocols indicated kind study needed current protocol designers 
focus fairly standard uses encryption secrets 
discuss variants practical importance explained logically 
treatment includes shared key cryptography public key cryptography 
shared key cryptography treated isolation burrows hand logic public keys include shared keys economic reasons practical schemes public keys shared keys 
goal provide logic explain authentication method logic explain central concepts authentication 
logic may serve basic tool illustrative purposes 
hoped protocol designers adapt suit speci needs 
introducing notation technical terminology stating main principles 
regarded precise course 
purpose subsequently receive joe depends knowing number ought believe joe message originated fact 
believe joe know ought receive encrypted key comes originally joe 
believe joe public key believe message decrypt comes originally joe 
believe joe know ought believe encrypted message receive containing comes originally joe 

formalism authentication protocols typically described listing messages sent principals symbolically showing source destination contents message 
conventional notation convenient manipulation logic wish attach exact meanings part message meanings apparent data contained messages 
order introduce useful notation whilst preserving correspondence original description protocols transform message logical formula 
logical formula idealized version original message 
annotate idealized protocol assertions proof hoare logic hoare 
assertions expressed notation write messages 
assertion usually describes beliefs held principals point protocol assertion inserted 
section describe informal syntax semantics logic rules inference transformations apply protocols formal analysis rules annotate protocols 
basic notation formalism built sorted modal logic 
logic distinguish sorts objects principals encryption keys formulas called statements 
identify messages statements logic 
typically symbols denote speci principals kab kas kbs denote speci shared keys ka kb ks denote speci public keys denote corresponding secret keys na nb nc denote speci statements 
symbols andr range principals range statements ranges encryption keys 
may write schemata free variables implicit universal quanti cation minor confusion essentially harmless 
propositional connective conjunction denoted comma 
treat conjunctions sets take granted properties associativity commutativity 
addition conjunction constructs believes orp entitled believe particular principal may act true 
construct central logic 
sees sent message containing read repeat possibly doing decryption 
said principal time sent message including statement known message sent long ago current run protocol known believed sent message 
jurisdiction principal trusted matter 
construct principal delegated authority statement 
example encryption generated care protocols certain servers trusted properly 
may expressed assumption principals believe server jurisdiction statements quality keys 
formula fresh sent message time current run protocol 
usually true nonces expressions generated purpose fresh 
nonces commonly include timestamp number sequence number 
may shared communicate 
key discovered principal principal trusted public key 
matching secret key inverse denoted discovered principal principal trusted formula secret known possibly principals trusted 
may prove identities 
fresh secret 
example shared secret password 
fxgk represents formula encrypted key formally fxgk abbreviation expression form fxgk realistic assumption principal able recognize ignore messages originator message mentioned purpose 
interests brevity omit examples 
hxi represents combined formula secret presence prove identity utters hxi implementations simply concatenated password notation highlights plays special ole proof origin notation intentionally reminiscent encryption guarantees identity source message knowledge certain kind secret 
formal treatment semantics constructs 
simply give motivate rules inference characterize 
logical postulates informal preliminaries useful understand rules inference logic 
study authentication concerned distinction epochs past 
epoch begins start particular run protocol consideration 
messages sent time considered past authentication protocol careful prevent messages accepted 
beliefs held stable entirety protocol run furthermore assume principal says believes beliefs held past necessarily carried forward 
simple division time past su ces purposes 
encrypted message represented logical statement bound encrypted encryption key 
assumed encryption done away know message sent 
separate encrypted sections included message treat arrived separate messages 
message understood principal know case public key cryptography principal know inverse key key deduced encrypted message 
encrypted message contains su cient redundancy allow principal decrypts verify right key 
addition messages contain su cient information principal detect ignore messages 
ready discuss logical postulates 
postulates general form possible main concern machinery carry realistic examples explain essence method 
message meaning rules concern interpretation messages 
concern interpretation encrypted messages third concerns interpretation messages secrets 
explain derive beliefs origin messages 
shared keys postulate fxgk believes key shared sees message encrypted believes said rule sound guarantee send su ces recall fxgk stands formula form fxgk require similarly public keys postulate shared secrets postulate fxg hxi believes secret shared sees hxi believes said postulate sound rules guarantee hxi just uttered 
real life decryption message yield content says content produced time past idea new result replay 
nonce veri cation rule expresses check message sender believes believes uttered said believes believes sake simplicity cleartext include subformula form fy gk 
restriction met conclude said introduce said operator express need arise example 
postulate promotes re ects timeless way practice protocol designers challenges responses 
participant issues fresh statement 
challenge generated message containing accepted timely taken seriously 
general challenges need encrypted responses 
jurisdiction rule states believes jurisdiction trusts truth necessary property belief operator believes set statements believes individual statement separately 
justi es rules similar rules introduced required 
similar rule applies operator note follow imply parts uttered time 
principal sees formula sees components provided knows necessary keys hxi fxgk fxgk fxg recall fxgk stands formula form fxgk condition required fxgk 
similar statement applies fxg rst rule second line justi ed implicit assumption believes public key knows corresponding secret key note xand follow imply uttered time 
part formula known fresh entire formula fresh similar rules written instance show fresh fxgk fresh need rules examples 
key pair principals direction 
write rules re ect property similarly secret pair principals direction 
write rules re ect property postulates construct proofs logic 
formula provable logic formula sequence formulas zn zn zi obtained previous ones application rule 
usual generalized prove schemata 
quanti ers delegations delegation statements typically mention variables 
example principal may server generate arbitrary shared key express key universally quanti ed explicit quanti cation writing complex delegation statements generally necessary write quanti ers explicitly order avoid ambiguities 
example reader verify formulas convey di erent meanings 
earlier logic need recognized fact arise examples treated nested jurisdiction statements 
leave quanti ers implicit 
formal manipulation quanti ers quite straightforward 
ability instantiate variables jurisdiction statements re ected rule vn result simultaneously instantiating variables vn idealized protocols literature protocol step typically written form message denotes principal sends message principal receives 
message informal notation designed suggest bit string concrete implementation 
unfortunately presentation ambiguous obscure meaning appropriate basis formal analysis 
transform protocol step idealized form 
message idealized protocol formula 
instance literature may nd protocol step fa may tell knows key kbs kab communicate step idealized fa kab message sent tob wemay deduce formula fa kab holds indicating receiving principal aware message act 
idealized form omit parts message contribute beliefs recipient 
particular remove hints added implementation allow proceed timely fashion presence ect result protocol host act spontaneously 
instance may omit message hint communication initiated 
idealized protocols examples include cleartext message parts idealized messages form fx gk encrypted part treated separately 
wehave omitted cleartext communication simply forged contribution authentication protocol providing hints placed encrypted messages 
view idealized protocols clearer complete speci cations traditional descriptions literature view merely implementation dependent encodings protocols 
recommend idealized forms generating describing protocols 
entirely trivial deriving practical encoding idealized protocol far time consuming error prone understanding meaning particular informal encoding 
order study protocols existing literature rst generate idealized forms protocol 
general easy generate useful logical form protocol intuitively understood 
idealized form message determined looking merely single protocol step 
knowledge entire protocol determine essential logical contents message 
guidelines control transformations possible help determining idealized form particular protocol step 
roughly real message interpreted formula recipient gets may deduce sender believed sent real nonces transformed arbitrary new formulas assume sender believes formulas 
notation hxi denotes secret introduced secret intended proof identity 
important sake soundness want guarantee principal believes formulas generates messages 
protocol analysis practical viewpoint analysis protocol performed follows idealized protocol derived original 
assumptions initial state written 
logical formulas attached statements protocol assertions state system statement 
logical postulates applied assumptions assertions order discover beliefs held parties protocol 
procedure may repeated new assumptions necessary idealized protocol re ned 
precisely annotate idealized protocols formulas manipulate formulas postulates 
protocol sequence send statements sn form annotation protocol consists sequence assertions inserted rst statement statement assertions conjunctions formulas forms rst assertion contains assumptions assertion contains 
roughly annotations understood simple formulas hoare logic 
write familiar form assumptions assertion assertion sn examples demonstrate notation wish concentrate assumptions 
want annotations valid sense assumptions hold initially assertion holds execution protocol pre follows 
clearly validity semantic concept 
syntactic counterpart derivability give rules derive legal annotations protocols single protocol steps annotation legal 
formulas hold message sent hold new development recipient sees message 
sequences protocol steps annotations legal 
annotations concatenated 
logical postulates assertion assumptions legal annotation ifx provable result substituting legal annotation 
new assertions derived established ones 
assumptions legal annotation ifx provable result substituting forx annotation 
consequences original assumptions written explicitly original assumptions 
legal annotation protocol sequence comments states belief principals course authentication 
step step follow evolution original assumptions initial beliefs nal ones 
time note logic need notion time associated individual statements 
requirement deal time entirely satis ed division time past semantics constructs 
possible su cient reason stable formulas formulas stay true run protocol true 
addition represent protocols sequential algorithms ignore concurrency issues 
published protocols partial ordering algorithmic steps imposed functional dependence 
conscious decision avoid explicit time logic unnecessary describing protocols investigated far 
feel approach simple minded greatly increased ease logic manipulated 
ambitious proofs may require ner temporal distinctions re ected constructs reason additional epochs general purpose temporal operators see example nguyen perry halpern vardi 
clear er greater insight workings protocols simple construct considerable expertise 
noted authentication protocols timestamps require time explicit logic 
nonces general important property timestamps known fresh 

goals authentication formalized initial assumptions invariably guarantee success protocol 
typically assumptions state keys initially shared principals principals generated fresh nonces principals trusted certain ways 
cases assumptions standard obvious type protocol considered 
occasionally analysis protocol suggests assumptions 
assumptions written veri cation protocol amounts proving formulas hold 
room debate goals authentication protocols describe 
authentication precursor communication protected shared session key sowe desire describe situation start communication 
deem authentication complete authentication protocols achieve 
particular achieve addition common belief goodness required need believe believe believe believe 
protocols may attain weaker goals example re ects believes sent messages exists 
public key protocols intended result exchange shared key transfer piece data 
example interaction principal certi cation authority transfer single public key addition principals may establish shared secrets na cases required goals generally obvious context 
sections protocols determine nature guarantees er 

otway rees protocol otway rees proposed shared key authentication protocol involves principals authentication server 
protocol attractive provides timeliness guarantees small number messages 
synchronized clocks easily implemented nested remote procedure calls 
widely designed protocol mayhave application certain environments 
give protocol principals kas kbs private keys authentication server 
principals generate nonces na nb server generates kab session key message fna message fna fnb message fna fnb message fna message sequence represented diagram 
passes encrypted material useful server information similar encrypted message 
forwards server decrypts checks components andb match encrypted messages 
generates kab embeds encrypted messages participant accompanied appropriate nonces 
sent tob forwards appropriate part decrypt check nonces satis ed proceed kab 
fna fna fnb fnb fna fna otway rees protocol transform protocol 
nonce nc corresponds protocol description 
message fna message fna fnb message fna kab nc gkas fnb kab nc message fna kab nc gkas idealized messages correspond quite closely messages described published protocol 
omit cleartext communication provides guarantees kind 
di erences seen idealized forms messages 
concrete protocol mentions key kab sequence replaced statement kab communicate 
interpretation messages possible know information messages understood 
example receives na kab deduce key kab intended talking nonce na appears message request akey 
interesting statements nc nc 
appear correspond concrete protocol represent fact messages sent common nonces matched happened 
point convince idealized protocol accurately represents actual guidelines constructing idealized protocols violated 
protocol analyzed analyze protocol rst give assumptions kas kbs kas kbs kab na nb nc rst group shared keys clients server 
fth indicates server initially knows key shared secret group indicates trust server generate encryption key forward message client honestly 
nal assumptions show nonces various principals consider fresh 
assumptions idealized version protocol proceed verify 
rest procedure consists merely applying postulates logic annotation rules formulas available 
excessive give detailed deductions checked mechanically happy provide details formal proofs readers interested constructing 
proof may brie outlined follows 
sends message sees message understand fna able generate message form pass message 
receiving message decrypt encrypted part relevant message meaning postulate deduce encrypted nonce nc messages na nc nb nc note tell message replay message knows fresh 
emits message containing encrypted messages parts intended passes 
point received message server containing new encryption key nonce 
successively apply postulates message meaning nonce veri cation jurisdiction emerge nal beliefs kab kab nc nc interesting note protocol kab encryption key principal know key known 
slightly better position told emitted message containing nonce believes fresh 
allows infer sent message exists 
told server nonce idea replay old message 
addition may notice various forms redundancy protocol 
nonces generated veri cation na just done nc 
na eliminated reducing amount encryption protocol 
clear analysis nb need encrypted second message 
possibilities explored rapidly move improved protocol di erent structure 

needham schroeder protocol shared keys existing authentication protocols derived needham schroeder protocol 
original protocol interesting serious weakness 
protocol cast players otway rees protocol 
message na message fna kab message message message fnb contact server provides session key kab certi cate encrypted key conveying session key identity decrypts certi cate carries nonce handshake assured currently certi cate replay 
nb message conventional 
function nb long distinguish message subtraction indicate message na fna kab fnb needham schroeder protocol shared keys idealized protocol follows message fna kab kab fa kab message fa kab message fnb kab message fnb kab rst message omitted contribute logical properties protocol 
result acted spontaneously 
messages idealized protocol written full including senders names 
merely distinguish messages confused 
case concrete realization distinction course subtraction nal message 
additional statements key kab messages assure key nonce assure principal believes key 
statements included message sent statements believed 
protocol analyzed start give assumptions kas kbs kas kbs kab na nb kab assumptions routine 
rst group describes keys initially known principals 
indicate exactly clients trust server 
trusted new keys trusts generate key properties nonce 
fact argue encryption key case 
need assumption highlighted need feature protocol 
assumption unusual 
discussed protocol criticized assumption authors realize making 
proof outlined shows added assumption needed attain authentication 
detail veri cation suppressed 
sends cleartext message containing nonce 
seen repeats nonce reply 
reply contains new key sees entire message fna kab kab fa kab decrypts 
knows na fresh apply cation postulate leading kab kab jurisdiction postulate enables infer kab kab seen part message encrypted private key fa kab allows send message point decrypts message appropriate message meaning postulate obtain kab unable proceed resort dubious assumption set 
knows message fresh tell message generated 
simply assumes message server fresh 
necessary assumption rest protocol proceeds problem 
immediately obtain kab postulates nonce veri cation jurisdiction 
messages cause convinced exists sent messages possession key 
rst encrypts nonce sends deduce believes key kab guaranteed freshness key replies similarly deduce believes key kab note freshness nonce nb su cient deduce 
necessary reuse dubious assumption 
results beliefs kab kab kab kab fact extend idealized protocol adding kab message obtain kab little importance subsequent session key 
stronger outcome otway rees protocol reached cost extra assumption accepts key new 
denning sacco pointed compromise session key bad results intruder unlimited time nd old session key reuse fresh 
bauer berson pointed drastic consequences private key compromised intruder key obtain session keys talk principals continue session keys key changed 
logical analysis explicit assumption 
clearly problem interaction starts initiative 
possible rectify starting done needham schroeder 
note needham schroeder published adjacent otway rees 
lack calculus describe protocols people involved realized proposals essentially 
signi cant di erence second needham schroeder protocol goes session key kab explicitly assuring principal knows key otway rees allow nal stages combined rst transmissions data 
slight peculiarity original needham schroeder protocol certi cate encrypted key second message 
looking back formal analysis sees ect properties protocol certi cate sent tob immediately encryption 
may noticed message nonce sent encrypted general necessary 
instance nonce sent unencrypted necessary send encrypted order deduce knows session key 

kerberos protocol kerberos protocol developed part project athena mit miller anumber organizations 
needham schroeder protocol timestamps nonces remove problems shown section reduce total number messages required 
slightly simpli ed version protocol shown message message fts kab fts kab message fts kab fa message fta ts ta timestamps lifetime 
protocol description states fourth message mutual authentication required 
protocol follows message fts kab fts kab message fts kab fta kab message fta kab needham schroeder protocol rst message omitted contribute logical properties protocol 
simplicity lifetime combined timestamp ts treated just nonce 
fts kab fts kab fts kab fa fta kerberos protocol potential confusion second half third message message 
idealized protocol avoid confusion mentioning originators explicitly 
concrete protocol mention third message addition fourth su ce distinguish 
reason features second inherited needham schroeder protocol nonce incremented order distinguish messages identical 
protocol analyzed write assumptions quite standard kas kbs kas kbs kab ts ts ta clear assumptions protocol relies heavily synchronized clocks principal believes timestamps generated fresh 
analysis straightforward 
receives message rules message meaning nonce veri cation obtain kab fts kab passes encrypted message authentication server message containing timestamp 
initially decrypt part kab knowledge new key allows decrypt rest message obtain kab fourth message simply assures believes key received message 
nal result kab kab kab kab rst messages kab generated 
message protocol convince existence 
needham schroeder protocol obtain kab adding kab fourth message idealized protocol 
little importance subsequent session key 
result similar needham schroeder protocol 
major assumption kerberos protocol principals clocks synchronized server clock 
practice ect totally synchronized clocks obtained synchronizing clocks minutes secure time server detecting replays synchronization interval 
actual implementations include check provide weaker guarantees 
needham schroeder protocol obtain nal beliefs double encryption message 

wide frog protocol unpublished protocol proposed simplest protocol uses shared key cryptography authentication server 
transfers key messages synchronized clocks allowing choose session key message fta message fts fta fts wide frog protocol sends session key including timestamp ta 
checks rst message timely forwards message timestamp ts 
checks timestamp received timestamps checked generated principal need record di erence clock clock updating clock drift causes authentication message rejected 
idealized protocol shown message fta kab gkas message fts aj kab protocol analyzed assumptions follows kas kbs kas kbs kab ta ts kerberos protocol synchronized clocks required 
unusual assumptions knows session key advance trusts invent 
analysis trivial 
receives rst message deduce kab sends second message receives interprets 
rules message meaning nonce veri cation jurisdiction obtain nal beliefs kab kab kab dubious assumption protocol trusts invent keys 
protocols attempt deal part principals principal simply reveal keys third party 
case trusted competent non malicious 
generation session keys requires care expected take protocol 
course assumption avoided cost extra message allows pass session key invented 
andrew secure rpc handshake early version andrew secure rpc protocol uses authentication handshake principals client binds new server satyanarayanan 
handshake allow client call obtain new session key ab server share key kab 
protocol vulnerable attack similar observed needham schroeder protocol longer 
discuss illustration easily problems missed manifest logic 
message message fna message fnb message fk ab na nb nonces initial sequence number subsequent communication 
rst message simply transfers nonce returns second message 
satis ed reply returns nonce 
receives checks third message sends new session key kerberos protocol nonces returned incremented danger generating identical messages protocol 
fna fnb fk ab andrew secure rpc handshake idealized protocol closely resembles real message message fna message message fa ab protocol analyzed write assumptions kab kab ab na nb rst group indicates initially share key 
show invented new key trusts invent 
client able generate fresh nonces 
proceed analysis 
rst message gives simply na na second message contains nonce believes fresh deduce na nb knows exists 
similarly third message gives nb assured existence sends new key obtain nal beliefs ab ab nb na nb unfortunately proceed 
obtain ab fourth message believes fresh 
conclude protocol su ers weakness intruder replay old message message protocol convince old possibly compromised session key 
problem similar needham schroeder protocol 
fortunately problem na message xed simply adding nonce message fk ab fact substantial changes protocol reduce total amount encryption needed 
nonces secrets need encrypted rst mentioned 
similarly starting sequence number just easily sent clear identi ed nonces 
arrive stronger protocol original encryption 
su ces send key ab nonce na fna ab concrete implementation na may timestamp nonce sent tob unencrypted message 
reply ab accepted fa ab bgk ab believes message timely ab fresh ab 
optionally go send initial sequence number clear 
new protocol analyzed obtain nal beliefs ab ab ab ab concrete realization protocol propose message na message fna message ab message message na arbitrary predictable message assure encrypted new key 

yahalom protocol logic described serves analysis variety protocols 
occasion integrate new mechanisms reasoning intriguing protocols 
section exempli es adapt logic case handle ed keys illustrates secrets 
logic guides understanding operation protocol suggesting improvements 
consider ingenious protocol due yahalom personal communication 
message na message fa na message fb kab na fa message fa fb kab na fa na fa na fa yahalom protocol cast usual 
novelty unusual sequence messages results strong guarantees messages sends nonce na indirectly gets back key kab sends nonce nb gets back key kab indirectly 
idealized version protocol propose message fna message fa kab kab na nb bj fa kab message fa kab kab kab rst message omitted ect logical analysis 
result acted spontaneously 
third fourth messages necessary explicit server asserts key kab fresh alter essence protocol signi cant way key probably share properties nonce 
unusual feature protocol nb shared secret fourth message 
protocol analyzed initial assumptions otway rees needham schroeder protocols kas kbs kas kbs kab na nb additional assumptions protocol kab nb rst additional assumptions needed know session key fresh order deduce timeliness fourth message 
represents trust pass nonce assumption interesting surprising author protocol 
protocol uses nb shared secret thought simply nonce protocol designed 
second message produces na nb third message message meaning nonce veri cation jurisdiction rules derive nb kab kab na fourth message complicated 
obtain kab kab proceed 
protocol leads key kab ascertaining key 
key con rmed rst second part fourth message 
discuss extend logic handle ed keys 
proceed derive kab kab inb notice ed key allows see contents message deduce sender 
believes nb secret fresh kab kab trusts statements freshness key kab allows perform nonce veri cation part message leading eventually kab nal beliefs kab kab na kab session key distributed principal aware exists 
analysis shows interesting points nb shared secret trusts pass statement freshness key 
chose replay old key message detect fraud 
represent major aw protocol principals assumed malicious merely highlights assumption clear rst 
simple change protocol removes features strengthening protocol simplifying analysis time 
concrete protocol message na message nb fa message nb fb kab fa kab message fa kab analysis variant need ed key timeliness message guaranteed nonce nb 
nb longer need kept secret need encrypted message rst half message 
resulting protocol outcome encryption considerably fewer assumptions 
ed keys discovered logic far provide decryption keys known 
formally message meaning rules rules apply keys believed speci ed principal 
fortunately straightforward modify logic remedy situation 
su ces rules liberal concretely wemay supplement rule fxgk fxgk intuitively new rule re ects fact may mentioned 
proposed solution handles particular protocol fails handle intricate protocols 
fact natural place making logic stronger stronger sense changing rules 
thorough solution requires fairly serious change logic describe brie protocol descriptions changed include sequence message exchanges explicit statements decryption 
responsibility protocol writer say keys tried decryptions 
rules annotations extended say sees inside messages decrypts 
additional complexity solution unnecessary published protocols encountered requires 

needham schroeder public key protocol original needham schroeder proposed protocol public key cryptography 
protocol allows principals exchange independent secret numbers 
public key protocols allow principals exchange shared session key 
protocol allows replay attack interactions certi cation authority compromised needham schroeder protocol discussed section 
cast remains usual operates certi cation authority ka kb ks public keys respectively secret key matches ks nally na nb nonce identi ers 
message exchange goes follows message message fkb bg message fna message message ag message fna message fkb bg fna fna ag needham schroeder public key protocol protocol independent interleaved components 
expected initially hold public key ks 
principals obtain public keys messages accomplish purpose 
second component messages public keys obtained 
communicate secret nonce identi ers na nb 
secrets signing messages 
example receives message fx may deduce sent idealized protocol follows message kb bg message message ka ag message fha nb message fha na nb messages deliberately omitted contribute logical properties protocol 
idealized protocol proceeds contacted spontaneously 
messages straightforward require explanation 
interesting note di erence message messages 
message na known prove identity ofa message simply convey na messages na nb secrets hxi notation 
messages convey beliefs representation concrete protocol messages sent beliefs held 
protocol analyzed state assumed initial beliefs players ka kb ks ks ka kb ks na nb na nb kb ka principal knows public key certi cation agent aswell keys 
addition knows keys public keys principal trusts certi cation agent correctly sign certi cates giving public key 
principal believes identi er generates fresh secret 
assumptions surprising represent protocol 
principal assume message containing public key principal fresh 
di culty resolved adding timestamps messages 
analogous way kerberos timestamps overcome problem shared key needham schroeder protocol 
assumptions apply rules message meaning jurisdiction message deduce kb deduce little message know sent message 
obtain simply na message similar message giving ka message uses shared secret na convince message message timely giving nb able nb message 
arrival message deduce current beliefs state protocol representation concrete protocol 
nal beliefs kb ka nb na nb principal knows public key knowledge shared secret believes accept shared principals 
gained slightly knowledge recipient message protocol 
point continue exchange messages na nb public key encryption 
way transfer data keys securely 
extend idealized protocol adding ka kb ka messages respectively 
wewould obtain ka kb ka beliefs importance subsequent communication 

ccitt protocol draft recommendation ccitt standard contains set protocols messages international ccitt 
understanding cial recommendation ccitt 
protocols intended signed secure communication principals assuming knows public key 
message version 
message message protocols formed removing messages respectively 
unfortunately published protocol contains weaknesses exploited shall demonstrate 
weaknesses protocol subsequent analysis 
protocol shown simpli ed slightly discussed 
message fta na xa message nb na xb message fta na xa nb na xb ccitt protocol ta tb timestamps na nb nonces xa ya xb user data 
protocol ensures integrity xb assuring recipient origin guarantees privacy ya yb 
idealized protocol follows message fta na xa message nb na xb message usual timestamps ta tb viewed simply nonces idealized protocol 
protocol analyzed assume principal knows secret key public key believes nonce timestamp fresh 
ka kb kb ka na nb tb ta message message meaning rules obtain xa ya ta nonce veri cation xa note ya derivable 
message produces xb yb tb na nonce veri cation obtain xb obtain yb 
message gives nb assures sent nb 
represents outcome weaker authors desired 
surprisingly protocol lead ya yb 
ya yb transferred signed message evidence suggest sender aware data sent private part message 
corresponds scenario third party intercepts message removes existing signature adding blindly copying encrypted section signed message 
problem xed means simplest sign secret data ya yb encrypted privacy 
redundancy noticeable second message tb na su ensure timeliness message 
protocol description states checking tb optional message version protocol 
fact perfectly reasonable omit tb altogether redundant protocols 
unfortunately document suggests ta need checked message protocol 
serious problem checking ta mechanism establishes timeliness rst message 
logically checked perform nonce veri cation rst message obtain xa xa 
di culty explains intention third message assure generated rst message 
authors hoped nb su cient link third message rst nb links messages na links rst messages 
error nb link messages allows intruder replay old messages 
concrete exchange illustrates aw 
nonce nb secret prevent value instance protocol able cause attempt authentication required time sequence messages result 
intruder rst contacts fta na xa old message originally remember presumed check timestamp ta message protocol discover replay original message 
nb na xb replies message came provides new nonce nb 
point causes initiate authentication means 
ft fy initiated authentication exact content message immaterial 
replies providing nonce nb originally provided nb xc replies signing exact message needed convince rst message sent replay old message 
possible solution include name message 
guarantees uniqueness nonces sure message linked uniquely instance protocol timely fashion 
idealized version message include beliefs transmitted message assuring timeliness 
protocol uses hashing reduce amount encryption shown description 
analysis protocol changed slightly hashing 
section deals hash functions modelled logic 

hashing practice signatures costly 
principals sign messages mainly reasons ciency 
order sign long cleartext message hash computed signed 
principal may send fh fmg remains understand scheme compares straight forward signature methods qualitatively guarantees hash functions er 
obviously trust protocols hash functions warranted 
arbitrary function uttered uttered fact may seen happen instance author gave toa signed sent 
similar way manager signs document subordinate reading details document 
manager expects receiving signed document behave manager full knowledge contents 
provided manager careless hash function suitable signing hash value considered signing entire message 
assumptions underlie hash functions signatures 
basic assumption intended hash value computationally infeasible put message hash value 
computationally infeasible generate messages giving hash value avoid uncertainty data signed 
wish capture reasoning implicit hash functions 
introduce symbol represent function interest 
postulate attribute message author message 
hash function postulate fact stronger postulate appears reasonable case message broken lots pieces 
case fact arises proposed standards ccitt xk xk xk signi cance postulate principal may see pieces composite message di erent means particular pieces may results decryption 
principal may come pieces di erent times di erence 
signed hash composite message received possible deduce origin composite message 

semantics hopefully formulas liberally sprinkled intuitively clear 
section take formal approach previously discuss formal semantics formulas 
beliefs describe operational semantics principals develop beliefs computation 
order obtain new beliefs principals supposed examine current beliefs apply computationally tractable inference rules 
rules represent idealized workings principals actual authentication protocols 
statement authentication protocol gives rise certain beliefs strong means principals develop beliefs realistic computational resources 
restrictive operational notion belief adopted certainly harmful study security properties want guarantee intruders learn secrets powerful methods algorithms 
local state principal sets formulas mp bp intuitively mp set messages principal sees bp set beliefs principal 
sets mp bp enjoy closure properties simplicity take closure properties correspond directly inference rules logic 
instance bp fxgk mp mp imagine closure properties enforced algorithms derive add new messages beliefs 
global state tuple containing local states principals cases consider triple local states global state sp local state bp mp corresponding sets beliefs messages 
satisfaction relation global states formulas trivial de nition holds state bp mp 
set conjunction formulas holds state members holds 
run nite sequence states sn bp si bp si mp si mp si principal words sets messages seen sets beliefs increase 
run run particular protocol messages protocol prescribes communicated messages may initially come environment 
precisely protocol nite sequence send statements form pn qn xn run protocol run length xi si annotation protocol holds run protocol formulas annotation hold corresponding states 
precisely annotation consists sets formulas forms statements holds run protocol th set holds th state run annotation valid holds runs protocol rst set annotation assumptions holds 
immediately annotation rules described earlier sound legal annotations valid 
just trivially rules complete valid annotations legal 
see protocol pn qn xn consider run sn messages xn communicated 
valid annotations hold run 
furthermore show annotation holds run derived 
true beliefs semantics gives meaning operators remaining operators largely mystery 
instance semantics determine na true false state 
de ciency interested judging truth beliefs 
conjunction quanti cation receive usual interpretation quanti cation assume variables range domains principals keys formulas 
order give meaning remaining operators notion state needs richer far follows state associates principal formulas said 
set closure properties fxgk op op hxi op op op op require pi qi xi th action protocol set formulas said increases pi th state runs protocol 
precisely pi si si si closure rules opi si 
addition principal believe formulas said op message protocol bp 
formula holds state op 
run principal jurisdiction set formulas jp jp holds holds 
states run satisfy jp run assigns set shared keys fp qg pair principals require keys appropriate principals fxgk holds fp qg fxgk op fxgk oq 
states run satisfy fp qg 
run assigns set public keys kp principal require appropriate principals matching secret keys fxg holds kp fxg op states run satisfy kp run assigns set shared secrets fp qg pair principals require shared secrets appropriate principals hxi holds fp qg hxi op hxi oq 
states run satisfy fp qg 
concern expressions forms fxgk hxi attempt assign truth value expressions forms fxgk hxi run determines set fresh formulas set closure property fand subformula fand said op si said op 
states run satisfy ifx 
clearly beliefs false 
essential satisfactory semantics 
questions trust delegation central study meaningless beliefs true 
consider interesting runs instance intruder broken cryptosystem leave open possibility incorrect beliefs 
de ne knowledge truth possible worlds see example halpern moses 
precisely knows state holds states local state sp general notions knowledge belief incomparable 
instance erroneous initial beliefs certainly knowledge principal knows tautologies necessarily believe 
beliefs happen true practice semantics account coincidence 
guarantee beliefs true need guarantee initial beliefs true 
case belief rudimentary resource bounded approximation knowledge 

literature emphasized importance reasoning knowledge understanding distributed computation see example halpern moses 
furthermore formal descriptions cryptographic protocols demillo merritt wolper halpern 
works suggested useful proof systems serve foundation speci analysis authentication protocols 
described logic reason authentication protocols treated examples 
table lists protocols studied logic summarizes attributes 
needham schroeder conv 
key distribute key otway rees kerberos distribute distribute key key yahalom andrew rpc needham schroeder public key establish secrets ccitt goal distribute key distribute distribute key extra key transfer data cryptosystem uses secrets conv 
conv 
conv 
conv 
conv 
conv 
public key public key nonces clocks nonces nonces clocks clocks nonces nonces nonces proves presence redundancy bugs trusted server generates key 
presence guaranteed optional protocol steps 
security breaches require key compromise 
table shows known properties goal protocol type cryptosystem shared key public key secrets keys message timeliness guaranteed nonces synchronized clocks 
addition include aspects formalism helped bring light protocol proves presence party redundancy security problems 
principals involved protocols initiator examples study show extremely simple logic capture subtle di erences protocols 
logic lacks features di cult needed 
variety protocols enables exhibit step beliefs built point authentication 
protocols guides identifying mistakes suggesting corrections 
undertaken result suggestion butler lampson 
andrew birrell luca cardelli dorothy denning butler lampson tim mann michael schroeder jennifer steiner anonymous referees encouraged suggested improvements 
chris mitchell provided information ccitt protocol 
kathleen typeset early version produced gures cynthia hibbard provided editorial assistance 
burrows abadi needham authentication practical study belief action 
proceedings second conference theoretical aspects reasoning knowledge vardi ed pp 

bauer berson key distribution protocol event markers 
acm transactions computer systems vol 
pp 

ccitt draft recommendation 
directory authentication framework version 

demillo lynch merritt cryptographic protocols 
proceedings fourteenth acm symposium theory computing pp 

denning sacco timestamps key distribution protocols 
cacm vol 
pp 

dolev yao security public key protocols 
ieee transactions information theory vol 
pp 

hoare axiomatic basis computer programming 
cacm vol 
pp 

halpern moses knowledge common knowledge distributed environment 
proceedings third acm conference principles distributed computing pp 

halpern moses tuttle knowledge analysis zero knowledge preliminary report 
proceedings twentieth acm symposium theory computing pp 

halpern vardi complexity reasoning knowledge time 
proceedings eighteenth acm symposium theory computing pp 

millen clark freedman interrogator protocol security analysis 
ieee transactions software engineering vol 
se pp 

miller neuman schiller saltzer kerberos authentication authorization system 
project athena technical plan section mit 
merritt wolper states knowledge cryptographic protocols 
draft 
nguyen perry dowe really know knowledge draft 
needham schroeder encryption authentication large networks computers 
cacm vol 
pp 

needham schroeder authentication revisited 
operating systems review vol 

otway rees cient timely mutual authentication 
operating systems review vol 
pp 

rivest shamir adleman method obtaining digital signatures public key cryptosystems 
communications acm vol 
pp 

satyanarayanan integrating security large distributed system 
cmu technical report cmu cs 
kent security mechanisms high level network protocols 
computing surveys vol 
pp 


