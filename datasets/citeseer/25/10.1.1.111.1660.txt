hop count filtering effective defense spoofed ddos traffic cheng jin cs department caltech pasadena ca cs caltech edu wang cs department college william mary williamsburg va cs wm edu ip spoofing exploited distributed denial service ddos attacks conceal flooding sources localities flooding traffic legitimate hosts reflectors redirecting amplifying flooding traffic 
ability filter spoofed ip packets near victims essential protection avoidance involuntary dos reflectors 
attacker forge field ip header falsify number hops ip packet takes reach destination 
hop count information inferred time live ttl value ip header 
mapping ip addresses hop counts internet server server distinguish spoofed ip packets legitimate ones 
base observation novel filtering technique immediately deployable weed spoofed ip packets 
analysis network measurement data show hop count filtering hcf identify close spoofed ip packets discard little collateral damage 
implement evaluate hcf linux kernel demonstrating benefits experimental measurements 
categories subject descriptors computer communication networks security general terms algorithms performance security keywords security networking ddos defense ttl host 
internet host spoof ip packets raw socket fill arbitrary source ip addresses ip headers 
ip spoofing usually associated malicious network behaviors distributed denial service ddos attacks 
difficult problems network security ddos attacks posed permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
ccs october washington dc usa 
copyright acm 
kang shin eecs department university michigan ann arbor mi eecs umich edu serious threat availability internet services 
subverting services ddos attacks limit block legitimate users access exhausting victim servers resources saturating stub networks access links internet 
conceal flooding sources localities flooding traffic attackers spoof ip addresses randomizing bit source address field ip header 
known ddos attacks smurf distributed reflection denial service attacks possible ip spoofing 
attacks masquerade source ip address spoofed packet victim ip address 
difficult counter ip spoofing stateless destination routing internet 
ip protocol lacks control prevent sender hiding origin packets 
furthermore destination routing maintain state information senders forwards ip packet destination validating packet true origin 
ip spoofing ddos attacks difficult defend 
thwart ddos attacks researchers taken distinct approaches router victim 
router approach improvements routing infrastructure approach enhances resilience internet servers attacks 
router approach performs line analysis flooding traffic line filtering ddos traffic inside routers 
line ip traceback attempts establish procedures track flooding sources occurrences ddos attacks :10.1.1.118.3372
help pinpoint locations flooding sources line ip traceback help sustain service availability attack 
line filtering mechanisms rely ip router enhancements detect abnormal traffic patterns foil ddos attacks 
solutions require router support coordination different routers networks wide spread deployment 
compared router approach victim approach advantage immediately deployable 
importantly potential victim stronger incentive deploy defense mechanisms network service providers 
current victim approach protects internet servers sophisticated resource management schemes 
schemes provide accurate resource accounting fine grained service isolation differentiation example shield interactive video traffic bulk data transfers :10.1.1.41.1733
mechanism detect discard spoofed traffic spoofed packets share resource principals code paths legitimate requests 
resource manager confine scope damage service attack may able sustain availability service 
stark contrast server ability filter spoofed ip packets help sustain service availability ddos attacks 
filtering spoofed ip packets orthogonal resource management conjunction advanced resource management schemes 
victim filtering detects discards spoofed traffic router support essential protecting victims ddos attacks 
utilize information contained ip header packet filtering 
attacker forge field ip header falsify number hops ip packet takes reach destination solely determined internet routing infrastructure 
hop count information indirectly reflected ttl field ip header intermediate router decrements ttl value forwarding packet hop 
difference initial ttl source final ttl value destination hop count source destination 
examining ttl field arriving packet destination infer initial ttl value hop count source 
assume attackers sabotage routers alter ttl values ip packets traverse 
propose novel hop count filter weed spoofed ip packets 
rationale hop count filtering spoofed ip packets arriving victims carry hop count values consistent ip addresses spoofed 
hop count filtering hcf builds accurate ip hopcount ip hc mapping table moderate amount storage clustering address prefixes hop count 
capture hop count changes dynamic network conditions devise safe update procedure ip hc mapping table prevents pollution hcf aware attackers 
pollution proof method ip hc mapping table initialization adding new ip addresses table 
running states alert action hcf mapping inspect ip header ip packet 
normal condition hcf stays alert state watching abnormal ttl behaviors discarding packet 
legitimate packet incorrectly identified spoofed dropped 
collateral damage alert state 
detection attack hcf switches action state hcf discards ip packets mismatching hop counts 
ip hc inspection efficient mechanisms available detect ddos attacks :10.1.1.39.487
analysis network measurement data show hcf recognize close spoofed ip packets 
addition hop count clustering significantly reduces percentage false positives 
discard spoofed ip packets little collateral damage action state 
ensure filtering mechanism attacks design light weight requires moderate amount storage 
implement hcf linux kernel ip layer step incoming packet processing 
evaluate benefit hcf experimental measurements show hcf effective countering ip spoofing providing significant resource savings 
remainder organized follows 
section presents ttl hop count computation hop count inspection algorithm critical path hcf 
section studies feasibility proposed filtering mechanism large set previously collected traceroute data resilience filtering scheme hcf aware attackers 
section demonstrates effectiveness proposed filter detecting spoofed packets 
section deals construction ip hc mapping table heart hcf 
section details running states hcf inter state transitions placement hcf 
section presents implementation experimental evaluation percentage legitimate packets identified spoofed 
hcf 
section discusses related 
concludes section 
hop count inspection central hcf validation source ip address packet hop count inspection 
section discuss hop count computation detail inspection algorithm 
ttl hop count computation hop count information directly stored ip header compute ttl field 
ttl bit field ip header originally introduced specify maximum lifetime packet internet 
intermediate router decrements ttl value transit ip packet forwarding hop 
final ttl value packet reaches destination initial ttl subtracted number intermediate hops simply hop count 
challenge hop count computation destination sees final ttl value 
simple operating systems oss initial ttl value practice consensus initial ttl value 
furthermore os ip address may change time assume single static initial ttl value ip address 
fortunately modern oss selected initial ttl values 
set initial ttl values cover popular oss microsoft windows linux variants bsd commercial unix systems 
observe initial ttl values far apart 
internet traces shown internet hosts apart hops confirmed observation determine initial ttl value packet selecting smallest initial value set larger final ttl :10.1.1.20.8595
example final ttl value initial ttl value smaller possible initial values 
resolve ambiguities cases compute hop count value possible initial ttl values accept packet match possible hop counts 
drawback limiting possible initial ttl values packets systems odd initial ttl values may incorrectly identified having spoofed source ip addresses 
may happen user switches os uses normal initial ttl value uses odd value 
filter starts discard packets detection ddos attack systems suffer actual ddos attack 
study shows oss odd initial ttls typically older oss 
expect oss constitute small percentage hosts current internet 
benefit deploying hcf weight risk denying service hosts attacks 
inspection algorithm assuming accurate ip hc mapping table see section details construction outlines hcf procedure identify spoofed packets 
inspection algorithm extracts source ip address final ttl value ip packet 
algorithm infers initial ttl value subtracts final ttl value obtain hop count 
source ip address serves index table retrieve correct hop count ip address 
computed hop count matches stored hop count packet authenticated packet spoofed 
note spoofed ip address packet extract final ttl tf ip address infer initial ttl ti compute hop count hc ti tf index get stored hop count hs hc hs packet spoofed packet legitimate hop count inspection algorithm 
may happen hop count zombie flooding source victim 
case hcf able identify spoofed packet 
show section limited range hop count values hcf highly effective identifying spoofed ip addresses 
occasionally legitimate packets may identified spoofed due inaccurate ip hc mapping delay hop count update 
important minimize collateral damage hcf 
note identified spoofed ip packet dropped action state hcf keeps track number mis matched ip packets discarding packets alert state 
guarantees collateral damage alert state common action state 

feasibility hop count filter ing feasibility hcf hinges factors stability hop counts diversity hop count distribution robustness possible 
section examine stability hop counts 
assess valid hop counts server diverse matching hop count source ip address packet suffices recognize spoofed packets high probability 
discussion show difficult hcf aware attacker circumvent filtering 
hop count stability stability hop counts internet server clients crucial hcf correctly effectively 
frequent changes hop count server clients lead excessive mapping updates greatly reduce filtering accuracy date mapping attacks 
hop count stability dictated routing behaviors internet 
study routing stability internet paths dominated prevalent routes thirds internet paths studied observed routes persisting days weeks 
confirm findings measurements taken minute intervals sites january st april th 
observed total distinct way paths majority traceroute measurements month period 
measurements paths experienced hop count changes paths fewer observable daily changes 
reasonable expect hop counts stable internet 
proposed filter contains dynamic update procedure capture hop count changes discussed section 
terms zombie flooding source interchangeably 
diversity hop count distribution hcf recognize forged packets source ip addresses hop count value zombie diverse hop count distribution critical effective filtering 
necessary examine hop count distributions various locations internet ensure hop counts concentrated single value 
client ip addresses hops away server able distinguish spoofed packets legitimate ones hcf 
type sample number commercial sites educational sites non profit sites foreign sites net sites table diversity gateway locations 
obtain actual hop count distributions data different traceroute gateways 
data sets contain clients compared 
locations gateways diverse shown table 
traceroute gateways measured hop counts clients 
examined hop count distributions traceroute gateways find gaussian distribution bell shaped curve order approximation 
figures show hopcount distributions selected sites connected commercial yahoo com web server stanford linear accelerator center 
interested girth distribution give qualitative indication hcf works wider girth effective hcf 
gaussian distributions girth standard deviation 
gaussian distribution written form normalization constant area gaussian distribution sums number ip addresses measured 
mean value gaussian distribution specifies center curve standard deviation specifies girth bell 
interested gaussian distribution study hop count suitable measure hcf 
making definitive claim hop count distributions gaussian 
hop count distribution function matlab fit distribution hop counts data set 
plot means standard deviations confidence intervals figures respectively 
observe mean values fall hops standard deviations hops 
largest percentage ip addresses common hop count value 
distributions allow hcf effectively show quantitative evaluation hcf section 
robustness evasion attackers learn hcf try generate spoofed packets dodge hop count inspections evading hcf 
attempt require large amount resource time elaborate planning casual attackers able evade hcf 
follows assess various ways attackers may evade hcf 
distribution mean generic sense equivalent histogram 
pmf pdf hop fitted gaussian distribution real ip addresses hop count yahoo 
traceroute gateway id parameters traceroute gateways 
key attacker evade hcf ability set appropriate initial ttl value spoofed packet number hops traversed ip packet determined solely routing infrastructure 
assuming initial ttl value internet hosts packet flooding source hz hops away victim final ttl value hz 
order attacker generate spoofed packets flooding source detected attacker change initial ttl value packet hs hz hs hop count spoofed ip address victim 
spoofed packet correct final ttl value hs hz hz hs reaches victim 
attacker easily learn hop count hz zombie site victim 
randomly selecting source address spoofed ip packet extremely difficult impossible attacker learn hs 
obtain correct hs values spoofed packets sent victim attacker build priori ip hc mapping table covers entire random ip address space 
difficult building ip hc mapping table victim attacker observe final ttl values normal traffic victim 
attacker build ip hc mapping table may compromise host stub network ip addresses random ip address space get hs corresponding ip hc mapping entry 
correct hs values attacker fabricate appropriate initial ttl values conceal forgery 
compromising hosts may possible attacker probe hs value ip address sending packets network 
probing procedure works follows pmf pdf hop fitted gaussian distribution real ip addresses hop count stanford university 
traceroute gateway id parameters traceroute gateways 
force victim action state actively filter packets launching ddos attack probe quiescent host extract latest value ip identification field header send spoofed packet containing legitimate request quiescent ip address source ip address victim tentative initial ttl re probe quiescent host check ip id increased 
indicates victim accepted spoofed packet initial ttl desired 
attacker change initial ttl value repeat probing procedure 
possible obtain appropriate initial ttl single ip address probing random address space requires excessive amount time effort 
attacker launch ddos attack long accommodate large number probes launch numerous short lived ddos attacks accommodate probing activities 
attacker probes host stub network internet containing tens millions stub networks difficult hide process ttl probing 
second attacker ensure ip address remains quiescent probing 
attacker prevent probed ip address active easily misinterpret increase ip id number forged initial ttl correct 
compromising hosts attacker may compute spoofed ip addresses accurate topology internet underlying routing algorithms policies 
internet mapping efforts internet victim accepts spoofed packet response sent quiescent host causing generate response rst increase ip id number 
map mercator skitter projects may approach plausible :10.1.1.36.6532:10.1.1.20.8595
current topology mappings put snapshots various networks measured different times 
produced topology maps generally approximations actual network connectivity 
importantly inter domain routing internet policy routing policies disclosed public 
path hop count source destination determined routing policies algorithms unknown 
attacker accurate information internet topology obtain correct hop counts network connectivity 
believe quality network maps improve better mapping technology anticipate near term advances lead accurate hop counts just internet maps 
spoofing randomly selected ip addresses attacker may choose spoof ip addresses set compromised machines smaller number measure hs fabricate appropriate initial ttls 
weakens attacker ability ways 
list spoofed source ip addresses greatly reduced detection removal flooding traffic easier 
second source addresses spoofed ip packets reveal locations compromised hosts ip traceback easier 
third attacker probe victim server obtain correct hop counts 
network administrators nowadays extremely alert unusual access patterns probing attempts require great deal effort coordinate probing attempts raise red flags 
fourth attacker modify available attacking tools popular distributed attacking tools including shaft tfn tfn trinity generate randomized ip addresses space spoofing 
wide spread randomness spoofing ip address verified backscatter study quantified dos activities internet 

effectiveness hcf assess effectiveness hcf statistical standpoint 
specifically address question fraction spoofed ip packets detected proposed hcf assume potential ddos victims know complete mapping client ip addresses hop counts victims 
section discuss construction mappings 
assume spoof packets attacker randomly selects source ip addresses entire ip address space chooses hop counts distribution 
loss generality assume attacker evenly divides flooding traffic flooding sources 
analysis easily extended cases flooding traffic unevenly distributed 
analysis tractable consider static 
discuss update procedure capture legitimate hop count changes 
simple attacks examine effectiveness hcf simple attackers spoof source ip addresses default initial ttl values flooding sources 
available ddos attacking tools alter initial ttl values packets 
final ttl value spoofed packet bear hopcount value flooding source victim 
assess performance hcf simple attacks consider scenarios single flooding source multiple flooding sources 
single source single flooding source hop count victim denote fraction ip addresses hopcount victim flooding source 
depicts hopcount distributions seen hypothetical server real client ip addresses spoofed ip addresses generated single flooding source 
spoofed ip addresses come single source identical hop count 
hop count distribution spoofed packets vertical bar width 
hand real client ip addresses diverse hop count distribution observed close gaussian distribution 
shaded area represents ip addresses fraction total valid ip addresses distance server flooding source 
fraction spoofed ip addresses detected remaining fraction identified discarded hcf 
attacker may happen choose zombie popular hop count values hops away victim flooding source 
standard deviations fitted gaussian distributions reasonably large percentage ip addresses single hop count value small relative ip address space 
shown section attacker floods spoofed ip packets zombie hcf identify nearly spoofed ip addresses 
distributions mode accounts total ip addresses maximum minimum modes respectively 
hcf effective simple attacks reducing attack traffic order magnitude 
multiple sources dos attacks usually involve single host need examine case multiple active flooding sources 
assume sources flood total packets flooding source generates spoofed packets 
shows hop count distribution spoofed packets sent flooding sources 
flooding source seen generate traffic single unique hop count value 
hi hop count victim flooding source spoofed packets source hcf identify 
fraction identifiable spoofed packets generated flooding sources hn hi expression says effectiveness having multiple flooding sources effective source largest hi effective source smallest adding flooding sources weaken hcf ability identify spoofed ip packets 
contrary hop count distribution follows gaussian existence effective flooding sources small enables filter identify discard spoofed ip packets case single flooding source 
sophisticated attackers attackers eventually recognize merely spoof source ip addresses 
default initial ttl value attacker easily randomize spoofed ip packet 
hop count single flooding source victim fixed randomizing initial ttl values create illusion packets having different hop count values pmf hop count real ip addresses forged ip addresses hop count distribution ip addresses single flooding source 
victim server 
range randomized initial ttl values subset hz id hz hz hop count flooding source victim id default initial ttl value 
starting point range hz 
spoofed ip packets bearing ttls smaller hz discarded reach victim 
simplest method generating initial ttls single source uniform distribution 
final ttl values tv seen victim ir hz ir represents randomly generated initial ttls 
hz constant ir follows uniform distribution tv uniformly distributed 
victim derives hop count received ip packet tv value perceived hop count distribution spoofed source ip address uniformly distributed 
illustrates effect randomized ttls hz 
gaussian curve represent typical hop count distribution see section real ip addresses victim box graph represent perceived hop count distribution spoofed ip addresses victim 
large overlap graphs may appear indicate filtering mechanism effective 
contrary uniformly distributed random ttls conceal fewer spoofed ip addresses hcf 
uniformly distributed ttls spoofed source ip address probability having matching ttl value number possible hop counts 
consequently possible hop count fraction ip addresses correct ttl values 
assuming range possible hop counts hi fraction spoofed source ip addresses correct ttl values hi 
hk note place simplify notation 
range generated hop counts 
summation maximum value represented area shorter gaussian distribution 
case spoofed packets go undetected hcf 
general attacker generate initial ttls range hm hn known distribution probability ip addresses hop count hk actual hop count distribution victim server fraction ip addresses hop count hk hk fraction spoofed ip packets caught hcf pmf pmf real ip addresses forged ip addresses zombie forged ip addresses zombie hop count hop count distribution ip addresses flooding sources 
real ip addresses forged ip addresses undetectable ip addresses hop count hop count distribution ip addresses single flooding source randomized ttl values 
hk term inside summation simply states fraction ip addresses hop count hk spoofed matching ttl values 
instance attacker able generate initial ttls hop count distribution victim hk case hop hk count distribution calculate making attack slightly effective randomly generating ttls 
surprisingly intelligent attacks effective simple attacks section 
construction hcf table shown hcf remove nearly spoofed traffic accurate mapping ip addresses hop counts 
building accurate hcf table ip hc mapping table critical detecting maximum number spoofed ip packets 
section detail approach constructing hcf table 
objectives building hcf table accurate ip hc mapping date ip hc mapping moderate storage requirement 
clustering address prefixes build accurate ip hc mapping tables maximize hcf effectiveness storing hop count ip address 
design pollution proof update procedure captures legitimate hop count changes attackers attempt pollute hcf tables 
ip address aggregation highly internet server receive legitimate requests live ip addresses internet 
entire ip address space fully utilized current internet 
aggregating ip address reduce space requirement ip hc mapping significantly 
importantly ip address aggregation covers unseen ip addresses located ip addresses hcf table 
grouping hosts bits ip addresses common aggregation method 
hosts network prefixes longer bits may reside different physical networks spite having bits 
hosts necessarily located identical hop counts 
obtain accurate ip hc mapping refine bit aggregation 
simply aggregating bit address prefixes divide ip addresses bit prefix smaller clusters hop counts 
understand refined clustering improves hcf simple bit aggregation compare filtering accuracies hcf tables aggregations simple bit aggregation hop count clustering bit aggregation hop count clustering 
accuracy experiment treat traceroute gateway section web server measured ip addresses clients web server 
build hcf table set client ip addresses web server evaluate filtering accuracy aggregation method 
assume attacker knows client ip addresses web server generates packets randomly selecting source ip addresses legitimate client ip addresses 
assume attacker knows general hop count distribution uses generate hop count spoofed packet 
ddos attack knowledgeable attacker launch learning exact ip hc mapping best scenario attacker 
define filtering accuracy hcf table percentages false positives false negatives 
false positives legitimate client ip addresses incorrectly identified spoofed 
false negatives spoofed packets go undetected hcf 
minimized order achieve maximum filtering accuracy 
compute percentage false positives number client ip addresses identified spoofed divided total number client ip addresses 
compute percentage false negatives calculation section 
aggregation bit address prefixes web server build hcf table grouping ip addresses bits 
minimum hop count ip addresses inside bit network address hop count network 
table constructed ip address converted bit address prefix actual hop count ip address compared stored aggregate hcf table 
bit aggregation preserve correct hop counts ip addresses examine performance types filters strict filtering filtering filtering strict filtering drops packets hop counts match stored table 
filtering drops packets hop counts differ greater compared table filtering drops packets hop counts differ greater 
shown section percentage false negatives determined distribution hop counts 
aggregation ip false positive percentage bit strict filtering bit strict filtering bit filtering bit filtering bit clustering strict filtering false negative percentage accuracies various filters 
note points bit clustering filtering overlap bit filtering 
addresses bit network addresses change hopcount distribution significantly 
bit strict filtering yields similar percentage false negatives web server case storing individual ip addresses bit strict filtering 
hand percentage false positives significantly higher case aggregation expected 
presents combined false positive false negative results filtering schemes 
axis percentage false negatives axis percentage false positives 
point represents pair percentages single web server 
example bit strict filtering web servers suffer false positives false negatives 
relax filtering criterion false positives halved false negatives approximately doubled 
clearly tolerating packets mismatching hop counts requires trade percentage false positives false negatives 
filtering offers reasonable compromise false negatives false positives 
considering impact ddos attacks hcf small percentage false positives may acceptable price pay 
practice bit aggregation straightforward implement offer fast lookup efficient implementation 
assuming byte entry network prefix hop count storage requirement bytes mb 
memory requirement modest compared contemporary servers typically equipped multi gigabytes memory 
setup lookup operation consists computing bit address prefix source ip address packet indexing hcf table find right hop count value 
systems limited memory aggregation table implemented smaller hash table 
bit aggregation may accurate deployable solution 
aggregation hop count clustering bit aggregation percentage false negatives high false positives kept reasonably small 
hop count divide ip addresses bit prefix smaller clusters 
building binary aggregation tree iteratively individual ip addresses cluster ip addresses hop count 
leaves tree represent precise possible ip addresses inside bit address prefix 
iteration examine sibling nodes determine aggregate ip addresses nodes 
example hop count clustering 
aggregate nodes long share common hopcount empty 
aggregate possible parent node hop count children 
find largest possible aggregation set ip addresses 
shows example clustering set ip addresses octets shown hop counts aggregation tree showing levels 
example ip address range aggregated prefix hop count ip addresses aggregated prefix hop count 
aggregate blocks tree due holes address space 
able aggregate ip addresses network prefixes 
remaining ip addresses stored individual ip addresses 
hop count clustering aggregate ip addresses share hop count 
eliminate false positives clients server known 
hcf free false positives long table updated correct hop counts client hop counts change 
furthermore hop count clustering observe noticeable increase false negatives compared approach bit strict filtering 
see difference due having similar numbers false positives negatives 
compared bit aggregation clustering approach accurate consumes memory 
shows number table entries web servers experiments 
axis id web server ranked number client ip addresses axis number table entries 
case bit strict filtering number table entries server number client ip addresses 
observe hop count clustering increases size hcf table case 
pollution proof initialization update populate hcf table initially internet server collect traces clients contain ip addresses corresponding ttl values 
initial collection period commensurate amount traffic server receiving 
busy site collection period days sufficient lightly loaded site weeks appropriate 
keeping ip hc mapping date necessary filter internet hop counts may change 
hop entries bit strict filtering bit strict filtering bit clustering strict filtering traceroute gateway rank sizes various hcf tables 
count distance client server change result relocation networks routing instability temporary network failures 
events transient changes hop count due permanent events need captured 
adding new ip hc entries capturing legitimate hop count changes foil attackers attempt slowly pollute hcf tables dropping spoofed packets 
way ensure legitimate packets initialization dynamic update tcp connection establishment hcf table updated tcp connections state 
way tcp handshake connection setup requires active open party send ack packet handshake acknowledge passive party initial sequence number 
host sends syn packet spoofed ip address receive server syn ack packet complete way handshake 
packets established tcp connections ensures attacker slowly pollute hcf table spoofing source ip addresses 
hcf mechanism works types ip traffic update procedure uses tcp traffic 
dynamic update provides safety may expensive inspect update hcf table newly established tcp connection update function critical path tcp processing 
provide user configurable parameter adjust frequency update 
simplest solution maintain counter records number established tcp connections reset update hcf table packets belonging th tcp connection reset zero update 
function system load updates frequently system lightly loaded 
note mapping updates may require re clustering may break node merge adjacent nodes bit tree 
re clustering local activity confines single bit tree 
hop count changes frequent event network reported confirmed observations overhead incurred re clustering negligible 

running states hcf hcf causes delay critical path packet processing active time 
introduce running states inside hcf alert state detect presence spoofed packets action state discard spoofed packets 
default hcf stays alert state monitors trend hop count changes discarding packets 
detection flux spoofed alert state sampled packet spoo ip hc inspect average spoo spoo switch action accept th tcp control block tcb update table tcb action state packet spoo ip hc inspect average spoo spoo drop accept switch alert operations hcf states 
packets hcf switches action state examine packet discards spoofed ip packets 
section discuss details state show having states better protect servers different forms ddos attacks 
tasks states lists tasks performed state 
alert state hcf performs tasks sample incoming packets hop count inspection calculate spoofed packet counter update ip hc mapping table case legitimate hop count changes 
packets sampled exponentially distributed intervals mean time number packets 
exponential distribution precomputed lookup table fast line access 
sampled packet ip hc inspect returns binary number spoo depending packet judged spoofed 
average compute average spoof counter unit time 
greater threshold hcf enters action state 
hcf alert state update hcf table tcp control block th established tcp connection 
hcf action state performs packet hop count inspection discards spoofed packets 
hcf action state performs similar set tasks alert state 
main differences hcf examine packet sampling subset packets discards spoofed packets 
hcf stays action state long spoofed ip packets detected 
ongoing spoofing ceases hcf switches back alert state 
accomplished checking spoof counter threshold smaller better stability 
hcf alternate alert action states fluctuates 
making second threshold avoids instability 
minimize overhead hop count inspection dynamic update alert state execution frequencies adaptively chosen inversely proportional server workload 
measure server workload number established tcp connec tions 
server lightly loaded hcf calls ip hc inspection dynamic update frequently reducing user configurable parameters contrast heavily loaded server decreased 
thresholds detecting spoofed packets adjusted load 
general guideline setting execution rates thresholds dynamics server workload follows load rates threshold currently recommend parameters 
specific values depend requirement individual networks balancing security performance 
staying alert attacks alert state lowers overhead hcf possible forms dos attacks 
attacks attacker ip packets contain legitimate requests dns queries setting source ip addresses spoofed packets actual victim ip address 
attacker sends spoofed packets large number reflectors 
reflector receives moderate flux spoofed ip packets may easily sustain availability normal service causing alert 
usual intrusion detection methods ongoing traffic volume access patterns may sensitive detect presence spoofed traffic 
contrast hcf specifically looks ip spoofing able detect attempts fool servers acting reflectors 
hcf perfect spoofed packets may slip filter hcf detect intercept spoofed packets thwart attacks 
point attacker may evade detection knows hop count mapping reflectors victim discussed section 
blocking bandwidth attacks protect server resources cpu memory hcf installed server network device near servers inside mile region firewall organization 
scheme effective ddos attacks target bandwidth network server 
task protecting access link entire stub network complicated difficult filtering applied upstream router access link involve stub network isp 
difficulty protecting bandwidth flooding packet filtering separated detection spoofed packets filtering done isp edge router 
machines inside stub network run hcf actively watch traces ip spoofing staying alert state 
complete protection access router run hcf case attacking traffic terminates access router 
accomplished substituting regular host configured router 
addition machine inside stub network needs maintain updated hcf table hosts see established tcp connections 
attack machine notify network administrator coordinates isp install packet filter hcf table isp edge router 
running state design natural separate functions detection filtering spoofed packets 
shows hypothetical stub network hosts web server runs hcf 
stub network connected upstream isp access router isp edge router 
normal network condition web server monitors traffic builds hcf table 
attack traffic arrives stub network hcf web server notice sudden rise spoofed traffic inform isp router access router install admin hop count table notify server packet filtering router protect bandwidth 
network administrator authenticated channel 
administrator isp install packet filter isp edge router hcf table 
note directly hcf table hop counts client ip addresses web server different router 
hop counts need decremented proper offset equal hop count router web server 
hcf table enabled isp edge router spoofed packets intercepted small percentage spoofed packets slip hcf consume bandwidth 
case having separable states crucial routers usually observe established tcp connections safe update procedure 

resource savings section details implementation proof concept hcf inside linux kernel presents evaluation real testbed 
concerns addressed packet overhead hcf amount resource savings hcf active 
measurements show hcf consumes small amount cpu time significant resource savings 
building hop count filter validate efficacy hcf real system implement test module inside linux kernel 
test module resides ip packet receive function ip rcv 
minimize cpu cycles consumed spoofed ip packets insert filtering function code segment performs expensive checksum verification 
test module basic data structures functions support search update operations hop count mapping 
hop count mapping organized bucket hash table chaining resolve collisions 
entry hash table represents bit address prefix 
binary tree cluster hosts bit address prefix 
searching hop count ip address consists locating entry bit address prefix hash table finding proper cluster ip address belongs tree 
ip address hcf computes hash key xoring upper lower bits bits source ip address 
relatively small compared set possible bit address prefixes collisions occur 
estimate average size chained list hash client ip addresses bucket hash table find average entries chain maximum 
build clustering tree choosing minimum clustering unit ip addresses tree depth 
tree implemented linear array elements 
element array stores hop count value particular clustering 
set array element hop count clustering possible zero 
hcf hcf scenarios avg min avg min close ping ping ping flood tcp bulk udp bulk table cpu overhead hcf normal ip processing 
implement hcf table update insert function call kernel tcp code past point way handshake tcp connection completed 
th established tcp connection update function takes argument source ip address final ttl value ack packet completes handshake 
function searches hcf table entry corresponds source ip address overwrite existing entry create new entry time visitor 
experimental evaluation hcf useful packet overhead lower normal processing ip packet 
examine packet overhead hcf instrumenting linux kernel time filtering function critical path processing ip packets 
built linux record execution time cpu cycles 
generalize experimental results predict performance hcf real ddos attacks confirm hcf provides significant resource savings 
set simple testbed machines connected mbps ethernet hub 
dell precision workstation ghz pentium processor gb memory simulates victim server hcf installed 
second machine generates various types ip traffic emulate incoming attack victim server 
minimize effect caches randomize hash key simulate randomized ip addresses hit buckets hash table 
hop count look assume worst case search time 
search bit address prefix traverses entire chained list entries hop count lookup bit prefix traverses entire depth tree 
generate types traffic tcp icmp emulate flooding ddos attacks 
case flooding tcp traffic modified version generate tcp syn packets simulate syn flooding attack 
addition repeatedly open tcp connection victim machine close right away includes sending syn fin packets 
linux delays processing establishment connection control block receiving final ack host active open 
processing establish connection included open close experiment measured critical path may longer syn flooding attack 
emulate icmp attacks run experiments single stream pings 
uses default byte packets second uses byte packets 
experiments packets sent ms intervals 
third experiment flood ping default packet size bytes sends packets fast system transmit 
understand hcf impact normal ip traffic consider bulk data transfers tcp udp 
compare packet overhead hcf packet overhead filtering function table 
recorded processing times cpu cycles table 
column hcf lists execution times filtering function 
column hcf lists normal percentage saved cpu cycles filtering ddos traffic filtering ddos traffic filtering ddos traffic percentage ddos traffic resource savings hcf 
packet processing times hcf 
row table represents single experiment experiment run large number packets compute average number cycles 
minimum average numbers 
exists difference average cycles minimum cycles reasons 
packets take longer process syn ack packet takes time fin packet 
second average cycles may include lower level interrupt processing input processing linux ethernet driver 
observe general filtering function uses significantly fewer cycles emulated attacking traffic generally order magnitude 
consequently hcf provide significant resource savings detecting discarding spoofed traffic 
case bulk data transfers differences significant 
processing packets bulk data transfers takes fewer cycles emulated attack traffic 
attribute tcp header prediction udp simpler protocol processing 
fair say filtering function adds small overhead processing legitimate ip traffic 
far compensated processing spoofed traffic 
illustrate potential savings cpu cycles compute actual resource savings achieve attacker launches spoofed ddos attack server 
attack legitimate traffic terms fraction total traffic unit time average number cpu cycles consumed packet hcf td tl td tl packet processing times attack legitimate traffic respectively 
average number cpu cycles consumed packet hcf tdf td tl tdf filtering overhead attack legitimate traffic respectively percentage attack traffic filter 
assume attacker uses traffic attack server implements hcf 
results various parameters plotted 
axis percentage total traffic contributed ddos attack axis number cpu cycles saved percentage total cpu cycles consumed hcf 
contains number curves corresponding value 
packet overhead ddos traffic higher tcp bulk transfer percentage ddos traffic hcf filter essentially sole determining factor resource savings 
composition total traffic varies percentage resource savings remains essentially 

related researchers distribution ttl values seen servers detect abnormal load spikes due ddos traffic 
razor team built command line utility 
compares ttl received packet considered suspicious actual ttl test packet sent source ip address verification 
requires administrator determine packets examined manually perform verification 
packet processing overhead prohibitively high spoofed traffic real time 
parallel independent possibility ttl detecting spoofed packet discussed 
results shown final ttl values ip address predictable generally clustered single value consistent observation hop counts stable 
authors provide detailed solution spoofed ddos attacks 
provide analysis effectiveness ttl values construction update deployment accurate ttl mapping table 
examine questions develop deployable solution 
number router filtering techniques lessen effects ddos packets curb propagations internet 
proactive solution ddos attacks filtering schemes execute ip routers rely routers markings proposed prevent spoofed ip packets reaching intended victims 
straightforward scheme ingress filtering blocks spoofed packets edge routers address ownership relatively unambiguous traffic load low 
success ingress filtering hinges ip routers 
isps reluctant implement service due administrative overhead lack immediate benefits customers 
reachability constraints imposed routing network topology route distributed packet filtering dpf utilizes routing information determine incoming packet router valid respect packet inscribed source destination ip addresses 
experimental results reported show significant fraction spoofed packets may filtered spoofed packets dpf fails capture localized candidate sites easy trace back 
validate ip packet carries true source address save source address validity enforcement protocol builds table incoming source ip addresses router associates incoming interfaces set valid incoming network addresses 
save runs ip router checks ip packet arrives expected interface 
matching incoming ip addresses expected receiving interfaces set ip source addresses attacker spoof greatly reduced 
ip traceback marking path identifier pi embeds path fingerprint packet victim identify packets traversing path internet spoofed ip addresses 
probabilistic marking pi marking deterministic 
checking marking packet victim filter attacking packets match path signatures known attacking packets 
pi effective half routers internet participate packet marking 
exist commercial solutions block propagation ddos traffic router support 
main difference scheme existing approaches hcf system mechanism require network support 
difference implies solution immediately deployable internet 

hop count filtering scheme detects discards spoofed ip packets conserve system resources 
scheme inspects hop count incoming packet validate legitimacy packet 
moderate amount storage hcf constructs accurate ip hc mapping table ip address aggregation hop count clustering 
pollution proof mechanism initializes updates entries mapping table 
default hcf stays alert state monitoring abnormal ip hc mapping behaviors discarding packet 
spoofed ddos traffic detected hcf switches action state discards spoofed packets 
analyzing actual network measurements show hcf remove spoofed traffic 
attacker aware hcf easily circumvent hcf 
experimental evaluation shown hcf efficiently implemented inside linux kernel 
analysis experimental results indicated hcf simple effective solution protecting network services spoofed ip packets 
furthermore hcf readily deployed systems require network support 
issues warrant research 
existence nat network address translator boxes may connect multiple stub networks single ip address appear multiple valid hop counts time 
need experimental studies understand effectiveness hcf presence nat 
second install hcf system victim site practical need systematic procedure setting parameters hcf frequency dynamic updates 
build deploy hcf various networks see effective real spoofed ddos 

dave andersen 

available nms lcs mit edu software ron 
razor team 

available razor com tools desc readme html 
banga druschel mogul 
resource containers new facility resource management server systems 
proceedings usenix osdi new orleans la february 
bellovin 
icmp traceback messages 
internet draft draft bellovin txt progress march 
bhatti friedrich 
web server support tiered services 
ieee network september october 
cert advisory ca 
denial service development january 
available www cert org advisories ca html 
cert advisory ca 
tcp syn flooding ip spoofing november 
available www cert org advisories ca html 
cert advisory ca 
smurf ip denial service attacks january 
available www cert org advisories ca html 
cheswick burch :10.1.1.20.8595
mapping visualizing internet 
proceedings usenix annual technical conference san diego ca june 
claffy monk 
internet tomography 
nature january 
available www caida org tools skitter 
cronin jamin jin raz shavitt 
constrained mirror placement internet 
ieee journal selected areas communications september 
dietrich long dittrich 
analyzing distributed denial service tools shaft case 
proceedings usenix lisa new orleans la december 
dittrich 
distributed denial service ddos attacks tools page 
available staff washington edu dittrich misc ddos 
swiss education research network 
default ttl values tcp ip 
available net docs fingerprint en ttl default html 
ferguson 
network ingress filtering defeating denial service attacks employ ip source address spoofing 
rfc january 
national laboratory applied network research 
active measurement project amp 
available watt nlanr net 
fullmer 
osu flow tools package cisco netflow logs 
proceedings usenix lisa new orleans la december 

denial service attack rip internet 
ieee computer april 
gibson 
distributed reflection denial service 
technical report gibson research february 
available com dos htm 
gil 
data structure bandwidth attack detection 
proceedings usenix security symposium washington august 
tangmunarunkit :10.1.1.36.6532
heuristics internet map discovery 
proceedings ieee infocom tel aviv israel march 
arbor networks dos 
available com standard tid cid 
ioannidis bellovin 
implementing router defense ddos attacks 
proceedings ndss san diego ca february 
keromytis misra rubenstein 
sos secure overlay services 
proceedings acm sigcomm pittsburgh pa august 
li wang reiher zhang 
save source address validity enforcement protocol 
proceedings ieee infocom new york city ny june 
mahajan bellovin floyd ioannidis paxson shenker 
controlling high bandwidth aggregates network 
acm computer communication review july 
moore voelker savage 
inferring internet denial service activity 
proceedings usenix security symposium washington august 
robert morris 
weakness bsd unix tcp ip software 
computing science technical report bell laboratories murray hill nj february 
mazu networks 
enforcer 
online 
available www com products 
neumann porras 
experience emerald date 
proceedings st usenix workshop intrusion detection network monitoring april 
park lee 
effectiveness route packet filtering distributed dos attack prevention power law internets 
proceedings acm sigcomm san diego ca august 
paxson 
routing behavior internet 
ieee acm transactions networking october 
paxson 
analysis reflectors distributed denial service attacks 
acm computer communication review july 
poletto 
practical approaches dealing ddos attacks 
agenda may 
available www org poletto html 
pang peterson 
defensive programming annotation toolkit build dos resistant software 
proceedings usenix osdi boston ma december 
savage wetherall karlin anderson 
practical network support ip traceback 
proceedings acm sigcomm stockholm sweden august 
partridge sanchez jones kent strayer 
hash ip traceback 
proceedings acm sigcomm san diego ca august 
song perrig 
advanced authenticated marking schemes ip traceback 
proceedings ieee infocom anchorage alaska march 
spatscheck peterson 
defending denial service attacks scout 
proceedings usenix osdi new orleans la february 
spring mahajan wetherall 
measuring isp topologies 
proceedings acm sigcomm pittsburgh pa august 
stone 
ip overlay network tracking dos floods 
proceedings usenix security symposium denver august 
levitt 
detecting spoofed packets 
proceedings third darpa information survivability conference exposition discex iii washington april 
wang zhang shin 
detecting syn flooding attacks 
proceedings ieee infocom new york city ny june 
wright stevens 
tcp ip illustrated volume 
addison wesley publishing 
perrig song 
pi path identification mechanism defend ddos attacks 
proceedings ieee symposium security privacy oakland ca may 
