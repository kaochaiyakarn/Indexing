prediction model combination class characteristics large oo applications peter clarke king school computing information sciences florida international university miami fl usa email cis fiu edu technical report fiu department statistics florida international university miami fl usa email fiu edu software developers java language language choice applications 
due effective object oriented oo paradigm develop large software projects ability java language support increasing web technologies business applications 
release java version increased popularity due inclusion new features exist oo languages 
transition java java provided programmer flexibility implementing programs java 
study investigates characteristics class combined providing feedback features provided java earlier java earlier currently 
study uses taxonomy oo classes provides mechanism catalog class written java finite set groups 
detailed description enumerated possible groups java classes provided 
taxtoolj taxonomy tool object oriented language java cataloged classes cross section java applications written java java identify distribution groups developers 
data study create prediction models allow developers estimate number different groups classes fields methods expected generated large java applications 
knowledge significant benefit aid developers testing maintenance activities software process 
widespread oo paradigm develop large software applications web technologies resulted software applications written java language sun 
release java version increased popularity due inclusion new features generics enhanced loops unboxing static imports metadata 
transition java agh java agh provided programmer flexibility implementing programs java 
question addressed researchers additional flexibility java language different features language combined writing classes 
studies done object oriented design metrics investigate predict certain properties software applications 
properties include class complexity coupling cohesion system size dgp fn pv 
studies performed large software systems 
addition focus single properties class system 
example weighted methods class depth inheritance tree number children hcn 
important aspect studies independent implementation language consider features peculiar particular language 
various class abstraction techniques cats software development process 
include abstractions syntactically semantically close implementation gc control flow graphs bin 
abstractions class diagrams provide higher level abstraction greater syntactic semantic distance implementation 
furthermore abstractions usually scalable existing oo metrics handle large systems syntactically far implementation 
taxonomy clarke cmg provides scalability syntactically closer program existing oo metrics 
study uses taxonomy oo classes java cbc investigate class characteristics combined cross section java applications 
class characteristics include constructs abstraction encapsulation genericity inheritance polymorphism exception handling 
refer combination characteristics groups classes fields attributes methods routines 
data generated study relevant validation maintenance phases software process 
clarke show applying taxonomy oo classes useful identifying changes oo software cmg combining implementation testing techniques software validation cm 
study involves analysis classes different java applications 
java applications chosen domains including compiler tools application frameworks code analyzers 
applications analyzed taxtoolj taxonomy tool object oriented language java 
addition study identifies total number possible groups generated taxonomy class written java 
class written java place finite set groups 
enumerate class groups java earlier versions java data generated taxtoolj created models predict number different groups large java applications 
prediction models studies investigate properties software class complexity coupling cohesion fault proneness testability 
contributions follows 
enumeration possible groups classes fields methods written java java 
study analyze java classes cross section applications identify class field method groups application 

empirical investigation analysis classes fields methods associated java applications produce prediction models number groups currently analyzed existing tools 
section provide background information taxonomy oo classes 
section process enumerate java class groups 
section provide overview taxtoolj 
section provides description empirical study performed java applications 
section presents prediction models 
section describes related give concluding remarks section 
background section describe terminology provide overview taxonomy oo classes java 
provide detailed example showing artifact generated java class cataloged taxonomy 
class characteristics foundational unit oo programs class defines create objects instances class agh 
meyer mey provides comprehensive description features class describes features support oo programming 
closer inspection structure class oo programming languages java agh str mey easy appreciate descriptors type nomenclature attributes routines families public transient final na type final volatile native primitive type nested new generic inner recursive new user defined type interface concurrent recursive implements polymorphic redefined library serializable private concurrent generic protected synchronized type generics concurrent public exception constant exception parameterized type inheritance free static polymorphic parent non virtual parameterized type external child virtual internal child deferred combination private protected public static table 
descriptors type families cataloged entry java class 
add descriptors peculiar java language shown parentheses 
similarities class structure language uniqueness features 
focus mainly structure classes java 
java members class referred fields methods 
refer members class features mey fields attributes methods routines consistent describing taxonomy oo classes cm cmg 
collectively refer properties attributes routines class dependencies class classes class characteristics 
clarke cm define class characteristics class properties features dependencies types built user defined implementation 
properties features describe criteria types accessibility shared class features polymorphism dynamic binding deferred features exception handling concurrency represented attributes routines dependencies types realized declarations definitions features andc role inheritance hierarchy 
additional information regarding class characteristics manifested structure java class described agh 
cataloging java class clarke cla cm cmg propose taxonomy oo classes succinctly characteristics class 
taxonomy oo classes classify class group dependencies types built user defined program 
dependencies types realized declarations definitions features role inheritance hierarchy cmg 
artifact generated class cataloged taxonomy cataloged entry 
properties taxonomy include domain coverage provides means cataloging classes written virtually oo language mutual exclusion partitions set oo classes mutually exclusive groups taxa unambiguous strings represent groups classes attributes routines specified regular grammar cla 
cataloged entry cataloged entry cm defined tuple consisting 
class name fully qualified name class contents 
java import java public class extends thread final static int number objs private int private int delay private static int private static arraylist integer store public int delay store add public void run try true print new print print sleep delay store remove store return catch return public static void main string args store new arraylist integer int number objs new start public class public void print system println active threads 
int store size system println store get class nomenclature public inner concurrent external child families feature properties attributes private constant family number objs private family delay private static family private static family store routines non virtual public family int exception virtual public family run concurrent non virtual public static families main string feature classification cataloged 
java code classes 
cataloged entry class 

nomenclature component group taxon containing class 
attributes component list entries representing subgroups attributes 
routines component list entries representing routines 
feature classification component list summarizing inherited features class 
component entry consists parts modifier describing properties class features attributes routines type families types associated class 
modifier consists list core add descriptors representing class characteristics 
core descriptors represent class characteristics oo languages add descriptors represent characteristics peculiar language 
table lists descriptors type families component entries cataloged entry 
columns table show descriptors modifier part component entries nomenclature attributes routines components respectively 
column shows type families nomenclature attributes routines component entries 
descriptors columns represent add ons shown parentheses core descriptors 
names descriptors chosen symbolize characteristic represent 
example add descriptor final table row indicates definition class complete subclasses allowed 
core descriptor generic row indicates class uses unknown types declaration 
type family represents primitive type int double 
detailed explanation descriptors type families provided cmg cbc 
example cataloged entry section give non trivial example cataloged entry generated applying taxonomy oo classes java class 
shows java source code classes shows cataloged entry class 
example cbc 
summary example sequel 
nomenclature class shown public inner concurrent external child families 
add descriptors public inner reflecting fact declared public declares inner class 
core descriptors concurrent external child state instantiates concurrent objects derived class descendants respectively 
type families indicate declares instance variables routine locals local variables parameters primitive types user defined objects standard library objects instances parameterized standard class libraries 
attributes component entries represent attributes class 
example attribute store line declared private static instance parameterized class library arraylist 
component entry attribute store shown entry attributes component private static family 
represents type family parametrized class library library type parameter arraylist integer 
routine component entries described similar way attribute component entries 
example entry concurrent non virtual public static families represents routine main 
shown lines 
descriptor concurrent represents concurrent objects instantiated routine type family objects instantiated anonymous 
type family represents args parameter type string class library 
descriptors non virtual public static state main 
statically bound accessible outside class static 
type family represents local variable java class groups properties taxonomy separate elements groups mutually exclusive represented unambiguous manner provide complete domain coverage wha 
section describe taxonomy oo classes satisfies property 
addition compute total number groups possible classes written java version clarke cla shows taxonomy oo classes satisfies properties language 
similar approach java language 
tree representation descriptors type families figures show taxonomy catalog java classes mutually exclusive groups taxa 
trees figures structured ensure path root tree leaf 
leaf tree prepended copy tree 
concatenating labels nodes paths combined trees figures generate superset groups formed taxonomy 
group maps nomenclature component entry 
example group generated trees figures public final nested inner implements serializable non generic sequential external child family descriptors public inner non generic sequential default descriptors reducing nomenclature public public final final final final 
nested nested 
inner inner 
interface implements interface serializable implements serializable 
tree showing add descriptors nomenclature component cataloged entry 
default descriptors shown italics 
non generic generic sequential concurrent sequential concurrent concrete 
inheritance free parent external child internal child 
family na family families 
families families 
tree showing core descriptors type families nomenclature component cataloged entry 
default descriptor shown italics 
component entry final nested implements serializable external child family entry represents group classes accessible package extended contain static class definition implement interface instantiate objects serialized unknown types instantiate object create threads declared leaf class inheritance hierarchy declares primitive types 
add descriptors component entries enclosed parentheses final 
reader realize class possible java final class 
number java class groups compute total number groups classes written java language approach similar cbc 
noted paths combined trees figures legal groups nomenclature component entries 
addition example mention sentence previous paragraph group contains descriptor non generic type families 
computing total number groups necessary partition tree structure remove inconsistencies 
notation represent trees computing total number groups java versions 
tt combined tree representing add core descriptors type families shown figures 
ta tree add descriptors tcf tree core descriptors type families tcf divided sub trees remove inconsistencies add core descriptors type families 

ng tree nodes final non generic concrete 
non generic implies type families contain unknown types type families 

ng tree nodes final non generic concrete 
represents classes unknown types concrete cataloged parent internal child 
recall final classes descendant classes 

tree nodes final generic concrete 
generic implies tree contains unknown types 

tree nodes final generic concrete 
contains unknown types branches parent internal child pruned contains descriptor concrete 

ng tree nodes final non generic 
similar classes 

ng similar classes 

similar classes 

similar classes 
separate classes concrete classes interface concrete 
consider special cases remove extra leaves final tree representing groups containing interface concurrent inheritance free combination descriptors groups descriptors serializable inheritance free implements 
groups infeasible reasons concurrent classes inherit library class thread implement interface runnable class serializable implements interface serializable inherits class serializable 
note consider serializable making fields serializable 
table shows total number leaves sub tree ng computed 
column table shows identifier assigned groups siblings level sub tree 
column contains descriptors type families assigned siblings sub tree level 
columns show number siblings java respectively 
data row table represents level sub tree ng group siblings assigned identifier siblings labeled values set core descriptors sequential concurrent siblings level java row shows data third level tree described having identifier 
level possible groups type families resulting combinations java row labeled shows possible groups parameterized types generated resulting combinations java number combinations java empty set java support parameterized types 
note represents power set set row table shows number leaves sub tree ng computed formula leaves groups class characteristics java tree ng sequential concurrent inheritance free parent external child internal child leaves ng table 
total number leaves generated non final classes core descriptors non generic concrete java versions cn represent siblings core descriptor nodes tree fn represent groups siblings type family nodes tree 
leaves 
number siblings group represented cn represent siblings core descriptor nodes tree fn represent groups siblings type family nodes tree 
sub tree ng generates leaves java java number leaves sub tree ng computed similar approach 
difference siblings inheritance free external child final classes descendants 
sub tree ng generates leaves java java table shows number leaves computed sub tree structure table similar table 
sub tree table contain unknown types families combinations types families contain 
rows table table 
compute number types families generic types require groups type families types unknown types row non parametrized types unknown types row parametrized types unknown types row parametrized types unknown types row 
compute leaves tree shown table follows leaves sub tree generates leaves java java number leaves sub tree java generics java number leaves sub tree computed similar approach 
difference siblings external child final classes descendants 
sub tree generates leaves java java table shows total number leaves tree consisting ta add descriptors tcf core descriptors type families concrete classes computed 
structure table similar tables 
major difference identifiers ln represent leaves sub trees rows 
identifier represents sub tree contains extraneous leaves combined tree 
siblings leaves sub tree descriptors serializable inheritance free interface implements class serializable implements interface serializable inherits class serializable 
compute leaves tree shown table follows leaves groups class characteristics java tree sequential concurrent inheritance free parent external child internal child leaves table 
total number leaves generated final classes core descriptors non generic concrete java versions cn represent siblings core descriptor nodes tree fn represent groups siblings type family node tree 
leaves 
represent siblings add descriptor nodes tree ln represent leaves generated sub trees en represent extraneous leaves remove combined tree 
total number leaves tree generated ta tcf java java table similar table combined tree represents classes java language allow final classes values rows labeled additional sub tree removed represents classes concurrent inheritance free interfaces 
note class considered concurrent inherits library class thread implement interface runnable 
total number leaves tree generated ta tcf table java java numbers computed equation similar equation 
compute total number java classes groups summing totals tables resulting java java table shows summary results number attribute groups routine groups java java preliminary identified attribute groups java java similarly number routine groups java java taxtoolj taxtoolj taxonomy tool oo language java tool reverse engineers java classes producing cataloged entries 
taxtoolj prototype tool created clarke cmg language 
taxtoolj catalogs class characteristics java classes 
accomplished reflection facility provided java inspection syntax tree ast groups class characteristics java trees ta tcf concrete classes public public nested nested inner inner implements interface implements serializable serializable leaves ng leaves ng leaves leaves serializable inheritance free interface implements total leaves total leaves table 
total number leaves class groups generated trees ta tcf concrete classes 
represent siblings add descriptor nodes tree ln represent leaves generated sub trees 
extraneous leaves removed tree generated combined trees figures concrete classes 
features class 
shows packages class diagram taxtoolj 
major packages taxtoolj api interface allows access details class tax stores cataloged entries tax catalogs classes java application api api provides interface allows class access information required generate cataloged entries application reverse engineered 
information includes directory structure packages characteristics classes methods fields 
api obtains information combination reflection facility java querying syntax tree ast class generated class java development tooling jdt package eclipse framework ecl 
reflection provides means determining properties events methods members class 
reflection provide information details implementation method 
details include local variable declarations form exception handling mechanism method 
information may affect descriptors type families routine component entries cataloged entry possibly nomenclature class 
example method class creates instance class part implementation routine descriptors type families may captured component entry routine 
routine descriptors include concurrent synchronized exception exception polymorphic 
type families may 
groups class characteristics java trees ta tcf classes public public nested nested inner inner interface implements interface implements serializable serializable leaves ng leaves ng leaves leaves serializable inheritance free interface implements concurrent inheritance free interfaces total leaves total leaves table 
total number leaves class groups generated trees ta tcf classes 
represent siblings add descriptor nodes tree ln represent leaves generated sub trees 
extraneous leaves removed tree generated combined trees figures classes 
tax tax package uses api access information catalog class java application recursively starting classes global package application followed class definitions packages nested packages 
tax queries api information generate entries nomenclature attributes routines feature classification components 
entries attributes routines components generated modifier type family parts nomenclature component entry feature classification updated 
cataloging process tax invokes instances tax store different component entries signatures attributes routines 
taxtoolj provides user options cataloging classes java application 
options reflection characteristics realized tax package 
reflection option ignores implementation methods cataloging process 
result eclipse jdt plugin invoked ast generated 
results section show significant running time trade respect ast built 
entities 
groups java classes attributes routines table 
number groups classes attributes routines java empirical study org taxtoolj subsystem tax builds ast java class plug org eclipse jdt 
core dom accesses provides reflection library java lang 
invokes invokes subsystem queries subsystem tax api 
class diagram taxtoolj 
section describe study performed catalog classes java applications taxonomy oo classes cbc 
classes cataloged taxtoolj reflection capability 
classes java applications contained total attributes routines 
applications written java applications applications 
due large volume data generated performing experiments infeasible include refer interested reader view result bcc 
main goals study address questions large java applications written java earlier java earlier rq number class groups predicted number classes 
rq number attribute groups predicted number attributes 
rq number routine groups predicted number routines 
results section forms basis answering questions section 
overview applications study involved analysis java applications consisting just classes attributes routines 
applications chosen variety domains ranging compiler tools application servers 
selected applications written java earlier java app 
application domain version sloc 
classes 
package name java sablecc parser generator byte code engineering compiler front pmd dpc source code analyzer colt hos high performance computing libraries spring framework hj java ee application framework fp mind mapping software soot soo java optimization framework crg bittorrent client twister fr oriented business process management common proper jak repository reusable java components net integrated development environment ide eclipse ecl integrated development environment ide java taxtoolj bcc reverse engineering tool javelin bea package bea web logic application server atk reverse engineering tool aspectj aspect oriented extension java org bea package bea web logic application server integrated business environment application jdk sun java development kit weblogic bea package bea web logic application server com bea package bea web logic application server table 
summary java applications study 
indicates package taken application 
earlier 
table shows summary applications study 
table consists major sections columns contains entries java applications study 
column table contains number allocate java application tables section containing data study 
column contains names java applications relevant citations column short description application column identifies version application study 
column identifies number single lines code sloc generated dependency finder tes column number classes generated windows explorer 
column represents packages larger applications analyzed 
rows table separated groups version java develop application 
rows represent data applications written java earlier rows applications written java earlier 
example application number sablecc written java earlier 
sablecc parser generator version analyzed consists single lines code classes 
application weblogic bea package bea web logic server written java earlier 
package weblogic version web logic server contains just single lines code classes 
column sloc application com bea represents fact dependency finder unable identify number single lines code due memory error jvm 
experimental setup general approach setting experiments consisted steps 
step involved obtaining jar files applications 
required downloading jar file application web page installing entire application running script extract jar files 
example obtain jar file sablecc compressed file downloaded extracted 
obtaining packages bea web logic server required complete installation application 
second step setup involved running script copy jar files root test directory extract jar files appropriate sub directories 
note classes entire application analyzed directory containing package interest copied test directory ensuring directory structure preserved 
third step setup process involved creation repository store libraries required application table 
achieved running taxtoolj applications continually updating contents repository related classes loaded jvm 
experiments performed xeon ghz pc ram 
settings jvm xx minimum heap size gb maximum heap size gb maximum permanent generation size garbage collector 
settings required due large number classes loaded analysis 
results section produced reflection option taxtoolj 
results table shows number entities cataloged taxtoolj 
entities include classes total number classes processed column attrs total number attributes processed column new attrs attributes declared class inherited superclass column total number routines processed column non rec routines number routines class new overridden non recursive 
example consider application eclipse ide ecl taxtoolj cataloged classes attributes inherited routines non recursive routines newly declared implementation 
note values column table number classes column table 
reason taxtoolj load class files class cataloged exception thrown cataloged entry class added list completed cataloged entries 
table shows number groups generated classes attributes routines applications study 
example consider application eclipse ide ecl classes cataloged taxtoolj mapped groups attributes mapped groups routines mapped groups 
addition percentage groups total number possible groups shown table 
example possible class groups see table java earlier classes eclipse ide mapped total number class groups 
similarly attributes mapped total attribute groups routines mapped total number possible routines groups 
section perform analysis data section determine research questions rq rq rq answered 
characteristics data shown tables worth mentioning 
main characteristic surprisingly small number groups java applications cataloged taxtoolj 
average number groups applications written java earlier classes routines 
similarly groups applications written java earlier classes attributes routines 
percentages groups applications written java earlier order magnitude smaller applications written java earlier 
snapshot large volume data collected java applications table cataloged reflection capability taxtoolj 
data includes summaries class groups application similar nomenclature entry attribute groups similar attributes entries cataloged entry shown routine entries 
number entities cataloged classes attrs new non rec attrs java java table 
summary entities cataloged study 
applications completely cataloged due size application 
application 
addition listing containing cataloged entry class applications 
size file containing listing cataloged entries jdk mb bcc 
validity data empirical study research literature cataloged classes java applications taxonomy oo classes cbc difficult completely validate results 
ran applications study oo metrics tools get data individual class characteristics 
individual class characteristics number classes number attributes number routines 
eliminated oo metrics tool initially due fact number class files identified windows explorer differed significantly number classes identified metrics tools 
dependency finder tes identified classes applications study 
number classes attributes routines identified taxtoolj similar number identified dependency finder 
limitations study including reflection component taxtoolj preparation applications study finding class libraries required various applications limitations jvm 
reflection component taxtoolj eliminates information generated implementation methods cataloging process 
information 
number groups identified classes attrs java java table 
number groups identified classes attributes routines artifact study 
contains local variable declarations exception handling constructs 
preparation applications observed library packages reused 
observation forced cataloged classes application distribution carried name application application table 
difficulty encountered finding class libraries applications study 
resulted taxtoolj cataloging classes applications 
example taxtoolj unable catalog classes spring framework application hj package org application bea web logic bea 
problems encountered jvm attempted cataloged large applications 
main problem memory error 
bea web logic bea contained classes taxtoolj cataloged classes generating memory error 
prediction models section address research questions stated section 
models allow developer predict number groups classes attributes routines large java applications 
log linear regression models die predict number groups large java applications 
observed prediction models statistically significant 
show scatter plots groups classes attributes routines versus number classes attributes routines respectively applications written java earlier 
show log transform plots showing linear 
plots data captured java earlier applications 
similar approach create models applications written java earlier java earlier 
prediction class groups applications java earlier plot number class groups versus number classes java applications written java earlier obtain scatter plot shown 
points non linear 
scatter plot log transformed data linear see 
considered log transformed data fit model 
fitted log linear regression model log log regression coefficient statistically significant value implies total variation explained regressor classes 
number groups predicted number classes 
number classes predict number groups prediction intervals 
example model shown equation application containing classes predicted generate class groups confidence limits 
applications java earlier fitted log linear regression model applications written java earlier log log regression coefficient statistically significant value implies total variation explained regressor classes 
model shown equation application containing classes predicted generate class groups confidence limits 
note variation confidence interval greater applications written java earlier 
prediction attribute groups applications java earlier shows scatter plot number attribute groups versus number attributes java applications written java earlier 
scatter plot log transform shown 
fitted log linear regression model log log regression coefficient statistically significant value high create prediction model 
number attribute groups predicted number attributes application 
example model shown equation application containing attributes predicted generate attribute groups confidence limits 
applications java earlier fitted log linear regression model applications written java earlier log log regression coefficient statistically significant value implies total variation explained regressor attributes 
model shown equation application containing attributes predicted generate attribute groups confidence limits 
number class groups log class groups number classes log classes 
scatter plots class groups classes java earlier applications 
plot class groups versus classes 
plot log class groups versus log classes 
prediction routine groups applications java earlier shows scatter plot number routine groups versus number routines java applications written java earlier 
scatter plot log transform shown 
fitted log linear regression model log log regression coefficient statistically significant value fit create prediction model 
model shown equation application containing routines predicted generate routine groups confidence limits 
applications java earlier fitted log linear regression model applications written java earlier log log regression coefficient statistically significant value number attribute groups log attribute groups number attributes log attributes 
scatter plots attribute groups attributes java earlier applications 
plot attribute groups versus attributes 
plot log attribute groups versus log attributes 
fit 
model shown equation application containing routines predicted generate routine groups confidence limits 
discussion splus software fitted models section 
models correspond classes attributes routines java earlier java earlier 
observed regressors classes attributes routines statistically significant level significance values predicting corresponding groups java earlier java earlier 
values see java earlier java earlier fitted class groups attribute groups equivalently 
noted routine groups better fit java earlier java earlier 
conducting experiments larger sample size improved accuracy prediction model 
please note results empirical study analysis performed shown 
additional data analysis obtained authors request 
number routine groups log routine groups number routines log routines 
scatter plots routine groups routines java earlier applications 
plot routine groups versus routines 
plot log routine groups versus log routines 
related class abstraction techniques aid software development process oo systems 
feel closely related object oriented design metrics examine related area 
numerous metrics estimate predict various properties oo systems including class complexity coupling cohesion fault proneness system size 
pv survey existing product metrics proposed measuring coverage entities attributes development stages oo system 
fn describe study different oo metrics extracted literature proposes new approach define models fault proneness detection prediction 
studies consider ways class characteristics combined fail address impact combinations resultant prediction analysis models 
taxonomy oo classes perform improve similar empirical studies 
dgp empirical study industrial telecommunication application different versions system analyzed 
version consists lines code written 
analysis focuses set oo metrics defined chidamber kemerer ck 
include weighted methods class wmc depth inheritance tree dit number children noc response class rpc lack cohesion methods lcom coupling objects cbo 
impact single metric fault proneness software modules evaluated multivariate regression analysis investigate combined impact pairs metrics 
taxonomy utilized identify impact specific class groups fault proneness extended show combined impact similar approach dgp 
deursen identify significant correlation class level metrics test level metrics discuss various oo metrics contribute software testability 
results conducting experiments large java systems docgen apache ant define evaluate set metrics assess testability classes java system 
taxtoolj catalogs class characteristics java classes analyze similar java systems establish correlations java class characteristics testability 
clarke cmg cla developed taxonomy oo classes provides mechanism catalog classes written virtually oo language 
taxonomy provides core set descriptors facility create new descriptors represent feature peculiar specific oo language 
clarke cmg showed taxonomy extended defining set add descriptors 
taxonomy motivated need aid testers identifying testing techniques suitable test different features class aid identification changes class characteristics maintenance 
previous taxonomy oo classes applied small medium scale software applications written 
study uses taxonomy large systems written java 
cbc extended core taxonomy clarke include feature peculiar java 
addition estimate number groups classes java java provided sound rigorous proof 
line basic design taxtoolj 
significantly extends cbc 
concluding remarks described study uses taxonomy oo classes catalog classes taken form cross section java applications written java java data collected classes attributes routines cataloged create set prediction models 
models developers identify class characteristics abstraction encapsulation genericity inheritance polymorphism exception handling expected large java applications 
surprisingly data showed possible java class groups writing java applications groups 
similarly possible java class groups groups 
groups attributes routines showed similar trend 
plan analyze data generated form experiments study analyzed result small fraction data collected 
plan taxonomy java classes investigate assist developer developing model class complexity coupling cohesion fault proneness 
confident studies conjunction existing studies improve implementation testing maintenance java applications 
august 
www org index html mar 
agh arnold gosling holmes 
java programming language 
addison wesley reading massachusetts fourth edition 
agh arnold gosling holmes 
java programming language 
addison wesley reading massachusetts fourth edition 
atk mike atkinson 
may 
sourceforge net march 
bcc david peter clarke 
taxtoolj march 
www cis fiu 
edu projects 
bea bea systems weblogic server dec 
www bea com framework jsp cnt index 
htm fp content products weblogic server march 
bin binder 
testing object oriented systems models patterns tools 
addison wesley reading massachusetts 
boris 
oct 
sourceforge net projects mar 
arie van deursen 
predicting class testability object oriented metrics 
proceedings scam pages 
ieee sept 
cbc david peter clarke 
class abstraction technique support analysis java programs testing 
proceedings rd acis sera conference pages 
ieee 
ck chidamber kemerer 
metrics suite object oriented design 
ieee tse june 
cla peter clarke 
taxonomy classes support integration testing mapping implementation testing techniques classes 
phd thesis clemson university august 
cm clarke 
taxonomy oo classes support mapping testing techniques class 
journal object technology july august 
cmg clarke gibson 
taxonomy tool identify changes oo software 
proceedings th european pages 
ieee march 
crg olivier alon paul gardner 
jan 
azureus sourceforge 
net mar 
dgp giovanni luigi mauro 
empirical evaluation oo metrics 
technical report universit degli studi di milano april 
die terry 
applied regression analysis business economics 
duxbury press pacific grove ca rd edition 
dpc david dixon tom copeland 
pmd jan 
pmd sourceforge net mar 
markus dahm jason van haase 
byte code engineering library april 
jakarta apache org feb 
ecl eclipse foundation 
eclipse 
www eclipse org june 
fn 
study fault proneness detection object oriented systems 
proceedings th european pages 
ieee march 
fp christian dimitri 
nov 
sourceforge net wiki index php main page mar 
fr frederic couto 
twister mar 
www org confluence display twister home mar 
gc cheng 
framework classifying comparing software reverse engineering design recovery tools 
proceedings th working conference reverse engineering pages 
ieee october 
gosling joy steele bracha 
java language specification 
addison wesley reading massachusetts third edition 
etienne gagnon ben kevin 
sablecc dec 
sablecc org mar 
hcn harrison 
overview object oriented design metrics 
th international workshop software technology engineering practice pages 
ieee july 
hj juergen rod johnson 
spring framework nov 
www org mar 
hos wolfgang hoschek 
colt collections tuned nov 
hoschek home cern ch hoschek colt mar 
jak jakarta commons development team 
common proper 
jakarta apache org commons mar 
mey bertrand meyer 
object oriented software construction 
prentice hall ptr 
net development team 
jan 
www org mar 
pv sandeep vijay 
product metrics object oriented systems 
acm comput 
surv 
rumbaugh jacobson booch 
unified modeling language manual 
addison wesley longman 
soo soot contributors 
soot aug 
www sable mcgill ca soot mar 
str stroustrup 
programming language special rd edition 
addison wesley 
sun sun microsystems core java se february 
java sun com se index 
jsp 
tes jean 
dependency finder 
sourceforge net mar 
aspectj team 
aspectj dec 
www eclipse org aspectj mar 
wha whatis 
whatis com target search tm whatis com may 

