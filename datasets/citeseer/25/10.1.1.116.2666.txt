robust identification fuzzy duplicates surajit chaudhuri venkatesh ganti rajeev motwani microsoft research stanford university microsoft com rajeev cs stanford edu detecting eliminating fuzzy duplicates critical data cleaning task required applications 
fuzzy duplicates multiple seemingly distinct tuples represent real world entity 
propose novel criteria enable characterization fuzzy duplicates accurately possible existing techniques 
criteria propose novel framework fuzzy duplicate elimination problem 
show solutions new framework result better accuracy earlier approaches 
efficient algorithm solving instantiations framework 
evaluate real datasets demonstrate accuracy scalability algorithm 

detecting eliminating duplicated data important problem broader area data cleaning data quality 
example lisa purchases products twice entered different customers lisa simpson seattle wa usa lisa seattle wa united states 
times logical real world entity multiple representations relation due data entry errors varying conventions variety reasons 
duplicated information cause significant problems users data 
example lead increased direct mailing costs customers lisa may sent multiple catalogs 
duplicates cause incorrect results analytic queries say number customers seattle lead erroneous data mining models 
significant amount time money spent task detecting eliminating duplicates 
refer problem detecting eliminating multiple distinct records representing real world entity phenomenon fuzzy duplicate elimination problem 
problem similar merge purge record linkage problems 
note problem generalizes standard duplicate elimination problem answering select distinct queries relational database systems consider tuples duplicates match exactly attributes 
duplicate elimination mean fuzzy duplicate elimination 
previous solutions discussed section duplicate elimination classified supervised unsupervised approaches 
supervised approaches learn rules characterizing pairs duplicates training data consisting known duplicates :10.1.1.14.423:10.1.1.12.4018:10.1.1.1.5288
approaches limited dependence comprehensive training data exhibit variety distribution errors observed practice manual guidance 
real data integration scenarios possible obtain training data interactive user guidance 
focus unsupervised approaches 
unsupervised approaches duplicate elimination typically rely distance functions measure similarity tuples 
previous approaches adopted clustering algorithms partition relation groups duplicates 
particular single linkage clustering algorithm predominant choice automatically determines number clusters number groups duplicates clustering algorithms require number clusters specified 
single linkage clustering approaches require parameter absolute global threshold decide tuples duplicates 
distance functions mathematical approximations qualitative notion duplication 
relation consisting clean tuples tuples inherently close reasonable distance function duplicates 
similarly distance duplicate tuples may higher distinct pairs tuples 
example table duplicate tuples farther edit distance distinct tuples 
approaches global distance thresholds lead poor recall fraction pairs true duplicate tuples algorithm recognizes duplicates precision fraction tuple pairs algorithm returns truly duplicates 
crucial characteristic differentiating duplicate elimination problem standard clustering formulations important consider local structural properties identifying groups duplicates 
identify new criteria compact set cs sparse neighborhood sn criteria explicitly capture local structural properties data characterize groups duplicate tuples 
criteria capture properties duplicates group closer tuples local neighborhood empty sparse 
informally local neighborhood group tuples immediate vicinity defined terms surrounding region size dependent local distribution tuples viz sphere radius twice say nearest neighbor distance tuple illustrated 
localized structural properties differentiate duplicate elimination problem standard clustering formulations 
tuples satisfy criteria may grouped duplicates relatively far tuples closer satisfy criteria may grouped 
note cs sn criteria orthogonal choice specific distance functions domain knowledge abbreviations 
approach orthogonal choices 
formalize duplicate elimination problem effectively exploit cs sn criteria show solutions formulations framework desirable characteristics varying scale distance function change solution range partitions duplicate elimination problem produce large 
analysis similar spirit kleinberg development axiomatic framework clustering 
scalable efficient algorithm formulation duplicate elimination 
algorithm exploits nearest neighbor indexes distance functions database server achieve scalability efficiency 
extensive experimental study real datasets evaluate cs sn criteria show solutions duplicate elimination problems framework yield better precision recall tradeoffs existing single linkage approaches global thresholds 
remainder organized follows 
section formally define cs sn criteria 
section formalize duplicate elimination framework 
section describe efficient algorithm solving instantiations framework 
section discuss thorough experimental evaluation 
section discuss related conclude section 
criteria characterizing duplicates section define cs sn criteria useful characterizing duplicates 
intuition criteria stems observations duplicate tuples closer ii local neighborhood duplicate tuples sparse 
order illustrate criteria better characterizing duplicate tuples consider table shows example drawn real music database 
tuples tagged asterisk duplicate tuples remaining tuples unique 
observe pairs unique tuples closer standard distance functions edit distance cosine metric pairs duplicate tuples 
traditional threshold approach duplicate elimination correctly distinguish set duplicates simultaneously collapsing unique tuples 
id doors la woman doors la woman beatles little help friends beatles little help friend twain im love holding love th ears eyes th ears eyes part ii th ears eyes part iii th ears eyes part iv ready ac dc ready bob dylan ready ready table examples media database 
intuition compact set cs criterion duplicate tuples closer distinct tuples 
duplicate tuples usually mutual nearest neighbors 
example table tuples duplicates tagged asterisks 
tuple nearest neighbor tuple vice versa 
contrast tuple may nearest neighbor tuple tuple tuple 
nearest neighbor relation symmetric 
reflecting intuition criterion set duplicates compact set mutual nearest neighbors note set may consist tuples 
contrast global threshold approaches single linkage clustering assume transitivity duplicate duplicate identify connected components threshold graph 
threshold graph tuple relation corresponds node nodes connected edge distance corresponding tuples threshold 
global threshold approaches single linkage clustering yield large number false positives 
observe appropriate threshold maximum pair wise distance group compact set forms clique 
key requirement threshold needs varied groups depending local neighborhood variability crucial accurately characterizing duplicates 
earlier approaches single linkage clustering limited allow variability 
cs criterion sufficient characterize groups duplicates pairs tuples clean relation consisting unique tuples may mutual nearest neighbors compact 
extreme case set tuples relation forms compact set 
require sparse neighborhood sn property better characterize groups duplicates 
observation sn criterion local neighborhood tuple duplicates sparse 
alternatively tuples lot tuples close vicinity usually duplicates tuples 
example table unique tuples occur larger example groups tuples duplicates 
illustrates idea sparse nn nn growth spheres neighborhood region sphere radius nn nn nearest neighbor distance tuple number tuples larger sphere tuple small say local neighborhood sparse 
extend notion group tuples say joint local neighborhood sparse aggregate individual growth rates tuples small say threshold instance aggregation function max requires neighborhood sizes tuples group observe neighborhood size tuple property domain specific relation instance tuples belong 
neighborhood sizes tuple relation directly computable approximation ideal measure 
formalize cs sn criteria 
definitions relation symmetric distance function tuples clarity assume tuples relation unique distances distinct tuples non zero :10.1.1.19.9539
cs criterion say set tuples compact set iff tuple distance tuple distance observe distance function behaved tuple closer fuzzy duplicates distinct tuples group duplicate tuples relation compact set 
introduce additional terminology define sparse neighborhood criterion 
tuple nn denote distance nearest neighbor 
neighborhood defined sphere radius nn fix functions general linear functions may define neighborhood 
neighborhood growth ng number tuples neighborhood formally ng nn sn criterion agg aggregation function constant 
say set tuples sn agg group ii aggregated value neighborhood tuples agg ng consider max average aggregation functions 

duplicate elimination problem propose initial formulation cs sn criteria show lead unintuitive solutions 
add standard constraints sizes groups duplicates small maximum distance tuples group bounded 
show resulting duplicate elimination problem yields unique solution discuss interesting properties 
duplicate elimination de problem initial formulation relation distance function aggregation function agg positive real number partition minimum number groups gm gi compact set ii gi sn agg group 
illustrate formulation may result unintuitive results consider applying de formulation stated instance positive integers 
suppose distance function absolute difference values aggregation function max function sn threshold set 
tuples put group 
ideally may want groups 
replicate phenomenon instances arbitrarily large numbers tuples groups 
order counter behavior rely standard intuitive notions groups duplicates small distances tuples group small 
types specifications possible framework 
size specification size specification captures informal notion groups duplicates small size 
diameter specification diameter group maximum pair wise distance tuples group 
diameter specification captures intuitive notion distance pairs tuples group duplicates bounded 
specification similar spirit traditional threshold constraint group duplicates satisfies cs sn constraints 
de problem relation distance function aggregation function agg positive real number positive integer positive real number partition minimum number groups gm gi compact set ii gi sn agg group iii gi diameter gi 
rest assume common parameters agg implicit des denote instantiation size group equal ded denote instantiation diameter group equal 
de generically denote formulations 
note possible size diameter specifications 

properties de formulation section show de problems desirable properties 
properties characterize behavior domain independent distance duplicate elimination function intuitive transformations distances tuples 
similar properties proposed domain independent clustering functions kleinberg 
rest section assume distance function aggregation function agg sn threshold fixed 
constrained space skip proof sketches lemmas 
uniqueness solutions des ded unique 
des ded viewed functions partition relation lemma set parameters des ded problems unique solutions 
scale invariance intuitively scale distance function impact local structural properties tuples duplicate elimination may change 
formally partitioning function scale invariant distance function 
lemma des scale invariant 
split merge consistency intuitively shrinking distances tuples group duplicates expanding distances tuples groups may change partition resulting duplicate elimination function limited ways 
distance transformation tuple group duplicates simultaneously closer tuples different group duplicates farther tuples original group 
group duplicates new partitioning transformed distances union proper subsets groups original partition 
partition say distance function conscious transformation pair tuples group pair different groups 
partitioning function split merge consistent distance function conscious transformation group subset group equal union groups lemma duplicate elimination functions des ded split merge consistent 
partition obtained solving duplicate elimination problem suppose construct new relation duplicate tuples 
similar say small distance apart 
new distances correspond transformation original distance function duplicate elimination functions split merge consistent re invoking result partition consists union groups subsets groups constrained richness scenarios duplicate elimination applied small fraction tuples relation duplicates sizes groups duplicates tend small 
range duplication functions include partitions large number small groups 
contrast original richness property requires possible partitions relation range 
modification constrains range possible partitions differentiates duplicate elimination clustering problem 
positive constants 
partitioning function rich range includes partitions relation having groups maximum size group 
show range des rich variety parameter settings 
lemma des rich 

duplicate elimination algorithm section describe scalable efficient algorithm solving de problem 
effectively exploit cut size diameter specifications design efficient algorithm 
main challenges efficient identification mutual nearest neighbors ii efficient partitioning input relation minimum number compact sn groups satisfy cut specification 
insight determine tuple pairs nearest neighbor sets equal extend pair wise equality groups tuples 
take phase approach determine nearest neighbors best neighbors neighbors certain radius depending cut specification tuple relation partition relation compact sn sets 
dividing phases exploit nearest neighbor indexes phase query processing ability database backend second phase algorithm efficient scalable 
shows architecture system implemented client microsoft 
phase nn list computation nn microsoft phase partitioning phase nearest neighbor computation phase assume availability index efficiently answering query tuple fetch nearest neighbors 
apply nested loop join methods phase 
architecture designing exact nearest neighbor indexes distance similarity functions typically duplicate elimination hard approximate probabilistic indexes developed standard distance functions cosine metric edit distance fuzzy match similarity 
purpose treat probabilistic indexes exact nearest neighbor indexes 
experimental results section illustrate assumption negatively impact actual results algorithm 
second partitioning phase partition relation minimum number valid groups duplicates 
perform processing required phase standard sql queries 
process join methods developed specific distance functions edit distance may employed diameter specification gij 
exploit efficient query processing abilities database systems ii avoid moving large amounts data client server 

nearest neighbor computation phase phase determine tuple relation nearest neighbors neighborhood growth 
output phase relation nn reln id nn list ng id identifier tuple neighbor growth ng 
des problem nn list list tuple identifiers nearest neighbors tuple ded problem nn list list tuple identifiers tuples distance tuple 
index fetching nearest neighbors top certain distance computing neighborhood growth straightforward procedure scan input relation tuple lookup index write tuple nn list ng output 
index structures typically fetching nearest neighbors disk 
example nearest neighbor indexes edit distance fuzzy match similarity functions structure similar inverted indexes ir usually large 
consecutive tuples looked indexes close lookup procedure access portion index second lookup benefits due 
significantly improves buffer hit ratio running time 
describe lookup order implemented efficiently 

index lookup order consider example tuples table 
suppose order lookup nearest neighbors tuples order fetch nearest neighbors tuple doors la woman indexing procedure access portion index process cache database buffer 
similar lookup nearest neighbors tuple ready access completely different portion index tuple far tuple 
alternatively lookup nearest neighbors tuple doors la woman processing tuple portion index 
consequently exploit benefits database buffer 
lookup order properties 
tuples immediately preceding tuple order close 
second procedure ordering input tuples efficient 
instance lookup order requires entire relation grouped expensive clustering algorithm lost benefit ordering input ordering process expensive 
adopt breadth bf order satisfies requirements 
order corresponds breadth traversal tree constructed follows 
select input tuple root tree 
children node tree nearest neighbors inserted tree 
illustrates input ordering 
note build tree just fetch input tuples appropriate order 
tuple root bf order preceded siblings children parent sibling 
tuples closer arbitrary pairs tuples 
example tuple numbered preceded siblings 
tuples lookup order preceded tuples close 
consequently lookup algorithm localized index accesses observe significant improvement buffer hit ratio 
experimental study section shows improvement number nearest neighbor queries processed unit time interval confirming intuition 
example breadth bf lookup input tuple fetch nearest neighbor tuples 
encounter tuple say tuple numbered bf order fetched parent tuple numbered looked 
database buffer cached tuple numbered 
explicitly cache tuples memory permitting rely database system buffer accesses 
implementation rely 
presents pseudo code nearest neighbor computation phase 
step describes initialization 
step iterates bf order queue consisting tuples looked appropriate order 
step describes re initialization queue empties 
ensuring tuple looked combined initialization queue single scan start scan initialize queue continue scan empty lookup tuples 
space requirements discuss space required implementing lookup order 
maintain bit vector order mark tuples nearest neighbors looked 
practical scenarios bit vector fits main memory current main memory sizes 
second maintain queue lookup tuples bf order 
maintain identifiers long integers tuples queue size queue relatively small fits main memory 
case queue certain size inserting new tuples empties 
additional main memory required limited amount available consumption 
relation int double setup create relation nn reln id nn list ng initialize queue inserting tuple initialize bit vector size empty front set get nn list number neighbors radius nn index compute neighbor growth ng add neighbors space write tuple nn list ng nn reln set bit insert tuple set goto 
procedure materializing nn reln 
partitioning phase second partitioning phase uses output phase partition input relation minimum number compact sn sets 
resulting partition solution de problem 
clarity description describe procedure des problem point straight forward adjustments ded problem required 
illustrate intuition example 
consider example group forms compact sn set 
know neighborhood growth ng values tuple nearest neighbor sets pairs equal 
deduce pair wise equality group compact set 
illustrated procedure automates intuition 
construction step step computes equality neighbor sets varying sizes tuple pairs 
tuple pair determine nearest neighbor sets nearest neighbor sets nearest neighbor sets equal 
comparison tuples yields list boolean values cs neighbor ng ng 
value csi denotes neighbor sets equal 
store result temporary relation 
issue sql select query output nn reln phase compute relation 
query involves self join nn reln say nn reln nn reln predicate tuple nn reln id nn reln id nearest neighbor set nn reln id viceversa 
selected column list parts nn reln id nn reln id nn reln ng nn reln ng ii case statement returns set nearest neighbors nn reln id equals set nearest neighbors nn reln id user defined functions efficiently compute part ii record 
observe size specification id list attribute expanded attributes neighbor standard sql perform computation database server 
ded problem rely user defined function compute list boolean values cs 
note sizes lists different different pairs diameter specification 
output phase nn reln id nn nn nn ng tid id id cs cs cs ng id ng id id compact sn group step step example illustrating partitioning phase partitioning step step extend equality neighbor sets tuple pairs sets tuples determine set neighbors compact satisfies sn criterion 
neighbor sets tuple pairs equal form compact set size 
set output group duplicates provided aggregate sn value group threshold ii extended larger compact sn group 
observe explicitly check neighbor sets pairs set equality transitive 
describe procedure 
process relation output construction step issuing cs group query select order id group neighbor set comparison results tuple neighbors id id observe result cs group query compact sn set grouped tuple minimum id process group id identified id tuples result cs group query 
group id tuples identified belonging compact sn set determine largest non trivial size greater compact sn set gv belong 
set identified just group id 
output set gv mark tuple gv indicate assignment compact set 
example set tuple 
output set mark tuple identifiers belonging valid compact sn set processed 
space requirements require bit vector marking tuple processed 

correctness complexity correctness algorithm follows observation compact sn set vm vi vj solution de grouped result query 
reason nearest neighbor sets vm equal compact set 
tuple belong larger compact sn set solution de 
minimum identifier process groups query result tuples 
phase index nested loops join nearest neighbor index 
indexes effective significantly reducing comparisons tuples cost linear number tuples size input relation cost second phase sum construction step partitioning step costs 
construction involves comparing pairs lists nearest neighbor sets tuples size specification 
cost sorting relation dominates partitioning step cost processing group small 
observe phase dominates cost algorithm 
effective nearest neighbor index algorithm scales large input relations 
contrast standard clustering formulations exceptions single linkage formulation usually np hard 

determining sn threshold formulation de problem require user specify sparse neighborhood threshold describe technique assist user setting threshold appropriately 
insight ask users input aggregated information easier estimate set sparse neighborhood threshold requires deeper understanding data distribution 
ask user estimate fraction duplicate tuples input relation 
intuition tuples ng values sn threshold duplicate tuples 
ideal scenario ng values unique tuples threshold cumulative ng distribution sn threshold 
small percentage unique tuples may lower ng values value estimated fraction duplicate tuples 
order robust rely aggregate characteristics fraction unique tuples higher fraction duplicates unique tuples higher ng values 
reflecting intuition heuristic actual sn threshold value percentile say spike distribution rate growth high 
spike heuristically defined occur 
spike exists value sn threshold 
parameters defining vicinity placing interval spike may guided user 
sn threshold value required second partitioning phase re ng values phase 

discussion discuss issues relating formulation duplicate elimination problem extensions 

incorporating additional knowledge consider scenario domain expert knows tuples satisfy predicate product descriptions identical version number duplicates 
note easy add additional constraining predicates rule tuple pairs called duplicates formulation duplicate elimination problem 
extended algorithm proceeds unchanged additional check ensure groups satisfy new criterion 
group violates new constraining predicate split group 
ability add additional constraining predicates allows incorporate constraining knowledge obtained supervised learning formulation de problem :10.1.1.14.423:10.1.1.1.5288
note possible add positive percentile cumulative distribution value equals knowledge stipulates tuples duplicates rule predicate satisfied formulation easily 
algorithm adaptable easily new problem extended positive knowledge 

minimality compact sets consider set tuples vi vi duplicates 
appropriate distance parameter assignment solution des problem single group consisting tuples 
outcome occurs union non trivial compact sets compact sn set allowing merge disjoint compact sets larger compact set 
avoid unintuitive outcomes impose notion minimality compact sets addition mutual nearest neighbor restriction 
minimal compact set consists mutual nearest neighbors exist disjoint subsets compact sets 
algorithm new formulation straightforward adaptation algorithm original formulation 
just add additional postprocessing check ensuring compact set minimal 
split groups minimal groups 
experiments variety real datasets indicate scenarios merge multiple minimal non trivial compact sets violating sn group size criteria rare 
mergers occur tuples smaller compact sets close 
real scenarios really duplicates ii neighborhood individual tuples high preventing grouping 
de formulation constrain solution consist minimal compact sets 

experimental evaluation thorough experimental evaluation duplicate elimination algorithm real datasets show accurate current threshold approaches 
describe setup evaluation metrics discuss experimental results 
real datasets consider media org name address city state zipcode relations internal data warehouses publicly available datasets restaurants name name parks name census lastname name middle initial number street riddle repository 
example assignment distance vi half sn threshold greater greater 
algorithms compared compare des ded formulations standard thresholding strategy denoted thr single linkage clustering 
discussed earlier induce thr threshold graph output nn reln nearest neighbor computation phase distance threshold 
maximal connected component returned set duplicates 
note sets duplicates just consist tuple pairs 
alternative methods threshold graph stars cliques return similar results 
evaluation metrics precision recall metrics evaluate duplicate elimination algorithms 
recall fraction true pairs duplicate tuples identified algorithm 
precision fraction tuple pairs algorithm returns truly duplicates 
higher recall precision values better 
precision versus recall graph plots recall precision values various parameter settings 
comparing precision versus recall plots allows comprehensively compare algorithms parameter settings 
distance functions evaluate formulation distance functions 
employ edit distance ed function combining edit distance cosine metric idf weights called fuzzy match similarity fms 
consider symmetric variant original fms function 
function fms shown effective matching erroneous tuples correct counterparts 
illustrate consider example strings microsoft close microsoft close edit distance idf weights relatively small 
contrast edit distance microsoft mic microsoft similarly cosine metric idf weighting places boeing closer microsoft fuzzy match similarity function efficiently probabilistically indexable 

quality figures plots precision versus recall graphs duplicate elimination algorithms edit distance function threshold single linkage thr des neighborhood growth sparseness ded 
fix aggregation function agg max vary parameters respectively plot precision versus recall values 
plots similar graphs algorithms fuzzy match similarity function 
datasets edit distance fuzzy match similarity des ded plots outperform thresholding approaches 
recall de approaches yield higher precision especially higher recall values 
parks dataset improvement threshold approaches 
precision recall graph des 
plots concentrated recall precision values ded 
plots wider spread values 
reason nearest neighbor lists dek formulation dependent specific distance thresholds 
usually number compact groups size far greater number variations precision recall variations high 
contrast sizes nearest neighbor lists ded varies significantly variations 
consequently precision recall values vary 
diameter specification useful better control precision 
precision restaurants precision vs recall des avg des max des max ded avg ded max ded max plots precision versus recall plots restaurants dataset des ded different aggregation functions max avg max nd aggregation functions maximum value 
aggregation functions yield similar results large percentage groups size 

run time performance illustrate performance algorithm des problem fuzzy match similarity function results ded similar 
evaluate impact bf ordering improving performance nearest neighbor computation phase evaluate scalability 
bf ordering evaluate impact bf ordering relation consisting organization addresses 
measure database buffer hit ratio bhr ii processor usage pu iii throughput number input tuples looked unit time interval bf random rnd orders 
vary memory sizes allocated database buffer mb mb 
presents results 
observe bhr pu bf order higher random order 
particular throughput improved due bf order 
bf ordering halves time required phase 
bh rnd bh bf mb mb mb pu rnd pu bf rnd bf comparing buffer hit ratio bhr processor usage pu lookup throughput random rnd breadth bf ordering 
rm ed im phase phase tuples scalability study scalability algorithm relation containing organization addresses 
reports normalized running times normalized time required executing phase tuples phases versus size multiples dataset axes logarithmic scales 
linearity plots demonstrates scalability phases algorithm 

summary shown de formulation accurate robust yield better precision recall tradeoffs previous approaches 
illustrated efficiency scalability algorithm 
particular demonstrated benefit bf ordering significantly reducing running time nearest neighbor computation phase algorithm solving de problem 

related normalized running times phases problem duplicate elimination received lot attention due practical significance variety data management scenarios 
previous solutions duplicate elimination classified supervised unsupervised approaches 
supervised approaches learn rules characterizing pairs duplicates training data consisting known duplicates 
approaches assume training data exhibit variety distribution errors observed practice 
difficult impossible obtain comprehensive training data issue addressed limited extent active learning approaches drawback requiring interactive manual guidance 
real data integration scenarios possible obtain training data interactive user guidance 
discussed earlier previous unsupervised methods ignore local structural properties rely global thresholds distances particular edit distance cosine similarity detect duplicates lead poor recall precision tradeoffs 
duplicate elimination problem studied record linkage literature 
approaches rely threshold notions similarities aggregating matches attribute values 
see survey methods 
alternative approaches partitioning threshold graph components strongly connected cliques cliques result groups tuples single linkage partitioning groups duplicates practice small size 
research focused improving distance functions determining appropriate thresholds inherently involve global thresholds single linkage clustering algorithms 
distance similarity functions de formulations achieving better precision recall tradeoffs 
formulation duplicate elimination problem different standard clustering formulations primarily cs sn criteria 
clustering formulations insist cluster dense contain large number tuples de formulation focuses groups consisting mutual nearest neighbors local neighborhood sparse 
consequently directly standard clustering formulations algorithms 
notion similar sn criterion explored context outlier detection 
blocking approaches proposed speed algorithms solving threshold duplicate elimination problem 
idea similar hash join algorithms partition relation blocks compare records blocks 
guarantee required nearest neighbors tuple block 
unable blocking strategies 
develop techniques optimizing batches similarity queries simultaneously process nearest neighbor queries 
approaches require access candidate tuples fetched index single nearest neighbor query 
implementing strategy requires changes indexing structure database backend 
implementing system client standard database systems design goals unable adopt approach 
precision precision precision precision precision precision od precision vs recall thr des des ded ded restaurants precision vs recall thr parks precision vs recall thr des des ded ded des des ded ded od precision vs recall thr des des ded ded precision precision wm precision vs recall thr des des ded ded precision vs recall thr des des ded ded census precision vs recall precision precision vs recall edit distance restaurants precision vs recall parks precision vs recall thr des des ded ded thr des des ded ded precision precision precision thr des des ded ded wm precision vs recall thr des des ded ded precision vs recall thr census precision vs recall thr des des ded des des ded ded precision vs recall plots fuzzy match similarity function 
propose new formulation duplicate elimination problem fundamental properties compact set sparse neighborhood characterize duplicate tuples 
show formulation desirable characteristics intuitive transformations distances tuples 
develop efficient algorithm solving duplicate elimination problem 
real datasets show quality robustness formulation scalability algorithm 
chaudhuri ganti 
eliminating fuzzy duplicates data warehouses 
proceedings international conference large databases 
baxter churches 
comparison fast blocking methods record linkage 
proceedings acm sigkdd workshop data cleaning record linkage object identification august 
bitton dewitt 
duplicate record elimination large data files 
acm transactions database systems tods 
breunig kriegel ng sander lof identifying density local outliers 
proceedings acm sigmod bilenko mooney 
adaptive duplicate detection learnable string similarity measures 
proceedings ninth acm sigkdd international conference knowledge discovery databases 
bilenko mooney 
evaluation construction duplicate detection 
proceedings acm sigkdd workshop data cleaning record linkage object identification august 
ester kriegel sander multiple similarity queries basic dbms operation mining metric databases 
ieee transactions knowledge data engineering 
bilenko 
riddle repository information duplicate detection record linkage identity uncertainty 
www cs utexas edu users ml riddle index html chaudhuri ganti motwani 
robust efficient fuzzy match online data cleaning 
proceedings acm sigmod june 
cohen 
integration heterogeneous databases common domains queries textual similarity 
proceedings acm sigmod pages seattle wa june 
cohen richman 
learning match cluster large high dimensional data sets data integration 
proceedings eighth acm sigkdd international conference knowledge discovery databases edmonton canada july 
forgy 
cluster analysis multivariate data efficiency vs interpretability classifications 
biometrics 
sunter 
theory record linkage 
journal american statistical society 
gravano ipeirotis jagadish koudas muthukrishnan srivastava 
approximate string joins database free 
proceedings th international conference large databases vldb pages roma italy september 
hernandez stolfo 
real world data dirty data cleansing merge purge problem large databases 
data mining knowledge discovery 
piotr indyk 
approximate nearest neighbor edit distance product metrics 
th symposium discrete algorithms 
alvey 
record linkage techniques 
statistics income division 
internal revenue service publication 
kleinberg 
impossibility theorem clustering 
advances neural information processing systems 
gill 
ox link oxford medical record linkage system 
record linkage techniques 
monge elkan 
field matching problem algorithms applications 
proceedings nd international conference knowledge discovery databases kdd 
monge elkan 
efficient domain independent algorithm detecting approximately duplicate database records 
proceedings sigmod workshop data mining knowledge discovery arizona may 
ester kriegel sander xu algorithm discovering clusters large spatial databases noise 
proceedings nd int conference knowledge discovery databases kdd 
navarro baeza yates sutinen tarhio 
indexing methods approximate string matching 
ieee data engineering bulletin 
navarro 
searching metric spaces spatial approximation 
vldb journal 
rahm hai 
data cleaning problems current approaches 
ieee data engineering bulletin december 
sarawagi 
interactive deduplication active learning 
proceedings eighth acm sigkdd international conference knowledge discovery databases edmonton canada july 
smith waterman 
identification common molecular subsequences 
journal molecular biology 
tejada knoblock minton 
learning domainindependent string transformation weights high accuracy object identification 
proceedings eighth acm sigkdd international conference knowledge discovery databases edmonton canada july 
winkler 
data cleaning methods 
proceedings acm sigkdd workshop data cleaning record linkage object identification august 
