labels event processes asbestos operating system petros maxwell krohn steve cliff frey david ziegler eddie kohler david mazi res frans kaashoek robert morris ucla mit stanford nyu asbestos cs ucla edu asbestos new prototype operating system provides novel labeling isolation mechanisms help contain effects exploitable software flaws 
applications express wide range policies asbestos kernel enforced label mechanism including controls inter process communication systemwide information flow 
new event process abstraction provides lightweight isolated contexts single process allowing process act behalf multiple users preventing leaking single user data user 
web server uses asbestos labels isolate user data requires memory pages user demonstrating additional security come acceptable cost 
categories subject descriptors operating systems security protection information flow controls access controls operating systems process management operating systems organization design computer system implementation servers general terms security design performance keywords labels mandatory access control information flow event processes secure web servers breaches web servers networked systems routinely divulge private information massive scale 
kinds exploitable software flaws enable breaches persist lost design systems limit possible impact exploits 
powerful tool contain exploits principle privilege directs system component minimum privilege required accomplish task 
corresponding policy prevent server acting principal accessing data belonging principal direct indirect channels 
privilege policy enforced operating system small trusted part application classes exploits sql injection buffer overruns making servers safer practice 
unfortunately current operating systems enforce privilege 
weaker goal isolating services isolating principal state inside service requires error prone abuse primitives designed permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
sosp october brighton united kingdom 
copyright acm 

purposes 
servers revert insecure design monolithic code running privileges 
come surprise high impact breaches continue 
new operating system primitives needed best place explore candidates unconstrained context new os 
asbestos operating system enforce strict application defined security policies efficient unprivileged servers 
asbestos contributions twofold 
access control checks asbestos labels primitive combines advantages discretionary access control 
labels determine services process invoke processes interact 
traditional discretionary capabilities enumerate positive rights right send network 
traditional capability systems asbestos labels track limit flow information system application defined compartments 
complementary security models linked key observation ability declassify data single compartment analogous possession discretionary capability 
resulting system supports capability traditional mls policies application specific isolation policies decentralized declassification single unified mechanism 
second asbestos event process abstraction lets server applications efficiently support isolate concurrent users 
conventional label systems server processes quickly contaminated data belonging multiple users lose ability respond 
fix forked server model active user forked copy server process unfortunately resource heavy architecture burdens os thousands processes need memory allocated cpu time scheduled 
event processes allow single process keep private state multiple users isolate state exploit affects user data 
group event processes efficient single ordinary process 
event process discipline encourages efficient server construction experiments servers cache thousands user sessions low storage costs 
measurements pc show asbestos web server support comprehensive user isolation cost memory pages user 
furthermore prototype label implementation impacts performance asbestos web server storing isolated data thousands users ways competitive apache unix 
asbestos shows os support flexible stringent security policies including information flow control challenging environment highperformance web server 
application goal evaluated asbestos implementing secure application build current systems dynamic content web server isolates user data 
goal nutshell asbestos support efficient unprivileged large scale server applications users isolated operating system application policy 
rest section expands clarifies goal 
goal refers server applications asbestos mechanisms aid construction types software 
example email readers related policies restrict privileges attachments reducing damage inflicted users unwittingly run disguised malicious code 
large scale server application responds network requests dynamically changing population thousands hundreds thousands users 
single piece hardware may run multiple separate cooperating applications 
examples include web commerce bulletin board systems pre web client server systems 
applications achieve performance aggressive caching minimizes stable storage delays 
efficient mean asbestos server cache user data low overhead 
simple cache trusted additionally want isolate different users data security breaches contained 
asbestos event process mechanism aims satisfy requirement 
unprivileged mean system administrator granted application minimum privilege required complete job minimum privilege privilege 
system follows principle privilege 
users application defined meaning application define notion principal set principals 
application users distinct user populations overlap 
application users may may correspond human beings typically won correspond set human beings allowed log system console 
isolated mean process acting user gain inappropriate access users data 
appropriate access defined application policy application defines parts isolated 
policy support flexible sharing users data need isolated 
users trust parts application part assigns users client connections bugs trusted code allow arbitrary inter user exploits aim minimize size 
application defines isolation policy operating system enforces 
os prevent totally compromised processes violating policy example unable data non compromised services applications 
isolation policies restrict information flow processes may ignorant policies 
unfortunately system controls information flow run time checks inappropriately divulge information checks fail effect kernel data structures tracking information flow provide covert storage channel 
aim eliminate storage channels exploited multiple processes hardened version asbestos improve security limiting process creation rates 
section discusses issue depth 
summary asbestos support form mandatory access control transitively isolates processes tracking limiting flow information 
unprivileged applications define isolation policies decide information need isolated 
furthermore os mechanisms labeling processes support highly concurrent server applications 
asbestos ideas achieve full expression design implementation asbestos ok web server improved ok demux idd worker worker network stack netd ok dbproxy database worker application system processes asbestos ok web server 
grey boxes trusted 
worker processes contain event process user session 
version original okws unix 
server implements web site multiple dynamic workers logging retrieving data changing password example 
worker process ok demux process analyzes incoming connection requests forwards relevant worker 
worker caches relevant user data caches different users isolated labels event processes 
production system additionally cache shared workers asbestos trouble support shared cache isolated users 
implemented sql database access table rows labeled belonging particular users selected workers export user data public 
workers untrusted meaning worker compromise violate user isolation policy 
trusted components include ok demux process ok dbproxy database interface idd process checks user passwords system components network interface ip stack file system kernel 
workers semi trusted compromised inappropriately leak compromised user data gain access uncompromised users data 
shows server process architecture 
related mandatory access control mac systems provide enforcement security policies transitively causal links processes 
operating systems long expressed enforced policies labels 
labels assign subject object security level traditionally consists hierarchical sensitivity classification unclassified secret set categories nuclear crypto forth 
observe object subject security level dominate object example file secret nuclear data readable processes clearance secret category set includes nuclear 
security enhancement packages supporting labels available today popular operating systems including linux freebsd 
mac systems generally aspire achieve variant property process observe object modify object security level dominate absence property leak contents writing leaving confidentiality discretion enforcing 
course real operating systems provide way declassify downgrade data example special privilege afforded certain users press secure attention key lies outside main security model 
mac systems geared military settings require labels specify hierarchical sensitivity classifications categories 
label format determines kinds policies expressed 
fixed number classifications categories centrally allocated assigned security administrator preventing applications crafting policies labels 
mac systems typically combine labels separate discretionary access control mechanism ordinary unix users groups enforce access control secret nuclear level 
asbestos labels differ significantly previous operating systems asbestos lets process dynamically create label categories compartments 
process partially bypass property information raising security clearance processes respect certain compartments ones creates 
asbestos tracks information flow dynamically adjusting labels new event process abstraction lets single unprivileged process separately handle data multiple compartments accumulating restrictions 
described asbestos system call interface provides number novel features facilitate labels including temporary voluntary restrictions split send receive labels different defaults 
idea dynamically adjusting labels track potential information flow dates back high water mark security model adept late 
numerous systems incorporated mechanisms including ix 
model supported idea individual originators placing accumulating restrictions data somewhat creating compartments data declassified users privileged role 
asbestos labels closely resemble language level flow control mechanisms 
jif particular inspiration asbestos support decentralized declassification separate ownership different label components 
programming language jif advantage able perform label checks statically compile time 
runtime checks affect control flow failure creating implicit information flows 
compared asbestos jif requires centralized principal hierarchy equivalent split label defaults asbestos uses support policies preventing process talking 
asbestos uses communication ports similar previous message passing operating systems confine executable content full fledged mandatory access control implementations :10.1.1.121.2679
asbestos uses namespace handles ports compartments allowing labels emulate wide range security mechanisms discretionary capabilities multi level security 
theory capabilities suffice implement mandatory access control 
instance keykos achieved military grade security isolating processes compartments interposing monitors control capabilities compartment boundaries 
eros successfully realized principles keykos modern hardware 
psychologically people accepted pure capability confinement fear just inappropriate capability escapes security system may compromised 
result number designs combined capabilities authority checks interposition labels 
mandatory access control achieved unmodified traditional operating systems virtual machines 
example project uses vmware multi level security 
virtual machines principal limitations performance coarse granularity 
goals asbestos allow fine grained information flow control single process handle differently labeled data 
implement similar structure virtual machines require separate instance operating system label 
asbestos overview asbestos ipc resembles microkernels mach 
processes communicate messages sent ports 
process create arbitrarily ports 
messages sent port delivered single process receive rights port initially process created port receive rights transferable 
right send port determined label checks described 
asbestos messaging asynchronous unusually unreliable send system call return success value message delivered 
reasons 
kernel tell message deliverable instant receiving process tries receive process labels change prevent delivery allow 
seriously reliable delivery notification process leak information careful label changes example causing successful delivery correspond bits unsuccessful delivery bits 
label checks resource exhaustion cause messages dropped careful compartment management web server delivery reliable practice 
conventional mechanisms pipes file descriptors emulated messages sent ports read file example client sends read message file server port awaits corresponding read reply 
protocol messages inspired plan 
asked create port kernel returns new port unpredictable name 
necessary ability create port specific name covert channel 
communication generally bootstrapped environment variables specify port names services currently 
asbestos contains system calls allocating remapping freeing memory particular virtual addresses creating destroying processes creating ports sending receiving messages bootstrapping debugging addition calls supporting label event process functionality 
asbestos labels asbestos labels support decentralized compartments process dynamically create manipulate 
order allow programs craft mac security schemes asbestos labels combine mandatory discretionary access controls 
asbestos gives program creates new compartment discretionary right declassify data compartment program give right away making right similar capability 
program typically launch processes restricting labels reveal data processes compartment 
may give right declassify programs trusted data programs release tainted data outside compartment 
programs discretionary rights establish identity integrity protect right send messages port implement send capability 
features asbestos label design particularly important decentralized compartments 
special sensitivity level represents declassification privilege respect compartment 
second sending message process supply additionally restrictive discretionary labels top process labels maintained kernel labels transmitted receiving application possible analysis 
asbestos processes separate send receive labels different defaults compartments allowing policies transitively prevent processes communicating unduly restricting process ability communicate rest system 
label basics general information flow labels form lattice partial order finite set labels unique upper greatest lower bounds 
partial order determines label dominated 
upper bound operator combine security classes process reads objects different classes instance 
greatest lower bound operator unusual label systems asbestos declassification 
asbestos process labels send label ps receive label pr somewhat analogous ix current maximum labels 
send label represents process current contamination receive label maximum contamination able accept 
order may send ps qr means able receive messages processes current contamination level willing accept contamination level 
message delivered send label contaminated send label information flows order qs qs ps upper bound send labels 
asbestos compartments named handles bit numbers 
process create compartment new handle system call returns previously unused handle explained calling process privilege handle 
handle values unique boot time 
file descriptor value handle value refers handle contexts 
bit namespace large allocating handles rate second require years exhaust values 
kernel generates handles encrypting counter bit block cipher derived blowfish resulting unpredictable non repeating sequence values unpredictability closes certain covert channels concealing number handles created time 
handles way self authenticating simply knowing handle value confers additional privilege 
handle privileges represented levels members ordered set send labels lowest privileged level highest privileged level 
default levels lie send labels receive labels 
reasons difference explained 
label just function handles levels 
write functions set notation default level appears handle list applies handles mentioned explicitly 
compare labels compare components iff ordering upper bound greatest lower bound operators max min 
fs file server users shell user ut ur ut shell user vs vt vr vt ut terminal user uts ut ut vs vt ut simplified process communication labels 
file server trusted 
privacy examine asbestos labels provide privacy information flow control simple process example trusted multi user file server user shells users terminal user logged 
system goal allow user information pass freely terminal preventing users information escaping 
assume process labels assigned band section shows assigned decentralized fashion 
user needs security compartment assign user taint handle ut step differentiate processes seen private data 
send labels purpose track flow messages raising receivers levels 
mark send label process sees private data setting ut level higher default 
choose level user process ps ut default send level hasn seen data process ps ut 
receive labels 
default processes pr ut 
user taint level process receive label explicitly raised ut allow receive data 
raising receive labels system permissive asbestos requires special privilege processes free raise receive labels arbitrarily 
shows resulting system 
shell processes tainted ut vt ut vt receive labels allow receive data respective users 
processes create communicate characteristics 
user terminal ut labels send messages ut ut vs vt ut vt process seen data 
discretionary contamination consider file server fs 
maintain system information flow properties file server label files process reads user file tainted ut 
worry writes 
file server able taint different users processes different ways simply equation taint processes 
asbestos file server selectively taint messages appropriate handle providing optional contamination label cs sending message 
label raises sender send label new effective send label es ps cs 
effective label true send label check information flow contaminate receiver send label 
equations es qr qs qs es 
contamination restricts information flow requires special privilege processes arbitrarily contaminate messages send 
default contamination label lowest possible label adds additional contamination 
example optional discretionary label system 
idea simple processes control interactions label system ways don violate basic information flow properties course label system implement security policies potentially including access control interactions needed operating system 
levels label assignment prevents data reaching processes explicitly initialized set pr vt 
asbestos levels different defaults send receive labels allow policies 
say example represent user taint ut ut 
communicate processes system prevent privacy violations ut lowering receive label vt 
ut communicate vs vt received message send label rise vt preventing communication ut user taint uses level system defaults denying user tainted messages compartment manager explicitly raise receive level process allowed receive user data 
user taint uses level system defaults allowing communication processes shouldn receive user data receive labels explicitly lowered 
application allowing read file long don send contents network daemon 
different send receive defaults easy select model implementing model traditional information flow system require changing label system 
explains asbestos labels levels 
need levels send receive defaults levels defaults 
send labels usually corresponds absence taint partial taint model communication remains full taint communication prevented 
similarly receive labels indicates right tainted arbitrarily default prevents communication tainted process 
integrity capabilities ll see 
multi level policies requiring hierarchical sensitivity classification emulated asbestos multiple compartments 
instance support unclassified secret top secret levels security administrator compartments secret top secret process receive label reflects owner security clearance unclassified secret top secret 
similarly send labels reflect highest level data process seen unclassified secret top secret 
odd label values send label possible 
direct mapping security level process send label able send processes top secret clearance desired information flow properties preserved 
general asbestos design streamlined large numbers non hierarchical compartments traditional military style sensitivity classifications 
particular believe scalability compartments requirement mac protect user data today internet applications 
receive labels dynamic taint asbestos receive labels limit taint processes may receive effects taint accumulation 
example send labels change respect ut vt absent intervention privileged process 
asbestos labels support range policies 
example ur set ut vt allowing shell read user information 
reads data lose ability send messages ut unfortunately able convey information exploiting covert channels 
principle privilege better raise receive label doesn need access data policy choice application designer 
web server sets receive labels prevent dynamic taint specifically needed 
declassification privileges asbestos declassification special level process ps declassification privilege respect equivalently said control compartment privilege concretely means processes contaminate respect receives message process qs ps remains lowest level 
forward data tainted processes information respect notation define 
contamination step equation qs qs es es term gives levels qs precedence contamination es 
process remove levels send label special variant send system call 
example file server trusted users store files apply minimal taint file data returns tainted indefinitely high privilege respect ut vt fss ut vt fsr ut vt 
receive label allows fs receive messages tainted arbitrarily respect ut vt regardless receives send label stay ut vt process initially privilege handle creates new handle system call sets ps handle returns 
previously unused processes start qs default send level 
normal message exchange change situation 
asbestos allows process privilege explicitly distribute privilege processes forking mechanism called 
adds flexibility privileged process forward data doesn fundamentally change system information flow properties 
dynamic compartment creation privilege manipulation differs systems jif fixed hierarchy users controlling various channels code 
process declassification privilege handle processes labels respect lowering send labels raising receive labels 
uses optional label arguments send system call send label ds receive label dr send label lower receiver send label receive label raise receiver receive label 
operations system permissive require special privilege respect handle involved privilege represented 
notation equations es qr dr qs qs ds es qr qr dr 
system check label change receiver labels sender controls relevant compartments ps ds dr 
integrity file server accept requests user fear contamination declassify user data appropriate 
course useful file server implement integrity policy prevent arbitrary processes overwriting users data 
integrity policy mandatory transitively blocking flow low integrity data user files discretionary 
consider discretionary policy processes speak user write files writes free incorporate data trusted sources 
speaking positive right taint process speaks unrelated read secret data 
need new compartment represent speaking represented ug user handle 
process speak ps ug 
file server verify ps ug accepting write file asbestos supports integrity checks fourth final optional label argument send verification label verification label temporarily lowers restricts receiver effective receive label 
sender proves labels constraint independent receive label 
concretely label check equation es qr dr 
es ps cs implies ps check succeed verification label upper bound sender send label 
optional labels cs ds dr verification label passed receiving application message received 
application knows upper bound sender send label 
file server example process writing file supply ug prove speaks file server turn verifies process speaks checking ug accepting write file 
alternative design eliminate just supply message recipients copy sender send label effect conveying process credentials message sends 
designs lead security problems attacker trick process exercising unintended privileges pitfall known confused deputy problem 
example process speaks multiple users explicitly name credentials intends exercise write 
level mandatory integrity level permits construction mandatory integrity policies 
example process ps ug speak default send level disseminate privilege minute receives message process speak qs ug ps tainted lose ability speak act relay low integrity data files 
secrecy different defaults send receive labels allow targeted exclusion particular processes 
example preventing system files corrupted network 
file server allocate compartment require writes system files 
setting network daemon send label ensures process contaminated data network overwrite system files 
capabilities preventing contamination discretionary verification label implement application defined security policies limited important way application choose ignore message examining message delivered allow examined application labels contaminated message taint 
general taint undone 
flexibly verify integrity prevent inappropriate contamination 
imagine example mail reader starts untrusted program read attachment 
mail reader accept contamination system processes file system needs communicate attachment program doesn want accept contamination 
compromised attachment develops high taint lose ability send mail reader 
needed way shift simple form message filtering kernel 
asbestos supports straightforward way integrating communication ports label system 
result prevents undesired contamination ends providing semantics capability send rights 
port namespace handle value space port names label compartments 
second port associated port receive label port label pr 
label lower restrict process receive label messages delivered port 
acts verification label imposed receiver sender 
message sent port label check equation es qr dr pr 
port label furthermore restricts receive label 
process controls compartment process right receive tainted messages dr simultaneously taint send label cs 
idiom common practice web server uses example contaminate worker processes relevant user taint ut processes long running system servers may want avoid undesired taint 
setting port labels low values prevent contamination 
kernel reject message attempts receive label allowed port label specifically checks dr pr 
port labels verification labels entirely discretionary 
process solely controls port labels ports receive rights lowering raising port label requires special privilege 
processes supply initial port label creating port adds restrictions relative process receive label 
convenience kernel modifies port label setting pr returning new port 
processes system initially ps default send level process send explicitly access 
set port label system call changes port label doesn modify input 
resetting port label exception process allow system send messages subject process receive label restrictions 
capabilities resulting port label system supports send rights 
process creates port send right send process send label respect send processes ports handles label levels increasing order labels functions handles levels ps pr pr process send label process receive label port receive label label comparison true iff upper bound label max greatest lower bound label min stars label notation 
send data cs ds dr send message port process receive rights es ps cs requirements es qr dr pr ds ps dr ps dr pr effects ds contaminate es preserve qs handles qs qs ds es qr qr dr new port unused port effects pr pr ps return set port label requirement receive rights effect pr label operations associated asbestos system calls 
calling process 
message ds 
redistribute send right 
note primarily port receive label pr process label pr prevents arbitrary processes sending process create ports different receive labels just capabilities separately distribute right send port 
summary implementation summarizes notation developed earlier sections gives final versions label operations associated send new port set port label system calls 
user space label represented array handle values plus default level 
bit number represent label entry upper bits handle value lower bits encode level label 
kernel space active handle corresponds byte data structure called vnode 
port handles structure includes port label process receive rights 
hash table maps handle values vnodes 
vnodes counted kernel vnode disappear kernel may reuse memory 
series label operations accompanies ipc kernel label implementation major impact performance memory usage 
current design label points sorted array chunks sorted array vnode pointers 
pointers byte aligned lower bits available corresponding levels 
labels counted updated copy write multiple entities share label memory appropriate 
additionally chunks counted updated copy write multiple labels share chunks 
chunk marked minimum maximum vnodes levels label 
helps optimize certain common operations example maximum level larger minimum level definition 
worst case course operations linear size input labels 
optimization opportunities remain example label handle levels plan improve label implementation 
smallest label bytes long including space chunk 
event processes labels don processes handle multiple users private data 
avoid accumulating contamination processes trusted declassification privilege relevant user leaving trusted vulnerable 
existing os abstractions help 
hand user level threads efficient share address space provide isolation 
forking separate process user provides isolation may low performance due operating system overheads memory 
needed new abstraction combines performance benefits cooperative user threads isolation benefits forking new processes 
efficient servers implementation pattern suggests solution problem 
server driven simple event driven dispatch loop event get event user lookup user event user seen user state create state process event event user arrangement efficient process involved little space overhead minimum memory required hold user state 
missing piece way isolate state different users ensure process labels set correctly executing behalf user 
event process abstraction asbestos event process abstracts notion subset process state belonging single user 
processes kernel restricts event process privileges handles incoming messages user isolates different event processes state user level threads event processes limit concurrency impose low space scheduling overheads 
event process associated conventional base process initial state drawn 
event process kernel state consists send label receive label receive rights ports set private memory pages plus bookkeeping information altogether occupying bytes asbestos kernel memory 
comparison asbestos minimal process structure takes bytes 
code typical event process server resembles event driven dispatch loop 
ep checkpoint msg 
state initialized 
initialize state state 
state reply new port 

process msg msg state 
ep yield intuitively event process entities share event loop isolated state 
ep system calls manage control flow transfer events 
single state variable refers different user event process 
base process calls ep checkpoint system call enters event process realm base process run 
process de scheduled message arrives port base process event processes holds receive rights 
kernel schedules event process receive message 
particular event process holds receive rights relevant port ep checkpoint returns event process context restoring private labels receive rights memory 
hand base process holds port receive rights kernel creates new event process returns event process context 
event process starts send receive labels copied base process labels receive rights private memory pages 
ep checkpoint returns message event process context label contamination declassification rules applied event process labels 
kernel event process memory writes private marking shared pages copy write event process gets receive rights ports creates 
finishes processing message event process calls ep yield system call 
call saves changes event process labels receive rights memory suspends process just base process called ep checkpoint 
event process run message available delivery 
event processes temporary modifications memory useful current event 
keep kernel saving memory modifications ep yields event process call ep clean revert specified memory range base process state 
event process frees resources including kernel maintained state ep exit system call 
event processes execute system calls including sending receiving messages allocating memory forth 
event processes execution states memory states isolated event process may block indefinitely recv blocking entire process exit process wide exit system call 
usage messages delivered base process handle typically correspond advent new client processes new client network connections exactly situations appropriate create new event process 
event process tell new checking setting memory location base process initializes zero new event process inherits zero re activation existing event process see previous nonzero write location 
new event process typically allocate new port receive messages line code sample 
system ensures messages port delivered current event process send queries file database servers behalf current user receive replies 
applications newly created event processes exit immediately creating handle store state messages avoid accumulating taint 
event process power ordinary process restrict labels example reflect fact processing specific user private data 
multi user file server example section file server event process send label user uc handle correctly reflecting just event process contaminated 
base process explicitly create event processes know existence 
fact calls ep checkpoint base process executes user space way change memory 
different event processes unaware existence possibly communication preserving independence isolation represented event process labels 
plan investigate mechanisms event processes selectively share memory subject label checks 
implementation event processes efficient reasons 
kernel scheduling cost little higher single process event processes 
second memory overhead event process low single page memory hold event process user level state plus bytes kernel state 
event process memory acts copy write copy base process memory implementation optimized event processes modify little memory 
memory state dormant event process includes just list modified pages modified pages 
event processes keep page tables 
running event process borrows base process page table data structure kernel changing exactly places differ 
typically programs scatter users data stack addition various places heap 
lead relatively large number pages unnecessarily specific event process 
pages merely hold temporary variables persist processing messages 
storing non temporary data contained data structure heap minimize number persistent pages required 
data management technique natural event driven programming event process system calls encourage 
event processes tend minimal private memory optimization storing page table differences profitable practice 
web server design asbestos web server okws system unix 
original okws design demultiplexer accepts incoming tcp connection parses headers determine service remote client requesting 
hands connection worker process specialized providing service 
okws goal isolate services compromised service affect 
unix predecessor okws asbestos isolates services different worker processes additionally enforces user isolation workers event processes compromised worker leak user information users 
startup okws started launcher process 
launcher spawns site specific workers requested site operator processes seen idd ok dbproxy 
processes 
tcp connection 
uc netd 
ut 
uw read write idd 
lookup un pw ok demux 
uc ug contaminate ut worker 
ug ut 
create okws message flow handling user web request 
exchange inherit handles establish communication paths seen diagram 
ok demux certain communicating worker processes launcher started wants avoid trusting workers identify correctly 
launcher process specific verification handle process starts 
ok demux collects handle values launcher 
worker identifies ok demux provide verification label containing verification handle level allowing ok demux verify speaks relevant process 
designs having launcher mediate initial communication workers possible 
current prototype process crash necessitate restart process suite mature version launcher restart dead processes okws unix 
basic connection handling describe data path simple web request okws running asbestos shows steps 
user connection 
user level network server netd accepts incoming tcp packets network 
netd accepted connection allocates new port uc act socket processes send read write messages 
port label ucr set uc process initially send 
section describes netd 

started ok demux registered netd listen incoming tcp connections machine web port 
netd notifies ok demux new connection granting uc level 

ok demux reads network data port uc authenticate currently okws uses simple username password pair sophisticated handshakes possible 
sends username password okws identity server idd described section 
provided valid login idd ok demux handles corresponding taint handle ut handle ug level 
handles function similarly named handles section 
ok demux ut netd raises receive label contain ut raises ucr uc ut 
changes allow ut tainted data escape network uc 
netd respond messages uc reads replies contaminated ut 
ok demux read tcp payload bytes netd step noted service requesting 
service exists ok demux forwards uc worker provides service simultaneously send label ut granting ug 

worker returns ep checkpoint new event process receiving uc ug contamination ut 

event process new port uw netd level 
reads request sending read requests netd port uc yielding reading netd replies uw wakeup 
reading parsing entire request event process formulates reply writes uc 

calls ep exit 
briefly argue worker communicate intended 
send label contaminated ut step netd receive label changed step accommodate contamination 
consequently kernel allow send data uc netd network security protocol comes process event process accesses data trusted ut send label trusted ut 
example netd idd ok demux ut assume uncompromised see section discussion 
event process descendents opportunity see user private data ut send labels 
processes working behalf different user receive messages descendents receive data 
data theft possible netd allow traffic network process ut vt send label send data uc due port port label restrictions 
note kernel enforces security policies isolate user data flows okws concept user opaque operating system 
having declassification privilege okws user handle ut implies access sensitive system resources kernel disk image system password file 
asbestos application okws need superuser access attendant dangers 
web sessions stateless web servers support storage session data persists multiple connections 
okws securely store user server side state simple additions protocol 
supporting sessions ok demux process stores table active user worker pairs 
step user requests service worker ok demux looks table port event process 
finds port forwards uc directly 
forwards connection normal causing new event process forked 
new event process allocates port uw step ok demux inserts session table 
worker event process writes session data memory normal 
preserve state connections call ep yield ep exit step 
ok demux sends requests directly requests see previous changes session state 
event loop event processes typically call ep clean yielding discard pages modified checkpoint hold session data typically include stack 
user session times explicitly logs worker event processes call ep exit ok demux cleans user worker pairs session table 
managing identities steps ok demux verifies user login credentials querying identity server idd 
server associates persistent user identification data username user id user password temporary taint handles ut ug 
idd answers successful login query step generates new ut ug handles logged returns cached ut ug handles available 
current implementation idd stores user information relational database see section cleans cache 
identity server special access ok dbproxy password database processes workers access directly 
lookup step result database query time login 
database interaction asbestos offers preliminary database support worker processes port unix package 
separate process called ok dbproxy interposes okws database accesses converting asbestos labels security policies data types functions native standard 
database access okws extend label security policy persists system reboots 
current implementation ok dbproxy privileged trusted trusted contaminate check labels ensure secrecy integrity respectively privileged idd user taint handles level 
ok dbproxy adds user id column table definition table accessed okws workers 
workers access change column 
ok dbproxy receives inserts updates sql queries write database checks request came valid username verify label bounded ut ug 
verify label conveys important facts 
sender send label contain handles ut level sender contaminated data aside 
second verify label contains ug level sender granted ability write data idd proxies ok demux 
approving verify label ok dbproxy queries idd affirm binding user handles ut ug 
checks pass ok dbproxy rewrites request row written user id private user id column 
worker process fetches data database select ok dbproxy process appropriate contamination returned rows 
row user id column contains id ok dbproxy returns row data contaminated ut queries idd ut mapping cache 
row returned separate message separate taint finish request ok dbproxy sends untainted message indicating data returned 
worker receive label limited receiving user taint worker receive rows meant user tell rows sent 
relaxed policy allow workers tainted multiple users data dynamic tainting mechanism open storage channel database worker process labels 
current prototype standard database subset asbestos security features instance rows contaminated handle 
envision database systems built specifically asbestos incorporate labels event processes deeper way 
decentralized declassification okws prototype supports decentralized declassification 
stated process user worker event process wishes read user data database database contaminate response ut 
user event process fail receive message receive label high 
receive message send label contaminated send data back connection vc 
user may want share data public profile 
user needs declassify private data public access 
okws supports semi trusted purpose 
okws worker launcher tells ok demux status 
hands connection worker step handle ut ut 
ut worker privilege declassify data marked user taint 
contacts database select private data ok dbproxy response affect send label 
write declassified data database providing verification label ut prove right 
internally ok dbproxy flags data row declassified setting user id entry zero 
ok dbproxy reads data zeroed user ids back database apply contamination user worker process safely read declassified data database affecting send label 
declassification decentralized directly involve idd creator handle ut furthermore event process trusted declassify user data ok demux granted ut 
attack worker expose data intended affect system information flow 
network server access network asbestos process netd implements tcp ip stack port manages network devices version intel linux driver gigabit card creates connections processes 
single interface network netd privileged role properly apply restrictions connections manages 
application send message netd request outgoing connection remote host listen incoming connections 
case netd wraps new connection asbestos port level requesting application 
process port open connection may perform read write operations transfer data control operations close connection change low water mark select operations determine available buffer space 
listening socket process may perform read operations accept incoming connections control operations close socket 
order apply labeling network connections netd optionally maintains taint handle connection 
process tells netd add taint handle connection messages sent response operations connection contaminated taint handle level 
okws example netd data read user connection ut ok demux 
trust privilege okws currently okws components trusted privileged worker processes 
claim typical web sites worker processes correspond vulnerable errorprone parts computing base 
vulnerable read write store manipulate sensitive data network database 
error prone software engineering reasons 
worker code typically face external code audit varies greatly site site sites intellectual property controls discourage practice 
second load web sites fluctuate wildly unexpected load spikes come emergency performance fixes accidentally circumvent security mechanisms 
third large web sites run hundreds thousands lines web code writing web service code functions correctly produces correct result honest users simple assigned junior programmers stringent oversight 
experience shown writing secure web services challenging 
believe securing web applications automatic kernel enforced mechanisms significant step web security 
plan move okws components trusted privileged computing base 
instance netd decomposed simple trusted privileged component event process workhorse 
trusted front classify incoming packets firewall outgoing packets discretionary label rules privileged respect handles ut netd 
forward packets classified appropriate event processes untrusted netd back manage specifics tcp buffering flow control 
back event process contaminated respect user behalf speaks worker processes current system 
similarly database decomposed trusted privileged indexer event process back manage caching stable storage 
covert channels asbestos labels prevent processes explicitly transmitting sensitive information unauthorized parties 
supposedly isolated processes communicate information covert channels 
goal eliminate covert channels impossible task significantly harder leak information systems internet servers today 
high grade military systems required quantify rates covert channels asbestos content enumerating channels 
broadly speaking covert channels categorized timing storage channels 
process conveys information timing channel modulates system resources way observably affects response time 
instance flush processor cache cause disk arm moved farther subsequent request 
concerned timing channels storage channels extent timing channels mitigated limiting processes ability measure time precisely 
asbestos offers feature problem admittedly harder presence network communication 
storage channels caused state modified process observed supposed transmit information goal avoid storage channels exploited single process cooperating processes required communicate information violation label policy 
asbestos design contains inherent storage channels program counter labels 
ep yield system call potentially affects program counter differently tainted event process causing run 
colluding identically labeled event processes transmit bit information order call ep yield scheduled event processes lesser taint 
channel roughly equivalent covert channel intentionally included drop exec feature ix 
send system call potentially raises value recipient send label unanticipated value 
storage channel labels observed lack communication 
consider tainted process attempting communicate bit sensitive information untainted process attacker construct untainted processes repeatedly send heartbeat messages sending message process bi communicate value storage channels inherent system run time checking dynamic labels 
channels require processes means mitigated restricting ability fork 
illustrates advantage event process abstraction compared traditional label process architecture 
event processes reduce concurrency reducing number send labels program counters available storage channels time 
asbestos kernel data structures carefully designed avoid exploitable storage channels 
handles generated incrementing bit counter storage channel 
kernel encrypts counter value produce handles user visible sequence handles convey exploitable information 
current implementation storage channels intend close limit believe mitigated affecting claims 
particular asbestos deal gracefully certain forms resource exhaustion 
evaluation goal section show okws asbestos provides useful level performance 
show amount additional memory required support user isolation okws small 
compare okws throughput latency apache running linux 
prototype os asbestos hardly expected compete mature tuned systems 
experiments show okws asbestos compete systems scenarios indicate fertile ground performance improvements 
performance measurements conducted gigabit local network linux client generating requests 
asbestos server ghz pentium gb ram asbestos currently uses mb ram 
experiments file system accesses possible disabled web access logging ran databases memory 
memory section argued merits event processes traditional fork accept designs 
hypothesis additional protection domain consume additional page memory 
measurements roughly support claim 
web sites cache dynamic data database load avoid latency 
discussed section okws uses event processes cache dynamic data maintaining isolation users 
event process persists lifetime web session typically spans multiple connections 
connection worker uses ep clean release memory allocated session data 
cleaned event process just session data called cached session 
event process processing request uses memory cached session stores temporary variables buffers event process called active session 
typical web server cached sessions active ones 
experiments measured amount allocated memory creating different numbers web sessions including space kernel data structures 
memory measurements ran okws toy web service stores data user total memory pages number sessions active sessions cached sessions memory active cached web sessions function number sessions 
includes memory allocated kernel user programs 
request returns user subsequent request 
size response 
system uses approximately kb pages cached session seen 
complete page due state maintained worker event process 
remainder memory kernel data structures event processes labels handles potentially memory user processes netd 
memory required kernel data structures twice expected probably due internal fragmentation small memory leak 
determine memory cost active sessions repeated previous experiment modified worker memory call ep clean call ep exit 
method produces worst case behavior capturing maximum amount memory consumed simple worker 
experiment shows additional pages memory active session 
pages stack exception stack pages event process message queue remaining comprise modified heap pages modified global variables 
web server performance examined aspects web server performance throughput latency 
experiments tested simpler web application simply responds string characters length depends client parameters 
compared okws asbestos apache web server version outperformed version tests 
implemented test application standard cgi process written apache module written 
cases apache keeps pool pre forked processes answer requests 
apache cgi processes additionally forks executes cgi binary request 
apache module version service call mod apache fork request 
mod apache efficient provides isolation 
apache cgi processes provide isolation significant cost compared mod apache request handled forked process 
default configuration apache run cgi processes jail cgi exploitable vulnerabilities exploitable unix user system accessible 
contrast discussed previously okws provides isolation services users service 
throughput test throughput okws relative apache mod apache varied concurrency maximize completed connections second 
apache concurrent connections maximized average connections second apache mod cached okws sessions apache throughput various numbers cached sessions okws compared apache mod apache 
latency server median th percentile mod apache apache okws session okws sessions median th percentile latencies requests various server configurations 
performance mod apache concurrent connections sweet spot 
asbestos network stack chiefly designed conserve resources offer performance load sixteen concurrent connections gave maximum throughput 
okws varied number cached sessions system 
tests server responded bytes data bytes headers 
larger responses exercise network stack 
okws isolates users authenticated run different event processes usual 
measured performance session support described section authenticated system requests serviced event process created authentication step 
okws throughput results contain data forwarding messages existing event processes creating new event processes slower involves communication database kernel overhead 
benchmark user sessions user connected session exactly times workload different ratio new sessions existing sessions perform somewhat differently 
number sessions affects size labels components expect performance change number cached sessions 
apache mod apache isolates users attempt authenticate test 
shows session okws performs better apache bit half mod apache 
okws performs better apache sessions cached system separate event processes holding isolated memory state performs approximately half apache 
section discusses factors reduce okws performance sessions increase 
latency section compares request latency okws asbestos apache mod apache 
stuck low concurrency asbestos measured latency servers concurrency simultaneous connections 
mod apache processes request single process responds requests low latency 
expected server handle web requests simple library calls 
un mod apache apache cgi pays performance penalties forking ipc responding requests times latency 
shown okws user smaller median latency apache smaller variance 
scheduling affects okws lesser extent parallelism requests choose 
requests sequentially traverse netd ok demux worker netd doesn give option request temporarily starved 
okws cached sessions latencies just bit worse apache 
label costs ideally varying number sessions effect throughput latency 
size various labels system increase number sessions 
shows costs various components system thousands cpu cycles connection number cached sessions increases 
okws network lines represent time spent okws netd code respectively 
kernel ipc line includes time spent processing send recv includes system label operations time spent label operations included 
line represents time spent database looking usernames passwords remaining processing time accounted line 
session system processing time okws network stack 
number sessions increases database overhead incurred user authentication quickly significant 
may simply represent cost unoptimized system components case 
label kernel ipc operations take significantly time sessions increase 
okws uses handles isolate user cached sessions implies idd ok dbproxy send labels contain handles netd receive label accumulated respect taint handles ok demux hold handles open worker sessions 
furthermore large labels updated include capability new tcp connection release capability connection passed event process closed 
sessions time spent doing ipc label operations surpasses time spent network stack 
sessions equals done okws 
expected linear scaling factors label implementation lead linear performance degradation labels increase size 
optimization opportunities investigation clearly required 
pleased degradation relatively mild obviously quadratic exponential factors 
hypothesized asbestos labels event processes practical isolate user state server storing data thousands users 
asbestos operating system access control mechanisms available unprivileged users giving finegrained control dissemination information 
asbestos provides protection new labeling scheme schemes previous operating systems allows data sanitized declassified individual users categories control 
categories called handles names communication endpoints making kind generalization capabilities 
capability system processes dynamically generate new handles distribute independently processes specify temporary label restrictions sent messages avoid unintentional privilege 
average connection okws kernel ipc network cached okws sessions average cost connection various asbestos components number cached sessions increases 
asbestos introduces new process abstraction event processes allow server process inhabit disjoint security compartments privilege contamination 
event processes impose overhead operating system forked address spaces thousands theoretically coexist resource strain 
prototype web server manipulates labeled data software bugs high risk worker code cause user receive private data 
system requires pages memory cached web session exhibits performance comparable unix systems provide weaker isolation 
acknowledgments authors people comments technical contributions lee badger chris frost mike network stack integration michelle osborne earlier version system contributors project including adam leon anonymous reviewers shepherd emin sirer 
supported darpa mda fa joint nsf darpa cns 
david mazi res robert morris supported sloan fellowships 
apache api notes 
httpd apache org docs misc api html 
apache server project httpd apache org 
david bell leonard la 
secure computer system unified exposition multics interpretation 
technical report mtr rev mitre bedford ma march 

security protection data ibm system 
proc 
th annual symposium computer architecture isca pp 
may 
frank mayer david 
access mediation message passing kernel 
proc 
ieee symposium security privacy pp 
oakland ca may 
david cheriton 
distributed system 
journal acm march 
dorothy denning 
lattice model secure information flow 
communications acm may 
dorothy denning peter denning 
certification programs secure information flow 
communications acm july 
department defense 
trusted computer system evaluation criteria orange book december 
dod std 
timothy fraser 
low water mark integrity protection cots environments 
proc 
ieee symposium security privacy pp 
oakland ca may 
goldberg 
architecture virtual machines 
proc 
afips national computer conference vol 
pp 
june 
norman hardy 
confused deputy capabilities invented 
operating systems review october 
wei ming hu 
reducing timing channels fuzzy time 
proc 
ieee symposium security privacy pp 
oakland ca may 
trent jaeger atul prakash jochen liedtke islam 
flexible control downloaded executable content 
acm transactions information system security may 
paul karger 
limiting damage potential discretionary trojan horses 
proc 
ieee symposium security privacy pp 
oakland ca april 
paul karger andrew herbert 
augmented capability architecture support lattice security traceability access 
proc 
ieee symposium security privacy pp 
oakland ca april 
paul karger mary ellen douglas andrew mason clifford kahn 
vmm security kernel vax architecture 
proc 
ieee symposium security privacy pp 
oakland ca may 
key logic 
keykos system design march 
sec 
www com library keykos html 
samuel king peter chen 
operating system support virtual machines 
proc 
usenix annual technical conference san antonio tx june 
maxwell krohn 
building secure high performance web services okws 
proc 
usenix annual technical conference pp 
boston ma june 
maxwell krohn petros cliff frey frans kaashoek eddie kohler david mazi res robert morris michelle osborne steve david ziegler 
privilege right privilege 
proc 
th hot topics operating systems symposium hotos santa fe nm june 
carl landwehr 
formal models computer security 
acm computing surveys september 
robert 
payroll site closes security worries february 
news com com html 
jochen liedtke 
microkernel construction 
proc 
th acm symposium operating systems principles copper mountain resort december 
peter stephen 
integrating flexible support security policies linux operating system 
proc 
usenix annual technical conference freenix track pp 
june 

org projects 
catherine jensen judith 
pale mac dac defining new forms access control 
proc 
ieee symposium security privacy pp 
oakland ca may 
douglas mcilroy james reeds 
multilevel security unix tradition 
software practice experience august 
mark miller ka ping yee jonathan shapiro 
capability myths 
technical report srl johns hopkins university systems research laboratory 
www org capability duals 
james mitchell jonathan gibbons graham hamilton peter kessler khalidi panos peter michael nelson michael powell sanjay 
overview spring system 
proc 
compcon pp 
february 
andrew myers barbara liskov 
protecting privacy decentralized label model 
acm transactions computer systems october 
news 
hacker accesses thousands personal data files march 
www news net asp id 
vivek pai peter druschel willy zwaenepoel 
flash efficient portable web server 
proc 
usenix annual technical conference pp 
monterey ca june 
rob pike dave presotto sean dorward bob ken thompson howard trickey phil 
plan bell labs 
computing systems summer 
richard rashid george robertson 
accent communication oriented network operating system kernel 
proc 
th acm symposium operating systems principles pp 
pacific grove ca december 
marc rozier fran ois armand michel herrmann claude kaiser leonard 
chorus distributed operating system 
computing systems fall 
jerome saltzer michael schroeder 
protection information computer systems 
proc 
ieee september 
bruce schneier 
description new variable length key bit block cipher blowfish 
proc 
fast software encryption cambridge security workshop pp 

springer verlag december 
lncs 
jonathan shapiro jonathan smith david farber 
eros fast capability system 
proc 
th acm symposium operating systems principles pp 
kiawah island sc december 

www org 
andrew tanenbaum robbert van renesse hans van staveren gregory sharp mullender jack jansen guido van rossum 
experiences amoeba distributed operating system 
communications acm december 
vmware 
vmware national security agency team build advanced secure computer systems january 
www vmware com pdf pdf 
rob von behren jeremy condit feng zhou george necula eric brewer 
capriccio scalable threads internet services 
proc 
th acm symposium operating systems principles pp 
bolton landing lake george ny october 
robert watson wayne morrison chris vance brian feldman 
mac framework extensible kernel access control freebsd 
proc 
usenix annual technical conference pp 
san antonio tx june 
matt welsh david culler eric brewer 
seda architecture conditioned scalable internet services 
proc 
th acm symposium operating systems principles pp 
ch lake louise alberta canada october 
andrew whitaker marianne shaw steven gribble 
scale performance denali isolation kernel 
proc 
th symposium operating systems design implementation osdi pp 
boston ma december 
