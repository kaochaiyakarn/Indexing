practical attack graph generation network defense attack graphs valuable tool network defenders illustrating paths attacker gain access targeted network 
defenders focus efforts patching vulnerabilities configuration errors allow attackers greatest amount access 
created new type attack graph multiple prerequisite graph scales nearly linearly size typical network increases 
built prototype system graph type 
prototype uses readily available source data automatically compute network reachability classify vulnerabilities build graph recommend actions improve network security 
tested prototype operational network hosts helped discover previously unknown configuration error 
processed complex simulated networks hosts minutes 
defending large enterprise networks difficult 
defender able locate paths network prevent attackers attacker needs find unprotected path 
network defender advantage intimate knowledge network ways traffic may move services running vulnerabilities services 
defender knowledge improve situational awareness 
attack graphs way leverage data 
different papers attack graphs representations core idea remains attack graph shows ways attacker compromise network host 
defenders attack graph sponsored united states air force air force contract fa 
opinions interpretations recommendations authors necessarily endorsed united states government 
kyle richard lippmann keith mit lincoln laboratory wood street lexington massachusetts email rpl ll mit edu identify critical bottlenecks secure bottleneck hosts services 
previous attack graphs suffered substantial problems 
large amount source data assembled accurately build attack graph past papers assume data preprocessed extensive 
assumption valid theoretical graph design unsuitable implementation 
system assumes data provided common formats performs necessary preparatory 
second past research difficulty scaling large enterprise size networks tens thousands hosts 
focused heavily scalability concerns developed system capable handling large networks reasonable amounts time commodity hardware 
system called able import data common sources including vulnerability scanner checkpoint firewalls cve dictionary vulnerability database 
automatically computes reachability ability host connect open ports hosts network 
rapidly generates attack graph showing attacker maximally compromise targeted network 
tool model attacker able start ip address maximally exploiting special holes perimeter firewalls 
system builds multiple prerequisite graphs mp graphs faster build greater expressive power previous predictive graphs 
mp graphs able model portable credentials passwords attacker compromise target 
mp graph construction substantially faster published attack graph results aware 
implemented working prototype perl capable automatically computing reachability readily available source data generating mp graph analyzing producing graph recommended actions output 
explored system scalability evaluating simulated networks hosts 
simple example network verified value conducting field test operational network hosts 
remainder simple network shown explain data required computations performed results obtained 
attacker begins host arbitrary source ip addresses 
host network single open port single remotely exploitable vulnerability 
firewall permits hosts communicate host drops traffic 
organized follows section explores source data required graph generation 
vulnerability evaluation touched section 
reachability generation discussed section 
section explains structure multiple prerequisite attack graph built 
section proposes techniques resulting graph simplifying viewing automatically analyzing produce recommended defensive actions 
tests real simulated networks covered section 
related reviewed section 
section concludes 
data tool network model supposes individual host possesses interfaces listening addresses 
interfaces zero open ports accepting connections hosts 
host interfaces may rules dictate network traffic may flow host 
port zero vulnerability instances particular flaws configuration choices may exploitable attacker 
interface host connected link representing combination hubs switches connecting set interfaces 
attacker able obtain access levels host root administrator access user guest access dos denial service confidentiality integrity loss 
combination host access level attacker state 
state may provide attacker zero credentials vulnerability instances may require zero 
attacker obtains host reachability root user access achieved 
reachability credentials serve prerequisites exploitation vulnerability instance 
model admittedly simplistic populate available data realistic needs 
term vulnerability somewhat unconventional 
vulnerability way attacker gain access system 
examples include software flaws trust relationships server misconfigurations 
feature remote login private key vulnerability point view attacker 
requires large amount data populate model system administrators collect data matter course 
core pieces network topology vulnerability information credentials 
runs offline provided data minimizing risk attacker obtaining source data resultant graph 
network topology obtained user vulnerability scanner 
user provide map network enumerating links indicating scans belong link hosts interfaces links 
map fairly small static remain tractable task larger networks considered 
firewall rulesets component network model user provides original rulesets firewall directly converts rulesets internal format 
provides information individual interfaces ports vulnerability instances 
concept credential information access control password private key example 
may possible automatically determine credentials protect done ssh example data import specific application platform hampering 
currently readily available automatable sources credential data written automatically import credential related data 
sample network scans required left side firewall targeting hosts right targeting scans carried inside subnet firewall prevent finding reporting host port vulnerability 
notably absent data regarding non cyber attacks social engineering attacks physical attacks perimeter 
threats real relevant focused efforts data readily obtained automated fashion 
tying generation attack graph data obtained quickly ensures new vulnerabilities discovered evaluated reported early possible minimizing time network exposed attack 
additionally utilize non network specific data 
reachability matrix reachability groups collapsed reachability matrix simple example network needs imported 
data discussed section allow determine impact vulnerability instances reported 
derive core pieces knowledge build attack graph 
host tool know ports host reach 
instance vulnerability tool know required exploit gained exploiting 
vulnerability evaluation addition network specific data system requires additional knowledge vulnerabilities 
identify hosts interfaces ports network pinpointing vulnerabilities 
clearly articulate vulnerability prerequisites attacker gains exploiting 
define straightforward representation model vulnerability prerequisites postconditions 
model vulnerability locality indicating remotely exploitable 
provides effect access levels attacker obtain model root user dos 
known credentials required exploitation considered 
vulnerability model simple available data constrains fidelity 
vulnerability databases bugtraq describe vulnerabilities impacts detail 
unfortunately available data intended human consumption incorrect date 
uses simple logistic regression classifier trained hand evaluated sample set automatically classify vulnerabilities 
details classifier available 
attacker model likewise simple attacker knows vulnerabilities successfully exploit reachable vulnerabilities fullest effect 
worstcase attacker model prevents false negatives requires additional assumptions potential threat 
computing reachability computing reachability complex time consuming task attack graph system applicable real networks obtain reachability information 
reachability computation uses available information network topology filtering devices hosts find paths source hosts target ports 
rulesets filtering devices network imported modeled 
straightforward method compute reachability try reach known target ip address port host network 
approach generate reachability matrix row represents source interface host column represents target port destination interface cell indicates source reach target 
reachability matrix sample network shown 
correct scales poorly terms space time 
improvements straightforward approach 
collapse sections matrix reachability groups saving large amounts time memory 
filtering rulesets collapsed binary decision diagrams bdds allowing reachability system traverse set filtering rules constant time 
hypothesize generic attacker selecting link attacker allowing attacker advantageous source ips 
reachability groups identify redundancies reachability matrix collapse submatrices single computing contents saving time space 
intra subnet reachability influenced filtering devices collapsed single source interface subnet reachability ports subnet 
intra subnet reachability groups sample network shown light grey boxes 
second inter subnet reachability collapsed identifying sets interfaces subnet treated identically filtering devices network 
source ip addresses set interfaces subnet match set filtering rules interfaces grouped reachability computed 
grouping interfaces expensive far expensive recomputing reachability 
inter subnet reachability groups sample network shown dark grey boxes 
reachability groups drastically reduce cost computing reachability matrix 
collapsed reachability matrix sample network shown smaller 
reduction larger sizeable networks larger number interfaces collapse handful reachability groups 
reachability groups reduce number cells computed 
bdds reduce cost computing individual cell 
implementation uses ideas firewall modeler collapse filtering rulesets bdd permitting constant time traversal ruleset 
prototype uses buddy library manipulate bdds 
important consider attacker coming arbitrary source location 
production firewall rulesets large may contain mistakes allowing unintended traffic 
able exercise rules discovering source ip addresses greatest advantage attacker 
tool collects representative ip address ip singleton subnet range rules network uses addresses turn compute reachability attacker starting location 
uncover interesting flaws vulnerabilities network configuration 
sample network graphs feature 
attack graphs easy determine attack paths sample network hand 
attacker host directly compromise hosts attacker traverse firewall compromise host attacker compromise host completing process 
paths monotonic assuming attacker need relinquish state 
assumption monotonicity greatly simplifies task modeling attacker actions papers 
part full graph sample network shown 
nodes correspond states edges vulnerability instances 
full graphs add node graph ancestor node state new node reached vulnerability new node 
conserve space children nodes top level omitted 
full graphs illustrate order attacker compromise hosts network vice versa 
scale quickly large compute network size increases 
predictive graph shown 
nodes edges meanings full graph 
predictive graphs add node graph ancestor current node vulnerability obtain state new node 
avoid redundant structure full graph correctly predict impact removing vulnerability instances network 
predictive graphs faster build full graphs large real networks include redundant structure cases 
example subtrees beneath redundant phenomenon called firewall explosion 

full graph predictive graph multiple prerequisite graph example network predictive graphs unable model credentials 
multiple prerequisite mp graph simple network shown 
mp graph edges node types discussed section 
explicitly represents prerequisites attack 
example prerequisite reachability 
mp graph cycles embed information contained full predictive graphs redundant structure 
credentials build full graph mp graph exploring mp graph depthfirst manner stopping exploration reach vulnerability instance path root current node 
similarly build predictive graph mp graph exploring mp graph breadth manner 
graph construction predictive full graphs attempt actions shown graph 
bottom node full graph example explore prune possible vulnerability reached host mp graph avoids problem evaluating prerequisite ability reach hosts 
full predictive graphs evaluate prerequisite state provides prerequisite 
mp graph shows hosts compromised host attacker compromised 
host example capable compromising host mp graph shows backedges graph types 
take advantage property generate sources targets mp graphs showing malicious action take place host attacker starting location host network 
contains potential attack path network graph useful tools attempting correlate ids alerts known attack paths 
mp attack graph structure maximum number nodes mp graph linearly related source data 
node vulnerability instance state reachability group credential 
maximum number reachability groups proportional number interfaces generally smaller 
mp graph uses node types state nodes represent attacker level access particular host 
outbound edges state nodes point prerequisites able provide attacker 
state nodes circles 
prerequisite nodes represent reachability group credential 
outbound edges prerequisite nodes point vulnerability instances require prerequisite successful exploitation 
prerequisite nodes rectangles 
vulnerability instance nodes represent particular vulnerability specific port 
outbound edges vulnerability instance nodes point single state attacker reach exploiting vulnerability 
vulnerability instance nodes triangles 
node types turn define sole ordering paths graph state provides prerequisites allow exploitation vulnerability instances provide states attacker 
data structures section section cover process constructing mp attack graphs 
examine necessary data may stored memory 
section data efficiently construct mp graph 
data store abbreviations shown table 
input data stored arrays dynamic structures immediately allocated arrays maximum size tractable known 
notation indicate data structure key type value values symbol name credential host interface link node mp graph prerequisite reachability group credential reachability group state host access level target port vulnerability instance table 
data types graph generation type example mapping prerequisite unique node attack graph representing 
data structures dynamically resize represent collapsed reachability matrix discussed section 
worst case size ti actual size tr smaller practice 
reachability group formed placed attacker gained access 
graph nodes edges need represented 
root nodes representing attacker starting locations kept array number known outset 
root nodes states noted structure 
pointers nodes kept edge pointers nodes 
nodes maintain parent child adjacency lists balanced search trees making easy traverse graph determine node specific parent child 
graph construction graph built breadth technique 
node explored node appears graph attacker successfully obtain 
pseudocode process shown 
exception line lines pseudocode straightforward 
discuss line detail type node considered 
state includes credentials state 
state access level user root indicating attacker access system add reachability groups interface state host 
prerequisite reachability group initially vulnerability instance reachability group reach 
determine reachable ports starts root node representing attacker starting state nonempty dequeue nodes reached foreach node add edge brand new enqueue 
pseudocode main loop vulnerability instance re evaluating empty return failure known reachability port foreach cred cred empty return failure unavailable credential 
pseudocode vulnerability prerequisite verification port determine vulnerability instances 
node vulnerability empty verify vulnerability prerequisites satisfied adding 
contains pseudocode verification step 
prerequisite credential initially vulnerability credential 
node vulnerability 
empty perform verification step previous case 
vulnerability instance single state vulnerability instance 
intricate step addition vulnerability instance nodes 
attacker successfully exploit vulnerability reached host attacker access attacker obtained credentials required vulnerability 
pseudocode checks ensure needed prerequisites 
draw edges new vulnerability instance node reachability groups able reach credentials satisfy 
upper bound graph computational complexity obtained observing maximum number nodes fixed 
assume network vulnerability instances ports credentials interfaces reachability groups 
simplicity assume operation transition reachability group prerequisites vulnerability instances costing vc time check reachable vulnerability determine credentials requires 
possible reachability groups computation vr vrc 
typical networks small performance nearly linear network size 
expected worst case performance max rc 
automated graph analysis attack graphs smallest networks large hand evaluation 
considered approaches problem automatic graph simplification automatic recommendation generation 
aims reduce size graph collapsing similar nodes 
treats attack graph intermediate structure final product extracts useful information graph presentation user 
graph simplification mp graph smaller corresponding full graph large number cycles difficult lay coherently 
developed simple algorithm collapse graph nodes simplifying visual presentation 
state nodes combined prerequisites reach prerequisites provided access levels match 
vulnerability instance nodes combined prerequisites necessary exploit collapsed state nodes provide match 
resulting simplified graph shows relationships prerequisites quantity compromise enable 
states collapse followed vulnerability instances vc vd 
simplified mp graph efficiently derived original mp graph 
pass visits nodes edges graph constant number times sort hashes matching criteria discover matches 
resulting complexity lg 
forms graph simplification may prove valuable 
recommendation algorithms visually simplified attack graphs large unwieldy 
core information graph 
field test network extracted tool user immediately useful form 
attacker compromise directly accessible host filtering device order attack group hosts filtering device 
attack graphs identify bottlenecks produce list critical vulnerabilities allow attacker compromise bottleneck hosts 
defenders patch vulnerabilities protect hosts bottleneck 
form recommendations computing individual prerequisite graph vulnerability instances need removed order prevent attacker reaching prerequisite states attacker reach prerequisite absent 
accomplish rebuilding mp graph potential recommendation noting vulnerability instances necessary reach selected prerequisite states longer achievable 
prerequisites may yield identical recommendations 
discard duplicates 
weight recommendations number hosts denied attacker 
user supply host asset values weights prioritize steps protect critical servers 
weighting metrics ratio protected hosts required patches may preferable 
test results applied field test deployment successfully discovered misconfigured firewall 
verified scaling assumptions testing simulated networks 
field test results tested prototype small operational network shown 
network hosts ports vulnerability instances 
credentials modeled 
prototype scans protect hosts patch vulnerabilities host server example gov port tcp function ad 
cve buffer overflow sendmail 
buffer overflow sendmail port tcp remote bind server 

recommendation excerpt field test network links shown copies rulesets firewalls 
field test results computed laptop pentium hz processor gb main memory running linux kernel 
anonymized hostnames ip addresses 
normal network operations computer external network able reach server example gov internal network smtp 
perl frontend converted source data internal binary format 
firewall rulesets scans automatically read interpreted 
vulnerabilities read classified 
entire import stage required seconds 
converted network read stage prototype 
stage computes reachability generates mp attack graph computes automated recommendations creates simplified mp attack graph 
writes graphs disk dot language recommendations text 
attacker hypothesized external network segment network entire time load computation write seconds 
resulting mp graph contains nodes edges 
total filtered unfiltered reachability groups formed 
order evaluate sixteen potential recommendations mp graph rebuilt sixteen times second runtime 
simplified mp attack graph complicated read interpret despite reduction size 
graph contains nodes edges 
attacker starting location upper right 
states represented black nodes prerequisites dark grey nodes vulnerability instances light gray nodes 
list eleven automatically generated recommendations far helpful 
recommendation protects hosts shown 
expected reachability smtp server server example gov external network dns server 
prototype automatically generate complete list port attacker reach attacker get 
discovered misconfigured firewall rule allowed 
simplified mp attack graph field test network nal access hosts inside network port 
rule corrected analysis 
misconfiguration permitted access ip addresses normally 
scan external network internal network discovered scanner source ip addresses able cross firewall 
recomputed results possible starting locations placing attacker ability spoof source ip links allowing hosts initiate attacks 
recommendations generated case 
loading data computing reachability mp graph saving results consumed seconds 
resulting mp graph shows possible compromises network sources targets 
field trial results fuel optimism prototype utility 
working conduct additional field trials larger complicated networks 
simulation test results automated network generator explore scalability prototype 
generator created network sites 
site fairly generic network structure border firewall internal administrative lan multiple internal subnets 
test setup filtering rules border firewall hosts administrative lans internal subnets site 
host open ports 
half remote vulnerabilities half remote root vulnerability remote 
available attack path site outside compromised host administrative lan host vulnerable hosts inside 
collapsed site internal subnets single unfiltered reachability groups 
shows results configuration varying number hosts internal subnets site 
tests performed windows server machine dual ghz xeon processors gb main memory 
prototype single threaded required swap space 
axis elapsed time seconds axis total number hosts network 
plot shows scaling linear expected handles network hosts ports minutes 
able compute sources targets graph host network twelve minutes 
effects different network configurations simulation examined 
results predictive graphs expect equal better performance mp graphs 
related earliest attack graphs done hand 
schneier attack trees designed show multiple attack vectors compromise single target 
approach worthwhile brainstorming set potential attacks single goal target 
schneier example opening safe 
model checking techniques find counterexample asserted security policy 
model checking powerful require monotonicity assumption scales poorly application noted 
explored full attack graphs shown 
full graphs grow combinatorially large networks 
developed algorithm scales roughly capable finding exploits reach specified goal 
jajodia adopt algorithm scans identify vulnerability locations reachability 
proposes discern reachability scanning subnet subnet 
approach may introduce false negatives neglecting reachability unavailable machine running scanner 
algorithm quickly determines worst case attack paths hosts argues report useful analyst penetration tester traditional attack graph 
method may applicable mp graphs time 
approach due ou called uses monotonic logic approach 
requires reachability information produce counterexamples security policy 
results shown imply runtime 
research focused source data required build attack graphs 
propose framework modeling reachability 
uses simpler reachability model decoupled underlying host software vulnerabilities 
levitt prerequisite postcondition model attack components cuppens lambda language example provide detailed models vulnerability attacker action 
aware readily available vulnerability database populated level detail required approaches similarly detailed scanner 
tools useful 
research focus tools explore attack graphs utilize information contain 
noel propose symbolic equation simplifier produce recommendations graphs 
simplified graphs collapsing related nodes transforming results adjacency matrix 
simplified mp graphs serve similar purpose improved visualization remains concern 
attack graphs may form scenarios filter ids alerts 
series alerts matches path attack graph series genuine 
papers explore practical application computation time seconds hosts 
prototype performance simulated networks constructed 
ning identifies method np complete 
address application 
view commercial tool performs attack graph analysis 
patent describes algorithm asserts suggests possible 
patent believe may build variant host compromised graph may report shortest attack paths target 
attack graphs useful tool arsenal network defenders 
vulnerability scanners report large numbers vulnerabilities prioritizing severity isolation 
amount necessary patch identified vulnerability overwhelming 
attack graphs able coalesce large amount source data useful form focusing defenders efforts needed 
attack graphs enable safe evaluation scenarios 
defenders hypothesize new zero day vulnerabilities critical services evaluate impact changing filtering rulesets determine effect adding new computer various locations network 
alterations network defensive posture evaluated implemented 
system able build new graph type multiple prerequisite graph high rate speed enabling defenders quickly evaluate network security 
prototype applied real operational networks straightforward manner data network operators routinely collect 
produces valuable recommendations seconds helping defenders filter thousands vulnerability reports find vulnerabilities matter 
prototype useful current form 
automatically import readily available source data quickly compute network reachability generate mp graph produce useful recommendations 
additional remains 
mp graph capable supporting credentials prerequisites successful attack 
readily available source credential data conducted field trials utilizing 
client side attacks attacker uses malicious server compromise vulnerable client modeled 
recommendation algorithm evaluate effect protecting multiple prerequisites 
new approaches graph visualization simplification may better graph 
obtaining better source data producing better recommendations analyses promises improve system utility 
acknowledgments seth webster doug reviewing prototype design chris scott rob cunningham mike contributions previous versions carrie gates feedback unnamed system administrators helped perform field trial 
bugtraq vulnerability database 
www 
securityfocus com archive 
common vulnerabilities exposures dictionary 
cve mitre org 
graphviz graph visualization software 
www 
graphviz org 
security scanner 
www org 
security www 
com 
street 
approach network attack chaining analysis 
ac sac proceedings st annual computer security applications conference pages 
ieee computer society 
kaushik 
scalable graph network vulnerability analysis 
proceedings th acm conference computer communications security pages 
acm press 

network security planning architecture 
master thesis massachusetts institute technology 

quantitative risk analysis computer networks 
phd thesis dartmouth college 
bryant 
graph algorithms boolean function manipulation 
ieee trans 
comput volume pages 
ieee computer society 
cheung modeling multistep cyber attacks scenario recognition 
proceedings third darpa information survivability conference exposition discex iii pages 
cohen system method risk detection analysis computer network 
united states patent october 
cuppens 
alert correlation cooperative intrusion detection framework 
proceedings ieee symposium security privacy washington dc 
cuppens 
lambda language model database detection attacks 
proceedings third international workshop advances intrusion detection pages 
jajodia noel berry 
topological analysis network attack vulnerability chapter 
kluwer academic publisher 
lind nielsen buddy binary decision diagram library 
buddy sourceforge net 
lippmann validating restoring defense depth attack graphs 
proceedings milcom washington dc 
lippmann evaluating strengthening enterprise network security attack graphs 
technical report mit lincoln laboratory lexington ma 
esc tr 
lippmann 
annotated review past papers attack graphs 
technical report mit lincoln laboratory lexington ma 
esc tr 
national vulnerability database 
nist gov ning xu 
learning attack strategies intrusion alerts 
proceedings th acm conference computer communications security pages new york ny 
acm press 
noel jajodia 
managing attack graph complexity visual hierarchical aggregation 
proceedings acm workshop visualization data mining computer security pages new york ny usa 
acm press 
noel jajodia 
understanding complex network attack graphs clustered adjacency matrices 
proceedings st annual computer security conference acsac pages 
noel jajodia berry jacobs 
efficient minimum cost network hardening exploit dependency graphs 
acsac proceedings th annual computer security applications conference pages 
ieee computer society 
ou appel 
logicbased network security analyzer 
proceedings th usenix security symposium pages 

model checking analyze network vulnerabilities 
proceedings ieee symposium security privacy pages 
berry noel 
representing tcp ip connectivity topological analysis network security 
proceedings th annual computer security applications conference las vegas nv 
schechter jung 
ssh address harvesting 
proceedings th annual network distributed system security symposium san diego ca 
schneier 
attack trees 
dr dobb journal 
computer attack graph generation tool 
proceedings darpa information survivability conference exposition discex ii pages los alamitos ca 
levitt 
requires provides model computer attacks 
proceedings workshop new security paradigms new york ny 
acm press 
wool 
quantitative study firewall configuration errors 
ieee computer pages 
yuan mai su chen 
chuah mohapatra 
toolkit firewall modeling analysis 
proceedings ieee symposium security privacy 
