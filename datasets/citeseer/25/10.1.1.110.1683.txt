implementing reliable digital object archive brian cooper arturo crespo hector garcia molina department computer science stanford university crespo db stanford edu extended version archival repository reliably stores digital objects long periods time decades centuries 
archival nature system requires new techniques storing indexing replicating digital objects 
discuss specialized indexing needs write archive 
reliability algorithm effectively replicating sets related objects 
describe administrative user interface data import utility archival repositories 
discuss evaluate prototype repository built stanford archival vault sav 
keywords archival storage preservation digital objects replication archival repository information stored managed today digital libraries lost years decades special care taken 
causes include media system failures format obsolescence bankruptcy publishers 
stanford implemented prototype archival repository stanford archival vault sav pronounced save long term preservation digital objects 
objects may include documents metadata programs interpreting formats 
repository entirely solve preservation problem believe provides extremely reliable storage infrastructure preserving digital objects hardware software organizations evolve 
implemented tested sav prototype identified unexpected important challenges led modify initial design develop new storage replication techniques 
believe encountered challenges unique system represent fundamental problems faced design type digital library preservation system 
example nature archival repository implies objects preserved erased 
result repository allow users arbitrarily delete overwrite digital objects 
write policy conventional data stores forces manage data differently 
instance consider set object material supported national science foundation award 
contains pointers different materializations document postscript version plain text version 
usual way updating set write new pointer set object delete pointer object 
write policy forbids changes managing collections objects sets requires new storage structures 
furthermore new structures require specifically tailored indexes speed common accesses digital library sets 
second area faced unexpected challenges configuration replication agreements archival repository backup digital objects remote systems enter type agreement remote system regarding objects replicate 
agreements need flexible different arrangements described library may wish backup technical reports trs library addition physics trs backed 
library may turn wish replicate trs site simultaneously replicating materials back 
time important new documents automatically fully incorporated proper agreements human intervention 
instance suppose new physics tr created consisting materializations postscript object plain text object 
soon root digital object tr links components added set physics trs components implicitly added proper agreements automatically backed 
achieving flexibility automation required concepts replication sets annotated links concepts useful archival repository 
discuss challenges implementing sav lessons learned 
describe mechanisms developed archival repository 
problems encountered described domains see section related 
build previously developed techniques necessary new techniques 
specifically contributions identify need index link structure objects pointer index 
discuss important indexes necessary indexes built pointer index 
reliability algorithm replicates digital objects detects corrects corruption objects 
examine annotated links restrict traversals graph purpose conveniently specifying replication sets 
sets reliability algorithm grow implicitly automatic operation system 
describe administrative user interface provides access objects repository low system overhead 
introduce implemented software package migrating real world data web site repository 
experimental performance results sav illustrate efficiency costs techniques describe 
system scales large data sets 
organized follows 
general model archival repository section 
section describe object storage component system 
section discusses reliability layer section examines user interface 
section presents section discusses related 
components archival repository shows architecture prototypical archival repository 
implemented sav follows basic design 
address general principles features form basis archival repository 
specific details sav architecture refer :10.1.1.42.4367
architecture shows distinct components system 
component object store 
component stores indexes digital objects efficiently retrieved modules 
addition object store manages assignment object handles section indexing caching digital objects 
object store built top existing storage system file system dbms 
applications data import export upper layers security reliability layer object store user interface trusted remote sites architecture archival repository 
long term archiving function repository provided manages object replication corruption detection 
layer relies different repository sites usually geographically dispersed store copies objects 
reliability components various sites collaborate detecting missing corrupted information restoring 
assume remote reliability components trusted 
communications trusted reliability components encrypted authenticated standard techniques 
reliability layer configured various ways number sites involved number copies needed object achieve different levels reliability system cost determination appropriate configuration parameters investigated 
upper layers top reliability layer provide additional functionality user security intellectual property management query processing 
upper layers provide programming interface api appropriate information models various applications access repository 
application user interface component allows users view contents repository perform operations 
important application import export utility provides batch migration objects repository digital libraries provide high reliability archive 
focus lower system layers object store reliability ones implemented initial sav prototype 
cover important applications deal directly lower layers 
user interface system administrator section allows view digital objects repository create new objects group semantically related items construct agreements replicate objects 
second application section migrates information standard file system web site repository 
digital objects digital object system consists list fields name value pairs assigned object handle 
model advantage simple powerful store types information 
object handle system efficiently locate object 
handles seldom seen users 
users see human readable names mapped system handles 
example user requesting postscript version tech report may access object handle sav system generates object handles computing signature object contents 
mechanisms assigning handles possible 
describe equally applicable handle protocol 
name value pairs defined creator object generates fields necessary 
fields store content data metadata useful values 
storing object handle value field object creator construct relationship objects 
field represents link objects 
illustrate technical report object include fields names authors title content previous handle 
contain object previous version technical report 
way chain report versions represented archive 
complex data structures trees sets version graphs built object :10.1.1.49.7778:10.1.1.151.8450
data structures may useful described :10.1.1.42.4367
fields required objects 
field handle required field containing handle object check error detection code crc computed remaining fields 
fields possible verify object corrupted object believes 
ar properties order protect digital objects loss time general archival repository enforce certain properties 
deletions policy specifies users capability delete objects archived 
user take object circulation changing access rights different physically erasing repository 
allowing users delete objects dangerous archival system 
intentional deletions introduce ambiguous situations clear missing object deleted user restored lost due error restored 
intentional deletions reliability layer simply restores missing objects leading better long term reliability 
similarly modifications policy prevents users changing archived data 
modification handled creating version chains newer object pointing older object object 
modifications eliminates ambiguous states unclear right instance replicated object restore 
version chains lost corrupted version restored original state 
deletions modifications properties define write archive data written erased 
write policy sav requirement underlying media write schemes see section related write storage 
third property universal handles 
property guarantees object retains handle regardless repositories replicated handle unique repository network 
handle unambiguously identifies single object 
property system explicitly record objects copies greatly increasing chances errors 
universal handles object unambiguously resolved allowing structure graph objects structure set fo retained objects replicated different sites 
universal handles important efficiency benefits example sites quickly determine objects simply comparing lists handles 
object store write policy forces represent related objects way traditional data stores 
illustrate shows set represented 
set may represent collection technical reports set materializations report set replication agreements site see section 
set initially created generating set anchor object 
object added set creating set member represented intermediate object pointing 
member deleted shown adding remove set member object links 
changes recorded adding objects modifying objects 
problem write structures difficult traverse 
instance order find members necessary identify objects point objects set member objects point 
solution scan repository objects looking objects point 
clearly traversal expensive need auxiliary indexes help locate objects interest 
points problem exists domains objects connected directed links hypermedia :10.1.1.27.7665
approach described section important indexes 
indexes need modified stored digital objects enjoy high reliability digital objects 
section discusses special mechanisms ensure correctness indexes 
indexing digital objects critical index handle index maps handles site specific identifier file name locates object 
index best implemented dictionary hash table balanced binary search tree universal handles keys 
index describe incrementally maintained 
new objects created index notified appropriate handle identifier pair added 
handle index universal handles feasible 
site specific information handle handle index forced find object scanning repository objects looking field handle 
important index pointer index gives handles objects link object oi 
example pointer index quickly give handles find members set 
note traditional system pointer index may unnecessary doubly linked archival repository point created 
pointer index essential 
pointer index best implemented dictionary 
convenience pointer index extended list outgoing links object 
possible traverse repository graph structure retrieving objects 
pointer index feasible stored fields section contain tagged 
allows system scan repository objects extract build index 
creator object tag handle fields indicating handle type field names system recognizes containing handles previous earlier example 
third type index object structure index designed record members particular object structure set version chain 
example look set index directly obtain handles 
information obtained pointer index greater cost execution time 
pointer index examine objects point look set member objects follow links members 
set index give list sets properly inverted sets member participates 
space valuable speed indexes eliminated 
example object structure index specialized view pointer index sav query pointer index materialize set index 
handle index folded pointer index especially site specific identifier filename computed handle 
example filename hexadecimal representation handle list handles indexed pointer index equivalent handle index 
pointer index emulate indexes introduce significant efficiency overhead eliminating pointer index expensive reasons discussed 
index materialized pointer index indexes materialized trade space speed 
implications issue context scalability discussed section 
maintaining index consistency indexes important operation repository inherently reliable digital objects 
sense replicate indexes sites achieve reliability 
indexes contain site specific information useful remote sites indexes change updating remote copies expensive 
second indexes updated place prone software errors write digital objects 
steps ensure index errors corrupt underlying digital objects 
step indexes disposable 
means information critical long term survival repository placed index 
words possible time throw away indexes reconstruct correct indexes underlying digital objects 
corollary index information considered hint 
example pointer index tells object points verify looking actual objects performing critical operation information 
disposable indexes corrupted index adversely affect digital objects inconvenient 
example consider set representing available recordings song mp wav midi 
index corrupted index may tell recordings available may give recording different song 
user query check ignore bogus recording easily discover missing recording 
information lost recording objects repository linked 
avoid user important effort ensure indexes consistent uncorrupted digital objects 
ways ensure consistency indexes rebuild scratch periodically discard index completely rebuild objects archive 
rebuild procedure useful objects added bulk data import utility see 
check repair index checked fixed incrementally 
illustrate check repair process consider checking handle index 
object store iterates handles index loads corresponding object disk 
object examined ensure handle matches index reports 
bad index entry referring object deleted new correct index entry added 
note index rebuilding easily discovers objects completely missing index check repair task verify existing entries index 
hand check repair allows index available continuously index created rebuild task available rebuild complete 
course old possibly corrupted index serve requests new index built 
implemented sav system indexes kept main memory rebuilt scratch system startup 
rebuilt prompting user predefined intervals 
check repair mechanism added 
performance measurements evaluate overhead building indexes conducted experiments sav prototype running gateway mhz pentium iii mb ram mb swap red hat linux 
sav implemented java measurements version 
digital objects containing real documents stanford database group web site stored archive 
object sets different sizes tested order assess scalability 
smallest set contained objects gb total data largest contained objects gb total data 
set average object size kb 
comparison largest data set gb represents archived contents approximately average sized web sites 
results shown 
lines performance object store 
represent tasks required rebuild handle pointer set indexes 
tasks read objects disk solid line compute detect corruption dotted line index objects dashed line 
times scale linearly size archived data set 
complete index building operation requires average milliseconds archive object seconds gigabyte time dominated disk read crc computation 
high overhead disk read crc computation mitigated fact indexes rarely rebuilt sav operations avoid costs indexes built 
scheme validates indexes examining actual objects disk incur costs system unusual stanford database group web site contains times web pages average site reported 
small data set gb contains archived contents group site larger sets produced repeatedly archiving group site produce slightly different objects 
respect 
course cost build indexes scales linearly cost may significant large archives 
solution rebuild type index different time 
solution partition repository smaller sets separate times 
spread rebuilding time 
scheme mechanism deal object cross partitions querying indexes partitions simultaneously 
reasonable ask objects indexed indexes longer fit main memory 
measured object size indexes bytes handle index bytes pointer index bytes set index 
assume save space pointer index materialized discussed section 
dedicated mb ram indexes sav index objects gb archived data larger archives ram purchased index stored disk efficiently accessed known techniques 
reliability layer described section replication layer backs objects remotely detects lost corrupted objects restores state necessary 
challenge develop flexible mechanisms determining sites participate replication agreements objects backed 
addition need efficient mechanisms checking restoring information 
section describe techniques algorithms developed sav prototype implemented believe suited archival repository 
example shown illustrates basic replication steps follow 
replication process begins replication agreement created sites stanford example 
object identifies sites participate stanford mit berkeley objects replicated 
assume simply contains pointers objects replicate 
objects initially exist stanford stanford conducts site check 
stanford site contacts mit site discovers mit know agreement objects replicated mit 
similarly objects copied berkeley 
sites begins cycle repeated site checks connecting sites comparing snapshots 
long errors snapshots agree 
consider situation lost stanford due disk failure 
site perform site check large repository may compression save disk space 
described earlier reliability layers site trust willingly take agreements objects 
clearly created stanford checked sites see storage capacity arrange payment service 
stanford berkeley mit stanford replication network berkeley notice missing copied back stanford site 
replication networks example illustrates strongly connected replication network 
sites holding copy knows sites site contacts site site check 
sites network site check contact sites 
structure recorded including complete list sites agreement 
structures possible 
example weakly connected network site connected sites 
topography structure cycle tree structure 
strongly connected network advantage site check connects site means new objects quickly replicated sites 
contrast weakly connected network allows site connect fixed number remote sites number sites network grows 
fewer sites contacted site checks take time performed frequently 
decreases interval occurrence failure detection correction error 
weakly connected network links sites separate replication agreements listing sites link 
order construct weakly connected replication networks necessary different agreements site include digital objects 
capability features snapshot construction algorithm described section 
constructing snapshots replication set suggested agreement point covered objects 
clearly idea add objects agreement 
digital object modified 
alternative treat agreement object set anchor object connected set member object covered 
example cover 
please ignore different types pointers 
flexible new objects explicitly linked 
mit example replication sets 
solution recursively define covered objects terms link structure repository 
illustrate suppose wish cover versions technical report agreement 
different versions report 
vn related version chain version vi points previous version vi 
initially version added 
created need explicitly added 
replication algorithm implicitly include path 
versions created implicitly included 
replication set includes objects recursively reachable backwards links count 
set 
illustrate consider agreements 
replication sets connected blindly include linked replication set include set 
agreements overlap objects may act bridges connect 
instance object bridge object 
object may written author example 
solution annotate repository links indicate traversed building replication sets 
links ones traversed 
links replication shown dotted lines 
links ones traversed direction arrow avoid merging replication sets 
links shown dashed lines 
computing replication set reach 
similarly computing set reach 
summary concept graph annotated links 
graph link annotated ways 
way recursive link traversed replication set traversal 

way recursive links traversed direction link replication set traversal 

non recursive link traversed defining replication set 
annotated type link specified link object containing link created 
example shown serve template determining links marked 
desirable change annotation link created replication set traversal algorithm extended allow annotations links modified administrator 
modifications written objects modifications represented version chains traversal algorithm designed consider current version link deciding traverse 
example generally applicable strategy representing modifications version chains modifying digital objects 
link annotations domains halasz schwartz describes hypertext domain :10.1.1.27.7665
technique similar annotations restrict graph traversals 
goal hypertext systems facilitate human navigation goal automate process discovering subgraphs replication sets larger graphs entire object structure repository 
annotations determine direction link denoting object parent object child annotations describe interpret direction :10.1.1.27.7665
see section 
detecting object corruption site periodically constructs snapshot replication set known agreement 
snapshot includes handles non corrupted objects part agreement 
snapshots compared corresponding ones remote sites 
easy see object corrupted 
example attempt read object disk results error corruption clearly 
addition reliability layer detect obvious corruption exists object read disk contains incorrect information 
type corruption detected comparing object value see section freshly recalculated error detection code current contents object 
snapshot construction algorithm follows 
list called snapshot created initially empty 

search stack created handle replication agreement 

handle popped search stack object identifies current object 
objects representing replication agreements form part implicit agreement sites 
agreement object lost site recovered site 
performance reliability layer 

current object checked corruption comparing recalculated error code value check stored object 
current corrupted object ignored algorithm returns step 
current corrupted algorithm continues 

handle current object added snapshot list 

links pointing current traversed pointer index traversal conforms annotation link 
traversing links produces set objects 
handle objects added search stack object seen infinite loops avoided 

handles search stack algorithm returns step 
snapshots created sites remote site sends snapshot local site local site performs comparison 
handles missing locally represent objects retrieved remote site handles missing remotely represent objects sent remote site 
current implementation performs comparison storing local replication set red black balanced binary tree searching tree handle remote set 
process requires nlog time handles performance ramifications growth discussed section 
performance measurements order evaluate performance reliability layer conducted experiments sav prototype 
performed reliability algorithm data sets described section different sav instances running identical machines connected mbit ethernet 
measurements shown 
solid line represents time construct snapshot particular repository site 
process repeated local remote sites site check snapshot construction different sites run concurrently 
snapshot construction time scales linearly repository size represents incremental duration microseconds object seconds gigabyte 
snapshot comparison time dotted line increases nlog discussed 
non linearity inconsequential implementation examines object disk corruption site check cost dominates time compare snapshots orders magnitude 
examination corruption done lazily site checks comparison time consume larger fraction site check time experiments 
nonlinear growth comparison time hinders performance scalability substitute scheme time grew linearly example inserting handles hash table binary tree 
amount time send snapshot site microseconds object milliseconds gigabyte shown dashed line 
various optimizations possible slow networks large repositories 
example remote site compute signature crc handles snapshot 
sending entire snapshot remote site sends single number 
local site computes signature snapshot compares signatures 
signatures match snapshots 
signatures match snapshots subdivided signatures computed subdivision local site determine differences snapshots 
optimization described detail :10.1.1.49.2580
possibility perform snapshot construction comparison incrementally period days 
example sites start traversal day descend certain number levels breadth traversal replication set objects 
produce partial snapshots sites compare 
sites exchange objects missing partial snapshots 
day sites descend traversal produce partial snapshot 
eventually sites reach traversal point partial snapshots produced equivalent complete snapshot 
process repeat day 
way small amount bandwidth utilized day 
scheme require mechanism dealing new objects added day 
objects included appear partial snapshot added 
alternatively excluded snapshot process restarts 
user interface current sav prototype includes administrative user interface lets manager examine modify repository 
general goals interface follows sets view 
user able locate specific digital objects repository repository contains objects 

user able easily perform objects grouping related objects sets view topology object structures 

user easily able set configuration parameters system 
includes defining replication agreements 

interface module significantly detract performance rest system 
best way achieve goals provide specialized types views repository objects view general view display object archive 
structure views views display common objects structures sets version chains 
configuration views views allow user configure system replication agreements 
sav prototype currently includes different views extended include 
due space limitations section briefly illustrate views 
complete discussion covers performance issues related user interface please see :10.1.1.49.2580:10.1.1.110.1683
screen shot set interface example structure view java implementation 
objects participate sets viewed generic interface shown set interface especially tailored show sets members clearly 
set view sets members shown 
set represented stacked document icon set member represented single document icon 
default view shows sets repository agreements view descriptive string 
filter window bottom restrict sets shown regular expressions 
set objects expanded clicking icon show set members 
members set set expanded show members 
view button left lets view contents label value pairs selected digital object 
separate specialized view window opened 
structure view specific particular object structure interface constructing particular structure 
shows create set button create new set add document button add object existing set 
refresh button similar reload button web browser forces interface driver get fresh information repository 
decoupled interaction interface repository unnecessary repository continuously update display 
menus top window provide additional functionality discussed 
example configuration view shown 
replication agreement interface lets administrators create configure agreements 
default display replication agreement view list active agreements 
agreement expanded view list sites agreement replication set 
replication sets defined recursively section interface allows objects replication set expanded reveal linked objects 
way user manually examine graph automatically traversed reliability algorithm 
individual objects viewed view button individual agreements currently objects contain field describes role 
field object description view 
filter window searches fields 
filter field 
create agreement add site add document buttons administrator enter new agreements add sites objects 
developing sav discovered sad fact archival repositories users want deposit digital objects archival repository form digital library matter 
perfectly happy objects residing conventional file systems web servers favorite editors tools 
job ensure objects available generations years 
preservation job librarian needs tools capture important objects way require active participation users course requires user consent 
describe section represents tool goal provide automated way migrate data archive 
serves bridge repository sav existing environment digital objects reside 
example environment web site scenarios 
users continue create edit access web pages standard tools text editors 
tracks files representing web pages decides objects archived 
addition monitors changes files translating changes repository updates 
hardest challenges faced deciding interpret changes web site 
example suppose web page modified 
modifications allowed repository action automatically translated creation new version corresponding digital object 
web page deleted final version added repository indicating web page removed 
changes web site file structure carefully analyzed determine impact archived objects 
instance web page moved location action interpreted deletion followed insertion interpreted new version web page properties file name changed 
offers administrative user interface analogous described section 
interface administrator define portions web site archive setting filters examine archived objects map web site files 
interface offers historical view archived objects viewed time 
administrator restore web site files repository objects 
offers fairly automated way archive approach contrasts tools build linked object databases collaborative authoring tools devise require encourage human interaction 
set file file set file file filter filter filter creates data structure sav 
web site 
web users need perform explicit saves repository pages safely archived 
illustrates represents web pages digital objects 
left hand side structure mimics target file structure right side represents selection filters data 
top level directory added replication agreement entire structure replicated repository sites 
initially structure created bulk load utility scans web site 
utility acquire data sets experiments sections 
perform types periodic checks track web site quick slow 
quick scan compares timestamps files archived objects detect new modified files 
timestamps unreliable slow scan compares contents files archived content 
case changes observed appropriate objects added archival repository 
implemented part sav prototype 
currently archive files gb group web site 
additional details performance numbers available :10.1.1.42.4367:10.1.1.49.2580
related digital library community begun focus problem designing implementing long term archives 
projects focused building archives including computing research repository archival intermemory project electronic records strategy :10.1.1.26.6437
projects focused different archive architectures sav design discuss information discovery preservation focus efforts 
san diego supercomputer center examined indexing digital archives standpoint metadata infrastructure useful document discovery mechanism upper layers mentioned section 
internet archive building collection archived web pages far addressed problem preservation 
archiving problem related problem increasing reliability file systems 
traditional solution data backup :10.1.1.31.7765
commercial hierarchical replication systems automatically backup reliably store data 
backup problem focuses shorter durations archiving problem 
users backup systems usually interested restoring current version data archives responsible storing versions 
approach redesign file system incorporate reliability features 
idea redundant arrays inexpensive disks raid disk failures overcome 
suggested logs improve aspects file system including reliability :10.1.1.117.5365
example clio log file system archives data write storage 
systems serve data storage component object store layer section 
related area problem maintaining consistency nodes replicated databases 
done designing algorithms propagating data replicate 
systems focus systems allow updates deletions objects 
archival repositories allow digital objects modified erased require different approaches 
similarly filesystems replication locus harp zebra focus providing high availability fault tolerance frequently accessed filesystems 
focus long term reliability data may archived decades accesses 
issues discuss hypermedia systems :10.1.1.27.7665
problems similar hypermedia systems focus presentation objects storage objects cope inconsistencies due modifications deletions 
result general solutions tend similar annotating links restrict graph traversals details implementation differ 
discussed issues arise implementing reliable archival storage system 
discussed issues perspective sav design relevant construction reliable archive 
discussed solutions defining indexing digital objects repository 
discussed efficient algorithms replicating objects multiple sites different replication networks building comparing snapshots repository contents corruption detected 
algorithms allow set replicated objects grow implicitly intervention human 
described applications interface sav 
administrative user interface monitoring controlling sav 
second tool automatically importing tracking information outside repository 
sav prototype demonstrates reliable archive built operate efficiently interact effectively outside world 

internet archive 
internet archive building internet library 
www org longterm index html 

howard 
information longevity 
sunsite berkeley edu longevity 

yuri breitbart raghavan rajeev rastogi seshadri avi silberschatz 
update propagation protocols replicated databases 
proceedings acm sigmod conference 

yuan chen jan andrew goldberg allan gottlieb peter yianilos 
prototype implementation archival intermemory 
proceedings fourth acm dl conference 

ann chervenak zachary 
protecting file systems survey backup techniques 
proceedings joint nasa ieee mass storage conference march 

brian cooper arturo crespo hector garcia molina 
implementing reliable digital object archive 
www db stanford edu pub papers ps 
extended version 

brian cooper hector garcia molina 
unobtrusively archiving world wide web server 
www db stanford edu pub papers ps 
technical report 

ibm 
distributed storage manager adsm distributed data recovery white www storage ibm com storage software adsm htm 

inktomi 
web surpasses documents 
www inktomi com new press html 

arturo crespo hector garcia molina 
awareness services digital libraries 
lecture notes computer science volume 

arturo crespo hector garcia molina 
archival storage digital libraries 
proceedings third acm dl conference 

arturo crespo hector garcia molina 
modeling archival repositories digital libraries 
stanford edu pub papers ps 
technical report 

jean 
writ water 
exploration gap archival construct practice machine readable environment 
working conference may 
accessible www slac stanford edu pubs slac pub html 

ross finlayson david cheriton 
log files extended file service exploiting write storage 
proceedings th symposium operating systems principles november 

national science foundation 
workshop data archival information preservation executive summary 
cecs missouri edu html 

hector garcia molina jeff ullman jennifer widom 
database system implementation 
prentice hall upper saddle river new jersey 

john garrett donald waters 
preserving digital information report task force archiving digital information may 
accessible www org 

andrew goldberg peter yianilos 
archival intermemory 
advances digital libraries 

randall trigg 
design issues dexter hypermedia system 
communications acm february 

research libraries group 
long term retention digital research materials 
www org longterm index html 

anja haake david hicks 
verse hypertext versioning styles 
hypertext 

frank halasz mayer schwartz 
dexter hypertext model 
communications acm february 

joseph halpern carl lagoze 
computing research repository promoting rapid dissemination archiving computer science research 
proceedings fourth acm dl conference 

john hartman john ousterhout 
zebra striped network file system 
proceedings th symposium operating systems principles december 

norman hutchinson stephen manley mike guy harris dave hitz steven kleiman sean malley 
logical vs physical file system backup 
proceedings third usenix symposium operating systems design implementation osdi 

tivoli systems tivoli storage manager 
www tivoli com products index storage mgr 

unitree software unitree technical overview 
www unitree com overview overview htm 

getty conservation institute 
time bits managing digital continuity 
www com 

richard king hector garcia molina christos 
management remote backup copy disaster recovery 
tods 

barbara liskov sanjay ghemawat robert gruber paul johnson shrira michael williams 
replication harp file system 
proceedings th symposium operating systems principles october 

stanford conservation online 
electronic storage media stanford edu electronic storage media 

david patterson garth gibson randy katz 
case redundant arrays inexpensive disks raid 
sigmod record september 

michael rabinovich gehani alex 
efficient update propagation epidemic replicated databases 
proceedings th international conference extending database technology 

rajasekar richard reagan moore 
persistent archives 
www sdsc edu nara publications persistent persistent html 

mendel rosenblum john ousterhout 
design implementation log structured file system 
proceedings th symposium operating systems principles october 

david rosenthal reich 
permanent web publishing 
lockss stanford edu 
appear freenix san diego ca june 

jerome saltzer 
technology networks library year 

editors tendencies computer science control applied mathematics 
proceedings international conference occasion th anniversary inria pages new york 
springer verlag 

schloss stonebraker 
highly redundant management distributed data 
proceedings workshop management replicated data pages 
ieee ieee computing society november 

electronic records strategy 
electronic records strategy final report 
home net au vers final htm 

walter tichy 
rcs system version control 
software practice experience 

bruce walker gerald popek robert english charles kline greg thiel 
locus distributed operating system 
proceedings th symposium operating systems principles october 

jacob ziv abraham lempel 
universal algorithm sequential data compression 
ieee transactions information theory 
