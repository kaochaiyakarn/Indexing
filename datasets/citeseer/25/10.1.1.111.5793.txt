spudd stochastic planning decision diagrams jesse hoey robert st aubin alan hu craig boutilier structured methods solving factored markov decisions processes mdps large state spaces proposed allow dynamic programming applied need complete state enumeration 
propose examine new value iteration algorithm mdps uses algebraic decision diagrams adds represent value functions policies assuming add input representation mdp 
dynamic programming implemented add manipulation 
demonstrate method class large mdps states show significant gains compared tree structured representations fold reduction number nodes required represent optimal value functions 
markov decision processes mdps semantic model choice decision theoretic planning dtp ai planning community 
classical computational methods solving mdps value iteration policy iteration effective small problems typical ai planning problems fall prey bellman curse dimensionality size state space grows exponentially number domain features 
classical dynamic programming requires explicit enumeration state space typically infeasible feature planning problems 
considerable effort devoted developing representational computational methods mdps obviate need enumerate state space 
aggregation methods aggregating set states treating states aggregate state identical 
ai abstraction techniques widely studied form aggregation states implicitly grouped ignoring certain problem variables 
methods automatically generate mdps exploiting structured representations probabilistic strips rules dynamic bayesian network dbn representations actions 
department computer science university british columbia vancouver bc canada ajh cs ubc ca describe dynamic abstraction method solving mdps algebraic decision diagrams adds represent value functions policies 
adds generalizations ordered binary decision diagrams bdds allow non boolean labels terminal nodes :10.1.1.1.5124
representational technique allows describe value function policy function variables describing domain classical tabular way 
decision graph represent function extremely compact implicitly grouping states agree value different points dynamic programming computation 
number expected value computations required dynamic programming greatly reduced 
algorithm described derives structured policy iteration spi algorithm decision trees represent value functions policies 
dbn action representation decision trees represent conditional probability tables decision tree representation reward function spi constructs value functions preserve dbn structure 
unfortunately decision trees compactly represent certain types value functions especially involve disjunctive value assessments 
instance proposition describes group states specific value decision tree duplicate value times spi value computed times 
furthermore proposition describes single value identical subtrees involving variables entire subtrees duplicated 
decision graphs offer advantage identical subtrees merged 
demonstrate offers considerable computational advantages certain natural classes problems 
addition highly optimized add manipulation software implementation value iteration 
remainder organized follows 
provide cursory review mdps value iteration section 
section review adds describe add representation mdps 
section describe conceptually straightforward version spudd value iteration algorithm uses add value function representation describe key differences spi algorithm 
describe optimizations reduce time memory requirements spudd 
ical results class process planning examples described section 
able solve large mdps exactly states show add value function representation considerably smaller corresponding decision tree instances 
illustrates natural problems type disjunctive structure exploited decision graph representations 
conclude section discussion adds dtp 
markov decision processes assume domain interest modeled fully observable mdp finite set states actions actions induce stochastic state transitions denoting probability state reached action executed state assume real valued reward function associating state immediate utility stationary policy describes particular course action adopted agent denoting action taken state assume agent acts indefinitely infinite horizon 
compare different policies adopting expected total discounted reward optimality criterion rewards discounted rate value policy expected total discounted reward accrued 
expected value policy state satisfies policy optimal policies 
optimal value function value optimal policy 
value iteration simple iterative approximation algorithm constructing optimal policies 
proceeds constructing series stage go value functions setting define sequence value functions produced value iteration converges linearly optimal value function finite actions maximize equation form optimal policy approximates value 
commonly stopping criterion specifies termination iteration procedure denotes supremum norm 
ensures resulting value function optimal function state resulting policy optimal 
ignore actions costs ease exposition 
impose serious complications 
adds mdps algebraic decision diagrams adds generalization bdds compact efficiently manipulable data structure representing boolean functions :10.1.1.1.5124:10.1.1.1.5124
data structures extensively vlsi cad field enabled solution larger problems previously possible 
section describe data structures basic operations show mdp representation 
algebraic decision diagrams bdd represents function boolean variables boolean result 
bryant introduced bdd current form general ideas quite time branching programs theoretical computer science literature :10.1.1.1.5124
conceptually construct bdd boolean function follows 
build decision tree desired function obeying restrictions path root leaf variable appears path root leaf variables appear order 
apply reduction rules possible merge duplicate label children nodes child pointers node point child delete node redundant parents node pointing directly child node 
resulting directed acyclic graph bdd function 
practice bdds gen erated manipulated fully reduced form building decision tree 
adds generalize bdds represent real valued functions add multiple terminal nodes labeled numeric values 
formally add denotes function follows 
function terminal node constant function number labelling terminal node 

function nonterminal node labeled boolean variable boolean values viewed functions adds rooted children node 
bdds adds useful properties 
variable ordering distinct function unique reduced representation 
addition common functions represented compactly sharing 
furthermore efficient algorithms depth search hash table reuse previously computed results exist common operations addition multiplication maximization 
example shows computation maximum adds 
bdds adds describing common variety bdd 
numerous variations exist literature 
max key true false max simple add maximization example extensively domains efficient implementations readily available 
see properties adds ideal candidate represent structured value functions mdp solution algorithms 
add representation mdps assume mdp state space characterized set variables values variable denoted lowercase 
assume boolean required add formalism discuss multi valued variables section 
actions naturally described having effect specific variables certain conditions implicitly inducing state transitions 
dbn action representations exploit fact specifying local distribution variable describing probabilistic impact action variable 
dbn action requires sets variables set referring state system fore action executed denoting state executed 
directed arcs variables variables indicate direct causal influence usual semantics con ditional probability table cpt post action variable effect instantiation par defines conditional distribution ents 
viewed function function value distribution depends parents quantification pro vided pre action variables process fully observable need dbn predict state transitions 
require dbn action order illustrate representation algorithm introduce simple adaptation process planning problem taken 
example involves factory agent task connecting objects illustrates representation action bolt parts 
see parts successfully connected depends number factors independent state variable painted 
contrast part depends 
standard locally exponential tabular repre ignore possibility arcs post action variables disallowing correlations action effects 
see treatment dynamic programming correlations exist 
sentation cpts adds capture regularities cpts represent functions 
type representation exploits context specific inde distributions related tree representations rule representations cpts dbns :10.1.1.16.1782
illustrates add representation cpt variables distribution function parent variables function exhibits considerable regularity readily apparent inspection table exploited add 
specifically distribution formula ignore zero entries 
similarly add corresponds reward functions represented similarly 
shows add representation reward function simple example agent rewarded objects connected painted smaller reward objects connected painted reward parts connected 
reward function simply example action illustrates type structure exploited add representation 
specifically cpt clearly exhibits disjunctive structure variety distinct conditions give rise specific probability successfully connecting parts 
add internal nodes leaves tree representation cpt requires internal nodes leaves 
see additional structure exploited value iteration 
note standard matrix representation cpt requires parameters 
adds compact trees representing functions case 
ordering requirement adds means certain functions require exponentially larger add representation chosen tree similarly adds exponentially smaller decision trees 
initial results suggest pathological examples arise problem domains see section adds offer advantage decision trees 
value iteration adds section algorithm optimal policy construction avoids explicit enumeration state space 
spudd stochastic planning decision diagrams implements classical value iteration uses adds represent value functions cpts 
exploits regularities action reward networks apu apu pl pl adr bdr bo adr bdr bo apu apu pl apu adr bdr bo matrix representation pl adr apu apu bdr add representation bo reward reward network key true false small factory example action network action bolt add representation cpts action diagrams immediate reward network add representation reward table 
explicit add representation described previous section discover regularities value functions constructs 
yields substantial savings space computational time 
introduce algorithm conceptually clear way describe certain optimizations 
obdds explored previous ai planning universal plans policies generated nondeterministic domains 
motivation avoiding combinatorial explosion associated state space enumeration similar details algorithms representation represent planning domains quite different 
basic spudd algorithm spudd algorithm shown implements form value iteration producing sequence value functions termination condition met 
stage go value function represented add denoted value function obvious add representation 
key insight underlying spudd exploit add structure mdp representation discover appropriate add structure expected value calculations performed terminal node new add state 
add step spudd produces computing viewed rep values states suitable action performed stages remaining 
variables function replaced primed post action coun step referring state stages prevents confused unprimed variables refer state stages go 
shows zero stage go primed value diagram simple example 
action compute add representation function denoting expected value performing action stages go dictates stage go value 
requires steps described 
note add represented functions taken action network give conditional probabilities variables true action fit add framework introduce negative action diagrams gives probability define dual action diagrams rooted true branch action diagram false 
add false branch negative action diagram intuitively denotes action 
shows dual action diagram variable example 
order generate state com stage go value state probability reaching multiplying turn dual action diagrams variable 
set immediate reward diagram set 
create dual action diagrams 
repeat swap variables set primed variables primed versions create set sum sub diagrams primed variable multiply result discounting factor add obtain maximize increment repeat create 
perform iteration assign terminal node actions contributed value value add node yields optimal policy add note terminal nodes values multiple actions assigned possible actions 
return value diagram spudd algorithm optimal policy eliminating summing values resultant add 
precisely multiplying obtain function assuming transitions induced action 
intermediate calculation illustrated dual diagram variable multiplied note lies root add 
func tion obtained eliminate dependence value specific value expectation truth values 
done summing left right subgraphs add leaving function illustrated variable eliminated 
add denotes expected value stage go value function parents stage go post action variables stages go 
process repeated post action variable occurs add multiply intermediate value add eliminate variable expectation values 
primed variables eliminated left function independence assumptions embodied action network precisely expected value performing action adding reward add function obtain add representation shows result simple example 
remain ing primed variable removed producing discount factor take maximum actions produce diagram 
adds requires simply construct add representing stopping criterion equation implemented comparing pair successive adds value function converged optimal policy policy add extracted performing dynamic programming backup assigning terminal node actions produced value 
terminal node represents state set states set actions determined optimal optimizations algorithm described section shown suffers certain practical difficulties necessary introduce various optimizations order improve efficiency respect space time 
problems arise step multiplied dual action diagrams po primed variables add un primed variables add intermediate step diagram created potentially variables 
case general deemed necessary modify method order deal possibility problem arising 
furthermore large computational overhead introduced re calculating joint probability distributions primed variables iteration 
section discuss optimizations dealing space followed method optimizing computation time 
increase diagram size step algorithm countered approaching multiplications sums slightly differently 
blindly mul dual action diagram variable root traverse add level variable add ordering multiply sum sub diagrams rooted variable pl adr primed value diagram apu bdr bo pl adr apu bdr dual action diagram pl pl multiply diagrams apu apu sum bo bo bdr adr adr bdr bo bellman backup value iteration adds algorithm 
stage go primed value diagram quantifying 
intermediate result dual action diagram variable bo apu bdr pl adr pl adr apu bdr intermediate result multiplying bo resulting stage go value diagram action bolt corresponding dual diagram 
process remove dependency primed variable branch introduce single diagram unprimed variables leaf node recursively carrying procedure structure add intermediate stages grow large 
essentially additional unprimed variables introduced specific points add corresponding primed variable immediately eliminated tree structured dynamic programming algorithm 
unfortunately method requires great deal unnecessary repeated computation 
action diagrams bo problem change generation policy joint probability distribution equation pre computed 
case means take product dual action diagrams action shown equation prior specific value iteration 
refer product diagram complete action diagram action apu bdr pl adr pl adr apu bdr provides representation bo resulting function state transition probabilities action explicit function multiplied step algorithm primed variables eliminated 
may lead substantial savings computation time generate diagrams variables 
compromise implemented method space time trade addressed explicitly 
tuning knob enables user find middle ground methods mentioned 
accomplish pre computing subsets complete action diagram 
break large diagram smaller pieces 
set variables di vided subsets preserving total ordering complete action diagrams pre computed subset 
step algorithm modified shown 
primed value diagram traversed top second level procedure carried re sub diagram rooted variables level reached variables rooted variable multiplied 
set user specified limit size graphs set add constant set 
number variables 
repeat set 
internal nodes 
set call procedure sum sub diagrams primed variables tree rooted branches resp 
return result modified spudd algorithm corresponding subset complete action dia gram summed primed variables way diagrams kept small making sure elimination occurs balance effects multiplying complete action diagrams 
space time requirements controlled number subsets complete action diagrams broken 
theory subsets smaller space requirements larger time requirements 
able produce substantial changes space time requirements algorithm tuning knob effects unclear 
choose subsets variables simply building complete action diagrams variable ordering reach user defined size limit point start subset 
note space time tradeoff bears resemblance space time tradeoffs arise probabilistic inference algorithms variable elimination 
implemented heuristics variable ordering simple ordering methods improve space efficiency 
instance order variables primed variables shared parents eliminated number unprimed variables introduced kept relatively small relative number primed variables eliminated 
importantly develop refined heuristics keep adds small minimizing number variables introduced 
revised procedure small inefficiency results section show 
pre computing subsets complete action diagrams variables included domain relevant solution included pre computed diagrams 
increase size intermediate representations add overhead computation time 
important able discard compute policy variables relevant value function policy 
possible way deal types variables algorithm progressively build complete action diagrams iterative procedure 
way variables relevant domain added 
data results procedure described implemented package library routines provides support manipulation adds 
experimental results described section obtained sun sparc ultra running mhz gb ram single processor 
spudd algorithm tested different types examples type having mdp instances different numbers variables wide variety state space sizes 
example class consists various adaptations process planning problem taken 
second third example classes consist synthetic problems taken :10.1.1.158.8490
designed test best worst case behavior spudd example class consists process planning problems taken involving factory agent paint objects connect 
objects smoothed shaped polished possibly painting actions require number tools possibly available 
various painting connection methods represented having effect quality job requiring tools 
final product rewarded kind quality needed 
rewards range discounting factor 
examples described section designed structure mind taken advantage add representation 
original problem specification ternary variables represent painting quality object poor false connection quality bad false 
discussed adds rep data problems web page www cs ubc ca spider spudd index html 
resent binary variables ternary variable expanded binary ones 
example variable connected describing type connection objects represented boolean variables connected connected 
expansion enlarges state space factor ternary variable expanded introducing unreachable states 
number factory examples devised state space sizes ranging 
optimal policies generated spudd structured policy iteration spi implementation comparison purposes 
results displayed table spudd running factory examples spi running 
spi run factory example estimated time space requirements exceeded available capacity 
spi implements modified policy iteration trees represent cpts intermediate value policy functions 
spi allow multi valued variables versions example tested spi ternary variables binary expansion 
table shows number ternary variables example total number variables 
state space sizes factory example shown original binary expansion formulations 
spudd run binary expanded versions 
examples labelled factory factory differ single binary variable affected action domain affect variables 
number internal nodes resulting table identical examples 
variable added order show structured representations spudd spi effectively discard variables affect problem hand discussed section 
spudd pre computes complete action diagrams shown running time spudd doubles new variable added creates overhead iterative procedure 
problem circumvented method described section 
running times shown spudd spi 
algorithms lend easily comparisons running times implementation details cloud results running times discussed 
spi results shown order compare sizes final value function representations give indication complexity policy generation algorithms 
question arises comparing numbers variable orderings mentioned section 
variable ordering spudd chosen prior runtime remains entire process 
special techniques choose ordering may argued orderings gleaned mdp specification 
variable orderings branches tree structure spi algorithm determined primarily choice ordering reward function action descriptions 
special techniques choose variable ordering spi 
finding optimal variable orderings case difficult problem assume algorithm advantage regard 
dynamic reordering algorithms available implemented fully tested spudd see 
order compare representation sizes compare number internal nodes value function representations 
important doing dynamic programming back steps large factor determining running time space requirements 
furthermore compare numbers spudd binary representations numbers spi binary ternary representations order disadvantage spi ternary variables 
compare implementations binary variables 
equivalent tree leaves column table gives number leaves totally ordered binary tree number internal nodes results expanding value add generated spudd 
numbers give size tree generated total ordering imposed 
comparing numbers numbers generated spi give indication savings occur due relaxation total ordering constraint 
rightmost column table shows ratio number internal nodes tree representation number add representation 
see reductions times possible comparing binary representations binary ternary representations reductions times comparing binary representations 
space savings showed amount memory 
example factory example took mb memory spi mb spudd 
factory example took mb space spudd 
limit see set factory factory factory factory examples factory factory examples 
limits broke complete action diagrams pieces typically nodes second nodes third existed 
large examples factory possible gb ram generate full complete action diagram running times large bi set 
functionality tuning knob fully investigated studies different heuristics variable grouping interesting avenue exploration 
comparison purposes flat unstructured value iteration run factory factory examples 
times taken problems seconds respectively 
larger problems memory limitations precluded completion flat algorithm 
order examine worst case behaviour tested spudd series examples drawn state unique value add representing value function number terminal nodes exponential number state variables :10.1.1.158.8490:10.1.1.158.8490
problem involves ordered propositions actions proposition 
action corresponding proposition true causes propositions lower order false 
reward variables true 
problem representable space adds optimal policy winds entire state space binary counter 
example state space size spudd value spi value ratio name variables states time internal leaves equiv 
time internal leaves tree nodes ternary total nodes tree nodes add nodes leaves factory factory factory factory factory factory problem causes worst case behaviour spudd states different values 
spudd tested example variables leading state spaces sizes respectively 
initial reward discounting factor examples scaled accommodate step look ahead largest problem variables set respectively compares running times spudd flat value iteration plotted log scale function number variables 
running times algorithms exhibit exponential growth number variables expected surprising flat value iteration performs better type problem absolutely structure exploited spudd 
overhead involved creating adds overly severe tends diminish problems grow larger 
spudd takes times longer value iteration 
similarly construct best case series examples value function grows linearly number problem variables 
specifically problem linear involves variables distinct values 
mdp represented space adds op value function represented space add see details inherent structure problem easily exploited :10.1.1.158.8490
seen spudd clearly takes advantage structure problem running time increases linearly number variables compared exponential value obtained state furthest goal goal reward discounted number system states visited way goal reward set high ensure value state practically zero 
running times especially large due nature problem requires large number iterations alue iteration converge 
course best case behavior spudd involves problem variables irrelevant value function 
problem represents best case variables required prediction state value 
table results factory examples 
computation time sec spudd flat vi number variables worst case behavior spudd 
increase running time associated flat value iteration 
concluding remarks described spudd implementation value iteration solving mdps adds 
add representation captures regularities system dynamics reward value yielding simple efficient representation planning problem 
compact representation able solve certain types problems dealt current techniques including explicit matrix decision tree methods 
technique described tested extensively realistic domains preliminary results encouraging 
drawback adds requirement variables boolean 
finite valued non boolean variable split number boolean variables generally way preserves structure original problem see computation time sec spudd flat vi number variables best case behavior spudd 
new state space larger original 
conceptually difficulty allowing adds deal multi valued variables algorithms canonicity results carry easily 
domains relatively multi valued variables spudd appear handicapped requirement variable splitting 
spudd uses static user defined variable ordering order cloud initial results effects dynamic variable reordering 
dynamic reordering variables runtime significant improvements space required finding compact representation running time choosing appropriate subsets variables discussed section 
package provides rich set dynamic reordering algorithms 
typically add grows large variable reorderings attempted algorithms new ordering chosen minimizes space needed 
available techniques slight variations existing techniques specifically developed package 
may necessary implement new heuristic takes account variable subsets influence running time 
include complete experimentation automatic dynamic reordering spudd 
extension spudd implementation dynamic programming algorithms modified policy iteration generally considered converge quickly value iteration practice 
hope explore approximation methods add framework previously researched context decision trees 
richard dearden helpful comments providing spi code example descriptions comparison purposes 
st aubin supported nserc 
hu supported nserc 
boutilier supported nserc research ogp iris iii project dealing actions iris pardo somenzi 
algebraic decision diagrams applications 
intl 
conf 
computer aided design ieee 
bellman 
dynamic programming 
princeton university press princeton 
bertsekas 
adaptive aggregation infinite horizon dynamic programming 
ieee trans 
aut 
cont 
boutilier 
correlated action effects decision theoretic regression 
proc 
uai pp providence ri 
boutilier dean hanks 
decision theoretic planning structural assumptions computational leverage 
artif 
intel 
research 
appear 
boutilier dearden 
approximating value trees structured dynamic programming 
proc 
intl 
conf 
machine learning pp bari italy 
boutilier dearden goldszmidt 
exploiting structure policy construction 
proc 
ijcai pp montreal 
boutilier dearden goldszmidt :10.1.1.158.8490
stochastic dynamic programming factored representations 
manuscript 
boutilier friedman goldszmidt koller :10.1.1.16.1782
context specific independence bayesian networks 
proc 
uai pp portland 
bryant :10.1.1.1.5124
graph algorithms boolean function manipulation 
ieee trans 
comp 
cimatti roveri traverso 
automatic generation universal plans non deterministic domains 
proc 
aaai pp 
dean givan 
model minimization markov decision processes 
proc 
aaai pp providence 
dean kanazawa 
model reasoning persistence causation 
comp 
intel 
dearden boutilier 
abstraction approximate decision theoretic planning 
artif 
intel 
dechter 
topological parameters time space tradeoff 
proc 
uai pp portland 
hanks mcdermott 
modeling dynamic uncertain world symbolic probabilistic reasoning change 
artif 
intel 
pearl 
probabilistic reasoning intelligent systems networks plausible inference 
morgan kaufmann san mateo 
poole 
exploiting rule structure decision making independent choice logic 
proc 
uai pp montreal 
puterman 
markov decision processes discrete stochastic dynamic programming 
wiley new york ny 
somenzi 
cu decision diagram package 
available vlsi colorado edu pub 
