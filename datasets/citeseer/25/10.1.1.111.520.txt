charm efficient algorithm closed itemset mining mohammed zaki ching hsiao set frequent closed itemsets uniquely determines exact frequency itemsets orders magnitude smaller set frequent itemsets 
charm efficient algorithm mining frequent closed itemsets 
enumerates closed sets dual itemset tidset search tree efficient hybrid search skips levels 
uses technique called diffsets reduce memory footprint intermediate computations 
uses fast hash approach remove non closed sets computation 
extensive experimental evaluation number real synthetic databases shows charm significantly outperforms previous methods 
linearly scalable number transactions 
mining frequent patterns itemsets fundamental essential problem data mining applications 
applications include discovery association rules strong rules correlations sequential rules episodes multi dimensional patterns important discovery tasks 
problem formulated follows large data base item transactions find frequent itemsets frequent itemset occurs user specified percentage database 
proposed pattern mining algorithms variant apriori 
apriori employs bottomup breadth search enumerates single frequent itemset 
apriori uses downward closure property itemset support prune search space property subsets frequent itemset frequent 
frequent itemsets construct candidate itemsets 
pass database level find frequent itemsets candidates 
apriori inspired algorithms show performance sparse datasets data frequent patterns short :10.1.1.103.5437
dense datasets telecommunications census data long frequent patterns performance algorithms degrades incredibly 
degradation due reasons algorithms perform passes database length longest frequent pattern 
secondly frequent pattern length implies presence additional frequent patterns explicitly examined algorithms 
large frequent itemset mining methods cpu bound bound 
words practically unfeasible mine set frequent patterns small hand real world problems patterns census data finding long itemsets length uncommon 
computer science department rensselaer polytechnic institute troy ny 
email zaki cs rpi edu 
supported part nsf career award iis nsf generation software program eia 
done author rpi 
current solutions long pattern mining problem 
mine maximal frequent itemsets typically orders magnitude fewer frequent patterns 
mining maximal sets help understand long patterns dense domains lead loss information subset frequency available maximal sets suitable generating rules 
second mine frequent closed sets :10.1.1.37.1102:10.1.1.10.7611
closed sets lossless sense uniquely determine set frequent itemsets exact frequency 
time closed sets orders magnitude smaller frequent sets especially dense databases 
past addressed problem non redundant rule generation provided closed sets available algorithm efficiently mine closed sets described :10.1.1.10.7611
natural question ask existing methods generate closed sets 
feasible generate set apriori bottom search methods examine subsets frequent itemset patterns short 
possible maximal patterns find closed itemsets subsets maximal frequent itemsets examined 
need methods directly enumerate closed patterns 
contributions introduce charm efficient algorithm enumerating set frequent closed itemsets 
number innovative ideas employed development charm include charm simultaneously explores itemset space transaction space novel tree itemset tidset tree search space 
contrast previous methods exploit itemset search space 
charm uses highly efficient hybrid search method skips levels tree quickly identify frequent closed itemsets having enumerate possible subsets 
uses fast hash approach eliminate non closed itemsets subsumption checking 
charm utilizes novel vertical data representation called proposed fast frequency computations 
diffsets keep track differences tids candidate pattern prefix pattern 
diffsets drastically cut orders magnitude size memory required store intermediate results 
entire working set patterns fit entirely main memory large databases 
assume initial database disk resident intermediate results fit entirely memory 
factors realistic assumption 
charm breaks search space small independent chunks prefix equivalence classes 
second diffsets lead extremely small memory footprint experimentally verified 
charm uses simple set difference intersection operations requires complex internal data structures candidate generation counting happens single step 
current trend large gigabyte sized main memories combined features charm practical efficient algorithm reasonably large databases 
compare charm previous methods mining closed sets close closet mafia pascal :10.1.1.37.1102
extensive experiments confirm charm provides significant improvement existing methods mining closed itemsets dense sparse datasets 
frequent pattern mining set items database transactions transaction unique identifier tid contains set items 
set tids denoted set called itemset set called tidset 
itemset items called itemset 
convenience write itemset acw tidset 
itemset denote corresponding tidset set tids contain subset 
tidset denote corresponding itemset set items common tids note 
example acw act cdw cw 
notation refer itemset tidset pair call pair 
support itemset denoted number transactions occurs subset 
itemset frequent support equal user specified minimum support min sup value min sup 
frequent itemset called maximal subset frequent itemset 
frequent itemset called closed exists proper charm stands closed association rule mining gratuitous jane austen christie database items distinct database items sir arthur doyle frequent itemsets minimum support support mark twain itemsets cw ac aw cd ct acw dw tw act cdw ctw 
example db act ctw acw cdw tw aw ac cd ct cw dw frequent itemsets maximal itemsets cdw acw cw ct closed itemsets 
frequent closed maximal itemsets superset 
running example consider database shown 
different items transactions 
table right shows frequent itemsets contained transactions min sup 
consider shows frequent itemsets organized subset lattice corresponding shown 
closed sets obtained collapsing itemsets tidset shown circled regions 
looking closed itemset lattice find maximal frequent itemsets marked circle act cdw 
example shows general denotes set frequent itemsets set closed ones set maximal itemsets generally orders magnitude smaller especially dense datasets orders magnitude smaller closed sets lossless sense exact frequency frequent sets determined leads loss information 
find set frequent find smallest closed set superset superset exists frequent 
example check frequent find act smallest closed set contains frequent frequency act hand dt frequent frequent closed set contains 
related past addressed problem non redundant rule generation provided closed sets available algorithm efficiently mine closed sets described :10.1.1.10.7611
algorithms proposed task 
close apriori algorithm directly mines frequent closed itemsets :10.1.1.37.1102
main steps close 
bottom search identify generators smallest frequent itemset determines closed itemset 
example consider frequent itemset lattice 
item generator closed set acw smallest itemset tidset acw generators simple modification apriori 
finding frequent sets level close compares support set subsets previous level 
support itemset matches support subsets itemset generator pruned 
second step close compute closure generators step 
compute closure itemset perform intersection transactions occurs subset 
closures generators computed just database scan provided generators fit memory 
computing closures way expensive operation 
authors close developed pascal improved algorithm mining closed frequent sets 
introduce notion key patterns show frequent patterns inferred key patterns access database 
showed pascal finds frequent closed sets typically twice fast close times fast apriori 
cd pascal enumerates patterns practical pattern length short shall see experimental section 
closure algorithm bottom search 
performs marginally better apriori charm outperform easily 
new algorithms finding frequent closed itemsets proposed 
closet uses novel frequent pattern tree fp tree structure compressed representation transactions database 
uses recursive divide conquer database projection approach mine long patterns 
show charm outperforms closet orders magnitude support lowered 
mafia primarily intended maximal pattern mining option mine closed sets 
mafia relies efficient compressed projected vertical bitmap frequency computation 
higher supports mafia charm exhibit similar performance lowers support gap widens exponentially 
charm deliver factor improvements mafia low supports 
efficient algorithms mining maximal frequent itemsets mafia 
practical mine maximal patterns check subset closed check subsets length longest pattern easily patterns length see experimental section 
tested modified version discover closed sets post processing step slow short patterns 
itemset tidset search tree equivalence classes set items 
define function length prefix prefix equivalence relation itemsets follows 
itemsets class share common length prefix 
atx ctx ax cx dx tx wx 
tree itemset tidset search tree charm performs search closed frequent sets novel tree search space shown 
node tree represented itemset tidset pair fact prefix class 
children node belong equivalence class share prefix denote equivalence class ln parent node prefix li single item representing node pli pli 
example root tree corresponds class 
leftmost child root consists class itemsets containing prefix set 
discerned class member represents child parent node 
class represents items prefix extended obtain new frequent node 
clearly subtree infrequent prefix examined 
power equivalence class approach breaks original search space independent sub problems 
subtree rooted node treat completely new problem enumerate patterns simply prefix item 
enumerate frequent li pi lj ido pli min sup pi pi dfs enumerate frequent pi delete pi bfs pi enumerate frequent pi delete pi 
pattern enumeration frequent pattern enumeration straightforward tree framework 
node prefix class perform intersections pairs elements class check min sup met support counting simultaneous generation 
resulting frequent itemset class elements recursively expanded 
say class itemsets prefix ln perform intersection pli obtain new class frequent extensions pli lj min sup 
example null root min sup obtain classes 
note class contain ad frequent 
gives pseudo code description breadth bfs depth dfs exploration tree frequent patterns 
charm improves basic enumeration scheme conceptual framework provided tree assumed fit memory charm materializes small portion tree memory time 
basic properties itemset tidset pairs concept closure operation check itemset closed :10.1.1.10.7611
define closure itemset denoted smallest closed set contains recall set items common tids tidset tids common items find closure itemset compute image transaction space get 
map image itemset space mapping get 
know resulting itemset closed 
follows itemset closed 
example itemset acw closed acw acw acw support itemset equal support closure 
nodes tree xi xi xj xj xi xj case xj xi 
example acw act acw act 
define mapping itemsets integers 
itemsets xi xj say xi xj iff xi xj 
function defines total order set itemsets 
example denotes lexicographic ordering itemset ac ad sorts itemsets increasing order support ad ac ad ac 
basic properties pairs charm leverages fast exploration closed sets 
assume currently processing ln prefix class 
xi denote itemset pli pair xi xi 
theorem 
xi xi xj xj members class xi xj total order lexicographic support 
properties hold 
xi xj xi xj xi xj 
xi xj xi xj xi xi xj 
xi xj xi xj xj xi xj 
xi xj xi xj xi xj proof discussion 
xi xj obviously xi xj xi xj 
xi xj implies xi xj xi xj xi 
xi xj xi giving xi xj xi 
property implies replace occurrence xi xi xj remove element xj consideration closure identical closure xi xj 

xi xj xi xj xi xj xi xj giving xi xj xi xj 
replace occurrence xi xi xj identical closures 
xi xj remove element xj class generates different closure 

similar case 

xi xj clearly xi xj xi xj xi xj giving xi xj xi xj 
element class eliminated xi xj lead different closures 
charm algorithm design implementation charm efficient algorithm mining closed frequent itemsets 
describe algorithm general terms independent implementation details 
show algorithm implemented efficiently 
charm simultaneously explores itemset space tidset space tree previous methods typically exploit itemset space 
charm uses novel search method pair properties skips levels tree quickly converge itemset closures having enumerate possible subsets 
pseudo code charm appears 
algorithm starts initializing prefix class nodes examined frequent single items line 
assume elements ordered suitable total order main computation performed charm extend returns set closed frequent itemsets charm extend responsible considering combination pairs appearing prefix class 
pair xi xi line combines pairs xj xj come line total order xi generates new prefix class pi initially empty line 
line pairs combined produce new pair xi xj xi xj 
line tests pair properties applied calling charm property 
note routine may modify current class deleting pairs subsumed pairs 
inserts newly generated pairs new class pi 
xj processed recursively explore new class pi depth manner line 
insert itemset extension xi set closed itemsets line provided subsumed previously closed set describe perform fast subsumption checking 
stage closed itemset containing xi generated 
return line process unpruned pair 
dynamic element reordering purposely pair ordering function line remain unspecified 
usual manner processing lexicographic order specify total order want 
promising approach sort itemsets support 
motivation increase opportunity pruning elements class 
quick look properties tells cases preferable 
property closure itemsets equal discard xj replace xi xi xj 
property replace xi xi xj 
note cases insert new class pi 
occurrence cases fewer levels search perform 
contrast occurrence cases results additions set new nodes requiring additional levels processing 
want xi xj property xi xj property follows sort itemsets increasing order support 
larger occur ordering charm min sup 
xi xi xi xi min sup 
charm extend 
return closed sets charm extend 
xi xi 
pi xi 
xj xj xj xi 
xj xi xj 
charm property pi 
pi charm extend pi 
delete pi 
subsumed 
charm algorithm charm property pi 
minsup 
xi xj property 
remove xj 
replace xi 
xi xj property 
replace xi 
xi xj property 
remove xj 
add pi ordering 
xi xj property 
add pi ordering maximize occurrence properties 
similar reasoning sorting decreasing order support doesn maximizes occurrence properties increasing number levels processing 
note elements added sorted order new class pi lines 
reordering applied recursively node tree 
dc dt da dw tc aw awc wc ta tw tac 
search process 
search process diffsets example shows charm works example database sort itemsets increasing order support 
pseudo code illustrate computation 
define weight item xy xy sum support frequent itemsets contain item 
root level sort items increasing order weights 
example look support itemsets containing find ac aw support support 
sorted order items weights respectively 
initialize root class line 
line process node set line combined remaining elements line 
dt da frequent pruned 
look property applies simply insert dw line 
find 
property applies replace occurrences dc means change dc element dw 
recursive call charm extend class dc 
sine element jump line added frequent closed set return dc branch complete dc added dc tc aw awc wc dt da dw ta tw tac process find insert tain new class property 
find get ta tw 
find update occurrences tc property 
get class tc tac 
charm recursive call line process tc 
try combine tac find tac 
property satisfied replace tac deleting time 
extended insert done processing branch tc added branches satisfy property new recursion final consists pairs shown 
fast subsumption checking xi xj itemsets say itemset xi subsumes itemset xj xj xi xj xi 
recall adding set current set closed patterns charm check line see see subsumed closed set words may happen adding closed set explore subsequent branches may generate set extended 
case non closed set subsumed added dynamically expands enumeration closed patterns need fast approach perform subsumption checks 
clearly want avoid comparing existing elements lead complexity 
quickly retrieve relevant closed sets obvious solution store hash table 
hash function 
want perform subset checking hash itemset 
support itemsets hash function 
unrelated itemsets may support 
charm uses pairs search reasonable information help identify subsumed 
note xj xi obviously xj xi 
check subsumed check check performed time hash table 
obviously afford store actual tidset closed set space requirements prohibitive 
charm adopts compromise solution 
computes hash function tidset stores hash table closed set support implementation stl standard template library hash multimap container hash table 
xi denote suitable chosen hash function tidset xi 
adding retrieve hash table entries hash key 
matching closed set check 
check subsumed add hash table hash function tidset 
charm uses sum tids tidset hash function note support cardinality 
tried variations performance difference 
hash function due reasons 
firstly definition closed set superset support follows tids appear closed set 
hash keys different closed sets tend different 
secondly closed sets hash key support check perform eliminate closed sets keys fact different supports 
thirdly hash function easy compute easily format introduce 
diffsets fast frequency computations manipulating itemset tidset pairs charm uses vertical data format maintain disk tidset item database 
mining algorithms vertical format shown effective usually outperform horizontal approaches 
main benefits vertical format computing supports simpler faster 
intersections required supported current databases 
horizontal approach hand requires complex hash trees 
automatic pruning irrelevant information intersections proceed tids relevant frequency determination remain intersection 
databases long transactions shown simple cost model vertical approach reduces number operations 
vertical bitmaps offer scope compression 
despite advantages vertical format tidset cardinality gets large frequent items methods start suffer intersection time starts inordinately large 
furthermore size intermediate generated frequent patterns large requiring data compression writing temporary results disk 
especially dense datasets characterized high item frequency patterns vertical approaches may quickly lose advantages 
utilize vertical data representation called diffsets proposed 
diffsets keep track differences tids candidate pattern parent frequent pattern 
differences propagated way node children starting root 
showed diffsets drastically cut orders magnitude size memory required store intermediate results 
dense domains entire working set patterns vertical mining algorithms fit entirely main memory 
diffsets small fraction size intersection operations performed efficiently 
py px pxy pxy 
diffsets prefix class members formally consider class prefix denote respect prefix tidset current universe tids 
normal vertical methods available class tidset prefix class members 
assume px py class members definition support true px py 
furthermore obtains support pxy checking cardinality px py pxy 
suppose available px px differences tids similarly available py 
thing note support itemset longer cardinality stored separately follows px px 
px py compute pxy frequent 
diffsets recursively mentioned pxy px pxy 
compute pxy 
definition pxy px py 
diffsets expression requires 
easy fix pxy px py px py py px py px 
words computing xy difference px py compute difference diffsets py px 
shows different regions diffsets prefix class members 
tidset triangle marked universe relevant tids 
gray region denotes px region solid black line denotes py 
note pxy pxy subsets tidset new prefix px 
diffsets typically smaller storing child essential changes propagated node children 
diffsets shrink longer itemsets 
diffsets subsumption checking notice diffsets directly generating hash key possible 
reason depending class prefix nodes different branches different diffsets subsumed 
solution keep track hash key pxy pxy way store pxy 
words assume available px compute pxy px pxy course possible choice hash function described section 
associate member class hash key subsumption checking proceeds exactly 
differences subset testing assume initial database stored tidset format diffsets 
availability diffsets itemset computation difference new combination straightforward 
takes linear scan diffsets storing tids 
main question efficiently compute subset information computing differences required applying pair properties 
appear expensive operation fact comes free outcome set difference operation 
difference sets keep track number mismatches diffsets cases tid occurs list 
xi xj denote number mismatches diffsets xi xj 
cases consider xi andm xj xi xj ort xi xj property xi xj xi xj ort xi xj property xi andm xj xi xj ort xi xj property xi xj xi xj ort xi xj property charm performs support subset equality inequality testing simultaneously computing difference 
shows search closed sets diffsets 
exploration proceeds exactly way described example 
time perform difference operations diffsets root class uses 
consider pair 
indicates differs parent tc tid infer real pair 
optimizations correctness optimized initialization significant departure pseudo code 
note initialize set line frequent items invoke charm extend worst case perform difference operations number frequent items 
known itemsets length turn infrequent clearly wasteful perform operations 
solve performance problem compute set frequent itemsets length add simple check line shown clarity applies itemsets combine items xi xj xi xj known frequent 
number operations performed check equal number frequent pairs practice closer 
compute frequent itemsets length vertical format perform multi stage vertical horizontal transformation fly described distinct ranges tids 
recovered horizontal database chunk straightforward update count pairs items upper triangular array 
process chunk 
horizontal chunks temporarily materialized memory discarded processing 
memory management charm processes branches depth fashion memory requirements substantial 
retain itemset diffsets pairs levels current left branches search space 
diffsets reduces drastically memory consumption 
cases memory requirement depth search diffsets exceed available memory straightforward modify charm write read temporary diffsets disk 
theorem correctness 
charm enumerates frequent closed itemsets 
proof charm correctly identifies closed frequent itemsets search complete tree search space 
branches pruned sufficient support subsumed closed set properties itemset tidset pairs outlined theorem 
charm eliminates non closed itemset generated performing subsumption checking inserting set frequent closed itemsets experimental evaluation experiments performed mhz pentium pc mb memory running redhat linux 
algorithms coded 
performance comparison original source object code close pascal closet mafia provided authors :10.1.1.37.1102
original closet code subtle bug affected performance correctness 
comparison uses new bug free optimized version closet obtained authors 
mafia option mine closed sets maximal sets 
refer version mafia 
include comparison base apriori algorithm mining itemsets 
timings figures total wall clock time include preprocessing costs vertical database creation charm mafia 
chose real synthetic database benchmarks publicly available ibm almaden www almaden ibm com cs quest demos html performance tests 
datasets pumsb pumsb contain census data 
pumsb pumsb items support 
mushroom database contains characteristics various species mushrooms 
connect chess datasets derived respective game steps 
datasets originally taken uc irvine machine learning database repository 
synthetic datasets ibm generator mimic transactions environment 
gazelle dataset comes click stream data small dot com called gazelle com retailer longer exists 
portion dataset kdd cup competition 
dataset publicly available blue martini software download www ecn purdue edu kddcup 
typically real datasets dense produce long frequent itemsets high values support 
synthetic datasets mimic transactions environment 
usually synthetic datasets sparser compared real sets 
database items avg 
length std 
dev 
records max 
pattern sup levels searched chess connect mushroom pumsb pumsb gazelle table 
database characteristics table shows characteristics real synthetic datasets evaluation 
shows number items average transaction length standard deviation transaction lengths number records database 
table additionally shows length longest maximal pattern lowest minimum support experiments different datasets maximum level search charm performed discover longest pattern 
example gazelle longest closed pattern length method mines frequent patterns impractical long patterns maximum recursion depth charm 
number levels skipped considerable real datasets 
synthetic dataset extremely sparse levels skipped levels skipped 
results give indication effectiveness charm mining closed patterns mainly due repeated applications properties theorem 
discuss performance results different algorithms instructive look total number frequent closed itemsets distribution closed patterns length various datasets shown 
grouped datasets type distribution 
chess pumsb pumsb connect display symmetric distribution closed frequent patterns different means 
mushroom display interesting bi modal distribution closed sets 
short patterns length peak length 
mushroom considerably longer patterns second peak occurs 
gazelle right skewed distribution 
gazelle number frequent closed itemsets number closed sets mushroom number closed sets pumsb chess connect pumsb mushroom gazelle minimum support bi modal distribution length number closed sets number closed sets symmetric distribution chess pumsb pumsb connect length right skewed distribution gazelle length 
number frequent closed itemsets distribution length tends small patterns long right tail 
exhibits similar distribution majority closed patterns length 
type distribution tends influence behavior different algorithms see 
performance testing compare performance charm apriori close pascal mafia closet 
closet provided windows executable authors compared separately mhz pentium iii processor mb memory running windows 
tested modified version maximal pattern finding algorithm discover closed sets post processing step slow short patterns 
symmetric datasets compare methods perform datasets exhibit symmetric distribution closed itemsets chess pumsb connect pumsb 
observe apriori close pascal high values support datasets 
best pascal twice fast close times better apriori 
hand charm orders magnitude better pascal run low support values methods run 
comparing mafia find charm mafia similar performance higher support values 
lower minimum support performance gap charm mafia widens 
example lowest support value plotted charm times faster mafia chess times faster connect pumsb times faster pumsb 
charm outperforms closet order magnitude especially support lowered 
chess pumsb times faster closet times faster pumsb 
connect closet performs better high supports charm better lower supports 
reason connect transactions lot overlap items leading compact fp tree faster performance 
support lowered fp tree starts grow closet loses edge 
total time sec total time sec total time sec total time sec chess apriori close pascal mafia charm minimum support connect apriori close pascal mafia charm total time sec total time sec total time sec closet charm closet charm chess minimum support connect total time sec total time sec total time sec pumsb apriori close pascal mafia charm minimum support pumsb apriori close pascal mafia charm total time sec total time sec closet charm pumsb closet charm minimum support pumsb minimum support minimum support minimum support minimum support mushroom mushroom apriori close pascal mafia charm closet charm apriori close pascal mafia charm closet charm minimum support minimum support minimum support minimum support gazelle gazelle apriori close pascal mafia charm closet charm apriori close pascal mafia charm closet charm minimum support minimum support minimum support minimum support 
charm versus apriori close pascal mafia closet total time sec total time sec total time sec total time sec bi modal datasets datasets bi modal distribution frequent closed patterns mushroom find pascal fares better symmetric distributions 
higher values support maximum closed pattern length relatively short distribution dominated mode 
apriori close pascal hand case 
lowers minimum support second mode starts dominate longer patterns 
methods quickly lose steam 
charm mafia minimum support negligible difference support lowered huge difference performance 
charm times faster mushroom times faster lowest support shown 
gap continues widen sharply 
find charm outperforms closet factor mushroom 
right skewed datasets gazelle large number short closed patterns followed sharp drop find apriori close pascal remain competitive relatively low supports 
reason maximum pattern length lowest support shown 
gazelle support maximum pattern length 
level wise search methods able easily handle short patterns 
gazelle support maximum pattern length suddenly jumped methods run 
sparse dataset problematic mafia 
reason produces long sparse item offers little scope bit vector compression projection mafia relies efficiency 
causes mafia datasets 
similarly mafia fails gazelle 
able run lowest support value 
format charm resilient sparsity shown continues outperform methods 
lowest support twice fast pascal times better mafia times faster mafia gazelle 
charm times slower closet 
reason majority closed sets length tidset diffsets operations charm relatively expensive compared compact fp tree short patterns max length 
gazelle longer closed patterns charm outperforms closet factor 
total time sec pumsb pumsb connect chess scaleup total time sec replication factor replication factor 
size scaleup different datasets scaleup mushroom gazelle scaling properties charm shows charm scales increasing number transactions 
study kept database parameters constant replicated transactions times 
example transactions initially replication factor transactions 
level support find linear increase running time increasing number transactions 
effect branch ordering compares ordering methods lexicographic order increasing support decreasing support 
decreasing order worst processing class elements increasing order best 
similar results obtained datasets 
results charm reported increasing branch ordering 
time closed itemset sec connect decreasing lexicographic increasing minimum support 
branch ordering memory usage mb connect effect diffsets top diffsets bottom computation progression 
memory usage minsup db db db connect mb mb gazelle mb mb mb mb table 
maximum memory usage diffsets memory usage shows memory usage storing diffsets changes computation progresses 
total usage generally mb diffsets mb reduction factor 
sharp drop vertical lines indicates new prefix class 
table shows maximum memory usage datasets different values support 
see memory footprint diffsets extremely small low values support 
results confirm datasets intermediate diffsets easily fit memory 
evaluated charm efficient algorithm mining closed frequent itemsets 
charm simultaneously explores itemset space tidset space new tree framework allows novel search method skips levels quickly identify closed frequent itemsets having enumerate non closed subsets 
utilized new vertical format diffsets storing differences tids computation progresses 
extensive set experiments confirms charm provide orders magnitude improvement existing methods mining closed itemsets 
scales linearly number transactions 
shown studies closed itemsets help generating non redundant rules sets typically lot smaller set association rules :10.1.1.10.7611
interesting direction develop methods mine closed patterns mining problems sequences episodes multi dimensional patterns study reduction respective rule sets possible 
worthwhile explore concept closure extends metrics support 
example confidence correlation acknowledgments lakhal yves bastide providing source code close pascal jiawei han jian pei wang sending executable closet johannes gehrke mafia algorithm 
roberto bayardo providing ibm real datasets ronny kohavi zheng blue martini software giving access gazelle dataset 
bibliography agrawal mannila srikant toivonen verkamo 
fast discovery association rules 
fayyad editors advances knowledge discovery data mining pages 
menlo park ca 
ramesh agrawal aggarwal prasad 
depth generation long patterns 
th int conference knowledge discovery data mining august 
bastide taouil pasquier stumme lakhal 
mining frequent patterns counting inference 
sigkdd explorations december 
bayardo 
efficiently mining long patterns databases 
acm sigmod conf 
management data june 
brin motwani ullman tsur 
dynamic itemset counting implication rules market basket data 
acm sigmod conf 
management data may 
gehrke 
mafia maximal frequent itemset algorithm transactional databases 
intl 
conf 
data engineering april 

galois connection data mining 
journal universal computer science 

data organization access efficient data mining 
th ieee intl 
conf 
data engineering march 
ganter wille 
formal concept analysis mathematical foundations 
springer verlag 
gouda zaki 
efficiently mining maximal frequent itemsets 
st ieee int conf 
data mining november 
han kamber 
data mining concepts 
morgan kaufmann publishers san francisco ca 

lin kedem 
pincer search new algorithm discovering maximum frequent set 
th intl 
conf 
extending database technology march 
park chen yu 
effective hash algorithm mining association rules 
acm sigmod intl 
conf 
management data may 
pasquier bastide taouil lakhal :10.1.1.37.1102
discovering frequent closed itemsets association rules 
th intl 
conf 
database theory january 
pei han mao 
closet efficient algorithm mining frequent closed itemsets 
sigmod int workshop data mining knowledge discovery may 
savasere omiecinski navathe 
efficient algorithm mining association rules large databases 
st vldb conf 
shenoy sudarshan bawa shah 
turbo charging vertical mining large databases 
acm sigmod intl 
conf 
management data may 
zaki :10.1.1.10.7611
generating non redundant association rules 
th acm sigkdd int conf 
knowledge discovery data mining august 
zaki 
scalable algorithms association mining 
ieee transactions knowledge data engineering may june 
zaki gouda 
fast vertical mining diffsets 
technical report computer science dept rensselaer polytechnic institute march 
zaki 
hsiao 
charm efficient algorithm closed association rule mining 
technical report computer science dept rensselaer polytechnic institute october 
