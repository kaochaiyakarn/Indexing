jr flexible distributed programming extended java aaron keen ge justin ronald olsson university california davis java provides clean object oriented programming model allows inherently programs 
unfortunately java limited concurrency model providing threads remote method invocation rmi 
jr programming language extends java provide rich concurrency model sr jr provides dynamic remote virtual machine creation dynamic remote object creation remote method invocation asynchronous communication rendezvous dynamic process creation 
jr concurrency model stems addition operations generalization procedures jr supports redefinition operations inheritance 
jr programs written extended java translated standard java programs 
jr run time support system written standard java 
describes jr programming language implementation 
initial measurements performance implementation included 
categories subject descriptors programming languages language constructs features concurrent programming structures general terms design languages additional key words phrases concurrency concurrent object oriented programming java sr 
java gosling proven clean simple language objectoriented programming 
standard java concurrency model limited 
provides threads primitive monitor mechanism remote method invocation rmi 
features useful offer little flexibility design implementation concurrent programs 
provides richer flexible concurrent programming model java 
approach extend java concurrency model provided sr concurrent programming language andrews andrews olsson 
result new language superset java call jr jr adapts features sr dynamic remote virtual machine creation authors addresses keen ge olsson dept computer science university california davis davis ca 
research supported part national science foundation ccr 
preliminary version st ieee international conference distributed computing systems icdcs held phoenix arizona april 
permission digital hard copy part material fee personal classroom provided copies distributed profit commercial advantage acm copyright server notice title publication date appear notice copying permission acm copy republish post servers redistribute lists requires prior specific permission fee 
acm transactions programming languages systems vol 
tbd 
tdb month year pages 
keen dynamic remote object creation remote method invocation dynamic process creation support rendezvous asynchronous message passing 
jr takes novel object oriented approach synchronization 
contributions design implementation jr jr resolves tension inheritance concurrency 
jr designed integrate sr concurrency model java manner retains feel java 
expect jr useful research teaching tool 
jr certainly development limited tool support ide profilers extended syntax 
results research beneficial design implementation concurrent programming languages 
particular expect jr object oriented approach synchronization useful 
rest organized follows 
section provides motivation relevant background 
section presents overview jr programming language section discusses inheritance jr section discusses implementation initial prototype jr section evaluates performance 
section discusses related 
section covers jr concludes 
discussion jr keen 

motivation background described simple elegant java programming language gosling quickly gained popularity due part object oriented programming model system independent nature 
fairly secure language respect strong type checking memory management 
unfortunately noted java concurrency model flexible 
section describe detail shortcomings java concurrency model 
sr programming language rich concurrency model lacks features java popular 
sr object oriented secure portable java 
research provides richer flexible concurrent programming model java 
approach section extends java concurrency model provided sr novel object oriented approach 
approach extends java language providing package classes synchronization communication rmi 
approach potential advantages synchronization represented actual language primitives black scott 
higher level approach reduce development time applications increase portability lead better optimizations simplify reasoning programs verification 
shortcomings java concurrency model standard java rmi concurrency model significant shortcomings provides remote objects limited support dynamic creation 
jr implementation collection example programs available www cs ucdavis edu olsson research jr 
sr object dynamic modules resources accessed pointers capabilities lacks inheritance virtual methods 
acm transactions programming languages systems vol 
tbd 
tdb month year 
jr flexible distributed programming extended java provides single synchronization primitive remote method invocation distributed programming 
java socket package consider sockets low level 
standard java rmi static virtual machine vm model allows program communicate number remote objects 
remote objects initialized prior communication 
objects typically initialized external means manual execution server program requiring setup procedure program proper begins 
static model means programs adapt input 
example want run distributed java rmi program computing fourier coefficients variable number processors 
unfortunately specified easily automatically java rmi program 
possible write program java rmi requires manual interaction 
standard java rmi synchronization primitive distributed programming remote method invocation 
limitations languages provide form synchronization mechanism widely discussed literature scott andrews olsson liskov gehani gehani 
example having synchronous asynchronous message passing desirable 
synchronous message passing rmi useful especially programming client server interactions familiar style procedure call syntax semantics 
asynchronous message passing useful 
avoid remote delay server processing request invokes operation server delay liskov 
asynchronous message passing invoke remote operation necessary prevent server delaying 
language provides synchronous message passing extra processes employed avoid remote delay complicates problem solutions 
asynchronous message passing useful necessary delay invoker operation 
example program pipelines filter processes natural producer continue sending message consumer 
languages incorporate multiple synchronization primitives designed implemented concurrent gehani lynx scott scott cook sr andrews andrews olsson 
atkins olsson shown implementation language atkins olsson sr provide synchronization mechanisms reasonable cost 
having multiple synchronization primitives proved useful programming different upcall program structures atkins 
additional olsson shown having asynchronous message passing desirable simpler faster code language provides rendezvous mechanism 
note java provide primitive monitor mechanism addition rmi brinch hansen contend java really support monitors 
monitor methods invoked remotely rmi 
monitors support directly centralized servers paradigms useful distributed programming replicated workers bag acm transactions programming languages systems vol 
tbd 
tdb month year 
keen resource main import philosopher servant var int read read create servant philosophers var cap servant create servant fa returned resource cap needed create philosopher af fig 

main resource multiple resource dining philosophers written sr tasks probe echo broadcast andrews sr concurrent programming language concurrency model sr concurrent programming language andrews andrews olsson provides variety mechanisms writing parallel distributed programs 
notions virtual machines resources operations central sr concurrency model 
notion virtual machine vm distributing program physical machines 
vm resides physical machine 
vms created dynamically 
sr primary modular component resource 
instances resources dynamically created 
processes execute particular resource instance shared access variables operations instance 
operation considered generalization procedure enable processes interact 
vms resources operations created dynamically sr uses capabilities 
capability acts pointer assigned variables passed parameters permitting example dynamic communication paths 
resource instances created create statement returns resource capability newly created resource instance 
resource capability contains operation capabilities operations defined resource specification values assigned operations just created newly created resource instance 
example figures version dining philosophers 
employs centralized control places philosophers servants different resource instances 
main resource consists entirely initial top level code 
code executed instance resource created case main initial code executed program begins execution 
main initial code creates instance servant resource instances philosopher resource passing philosopher integer identity capability servant number iterations execute 
philosopher requests forks servant eats releases forks 
code inside servant resource discussed 
operation procedure name take parameters return result 
invoked ways synchronously means call statement asynchronously means send statement 
operation serviced ways procedure object called proc statements 
sr statement combines generalizes aspects ada accept select statements 
operation may synchronously invoked expression call keyword 
acm transactions programming languages systems vol 
tbd 
tdb month year 
resource philosopher import servant body philosopher cap servant id int process phil fa get forks servant instance id eat write philosopher id eating release forks back servant id think write philosopher id thinking af jr flexible distributed programming extended java resource servant op id int ops invoked op id int philosophers body servant int process server var eating false true id st eating id mod eating id mod eating id true id eating id false ni od fig 

philosopher servant resources multiple resource dining philosophers written sr op prio data int prio data prio perform write operation ni fig 

sr scheduling expression service invocations order priority 
yields combinations invocation service effect call proc procedure call call rendezvous send proc dynamic process creation send message passing guard statement contain synchronization expression scheduling expression 
specifies invocations acceptable specifies order service acceptable invocations 
expressions invocation parameters 
illustrate consider statement servant resource 
arm server statement uses synchronization expression introduced st accept invocation philosopher id philosopher neighbors eating 
note synchronization expression invocation parameter id gives example scheduling expression services invocations order priority 
input statement executes pending invocations examined longest pending invocation minimizes scheduling expression prio example selected servicing 
noted previously sr defines notion virtual machine vm language mechanism distributing program physical machines 
resource instances vms created dynamically create statement 
program figures executes single virtual machine single physical machine 
easily modified philosopher executes different virtual machine different physical machine 
main loop needs changed example shown 
clause create specifies physical machine vm created acm transactions programming languages systems vol 
tbd 
tdb month year 
keen fa var cap vm create vm host create philosopher af fig 

modified main loop multiple vm dining philosophers written sr value returned create statement capability newly created virtual machine 
clause second create specifies virtual machine resource instance created 
array host contains physical machine names strings initialization shown 
sr provides abbreviations commonly occurring uses operations 
example process keyword defined abbreviation operation declaration proc sends proc resource initial code 
abbreviations include receive statement simple form semaphore declarations simple forms operation declarations send receive statements 
sr provides statements deal invoking servicing operations 
sr concurrent invocation statement provides way start invocations time terminates invocations completed 
sr reply statement allows servicing process send early reply invoker invoking servicing processes continue executions 
sr forward statement defers replying invocation passes responsibility operation 

jr programming language remedy shortcomings java concurrency model discussed section designed new language superset java call jr jr adapts features sr see section dynamic remote virtual machine creation dynamic remote object creation remote method invocation dynamic process creation support rendezvous asynchronous message passing 
jr java classes take place sr resources java methods take place sr procs 
jr provides sr operations novel object oriented fashion 
depicts conceptual inheritance hierarchy operations 
indicated operations derived base class op base class provides methods invoking call send servicing inni operations 
possible ways service invocations method inni statements give rise subclasses op procop borrowing sr terminology inop 
procop inop classes define actual methods support invoking servicing operation 
example inop class defines methods actions apply queue invocations declared local class 
actual implementation operations discussed section 
sr processes correspond os processes threads sr run time system 
inni statement jr version sr input statement 
inni concatenation sr ni see section prevent clashes commonly name 
acm transactions programming languages systems vol 
tbd 
tdb month year 
jr flexible distributed programming extended java procop op inop fig 

general jr operation inheritance hierarchy 
public class main public static void main string args int get args 
create servant philosophers remote servant new remote servant int new remote philosopher fig 

main class dining philosophers solution jr public class philosopher remote servant int id public philosopher remote servant int id int id id process phil int get forks servant instance id eat system println philosopher id eating release forks back servant id think system println philosopher id thinking public class servant public op void int public op void int int boolean eating public servant int eating new boolean int eating false process server true inni void int id st id eating id true void int id eating id false protected boolean int id return eating id eating id fig 

philosopher servant classes dining philosophers solution jr discussing individual features jr provide glimpse forward simple jr solution dining philosophers problem discussed section 
jr solution figures similar sr solution including input statement synchronize access forks 
sr solution philosophers servant created different virtual machines clauses 
note interest clarity exception handling shown solutions 
acm transactions programming languages systems vol 
tbd 
tdb month year 
keen public class philosopher extends thread servant int id public philosopher servant int id int id id public void run int get forks servant instance id eat system println philosopher id eating release forks back servant id think system println philosopher id thinking public static void main string args get id iterations args get servant servant servant naming lookup naming string create philosopher thread new philosopher id start fig 

philosopher class dining philosophers solution java rmi 
figures java rmi solution dining philosophers problem 
solution written philosophers servant may reside different machines 
situation servant philosopher separate programs initiated separately 
example demonstrates simple naming service philosophers acquire remote servant object 
fork synchronization split methods java synchronized support 
relatively simple synchronization algorithm programmer manage wait queue wait notifyall 
furthermore complicated synchronization algorithms waiting philosophers granted right eat order priority may require additional queue management implementation additional synchronization objects 
note solution uses command line arguments determine number philosophers servant attend 
safer complicated solution registration system avoid set limit 
rest section describes concurrent programming features provided jr programming language 
running example demonstrate simple solution readers writers problem 
dynamic remote virtual machine creation jr eliminates java rmi requirement external setup interaction program see section 
jr program dynamically create remote virtual machines remote objects instantiated 
support creation remote virtual machines jr provides virtual machines 
remote virtual machine creation form vm new vm hostname acm transactions programming languages systems vol 
tbd 
tdb month year 
public interface servant extends remote public void int id throws public void int id throws jr flexible distributed programming extended java public class servant impl extends implements servant int boolean eating public servant impl int throws eating new boolean int eating false public synchronized void int id throws id wait eating id true protected boolean int id return eating id eating id public synchronized void int id throws eating id false notifyall allow try public static void main string args get number philosophers args servant new servant impl naming rebind naming string fig 

servant class dining philosophers solution java rmi 
meaning similar vm creation sr 
optional clause specify host new virtual machine created 
host specified java string case new vm created host specified string vm variable case new vm colocated host specified vm 
default host physical machine instantiating process 
line demonstrates creation virtual machine house server object readers writers solution 
jr virtual machine thin layer services provided addition underlying java virtual machine 
specifically jr provides language level virtual machines support dynamic creation 
furthermore jr virtual machines service remote requests create objects providing support dynamically created remote objects 
dynamic remote object creation jr provides ability populate remote virtual machines new objects dynamic remote object creation 
remote objects created familiar new expression provided java 
remote object jr stored remote standard java 
instantiation remote object general form remote class name var name new remote class name actuals acm transactions programming languages systems vol 
tbd 
tdb month year 
keen public class public static void main string args op void done create local op parse command line arguments determine readers writers server destination host 
create specified host vm new vm args remote server serv new remote int readers new reader iters serv done int writers new writer iters serv done int waitfor readers writers wait signal completion waitfor receive done abbreviated statement waitfor jr exit fig 

readers writers main class jr public class reader int iters remote server serv cap void done public reader int iters remote server serv cap void done iters iters serv serv done done protected process start start client thread iters iters call serv 
read call serv tell main thread finished send done fig 

reader class writer similar 
example creation remote readers writers server seen lines 
remote object provides interface remote object may manipulated 
interface set operations declared object class interface lines 
operations discussed section 
acm transactions programming languages systems vol 
tbd 
tdb month year 
public interface server public op void public op void public op void public op void jr flexible distributed programming extended java public class implements server public op void public op void public op void public op void public create servicing thread protected process start int nw nr iteration service request release true inni void st nw nr void st nw nr nw void nr void nw fig 

readers writers server interface implementation jr operations operation capabilities standard rmi program remote objects export communication interface defines methods may invoked remotely 
jr remote object communication interface defined set operations declared object class 
operation declaration general form modifiers op return type formals exceptions jr operation definition consists declaration implementation 
operation declaration defines signature formal parameter types return type exception types operation adds operation specification class 
sr jr allows overloaded operations way java allows overloaded methods 
operation implementation defined method matching signature set inni statements service operation 
operation implemented method called procop 
invocation procop serviced executing body method associated procop 
operation implemented set inni statements called inop 
default operation declared corresponding method considered inop 
declaration inop implicitly defines implementation consists invocation queue 
inop invoked invocation placed operation invocation queue inni statement services invocation 
invocation serviced single inni statement executes body code corresponds arm servicing operation 
actual implementation inop provided set inni statements service operation 
instance inni statement lines services invocations operations defined lines 
sr operations jr passed arguments methods returned results methods assigned variables operation capabilities 
jr operation capability operation cap acm transactions programming languages systems vol 
tbd 
tdb month year 
keen class public op void foo public op void bar class extends public op void foo public op void bar public void bar inni void foo 
class 
concrete subclass 
fig 

concrete redefinition operations 
keyword required simplify parsing 
jr operation capability declared follows cap return type formal types exception types variables operation capability refer operation matching signature 
recall lines implementation demonstrate declarations set operations supported server object example 
explicit simple operation capability seen line 
capability stores done operation defined line main class 
done operation reader threads writer threads notify main class thread completed 
done operation explicit jr exit required example jr support termination detection see section included demonstrate operations capabilities receive statement explicit termination 
jr allows operations declared restriction defining class declared 
operation inop procop definition implementation 
implementation operation jr defined subclass making operation concrete just implementation method java defined subclass 
demonstrates definition operations concrete extending class 
operation foo implemented inop subclass operation bar implemented procop 
sr jr allows overloaded operations way java allows overloaded methods 
java overloaded operation invoked number actual arguments types arguments precisely type case object arguments determine instance overloaded operation invoked 
jr resolution mechanism complicated fact operations methods accept operations may overloaded arguments 
jr extends resolution mechanism handle situation 
consider invocation overloaded method foo overloaded operation argument line 
resolution mechanism determines specific definition foo definition type specific type type implicitly cast type 
capability types specific argument types specific return type specific contravariant argument types covariant return types see acm transactions programming languages systems vol 
tbd 
tdb month year 
jr flexible distributed programming extended java static void foo cap void int system println foo int static void foo cap void long system println foo long static op void int static op void long public static void main string args foo prints foo long foo cap void int prints foo int fig 

invocation overloaded method overloaded operation argument 
valid argument type compatible 
invocation line selected definition foo starting line cap void long specific cap void int 
specific definition passed argument resolved foo selected 
invocation line operation defined line passed argument foo 
selection strategy modified explicit casts course operation capabilities uniquely named 
line demonstrates explicit cast invoke foo method defined line operation defined line argument 
explicit cast select desired operation restrict potential matches foo 
asynchronous message passing jr supports asynchronous communication send statement 
operation invoked send serviced method operation implemented method new thread created execute method 
operation serviced inni statement message created store arguments invocation 
message added invocation queue corresponding inni operation 

operations inheritance java inheritance background java class definition viewed consisting specification implementation java interface consists specification 
specification class defines external interface exported instances class 
instance class invoking instance methods defined specification class 
implementation class defines actions taken method specification invoked implementation defines statements executed invocation 
actual syntactic definition class java differentiate specification implementation class 
declaration method adds method specification class defines implementation method 
methods interfaces declare specification apart implementation requires pierce additional discussion 
acm transactions programming languages systems vol 
tbd 
tdb month year 
keen defining class declared 
ultimately implementation method defined conjunction specification class 
java new class may derived existing class create subclass 
derivation subclass inherits specification parent class 
default subclass inherits parent implementation specification 
subclass extend inherited specification addition methods 
similarly subclass modify implementation inherited specification redefining inherited methods 
operation inheritance jr derived class may modify implementation inherited specification redefining implementation inherited methods operations 
inherited method implementation modified standard java redefining method 
general jr allows subclass redefine implementation inherited operation procop inop regardless operation implementation superclass 
redefinition operation implementation requires explicit operation subclass redefinition changes operation inop procop vice versa 
explicit operation required 
notation op op means superclass defines operation op subclass redefining operation op 
procop procop redefinition procop procop corresponds directly method redefinition standard java 
subclass simply redefine method associated operation 
redefinition allows subclass specialize operation implementation 
inop inop implementation inop redefined extended 
inni statements attempting service receive operation define implementation single inni statement service invocation 
additional inni statements servicing inherited operation added set inni statements defining implementation 
subclass may explicitly inop inop explicitly operation 
allows subclass relax access restrictions create separate invocation queue 
procop inop procop may redefined inop subclass explicitly operation defining signature compatible method 
method inherited superclass ignored 
inop procop inop may redefined procop subclass operation defining signature compatible method 
redefinition procop inop distribute servicing operation invocations changing client 
graphically depicts original client server structure uses procop acm transactions programming languages systems vol 
tbd 
tdb month year 
requests jr flexible distributed programming extended java server serv requests serv centralized server 
distributed server 
worker objects fig 

distribution servicing redefinition operation subclass 
public class server operation declaration public op int serv int signature compatible method public int serv int compute return value public class worker operation declaration public op void init cap int int public void init cap int int true inni int int 
compute return value requests serv public class extends server operation public op int serv int public vm int initialize worker objects length remote worker new remote worker send init serv fig 

redefining operation distribute implementation 
requests worker objects serv filtered super serv distributed server 
filtered distributed server 
worker objects fig 

filtering invocations redefinition operation subclass 
new bag tasks structure results redefining inherited operation inop 
original operation invocation results new thread created server service invocation 
redefined operation invocation handled extant worker object created program startup may located separate host 
shows definition subclass redefinition operation 
redefines operation serv inop creates worker objects passes capability serv init method worker object 
worker object repeatedly executes inni statement service invocations serv queue 
worker objects located arbitrary set physical machines specified array 
possible filter invocations operation redefining inop procop 
graphically depicts server configuration 
acm transactions programming languages systems vol 
tbd 
tdb month year 
keen public class extends operation public op long serv int public long serv int filter return default exception forward worker objects forward super serv boolean filter int simple filter return public vm super int initialize worker objects length remote worker new remote worker reuse super operation send init super serv fig 

redefining operation serialize invocations filter 
server configuration shown invocation serviced extant worker object 
redefinition operation shown allows filtering invocations order reduce amount done worker objects 
shows definition subclass redefines inop procop 
defines serv operation inop line 
redefines serv operation procop lines 
invocation serv defined subclass routed method associated procop determine invocation passed worker object 
invocation rejected filter subclass uses forward statement pass responsibility servicing invocation inop serv defined parent class 
worker object repeatedly executes inni statement service inop serv defined class operation capability passed init method worker objects line 
redefinition considerations jr requires subclass explicitly operation subclass redefines inherited inop procop inherited procop inop 
required statically determine operation redefined reduce potential erroneous code 
required statement intent aid compiler static analysis 
imagine explicit required redefine procop inop 
assume operation implicitly redefined inop operation serviced inni statement 
full program analysis required statically determine operation redefined 
analysis sufficient capabilities inni statements 
redefinition approach unsatisfactory redefinitions acm transactions programming languages systems vol 
tbd 
tdb month year 
class public op void foo class extends public op void foo public void foo 
jr flexible distributed programming extended java 
operations new new inni void foo compile time error foo procop 
void foo run time error refers object 
redefinition inop procop 
erroneous uses 
fig 

erroneous uses inni statement 
discovered run time 
furthermore allowing redefinition lead hard find errors programmer accidentally redefines wrong operation inni statement 
inop may redefined procop subclass explicitly operation defines signature compatible method 
inni statement attempts service operation subclass compiletime error raised see line 
inni statement attempts service operation superclass run time error generated see line 
explicit required reduce potential accidental redefinitions change invocation servicing semantics explicit 
jr currently strict distinction operations methods inherited operation may redefined method inherited method may redefined operation 
distinction required concurrency constructs introduced jr send statement apply operations capabilities desirable statically check improper 
subclass allowed redefine inherited operation method send method fail run time method properly translated support asynchronous invocation 
set operations defined class directly translates interface exported remote instances class see section allowing standard method redefine operation equivalent removing operation remote specification 
restriction consistent behavior java subclass permitted remove declarations inherited specification 
redefining inherited method operation supported implementation reasons 
operation implicitly defined include exception throws clause 
inclusion support operations interfaces remote objects 
redefining method operation add exception throws clause subclass method 
java permit addition exceptions throws clause redefined methods 
support redefinition require modifying language library methods throw exception creating proxy handle exceptions thrown operations 
consider modifying java library purpose unacceptable 
creating proxy operation reduces performance operation invocations requires acm transactions programming languages systems vol 
tbd 
tdb month year 
keen proxy code handle communication exceptions general manner 
communication exceptions currently thrown user code programmer may handle appropriately 
inheritance anomaly concurrent object oriented languages exists conflict inheritance synchronization constraints requires redefinition inherited methods order maintain integrity concurrent objects 
conflict deemed inheritance anomaly matsuoka yonezawa 
complaints regarding inheritance anomaly focused functionally unnecessary redefinition methods violation encapsulation 
proposals discussed matsuoka yonezawa seek resolve inheritance anomaly attempt reduce amount redefinition required 
requiring redefinition implementation method proposals allow redefinition form synchronization constraint 
encapsulation argument resolved synchronization code subclass takes advantage knowledge synchronization code parent class 
jr inherently suffers inheritance anomaly allows reception messages body method jr inni statement appears executable code 
synchronization strategy redefined subclass methods may require redefinition order change operations receive 
redefinition required functionality method remain 
true java programs synchronized blocks opposed synchronizing entire method bodies methods emulate semaphores 
view synchronization cross cutting concern integral part implementation certain methods proper synchronization implementation method may simply incorrect 
consider simple example implementation hashtable versus thread safe hashtable uses synchronization support simultaneous access multiple threads 
inherent functionality essentially implementation thread safe hashtable necessarily requires proper synchronization 
implementation thread safe hashtable certainly simplified reuse basic hashtable reuse means implementation inheritance require method redefinition support synchronization 
feel drawbacks inheritance anomaly compensated flexibility provided servicing operations method bodies needed provide support argued section 
jr introduce difficulties relating inheritance anomaly discussed 
input statement service receive operations capabilities 
capabilities may refer operations different objects different classes different machines task determining code affected change synchronization policy requires programmer follow dynamic call graph 
problem eliminated restricting input statements operations defined object class method containing input statement executing acm transactions programming languages systems vol 
tbd 
tdb month year 
jr flexible distributed programming extended java serviced 
restriction prevent invocation operations operation capabilities 
alternative explored language gains matures 

implementation current jr implementation extends java compiler available sun jdk version 
jr translator converts jr programs standard java programs supported jr run time system 
jr run time system implemented standard java 
section discusses interesting parts implementation features provided jr jr virtual machines current implementation jr remote virtual machines created contacting centralized virtual machine manager called plays role similar sr andrews olsson 
uses rsh contact remote host execute jr virtual machine program 
jr virtual machine small java program implements interface communicate create objects physical machine 
jr virtual machine uses rmi contact register ready receive requests 
remote objects subsequently created contacting jr virtual machine directly rmi 
security implications 
rsh virtual machine creation requires systems allow remote execution programs relatively insecure protocol 
exploring alternatives allow virtual machine creation sacrificing machine security 
execution virtual machine subject security policy files user remote site 
communication virtual machines currently implemented rmi encrypted 
remote objects remote objects implemented serializable objects contain operations 
operation capabilities implement serializable interface 
remote object contains operation capability operation class interface 
remote objects mimic inheritance hierarchy classes associated 
operations operation capabilities shows actual inheritance hierarchy operation classes jr hierarchy specialization inheritance hierarchy 
proc operation implemented separate instance procop class nested class defined operation 
procop object may associated private method class definition 
invocations operation translated invocations appropriate method call send procop object 
translation similar common technique simulating method directly representable java acm transactions programming languages systems vol 
tbd 
tdb month year 
keen signature specific op op signature specific signature specific procop inop fig 

actual jr operation inheritance hierarchy 
class public op void foo int public void foo int 
public void bar throws java rmi foo class 
implementation procop foo public void bar throws java rmi op foo call jr code 
generated java code 
fig 

translation invocation procop 
reflection object defined interface 
shows example translation 
inni operation implemented inop object contains message queue store arguments invocation 
invocation inop translated appropriate method invocation corresponding object 
operations implement rmi remote interface methods invoked remote hosts 
asynchronous message passing current implementation jr run time system built rmi 
send statement truly asynchronous traditional sense 
send implemented rmi invocation send method object corresponds operation invoked 
inop send method places message containing actual arguments invocation queue returns 
procop send method spawns new thread execute method associated procop returns releasing invoking process 
inheritance java method invocation causes dynamic lookup determine actual method invoke 
lookup done accessing data field 
operation jr implemented signature specific op object generated java code provide support dynamic lookup operations 
acm transactions programming languages systems vol 
tbd 
tdb month year 
jr flexible distributed programming extended java support provided access methods retrieve appropriate operation object example seen line 
remote class loading dynamic class loading described java rmi specification sun microsystems allows class files loaded local classpath predefined url 
jr run time system requires necessary class files program accessible classpath originating host program initially executed 
remote object created necessary class files retrieved object originating host custom class loader 
reduces amount setup required user eliminates need separate server provide file access 
termination detection jr run time system provides support termination detection programs jr concurrency constructs 
specifically termination detection guaranteed programs directly java threads synchronized statement method attribute rmi 
restriction due implementation termination detection user level jr run time system 
implementation relies instrumenting generated java code track creation completion threads sending receiving messages 
java concurrency constructs similarly instrumented doing require modification class library java virtual machine reluctant 
automatic termination detection optional may disabled programs java concurrency constructs 
termination detection done operation jr exit removed figures 
program terminate readers writers completed iterations server blocks waiting request 
jr versus sr addition object oriented features discussed previous sections sr provide jr supports concurrent programming features sr exception concurrent invocation statement quantifiers statements typically specify indices operation arrays 
remaining features reasonable effort added jr opted point 

performance results number microbenchmarks study performance jr programs equivalent rmi programs 
performance results demonstrate remote method invocations jr incur little overhead compared equivalent invocations standard rmi jr built 
experiments conducted cluster mhz intel pentium ii workstations connected mbps ethernet network 
experiments conducted acm transactions programming languages systems vol 
tbd 
tdb month year 
keen sun jdk version linux 
experiments results averages multiple executions respective benchmarks 
experiment demonstrates time needed invoke empty method 
table shows results repeatedly invoking empty procop jr empty method java 
method takes argument single object contains array specified number integers 
object size ints jr java jr time java time ratio table time invoke empty jr procop empty java method local object 
evidenced experiment jr method invocation takes times longer standard method invocation 
current implementation jr requires additional method invocations support dynamic dispatch operations causal ordering messages 
overhead support dynamic dispatch operations reduced implementation techniques similar methods virtual method table 
optimization compiler level may reduce overhead local operation invocations eliminating invocations causal ordering 
experiment taken extends previous experiment measure invocations empty method remote object 
table ii shows results repeatedly invoking empty procop jr empty method standard rmi 
remote method takes argument single object contains array specified number integers 
object size ints jr ms jdk rmi ms jr time rmi time ratio table ii 
time invoke empty jr procop empty rmi method remote object 
performance differences demonstrated table ii attributable method invocation overhead inherent current implementation jr remote method invocation begins invoking call method operation capability 
operation capability call method invokes call method procop 
invocation transmits parameters remote host rmi 
remote host procop call method invokes actual user defined method 
table iii shows results multiple executions readers writers program section jr rmi 
experiment readers differences minor instances jr outperforming rmi due extra neous network traffic observed 
acm transactions programming languages systems vol 
tbd 
tdb month year 
jr flexible distributed programming extended java writers colocated machine server manages synchronization resides separate machine 
shows jr solution readers writers server uses inni statements service invocations different associated requesting releasing read write access 
rmi solution experiment uses semaphore approach solving readers writers problem 
table iii includes performance results roughly equivalent jr semaphore solution 
ri wi jr inni ms jr semaphore ms jdk rmi ms jr inni rmi ratio jr semaphore rmi ratio table iii 
time complete execution iterations ri wi readers writers 
jr semaphore solution uses jr semaphore abbreviations 
abbreviations translate sends receives inop 
semaphore solution perform rmi solution overhead associated supporting general message passing 
optimization inop process fairness code improve performance solution 
noted jr semaphore solution outperform rmi solution rmi server restarted test 
restarting server tests reduced effectiveness java just time jit compiler rmi solution 
results shown table iii rmi solution persistent server 
jr solution uses inni statement perform solutions 
performance difference attributable current implementation inni statement fairness preserving semantics 
table iv shows percentage time spent executing code pertains fairness semantics reader writer experiment 
shown table large percentage time spent selecting invocation service currently pending invocations 
functionality invocation sort select invocation remove invocation lock acquire wait table iv 
jr inni solution percentage total execution time spent executing synchronization code readers writers experiment 
invocation selection takes large percentage total execution time program invocations operation examined acm transactions programming languages systems vol 
tbd 
tdb month year 
keen satisfies arm st clause 
program st clause invocation arguments 
st clause false invocations operation examined needlessly 
optimization cases st clause lifted selection loop generated code 
table compares performance results standard sequential version java grande forum fourier benchmark edinburgh parallel computing centre distributed versions written jr rmi 
number coefficients sequential java jr server jr servers jdk rmi server jdk rmi servers jr rmi server ratio jr rmi servers ratio table time calculate coefficients function defined interval 
distributed versions program divide computation equally available servers 
jr program uses asynchronous message passing initiate computation collects results inni statement 
rmi version uses threads concurrently initiate invocations remote method collect results 

related java message service java enterprise edition provides message service api java message service jms sun microsystems allows point point publish subscribe messaging 
support directed enterprise solutions 
message destinations exist outside specific programs accessed jms provided classes 
programs provided means names message destinations point point case name message queue 
message service program create connection specific destination send receive messages 
message service intended loosely coupled enterprise level solutions quite unwieldy tightly coupled concurrent programs 
message destinations created maintained administrative tools truly considered language level mechanism distributed programming 
corba corba object management group notification service extension event service provides push pull messaging event channels 
general framework supplier may push events event channel wait event channel pulls events supplier 
similarly consumer may pull events event channel allow channel push events consumer 
acm transactions programming languages systems vol 
tbd 
tdb month year 
jr flexible distributed programming extended java corba greatest strengths stem language architecture independence 
corba loosely coupled distributed programs 
java message service discussed corba notification service event channels need stand programs 
notification service writing tightly coupled concurrent programs targeted jr support asynchronous communication differs greatly solutions 
notification service support asynchronous method invocation events pushed clients 
client provides support pushes implementing interface 
single known push method defined method invoked asynchronously jr allows operation invoked asynchronously 
additionally attempt pull single channel time jr client attempt receive multiple operations single input statement prioritize messages 
events corba notification service generic meaning type data satisfy constraints placed general remote invocations corba sent events 
flexibility requires consuming object essentially data sent events 
address problem corba provides typed events require agreed interfaces structured events map event data known structure 
event types mixed supplier push generic event consumer attempts pull structured event 
jr supports messaging operations signatures similar methods 
event type implicitly agreed signature operation run time system manages marshalling unmarshalling sent data 
corba notification service provides event filtering filter objects registered admin object associated event channel proxy object sits admin consumer 
filters proxy filter events specific consumer filters admin filter events group consumers 
filters specified filter constraint language stored strings running program 
filters provide functionality similar provided synchronization expressions input statements jr filters access variables local pulling consumer change order events delivered 
jr includes support comparing selecting pending messages multiple operations 
java extensions extensions java modified concurrency model include example asynchronous communication distributed shared memory active agents 
extensions provide flexibility operations capabilities inni statements 
previous extensions require user manually start remote programs 
provides remote object creation asynchronous rmi object migration collection java classes 
project modifications java programming language run time system 
creation remote objects invocation methods remote objects acm transactions programming languages systems vol 
tbd 
tdb month year 
keen synchronous asynchronous done class 
arguments new rmi include string specifying type object create method invoke 
preprocessor possible statically determine object created method invoked exists 
drawback package approach described near section 
philippsen zenger extends java addition remote keyword provide transparent remote objects 
includes translator converts programs standard java programs 
translation includes converting remote classes corresponding rmi support classes simplifying programmer 
java extended include expression allows instantiation remote objects specified hosts 
keyword mapped new opcode requires extended virtual machine 
implementation restricts remote method arguments primitive types jr allows serializable remote object argument 
asynchronous remote method invocations provided stub skeleton generator standard 
unfortunately remote method invocations asynchronous 
programmer provided access return values mailbox 
socket implementation asynchronous message passing discussed hartley 
implementation allows single object passed message threads provides support conditional receive limited inni statement 
support rendezvous provided blocking request client request reply pair server 
java dsm yu cox charlotte extend java include mechanisms distributed shared memory 
alexandrov javelin christiansen seek exploit potential parallel computation world wide web :10.1.1.37.8882
communicating java threads extends concurrency model java providing communication threads csp hoare paradigm 
support data driven objects java discussed kal 
current jr implementation uses rely rmi 
jr implementations take advantage improved optimized communication frameworks 
example maassen discuss efficient versions java rmi 
java sr adds sr operations asynchronous message passing dynamic resource creation java 
initial effort java sr shortcomings 
java sr uses preprocessor translate programs standard java adds little java syntax 
result mix syntactic extensions define operations exposed implementation details interacting operations 
java sr truly integrate sr concurrency model vms java 
java sr address extension sr constructs terms java programming language 
similar vein related java wellings discuss extending ada fully integrate object oriented programming ada protected objects 
discussion highlights syntactic semantic issues acm transactions programming languages systems vol 
tbd 
tdb month year 
jr flexible distributed programming extended java making ada protected types extensible 
concurrent object oriented languages numerous concurrent object oriented languages proposed discussed survey briot 
languages various concurrency models ways expressing synchronization concurrent objectoriented languages take object oriented approach synchronization jr including briot bast guerraoui guerraoui guerraoui 
example derives different kinds monitor classes common base class 
jr shares features concurrent object oriented languages jr differs approach building synchronization operation abstraction concurrency model definition extension java 
furthermore survey classifies different approaches object oriented concurrent programming coarse categories briot 
categories library approach integrative approach reflective approach 
library approach provides class libraries encapsulate concurrency components java threads represented objects 
integrative approach unifies concurrency concepts object oriented concepts merging notion object process create notion active object 
reflective approach uses reflection mechanisms provide concurrency components meta level 
jr takes integrative approach defining concurrency model 
jr provides operations general communication abstraction 
operations defined part object operation associated specific object 
operations jr programmer create active objects synchronized objects distributed objects 
object active process keyword create thread object 
jr programmer java synchronized keyword synchronize invocations 
discussed section jr provides dynamic remote object creation remote facilitate distribution objects 

jr programming language integrates sr concurrency model java programming language 
novel approach resolves tension inheritance concurrency 
jr provides flexible way program distributed applications great performance costs 
jr programming language provides generalization input inni statement provides greater control selection invocations service 
specifically extended input statement allows selection comparisons entire set pending invocations see keen 
jr extends java exception model handle exceptions occur asynchronous communication see keen olsson 
includes exceptions thrown method inni statement invoked send exceptions thrown reply forward statement section executed 
acm transactions programming languages systems vol 
tbd 
tdb month year 
keen goal initial implementation jr system improve concurrency model provided extended java 
performance primary concern 
experiments demonstrate application benchmarks jr incurs little penalty equivalent rmi programs 
believe ease programming concurrent applications jr rmi outweighs incurred performance penalty 
performance improved tuning jr run time system greater performance gains come optimizations done static code analysis specialized translations 
additional study communication frameworks rmi improve performance 
jr programming language successfully courses concurrent programming small moderate sized projects 
projects range games distributed file system simulation 
explore implementation larger concurrent systems 
alexandrov schauser 
global web parallel computing infrastructure 
th international parallel processing symposium 

andrews 
concurrent programming principles practice 
benjamin cummings publishing redwood city ca 
andrews olsson 
evolution sr language 
distributed computing 
andrews olsson 
sr programming language concurrency practice 
benjamin cummings publishing redwood city california 
andrews olsson nilsen townsend 
overview sr language implementation 
acm transactions programming languages systems jan 
atkins 
experiments sr different upcall program structures 
acm transactions computer systems november 
atkins olsson 
performance multi tasking synchronization mechanisms programming language sr software practice experience september 
kedem wyckoff 
charlotte metacomputing web 
proceedings th conference parallel distributed computing systems 

experiments object oriented simulation 
proceedings conference object oriented programming systems languages applications 

black 
supporting distributed applications experience eden 
proceedings tenth acm symposium operating systems principles 

acm operating systems review 
sandhu talbot shan 
world wide supercomputing 
european symposium operating system principles 
brinch hansen 
java insecure parallelism 
acm sigplan notices april 
briot 

testbed classifying designing actor languages smalltalk environment 
proceedings ecoop cook ed 
cambridge university press nottingham 
briot guerraoui 

concurrency distribution objectoriented programming 
acm computing surveys september 
christiansen schauser wu 
javelin internet parallel computing java 
concurrency practice experience nov 
acm transactions programming languages systems vol 
tbd 
tdb month year 
jr flexible distributed programming extended java cook 
mod language distributed programming 
ieee transactions software engineering november 
edinburgh parallel computing centre 
java grande forum benchmark suite 
www ed ac uk research benchmarking html 
felber guerraoui 
protocol classes designing reliable distributed environments 
ecoop object oriented programming cointe ed 
lecture notes computer science vol 

springer 
guerraoui 
strategy design pattern compose reliable distributed protocols 
third usenix conference object oriented technologies systems coots june 
portland oregon 
usenix berkeley ca usa 
guerraoui 
flexible protocol composition bast 
proceedings th international conference distributed computing systems icdcs 
ieee computer society press amsterdam netherlands 
gehani 
rendezvous facilities concurrent ada language 
ieee transactions software engineering november 
gehani 
concurrent programming language 
silicon press summit nj 
gehani 
message passing concurrent synchronous versus asynchronous 
software practice experience june 
gosling joy steele 
java language specification 
java series 
sun microsystems 
isbn 
guerraoui 
tool programming reliable distributed applications 
ieee concurrency oct dec 
hartley 
concurrent programming java programming language 
oxford university press 

communicating java threads 


hoare 
communicating sequential processes 
communications acm 
chan 
environment parallel distributed mobile java applications 
acm java grande conference 

kal 
design implementation parallel java global object space 
proceedings international conference parallel distributed processing techniques applications 

keen 
integrating concurrency constructs object oriented programming languages case study 
ph thesis department computer science 
keen olsson 
exception handling asynchronous method invocation 
euro par parallel processing monien feldmann eds 
number lecture notes computer science 
springer verlag 
liskov herlihy gilbert 
limitations remote procedure call static process structure distributed computing 
proceedings th acm symposium principles programming languages 
st petersburg fl 
maassen van bal 
efficient implementation java remote method invocation 
acm sigplan symposium principles practice parallel programming 

matsuoka yonezawa 
analysis inheritance anomaly object oriented concurrent programming languages 
research directions concurrent object oriented programming 


java synchronising resources concurrent distributed programming 
thesis university warwick 
srinivasan lea 
remote objects java 
iasted international conference networks 
acm transactions programming languages systems vol 
tbd 
tdb month year 
keen philippsen 
efficient rmi java 
acm java grande conference 

olsson 
sr discrete event simulation study concurrent programming 
software practice experience december 
philippsen zenger 
transparent remote objects java 
concurrency practice experience nov 
pierce 
types programming languages 
mit press cambridge massachusetts 
williams 
asynchronous remote method invocation mechanism java 
concurrency practice experience nov 
scott 
messages vs remote procedures false dichotomy 
acm sigplan notices may 
scott 
language support loosely coupled distributed programs 
ieee transactions software engineering january 
scott 
lynx distributed programming language motivation design experience 
computer languages 
sun microsystems 

java remote method invocation specification 
sun microsystems palo alto ca 
sun microsystems 

java message service specification 
sun microsystems palo alto ca 
object management group 
common object request broker 
object management group 
www omg org 
wellings johnson wolf 
integrating object oriented programming protected objects ada 
acm transactions programming languages systems 
yu cox 
java dsm platform heterogeneous computing 
concurrency practice experience nov 
acm transactions programming languages systems vol 
tbd 
tdb month year 
