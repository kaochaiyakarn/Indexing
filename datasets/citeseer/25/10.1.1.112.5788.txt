lisa machine description language cycle accurate models programmable ds architectures stefan andreas heinrich integrated signal processing systems aachen university technology aachen germany hoffmann meyr ert 
rwth aachen de presents machine de scription language lisa generation bit cycle accurate models dsp processors 
behavioral operation description architectural details pipeline operations modern dsp processors covered 
behavioral model lisa descriptions clude architecture related information instruction set 
information provided lisa models enables automatic generation simulators assemblers essential elements dsp software development environ ments 
order proof applicability approach realized model texas ments tms dsp de rived lisa code examples 
designers today telecommunication products cel phones modems networking devices facing rapidly growing system complexity 
driven advances semiconductor technology need new applica tions amount system functionality realized single chip increasing enormously 
due complex ity time market constraints designer ity important factor successful products 
reason shelf digital signal processors dsps application specific instruction set processors asips programmable components increasingly employed systems growing amount system functions im plemented software hardware 
bility helps rise designer productivity bility software allows late design changes shortening design cycles 
permission digital hard copies part personal classroom granted fee provided copies distrib profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
dac new orleans louisiana acm design automation santa irvine ca usa vz com integrating complete systems consisting hardware software components single chip raises new challenges area verification 
hardware models prototypes complete system verified means simulation 
simulation hardware software puts specific requirements simulation ilc programmable side 
generally essential designers systems cycle accurate processor models modern dsps microcontrollers imple ment deep pipelines 
complex pipeline mechanisms significant impact performance cov ered models just accumulate instruction latencies cope requirements cycle event driven simulation hardware components 
embedded processors dsps asips need com plete tool set consisting code generation simulation tools 
especially task building custom simulator new architectures extremely error prone tedious 
lengthy process matching simulator model processor architecture 
efforts reduced significantly retargetable simulator generated machine descriptions 
task retargeting different tools compiler assembler simulator processor requires different types architecture related information 
formation described different models 
memory model lists registers memories system respective bit widths ranges aliasing 
resource model describes available hardware resources resource requirements operations 
resources reproduce properties hardware structures exclusively operation time 
behavioral model activities hardware structures abstracted operations changing state system 
abstraction level model range widely hardware implementation level level high level language hll statements 
instruction set model collects instructions combinations hardware operations permitted cpu controller 
furthermore comprises instruction semantics formal representa tion admissible operands binary representation assembly syntax 
timing model activation sequence hardware operations units specified 
lisa language approach lisa language designed formalized description programmable architectures peripherals inter faces 
development necessary existing ap proaches able produce cycle accurate models modern dsp architectures example ti tms cover instruction set 
language pre sented able support dsp embedded simd vliw processor architectures deep pipelines tms xx ti test case 
lisa supports different description styles models var ious abstraction levels 
similar programming lan guages user high degree freedom describe view architecture 
furthermore hierarchical modeling style supported allow structuring easy maintenance code 
due syntax lisa easily intuitively designers exchanged non ambiguous specification target architecture 
specification valuable replacement textual documentation written designers usually faulty date 
approach lisa lan guage enables automatic generation text book documentation 
previous hardware description languages hdls vhdl ver ilog widely model simulate processors mainly goal developing hardware 
models instruction level processor design number disadvantages 
cover hardware implementation de tails needed performance evaluation software verification 
description detailed hardware structures significant impact simulation speed 
problem extraction struction set highly complex task instruction set formation assembly syntax obtained hdl descriptions 
publications machine description languages fo retargetable compilation embedded processors 
approaches part marion environ ment system vliw compilation reservation tables code generation 
reservation tables describe pipeline operations flushes model pipeline hazards 
publications address retargetable compilation simulation 
language nml developed tu berlin adopted projects 
retargetable assemblers disassemblers generated dsp processors possible produce cycle accurate simu pipelined processor architectures 
main reason simple underlying instruction sequencer support pipeline operations flushes 
processors complex execution schemes texas instruments tms described instruction set level numerous combinations parallel sequential instructions fetch packet 
significant restriction nml information action attribute instruction selection task compiler description operation behav ior simulator 
consequently instruction semantics instruction behavior merged described abstraction level 
restrictions apply approach isdl similar nml machine description parameterizes experi mental architecture lo 
similar approach language expression ll incorporates particular mechanisms description memory hierarchies 
results published indicate applicability cycle accurate simulation purposes 
language derived earlier lisa extended support multiple pipelines 
results provided realized simulators language 
summarize review approaches support cycle accurate simulation fast processor simula tors compiled techniques 
interest supporting technique issue realizing cycle accurate processor models motivated language lisa 
lisa language aspects lisa incorporates ideas similar nml 
turned experience different dsp architectures significant limitations ex machine description languages overcome allow description modern commercial dsps 
reason lisa includes improvements areas support cycle accurate processor models including constructs specify pipelines mechanisms target class processors includes simd vliw superscalar architectures real products currently market direct support compiled simulation techniques strong orientation programming language distinction behavior semantics freely determine abstraction level processor model support instruction aliasing complex instruction coding schemes 
lisa descriptions composed resource declarations hand operations hand 
de resources represent storage objects hardware architecture registers memories pipelines cap ture state system model limited availability resources operation access 
sec tion provides discussion resource declarations 
operations basic objects lisa 
represent designer view behavior structure instruction set programmable architecture 
operation resource section begins keyword resource definitions collect description different properties followed braces enclosing object definitions 
system operation behavior instruction set information definitions style attributed timing 
operation attributes defined keywords register control register sections 
program counter 

section describes binary image instruction word part instruction set model 
syntax section describes assembly syntax instructions operands part instruction set model 
semantics section specifies instruction se mantics 
behavior expression sections describe components behavioral model 
simula tion operation behavior executed modifies values resources drives system new state 
activation section describes timing operations relative current operation 
declare section contains local declarations identifiers lists alternative elements group 
sections predefined lisa designer may add sections order describe attributes power consumption 
designer full freedom determine tion level model operations 
example instruction processor may represented just operation case instruction set model 
case may described set operations represent separate actions clock cycles case cycle accurate model 
presentation operation sections section 
resources resource section lists definitions objects required build memory model resource model 
object definitions resource section contribute models automatically receiving properties memory element resource element 
depends operation functionality proper ties 
register pipeline stage example may properties resource register statements operation behavior 
detailed dis role resources generic machine model 
resource program counter int pc control register int instruction register register bit accu register bit carry data int data ox data memory int data mem memory int prog example declaration resources 
keywords mandatory classify definitions 
example shows declaration resources 
lisa language provides designated mechanisms model pipelines processor architecture 
principle pipeline model operations assigned pipeline stages 
mechanisms respec tive pipelines defined resource section 
declaration starts keyword pipeline fol identifier name pipeline list stages shown example 
resource pipeline fetch pipe pg ps pw pr dp pipeline execute pipe dc el ez example pipeline definition 
stage identifiers enclosed braces separated semicolons 
ordered stage 
operations assigned certain pipeline stage name pipeline followed dot identifier respective stage pipe dc example 
operations operations formed header line operation body 
header line consists keyword opera tion identifying name operation possible options operation name operation options sections 
enclosed curly braces operation body contains different sections describe properties instruc tion set model behavioral model timing model required declarations 
instruction set model coding section elements specified se quence coding objects 
coding objects sequence binary code coding section operation 
binary code specified sequence composed preceded ob 
binary sequence decimal value written ob 
decoding bit pattern match provided instruction word select specific operation resource 
encoding pattern generate respective instruction word 
matches don care bit 
object identifiers operations include coding section 
coding informa tion referenced operation inserted respective position 
sample coding section look coding operand operand result order identify instructions coding sequences defined operations compared actual value current instruction word 
specified coding section comparing resource values cod ing sequence 
compare operator separates identi resource shall compared left hand side coding sequence right hand side 
comparison represents top object coding tree 
operation declare group instruction abs add ii ii cmp ii id mu mv norm ii ii ii sat sub ii st xor coding instruction register instruction syntax instruction instruction example root coding tree 
purpose syntax section describe syn tax assembly instructions 
specified textual de scription instruction mnemonics operands numeric parameters evaluating string characters 
instruction mnemonics specified strings enclosed quotation marks 
operands may specified referencing operations immediate values 
assembly string pattern match provided assembly statement select specific operation resource 
disassembly pattern generate respective assembly statement 
object identifiers operations include syntax section 
syntax informa tion referenced operation inserted respective position 
sample syntax declaration look syntax add operand operand ii result ii declare section similar programming languages lisa requires symbol declarations objects operations 
de clare section collects types symbols declaration operation definition operation groups declaration group declaration inter section labels 
purpose groups list alternative operations context 
correspond mech anism rules nml 
group name replaces ref erence specific operation part group 
typical application groups admissible source destination operands instructions 
group definitions located declare section identified name followed group mem bers 
member group operation identi 
group members selected coding syn tax information provided respective operations match current instruction coding current assembly statement see example 
groups src dest instantiations operation group consisting element operation register 
admissible source des operands operation add coding syntax section 
operations listed group declaration provide coding syntax informa tion order enable operation selection 
operation add declare group dest register coding dest ob ob syntax add src dest dest src operation register declare label index coding index syntax index tu expression example operation groups 
declaration label index operation register inter section 
link elements different sections 
bits coding linked numerical parameter syntax 
combination forms translation rule assembler disassembler 
example assembler statement add translated binary code 
behavioral model behavior section describes behavior opera tions programming language sec tion seen implementation body function 
basic block local variables declared 
behavioral code groups direct refer ences operations permitted 
referenced op erations provide behavior code expressions allow access resources 
expression section identifies object ac cessed behavior part referencing operation 
expressions typically operands resource accesses 
effect represent mechanism modes nml 
example depicts operation add accesses expressions identified operation register 
example assembly statement add cause behavioral code executed simulation timing model ac ac cycle accurate machine models effects pipelines processor architecture visible de scribed 
lisa assumes operations executed syn control steps 
designer freedom determine control steps correspond instruction cycles clock cycles phases 
control steps lisa incorporates generic pipeline model major mechanisms operation assignment stage pipeline activation operations delay 
order deal complex pipelines modern dsp processors lisa allows description multiple pipelines supports typical pipeline operations stalls flushes 
mechanisms generic pipeline open user defined operations supplement pipeline control mechanisms 
operations assigned pipelines defined resource section see example 
assignment header line respective operation appending keyword identifier pipeline stage operation add execute pipe el purpose activation section describe activation timing operations respective stage pipeline 
supplements behavior section call operations control step 
acti vation section operations activated subsequent control steps 
lets designer con operations belong instruction shown example 
operation prog address generate fetch pipe pg operation prog address send fetch pipe ps operation prog access ready wait fetch pipe pw operation prog fetch packet receive fetch pipe pr operation main activation dispatch complete multicycle nop prog address generate 
prog address send prog access ready wait 
prog fetch packet receive 
dispatch multicycle nop fetch pipe dp stal execute pipe dc stal fetch pipe shift execute pipe shift example activation operations 
operation main activates operations generate certain condition 
activation time directly determined number stages spatial distance pipeline 
activation operations assigned pipeline stage activated control step 
delay caused spatial distance possible add delays measured control steps 
general activation section consists list operations separated activation operators 
types operators concurrent activation operator comma delayed activation operator semicolon 
operators notation operations pipeline 
allow activation embedded control structures switch case 
conditional operation structuring crucial issues development processor simulators simulation speed 
turned research studies technique compiled simulation achieve speed ups orders magnitude interpretive processor simulators 
order support generation compiled simulators lisa features conditional structures operation level evaluate compile ime statements switch case statements 
conditional structures allow select different blocks lisa code 
enclose operation sections 
selection selection group members 
operation register declare group side ii side label index coding index switch side case syntax index expression case side syntax index expression operation coding ob syntax operation side 
coding lb syntax example conditional operation structuring 
example depicts operation register includes switch case statement select register sets 
selection respective syntax expression determined compile time avoiding check bit run time simulation 
details lisa language 
ti tms simulator order check applicability lisa language realized models different dsps 
complex architecture ti tms 
cooperation texas instruments cycle lisa model processor realized designer month 
description processor core including memory interface interrupt controller consists resources operations comprising full set real instructions instruction aliases adds lines lisa code average approximately lines code operation 
turned modeling experience issues hard est problems description processor architectures appear processor models realized completely including details verified successfully 
retargetable development tools developed environment retargetable devel opment tools configured lisa descriptions 
parser reads lisa models translates intermediate data base accessed tools 
implemented retargetable compiled simulator generated data base 
translation tms processor model simulator takes seconds sparc ultra workstation 
realized simulator successfully verified simulator sim texas instruments number typical dsp applications 
lisa language aims formal description programmable architectures peripherals inter faces 
language supports different description styles models various abstraction levels 
development necessary existing approaches able produce cycle accurate models pipelined dsp architectures cover instruction set 
furthermore lisa enables principle fast compiled simulation embedded processors 
provides overview lisa language discusses modeling issues sample lisa code derived realized model ti tms 
focus modeling real life pro cessor architectures generation fast simulators 
systematically investigate retargetable fast simula tors compiled techniques report simula tion speed technology 
issue integration software simulators hw sw simulation environ ments 
furthermore goal ongoing language design address retargetable compiler back ends 
authors gas dan david dave thomas technical organizational support project 
meyr lisa machine de scription language generic machine model hw sw design proceedings ieee workshop vlsi signal processing san francisco oct 
texas instruments tms oc cpu struction set guide mar 
hardware software simulation proc 
acm ieee design automation conference dac 
henry eggers marion system retargetable instruction scheduling proc 
acm sig plan conference programming language design implementation toronto canada pp 

rau vliw compilation driven machine descrip tion database proc 
nd code generation workshop leuven belgium 
van describing struction set processors nml proc 
european de sign test conf pan mar 
generation software tools processor descriptions hardware software codesign proc 
acm ieee design automation confer ence dac jun 
design dsp systems chess checkers nd int 
workshop code genera tion embedded processors leuven mar 
devadas isdl instruction set description language retargetability proc 
acm ieee design automation conference dac jun 
lo schlansker rau hpl ar chitecture specification version hp laboratories technical report hpl mar 
ll expression language architecture exploration compiler simulator re proceedings european conference automation test date mar 
processor description language supporting re multi pipeline dsp program development tools proceedings international symposium system synthesis isss dec 
meyr fast sim ulation ti tms dsp proc 
int 
conf 
signal processing application technology ic spat san diego pp 
sep 
www 
ert 
mth aachen 
de lisa lisa 
html 
