generalisation simplification applications paillier probabilistic public key system ivan damg ard mads jurik university aarhus brics 
propose generalisation paillier probabilistic public key system expansion factor reduced allows adjust block length scheme public key fixed loosing homomorphic property show generalisation secure paillier original system 
construct threshold variant generalised scheme zero knowledge protocols show ciphertext encrypts set plaintexts protocols verify multiplicative relations plaintexts 
show building blocks applying scheme efficient electronic voting reduces dramatically needed compute final result election compared previously best known schemes show basic scheme vote easily adapted casting vote candidates basic building blocks adapted provide receipt free elections appropriate physical assumptions scheme elections optimised certain range parameter values ballot size log bits 
paillier proposes new probabilistic encryption scheme computations group rsa modulus 
scheme attractive properties homomorphic allows encryption bits operation constant expansion factor allows efficient decryption 
propose generalisation paillier scheme computations modulo ns 
show system simplified degrading security public key consist modulus allows instantiating system block length encryption chosen freely encryption independently size public key loosing homomorphic property 
generalisation allows reducing expansion factor paillier original system 
prove generalisation secure paillier original scheme 
basic research computer science centre danish national research foundation 
kim ed pkc lncs pp 

springer verlag berlin heidelberg ivan damg ard mads jurik propose threshold variant generalised system allowing number servers share knowledge secret key large subset decrypt ciphertext smaller subsets useful information 
prove random oracle model scheme secure standard centralised implementation 
propose zero knowledge proof knowledge allowing prover show ciphertext encodes plaintext 
derive tools protocol showing ciphertext encodes number plaintexts 
propose protocol allows verification multiplicative relations encrypted values revealing extra information 
look applications electronic voting schemes 
large number schemes known efficient terms needed voters cramer gennaro schoenmakers 
protocol provides fact general framework allows usage probabilistic encryption scheme encryption votes encryption scheme set nice properties particular homomorphic 
basic idea straightforward voter broadcasts encryption vote sending bulletin board proof vote valid 
valid votes combined produce encryption result homomorphic property encryption scheme 
set share secret key scheme threshold fashion decrypt publish result 
paillier pointed encryption scheme homomorphic may applicable electronic voting 
order apply framework important building blocks missing needs efficient proof validity vote efficient threshold variant scheme result decrypted allowing single entity possibility learning single voters voted 
building blocks precisely provide 
immediately get voting protocol 
protocol needed voters order original version 
needed produce result reduced dramatically explain 
el gamal encryption decryption process election produces gr mod prime generator desired result 
needs solve discrete log problem order find result 
bounded number voters feasible moderate size requires exponentiations may certainly wants avoid large scale elections 
problem worse consider election choose candidates 
method exponential requires time prohibitively expensive elections large scheme propose removed completely 
decryption process produces desired result directly 
give ways implement efficiently constraints voting occur real elections generalisation paillier probabilistic public key system allowing vote precisely candidates vote 
schemes size single ballot bit length modulus propose variant different technique ballots size max log log 
log efficient optimal constant factor log bits distinguish candidates 
furthermore scheme requires decryption operation 
related independent earlier stern proposed threshold version paillier original scheme 
threshold scheme uses adaptation shoup threshold rsa scheme techniques somewhat different particular construct threshold version generalised crypto system paillier original scheme 
voting pointed potential application suggestion protocols prove encrypted vote correctly formed course necessary secure election practice 
done concurrently independent pointcheval stern propose voting scheme somewhat similar 
seen complementary sense proposal oriented system architectural aspects large scale election optimisation building blocks 
compare scheme note modulus length chosen scheme produces ballots size 
estimate explicit constants dominating term notation kl 
voting scheme uses generalised paillier crypto system chosen freely voting scheme accommodate values ballots produce size log 
working concrete constants involved finds complexity dominated term log large scale elections gained significant factor complexity compared 
hirt sako propose general method building receipt free election schemes protocols vote buying coercing possible voters prove voted 
method applied receipt free version scheme 
applied scheme efficiency gain non receipt free case 
complexities assume length challenges zeroknowledge proofs strictly speaking complexity holds log needed security anyway satisfied practice 
ivan damg ard mads jurik generalisation paillier probabilistic encryption scheme public key crypto system describe uses computations modulo rsa modulus natural number 
contains paillier scheme special case setting 
start observation pq odd primes multiplicative group direct product cyclic order isomorphic follows directly elementary number theory 
factor group cyclic order arbitrary element ah denote element represented factor group lemma 
element order ns ns 
proof 
consider integer number modulo ns modulo clearly case ns follows order divisor ns number form set consider term sum claim term divisible trivial follows 
prime factors divide assume contradiction ns loss generality assume means know ns divides dividing numbers see divide number term sum division rest divisible number fact modulo contradiction 
order relatively prime implies immediately element generator possibly cosets ns leads natural numbering cosets 
final technical observation need easy compute mod show 
define function clearly mod 
modn describe algorithm computing number 
general idea algorithm extract value part part extract mod mod forth 
easy extract mod mod extract rest generalisation paillier probabilistic public key system induction step th step know ij 
means ij ij mod ij ij 
ij modn notice term ij ij satisfies ij mod contributions vanish modulo nj multiplication means get mod ij ij 
ij modn just rewrite get wanted ij ij ij mod ij 
ij modn mod ij equation leads algorithm mod nj mod nj nk 
mod nj 
ij ij modn ready describe cryptosystem 
fact natural number build cryptosystem css follows ivan damg ard mads jurik key generation 
input security parameter choose rsa modulus pq length bits choose element ns jx mod ns known relatively prime done choosing random computing alternatives described 
common multiple 
chinese remainder theorem choose mod mod 
choice 
paillier original scheme smallest possible value 
making threshold variant choices better expand section 
public key secret key encryption 
plaintext set 
plaintext choose random ns ciphertext mod ns decryption 
ciphertext compute cd mod ns clearly get ns ji ns ns apply algorithm compute mod applying method replaced clearly produces value jd mod computed fly saved part secret key 
case obtain cleartext jd mod clearly system additively homomorphic product encryptions messages encryption mod ns security system assumption introduced paillier decisional composite residuosity assumption dcra conjecture 
probabilistic polynomial time algorithm assume gets input 
bits chosen described random random th power random element subgroup defined earlier 
outputs bit probability ifx random probability ifx random th power 
negligible negligible usual means smaller polynomial large discuss semantic security css 
equivalent formulations semantic security 
definition 
adversary public key cryptosystem gets public key pk generated parameter input outputs message encryption pk message strictly speaking need insignificant constant 
generalisation paillier probabilistic public key system chosen uniformly message space outputs bit 
respectively probability outputs encryption respectively random encryption 
define advantage adv 
cryptosystem semantically secure probabilistic polynomial time adversary adv negligible paillier showed semantic security cryptosystem cs equivalent dcra 
equivalence holds choice follows easily fact ciphertext random encrypts message cg mod random random th power 
particular may choose degrading security 
simplicity public key consists modulus show fact security css equivalent dcra theorem 
cryptosystem css semantically secure dcra assumption true 
proof 
ciphertext css obtain ciphertext cs reducing modulo implicitly reduces message modulo clear dcra fails css secure converse show induction security css follows dcra 
exact ly paillier result 
take assume cst secure 
message space css 
message written adic notation tuple ms ms mi zn mi ni dn ms distribution obtained encrypting message ms public key mi replaced means corresponding position message chosen uniformly zn encrypting 
assume contradiction css insecure adversary infinitely adv polynomial 
take loss generality assume 
suppose public key security parameter get message ms show sample dn ms 
probability outputs 
course infinitely case successful adversary cs follows get public key get ms return ms output 
get ciphertext encrypts ms cs random ciphertext random element 
consider element know encryption plaintext ms random element significant position 
ns mod ivan damg ard mads jurik encryption ms 
random encryption ms give cns mod ns return bit outputs 
encrypts ms shown sample dn ms sample dn ms 
assumption breaks cs advantage contradicts induction assumption 
second case adversary css follows get public key get message ms 
output ms get back ciphertext encrypts css ms random 
consider number modulo ns know corresponding plaintext css ms random elements significant positions unknown top position 
random encryption show cd mod ns return bit outputs 
encrypted ms shown sample dn ms sample dn 
breaks css advantage contradicts induction assumption 
adjusting block length facilitate comparison paillier original system kept system description close possible paillier 
particular description allows choosing variety ways 
mentioned may choose loosing security public key may consist modulus means receiver decide encrypts message 
concretely system follows key generation 
choose rsa modulus pq 
public key secret key common multiple 
encryption 
plaintext choose random ns ciphertext mod ns decryption 
ciphertext compute chinese remainder theorem mod note length ciphertext allows decide right value negligible probability 
compute cd mod ns clearly get ns ns mod apply algorithm compute mod building blocks threshold variant scheme section way distribute secret key set servers subset decryption efficiently generalisation paillier probabilistic public key system useful information 
course done degrading security system 
shoup proposes efficient threshold variant rsa signatures 
main part protocol allows set servers collectively efficiently raise input number secret exponent modulo rsa modulus little precisely input server returns share result proof correctness 
sufficiently correct shares efficiently combined compute mod secret exponent 
explain quite simple transplant method case allowing servers raise input number secret exponent modulo solve problem letting servers help compute mod choose mod mod remaining part decryption easy knowledge warn reader secure particular choice instance paillier original choice seeing value mod allow adversary compute break system completely 
case exponentiation result safely public contains trace secret 
concrete description compared secret exponent public exponent things slightly differently 
assume decryption servers minimum needed correct decryption 
key generation key generation starts find primes satisfies primes different set pq decide plaintext space 
pick satisfy polynomial aix mod nsm picking ai random values ns secret share th authority si public key verification actions decryption servers need fixed public values generating cyclic group squares ns decryption server verification key vi si mod ns 
encryption encrypt message random ns picked cipher text computed gm rns mod ns share decryption th authority compute ci si ciphertext 
zero knowledge proof vi convince raised secret exponent si non interactive zero knowledge proof fiat shamir heuristic easy derive corresponding 
ivan damg ard mads jurik share combining required number shares correct proof combine result subset shares combine mod value form noting mod mod ns conclude mod ns desired plaintext means compute applying algorithm section multiplying result mod ns compared scheme proposed technical differences apart fact works original paillier version modulo extra random value related public element part public key share combining algorithm 
avoided scheme way choose get slightly shorter public key slightly simpler decryption algorithm 
system described requires trusted party set keys 
may acceptable operation trusted party delete secret information soon keys distributed 
multi party computation techniques possible key generation trusted party 
note key generation phase requires value parameter fixed 
means system able handle messages encrypted modulo ns simply exponent satisfies completely general decryption procedure needed done assume secret shared key set phase servers compute suitable running secure protocol inverts modulo ns get result computes product integers 
require generic multi party computation techniques done quite efficiently techniques 
note require communication servers needed decryption value 
show random oracle model threshold version secure centralised scheme trusted player decryption particular threshold version secure relative complexity assumption basic scheme 
done model static adversary corrupts players start 
concretely theorem 
assume random oracle model static adversary corrupts players 
cipher fact random oracle needed ensure non interactive proofs correctness shares doing proofs interactively allow dispense random oracle 
generalisation paillier probabilistic public key system text decryption protocol outputs correct plaintext negligible probability 
oracle input ciphertext returns corresponding plaintext adversary view decryption protocol efficiently simulated statistically indistinguishable distribution 
full proof included final version 
give basic ideas correctness scheme immediate assuming adversary contribute bad values ci negligible probability 
turn ensured soundness zero knowledge proofs ci 
simulation start public key simulate shares si sik bad players choosing random numbers appropriate interval 
fixed choice means shares uncorrupted players polynomial fixed easy simulator compute 
choose ciphertext known plaintext compute mod mod doing lagrange interpolation exponent compute correct values vi si uncorrupted players 
get ciphertext input ask oracle plaintext allows compute mod means interpolate compute contributions ci uncorrupted players 
zeroknowledge property invoked simulate proofs ci correct 
auxiliary protocols suppose prover presents sceptical verifier ciphertext claims encodes plaintext trivial way convince reveal random choice verify 
need solution extra useful information revealed 
easy see equivalent convincing cg mod th power 
propose protocol simple generalisation 
note protocols zero knowledge stand honest verifier zero knowledge 
zero knowledge protocols problems constructed standard methods secondly applications non interactive variant fiat shamir heuristic means obtain zero knowledge obtain security random oracle model 
soundness prove protocols satisfy called special soundness see particular implies satisfy standard knowledge soundness 
th powers input private input ns mod ivan damg ard mads jurik 
chooses random mod ns sends rns mod ns 
chooses random bit number sends 
sends rv mod checks ns accepts case 
simple show au mod lemma 
protocol complete honest verifier zero knowledge satisfies pair accepting conversations prover form efficiently compute th root provided smaller smallest prime factor proof 
completeness obvious inspection protocol 
honest verifier simulation simulator chooses random ns random sets mod ns outputs 
easily seen perfect simulation 
claim observe conversations accepting mod ns mod ns ns mod prime assumption choose 
mod get ns ns ns mod desired th root application protocol modulus chosen trusted party multi party computation prime factors roughly size 
bit length set assured cheating prover verifier accept probability lemma immediately implies techniques build efficient proof encryption contains values revealing encryption candidate plaintexts prover verifier compute mod mod prover shows th power 
done protocol assume loss generality prover knows th root denotes honest verifier simulator power protocol protocol th power input private input ns mod 
chooses random mod invokes input get conversation 
sends ns mod generalisation paillier probabilistic public key system 
chooses random bit number sends 
computes mod mod ns sends 
checks mod mod ns mod ns accepts case 
proof techniques lemma immediately imply lemma 
protocol th power complete honest verifier zeroknowledge satisfies pair accepting conversations prover form efficiently compute th root th root provided smallest prime factor final building block allows prover convince verifier encryptions contain values ab mod propose protocol inspired similar construction 
protocol multiplication mod input ea eb ec private input ra rb rc ab mod ea ra eb rb ec rc 
chooses random value zn sends encryptions ed rd edb db rdb 

chooses random bit number sends 
opens encryption aed ea ard mod sending ea mod ard mod opens encryption mod ns sending mod 
verifies openings encryptions previous step correct accepts case 
lemma 
protocol multiplication mod complete honest verifier zeroknowledge satisfies pair accepting conversations prover form ed edb ed edb efficiently compute plaintext corresponding ea eb ec ab mod provided smaller smallest prime factor proof 
completeness clear inspection protocol 
honest verifier zero knowledge observe equations checked aed mod modn clear generate conversation choosing random computing ed edb satisfy equations 
requires inversion modulo generates right distribution values independent random real conversation 
claim note encryptions uniquely determine plaintexts fixed ivan damg ard mads jurik values contained ea eb ec ed value contained edb 
fact conversations accepting implies ea mod mod fb ec mod putting obtain mod ab mod invertible modulo assumption conclude ab mod compute 
protocols section non interactive standard fiat shamir heuristic computing challenge message hash function 
proved secure random oracle model 
efficient electronic voting general model elections briefly recall set voters vm bulletin board set tallying authorities av 
bulletin board assumed function follows player write message deleted written 
players access messages written identify player message comes 
implemented secure way existing public key infrastructure server replication prevent denial service attacks 
assume purpose vote elect winner candidates voter allowed vote 
denote fixed hash function noninteractive proofs fiat shamir heuristic 
assume instance threshold version paillier scheme public key set ai acting decryption servers 
assume ns true choosing large 
notation logical statement denote bit string created player follows selects appropriate protocol previous section interactively prove computes message protocol computes id id user identity system result challenge verifier computes answer 
inclusion id input done order prevent vote duplication 
check proof note auxiliary protocols easily compute proof correct 
instance protocol ns powers statement consists single number modulo ns verifier checks ns mod ns mod ns computed checks id 
protocol case simple describe 
equivalent vote vote thought number equal 
voter vi decides vote vi calculates ei vi ri ri randomly chosen 
creates generalisation paillier probabilistic public key system ei ei ns th power modulo ns ns th power protocol 
writes encrypted vote proof 
aj set 
check proof written vi valid ei mod ns aj executes part threshold decryption protocol input ciphertext writes result 
messages written aj reconstruct plaintext corresponding possibly discarding invalid messages 
assuming simplicity votes valid evident vi ri vi mod ns ri mod ns 
decryption result vi mod ns vi ns security protocol random oracle model follows easily security sub protocols semantic security paillier encryption scheme 
proofs included final version 
ways generalise 
probably simplest way hold parallel votes 
voter votes candidates wants 
means vi send votes form eij vij rij eij eij th power modulo prove voted exactly candidates writes number rij mod ns allows talliers verify vij rij isan encryption check sufficient individual votes proved 
immediate decryption results immediately give number votes candidate received 
note easily generalises cases voters allowed vote candidates simply introduces dummy candidates addition actual execute protocol candidates 
voter places votes want dummy candidates 
size vote protocol seen lk bit length simple inspection protocol 
protocol requires decryption operations 
numeric example suppose challenges bits proofs 
vote system size kbyte 
parameters log significantly better 
conditions satisfied realistic situations instance numeric example 
basic idea vote candidate lis defined encryption number voter create encryption prove correctness detailed 
encryptions multiplied get encryption number form ajm mod ns aj number votes cast candidate log ivan damg ard mads jurik relation holds integers decrypting writing ary notation directly produce aj remains describe produce encryption hiding number form prove correctly formed 
bl bits binary representation bl clearly 
bl factor product 
algorithm producing desired proof denotes prover 
computes encryptions el bl computes ei ei ns th power 

fi 
bi computes encryption fi fi 
fori computes plaintexts corr 
fi ei fi satisfy fi bi fi mod ns multiplication mod protocol 
encryption fl desired encryption verified ei fi proofs computed 
straightforward see vote system length log bits assuming course log 
parameter values numeric example vote size kbyte factor better previous system 
need decryption operation opposed 
efficiency implementation aspects implementation discussed www brics dk jurik research html 
key generation 
primes usual techniques difficult possible factor 
difference choosing general generator just save finding suitable encryption 
mentioned paillier choose provided satisfies contraints get speed encryption 
generator efficient calculating calculating 
mod means raising toi th power takes multiplications 
precompute factors 
mod reduces number multiplications 
get rid exponentiation ns mod generalisation paillier probabilistic public key system random value choosen advance exponentiation calculated advance 
rns mod ns calculated advance encryption take multiplications approximately efficient rsa small decryption 
decryption speeded calculating different powers 
mod calculated modq modn lp lq normal decryption algorithm executed times modn lp modq lq 
parts calculated combined chinese 
performance evaluations 
give comparison schemes paillier original scheme rsa public exponent el gamal 
versions scheme precomputation precomputation equivalent paillier scheme 
assumed numbers number binary representation 
compare different scheme security parameter 
noted compares number multiplications multiplications different modulus size 
noted columns encrypt sk bits plaintext bits columns 
rows table shows number bits encrypted multiplication 
sense compare numbers rows modulus size security parameter different 
scheme general scheme scheme 

paillier rsa el gamal size modulus size plaintext size sk sk multiplications encryption multiplications decryption sk multiplications bit encrypted multiplications bit decrypted fig 

comparison equal security parameter ivan damg ard mads jurik pointcheval stern practical multi candidate election scheme manuscript may 
cramer damg ard schoenmakers proofs partial knowledge proc crypto springer verlag lncs series nr 

cramer damg ard hirt rabin efficient multiparty computations secure adaptive adversary proc eurocrypt springer verlag lncs series pp 

cramer gennaro schoenmakers secure optimally efficient multi authority election scheme proceedings eurocrypt springer verlag lncs series pp 
frankel mackenzie yung robust efficient distributed rsa key generation proceedings stoc 

stern sharing decryption context voting lotteries proceedings financial crypto 
quisquater practical zero knowledge protocol fitted security microprocessor minimizing transmission memory proc eurocrypt springer verlag lncs series 

hirt sako efficient receipt free voting homomorphic encryption proceedings eurocrypt springer verlag lncs series pp 
public key cryptosystems composite degree residue classes proceedings eurocrypt springer verlag lncs series pp 
shoup practical threshold signatures proceedings eurocrypt springer verlag lncs series pp 

bar ilan beaver non cryptographic fault tolerant computing constant number rounds proceedings acm symposium principles distributed computation pp 
