usenix association proceedings fast nd usenix conference file storage technologies san francisco ca usa march april usenix association rights reserved information usenix association phone fax email office usenix org www www usenix org rights individual papers remain author author employer 
permission granted noncommercial reproduction educational research purposes 
copyright notice included reproduced 
usenix acknowledges trademarks 
block level security network attached disks marcos aguilera ji mark lillibridge john maccormick erwin dave andersen mike burrows timothy mann thekkath hp systems research center palo alto ca propose practical efficient method adding security network attached disks 
contrast previous design requires changes data layout disk minimal changes existing small changes standard protocol accessing remote block devices 
existing nad file systems storage management software incorporate scheme easily 
design enforces security known idea self describing capabilities novel features limit need memory secure scheme manage revocations capability groups replay detection method bloom filters 
implemented prototype nad file system called incorporates ideas 
evaluated performance scalability 
overhead access control small latency reads writes increases ms bandwidth decreases 
aggregate throughput scales linearly number experiments 
network attached disks storage devices accept block read write requests network 
build file systems provide better performance traditional distributed file systems nfs 
traditional systems disks attached directly file server provides file access clients network 
data pass server quickly bottleneck system scales limiting achievable bandwidth 
nad file systems contrast allow clients bypass done hp systems research center palo alto 
authors differing current affiliations andersen mit burrows thekkath microsoft research mann vmware 
file server go straight disk read write file data 
clients talk file server metadata operations file lookup deletion file server bandwidth longer constrains file system bandwidth 
asymmetric shared file systems excel workloads high bandwidth relatively metadata operations 
commercial examples file systems include tivoli sgi 
network attached disks commercially available today provide support security honor request received 
securing nad file system today requires nad network attached machines disks physically secured 
practice forces separate lan storage usually called storage area network san prevents clients located outside machine room user control directly accessing 
unfortunately means nad file systems deliver high bandwidth desktop machines preventing useful applications supplying training videos pcs desktop data mining advantage nad technology 
believe practical approach problem minimize changes required order commercial nad file systems 
schemes require major changes commercial file systems creation commercial quality file system scratch expensive propositions adopted 
concern changes needed storage management software monitoring mirroring backup tools 
unfortunately existing approaches add security require large changes nasd replaces existing nad block model variable length model moves filesystem functionality disk 
indexes blocks cryptographic hash logical position disk garbage collects blocks required lists empty 
disks special file usenix association nd usenix conference file storage technologies key objects keep track users access block essence access control lists stored particular format understandable disk 
stores small client signature bytes block requiring offer clients non power raw block size suffer substantial performance penalty 
propose adding simple block level security network attached disks 
proposal maintains existing nad sequentially block view storage allowing existing nad clients continue existing data layout management strategies block backup changes required create pass authorization information server clients disks 
view allows maximum flexibility higher level primitives limit done 
example difficult implement file system take atomic snapshots top built primitives 
having verify request comes unaltered client authorized read write block encrypting network traffic provide reasonable level security environment users control client machines network vulnerable attacks spoofing 
system requests authorized appropriate accompanying capability 
similarly nasd security approach central server call metadata server issues manages capabilities setting policy disks simple access checks 
naive approach capability block overhead capabilities specifies access ranges blocks extents 
want disks understand blocks belong files capabilities accessible blocks access mode determined capability data structures 
allow revocation capabilities require disks remember capabilities invalidated validity data held ram speed reasons 
important contribution revocation method capability groups dramatically compresses validity data sacrificing performance 
contribution non method handling replay attacks allows unlimited number clients small amount memory 
techniques disk protocol requirements low standard cryptographic functionality plus small amount ram capability management replay detection order kb 
believe requirement small scheme deployed existing simply changing firmware modifying adding hardware 
comparison existing approaches adding security require deeper changes disks cost significantly implement 
remainder organized follows section describes basic scheme achieve security 
section describes implementation prototype nad file system built demonstrate scheme 
section explains important aspects design 
section discusses prototype performance including cost security prototype scalability 
section covers limitations design 
section covers related 
section concludes 
block security modest ram assume server disks trusted responsible setting enforcing security policies approach 
assume clients compromised network secure eavesdropping spoofing 
conditions security ensures attackers access user data compromising client machine logged user 
encryption turned performance reasons privacy lost see data read written 
level security offer similar nfs system uses kerberos authentication cryptographic checksums integrity optional encryption privacy 
unforgeable self describing capabilities chief mechanism employ adding security nad file system 
known idea capabilities composed parts self describing certificate associated secret 
secret generated message authentication code mac certificate hidden key known server relevant disk 
basic capability approach reviewed section augmented new techniques permit ram requirements system disks modest revocation scheme capability groups described section defense replay attacks bloom filters described section 
nd usenix conference file storage technologies usenix association group id capability id disk id extents mode contents capability 
group id capability id new revocation scheme 
disk id extents mode describe access granted capability 
basic capability scheme protocol capabilities similar nasd scared capabilities describe access terms blocks objects 
intuitively capability self descriptive certificate specified type access parts disk see associated secret 
capabilities contain group id capability id revocations explained section disk id specifies disk capability applies list extents ranges physical blocks access granted access mode read write 
secret prevent forgery illegal capabilities illegal requests legal capabilities explain 
secret generated keyed hash message authentication code mac 
mac function data key returns string mac fixed length unforgeability property knowing value key infeasible find new pairs mac data mac data key 
mac functions computed quite efficiently practice public key signatures 
capability associated secret secret key shared metadata server disk id specified 
different key disk 
secret best explained example 
shows client opening file time reading writing data 
open file client contacts metadata server associated file 
file metadata cached server server retrieve relevant disk shown dashed lines metadata server accesses disk way client explain 
server checks client permitted access file gives client list physical blocks comprising file capability file blocks requested access mode read write secret simplicity example assumes file blocks described capability practice highly fragmented files may require multiple capabilities capabilities fixed size fit packet 
server usenix association nd usenix conference file storage technologies client 
open knows secret 
capability secret secure channel 
operation op capability mac op 
resp mac resp return metadata requested disk knows secret opening accessing file 
client wishes access file talks metadata server get capability associated secret 
client access file directly disk 
disk verifies access authentic checking client correctly computed double mac op op 
associated server reply particular sent secure channel shown darker line prevent eavesdroppers learning secret needed capability 
secure channel obtained encrypting block cipher session key established authentication protocol kerberos 
order read write data file client issues block requests disk capability obtained 
precisely client sends disk operation op consists type access read write range physical blocks accessed case write operation data written 
op client sends capability provided server mac op secret associated op op call trick double mac 
double mac new earliest know gobioff 
disk verify mac correct receives op secret key note double mac serves double purpose proof client knows authorized capability issue operation op prevents op tampered attacker changes op know compute required new mac 
reader wondering application mac output compromised cryptographic properties 
case intuitive argument follows sup disk checked executed requested operation op sends back response resp resp 
resp contains data request read simply acknowledgment request write 
client verifies resp computed correctly prevents responses forged 
simplicity example encryption privacy 
simple way adding encryption involves server giving client session key token encrypted client disk encrypt messages prepending token clear disk session key 
revoking capabilities revocation required client longer access granted previously issued capability due example change file permissions file truncation deletion 
seek revocation scheme memory efficient ideally implemented existing network attached disks simply changing firmware say adding hardware 
difficulty disks little memory cache data typical cache size mb 
important adopted scheme take memory tens kilobytes excellent megabytes probably 
earlier schemes described literature nasd scared object version numbers revocations 
systems capabilities confer access particular object version incrementing object version number suffices revoke old capabilities 
sense variable length objects headers read find desired data resides disk problematic blocks changing permissions file require updating potentially large number version numbers 
example mb file require updating version numbers span blocks assuming bits version number 
need scheme allows direct revocations capabilities having access blocks pose feasible adversary know value produce values op op 
unforgeability property mentioned adversary know value adversary produce 
applying unforgeability property adversary know secret key contradiction 
capability refers 
simple economical method assign capability id capability disk keep track valid capabilities bit vector 
doing possible keep track capabilities kb modest amount memory 
optimization assign id different capabilities reducing number possible revocations need kept track cost able independently revoke capabilities share id sense group capabilities describing kind access different parts file revoked exception partial truncation 
group capabilities file different access modes file creation deletion cheaper cost making permission changes chmod rare slightly expensive 
straightforward approach problem id revoked bit revocation vector kept set forever lest attacker hold revoked capability illegally bit cleared 
matter large number id system sooner run 
way solve difficulty change secret key shared disk metadata server id run causing existing capabilities stale 
disk bit vector cleared fear old invalidated capabilities back life posing security threat 
scheme unfortunately problem changed capabilities stale rejected disk clients need go back metadata server get fresh capabilities 
metadata server may get overloaded shower requests short period 
call burstiness problem 
solve burstiness problem capability groups 
basic idea place capabilities groups invalidate groups system needs recycle id intuitively avoids burstiness problem small fraction capabilities revoked system runs id precisely capability capability id group id disk keeps list valid group id valid group bitmap revocation state id know capability valid disk checks group id valid group capability id revoked 
recycle capability id nd usenix conference file storage technologies usenix association group id revoked capability id index counter bitmap 



keeping track revocations 
table disk controller keep track revoked capabilities 
group group id removed list valid groups replaced new group id capability id new group marked valid 
particular implementation divide group id parts bit index bit counter 
index part index entry table entry contains counter bits revocation data see 
table requires bits kb ram supports simultaneous capabilities 
capability checked looking entry corresponding index part group id verifying counter matches capability group id bit corresponding capability id tested 
revocation capability done similarly 
group invalidation done clearing group bitmap incrementing counter effectively replacing group id fresh new 
operations quick small constant time space efficiency excellent capability takes average bits 
note capability groups reduce total metadata server time gets spread longer period avoiding burstiness problem 
done simulations real trace data confirm predictions 
simulations show peak load metadata server reduced significantly technique see section details 
network partitions network partition separates metadata server disk server unable revoke capabilities disk resulting access permissions files disk effectively frozen systems note group id recycled means theory system eventually run space 
relatively bits group id say bits take longer life system happen 
considered security breach 
avoid problem require metadata server periodically refresh table groups capabilities disk 
disk receive refresh message certain period time disallows accesses receives expected server refresh 
course scheme disabled system administrator believes overhead refresh messages high protection provides 
preventing replay attacks infeasible adversary forge new requests trivial replay requests sent disk 
nad file system operates network robust defenses replay attacks 
note replay attack prevention harder duplicate detection assumes parties honest 
fortunately possible achieve low cost memory computation requiring client information 
method believe novel context replay attacks employs data structure called bloom filter remember requests 
bloom filters highly efficient way performing approximate set membership queries membership query answer probably element definitely element 
bloom filter consists array bits denoted 
bk hash functions 
fn 
hash functions chosen randomly family independent hash functions filter construction time maps requests integers 

filter defined empty bits 
request added filter setting bits indices 
fn set fi answer question request filter reply probably fi definitely 
disk detect replays keeping list seen requests bloom filter 
new request arrives disk checks see filter 
filter reply definitely disk safely proceed process request adding filter replay 
request issued past disk sends replay rejection message 
client continues retransmit request receives acceptance rejection message request 
gets reply rejection message changes request nonce hashes differently continues retransmitting 
nonce usenix association nd usenix conference file storage technologies small sequence number serves purpose 
note system message losses client may executing request multiple times consecutively problem requests idempotent 
course requests added filter non negligible false positive rate 
consider filter need replacement fixed proportion bits set 
implement filter replacement maintaining filters disk monotonically increasing epoch number periodically checkpointed disk 
filter associated epoch 
filter corresponding current epoch needs replacement disk increments epoch number deletes oldest filter starts new filter handle new epoch 
reboot epoch number incremented number filters prevents replaying messages sent disk 
client sends believes disk latest epoch number disk message includes current number message disk 
epoch number client request old date number filters maintained request rejected 
checked appropriate bloom filter 
way switch new filter transparent active clients disk 
clients idle sufficiently long request rejected due date epoch number 
worth pointing optimization applying hash functions request quite large includes data write operation suffices apply just request mac op described section bytes long 
note request epoch number nonce included operation op guarded mac preventing attacker altering 
optimization involves storing read requests bloom filter allowing smaller filters 
note read requests need checked encryption turned 
case may necessary check read requests attacker snooped reply original read 
old read requests need filtered accomplished simply verifying request epoch number valid need bloom filter 
epoch numbers periodically advanced optimization 
performance numbers include optimization 
method prevent replay attacks bloom filters simple robust frugal 
contrast existing methods keep client state drawbacks support limited number clients constrained similarly small amounts memory require extra complexity authenticating clients disk guard rogue client claiming large share client state table 
approach different nasd relies real time disk clock expiration times epoch number bumped time 
unfortunately nasd scheme limits maximum rate requests nasd handle maximum size request list stored array divided expiration time 
problem requests hit disk cache 
consistency attacks leases locks timeouts cache filesystem data clients attacker wishes create consistency problems proceed follows client gets lock file issues write request 
attacker launches denial service attack simultaneously capture write request subsequent retries reaches disk 
lock expired attacker sends captured write request disk executes write lock held potentially causing consistency problems 
guard type attack system invalidate requests outstanding lock expires 
metadata server revoke capabilities issued client holds expired lock metadata server waits disk acknowledged revocations breaks lock 
data structures disk functionality addition security nad file system requires data structures listed 
metadata server maintain hash table valid capabilities performing revocations access file changes need find capabilities associated file revoke 
server maintains copies disk valid group list plus number valid revoked capabilities group quickly choose group invalidate 
nd usenix conference file storage technologies usenix association metadata server hash table currently valid capabilities indexed inode number disk list valid groups number valid revoked capabilities client cache capabilities issued client known revoked disk counter bitmap valid group kb bloom filters requests kb additional data structures security 
new functionality equivalent lines cryptography capability groups revocations miscellaneous refresh timer rpc handlers logging additional disk functionality 
left column describes purpose additional functionality required secure disk right column gives number lines devoted functionality software implementation 
clients cache issued capabilities cut metadata server traffic 
invalidation protocol needed client uses cached capability longer valid disk reject leading client request new metadata server 
data structures disk discussed sections capability management section replay attacks section 
lists modest extra functionality required add block security nad 
combined fact additional data structures little kb ram see suggests approach requires minimal changes disks 
implementation implemented prototype nad file system called uses security approach 
modified linux existing kernel implementation nfs version 
version base version available loadable module hindering debugging 
nfs utilities comprise lines added usenix association nd usenix conference file storage technologies vfs ext nad server nad 
server receives client request passes linux vfs invokes underlying filesystem ext case turn issues block requests device driver 
translates requests nad requests containing allow capabilities 
new filesystem code comprising lines server client new disk functionality comprising lines see security library lines vast majority imported openssl 
overview clients run kernel modules standard nfs lock daemon module contains core filesystem functionality including requesting caching capabilities partial 
second module exports linux virtual file system vfs interface new filesystem type 
metadata server consists filesystem kernel module device driver lock daemon 
identical nfs shown 
translates client requests filesystem independent operations 
linux operations handled vfs layer invokes filesystem specific code case ext implements operation issuing low level block requests device driver case 
translates block requests messages disk controller nad protocol clients allow capabilities 
architecture allows independent underlying file system allows data layout remote disks exactly disks local 
nice implications deployment explain section 
disk controller implemented pc connected network 
pc runs small multithreaded user level program listens checks executes block requests 
changes nfs protocol metadata server implements superset nfs protocol 
clients issue rpcs metadata server reading writing handled locally client issuing block read write requests directly relevant nad cached capabilities 
unmodified legacy nfs clients continue talk metadata server standard nfs rpcs 
metadata consistency ensured metadata commands handled server 
commands added nfs protocol open close 
issuing get caps call client passes file handle access mode range logical blocks file presumably read write blocks 
metadata server returns specifying corresponding physical blocks capability giving client requested access requested blocks 
keep messages reasonable size range requested blocks large fragmented server returns set capabilities cover range large possible client send request remaining blocks 
returns capabilities invalidate file revoking file capabilities attempt client old result revoked capability error disk forcing client proceed giving new 
open close commands necessary caching file contents client security 
system open file exclusive non exclusive mode 
file exclusive mode precisely client open reading writing client open writing 
client file open exclusive mode knows file undergo changes aware cache file contents 
situations clients short timeouts cache order achieve acceptable levels consistency 
provide consistency nfs 
server notified client opens closes file knows exclusivity file changes notify clients file open callbacks 
higher level consistency implemented basic technique nfs reads writes non exclusive mode files metadata server 
take advantage need open call piggybacking reply client capabilities opened file covering blocks possible 
dramatically reduces need get caps calls 
think separation metadata data nad file system require appending file special treatment 
turns append operations subsumed standard write operations unix function allocate flag set 
function maps logical block file physical block 
block mapped allocate flag set block allocated specifics underlying file system 
append file client issues standard call write access logical blocks current file 
metadata server simply simultaneously allocate get newly appended block 
capabilities design capability format guided studying properties advfs file systems person research laboratory 
recall capability includes fixed size list extents contiguous ranges physical blocks 
files occupy extents example foo bar occupy blocks 
file systems single extent covers average kb 
turns files require fewer extents require fewer extents 
decided single capability space allocated extents 
files extents accessed multiple capabilities 
bloom filter parameters kb bloom filters bits 
determined parameters optimizing statistical simulation maximum number requests average supported epoch subject maximum false positive rate measured requests 
resulting parameters hash functions bits full filter yield epochs lasting requests average minutes request rate trace section 
nd usenix conference file storage technologies usenix association cryptographic details mac required hmac secure hash algorithm sha 
function returns byte hashes computed extremely fast possesses known collisions 
client server secure channel see achieved blowfish block cipher algorithm byte key 
privacy desired des encryption messages disk 
key management rudimentary current prototype keys read configuration files remain fixed indefinitely 
naturally mature system elaborate scheme described gobioff 
packet security overhead capabilities occupy bytes generous bit values block numbers 
replay epoch number bits nonce plus random padding encryption bits mac bits 
total security data disk request bytes compared bytes payload 
discussion practical benefit capability groups capability group method beneficial practice 
particular capability groups reduce burstiness capability allocations reducing chance metadata server overloaded 
answer question simulated behavior secure trace gb file system researchers days 
results shown histogram capability allocations performed metadata server second period 
amount memory capability storage fixed kb 
black bars show results straightforward method section uses single bitmap store capabilities precisely equivalent capability group method number groups 
white bars configuration amount memory divided groups 
note particular workload metadata server hardly described overloaded peak load capabilities second easily usenix association nd usenix conference file storage technologies frequency burstiness capability allocations number capability allocations second period group groups groups substantially reduces burstiness capability allocations 
handled takes ms issue capability 
results demonstrate capability group approach substantially reduces burstiness 
stress server greater served disks capability group approach improve performance reducing periods overload 
choice underlying file system approach security achieved incrementally modifying types file systems 
major exceptions file systems store data multiple files block ffs store tails multiple files single block 
file systems require clients access part block block capabilities handle 
deployment approach easy deploy incrementally existing legacy nfs environments 
long underlying file system disk layout kept take existing disks data reformatting attaching network controller checks capabilities replay attacks 
course controller specially manufactured protocol 
having metadata server export file system plain nfs support legacy nfs clients albeit poorer performance 
allows nfs system converted client time 
optional improvements capability groups improvements applied basic technique capability groups describe completeness 
practical purposes performed quite optimizations fact performance numbers section include 
note group invalidated unintended revocations valid capabilities revoked permissions files changed 
course break correctness protocol client invalid capability simply request new capability metadata server 
performance affected procedure costs extra network round trips client unaware attempts invalid capability gets rejected round trip client requests new capability 
desirable minimize number unintended revocations 
obvious strategy choose invalidation group revoked capabilities valid ones 
addition exploit fact different capabilities different probabilistic lifetimes 
example read capability shared library revoked read write capability created private file tmp shorter lifetime 
designate certain groups volatile stable possibly gradations assign capabilities appropriate groups 
volatile groups candidates low cost invalidations 
way minimize unintended revocations background cleaning 
metadata server idle help increase number available capability id choosing capability groups preferably groups entries revocation list slowly migrating valid capabilities groups 
migrating capability means issuing equivalent replacement capability different group giving clients old capability clients replace old capability new 
valid capabilities group migrated metadata server invalidate group causing unintended revocations 
note scheme requires metadata server issue callbacks clients 
performance ran experiments evaluate overhead security including mac computation capability revocation encryption system throughput scalability bandwidth intensive workload 
motivation extend performance benefits nad file systems insecure environments essential performance advantages nad file systems significantly reduced security added 
repeated experiment different setups comparison purposes 
setups include non secure security turned secure access control encryption private access control encryption nfs nfs server attached local disk 
access control refers capability operations replay detection needed prevent unauthorized operations 
noted encryption section refers encryption messages disk privacy encryption client server channel part access control secure private setups 
non secure setup mac calculations replay detection capability operations encryption kind 
experiments conducted celeron mhz pc running linux kernel version connected gigabit ethernet switch 
byte frames enabled network communications 
machine locally attached ide disk maximum bandwidth approximately mb second 
experiment machine acts diskless metadata server act simulated disk controllers diskless clients 
simulated disk controller user level program described section uses raw disk partition backing store 
major difference real hardware nad simulated lies amount memory available data cache 
commodity disk drive typically megabytes machines hosting simulated nad mb 
large cache significant impact nad performance disk controller buffer coalesce small random accesses large sequential ones improving utilization raw disk bandwidth 
order simulated disk controllers realistic limit cache mb setups force sync disk ev nd usenix conference file storage technologies usenix association ery mb dirty data simulated nad receives scheme appropriate streaming performance tests ran 
addition took measures minimize unintended effects buffer caches freshly mounted file systems invalidated block device buffer caches experiment started flushed buffer caches file systems experiment completed 
capability scheme experiments capability group method described sections 
parameter values suggested group invalidations rare 
ensure experiments included performance implications group invalidations smaller store capabilities strictly pessimistic alteration 
specifically set number groups maximum number capabilities group allowing maximum allocated capabilities 
capabilities allocated group needed invalidated 
latency breakdown ran set micro benchmarks measured latency operation order evaluate various overheads associated security scheme 
latency benchmarks run collection files size kb 
benchmark fixed filesystem operation read chmod performed files randomized order 
read write cases metadata server simulated nad client driver instrumented report time spent fine grained sub operations 
shows latency breakdown read write operations empty synchronous caches respectively 
physical disk access time averaged ms reads ms writes 
mac computation overhead ms encryption overhead ms disk communication latency operations ms client needs request capability operation requires additional round trip client metadata server costs ms client attempts revoked capability shown get rejection disk costs extra ms secure setup ms private setup 
shows latency metadata operations 
chmod operation involves round trip metadata server simulated nad requires mac computation unlink operation involves multi usenix association nd usenix conference file storage technologies latency ms security latency breakdown read write operations non secure setup non secure setup sec private setup pri 
operations labeled means client appropriate capability request metadata server 
latency divided categories communication metadata server communication disk controller disk access security including mac computation encryption 
ple trips ext unlink code writes multiple disk blocks 
open operation involves mac computation compute secret encryption capability encryption privacy 
operations require revocations overhead access control ms overhead privacy ms operations involving revocations chmod rev unlink rev require additional round trip metadata server disk roughly ms summary access control mac computation replay detection increases latency reads writes ms encryption additional overhead ms capability revocation increases latency read writes latency roughly ms metadata operations access control costs cost ms privacy cost ms certain operations 
aggregate throughput scalability ran benchmark measure bandwidth reads writes multiple clients single disk various file sizes 
clients experiments running separate machine 
client opened file time sequentially read wrote kb chunks 
experiment lasted min latency ms chmod secure private unlink open close latency metadata operations non secure secure private setups 
operations labelled rev require capability revocation message sent metadata server disk 

files stored disk file accessed client experiment 
files experiment size size varies kb mb experiments 
larger file size open close overhead incurred transferred byte 
overhead associated capability group invalidation benchmarks file sizes kb kb accessed files triggered group invalidation 
shows system throughput function file size write benchmarks 
read benchmark results similar trends shown 
file size kb secure non secure setups comparable bandwidth 
file sizes larger kb secure system performs worse non secure system 
difference caused cpu contention disk machine 
shows average percentage idle time machine simulated nad hosted 
simulated disk controller secure setup consumes considerable amount cycles mac computation 
implemented user level process consumes cycles context switching moving data pci buses kernel boundary 
ran benchmark nfs server locally attached disk nfs setup comparison 
nfs performs comparably secure non secure file sizes kb noticeably better file sizes larger kb 
better performance due nfs server large data cache 
ran benchmark throughput mb kb kb kb kb mb mb file size write nfs write write write un aggregate write bandwidth disk clients secure setup non secure setup nfs setup cache limit nfs non secure setup modified cache limit un 
non secure setup modified simulated cache possible mb physical memory capacity 
result shown figures write un 
non secure setup cache limit performed significantly better standard non secure setup mb cache 
suggests worth increasing data cache capacity secure non secure order maximize bandwidth utilization streaming large files concurrent users 
idle time nfs server shown monotonic nfs server performing metadata operations 
file size increases rate metadata operations decreases rate increases 
ran benchmark measure aggregate throughput various numbers disks clients 
due limited number machines available experiments collocate client simulated nad controller machine 
client sequentially read wrote files nad hosted machine nad accessed exactly client 
ran benchmark machines 
file size kb client accessed files run 
shows aggregate bandwidth function number disks 
results show aggregate read write bandwidth clients scales linearly number nd usenix conference file storage technologies usenix association disk idle time kb kb kb kb mb mb write nfs write file size write write un average percentage idle cpu time disk machines 
disks indicates metadata server imposes low overhead high bandwidth workload bottleneck system disks 
shows average percentage idle cpu time metadata server machine 
metadata server machine underloaded idle experiments 
expect able support considerably larger number disks 
throughput non secure setup grew faster secure setup access control overhead dominated mac computation proportional data bandwidth 
andrew benchmark linux kernel source ran variant andrew benchmark show acceptable performance standard benchmark designed workloads extensive metadata operations small files 
variant andrew benchmark differs uses input linux kernel source contains directories files roughly mb data 
phase andrew benchmark duplicates directories times file system tested phase ii copies files duplicated directories phase iii recursively lists duplicated directories phase iv scans copied file twice phase dep copied linux kernel source directory generating new dependency object files mb data 
usenix association nd usenix conference file storage technologies throughput mb read read write write number disks aggregate read write bandwidth multiple disks secure setup non secure setup 
server idle time read read write write number disks average percentage idle cpu time metadata server 
configuration andrew benchmark includes client nad nfs server separate machines 
shows elapsed time phase andrew benchmark secure nfs setups 
phases performed security turned suggesting overhead security low 
nfs differed somewhat phases ii 
difference phase occurs new directory created metadata server needs access disk network nfs server accesses local disk directly 
difference phase ii due overhead opening closing small files linux kernel source consists small files files kb elapsed time nfs secure mkdir cp ls phase grep wc andrew benchmark linux kernel source 
file kb largest file roughly mb 
phases iii iv nfs performed 
limitations limitation block security approach support files writable readable 
scheme execute partial writes writes part block client needs read block old contents requires read access modify 
possible overcome problem having disks support partial writes directly having writes go metadata server 
support underlying file systems block contain data belonging multiple files file systems tails files stored single block block smallest unit access control scheme 
problem overcome changing capabilities optionally restrict access range bytes block allowing disks accept partial read write requests 
log file system easy exploit direct client access disk writing log accesses log need serialized 
drawback security scheme general limitation asymmetric shared file systems network attached disks 
possible solution disk serialization point doing require adding considerable functionality disk 
related nasd introduced basic security architecture central server decides policy disks implement simple access mechanism cryptographic capabilities 
differ handling revocations replay attacks described sections fact capabilities specify permission terms ranges physical blocks object ids 
scared generalizes nasd security framework allow identity access client proves identity disk decides access allowed understanding file access control lists acls 
prefer capability scheme require restrictions disk layout disk decode acls 
nasd network attached disks complicated pieces machinery possessing functionality file server simply serving raw blocks abstraction collection numbered unnamed variable size data objects byte sequences small number attributes 
central server manages collection nasd disks providing clients usual illusion hierarchical file system 
done absence striping mapping directory data file single nasd object 
away central server altogether powerful cryptographic methods blocks disk encrypted signed keys known clients attacker control disks reading altering user data 
complexity due stronger security level useful scenarios envision people able compromise servers disks system administrators easily able compromise clients defeating systems security 
encrypt disk strategy data concealed keeping encrypted disk 
revoking access systems expensive involved data re encrypted new key 
riedel argue encrypt disk may offer better performance privacy desired encrypt wire systems disk encrypts decrypts data client client disk 
encrypt disk leaks information eavesdroppers blocks identified wire re encrypted rewritten nd usenix conference file storage technologies usenix association stead time transmitted extra encryption prove burdensome think possible modify get performance benefit security benefit encrypt disk changing disk protocol 
project sketches derived virtual device dvd abstraction general mechanism securely delegating access arbitrary subset network attached device create block oriented secure nad file system called storm 
capabilities security kerberos authentication authenticate client requests specify dvd id devices maintain table dvds client allowed access detailed information access restrictions dvd 
notion dvds elegant may inefficient production file system dvd access information largely information storm requires extra network trips installed server uses lot disk memory installed downloading functions written scheme 
believe bloom filters protect replay attacks 
bloom filters long existed uses 
superficially related uses bloom filters revocations replay attacks 
new block security scheme network attached disks 
contrast previous scheme requires changes data layout disk minor changes standard protocol accessing remote block devices 
existing nad file systems software incorporate new secure incremental changes 
scheme demands modest standard cryptographic functionality plus little ram 
low need ram achieved novel features revocation scheme capability groups replay detection method bloom filters 
believe design easily deployed existing nad sor disk arrays minimal changes 
implemented prototype secure nad file system scheme evaluated performance scalability 
cost access control small latency store blocks encrypted disk keys managed metadata servers 
reads writes increases ms bandwidth decreases 
system throughput scales linearly number disks supported single metadata server experiments 
believe scheme practical efficient method incorporating security existing minimal change scheme nad file systems confines machine room data center allowing reach broader range users directly securely 
acknowledgments fay chang john wilkes useful discussions shepherd greg ganger anonymous referees helpful suggestions 
bellare canetti krawczyk 
keying hash functions message authentication 
lecture notes cs 
birrell nelson 
implementing remote procedure calls 
acm transactions computer systems february 
andrew birrell 
secure communication remote procedure calls 
acm transactions computer systems february 
burton bloom 
space time trade offs hash coding allowable errors 
communications acm 
freeman miller 
design decentralized security system network attached storage 
proceedings ofthe th ieee symposium mass storage systems technologies pages march 
eran gabber abraham silberschatz 
agora minimal distributed protocol electronic commerce 
second usenix workshop electronic commerce proceedings pages 
gibson nagle amiri chang gobioff riedel zelenka 
filesystems network attached secure disks 
technical report cmu cs carnegie mellon march 
usenix association nd usenix conference file storage technologies gibson nagle amiri butler fay chang gobioff hardin riedel zelenka 
cost effective high bandwidth storage architecture 
proceedings ofthe th conf 
architectural support programming languages operating systems pages october 
howard gobioff 
security high performance commodity storage subsystem 
phd thesis cmu 
howard gobioff garth gibson doug tygar 
security network attached storage devices 
technical report cmu cs carnegie mellon october 
kent 
clustered san filesystem sgi 
www sgi com products pdf pdf 
barbara liskov shrira john wroclawski 
efficient messages synchronized clocks 
acm transactions computer systems may 
mazi res shasha 
don trust file server 
proceedings ofthe th ieee workshop hot topics operating systems hotos viii pages may 
mckusick joy leffler fabry 
fast file system unix 
acm trans 
computer systems 
ethan miller william freeman darrell long benjamin reed 
strong security network attached storage 
proceedings ofthe fast conference file storage technologies pages january 
woo 
flow approach datagram security 
proc 
acm sigcomm 
nist 
secure hash algorithm 
fips 
matthew keefe 
shared file systems fibre channel 
proceedings ofthe sixth nasa goddard conference mass storage systems pages 
ieee computer society press 
reed long burns 
authenticating network attached storage 
ieee micro january 
hans reiser 
whitepaper 
www com 
erik riedel mahesh ram swaminathan 
framework evaluating storage system security 
proceedings ofthe st conference file storage technologies fast pages january 
goldberg kleiman walsh lyon 
design implementation sun network file system 
proceedings summer conference 
bruce schneier 
applied cryptography 
john wiley sons 
srinivasan mogul 
nfs cache consistency protocols 
proceedings ofthe twelfth acm symposium operating systems principles pages december 
tivoli 
tivoli helping reach full san potential 
www tivoli com products documents ds pdf 
rodney van meter gregory finn steven hotz 
derived virtual devices secure distributed file system mechanism 
ben editor proc 
fifth nasa goddard conference mass storage systems technologies september 
nd usenix conference file storage technologies usenix association 
