study software process data capture analysis alexander wolf department computer science university colorado boulder usa alw 
color ado 
edu process data capture activity obtaining formation existing software process 
process analysis manipulation information purposes problem identification 
capture anal ysis key elements strategy software pto cess improvement 
developed model software process notion events characterizing identifiable instantaneous milestones process 
developed capture analysis techniques suited model 
reports study undertaken gain model capture analy sis techniques 
study captured event data actual build process large complex software project 
en tered captured event data database ran queries data 
queries imple ment variety analyses event data ex relationships events depen time intervals 
output queries statistical data guide de sign process improvements 
data col lected study incomplete initial results demonstrate viability approach capture analysis 
organizations paying attention processes carry software devel opment projects 
way attempt improve process improve underlying technology process faster computing hardware sophisticated development tools 
ultimately necessary study ieee david rosenblum advanced software technology department bell laboratories murray hill nj usa dsr research att com improve dynamic interactions process steps carried pro cess roles responsibilities assigned project personnel manner frequency communica tion process 
order improve processes design new ones necessary obtain concise accurate meaningful information existing processes identify eliminate problems develop validate improvements 
refer activity obtaining necessary information process data capture refer manipulation captured informa tion problem identification process analysis 
distinguish kinds process analysis deductive analysis retrospective analysis 
deductive analysis concerned analyzing ab specification process formal logic goal discovering inconsistencies anomalies process 
choice formal notation governs kinds deductive analysis techniques applied specified process 
number mal notations associated deductive analysis tech niques designed specifically process spec ification analysis including appl intermediate lo marvel msl fun soft nets si 
addition number formal tations associated deductive analysis techniques describing software systems adapted process specification analysis including petri nets csp lotos statecharts 
retrospective analysis hand con analyzing empirically gathered data process goal dis covering patterns anomalous behavior eliminated 
post mortem typical kind informal retrospective analysis usually performed single data point completed process enactment hopes nf finding problems easily elimi nated 
seek formal framework multiple data points analyzed compared powerful objective ana techniques 
hypothesize process problems ultimately lead wasted intervals time 
size causes wasted time best revealed retrospective analysis characteristic time intervals 
instance long period idleness time meeting scheduled time takes place may reveal poor planning activities require ng preparation time 
perry votta begun explore hypotheses 
order analyze process characteristic time intervals necessary capture relevant data significant events process cluding times events occur 
deciding information capture re level detail pro cess modeled captured determines level specificity process improvements prescribed 
capture techniques typically purely manual purely automated 
basili weiss describe methodology manual forms col lection data evaluating comparing software development methodologies 
amadeus system automated collection analysis pro cess metrics arcadia process centered en vironment 
amadeus contains event action component automating generation feed back metrics process response process events 
yeast general event action system automate event capture vari processes unix environment 
feel hybrid approach capture necessary purely automated approaches inherently biased computerized aspects processes purely manual approaches inefficient high volumes data 
related views see basili rombach sutton 
describe event software process model techniques data capture retrospective analysis suited model 
describe initial results study captured analyzed build process large complex software project registered trademark unix system event model general model conjunction variety different cap ture analysis techniques 
capture technique developed study hybrid manual automated approaches analysis technique statistical analysis time intervals contained captured process data 
entered captured event data relational database sys tem allowing implement analysis objectives database queries 
database aids car formal analysis data suitable informal analyses particular graphical display process visualization 
section describe detail event process model 
section describe build process subject study 
section describe process characterized event model describe capturing event data actual process 
section describe formal analysis queries developed results queries 
section conclude discussion plans capture analysis techniques event process models 
event model mentioned section model software processes simple notion events occur specific points time 
section define event detail describe general taxonomy process events 
events event intervals depicts fundamental notions events event intervals correspondence process activities 
depicts different activities carried parallel persons machines part software pro cess 
heavy solid bars denote periods time separate instances activities occur 
event instantaneous oc activity specific identifiable point time events depicted solid circles 
event interval period time pair events 
arbitrary pair events potentially define interesting event interval 
date kinds event intervals particularly useful process analysis 
involves events occurring single instance particular activity 
event interval event interval event interval 


activity event event event event event event event activity setup event event event event event activity tl ti time special kinds events events refer events respectively 
illustrates kind interval instance activity carried tween events times 
interval intended indicate period time main purpose activity carried 
activities main period may preceded ini tial setup period followed final period 
desirable keep setup intervals short possible 
consider example meeting 
time scheduling meeting actual meet ing setup period 
meeting record meeting generated distributed period 
sense meeting ac tivity spans setup main time peri ods 
instance activity illustrates kind activity event interval associated activity extending setup event time event time 
second kind event interval complement event interval characterizing instance activity 
particular period time event instance activity event instance activity 
event intervals indications idle possibly wasted time 
illustrates kind interval event second instance activity time event third instance activity time 
third kind event interval corresponds events event intervals 
period time sequence instances activity 
instance activity repeated goal met charac interval event instance activity event instance activity interval charac amount time needed achieve goal associated activity 
illustrates kind interval event instance activity time tl event third instance activity time 
fourth kind event interval interval tween events different activities 
kind inter val typically corresponds time taken sequential steps process 
illustrates kind interval event stance activity time setup event activity time 
experience activities involve mul tiple events activities consid ered occur instantaneously single event associated instances 
refer event instantaneously occurring activity event illustrated instances activity times 
event taxonomy order provide insightful event characterization process interest provide richer level detail information captured process designed general taxonomy events characterizing different activities carried software process 
taxonomy comprises categories events 
communication events 
automation events 
analysis events 
events 
events 
decision events 
instance taxonomy particular process contain number event kinds cat characterizing particular activities process 
section describes instantiation taxonomy build process studied 
category events communication events 
communication plays central role large processes primarily coordination sizable geographically dispersed group people large software systems built 
instance communication activity charac period time initiation event termination event 
kinds communication may take place actual communication humans occur instance may necessary leave voice mail mes sages intended parties communication unavailable 
clarity identify events communication intervals send events receive events 
second category events automation events demarcate intervals activity com puter performs task compilation 
cases automation activity initiated setup procedure prepare computer au task 
instance job requests may placed queue order allocate computer re sources efficiently 
case instances automation activity characterized interval starting setup event denoting period job queue followed event denoting requested task followed event denoting completion task 
automation activities may terminated complete normally 
iden tify events automation intervals normal events abort events 
categories events ward characterizations process activities carried intervals corresponding pairs events 
analysis events identify intervals results previous process chore analyzed validation problem resolution typi cal analysis event intervals correspond code inspec tions debugging sessions 
events identify intervals person performing tasks fixing code writing documentation mount ing tape 
events correspond times person stops resumes process typical events include arriving going lunch starting assignment related process 
final category events decision events 
de cision events correspond person synthesizing results number previously completed activities information results select set possible new activities 
decision events extremely sensitive inputs results previous activities provide great deal information efficiency pro cess 
example decision may information gleaned previously completed analy sis intervals anticipation imminent day event 
retrospective analysis reveal additional information led better de cision 
decisions considered characterized single event event interval 
overview subject process initial subject study software build process employed large project development process ideal examine cause regularly repeated little change basic day day activities 
group responsible official builds day process ev ery weeks 
software build cycles consists lines source code partitioned dozen subsystems 
major tools build software refer simply build build 
process small set executable products built sub systems installed system labs test execution environments 
product targeted different hardware component system 
build process involves roles 
build owner coordinates process tracks build problems communicates developers located world 
build administrator di build owner sets actual builds execution written guidebook 
build owner typically build assistants problem tracking chores delegated 
capture subject process critical aspect study determine best capture practical way full range events taxonomy described section 
began interviewing members group sible build process study observing activities actual enactment process 
allowed iar personnel involved details activities interac tions 
early experiences learned important things impossible capture events automati cally desirable may 
inadequate capture events captured automatically 
inappropriate capture events asking members group record events occur log events 
important decide appropriate level granularity captured events 
fine grain extremely difficult impossible capture necessary informa tion events occurred 
coarse grain important information contribute standing process 
early experiences designed tech nique process capture relies indepen dent direct observation record events capture automated developed tools automatically derive event data log files generated build tools 
decided place observer alongside build owner build owner clearly focus ac tivity process 
avoid overloading observer chose granularity sub system 
example events kind occurring multiple files particular subsystem recorded event kind name subsystem distinguished say names affected files 
appears consistent way build owners view activities 
designed simple log sheet shown allow observer easily capture important information event 
particular observer expected record event single line log sheet giving unique numeric identifier event noting kind event date time event occurred names subsystems products associated event people involved contributing event 
addition observer expected re late event relevant preceding events field indicate information contributing understanding event field comments 
task assigning event kinds easier predefined specific set event kinds relevant process study set instantiation taxon section 
event kinds table codes identify log sheets 
log sheet highly useful making recorded data informative keeping concise 
observer responsible recording events kinds automation events 
tion events automatically derived log files produced build tools 
deriva tion performed line poses problem relate automation events manually captured events 
solution adopted assume automation event interval subsystem related analysis event interval subsystem time automation interval 
record assumed relationship field analysis events 
analysis subject process kinds properties want discover enforce software process kinds analysis form 
properties satisfaction safety liveness requirements freedom deadlock difficult impossible detect retro analysis deductive analysis better suited discovering existence non existence properties 
kinds analysis best suited em gathered data include analysis fairness resource allocation real time performance process date time event product subsystem contacts 
comments 
ao log sheet capture build process 
communication send call send send email send fax send visit send send visit receive call receive voicemail receive email receive fax receive visi communication automation setup build build setup build build setup build build build normal build abort table event kinds build process 
analysis analysis analysis decision decision activities resource utilization degree concur 
analysis tasks naturally charac terms relationships process events 
basic approach analysis subject process enter captured event informa tion relational database perform queries database analyze relationships events reveal interesting characteristics process 
database system analysis experiments query language provides powerful facilities analyzing re data records 
way example section describes anal ysis queries developed 
analysis queries hypothesis subsystems continual sources build prob lems enactment enactment 
problems may arise corruption original architec ture subsystem large amount special case code required tailor system features different configurations 
problems produce faults may discovered build time resulting classes undesirable phenomena build time 
inordinately large number re builds subsystem 
due large number faults discovered build time large number unsuccessful attempts eliminate fault 

inordinately large amounts time required eliminate faults 
due inherit difficulty analyzing code subsystem fault isolation elimination lack sufficient resources allocated subsystem problem resolution 
problem subsystems identified ana event data perspectives 
automation oriented perspective prob lem subsystems revealed large numbers setup build build events subsystem corresponding phenomenon de scribed long intervals time tween builds subsystem corresponding phenomenon described 

communication oriented perspective problem subsystems revealed long problem solving communication intervals intervals builds corresponding phenomenon described 
event data revealed phenomena subsystem subsystem candidate improvement kind 
instance subsystem higher priority builds subsequent enact ments development organization responsible subsystem undertake root cause analy sis architecture redesign activity aimed process improvement 
sections describe queries de veloped detect phenomena 
queries ana process event data perspectives automation communication 
sample analysis time builds developed query compute average time instances kind build build build tem query presents averages kinds builds subsystems 
compute averages query analyzes relationships related groups tion events 
particular inter build interval identified event particular kind build particular subsystem followed subse quent corresponding setup event subsequent corresponding event build setup event 
results query en process table 
statistics table somewhat diffi cult analyze inherent interdependency build tools 
scanning averages subsystems note sub systems required complete build cycles starting possibly due number fixes widespread impact subsystems 
build averages subsystems skewed somewhat fact involve pairs build intervals containing intervening 
analyzing statistical correlation tween different kinds builds subsystem builds different subsystems accurately characterize effect build tools 
despite interdependency see subsystems greatest number build required roughly relatively short average time required different numbers widely varying times 
contrast subsystems fewest number build large average inter build times build 
furthermore number build subsystem build odoohoom id id id id od ooh oom id od ooh oom od ooh oom id od ooh oom id id id id id id id ooh od ooh oom id id id id id od ooh oom od ooh oom id id od ooh oom id build odoohoom od od od od od id od id od od od id ld llm odoohoom id od ooh oom od id id id od od oom id od llm od od id od od od od od id ooh od od od id od id od od id id build od odoohoom odoohoom odoohoom odoohoom od ooh oom od ooh oom odoohoom odoohoom odoohoom odoohoom odoohoom od ooh oom odoohoom od ooh oom odoohoom od ooh oom odoohoom ld odoohoom odoohoom odoohoom odoohoom odoohoom odoohoom odoohoom odoohoom odoohoom odoohoom odoohoom odoohoom odoohoom odoohoom od ooh oom od ooh oom odoohoom odoohoom od odoohoom odoohoom odoohoom odoohoom odoohoom odoohoom odoohoom odoohoom od ooh oom od ooh oom od ooh oom odoohoom table average time builds number builds enactment build process 
subsystems nearly matched corresponding num ber suggesting number possible ex 
example may subsystems performed ac count changes global interfaces direct result fixes subsystems 
cor relation analysis reveal proper explanations phenomena 
preliminary observations con clude subsystems greatest number build subsystems required great est amount problem resolution version software 
observations correlated multiple subsystems objective evidence need kind process improvement targeted subsystems 
sample analysis duration com munication threads purposes second analysis define communication thread group related commu nication events devoted discussion sin gle problem 
instance consider scenario item identified send communication receive communication event interval 
build owner sends mail developer responsible portion code build owner problem 

waiting hour reply mail build owner places phone call developer developer answer build owner leaves voice mail message 

time developer returns build owner phone call time build owner describes problem developer 

developer telephones build owner declare problem solved 
identify communication thread interval send email event event inter val communication event event interval 
developed query compute average duration communication thread subsystem 
query presents averages subsystems communication took place number communication threads subsystems 
subsystem od ooh od ooh od od ooh od ooh od od ooh table average duration number com munication threads days enactment build process 
table presents results query days enactment build process 
communi cation threads involve specific tem combined single item called 
subsystems table fall classes subsystems required communication threads hour resolve problems subsystems required communication threads hour resolve problems 
subsystems si si potential problem subsystems 
statistics revealed tems larger sample correlated multiple objective evidence need kind process improvement tar subsystems 
described event software process model associated process data capture analysis techniques 
described study applied capture analy sis techniques build process large software project experience demon viability approach process data capture analysis 
greatest strengths approach objectivity focus dy namic aspects process 
feel manual side process data capture needs im proved currently costly labor intensive undertaking 
manual capture tech niques suffer inherent limitations feel minimized effect design log sheets streamlining captured data 
currently studying build processes apply model techniques kinds pro cesses testing product distribution pro cesses 
build process studied event kinds analysis queries designed ad hoc manner 
system tame help design analysis queries systematic 
acknowledgments wish people contributions study mary randy harry steve williams johnson lori ann rick greer dave 
sergio carlo ghezzi angelo 
multi paradigm petri net ap proach process description 
ian thomas editor proceedings th international software process workshop october 
gail kaiser 
scaling rule development environments 
van lam fuggetta editors proceedings rd european software engineering conference num ber lecture notes computer science pages 
springer verlag october 
victor basili dieter rombach 
tame project improvement oriented software en 
ieee transactions software engi neering se june 
victor basili david weiss 
methodology collecting valid software engineering data 
ieee software engineering se november 
mark perry lawrence votta 
prototyping process monitoring experiment 
internal bell laboratories memorandum sub external publication 
mark greenwood 
csp aud system dynam ics process engineering tools 
ed proceedings second european workshop software process technology number lecture notes computer science pages 
springer september 
richard greer april 
internal bell lab memorandum 
si volker 
evaluation nets 
editor proceedings second european workshop software process technology number lecture notes computer science pages 
springer september 
mark kellner 
software process modeling support management planning control 
mark dow son 
editor 
proceedings st international con nce software process manufacturing com systems pages 
ieee computer society october 
perry 
policy directed coordination cooperation 
ian thomas editor proceedings th international software process workshop ber 
ll dieter rombach 
specification software process measurement 
perry editor ence software process models proceedings th international software process workshop pages 
ieee computer society october 
david rosenblum balachander krishna murthy 
event model software ration management 
peter feiler editor pro ceedings rd international workshop soft ware configuration management pages 
acm sigsoft 
kaneko sakamoto 
method software process model ing description lotos 
mark editor proceedings st international confer ence software process manufacturing com systems pages 
ieee computer society october 
richard selby adam porter doug schmidt jim 
metric driven analysis feedback systems enabling empirically guided software de velopment 
proceedings th international conference software engineering pages 
ieee computer society may 
stanley sutton jr accommodating manual activ ities automated process programs 
ian thomas editor proceedings th international software process workshop october 
stanley sutton jr dennis heimbigner leon osterweil 
language constructs man aging change process centered environments 
richard taylor editor proceedings th symposium software development environments pages 
acm sigsoft december 
