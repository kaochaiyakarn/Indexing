import inheritance need modules classes clemens szyperski szyperski inf ethz ch institute computer systems swiss federal institute technology eth zurich switzerland 
design popular object oriented languages smalltalk eiffel sather follows certain trend class structuring form 
need having modules classes claimed 
modules stem different language family glance easily unified classes 
things unifying modules classes carries danger unifying import inheritance relationships 
constructs languages discussed indicate modules classes kept separate 
clarification terms things quality programming language may judged number orthogonality completeness concepts 
measure simple counting second third far difficult determine 
orthogonality important avoid confusion concept overlaps kept small 
practice completeness relative measure expected single language fulfill possible demands 
important measures soundness contradictions language definition theoretical completeness turing completeness scope 
rule thumb keep number concepts language small 
possible reduce single concept 
example functional languages expressed single concept higher order functions 
tends programs hard grasp 
keeping orthogonality completeness mind preferable provide separate concepts separate problems 
leads natural ways expressing solutions language 
concentrates existing languages including popular object oriented ones 
single point language modules classes import inheritance claimed supported 
going details clarification terms class module order 
avoid early preferences certain languages terms defined way understood reading 
differences concepts existing languages discussed subsequent sections 
avoid confusion term object understood talking object orientation term item denote individual things declared operated language 
item may variable type procedure method class entity available language 
rest organized follows 
subsections cover informal formal clarifications terms 
section gives examples revealing certain problems class approaches 
section illustrates problems dealt different languages showing advantages solutions modules classes 
sections go details may skipped overview 
section analyzes modularization aspects variety languages section reflects advantages gained adding modules language 
summary 
informal clarification terms module capsule containing definitions items 
module draws strong syntactic boundary items defined inside items defined outside modules 
principle items module say visible module say imports considering set modules leads directed import graph 
considered engineering practice avoid cycles having directed acyclic graph dag 
module may restrict visibility items contains 
said module exports subset items 
module may impose usage restrictions exported items allowing read access exported variable 
module restrict visibility items contains may called rule 
important explained detail 
set module items exported module called module interface complete module said implementation interface 
module draws fence inside outside serves natural naming scope 
symbolic items imported modules qualified name imported module 
formal definition modules 
class template objects bundles definitions items implement objects class 
objects said instances class 
class may inherit features classes leading incorporation inherited implementations items defined inherited class items inheriting class 
combining set classes inheritance relation leads inheritance dag 
module class draws syntactic boundary inside outside 
control visibility class details distinguish items belong instance class 
additionally class dynamically instantiated objects may belong class module statically instantiated 
sense module compile time abstraction exist run time class run time abstraction defines structure behavior objects run time 

literature chc classes distinguished types 
difference types classes importance claim modules classes may translated saying modules types 
formal definitions types classes 
formal definition modules section may serve partial definition exclusion formal definitions modules import relations system program considered composed set items kinds semantics items defined programming language typical programming language items constants types classes variables functions 
set items various refers relations defined semantics relations defined example language introduce relations reads writes type extends calls 
mean modularize system 
partitioning set items defined 
partitions called modules 
item defined exactly module 
module defines various subsets expi subset expi exports part items contained refers relation 
example language variable may exported read type may exported leaf restriction form new subtypes 
set modules relation imp defined modules term imp signifies imports 
intuitively means export subsets accessible example module may call function exported module imp holds 
definition follow imp forms dag 
mentioned additional constraint considered style 
semantics partitioning set valid relations 
refers relation called valid items valid modules expi imp relation valid valid trivial partitioning module restrictions effect crossing module boundaries matched import relation allowed corresponding export subsets 
language said explicitly support modularization composed language augmented module construct express imp subsets expi 

languages ada ada modula wir textually separate sections define module interfaces module implementations interface specifies module expi subsets plus involved items rest added implementation part 
languages oberon wir single textual section define module plus special markings specify exp subsets place 

modularization may applied convention 
done languages kr modules convention associated files interfaces expressed means header files 
intention emphasize importance having modules explicitly language 
exclude modularization convention formal definition ends augmenting language explicit module construct 

family modules may described means single generic parameterized module 
examples ada generic packages generic modules ag 
genericity interesting option modules scope 

interesting question regards higher level modules modules modules 
new problems higher level modules partition particular proposal may car higher level modules called systems 
care taken higher level modules contain items modules lower level cf 
section 
approach followed 
pathological cases examples ignoring formal definitions may terms module class close identical 
difference sub sections describe especially severe problems resulting language classes modules 
problem deals entities naturally expressible terms classes way entities may accessible client implementation 
second problem considers invariants spanning multiple cooperating classes 
particular solutions problems discussed section 
feature import pseudo inheritance versus pseudo forwarding 
items exist naturally belong class 
artificial bind globally constants variables class 
likewise exist functions procedures difficult associate class 
example functions accepting parameters different types need emphasize message receiver 
operations provided mathematical libraries typical example class belongs set say statistics functions 
functions operate argument say class real 
add functions real 
turn requires adding functions applied real numbers real 
time assume math library packaged separate classes 
library 
system having classes possibilities inherit library class instantiating dummy object class 
may called pseudo inheritance pseudo forwarding 
table illustrates possibilities 
pseudo notation entirely fictitious 
resemblance languages living dead purely accidental 
table 
feature import pseudo inheritance vs pseudo forwarding 
approaches try circumvent missing import construct accessing required feature inheritance 
note pseudo inheritance scheme particularly counter intuitive class inherits class specialization 
expected explore polymorphism classes reasonable expect overriding methods 
pseudo forwarding mechanism builds variable variable stat example means indirection example simple procedure variable 
indirection wanted cases imported class 
conceptually inferior pseudo inheritance scheme preferred avoid additional indirections 
system invariants class centered languages long important invariants constructed systems associated single classes 
invariants called class invariants 
set cooperating classes may combination establish maintain invariants called system invariants 
invariants expressed instances different classes established maintained single class 
example consider classes linkedlist linkable 
idea linkedlist maintains linked lists objects 
objects instances classes derived class linkable 
table shows skeletons classes 
class linkable linkable 
linkable class linkedlist head linkable ring head method prepend linkable assert nil head head 
linkedlist table 
classes linkedlist linkable 
known problem arises linkable object inserted linked list time 
detect kind problem linkedlist code linkable object list 
example list implemented ring 
field code list membership linkable object say 
assumed initialized nil 
nil sure problems arise guaranteed linkable object inserted list 
equivalent invariant list heads say head head linkable object say reachable traversing fields 
reachable head reachable head invariant classes linkedlist linkable defined instance variable linkable head linkedlist 
established precondition list operations insert linkable object invariant 
example method prepend asserts nil assuming invariance guarantees precondition 
assumes modified class linkedlist 
words modified outside linkedlist invariant longer implied precondition hand read outside linkable linkedlist implemented 
construct required permits free access class system maintaining invariants restricting access outside 
constructs discussed section 
pathological cases solutions importing features inheritance abuse versus module import section indicated traditional procedures functions globally constants variables relate classes 
wants avoid having procedures variables existing outside structure 
languages force declarations belong structuring form available class 
leads complex weird language constructs str feature import solved redefining required items declarations 
obligation linker check resolved matching definitions 
modularization available level files 
mechanism quite language level module concept avoids inheritance abuse order implement imports 
global variables proper procedures available 
visibility class non class entities controlled totally different constructs 
smalltalk gr eiffel mey descendant sather module concept 
problem attacked automatically importing classes currently system 
words possible directly refer names classes class 
means accessing class features inheritance message sends 
example eiffel inheritance concept routinely abused import standard input output procedures 
additionally sather allows accessing arbitrary items classes 
overcome lack proper procedures sather allows call method directly passing void receiver object self 
smalltalk meta classes mainly compensate missing global variables procedures 
eiffel incorporates notion procedures missing global variables 
sather adds shared instance variables class variables solve problem 
eiffel sather allow declaration private features support information hiding class level 
having modules repertoire language necessary artificially bind items global variables procedures classes 
example section solved defining functions gamma library module import inheritance 
solve problem really wants add new feature existing class 
kind incremental modification different concept capsules concept wil required 
cf 
section 
modula ode mixes concepts modules classes having single construct providing different relations class modules import inheritance 
solves problems mentioned adds certain amount confusion mixing orthogonal concepts 
section 
guaranteeing system invariants spaghetti scoping versus modular scoping cooperation classes typically tackled friend functions mechanism allowing access inner parts class called private class 
sense friend mechanism scope go classes defined system adding ad hoc privileges 
hand maintain principles information hiding expects friend relations explicitly statically declared affected classes 
friend mechanism principal advantages static bundling classes modules 
allow spaghetti scoping arbitrary classes 
eiffel sather kind problem due lack modules 
referring example section export field class linkable class linkedlist subclasses 
limited export named classes structural weakness spaghetti scoping friend mechanism 
modules part language solution simply read export 
module direct access implementation class accessible classes module rule 
manipulated linkedlist 
see table names marked asterisk dash exported module dash indicates read export 
read export kept private method added linkable 
module lists class linkable linkable 
linkable class linkedlist head linkable ring head method prepend linkable assert nil head head 
linkedlist lists 
table 
bundling linkedlist linkable classes module 

apparently modular scoping limited spaghetti scoping 
example set classes may cooperate way pairs need common module 
modular scoping forces classes single module classes may direct relations 
considered feature weakness proposed module scheme forces tightly related parts system common modules leading clean modular structure 
discussion module class constructs different languages section closer look modules classes existing languages taken 
early treatment module concept may par 
implementations modules may mesa mms ucsd pascal bow 
class concept originated simula dmn smalltalk structuring means way back traditional languages forming object pascal tes eiffel 
primary family modular languages stems modula direct successors modula modula cdg modula add object oriented concepts 
ada modularization concept called packages 
languages eiffel sather concentrate class construct 
concentrates languages static checking languages self clos dg delegate checks run time considered 
smalltalk untyped language geared rapid prototyping attempt add modules ww additional structuring means wil 
message modules orthogonal quite useful construct object oriented language apparently reached sufficient audience 
modules modula popular language name fully developed modularization concept 
modula took module concept far allowing modules nested inside scopes dynamic extent procedures 
leads confusion variables defined modules behave local variables procedure 
argue modula kind module contributed blurring distinction modules types classes 
example car read modules similar types add notion imported identifiers 
evading strict block structure statically scoped languages 
opinion lead generalizations module concept class concept modula explicitly introducing notion module types 
completes confusion record structured type described record module type constructor 
poor man modularization concept stemming predecessor realized means files partial redefinitions usually supported called include files 
mechanism simulates modules files part language 
problems inconsistencies various versions handled compiler delegated file system various auxiliary tools sccs 
ada package concept gets close module concept 
ada complicated form expressing import relation export subsets making complicated language read 
example clause forming import relation packages perform overloading visible names combining separate concepts 
oberon wir successor modula hand eliminated local modules 
important result language cleaner notions module type separated orthogonal 
oberon mw step taken close decisions taken object pascal extending module concept form classes record construct extended allow binding procedures methods record types 
class inheritance type extension concept oberon wir new constructor object la object pascal class la required 
system wil defines interesting variation modules called capsules 
capsules sense orthogonal rest language case smalltalk modules proposed class may take definition multiple capsules 
advantage simplifying modifications system performed afterthought 
clear capsules relate partitioning system design 
fact encourages incremental addition capsules spanning multiple levels abstractions time 
motivated way smalltalk typically extended means small additions existing classes 
certain sense capsules orthogonal modules propose partitioning incremental history driven deltas applied system modules useful partitioning system levels abstraction units service 
classes pure object oriented languages smalltalk eiffel sather directly classes modularization 
allow feature import inheritance message sends 
eiffel inheritance frequently simulate imports 
remove clutter eiffel sather features inherited features 
sather report stated elimination parent object shared attributes save space needed 
turn adds problems having features visible superclass view object deleted feature list object class 
lack proper import relation partially compensated allowing unwanted side effects abused inheritance relation 
achieve structuring power modules smalltalk eiffel sather need nested classes classes nested inside host class cross access implementations 
nesting classes problematic longer clear instantiation means instances nested class members class instantiated different instances host class 
interestingly nested classes treats declared non nested fashion 
simula supports nested classes uses construct mimic modules means classes 
typical example simula standard class bdm uses doubly linked ring implement set abstraction 
defines nested auxiliary classes linkage link head 
class serves kind module packaging nested classes 
classes defined statement block block needs prefixed name 
similar import construct adds certain confusion imported class module class 
beta kmm solves problem apparently overlapping concepts 
nested classes realized called patterns possibly exactly instance may tackle problem cooperating classes 
fragments close modules additionally supporting multiple versions control language may 
language report kmm clear concept intention apparently patterns model concepts fragments provide implementations 
effects modularization system structure general software engineering aspects modularization known parnas module concept 
section reflects aspects may reconsidered adding modules language 
motivation necessity having modules language large projects may car 
cardelli states explicitly surprisingly common mistake consists designing languages assumption small programs written example languages 
modules type systems 
widely languages eventually suffer conceptual collapses weight ad hoc extensions 
information hiding efficiency versus encapsulation traditionally adding full encapsulation implementation abstraction increases costs 
information hiding paradigm allow direct access implementation representation details requesting interactions performed operations methods procedures 
hcu indicates fully interfaces need hurdle aiming efficiency current language implementations perform poorly abstractions taken far nearly single operation implemented procedure method invocation 
result significantly complex compilation techniques compilation run time global program analysis required regain efficiency 
techniques require simultaneous availability source code colliding practical requirements legal issues large projects 
modules problem solved 
rule stated allows information hiding module clients time imposing restrictions interrelations module 
possible implement closely interacting parts single module efficiency problems due information hiding issue 
practice strategy works object orientation taken medium granularity objects represent larger abstractions say integers characters 
especially case supportive classes simply procedures implement class auxiliary classes need exported module 
separate compilation dynamic loading modules natural unit compilation 
small allow fast recompilation cases interfaces kept stable reduce cost intensive recompilations clients 
modules part language opposed simulated files la compiler maintain version information 
recompilation clients module changed interface enforced unnecessary recompilations avoided incompatibilities detected compile link load time 
module useful unit dynamic loading 
done time loading control programmer hard establish initial invariants module 
cope situation initialization body attached module 
dynamic loading modules module body seen option language designer programmer call initialization procedures 
module body contains code executed immediately loading corresponding module loading initializing imported modules 
support hybrid object oriented language concepts traditional procedural languages different concepts 
types constants variables procedures important ones 
pure object oriented languages smalltalk tendency get rid constructs favor new general ones classes objects 
radical approach followed hybrid languages maintain proven concepts older languages smoothly add new object oriented concepts 
oberon oberon modula modula 
hybrid object oriented language expected expressed terms classes objects 
important kind bundling concept clean module construct just perfect 
example possible implement module exports classes extensible abstractions time details module implemented conventional fashion appropriate 
way readability efficiency improved natural constructs problems hand 
modules available conventional constructs statically bound procedures desired weird concepts may result 
example sather allowed directly access parts called features class simply naming pi accesses constant pi defined class hello calls method class output string 
case method called void receiver self void fatal true methods 
methods need written proper procedures additional self parameter superfluous 
summary adding module concept object oriented languages unnecessary classes thought just modules plus inheritance plus dynamic binding plus multiple instantiation 
claim language provide modules classes 
shortly summarize modules compile time abstractions provide syntactical structure large system orderly scoping names interrelations import graph natural units information hiding separate compilation dynamic loading orderly global variables procedures comparable class variables class methods 
modules need definitely nested structures classes 
emphasized modules understood purely syntactical construct add structure visibility borders system 
modules special run time semantics exception module initialization bodies cf 
section 
classes hand run time abstractions provide object templates defining object structure behavior multiple instantiation object construction orderly inclusion extension superclass implementations inheritance graph 
language separate classes types classes may provide typing purposes 
important note separate role modules remains language distinguishes classes types 
having classes various roles modules need added class construct 
leads solutions intuitive inheritance library class conceptually clean spaghetti scoping 
approaches current object oriented languages eiffel 
languages exist provide constructs 
example oberon defines combination closely follows suggested module semantics languages modula come close 
potential information hiding separate compilation dynamic loading fully utilized oberon system wg 
likewise beta system kmm uses fragments support modularization separate compilation 
module concept particularly lightweight gri wg adding modules language requires small syntactical efforts implementation overhead small 
furthermore run time costs possibly introduced separate compilation 
modules classes serve different purposes structuring system 
indications put 
module class approaches guiding heuristics exist example par mey 
may directed giving criteria designing object oriented systems decomposing modules classes 
adding modular structuring concept object oriented languages principal problems adding types 
cases types modules programmer forced introduce structure directly solve problem 
hindrance prototyping rapidly new application areas 
better maintainability larger systems larger prototypes strongly felt structure important ad hoc coding potential 

concentrates working characteristics modularization object oriented setting cover experiences application scheme 
worth mentioning proposed scheme applied language oberon actual projects non toy size object oriented operating system 
ck pfister carefully reading earlier versions fruitful discussions topic 
am grateful anonymous referees providing helpful comments 
remaining faults especially regarding details cited programming languages course mine 
ada manual ada programming language proposed standard document united states dep 
defense 
july 
ag goguen 
object oriented environment 
conf 
proc 
ecoop geneva switzerland 
lecture notes computer science springer verlag berlin 
july 
bdm birtwistle 
dahl nygaard 
simula second edition 
van nostrand reinhold new york ny 

edition 
bow 
beginner guide ucsd pascal system 
byte books nh 

car cardelli 
typeful programming 
quest language 
research report dec systems research center palo alto ca 
may 
cdg cardelli donahue jordan kalsow nelson 
modula report 
research report dec systems research center palo alto ca 
august 
chc cook hill canning 
inheritance subtyping 
proc 
popl 
acm press january 
acm trans 
progr 
lang 
systems 

dg demichiel gabriel 
common lisp object system overview 
clos 
conf 
proc 
ecoop paris 
lecture notes computer science springer verlag berlin 
june 
dmn 
dahl nygaard 
simula common base 
norwegian computing center oslo 

gr goldberg robson 
smalltalk language implementation 
addison wesley reading ma 

gri 
linearization graphs writing symbol files 
technical report institute computer systems eth zurich switzerland 
march 
hcu lzle chambers ungar 
optimizing dynamically typed object oriented languages polymorphic inline caches 
conf 
proc 
ecoop geneva switzerland 
lecture notes computer science springer verlag berlin 
july 
kmm kristensen madsen ller pedersen nygaard 
beta programming language 
shriver wegner eds research directions object oriented programming 
mit press 

kmm kristensen madsen ller pedersen nygaard 
object oriented programming beta programming language 
draft upcoming book 
october 
kr kernighan ritchie 
programming language 
prentice hall englewood cliffs nj 

mey meyer 
object oriented software construction 
eiffel language 
prentice hall englewood cliffs nj 

mms mitchell sweet 
mesa language manual 
technical report csl xerox parc palo alto ca 
april 
mw ck wirth 
programming language oberon 
structured programming 
ode odersky 
extending modula object oriented programming 
modula language 
proc 
int 
modula conf bled yugoslavia 
october 
omohundro 
sather language 
technical report tr international computer science institute berkeley ca 
june 
par parnas 
criteria decomposing systems modules 
comm 
acm 
december 
levin wick 
extending modula building large integrated systems 
modula language 
research report dec systems research center palo alto ca 
january 
str stroustrup 
programming language 
addison wesley reading ma 

tes 
object pascal report 
structured programming structured language world 

ungar smith 
self power simplicity 
conf 
proc 
oopsla orlando fl 
october 
wg wirth gutknecht 
oberon system 
software practice experience 
september 
wg wirth gutknecht 
oberon system 
addison wesley reading ma 

wil wills 
capsules types program verification smalltalk 
conf 
proc 
ecoop geneva switzerland 
lecture notes computer science springer verlag berlin 
july 
wir wirth 
programming modula fourth edition 
texts monographs computer science 
springer verlag berlin 

edition 
wir wirth 
type extensions 
acm trans 
programming languages systems 
july 
wir wirth 
programming language oberon 
software practice experience 
july 
ww wirfs brock wilkerson 
overview modular smalltalk 
conf 
proc 
oopsla san diego ca 
september 
