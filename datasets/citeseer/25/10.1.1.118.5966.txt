baton balanced tree structure peer peer networks jagadish beng chin ooi vu department electrical engineering computer science university michigan mi usa department computer science national university singapore singapore singapore mit alliance engineering drive national university singapore singapore jag eecs umich edu comp nus edu sg nus edu sg propose balanced tree structure overlay peer peer network capable supporting exact queries range queries efficiently 
spite tree structure causing distinctions nodes different levels tree show load node approximately equal 
spite tree structure providing precisely path pair nodes show sideways routing tables maintained node provide sufficient fault tolerance permit efficient repair 
specifically network nodes guarantee exact queries range queries answered logn steps update operations data network amortized cost logn 
experimental assessment validates practicality proposal 
peer peer systems popular 
central strength systems capability sharing resources larger costly supported part national science foundation number eia permission copy fee part material granted provided copies distributed direct commercial advantage vldb copyright notice title publication date appear notice copying permission large data base endowment 
copy republish requires fee special permission endowment 
proceedings st vldb conference trondheim norway servers replaced systems smaller computers 
biggest challenge building effective system tying multiple autonomous computers cohesive system 
usually done means logical overlay network organize data managed computers represent nodes overlay network 
various topologies suggested network including ring multi dimensional grid :10.1.1.140.3129
overlays known build distributed hash tables nodes system 
database world trees occupy central place value tree structures general appreciated 
overlay network proposed far tree topology reason typical centralized tree nodes near root frequently accessed nodes near leave sort skew access load typically acceptable peer peer system 
propose tree structured overlay network peerto peer system substantial skew access load 
overlay network propose binary balanced tree structure node tree maintained peer 
peer network stores link parent link left child link right child link left adjacent node link right adjacent node left routing table selected nodes left hand side level right routing table selected nodes right hand side level 
call proposed structure baton balanced tree overlay network 
tree structure binary scalability robustness similar tree 
immediate benefit tree structured overlay network convenient support range queries supported conventional distributed hash tables 
notable works address range maintenance querying schemes standard overlay networks quite complex :10.1.1.11.9880
tree node represents leaf node tree node maintains path index root leaf node 
nodes distributed chord overlay network 
explicit maintenance paths expensive prone inaccuracy introduced changes tree structure 
single dimensional range partitioning examined independent underlying network 
networks chord uniform hashing performance achieved :10.1.1.140.3129
consequently effective supporting data partitioning retrieval ranges 
contributions 
knowledge build overlay network balanced tree structure 
consequence exact match range queries efficiently supported 
node joins leaves system systems system takes log steps finding place joining node finding node replace leaving node 
takes logn cost updating routing table efficient systems usually require log updating routing tables 
difference asymptotic cost significant networks large number nodes load balancing range partitioning system require knowledge stored data range advance adjust range dynamically node 
mechanism permits load balancing overloaded nodes transferring part contents nodes 
show asymptotic cost load balancing low 
fault tolerance tree definition exactly path pair nodes 
small number additional links stored network suffice provide efficient recovery event node link malfunctioning 
specifically show network remains connected large number failures 
rest organized follows section related 
section introduce system architecture system operators detail 
section performance study 
conclude section 
related data partitioning searching multiple sites researched context distributed databases 
partitioning searching strategies applied fully distributed networks global index guarantee uptime individual system 
follows review related systems 
chord pastry tapestry best known systems :10.1.1.111.1818:10.1.1.140.3129:10.1.1.28.5987
implements distributed hash table efficient exact queries suited range queries hashing destroys ordering data 
rectify gupta proposes system locality sensitive hashing similar ranges hashed peer high probability 
methods help get approximate answers 
way including ranges hash functions proposed system return superset range query 
exact search highly inefficient 
skiplist systems skipnet support range queries guarantee data locality load balancing system 
closest works tree grid 
tree structure tree structure uses chord overlay routing architecture 
node system stores left root leaf path corresponding tree 
data stored leaf nodes leaf nodes form chord ring 
tree guarantees logn search exact query range query 
node joins network addition logn cost searching predecessors chord ring log cost updating routing tables large cost getting tree structures predecessors build tree branch 
check data consistency new join nodes requires special process run periodically nodes system 
systems chord performance degrades data skewed 
grid binary prefix tree structure node tree maintains nodes prefix length different value position key responsible 
multiway tree tree structured overlay node tree maintained peer link parent children siblings neighbors 
tree structure tree binary tree multiway tree structure constraints fan node children possible 
searching entails hopping query node node containing answer links 
node multiway tree connected parent left right sibling neighbor sub trees prone network failure 
grid tree balanced data skewed worst case tree structure linear linked list node level 
search process guaranteed logn steps 
compared existing tree network structures proposed structure baton self adjusting data skew height balanced maintains vertical horizontal routing information efficient search fault tolerance 
baton structure overlay network baton binary balanced tree structure shown 
definition tree balanced node tree height subtrees differ 
shown binary balanced tree nodes height greater logn 
associate node tree level number 
level root immediate children level 
level node greater level parent 
maximum level number tree height tree 
level nodes binary tree 
number positions left right level node currently instantiated position 
level number precisely determine location node binary tree 
straightforward determine structural relationships pair nodes just parent child ancestor descendant relationships siblings neighbors forth 
find useful linear ordering nodes tree purpose order traversal 
node say node immediately prior traversal left adjacent node immediately right adjacent 
note adjacent nodes may different levels 
fact complete tree alternate node traversal leaf node alternate node interior node 
binary balanced tree index architecture tree complete easy show interior node adjacent node leaf node interior node children 
node tree typically maps exactly peer compute node peer peer system 
times mapping may temporarily terms developing intuition network reasonable state node conceptual binary tree corresponds exactly unique node peer peer system 
physical compute node ip address network id associated locate node communicate 
think node having logical id terms level number physical id terms ip address 
node tree maintains links parent children adjacent nodes selected neighbor nodes nodes level 
maintaining links parent children adjacent nodes simply means maintaining physical id parent left child right child left adjacent node right adjacent node 
links selected neighbors maintained means special sideways routing tables left routing table right routing table 
routing tables contains links nodes level numbers respectively greater number source node power 
th element left right routing table node numbered contains link node number respectively level tree 
node entry routing table marked null 
routing table considered full valid links null 
example consider node 
left routing table valid links right routing table contains neighbor links node nodes away 
structure similarity chord straight line circle routing table entry carries additional information just target ip address links null 
theorem tree balanced tree node tree child left right routing tables full 
proof consider addition node tree balanced 
new node added child node node level new node level 
resulting tree imbalanced ancestor node depth left right subtrees differs result new node addition 
consider ancestor level loss generality suppose left subtree depth left subtree may changed result node addition 
depth left subtree greater change result node addition imbalance result 
right routing table full th entry table node right subtree furthermore node level right subtree depth change depth left subtree violate balance 
applying argument ancestor tree establish tree remains balanced node addition 
consider deletion tree node child node level deletion may cause imbalance tree rooted ancestor depth subtree changes subtree depth 
loss generality suppose left subtree exist node right routing table right subtree node level suppose depth right subtree done imbalance created 
suppose depth greater 
consider cases 
case node child right routing table child 
requirement theorem deletion permitted children 
imbalance caused 
case node means node level right subtree parent level entry left neighbor routing table node left subtree different node level departure node change depth left subtree imbalance caused 
making argument ancestor show tree balance destroyed node deletion subject theorem condition 
theorem node say contains link node say left right routing tables parent node contain link parent node node parent proof nx number node parent loss generality right child parent nx 
nw nx 
similarly parent nz ny ny nz ny ny odd 
case suppose distance ny nx integer 
ny guaranteed nx 
follows nz nw meaning link case suppose distance sibling 
parent done 
case suppose distance sibling 
right child parent right neighbor ny nx odd 
compute nz ny nx nw 
number greater link 
easy see entries left right routing table level total number entries logn asymptotic bound chord worst case number entries twice baton entry larger 
node join node wanting join network know node inside network sends join request node 
phases new node joining network 
determine new node join 
second including network specified place 
consider turn 
node receives join request left routing table right routing table full children accept new node child 
needs forward join request nodes join algorithm described 
example assume node wants join network sends join request node 
forwards request adjacent node 
routing tables full forwards request parent turn checks routing tables forwards request neighbor node doesn children 
accepts child 
analyzing algorithm suppose adjacent link traversed leaf node able accept new node child incomplete neighbor table 
case forwards request parent locate neighbor table node parent missing neigh algorithm join node full full null null accept new node child full full forward join request parent exists forward join request forward join request adjacent nodes new node joins network bor node accept new node child neighbor table full case forwards request parent 
height tree logn request forwarded manner logn times 
directions forwarding add constant terms 
bound logn messages locate spot new node join 
furthermore algorithm specifically seeks leaf nodes parents nodes incomplete neighbor tables leaf nodes due theorem 
specifically ancestor nodes required involvement root just ordinary node 
expect load disproportionately applied root 
node accepts new node child splits half content child 
words range associated partitioned new child 
addition accepted left child sends left adjacent link points updates left adjacent link creates left adjacent link pointing right adjacent link pointing notifies update right adjacent node 
similarly accepted right child right adjacent link transferred node contacts neighbor nodes left right sideways routing tables asking inform relevant children turn responding information regarding relevant children require 
process requires logn messages logn responses 
specifically needs send maximum messages neighbor nodes level neighbors nodes need send maximum messages children turn need send messages respond new node level new node 
new node needs send message adjacent nodes 
maximum number messages required updating routing tables logn 
node departure leaf nodes may voluntarily leave network departure upset tree balance 
cases node wishes leave network find replacement leaf node absence affect tree balance 
consider cases turn 
leaf node wishes leave network neighbor node routing tables children leave network affecting tree balance requirement theorem satisfied neighbor nodes 
case transfer content range index values charge parent left adjacent link left child right adjacent link right child send leave messages neighbor nodes update routing tables 
parent node receiving content needs send messages neighbor nodes notify new content children 
notifies affected adjacent link node update corresponding adjacent link 
total number messages required case logn levels parent node node 
leaf node wishes leave network neighbor nodes routing tables children needs find node replace sending find replacement request child node neighbor nodes 
non leaf node wishes leave network finds node replace sending request adjacent nodes leaf node deep possible 
find replacement algorithm described process finding replacement node goes takes steps height tree logn 
example consider node 
wants leave network find leaf node replacement 
creates algorithm find replacement node node null forward request null forward request exists forward request child come replace leave node request sends adjacent node checks routing tables realizes neighbor nodes children forwards request child neighbor node child neighbor node children replace safely 
illustrated baton adapts node departure continues maintain height balanced property 
existing node leaving network node replaces node leaving network needs notify neighbor nodes parent leaving previous case takes logn steps 
addition nodes links informed change physical ip address link point easily done information received specifically original parent node needs send messages neighbor nodes notify new replacement child level 
needs send messages new neighbor nodes new level messages children messages adjacent nodes 
maximum number messages required update routing tables reflect changes logn 
node failure node may fail depart suddenly 
case nodes wishing access departed node discover address unreachable 
nodes report failure node parent responsibility managing departure node links maintained routing tables quickly regenerate left right routing tables contacting children nodes routing tables 
children help locate children 
node parent node initiate graceful departure child node left abruptly protocol described preceding section 
routing information regenerated algorithm described works minor modification 
fault tolerance described failure abrupt departure node handled gracefully 
repair operation node departure requiring logn messages takes non zero time 
section show network continue operate routing missing node mean time 
axes messages routed baton sideways axis left right routing tables axis parent child adjacent links 
naturally fault tolerant chord logarithmic expansion links large number alternative paths pair nodes 
rendered fault tolerant node go neighbor parent find child node connect back child node missing parent child link 
far considered failure single node 
nodes fail possibilities consider 
failed nodes parent child relationship apply technique described traveling neighbor nodes 
failed nodes parent child relationship failures corrected independently additional complication temporal simultaneity failure 
special case nodes level fail tree partitioned adjacency links route gap 
contrast brittleness multiway tree 
network restructuring description joining nodes forced away parts tree leaving nodes find replacement nodes cause tree imbalanced 
node joins leaves part load balancing effort see redirection may permitted 
alternative restructure system achieve balance 
restructuring akin rotation avl tree described 
network restructuring node joining node accepts joining node child detects theorem violated initiates restructuring process 
loss generality suppose restructuring right 
assume joins left child 
rebalance system notifies replace position notifies right adjacent node replace position 
joins right child remains untouched directly replaces 
checks right adjacent node see left child empty 
adding child affect tree balance takes position left child new position restructuring process stops 
left child full accept left child violating balance property occupies position needs find new position continuing right adjacent node 
consider example 
suppose joins network left child joining violates tree balance property shown 
restructuring process initiated replaces replaces replaces replaces replaces replaces replaces replaces left child accept child causing tree imbalanced 
tree balanced illustrated 
leaf node leaves network causes tree imbalanced parent starts restructuring process non leaf node needs find replacement node 
loss generality consider left restructuring 
assume right child 
rebalance tree replace left adjacent node replace 
left child directly replace remain untouched 
move upset tree balance restructuring process stops 
move violate balance property left adjacent node replace position recursively find replacement node example assume leaves system imbalanced shown 
restructuring process started replaces replaces replaces replaces process stops move cause loss balance 
shows balanced structure restructuring 
network restructuring node departure data movement required due network restructuring 
nodes change position tree affecting level number affecting routing tables 
node adjusting routing table requires logn effort 
nodes participate restructuring process effort required updating routing tables 
index construction previous section described overlay network structured binary balanced tree 
section show overlay network build effective distributed index structure similar spirit avl tree 
assign node leaf internal range values 
record link range values managed node target link 
range changes link modified record change 
range values directly managed node required right range managed left subtree range managed right subtree 
words trees internal nodes tree manage range data values directly 
easy see baton overlay structure immediately behaves index tree 
index structurally similar mainmemory index called tree designed reduce number pointers memory pointer chasing 
exact match query exact match query issued received node node check range 
current range local index searched value search stops 
routes query destination node described search exact algorithm 
algorithm search exact node query value lowerbound upperbound executed upperbound lowerbound exists forward null forward forward similar process followed left illustrate search 
suppose node wants search data stored node searched value greater upper bound checks right routing table forwards search request node rightmost node having lower bound searched value 
checks right routing table forwards request node find neighbor node forward request forwards request right child forwards request destination node 
exact match query search node wants search exact value root search request forwarded downward destination node range index values contains searched value 
maximum number steps processing height tree logn 
root loss gener large number duplicates partition search key value corresponding index entries may distributed multiple tree nodes 
case nodes exact search algorithm 
adjacent node links navigate index nodes 
ality assume request node left side tree 
consider cases destination node 
case destination node root algorithm search request forwarded right node left subtree forwarded root right adjacent node cost forwarding request logn height left subtree forwarding neighbor node right child right adjacent node search space reduced half 
maximum number steps logn 
second case destination node right side tree search process takes step forward search request node left subtree node right subtree routing table 
depending searched value step happen early search process 
happens previous search steps help reduce search space right subtree half 
total steps logn logn logn cost searching right subtree 
algorithm shows search request forwarded neighbor nodes child nodes 
request needed forward higher level nodes cases higher level node contains searched value processing node children leaf node node near leave 
property clearly helps root avoid receiving requests nodes 
range query range query proceeds exactly manner point query difference looking data range node including searched value look intersection searched range 
intersection partial answers range query 
proceed left right cover remainder searched range 
case point query takes logn steps find intersection 
cost additional node visited 
answer range query range covering nodes require logn steps 
data insertion data inserted follow search process exact match query find node data inserted perform insertion 
left right nodes range may need adjusted inserted data value outside current range 
left node receives insert request inserted value range values expands range values left cover newly inserted value node knows left node number left child 
similarly right node receives insert request inserted value greater range values expands range values right accept new inserted value 
special cases takes additional logn step updating routing tables 
cost locating node insert new data logn exact match query search process 
data deletion delete existing data locate node manages data value delete data 
cost exactly search logn 
load balancing distribute computational load evenly nodes peer system 
load estimated terms number queries number messages 
typically larger range covered node number data items managed node load 
load balancing process allows node split part range nodes acquire additional range nodes 
goal adjust data range roughly equalize workload 
note doesn mean data ranges equal 
load balancing simple data migration adjacent nodes may sufficient deal effectively skewed dataset 
data migration may ripple network incur high total overhead 
doing load balancing just adjacent nodes propose node load balancing adjacent nodes non leaf node 
leaf node load balance adjacent nodes find leaf node lightly loaded node share load 
specifically leaf node overloaded tries load balancing adjacent nodes 
adjacent nodes heavily loaded finds lightly loaded node load balancing 
loss generality lightly loaded node right overloaded node 
lightly loaded node pass load right adjacent node 
leaves current position network re joins child overloaded node forced restructuring network left node leaving right node joining necessary 
example assume node 
overloaded identifies node lightly loaded node 
node passes range node rejoins child node movement node skip list structure suggested 
practical experience suggests neighbor tables suffice locate lighter loaded ode lightest loaded node 
load balancing major restructuring causes overlay structure imbalanced restructuring invoked 
load balancing process nodes replaces turn replaces replaces replaces replaces takes original position 
movement nodes illustrated dashed line 
observe forced restructuring worst case involves complete shift overloaded node position lightly loaded node position 
commonly smaller shifts required affecting nodes suitable spots accommodate node departure arrival respectively 
fact probability shift involving nodes exponentially decreasing value little bit analysis show amortized cost load balancing insertion deletion just logn 
experimental study built peer peer simulator evaluate performance proposed system large scale networks 
simulator simulates network reading schedule specifies actions inside network 
schedule generated randomly scheduler requires input parameters including number nodes number data number search queries 
number passing messages measure performance system 
evaluate cost operations test network different number nodes 
network size data values domain inserted batches 
test exact queries range queries executed average cost taken 
simulate different sequences events order nodes join leave experiments executed times different sequences average taken 
comparison purposes obtained chord web site implemented multiway tree structure proposed 
cost join leave operations shows average messages find destination node join operation average messages finding join node replacement node updating routing table average messages node joining leaving operations find replacement node leave operation 
result interesting 
number nodes network increases average number messages join leave operations increase 
matter level node located takes step forward join leave request leaf node 
request forwarded upward lower leaf nodes case join operation forwarded downward higher leaf nodes case leave operation 
important feature baton cost operations usually equal distance lower node higher node change system grows 
distance lower height tree cost join leave operations lower logn 
shows average number messages leave operation lower join operation process finding nodes replace needs go process finding nodes join needs go horizontally addition going 
chord requires messages comparison number messages increases linearly network size 
multiway tree system node children cost join operation low cost leave operation high departing node needs get information children select replacement node node children cost join operation insert delete operation exact match query range query average messages insert delete search operations higher chances join request forwarded descendant nodes 
case total number messages required large 
shows average number messages required update routing tables join leave operations 
experiment confirms claim system significantly reduces cost updating routing tables compared systems chord require log updating routing tables 
compared multiway tree system system takes higher cost multiway tree system node links parent siblings neighbors children 
cost updating routing tables depends number children node 
sufficient routing tables multiway tree system pay high price search operations 
system vulnerable link failure 
case order reduce cost updating routing tables increasing cost operations keep information routing tables systems 
cost insert delete search operations shows average number messages needed insert delete operations respectively show average number messages required exact match queries range queries 
result shows system support insert delete operations exact match queries range queries efficiently 
cost insert delete exact match query operations system balanced tree lower multiway tree 
compared chord cost system slightly higher 
height tree logn chord factor 
system support range queries efficiently chord 
access load access load nodes different levels shows access load nodes different levels measured terms number messages 
insertions find load constant levels 
search load slightly higher leaves root amply establishing baton overload nodes near root network 
effect load balancing evaluate capability system case skewed data distribution test network skewed data set generated zipfian method parameter 
result shows significant difference costs operations load balancing process triggered frequently uniform distributed data 
shows average messages load balancing operation size load balancing process load balancing operation average number messages required balance system respective case uniformly distributed data skewed data 
skewed data find cost load balancing grow linearly number insert delete expected number load balancing messages insertion deletion message insertion deletions low overhead 
understand low cost plot distribution number nodes involved load balancing operation 
far shift perform forced insertion deletion 
result strongly exponential showing little shifting required time long shifts may required occasionally 
effect network dynamics systems nodes may join leave time 
intensity nodes joining leaving effect robustness network 
experiment shows average extra messages taken due concurrent joining leaving operations 
takes times network update knowledge joining leaving nodes time messages may forwarded wrong destination 
result shows nodes join leave time additional messages taken 
network dynamics plethora overlay networks proposed systems 
tree structures spite tree structures ubiquitous data management 
introduced baton balanced binary tree overlay network systems 
adding small number links addition tree edges able obtain excellent fault tolerance get load distribution having overload nodes near root tree 
shown tree structure naturally support index structure range queries 
experimentally verified complexity claims 
aberer 
grid self organizing access structure information systems 
proceedings th international conference cooperative information systems 
aspnes shah 
skip graphs 
proceeding th annual acm siam symposium discrete algorithms pages 
gehrke shanmugasundaram 
querying peer peer networks trees 
webdb proceedings th international workshop web databases pages 
ganesan bawa garcia molina 
online balancing range partitioned data applications peer peer systems 
proceedings th vldb conference 
gupta agrawal el abbadi 
approximate range selection queries peer peer systems 
proceedings biennial conference innovative data systems research 
harvey jones saroiu theimer wolman 
skipnet scalable overlay network practical locality properties 
usenix symposium internet technologies systems 
karger kaashoek stoica morris balakrishnan 
chord scalable peer peer lookup service internet applications 
proceedings acm sigcomm conference pages 
knuth 
art computer programming volume 
addison wesley professional 
lee kitsuregawa ooi 
tan 
self tuning data placement parallel database systems 
proceedings acm sigmod international conference management data pages 
lehman carey 
study index structures main memory database management systems 
proceedings th vldb conference pages 
ng shu 
tan 
efficient range queries fast lookup services scalable networks 
proceedings nd international workshop databases information systems peer peer computing pages 
litwin 
neimat schneider 
rp family order preserving scalable distributed data structures 
proceedings th vldb conference 
ratnasamy francis handley karp shenker :10.1.1.140.3129
scalable network 
proceedings acm annual conference special interest group data communication pages 
rowstron druschel :10.1.1.28.5987
pastry scalable distributed object location routing largescale peer peer systems 
proceedings th ifip acm international conference distributed systems platforms pages 
gupta agrawal el abbadi 
peer peer framework caching range queries 
proceedings th international conference data engineering 
zhao kubiatowicz joseph :10.1.1.111.1818
tapestry infrastructure fault tolerant wide area location routing 
technical report csd univ california berkeley ca apr 
