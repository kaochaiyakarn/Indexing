crb tree efficient indexing scheme range aggregate queries pankaj agarwal lars arge department computer science duke university durham nc gsat pankaj large cs duke edu 
propose new indexing scheme called crb tree efficiently answering range aggregate queries 
range aggregate problem defined follows set weighted points compute aggregate weights points lie inside dimensional query rectangle 
focus range count sum avg aggregates 
develop indexing scheme answering dimensional range count queries uses disk blocks answers query log os number input points disk block size 
optimal index structure range count problem 
index extended obtain near linear size structure answering range sum queries log os 
obtain similar bounds rectangle intersection aggregate queries input set weighted rectangles query asks compute aggregate weights input rectangles overlap query rectangle 
result immediately improves result temporal aggregate queries 
indexing scheme extended higher dimensions 
demonstrate practical efficiency index comparing performance kdb tree 
dataset points crb tree query time times faster kdb tree query time 
furthermore indexing schemes query performance crb tree oblivious distribution input points placement shape size query rectangle 
order successful data model large database requires efficient external memory secondary storage support language features 
range searching variants problems need solved efficiently 
line analytical processing olap spatial databases geographic information systems gis applications range aggregate queries range count range sum play extremely important role large number algorithms indexing structures proposed answer queries see 
rapid increase data warehouses collect historical information authors supported army research office muri daah nsf itr eia eia ccr israeli binational science foundation 
third author supported national science foundation ess eia ri eia career ccr itr eia 
calvanese 
eds icdt lncs pp 

springer verlag berlin heidelberg agarwal arge temporal aggregate queries received attention years 
general answering temporal bi temporal aggregate queries harder traditional aggregate queries data point associated time interval attribute values valid query calls computing aggregate points valid query time interval 
optimal indexing scheme answering range count queries 
index extended efficiently answer multidimensional queries 
efficiently answer important temporal aggregate queries index 
model 
set points weight function 
wish build index efficiently answer range aggregate queries compute aggregate weights points lie inside dimensional query rectangle focus range aggregate queries range count sum avg 
examples call computing respectively see 
study general problem set rectangles query dimensional rectangle goal compute aggregation set input rectangles overlap query rectangle see ii 
refer problem aggregate problem 
problem arises naturally massive set points replaced set rectangles weight rectangle average weight data points inside rectangle input set complex objects object replaced minimum bounding box 
temporal range aggregate problem studied set time intervals goal compute aggregation set intervals intersect query rectangle see iii 
range aggregate problem special case temporal range aggregate problem turn special case aggregate problem 
main interest minimizing number disk blocks index number disk accesses answer query consider problem standard external memory model 
model assumes disk access transmits contiguous block units words data single input output operation 
efficiency index measured terms amount disk space uses measured units disk blocks number os required answer query ii iii fig 

range aggregate query ii rectangle intersection aggregate query iii temporal range aggregate query 
crb tree efficient indexing scheme range aggregate queries construct index update index 
minimum number disk blocks need store points refer linear size 
assume size internal memory integer stored single word word store log bits bit accessed individually 
assumption reasonable computational model important space query efficient index 
related 
lot spatial database community indexing set points answering range queries 
indexing schemes numerous variants kdb trees trees external priority search trees proposed see surveys 
kdb tree uses disk blocks answer range aggregate query os 
worst case bound query performance tree known 
tao proposed ap tree uses log disk blocks answers range aggregate query log os 
temporal aggregation included temporal languages flurry activity answering temporal aggregate queries 
early results including yang widom proposed indexing scheme called sb tree stores set time intervals log disk blocks time interval aggregate keys valid time interval computed log os 
zhang proposed multiversion sb tree tree uses log disk blocks worst case answer temporal range aggregate query log os 
index answer range aggregate queries range count range sum log os 
sb tree tree support updates log os 
vast literature answering range aggregate queries olap systems data typically modeled multidimensional cube queries typically involve aggregation various cube dimensions :10.1.1.41.1205
data cube data model olap systems works data dense sense data dimensional data cube total cells distinct keys average dimension 
applications spatial databases data tends sparse data cube model 
range searching data structures internal memory model developed computational geometry see survey 
best known data structure range tree uses log space answer range aggregate query range sum log time 
chazelle developed compressed range tree data structure uses space called bit model word store log bits bit manipulated individually 
structure answer range count query log time 
structures subtraction answer queries 
compressed range trees extended range aggregate queries paying polylogarithmic overhead query time 
allow subtraction lower bound results chazelle semigroup model see precise definition model suggest structure answers range count query log time super linear storage 
results 
main result described section new indexing scheme called compressed range tree crb tree answering dimensional range count queries 
structure external version compressed range tree 
agarwal arge uses disk blocks answers query logb os bulk loaded logb os 
optimal indexing scheme range count problem model 
partial rebuilding scheme point inserted deleted log os 
section presents extensions basic structure 
adapt structure answering range sum queries logb os logb log disk blocks total weight input points 
answer range aggregate queries range max min log os 
extend index higher dimensions 
structure uses log disk blocks answers range count query log os bulk loaded log os 
similar bounds derived range aggregate queries 
result edelsbrunner overmars index answer rectangle intersection count resp 
sum queries affecting asymptotic bound 
temporal range aggregate queries special case rectangle intersection aggregate queries structure improves results zhang total weights points 
precisely answer temporal range aggregate query logb os logb log size index 
implemented dimensional crb tree section report results extensive experimental evaluation efficiency 
mainly interested linear size indexes compare performance crb tree kdb tree 
evaluated performance index structures synthetic tiger line data 
set experiments study query bulk loading performance datasets size ranging points 
experiments show query performance crb trees significantly better kdb trees 
data set points crb tree query time times faster kdb tree query time 
second set experiments compare query performance varying size shape query rectangle 
query performance crb trees independent shape size query rectangle query time kdb tree increases rapidly size query rectangle 
crb tree section describe compressed range tree crb tree indexing scheme answering dimensional range count queries 
structure external version internal memory structure due chazelle 
describe crb tree query procedure 
crb tree 
denote set points plane 
crb tree consists structures tree constructed coordinates internal node storing secondary structure normal tree constructed shows example crb tree points 
pv 
denote sequence points contained subtree rooted sorted non decreasing order coordinates 
set nv pv nv nv value secondary structure count number points pv belong child coordinates crb tree efficient indexing scheme range aggregate queries 
intuitively child vi maintain array jth entry nv stores count points points pv belong 
prefix sums determine number points pv belong coordinates 
storing prefix sums requires nv disk blocks lead space logb blocks 
store prefix sum array compactly nv logb blocks 
roughly speaking partition pv consecutive chunks compute prefix sums chunk level lth chunk child vi store number points chunks belong 
predecessor pv belong kth chunk pv 
desired count sum prefix sum till th chunk number points kth chunk belong coordinates 
preprocess chunk separately compute count os 
precisely consists arrays child index array civ prefix count array pcv 
vb children regard child index array civ dimensional array log bit entry nv points pv 
civ simply stores index bi subtree storing ith point pi pv pi stored leaf subtree rooted 
example iv civ third point pv belongs subtree 
bi log bits ith entry represent bi 
civ requires nv log bits stored nv log log nv log blocks 
log nv 
note entries civ fit block 
partition civ array chunks length store prefix sum chunk level pcv prefix count array 
regard pcv dimensional array rows columns entry storing word log bits 
pcv stores number points points pv belong pcv pi 
example iv pc points pv points belong 
pcv requires rb nv log words 
stored nv log disk blocks 
height log point stored leaf nv log 
total space nv log disk blocks 
bulk loading crb tree 
crb tree bulk loaded efficiently bottom level level 
construct leaves logm os sorting points non decreasing order coordinates 
sort points stored leaf non decreasing order coordinates get pv 
describe construct nodes secondary structures level constructed nodes level 
construct level node secondary secondary structure follows compute pv sorted coordinates merging pv pv vu children internal memory hold block time 
means compute pv single scan nv os 
recall civ contains index child containing pi 
order construct civ record index child point pv came 
way construct civ single scan agarwal arge iii ii fig 

crb tree set points 
ii tree coordinates leaf stores points 
iii tree coordinates leaf stores points pv pv pv pv pv iv secondary structure stored internal node child root stores points entries stored pc array nodes 
pcv resp 
pcv points resp 
points stored child vj root 
pv 
pcv contains number points points pv belong construct pcv single scan civ follows compute pcv scanning points pi 
maintain pcv pcv pcv internal memory 
initialize pcv initially set pcv pcv currently scanning pk civ increment pcv 
scanned pi store pcv pcv pcv disk 
number os construct level node secondary structure nv total number os build level 
construct crb tree logb os total 
answering queries 
query rectangle 
compute traversing top manner visiting logb nodes 
query procedure traverses paths paths root leaves containing respectively 
secondary structures paths answer query 
explain imagine associating interval iv node root iu entire axis interior node partition iv bx intervals 
associate ith interval ith child consider topmost node iv contains intervals associated child contains nearest common ancestor children lie intervals respectively 
shows intervals children root node root 
obviously 
answer query compute count secondary structure recursively visit children compute pv pv 
shown compute counts pv pv civ civ iv pcv civ civ civ crb tree efficient indexing scheme range aggregate queries recursively compute pv pv 
show compute count node os 
reach leaf compute pw os scanning points pv 
visit logb nodes need logb os answer query 
fig 

query rectangle input points drawn 
ij interval associated child vj root 

pv pv computed recursively pv pv computed root 
ii pv secondary structure root 
order compute count maintain variables visiting node traversal tree rank point pv coordinate rank point pv larger nv denote number points pv rank belong number entries entries civ store index coordinates lie range example pv array ii points points pv belong pv 
similarly 
pv 
see pv points pv shaded region child 
suffices describe maintain variables compute 

compute root logb os searching tree 
ranks points search terminates 
assuming computed node compute vj vj children vj follows 
vj rank point pv belongs coordinate vj vj 
problem maintaining reduces computing 
remains describe procedure computing os 
suppose 
civ pcv civ 
ii pcv civ pv agarwal arge procedure simply reads disk blocks storing pcv pcv civ civ respectively computes 

example calculate 
pc ci array ii pc 
pv array points eleven points belong pv 
theorem 
set points plane stored linear size index structure log os range count query answered log os 
crb tree structure dynamic slightly modifying logarithmic method arge 
omitting details obtain 
theorem 
set points plane stored linear size index structure range count query answered log os point inserted deleted log amortized os 
extensions section discuss various extensions crb trees 
main ideas extensions omit details 
range sum queries 
discuss extend crb trees answer range sum queries plane 
set points weight function 
weight point stored bits easily modify crb tree storing weights additional array similar ci storing prefix sum weights array similar pc 
focus case weights points vary considerably 
set log log log 
extend crb tree storing additional arrays wv lv secondary structure internal node btree 
wi pi ith point pi pv 
set si max log log log wi si log store wi array wv si bits continuous sequence bits 
wv requires si nv log log nv log bits log disk blocks 
wv plays role civ 
wv stored packed array need additional arrays lv determine index wv stores leftmost bit wi nv 
lv array length nv entry composed log log bits 
lv stores value si 
si log needs log log bits 
size lv nv log log log nv log log log disk blocks 
array length log blocks stores prefix sum lv section leftmost bit wi wv nv computed os 
stores prefix sum weights wv section nv compute sum weights points pi pw children details similar section omit conclude 
crb tree efficient indexing scheme range aggregate queries theorem 
set points weight function wi 
bulk load index log log log os uses log log disk blocks range sum query answered log os 
weight point requires bits size bulk loading bounds log respectively 
indexing higher dimensions 
crb tree extended answer queries constructing multi level tree structure follows 
focus range count queries 
set points set dimensional crb tree tree fanout built xd coordinates internal node associated subset pv stores secondary structure dimensional crb tree projection pv hyperplane xd 
recursion stops built dimensional crb tree fanout plane 
case secondary structure internal node stores arrays civ pcv entry keeps information 
dimensional crb tree internal node associate tuple wd wd wi node dimensional crb tree attached 
point pv wai child wi dimensional tree call ad child index sequence civ dimensional array nv rows columns 
row corresponding point pv stores child index sequence civ requires nv log nv log bits 
pcv stores prefix sum civ section 
total size log disk blocks constructed log os 
query rectangle 
query procedure td follows paths leaves corresponding points node paths procedure recursively visits dimensional stored reach node children count pw 
reduced answering query real value tuple 
count points pw coordinates child index sequence 
arrays civ pcv answer query efficiently 
omitting details conclude 
theorem 
set points rd bulk load index log os uses logd disk blocks answer dimensional os 
range count query log rectangle intersection aggregate queries 
crb trees extended answer rectangle intersection aggregate queries reduction edelsbrunner overmars transform rectangle intersection count queries range count queries omitting details result 
theorem 
set rectangles rd bulk load index log os uses logd disk blocks answer dimensional os 
range intersection count query log agarwal arge experimental results section report results extensive set experiments 
emphasis experiments size query time index provide experimental results range count queries 
mainly interested linear space indexes chose compare performance crb tree kdb tree tree uses log space 
full version provide experimental results sum queries 
implementation implemented crb tree tpie system developed duke 
tpie designed facilitate easy portable implementations efficient algorithms indexing structures consists set classes functions 
tpie system consists stream block oriented part 
stream oriented part user programs fed continuous stream elements efficient manner 
block oriented part external memory viewed collection blocks primitives manipulating blocks provided 
crb tree kdb tree implementation parts tpie 
nodes tree kdb tree implemented blocks 
stream oriented part efficiently implementing bulk loading algorithm indexes 
crb tree block size bytes allowed fanout maximum leaf size 
precise number blocks crb tree roughly estimated blocks base tree secondary structure arrays ci pc 
arrays ci implemented blocks 
implemented arrays entries needed compute count node loaded os loading blocks ci pc array 
query process uses os node os access secondary structure access node 
total number nodes accessed query procedure log query search corresponds root leaf paths true number nodes accessed query 
total number os performed query procedure log log log 
node kdb tree stores balanced binary tree height leaves children block size allowed fanout maximum leaf size 
number blocks kdb tree roughly estimated bulk load kdb tree top approach 
node kdb tree store count number points contained subtree children 
query process traverses kdb tree starting root 
node checks regions corresponding children intersects query region 
query process recurses region intersected query region accumulates count children region contained query region 
time minutes crb tree efficient indexing scheme range aggregate queries 
points millions crb tree kdb tree number 
points millions ii crb tree kdb tree fig 

comparison running time ii number os performed bulk loading crb tree kdb tree 
experiments evaluated performance crb tree synthetic tiger line data 
report number tpie os performed wall clock running time set bulk loading query experiments 
query bounds averages queries buffer cache flushed queries experiments performed dell workstation mhz piii processor mb main memory running freebsd 
physically machine gb main memory simulate real multi user database environment restricted main memory usage mb 
furthermore tpie configured maximum mb leaving rest memory operating system 
external memory consisted raid disk array gb scsi disks ibm 
uniformly distributed points 
set experiments performed uniformly distributed points range points generated independently choosing random value coordinates 
experiments performed data sets sizes ranging points 
query choose random square area equal area bounding box data set 
shows number os time taken bulk loading algorithm 
bulk loading time crb tree times slower kdb tree see mainly number blocks crb tree times larger kdb tree crb tree algorithm performs os kdb tree algorithm 
shows number os time taken query process 
query time crb tree independent dataset size significantly lower query time kdb tree 
datasets sizes experiments height crb tree 
total number os performed query 
explains fact query time remains constant experiments 
number nodes visited kdb tree query algorithm increases increase data size varies worst case query time os performed increases significantly varies 
agarwal arge time seconds 
points millions crb tree kdb tree number 
points millions ii crb tree kdb tree fig 

comparison running time ii number os performed querying crb tree kdb tree 
cpu utilization 
points crb tree kdb tree time seconds 
points ii crb tree kdb tree fig 

comparison percentage cpu calculations ii time perform os time query algorithm crb tree kdb tree 
see speedup ratio crb tree kdb tree significantly higher number os compared execution time ii 
reason follows total execution time composed components user cpu time time time spent performing os kernel cpu time 
crb tree query process spends significant time cpu calculations lots bit operations compared kdb tree query 
shows percentage time spent cpu calculations crb tree kdb tree query processes 
ii shows comparison time query processes 
see speedup time similar speedup number os ii 
tiger line data 
tiger line data set bureau census standard benchmark datasets spatial databases 
tiger line distribution consists cd roms data corresponding regions united states 
performed experiments point datasets corresponding data cd rom 
number points data sets shown 
shows result bulk loading query experiments tiger line datasets 
bulk loading time independent characteristics data sets bulk loading results similar results obtained uniformly distributed points 
query experiments randomly placed query square crb tree efficient indexing scheme range aggregate queries cd cd cd cd cd cd number points millions size mb fig 

points data sets extracted tiger line area equal area bounding box data set 
query performance crb trees similar uniformly distributed points base tree height experiments 
query time kdb tree hand increases significantly increase dataset size 
number 
points millions crb tree kdb tree number 
points millions ii crb tree kdb tree fig 

comparison number os performed bulk loading crb tree kdb tree ii querying crb tree kdb tree tiger line datasets number points millions 
investigated effect query rectangle characteristic query performance 
experiments performed largest data set tiger line 
performed query experiments query squares different sizes 
results experiments shown size query square characterized ratio area area bounding box input points 
size query square varied 
seen query time kdb tree increases rapidly increasing window sizes 
query time crb tree hand constant 
performed query experiments query rectangles query squares 
results experiments rectangles varying aspect ratio ratio length breadth rectangle shown ii 
area query rectangle fixed area bounding box input dataset aspect ratio varied 
seen query time kdb tree increases slightly query rectangle skinny high aspect ratio low aspect ratio 
reason kdb tree consists alternating splits dimensions skinny rectangle intersects nodes kdb tree square area 
expected query time crb tree constant 
clustered data 
order investigate influence input data distribution query performance structures performed experiments agarwal arge number window size crb tree kdb tree number aspect ratio number 
clusters ii iii fig 

comparison number os performed querying crb tree kdb tree largest tiger line data set varying size query square ii varying aspect ratio query rectangle 
iii shows comparison number os performed query synthetic clustered datasets artificial clustered datasets 
datasets consists points distributed evenly clusters cluster generated uniformly distributing points randomly oriented ellipse length width centered 
iii shows results experiments varied 
previously crb tree performance constant 
note crb tree query performance depend input data uniform skewed number os performed crb tree query procedure depends height tree distribution input data 
experimental 
experiments crb tree times space kdb tree takes times longer bulk load kdb tree query performance crb tree better kdb tree 
data set points crb tree query time times faster kdb tree query time 
furthermore query time crb tree depends height tree log 
independent distribution input points query characteristics constant range data set sizes experimentation 
query time kdb tree hand depends significantly size input dataset size query rectangle 
lesser extent query time kdb tree depends aspect ratio query window input point distribution 
acknowledgments 
authors har peled useful discussions procopiuc answering numerous questions related tpie system 

agarwal erickson 
geometric range searching relatives 
chazelle goodman pollack editors advances discrete computational geometry volume contemporary mathematics pages 
american mathematical society providence ri 
crb tree efficient indexing scheme range aggregate queries 
aggarwal vitter 
input output complexity sorting related problems 
commun 
acm 

arge 
external memory data structures 
abello pardalos resende editors handbook massive data sets pages 
kluwer academic publishers 

arge procopiuc vitter 
implementing efficient data structures tpie 
proc 
th annual european symposium algorithms pages 

arge 
efficient dynamic planar point location 
proc 
acm symp 
computational geometry pages 

chan ioannidis 
hierarchical cubes range sum queries 
proc 
th international conference large databases pages 

chazelle 
functional approach data structures multidimensional searching 
siam comput june 

chazelle 
lower bounds orthogonal range searching ii arithmetic model 
acm 

edelsbrunner overmars 
equivalence rectangle problems 
information processing letters 

gaede nther 
multidimensional access methods 
acm comput 
surv 

geffner agarwal abbadi 
dynamic datacube 
proc intl 
conference extending database technology pages 

harinarayan rajaraman ullman 
implementing data cubes efficiently 
proc 
acm sigmod intl 
conference management data pages 

kim kang kim 
effective temporal aggregation point trees 
database expert systems applications pages 

kline snodgrass 
computing temporal aggregates 
proc 
intl conference data engineering pages 

lee ling li 
hierarchical compact cubes range max queries 
proc th international conference large databases pages 

nievergelt widmayer 
spatial data structures concepts design choices 

sack urrutia editors handbook computational geometry pages 
elsevier science publishers north holland amsterdam 

robinson 
tree search structure large multidimensional dynamic indices 
proc 
sigmod conference management data pages 

tao papadias zhang 
aggregate processing planar points 
extending database technology pages 

tiger line tm files technical documentation 
washington dc september 


transparent parallel environment 
proc 
dags symposium parallel computation 

yang widom 
incremental computation maintenance temporal aggregates 
proceedings th international conference data engineering pages 

zhang gunopulos seeger 
efficient computation temporal aggregates range predicates 
proc 
principles database systems pages 
