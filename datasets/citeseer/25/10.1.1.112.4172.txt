comparison formalizations meta theory language variable bindings isabelle mcs le ac uk ambler ambler mcs le ac uk crole crole mcs le ac uk department mathematics computer science university leicester leicester le rh 
theorem provers reason formally programming languages various general methods formalization variable binding operators 
choices style formalization languages single theorem prover 
choice formalization affect easy difficult automated reasoning 
aim compare contrast formalizations termed de bruijn weak hoas full hoas typical functional programming language 
contribution detailed report formalizations survey related final comparative summary mention novel approach hybrid de bruijn hoas syntax 
theorem provers reason programming languages 
example ambler crole isabelle prove results small functional language pl formalizing isabelle hol 
key feature pl variable binding pervasive 
number methods form theoretical basis formalization variable binding operators setting occur particular choices formalization pl choice method big effect easy difficult automated reasoning pl detail hope automated proofs mirror informal mathematical proofs minimize difficulty proofs level infrastructure book keeping lemmas maximize genericity scalability 
aim compare contrast formalizations pl examining requirements case 
clearly extremely difficult objectively compare requirements different formalizations object level language 
contribution report experiences clearly possible hope findings useful working related areas wish informed choices pros cons formalizing variable binding 
proceed giving formalizations isabelle meta theory small core functional programming language 
types terms respectively nat lam case rec language type assignments big step evaluation value small step transitions operational semantics call byname rules appendix 
formalize type assignment evaluation natural big step transition single step operational semantics prove basic results determinacy operational semantics subject reduction run time type preservation progress lemma typed closed non values get stuck run time equivalence big small step evaluation 
properties standard quite elementary 
regarded benchmark core languages see example 
refer methods de bruijn weak hoas full hoas 
de bruijn method describing binding operators known 
exemplified isabelle library nipkow church rosser proofs see example :10.1.1.29.2672
method tackles standard problems renaming associated name handling concrete syntax 
de bruijn systems incur costs additional programming infrastructure notation unreadable 
higher order syntax hoas attempts deal problems 
known give details assume readers broadly familiar ideas 
note hoas precisely defined system number systems fit title appear 
ideas underlying hoas go back church appear martin theory arities 
basic idea meta language object language pl translated typically single variable binding construct usually function abstraction single definition infrastructure capture avoiding substitution notions variable renaming freshness names 
represent various binding operations object language 
particular object language altered need substantially re code infrastructure binding operations 
introduce non standard terminology 
meta language hoas full object level bound variables encoded meta level bound variables 
object level contexts encoded meta level contexts 
object level substitution encoded meta level conversion 
called weak third condition hold 
case substitution typically defined inductive relation object level 
carried study isabelle isabelle hol systems offer automation observations may apply tactics systems coq 
comparison system twelf complicated fact biased interactive theorem proving 
organized follows 
section report de bruijn formalizations isabelle hol 
section move weak hoas despeyroux approach calculus inductive constructions 
isabelle hol 
section restrict primitive isabelle language give full hoas encoding spirit lf :10.1.1.21.5854
section review related 
section summarize results comparisons mention novel approach hybrid de bruijn hoas syntax 
de bruijn method de bruijn notation standard technology implementation theorem provers systems represent manipulate syntax variable binding 
technology theorem prover represent reason object language variable binding 
approach successfully number authors see example :10.1.1.29.2672
pure form de bruijn notation variables expression free bound represented natural number indices 
reported pure form de bruijn notation represent functional programming language fragment pl isabelle hol reason operational semantics 
examining isabelle theories produced pl reveals strengths weaknesses de bruijn approach 
clear strength technology available shelf expressions represented elements inductive datatype exp operations substitution primitive recursive functions judgements inductively defined sets 
features supported packages isabelle hol 
hand weakness approach de bruijn notation differs considerably informal mathematical exposition 
difficult experience read expressions 
greater problem index assigned variable position relative corresponding binder case bound variables relative corresponding occurrence variable environment case free variables 
consequence operation alters relative position variables example swapping position variables typing environment substituting expression necessitates relabelling indices 
de bruijn encoding pl common theories sort dominated large number lemmas dealing relabelling indices 
lemmas book keeping aspect representation object language formalized 
alternative pure form de bruijn notation mixed form bound variables represented indices free variables explicit names 
variant form implementation isabelle 
language define datatype expressions datatype exp var var bnd bnd abs exp app exp exp fix exp zero succ exp case exp exp exp type var free variables type bnd bound variable indices declared type natural numbers 
var naturals simply way ensure countably infinite supply distinct free variables index computations 
proofs involving mixed form de bruijn notation dependent lemmas relabelling indices 
transfered 
free bound variables explicitly distinguished require functions transform free variable bound variable instantiate bound variable free variable possibly expression 
functions defined primitive recursion structure expressions types bind var bnd exp exp inst bnd exp exp exp standard presentation typing judgement uses explicit type environment coded list 
requirement feature specific de bruijn approach choice 
presentation advantage easy code tools available isabelle hol 
typing judgements env inductive definition 
particular rule type abstraction takes form env cons env inst var abs env abs predicates check nth free variable occur typing environment expression name fresh free variable 
task reasoning typing judgement quickly dominated quite routine lemmas freshness names 
proof subject reduction lemma big step evaluation relate typing substitution expression free variable cons env env env proof induction derivation typing uses second result states weakening admissible typing judgement env env cons env straightforward proof induction derivation typing runs problems choosing suitably fresh names variables introduced abstraction case 
proof technique overcomes difficulties mckinna pollack 
trick define second version typing judgement rule abstraction universal quantifier env cons env inst var abs env abs reader compare rule rule typeof abs section rule section addresses similar issue hoas 
premise states instantiated var type choices fresh variable specific choice 
develops theory relabelling free variables expression uses show versions typing judgement coincide 
key idea show typing judgements preserved bijective relabelling free variables particular preserved names free variables swapped 
cost terms programming infrastructure quite high mathematics relatively straightforward 
worth stressing approaches described section entirely compatible classical higher order logic purely definitional 
main tenets philosophy users hol isabelle hol new concepts possible defined representation involving concepts 
properties new concept derived properties underlying representation postulated axiomatically 
ensures consistency extension relative small core logic 
needed achieve done theorem prover 
axiomatic approach dispenses need prove derived properties rely external mathematical justification models consistency see section 
weak hoas method section explore despeyroux approach hoas leads formalization weak form hoas isabelle hol 
variable binders represented functions meta logic 
requires inductive datatype definition involving function types datatype exp abs exp exp app exp exp 
allowed source exp occurs negatively associated operator monotone 
introduce separate type variables explicit coercion variables expressions say datatype 
yields hol data type datatype exp var var abs var exp app exp exp fix var exp zero succ exp case exp exp var exp standard define translation function object language expressions meta logic object level binding captured function abstraction example lam abs var 
var 
operations involving variable binding renaming delegated meta level 
lemmas concerning de bruijn index manipulation required 
inductive framework choice representation set bound variables crucial 
despeyroux took set isomorphic natural numbers realize possibly infinite number bound variables 
var inductive set create called exotic terms 
terms type exp represent object level functional program translation function yield adequate representation 
fact exotic terms case analysis possible terms representing free variables var succ zero 
pointed set variables inductive closed exotic term produced 
fact calculus construction possible leave set variables completely unspecified parametric coq terminology 
formalization semantics programming language need infinite supply names bound variables 
contrary need name 
requirement set bound variables contains distinct elements 
isabelle hol types need non empty fact identify var set elements take exactly add axiom ar neq var 

var 
var clearly validated representation 
ensures kinds closed exotic terms despeyroux approach excluded 
primitive language hol contains description operator creates closed exotic terms abs 
rue var app var var note exotic terms constructively created intuitionistic version hol exotic terms ruled 
isabelle hol classical set theory introduce object level predicate traditionally called valid identifies class meta level terms representing programs write upper lower case characters second order terms respectively 
identification modulo extensionality built isabelle hol coq 
validity useful far provides induction principle second order terms 
prove substitution total relation general unprovable 
validity prove theory contexts 
weak hoas obviously extend second order binding 
consider third order operator callcc full hoas type exp exp exp exp clear 
hand formalize binding operators logical quantifiers operators process calculi 
instance polymorphic calculus type abstraction type tp exp exp polymorphic quantifier var tp tp 
substitutions weak hoas meta level functions source type var exp substitution expression expression rendered meta level conversion 
ideally seek primitive recursive definition directly applicable substitution evaluation semantics 
known possible valid var var valid 
var valid valid valid 
app valid 
var app ref valid 
valid 
abs valid 
abs var valid valid app valid app fig 

validity predicates valid valid abs abs traditional setting inductive definitions :10.1.1.38.9383
substitution implemented spirit inductive relation rules var subst var var subst var var subst subst app subst app app subst 
abs subst 
abs abs fact establishing functionality relation isabelle hol turns quite tricky 
getting appropriate elimination rule far immediate partly simplifier refines general elimination rule stemming fixed point definition free equality rewriting simplify higher types 
simply adding extensionality reasoner practical establish freeness constructors manually 
injectivity constructors fairly immediate distinctness needs rely var neq axiom 
established temporarily added simplifier correct elimination rules obtained 
proof functionality substitution simple structural induction 
proof substitution total relation requires validity condition functions operator 
comment point section 
typing key feature weak hoas approach object level context 
xn represented meta level context 
provides benefits illustrate examining typing judgements 
represent typing explicitly mentioning typing context follows 
consider rules typeof var var exp tp set exp tp bool app typeof abs abs typeof app extend representation function defining set isabelle assumptions 
xn 
clearly 
note encoding achieved introducing auxiliary predicate 
inductive predicate need axiomatize behavior faithfully encodes object level contexts 
particular functional 
enforced axiom unique 
meta reasoning need ensure axiom ex exists variable type unique ex object level context represented meta level context weakening contraction exchange come free 
essential notion provability constructive 
force proof proof assumption say tautology 
example classical proof abs 
var expression correspond object level term 
inversion usual provided elimination rule inductive definition need prove substitution preserves typing 
formalization directly inherited subst 
var mechanized proof mirrors informal induction substitution inversion typing appeal unique axioms base case 
issue manifest despeyroux induction principle generated appropriate contain base case free variables 
happen full hoas see section 
turns problem example formalizing progress lemma 
lemma holds closed expressions empty typing contexts 
contexts encoding implicit explicitly manipulated 
need introduce version typing additional argument read boolean flag signals context empty 
typing rules update flag initial default value false true 
rue var var exp tp bool set app app rue abs abs proven typing judgements equivalent straightforward derivation 
evaluation encoding operational semantics inductive relations bring new ideas 
note role substitution example exp exp set exp exp set elegant treatment linear context aim 
abs subst eval app app subst step app app abs clear properties substitution central proof involving evaluation infrastructure required weak hoas setting determinacy operational semantics evaluation fully automatic proof uses expected functionality substitution plus distinctness numerals 
cost cost 
similarly sos uses facts steps possible values specialized elimination rules 
subject reduction evaluation 
proof induction evaluation judgement uses expected elimination rules typing substitution lemma requires ex axiom time dynamic typing assumption needed 
applies subject reduction small step reduction 
progress lemma requires flagged type judgement get rid variable case 
need totality substitution fire rules need add validity condition 
full hoas alse valid value final approach consider way address full hoas system isabelle 
lf style expressions declared simply introducing appropriate signature data type exp tp kind term lambda abstraction example receives second order type exp exp exp give declaration 
app exp exp exp abs exp exp exp fix exp exp exp zero exp succ exp exp case exp exp exp exp exp crucial feature easily prove equivalent uniquely represented canonical long normal term built app abs zero succ case fix 
particular construct bound variables exotic term may arise 
course vital expressive power essentially simply typed calculus derivability strictly intuitionistic 
step back isabelle intuitionistic order logic 
relations typing evaluation inductively defined 
benefits left recursiveness show example typing relation note variable case left entirely implicit 
stress hol anymore order syntax exp tp bool eval exp exp bool app abs nat num case condition meta level replaces unique axiom weak hoas guarantee functionality contexts 
meta level substitution apparent encoding evaluation eval abs eval eval app eval fix ix eval fix note case application returns function abs object level reduction encoded application logical framework 
elegant known far object level reasoning typing evaluation clearly meta reasoning needs form case analysis induction 
way provide view relation typing partial inductive definition generalization inductive definitions definiens containing parametric hypothetical judgements 
rule predicate collection rule definitional reflection mgu proof theoretic device allows theories considered closed sense logic programming closed worlds provides convenient way perform judgements 
seen mother elimination rule endow meta logic rule elimination rules freeness equality data type inductive definition derived freeing user stating asserting theory 
known induction setting cause problems 
example paradoxes non termination logical framework arise higher order encoding relation seen inductive type corresponding strong elimination rule 
rule allows definition offending terms 
dramatic problems loss adequacy representation creation exotic terms come naive combination higher order induction principles impredicative systems axiom unique choice 
main challenge reintroduce form induction 
research shown way sense separate meta logic formalize object logic meta meta logic inductively reason meta logic 
miller mcdowell introduce meta meta logic intuitionistic logic augmented definitional reflection induction natural numbers 
inductive principles derived appropriate measures 
meta meta level reason object level judgements formulated second order logic 
prove consistency method showing enjoys cut elimination 
approach somewhat naive miller blur distinction meta meta meta logic formalize explicit logic judgements represent directly isabelle 
entails considering judgements sake study implemented rule definitional reflection assert elimination rules axioms 
directly definitions allowed miller approach due restriction cut elimination proof 
difference assert structural induction axiom class judgements 
example assert structural induction principle typing restricting sake space abs app fragment app abs note size limited straightforward induction size terms justified way 
consequence cut elimination result apply directly consistency automatically established 
way establish consistency axioms semantics discuss section 
robust implementation support automatically infer principles defined judgements 
possible modify ml code produces induction rules hol inductive definitions fact axioms simple manual modifications principles generated weak hoas 
place proof scripts tend shrink dramatically structure top level theorems alter required infra structure diminish 
fact comparable twelf proofs 
find subject reduction proven preliminaries 
determinism operational semantics need functionality substitution 
progress lemma standard typing judgement sufficient need totality substitution 
related literature large scale machine assisted proofs properties languages variable binding order encodings see example 
review papers try overcome problems order encodings form hoas 
distinguish main unrelated approaches integration hoas induction functional logical 
functional approach emphasis trying allow primitive recursive definitions functions higher type cf substitution function introduced subsection 
aim preserve adequacy representations allowing functional programming higher order terms 
suggested fragment ml miller realized simply typed case dependently typed case 
idea separate type theoretic level modal operator primitive recursive space encompasses functions defined case distinction iteration parametric function space members convertible terms built constructors 
interpretation modal operator terms functor categories providing alternative proof adequacy 
categorical semantics give sensible interpretation higher order induction principles 
gabbay pitts introduced novel approach issue set theory internal notion permutation variables :10.1.1.38.9383
yields primitive notion freshness name abstraction adequately encode object level syntax modulo conversion 
takes alternative route hoas intention manipulating names bound variables explicitly hoas induct manage certain point see reviewed 
set theory yields natural notion structural induction recursion equivalence classes expressions 
hand approach away focal points logical frameworks delegating object level substitutions environment maintainance 
ml programming language freshml construction geared meta programming applications 
fertility approach tested 
logical side twelf project built idea devising explicit meta meta logic reasoning inductively logical frameworks fully automated way 
constructive order logic quantifiers range possibly open lf object signature 
meta logic possible express inductively prove meta logical properties object logic 
adequacy encoding proof existence appropriate lf object guarantees proof corresponding object level property 
twelf date implementation theorem prover successfully hoas induction fully automated proofs non trivial results church rosser cut elimination testify 
particular results mentioned proven fully automated way infrastructure 
represents benchmark system aims hoas remarked twelf explicitly built non interactive system programmable tactics 
approach interactive briefly viewed section 
derivations mentioned proof checked pi editor automated tool code named iris development 
development honsell framework explicitly embraces axiomatic approach meta reasoning hoas 
consists classical higher order logic extended set axioms called theory contexts parametric hoas signature 
axioms include reification properties bound variables unsat asserts existence fresh names 
crucially higher order induction recursion schemata assumed principle induction terms type var exp consistency axioms functor categories left forthcoming 
main applications investigated far 
development formal theory strong late bisimilarity calculus 
implementation simply typed calculus studies properties considered 
particular proof totality substitution relies essentially axiom induction second order expressions axiom unsat required proof determinacy substitution playing role var neq extensionality axioms needed binding cases 
script follows confirming crucial interaction substitution bound variables 
authors weak hoas formalization calculus isabelle hol 
binding operators represented functions names processes processes 
channels messages names need object level substitution 
variables isomorphic natural numbers exotic terms excluded formedness inductive predicates analogous validity predicates providing structural induction principle 
shows honsell theory contexts principles monotonicity extensionality expansion proven axiomatized provided inductive characterisation set variables 
proof property quite intricate requires embedding order encoding 
due limited scope authors employ hypothetical judgements mentioned problems classical logic arise 
generally accepted hoas promising tool meta reasoning syntax binders 
representing bound variables expressions meta level bound variables statement theorems far closer established mathematical practice de bruijn notation representing object level environments meta level assumptions lead elegant proofs 
unfortunately currently shelf system supports hoas features formal verification languages variable bindings 
features include structural induction primitive recursion induction recursion interactive proofs combined powerful automatic provers re writers various kinds meta logics 
conclude summarizing benefits costs methodologies 
de bruijn method encodings purely definitional 
logic classical 
utilises supported inductive datatype packages recursion 
plain de bruijn notation unreadable 
proofs resemble informal mathematical practice 
operation requiring variable transposition requires tedious index relabelling significant book keeping infrastructure 
mixed de bruijn readable reduction relabelling infrastructure requires coercion functions free bound variables leads new infrastructure establish freshness names 
weakening typing judgement needs proved explicitly example case mixed de bruijn method pollack mckinna 
apply judgement involving environments 
infrastructure redone case case basis object level language 
definitional spirit developed novel hybrid approach syntax bridges gap concrete de bruijn notation hoas notation 
introduces binding operation abs exp exp exp abstractions written form abs 
meaning expressions reduced underlying de bruijn representation 
hoas form syntactic sugar 
expression translated freely back forth sugared version underlying representation 
derived basic properties expressions written hoas form example induction principle structure expressions derived 
proper var 
app 
abstr var abs predicates proper abstr rule exotic terms seen analogues despeyroux predicates valid valid state sufficiently advanced able prove results discussed 
focus ongoing research 
results proved determinacy evaluation single step reduction 
intend give full account idea forthcoming 
weak hoas method utilises inductive datatype package 
bound variables handled meta level 
provides limited form implicit context 
logic intuitionistic 
may deal exotic terms associated validity predicates 
infrastructure required concerns object level substitution defined inductive relation 
applications substitution needs proven function progress lemma totality appears require choice operator problematic see induction principle second order expressions 
hoffman fact shown principle unique choice ac 
troublesome hoas 
avoided system coq ac 
provable second order induction expressions assumed said hol 
description axiom entails ac generally classical typed set theories match weaker intuitionistic derivability hoas requires 
applies issue implicit management contexts forced hypothetical judgements inductive framework ineffective compared full hoas auxiliary new predicates introduced place need axiomatized order useful metareasoning 
example concise proof subject reduction full hoas relies representation exp simulated weak hoas encoding var 
ex 
sense agree approaches lessen power meta level cut rule reasoning tool 
adequacy representation judgement holds constructively 
hand pointed john harrison personal communication certainly possible realize intuitionistic version hol erase problems 
alas system immediately attainable inductive package heavily classical set theory 
full hoas method substitution captured meta level application beta conversion 
embedded implication full effect 
logic intuitionistic 
induction case analysis moved additional meta level ensure consistency 
straightforward level approach section uncertain 
difficult allow primitive recursion higher order syntax especially combine induction open terms 
support induction time 
simulation full hoas isabelle successful 
proofs subject reduction determinism operational semantics progress lemma resemble informal mathematical practice closely 
hard moved justification inductive principles course time effort 
summary practitioner wishes verify significant properties language variable binding machine assistance faced uncomfortable choices rely trusted labour intense order technology variants de bruijn adopt hoas approach 
case single framework endowed reasoning tools may require 
isabelle code described www mcs le ac uk isabelle compar html 
wish amy felty marino miculan having available coq proof scripts associated respectively 

aczel 
inductive definitions 
barwise editor handbook mathematical logic volume studies logic foundations mathematics chapter pages 
north holland amsterdam 

ambler crole 
mechanised operational semantics induction 
proceedings th international conference theorem proving higher order logics volume lecture notes computer science pages :10.1.1.29.2672
springer verlag 

de bruijn 
lambda calculus notation nameless dummies tool automatic formula manipulation application church rosser theorem 

math 

despeyroux felty hirschowitz 
higher order syntax coq 
dezani ciancaglini plotkin editors proceedings international conference typed lambda calculi applications pages edinburgh scotland apr 
springer verlag lncs 

despeyroux 
metatheoretic results modal calculus 
journal functional logic programming 

despeyroux pfenning sch rmann 
primitive recursion higher order syntax 
hindley editor proceedings third international conference typed lambda calculus applications tlca pages nancy france apr 
springer verlag lncs 

dowek felty herbelin huet murthy parent paulin mohring werner 
coq proof assistant user guide 
rapport techniques inria rocquencourt france 
version 

eriksson 
pi interactive derivation editor calculus partial inductive definitions 
bundy editor proceedings th international conference automated deduction pages nancy france june 
springer verlag lnai 

furio honsell marino miculan 
calculus inductive type theories 
theoretical computer science 

gabbay pitts 
new approach syntax involving binders 
longo editor proceedings th annual symposium logic computer science lics pages trento italy july :10.1.1.29.2672
ieee computer society press 


tutorial recursive types coq 
technical report rt inria institut national de recherche en informatique en automatique :10.1.1.29.2672


partial inductive definitions 
theoretical computer science july 

harper honsell plotkin 
framework defining logics 
journal association computing machinery jan 


full formalization pi calculus theory calculus constructions 
gunter felty editors proceedings th international conference theorem proving higher order logics tphols pages murray hill new jersey aug 

hofmann 
semantical analysis higher order syntax 
longo editor proceedings th annual symposium logic computer science lics pages trento italy july 
ieee computer society press 

honsell miculan axiomatic approach metareasoning systems higher order syntax 

submitted 

mcdowell 
reasoning logic definitions induction 
phd thesis university pennsylvania 

mcdowell miller 
reasoning higher order syntax logical framework 
acm transaction computational logic 
appear 

mckinna pollack 
lambda calculus type theory formalized 
jar 

miller 
extension ml handle bound variables data structures preliminary report 
informal proceedings logical frameworks bra workshop june 

miller 
unification simply typed lambda terms logic programming 
furukawa editor eighth international logic programming conference pages paris france june 
mit press 
:10.1.1.29.2672
nipkow 
church rosser proofs isabelle hol 
jar 
appear 

nordstr petersson smith 
programming martin type theory 
oxford university press 

paulson 
isabelle generic theorem prover 
springer verlag lncs 

pfenning 
computation deduction 
unpublished lecture notes pp 
revised may april may 

pfenning elliott 
higher order syntax 
proceedings acm sig plan symposium language design implementation pages atlanta georgia june 

pfenning sch rmann 
system description twelf meta logical framework deductive systems 
ganzinger editor proceedings th international conference automated deduction cade pages trento italy july 
springer verlag lnai 

berghofer higher order syntax induction isabelle hol formalizing calculus mechanizing theory contexts 
fossacs 
forthcoming 

sch rmann 
automating meta theory deductive systems 
phd thesis carnegie mellon university 
cmu cs 


machine assisted proof programming language properties 
phd thesis university pennsylvania aug 
object language tp lam lam tp var tp nat tp fix rec tp app nat tp nat nat nat tp case case eval lam lam lam eval case eval eval case step beta lam step app src case lam eval app rec eval fix rec case step fix rec rec case step case step step case case case fig 

static dynamic semantics step case src eval case 
