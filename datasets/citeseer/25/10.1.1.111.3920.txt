microhash efficient index structure flash sensor devices song lin dimitrios gunopulos walid dept computer science dept computer science engineering university cyprus university california riverside cs ac cy dg cs ucr edu propose microhash index efficient external memory structure wireless sensor devices 
prevalent storage medium flash memory 
index structure exploits asymmetric read write wear characteristics flash memory order offer high performance indexing searching capabilities presence low energy budget typical devices discussion 
key idea microhash eliminate expensive random access deletions 
implemented microhash nesc programming language tinyos operating system 
trace driven experimentation real datasets reveals index structure offers excellent search performance small cost constructing maintaining index 
improvements hardware design wide availability economically viable embedded sensor systems enable researchers nowadays sense environmental conditions extremely high resolutions 
traditional approaches monitor physical world include passive sensing devices transmit readings powerful processing units storage analysis 
wireless sensor devices hand tiny computers chip small coin credit card 
devices feature low frequency processor mhz significantly reduces power consumption small chip flash memory kb kb temporary local storage medium wireless radio communication chip sensors energy source set aa batteries solar panels 
multitude features constitute powerful devices network processing filtering aggregation 
large scale deployments sensor network devices emerged environmental monitoring seismic structural monitoring factory process automation large array applications 
long term deployments cheaper keep large window measurements situ generating site transmit respective information user requested demonstrated section 
example biologists analyzing forest usually interested long term behavior environment 
sensors required transmit readings sink querying node times 
sensors unattended store reading locally certain preconditions met sensors receive query radio requests respective data 
network storage conserves energy unnecessary radio transmissions increase sampling frequency data fidelity measurements reproducing actual physical phenomena prolong lifetime network 
currently deployment sensor technology severely hampered lack efficient infrastructure store locally large amounts sensor data measurements 
problem local ram memory sensor nodes volatile limited kb kb 
addition non volatile chip flash memory featured sensors limited kb kb 
limited local storage sensor devices expected change soon 
sensor devices rise hardware platform include chip flash memory supplements sensor megabytes storage 
flash memory number distinct characteristics compared storage media page typically written limited number times 
second pages written deleted entirety 
page deletion triggers deletion respec usenix association fast th usenix conference file storage technologies tive block kb kb block 
due fundamental constraints efficient storage management challenging task 
problem investigate efficiently organize data locally flash memory 
desiderata 
provide efficient access data stored flash time value equality queries generated user 

increase longevity flash memory spreading page writes uniformly available storage capacity diminish particular regions flash media 
propose microhash index serves primitive structure efficiently indexing temporal data executing wide spectrum queries 
note data generated sensor nodes unique characteristics records generated point time temporal records ii recorded readings numeric values limited range 
example temperature sensor record values decimal point precision 
traditional indexing methods relational database systems suitable take account asymmetric read write behavior flash media 
indexing techniques designed sensor nodes feature large flash memories rise sensor provide mbs storage 
microhash implemented nesc uses tinyos operating system 
contributions 
propose design implementation microhash novel index structure supporting equality queries sensor nodes limited processing capabilities low energy budget 

efficient algorithms inserting deleting searching data records stored flash 

describe prototype implementation microhash nesc demonstrate efficiency approach extensive experimental study atmospheric readings university washington great duck island study 
memory hierarchy section briefly overview architecture sensor node special focus memory hierarchy 
study distinct characteristics flash memory address challenges regards energy consumption access time 
sensors power aa solar external flash fast th usenix conference file storage technologies spi bus kbps mbps processor mhz sram kb kb onchip flash kb kb architecture typical wireless sensor 
system architecture architecture sensor node see consists microcontroller unit mcu interconnected radio sensors power source leds 
mcu includes processor static ram sram module chip flash memory 
processor runs low frequencies mhz reduces power consumption 
sram mainly code execution latest generation sensors yale mhz xyz node intel mhz www intel com inmemory sram buffering 
choice right energy source application specific 
sensors deploy set aa batteries solar panels 
sensor node long lifetime 
chip flash provides small non volatile storage area kb kb storing executable code accumulating values small window time 
larger external storage supplemented sensor serial peripheral interface spi typically devices 
example rise platform nodes feature larger chip flash memory provides sensor mbs storage 
external flash memory connected mcu serial peripheral interface spi operates fraction cpu frequency 
faster processor increase maximum throughput spi interface 
currently clear moore law apply size price sensor units hardware characteristics believe sensor nodes feature sram flash storage complex network processing applications increase memory potentially cpu demand 
overview flash memory flash memory prevalent storage media current sensor systems advantages including non volatile storage ii simple cell architecture allows easy economical production radio leds usenix association iii shock resistance iv fast read access power efficiency 
characteristics establish flash memory ideal storage media mobile wireless devices 
different types flash memory flash nand flash named logic gate respective storage cell 
nand flash newer generation flash memory characterized faster erase time higher durability higher density 
older type flash mainly code storage bios 
main advantage supports writes byte granularity opposed page granularity nand flash 
flash faster access time ns nand lacks characteristics density power efficiency 
rest focus characteristics nand memory type memory chip chip flash sensors including rise platform 
micron www micron com nand memory fastest growing memory market 
nand flash features number distinct constraints summarized 
read constraint reading data stored flash memory performed granularities ranging single byte block typically kb kb 

delete constraint deleting data stored flash memory performed block granularity kb kb 

write constraint writing data performed page granularity typically respective page respective kb kb block deleted 

wear constraint page written limited number times typically 
design microhash index structure section considers constraints 
access time nand flash table presents average measurements obtained series micro benchmarks rise platform hp constant power supply fluke rms 
observation reading orders magnitude power demanding writing 
hand block erases quite expensive performed faster operations 
note nand flash installed sensor node page read page write block erase ma ma ma time ms ms ms data rate kbps kbps mbps energy page erase write flash idle flash sleep ma ma ma time ms data rate kbps energy sec sec table performance parameters nand flash voltage page size kb block size read write operations involve transfer data mcu spi bus bottleneck time complete operation 
specifically reading writing flash media utilization spi bus achieved respectively 
results comparable measurements reported mica mote xyz sensor 
hardware details application logic needs aware characteristics order minimize energy consumption maximize performance 
example deletion page trigger deletion kb block flash memory 
additionally mcu re write rest unaffected kb 
objectives index design provide abstraction hides hardware specific details application 
energy consumption nand flash question cheaper write flash memory transmitting rf radio 
rise mote measure cost transmitting data kbps radio ma transmitting page takes average ms 
comparing required writing amount data local flash fact transmission byte roughly equivalent executing cpu instructions local storage processing highly desirable 
final question investigated bytes store local flash sensor runs energy 
note applies case sensor runs batteries 
double batteries aa current designs operate voltage supply current mah hours 
assuming similarly mah available current data logging calcu usenix association fast th usenix conference file storage technologies late aa batteries offer mah 
kb block size page size block delete page writes kb 
writing page measurements requires cost performing block erase 
writing kb requires write kb pages write cost block erase cost result equation derive utilizing offered batteries write gb running batteries kb 
interesting point absence wear leveling mechanism able accommodate gb exhausting flash media 
true solar panels provide virtually unlimited power source sensor device 
reason want extend lifetime flash media batteries sensor node replaced cases devices remain accessible 
problem definition section provide formal definition indexing problem microhash index addresses 
describe structure microhash index explain copes distinct characteristics flash memory 
denote sensor acquires readings environment seconds 
time instance sensor obtains temporal data record drec vx timestamp key tuple recorded vi represents value reading humidity temperature light 
pn denote flash media available pages 
page store finite number bytes denoted limits capacity pages logically organized blocks block block blockb block containing consecutive pages 
assume pages read page time basis page pi deleted respective block denoted deleted write delete constraint 
due wear constraint page written limited number times denoted wc 
microhash index supports efficient value equality queries efficient time equality range queries 
queries defined follows fast th usenix conference file storage technologies definition 
value equality queries aone dimensional query vi field values attribute vi equivalent value example query temperature find time instances ts recorded readings temperature 
definition 
time range equality queries range query dimensional query time attribute lower upper bound respectively 
equality query special case range query example query ts find tuples recorded second interval 
evaluating queries efficiently requires system maintains index structure generated data 
specifically node senses data environment data records creates index entries point respective data stored flash media 
node needs evaluate query uses index records quickly locate desired data 
number index records potentially large stored external flash 
maintaining index structures studied problem database community low energy budget sensor nodes unique read write delete wear constraints flash memory introduce new challenges 
order maximize efficiency design objectives follows 
wear leveling spread page writes uniformly storage media order avoid wearing specific pages 

block erase minimize number deletions deletion individual pages triggers deletion respective block 

fast initialization minimize size inmemory sram structures required order index 
microhash data structures section describe data structures created fast volatile sram provide efficient way access data stored persistent slower flash memory 
describe underlying organization data flash media describe involved memory data structures 
flash organization microhash uses heap organization records stored flash media circular array fashion 
usenix association allows data records naturally sorted timestamp organization sorted timestamp 
organization requires overhead sram data write page 
additionally show section organization addresses directly delete write wear constraint 
flash media full simply delete block idx 
organizations relational database systems sorted hashed attribute prohibitive cost sensor need continuously update written pages perform expensive random page write 
hand heap flash organization yields completely full data pages data records consecutively packed flash media 
memory sram data structures flash media segmented pages size 
page consists header payload 
specifically header includes fields illustrated bit page type typ identifier different types pages data index directory root 
ii bit cyclic redundancy checking crc polynomial payload integrity checking 
iii bit number records siz identifies records stored inside page 
fixed size records records generated sensor size 
iv bit previous page address ppa stores address page flash media giving way capability create linked lists flash 
bit page write counter pwc keeps number times page written flash 
header identical type page payload store different types information root page contains information related state flash media 
example contains position write idx current cycle cycle metainformation various indexes stored flash media 
ii directory page contains number directory records buckets contains address known index page mapped bucket 
order form larger directories directory pages chained bit ppa address header 
iii index page contains fixed number index records byte timestamp known data record 
field denoted anchor exploited timestamp searches informed decision page follow 
additionally evaluate alternative index record layouts 
denoted offset layout maintains data record typedef struct page uint typ uint crc uint pwc uint siz uint ppa union attribute packed typedef struct typedef struct optional anchor timestamp ts uint data val records attribute packed attribute packed typedef struct typedef struct records drec optional offset attribute packed offset attribute packed main data structures nesc implementation microhash index 
respective pageid offset second layout denoted maintains pageid respective data record 
iv data page contains fixed number data records 
example record size page contain consecutively packed records 
indexing microhash microhash index efficient external memory structure designed support equality queries sensor nodes limited main memory processing capabilities 
microhash index structure consists substructures directory ii set index pages 
directory consists set buckets 
bucket maintains address newest chronologically index page maps bucket 
index pages contain addresses data records map respective bucket 
note arbitrarily large number data index pages 
pages stored flash media fetched main memory requested 
microhash index built data acquired environment stored flash media 
order better describe algorithm divide operation conceptual phases initialization phase root page certain parts directory loaded sram growing phase data index pages sequentially inserted organized flash media repartition phase index directory re organized directory buckets highest hit ratio remain memory deletion phase triggered garbage collection purposes 
initialization phase phase microhash index locates root page flash media 
current design root page written specific page flash page 
page worn recursively available page 
blocks pre allocated flash media storage root pages 
root usenix association fast th usenix conference file storage technologies page indicates type indexes available system addresses respective directories 
application requires utilization index system pre loads part directory sram detailed discussion follows section 
root directory pages remain sram efficiency periodically written flash 
growing phase assume sensor generates temporal record drec vx seconds timestamp record generated vi distinct reading humidity temperature 
writing drec directly flash memory sram buffer page write write gets full flushed address idx denotes address page write 
note idx starts zero counter incremented time page written 
idx equal size flash media reset zero 
order provide mechanism finding relative chronological order pages written flash media maintain counter cycle incremented time idx reset zero 
combination cycle pageid provides mechanism 
describe index records generated stored flash media 
index records structure generated write gets full 
point safely determine physical address records write idx 
create index record ir idx offset data record write drec write 
example assume insert byte timestamp value records empty microhash index 
trigger creation index records 
write written address idx index records data records smaller cycle pageid identifier 
microhash directory provides start address index pages 
constructed providing parameters lower bound lb indexed attribute upper bound ub indexed attribute number available buckets note fit certain number directory buckets memory 
example assume index temperature readings collected known discrete range set lb ub 
initially bucket represents exactly lb ub consecutive values equal splitting call splitting refined repartition phase data values collected run time 
directory fast th usenix conference file storage technologies directory repartition phase 
repartition phase index pages evicted flash drawback initial bucket splitting approach buckets may rarely may create long lists index records 
overcome problem splitting policy directory bucket links records user parameter evict flash bucket longest period time 
note mechanism implemented counters bucket timestamp number records 
addition eviction page create new bucket 
objective provide finer granularity entries bucket congested 
note values reassigned happen dynamic hashing techniques extendible hashing linear hashing 
reason index pages flash media updating pages result potentially large number random updates extremely expensive 
equidepth bucket splitting approach keeps memory finer intervals index records frequently 
shows bucket associated counter indicates timestamp time buffer counter indicates number index records added split 
example value bucket exceeds threshold index forces bucket flash media bucket split 
note list contains values list contains values range 
deletion phase phase index performs garbage collection operation flash media order space new data 
phase triggered pages written flash media 
operation blindly deletes pages block starting idx 
triggered pages written number blocks flash media 
leaves index clean pages usenix association writes 
note leave pointers index pages referencing data deleted 
problem handled search algorithm described section 
distinct characteristic garbage collection operation satisfies directly delete constraint pages deleted blocks cheaper deleting page time 
different similar operations flash file systems perform page time deletions 
additionally mode provides capability blindly delete block need read relocate deleted data 
correctness operation established fact index records data records smaller cycle pageid identifier 
index page deleted sure associated data pages deleted 
searching microhash section show records efficiently located value timestamp 
searching value problem consider perform equality queries 
finding records value involves locating appropriate directory bucket system extract address index page reading respective index pages page page basis reading data records referred index pages page page basis 
sram extremely limited sensor node adopt record time query return mechanism records reported caller record record basis 
mode operation requires available pages sram directory reading occupies kb 
sram available results returned granularities 
complete search procedure summarized algorithm 
note procedure line returns null fetched page valid chronological order respect preceding page data records data pages specified bucket range 
consequence way garbage collector operates update index records deletions performance reasons 
simple checks applied ensure safely terminate search point 
microhash index returns records time basis final signal finished notifies application search procedure completed 
algorithm input value query search predicate 
output records contains value 
procedure value bucket hash value address bucket address null size null address break record offset value signal record offset address ppp signal finished procedure searching timestamp section investigate time equality range queries 
note index pages stored separate physical location interleaved data pages sorted timestamp file organization allow access data record time 
violate wear leveling mechanism wouldn able spread page writes uniformly data index pages 
approach deploy memory address translation table hide details wear leveling mechanism 
structure big memory constraints sensor node delay sensor boot time 
efficient search supported number different techniques 
popular technique perform binary search pages stored flash media 
allow search logn time size media 
large values strategy expensive 
example mb flash media page size need approximately page reads find expected record 
approach investigate binary search variants named 
starts setting pessimistic lower bound page examine recursively refines lower bound requested page 
hand exploits knowledge underlying distribution data index pages order offer aggressive search method usually executes faster 
superior data index pages roughly uniformly distributed flash media performance deteriorates skewed distributions 
usenix association fast th usenix conference file storage technologies ts ts lb lb lb anchors shift tq shift lb anchors scale anchors lb lb tq tq lb shift scale lb lb anchors tq tq lb searching timestamp 
ts oldest timestamp te newest tq query timestamp lb lower bound obtained 
remainder section assume sensor maintains locally indexed readings interval ta tb 
denote pair smaller respectively greater record timestamp tq follows approaches starts setting lower bound tq ts tq ts idx fast th usenix conference file storage technologies cycle tq ts 
idx address written page constant indicating maximum number data records page 
deploys ts procedure illustrated algorithm 
easy see recursion step moves clockwise increasing time order algorithm anchors input tq query timestamp current search address output page contains tq 
procedure tq current age current age logical right shift return tq current record ts record ts tq return return tq current tq procedure important note lower bound estimated fetched page step recursion contains timestamp value 
discussion far assumes pages carry timestamp data pages contain sequence data records ts val ts val 
case shift right data page located 
experiments noted deficiency add cases additional page reads 
order correct problem store known timestamp inside index page named anchor 
ii index pages uniformly spread flash media aggressive search strategy effective 
technique deployed microhash step tq ta idx cycle tb ta tq ts tq ta idx 
tb ta order refine search 
note fact larger case need move counterclockwise decreasing time order 
performing timestamp range query tq simple extension equality search 
specifically perform upper bound tq sequentially read backwards 
note data pages chained reverse chronological order data page maintains address previous data page operation simple 
search optimizations basic microhash approach index pages flash fully occupied 
incurs significant performance penalty somebody performs search value system read memory pages necessary 
section alternative methods alleviate performance penalty 
method named elf chaining elc eliminates non full index pages result decreases number pages required answer query second method named phase read minimizes number bytes transferred flash media 
elf chaining elc microhash index pages chained backpointer illustrated named microhash chaining 
inspired update policy elf filesystem investigate experimentally evaluate elf chaining elc mechanism 
objective elc create linked list usenix association 
microhash chaining copy copy 
elf chaining index chaining methods microhash chaining elf chaining 
node node completely full 
achieved copying non full index page newer page new index records requested added index 
procedure continues index page full point updated 
better understand techniques consider scenario see index page flash denoted pi contains index records ir ir scenario map directory bucket suppose create new data page flash position pi 
triggers creation additional index records scenario map bucket microhash chaining mhc buffer manager simply allocates new index page keeps sequence ir ir irl memory lru replacement policy forces page written 
assuming new index sequence forced memory pi back pointed pi shown 
elf chaining elc buffer manager reads pi memory augments new index records ir irl 
pi updated due write wear constraint buffer manager writes new sequence flash media pi 
note pi page utilized block delete guided idx pointer erases 
optimal compaction degree index pages elc significantly improves search performance index required iterate partially full index pages 
worse case elc introduce additional page read indexed data record 
additionally observed experiments section elc requires average space typical microhash chaining 
worst case space requirement elc double requirement mhc 
consider scenario discussion 
time assume buffer manager reads pi memory copy 
copy copy size size copy size sequential elc 
augments size full page new index records shown 
evict pi new address scenario pi 
additional records buffer 
assume size pages point evicted memory new flash position scenario pi 
far utilized pages pi pi pi index records fit index pages size records size 
scenario repeated say elc suffers sequential elc require double required space accommodate index records 
phase page reads discussion far assumes pages read flash media page page basis usually page 
pages fully occupied index pages lot empty bytes padding transferred flash media memory 
order alleviate burden exploit fact reading flash performed granularity small single byte 
specifically propose deployment phase page read mcu reads fixed header flash phase reads exact amount bytes phase 
experimentally evaluated performance phase reads versus single phase reads rise sensor node approach significantly minimizes energy consumption 
experimental methodology section describe details experimental methodology 
experimental testbed implemented microhash tiny lru nesc programming language tinyos 
tinyos open source operating system designed wireless embedded sensor nodes 
initially developed uc berkeley deployed successfully wide range sensors including rise mote 
tinyos uses component architecture enables programmers wire usenix association fast th usenix conference file storage technologies 
demand basis minimum required components 
minimizes final code size energy consumption sensor nodes extremely power memory limited 
nesc programming language tinyos realizes structuring concepts execution model 
implementation consists approximately lines code requires kb sram 
specifically page write buffer pages reading index page data page page indexing buffer directory final page root page 
order increase insertion performance index page compactness supplement additional index buffers kb kb 
write library simulates flash media operating system file order run code simulation environment tinyos 
additionally wrote library intercepts messages communicated tinyos flash library prints various statistics final library visualizes flash media bitmap representations 
energy modeling power modeling extension 
order simulate energy behavior rise sensor extended power added annotations microhash structure accurately provide information power states change environment 
focused attention precisely capturing flash performance characteristics opposed capturing precise performance frequently modules radio stack chip flash 
power model follows detailed measurements rise platform summarized mhz core operating current consumption ma ma idle 
utilize mb flash media page size block size kb 
current read write block delete ma ma time read states ms ms ms 
parameters performed extensive empirical evaluation power model useful quite accurate tool modeling energy simulation environment 
example measured energy required store mb raw data rise mote operation requires mj operation simulation environment returned mj error 
average provided accuracy 
dataset descriptions fast th usenix conference file storage technologies measure environmental conditions temperature humidity simulation environment adopt trace driven experimental methodology real dataset fed simulator 
specifically datasets washington state climate real dataset atmospheric data collected department atmospheric sciences university washington 
mb dataset contains readings minute basis january february 
readings recorded weather logging station washington include barometric pressure wind speed relative humidity cumulative rain 
readings typically measured sensor nodes index temperature pressure readings rest readings part data included record 
note realistic assumption sensor nodes may concurrently measure number different parameters 
great duck island gdi real dataset habitat monitoring project great duck island maine 
readings nodes spring deployment included readings light temperature thermopile thermistor humidity voltage 
dataset includes approximately readings recorded october november 
experimental evaluation section extensive experiments demonstrate performance effectiveness micro hash index structure 
experimental evaluation described section focuses parameters space overhead maintaining additional index pages ii search performance defined average number pages accessed finding required record iii energy consumption indexing data records 
due design microhash index page written exactly cycle 
need experimentally evaluate wear leveling performance 
overhead index pages series experiments investigate overhead maintaining additional index pages flash media 
reason define overhead ratio follows ages investi gate parameter increasing buffer size increasing data record size 
usenix association space overhead index index data space overhead index index data index space overhead ratio varying buffer size fixed record size index temperature offset index temperature index pressure offset index pressure buffer size kb index space overhead ratio varying record size fixed kb buffer index temperature offset index temperature index pressure offset index pressure record size ts attribute bytes space overhead index pages varying buffer size varying record size 
evaluate different index record layouts offset index record form pageid offset index record form pageid 
year timeseries washington state climate dataset index data records temperature pressure attribute 
data record time instances bytes timestamp readings 
increasing buffer size top presents results varying buffer 
shows cases larger buffer helps fitting index records page linearly reduces space overhead 
pressure temperature case index record layout significantly reduces space overhead information required stored inside index record 
shows indexing pressure achieves lower overhead 
attributed fact pressure changes slower temperature time 
leads fewer evictions index pages indexing phase consequently increases index page occupancy 
kb buffer suffices achieve occupancy index pages 
increasing data record size sensor nodes usually deploy wide array sensors photo sensor magnetometer accelerometer 
data record size time instance larger minimum size timestamp data value 
bottom presents results varying data record size 
shows cases larger data record size decreases space overhead proportion 
expensive store larger data records flash 
searching timestamp experimental series investigate average number pages read order find record timestamp 
search timestamps selected uniformly random available year range calculate average number pages read 
note index data records flash find expected record time manipulate position record directly 
violate wear leveling mechanism 
evaluate proposed search timestamp methods different index page layouts anchor index page stores known data record timestamp index page contain timestamp information 
shows results washington state climate dataset index temperature top index pressure bottom 
figures show anchor inside index pages choice usually reduces number page reads significant space overhead additional bytes 
figures show superior exploits uniform distribution index pages flash media 
allows get closer result step algorithm 
figures show time window query quite large years mb able find record timestamp approximately page reads 
page read takes ms operation requires rise model ms 
searching value microhash chaining vs elf chaining cost searching particular value flash media linear respect size flash usenix association fast th usenix conference file storage technologies pages read page size pages read page size search timestamp performance index temperature anchor anchor buffer size kb search timestamp performance index pressure anchor anchor buffer size kb search timestamp performance microhash index 
dia 
simple linear scan thousands pages mb flash media result overwhelming large search cost 
factor significantly affects search performance occupancy index pages 
basic microhash approach index pages flash fully occupied 
index pages fully utilized search require iterating pages necessary 
section perform experimental comparison index chaining strategies section 
evaluate microhash chaining mhc elf chaining elc fixed kb buffer 
deploy chaining methods temperature utilized index obtained similar results pressure 
evaluation parameters indexing performance pages written search performance pages read 
top shows mhc requires page writes elc 
reason elc strategy results sequential characteristic section 
additionally elc requires large number page reads order replicate index records 
elc total plot essentially shows requires page reads page writes order index records 
hand elc strategy results linked lists fully occupied index pages mhc 
result improved search perfor fast th usenix conference file storage technologies pages number page reads data index insertion performance elc vs mhc chaining histogram mhc writes elc writes elc total read write temperature search performance elc vs mhc chaining histogram temperature mhc index read mhc total read elc index read elc total read comparing microhash chaining mhc elf chaining elc insertion performance searching performance value 
mance system required fetch index pages search 
observed bottom number index pages read total number pages index data 
hand observe elc reduces read gain 
happens reading data page dominates reading cost 
searches frequent advantage elc appropriate counterpart mhc 
great duck island trace experimental series index measurements great duck island study described section 
study allocate fixed kb index buffer mb flash media adequate space store byte data readings 
run index specific attribute light temperature thermopile thermistor humidity voltage 
record overhead ratio index pages energy required flash media construct index average number page reads required find record timestamp 
omit search value results due lack space results similar previous subsection 
usenix association index overhead energy attribute ratio index mj page reads light temperature thermopile thermistor humidity voltage table performance results indexing searching great duck island dataset 
table shows index pages require space flash media 
readings change frequently humidity observe overhead low 
table shows indexing records small increase energy demand 
specifically energy cost storing records flash index mj average mj index 
maintaining index records impose large energy overhead 
table shows able find record timestamp page reads average 
related lot area query processing network aggregation data centric storage sensor networks 
best knowledge addresses indexing problem sensor nodes flash memories 
large number flash file systems proposed years including linux compatible journaling flash file system virtual file allocation table vfat windows compatible devices flash file system specifically designed nand flash portable linux windows ce 
file system sensor nodes provided integral part tinyos distribution 
efficient log structured flash file system elf shows offers advantages including higher read throughput random access timestamp 
filesystems embedded microcontrollers utilize flash storage medium include transactional flash file system 
main job file system organize blocks storage media files directories provide transaction semantics attributes 
filesystem support retrieval records value approach 
tree tree index structure flash memory portable devices pda cell phones proposed respectively 
structures memory address translation table hides details wear leveling mechanism 
structure large footprint mb constitutes inapplicable context microcontrollers limited sram 
wear leveling techniques reported flash card vendors 
techniques executed microcontroller located inside flash card 
wear leveling techniques executed mb zones local global case microhash 
main drawback local wear leveling techniques writes longer spread uniformly available pages 
techniques assume dedicated controller techniques executed microcontroller sensor device 
systems tinydb cougar optimized sensor nodes limited storage relatively shorter epochs techniques designated sensors larger external flash memories longer epochs 
note tinydb users allowed define fixed size materialization points storage point clause 
allows sensor gather locally buffer readings utilized materialization point created entirety 
storage store mbs data absence efficient access methods retrieval desired values expensive 
propose microhash index efficient external memory hash index addresses distinct characteristics flash memory 
provide extensive study nand flash memory storage media sensor device 
design serve applications including sensor vehicular networks generate temporal data utilize flash storage medium 
expect proposed access method provide powerful new framework cope new types queries temporal top addressed adequately date 
experimental evaluation real traces environmental monitoring show structure propose efficient practical 
joe polastre uc berkeley providing great duck island data trace victor usenix association fast th usenix conference file storage technologies harvard help environment 
mitra banerjee uc riverside assistance rise micro benchmarks 
shepherd andrea arpaci dusseau anonymous reviewers numerous helpful comments 
supported nsf itr 
banerjee mitra gunopulos rise high performance sensor storage processing architecture ieee santa clara ca usa appear 
dai neufeld han elf efficient log structured flash file system micro sensor nodes sensys baltimore pp 

levy designing flash memory publisher 
fagin nievergelt pippenger strong extendible hashing fast access method dynamic files acm tods vol pp 

gal toledo transactional flash file system microcontrollers usenix anaheim ca pp 

gay levis von behren welsh brewer culler nesc language holistic approach networked embedded systems acm pldi san diego pp 

hill szewczyk woo hollar culler pister 
system architecture directions networked sensors asplos cambridge ma pp 

levis lee welsh culler accurate scalable simulation entire tinyos applications acm sensys los angeles ca 
litwin linear hashing new tool file table addressing vldb 
xyz motion enabled power aware sensor node platform distributed sensor network applications ipsn los angeles pp 

fast th usenix conference file storage technologies madden franklin hellerstein hong design query processor sensor networks acm sig mod san diego ca usa pp 

madden franklin hellerstein hong tag tiny aggregation service ad hoc sensor networks osdi boston ma pp 

sadler zhang martonosi lyon hardware design experiences zebranet acm sensys baltimore pp 

chen werner allen welsh simulating power consumption large scale sensor network applications acm sensys pp 

szewczyk mainwaring polastre anderson culler analysis large scale habitat monitoring application acm sen sys baltimore md pp 

yao gehrke query processing sensor networks cidr asilomar ca usa 
flash file system red hat available sources redhat com pdf filesystem designed nand flash linux leeds ramakrishnan gehrke database management systems mcgraw hill third edition 
flash memory cards wear leveling october white available com pdf oem pdf live earth mars project university washington seattle atmos washington edu wu chang kuo efficient rtree implementation flash memory storage systems taiwan pp 

wu chang kuo efficient tree layer flash memory storage systems new orleans pp 

xu ganesan broad govindan estrin wireless sensor network structural monitoring sensys baltimore md pp 

usenix association 
