conversion non binary binary constraint satisfaction problems fahiem bacchus department computer science university waterloo waterloo ontario canada logos uwaterloo ca known non binary discrete constraint satisfaction problem csp translated equivalent binary csp 
translations known dual graph translation hidden variable translation 
little theoretical experimental backtracking algorithms perform binary representations comparison performance corresponding non binary csp 
theoretical empirical results help understand tradeoffs involved 
particular show translating non binary csp binary representation viable solution technique certain circumstances 
ultimate aim research give guidance consider translating non binary binary representations 
results supply initial answers question 
lion share constraint satisfaction problems csps restricted attention binary csps constraints variables 
generated great deal knowledge theory practice solving csps 
unfortunately straightforward generalize knowledge non binary csps 
known fact non binary discrete csp converted equivalent binary csp usually justification restricting attention binary csps 
implicitly assumption faced nonbinary csp simply convert binary csp apply best techniques solving binary equivalent 
field completely ignored issue nonbinary csps constraint programming traditional csp communities addresses direct solution techniques nonbinary csps 
particular successful techniques solving binary problems backtracking combined forward checking backtracking combined arc consistency generalized non binary case mac vh 
options comes dealing non binary csps apply standard copyright american association artificial intelligence www aaai org 
rights reserved 
peter van beek department computing science university alberta edmonton alberta canada cs ualberta ca translations convert binary csp solve binary csp techniques apply direct solution techniques non binary csps 
potential advantage translating binary known solving binary csps useful heuristics known polynomial time special cases identified algorithms known hand unknown techniques useful applied csps arise translating nonbinary csps 
surprisingly little done examining effectiveness translation technique comparing options 
addresses problem 
reasons looking carefully issue translating non binary csps binary csps 
non binary csps appear quite frequently modeling real problems 
case issue solve problems efficiently show certain cases translating binary produces significant performance gains cases produces degradation performance 
second reason noted common justification focusing solely binary csps fact non binary csps translated binary csps 
important study properties translations better understand legitimacy focusing binary case 
general methods known converting nonbinary csps binary csps dual graph method hidden variable method 
dual graph representation comes relational database community introduced csp community dechter pearl dp 
earlier freuder fre incremental version method algorithm finding solutions csp 
hidden variable translation longer history 
rossi 
rpd credit peirce pei showing binary relations expressive power non binary relations 
peirce method representing non binary relations collection binary relations forms foundation hidden variable method 
dechter dec shows represent nonbinary relation binary relations hidden variables example algorithms minimal forward checking dm lazy arc consistency currently applicable binary csps 
bounded domain sizes 
rossi 
rpd discusses hidden dual conversion methods examined non binary csp binary representation equivalent various definitions equivalence 
empirical theoretical results help understand properties dual graph hidden variable representations 
results compare number nodes visited number constraint checks executed forward checking algorithm fc applied non binary csp binary equivalents 
results indicate problems non binary representation efficient representation 
class problems constraints tight restrictive binary translations efficient orders magnitude 
examine specialized algorithm hidden representation call fc algorithm advantage provably performs polynomial factor worse fc non binary representation perform exponentially better 
ultimate aim research provide guidance efficiently solving csp representation problem 
problem question formulate csp 
ideally problem modeled natural way machine automatically solves efficient way 
particular instance non binary csp machine convert binary representation solving 
answer question need better understanding tradeoffs involved conversion 
background define constraint satisfaction problems csp briefly review backtrack search dual graph translation hidden variable translation 
definition csps constraint satisfaction problem consists finite set variables fv vng variable va finite domain values dom fx finite collection constraints fc cmg 
constraint cis constraint set variables vars 
size set known arity constraint 
non binary csps csps contain constraints arity greater 
constraint viewed subset product domains variables vars set tuples satisfy constraint 
say set assignments fx consistent constraint assigns value variables vars fx ii tuple values assigned variables member assignment satisfies constraint 
solution csp set assignments vn vng consistent constraints 
notation kck denote size set example consider sat problem 
binary csp resulting dual method non binary csp representation sat problem variable boolean variable variable domain ary constraint clause formula ensure clause evaluates 
example constraint clause contains tuples rfx tuple appear constraint assignment satisfy clause 
csps solved backtracking algorithm 
restrict attention widely forward checking backtracking algorithm fc mcg generalized handle non binary csps 
van hentenryck vh say ary constraint checkable variables instantiated remaining variable uninstantiated 
node search tree new variable assigned node causes possibly empty set constraints forward checkable 
newly forward checkable constraint fc forward checks remaining unassigned variable 
unpruned value unassigned variable fc checks value node assignments consistent constraint pruning values inconsistent 
process causes unassigned variable domain values pruned fc backtracks 
dual graph hidden variable translations converting non binary csps binary ones 
dual translation constraints original problem variables new representation 
refer variables represent constraints variables original variables simply variables 
domain variable exactly set tuples satisfy original constraint binary constraint variables iff original constraints share variables 
binary constraints prohibit pairs tuples shared variables receive different values 
example dual graph representation csp example variables ary constraint clause original problem see 
example variable corresponds nonbinary constraint rfx domain contains tuples 
constraints enforce ordinary variables appearing hhh xx xxx xx xx xh jj binary csp resulting hidden method variable value 
hidden representation set variables includes variables original problem changes domains plus new set hidden variables variables 
constraint ci original problem add variable hi 
domain hi consists unique identifier tuple ci 
new representation contains binary constraints constructed follows 
variable hi impose binary constraint hi variables vars ci 
say hi xk constrained 
value hi corresponds tuple values variables vars ci defines unique value xk 
binary constraint hi xk consists unique value xk value hi 
note constraint functional direction value xk may compatible values hi 
example hidden variable representation csp example variables original variables hidden variables constraint original problem see 
example constraint fx corresponding domain setf unique identifier tuples constraint 
define correspondence values tuples fx follows 







impose constraint pairs variables fx fx giving binary constraints example fx value corresponds tuple 
compatible 
theoretical comparisons consider space requirements dual hidden representations 
csp algorithms deal constraints represented intensionally function extensionally list compatible tuples boolean array stores possible assignment constrained variables flag indicating assignment compatible 
effective backtracking algorithms fc storage proportional size domains variables keep track domain values pruned search 
means dual hidden representations constraints variables require extra storage size equal total number tuples constraints pm 
dual hidden representations require additional space store binary constraints 
fortunately constraints represented simple functions impose small additional space requirement 
example hidden representation check hi compatible xk simply find tuple assignments corresponding check see tuple assigns xk 
pair assignments compatible case 
original constraints represented extensionally list satisfying tuples operation done constant time 
original constraints intensionally represented space time tradeoff 
convert intensional representation extensional pay space required store list satisfying tuples 
dynamically compute tuple corresponding iterating possible assignments constrained variables find th satisfying tuple 
done time check constraint usually practical 
may assume extensional representation original constraints 
course additional space requirement original constraints represented intensionally 
show analytic bounds differences number nodes visited consistency checks performed fc algorithm applied non binary csp corresponding binary csps 
ease exposition assume fc runs solutions proven solution exists 
issue address properly accounting checking ary constraints 
clearly checking set xk satisfies ary constraint take operations 
true constraint represented intensionally function function consider values extensionally boolean array require operations index dimension array 
charge constraint checks check arity constraint 
consistent measure charge check binary constraint constraint checks check requires operations 
note counts binary constraint checks twice traditionally counted constraint check 
way accounting constraint checks allows properly compare fundamental operations performed solving non binary csp corresponding binary csps 
dual graph representation 
relative cost fc non binary csp dual csp depends cardinalities constraints structure underlying constraint graph 
example shows constraints satisfying tuples dual exponentially worse terms number consistency checks 
example shows constraints satisfying tuples dual exponentially better 
cases fc original may visit large number assignments prior able check constraint fc dual examines assignments known consistent constraint 
example consider non binary csp boolean variables xn constraints xn xng 
csp nodes backtrack tree dual representation exponentially children exactly solution node 
fc applied problem visit nodes perform consistency checks fc applied dual problem visit nodes perform consistency checks 
example consider non binary csp boolean variables xn constraints xn xn xn xng possible ways forming conjunction variables 
csp nodes backtrack tree dual single child exactly solution node 
fc applied problem visit nodes perform consistency checks fc applied dual problem visit nodes perform consistency checks 
visiting node search tree original csp fc ensures exists single extension current set assignments satisfies forward checkable constraints 
fc dual different guarantee remaining constraint exists extension current set assignments original variables consistent need single extension satisfying multiple constraints 
means fc original csp checks stronger condition smaller number constraints fc dual checks weaker condition larger set constraints 
analysis examples suggests number constraints grows increasingly fc original csp detect deadends search earlier fc dual decreases converse situation increasingly 
works practice experimental question examine section 
hidden variable representation 
turn attention hidden representation 
demonstrate dual fc original csp fc hidden representation incomparable algorithm perform exponentially better worse depending particular problem 
examples illustrate point 
example consider csp containing constraint set furthermore say tuple fc applied non binary csp unable detect node containing assignments dead forward check constraint variables instantiated 
hand fc applied hidden able detect dead ends node variable corresponding experience domain wipe 
example consider csp containing constraints set 
say fc applied non binary csp able detect node containing assignments dead nodes domain xk experience domain wipe forward check 
fc applied hidden hand unable detect dead node assignments ordinary variables prune domains variables domains ordinary variables 
examples construct csps fc applied non binary representation performs exponentially better fc applied hidden vice versa 
way improving fc hidden perform exponentially better outperformed bounded amount 
intuition improvement comes example 
fc hidden csp visits node reduce domains variables corresponding constraint respectively singleton setf corresponds satisfying tuple constraints 
point continue constraint propagation restore arc consistency xk xk detect dead fc non binary 
define enhancement fc 
definition fc fc backtracking algorithm designed run hidden representation 
operates exactly fc forward checking prunes domain variable additionally prune domains uninstantiated variables constrained variable remove values support lost 
usual backtrack variable experiences domain wipe 
enhancement fc similar spirit developed nadel nad 
fits standard forward checking full maintenance arc consistency terms amount constraint propagation performs 
algorithm efficient generic algorithms nadel value variable functionally determines values ordinary variables constrained 
instantiate ordinary variable forward check variables constrained normal manner 
operation requires binary constraint check domain value 
say variable hi values pruned 
fc check domains unassigned ordinary variables hi constrained 
say fx unassigned variables constrained hi 
restore arc consistency hi variables iterating remaining domain hi 
unpruned value hi supports unique value xj operations value binary checks requiring operations hi accumulate set supported values xj 
second phase iterate domains xj pruning values marked supported phase 
counting operations primitive constraint checks simplifying assumption variables original non binary csp identical domain size obtain result 
proposition variable ordering strategy non binary csp exists ordering strategy fc applied hidden representation visit nodes fc applied non binary csp perform max arity ci arity ci checks 
variable ordering employed exactly fc non binary representation 
particular delay instantiating variables ordinary variables instantiated 
ordinary variables instantiated experienced domain wipe variable domain reduced value 
fact values assigned variables constitute solution search terminated prior visiting variables 
results shed light hidden representation 
see hidden imposes overhead direct non binary representation 
overhead multiplicative factor orders magnitude non binary constraints contain large number satisfying tuples 
hand employ fc algorithm potentially save exponential amount visiting exponentially fewer nodes 
potential realized savings outweigh multiplicative overhead 
section show empirically outcomes possible provide guidelines conversion hidden effective 
experimental comparisons show experimental results comparing fc representations 
section fc refers implementation forward checking algorithm dynamically orders variables selecting variable instantiate variable minimum remaining values ties broken choosing variable participates constraints fc refers implementation algorithm definition hidden variable method 
fc employ minimum remaining values heuristic 
particular allow variables instantiated prior ordinary variables selected heuristic count checks performed fc fc manner described previous section refinement solving dual charged constraint check shared variable 
example checking constraint costs checking constraint costs 
systematically examine effect cardinalities constraints number constraints cost solving non binary csp corresponding binary representations model random non binary csp 
random csp variables domain size constraints arity satisfying tuples 
constraint subset variables chosen uniform probability possible subsets constraint contains tuples chosen random 
dual graph representation 
shows effect number tuples constraints number constraints cost solving random non binary csp dual 
specifically parameter settings generated solved ensemble non binary problems dual representations minimum problems ensemble 
took ratio median consistency checks needed solve dual representations median consistency checks needed solve non binary csps 
constructed contour lines shown figures cubic spline interpolation data points 
example left contour lines figures represent points space random problems solving dual faster terms consistency checks solving non binary csp left left line means dual faster 
experiments show dual efficient representation 
consider classes problems random sat crossword puzzles show maps constructed experimental results space random nonbinary problems predictive power provide guidance selecting non binary dual csp models problem 
results random sat shown table 
seen cost ratios solving original csp dual representation fit predictions order magnitude curves see point axis constraints possible tuples 
provides evidence experimental predictions scale larger results crossword puzzles gin shown table 
non binary formulation crossword puzzles variable letter filled constraints words unix dictionary 
constraints constraint allows possible tuples possible tuples length longest word puzzles filled 
order magnitude delay instantiating variables constrained variables assigned 
happens redundant need considered 
number constraints number variables number constraints number variables number tuples constraints maximum tuples number tuples constraints maximum tuples number constraints number variables number constraints number variables number tuples constraints maximum tuples number tuples constraints maximum tuples order magnitude curves median cost dual original csp 
left right curves mean dual better ii dual better iii dual non binary cost iv dual worse dual worse 
table effect ratio clauses variables ratio average number consistency checks performed solve dual representation average number consistency checks performed solve nonbinary representation cost rat finding solution random sat problems boolean variables 
cost rat 
curves predict dual representation efficient length words puzzle grows 
case larger problems dual times faster 
hidden variable representation 
shows basic behavior hidden variable representation random csps 
wide range different values number satisfying tuples constraint determines relative effectiveness hidden variable csp 
determine representation superior hidden variable original non binary plot ratio average number constraint checks performed algorithm 
run sufficient number problems data point obtain averages statistically significant digits 
data effectively plot log base ratio zero representations approximately performance positive numbers represent number orders magnitude hidden outperforms non binary negative number similarly represent number orders magnitude non binary outperforms hidden 
plot shows sample problem classes specified ti 
problem class vary number satisfying tuples constraint near near 
problem classes number constraints total possible class number constraints total possible 
graphs show seen table number consistency checks performed finding solution crossword puzzles 
absence entry indicates problem solved consistency checks 
dual problem number variables number constraints non binary problems number variables number constraints 
original dual size puzzle cc cc problem classes constraints satisfying tuples hidden variable csp outperform nonbinary csp orders magnitude performance advantage hidden variable csp decreases increase number satisfying tuples constraints threshold non binary effective theory predicts potential gain non binary hidden way 
results sense terms fc doing 
constraints fewer fewer satisfying tuples fc able detect larger larger number extra deadends fc running non binary 
important note hard problems exist values particular hidden variable representation superior hard problems constraints contain small number satisfying tuples generate hard problems increasing decreasing changes decrease number constraints variable participates 
plot average number constraint checks required fc solve hidden variable csp average number checks required fc solve equivalent non binary csp 
plot vary number constraints graph shows classic easy hard easy regions smoothed extent log scale varying number constraints change problems solvable unsolvable see fc hidden log ratio constraint checks number tuples maximum tuples log number constraints checks performed fc hidden divided number constraint checks performed fc non binary 
variable csp finds particular problem class difficult quite difficult fc non binary peak total constraints requires checks average solve problem vs average checks hidden 
importantly fact peak area fc non binary requires excess checks problems hidden problems solved checks 
phenomenon related exceptionally hard problems reported smith sg 
particular indicates problem class distribution constraint checks performed fc displays lower variance lower mean 
examined fc algorithm performs non binary csp comparison performance binary translations csp 
experiments show dual graph representation efficient orders magnitude number constraints low relative number variables constraints restrictive 
hidden variable representation showed modified forward checking algorithm call fc perform exponentially better simply fc nonbinary outperformed bounded large amount 
provided better insights behavior nature binary translations 
translating non binary csp involves overhead view providing initial intuitions translation worthwhile 
empirically shown number satisfying tuples constraints important factor determining worthwhile translation important question addressed constraint checks hidden ary number constraints number constraints checks performed algorithms problem 
relationship binary translations 
dual representation preferred hidden variable representation vice versa 
theoretical results proved relative behaviour 
intend address questions 
thing feel data demonstrated translation binary promise solution technique non binary csps 
insights translations perform better carried directly non binary case improved methods solving nonbinary csps developed avoid overhead translation entirely 
clear studying understanding binary translations essential prerequisite achieving insights 
acknowledgments supported canadian government nserc iris programs 
dec dechter 
expressiveness networks hidden variables 
proceedings eighth national conference artificial intelligence pages boston mass 
dm dent mercer 
minimal forward checking 
proceedings sixth ieee international conference tools artificial intelligence pages new orleans la 
dp dechter pearl 
tree clustering constraint networks 
artificial intelligence 
fre freuder 
synthesizing constraint expressions 
comm 
acm 
gin ginsberg 
dynamic backtracking 
artificial intelligence research 
haralick elliott 
increasing tree search efficiency constraint satisfaction problems 
artificial intelligence 
mac mackworth 
reading sketch maps 
proceedings fifth international joint conference artificial intelligence pages cambridge mass 
mcg mcgregor 
relational consistency algorithms application finding subgraph graph isomorphisms 
inform 
sci 
nad nadel 
constraint satisfaction algorithms 
computational intelligence 
pei peirce 
weiss editors collected papers vol 
iii 
harvard university press 
cited rossi petrie dhar 
rpd rossi petrie dhar 
equivalence constraint satisfaction problems 
technical report act ai mcc austin texas 
longer version rpd details results hidden variable method 
rpd rossi petrie dhar 
equivalence constraint satisfaction problems 
proceedings th european conference artificial intelligence pages stockholm sweden 
sg smith 
sparse constraint graphs exceptionally hard problems 
proceedings fourteenth international joint conference artificial intelligence pages montreal 
schiex 
gin verfaillie 
lazy arc consistency 
proceedings thirteenth national conference artificial intelligence pages portland oregon 
vh van hentenryck 
constraint logic programming 
mit press 
