boosting combinatorial search randomization carla gomes computer science department cornell university ithaca ny gomes cs cornell edu unpredictability running time complete search procedures explained phenomenon heavy tailed cost distributions meaning time experiment non negligible probability hitting problem requires exponentially time solve encountered gomes 
general method introducing controlled randomization complete search algorithms 
boosted search methods provably eliminate heavy tails right median 
furthermore take advantage heavy tails left median nonnegligible chance short runs dramatically shorten solution time 
demonstrate speedups orders magnitude state art complete search procedures running hard real world problems 
time required complete search methods solve similar combinatorial problems surprisingly variable 
problem instances may identical order variables numbered 
particular complete search algorithm may solve seconds require hours days solve second 
single problem instance seemingly trivial change detail search algorithm may drastically alter solution time 
addition domains problem instances quickly solved incomplete methods apparently solved complete methods methods guided powerful heuristics 
unpredictability running time complete algorithm undermines main reasons may choose employ method desire guarantee algorithm determine problem instance fact solution 
desirable find ways improve robustness predictability algorithms 
carla gomes research associate air force research laboratory rome ny usa 
copyright american association artificial intelligence www aaai org 
rights reserved 
bart selman computer science department cornell university ithaca ny selman cs cornell edu proc 
aaai madison wi july 
henry kautz labs park avenue florham park nj kautz research att com discusses general technique improving complete search methods introducing controlled amount randomization 
technique takes advantage variability underlying search method order find solutions quickly variance solution time 
demonstrate effectiveness strategy sat csp algorithms domains logistics planning circuit synthesis roundrobin scheduling 
solutions times reduced order magnitude instances solved time method local search 
show unpredictability running times combinatorial algorithms explained phenomenon called heavy tailed cost distribution gomes 
preliminary experiments plotted solution times deterministic search algorithm running random distribution scheduling problem instances 
noticed time experiment non negligible probability hitting problem required exponentially time solve encountered 
called heavy tail phenomena causes mean solution time increase length experiment infinite limit 
previous authors noted occurrence seemingly exceptionally hard problems fixed problem distributions gent walsh smith 
discovered small amount randomization introduced heuristic search algorithm runs instances solved quickly 
hardness reside instances combination instance details deterministic algorithm 
plotted solution times runs randomized complete algorithm different random seeds single problem instance discovered heavy tailed distribution seen collection instances 
observation led realize deterministic search algorithm viewed single run ran problem solver deterministic randomized soln 
time mean soln 
time logistics satz min sec bit adder satz hrs sec bit adder satz hrs min round robin ilog sec sec round robin ilog hrs hrs round robin ilog hrs hrs block world satz min min table comparison speed original deterministic algorithms randomized versions test bed problems 
algorithm 
unpredictability deterministic complete algorithms explained variance expect run randomized algorithm 
furthermore analyzing shape cost distribution developed simple techniques provably reduce mean solution time 
experiments known hard problem instances scheduling planning circuit synthesis state art satisfiability engine satz li anbulagan highly efficient csp solver built ilog constraint programming library puget 
important note cases underlying deterministic complete search engines fastest problems fastest class 
techniques discussed extend range complete methods problems previously reach 
preview main results see table 
table shows randomization strategy enabled solve previously unsolved problem instances instances solved order magnitude faster 
techniques simplicity generality approach easily adapted improve performance backtrack style search methods planning scheduling tasks interest ai 
problem domains problem domains timetable scheduling planning circuit synthesis 
formalized csp problem propositional satisfiability 
timetabling consists determining exists feasible schedule takes consideration set pairing distribution constraints 
specifically consider problems derived sports scheduling applications 
literature area growing get sense range mathematical difficulty problems encountered mcaloon nemhauser trick 
consider timetabling problem classic round robin schedule team play team exactly 
problem formally defined follows 
teams teams play exactly 

season lasts weeks 

team plays game week season 

periods week period scheduled game 

team plays twice period course season 
team problems relatively simple done brute force 
combinatorics scheduling problem explosive 
team league played 
schedule thought permutation 
teams search space size search space size grows factorial square 
published algorithms problem scale poorly times deterministic solver shown table best see gomes 
second domain planning 
kautz selman showed propositional sat encodings difficult strips style planning problems efficiently solved sat engines 
complete engine incomplete local search engine worked moderate sized problems largest problems domain logistics scheduling solved local search 
turns deterministic version satz solve logistics instances minutes 
constructed larger planning problem labeled logistics 
domain involves moving packages trucks airplanes different locations different cities 
largest logistics problem kautz selman involved variables logistics involves variables 
final domain circuit synthesis 
kamath 
developed technique expressing problem synthesizing programmable logic array pla satisfiable problem 
statement problem includes table specifying function computed upper bound number gates may appear circuit 
general problems difficult solve number gates reduced limit reached instance unsatisfiable 
problems quite hard solve complete sat procedures part test beds numerous sat competitions research studies 
problems considered bit adder bit adder guess synthesizing bit adder gates respectively 
selman kautz solve instances local search previously solved backtrack style procedure 
randomizing complete search engines consider general techniques adding randomization complete systematic backtrack style search procedures 
procedure constructs solution incrementally 
step heuristic select operation applied partial solution assigning value unassigned variable 
eventually complete solution algorithm determines current partial solution inconsistent 
case algorithm backtracks earlier point search tree 
choices heuristically determined equally deterministic algorithm applies fixed rule pick operations example select lowest numbered variable assign 
obvious place apply randomization step tie breaking choices ranked equally choose random 
simple modification dramatically change behavior search algorithm see section csp 
heuristic function particular powerful may rarely assign choice highest score 
handle introduce heuristic equivalence parameter algorithm 
setting parameter value greater zero means choices receive scores percent highest score considered equally 
expands choice set random tiebreaking 
changes run search algorithm particular instance differ order choices potentially time solution 
discuss detail advantageous terminate searches appear stuck exploring part space far solution 
introduce cutoff parameter limits search specified number backtracks 
cutoff reached algorithm restarted root search tree 
note introducing randomness branching variable selection effect completeness backtrack style search 
basic bookkeeping linear space ensures procedures revisit previously explored part search space means determine inconsistencies local search methods 
cutoff parameter limit size space searched exhaustively restarts 
practice gradually increase cutoff allow determine inconsistencies necessary 
variable order randomization restart strategy employed crawford baker probing algorithm sat 
despite fact performed backtracking shown solve number examples 
power randomization combinatorial search informally recognized scheduling domains see bresina smith provides explanation potential success kind strategy terms heavy tailed distributions gomes 
see data shows clear optimal cutoff value simply probing unit propagation backtracking ineffective 
example table success rate cutoff value 
bayardo schrag introduced backtrack style solver rel sat included randomized tie breaking restarts fixed high cutoff value 
focus backtracking technique effect restarts 
complete search algorithm randomized csp solver 
ilog solver powerful constraint programming library puget 
round robin scheduling problems discussed library build deterministic backtrack style csp engine 
see dechter freuder mackworth overview basic csp algorithms 
employs fail heuristic variable assignment selects variables smallest domain ties broken lexicographically 
performance deterministic version matches exceeds published results solving types problems 
randomized solver breaking ties randomly adding cutoff parameter gomes 
second algorithm randomized propositional satisfiability 
fastest complete search engines propositional satisfiability testing satz system li anbulagan 
satz version davis putnam loveland procedure davis heuristic choosing branch variable maximizes function number unit propagations performed set positively negatively 
satz fastest deterministic sat procedure instances discussed 
solve smaller instances types backtracks 
heuristic usually chooses single branching variable ties added heuristic equivalence parameter enlarge choice set 
heavy tailed cost distributions previous gomes show tail behavior randomized complete backtrack style methods best modeled distributions asymptotically tails pareto vy form viz 
pr constant mandelbrot 
heavy tailed distributions distributions tails power law decay 
constant called index stability distribution 
moments order finite higher order moments infinite sup 
example distribution finite mean finite variance 
distribution finite mean finite variance 
pareto vy tail observed rate decrease distribution power law 
standard distributions exhibit exponential decay 
pr cumulative distribution decays power law 
power law decay complement cumulative distribution heavy tailed random variable log log plot show approximately linear decrease tail 
slope observed linear decrease provides estimate index 
log backtracks log log log plot tail team round robin scheduling 
shows log log plot tail complement cumulative distribution team round robin problem 
linear nature tail plot directly reveals heavy tails pareto vy type 
complement visual check heavy tailed behavior calculate maximum likelihood estimate index stability value roundrobin scheduling problem obtain consistent hypothesis infinite mean infinite variance 
far identified heavy tailed behavior cost distribution right median 
heavy tail nature shows computationally significant fraction long runs decaying polynomial rate 
strategy running search procedure cutoff near median value distribution clearly avoids long runs tail 
experiments gomes suggest heavy tail phenomenon left hand side median value cost distribution means success rate solution increases polynomially number backtracks 
explains relatively low cutoff value gives sufficiently high success rate allow solve problem instance 
example round robin scheduling problems observed runs took backtracks compared median value 
ran cutoff solved instance tries 
try took hour successful run took backtracks 
tails left characterized index stability 
data gomes conjecture tail left hard combinatorial search problems 
conjecture strong implications terms algorithm design means order obtain minimal expected run time preferred strategy consists relatively short runs randomized backtrack style procedure 
wish give impression search problem gives rise heavy tailed distribution 
fact doing give rise suspicion distributions artifact methodology real phenomena problem domain 
domain heavy tails blocksworld planning problems 
hardest blocks world problem kautz selman blocks world solved deterministic satz minutes 
ran course computational cost complete backtrack style algorithms finite upper bound 
dealing np complete problems upper bound exponential size problem means de facto hard instances treated infinite practical purposes practical procedure explore search full space 
randomized version satz instance wide range cutoff values heuristic equivalence settings 
optimal equivalence parameter setting 
range cutoff values evidence heavy tailed distribution randomization slightly increases effectiveness satz mean cost minutes 
studies needed determine exactly characteristics combinatorial search problems lead heavy tailed behavior 
boosting performance randomization restarts far discussed heavy tailed probability distributions underlie large variability observed running randomized backtrack style procedure variety problem instances 
obtain efficient predictable procedures running search certain cutoff point restarting root tree 
restarts clearly prevent procedure getting trapped long tails right distribution 
addition low cutoff value exploit heavy tails left median allow solve previously unsolved problem instances sufficient number restarts 
table mean solution times randomized column empirically determined near optimal cutoff values 
randomized solution time standard deviation order magnitude mean 
expected distribution geometric shown section 
restarts course variance mean tend infinity approximation 
discuss results detail 
deterministic csp procedure round robin scheduling problem gives solution seconds 
experiments ran mhz sgi challenge 
find solution 
apparently problem quickly difficult moderate values subtle interaction global local constraints search globally consistent solution surprisingly hard 
problems empirically determine cost profile calculate optimal cutoff value minimize expected cost finding solution 
main interest solving previously unsolved instances case 
problems hard obtain full cost distribution 
example running cutoff gives success rate reach median point distribution 
run takes hours complete 
estimate median value 
deterministic procedure apparently results run lies right expected median cost 
order find cutoff value cutoff succ 
mean cost rate table solving team robin robin scheduling problem range cutoff values 
cutoff succ 
mean cost rate table solving logistics problem range cutoff values 
hard problem instances best available strategy trial error process experiments various cutoff values starting relatively low values optimal cutoff problems tends lie median value distribution 
seen table gives expected cost backtracks finding solution range cutoff values 
optimal cutoff resulting expected cost solution backtracks hrs 
case ran cutoff solution approximately hours 
table gives performance satz range cutoff values logistics instance 
clear optimal value case surprisingly low backtracks 
despite low success rate cutoff value performance close optimal requiring backtracks total solution takes seconds 
compare minutes deterministic version satz 
important note minutes run just unlucky run 
shape underlying heavy submission lot progress terms solving larger instances mcaloon preparation 
multiple threads processor sun system teams schedules generated record writing wetzel 
believe numbers improved randomization technique 
tailed distribution runs take backtracks hour 
trick exploit fact non negligible probably solving instance short run 
fast restart strategy exploits 
see table improvements due randomization 
bit adder problems solved backtrack style procedure 
problem obtain little improvement attributed absence heavy tails discussed 
results show introducing stochastic element backtrack style search procedure combined appropriate restart strategy significantly enhance procedure performance 
fact see allows solve previously unsolved problem instances 
formal analysis restarts section formalize strategy restarts complete stochastic procedure derive probability distribution assuming full knowledge probability distribution demonstrate probability distribution associated exhibit heavy tails 
furthermore finite mean variance stochastic procedure infinite mean variance 
consider complete stochastic procedure associate random variable number backtracks takes find solution prove exist 
consider stochastic strategy running run fixed number backtracks cutoff finds solution proves exist stochastic strategy solution proved exist stops 
restart independent random seed backtracks 
define number backtracks stochastic strategy restarts cutoff takes find solution prove exist 
assume know probability stochastic procedure find solution prove exist backtracks 
sequence runs executed restart strategy independent seen sequence bernoulli trials success consists finding solution proving doesn exist run 
convenient define random variable giving number restarts solution instance shown inconsistent 
note 
follows geometric distribution parameter 
probability tail mod consideration follows geometric distribution exponential decay finite mean variance follows tail distribution exhibits exponential decay finite mean variance 
emphasize adopting low cutoff strategy restarts partially eliminates heavy tail left lower cutoff shorter tail 
true distribution exhibits exponential decay cutoff 
building previous heavy tailed behavior combinatorial search gomes shown performance complete backtrack style search algorithms hard real world problems greatly enhanced addition randomization combined rapid restart strategy 
speedups orders magnitude observed test problem instances solved time backtrack style procedure 
success approach exploiting heavy tailed nature cost distributions 
saw domains outliers sides median occur relatively high frequency 
heavy tails right median cause mean solution time grow bounds 
adding cutoffs restarts search algorithm theoretically empirically eliminate heavy tail bound mean 
heavy tails left mean exploited performing rapid restarts short runs leading dramatic decrease expected solution time 
applied randomization techniques stateof art search engines csp propositional satisfiability 
able solve hard round robin scheduling instances size corresponding deterministic version handle instances size 
domain planning satisfiability extended range logistics problems solved complete methods problems containing variables ones involving variables solved mean cost seconds 
interesting explore randomization approach context backtrack style approaches dynamic backtracking ginsberg 
believe generality approach lead advances planning scheduling diagnosis game playing areas ai 
acknowledgments author sponsored air force research laboratory air force materiel command usaf agreement number air force office scientific research new world initiative afosr project rl 
second author supported nsf faculty early career development award 
views contained authors interpreted necessarily representing official policies endorsements expressed implied air force research laboratory government 
alt guibas mehlhorn karp wigderson 

method obtaining randomized algorithms small tail probabilities 
algorithmica 
bayardo roberto schrag robert 

csp look back techniques solve real world sat instances 
proc 
aaai new providence ri 
bresina 
heuristic biased stochastic sampling 
proc 
aaai portland 
crawford baker 

experimental results application satisfiability algorithms scheduling problems 
proc 
aaai seattle wa 
davis logemann loveland 

machine program theorem proving 
comm 
acm 
dechter 

constraint networks 
encyclopedia artificial intelligence john wiley new york 
freuder mackworth eds 

constraint reasoning 
mit press cambridge ma 
gent ian walsh toby 
easy problems hard 
artificial intelligence 
ginsberg 

dynamic backtracking 
journal artificial intelligence vol 

gomes selman 

problem structure presence perturbations 
proc 
aaai new providence ri 
gomes selman crato 

heavy tailed phenomena combinatorial search 
submitted publication gomes selman mcaloon 

randomization backtrack search exploiting heavy tailed profiles solving hard scheduling problems 
appear proc 
aips 
kamath karmarkar ramakrishnan resende 

interior point approach boolean vector function synthesis 
proc 
th 
kautz selman 

pushing envelope planning propositional logic stochastic search 
proc 
aaai portland 
li chu min anbulagan 
heuristics unit propagation satisfiability problems 
proc 
ijcai kyoto japan 
luby sinclair zuckerman 

optimal speedup las vegas algorithms 
information process 
lett 
mandelbrot benoit 

pareto vy law distribution income 
international economic review 
mcaloon wetzel 

constraint programming sports league scheduling 
manuscript preparation 
mcaloon wetzel 

sports league scheduling 
proceedings third ilog international users meeting 
nemhauser trick 

scheduling major college basketball conference 
georgia tech technical report 
smith 
stochastic procedures generating feasible schedules 
proc 
aaai new providence ri 
puget 

black box constraints objects 
proceedings ilps mit press 
taqqu murad 

stable non gaussian random processes stochastic models infinite variance chapman hall new york 


combinatorial aspects construction competition dutch professional football leagues discrete applied mathematics 
selman kautz 

domain independent extensions gsat solving large structured satisfiability problems 
proc 
ijcai chamb ry france 
smith 

sparse constraint graphs exceptionally hard problems 
ijcai 
full version aij hogg 
wetzel 

cuny graduate center cs technical report 
