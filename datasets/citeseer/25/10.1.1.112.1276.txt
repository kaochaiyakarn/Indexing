economic behavior peer peer storage networks andrew wan johnny ngan dan computer science rice university cs rice edu peer peer networks introduce new area computer science economics 
designers systems firmly understand incentives pref erences decision space participating agents order decide policies system func tion possible 
models economic behavior agents peer peer storage net 
model clear agents single peaked preferences system wide defines reliability storage network 
consequently system designer may implement mecha nism elicit opinions parameter knowing truthfully revealed set system socially optimal level agents similar preferences may cluster form net closer preferences 
peer peer networks provide new plat form distributed applications allowing users share computational storage network ing resources peers benefit participant 
system designs traditional computer science problems including scalability load balancing fault tolerance forth 
systems tend assume users system running official software users clear self interest modifying software allows con sume network resources contributing 
systems take user incentives consideration 
rational user behavior study economic behavior systems 
systems evolve overtime 
parameters system degree object replication different users different ideas parameters optimal values 
parameters declared cen authority total utility system possibly increased individual utility account 
addresses problem considering game theoretic model 
consider preferences utility functions constraints agents model allows analyze economic behavior agents suggest policies system 
model relevant systems distributed backup systems pas storage network bandwidth limiting resource 
rest organized follows 
sec tion gives background storage networks 
section uses utility theory analyze eco networks section discusses effects decisions system participants 
section simulation results support assumptions 
conclude section 
background considers economic incentives virtually storage system 
order concrete discussions past 
past storage system built top viewed distributed hash table dht 
stored item past bit handle replicas object stored live nodes nodeids numer ically closest object handle 
past maintains invariant object replicated regardless node addition failure 
handle built cryptographically secure hash sha applied data stored 
handle sufficient information holder handle verify actual docu ment modified transit 
past implemented pastry routing scales large numbers nodes providing efficient mechanisms locate nodes desired handle gracefully handling new nodes arrive leave system 
pastry structured overlays nodeids assigned randomly uniformly bit space possible identifiers 
choose nodeids compromise integrity pastry structured 
choose nodeids may able mount sybil attacks obtain large number legitimate nodeids easily 
attacks prevented attacker ability join network multiple times 
castro consider ap proaches accomplish robust approach identify requires trusted cen authority ca issue entrance permits 
aside issuing permits ca un involved operation network limiting damage caused ca 
ca assumed serve common members network fully ca 
ca potentially extended operations requiring globally trusted au 
traditional file systems past performance de grades system operating near full capacity 
probability successfully inserting system decreases 
traditional file systems users sim ply purchase larger disks local computer increase system capacity remote computers reserve storage space 
storage systems generally need tion fairness node get remote storage contributes lo cal storage 
ngan consider architectures meet goal publish records usage allowing nodes audit peers records gives nodes incentives report usage truthfully 
building results properties economic system develop cheating rendered technically li si ni ri hi total hard drive space agent private local spaces local copies documents network ni reciprocal space agent uses lo cally storing remote documents ki agent replication additional local space agent re quired contribute overhead rate hard drive space usage agent 
feasible 
model modeling agent node parti hard drive space shown implement fairness policy described sec tion 
agent may choose replication factor ki overhead rate system 
agent wishes store units network 
reciprocity agent available ni units space re mote nodes plus additional overhead including units private unshared data total disk space usage hi li si ni ri li ki si constant defines important aspect system behave 
higher values efficiency finding node free space absorb storage requests cost lower effec tive capacity storage network 
agent preferences initially assume agents consider bean exogenous variable 
agent needs decide personal data network space available remote storage 
agent primarily cares si see probability successfully storing 
agent preferences vary changes values value agreed agents 
fo cus importance start utility function node li si pi expect cobb douglas util ity function utility maximizing values arguments non zero stance extremely large amount completely unreliable remote space pi 
general zeros argument utility function represent degenerate cases providing space remote storage uninteresting practice 
equation li hi cisi ci 
write utility function ui li si pi lai sbi pi pi hi cisi sbi log hi cisi sbi log hi cisi log si pi constant respect maximizing equation maximize ui 
order conditions maxi equation imply bs cisi rearranging terms bs si li 
express agent preferences indirect utility function gives utility available agent substituting obtain vi pi hi ki background reading economics consult utility theory consumer behavior section microeconomics text book varian ch 

terms constant represented vi pi ki analyzing properties vi reliability system function pi 
reliability function pi recall ri space ri provides helps maintain free space approximately uniformly distributed 
clear constant equivalently larger lowers failure rate storing objects storage network section shows distributions reliability function approximated pi tl fixed parameter depends neg average size files stored 
amount free space system decreases larger files difficult store smaller files 
conversely increases prob ability success increase diminishing returns 
variables affect system including replication factor ki times failed storage re quest retried system aborts request 
general rule additional reliability achieved cost additional storage communication overhead 
properties indirect utility function model pi exam ine properties equation 
show preferences respect single peaked 
vi tl single maximum 
plot vi differ ent parameters 
provides visual evidence single peakedness vi 
formal proof appendix plotted varied parameter values reasonable values peaks 
high value peak shifted vi single peakedness vi dif ferent values ki 
right 
weight utility func tion probability successfully storing file follows utility maximizing high remote storage reliability larger nodes primarily value hav ing space available local storage 
observe indirect utility function concave peak means decreasing marginal utility implications section model reason ra tional behaviors agents administrators storage systems 
agent participation assuming storage networks exist possibly differing ls values agents storage network parameters best suit agent preferences 
find ls exactly equals storage systems choose agents evaluate rationally choose participate inthe system closest preferences 
alternative course refuse participate 
corollary observation agents preferences tend band clustering fashion agents contribute resources form system desired level effect create public 
example agent preference low head reliability join high reliability network agent disk space private extra reserve space reliability mandated words disutility created non optimal network 
disutility large agent refuse participate creating market storage system better suits needs agent 
administration systems fundamentally designed limit remove role centralized administration 
regardless presence tion help provide rendezvous point new agents determine existing best suit agent preferences 
argue central administrator con duct surveys agent preferences allowing networks defined best match ex pressed preferences individual agents 
single system established economic suggest median agents revealed preference variables chosen implies majority wants increase decrease chosen value sec tion 
agents truthfully reveal preferences know administrator employs :10.1.1.31.1309
administrator finds establishing clusters benefit participants par voting agents roughly preferences choose median agents partition 
truthful revelation increases likelihood admin define storage system closer agent optimal preferences lying agent find assigned storage system increases disutility 
course agents join system ex changing data mechanism auditing described ngan guarantee agent free riding 
central administrator need auditing process acting court node bring evi dence node free riding behavior 
prob 
successful insertions pi best fit best fit best fit probability successful object different file sizes varying values 
form fitting data points varying percentage indicates document inserted fraction average storage capacity agent contributes 
reliability vs overhead section modeled storage reliability pi function overhead rate simulation results determine exact shape pi 
constructed past system nodes contributing storage space chosen truncated normal distribution gb gb 
node stores document quota permits 
store additional documents overlay network record probability eventual stor age success 
result best fit curves form tl shown 
ex pected shows increases file sizes higher shows tl close approximation pi simulations 
related field mechanism design md years 
goal design rules interaction agents self ish self interested behavior produces outcome deemed desirable designer 
classically md applied auction theory economic systems 
view agents prevalent md applied computational set :10.1.1.31.1309
nisan ronen applied md solve arise agents manipulating algorithms serve interest 
mechanism design applies md specifically distributed setting computational tractability incentive compatibility 
solve network prob lems related multicast transmissions efficient routing systems 
described voting process agents parameters shared system 
game theoretic aspect voting active re search area economics artificial intelligence 
voting decision making discussed sandholm 
modeled centralized small incremental payments agents 
proposed payment mechanisms various user strategies reach equilibrium game theoretic model 
presents economic model re sources preferences agents storage networks 
analyzing model specifically utility function observe agent single peaked preference storage head rate implies agents values incentive reveal preferences centralized administrator orchestrate cluster ing 
expect clustering system parameters including degree replication 
acknowledgments herv moulin helpful discussions 
supported nsf ccr texas atp gifts microsoft schlumberger 
castro druschel ganesh rowstron andd 
wallach 
security structured peer peer lay networks 
proc 
th symposium design implementation boston ma dec 
cox noble 
pastiche making easy 
proc 
th symposium operating systems design implementation boston ma dec 
douceur 
sybil attack 
proc 
st int shop peer peer systems cambridge ma mar 
feigenbaum papadimitriou sami ands 
shenker 
bgp mechanism lowest cost routing 
proc 
st acm symposium principles computing new york ny 
feigenbaum papadimitriou shenker 
shar ing cost multicast transmissions 
journal computer system sciences aug 
feigenbaum shenker 
distributed design results directions 
proc 
th int workshop discrete algorithms mobile computing communications pages atlanta ga sept 
leyton brown mironov ridge 
incentives sharing peer peer networks 
proc 
rd acm conf 
electronic commerce tampa fl oct 

ngan wallach druschel 
sharing peer peer resources 
proc 
nd int workshop peer peer systems berkeley ca feb 
nisan ronen 
algorithmic mechanism design proc 
st acm symposium theory computing atlanta ga may 
papadimitriou 
algorithms games internet proc 
rd acm symposium theory computing pages crete greece july 
rowstron druschel 
pastry scalable dis tributed object address routing large scale peerto peer systems 
proc 
ifip acm int conf 
dis tributed systems platforms pages heidelberg germany nov 
rowstron druschel 
storage management past large scale persistent peer peer storage utility 
proc 
th acm symposium oper ating systems principles pages chateau lake louise banff canada oct 
sandholm 
distributed rational decision making 
ing 
weiss editor multiagent systems modern distributed artificial intelligence chapter mit press 
parkes 
rationality self peer peer networks 
proc 
nd int workshop peer peer systems berkeley ca feb 
varian 
microeconomic analysis 
norton new york ny rd edition mar 
varian :10.1.1.31.1309
mechanism design computerized agents proc 
usenix workshop electronic commerce new york ny 
appendix appendix prove theorem onthe single peakedness 
theorem 
positive constants ki vi tl ki single peaked 
proof 
prove showing derivative changes exactly positive negative 
notational convenience ki 
vi tl kil kil theta kil tl te tl tl kil ki lambda tl kil theta gte tl tl ki kil lambda vi theta gt etl ki kil lambda vi etl kil theta gt kil ki etl lambda phi gt kil ki etl 
vi etl kil positive show phi changes sign sign changes positive negative 
note phi 
deriva tive phi phi kit etl solving phi obtain ln gb 
easy verify phi ln gb phi ln gb 
phi positive increasing ln gb decreasing 
words single peaked 
