thomas zimmermann tz acm org mining version histories guide software changes peter wei gerber st cs uni sb de apply data mining version histories order guide programmers related changes programmers changed functions changed 

set existing changes rules suggest predict changes show item coupling program analysis prevent errors due incomplete changes 
initial change rose prototype correctly predict files changed precise functions variables 
topmost suggestions contain correct location likelihood 

shopping book amazon com may come section reads customers bought book bought 
listing books typically included purchase 
information gathered data mining automated extraction hidden predictive information large data sets 
apply data mining version histories programmers changed functions changed 

just amazon com feature helps customer browsing related items rose tool guides programmer related changes aims suggest predict changes 
suppose programmer just change 
change 
page shows rose tool plug eclipse programming environment 
programmer extending eclipse new preference added element fkeys array 
rose suggests consider changes inferred eclipse version history 
come locations highest confidence likelihood changes applied location 
prevent errors due incomplete changes 
top location confidence past stephan diehl diehl acm org saarland university saarbr cken germany andreas zeller zeller acm org time programmer extended fkeys array extended function sets preference default values 
programmer wanted commit changes altering suggested location rose issue warning 
detect coupling program analysis 
rose operates uniquely version history able detect coupling items detected program analysis including coupling items programs 
position list eclipse html documentation file confidence suggesting adding new preference documentation updated 
rose tool leverage version histories 
earlier section researchers history data understand programs evolution detect evolutionary coupling files classes support navigation source code :10.1.1.48.910
contrast state art uses full fledged data mining techniques obtain association rules version histories detects coupling fine grained program entities functions variables say classes increasing precision integrating program analysis thoroughly evaluates ability predict missing changes evaluating actual usefulness techniques 
remainder organized follows 
section shows gather changes effects section applies cvs 
section describes basic approaches mining data followed examples section 
section evaluate rose ability predict changes earlier history rose suggest changes precise 
section discusses related section closes consequences 
user inserts new preference field fkeys rose suggests locations changes function 
programmer changes eclipse source rose suggests locations similar transactions past changes 

processing change data illustrates basic data flow rose tool 
rose server reads version archive far left groups changes transactions mines transactions rules describe implications software entities fkeys changed typically changed user changes entity say fkeys rose client queries rule set applicable rules appropriate suggestions changes say 
introducing formal definitions changes transactions affected entities generalizing concepts existing version archives 
adopting notation change mapping applied transforms product changed product rose stands reengineering software evolution non rational tool 
version archive grouping rose server rose eclipse client mining transactions rule set querying matching rule application change 
data flow rose 
suggestions set products set changes denoted changes composed composition operator useful denoting transactions consisting multiple changes multiple locations 
instance transaction versions composed individual changes 
user expressed 
express syntactic components affected change define concept entities 
entity triple name affected file syntactic category affected component method class file 
identifier affected component 
mapping entities retrieves entities affected change transaction entities entities entities comp java method comp java field fkeys comp java class comp java file comp java 
entities base mining changed entity entities typically change 
grouping changes transactions rose server retrieves changes transactions described existing version archives typically cvs archives frequently opensource systems 
cvs popular weaknesses require special data cleaning inferring transactions :10.1.1.90.9987:10.1.1.90.9987
modern version control systems concept product versioning able access transactions alter entire product 
cvs provides file versioning 
recover product transactions cvs archives group individual file changes individual transactions 
rose follows classical sliding window approach subsequent changes author rationale part transaction seconds apart 
branches merges 
evolution product branches different evolution strands may merged 
cvs archive merge branch reflected explicitly merge large transaction includes changes branch 
order detect coupling transactions take account branches avoid large merge transactions 
rose ignoring changes affect entities 
getting entities 
cvs syntactic knowledge files stores manages files line num save space abbreviate file names syllable comp java stands java 
class cat public string colors 
public cat 

class dog public string colors 

cat colors lines cat cat lines dog colors lines class cat lines class dog lines 
relating changes entities 
change line affects file animals java class cat field cat colors bers change 
rose parses files associating syntactic entities line ranges 
sketched rose relate change file line affected components 

transactions rules transactions described previous sections aim rose server mine rules transactions 
rule 
example comp java field fkeys comp java method plug properties file plug properties rule means user changes field fkeys comp java change method file plug properties 
means rule experience constitute absolute truth character read logical implication holds 
formally association rule pair disjoint entity sets 
notation called antecedent consequent 
said rules tell absolute truth 
probabilistic interpretation amount evidence transactions derived 
amount evidence determined measures support 
support determines number transactions rule derived 
assume field fkeys changed transactions 
transactions included changes method file plug properties 
support rule 
confidence 
confidence determines strength consequence relative amount consequences alternatives 
example consequence changing plug properties applies transactions involving fkeys 
confidence rule 
formally define frequency set set transactions frq 
support rule set transactions supp frq 
confidence conf frq frq shorthand notation denotes rule supp conf set transactions 
applying rules soon programmer begins changes rose client suggests possible changes 
done applying matching rules 
general rule matches set changed entities set equal antecedent 
assume programmer created sequence changes set changed entities called situation entities 
instance user extended variable fkeys file java 
situation comp java field fkeys compute suggestions 
set suggestions situation set rules defined union consequents matching rules apply situation rule rose suggests consequent comp java method apply plug properties file plug properties entire set mined rules contains rules 
actual result apply shown ordered confidence 
assume user decides follow recommendation confidence obvious new preference get default value 
changes method 
rose proposes additional changes case missing 
user examines methods file fkeys 
methods creates window preferences set 
extends method resulting comp java field fkeys comp java method comp java method situation minimum support minimum confidence rose computes rules plug properties file plug properties text java method text java method build html file build html applying rules yields union consequents rules antecedent 
rose rank entities confidence suggesting user change file plug properties 

computing rules rose uses apriori algorithm compute association rules 
apriori algorithm takes minimum support minimum confidence computes set association rules phases 
algorithm iterates set transactions forms entity sets entities occur transaction 
entity sets minimal support called frequent 
entity set frequent subsets frequent entity sets extended iteration 
phase yields set frequent entity sets 

algorithm computes rules sets precisely entity sets creates rules subset 
note rules support supp different confidences 
rules minimum confidence returned 
classical apriori algorithm compute rules search rule set situation 
computing rules takes time days experiments 
optimizations constrained antecedents 
specific case antecedent equal situation mine rules fly related situation 
mining constrained antecedents takes seconds :10.1.1.41.407
additional advantage approach incremental sense allows new transactions added situations 
single consequents 
speed mining process modified approach computes rules single entity consequent 
situation rules form 
rose rules sufficient rose computes union consequents anyway section 
previous example single consequent rules 
optimizations mining efficient average runtime query large version histories gcc 

rule examples coupling gcc 
gcc arrays define costs different assembler operations intel processors 
changed transactions 
transactions change triggered change type type processor cost var cost var cost var cost var pentium cost var cost costs type changed new operation rose suggests extend appropriate cost instances 
python files 
approach restricted specific programming language 
fact detect coupling program parts written different languages including natural language 
example taken python library func getattr py func file changed python file py classical coupling interface implementation 
postgresql documentation 
data mining reveal coupling items programs postgresql documentation sgml file sgml sgml file sgml sgml file sgml sgml file sgml sgml sgml changed files sgml sgml changed 
entity consequent rule exists single consequent rule se ce higher equal support confidence values se ce measured pc intel ghz pentium gb ram 
rule holds direction support incidentally confidence 

evaluation rule examples give empirical evidence objectives navigation source code 
single changed entity rose point programmers entities typically changed 
error prevention 
rose prevent errors 
say programmer changed entities missed change entity 
rose find missing 
closure 
suppose transaction finished programmer necessary changes 
rose erroneously suggest change missing 
granularity 
default rose suggests changes functions fine grained entities 
results rose suggests changes files 

evaluation setup evaluation analyzed archives large open source projects table page 
archive chose number full months containing transactions transactions evaluation period 
period check transaction entities predicted earlier history 
create test case consisting query entities expected outcome entities 
take transactions completed time training set mine set rules transactions 

avoid having user endless lists suggestions rose shows top rules ranked confidence 
evaluation apply get result query aq apply 
size aq equal 

result aq test case consists parts aq eq entities matched expected outcome considered correct 
aq eq unexpected recommendations wrong 
assessment result aq measures information retrieval precision pq describes fraction returned entities expected history training evaluation project description cvs day txn period eclipse integrated environment gcc compiler collection image manipulation tool jboss application server jedit text editor office suite postgresql database system python language library table 
analyzed projects txn transaction entity user 
recall rq indicates percentage expected entities returned 
pq aq eq aq rq aq eq eq case entities returned aq empty define precision pq case entities expected define recall rq 
goal achieve high precision high recall values near recommend recall expected entities precision 
query qi get precision recall pair rqi 
get measure entire history summarize pairs single pair different averaging techniques information retrieval macro evaluation simply takes mean value precision recall pairs pm rm rqi approach uses precision recall computed query 
users usually think queries macro evaluation referred user oriented approach determines predictive strength individual queries 
micro evaluation contrast builds average pair entities 
precision recall values single queries sums returned matching expected entities queries 
ni eqi ni ni eqi ni eqi think micro evaluation summarizing queries large query computing precision recall large query 
allows statements summarizing queries nth precision eclipse navigation micro evaluation recall minimum support minimum support minimum support 
varying support confidence suggestion wrong correct 
example precision python second suggestion correct means recommended entity changed 
micro evaluation referred system oriented approach focuses performance system average query performance 
noted averages 

precision vs recall major application rose guide users source code user changes entity rose automatically recommends possible changes view 
wanted evaluate predictive power rose situation 
transaction entity entities queried checked rose predict entities 
transaction tested entities queries element 
shows called precision recall graph results eclipse project 
combination minimum support minimum confidence resulting precision recall pair plotted 
additionally sub sequent confidence thresholds having support connected lines 
result get curves investigated support 
connecting lines measured values sake clarity interpolation 
rose achieves support confidence recall precision recall states rose suggestion correctly included changes carried transaction 
precision means recommendations correct fourth suggested change carried predicted correctly rose 
programmer check suggestions order find correct 
shows increasing support threshold increases precision decreases recall rose gets cautious 
highest possible thresholds yield best precision recall values increase confidence threshold precision recall decrease 
furthermore shows high support confidence thresholds required high precision 
values result low recall indicating trade precision recall 
practice graph necessary select best support confidence values specific project 
remainder chosen values common projects order facilitate comparison 
precise suggestions suggestions 

likelihood precision sounds low keep mind likelihood single recommendation predicting specific location 
change results changed rose suggests suggestion average precision 
assess actual usefulness programmer checked likelihood expected location included rose top navigation suggestions assuming programmer won trouble judging suggestions 
formally likelihood query recommendations correct apply stands probability predicate example rose suggested topmost suggestions hold 

results navigation source code repeated experiment section projects support threshold confidence threshold navigation user gets recommendations 
results shown table page column navigation 
settings average recall average precision values eclipse section 
average likelihood topmost suggestions predicting correct location 
jedit lower recall precision likelihood values gcc strikes high values 
reason jedit projects continuously new features inserted predicted history gcc stable system focus maintaining existing features 
initial changed entity rose predict entities changed transaction 
transactions rose topmost suggestions contain correct location 

results error prevention supporting navigation rose prevent errors 
scenario user decides commit changes version archive rose checks related changes changed 
issues pop window warning suggests missing entities considered 
wanted determine cases rose predict missing entity 
purpose took transaction left entity checked rose predict missing entity 
words query complete transaction missing entity 
single transaction entity entities queried entities checked rose predict 
transaction ran entities tests 
false warnings undermine rose credibility rose set issue warnings high confidence threshold exceeded 
wanted get missing entities possible resulting support threshold 
results shown table column prevention average recall 
means queries gcc th query rose correctly predicted missing entity 
average precision 
means second recommendation rose correct warning occurs rose recommends entities user average check false recommendation getting correct 
navigation prevention closure support confidence project rm pm eclipse gcc jboss jedit postgres python average table 
results fine granularity recall precision likelihood transaction change missing rose predict entities need changed 
average second recommended entity correct 

results closure final question error prevention scenario false alarms rose produce case entity missing 
simulated testing complete transactions 
transaction queried entities checked rose predict test transaction 
expected outcome empty set recall 
measure number false warnings micro evaluation anymore single false alarm results summarized precision 
turn macro evaluation precision precision single query setting entity recommended entities recommended pm percentage commits rose issued warning pm percentage false alarms 
results shown table column closure 
see precision high projects usually 
means rose issues false alarm th transaction 
rose warnings missing changes taken seriously transactions cause false alarm 
words rose stand way 

results granularity default rose recommends entities fine granularity level variables functions 
results low coverage rules project functions rarely changed 
hypothesis applied mining files variables functions get higher support higher recall 
navigation prevention closure support confidence project rm pm eclipse gcc jboss jedit postgres python average table 
results coarse granularity recall precision likelihood repeated experiments sections coarse granularity mining applying rules files entities 
results shown table 
turns coarser granularity increases recall cases dramatically factors show 
precision stays comparable increased 
rose suggests file entity suggestions frequent precise 
single suggestion useful suggests specific location file precise entity 
possible consequence result rose start vague suggestions say regarding files packages specific user progresses 
plan apply extend generalized association rules rose suggest finest granularity possible :10.1.1.144.4956
changed file rose predict files changed transaction 
transactions rose topmost suggestions contain correct location 

threats validity studied transactions open source programs 
programs different claim version histories representative kinds software projects 
particular evaluation allow predictive power closed source projects 
stricter software process result higher precision higher recall better predictability 
general trade entities contained file suggestion regarding file yield precision recall totally useless time 
transactions record order individual changes involved 
evaluation take order account changes treats changes equal 
practice expect specific orderings changes frequent may affect results navigation prevention 
attempt assess quality transactions rose learned past transactions regardless may desired 
consequently rules learned evaluated may reflect practices bad practices 
believe competent programmers transactions bad transactions bad learn history 
examined predictive power rose assumed suggesting change narrowed single file single entity useful 
may missing related changes detected compilation tests case rose suggestions harm may known trained programmers anyway may find rose suggestions correct distracting 
eventually usefulness programmer determined studies real users intend accomplish 

related independently annie ying developed approach uses association rule mining cvs version archives 
especially evaluated usefulness results considering recommendation valuable surprising determined program analysis recommendations mozilla eclipse projects 
contrast rose ying tool suggest files finer grained entities support mining fly 
change data various researchers quantitative analyses 
word frequency analysis keyword classification log messages identify purpose changes relate change size time changes 
various researchers computed metrics module file level orthogonal feature investigated change metrics time different releases versions system :10.1.1.48.910
gall release data detect logical coupling modules 
cvs history allows detect fine grained logical coupling classes files functions 
works logical coupling address predictive power 
inductive learning learn different concepts relevance logically coupled files 
concept set attributes file name extension simple metrics number routines defined 
files attributes relevant 
thoroughly evaluated predictive power concepts papers gives convincing example concept 
amir data mining source code programming libraries detect reuse patterns form association generalized association rules 
take inheritance relations account 
items rules re relationships method invocation inheritance instantiation overriding 
papers lack evaluation quality patterns 
mines single version rose uses changes different versions 
guide programmers number tools exploited textual similarity log messages program code 
improves sources mail archives online documentation account 
contrast rose tools focus high recall high precision relationships files classes fine grained entities 

consequences rose helpful tool suggesting changes warning missing changes 
learn history better suggestions stable systems gcc rose gives precise suggestions related files related entities predicted precision single suggestion likelihood topmost suggestions 
rapidly evolving systems jedit rose useful suggestions file level 
surprising rose predict new functions probably reach approach 
erroneous transactions rose correctly detects missing change 
warning occurs taken seriously transactions cause false alarms 
learned history suggestions 
plans taxonomies 
change method implies change enclosing class implies changes enclosing files packages 
want exploit taxonomies identify patterns change implies change package method may precise location provide higher confidence 
sequence rules 
right relating changes occur transaction 
want detect rules multiple transactions system tested released indicated appropriate changes 
data sources 
archived changes contain just author date location 
scan log messages including change committed determine concern change related say fix vs new feature 
program analysis 
unused data source program analysis approach detect coupling items programs knowing semantics programs help separating related changes non 
furthermore coupling analysis need repeated rose suggestions 
rule presentation 
rules detected rose describe factual software process may may intended process 
consequently rules explicit 
previous visual mining detect regularities irregularities logically coupled items 
visualizations explain recommendations programmers managers 
currently making rose available plug eclipse 
information download installation see www st cs uni sb de acknowledgments 
project funded deutsche forschungsgemeinschaft ze 
holger cleve carsten rg christian lindig stefan anonymous icse reviewers gave helpful comments earlier revisions 
agrawal srikant 
fast algorithms mining association rules 
proceedings th large data bases conference vldb pages 
morgan kaufmann 
atkins 
version sensitive editing change history programming tool 
magnusson editor proceedings system configuration management scm volume lncs pages 
springer verlag 
ball :10.1.1.48.910
kim porter 
version control system talk 
icse workshop process modelling empirical studies software engineering 
bieman andrews yang 
understanding change proneness oo software visualization 
proc 
th international workshop program comprehension pages portland oregon may 
chen chou wong yao zhang zhang 
searching source code cvs comments 
icsm pages 
murphy 
recommending pertinent software development artifacts 
icse pages 
fogel neill 
cvs cl pl cvs log message conversion script sept 
www com cvs cl 
gall hajek jazayeri 
detection logical coupling product release history 
proc 
international conference software maintenance icsm pages washington usa nov 
ieee 
gall jazayeri kl sch 
software evolution observations product release history 
proceedings international conference software maintenance icsm pages 
gall jazayeri 
cvs release history data detecting logical couplings 
pages 
graves karr marron 
predicting fault incidence software change history 
ieee transactions software engineering 
hassan holt 
chaos software development 

proc 
th international conference software engineering icse portland oregon may 
proc 
international conference software maintenance icsm florence italy nov 
ieee 
proc 
international workshop principles software evolution helsinki finland sept 
ieee press 

data mining library reuse patterns user selected applications 
proc 
th international conference automated software engineering ase pages cocoa beach florida usa oct 
ieee press 

data mining library reuse patterns generalized association rules 
international conference software engineering pages 
mockus votta 
identifying reasons software changes historic databases 
proc 
international conference software maintenance icsm pages san jose california usa oct 
ieee 
mockus weiss zhang 
understanding predicting effort software projects 
icse pages 
rijsbergen 
information retrieval nd edition 
butterworths london 
lethbridge matwin 
supporting maintainance legacy software data mining techniques 
icsm pages 
lethbridge matwin 
mining maintenance history legacy software system 
proc 
international conference software maintenance icsm amsterdam netherlands sept 
ieee 
srikant agrawal :10.1.1.144.4956
mining generalized association rules 
proceedings th large data bases conference vldb pages 
srikant vu agrawal :10.1.1.41.407
mining association rules item constraints 
proceedings rd international conference kdd data mining kdd newport beach california usa aug 
ying 
predicting source code changes mining revision history 
master thesis university british columbia canada oct 
zeller hildebrandt 
simplifying isolating input 
ieee transactions software engineering feb 
zimmermann diehl zeller 
history justifies system architecture 
pages 
zimmermann wei gerber :10.1.1.90.9987
preprocessing cvs data fine grained analysis 
technical report saarland university mar 
submitted publication 
