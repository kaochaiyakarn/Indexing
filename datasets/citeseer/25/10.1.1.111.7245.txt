compositional model checking clarke long mcmillan april cmu cs school computer science carnegie mellon university pittsburgh pa appear proceedings fourth ieee symposium logic computer science june asilomar ca 
describe method reducing complexity temporal logic model checking systems composed parallel processes 
goal check properties components system deduce global properties local properties 
main difficulty type approach local properties preserved global level 
general framework additional interface processes model environment component 
interface processes typically simpler full environment component 
composing component interface processes checking properties composition guarantee properties preserved global level 
give example compositional systems logic ctl 
research sponsored part defense advanced research projects agency dod arpa order amendment contract number monitored avionics laboratory air force wright aeronautical laboratories systems division afsc united states air force wright patterson afb ohio research partially supported nsf ccr 
second author holds nsf graduate fellowship 
temporal logic model checking procedures successful finding subtle errors relatively small finite state systems suffer apparently unavoidable problem state explosion problem 
problem arises systems composed parallel processes 
general size parallel composition may grow product sizes components 
phenomenon program relatively small number processes may far states model checking procedure directly useful 
obvious technique avoiding state explosion problem exploit natural decomposition complex parallel program processes 
goal approach verify processes individually piece results conclude original program correct 
main difficulty knowing property component process remains true parallel composition involving process 
easy come examples critical property process preserved process composed process 
similar technique may program constructed modular hierarchical fashion 
case lower level components may simplified hiding details need visible externally merging states indistinguishable 
original program reconstructed simplified components number states general smaller program checked correctness easily 
problem time ensuring simplified program satisfies logical properties original program 
number papers compositional techniques reasoning systems processes 
milner ccs calculus certainly compositional nature suitable showing equivalence processes handle liveness properties 
barringer written papers show give compositional temporal semantics parallel programming language csp clear semantics developing compositional model checking algorithm 
pnueli developed compositional proof system temporal logic assume guarantee paradigm 
primitive formulas logic triples form ip hi temporal formulas process 
formula true guaranteed behave execution environment behaves 
problem approach potential difficulty expressing necessary assumptions amount giving complete specification automaton temporal logic 
developed model checking algorithm environment modeled temporal logic formula complexity procedure exponential worst case 
mishra clarke investigated model checking algorithm asynchronous circuits exploit hierarchical structure circuit approach restricted particular fragment logic ctl general 
different equally natural approach model environment process process called interface process 
rule inference called interface rule provides basis compositional model checking technique 
interface rule allows deduce properties composition checking properties individual processes 
complexity showing holds technique roughly complexity computing parallel composition interface process algorithm constructing interface processes give general framework interface rule independent particular process model logic 
framework state simple conditions true process model associated logic order inference rule hold 
conditions easily checked show new logic satisfies inference rule 
give examples compositional systems inference rule valid 
systems branching time logic temporal logic ctl 
example uses asynchronous process model notion composition similar theoretical csp 
define equivalence relation processes allows finite stuttering computation paths 
definition appropriate reasoning asynchronous processes notion system state cases 
illustrate ideas prove correctness tree arbiter 
proof interesting shows simple inductive inductive argument combined model checking show tree arbiters arbitrary size correct 
second system designed synchronous digital systems 
efficient algorithm log deciding equivalence processes model 
illustration model consider simple cpu decoupled access execution units 
interface rule section give basic rule inference remainder obtaining compositional proofs systems finite state processes 
show rule sound set processes logic reasoning satisfy general easily checked conditions 
importance section complexity soundness proof quite simple generality conditions give 
set finite state processes assume know means processes equivalent 
process associated certain set atomic propositions distinguishing states transitions 
sigma denote set associated process set propositions associated parallel composition models actions interface rule processes union sets associated individual processes sigma sigma sigma sigma restriction sigma process obtained hiding symbols sigma sigma consequently sigma sigma sigma sigma suppose addition logic reasoning processes know means formula true process 
formula constructed set atomic propositions write sigma indicate propositions subset sigma interface rule deals parallel composition processes reader think processes connected set wires shown wires correspond symbols sigma sigma interface processes respectively 
intuitively observe wires connect 
analogous relationship holds processes basic inference rules state sigma sigma sigma sigma state minimization procedure known obtained running algorithm sigma procedure available rule useful long size significantly size similar comment applies soundness interface rule depends properties enumerate suppose sigma sigma implies sigma theta lambda ii 
process iii 
sigma sigma sigma sigma iv 
sigma sigma sigma iff sigma 
easy show follows hypotheses theorem properties 
show soundness simple rules sigma sigma sigma sigma handle arbitrary boolean combinations formulas analogous manner 
asynchronous process model defining simple model communicating system 
processes model asynchronous communicate shared synchronization actions 
represented form transition system 
definition finite transition system fts quadruple hk sigma delta finite set states 
ii 
initial state 
iii 
sigma finite set actions containing iv 
delta theta gamma sigma fo delta theta transition relation 
represents internal action fts 
define operations composition hiding renaming fts 
notation delta oe indicate phi qj oe delta psi oe sigma convention delta oe fpg oe sigma definition composition theta ii 

iii 
sigma sigma sigma iv 
delta gamma oe delta delta oe theta delta oe oe sigma delta gamma delta delta theta fp fpg theta delta 
notion composition style csp action oe fts synchronizes identical action second fts 
similar fashion define notions hiding denoted oe renaming denoted oe oe 
note operations defined certain obvious algebraic properties 
example composition commutative associative isomorphism 
associated fts set runs structure 
definitions terminology 
finite set notation lambda denotes set finite sequences elements denotes infinite sequences lambda definition run pair ss ss oe oe 
delta run initial state simply called run 
write lambda finite infinite runs define lambda required equivalence structures notion bisimulation 
formally fts 
definition theta theta monotonic theta implies 
equivalence preserving theta equivalence relation implies equivalence relation 
point restrict attention monotonic 
definition bisimulation 
define ss iff bisimulation define series approximations ss ss successively applying theta intersection approximations denoted ss fixpoint show ss ss ss equivalence relation equivalence preserving 
asynchronous process logic illustrate development compositional system framework branching time temporal logic 
logic essentially computation tree logic ctl emerson clarke 
process model defined previous section 
define class formulas ctl sigma specifying temporal properties alphabet sigma general ctl sigma formulas may express existence potentially infinite computation 
dealing infinite paths desirable impose certain fairness constraints possible paths 
example typically wish insure element composition progress possible 
method doing extend notion fts contain type fairness constraint 
take simpler flexible approach 
run fair transition enabled infinitely occurs infinitely 
condition sufficient guarantee progress components composition show show suitable ctl sigma 
suitable linear temporal logic 
show define labeling state fts 
semantics ctl sigma defined straightforward fashion respect labeling provision path quantifiers restricted fair runs 
equivalence denoted ss defined functional 
definition oe theta exists 
gamma oe lambda 
definition allow oe definition phi oe sigma fo theta oe implies oe lambda ii 
theta oe implies oe lambda psi lemma assume fts sigma sigma states ss ae lambda exist ae lambda partitions 

st ae st ae ss theorem assume fts sigma sigma states ss ctl sigma iff corollary ss ctl sigma iff 
show equivalence congruence respect operations 
hiding renaming result trivial 
composition 
theorem fts sigma sigma sigma sigma ss ss ss corollary theorem easy show conditions required interface rule satisfied 
conditions straightforward proofs 
example consider tree arbiter control access shared resource 
arbiter cell communication channels denote cp 
channel consists signals representing request 
user request channels initiates request server channel cp 
acknowledge received cp acknowledge passed user 
point user assumed access shared resource 
user initiates request acknowledge cycle finished 
combining arbiter cells binary tree form arbiter number users 
arbiter cells shown 
specification example 
represent arbiter cell composition fts shown 
fts users server shown 
user user user user server cell tree arbiter write arbiter arbiter cell 
verify class tree arbiters checking relations gamma arbiter user user rp ap delta ss user gamma arbiter user user rp ap delta ss user gamma arbiter user server rp ap delta rp ap ss server gamma arbiter user server rp ap delta rp ap ss server relation indicates compose users arbiter cell restrict actions server port result equivalent user 
user process interface process users arbiter cell 
relations similar interpretations 
perform induction structure tree arbiter deduce cell arbiter users leaves single server root equivalent cell environment users server arbiter user user server rp ap ap apt rp rp rp rp rp rp rp tree arbiter cell properties entire arbiter deduced properties components 
example liveness user checked immediately verifying gamma delta ensure mutual exclusion checking gamma delta gamma 
rp ap delta gamma 
rp ap delta example illustrates possible reason inductively system interface theorem 
synchronous model logic section introduce simple formal model finite state machine composition satisfies conditions interface theorem applicable synchronous systems 
communicating moore machines model 
rp ap ap rp user user server users server moore machine boolean valued inputs outputs internal state 
outputs function internal state state function current state inputs 
definition moore machine structure sigma sigma gamma theta set states ii 
initial state iii 
sigma sigma disjoint sets identifiers representing inputs outputs respectively iv 
gamma mapping sigma function mapping state output theta mapping 
sigma function mapping current state input state 
parallel composition moore machines depicted 
obtained connecting input output signals identifier 
outputs outputs composition inputs remain unconnected outputs inputs composition 
result connecting outputs undefined composition undefined outputs identifier 
definition machines sigma sigma disjoint moore machine def theta ii 
def hq iii 
sigma def sigma gamma sigma sigma gamma sigma iv 
sigma def sigma sigma gamma hs def gamma gamma ab de gd bc gd bc illustration moore machine composition 
vi 
theta hs ii def theta gamma sigma theta gamma sigma items appropriate type easily verified 
example mapping sigma gamma mapping sigma sigma sigma gamma sigma mapping sigma expression gives input valuation determines state composition terms input composition output hiding outputs moore machine accomplished restriction operator 
inputs hidden theta cease function case 
definition moore machine sigma set identifiers containing sigma sigma moore machine identical components sigma def sigma sigma gamma def gamma sigma define equivalence moore machines 
definition state equivalence relation written context unambiguous moore machine unique greatest fixpoint functional theta theta hs iff hs ii 
gamma gamma iii 
sigma theta theta ii omitted proof monotonic equivalence preserving 
definition moore machines sigma sigma sigma sigma disjoint sum moore machine sigma sigma gamma gamma theta theta undefined 
definition moore machines state equivalence relation say equivalent denoted iff equivalence classes states moore machine computed coarsest partitioning algorithm 
algorithm determining determining initial states fall equivalence class time jm jm log jm jm minimized time jm log jm 
logic temporal logic ctl subsumes linear temporal logic ltl computation tree logic ctl 
semantics logic defined respect kripke associate definition kripke structure moore machine yields product semantics moore machines 
definition moore machine set pairs hs ii mapping sigma kripke state moore machine state coupled valuation moore machine inputs ii 
set pairs hq ii mapping sigma initial states kripke structure iii 
map 
sigma sigma lhs ii def gamma atomic propositions kripke structure correspond inputs outputs moore machine iv 
theta hs iff theta transition relation kripke structure 
definition moore machine ctl formula iff prove definitions satisfy preconditions interface rule 
precondition equivalent moore machines satisfy formulas logic 
prove show implies denotes strong bisimulation equivalence kripke structures 
kripke structures strongly satisfy set ctl formulas 
define relation ss states follows 
definition kripke structure states hs hs ss iff lemma relation ss strong bisimulation proof relation ss strong bisimulation hs ss hs implies lhs lhs ii 
hs implies exists hs hs iii 
hs implies exists hs hs item trivial hs ss hs implies gamma gamma second item hs implies theta definition definition 
theta theta fixed point definition satisfying item 
proof third item similar 
corollary proof implies state equivalence lemma implies strong bisimulation sigma hq ii hq ii second precondition interface rule imply 
prove define relation ss different ss states follows definition hs ss hs iff note relation ss fixed point proposition imply proof state equivalence relation greatest fixed point hs ss hs implies hs hs definition hq ss hq hq hq satisfying definition equivalence prove definitions satisfy precondition interface rule 
requires equivalence show stronger condition equality 
lemma moore machines sigma set identifiers containing sigma sigma sigma sigma sigma proof consider gamma theta components 
sigma sigma sigma 
gamma hs gamma sigma gamma sigma gamma gamma sigma gamma hs theta hs ii theta gamma sigma sigma theta gamma sigma sigma theta gamma sigma theta gamma sigma theta hs ii components trivially equal 
precondition interface rule satisfied kripke structure sigma corresponding sigma just state labelling function restricted sigma kripke structure satisfies set formulas sigma clarke describe application interface rule reduce complexity verifying system communicating moore machines 
example modular controller simple cpu decoupled access execution units 
hiding outputs module applying hopcroft minimization algorithm produce reduced interface process number states composition reduced roughly factor verifying specification module 
directions research important open question course compositional techniques described permit verification complicated finite state concurrent systems previously case 
determined experimentation 
clear technique suitable loosely coupled systems 
relationship hold interface processes may large get significant state reduction interface theorem 
fortunately parallel composition tightly coupled processes generate states parallel composition loosely coupled processes comparable size simply possible interleavings 
consequently compositional reasoning may important case case loosely coupled processes 
interesting see results apply process models 
systems finite transition systems propositional dynamic logic ccs hennessy milner logic results straightforward full version 
techniques quite caesar system sifakis 
possible apply ideas berry esterel harel statecharts logic ctl 
techniques describe limitations 
example interface rule allows handle formulas boolean combinations temporal properties individual processes parallel composition 
currently unable handle general properties involving temporal assertions processes 
developing general rules important direction research hard 
grumberg obtained negative results indicate may impossible develop fully general system inference rules handle arbitrary temporal properties 
furthermore cases necessary combine interface rule model checker proofs validity certain ctl formulas 
order interface rule may necessary prove implication form oe ffi ffi ctl formula expresses global property 
believe cases possible informal reasoning establish implications 
barringer 
temporal logic compositional specification concurrent systems 
conference temporal logic applications 
leeds university january 
berry 
esterel synchronous programming language mathematical semantics 
technical report ecole nationale des mines de paris 
browne clarke dill 
automatic circuit verification temporal logic new examples 
formal aspects vlsi design 
elsevier science publishers 
browne clarke dill mishra 
automatic verification sequential circuits temporal logic 
ieee transactions computers december 
clarke emerson 
synthesis synchronization skeletons branching time temporal logic 
proceedings workshop logic programs pages 
springer verlag 
clarke emerson sistla 
automatic verification finite state concurrent systems temporal logic specifications 
acm transactions programming languages systems 
clarke long mcmillan 
language compositional specification verification finite state hardware controllers 
proceedings conference hardware description languages 
appear 
dill 
trace theory automatic verification circuits 
phd thesis carnegie mellon university pittsburgh pa 
dill clarke 
automatic verification asynchronous circuits temporal logic 
iee proceedings part september 
emerson halpern 
revisited branching versus linear time temporal logic 
journal association computing machinery january 
emerson chin lei 
modalities model checking branching time strikes back 
conference record twelth annual acm symposium principles programming languages new orleans la january 
grumberg 
personal communication 
harel 
dynamic logic 
guenthner editors handbook philosophical logic ii pages 
reidel 
harel 
statecharts visual approach complex systems 
technical report cs weizmann institute science february 
hoare 
communicating sequential processes 
communications association computing machinery august 
hopcroft 
log algorithm minimizing states finite automaton 
theory machines computation pages 
academic press new york 

extension ctl modular verification concurrent systems 
barringer editor workshop temporal logic 
university manchester april 
appear lncs 
lichtenstein pnueli 
checking finite state concurrent programs satisfy linear specification 
conference record twelth annual acm symposium principles programming languages new orleans la january 
milner 
calculus communicating systems volume lecture notes computer science 
springer verlag berlin 
mishra clarke 
hierarchical verification asynchronous circuits temporal logic 
theoretical computer science 
pnueli 
transition global modular temporal reasoning programs 
apt editor logics models concurrent systems pages 
springer verlag 
sifakis 
specification verification concurrent systems cesar 
proceedings fifth international symposium programming 
vardi wolper 
automata theoretic approach automatic program verification 
proceedings conference logic computer science boston mass june 

