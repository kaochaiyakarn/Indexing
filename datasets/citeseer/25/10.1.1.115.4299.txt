oceanstore architecture global scale persistent storage john kubiatowicz david bindel yan chen steven czerwinski patrick eaton dennis geels ramakrishna gummadi sean rhea hakim weatherspoon weimer chris wells ben zhao oceanstore utility infrastructure designed span globe provide continuous access persistent information 
infrastructure comprised untrusted servers data protected redundancy cryptographic techniques 
improve performance data allowed cached anytime 
additionally monitoring usage patterns allows adaptation regional outages denial service attacks monitoring enhances performance pro active movement data 
prototype implementation currently development 
past decade seen growth performance computing devices 
significant rapid pace miniaturization related reduction power consumption devices 
trends envision world ubiquitous computing devices add intelligence adaptability ordinary objects cars clothing books houses 
revolution occur computing devices reliable resilient completely transparent user 
pursuing transparency question immediately comes mind persistent information reside 
persistent information necessary transparency permits behavior devices independent devices allowing embedded component rebooted replaced losing vital configuration information 
loss destruction device lead lost data 
note uniform infrastructure accessing managing persistent information provide transparent synchronization devices 
maintaining consistency devices infrastructure allows users safely access information different devices research supported nsf career award ani darpa darpa dabt 
patrick eaton supported national defense science engineering graduate fellowship dennis geels supported fannie john hertz foundation hakim weatherspoon supported intel masters fellowship 
university california berkeley oceanstore cs berkeley edu simultaneously 
today sharing requires laborious manual synchronization 
ubiquitous computing places requirements persistent infrastructure 
form possibly intermittent connectivity provided computing devices matter small 
fortunately increasing levels connectivity provided consumers cable modems dsl cell phones wireless data services 
second information kept secure theft denial service dos 
assume connectivity need take extra measures sure information protected eyes malicious hands 
third information extremely durable 
changes submitted infrastructure earliest possible moment sorting proper order consistent commitment may come 
archiving information automatic reliable 
information divorced location 
centralized servers subject crashes dos attacks unavailability due regional network outages 
bandwidth core internet doubling incredible rate latency improving quickly 
connectivity leaves network intermittent high latency low bandwidth 
achieve uniform highly available access information servers geographically distributed exploit caching close clients 
result envision model information free migrate needed somewhat style coma shared memory multiprocessors 
rough estimate imagine providing service roughly users files 
oceanstore support files 
oceanstore true data utility envision cooperative utility model consumers pay monthly fee exchange access persistent storage 
utility highly available network employ automatic replication disaster recovery strong security default provide performance similar existing lan networked storage systems cir copyright 
services provided confederation permission digital hard copies part personal classroom granted fee provided copies distributed companies 
user pay fee particular util profit commercial advantage copies bear notice full provider consume storage bandwidth tion page 
copyrights components owned acm honored 
abstracting credit permitted 
copy resources different providers providers buy republish post servers redistribute lists requires prior specific sell capacity difference 
air sion fee 
request permissions publications dept acm fax permissions acm org 
ports small caf install servers premises give asplos cambridge ma nov customers better performance return get small dividend participation global utility 
ideally user data oceanstore return utility economies scale yield better availability performance reliability available 
geographic distribution servers support deep archival storage storage survive major disasters regional outages 
time desktop workstations routinely ship tens gigabytes spinning storage management data far expensive storage media 
oceanstore hopes take advantage excess storage space management data seamless 
unique goals oceanstore system design goals differentiate similar systems ability constructed untrusted infrastructure support nomadic data 
untrusted infrastructure oceanstore assumes infrastructure fundamentally untrusted 
servers may crash warning leak information third parties 
lack trust inherent utility model different cryptographic systems 
clients trusted cleartext information enters infrastructure encrypted 
assuming servers passive repositories information cfs allow servers able participate protocols distributed consistency management 
assume servers working correctly time class servers trust carry protocols behalf trust content data 
responsible party financially responsible integrity data 
nomadic data system large oceanstore locality extreme importance 
goal data cached anytime illustrated 
call policy promiscuous caching 
data allowed flow freely called nomadic data 
note nomadic data extreme consequence separating information physical location 
promiscuous caching complicates data coherence location provides great flexibility optimize locality trade consistency availability 
exploit flexibility continuous introspective monitoring discover tacit relationships objects 
resulting meta information locality management 
promiscuous caching important distinction oceanstore systems nfs afs cached data confined particular servers particular regions network :10.1.1.14.473
experimental systems xfs allow cooperative caching systems connected fast lan :10.1.1.120.5:10.1.1.110.7161
rest follows section gives system level overview oceanstore system 
section shows sample applications oceanstore 
section gives architectural detail section reports status current prototype 
section examines related 
concluding remarks section 
system overview oceanstore prototype currently development 
section provides brief overview planned system 
details individual system components left section 
fundamental unit oceanstore persistent object 
object named globally unique identifier guid 
pool pool pool pool oceanstore system 
core system composed multitude highly connected pools data allowed flow freely 
clients connect pools intermittently 
objects replicated stored multiple servers 
replication provides availability presence network partitions durability failure attack 
replica independent server resides time refer floating replicas 
replica object located mechanisms 
fast probabilistic algorithm attempts find object near requesting machine 
probabilistic algorithm fails location left slower deterministic algorithm 
objects oceanstore modified updates 
updates contain information changes object assumed state object changes developed bayou system :10.1.1.40.8955
principle update oceanstore object creates new version consistency versioning expensive implement update place consistency provides cleaner recovery face system failures 
obviates need backup supports permanent pointers information 
oceanstore objects exist active archival forms 
active form object latest version data handle update 
archival form represents permanent read version object 
archival versions objects encoded erasure code spread hundreds thousands servers data reconstructed sufficiently large subset fragments result short global disaster destroy information 
call highly redundant data encoding deep archival storage 
application writer views oceanstore number sessions 
session sequence read write requests related session guarantees style bayou system :10.1.1.40.8955
session guarantees dictate level consistency seen session reads writes range supporting extremely loose consistency semantics supporting acid semantics favored databases 
support legacy code oceanstore provides array familiar interfaces unix file system interface simple transactional interface 
application semantics allow availability provided expense consistency 
fact groups updates combined create new versions plan provide interfaces retiring old versions elephant file system 
pool pool pool flexibility afforded naming mechanism promote hands system maintenance oceanstore exploits number dynamic optimizations control placement number migration objects 
classify optimizations heading introspection architectural paradigm formalizes automatic dynamic optimization employed intelligent systems 
applications section applications considering oceanstore 
applications constructed isolation oceanstore enables developed easily completely providing single infrastructure shared difficult problems 
problems include consistency security privacy wide scale data dissemination dynamic optimization durable storage disconnected operation 
oceanstore solves problems allowing application developers focus higher level concerns 
obvious class applications oceanstore groupware personal information management tools calendars email contact lists distributed design tools 
applications challenging implement allow concurrent updates people 
require users see progressing view shared information conflicts occur 
oceanstore flexible update mechanism solves problems 
provides ways merge information detect conflicts infrastructure disseminate information interested parties 
additionally oceanstore provides ubiquitous access data device access information 
email particularly interesting groupware target oceanstore 
email applications appear mundane surface implementations difficult obvious solution filtering messages single email server scale distributed solutions complicated internal consistency issues 
example email inbox may simultaneously written numerous different users read single user 
operations message move operations occur atomically face concurrent access clients avoid data loss 
addition email requires privacy security nature 
oceanstore alleviates need clients implement locking security mechanisms enabling powerful features nomadic email collections disconnected operation 
introspection permits user email migrate closer client reducing round trip time fetch messages remote server 
oceanstore enables disconnected operation optimistic concurrency model users operate locally cached email disconnected network modifications automatically disseminated reconnection 
addition groupware applications oceanstore create large digital libraries repositories scientific data 
applications require massive quantities storage turn require complicated management 
oceanstore provides common mechanism storing managing large data collections 
replicates data durability availability 
deep archival storage mechanisms permit information survive face global disaster 
oceanstore benefits applications providing seamless migration data needed 
example oceanstore quickly disseminate vast streams data physics laboratories researchers world analyze data 
oceanstore provides ideal platform new streaming applications sensor data aggregation dissemination 
speculated utility data emanate plethora small mems sensors oceanstore provides uniform infrastructure transporting filtering aggregating huge volumes data result 
system architecture section describe underlying technologies support oceanstore system 
start basic issues naming access control 
proceed description data location mechanism locate objects world 
discuss oceanstore update model issues involved consistency management untrusted infrastructure 
brief word architecture archival storage discuss oceanstore api clients 
provide description role introspection oceanstore 
naming lowest level oceanstore objects identified globally unique identifier guid thought pseudorandom fixed length bit string 
users system clearly want accessible naming facility 
provide facility decentralized resistant attempts adversaries hijack names belong users adapted idea self certifying path names due mazi res 
object guid secure hash owner key human readable name 
scheme allows servers verify object owner efficiently facilitates access checks resource accounting certain oceanstore objects act directories mapping names guids 
allow arbitrary directory hierarchies built allow directories contain pointers directories 
user oceanstore choose directories roots secure directories external methods public key authority 
note root directories roots respect clients system root 
scheme solve problem generating secure guid mapping reduces problem secure key lookup 
address problem locally linked name spaces sdsi framework :10.1.1.34.3463
note guids identify number oceanstore entities servers archival fragments 
guid server secure hash public key guid archival fragment secure hash data holds 
described section entities oceanstore may addressed directly guid 
access control oceanstore supports primitive types access control reader restriction writer restriction 
complicated access control policies working groups constructed 
restricting readers prevent unauthorized reads encrypt data system completely public distribute encryption key users read permission 
revoke read permission owner request replicas deleted re encrypted new key 
revoked reader able prototype system uses sha secure hash 
note user public key 
choose different public keys private objects public objects objects shared various groups 
read old data cached copies misbehaving servers fail delete re key problem unique oceanstore 
conventional system way force reader forget read 
restricting writers prevent unauthorized writes require writes signed behaved servers clients verify access control list acl 
owner object securely choose acl object foo providing signed certificate translates owner says acl object foo 
specified acl may object value indicating common default 
acl entry extending privileges describe privilege granted signing key explicit identity privileged users 
entries publicly readable servers check write allowed 
plan adopt ideas systems taos policymaker allow users express reason formally wide range possible policies :10.1.1.44.6276
note asymmetry introduced encrypted data reads restricted clients key distribution writes restricted servers ignoring unauthorized updates 
data location routing entities oceanstore free reside oceanstore servers 
freedom provides maximum flexibility selecting policies replication availability caching migration 
unfortunately complicates process locating interacting entities 
restricting placement data aid location process oceanstore tackles problem data location head 
paradigm query routing network takes active role routing messages objects 
distributed routing oceanstore addressable entity oceanstore floating replica archival fragment client identified guids 
entities functionally equivalent different replicas object identified guid 
clients interact entities series protocol messages described subsequent sections 
support location independent addressing oceanstore messages labeled destination guid random number small predicate 
destination ip address appear messages 
role oceanstore routing layer route messages directly closest node matches predicate desired guid 
order perform routing process oceanstore networking layer consults distributed fault tolerant data structure explicitly tracks location objects 
routing phase process 
messages routing node node distributed data structure destination discovered 
point route directly destination 
important note oceanstore routing layer supplant ip routing provides additional functionality top ip 
advantages combining data location routing way 
foremost task routing particular message handled aggregate resources different nodes 
exploiting multiple routing paths destination serves limit power compromised nodes deny service client 
second messages route directly destination avoiding multiple round trips separate data location routing process incur 
underlying infrastructure date information current location en probabilistic query process 
replica looking object guid hashes bits 
local bloom filter rounded box shows object neighbor filter box indicates intermediate node en route object 
query moves bloom filter indicates document locally neighbor doesn neighbor 
query forwarded verifies object 
clients 
consequently combination location routing permits communication closest entity entity client heard past 
replicas move network users data needs know 
mechanism routing tiered approach featuring fast probabilistic algorithm backed slower reliable hierarchical method 
justification level hierarchy entities accessed frequently reside close mechanisms ensure locality described section 
probabilistic algorithm routes entities rapidly local vicinity 
attempt fails large scale hierarchical data structure style plaxton locates entities locally :10.1.1.38.1850
describe techniques sections 
attenuated bloom filters probabilistic algorithm fully distributed uses constant amount storage server 
idea hillclimbing query satisfied server local information route query neighbor 
modified version bloom filter called attenuated bloom filter implement potential function :10.1.1.20.2080
attenuated bloom filter depth viewed array normal bloom filters 
context algorithm bloom filter record objects contained locally current node 
th bloom filter union bloom filters nodes distance path current node 
attenuated bloom filter stored directed edge network 
query routed edge filter indicates presence object smallest distance 
process illustrated 
current metric distance hop count hope include precise measure corresponding roughly latency 
reliability factors applied locally increase distance nodes abused protocol past automatically routing certain classes attacks 
ca bb portion global mesh rooted node 
paths node root tree traversed resolving root id digit time bold arrow shows route node node 
data location uses structure 
note object searches travel way root see text 
global algorithm wide scale distributed data location global algorithm oceanstore variation plaxton randomized hierarchical distributed data structure embeds multiple random trees network :10.1.1.38.1850:10.1.1.38.1850
oceanstore uses highly redundant version data structure instructive understand basic plaxton scheme 
scheme server system assigned random unique node id node ids construct mesh neighbor links shown 
link labeled level number denotes stage routing uses link 
example links constructed node id dividing chunks bits 
level neighbor links node point closest neighbors node ids match lowest node id different combinations nibble links loopback link 
link constructed node meets proper constraints scheme chooses node matches constraints closely possible 
process repeated nodes levels node 
key observation links form series random embedded trees node root trees 
result neighbor links route node simply resolving node address link time level link level link structure data location map object single node node id matches object guid bits starting significant call node object root 
information guid location stored root find information simply neighbor links reached root node guid 
described scheme nice load distribution properties guids randomly mapped infrastructure 
closest means respect underlying ip routing infrastructure 
roughly speaking measurement metric time route ip 
random distribution appear reduce locality plaxton scheme achieves locality follows replica placed system location published routing infrastructure 
publishing process works way object root deposits pointer hop way 
process requires hops number servers world 
searches information climb tree run pointer route directly object 
authors show average distance traveled proportional distance source query closest replica satisfies query :10.1.1.38.1850
achieving fault tolerance basic scheme described sensitive number different failures 
object single root single point failure potential subject denial service attacks availability problem 
oceanstore addresses weakness simple way hashes guid small number different salt values 
result maps different root nodes gaining redundancy simultaneously making difficult target single node denial service attack range guids 
second problem scheme sensitivity corruption links pointers 
important observation structure sufficient redundancy tolerate small amounts corruption 
bad links immediately detected routing continued jumping random neighbor node increase redundancy oceanstore location structure supplements basic links scheme additional neighbor links 
infrastructure continually monitors repairs neighbor links form introspection see section servers slowly repeat publishing process repair pointers 
advantages distributed information advantages plaxton data structure oceanstore 
highly redundant fault tolerant structure spreads data location load evenly finding local objects quickly 
combination probabilistic global algorithms comfortably scale millions servers 
second aggregate information contained data structure sufficient recognize servers identify data reconstructed server permanently removed 
feature important maintaining minimum level redundancy deep archival storage 
plaxton links form natural substrate perform network functions admission control multicast 
achieving maintenance free operation existing plaxton data structures include algorithms online creation maintenance global mesh produced recursive node insertion removal algorithms 
redundant neighbor links mentioned 
generalized publication algorithm support replicated roots remove single points failure data location 
optimized failure modes beacons detect faults quickly time live fields react better routing updates second chance algorithm minimize cost recovering lost nodes 
information coupled continuous repair mechanisms recognize tree spans node node able reach root 
servers long time need data reconstructed practical implication oceanstore infrastructure automatically adapts presence absence particular servers human intervention greatly reducing cost management 
update model applications described section exhibit high degree write sharing 
allow concurrent updates avoiding problems inherent wide area locking oceanstore employs update model conflict resolution 
conflict resolution introduced bayou system supports range consistency semantics including acid semantics :10.1.1.40.8955
additionally conflict resolution reduces number aborts normally seen detection schemes optimistic concurrency control 
flexible conflict resolution requires ability perform server side computations data 
untrusted infrastructure replicas access ciphertext server trusted perform commits 
issues complicate update architecture 
current oceanstore design able handle types conflict resolution directly encrypted data 
paragraphs describe issues involved progress solving 
update format semantics changes data objects oceanstore updates lists predicates associated actions 
semantics update follows apply update data object replica evaluates update predicates order 
predicates evaluates true actions associated earliest true predicate atomically applied data object update said commit 
changes applied update said abort 
update logged regardless commits aborts 
note oceanstore update semantics similar bayou system eliminated merge procedure arbitrary computations manipulations ciphertext intractable 
preserve key functionality model expressive number sample applications including group calendar shared bibliographic database mail application 
furthermore model applied useful applications 
instance coda provided specific merge procedures conflicting updates directories type conflict resolution easily supported model 
slight extensions model support lotus notes style conflict resolution unresolvable conflicts result branch object version stream 
model provide acid semantics predicate check read set transaction corresponding action applies write set predicate action pairs 
extending model ciphertext oceanstore replicas trusted unencrypted information 
complicates updates restricting set predicates replicas compute set actions able apply 
predicates currently possible compare size compare block search 
predicates trivial unencrypted meta data note read nature information oceanstore reconstruction particularly easy see section 
block block block encrypted insert block block block block block insertion ciphertext 
client wishes insert block appends block object replaces old block block pointing appended blocks 
server learns contents blocks 
object 
compare block operation easy encryption technology position dependent block cipher client simply computes hash encrypted block submits block number comparison 
impressive predicates search performed directly ciphertext operation reveals search performed boolean result 
cleartext search string revealed server initiate new searches 
addition predicates operations applied ciphertext replace block insert block delete block append 
assuming position dependent block cipher replace block append operations simple reasons compare block 
operations insert block delete block performed grouping blocks object sets index blocks data blocks index blocks contain pointers blocks object 
insert replaces block insertion point new block points old block inserted block appended object 
scheme illustrated 
delete replaces block question empty pointer block 
note scheme leaks small amount information susceptible compromise traffic analysis attack users uncomfortable leakage simply append encrypted log records object rely powerful clients occasionally generate re encrypt object logs 
schemes section clearly impact format objects 
schemes subject ongoing research flexible techniques doubtless follow 
serializing updates untrusted infrastructure process conflict resolution starts series updates chooses total order applies atomically order 
easiest way compute order require updates pass master replica 
unfortunately trusting replica perform task incompatible untrusted infrastructure assumption oceanstore built 
replace master replica primary tier replicas 
replicas cooperate byzantine agreement protocol choose final commit order updates secondary tier replicas communicates primary tier enhanced epidemic algorithm bayou 
decision classes floating replicas motivated considerations 
known protocols byzantine agreement protocol assume total replicas faulty 
path update 
generating update client sends directly object primary tier random replicas object 
primary tier performs byzantine agreement protocol commit update secondary replicas propagate update 
primary tier finished agreement protocol result update multicast dissemination tree secondary replicas 
ant arbitrary replica failures communication intensive handful replicas 
primary tier consists small number replicas located high bandwidth high connectivity regions network allow offline verification party participate protocol exploring proactive signature techniques certify result serialization process 
hope extend protocol techniques :10.1.1.127.6130
applications may gain performance availability requiring lesser degree consistency acid semantics 
applications motivate secondary tier replicas oceanstore 
secondary replicas participate serialization protocol may contain incomplete copies object data numerous primary replicas 
organized application level multicast trees called dissemination trees serve conduits information primary tier secondary tier 
things dissemination trees push stream committed updates secondary replicas serve communication paths secondary replicas pull missing information parents primary replicas 
architecture permits dissemination trees transform updates invalidations progress downward transformation exploited leaves network bandwidth limited 
secondary replicas contain tentative committed data 
employ epidemic style communication pattern quickly spread tentative commits pick tentative serialization order 
increase chances tentative order match final ordering chosen primary replicas clients optimistically timestamp updates 
secondary replicas order tentative updates timestamp order primary tier uses timestamps guide ordering decisions 
serialization decisions secondary tier tentative may safely decided untrusted replicas applications requiring stronger consistency guarantees simply wait updates reach primary tier 
direct path clients archival storage full path update shown 
note path optimized low latency high throughput 
ideal choice replicas include primary tier left client responsible party ensure chosen group satisfies byzantine assumption mentioned 
tentative data data primary replicas committed 
circumstances updates flow directly client primary tier servers serialized multicast secondary servers 
messages shown addressed guids described section 
consequently update protocol operates entirely physical location replicas 
important aspect oceanstore differs existing systems fact archival mechanisms tightly coupled update activity 
choosing final order updates inner tier servers signs result sends dissemination tree 
time servers generate encoded archival fragments distribute widely 
consequently updates extremely durable direct side effect commitment process 
section discusses archival storage detail 
efficiency consistency protocol main points interest considering efficiency consistency protocol amount network bandwidth protocol demands latency update created client receives notification committed aborted 
assuming byzantine agreement protocol total cost update bytes sent network equation size update number replicas primary tier sizes small protocol messages :10.1.1.127.6130
equation appears dominated term constant quite small order bytes 
sufficiently small large updates equation dominated term 
replicas minimum amount bytes transfered keep replicas date 
shows cost update normalized minimum amount function update size 
note normalized cost approaches update sizes bytes approaches update sizes bytes 
updates bytes system uses double minimum amount network bandwidth necessary keep replicas primary tier date 
recall number faulty replicas tolerated byzantine agreement protocol 
normalized cost update size cost update bytes sent network normalized minimum cost needed send update replicas 
unfortunately latency estimates consistency protocol difficult come functioning prototype 
reason suffice say phases messages protocol described 
assuming latency messages wide area dominates computation time message takes ms approximate latency update second 
believe latency reasonable need complete prototype system verify accuracy rough estimate 
deep archival storage archival mechanism oceanstore employs erasure codes interleaved read solomon codes tornado codes 
erasure coding process treats input data series fragments say transforms fragments greater number fragments say 
mentioned section fragments generated parallel inner tier servers commit process 
essential property resulting code coded fragments sufficient construct original data assuming spread coded fragments widely servers prevent recovery data 
call argument deep archival storage 
simple example help illustrate assertion 
assuming uncorrelated faults machines calculate reliability instant time formula probability document available number machines number currently unavailable machines number fragments document maximum number unavailable fragments allows document retrieved 
instance machines percent currently simple replication erasure codes provides nines reliability 
rate erasure coding document fragments gives document nines reliability consumes amount storage 
fragments reliability increases factor supporting assertion tornado codes faster encode decode require slightly fragments reconstruct information 
fragmentation increases reliability 
consequence law large numbers 
preserve erasure nature fragments meaning fragment retrieved correctly completely hierarchical hashing method verify fragment 
generate hash fragment recursively hash concatenation pairs hashes form binary tree 
fragment stored hashes neighboring path root 
retrieved requesting machine may recalculate hashes path 
top hash guid immutable archival object making fragment archive completely self verifying 
user provide naming syntax explicitly incorporates version numbers 
names included documents form permanent hyper link 
addition interfaces exist examine modification history set versioning policies 
principle version object archived clients choose produce versions frequently 
archival copies produced objects idle long time objects inactive 
generating archival fragments floating replicas object participate generate disjoint subset fragments disseminate infrastructure 
maximize survivability archival copies identify rank administrative domains reliability trustworthiness 
avoid fragments locations high correlated probability failure 
number fragments durability information determined object basis 
oceanstore contains processes slowly sweep existing archival data repairing increasing level replication increase durability 
reconstruct archival copies oceanstore sends request keyed guid archival versions 
note excess capacity insulate slow servers requesting fragments absolutely need reconstructing data soon fragments 
request propagates location tree section fragments discovered sent requester 
search nice locality properties closer fragments tend discovered 
oceanstore api oceanstore draws strength global scale wide distribution epidemic propagation method flexible update policy 
system complicated behavior 
oceanstore application programming interface api enables application writers understand interaction system 
base api provides full access oceanstore functionality terms sessions session guarantees updates callbacks 
session sequence reads writes potentially different objects related session guarantees 
guarantees define level consistency seen accesses session 
api provides mechanisms develop arbitrarily complex updates form described section 
api provides callback feature notify applications relevant events 
application register application level handler invoked occurrence relevant events commit abort update 
applications basic requirements supported facades standard api 
facade interface api provides traditional familiar interface 
example transaction facade provide abstraction atop oceanstore api developer access system optimization computation observation cycle introspection terms traditional transactions 
facade simplify application writer job ensuring proper session guarantees reusing standard update templates automatically computing read sets write sets update 
course oceanstore new system world legacy code unreasonable expect authors existing applications port system 
oceanstore provides number legacy facades implement common apis including unix file system transactional database gateway world wide web 
interfaces exist libraries plugins existing browsers operating systems 
permit users access legacy documents enjoying ubiquitous secure access durability performance advantages oceanstore 
introspection envisioned oceanstore consist millions servers varying connectivity disk capacity computational power 
servers devices connect disconnect fail sporadically 
server network load vary moment moment 
manually tuning system large varied prohibitively complex 
worse oceanstore designed operate utility model manual tuning involve cooperation administrative boundaries 
address problems oceanstore employs introspection architectural paradigm mimics adaptation biological systems 
shown introspection augments system normal operation computation observation optimization 
observation modules monitor activity running system keep historical record system behavior 
employ sophisticated analyses extract patterns observations 
optimization modules resulting analysis adjust adapt computation 
oceanstore uses introspective mechanisms system 
insufficient space describe detail give flavor techniques 
architecture designed common architecture introspective systems oceanstore see 
systems process local events forwarding summaries distributed hierarchy form approximate global views system 
events include incoming message noteworthy physical measurement 
point approach provides framework atop developing specific observation optimization modules 
high event rate precludes extensive online processing 
level fast event handlers summarizes local events 
summaries stored local database 
leaves hierarchy database may reside memory loosen durability restrictions local observations order attain necessary event rate 
machine initiates receives roughly messages local area network files systems 
addition routing infrastructure requires communication proportional logarithm size network 
event stream event handlers db periodic depth analyses forward aggregates processing issue local optimization commands fast event handlers summarize respond local events 
efficiency database may soft state see text 
processing analyzes trends aggregate information nodes 
describe event handlers simple domain specific language 
language includes primitives operations averaging filtering explicitly prohibits loops 
expect model provide sufficient power flexibility extensibility enabling verification security resource consumption restrictions placed event handlers 
second level powerful algorithms periodically processes information database 
level perform sophisticated analyses incorporate historical information allowing system detect respond long term trends 
processing responding events third level node forwards appropriate summary knowledge parent node processing wider scale 
infrastructure uses standard oceanstore location mechanism locate node identified guid 
conversely distribute information remote optimization modules oceanstore objects accessed standard location mechanism 
uses introspection introspection manage number subsystems oceanstore 
discuss components 
cluster recognition cluster recognition attempts identify group closely related files 
client machine contains event handler triggered data object access 
handler incrementally constructs graph representing semantic distance data objects requires operations access 
periodically run clustering algorithm consumes graph detects clusters strongly related objects 
frequency operation adapts stability input available processing resources 
result clustering algorithm forwarded global analysis layer publishes small objects describing established clusters 
directory listings objects help remote optimization modules collocate prefetch related files 
replica management replica management adjusts number location floating replicas order service access requests efficiently 
event handlers monitor client requests system load noting access specific replica exceeds resource 
access requests overwhelm replica forwards request assistance parent node 
parent tracks locally available resources create additional floating replicas nearby nodes alleviate load 
conversely replica management eliminates floating replicas fallen 
notification replica termination propagates parent nodes adjust object dissemination tree 
addition short term decisions nodes regularly analyze global usage trends allowing additional optimizations 
example oceanstore detect periodic migration clusters site site prefetch data cycles 
users find project files email folder local machine day waiting home machines night 
uses oceanstore uses introspective mechanisms aspects 
specifically introspection improves manageability performance routing structure enables construction efficient update dissemination trees ensures availability durability archival fragments identifies unreliable peer organizations performs continuous confidence estimation optimizations order reduce harmful changes feedback cycles 
status currently implementing oceanstore prototype deploy testing evaluation 
system written java state machine request model fast 
initially oceanstore communicate applications unix file system interface read proxy world wide web addition native oceanstore api 
explored requirements security guarantees place storage architecture 
specifically explored differences enforcing read write permissions untrusted setting emphasizing importance ability clients validate correctness data returned 
exploration included checking integrity data checking data requested data returned levels metadata protected strongly data 
prototype cryptographic file system provided testbed specific security mechanisms 
prototype probabilistic data location component implemented verified 
simulation results show algorithm finds nearby objects near optimal efficiency 
implemented prototype archival systems reed solomon tornado codes redundancy encoding 
half fragments required reconstruct object issuing requests extra fragments proved beneficial due dropped requests 
implemented introspective prefetching mechanism local file system 
testing showed method correctly captured high order correlations presence noise 
combine mechanism optimization module appropriate wide area network 
related distributed systems taos assume untrusted networks applications rely trusted computing base 
cryptographic file systems blaze cfs provide secrecy include provisions sharing data protecting integrity independently secrecy 
secure file system supports sharing access control lists fails provide independent support integrity trusts single server distribute encryption keys 
farsite project similar oceanstore works assumes untrusted clients address wide area infrastructure 
sdsi spki address problem securely distributing keys certificates decentralized manner :10.1.1.34.3463
policy maker deals description trust relations :10.1.1.44.6276
mazi res proposes self certifying paths separate key management system security 
bloom filters commonly compact representations large sets :10.1.1.20.2080
distributed database calculates demand implement efficient 
summary cache pushes bloom filters cooperating web caches method scale number caches 
distributing data performance availability survivability studied extensively file systems database communities 
summary distributed file systems 
particular bayou coda replication improve availability expense consistency introduce specialized conflict resolution procedures :10.1.1.40.8955
sprite uses replication caching improve availability performance guarantee consistency incurs performance penalty face multiple writers 
systems addresses range security concerns oceanstore bayou examines problems occur replicas corrupted 
gray argue promiscuous replication :10.1.1.116.1182
oceanstore differs class systems describe bind floating replicas specific machines replicate objects server 
oceanstore second tier floating replicas similar transactional caches taxonomy algorithm performs validity checks commit time 
contrast similar systems merge predicates decrease number transactions aborted due date caches 
previous projects explored feedback driven adaptation extensible operating systems databases file systems global operating systems storage devices 
projects employ differing techniques terminology analyzed respect introspective model 
seer project formulated concept semantic distance collects clusters related files automated hoarding 
file system observation drive automatic prefetching :10.1.1.113.3119
introspective replica management web content examined radar project considers read data trusted infrastructure :10.1.1.30.7969
mariposa project addresses interdomain replication economic model 
optimize communication cost selecting new location replica placement single administrative domain 
similar oceanstore intermemory project uses cauchy reed solomon codes archive wide scale durability 
anticipate combination active archival object forms allow greater update performance retaining intermemory survivability benefits 
rise ubiquitous computing spawned urgent need persistent information 
oceanstore utility infrastructure designed span globe provide secure highly available access persistent objects 
properties distinguish oceanstore systems utility model untrusted infrastructure support truly nomadic data introspection enhance performance maintainability 
utility model notion global system possible introduces possibility untrustworthy servers system 
assume servers may run adversaries trusted cleartext result operations conflict resolution performed di rectly encrypted information 
nomadic data permits wide range optimizations access information bringing close needed enables rapid response regional outages denial service attacks 
optimizations assisted introspection continuous online collection analysis access patterns 
oceanstore construction 
design elements algorithms oceanstore implemented 
hopefully convinced reader infrastructure oceanstore possible construct desirable obvious 
people instrumental helping refine thoughts oceanstore alphabetical order william bolosky michael franklin jim gray james hamilton joseph hellerstein anthony joseph josh mac donald david patterson satish rao dawn song bill tetzlaff doug tygar steve weis richard wheeler 
addition acknowledge enthusiastic support darpa program manager jean scholtz industrial funding emc ibm 
abadi :10.1.1.34.3463
sdsi linked local name spaces 
proc 
ieee csfw 
acharya zdonik 
efficient scheme dynamic data replication 
technical report cs department computer science brown university 
anderson dahlin neefe patterson roselli wang :10.1.1.110.7161
serverless network file systems 
proc 
acm sosp dec 
barak herzberg naor shai 
proactive security toolkit applications 
proc 
acm ccs conf pages nov 
blaze 
cryptographic file system unix 
proc 
acm ccs conf nov 
blaze feigenbaum lacy :10.1.1.44.6276
decentralized trust management 
proc 
ieee may 
bloom :10.1.1.20.2080
space time trade offs hash coding allowable errors 
communications acm volume pages july 
bolosky douceur ely theimer 
feasibility serverless distributed file system deployed existing set desktop pcs 
proc 
sigmetrics june 
bolosky draves fitzgerald fraser jones knoblock rashid 
operating systems directions millennium 
proc 
hotos conf may 
castro liskov :10.1.1.127.6130
practical byzantine fault tolerance 
proc 
usenix symp 
osdi 
chaudhuri narasayya 
index analysis utility 
proc 
acm sigmod conf pages june 
dahlin anderson patterson wang :10.1.1.120.5
cooperative caching remote client memory improve file system performance 
proc 
usenix symp 
osdi nov 
demers petersen spreitzer terry theimer welch :10.1.1.40.8955
bayou architecture support data sharing mobile users 
proc 
ieee workshop mobile computing systems applications dec 
edwards mynatt petersen spreitzer terry theimer 
designing implementing asynchronous collaborative applications bayou 
proc 
acm symp 
user interface software technology pages 
ellison rivest thomas 
spki certificate theory 
rfc 
fan cao almeida broder 
summary cache scalable wide area web cache sharing protocol 
proc 
acm sigcomm conf pages sept 
franklin carey livny 
transactional clientserver cache consistency alternatives performance 
acm transactions database systems sept 
goldberg yianilos 
archival intermemory 
proc 
ieee adl pages apr 
gray neil shasha :10.1.1.116.1182
dangers replication solution 
proc 
acm sigmod conf volume pages june 
griffioen appleton 
reducing file system latency predictive approach 
proc 
usenix summer technical conf june 
landin haridi 
ddm memory architecture 
ieee computer sept 
hill szewczyk woo culler hollar pister 
system architecture directions networked sensors 
proc 
asplos nov 
howard kazar menees nichols satyanarayanan sidebotham west 
scale performance distributed file system 
acm transactions computer systems feb 
hughes keefe 
universal access smart card secure file system 
proc 
atlanta linux showcase oct 
greif 
replicated document management group communication system 
proc 
acm cscw conf sept 
kistler satyanarayanan 
disconnected operation coda file system 
acm transactions computer systems feb 
kroeger long 
predicting file system actions prior events 
proc 
usenix winter technical conf pages jan 
kuenning 
design seer predictive caching system 
proc 
ieee workshop mobile computing systems applications dec 
kung robinson 
optimistic methods concurrency control 
acm transactions database systems june 
lamport shostak pease 
byzantine generals problem 
acm toplas 
levy silberschatz 
distributed file systems concepts examples 
acm computing surveys dec 
luby mitzenmacher shokrollahi spielman 
analysis low density codes improved designs irregular graphs 
proc 
acm stoc may 
lohman 
optimizer validation performance distributed queries 
proc 
intl 
conf 
vldb aug 
matthews roselli costello wang anderson 
improving performance log structured file systems adaptive methods 
proc 
acm sosp oct 
mazi res kaminsky kaashoek witchel 
separating key management file system security 
proc 
acm sosp 
nelson welch ousterhout 
caching sprite network file system 
ieee acm transactions networking feb 
nist 
fips digital signature standard 
may 
norman 
invisible computer pages 
mit press cambridge ma 
plank 
tutorial reed solomon coding faulttolerance raid systems 
software practice experience sept 
plaxton rajaraman richa :10.1.1.38.1850
accessing nearby copies replicated objects distributed environment 
proc 
acm spaa pages newport rhode island june 
rabinovich rabinovich rajaraman aggarwal :10.1.1.30.7969
dynamic object replication migration protocol internet hosting service 
proc 
ieee icdcs pages june 
rivest lampson 
sdsi simple distributed security infrastructure 
manuscript 
sandberg goldberg kleiman walsh lyon :10.1.1.14.473
design implementation sun network filesystem 
proc 
usenix summer technical conf june 
feeley hutchinson veitch 
deciding forget elephant file system 
proc 
acm sosp dec 
seltzer small 
self monitoring self adapting operating systems 
proc 
hotos conf pages may 
aoki barr sah staelin stonebraker yu 
data replication mariposa 
proc 
ieee icde pages feb 
song wagner perrig 
search encrypted data 
published proc 
ieee may 
spreitzer theimer petersen demers terry 
dealing server corruption weakly consistent replicated data systems 
proc 
acm ieee mobi com conf pages sept 
stonebraker 
design postgres storage system 
proc 
intl 
conf 
vldb sept 
weiser 
computer 
scientific american sept 
wilkes golding staelin sullivan 
hp autoraid hierarchical storage system 
acm transactions computer systems pages feb 
wobber abadi burrows lampson 
authentication taos operating system 
proc 
acm sosp pages dec 
