homogeneous reaction rule language complex event processing adrian ruleml canada adrian de event driven automation reactive functionalities complex event processing urgent need today distributed service oriented architectures web event driven environments 
important problem addressed correctly efficiently capture process event behavioral reactive logic embodied reaction rules combining conditional decision logic embodied derivation rules 
elaborates homogeneous integration approach combines derivation rules reaction rules rule types integrity constraints general framework logic programming industrial strength version declarative programming 
describe syntax semantics language implement distributed web middleware enterprise service technologies illustrate adequacy terms expressiveness efficiency scalability examples extracted industrial cases 
developed reaction rule language provides expressive features modular id updates support external imports self updates intensional extensional knowledge bases transactions including integrity testing roll backs update transition paths 
supports distributed complex event processing event messaging event querying efficient scalable enterprise middleware technologies event action reasoning event action algebra implemented interval event calculus variant logic inference formalism 

event driven applications reactive rules trigger actions response detection events extensively studied 
stemming early days programming language system events interrupt exception handling active event driven rules received great attention different areas active databases started late real time applications system network management tools emerged early publish subscribe systems appeared late 
increased interest industry academia event driven mechanisms highlevel event driven architectures eda 
pro active real time just time reactions events key factor upcoming agile flexible infrastructures distributed loosely coupled permission copy fee part material granted provided copies distributed direct commercial advantage vldb copyright notice title publication date appear notice copying permission large data base endowment 
copy republish post servers redistribute lists requires fee special permission publisher acm 
vldb september vienna austria 
copyright vldb endowment acm 
alexander london alex com harold boley national research council canada harold boley nrc gc ca service oriented environments new business models demand utility computing 
industry trends real time enterprise rte business activity management bam business performance management bpm closely related areas service level management slm monitoring enforcing service level agreements slas business drivers renewed interest 
strong demand event processing functionalities comes web community particular area semantic web rule markup languages ruleml 
different rule approaches reactive event processing developed part proceeded separately led different views terminologies active databases attempt combine techniques expert systems databases support automatic triggering global rules response events monitor state changes database systems intensively explored developed eca paradigm event algebras compute complex events trigger reactions global eca rules 
event notification messaging systems facilitate communication events distributed environment push pull monitor external systems notify subscribed clients detected events 
typically interest context dependent event sequence follows communication protocol coordination workflow single event occurrences trigger immediate reactions 
event action logics origins area knowledge representation kr logic programming lp focus formalization action event axioms inferences happened planned events actions 
classification event action state processing space survey different reaction rules approaches see 
approach logic programming combines exploit advantages different logic rule approaches implement homogeneous reaction rule language efficient scalable middleware supports complex event action processing event communication messaging formalization reaction rules combination rule types derivation rules transactional id knowledge updates dynamically change intensional extensional knowledge base kb 
show approach fits ruleml standardization initiative describing different rule types semantic web 
section introduce global reactions rules follow eca paradigm 
section develop interval event algebra supports logic complex event processing phases event definition event selection detection querying event consumption rule consumption policies 
section introduce transactional module update actions reaction rule language basis open modular web ordered logic programs 
section describes reaction ruleml serves platform independent rule interchange format xml serialization language 
section implement highly scalable efficient communication management middleware allows deploying rule inference services rule complex event processing service oriented computing web 
section concludes discussion rule design artifact application domains service management business activity monitoring bam business process management bpm service oriented computing 

global reaction rules global reaction rules typically follow event condition action eca paradigm event condition action 
implemented tight integration global eca rules derivation rules 
rule types represented homogeneous knowledge base kb kb set derivation rules set eca rules set facts set integrity constraints 
kb updated time intensional extensional knowledge changed dynamically runtime incorporating self updates add remove triggered active rules imports external modules 
approach logic programming paradigm kb extended logic program elp finite function nestings variables non monotonic default negation explicit negation typed logic supporting semantic web types external ontologies rdfs owl external java types procedural attachments java objects methods rule derivations 
standard lp notation iso prolog related scripting syntax called 
assume reader familiar logic programming techniques 
syntax global eca rules global reaction rule formalized extended eca rule represented kb ary fact reserved predicate name eca eca el time event condition action post condition el se complex terms functions 
complex terms meta interpreted eca interpreter sub goals derivation rules kb implement functionality part eca rule 
full expressiveness derivation rules extended lps logical connectives variables finite function nestings non monotonic default explicit negation linear sequential operators cuts serial updates procedural attachments declaratively implement arbitrary complex behavioural reaction logic core eca rules syntax stays compact 
implemented global derivation rules reused times different eca rules leading compact homogenous rule base modularization 
time part eca rule defines pre condition explicitly stated temporal event defining validity time event processing window specifies specific point window time eca rule processed eca processor absolutely clock st may relatively minute event detected periodically seconds 
post condition evaluated action executed 
prevent backtracking different variable bindings cuts apply post conditional integrity verification validation tests order safeguard transactional knowledge updates eca rules 
part el defines alternative action executed case eca rule completely executed 
particular useful specify default re actions trigger exceptional failure handling policies 
parts reaction rule blank satisfied stated eca 
blank parts completely omitted leading specific types reactive rules standard eca rules eca eca production style rules ca eca extended eca rules post conditions eca 
variable bindings ground knowledge derived queried derivation rules queried external data sources relational database constructive procedural function method supported unification backtracking logic programming eca detect context ime fire context ime 
particular useful interchange context information event action condition action part 
negation supported eca ping service neg maintenance service create service 
event eca rule detected ping external web service call fails default invoke call external procedural function fails answer received information missing 
condition explicitly proved false service definitely maintenance state trouble ticket unavailable service automatically created 
example seconds checked time service request customer event 
service request list currently unloaded servers created condition service loaded server ac tion 
case action fails system backtrack try load service server list 
succeeds backtracking prevented post condition cut unloaded server action triggered sending notification customer 
eca sec time detect request customer service event find server condition load server service action postcondition notify customer service request temporarily rejected 
time sec interval 
event detect request customer service occurs request customer service consume request customer service 
condition find server holdsat status server unloaded 
action load server service utils webservice load server service proc 
attachment add key server happens loading server 
alternative action notify customer message sendmessage customer message 
state server managed event calculus ec formalization terminates loading server status server unloaded 
initiates unloading server status server unloaded 
example includes possible backtracking different variable bindings 
condition part servers state unloaded bound variable server 
action tries load server service succeeds backtracking prevented post condition cut 
unloaded server customer request action executed notifies customer 
declarative semantics global eca rules declarative semantics eca rules directly inherited semantics underlying rule inference system 
goals queries defined truth valued model theoretic functions denoting eca rule parts actively query kb evaluate derivation rules external boolean valued function implementations implement functionality eca rule parts 
definition extended eca rule interpreted conjunction sub goals complex terms processed left right order starting goal denoting time part order capture forward directed semantics eca rule ecai el eca top goal query consists subgoals el 
eca rule succeeds ecai entailed kb subgoals succeed kb ecai iff kb el set variables occurring free ecai 
post condition acts constraint kb state action performed 
particular actions effects kb knowledge updates transit current kb state state tested integrity constraints 
integrity tests fail transactional knowledge updates rolled back semantics transaction logic approach 
case external actions compensating actions called part external system provides appropriate api methods support transactions 
action part reaction rule lead rule success success pre condition action postcondition action evaluated true success 
detailed description declarative semantics particular implemented extended founded semantics see 
operational semantics global eca rules order integrate re active behavior eca rules goal driven backward reasoning goals defined complex terms eca rules meta interpreted additional eca interpreter 
interpreter implements operational semantics eca paradigm 
eca interpreter provides general wrapper interface specialized particular query api arbitrary inference engine 
means eca meta interpreter general add attached lp system derivation rule engine extending reasoning processing features reactive rules 
task processing eca rule querying respective derivation rules defined complex terms eca rule queries kb solved daemon implemented eca interpreter 
daemon kind adapter frequently issues queries eca rules order simulate active behavior passive goal driven lp systems 
proof theoretically applies eca subgoals top query formed eca rule kb current kb state inference rules underlying backward reasoning inference engine deductively prove syntactic derivability clauses kb 
process follows 
queries repeatedly order capture updates reactive rules kb derives eca rules represented kb universal query eca el 
adds derived eca rules internal active kb kind volatile storage reactive rules temporal event data 
processes eca rules sequentially parallel depending configuration thread pool 
forward directed execution eca paradigm strictly positional order terms eca rules 
time part queried evaluated eca processor daemon succeeds event part evaluated condition 
computed ground substitutions variables subgoal rule ecai unified eca interpreter variable variants subsequent subgoals top eca query 
interpreter implements common lp backtracking mechanism backtrack different variable bindings 
order enable parallel processing eca rules eca processor implements thread pool eca rule executed separate thread time part succeeds 
example seconds checked time incoming request customer book flight certain destination event 
event detected database look selects list flights destination condition tries book flight action 
case action fails system backtrack book flight list succeeds post condition cut sending flight booked notification 
flight destination condition fails action triggered sending booked notification back customer eca sec detect request customer destination find destination flight book customer flight notify customer destination 
time derivation rule sec interval 
event derivation rule detect request customer occurs request customer consume request customer 
condition derivation rule find destination flight exception java sql db exception flights db sql select db flights flight flight dest destination 
action derivation rule book cust flight flight book flight cust notify cust flight 
alternative action derivation rule notify customer message sendmessage customer message 
action succeeds backtracking prevented post condition cut 
flight customer request action executed notifies customer 
condition derivation rule accesses external data source sql query relational data base 
homogeneous combination global eca style reaction rules derivation rules representation language paves way re various useful logic formalisms reactive rules procedural attachments defeasible rules rule priorities conflict resolution transactional update actions event action logics temporal event calculations complex event action reasoning 
relates eca rules rule types integrity constraints normative rules 
result high expressive power clear logical semantics formalisms accessible reaction rules 

interval event calculus event action algebra events actions reactive eca rules typically atomic complex consisting atomic events actions occur performed defined order quantity detect complex events execute complex actions ordered sequence events actions 
topic extensively studied context active databases event algebras provide operators define complex event types 
pointed typical event algebras active database systems complex event definitions snoop show inconsistencies irregularities operators 
instance consider sequence snoop 
complex event detected occurs followed event instance sequence eis eis lead detection complex event complex event detected associated detection time terminating event accordingly event occurs detected complex event 
intended semantics sequence eis lead detection complex event defined 
semantics snoop uses detection time terminating event occurrence time complex event complex event definitions equal 
problem arises fact events active database sense simply detected treated occur atomic instant contrast durative complex events kr event action logics sense occur extended interval 
overcome unintended semantics provide verifiable traceable complex event computations resp 
complex actions implemented interval event calculus ec variant refined typical event algebra operators 
interval event calculus events regarded occur time interval event interval occurs time interval occurrence time occurrence time 
particular atomic event occurs interval occurrence time atomic event 
interval ec axioms describe events actions occur transient consumption view happen non transient reasoning view planned happen abductive view ec time structure properties fluents event intervals initiated terminated events various circumstances 
definition interval event calculus language ec signature multi sorted signature equality sort events sort fluents states event intervals sort timepoints 
ec language ec tuple partial ordering defined non empty set time points non empty set events actions non empty set fluents 
timepoints events actions fluents ary functional literals reified typed functions external object instantiations constructive views relational databases storing event occurrences java object instances xml data common base event semantic web event class instances rdf owl 
basic holdsat axiom classical ec temporal reasoning fluents redefined interval ec axiom capture semantics event intervals hold time interval event event broken 
event function event event interval meta function translate instantaneous event occurrences interval events event occurs 
event algebra meta program compute complex events occurred raw events event type definitions 
broken function tests event interval broken initiator event terminator event explicitly specified terminating event broken interval terminates terminator interval event terminator 
declarative semantics interpretations map event intervals time intervals truth values 
definition interval event calculus interpretation interpretation mapping true false 
definition event calculus satisfaction interpretation satisfies event interval time interval true false 
definition instantiation termination ec ec language ec domain description ec program ec interpretation ec event interval instantiated time point iff event statement ec form occurs statement ec form initiates 
event interval terminated time point iff event statement ec form occurs statement ec form terminates 
interpretation qualifies model domain description definition event calculus model ec ec language ec domain description ec interpretation ec model ec iff holds 
instantiated terminated wrt ec 
initiated wrt ec terminated true 
terminated wrt ec initiated false conditions define persistence complex event intervals time progresses 
events actions effect changeable event interval states condition truth value complex event state persists explicitly changed terminating event action condition 
domain description consistent model 
define entailment wrt meta program domain description implemented logic program definition event calculus entailment ec ec domain description 
event interval holds time interval wrt ec written ec iff interpretation ec true 
ec neg iff false 
example occurs datetime 
occurs datetime 
query interval 
result interval datetime datetime interval event logics formalism redefine typical snoop event algebra operators treat complex events resp 
actions occurring interval terms instantaneous detection times 
short basic idea split occurrence interval complex event smaller intervals required component events occur leads definition event type patterns terms interval event detection conditions sequence operator formalized follows detect 
complete formalization interval ec event algebra see kr 
order definitions complex events terms event algebra operators comfortable remove burden defining interval conditions particular complex event type described implemented meta program implements ec event algebra terms typical event operators sequence sequence en disjunction 
en mutual exclusive xor en conjunction en simultaneous concurrent en negation neg quantification aperiodic aperiodic order reuse detected complex events rules eca rules complex events need remembered consumed contributing component events detected complex event consumed detection complex event 
achieved id update primitives allow adding removing knowledge kb 
update primitives add detected event occurrences new transient facts kb consume events contributed detection complex event 
example detect event sequence detection condition add eis occurs add key eis consume eis consume eis 
consume events detection conditions complex event fulfilled occurrence detected event added kb key eis eis event instance sequence 
events belong type specific event instance sequences type type consumed ids eis resp 
eis 
different consumption policies supported remove events belong particular type specific eis remove resp 
event eis 
consume predicate specified detection rule events reused detection complex events 
detection rule complex event eca rule trigger eca rule 
space reasons discussed processing complex events interval event calculus definition complex actions define ordered sequence action executions concurrent actions actions performed parallel time interval declarative semantics possibly required rollbacks defined 
information see 

event messaging reaction rules eca rules described previous section defined globally 
global eca rules best suited represent reaction rules actively detect query internal external events global context trigger reactions 
instance actively monitor external system data source service trigger reaction system service unavailable 
distributed environment independent system nodes communicate relative certain context workflow conversation protocol state complex event situation event processing requires event notification communication mechanisms needs done local context conversation state business process workflow 
systems communicate events predefined negotiated communication coordination protocol subscribe specific event types server publish subscribe 
case server monitors environment detecting atomic complex event situation notifies concerned clients 
complex events may correspond pre defined protocols event algebras including time restricted sequences conjunctions disjunctions permits events occurs time units expressed 
syntax event messaging reaction rules addition global eca style reaction rules provide integrated event messaging reaction rule language called aa includes constructs asynchronously sending receiving event messages various communication protocols enterprise service bus specifying reaction rules processing inbound messages 
messaging reaction rules require separate threads handling multiple conversation situations simultaneously 
main language constructs sendmsg predicates reaction rcvmsg rules rcvmsg inline reactions sendmsg xid protocol agent performative payload context rcvmsg xid protocol context xid protocol context xid conversation identifier conversation id conversation message belong 
protocol defines communication protocol 
protocols jms soap jade supported underlying enterprise service bus efficient scalable object broker communication middleware 
agent denotes target agent service wrapping instance rule engine message 
performative describes pragmatic context message send 
standard nomenclature performatives fipa agents communication language acl bpel activity vocabulary 
payload represents message content sent message envelope 
specific query answer complex interchanged rule base set rules facts 
example upload rule base read file host address remote jms upload mobile code remote file opening file returns instance java io reader fopen file reader writer java io copy reader writer text writer tostring sb encapsulate content file example rule workflow sb stringbuffer text sendmsg xid jms remote eval consult sb 
example shows reaction rule sends rule base external file agent service remote jms transport protocol 
inline sendmsg reaction rules locally derivation rule applies context derivation rule 
corresponding global receiving reaction rule rcvmsg xid jms sender eval predicate args derive predicate args 
rule receives incoming jms messages pragmatic context eval derives message content 
list notation args match arbitrary ary predicate functions denotes kind restricted second order notation variable predicate bound matches predicates signature language arbitrary number arguments args 
semantics event messaging reaction rules semantics treats send receive constructs special built literals 
execution flow stored transparently constructed temporal reaction rule activated message matching specified pattern rcvmsg arrived 
engine continues processing incoming messages goals queries 
temporal rule includes pattern message specified rcvmsg head rule remaining goals current execution point body 
behaviour different suspending current thread waiting replies arrive 
rule engine maintains main thread allowing unlimited number conversations proceed time incurring penalty limitations multiple threads solely purpose maintaining conversation states time 
conversation event context semantics global local inline receive send reaction rules allows implementing typical semantics state machines workflow style systems petri nets pi calculus complex event processing workflow process executions style bpel 
shows example event workflow implemented follows process join iam init join xid join fork xid 
fork xid rcvmsg xid self reply fork xid 
fork xid rcvmsg xid self reply join xid join 
fork xid rcvmsg xid self reply tell join join new pattern ready join xid join 
invoked join inputs assembled 
join xid inputs println joined xid xid inputs inputs 
prints joined xid agent hostname inputs behaviour inbound links defined rcvmsg reaction rules similar bpel links 
declarative rule approach provides expressive declarative programming language represent complex event processing logic conditional reactions activities complex event workflow patterns join simple merge cancel activity multi choice structured loop deferred choice milestone see implementation 
homogenous language approach allows arbitrary combinations logic meta logic programming formalisms global eca context specific messaging reaction rules 
example demonstrates messaging reaction rules detecting complex event pattern includes event sequencing disjunction event branching depends non arrival specified events event pattern denotes instances messages follows 
rcvmsg xid protocol sender inform partition id id partition id id detect bc xid id id rcvmsg xid protocol sender inform inform clients detected situation detect bc xid id id id id rcvmsg xid protocol sender inform 
detect bc xid id id id id id rcvmsg xid protocol sender inform 
detect bc xid id id id id rcvmsg xid protocol sender inform fail 
example message initiator complex event situation reaction rule rcvmsg situation detection 
reaction rule executed node receives message correlation id xid sender payload matching pattern subsequent events contain intersecting detection partitions id id active reactions corresponding events enabled 
example reaction event enabled partitions active 
built ins partition id generate unique id partition 
rules predicate detect bc spawn reactions represented built representing inline detection events depending inbound outbound partition links 
behaviour similar opposite bpel links 
outbound links argument represent partitions inactive message matching pattern argument received 
inbound links argument represent partitions active reaction active 
inactive reactions removed system 
consider eis 
initiator detected rule reactions events activated 
event deactivates partition id removes branches waiting event event succeeds detect bc rule event received built reaction rcvmsg waits event skipping events match 
example demonstrates semantics complex event detection fully respect mutual ordering events allow flexibility allowing disallowing intervening events conditional branches 
messaging reaction rules easily detect conjunctions events shown due lack space 
summary messaging style reaction rules complement global eca rules 
illustrate combination active global eca messaging reaction rules typical case industry example manager node responsible holding housekeeping information various servers playing different roles 
server fails send heartbeat specified amount time manager assumes server failed cooperates agent component running unloaded node 
reaction rule receiving updating latest heartbeat event notification style rcvmsg xid protocol inform heartbeat role time update key role heartbeats role 
rule responds message pattern matching specified rcvmsg arguments 
xid conversation id incoming message inform performative representing pragmatic context message case way information passed parties heartbeat 
payload message 
body rule current local time updates record containing latest heartbeat controller 
rule follows push pattern event pushed rule systems reacts 
pull global eca rule activated second rule engine server fails sent heartbeats second detect server failures respond initiating failover available unloaded server 
accompanying derivation rules detect respond specific purpose detecting failure organizing response 
eca detect controller failure ip role respond controller failure ip role interval 
detect controller failure ip role timeout heartbeats ip role timeout 
respond controller failure ip role timeout holdsat status server unloaded add key server happens loading server local time sendmsg xid loopback self initiate failover role ip server 
eca logic involves possible backtracking failed components 
state server managed event calculus formulation initiates loading server status server loaded 
terminates unloading server status server loaded 
initiates unloading server status server unloaded 
terminates loading server status server loaded 
current state server derived happened loading unloading events eca rule detect server state unloaded 
ec formalization easily extended new states maintenance state terminates unloaded state allowed case server loaded initiates maintaining server status server maintenance holdsat status server loaded 
terminates maintaining server status server unloaded 
summary messaging style reaction rules complement global eca rules distributed coordination situations process workflows distributed complex event processing 

transactional module dates reaction rule language provides support special update functions add remove transaction auxiliary functions commit rollback 
update primitives expressive simple assert retract primitives typical lp interpreters prolog allow transactional bulk updates knowledge including updating facts rules 
enable arbitrary knowledge updates adding add removing remove rules complete rule sets including import knowledge external sources transactional update transaction rolled back execution fails 
transactions explicit committed 
update unique id asserted kb module kb ordered lp olp consisting arbitrary nested possibly distributed modules rule sets managed unique id preferences default rules priorities defined rules complete modules expressive integrity preserving defeasible logic 
constructive scopes constrain level generality queries explicitly close open distributed kbs support non monotonic properties negation failure 
detailed description expressive logic formalisms see kr 
add examples test test add external script add com datetime url add id 
add rule fact add id add rule object variable place holders add id 


remove id remove updates id remove examples test test remove external update examples show different variants updates external modules imported uris user defined updates asserting rules facts updates previously bound variables goals integrated updates place holders remarkably updates kb handled modules smaller logic programs contain updates imports modules leading nested updates hierarchical submodules 
external lp scripts dynamically added removed knowledge base module object ids typically uri user defined label 
semantics updates notion knowledge states transitions state 
definition positive update transition positive update transition simply positive update knowledge state kbk defined finite set pos oid rn atom denoting fact rule oid update oid module oid manage knowledge new module kb 
applying pos oid kbk leads extended state kbk kbk pos oid 
applying positive updates increasing finite sequence pos oid pos oid kb leads state kbk kb pos oid pos oid pos oid 
likewise define negative update transition follows definition negative update transition negative update transition short negative update knowledge state kbk finite set neg oid rn kbk removed kbk leading reduced program kbk kbk neg oid 
applying arbitrary sequences positive negative updates leads sequence kb states kb kbk state defined pos oid neg oid transactional updates rule language inspired serial horn version transaction logics tr 
definition transactional update transactional update update possibly consisting atomic updates executed completely 
case transactional update fails partially executed violates integrity wrt integrity constraints rolled back committed 
formally transactional update defined follows trans oid pos neg oid pos neg ic ic ic icm possibly empty set integrity constraints hold update executed 
case integrity constraint violated update rolled back 
roll back previous state update means apply complement update function added removed modules definition rollback update transactional update rolled back inverting update primitive trans oid trans oid iff trans oid iff exists trans oid note due module concept language transition sequence consisting update state oids update primitive needs remembered rollback sequence transactional updates 
declarative semantics transactional updates built concept sequences state transitions kb kbk truths update defined transition paths answer query determined current knowledge base depends entire transition paths 
paths return non empty answer respectively succeed case propositional queries considered executed transactional updates committed paths empty answer sets backtracked processed transactional updates paths rolled back state backtracking point 
query fails set answers empty possible transition path 
logical account transactional execution derivation transactional updates concept executional entailment adapted tr 
definition executional entailment kb initial kb state query contain free variables xn kb true kb iff exists path kb kbk returns non empty answer variables fails returns empty answer set possible execution paths query involves mapping sequences kb states sets tuples ground terms state 
case free queries variables transition paths considered produce answers query final state kb new knowledge base state union final states valid transition paths entail queries involve updates consider serial update rules lp rules standard literals side effects kb transition path length 
case goal entailed kb kb state transition accordingly executional entailment reduces standard lp entailment kb 
integration reaction rules ruleml section propose reaction rule extension called reaction ruleml ruleml standard rule interchange rule serialization xml 
reaction ruleml serves rule interchange format intended translated platform specific executable rule languages homogenous reaction rule language described previous sections 
rule markup language ruleml modular interchangeable rule specification standard express forward bottom backward top rules deduction reaction rewriting inferential transformational tasks 
defined rule markup initiative open network individuals groups industry academia formed develop canonical web language rule serialization xml transformation rule standards systems 
language family ruleml covers entire rule spectrum derivation rules reaction rules including rule event processing messaging reaction ruleml verification transformation rules 
briefly summarize key components derivation ruleml language horn logic layer introduce reaction ruleml sublanguage extends ruleml additional language constructs representing reaction rules complex event action messages 
building blocks derivation ruleml predicates ary relations introduced atom element ruleml 
main terms atom variables ar instantiated values rules applied individual constants ind data values data complex expressions expr 
derivation rules defined implies element consists body part body atomic conditions connected possibly negated neg classical negation naf negation failure part head implied body rule application forward backward manner 
facts stated atoms deemed true atom queries query proven backward top goals forward bottom processing goals may connected query possibly negated 
facts derivation rules queries ruleml defines rule types integrity constraints transformation rules 
reaction ruleml general practical compact user friendly xml serialized sublanguage ruleml family reaction rules 
incorporates various kinds production action reaction kr temporal event action logic rules complex event action messages native ruleml syntax system step wise extensions 
building blocks reaction ruleml general reaction rule form rule specialized selection constituent subparts condition action rules production rules event action rules trigger rules event condition action rules execution styles defined attribute style default value reasoning 
active actively polls detects occurred events global eca style ping service system query internal external event database messaging waits incoming complex event message inbound sends messages outbound actions reasoning logical reasoning logic programming derivation rules kr formalisms event action transition logics event calculus situation calculus tal formalizations weak strong evaluation execution semantics evaluation interpretation manage justification lifecycle local inner reaction rules derivation execution process outer rules optional object identifier oid optional metadata label label metadata authoring information rule name author creation date source optional general scope rule defines view rule base constructs view query expressions explicitly closed part possible distributed modularized knowledge base 
optional set qualifications qualification validity value fuzzy value defeasible priority value messages message define inbound outbound event message reaction rule apply globally global eca rules locally nested reaction derivation rules case serial messaging reaction rules 
general syntax reaction rules rule style active evaluation strong label metadata label scope scope scope qualification qualifications qualification oid object identifier oid event condition action postcondition alternative action postcondition rule selected omitted rule parts rule specializes derivation rule reasoning style trigger rule production rule eca rule special cases rule mixed rule types derivation rule alternative action trigger update action add remove kb send event message log system case query derivation rule fails 
complex event algebra constructs sequence disjunction conjunction xor concurrent aperiodic complex action algebra constructs succession choice low loop event respective action part define complex event types complex actions 
metadata label optionally add additional metadata semantic web metadata vocabularies dublin core 
rule quantifications priorities validity values form basis expressive reasoning formalisms defeasible logic argumentation semantics scoped reasoning fuzzy reasoning see 
messaging style inbound outbound messages message interchange events queries answers rules message mode outbound directive acl inform oid conversation id oid protocol transport protocol protocol sender sender agent service sender content message payload content message mode inbound outbound attribute defining type message directive attribute defining pragmatic context message fipa acl performative oid conversation id distinguish multiple conversations conversation states protocol transport protocol jms soap jade enterprise service bus sender receiver sender receiver agent service message content message payload transporting ruleml reaction ruleml query answer rule base directive attribute corresponds pragmatic instruction pragmatic characterization message context 
external vocabularies defining pragmatic performatives pointing conceptual descriptions 
standard nomenclature pragmatic performatives defined knowledge query manipulation language kqml fipa agent communication language acl defines speech act theory communicative acts 
vocabularies normative concepts standard deontic logic define action obligations permissions prohibitions 
conversation identifier distinguish multiple conversations conversation states 
allows associate messages follow previously existing conversations implement complex coordination negotiation protocols 
overview description negotiation coordination protocols see 
protocol define lower level ad hoc transport protocols jms soap agent oriented communication protocols jade 
content message query answer larger rule fact base serialized ruleml reaction ruleml 
typing approach enables integration rich external syntactic semantic domain vocabularies compact ruleml language 
instance example shows reaction ruleml message ibm common base event cbe formalization payload 
example message mode outbound directive acl inform oid ind conversation ind oid protocol ind ind protocol sender ind server ind sender receiver ind client ind receiver content atom oid ind type cbe ind oid rel value uri cbe ind type year ind ind type mont ind 
atom 
atom oid ind type cbe ind oid rel value uri cbe msg ind type xsd string hello world ind atom content message ruleml interface description language ruleml idl sublanguage reaction ruleml adopts ideas interface definition languages corba idl web services wsdl 
describes signature public rule functions mode type declarations public rule heads queried backward reasoning style monitored matched patterns forward reasoning style 
modes instantiation patterns predicates described mode declarations declarations intended input output constellations predicate terms semantics term intended input term intended output term arbitrary input output define modes optional attribute mode added terms addition type attribute 
default mode arbitrary 
interface description represented function interface description signature publicly accessible literal 
interface definition function add result arg arg modes add follows example interface label expr fun uri dc description ind definition add function takes java integer values input returns integer result value ind expr label expr fun add fun var type java java lang integer mode result var var type java java lang integer mode arg var var type java java lang integer mode arg var expr interface 
rule cep middleware section implement main components rule middleware homogenous reaction rule language 
model driven architecture mda middleware distinguishes platform specific model psm encodes rule statements language specific execution environment platform independent model pim represents rules common standardized interchange format markup language rule cep middleware computational independent model cim rules natural visual language 
focus technical aspects middleware machine machine communication automated rule inference services deployed middleware 
homogenous reaction rule language psm layer ruleml reaction ruleml pim layer 
visual ruleml reaction ruleml editor cim layer see 
illustrates architecture middleware 
rule engines rule execution environments deployed distributed web services 
service dynamically imports pre compiles loads distributed rule bases ruleml scripts published web stored locally implement decision reaction logic 
external data data sources web resources relational databases external enterprise application tools web services object representations directly integrated runtime translation compile time expressive homogenous heterogenous integration interfaces rule engine publish subscribe monitoring processes event messages 
object broker web inference services asynchronous messaging middleware services 
different transport protocols jms soap rest transport rule sets queries answers payload event messages internal inference services deployed endpoints external systems applications 
ruleml reaction ruleml common rule interchange format services 
enterprise service bus communication middleware middleware mule open source order handle message interactions deployed rule services external applications tools services disparate complex event processing cep technologies transports protocols 
allows deploy rule engines highly distributable rule inference services installed web endpoints mule object broker supports reaction ruleml communication 
provides highly scalable flexible distributed inference services application messaging framework communicate synchronously asynchronously external internal services 
mule messaging platform ideas architectures goes typical definition transit system carrying data applications providing distributable object broker manage sorts service components 
transport provider enables mule components send receive information particular protocol repository messaging technology 
mule supports great variety transport protocols jms soap tcp 
autonomous components java beans components frameworks managed object broker configured exchange inbound outbound event messages registered routers components endpoint addresses 
processing modes mule asynchronously events processed component time various threads 
mule server running asynchronously instances component run various threads accepting incoming events event processed instance component 
synchronously component receives event mode request executed single thread request response allows component specific request event wait specified time get response back object broker follows staged event driven architecture seda pattern 
basic approach seda decomposes complex event driven application set stages connected queues 
design decouples event thread scheduling application logic avoids high overhead associated thread concurrency models 
seda supports massive concurrency demands web services provides highly scalable approach asynchronous communication 
shows simplified breakdown mule integration 
inference services core run rule engine installed mule components listen configured endpoints jms message endpoints ports soap server client addresses jdbc database interfaces 
reaction ruleml common platform independent rule interchange format agents possible rule execution inference services 
translator services translate inbound outbound messages pim reaction ruleml psm rule engines execution syntaxes vice versa 
antlr translator services provided web forms services soap web services reaction ruleml web page 
large variety transport protocols provided mule transport messages registered endpoints external application objects 
usually jms internal communication distributed agent instances soap access external web services 
usual processing style asynchronous seda event queues 
synchronous communication needed 
instance handle communication external synchronous clients web browsers requests web send synchronous channel 
case implemented synchronous bridge component dispatches requests asynchronous messaging framework collects answers internal service nodes keeping synchronous channel external service open 
asynchronous answers collected send back connected external service 
platform dependent rule engines execution environments web inference service run arbitrary rule engines execute interchanged rules events derive answers requests 
subsection introduce highly expressive open source semantic web rule engine supports complex reaction rule workflows decision logic dynamic access external data sources java objects 
follows spirit design semantic web initiative combines declarative rules ontologies inference dynamic object oriented java api calls access external data sources relational databases enterprise applications services 
key advantages elegant separation logic data access computation tight integration java semantic web technologies 
includes numerous expressive features logic formalisms easy learn iso prolog related scripting syntax founded semantics extended logic programs defeasible conflict resolution linear goal memoization order sorted polymorphic type systems compatible java semantic web ontology languages rdf rdfs owl seamless integration dynamic java api invocations external data access sql xquery rdf triple queries sparql meta data annotated modular rule sets expressive transactional updates web imports constructive views scoped reasoning distributed rule bases open environment web verification validation integrity tests integrity constraints test cases messaging reaction rules workflow communication patterns agent architecture global reaction rules eca approach rich libraries built ins math date time string interval list functions detailed description syntax semantics implementation see 

flexibility dynamically composing new business processes integrating heterogenous information systems enabling ad hoc cooperations main aims service oriented computing soc paradigm 
vision build largescale service supply chains business services networks enable enterprises define execute web services transactions business processes multiple business entities domain boundaries standardized web protocols 
propose logic homogenous reaction rule language rule event middleware combine technologies declarative rule programming enterprise application technologies cep soc 
rulebased approach follows separation concerns principle addresses imperatives businesses face today deploy business logic service oriented declarative way effectively detect communicate adequately react occurred complex events business service management processes change decision behavioral business logic underpins applications service offerings order adapt flexible business environment demand utility computing overcome restrictive nature slow change cycles 
rule approach potential profoundly change way services collaborate business processes 
akin multiagent systems mas rule logic layer allows intelligent semi autonomous decisions reactions necessary service management processes service level management slm change management availability management business process management bpm service execution workflow business processes business activity monitoring bam 
successfully demonstrated usability adequacy rule approach various domains research industry cases bam see project semantic search see project semantic web virtual organizations collaboration see rule responder project 
argue rule design artifact service oriented cep middleware declarative rule language rule engine expressive adequate tool describe complex event processing logic business service executions focused event correlation engines restricted activity rules bpel bpel simple material implications precise expressive semantics logic programming non monotonic reasoning formalisms 
clear logical semantics approach ensures traceability verifiability reliability derived results reactions 
ultimately rule design artifact help put vision highly flexible adaptive business services networks support cep bam bpm large scale practice 

boley 
rule ml family web rule languages 
th int 
workshop principles practice semantic web reasoning 
boley 
ruleml ruleml standardization initiative www ruleml org 
bonner kifer 
transaction logic programming logic declarative procedural knowledge 
technical report csri university toronto nov 
chakravarthy kim 
composite events active databases semantics contexts detection 
vldb pages 
kowalski sergot 
logic calculus events 
new generation computing 

workflow patterns www ws mule agents zip 
schroeder 
ws 

schroeder 
rule java scripting bioinformatics semantic web 
proceedings international workshop data integration life sciences 
lloyd 
foundations logic programming nd extended ed 
springer verlag new york new york ny usa 
mule 
mule enterprise service bus mule org display mule home 

eca ruleml approach combining eca rules interval event logics 
working ibis tum technical report 

reaction ruleml classification event action state processing reasoning space 
white reaction ruleml technical group october 

rule service level agreements ibis tum de projects index php 

typed hybrid description logic programming language polymorphic order sorted dl typed unification semantic web type systems 
owl athens georgia usa 

rule service level agreements knowledge representation automated contract sla policy management 
idea munich 
boley craig 
rule responder ruleml pragmatic agent web www responder ruleml org 
kiss 
npl negotiation pattern language design pattern language decentralized agent coordination negotiation protocols 
banda editor negotiation 
university press isbn 
boley kifer dean barrett 
reaction ruleml ibis tum de research 
welsh culler brewer 
seda architecture scalable internet services 
proceedings symposium operating systems sosp chateau lake louise canada 
