graphical specification model transformations triple graph grammars lars geiger michael lawley school information technology electrical engineering university queensland brisbane qld room building itee uq edu au www itee uq edu au university kassel software engineering research group department computer science electrical engineering kassel germany geiger uni kassel de www se eecs uni kassel de se crc enterprise distributed systems technology dstc university queensland brisbane qld australia michael lawley id au www dstc edu au 
models model transformations core concepts omg mda approach 
approach models derived mof graph nature 
contrast current model transformations specified textually 
enable graphical specification model transformation rules proposes triple graph grammars declarative specification formalism 
triple graph grammars specified fujaba tool argue rules easily specified understandable maintainable 
show practicability approach generate rules triple graph grammar rules helps integrate triple graph grammars state art model transformation tool shows expressiveness concept 
model driven engineering mde software engineering principle promotes models transformations primary development artifacts 
practically apply principle object management group omg proposed mda tm set standards integrating mde tools 
mda tm approach separates specification systems implementation systems 
reason basic model types introduced reported funded part operative research centre enterprise distributed systems technology dstc australian federal government crc programme 
geiger lawley platform independent models pim platform specific models psm specific implementation platforms 
pim specified style thinking platform specific details 
necessary pim specified automatically mapped platform specific model adding platform specific details 
allow mapping model transformations necessary 
need standardization model transformations generation views definition queries lead mof query views transformations request proposals rfp omg 
rfp omg initially received proposals varying degrees completeness reviewed assessed 
final revised merged submission supported original submitters expected voted adoption june omg meeting boston 
submission supports flavours transformation specification allowing declarative procedural specifications 
important aspect noticed reviewing revised submissions rfp transformation languages specified textually 
conflicts graph nature current mof models uml models 
graph transformation language appropriate specifying applying model transformations 
having observation propose graph transformations rules specifically triple graph transformation rules graph transformation systems extension current model transformation languages 
graph transformation rules straightforward extension string term rewriting rules introduced seventies currently applied various domains transform rewrite graph structures 
normal graph transformation rules systems suitable operate particular graph 
suited describe intra model transformation needed specify quality improving refactorings 
operate different graphs different graph schemata extension called triple graph grammars suitable 
triple graph grammars rules theoretical foundation want show suitability describing complex model model transformations 
especially argue triple graph grammars provide benefits useful specification application model model transformations triple graph grammars allow incremental change propagations models model transformation system triple graph grammar rules applied transform model model correspondence graph generated 
means create tools update model changed 
change propagation bidirectional especially important iterative software engineering processes model evolves continuously 
triple graph grammars check consistency models 
model transformations triple graph grammars triple graph grammars applied graph data structures models tree ones 
includes hierarchical graphbased data structures think imported model transformations mof compliant models 
rest structured follows section introduces basic concepts graph structures graph transformations general 
section reviews concepts triple graph grammars shows triple graph grammar rules specify model model transformations 
section practical applicability triple graph grammars known example transformation objectoriented class diagram model relational database model 
section presents implementation triple graph grammars fujaba tool describes fujaba generate textually specified model transformation rules rules 
concluding section discusses limitation triple graph grammars sets directions extend current model model transformation languages successfully 
preliminaries section introduces basic concepts graph structures fundamental graph transformation theory informal intuitive way 
addition section presents overview useful graph transformation techniques extensions needed specify model transformations mda tm approach 
directed typed graphs graph morphisms choose directed typed graphs basic structure suited specifying different types models especially mof models 
directed typed graphs contain nodes edges instances node edge types 
instance relation nodes edges types similar relation objects classes object oriented software engineering 
due node edge type contain set application specific attributes operations 
model graph structure edge associated source target node 
formally typed graph defined follows definition directed typed graphs lv set node types le set edge types directed typed graph possible set graphs lv le characterized tuple source target type finite sets nodes vertices edges function type composed functions lv le assigns type edge node functions source target assign edge source target node 
geiger lawley preliminary definition graph transformation systems graph morphisms 
graph morphisms structure type preserving mappings graphs defined follows definition graph morphism source target type source target type graphs graph morphism consists pair mappings mv mv satisfy conditions type type type type mv type source mv source target mv target mappings mv injective surjective bijective mapping injective surjective bijective 
graph variants introduced directed typed graphs variants extensions gain attention graph transformation community 
basic variant uses undirected edges 
undirected edges modeled directed graph contrary edges undirected edge 
variant hypergraphs hyper edge associated sequence source target node 
means edges arbitrary number source target nodes 
construction hierarchical models hierarchical graphs important 
hierarchical graphs model hierarchical structure hyper edge node refinement 
graph transformation graph transformation systems basic principles graph transformation systems graph rewriting techniques manipulate graphs 
graph transformation system defined set graph production rules production rule consists left hand side lhs graph right hand side rhs graph 
rules graph equivalent term rewriting rules intuitively lhs graph matched source graph replaced rhs graph 
intuitively graph transformation rule defined follows definition graph transformation rule graph transformation rule gi grhs ml consists directed typed graphs gi grhs called left hand side graph interface graph right hand side graph 
interface graph gi just auxiliary graph 
morphisms ml gi gi grhs describe correspondence graphs map elements interface graph left hand side right hand side graph 
application graph transformation rule application graph gap simplified algorithm model transformations triple graph grammars 
identify left hand side application graph gap necessary find total graph morphism gap matches left hand side application graph gap 
delete corresponding graph elements application graph gap part left hand side part interface graph gi 

create graph element application graph gap graph element part right hand side grhs part interface graph gi 
connect glue added graph elements rest application graph gap formal description rule application formalisms refer formal foundations single pushout spo double pushout dpo approach reviewed 
currently approaches impact graph transformation community 
application conditions complex graph transformation systems necessary restrict application single rules 
concept positive negative application conditions pacs introduced 
application conditions formally graphs define required context pacs presence nodes edges forbidden context absence nodes edges 
fulfillment application conditions checked rule applied 
consequently algorithm previous section extended adding step checks application conditions 
crossed nodes visualize nodes belonging negative application condition 
specification graph transformation rules traditional approaches specification graph transformation rules right hand side left hand side rule drawn separately 
approach fujaba tool combines sides 
fujaba uses uml collaboration diagrams model graph transformations 
nodes objects edges links objects 
objects links stereotypes appear sides graph transformation rule 
objects links marked destroy stereotype appear left hand side deleted 
stereotype create marks elements right hand side elements created 
fujaba uses programmed graph transformation rules 
means control structure specified manages order execution transformation rules 
control structure modeled uml activity diagrams 
transformation rules embedded activities 
fujaba typed graphs 
graph transformations type specified object name separated colon 
elaborate elements graph transformations negative application conditions multi objects non injective matching supported fujaba tool 
features needed effective specification model transformation rules 
shows graph transformation rule fujaba 
rule consists geiger lawley transformation deletes column table name column 
achieve transformation tries match object type column col link table object object col link object class column 
column attribute value attribute name object matching applied 
matching column col link destroyed 
note activity doubled border 
activity called activity applied long matching 
rule deletes duplicated column fig 
graph transformation fujaba style table 
triple graph grammars section introduce concept triple graph grammars describe suitability extend current model transformation systems 
show triple graph grammars specified fujaba tool forward backward transformations derived triple graph grammar rules 
triple graph grammars straightforward extension pair grammars pair grammar rules introduced pratt early seventies 
pair grammars specify graph string translations 
means pair grammar rule rewrites models source graph target string 
contains pair production rules graph string production rule modify simultaneously participating models 
pair grammars suited specify transformations graphs strings 
string production rule substituted graph production rule pair grammars graph graph translations 
triple graph grammars introduced early nineties graph graph translations data integration 
triple graph grammar rule contains graph productions operates source graph target graph correspondence graph 
correspondence graph describes graph graph mapping relates elements source graph elements target graph 
mapping incremental change propagations update target graph element source graph changed possible 
formally triple graph grammar rules defined follows model transformations triple graph grammars definition triple graph transformation rule triple graph transformation rule pmap consists graph transformation rules pmap transforms source model transforms target model pmap transforms relation model maps source target elements 
graph production applied simultaneously 
specification specify complex triple graph grammar rule graph grammar rules specified rule diagram 
specification single rule fujaba style separate rules rule diagram 
due separation user identify side element belongs 
fig 

example rule class table fujaba shows transformation rule contains objects source model objects target model objects correspondence model objects 
objects source model drawn left objects target model drawn right objects correspondence model drawn middle rule diagram 
additionally marked stereotypes left map right 
rule shown demonstrates mapping classes class diagram tables relational database 
precondition rule drawn top diagram 
means apply rule exist class diagram mapped mapping node relational database 
elements related drawn green create stereotype 
means object type class mapped object type table link key object vice versa 
attribute conditions modeled constraints 
example id class stored name table key 
triple graph grammar rule enable generation transformation rules forward rule reverse rule relation rule checks consistency models 
forward rule created removing create stereotype elements belongs source left model 
reverse rule created removing create stereotype elements belongs target right model 
rule relation rule geiger lawley fig 

forward rule derived rule class table derived removing create stereotype elements belong correspondence map model 
fig 

reverse rule derived rule class table shows derived forward rule 
mapping class diagram relational database exists class diagram contains class new table new key created attributes set accordingly rule 
newly created objects marked mapped class new mapping node 
shows reverse rule create class table relational model 
matching creation objects done manner done forward rule 
rule created relation rule shown 
rule needs class diagram database tries relate 
result consistency check models 
objects created rule mapping nodes 
model transformations triple graph grammars fig 

relation rule derived rule class table rule searches class diagram mapped relational database 
class diagram contains class related table specified rule new mapping created 
mapping created classes tables models consistent 
example show practical applicability triple graph grammars context model transformations known example transformation object oriented class model relational database model 
transformation required application needs store set objects persistently database 
text realisation example qvt proposals 
graphical specification transformation rules example 
basic meta models object oriented class model relational database model transformation 
keep transformations simple object oriented model cut aspects class contain attributes methods methods don need stored persistently 
associations considered 
associations represented attributes classes types 
modelling associations new meta class association need introduced source target association meta class class 
examples meta class classifier class boolean attribute mark objects need stored database 
simplicity transformation transform complete object oriented model relational model 
geiger lawley fig 

meta models including mapping relation effect simplifications described discussed describe transformations detail 
transform instance object oriented meta model relational model natural language rules requirements laws classes correspond tables unique key 
key identical id class 
types relational model correspond simple datatypes objectoriented model 
attributes stored columns column owned table corresponding class 
implement transformations consistency checks objectoriented class model relational database model set triple graph grammar rules created law 
triple graph grammar rule law mapping classes tables discussed section 
rule second law similar 
rule relates datatype object oriented model type relational model way done law 
store attributes columns vice versa requested third law need distinguish attributes simple type attributes classes 
due reason need specify different rules cp 

get impression rules look forward rules generated rules 
rule searches attributes class typed datatype 
creates column attribute assigns column table class type corresponding attribute 
second rule tries match attributes class refer class 
rule finds match creates new column assigns table class attribute belongs 
set correct type attribute table model transformations triple graph grammars fig 

rules attributes columns class identified mapping relation association refer set key table 
implementation specifying triple graph grammar rules fujaba plugin provides necessary triple graph grammar concepts specifying model transformations 
additional plug open source easily extendable 
note rules applied necessary apply rules transform classes datatypes 
rules previously applied mapping relations missing lhs rule matched 
leads implicit specification ordering rules 
described transformations attributes typed classes associations transformed 
transform associations additional rule necessary 
rule creates new table associations stores links corresponding classes foreign keys table 
geiger lawley execute model transformations specified rules options provided fujaba tool 
option story diagrams generated rules 
story diagrams generate java code enables called memory model transformation 
approach implemented second alternative generates rules tool 
implementation transformation language proposed dstc response omg qvt rfp 
declarative logic language fixpoint semantics 
supports single direction transformation specifications source models target models 
transformation specifications constructive meaning specify construction target model 
currently support place update models 
implementation eclipse modeling framework emf supports transforming native models mof uml xmlschema 
usable standalone form eclipse plugin source level debugger 
generate rules plug identifies object link constraint position left map right modifier create delete fills information template forward backward consistency checking rule 
complete algorithm follows basic concepts section 
example rule rule fig generated 
rule cd rdb key forall class cd database rdb cd links cd cd db rdb cd key key table set key key table rdb table key name id name name linking table key key discussion fig 

forward rule transformation example section shown triple graph grammars triple graph grammar rules suitable specify simple inter model transformations 
see problems application triple graph transformation rules real world transformation problems 
success transformation languages mda depends performance application transformation rules 
model transformations triple graph grammars unacceptable wait hours rules applied 
time consuming task application triple graph grammar rules find matches left hand side lhs application graph 
consequently necessary optimise rule matching algorithms 
done specifying identifying optimal order objects matched 
important point optimal support easy specification transformation rules 
includes tool guides user specification restricting 
point fujaba helps lot 
improved 
aspects comes mind talking easy specification rule support reuse adapt existing rules 
includes extending rules described 
current knowledge theoretical concept applying inheritance graph grammar rules 
current triple graph grammar rules suited model transformations source target model 
solve problem extension called mdi rules allows transformation source models target models 
provide possibility additional source target model additional graph production rule specified 
means transformation specified quadruple graph grammar rules 
cases transformations specified set transformation rules case model merging tree structures involved 
describes possible extension current transformation language mda tm approach 
extension triple graph grammars triple graph grammar rules provide deep theoretical concept data integration different graph structures 
easily adapted model model transformations 
important feature triple graph grammar rules implicit creation correspondence graph models 
allows incremental change propagation case model evolves 
practical applicability triple graph grammars model model transformations known example transformation object oriented class model relational database model 
main benefit triple graph grammars ability graphically specify transformation rules 
needs proven graphical transformation rules really easier specify maintain 
possibility prove empirical studies 
currently planning study student teams need specify maintain implement new requirements complex model model transformation system 
geiger lawley benefits triple graph grammars discussed cp 
section existing problems applying rules real world model transformation systems 
especially extension theoretical concepts allow inheritance transformations rules interesting research topics 
extensions optimized algorithms matching right hand side rule think triple graph grammars useful concept specifying applying model model transformations model driven engineering paradigm 

omg object group mda specifications www omg org mda specs htm 

omg object group omg mof query views transformations request proposals qvt rfp www omg org meetings schedule mof query view transf rfp html www omg org docs ad pdf 
gardner griffin koehler hauser review omg mof query views transformations submissions recommendations final standard www omg org docs ad pdf 
ehrig schneider graph grammars algebraic approach 
book ed proceedings th annual symposium switching automata theory university iowa ieee computer society press 
andries engels habel hoffmann kreowski plump sch rr taentzer graph transformation specification programming 
science computer programming 
fowler refactoring improving design existing code 
addison wesley 
van gorp van janssens implementing refactorings graph rewrite rules platform independent meta model 
proceedings fujaba days 

mens demeyer janssens formalising behaviour preserving program transformations 
graph transformation 
volume lecture notes computer science springer verlag 
sch rr winter graph grammar engineering progres 
proceedings th european software engineering conference esec 
volume lncs springer 
geiger graph transformation practical model driven software engineering 
model driven software development volume ii research practice software engineering edited sami volker isbn 

becker haase westfechtel wilhelms integration tools supporting cooperative development processes chemical engineering 
proceedings integrated design process technology pasadena california 
hoffmann plump hierarchical graph transformation 
comput 
syst 
sci 
model transformations triple graph grammars 
automated software architecture evolution hypergraph transformation 
th international conference software engineering application sea marina del ray ca usa 
formalizing architectural refactorings graph transformation systems 
sixth international conference software engineering artificial intelligence networking parallel distributed computing maryland usa ieee computer society ieee computer society 
heckel tutorial graph transformation software engineering perspective 
international conference graph transformation lncs 
volume lecture notes computer science springer 
habel hyperedge replacement grammars languages 
volume lecture notes computer science 
springer verlag new york ny usa 
pratt pair grammars graph languages string graph translations 
journal computer system sciences 
corradini montanari rossi ehrig heckel algebraic approaches graph transformation basic concepts double pushout approach 
rozenberg ed handbook graph grammars computing graph transformation volume foundations 
world scientific 
ehrig heckel ribeiro wagner corradini algebraic approaches graph transformation ii single pushout approach comparison double pushout approach 
rozenberg ed handbook graph grammars computing graph transformation volume foundations 
world scientific 
habel heckel taentzer graph grammars negative application conditions 
fundamenta informaticae 
fujaba fujaba homepage www fujaba de 
sch rr specification graph translators triple graph grammars 
proceedings th workshop graph theoretic concepts computer science 

dstc ibm second revised submission mof query views transformations rfp www omg org docs ad pdf 
qvt partners revised submission mof query views transformations rfp www omg org docs ad pdf 
jahnke management uncertainty inconsistency database reengineering processes ph thesis uni paderborn 
rubin wagner adaptable interpreter memory model transformation 
sch rr eds proc 
nd international fujaba days darmstadt germany university paderborn 
dstc emf transformation engine online documentation 
www dstc edu au 
grose steinberg eclipse modeling framework 
addison wesley 
sch rr multi domain integration mof extended triple graph grammars 
proceedings dagstuhl seminar language engineering model driven software development univ nantes fr heckel univ paderborn de dagstuhl 
mens state art survey software merging 
ieee trans 
software eng 

