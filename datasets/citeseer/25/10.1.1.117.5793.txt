storage intrusion detection watching storage activity suspicious behavior adam pennington john strunk john griffin craig soules garth goodson gregory ganger oct cmu cs school computer science carnegie mellon university pittsburgh pa storage intrusion detection allows storage systems transparently watch suspicious activity 
storage systems positioned spot common intruder actions adding backdoors inserting trojan horses tampering audit logs 
intrusion detection system ids embedded storage device continues operate client systems compromised 
describes number specific warning signs visible storage interface 
describes evaluates storage ids embedded nfs server demonstrating feasibility efficiency storage intrusion detection 
particular performance overhead memory required kb reasonable set rules minimal 
small extensions storage idss embedded block storage devices 
members companies pdl consortium including emc hewlett packard hitachi ibm intel microsoft network appliance seagate sun veritas interest insights feedback support 
ibm intel hardware supporting research efforts 
material research sponsored air force research laboratory agreement number darpa ito oasis program air force contract number afrl 
craig soules supported usenix fellowship 
garth goodson supported ibm fellowship 
government authorized reproduce distribute reprints governmental purposes notwithstanding copyright notation thereon 
views contained authors interpreted necessarily representing official policies endorsements expressed implied air force research laboratory government 
keywords intrusion detection ids virus detection computer security 
digital intrusions fact modern computing 
new security technologies may difficult frequent intrusions occur long software imperfect users fallible 
misbehaving insiders growing problem 
result intrusion detection important part managed computing environment 
intrusion detection system ids attempts identify attacks successful breaches security perimeters 
digital idss developed years falling categories network host :10.1.1.114.4122
network idss usually embedded firewalls scanning traffic network environment attack signatures suspicious traffic 
host detection systems fully partially embedded os examining local information system calls signs intrusion suspicious behavior :10.1.1.47.6145
environments employ multiple idss watching activity vantage point 
storage system interesting vantage point intrusion detection 
common intruder actions pp quite visible storage interface 
examples include manipulating system utilities add backdoors trojan horses tampering audit log contents eliminate evidence resetting attributes hide changes 
design storage server sees changes stored data allowing transparently watch suspicious changes issue alerts corresponding client systems 
networkbased idss storage ids compromise independent host oses meaning disabled intruder successfully gets past host os level protection 
motivates describes storage intrusion detection 
describe kinds suspicious behavior spotted storage ids focusing specific rules violation indicates malicious behavior 
discuss design issues faced realizing intrusion detection including administration possible responses 
demonstrate feasibility prototype storage ids 
storage ids embedded kinds storage systems 
require extra processing power memory space feasible file servers disk array controllers augmented disk drives 
detection rules require fs level understanding stored data 
understanding exists trivially file server explicitly provided block storage devices 
concrete example augmented nfs server storage ids supports rule detection suspicious modifications 
storage ids allows server warn administrator unexpected changes important system files binaries rule set similar tripwire 
additional rules detect system log tampering suspicious attribute modification 
administrative interface supplies detection rules checked processing nfs request 
detection rule fires server sends administrator alert containing full pathname modified file violated rule offending nfs operation 
experiments show runtime cost intrusion detection minimal common case intrusions detected 
analysis indicates little memory capacity needed reasonable rulesets kb example containing rules 
intrusion catch term access computer systems authorized owners including misuse insiders break ins resulting interactive intruders self propagating viruses worms 
discusses functionality required storage intrusion detection devices exporting block interface 
implement rules extended nfs server device able parse traverse disk metadata structures file system holds 
example knowing usr changed disk requires knowing corresponding data blocks changed inode points blocks name translates inode 
achieving degree fs specific information quite feasible assuming device firmware extended small amount additional software 
popular file systems linux ext fs freebsd ffs additional functionality required small lines code simple days programming effort stable years changes disk structures 
remainder organized follows 
section overviews storage intrusion detection 
section discusses storage ids design issues 
section describes prototype storage ids embedded nfs server 
section uses prototype evaluate storage intrusion detection 
section discusses extensions needed storage idss block storage components 
section discusses related 
section summarizes contributions 
storage intrusion detection storage intrusion detection consists having storage servers examine requests service suspicious client behavior 
world view storage server sees incomplete features combine positioned platform enhancing intrusion detection efforts 
storage servers independent client oses continue look intrusions initial compromise host ids disabled intruder 
second computer systems rely heavily persistent storage operation intruder actions cause storage activity captured analyzed 
section expands features discusses options line response identifies limitations storage intrusion detection 
compromise independence storage ids continue watching suspicious activity clients oses compromised 
capitalizes fact storage servers file servers disk array controllers ide disks run separate software separate hardware illustrated 
fact enables server embedded security functionality disabled software os kernel running client systems 
fewer network interfaces rpc snmp just scsi local users compromising storage server difficult compromising client system 
course servers limited view system activity distinguish legitimate users clever impostors 
physical storage interface storage ids spot common intruder actions alert administrators 
administrators able communicate storage ids configure receive alerts 
administrative channel compromise independent client systems meaning user root software os kernel client system operating system file system file system file system rpc device driver operating system rpc device driver operating system rpc device driver storage requests network link storage interconnect physically restricts client access servers admin console file server block store ids configuration alerts client systems storage ids components compromise independence storage ids 
storage interface provides physical boundary storage server observe requests asked service 
note picture works block protocols scsi ide ata distributed file system protocols nfs cifs 
intrusion detection realized storage servers including file servers disk array controllers disk drives 
administrative privileges storage ids 
section discusses deployment options including physical consoles cryptographic channels dedicated administrative system 
warning signs discussed spotted hosts os software host idss enjoy compromise independence storage idss 
host ids vulnerable disabled bypassed intruders compromise os kernel 
interesting place storage ids virtual disk module virtual machine monitor deployment enjoy compromise independence oses running virtual machines 
warning signs storage idss successful intruders modify stored data 
instance may remove traces system penetration install trojan horse programs capture passwords install back door reentry tamper data files purpose sabotage 
modifications visible storage system persistent 
section describes categories signals storage ids monitor particular update operations update patterns structural changes content actual content values 
data attribute modification managed computing environments simplest effective category warning signs consists changes files administrators expect remain unchanged explicit upgrades 
examples files include system executables scripts configuration files system header files libraries 
importance files updates modification warning sign ignored 
storage ids detect modifications fly storage device processes request issue alert immediately 
administrator making legitimate updates quickly dismiss expected alert unexpected alerts investigated 
alternately storage ids include administrative function informing device forthcoming change advance 
current systems modification detection provided checksumming utility tripwire periodically compares current storage state database stored 
storage intrusion detection improves current approach ways allows immediate detection changes watched files avoids complexity maintaining protecting database local storage avoids relying client os checks successful intruder disable bypass notice short term changes undone noticed checksumming utility occurred periodic checks 
update patterns second category warning signs consists suspicious access patterns particularly updates 
concrete examples storage idss usefully watch 
clearest examples client system audit logs 
audit logs critical intrusion detection diagnosis leading intruders evidence precaution 
manipulation obvious storage ids understands welldefined update pattern specific audit log 
instance audit log files usually may periodically rotated rotation consists renaming current log file alternate name logfile creating new current log file 
deviation update pattern current log file update previous log file suspicious 
suspicious update pattern timestamp reversal 
specifically data modification attribute change times commonly kept file quite useful post intrusion diagnosis files manipulated 
manipulating times stored inodes set back original values intruder inhibit diagnosis 
course care taken ids rules programs tar legitimately set times old values 
possible rule trigger alert sets modification time back file just created 
exclude tar style activity catch intruder trying obfuscate modified file 
course intruder delete file create new set date back hide storage ids complex rule catch escalation nature intrusion detection 
detection storage denial service dos attacks falls category suspicious access patterns 
example attacker disable specific services entire systems allocating free space 
similar effect achieved allocating inodes metadata structures 
storage ids watch exhaustion may deliberate accidental coincidental user just downloaded gb trace files 
system reaches predetermined thresholds unallocated resources allocation rate warning administrator appropriate non intrusion situations attention necessary soon 
storage ids similarly warn administrator server load exceeds threshold long may dos attack just indication server needs upgraded 
specific rules spot expected intruder actions general rules may allow larger classes suspicious activity noticed 
example attribute modifications enabling set uid bits reducing permissions needed access may indicate foul play 
additionally applications access storage regular manner 
examples word processors temporary backup files specific ways unix password management involves pair inter related files passwd shadow 
corresponding access patterns seen storage device reflection application requests 
presents opportunity anomaly detection file normally accessed 
done manner similar learning common patterns system calls starting rules regarding expected behavior individual applications :10.1.1.94.6821:10.1.1.47.6145
deviation expected pattern indicate intruder attempting subvert normal method accessing file 
course downside increase substantial number false alarms 
anomaly detection storage access patterns interesting topic research 
content integrity third category warning signs consists changes violate internal consistency rules specific files 
category goes update pattern understanding applicationspecific semantics particularly important stored data 
course verify content integrity device understand format file 
simple formats may verified context write operation file formats may arbitrarily complex verification may require access additional data blocks currently written 
creates performance vs security trade deciding files verify verify 
practice critical files content integrity verification utilized 
concrete example consider unix system password file passwd consists set defined records 
records delimited line break record consists colon separated fields 
fields specific meaning expected conform rules practice 
example seventh field specifies shell program launched user logs linux file shells lists legal options 
capture flag information warfare game def con conference tactic change root shell compromised systems halt targeted system administrator noted intrusion rebooted machine common initial reaction considerable time administrative effort needed restore system operation 
storage ids monitor changes passwd verify conform set basic integrity rules field records non empty password field legal default shell legal home directory non overlapping user ids attack described caught immediately 
larger example offered write ahead logs database file systems 
planned changes committed logs actual data metadata allowing post crash recovery consistent state 
logs intrusion diagnosis recovery 
intruders bypass manipulate intrusion survival mechanisms manipulating data directly allowing changes appear log 
powerful storage ids ensure changes properly reflected log fake changes appear log warning administrator system invariants violated 
suspicious content fourth category warning sign appearance suspicious content 
obvious suspicious content known virus detectable signature 
high storage servers emc network appliance include support internal virus scanning 
executing scans storage server viruses disable scanners infecting clients 
examples suspicious content large numbers hidden files empty files 
hidden files names displayed normal directory listing interfaces may indicate intruder system storage repository illicit content 
large number empty files directories may indicate attempt exploit race condition inducing time consuming directory listing search removal :10.1.1.140.3711
responding intrusions general storage ids operate way interfere valid running system 
detected intruder action may legitimate user activity false alarm default response simply send alert administrative system designated alert log file 
active responses storage ids trigger detecting suspicious activity 
choosing proper response administrator weigh benefits active response inconvenience potential damage caused false alarms 
reasonable active response slow suspected intruder storage accesses 
example storage device wait alert acknowledged completing suspicious request 
artificially increase request latencies client user suspected foul play 
doing provide increased time thorough response cause annoyance false alarm situations cause damage 
device deny request entirely violates rules response false alarm cause damage application failure 
liu proposed radical response detected intrusions isolating intruders versioning file system level 
file system forks version trees sandbox suspicious users administrator verifies legitimacy actions 
unfortunately forking interfere system operation intrusion detection mechanism yields false alarms 
specifically suspected users modify different versions files regular users system faces difficult reintegration problem updates judged legitimate :10.1.1.12.7323
interesting consider embedding approach storage ids storage systems particularly sensitive environments 
intrusive storage embedded response start versioning data auditing storage requests intrusion detected 
doing provides administrator significant information post intrusion diagnosis recovery 
course intrusion related information lost intrusion detected immediately strunk argue doing things just case 
ids triggered employment functionality presents useful trade point 
limitations storage intrusion detection contributes security efforts silver bullet 
ids storage ids produce false alarms 
specific rules watch files modification false alarms infrequent occur legitimate changes watched file easily verified updates involve careful procedure 
issue false alarms grows progressively problematic rules get exact time reversal resource exhaustion examples 
far spectrum specific rules general anomaly detection 
ids storage ids fail spot intrusions 
fundamentally storage ids notice intrusions actions cause odd storage behavior 
example intrusion may worm program communicates network changes files 
intruder may manipulate storage ways 
network host idss storage ids increase odds spotting various forms intrusion 
intrusion detection aspect information warfare nature game escalation 
soon side takes away avenue attack start looking 
storage intrusion detection easily sees common intruder activities crafty intruders change tactics 
example intruder wants host memory long propagates storage 
reboot reset system argues proactive restart 
counter attackers identify ways having changes re established automatically reboot manipulating various boot time rc local unix systems periodic cron unix systems programs 
turn security administrators learn construct rules prevent spot changes 
game continues 
practical consideration storage idss embedded individual components decentralized storage systems effective 
example disk array controller fine place storage intrusion detection individual disks software striping disks part file system state making difficult check non trivial rules adding new inter device communication paths 
storage intrusion detection free 
checking rules comes cost processing memory resources rules require resources 
configuring storage ids balance detection efforts performance costs particular operating environment 
section quantifies costs 
design storage ids useful practice storage ids simultaneously achieve goals 
support useful set detection rules easy human administrators understand configure 
efficient minimizing added delay added resource requirements user communities accept security measures free additionally invisible users intrusion detection rule matched 
section describes aspects storage ids design specifying detection rules administering storage ids securely verifying detection rules responding suspicious activity 
specifying detection rules specifying rules ids tedious error prone activity 
tools administrator uses write manipulate rules simple straightforward possible 
categories suspicious activity storage ids look need different format rule specification 
rule format tripwire specifying rules concerned data attribute modification 
format allows administrator specify pathname file list properties monitored file 
set properties codified include file attributes 
rule language works allows administrator manipulate representation understand pathnames files list attributes watched small defined 
configuring ids look suspicious content methods host virus scanners applicable 
rules specified data signatures look 
experience exists categories warning signs update patterns content integrity 
update patterns lists legal illegal operations 
content integrity pattern matching languages provide guidance 
approaches specifying detection rules categories warning signs area 
secure administration security administrator secure interface storage ids 
interface needed administrator configure detection rules receive alerts 
interface prevent client systems forging blocking administrative requests allow crafty intruder ids 
minimum tamper evident 
intruders rule updates prevent alerts reaching administrator 
maintain compromise independence case obtaining superuser kernel privileges client system insufficient gain administrative access storage device 
promising architectures exist administration physical access cryptography 
environments administrator physical access device local administration terminal allows administrator set detection rules receive corresponding alert messages satisfies goals 
environments physical access device practical cryptography secure communications 
scenario storage device acts endpoint cryptographic channel administrative system 
device maintain keys perform necessary cryptographic functions detect modified messages lost messages blocked channels 
architectures trust models storage systems exist 
type infrastructure common administration network attached security components firewalls network intrusion detection systems 
direct attached storage devices cryptographic channels tunnel administrative requests alerts os client system illustrated 
tunneling simply treats client os untrusted network component 
operating system client file system device driver cryptographic tunnel client os storage requests configuration alerts ids admin console tunneling administrative commands client systems 
storage devices attached directly client systems cryptographic tunnel allow administrator securely manage storage ids 
tunnel uses untrusted client os transport administrative commands alerts 
small numbers dedicated servers machine room approach feasible 
large numbers storage devices components operating physically insecure environments cryptography viable solution 
checking detection rules specified detection rules need checked completely efficiently 
non trivial rules generally apply full pathnames inodes 
additional complications arise rules watch files exist 
simple operations act individual files read write rule verification straightforward 
device need check rules pertaining specific file violated simple flag comparison 
operations affect file system namespace verification complicated 
example rename directory tree may impact large number individual files ids rules checked 
renaming directory requires examining files directories children renamed 
case rules pertaining files currently exist list rules consulted operations change namespace 
example administrator may want watch existence file named directory named exist 
single file system operation mv cause watched file suddenly exist appropriate structure directory tree 
responding rule violations section discusses active responses assumes storage ids reaction violated detection rule send alert administrative system 
alert message contain information administrator understand investigate potential intrusion 
necessary information includes file involved time event action performed 
additionally administrator informed action attributes actual data written file client identity 
discuss alert notification mechanism destined administrator directly sent audit log automated security tools evidence gathering administrator 
additionally receiving system involved normal administrative activities upgrades correlate generated alert progress upgrade forward administrator 
storage intrusion detection nfs server explore concepts feasibility storage intrusion detection implemented storage ids nfs server 
unmodified client systems access server standard nfs version protocol storage intrusion detection occurs transparently 
section describes storage ids handles detection rule specification structures algorithms checking rules alert generation 
base nfs server called implementation described evaluated 
internally performs file versioning request auditing log structured file system features relevant :10.1.1.117.5365
purposes convenient nfs file server performance comparable linux freebsd nfs servers 
secure administration performed server console physical access control approach 
specifying detection rules prototype storage ids capable watching data metadata changes files 
administrator specifies list tripwire rules configure detection system 
rule form pathname attribute list designating attributes monitor particular file 
list attributes watched shown table 
addition administrator choose enable additional rules matches operation rolls back file modification time matches operation creates hidden file file 
rules apply parts directory hierarchy currently pre installed specified simply 
rules communicated server administrative rpc 
rpc interface commands see table 
rpc gives ids values path file watched set flags describing specific rules file 
rules removed mechanism specifying path empty rule set 
currently simple user space utility iterate ascii configuration file issue appropriate rpcs 
checking detection rules subsection describes core storage ids 
discusses rules stored subsequently checked operation 
inode modification time access time link count file owner file type file size modification metadata data data modification time file permissions device number inode number file owner group append table attribute list 
rules established watch attributes real time file file basis 
command purpose direction path rules changes watched characteristics file 
command set delete rules 
retrieves server rule table list pathname records 
watch alert path rules operation delivers warning rule violation administrator 
admin admin server server server admin table administrative commands storage ids 
table lists small set administrative commands needed administrative console configure manage storage ids 
sent console third sent storage ids 
pathname refers file relative root exported file system 
rules description check changes described table 
operation nfs operation caused rule violation 
data structures new structures allow storage ids efficiently support detection rules reverse lookup table inode watch flags non existent names table 
reverse lookup table reverse lookup table lists detection rules apply files directories system 
serves functions 
tracks detection rules server currently enforcing 
second assists translation inode number full pathname 
alert generation mechanism uses provide administrator file names inode numbers resorting brute force search namespace 
reverse lookup table populated rpc 
rule full pathname broken component names stored distinct rows table 
component table records fields inode number directory inode number name rules 
indicate inode number corresponding name particular directory identified directory inode number 
rules associated name attributes patterns watch 
particular inode number name multiple entries inode may exist 
inode number translated full nfs request create 
check parent inode non exist watches watched watch triggered unlink operation 
check inode watches watch triggered watched add watch flags new inode remove non exist watch add name watches non exist watches lookup file name reverse lookup table notify complete administrator operation flowchart storage ids 
structures decision points needed 
common case rules file inode field checked 
picture show rename operations due complexity 
pathname looking lowest level name recursively looking name corresponding directory inode number 
search ends known inode number root directory 
names inode paths lookup inode number 
inode field rpc addition populating reverse lookup table rule mask bits computed stored field watched file inode 
multiple pathnames may refer inode may rule file mask contains union 
field performance enhancement designed locate rules governing file file metadata 
field necessary correctness pertinent data read reverse lookup table 
allows efficient verification detection rules processing nfs request 
inode read part file access rule verification simple mask comparison 
non existent names table non existent names table lists rules pathnames currently exist 
entry table associated deepest level existing directory pathname original rule 
entry contains fields directory remaining path rules 
indexed directory inode number entry specifies remaining path non existent file rules apply 
file directory created removed non existent names table consulted updated necessary 
example creation file detection rule exists rules checked inserted field inode 
reverse lookup table non existent names table contain entire set ids rules effect 
checking rules nfs operations describe flow rule checking diagrammed parts changes individual files changes namespace 
artifact current implementation maximum bytes remaining path field 
result storage ids currently watch pathnames longer 
checking rules individual file operations nfs operation affects single file mask rules violated computed 
mask compared bitwise field file inode 
comparison quickly determines rules triggered causing alert generation 
checking rules namespace operations namespace operations cause watched pathnames appear disappear usually trigger alert 
operations create watched pathnames storage ids moves rules non existent names table reverse lookup table 
conversely operations delete watched pathnames cause rules move tables opposite direction 
name created create mkdir link symlink non existent names table checked 
rules new file checked placed field new inode 
addition corresponding rule removed non existent names table added reverse lookup table 
mkdir entries non existent names table include new directory step remaining path replaced new entries indexed new directory inode number name removed remaining path 
name removed unlink rmdir field corresponding inode checked rules 
rules trigger alert entry added non existent names table 
rmdir reverse actions mkdir necessary 
non existent table entries removed directory modified 
removed directory name added remaining path directory inode number table modified directory parent 
far complex namespace operation rename 
rename individual file modifying rules create new name remove old 
directory renamed subtrees recursively checked watched files 
appropriate alerts generated rules pathname parent renamed directory stored non existent names table field inode cleared 
non existent names table checked recursively rules map directory new name children rules checked added inode field updated name creation 
generating alerts alerts generated sent immediately detection rule triggered 
alert consists original detection rule pathname attributes watched specific attributes affected rpc operation triggered rule 
get original rule information reverse lookup table consulted 
single rpc operation triggers multiple rules alert sent 
evaluation section evaluates costs storage ids terms performance impact memory required costs minimal 
benchmark baseline ids change ssh ssh config 
ssh build postmark table performance macro benchmarks 
benchmarks run storage ids functionality 
number represents average trials seconds standard deviation parenthesis 
experimental setup experiments nfs server new support storage intrusion detection 
client system dual ghz pentium iii mb ram com mbps network adapter 
server dual mhz pentium iii mb ram gb rpm quantum atlas ii drive aic ultra scsi controller intel pro mb network adapter 
client server mb network switch 
operating system machines red hat linux linux kernel version 
ssh build constructed replacement andrew file system benchmark 
consists phases unpack phase compressed tar archive ssh approximately mb size decompression stresses metadata operations files varying sizes 
configure phase consists automatic generation header files makefiles involves building various small programs check existing system configuration 
build phase compiles links removes temporary files 
phase cpu intensive generates large number object files executables 
server client caches flushed phases 
postmark designed measure performance file system electronic mail netnews web services 
creates large number small randomly sized files kb performs specified number transactions 
transaction consists sub transactions create delete read append 
default configuration experiments consists transactions files biases transaction types equal 
performance impact storage ids checks file rules operation possibly trigger alert 
includes read operations may change file access time 
additionally namespace modifying operations require checks possible updates non existent names table 
understand performance consequences storage ids design ran postmark ssh build tests 
main concern avoiding performance loss case rule violated ran benchmarks relevant rules set 
long rules match results similar rules rules existing files rules non existing files 
table shows performance impact storage ids minimal 
largest performance difference configure build phases ssh build involve large numbers namespace operations 
benchmark baseline ids change create remove mkdir rmdir rename file rename dir table performance micro benchmarks 
benchmarks run storage ids functionality 
number represents average trials milliseconds 
microbenchmarks specific filesystem actions help explain overheads 
table shows results expensive operations affect namespace 
performance differences caused redundancy implementation 
storage ids code kept separate nfs server internals valuing modularity performance 
example name removal operations involve redundant directory lookup inode fetch cache locate corresponding inode field 
space efficiency storage ids structures stored disk 
avoid extra disk accesses rule checking important fit memory 
structures check set rules 
inode system additional byte field efficient rule lookup 
cost space inode previously unused 
linux ext fs bsd ffs sufficient unused space store data increasing inode sizes 
space available reverse lookup table provides information 
second pathname component rule reverse lookup table requires bytes byte inode number bytes rule bytes pathname component length third non existent names table contains entry file watched currently exist 
entry consumes bytes byte inode number bytes rule bytes maximum pathname supported 
examine concrete example administrator system downloaded open source version tripwire 
included example rule file linux containing rules 
examined desktop machine obtain idea number watched files exist hard drive 
watched files existed example system 
data structure sizes reverse lookup entries watched files consume kb 
entries non existent name table remaining watched files consume kb 
total kb needed storage ids 
block storage fully implemented convinced storage intrusion detection embedded storage devices export block interface required information linux ext fs freebsd ffs partition type offset size struct partition struct fs block size inode size inode struct struct fs table offsets blocks inodes ext super block group struct ext group desc direct indirect block pointers file type file size file attributes struct ext inode struct dinode file names record lengths inode struct struct direct numbers ext dir entry table important disk structures 
block storage device needs understand disk file system structures order identify blocks associated file rule set 
attributes files file systems identified structures 
array controllers standalone disk drives 
performing intrusion detection inside block devices requires augmenting device firmware understanding disk file system structure 
specifically device able identify blocks contain data metadata file 
write watched block device able determine write caused file change way violates rule 
abilities block devices include storage ids rules basic structures described nfs server prototype 
section reports relevant experiences 
order understand feasibility approach wrote necessary utility understand disk layouts linux ext fs freebsd ffs 
utility identifies disk blocks associated file full pathname words set blocks watched determine write operation trigger rule violation 
disk structures necessary translate filename associated metadata data blocks shown table 
subsets utility allow determine particular write affects file rule set 
example writes associated directory blocks affect watched files 
experiences conclude kind extension feasible 
particular code interpret disk metadata structures straightforward size semicolons worth code implementation complexity days single graduate student 
retrospect surprising despite complexity file system code vast majority fs implementation relates managing modifications integrity maintenance optimizing performance allocation cache management 
business model expect device manufacturers provide firmware extensions implement storage ids particular file system 
patches remain valid long disk structures change 
ext ffs structures described analysis historical versions linux freebsd indicate deployed structures usually remain compatible years new fields added structures time accommodate changes file systems functionality 
updates rearrange vital fields describing disk layout example difference approach described section possible block devices merge ids information file system structures done prototype 
particular field stored inode 
reverse lookup table non existent name table kept roughly described prototype 
memory space analysis section hold block storage 
object storage block storage file storage lies emerging concept object storage 
storage intrusion detection easier storage objects blocks files map directly objects 
object store understand naming structure file system order watch interesting warning signs 
additional related related discussed flow 
emphasis note intrusion detection systems focused host os activity network communication axelsson surveyed state art 
closely related tool tripwire initial template prototype storage intrusion detection ruleset 
closely related original proposal self securing storage argued storage embedded support intrusion survival 
self securing storage retains version data log requests period time called detection window 
intrusions detected window security administrators wealth information post intrusion diagnosis recovery 
versioning auditing complements storage intrusion detection additional ways 
creating rules storage activity detection administrators latest audit log version history test new rules false alarms 
second audit log simplify implementation rules looking patterns requests 
third administrators history investigate alerts suspicious behavior check supporting evidence history 
fourth history retained storage ids delay checks device idle allowing device avoid performance penalties expensive checks accepting potentially longer detection latency 
summary storage ids watches system activity new viewpoint immediately exposes common intruder actions 
running separate hardware functionality remains place client oses user accounts compromised 
prototype storage ids demonstrates feasibility efficiency file server 
analysis additional functionality required suggests similar storage ids embedded block storage devices 
tion ext dir entry include file type information part ext fs revision deployment rare 
paul sushil jajodia peng liu 
rewriting histories recovering undesirable committed transactions 
distributed parallel databases 
kluwer academic publishers january 
paul sushil jajodia catherine barbara 
surviving information warfare attacks databases 
ieee symposium security privacy oakland ca may pages 
ieee computer society press 
stefan axelsson 
research intrusion detection systems survey 
technical report 
department computer engineering chalmers university technology december 
matt bishop michael 
checking race conditions file accesses 
computing systems spring 
card theodore ts stephen tweedie 
design implementation second extended filesystem 
sourceforge net ext intro html 
miguel castro barbara liskov 
proactive recovery byzantine fault tolerant system 
symposium operating systems design implementation san diego ca october pages 
usenix association 
peter chen brian noble 
virtual better real 
hot topics operating systems germany may pages 
ieee comput 
soc 
cheswick bellovin 
firewalls internet security repelling hacker 
addison wesley reading mass london 
def con 
www org 
dorothy denning 
intrusion detection model 
ieee transactions software engineering se february 
dorothy denning 
information warfare security 
addison wesley 
dan farmer 

dr dobb journal october 
stephanie forrest hofmeyr anil somayaji thomas longstaff :10.1.1.47.6145
sense self unix processes 
ieee symposium security privacy oakland ca may pages 
ieee 
garth gibson david nagle khalil amiri jeff butler fay chang howard gobioff charles hardin erik riedel david jim zelenka 
cost effective high bandwidth storage architecture 
architectural support programming languages operating systems san jose ca october 
published sigplan notices november 
howard gobioff 
security high performance commodity storage subsystem 
phd thesis published tr cmu cs 
carnegie mellon university pittsburgh pa july 
john howard michael kazar menees david nichols satyanarayanan robert sidebotham michael west 
scale performance distributed file system 
acm transactions computer systems february 
huang bernstein wang 
components software fault tolerance rejuvenation 
bell laboratories technical journal march april 
jeffrey katcher 
postmark new file system benchmark 
technical report tr 
network appliance october 
gene kim eugene spafford 
design implementation tripwire file system integrity checker 
conference computer communications security fairfax va november pages 
calvin ko manfred karl levitt :10.1.1.94.6821
execution monitoring security critical programs distributed systems specification approach 
ieee symposium security privacy oakland ca may pages 
ieee 
kumar satyanarayanan 
flexible safe resolution file conflicts 
usenix annual technical conference new orleans la january pages 
usenix association 
peng liu sushil jajodia catherine 
intrusion confinement isolation information systems 
ifip working conference database security seattle wa july pages 
teresa lunt jagannathan 
prototype real time intrusion detection expert system 
ieee symposium security privacy oakland ca april pages 
ieee 
mcafee 
emc 
www emc com pdf mcafee pdf 
marshall mckusick william joy samuel leffler robert fabry 
fast file system unix 
acm transactions computer systems august 
nfr security 
www nfr net 
john phillips 
antivirus scanning best practices guide 
technical report 
network appliance www com tech library html 
phillip porras peter neumann 
emerald event monitoring enabling responses anomalous live disturbances 
national information systems security conference pages 
wojciech 
gnu recursive directory removal race condition 
bugtraq mailing list march 
mendel rosenblum john ousterhout :10.1.1.117.5365
design implementation log structured file system 
acm transactions computer systems 
acm press february 
joel stuart mcclure george kurtz 
hacking exposed network security secrets solutions 
osborne mcgraw hill 
bruce schneier 
secrets lies digital security networked world 
john wiley sons 
bruce schneier john kelsey 
secure audit logs support computer forensics 
acm transactions information system security 
acm may 
margo seltzer gregory ganger kirk mckusick keith smith craig soules christopher stein 
journaling versus soft updates asynchronous meta data protection file systems 
usenix annual technical conference san diego ca june 
john strunk garth goodson michael craig soules gregory ganger 
storage protecting data compromised systems 
symposium operating systems design implementation san diego ca october pages 
usenix association 
jeremy ganesh beng hong lim 
virtualizing devices vmware workstation hosted virtual machine monitor 
usenix annual technical conference boston ma june pages 
usenix association 
sun microsystems 
nfs network file system protocol specification rfc march 
linux 
ag 
ftp ftp com pub 
douglas terry marvin theimer karin petersen alan demers mike spreitzer carl hauser 
managing update conflicts bayou weakly connected replicated storage system 
acm symposium operating system principles copper mountain resort december 
published operating systems review 
tripwire open 
unc dl sourceforge net sourceforge tripwire tripwire tar gz 
richard harper steven hunter trivedi 
analysis implementation software rejuvenation cluster systems 
acm sigmetrics conference measurement modeling computer systems cambridge ma june 
published performance evaluation review 
acm press 
ralph weber 
scsi object storage device commands osd working draft 
ansi technical committee august 
ftp ftp org drafts osd osd pdf 

