consistent data replication feasible wans 
yi lin bettina kemme marta mart nez ricardo jim nez peris mcgill university school computer science montreal quebec canada facultad de informatica 
universidad de madrid spain 
proposals shown database replication providing copy serializability excellent performance lan environments powerful multicast primitives 
evaluate similar approach feasible wan environments 
identify crucial bottlenecks existing protocols propose optimizations alleviate identified problems 
experiments show performance remains acceptable medium sized systems data replication guaranteeing copy serializability serious alternative weaker approaches wan environments 
motivation wide online transaction processing systems online stores comes need fault tolerance scalability fast response times 
replication common approach achieve properties 
instance retailer replicates data different store locations store fast local access system survive site crashes 
applications data consistency despite high update loads flexibility submit transaction database replica important unlimited scalability 
having replicas probably typical system configuration 
big challenge keep data replicas consistent 
trade pay providing full data consistency copy serializability atomicity fast response times 
years replication protocols emerged providing data consistency excellent performance lans :10.1.1.16.3690
protocols determine serialization order transaction serialize transactions order 
faster traditional distributed locking avoids expensive phase commit protocol 
little research done solutions applied wans 
analyzes particular protocol :10.1.1.3.983
uses multicast protocols developed wans 
solutions usually execute commit transactions site propagate changes sites time commit allowing faster response times 
referred lazy replication 
remote sites stale data committed transactions lost case crashes 
lazy approaches restrict updates executed single primary research partially funded programme projet adapt nserc nc 
research partially funded european project adapt ist spanish research council mec project tin 
site 
requires client send update transactions wan located close primary increasing response times 
approaches allow inconsistencies replicas difficult resolve 
considering shortcomings existing wan solutions revisits successful solutions developed lans evaluates perform wans 
detected shortcomings protocols executed wans suggest improvements help alleviate major bottlenecks 
show message overhead response time reduced various means 
performance results show data consistency obtained acceptable performance 
experiments response times remain second throughput increases centralized system 
furthermore query read response times excellent affected update transactions 
database replication strategies developed lans common approach provide copy serializability submit sql requests central middleware performs concurrency control usually table basis forwards reads updates replicas 
leads communication middleware database replicas operation transaction 
alternative approaches assume replicated middleware middleware instance installed front database replica 
clients contact closest middleware instance 
client request triggers execution transaction contain database statements 
transaction programs reside middleware called middleware 
advantage wan replication client middleware middleware database communication local middleware middleware communication wan 
proposals decentralized approach group communication systems gcs 
middleware replicas build group multicast messages received members including sender 
different multicast primitives provide different ordering delivery semantics 
ordering semantics interest unordered total order mem bers receiving receive order 
delivery semantics reliable member receives message fail group members receive fail uniform reliable member receives message members receive message fail fails shortly message reception 
uniform reliable delivery provides failure cases reliable delivery allows failed members received messages received 
systems spread call combination reliable total order agreed delivery combination uniform reliable total order safe delivery 
adopt notation 
note gcs probably needs send physical message multicast message submitted application order determine total order 
general higher degree ordering reliability internal messages necessary higher message delay multicast message 
analysis consider number multicast messages submitted database system actual messages sent gcs depends particular algorithms implemented gcs 
simple replication protocol group communication 
existing protocols extensions basic protocol 
middleware distinguishes read transactions called queries update transactions analyzing sql statements 
handles update transactions follows 
receiving request execution update transaction client multicast request sites safe delivery 
ii 
receiving update request safe delivery add request fifo queue 
iii 
request queue submit transaction execution 
iv 
finishing execution remove request queue respond client 
protocol executes update transactions serially total order multicast guarantees atomicity relying uniform reliable delivery 
order allow transactions execute concurrently approaches concurrency control middleware 
assume objects accessed known advance parsing sql statements determine tables accessed 
middleware atomically request locks tables transaction going access safe delivery 
locks granted transaction start executing 
case non conflicting transactions execute concurrently 
follow similar approaches 
call symmetric approach 
example shown fig 

update transactions submitted concurrently sites respectively multicast request total order 
sites execute total order conflict order 
queries need executed replica 
wan probably local replica avoid messages 
database systems oracle postgresql provide special snapshot mode queries read committed snapshot data middleware immediately submit queries database replica actions provide copy 
replication strategies wans exist optimizations protocol 
analyzed lans 
section look optimizations potential effect wans 
look update transactions queries local 
communication choices agreed vs safe delivery 
safe delivery leads long delays requires acks sites messages delivered 
important understand case agreed delivery violates transaction atomicity site receive client request multicast receive agreed order execute commit transaction return ok client fail surviving sites receives request commits transaction 
case committed transaction lost 
happen wan 
application decide accept cases 
delivery 
idea deliver message optimistically physically received final safe 
transaction starts executing optimistic delivery may commit final delivery 
allows overlapping transaction execution message delay 
optimistic final delivery orders transactions abort 
delays optimistic delivery chances high order final delivery 
considers uniform reliable delivery 
order delivery wan look variation optimistic delivery agreed total order established final delivery safe uniform reliability established 
early execution variation 
existing middleware replication approaches optimistic delivery overlap transaction execution delay final delivery 
example fig 
transaction delivered optimistically 
executed wait commit final delivery 
delivered optimistically final delivery 
conflicts middleware start execution committed despite optimistic delivery 
conflicts middleware uses table level locking 
tuple basis conflict 
lans unnecessary waiting big impact delay optimistic final delivery commit small 
wan take full advantage possible concurrency 
desirable execute soon possible suggest optimization take advantage concurrency control underlying database system uses tuple strict phase locking 
example start execution finished execution 
time acquired necessary tuple locks database 
conflict tuple acquire tuple locks execute waiting final delivery message 
conflict block tuple commits releases locks correct behavior 
execute correct serialization order total order 
total order 
exist algorithms determine total order survey see 
little done evaluate combination application wans 
analyze known algorithms 
token token circulates sites token holder may multicast messages 
increasing sequence numbers indicate order messages 
sequencer sender requests sequence number sequencer multicasts message number 
lamport algorithm delivers message site site received messages sites piggybacking acks concurrent messages different senders contains ack message delivered predefined order site priority 
special case atop approach delivers round robin fashion message site 
write set options alternatively executing entire transaction replicas symmetric approach execution take place replica 
resulting changes propagated form write set set update tuples execution exe resp exe exe exe resp primary exe resp exe apply ws apply ws resp resp exe apply ws apply ws exe resp symmetric primary copy local copy fig 

write set opt opt exe exe execution opt opt exe exe early execution exe execution commit 
opt optimistic delivery final delivery fig 

early execution sites apply write set 
applying usually faster executing read update sql statements 
additionally write sets feasible solution exists non determinism set attribute current local time leads data divergence sql statements executed replicas 
primary copy approach 
uses write sets primary copy approach 
table primary copy transaction updating table execute site holding primary copy 
transaction wants access tables different primaries executed primary tables 
refer primary site request transaction multicast total order sites locks requested total order delivery 
primary site executes multicasts write set unordered reliable delivery site crashes site simply 
primary commit immediately 
sites apply write set locks granted locally 
conflicting transactions different primary sites sites execute apply write sets total order request locks order 
serializability guaranteed 
approach sends multicast messages total order unordered reliable transaction 
fig 
depicts example 
submitted respectively multicast total order 
primary site transactions 
conflict executes serially concurrently 
execution transaction multicasts write set sites unordered reliable order 
submitted returns confirmation client 
receiving requests locks correct order execute transactions 
waits write sets applies serially conflict 
returns confirmation client 
primary local site response time includes delay request message 
response time includes delay write set 
adjusting wans 
messages transaction boundaries increase response times significantly propose optimization provides locality 
local copy approach depicted fig 
request update transaction multicast total order transaction executed local site submitted 
executes request received request total order executes multicasts write set unordered reliable delivery commits returns confirmation time time user 
conflict waits receive apply write set executes multicasts write set returns confirmation user 
multicast messages transaction primary copy approach 
conflicting transactions submitted concurrently different sites delivered request message time second wait write set arrive execute locally 
overhead similar primary copy approach 
transactions conflict request message delivered response time 
experimental results system description developed modular java middleware allows easy plug different replication strategies 
middleware supports symmetric sym primary copy pc local copy lc approach early execution variation symmetric approach esym 
middleware uses table locking 
postgresql database backend 
extended postgresql provide function get changes performed transaction write set second takes changes applies 
open source group communication systems spread 
spread uses token protocol providing agreed safe delivery 
integrated optimistic delivery spread basically delivers message optimistically agreed delivery safe delivery 
refer delivery 
implements token sequencer agreed delivery 
implemented lamport safe delivery round robin variation atop agreed delivery top 
algorithms guarantee sites send messages regularly sending null messages necessary 
experiment setup experiments conducted internet machines similiar strength amd mhz mb memory red hat linux solaris located different city canada spain switzerland italy 
round trip times machines continent different continents ms ms respectively 
standard benchmarks read workload synthetic application stress test system 
database consists tables tuples experiments update transactions understand limitations approach 
update transaction modifies randomly selected tuples randomly selected table 
middleware uses table locking chance concurrent update transactions conflict 
scalability analysis uses queries scans table performing aggregation select avg attr sum attr 
execution time query times longer update transaction typically encountered real applications 
test run clients equally distributed replicas submit transactions concurrently rate achieve desired system wide load 
fig 

write sets lan fig 

write sets wan fig 

response times wan single machine results confidence results taken figures 
response times different machines varied depending setups show average machines 
figures show response times seconds increasing load submitted system 
set seconds upper limit consider acceptable 
load increased saturation 
baseline comparison conducted experiments lan wan clients directly connect single database 
updates response times lan clients exceed ms saturation point transactions second tps 
wan clients response time seconds maximum throughput tps 
probably due message overhead connection handling 
write set options evaluated pc lc sym write set options lan wan updates sites 
spread safe delivery transaction request messages 
message delivery takes ms lan hundreds ms wan 
fig 
presents results lan 
pc lc lower response times achieve higher throughput sym 
due fact site executes transactions apply changes requires cpu resources 
lan gcs easily handle high message load lc pc bottleneck 
lc slightly better response time pc lower loads low loads concurrent transactions lc nearly transactions message delay response times pc transactions remote primary message delays response time 
pc outperforms lc high loads concurrent transactions lead conflicts longer blocking times lc 
fig 
shows results wan 
pc graph showing response time transaction submitted primary local writes lw delay request message response time graph transaction submitted client connected primary remote writes rw delay request message response time 
contrary lan environment sym better response time approaches write sets 
additionally sym handle tps pc lc handle tps acceptable response times 
pc lw lower response times lc pc rw worst response time 
reasons behavior explained fig 
shows detailed response time analysis loads tps wan 
response time divided time needed deliver transaction request message grey transaction execution time postgresql black remaining time white 
includes time transactions waiting middleware turn execute commit 
includes time lock granted pc lc approaches time transaction need wait write set delivered 
shows transaction execution black takes small percentage total response time approaches 
postgresql databases bottleneck 
cases time safe delivery request message grey biggest impact response time 
furthermore pc lc generally longer delays safe delivery resulting longer response times sym spread handle double multicast messages sym higher loaded 
especially significant tps 
sym barely time spent middleware white waiting locks similar 
regard pc pc lw transactions delays middleware 
pc rw transactions wait middleware return user perform worse pc lw transactions 
site system evenly distributed workload expect transactions pc lw response times pc rw times 
lc concurrent transactions conflict wait arrive wait needed 
average response time pc lw wait pc rw wait 
low load tps lc response time close pc lw barely concurrent transactions system 
transactions wait middleware thin white stripe 
higher load tps transactions reside concurrently system conflicts occur transaction wait larger white stripe 
summary write set approach boosts performance lan wan due additional message leads contention gcs additional waiting times transactions commit 
needed due non determinism local approach favorable primary copy approach 
communication choices delivery alternatives fig 
shows response times agreed safe delivery spread 
sites sym updates 
delivery show early execution variant esym 
results pc lc shown relative behavior sym similar delivery types 
agreed sym performs far best due fast delivery reliable messages compared uniform reliable messages 
safe sym worst full delay safe delivery added response time 
sym start execute agreed delivery wait safe delivery commit leading better response time safe sym 
difference small transaction execution takes small percent response time shown fig 

esym significantly better sym allows concurrent execution 
execution time determined final safe delivery 
fig 

agreed safe delivery fig 

total order implementations results show best performance achieved accept loss transactions failure cases 
full atomicity needed optimistic delivery especially early execution variation increase performance 
total order implementations far spread token total order algorithm 
section analyze different total order algorithms impact replicated database system 
fig 
shows response times sym updates sites 
token refers token approach seq sequencer approach lamp lamport algorithm rr simple round robin algorithm 
token far worst performance due delay incurred rotating token 
seq despite requiring messages application message potential bottleneck sequencer site offers better performance token 
furthermore leads stable response times sequencer saturated tps 
lamp provides faster response times token seq low loads tps protocol provides safe delivery provide agreed delivery 
response times tps better tps messages sent acks arrive faster 
lamp saturates earlier due cpu saturation keep track acks 
rr lowest response time additional messages message rounds 
saturates shortly sequencer due cpu overhead 
rr preferable choice agreed delivery sufficient 
order understand impact application performance gcs conducted experiments light weight message generator client replicated database 
results similar generally larger message throughput achievable serious application competing resources 
interesting exception seq achieves far higher throughput database application slightly higher throughput run replicated database system 
sequencer site saturated earlier resources consumed database application 
looking spread agreed token algorithm fig 
java group token transaction response time times higher spread load 
probably due implementation choices programming language internal data structures gcs 
resp time ms site sites sites sites sites load txn fig 

scalability queries fig 

scalability update transactions scalability wan experiment evaluates performance system configurations sites 
time workload update transactions queries 
spread agreed delivery sym algorithm 
fig 
shows response times queries similar system sizes smaller loads 
tps site system starts saturate response times queries deteriorates larger system sizes provide response times 
sites queries better distributed site loaded 
fig 
shows response times update transactions 
centralized system best updates communication 
site system consistently better performance site system query load distributed sites response times faster updates 
sites response time increases increased overhead reach total order 
summary typical read intensive workload wan replicated system sites achieve high throughput providing copy serializability 
queries affected update transactions take advantage distribution 
presents detailed wan performance analysis group communication data replication providing full data consistency 
existing protocols developed lans limitations wans due message overhead proposed optimizations local copy approach early execution variant alleviate problems 
general believe consistent database replication feasible 
summarizing alternatives symmetric approach preferable write set approaches lower message overhead 
non determinism requires approach new local copy approach works better primary copy approach majority transactions 
choosing agreed delivery safe delivery help reduce response times 
application requires atomicity situations delivery especially newly proposed early execution variation alleviate high message delay safe delivery 
choice total order algorithm implementation impact performance 
algorithm simply delivers messages round robin appears performance wan 

amir amir stanton 
performance consistent wide area database replication 
technical report cnds cnds john hopkins university 

amir 
total order database replication 
proc 
icdcs 

cox zwaenepoel 
conflict aware scheduling dynamic content applications 
usenix symp 
internet tech 
sys 

anderson breitbart korth wool 
replication consistency practicality mutually exclusive 
acm sigmod conf 

baldoni marchetti 
total order communications practical analysis 
lecture notes computer science vol 
pages mar 

zwaenepoel 
jdbc flexible database clustering middleware 
usenix conference 

chockler dolev 
adaptive totally ordered multicast protocol tolerates partitions 
podc 

chockler keidar 
group communication specifications comprehensive study 
acm computer surveys 

schiper urban 
comparative performance analysis ordering strategies atomic broadcast algorithms 
ieice trans 
inf 
syst dec 

ozsu 
preventive multi master replication cluster autonomous databases 
euro par 

fritzke 
transactions partially replicated data reliable atomic multicasts 
proc 
icdcs 


discussion relational database replication technology 


gray neil shasha 
dangers replication solution 
proc 
sigmod 

agrawal abbadi 
performance database replication group communication 
ftcs 

java groups 
homepage www org 

jim nez peris mart nez kemme alonso 
improving scalability fault tolerant database clusters 
icdcs 

hm grabs hm schek 
evaluating coordination overhead replica maintenance cluster databases 
proc 
euro par 

kemme pedone alonso schiper 
processing transactions optimistic atomic broadcast protocols 
icdcs 

rodrigues vicente 
uniform total order algorithm optimistic delivery 
srds 

mart nez jim nez peris kemme alonso 
scalable replication database clusters 
disc pages toledo spain 
springer 

pedone guerraoui schiper 
database state machine approach 
distributed parallel databases 

plattner alonso 
scalable replication transactional web applications 
middleware 

rodrigues miranda almeida martins vicente 
strong replication middleware 
workshop dependable middleware systems 

shapiro saito 
scaling optimistic replication 
directions distributed computing 
springer lncs 

sousa pereira moura oliveira 
optimistic total order wide area networks 
srds 

spread 
homepage www spread org 
