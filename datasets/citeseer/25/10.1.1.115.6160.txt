operational semantics declarative multi paradigm languages albert hanus huch oliver vidal upv de vera valencia spain upv es institut ur informatik kiel 
kiel germany informatik uni kiel de 
define operational semantics functional logic languages covering notions laziness sharing concurrency non determinism semantics important provide appropriate language definitions reason programs check correctness implementations basis develop tools program tracers profilers optimizers define big step semantics natural style relate expressions evaluated results 
semantics sufficient cover concurrency search strategies reason costs associated particular computations define small step operational semantics covering features modern functional logic languages 
motivated fact exist precise definition operational semantics covering aspects modern declarative multiparadigm programming languages laziness sharing concurrency logical variables non determinism instance report multi paradigm language curry contains fairly precise operational semantics covers sharing informally 
operational semantics functional logic language toy narrowing sharing concurrency formal definition narrowing calculus include particular pattern matching strategy 
important wants reason costs computations see discussion narrowing strategies calculi 
contains operational semantics lazy narrowing strategy addresses concurrency aspects search strategies 
order provide appropriate basis reasoning programs correctness implementations optimizations costs computations define partially supported cicyt tic ha hu hi dfg ha 
operational semantics covering important aspects current functional logic languages 
purpose proceed steps 
introduce natural semantics defines intended results relating expressions values 
big step semantics non deterministic cover aspects concurrency search strategies 
accurately models sharing important reason space behavior programs correctness computed results presence non confluent function definitions 
provide implementation oriented semantics definition individual computation steps 
stating equivalence non deterministic version small step semantics natural semantics extend cover concurrency search strategies 
final semantics formal basis reason operational aspects programs instance order develop appropriate debugging tools 
basis provide comprehensive definition curry contrast contain partial definitions 
prove correctness implementations refinements done :10.1.1.50.4314
furthermore count costs time space associated particular computations order justify optimizations compare different search strategies 
foundations main motivation provide foundation developing programming tools profilers debuggers optimizers declarative multiparadigm languages 
order concrete consider curry source language 
curry modern multi paradigm language amalgamating seamless way important features functional logic concurrent programming 
operational semantics execution model combines lazy evaluation non determinism concurrency 
model introduced formalizing sharing common subterms 
basically curry program set function definitions data definitions sake typing ignore 
function defined rules describing different cases input arguments 
instance conjunction boolean values true false defined rules true false false data constructors usually start uppercase function application denoted juxtaposition 
curry supports logic programming features limitations overlapping rules 
particular rules define functions yield result input called non deterministic set valued functions 
instance function non deterministically returns arguments choose choose subtle question meaning definitions function calls passed parameters set possible values double choose definition double similarly curry follows call time choice semantics descendants subterm reduced value derivation previous expression reduces non deterministically values 
choice consistent lazy evaluation strategy descendants subterm shared 
purpose describe combination laziness sharing non determinism precise understandable manner 
consider programs functions defined rules form tn function tn data terms occurrences defined functions left hand side tn linear multiple occurrences variables formed expression 
rule applicable left hand side matches current call 
functions evaluated lazily operational semantics curry conservative extension lazy functional programming 
extends optimal evaluation strategy concurrent programming features 
supported concurrent conjunction operator constraints expressions built type success 
particular constraint form evaluated solving constraints concurrently 
order provide understandable operational description assume programs translated flat form convenient standard representation functional logic programs 
flat form pattern matching strategy explicit case expressions important operational reading source programs easily translated flat form 
syntax programs flat form follows dm variable xn en constructor call en function call xn case fp pn eng rigid case fp pn eng flexible case disjunction xn en binding denotes program function definition pattern arbitrary expression 
program consists sequence function definitions left hand side pairwise different variable arguments 
right hand side expression composed variables 
data constructors 
function calls 
case expressions disjunctions represent set valued functions bindings local variables xn visible en case expression form case fc xn ck expression ck different constructors ek expressions 
pattern variables locally introduced bind corresponding variables write sequence objects case case 
subexpression ei 
difference case shows argument free variable case suspends nondeterministically binds variable pattern branch case expression proceeds appropriate branch 
bindings principle required translating curry programs convenient express sharing complex graph structures 
operationally bindings introduce new structures memory updated evaluation essential lazy computations 
example show translation functions choose flat form case ftrue false false choose laziness computations show description behavior function calls case expressions 
function call parameters evaluated directly passed function body 
case expression form outermost symbol case argument required case argument evaluated head normal form variable expression constructor top 
consequently operational semantics describe evaluation expressions head normal form 
restriction evaluation normal form solving equations reduced head normal form computations see 
similarly higher order features current functional languages reduced firstorder definitions introducing auxiliary apply function 
base definition operational semantics flat form described 
consistent current implementations intermediate language 
extra variables variables rule occur lefthand side 
extra variables intended instantiated constraints conditions right hand sides 
usually introduced curry programs declaration form free 
antoy pointed extra variables functional logic language causes conceptual problem extra variables renamed rule applied 
model renaming similar renaming local variables bindings 
purpose assume extra variables explicitly introduced flat programs circular binding form call variables bound logical variables 
instance expression logical variables represented interesting note circular bindings implementations prolog represent logic variables 
natural semantics functional logic programs section introduce natural big step semantics functional logic programs midway simple denotational semantics complex operational semantics concrete machine 
semantics non deterministic accurately models sharing 
illustrate effect sharing means example 
example 
consider flat program foo bit case case sharing implementation computation foo evaluate expression 
evaluation goal foo bit return bo binary overflow 
note sharing results bo 
definition semantics mainly follows natural semantics defined lazy evaluation functional programs 
higher order functional semantics construct creation sharing closures functional objects created value lambda expressions 
key idea launchbury natural semantics describe semantics parts normalization process consists converting calculus form creation sharing closures explicit followed definition simple semantics level closures 
similarly describe order semantics functional logic programs separated phases 
phase apply normalization process order ensure arguments functions constructors variables necessarily different bound variables completely fresh variables 
definition normalization 
normalization expression proceeds stages 
flatten arguments function constructor calls means mapping lambda defined inductively follows lambda xn lambda xn xi gamma ei ei en lambda xi lambda xi gamma xi ei en lambda ei variable xi fresh variable lambda ek lambda lambda lambda lambda lambda case fpk lambda case lambda fpk 
ek lambda denotes constructor function symbol 
second stage consists applying ff conversion order fresh variable names bound variables extension normalization process programs straightforward 
normalization introduces different constructs non variable argument 
trivially modified order produce single bindings non variable arguments function constructor call assume subsequent examples 
definition semantics consider program expression evaluated previously normalized definition 
gamma 
gamma 
gamma 
delta gamma 
delta 
constructor rooted val gamma gamma constructor rooted variable gamma fun gamma ae delta gamma xn delta yn ae 
xng gamma yk 
ae ek ae delta gamma delta ae 
yk fresh gamma ei delta gamma delta select gamma delta yn delta ae ei theta gamma case fpk theta pi xn ae fxn 
guess gamma delta delta 
ae pi yn 
yn ae ei theta gamma fpk theta pi xn ae fxn 
yn fresh fig 

natural semantics functional logic programs example 
consider program goal example 
normalized versions follows foo bit case case bit foo state transition semantics defined 
rules obey naming conventions gamma delta theta heap var exp value en furthermore denote variable names constructor rooted terms arbitrary expressions 
heap partial mapping variables expressions 
empty heap denoted 
value constructor rooted term logical variable associated heap 
judgements form gamma delta interpreted expression context heap gamma evaluates value modified heap delta 
briefly explain rules semantics 

order evaluate variable bound term heap simply reduce variable term 
heap remains unchanged 

rule achieves effect sharing 
variable evaluated bound expression heap expression evaluated heap updated computed value return value result 
contrast remove binding variable heap useful generate fresh variable names easily 
solves problem introducing variant launchbury relation labeled names variables :10.1.1.50.4314:10.1.1.50.4314
disadvantage approach black holes infinite loop detected semantical level 
affect natural semantics black holes value 
val 
evaluation value return modifying heap 
fun 
rule corresponds unfolding function call 
result obtained reducing right hand side corresponding rule 

order reduce construct add bindings heap proceed evaluation main argument 
note rename variables introduced construct fresh names order avoid variable name clashes 

rule non deterministically evaluates expression evaluating argument second argument 
select 
rule corresponds evaluation case expression argument reduces constructor rooted term 
case select appropriate branch proceed evaluation expression branch applying corresponding matching substitution 
guess 
rule corresponds evaluation flexible case expression argument reduces logical variable 
rule guess non deterministically binds variable patterns proceeds evaluation corresponding branch 
renaming pattern variables necessary order avoid variable name clashes 
additionally update heap renamed logical variables pattern 
proof judgement corresponds derivation sequence rules 
normalized program normalized expression evaluated initial configuration form 
say derivation successful computes value 
try construct derivation starting left bottom may fail different situations may finite proof reduction valid corresponds infinite loop may rule applies sub part proof 
case possibilities rule select applicable matching branch rule guess applied logical variable obtained argument rigid case expression 
natural semantics distinguish failures 
observable small step operational semantics 
result states natural semantics computes values 
lemma 
gamma delta rooted constructor symbol logical variable delta delta 
small step operational semantics operational point view evaluation natural semantics builds proof gamma bottom manner computation small step semantics builds sequence states :10.1.1.50.4314
order transform natural big step semantics small step need represent context sub proofs big step semantics 
instance applying rule sub proof premise built 
context rule indicates update heap delta computed value expression context explicit small step semantics 
case context extensible sub proof context extension context representation context stack 
configuration gamma consists heap gamma expression evaluated 
state goal small step semantics triple gamma gamma current heap expression evaluated called control small step semantics stack represents current context 
goal denotes domain heap theta control theta stack 
complete small step semantics 
briefly describe transition rules 
rule perfectly analogous rule natural semantics 
rule evaluation variable bound expression constructor rooted logical variable proceeds evaluating adding stack variable stack list empty stack denoted 
variable top stack rule val updates heap 
value computed 
rules fun quite similar counterparts natural semantics 
rule case initiates evaluation case expression evaluating case argument pushing alternatives fpk top stack 
reach constructor rooted term rule select select appropriate branch continue evaluation branch 
reach logical variable rule guess non deterministically choose alternative continue evaluation branch heap updated binding logical variable corresponding pattern 
order evaluate expression construct initial goal form apply rules 
denote lambda reflexive transitive closure 
derivation lambda gamma successful head normal form computed value empty list 
computed answer extracted gamma composing bindings logical variables initial expression equivalence small step semantics natural semantics stated theorem 
theorem 
lambda delta delta rule heap control stack gamma 
gamma 
gamma 
gamma 
val gamma gamma 
fun gamma xn gamma ae gamma gamma yk 
ae ek ae gamma gamma ei case gamma case fpk gamma fpk select gamma yn fpk gamma ae ei guess gamma 
gamma 
ae pi yn 
yn ae ei constructor rooted val constructor rooted variable gamma fun yn ae 
xng ae 
yk fresh select pi xn ae fxn 
guess kg pi xn ae fxn 
yn fresh fig 

non deterministic small step semantics functional logic programs deterministic operational semantics semantics previous section non deterministic 
implementations functional logic languages non determinism implemented search strategy 
debugging profiling functional logic programs necessary model search strategies 
extend relation follows goal theta goal lambda idea computation step yields sequence consisting possible successor states non deterministically selecting states 
non determinism occurs rules guess 
deterministic semantics consists rules rules guess replaced deterministic versions 
main difference deterministic versions possible successors listed result 
sequences search strategy denoted ffi defined function composes sequences goals 
sequence represents new goals resulting evaluation step 
second sequence represents old goals explored 
example left rule heap control stack heap theta control theta stack lambda gamma gamma gamma guess gamma 
gamma 
ae yn 
yn ae 
gamma 
aek pk 
aek ek guess pi ci aei 
fresh fig 

deterministic small step semantics functional logic programs right depth search strategy breadth search strategy specified follows wv vw small step operational semantics including search computes leaf search tree search function ffi defined smallest relation gamma goal lambda theta goal lambda satisfying expand gamma ffi goal goal lambda evaluation starts initial goal expression evaluated 
relation gamma deterministic may reach kinds final states solution yield successor goal solution form gamma computed value 
suspension yield successor expression goal rigid case expression logical variable argument position 
situation represents suspended goal discussed detail section 
fail yield successor value case expression goal match patterns 
goals goals explored solutions 
order distinguish different situations add label relation gamma classifies leaves search tree 
label computed means function type gamma 
succ susp fpk gamma fail yn fpk pi expand function define complete evaluation expression expand expand gamma ffi discard type gamma goal goal lambda decidable condition rule discard means rules matches 
case gamma perform expand step lemma states 
shown simple case analysis lemma 
gamma lambda type expand 
extract information interest set possibly infinite derivations 
example set solutions defined solutions fg gamma lambda succ gamma gg adding concurrency modern declarative multi paradigm languages curry support concurrency 
multi threading communication shared logical variables possible 
simplest semantics concurrency interleaving usually defined level small step semantics 
definition concurrent natural semantics complicated additional don care non determinism interleaving 
formalization concurrency extend expressions stacks goals sequences expressions stacks goal heap theta control theta stack lambda element control theta stack lambda represents thread nondeterministically perform actions idea interleaving semantics 
new threads created conjunction operator extending sequence new thread 
heap global entity threads goal threads communicate means variable bindings global heap 
rules concurrent semantics control theta stack lambda possibilities discarding goal distinguished context interleaving semantics fail goal fails threads fails 
succ goal solution threads terminate successfully 
deadlock thread suspends ones suspend succeed 
concurrent semantics don care non deterministic 
evaluation represents trace system 
evaluation goal threads may suspend variable bindings produced threads 
step possible process 
goal discarded cases discussed 
note fail case interleaved expand steps cases alternative successor 
rule expand allows computation steps arbitrary thread goal 
step don know non deterministic yields write gamma lambda reflexive transitive closure gamma including labels 
expand gamma gamma gamma en sn gamma expand gamma 
gamma gamma en sn ffi fork gamma gamma expand gamma 
gamma ffi fail type gamma fail gamma fail gamma succ type gamma ei si succ gamma ek sk succ gamma deadlock type gamma ei si fsucc type gamma ej sj susp gamma ek sk susp gamma fig 

concurrent semantics multi paradigm programs goal entire process structure copied 
necessary compute solutions efficient perform non deterministic step deterministic step thread possible 
strategy corresponds stability akl oz specified framework 
related operational semantics functional logic languages lazy evaluation sharing concurrency non determinism implemented search strategy 
semantics important precise definition various constructs language combination set valued functions laziness concurrency tools related operational aspects language profilers debuggers 
developed semantics steps 
transformed programs normalized form order explicit pattern matching strategy common subexpressions defined normalized programs natural semantics covering laziness sharing non determinism 
non deterministic small step semantics proved equivalence natural semantics 
refined small step semantics describe concepts covered semantics search strategies concurrency 
final semantics appropriate basis define concrete functional logic programming languages curry mainly handling predefined functions needs added 
far know attempt rigorous operational description covering language features 
want compare related approaches 
launchbury sestoft sansom peyton jones gave similar descriptions purely lazy functional languages logic programming features concurrency covered :10.1.1.50.4314
contain operational denotational descriptions prolog main emphasis covering backtracking strategy cut operator :10.1.1.21.1017
modeling backtracking goal sequence similarities description laziness sharing concurrency covered 
holds descriptions prolog operational semantics consist various small step semantics different language constructs 
podelski smolka defined operational semantics constraint logic programs coroutining order specify interaction backtracking cut coroutining 
modeling coroutining pools related model concurrency demand driven evaluation sharing contained semantics 
operational semantics functional logic programs sharing 
model pattern matching strategy real implementations model search strategies concurrency allows partial applications patterns 
order obtain complete operational description practical language curry add descriptions solving equational constraints evaluating external functions higher order applications semantics 
orthogonal operational aspects sharing concurrency easily added style 
implemented interpreter curry operational description shown see 
interpreter written haskell easily adapted curry order obtain meta interpreter curry 
addition small step semantics implementation provides equational constraints garbage collector heap execute larger examples 
results quite encouraging 
plan semantics define cost augmented semantics useful profiling develop debugging optimization tools partial evaluators check derive new implementations curry :10.1.1.50.4314

albert antoy vidal 
measuring effectiveness partial evaluation functional logic languages 
proc 
pages 
springer lncs 

albert hanus huch oliver vidal 
operational semantics declarative multi paradigm languages 
technical report 
available url www upv es users elp papers html 

albert vidal 
symbolic profiling multi paradigm declarative languages 
proc 

springer lncs 
appear 

antoy 
constructor conditional narrowing 
proc 
ppdp pages 
acm press 

antoy hanus 
needed narrowing strategy 
journal acm 

antoy hanus 
compiling multi paradigm declarative programs prolog 
proc 
pages 
springer lncs 


logical operational semantics full prolog 
part selection core control 
proc 
csl pages 
springer lncs 


logical operational semantics full prolog 
part ii built predicates database manipulations 
mathematical foundations computer science pages 
springer lncs 

debray mishra 
denotational operational semantics prolog 
journal logic programming pages 

gonz alez moreno gonz alez opez rodr iguez artalejo 
approach declarative programming rewriting logic 
journal logic programming 

hanus 
unified computation model functional logic programming 
proc 
popl pages 
acm new york 

hanus prehofer 
higher order narrowing definitional trees 
journal functional programming 

hanus ed 
curry integrated functional logic language 
available www informatik uni kiel de mh curry 

gonz alez ull 
machine system lazy narrowing calculus 
proc 
flops pages 
springer lncs 

janson haridi 
programming paradigms andorra kernel language 
proc 
ilps pages 
mit press 

jones mycroft 
stepwise development operational denotational semantics prolog 
editor proc 
iclp pages 

launchbury 
natural semantics lazy evaluation 
proc 
popl pages 
acm press 

opez anchez hern andez 
toy multiparadigm declarative system 
proc 
rta pages 
springer lncs 

podelski smolka 
operational semantics constraint logic programs coroutining 
proc 
iclp pages 
mit press 

sansom peyton jones 
formally profiling higher order functional languages 
acm transactions programming languages systems 

schulte smolka 
encapsulated search higher order concurrent constraint programming 
proc 
ilps pages 
mit press 

sestoft 
deriving lazy machine 
journal functional programming 

vidal 
cost augmented narrowing driven specialization 
proc 
pepm pages 
acm press 

warren 
higher order extensions prolog needed 
machine intelligence 
ellis horwood 

warren 
prolog instruction set 
technical note sri international stanford 
