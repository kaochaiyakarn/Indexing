emstar software environment developing deploying heterogeneous sensor actuator networks lewis girod mit csail ramanathan university california los angeles jeremy elson microsoft research martin deborah estrin university california los angeles wireless embedded networked systems followed heterogeneous designs incorporating mixture elements extremely constrained bit motes bit embedded emstar software environment developing deploying complex applications heterogeneous networks 
emstar designed leverage additional resources trading performance system robustness sensor network applications 
enables fault isolation fault tolerance system field debugging resource sharing multiple applications 
order accomplish objectives emstar designed run multiprocess system consists libraries implement message passing ipc primitives services support networking sensing time synchronization tools support simulation emulation visualization live systems real simulated 
evaluate discussing acoustic platform distributed acoustic sensing built emstar 
show leveraging existing emstar services able significantly reduce development time possible support center embedded networked sensing nsf cooperative agreement ccr uc micro program matching funds intel authors addresses girod mit csail st cambridge ma email girod nms csail mit edu ramanathan estrin center embedded networked sensing university california los angeles hall los angeles ca email estrin cs ucla edu elson microsoft research microsoft way redmond wa email microsoft com 
permission digital hard copies part personal classroom granted fee provided copies distributed profit direct commercial advantage copies show notice page initial screen display full citation 
copyrights components owned acm honored 
abstracting credit permitted 
copy republish post servers redistribute lists component works requires prior specific permission fee 
permissions may requested publications dept acm penn plaza suite new york ny usa fax permissions acm org 
acm art doi doi acm org acm transactions sensor networks vol 
article publication date august 
article girod achieving high degree robustness 
show sample application developed quickly platform 
categories subject descriptors special purpose application systems real time embedded systems general terms design experimentation measurement additional key words phrases sensor networks real code simulation emstar tinyos acm format girod ramanathan elson estrin 
emstar software environment developing deploying heterogeneous sensor actuator networks 
acm trans 
sens netw 
article august pages 
doi doi acm org 
new applications require sophisticated tasks wireless networks system complexity tends increase 
standpoint minimizing complexity expedient solution usually simplifies nodes centralizing computation possible 
strategy impossible application involves sensors high data rates audio wang chen video requires low latency actuation unreliable network merrill cases force distributed implementation 
types distributed system notoriously difficult deploy 
initial experiences area identified impediments deploying distributed sensing systems outlined key system requirements necessary overcome hurdles 
hardware software components prone fail result harsh deployment environments unexpected inputs unreliable hardware 
particularly true development process environment fully understood components hardware software prototype stage 
failures common systems able continue functioning despite presence 
leads separate related system requirements fault isolation failure software component memory corruption corrupt entire system fault tolerance failure hardware software component result system reboot 
second ability debug failure field critical extremely difficult 
example deploying microphones bound fail 
entire system fails start software component access device difficult find fix failure ensuring field debugging system visibility despite failures critical 
third high cost development deployment motivates platforms support broad class applications girod deployments host multiple independent users 
accomplished resource sharing reusable composable services arbitrate access resources 
acm transactions sensor networks vol 
article publication date august 
emstar software environment sensor actuator networks article early projects produced inspiring demos example early demos nest darpa program efforts typically provided little leverage follow 
systems demo disregard details critical practical deployments example setup configuration typically done developers system calibrated fit specific environmental conditions demo 
furthermore development process demos typically cuts corners rule applying system broader context 
primary motivations emstar came experience developing acoustic localization system girod estrin girod girod :10.1.1.18.2787
went iterations increasing sophistication robustness applicability system improved 
earliest version girod estrin software written single monolithic process processed audio transmitted packets radio module interfaced parallel port 
implementation highly integrated difficult add complex functionality ability time synchronize multiple rf hops 
implementation difficult implement applications integrating localization system access key hardware components radio audio interface exclusively held localization software 
second version system girod problems addressed decomposing system services :10.1.1.18.2787
example radio module managed exclusively service applications access 
decoupling services implementations sophisticated lower complexity 
new difficulties arose managing system composed interlocking services 
new system worked demo difficult operate robust component failures occur imperfections setup equipment system tested time new environment 
final version system girod ideas compose emstar fully applied 
interlocking services previous version updated emstar ipc design principles yielding robust system outside context demo 
ad hoc jury solutions problems managing system replaced reusable components supplied emstar providing common services system health monitoring fault reporting web management tools 
discuss final version detail section 
incremental development process drove development emstar 
set provide reusable set services speed development practical deployable distributed sensing systems common extensible framework 
services framework speed development providing substrate developing distributed sensor systems solving common practical problems lessening temptation just hack saving considerable development time 
time acm transactions sensor networks vol 
article publication date august 
article girod investment infrastructure systems explore new application domains increased sophistication 
emstar driving design goal enable facilitate deployment resource constrained wireless sensing systems 
emstar eventdriven system comprised framework enables fault tolerance field preparation communication layer facilitates fault diagnosis set commonly required services enables quick construction applications 
emstar unique basic philosophy services loosely stateless status channels emphasis making interfaces services visible 
emstar usable set libraries communication primitives device patterns easily composable services visualization tools simulation framework compose system 
article emstar software system detail 
section explain design decisions design emstar tradeoffs 
section show emstar decomposed layers explain layer detail 
section evaluate emstar describing build complex distributed application 
section contains related conclude lessons learned section 
design decisions tradeoffs requirements application area described previous section series design decisions corresponding tradeoffs 
decisions resulted early experiences distributed wireless sensing systems considering ways existing programming interfaces meshed needs systems 
design motivated desire trade performance system robustness visibility developing applications sensor nodes 
emstar designed write software extremely constrained nodes berkeley mote operates different efficiency regime 
energy ultimately important consideration central focus emstar development 
addition emstar operates exclusively application layer directly control hardware process interrupts low latency 
events timestamped accurately timestamps captured kernel exposed emstar applications 
influential decisions emstar design guided design philosophy multi process service architecture enables loosely coupled services device file ipc enables interfaces services easily command line 
discuss emstar key design decisions sections 
multiprocess service architecture emstar built collection separate processes providing services 
decision fact independent choices decision provide set acm transactions sensor networks vol 
article publication date august 
emstar software environment sensor actuator networks article common services support multiple applications second decision implement services separate processes 
choice observation sufficient resources concurrently support multiple independent applications 
ability support multiple applications requirement instances sensor nodes notably platform merrill darpa program 
program independent research groups ran applications single fielded network 
applications act independently need provide services regulate access shared resources 
second choice implement services separate processes enable greater freedom implementation services provide fault isolation services enable system tolerate faults individual services gracefully 
narrowing scope individual services initial implementation service simplified enabling implementations grow sophistication requirements change 
approach enabled readily compose system select services required application 
building service separate process provided maximum flexibility language choice ability integrate arbitrary external components proprietary code forcing early adoption particular language discipline 
implementing emstar group processes single process fulfilled requirements system robustness 
tradeoffs approach discussed section 
importance fault isolation fault tolerance 
fault isolation fault tolerance critical elements reasoning making choice 
early provided platform set customers critical able immediately distinguish failure platform services failure customers applications 
principle holds true today implementation emstar helpful minimize complexity emstar client libraries order reduce likelihood application crash due library bug 
fault isolation separation services process boundaries bug memory corruption process impact processes fault tolerance tolerance service application failures rebooting failed process entire application critical properties fielded systems 
performing fielded experiments involves immense investment time effort cases time critical event scientific phenomenon occurs certain times year 
addition debugging systems field considerably difficult 
considerations suggest high cost bugs failures lie critical path getting results 
desirable system limp spite faults collect data system suffer catastrophic failure requires field high pressure debugging 
long system faults reported visible bugs diagnosed fixed parallel left 
acm transactions sensor networks vol 
article publication date august 
article girod experience systems examples systems exhibited failures field typically system deployed new environment time system modified system software 
cases emstar fault tolerance property 
selection service boundaries interfaces portions system restart momentary effects application performance 
example instance rare combination range errors caused numerical algorithm multilateration component cause fpu exception 
behavior happened lab environments cropped certain types error field 
problematic range estimates refined errors eliminated numerical algorithm converged properly 
system rebooted time bug occurred refinements happen system converge 
argue buggy systems preserved ability unexpected failures critical part building robust system 
selection service boundaries 
key element design emstar services careful selection service boundaries interfaces 
general emstar services delineated interface provided service transactional delivers series messages exhibits low traffic volume 
connections client service generally loose stateless couplings simply series periodic state updates sent server multiple clients 
approach eliminates semantic difficulties typically plague rpc systems tanenbaum van renesse particular simplifying crash recovery eliminating problems associated loss state repeated execution semantics 
example consider case neighbor discovery service 
model client queries neighbor service iterate neighbor list client emstar neighbor service may retrieve complete consistent list time register receive new neighbor report neighbor list changes 
approach serves simplify interface client server decouple client server reducing importance ipc performance greatly limiting frequency ipc transactions 
relying wholly passing complete messages eliminates synchronization problems arising concurrency inconsistencies arising service client restart 
alternative solutions tradeoffs 
tradeoffs multiprocess architecture 
obvious defining ipc channels processes generally efficient flexible complex simple function calls 
cases memory protection required language choice issue example applications written common language immune memory errors loading applications single process space efficient simpler 
acm transactions sensor networks vol 
article publication date august 
emstar software environment sensor actuator networks article problem partial restart may helpful deployment difficult implement correctly full system restart model 
prior addressed robustness partial rebooting contexts including microreboot candea fox candea distributed systems nooks swift driver restart linux kernel 
efforts agreed enabling restart best approach designing robust complex applications challenging implement 
careful implementation partial restart works correctly provides excellent robustness 
done incorrectly system experience various forms livelock properly recover 
device file ipc choice design emstar settle microkernel model services 
implementing interfaces services sockets implemented kernel module called fusd girod enables user space process expose device file interfaces proxy kernel 
device files appear dev filesystem enable interactive user browse state emstar system similar way proc sys filesystems provide view control channel linux kernel 
approach certain advantages disadvantages 
simple library optional interface 
fusd device files ipc described detail section 
key advantage approach special library required access fusd ipc channel 
software access posix api connect service opening device making system calls 
means interfaces accessible shell simple unix utilities scripting languages additional support 
ousterhout arguments relationships scripting system languages ousterhout apply 
accessing emstar services scripts trades performance significant ease code reuse 
providing typeless ascii interfaces addition typed binary interfaces emstar supports rapid development gluing applications 
advantage blocking nature system call simplifies implementation software interfaces ipc channels 
notification channel ready signaled select system calls fusd device file synchronous blocking means simple straight line code worrying concurrency synchronization 
long service hosting interface responsive latency call generally low girod 
disadvantage blocking semantics possibility deadlock event cycle graph fusd clients servers 
local remote transparency 
key disadvantage fusd ipc sockets fusd devices natively provide local remote transparency 
loss important observe acm transactions sensor networks vol 
article publication date august 
article girod emstar systems typically embedded wireless systems remote access rarely behaves similarly local access 
argument follows similar arguments transparent rpc example tanenbaum van renesse 
common case local access fusd achieves adequate performance provides convenient interface clients directly system calls 
common case remote access addressed service described section 
alternative solutions tradeoffs 
tanenbaum van renesse cited number disadvantages rpc style interface discussed emstar ipc strictly local tends stateless transactional manner 
concerns addressed protocols emstar builds syscall rpc layer 
clients servers typically implemented event driven programs readily handle concurrent connections 
client server role reversal accomplished dispatching events client select system call client subsequently calls back retrieve message 
multicast communication server clients achieved notifying multiple clients individually handling retrieval requests system calls multicast semantics layered 
considering implementation ipc alternatives sockets 
sockets advantage higher performance local remote transparency disadvantages requiring client library helper program enable access 
sockets eliminate blocking rpc semantics provide simpler straight line programming model making immediate calls service 
hand sockets solution subject deadlock 
libraries libasync dabek enable asynchronous socket operations event system appear straight line blocking code 
fact systems allow asynchronous operations means concurrency difficult reason 
fact code appears straight line prevent blocks code running concurrently 
contrast emstar event system fusd ipc calls event handlers run concurrently 
syscall api fundamental ipc mechanism emstar represents simple implementation microkernel 
microkernels cost crossing kernel boundary calls emstar expensive 
newer microkernels achieve reasonably comparable performance monolithic kernels memory mapping mechanisms share memory large data transfers 
approach emstar large memory transfers buffer copies kernel boundaries hurt performance 
far added complexity shared memory required applications required high data rates system robustness achieved multiple processes outweighs ipc performance hit 
acm transactions sensor networks vol 
article publication date august 
emstar software environment sensor actuator networks article event driven versus polling versus threads emstar mandate particular execution model requirements embedded sensing dictate system architecture optimized efficiency idle periods 
servers typically designed polling optimize peak performance high load sensor systems designed stay utilized long periods time 
servers stand lose doing underutilized sensor systems extend system lifetime triggering processing events occur 
general interleaved interacting events common case distributed sensing systems 
similar principles reactive robotics distributed sensing systems tend operate reactive mode immediate behavior heavily influenced asynchronous concurrent sensor inputs brooks 
reactive style fits event driven programming model events inputs different types arriving asynchronously integrated influence immediate behavior system 
threads achieve type concurrency synchronizing different types events threaded implementations complex 
services emstar implemented common set helper libraries impose event execution model 
order maintain responsiveness event handler block 
long running computations run separate compute threads message queues linking thread main event loop 

emstar works software frameworks nature difficult conceptualize exist foundation structure set applications 
framework captured describing services interfaces provides structure imposes application 
emstar decomposed distinct layers connected interfaces shown 
layer consists low level code necessary ipc implementing events 
layer motivates construction emstar applications server client processes important understand 
layer heart emstar libraries implementing common patterns communication client server processes 
layer consists set reusable tools services example time synchronization routing simulation visualization system management included emstar applications written emstar 
layer top represents platforms applications built emstar example acoustic system described section 
underlying layers described detail section 
layer fusd syscall ipc event system lowest layer emstar composed fusd girod elson event library 
provide interfaces posix api connect clients servers character device files acm transactions sensor networks vol 
article publication date august 
article girod fig 

decomposition emstar framework layers interfaces 
timer event api 
important note existing version emstar implements interfaces fusd components readily exchanged implementations provide equivalent functionality 
example linux fusd ipc emstar ported operating system simply replacing fusd 
section describe current linux implementation 
event library standard component linux distributions provides interface registering file timer event handlers 
emstar registers events api library runs main loop calls select 
fusd custom microkernel interface implemented linux allows user space server processes register character device files handle system calls devices 
fusd provides convenient way enable cross process message passing time exposing shell accessible interfaces internal state control functions 
respects fusd similar plan system pike advantage running platform running linux requiring port complete os latest embedded hardware 
fusd common features linux expose control status interfaces kernel features difference fusd exposes interfaces user space processes 
example emstar services typically forgo standard unix methods logging status plain files var log var run active fusd device interfaces retain backwards compatibility plain files 
fusd implements interprocess communication multiple processes emstar system 
emstar clients interface services posix system calls fusd device file registered server 
simplifies implementation clients reducing interaction acm transactions sensor networks vol 
article publication date august 
emstar software environment sensor actuator networks article server combination straight line blocking rpc calls event notification select 
underlying implementation wholly grounded posix calls fusd device api developers operate higher layer abstraction provided libraries support common device patterns device clients 
sections describe fusd show fusd client server connections provide fault isolation 
system calls blocking rpc 
system call fusd device represents blocking rpc call server brokered kernel 
example consider snippet client code int status fd char buf fd open dev test status read fd buf sizeof buf line read system call results sequence events corresponding diagram client process traps kernel blocks 
kernel marshals arguments read call fusd message 
kernel queues fusd message server process bound dev test wakes server 
server reads processes previously queued fusd messages 
server reads fusd message processes 
processing message server marshals response writes response message kernel 
kernel passes response back client client system call returns result code 
sequence events important note client blocks entire duration system call 
system call nonblocking call read file descriptor configured nonblocking client blocked server processes message returns response example indicate server ready 
means server unresponsive client block system call arbitrary amounts time 
slow response times caused errors implementation server server busy handling calls clients 
high system load scheduling latency cause significant increase response time 
normal loading conditions experiments show interprocess latency typical pc platform 
despite drawback blocking rpc model considerable benefit approach 
synchronous rpc calls straightforward coding style opposed completion callbacks 
syscall synchronously returns result code minimum latency 
lengthy operations typically structured request accepted rejected acm transactions sensor networks vol 
article publication date august 
article girod fig 

message timing diagram fusd call 
middle column diagram represents fusd kernel module 
quickly rpc call followed notification requested operation completes 
second basic interface accessible posix application library required standard unix interface libraries 
emstar device file interfaces device filesystem cases accessed directly existing unix programs cat 
syscall interface narrow readily ported operating systems linux 
fusd central emstar system understanding performance important investigated section 
important consider emstar systems typically designed way limits importance fusd performance 
module interfaces function call apis tinyos rpc emstar uses fusd support control traffic loosely coupled modules application specific caching client side 
example emstar neighbor service publishes list clients servicing numerous requests access table elements 
emstar services interface physical entity changes state relatively slowly caching client works quite 
acm transactions sensor networks vol 
article publication date august 
emstar software environment sensor actuator networks article client server connections fusd 
fusd client server distinct roles 
process server registering new device file handling operations device file 
process client opening fusd device file 
successfully opening device file connection established client server named client side file descriptor returned open 
client may invoke rpc calls server time making system call file descriptor 
client may listen asynchronous notification file descriptor select poll 
communicate server client server notifies client client calls back server 
example server indicate readable client responds calling read 
asymmetric relationship advantages 
primary advantage fault isolation clients written lower standards servers compromising integrity system 
incorrectly implemented server permanently block client implementation error client cause server fail 
consequence blocking semantics server potentially cause client block client worst pass malformed arguments system call caught kernel rejected server process 
fusd client server connection provides certain guarantees ensured kernel enable fault isolation 
kernel ensures memory fault isolation client server processes 
pointers provided arguments system call checked validity kernel transferred memory space destination process protecting client server 
addition event client server terminates unexpectedly open connections automatically cleaned 
client terminates open connections close messages generated sent servers handling connections 
server terminates active clients clients file descriptors immediately notified exception signals system calls descriptors return error codes 
fusd dependency graphs 
emstar system typically involves dozens components hosts multiple servers client components 
example acoustic localization system described document emstar subcomponents composed components device file interfaces 
processes servers clients processes requirement dependency graph clients servers loop free 
stems blocking nature system calls 
loop dependency graph introduces potential deadlock shown left side 
diagram process blocked write system call client process handling call process attempts write call back process process blocked system call client respond server 
shows way resolve type circular dependency 
common solution restructure system add new service act application level broker building systems collection services acm transactions sensor networks vol 
article publication date august 
article girod fig 

dependency loop broker service break loop 
fig 

diagram showing thread queue break fusd dependency loop 
tends lend naturally type structure services naturally act broker course operations 
note generic message passing mechanism application level broker serves service endpoint perspective client 
errors implementation service handled avoiding client server protocols hard state 
cases natural decomposition strictly layered services 
strict layering inconvenient thread queue break loop shown 
essentially decouples client server portions process queue 
layer emstar device patterns libraries layer emstar design layer libraries comprise heart emstar supporting implementations tools services applications built framework 
fusd possible implement character devices arbitrary semantics 
fusd enforce restrictions semantics system calls needed maintain fault isolation client server kernel 
absence restriction fusd powerful tool practice interface needs applications fall defined classes term device patterns 
device patterns factor device semantics common class interfaces leaving rest customized implementation service 
table shows list emstar device patterns 
emstar device patterns implemented libraries hook event framework 
libraries encapsulate detailed interface fusd leaving service provide configuration parameters callback functions tailor semantics device fit application 
acm transactions sensor networks vol 
article publication date august 
emstar software environment sensor actuator networks article table device patterns currently defined emstar system pattern name description status device presents current status demand notification status change packet device sends receives small packets best effort basis client command device presents usage information read accepts command strings write query device synchronous rpc single round robin queue transactions sensor device streaming buffered interface buffered sequence samples measured sensor log device buffer log messages option device proc style runtime configurable option directory device internally stores mapping strings small integers allows clients access add mapping fig 

block diagram status device pattern 
functions binary printable write callbacks defined server status notify called server notify client state change 
example shows diagram status device server 
diagram dotted box represents portion implemented device pattern library 
library encapsulates fusd related details minimal server implementation lines emstar client implementations trivial services interfaced directly posix api 
emstar services provide human readable device interfaces accessed simple shell commands cat echo 
access programs emstar provides thin client library integrates event system supports added features limits impact service failures automatically failed service 
sections describe device patterns client libraries defined emstar 
patterns discovered development services needed factored libraries 
cases similar instances discovered various features amalgamated single pattern 
acm transactions sensor networks vol 
article publication date august 
article girod status device 
status device pattern provides device reports current state service application 
exact semantics state representation human readable binary forms determined service 
status devices purposes output neighbor discovery service current configuration packet transfer statistics radio link 
easy add status devices convenient way instrument program debugging purposes output neighbors service packet reception statistics links 
status devices support human readable binary representations independent callbacks implemented service 
devices default ascii mode open programs cat read representation 
alternatively client put device binary mode special ioctl call device produce output formatted service specific structs 
programmatic binary mode preferable convenience compactness 
binary mode responses aim provide standard defined interfaces services provide similar functions 
status devices support traditional read eof semantics 
status report size indicated zero length read 
slight deviation traditional posix semantics client keep status device open eof poll receive notification status changes 
service triggers notification client see device readable may read new status report 
process highlights key property status device new report guaranteed current state client guaranteed see intermediate state transition 
corollary clients care particular state done compute 
applications desire queue semantics packet device pattern described section 
possibility dropping intermediate states requires services implement soft state style interface complete current state reported message 
style advantage simplifying implementation eliminating wide array potential bugs implementation errors cause client sync server 
approach inefficient update rate message size increases practice services exhibit high loads event rate size data required represent event 
emstar device patterns status device supports multiple concurrent clients 
intended support status reporting feature interesting side effect increasing system transparency 
new client opens device debugging monitoring purposes observe sequence state changes client effectively snooping traffic service clients 
ability interactively powerful development troubleshooting tool 
status device implement optional write handler configure client specific state options filters 
example routing protocol maintained multiple routing trees expose routing tables acm transactions sensor networks vol 
article publication date august 
emstar software environment sensor actuator networks article client configurable status device 
design client request updates particular sink tree opening device configuring writing node id sink open device file 
packet device 
packet device pattern provides read write device provides queued packet interface 
pattern generally intended packet data interface radio fragmentation service routing service convenient interfaces queue semantics desired 
reads writes packet device transfer complete packet system call 
read supplied large buffer contain packet packet truncated 
packet device may blocking poll driven mode 
poll readable means packet input queue writable means previously filled queue dropped half full 
packet device supports client queues client configurable lengths 
client output queue contains data packet device processes client queues serially round robin order presents server packet time 
supports common case servers controlling access rate limited serial channel 
deliver packet clients server call packet device library 
packets delivered individual clients common case deliver packet clients subject client specified filter 
method enhances transparency system enabling promiscuous client see traffic passing device 
client libraries 
intended prevent failure lower level service causing exceptions clients lead abort 
achieves encapsulating mechanism required open configure device automatically triggering mechanism reopen device closes unexpectedly 
algorithm described 
arguments algorithm name device callback functions config handler 
config function configures freshly opened device file needs client example setting queue lengths filter parameters 
handler function called new data arrives 
note implementation call poll occurs event system fundamental algorithm 
client devices completely transparent 
client constructs structure specifying device name handler callback client configuration including desired queue lengths filters client calls constructor function opens configures device starts watching algorithm 
event crash reopen information originally provided client reconfigure new descriptor 
client libraries supplied packet status devices 
impact fusd emstar devices latency 
emstar process isolation advantages passing messages successive acm transactions sensor networks vol 
article publication date august 
article girod fig 

algorithm 
fig 

measurements packet latency stack emstar link devices mhz pentium iii running kernel 
curve shows average round trip delay ping message loopback interface function packet length different emstar stacks 
graphs show performance dominated packet overhead data transfer 
user space services increases latency 
quantify latency costs fusd representative emstar services sent series loopback udp ping messages measured latency costs incurred layering additional modules emstar link device 
shows results experiment running mhz pentium iii 
udp raw curves represent non emstar benchmark acm transactions sensor networks vol 
article publication date august 
emstar software environment sensor actuator networks article udp socket directly 
udp dev curves represent minimal emstar configuration emstar udp link device 
layer stack added emstar link quality estimation service represented curves 
layer stack added fragmentation service link quality shown frag curves 
experiment measured round trip times packets averaged estimate latency configurations 
latency loopback negligible shown udp raw curve measured latency represents emstar overhead 
case ping round trip traverses stack times approximately latency single traversal 
data show crossing emstar interface costs architecture strong dependence length message passed 
means timing jitter emstar application level large relative interrupt latency 
emstar assumes timing critical operations time stamping performed kernel case user level linux software 
layer emstar components services tools layer emstar design collection reusable components services tools address common needs embedded networked systems 
spans wide range functionality including device drivers routing algorithms time synchronization services distributed collaboration services 
table ii lists commonly emstar services 
section detail fundamental services emstar systems 
describe emstar collection network components enable emstar systems bridge mote networks enable development new network protocols emphasize local communication connections 
second discuss library tinyos hill platform enables tinyos code shared motes emstar systems :10.1.1.117.697
third discuss service daemon starts shuts monitors running emstar system providing centralized logging fault reporting 
describe collection tools help developers design implement deploy new systems including tools simulation deployment remote access visualization 
network stack components 
emstar includes suite components combined provide network functionality tuned needs wireless embedded systems 
components include link drivers implement lowest layer interfaces network resources pass modules implement various types filter passive processing routing modules provide facilities provide network layer interfaces route messages link layer interfaces 
network component provides standard link device interface composed packet device data traffic command status devices configuration status 
link device interface provides uniform interface basic set common features neighbor list data transfer channel selection extensible acm transactions sensor networks vol 
article publication date august 
article girod table ii 
partial list services currently implemented emstar system service name description provides packet interface ip networks provides packet interface mica telos mote networks fragmentation fragmentation layer sending large packets small mtu links sends periodic beacons discover neighbors link quality estimator measuring packet loss low overhead link quality estimator measuring packet loss blacklist drops packets specified policy link quality flooding flood routing dsr distributed source routing sink generic routing module routes packets tables provided external service reliable multicast state dissemination protocol flavors flooding multicast system managing mote networks incorporates lightweight mote registration protocol unicast routing motes time conversion service enables conversions cpu clock time system clocks gps audio codec cpu clocks neighboring nodes global time broadcast service single time available nodes network audio server continuous multichannel recording service internal buffering integration system manages startup shutdown logging processes emstar system daemon monitoring controlling groups nodes udp broadcast directory service creates persistent local mapping string values integers ip connector tunnels ip packets link interface support hardware specific features interim uniform abstraction extended 
represents different approach proposed sp abstraction polastre hardware specific details hidden rigid interface 
emstar implements link drivers providing interfaces radio link hardware including flavors mica mote 
driver overlays socket interface sending receiving packets linux network stack optionally integrating feedback mac layer rssi precise timing transmission failures 
versions mote driver exist supports berkeley mac hill ye mica new version supports adds support newer platforms telos :10.1.1.117.697:10.1.1.16.1535
link device provides abstraction common radio features require abstraction complete opaque 
low level information link capabilities current status example transmit power mtu acm transactions sensor networks vol 
article publication date august 
emstar software environment sensor actuator networks article channel exposed applications intelligent decisions 
link interfaces construct modules sit middle stack passing packets lower layers possibly analyzing modifying way 
pass module client lower link device provider upper link device 
simplify implementation status command interfaces done library 
cases implementation pass involves implementing single function transforms packet sends vice versa 
blacklisting fragmentation examples pass modules 
adds small header packet counts gaps sequence numbers estimate link quality 
blacklisting uses output neighbor discovery module block traffic links bidirectional 
fragmentation breaks large packets smaller packets 
link interfaces provide interfaces routing modules 
network layer interfaces link layer interfaces source destination addresses usually interpreted network layer ids node ids link layer ids interface ids 
simplest routing module flooding module accepts messages adds sequence number resends message exactly 
implementation dsr generic routing module called sink uses routing tables provided module route messages specified destination 
supporting heterogeneity 
girod tinyos hill platform target enables tinyos applications run single module emstar system :10.1.1.117.697
implements shim layer translates tinyos system api emstar api enabling tinyos application run 
enables tinyos application provide services emstar applications hosting emstar device interfaces 
emulates tinyos api applications require direct access mote hardware rely precise timing properly 
key advantage allows tinyos nesc code shared tinyos motes linux 
consider case mote network complex protocol implemented 
ways interface network reimplementing protocol loading specialized image mote directly connected 
case mote implement protocol translate tos msg structures interpreted side java mig 
provides third alternative run nesc protocol code directly special tinyos application uses convenience afforded linux applications 
better support emstar integration provides nesc interfaces support native emstar ipc mechanisms including status device packet device link device 
enables emstar simulation acm transactions sensor networks vol 
article publication date august 
article girod environment simulate heterogeneous networks composed motes girod 
building block developed sophisticated mote collaboration tools including concept mote herding 
services 
program parses configuration file describes emstar system launches system provides centralized services 
services provides automatic visibility status history processes centralized memory logging process responsiveness tracking fault reporting 

process new difficult achieve important emstar system 
difficult track bug especially ones occur infrequently floating point error processing unusual set data 
deployment infrequent crashes problem 
process sufficient problem eventually system recover 
emstar process unique happens context interfaces section 
emstar process crashes restarts prevents ripple effect system operates correctly process 
processes die unexpectedly tracks termination signal log message reported process 
information accessed msg device reports count circumstances process terminations final message 
memory logs 
saves process output memory log rings available interactively dev hierarchy 
design decision stemmed experience hardware platforms writing logs flash posed serious practical problems 
principle saving persistent logs large flash device problem practice platforms include suitable device 
early experiences embedded linux platforms frequent writes flash caused system performance problems 
multiple applications needed access flash erase operations occurring flash accesses block long periods time 
defaulting memory logs addresses problems 
event critical failure user command external component saves snapshot current logs persistent storage flash 
logging capabilities improve design choice may need revisited 
process responsiveness tracking 
unresponsive server cause performance bottlenecks entire emstar system 
address em run tracks responsiveness processes system 
client library includes timer event sends periodic heartbeat message 
tracks arrival messages compares arrival time scheduled send time timer 
discrepancy times reveals estimate responsiveness acm transactions sensor networks vol 
article publication date august 
emstar software environment sensor actuator networks article process timer fires process free respond events 
fault reporting 
fielded systems possibility unexpected faults 
example acoustic systems experience wiring problems cause channels microphones speaker fail 
possible acoustic systems incorrectly set example battery pack microphone array disconnected array wires crossed 
driver detects fault publish fault centralized reporting service provided 
fault report available locally faults device file modules publish fault information network nodes user 
fault reporting api simple 
process reports fault opening device file writing string describing fault keeping file open fault corrected 
file closed application process terminating fault removed list 
processes may monitor fault list standard status client library 
emstar simulator 
transparent simulation varying levels accuracy crucial building deploying large systems elson levis girod 
enables real code simulation different accuracy regimes 
runs virtual nodes parallel device hierarchy 
emstar applications interact world standard interfaces link devices sensor devices transparently run nodes simulation presenting identical interfaces simulated remote resources 
operations pure simulation radio channel simulator sensor simulator provide interfaces modeled world replay conditions observed empirically 
supports emulation mode real hardware radios sensors accessed remotely 
yields convenient interface testbed entire application run centrally single simulation server radio traffic sensor data comes deployed testbed 
real radios far superior attempting model radios especially may bugs glitches operation performance radios 
different simulation regimes speed development debugging pure simulation helps get code logically correct emulation field helps understand environmental dynamics real deployment 
emstar simulator provide tight timing accuracy glosses hardware details timing hardware related bugs appear deployment may difficult reproduce simulation 
simulation emulation eliminate need debug deployed system tend reduce 
regimes emstar source code configuration files identical deployed system making painless transition development debugging 
serves eliminate accidental acm transactions sensor networks vol 
article publication date august 
article girod code differences arise running simulation requires modifications 
simulate heterogeneous networks contain motes emstar systems running mote code inside wrapper girod 
real code simulation environments include levis simos rosenblum emstar environment readily supports heterogeneous networks emulation real hardware :10.1.1.22.4116
remote access methods 
ipc mechanism fusd benefit fast deterministic synchronous making straight line programming sequential calls possible 
properties easy communicate processes single node sockets provide native remote access mechanism 
addition languages java designed handle terms sockets don complete support posix system calls 
address concerns implemented remote access mechanisms emstar 
mechanisms enable access emstar services network simplify integration emstar systems 
remote access mechanisms supported emstar emstar server 

remote access protocol fusd 
fusd device accessed remotely sockets protocol 
server wants enable incoming remote connections set special flag registers device 
flag register device daemon listens incoming requests appropriate server 
client wants connect remove fusd service run client program opens socket remote node requests connection specified device creates local stub device 
connection established local stub device exact mirror remote device 
system call stub marshaled transferred socket remote server handled response returned 
provides transparent access remote fusd services 
transparent recommended conditions reliable deterministic network links client server 
fus dnet convenient way link emstar systems wired ethernet link appropriate systems physically separate connected wirelessly 
situations protocols designed slow unreliable links preferred 

advent web universally implemented protocols 
recognizing emstar supports gateway enables remote access fusd devices 
access implemented cgi scripts enable access status devices command devices log devices simple url formats 
approach easily extended adding additional cgi scripts handle device types 
acm transactions sensor networks vol 
article publication date august 
emstar software environment sensor actuator networks article emstar server integrates provide default web page shows node current status integrate running process 
node page easy novice users browse status node web client 
service enables integration java software readily access services allows programs run remotely 

remote access protocol exposes realtime state changes best effort udp protocol 
tcp reliably connect specific node provides broadcast interface control monitor groups nodes broadcast network 
operate broadcast groups nodes useful deployed environments nodes involved subset nodes reachable time 
udp enables em proxy report status high rates dropping messages buffering rate exceeds capacity 
client connects periodically sending request message lists set status devices monitor 
service opens status devices monitors notification 
notification triggered reads new state reports back requester udp 
request string include options arguments limit rate replies reported automatically reread device periodically set mode device read binary ascii xml supports ability run shell commands report back results 
broadcast remote shell useful managing controlling groups nodes deployed setting 
deployment tools 
emstar includes number tools facilities designed aid deployments 
working deployment primary issues address finding state nodes controlling nodes 
emstar provides mechanisms address issues remote broadcast shell ip routing efficient state flooding 

program invaluable tool dealing collections nodes 
provides simple shell prompt interface commands written prompt broadcast selected network command script run node 
results command reported back collated prompt 
deployed setting provides fast convenient way send commands reachable nodes needing know nodes exist reachable 
addition relative tools ssh connection oriented protocols need maintain connections remote nodes time broken connections 
result simple fast generally intuitive shell interface 
success scripts control groups nodes running experiments implement simple forms coordination writing specialized application code 
acm transactions sensor networks vol 
article publication date august 
article girod ip routing 
deployed setting able telnet network useful 
reason application require ip routing ip routing useful debugging deployment 
full pairwise routing needed routing tree sufficient 
emstar provides ip routing combining native emstar routing facilities ip connector 
ip connector provides regular ip network interface applications telnet ping tunnels traffic interface emstar link device 
state flooding 
challenging parts deployment determining happening network 
example important know link quality observed different nodes system gaps connectivity corrected 
important user aware faults may occurred deployment 
address needs emstar includes efficient reliable state dissemination mechanism girod 
protocol defines local retransmission protocol provided versions flooding version tree multicast version 
flooding version ideal debugging fault reporting rely form routing exchanges messages peer peer low rate flood current state set variables neighbors maximum hopcount limit propagation 
reliability achieved triggering local retransmission gap detected sequence messages 
mechanism described detail girod 
acoustic deployment mechanism flood reported faults neighbor link quality 
enables laptop observe network field quickly getting picture link quality network immediately seeing reported faults 
visualizing emstar systems 
graphical visualizer emstar systems 
extensible design developers easily add plugins new applications services 
shows screen shot displaying real time state running deployment james reserve 
instance data displayed live state flooding protocol 
uses protocol acquire status information collection nodes 
protocol best effort responses delivered low latency real time system dynamics 
order support heterogeneous networks requests configuration file node details visualize services node 
file follows request node status needed 
design enables visualize emstar system needing informed front details software services system 

evaluation evaluate utility emstar case study emstar build sophisticated application 
acoustic acm transactions sensor networks vol 
article publication date august 
emstar software environment sensor actuator networks article fig 

screen shot emstar visualizer taken james reserve deployment 
photo acoustic nodes deployed james reserve 
girod girod shown deployed james reserve platform distributed acoustic sensing 
represents complete vertical implementation sensor actuator network hardware sophisticated application software shown architectural diagram 
system detect localize animal calls field experiments ali 
typical deployment cluster positioned area interest 
node runs emstar stack hosts channel microphone array piezo capable sampling processing channels khz 
nodes system communicate interface external antenna board mote radio provides interface networks motes 
section evaluate effectiveness emstar application framework describing enabled implementation applications sophisticated acoustic self calibration service simple marmot detection application 
acm transactions sensor networks vol 
article publication date august 
article girod fig 

simplified architectural diagram acoustic automated position estimation system 
time synchronized sampling layer composed service audio service 
multi hop network layer composed packet service link estimator flood routing service reliable state dissemination service 
multilateration layer ranging layer separate processes position estimation service 
acoustic self calibration platform includes integrated self calibration mechanism computes highly accurate position orientation estimates node 
calibration system activated emits acoustic signals environment detects points autonomously estimate dimensional position map nodes system 
map may higher level applications bearing localization applications algorithms wang chen ali 
leveraging emstar wealth services 
implementation acoustic software stack shown uses components emstar described article 
starts system keeps processes running event failure supports fault reporting local logging process responsiveness monitoring diagnostics 
faults network connectivity information propagated network state flooding facility 
laptop edge network visualize deployment faults observed broadcast shell commands network control diagnosis 
shows screen shot captured james reserve deployment 
acm transactions sensor networks vol 
article publication date august 
emstar software environment sensor actuator networks article acoustic uses emstar services provide synchronized sampling layer elson 
audio service continuously samples audio hardware provides interface audio data sensor device pattern 
audio service provides time conversion data time synchronization service enabling applications directly convert cpu timestamps points audio time series 
enable conversions clocks neighboring nodes time synchronization service implements broadcast synchronization rbs elson 
time synchronization api provides access entire graph conversions sensor client api provides access specified ranges audio samples past 
node discover interesting feature particular point audio stream facilities easy communicate information nodes hops away turn retrieve analyze data recorded time location 
acoustic uses girod share acoustic ranging position estimation results nodes 
facility built emstar provides publish subscribe interface efficient reliable multihop broadcast 
designed soft state system designs efficient applications publish republish current state 
system deliver current state reliably deliver efficient diffs state change 
implement variety coordination mechanisms acoustic uses coordinate ranging experiments publish results ranging position estimation 
reusable emstar services described represent lines facilities substantially reduces complexity time required construct acoustic self calibration system 
self calibration implementation substantial lines focused exclusively signal processing estimation details required estimate ranges nodes construct coordinate system 
addition implementing common services separate modules able generalize applications support multiple concurrent applications 
contrast iterations system described section emstar implementation enabled animal call detection localization software run parallel self calibration system 
emstar robustness 
emstar uniquely enabled build deploy robust system 
left lab real code simulation emulation capabilities debug underlying components 
networking portions emulation mode node testbed tested networking components real albeit different radio channel 
emulation mode able test networking algorithms real channel subjecting real channel loss timing characteristics 
enabled debug problems relating timing congestion link asymmetry 
acm transactions sensor networks vol 
article publication date august 
article girod getting system working lab performed test deployments james reserve running system continuously field emstar robustness paid specific ways 
unexpected failures underlying software components particularly time synchronization link quality estimation services 
failures reported services automatically restarted clients services automatically reconnected 
failures cause minutes disruption application able ignore problems experiment 
faults caused total system restart disruptive services need go time consuming process rediscover state 
example acoustic ranging service need neighbors takes minutes complete 
cases complete system restart simply recreated failure mode restarting individual service enable system continue move forward collect data 
second acoustic arrays prototypes completely hardened experienced problems microphone wiring low voltages microphone batteries 
faults detected audio service reported low latency 
reliably disseminate observed faults visible laptop field 
fault arose walk node debug 
third hardware failures caused software 
case problems flash filesystem caused application block attempting write 
problem detected reported unresponsive process 
instance way fix problem field emstar enabled problem diagnosed online node removed experiment 
framework monitoring distributed software hardware components difficult track source problem 
arguably debugging facilities robustness features exist system developers need construct order test deploy system difficult environments 
simple detection application second case implementation simple animal call detection algorithm described ali 
detection algorithm written week comprises lines application monitors single audio channel filtering signal detecting onset energy particular band 
event detected time event flooded nodes hops 
separate event recording application receives notifications aggregates notifications different nodes overlap records event flash 
node network detects event nearby nodes record precisely synchronized segments audio processing 
acm transactions sensor networks vol 
article publication date august 
emstar software environment sensor actuator networks article just case localization system emstar existing services components vastly reduce required develop application 
approximately detector implementation devoted signal processing algorithms remainder provided control status interfaces run time reconfiguration parameters 
emstar services addressed remaining details time synchronized sampling multiple nodes multihop networking logging centralized fault reporting 

related article mentioned related individual components aspects emstar 
see section discussion microreboot candea fox candea nooks swift see section discussion alternative ipc mechanisms 
section discuss categories related emstar software systems simulators 
software systems system similar emstar tinyos hill :10.1.1.117.697
tinyos addresses problem space geared smaller mote platform 
tinyos development effort focus reducing memory cpu usage 
operating fewer constraints emstar focus complex applications improving robustness face growing complexity 
key attribute tinyos emstar lacks capacity perform system wide compile time optimizations 
emstar supports forms dynamic binding exist tinyos compile time optimizations ruled 
player stage vaughan software system designed robotics supports real code simulation 
respects player emstar similar philosophy 
focus considerable effort ease system integration just typical emstar systems robots player designed support interface peripherals devices support pre existing standardized interface 
designed support soft state system design typical reactive robotics systems different components loosely connected data paths pass latest state notify change 
main difference lies design system ipc mechanisms 
player simple sockets protocols advantage remote transparency easily browsed provide diagnostic capability 
carmen software framework designed support development real code simulation field robotics 
player carmen uses sockets ipc loose publish subscribe message passing semantics 
player clients servers connect directly carmen carnegie mellon robot navigation toolkit available online carmen 
sourceforge net doc 
acm transactions sensor networks vol 
article publication date august 
article girod carmen routes messages central message router plays role similar fusd emstar 
simulation environments simulation environments applied sensor network systems including levis ns 
support real code simulation mote systems 
ns simulation environment commonly model behavior internet protocols 
levis implemented tinyos platform simulates code running tinyos api 
simulate low level api higher api 
simulations low level api simulate behavior radio stack simulations message level api scalable 
run real time guarantees proper ordering messages proper timing timer interrupts 
take execution time account 
avr mote binary emulator provides cycle accurate emulation environment energy accounting interface radio channel model 
executes complete binary mote image just real mote hardware interrupts real mote 
emstar simulator properly accounts processing time deliver interrupts completely accurate timing 
resource intensive relative simulators 
ns simulation environment adapted wireless settings including different mac layers integrated support common ip protocols 
wireless support central design ns includes support mac layer details particularly 
significant drawback ns real code simulation environment requiring considerable amounts glue link real code simulation engine 
relative emstar provides reduced accuracy simulation environment provides important additional capabilities ability run real hardware provide radio sensor channel ability simulate systems composed different types hardware different types configurations motes 
emstar relatively easy integrate simulation tools example include cycle accurate motes larger simulation 

lessons learned emstar useful development environment heterogeneous embedded sensor actuator networks 
emstar ns network simulator available online athttp nsnam isi edu nsnam index php main page 
acm transactions sensor networks vol 
article publication date august 
emstar software environment sensor actuator networks article current development efforts including acoustic project girod girod heterogeneous camera network node seismic deployment james reserve ess sensing system 
support projects continue enhance emstar new components tools 
support groups emstar including groups ohio state arora mit usc isi 
emstar quite successfully internally external sites easy export broader community project basis original assumptions changed 
multiprocess service model positive benefits robustness services implemented appropriately new users difficulty correctly developing services 
emstar applications generally single processes easier implement implementing services correctly challenging 
investigating monolithic system approach type safe garbage collected language uniform component model 
context try retain system visibility robustness features greatly simplifying system developer perspective 
come conclusive approach achieves ends considering range different points spectrum multiprocess systems monolithic 
second configuration information system tends set command line arguments dynamically command device 
command device enables dynamic run time configuration effect distributing configuration different places means restart semantics include dynamically configuration commands 
standard unix approach reading configuration file startup greatly simplify restart semantics reduce incidence incorrect implementations 
implemented centralized configuration service similar windows registry 
third status device incredibly useful construct reliance fusd introduced difficulties directly supporting remote access requiring compilation kernel module prerequisite system 
considering implementing new version emstar bases ipc sockets eliminates kernel module dependency 
considering implementing specialized interface allows cheap reliable logging outputs traffic particular ipc interface 
fourth applications needed handle data rates impose noticeable overhead message passing 
led plans implement shared memory interface sensor device interface 
addition efficient natural high rate network services dtn bundle transfer direct tcp connections neighboring nodes implement control discovery protocol link device 
acm transactions sensor networks vol 
article publication date august 
article girod continue system investigating ways address issues keeping features emstar fixing better address needs user community 
ali collier girod yao taylor 
empirical study acoustic source localization 
ipsn proceedings sixth international conference information processing sensor networks 
acm press new york ny 
arora 
line sand wireless sensor network target detection classification tracking 
comput 
netw 
dec 
arora 
elements extreme scale wireless sensor network 
ieee 
ieee 
brooks 
robust layered control system mobile robot 
ieee robot automat 

candea cutler fox 
improving availability recursive micro reboots soft state system case study 
perform 
eval 
mar 
candea fox 
crash software 
proceedings th workshop hot topics operating systems hotos ix hi 
chen yip elson wang maniezzo hudson yao estrin 
coherent acoustic array processing localization wireless sensor networks 
proc 
ieee aug 
dabek kaashoek mazi res morris 
event driven programming robust software 
proceedings sigops european workshop saint france 
elson 
fusd framework user space devices 
available online www org software fusd 
elson bien cerpa ganesan girod greenstein estrin 
emstar environment developing wireless embedded systems software 
tech 
rep 
center embedded networked sensing university california los angeles los angeles 
elson girod estrin 
fine grained network time synchronization broadcasts 
proceedings osdi boston ma 

elson girod estrin 
wireless time synchronized cots sensor platform part system architecture 
proceedings ieee cas workshop wireless communications networking 
girod 
self calibrating system distributed acoustic arrays 
ph dissertation 
los angeles los angeles ca 
girod 
emstar software environment developing deploying wireless sensor networks 
proceedings usenix technical conference 
usenix association boston ma 
girod 
system simulation emulation deployment heterogenous sensor networks 
proceedings second international conference embedded networked sensor systems 
acm press new york ny 
girod elson estrin 
locating tiny sensors time space case study 
proceedings iccd freiburg germany 
invited 
girod estrin 
robust range estimation acoustic multimodal sensing 
proceedings international conference intelligent robots systems 
girod parker tseng wang estrin guy kohler 
reliable multicast mechanism sensor network applications 
tech 
rep 
center embedded networked sensing university california los angeles los angeles ca 
girod estrin 
design implementation distributed acoustic sensing platform 
proceedings acm sensys boulder 
liedtke sch 
performance kernel systems 
proceedings th acm sosp 
acm transactions sensor networks vol 
article publication date august 
emstar software environment sensor actuator networks article hill szewczyk woo hollar culler pister 
system architecture directions networked sensors 
proceedings ninth international conference support programming languages operating systems asplos ix cambridge ma 
acm press new york ny 
levis lee welsh culler 
accurate scalable simulations entire tinyos applications 
proceedings sensys los angeles ca 
girod estrin 
disruption tolerant shell 
proceedings acm sigcomm workshop challenged networks pisa 
merrill girod elson kaiser 
dynamic networking smart sensing enable generation 
ieee 
comput 
mag 

merrill girod elson kaiser 
open standard development platforms distributed sensor networks 
proceedings spie unattended ground sensor technologies applications iv 

ousterhout 
scripting higher level programming st century 
ieee comput 
mar 
pike presotto thompson trickey 
plan bell labs 
proceedings summer conference 

polastre hui levis zhao culler shenker stoica 
unifying link abstraction wireless sensor networks 
proceedings rd international conference embedded networked sensor systems sensys 
acm press new york ny 
rosenblum bugnion devine herrod 
simos machine simulator study complex computer systems 
acm trans 
model 

sim 
jan 
girod heidemann estrin 
mote herding tiered wireless sensor networks 
tech 
rep tr 
center embedded networked computing university california los angeles los angeles ca 
swift bershad levy 
recovering device drivers 
proceedings th acm usenix symposium operating systems design implementation san francisco ca 
tanenbaum van renesse 
critique remote procedure call paradigm 
proceedings 

lee palsberg 
scalable sensor network simulation precise timing 
ipsn proceedings fourth acm ieee international conference information processing sensor networks 
girod collier taylor 
automated wildlife monitoring self configuring sensor networks deployed natural habitats 
proceedings th international symposium artificial life robotics 
vaughan howard 
device abstractions portable robot code 
proceedings ieee rsj iros las vegas nv 
wang chen ali hudson yao estrin taylor 
acoustic sensor networks localization 
proceedings spie conference advanced signal processing algorithms architectures implementations 
wang yao pottie estrin 
entropy sensor selection heuristic localization 
proceedings symposium information processing sensor networks ipsn 
ye heidemann estrin 
energy efficient mac protocol wireless sensor networks 
proceedings ieee infocom 
received december revised july february accepted february acm transactions sensor networks vol 
article publication date august 
