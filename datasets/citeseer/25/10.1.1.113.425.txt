intransitive noninterference 
roscoe oxford university computing laboratory wolfson building parks road oxford ox qd uk term intransitive noninterference refers information flow properties required systems may legitimate information flow indirectly users directly 
examine usual definition property terms modified purge function show distinctly weaker property alternative derive considerations determinism 
term noninterference closely analogous synonymous independence refers situation system number users desired actions users effect sees 
main motivating application usually multi level security mls security policy relation users setting information flows permissible generally low high level high low 
domain trying specify prove highlevel users interfere low level ones 
slightly different circumstances concerned potential disruption high level user low level ones direction undesirable interference gets reversed 
simplicity specifically stated concentrate assume attempting prevent high level information revealed low level users 
wide range theories developed support reasoning noninterference view giving precise mathematical characterisations security reproduced proceedings ieee computer security foundations workshop 
actions untrusted user events representing random occurrence system faults 
goldsmith formal systems europe court temple street oxford ox js uk properties arise 
directly indirectly involve studying range low level behaviours affected high level actions 
semantic arenas developed include state machines possibly null inputs outputs users cycle definitions purge functions project behaviours low level actions idea unwinding individual high level action specified effect low level view 
process algebras offer free form model interaction communications noninterference properties complex looking predicates semantic models obvious route automation 
trace theory represents compromise 
authors preferred process algebra approach essence noninterference lack interactions system users process algebras provide highly developed theories specifically developed handle subtleties interaction communication 
see author proposed definition noninterference determinism low level view actions higher level users turned nondeterministic choices means abstraction mechanisms low level view deterministic conclude depend high level users 
formulation understood links process algebra versions avoids difficulty refinement secure process may secure key successful automated checking fdr possible automate efficient decision procedures csp formulation determinism 
possible varying form abstraction high level behaviour distinctions influences high level inputs high level outputs criticism previously process algebra formulations 
extensive study compositional properties type noninterference 
just initial approach subject begins simplifying problem just users high low analysing potential flows 
quite sufficient relation users defines permitted information flow information flow transitive 
assume relation reflexive 
fixing confident information flow allowed set users users provide link application transitive rule 
follows order check potential information flows divide alphabet interaction system compound users sets 
partition interface system security purposes may exactly coincide division users usually refer members partitions domains 
case considering csp process alphabet domains just subsets partition 
security policy specification domains plus information flow relation intuitively obvious relation transitive sense lower security level lower level having lower level 
argument misses crucial possibility high level users trusted downgrade material influence low level users 
argued largescale system handling classified data sense mechanism downgrading information review process interval year rule defined event execution classified mission plan example 
largely handle important problem variety extended theories proposing definitions intransitive noninterference appeared observe term really accurate fact interference noninterference relation transitive 
best way read term abbreviation noninterference intransitive security policy 
objective understand meant intransitive noninterference place context theoretical automation existing determinism 
rest constructed follows section summarise csp determinism formulation noninterference put context 
survey previous intransitive noninterference build determinism analogues condition inspired directly intuition underlying determinism formulation noninterference 
show conditions checked automatically techniques similar developed earlier transitive properties 
review noninterference conditions definitions noninterference state machines usually terms ideas purging unwinding 
purging involves applying function history system point removes parts typically communications high level agents influence agent sees 
usually definition noninterference paraphrased statement purged history valid history system leads state looks identical unwinding hand looks individual steps asserts high level action leaves aspects system affect unchanged 
frequently claimed purge definitions intuitive unwinding definitions amenable automated proof 
theorems proved showing notion unwinding implies corresponding purge definition 
definitions generally unproblematic context deterministic machines machine behaviour completely determined initial state inputs date generate debating points applied nondeterministic systems 
particular quite purge definition security formulated terms behaviours fixed initial state states pass processes corresponding unwinding essentially example chaos discussed csp 
discussed researchers chosen formulate noninterference properties world process algebra 
frequently process algebra purpose csp offers semantic models apparently lend definitions mimic 
example specify conditions essentially set traces process finite communication sequences closely mimic purge unwinding definitions state machines quoted respectively sets high low level actions traces traces traces traces traces traces set finite sequences formed trace members deleted represents process behaves performed trace set events perform immediately completing trace purge says set events offers low level user exactly high level user communicated 
second unwinding says high level action changes process looks low level user formulation assumption high level action occurs 
definitions alternative formulations equivalent 
study nondeterminism inherent concurrency arises naturally ways parallel combinations processes behave 
nondeterminism said arise communicating system trace set options process offers environment different different occasions 
particular potentially nondeterministic system adequately described set traces 
process algebras employ semantic devices subtle distinctions offered traces case csp done failures combinations trace set events process refuse communicate divergences traces process engage infinite unbroken sequence invisible actions 
straightforward reformulate definitions sophisticated models done example 
doing creates problems practical intellectual nature 
practical problem fact shared trace definitions conditions appear easily addressable automated model checkers csp fdr successful years making process algebras usable 
intellectual problem comes fact encounter refinement paradox possible process secure refinement 
consider moment nondeterministic divergence free csp process respectively high low alphabets 
theories deem secure divergence free process refines evidently insecure processes 
worry process worry equivalent process nondeterministic choice operator insecure process perfect channel high low 
certainly conventional understanding nondeterminism means process algebras far natural consider insecure secure 
trouble theory process secure equivalent ones secure 
subtly different problems appear consider process communicates chooses leaky alternative 
extensive discussion issues see 
true say nondeterminism creates difficulties formulations noninterference state machine world process algebra difficulties mainly comes fixed notions things refinement process equivalence mean 
alternative csp formulation security proposed explicitly process algebraic ideas translation ones 
create abstraction operators process represents process looks user see events define secure deterministic 
intention abstraction procedure turn choices high level user nondeterministic choices internal nondeterminism visible outside result new choices represent way transmitting information high low 
deterministic sure high terms described semantic model affect low sees 
different abstraction operators choice depending assumed model communication applies high actions specifically delayable user signal output actions indicator lights information printed screen delayable 
respectively lazy abstraction mixed abstraction definitions operators terms masking actions interleaving evolved equivalent security definitions superior purposes 
divergence free finitely nondeterministic non terminating event process chaos effect hiding operator conceal high actions occur environment forming view process looks 
role parallel compositions chaos reflect fact high level user need offer actions delay 
high action delayed process look low availability delayed case conveying information low high behaviour 
definitions stable failures model csp lazy abstraction allowed divergence free mixed abstraction allowed divergence free 
give practical automation purposes alternatives discussion relationship abstraction choice model see 
definitions immediately give rise definitions noninterference respectively lazily mixed independent ind processes deterministic 
lazy independence precisely equivalent purge unwinding definitions deterministic severe nondeterministic 
new definitions closed refinement avoid refinement paradox 
means pass processes behave securely fail secure processes semantically equivalent processes security questionable 
words conditions err side caution 
certainly case order assess security nondeterministic csp processes accurately necessary semantic models significantly finer traditionally csp 
best known attempts finer models focardi gorrieri modified ccs property coinciding definitions deterministic processes transition system models ccs weak strong bisimulation equivalences methods determining process equivalence 
unfortunately conditions pass questionable processes related example shown forster goes offer stronger conditions 
accused caution standard transition system model contain sufficient information tell source nondeterminism 
certain model capable giving proper treatment subject retain details nondeterministic choices example form take mechanism resolves recording 
continuing uncertainty right formulation nondeterministic ind conditions efficiently decidable fdr decided address intransitive noninterference properties looking analogues 
conditions binary partition alphabet simplification discussed fails case intransitive security policies certainly 
concentrate formulations conditions language csp direct comparisons easier 
confident basic issues raise independent choice 
critique main motivating examples intransitive noninterference downgrading trusted individual permitted move files high low classification similar cases agent influence highly defined route assured pipeline certification service allowed determine see information 
order understand different theories relate examine pair simple example processes type 
file system suppose set users function clearance set partial order security levels similarly set filenames mapping going allow vary assume users may write files level may read files level 
realistic operation interesting copy operation allows user copy data files level 
addition special interface trusted agent general imagine family downgrading agents different privileges inspect files decide lower security levels 
simple csp description process cl fv fs fv cl fv fs write cl fv fs copy cl fv fv fs fv fs cl fv cl fs cl fv second example process guards channel ensuring suitable data gets assumed internal mechanism decides implemented nondeterministic choice 
data input channel sent channel motivation high level agent encrypts data effectively mathematical senses information content remains 
returned sender deemed unsuitable guard guard return guard process really represents intermediary questions noninterference arise best connected producer consumer information 
formal definitions intransitive noninterference literature discovered roots influenced state machine model similar 
purge functions actions retained transitive causal link trace consideration agent view considered 
words purge frequently termed perspective trace obvious assignments agents actions legitimate route second influence prima facie reasonable plainly may influenced legitimate route influencing believe motivation definition may fact reasonable specify resulting purge function generate trace reasonable process meeting noninterference requirements 
example consider trace process just security levels users file initial data initial security level hi 
hugh write lo downgrade lois read perfectly legitimate trace ing respect level lo change 
purge function removed initial event things different lo downgrade lois read trace system 
words function retains information fully explain events seen low level terms behaviours system 
definition problems 
suppose implementation file system erroneous event intended downgrade level hi file level lo effect downgrading 
system trace hugh write lo downgrade read lois regard generating unwanted information flow 
function assumption security domains security classifications plus leave trace definition noninterference fail catch leak 
problem interference trace causes lois certainly accountable things hugh acted unfortunately things intended influence 
words permitting information influence pass lois irrespective intended 
failed capture essence downgrading 
particular problem repaired dividing security domains pieces 
simplest ignore channels file system copy 
necessary file classification pairing uc users level operations file dc file level 
appropriate security policy information flow allowed pair domains associated different files directly uc uc uc dc dc uc just discussed violates security condition contains information flow files 
include actions plainly influence ordinary user introduce domain file influenced file influence 
copy action clearly generates information flow files possible deal allowing provide sort intransitive bridge files downgrading actions levels 
apparently forced divide security levels subdomains part security policy intransitive quite apart pieces directly concerned 
unfortunately complicated security policy described adequate ensuring system alphabet generate undesired information flows 
suppose bug system means downgrading file reverts value file back back occurs write 
trace hugh secret write hugh public write complex plausible instance type behaviour distributed file system files temporarily multiple values update 
imagine file downgraded time temporarily making date secret value available points network 
guard 
network intended assured pipeline lo downgrade lois secret read seemingly carries undesired information flow presumably wanted downgrade contents file point downgrade action 
information flow files trace left refined policy behaviour passed 
illustrates fact definition security permits information contained trace high level actions prior downgrading passed low level controlled information flow desired 
see security domains reasonably re worked catch type flow 
argue definition sense explanation behaviour downgrading system fully understand sense represents natural generalisation definition transitive noninterference satisfy 
deficiencies comes deciding information flows contained process purported downgrading system limited expect 
situation similar example 
part network shown reasonably require information passes users left right guard 
natural thing study relationship views system set events classes respectively outputs guard 
plainly legitimate influence influence influence directly 
network built worry guard property construction 
information flow analysis issue complex picture hand physically potential channels want ensure convey information case allowed guard 
problem definition guard 
assured pipeline construction time guard permits information contained preceding interactions passed route small proportion contained history 
cases problem simply definition allow possibility intermediary may want selective information influenced passed 
determinism formulation advantages determinism formulation information flow gives entirely different perspective problem 
thinking formulate intransitive noninterference terms determinism attempted create natural specification different viewpoint initially expected case transitive noninterference definition coincide cases 
shall see different notion 
simplicity initially consider case process users information allowed flow pair trying detect potential information flow obvious views process consider 
view second just actions actions meant create nondeterminism view abstracted 
really act creating abstraction identifies nondeterminism created forbidden created 
second process may nondeterministic allowing information flow manifest nondeterminism visible particular abstraction operator issue lazy abstraction discussed earlier appropriate pure csp context ways abstracted user interact included signal output events right mixed abstraction 
specification suggested away events process nondeterminism visible traces traces failures straightforward generalisation usual definition determinism csp phrase locally deterministic says trace abstraction see acceptance refusal event alphabet 
natural generalisation arbitrary reflexive security policy domain union alphabets processes allowed influence define insist just sense process locally deterministic true users say obeys lazy policy subset events alphabet signals clear define corresponding notion mixed abstraction 
rest concentrate solely lazy abstraction omit bracketed lazy phrase 
lemmas set basic desirable properties definition 
lemma obeys policy obeys 
abstraction operators monotone nondeterminism visible subset alphabet lemma transitive obeys alternative definition infer way described terms multiple binary partitions alphabet concept lazy independence discussed section 
lemma policies partition alphabet domains implies obeys obeys 
evidently underlying intuition definition similar discussed independence section 
particular expect get pessimistic assessments case original process nondeterminism visible low level user 
obvious question arises definition mean terms trace sets applied deterministic process 
returning user case nondeterminism occur precisely necessarily different traces traces failures easily leads alternative characterisation property 
theorem suppose deterministic security policy 
obeys domains traces new characterisation obvious similarities purge style discussed earlier 
purge trace definition section stating choices offered independent events occurred part alphabet meant pass information earlier definition demanding purged trace trace course closely related discussion section showed simple definition purge case intransitive policy produce trace 
happened intuition determinism led back simple purge function produce ways specifying noninterference purge rely trace 
simple reason equivalence relation traces induced strictly finer produced theorem allows deduce result 
theorem suppose deterministic security policy 
obeys new sense satisfies definition noninterference respect 
assumption deterministic fact necessary 
words new definition tolerant old 
shall soon see strictly tolerant 
interesting consider examples discussed section behave new definition 
consider case just users hugh lois start considering situation domains security policy users plus events copy removed definition 
result opposite time situation leaky version system satisfies property find apparently reasonable implementation start section 
traces hugh write lo downgrade write hugh downgrade lo high level actions lois deleted lois ously gets different events offered system attempts read happened downgrading action contain information explain value lois see need hugh history interaction retained explain 
saw section allow passing far information solution 
satisfactory answer comes looking carefully definition 
presently defined agent controlling downgrade actions perform having seen downgrading assume file read definition hugh writing secret file actions 
point view responsibility attribution argue definition greatly improved adding field downgrade channel contents file point downgrading 
doing created log identifies precisely information downgraded 
doing immediately remove problem pair traces ones different hugh actions removed 
created system sense claim actions affect lois actions hugh predicated intermediate actions 
believe forced consider tighter definition noninterference produced clearer better description 
security levels precisely level possible downgrade file necessary divide downgrade events multiple domains need able determine security policy users influenced noting extra field lowest classification 
need divide user domains filename experimented earlier 
security domains level uc containing events users classification dc containing event form security policy uc ud uc dd dd uc modified definition obeys policy introduced potential errors discussed earlier contain security flaws result obey 
problem incorporating copy events scheme longer cross domains 
channel wish include security policy handled putting separate top domain influenced influences 
arguably better channel happy information flow peripheral role analysis anyway simply away form security policy 
doing nondeterminism introduced lower domains occur example provide warning potential information flow resulting channel including policy generates 
example guard process normally appropriate outputs process play intermediary role security policy probably abstracting away inputs inputs system 
new definition noninterference says unequivocally information flow downstream side accountable purely terms guard chooses output 
regard satisfactory definition allows occurred prior guard output transmitted way bypasses component process 
automation key making determinism characterisation transitive noninterference practically useful existence efficient decision procedures determinism finite state csp process 
aside normalising see example complete process value inspecting result cases relatively slow aware different algorithms 
elegant described exploits fact deterministic processes maximal elements failures divergences model csp refinement order 
algorithm involves extracting arbitrary deterministic refinement target process deterministic refines alternative method developed purpose extending ideas data independence determinism checking involves running copies parallel way allowed choose communication likes second offered 
process deterministic just second offer refused easily checked refinement check 
unconventional parallel composition methods achieved renaming event say second copy distinct shadow event different events linking process test test alphabet combining copies parallel method worst case quadratic state space size bad practice 
type example considering produced applying abstraction operators usually deterministic process substantial advantages applying operators prior type check 
generalised concept noninterference introduced need able check local determinism set events natural ask methods extend 
involves checking normal form little different main effort normalisation unchanged previous case check done normal form node slightly different 
discover node initial event refusal set method maximality deterministic processes locally deterministic processes necessarily maximal see reasonable fix leaves method run parallel 
easy amend change renaming test process little 
shadow events created events second copy events left unchanged renaming 
test process allows synchronise please events performed event insists shadow compressing abstracted process efficient abstracting events early possible process built compression operators hierarchically 
fact formulation lazy abstraction earlier causes problems algorithm checking ordinary determinism way handles divergence 
case convenient fix valid local determinism 
specific implementation behaves 
events set test test test resultant combination processes synchronise events test test deadlock immediately event locally deterministic conclude generalised noninterference condition decidable spirit original determinism ways attractive option available 
performed number experiments parallel method described type example process discussed obviously desirable larger case studies results easily predictable carried 
possible decide definition noninterference context csp fdr carefully combining renamed version target process monitor process role essentially decide events need abstracted 
fact uses ordinary opposed local determinism checking complex formulate security policies failures transitivity 
great surprise discover previously published definitions intransitive noninterference behaved considered context examples 
assume definitions driven somewhat desire traditional looking definitions purge function unwinding liberal sense fail catch potential security leaks 
definition cited start section demonstrate yield useful definitions unwinding 
advantage new definition seen trace reformulation theorem way closer ordinary noninterference clearly establishes principle permitted influences low level process intermediary may influenced said high level process 
find way formulating high level information intermediary intended bold assumption seemingly various authors allowed 
saw new definition forced create really better downgrading system blame undesired information flow directly attributable 
expect case study help determine satisfying stronger formulation noninterference generally helpful turn unreasonably onerous 
faced choice conditions demonstrably weak arguably strong surely better aim satisfy happy 
stated earlier concentrated deterministic case systems described csp 
theorem easily points analogous definitions formulated state machine models paradigms similar notations traces quite easy see decision procedures developed csp carry usual frameworks 
imagine currently way help understand ordinary noninterference context nondeterministic csp extend intransitive context set 
discussed earlier right answer handle issue uncertain 
csp characterisations transitive noninterference fault tolerance closely related 
system obviously fault tolerant occurrence faults code triggered specific events effect user sees 
definition fact system fault events lazily abstracted refines faults prevented parallel composition synchronising fault events occurring 
definition intuitively appealing limited circumstances system sufficiently robust user sees negative effect faults 
imagine wanting analyse systems faults affect user view hopefully controlled way 
believe ideas reason intransitive noninterference may provide means systems analysed 
fault actions analogous high level actions mls user view analogous low level ones 
time fault recovery system operating system playing role want show effects user see resulting faults warned intermediary 
topic research 
peter ryan advice discussions intransitive noninterference 
reported funded dera office naval research 
focardi comparing information flow security policies proceedings csfw ix ieee computer society press 
focardi gorrieri classification security policies process algebras journal computer security pp 
formal systems europe fdr manual 
www formal demon uk fdr manual 
forster non interference properties nondeterministic processes dissertation transfer phil status oxford university computing laboratory 
goguen meseguer 
security policies security models proceedings ieee symposium security privacy pp 
ieee computer society press 
goguen meseguer 
inference control unwinding proceedings ieee symposium security privacy pp 
ieee computer society press 
graham cumming formal development secure systems oxford university phil thesis 
haigh young extending non inference model mls sat proceedings ieee symposium security privacy pp ieee computer society press 
jacob specifying security properties developments concurrency communication hoare ed 
addison wesley 
roscoe 
verifying determinism concurrent systems unbounded arrays 
technical report oxford university computing laboratory april 
full version 
roscoe 
verifying determinism data independent systems labellings arrays constants 
proceedings infinity 
appear full version issued 
maclean proving noninterference functional correctness traces journal computer security 
absorbing covers intransitive noninterference proceedings ieee symposium security privacy 
roscoe csp determinism security modelling proceedings ieee symposium security privacy 
roscoe 
theory practice concurrency 
prentice hall 
isbn pp 
xv 
roscoe woodcock wulf 
noninterference determinism 
journal computer security 
revised proceedings european symposium research computer security esorics lncs 
roscoe wulf composing decomposing processes security properties proceedings csfw viii ieee computer society press 
john rushby 
noninterference transitivity channel control security policies 
technical report csl sri 
ryan csp formulation non interference cipher pp 
ieee computer society press 
lars wulf 
interaction security distributed computing 
wolfson college university oxford hilary 
young state approach non interference proceedings csfw vii ieee computer society press 
