rc april computer science ibm research report member group relationships objects william harrison harold ossher ibm research division thomas watson research center box yorktown heights ny research division almaden austin beijing delhi haifa india watson tokyo zurich limited distribution notice report submitted publication outside ibm probably copyrighted accepted publication 
issued research report early dissemination contents 
view transfer copyright outside publisher distribution outside ibm prior publication limited peer communications specific requests 
outside publication requests filled reprints legally obtained copies article payment 
copies may requested ibm watson research center box yorktown heights ny usa email reports ibm com 
reports available internet domino watson ibm com library nsf home member group relationships objects aspect oriented software broad term encompassing different views nature aspects relationships aspects objects 
attaching aspects objects way forming group 
useful patterns interaction strategies decorators focus groups group delegates members obtain behavior members may perform behavior delegate group 
issues behavior explores classifies relationships objects groups objects may participate step laying foundation unifying different views special cases common framework 
keywords aspect oriented software development delegation composition method combination 

overview section analyzes number major factors characterize ways object behavior related group part applies factors enumerating potential kinds relationships objects groups 
winnow enumeration analyzing conflicts usages lead difficulties 
section concludes discussion synergy conflict relationships single object may bear multiple groups 
second section builds re applies factor analysis winnowing process classes instances objects 
third section discusses behavior composition operations dealing potential conflicts multiple relationships 
fourth section discusses implication implementation decisions object class composition systems 

instance relationships factors describing relationships assume concept java objects primitive objects fields method bodies written developers group objects created composition operations call methods primitive objects determined compositions 
assume methods primitive objects group called group object writing bodies methods identities called self 
factors enter analysis different refers primitive self group 
trying remain independent way behaviors implemented try explore categorize kinds relationships objects lay groundwork systematic support 
william harrison harold ossher ibm watson research box yorktown heights ny ossher watson ibm com leaving aside section situations groups act members larger groups kind relationship primitive object group operationally characterized effects 
table lists relationships effects ascribed 
explanation columns identity assuming java equality semantics appropriately extended comparison identity primitive object identity group object yields equal equal 
group group primitive object calls method primitive object primitive object cause group behavior method implementation 
alternatives listed primitive cause group behavior performs primitive behavior 
identical primitive yields common group behavior results method called group object variant primitive causes group behavior different common group behavior including behavior addition common group behavior 
method called group group uses behavior defined various primitive objects group 
alternatives listed group uses primitive behavior primitive behavior included group behavior 
self primitive self group group behavior includes primitive behavior interpreting primitive behavior self interpreted referring group primitive 
group behavior includes primitive behavior interpreting primitive behavior self interpreted group primitive 
see alternatives 
self group number ways behavior java method may refer group self 
developer explicitly refer self permitted 
effect java language extension normal java semantics innocuous 
language extension group arise reinterpreting java 
cases listed primitive group explicit implicit uses refer primitive 
explicit implicit uses value self case self group 
mixed hundreds different mixed variations corresponding different ways appears java frequent suggestion manifest uses refer primitive uses value self 
reason variation particularly interesting accomplished spite general policy forced developer copies bodies final methods places manifestly invoked 
relationships induced factors general observations reduce resulting number enumerable forms believe controversial rules group primitive forms self primitive render choice irrelevant eliminating enumerable relationships 
primitive group behavior form identical forms primitive group equivalent 
rules remaining enumerable relationships 
useful operational definitions identity objects identity iff performing operation result performing operation 
remaining enumerable relationships identity rule rules identity disagrees primitive group 
mixed respect coding body object methods 
invasive coding dependent process probably better carried developer making explicit self adopting primitive form 
grounds fragility believe manifest mixed forms avoided relationships deprecated 
remaining enumerable relationships mixed deprecated rules 
variant form primitive group interaction lead confusing collection behaviors member group different behavior 
left wonder construct regarded group 
alternative treat varied behavior group members associated identical footing 
remaining enumerable relationships variant deprecated encompasses 
reservations relationship 
claim object group identity group behavior called primitive objects called group self calls group behavior 
see contradiction reasonable rule meaning prohibits relationship 
name object group 
stand 
associate identity unequal unequal primitive self primitive self primitive self primitive 
aspect primitive 
affiliate un self group equal group mixed dep mixed variant deprecated violates identity rule unequal unequal variant identical equivalent primitive 
facet self group equal identical group mixed dep mixed 
equal identical self primitive self primitive 
router equal identical variant deprecated violates identity rule equal variant equal course rule relationships implementation convenience 
objects multiple relationships examine question relationships object simultaneously groups 
notes stand doesn pass control group called outside associate aspect affiliate ith coexist stand group 
delegate group called outside higher order group group relationships allowing groups members groups introduces new situations 
nonce call group groups members intend observe different group 
real method function lies primitives need group intermediary 
appropriate group group communication facilitate plan sharing directly employ primitives 
respect primitive group delegation complete plan need delegation target 
basic circumstances 
member identity unequal group identity primitive group delegation accounted 
second equal identity identities primitives groups contained equal equality transitive 
method call outside delegated primitive objects 
intermediate groups routers 
single single self 

class relationships fields methods class belong instances classification apply independently static behavior corresponding meaning phrased terms classes instances fortunate java provides way compare classes identity fortunate fact java support class equality differently named classes causes great trouble java generation tools means need eliminate facets routers class relationships 
eliminating identity column causes coalescence relationships group primitive column preserves distinctions 
variation forms refers interpretation method bodies 
static methods analogous meaning classes applies calls static methods defined class handled 
primitive form interpreted easily leaving calls class manifest calls class 
likewise group form interpreted making refer class appropriate self form 
done rewriting copy body ap ignoring library support reflection 
reflection introduces objects represent classes methods object class representative class current execution 
different class objects represent class time different machines inequality class objects inequality classes 
java class subclass superclass unrelated differently named java class 
useful cycles permitted inheritance graphs 
group static method called 
group primitive forms self reinterpreted particular instance 
performed suggested selecting appropriate rewriting 
important case static behavior creation 
java new operation constructors involved initialization equivalent static method class instantiated 
creation instance class may may delegated group may call creation parts including original 
general class composition form instance composition form independently selected kinds relationships 
importance class composition relation instance composition relationships class composition relationship stand 
distinguish prefixing relationship name full partial omitted partial assumed 
constraints multiple relationships classes apply instances reason 
instances classes constraints interpreted prohibitions composition operations 

composition operators groups created modified composition operators 
composition described terms operators compose relationship details group class name object class name compose relationship details group object 
operators produce java class definitions may produce objects changes objects 
discussion objects multiple relationships certain relationship combinations noted 
static statement 
possible ways compose operators respond specifying combination combination rejected object cloned operation performed respect clone 
call variant operators compose twoway compose way 
instance composition temporal instability identity cloning relationship combinations arise incompatible handling primitive group 
variant primitive group forbidden equivalent requirement identity 
performing compose operation combination instances runs conventional idea identity unchanging characteristic difficulties arise permitting temporal instability identity 
concrete example occurs standalone facet router group object relationships stand case stand fact languages irish entirely different verb forms changeable 

comparisons identity group yield different values composition yield 
facts result identity test may presumed externally taken account way meaningless 
phenomenon instance called object schizophrenia 
common example object schizophrenia arises forming data structures representing sets objects matter times object added set 
objects added facets group 
presumed proven invariant governing set violated fact 
assured group contains facet router identity takes prior remain facets routers arise 
defining compose way throw error performing composition way permitting composition go ahead requiring programmers think prove identity escaped writing catch 
convenient solution compose way 
clone creates new object outstanding uses identity 
class composition cloning conflicts potential solutions arise class composition instance composition different grounds 
classes referenced names available past java programs proper access rights 
means careful program analysis developers assure exception arising compose way ignored 
note mean object facet groups groups merged larger group identical 

implementation notes class composition multiple rewriting static method significant cost 
cases additional rewritings needed noted shading collapsed version table unimplemented relationships stand full associate associate aspect affiliate facet full router available 
object relationship group 
stand 
associate identity unequal unequal group group self primitive self primitive self primitive aspect self group primitive implementable additional rewritings explicit uses self class occur body 
point associate 
aspectj aspect full facet implemented hyper :10.1.1.115.8660:10.1.1.21.5662:10.1.1.21.5662
aspect unequal self group primitive 
affiliate group 
facet equal identical 
equal identical self group self primitive group self primitive 
router equal identical instance composition discussion instance composition presumed possible treat call method group primitive object primitive instance call group 
discussion instance composition presumed method calls group distinguished calls primitive objects members 
simplest ways making distinctions objects methods 
methods objects relationships supported choices lost 
instance composition single method objects way distinguishing calls object group calls object outside primitives additional method prevent calls outside managing substitute group identity calls group 
case stand object primitive identity outside invoked group member 
voids columns dealing identity primitive group forms eliminates routers renders affiliates redundant 
object relationship group group 
stand 
associate 
self primitive self primitive self primitive 
aspect primitive 
affiliate self group group 
facet 
affiliate group 
self primitive self primitive 
router instance composition methods single object way distinguishing calls objects group calls object outside group sets methods 
single object group primitives rules cases identity test yield unequal case stand objects part group case 
despite fact coalescing group object member employed reduce overheads facets routers 
object relationship group 
stand 
associate 
aspect 
affiliate identity unequal unequal unequal group group 
facet equal identical 
equal identical self primitive self group self group self primitive self primitive self primitive primitive group group self primitive 
router equal identical 
related composition filters concept wrappers particular wrappers objects long application software development 
composition filters extend object wrapper concept group wrapper 
group embodies dispatch strategies state set predicates objects group 
classification composition filters groups 
filtered objects aspects full aspects 
composition filters group behavior obtained directing messages group 
compose way variant instance composition operator 
subject oriented programming subject oriented programming introduced notion objects group identity creation instance member classes causes creation group 
member class facet creation need delegated members 
discussed implies group handle messages directed members 
sop subjects full facets 
objects groups doug lea written survey objects groups prior 
presents alternative delivery model relying channels object identity describe target message 
channels change basic form analysis allow mixed intermediate cases analysis 
aspect oriented programming aspect oriented programming retained concept creation instance member classes causes creation group :10.1.1.115.8660:10.1.1.21.5662
member classes called base 
member classes treated members composition filters 
aop base aspects different relationships group 
base full facet aspects full aspects 
compose way class composition operator 
aspectj provides realization aop group facet coalesced single object :10.1.1.21.5662
hyper hyper realization evolution sop :10.1.1.29.3807
compose way compose way variants class composition operator 
hyper group facets coalesced single object compound mezini ostermann identified number separate composition properties subsets usually bundled form composition mechanisms inheritance delegation :10.1.1.13.4303
showed interpreted called compound allows flexible combination properties provides important semantic options traditionally available 
shifting discussion dispatch objects generalized provides important alternative group formation deals solutions traditional view object identity 

aksit bergmans object oriented language database integration model composition filters approach 
proceedings european conference object oriented programming 
springer verlag gamma helm johnson vlissides design patterns 
addison wesley harrison ossher subject oriented programming critique pure objects 
proceedings conference object oriented programming systems languages applications 
september kiczales hilsdale hugunin kersten palm griswold overview aspectj :10.1.1.21.5662
proceedings european conference object oriented programming 
finland kiczales lamping mendhekar maeda lopes loingtier :10.1.1.115.8660:10.1.1.21.5662
irwin aspect oriented programming 
proceedings european conference object oriented programming 
finland 
invited presentation 
lea objects groups december gee cs edu dl groups groups html ossher tarr multi dimensional separation concerns hyperspace approach :10.1.1.29.3807
proceedings symposium software architectures component technology state art software development 
kluwer 
ostermann mezini object oriented composition :10.1.1.13.4303
proceedings conference object oriented programming systems languages applications 
october 
