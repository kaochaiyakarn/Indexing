os verification 
harvey tuch klein heiser national ict australia university new south wales harvey tuch klein com au hard machine supported formal verification software turning point 
years seen theorem proving tools maturing number successful real life applications 
time small highperformance os kernels drastically reduce size trusted computing base popular 
argue combination trends feasible desirable formally verify production quality operating systems 
increasing pressure providing high degree assurance computer system security functionality 
pressure stems deployment computer systems life mission critical scenarios need protect computing communication infrastructure attack 
calls guarantees systems functionality applications hardware 
security certification increasingly required higher system levels operating system generally trusted secure 
clearly presents weak link size complexity modern operating systems 
renewed tendency smaller operating system kernels help 
mainly motivated increasingly popular scenarios trusted applications legacy software general trend standard apis cots technology linux reaching safety embedded systems 
similarly emerging applications personal computers home mobile electronics require digital rights management strong protection cryptographic keys electronic commerce 
cases necessary run large legacy systems alongside highly critical components provide desired functionality able interfere 
requirement met de legacy system small kernel monitor securely switch trusted untrusted subsystems linux processor manufacturers moving hardware support partitioning arm intel 
secure efficient multiplexing hardware scenario partitions system isolated de privileged peer subsystems typically copies different full blown operating systems 
partitioning may full vmware para xen denali 
underlying privileged virtual machine monitor hypervisor typically smaller size operating systems running individual partitions 
scenarios require abstraction layer software far smaller traditional monolithic os kernel 
rest refer layer simply kernel distinction hypervisor microkernel protection domain management software relevance 
reduction size compared traditional approaches goes long way making kernel trustworthy 
standard methods establishing trustworthiness software testing code review inherently guarantee absence faults better smaller code base 
algorithmic techniques static analysis model checking achieved impressive results bug hunting kernel software 
provide confidence full functional correctness give hard security guarantees 
real solution establishing trustworthiness formal verification proving implementation correct 
considered intractable proposition os layer large complex poorly scaling formal methods 
argue owing combination improvements formal methods trend smaller kernels full formal verification real life kernels reach 
section give overview formal verification application kernels 
section examine challenges encountered experience gained pilot project successfully applied formal verification microkernel utilising isabelle theorem prover 
formal verification formal verification producing strict mathematical proofs correctness system 
mean 
formal methods point view means formal model system behaves manner consistent formal specification requirements 
leaves significant semantic gap formal verification user view correctness 
user application programmer views system correct behaviour object code target hardware consistent user interpretation usually informally specified api 
bridging semantic gap called formalisation 
shown schematically fig 

requirements formalisation system specification model verification tool verification result formal verification process verification technology main verification techniques model checking theorem proving 
model checking works model system typically reduced relevant specific properties interest 
model checker exhaustively explores model reachable state space determine properties hold 
approach feasible systems moderately sized state space implies dramatic simplification 
consequence model checking unsuitable establishing kernel full compliance api 
typically establish specific safety liveness properties 
furthermore formalisation step system model quite large commonly done manually error prone 
model checking usually give guarantees actual system 
model checking applied os layer shown utility means bug discovery code involving concurrency 
claims implementation verification due manual abstraction step 
tools slam operate directly kernel source code automatically find safe approximations system behaviour 
verify relatively simple properties correct sequencing operations mutex necessary sufficient correct system behaviour 
theorem proving approach involves describing intended properties system model formal logic deriving mathematical proof showing model satisfies properties 
size state space problem mathematical proofs deal large infinite state spaces 
theorem proving applicable complex models full functional correctness 
contrary model checking theorem proving usually automatic procedure requires human interaction 
modern theorem provers remove tedium proof process providing rewriting decision procedures automated search tactics ultimately user guides proof provides structure comes suitably strong induction statement 
seen drawback theorem proving consider greatest strength ensures verification tell system correct correct 
proofs developed interactively technique checked automatically validity derived making size complexity proof irrelevant soundness 
verifying kernels models specifications look kernel verification 
clearly kernel needs implement api specification typically formalisation api 
created manual process potential apis tend specified informally best semi formally natural languages typically incomplete inconsistent 
desirable utilise formalism correspondence informal formal specification relatively easy see os developers experts formal methods 
kernel model ideally kernel executing hardware 
reality preferable take advantage abstraction provided programming language kernel implemented model kernel source level implementation 
introduces reliance correctness compiler linker addition hardware boot loader firmware 
criticisms commonly voiced considering os verification 
point rely compiler hardware correctness 
verification compiler hardware correctness orthogonal issues required formal semantics language hardware verification system components attempted independently os 
hardware compiler verification currently active areas research 
noted gap formal model implementation exist presence verified processor real hardware physical realisation model correct operation scope formal verification prove absence manufacturing defects example 
aim os verification significantly reduce larger gap user requirements implementation gain increased confidence system correctness 
kernel verified gained user level applications file systems 
scenario described question really need verify able claim trusted applications correct 
kernel provides basic abstraction underlying hardware necessary enforce boundary trusted untrusted applications allows behaviour untrusted applications abstracted away ignored verifying trusted code 
trusted applications may characteristics comes verification relatively small designed tcb may take advantage higher level languages 
hypervisor additional remains os verification correct resource management isolation provided os level possibility faulty malicious code executing partition influencing knowing 
proof os verification tried past 
rudimentary tools available time meant proofs design level full implementation verification feasible 
verification kit object code demonstrated feasibility approach kernel verification system far simpler real life os kernel secure systems today 
little published past years topic believe time reconsider approach 
challenges experiences early attempts kernel verification dramatic improvements power available theorem proving tools 
proof assistants acl coq pvs hol isabelle number successful verifications ranging mathematics logics microprocessors compilers full programming platforms javacard 
led significant reduction cost formal verification lowering feasibility threshold 
time potential benefits increased increased deployment embedded systems life mission critical situations huge stakes created need protect ip rights valued billions 
consequently feel time right tackle formal verification os kernels 
decided year ago attempt verification real kernel 
current efforts goal notably verisoft 
target microkernel smallest best performing general purpose kernels deployed design implementation understood lab 
clearly high risk project embarked pilot project form constructive feasibility study 
aim fold formalise api ii gain experience going full verification cycle small portion actual kernel code iii develop project plan verification full kernel 
informal aim explore bridge culture gap kernel hackers theorists groups known eye significant suspicion 
formalisation api performed method existed significant amount experience approach student population 
unusually detailed mature informal specification api came surprise find incomplete ambiguous places inconsistent 
furthermore necessary extract intended expected kernel behaviour designers occasionally source code 
spite challenges part project turned overly difficult done undergraduate student 
result formal api specification complete describing architecture independent system calls ipc threads subsystem 
non determinism places current api clear specific behaviour optimisations api level contributed significant complexity provided performance gains omitted 
remaining subsystem virtual memory formalised separately verification part project described 
specification consists lines code 
full verification performed complex subsystem dealing mapping pages address spaces revocation mappings corresponding approximately kernel source code 
formalised significant part api section derived verified implementation existing implementation subset functionality 
implementation consists page tables mapping database keep track mappings revocation purposes code lookup manipulation data structures 
view system execution machine corresponding implementation language lowest level model rely formal semantics source code language hardware 
kernel written mixture subset assembler code 
complete formal semantics systems languages active area research complete semantics required 
purpose sufficed semantics language subset verified code 
code derived data structures algorithms existing implementation freedom changes remain safe subset 
changes acceptable long significant performance impact 
semantics assembler code derived hardware model 
tackled pilot project slice implemented resorting assembler arm processors feature hardware loaded tlbs 
formalise aspects hardware format page table entries 
principle processor manufacturers provide descriptions isa level hdl facilitate practise rarely happens 
typically uses isa manuals basis formalisation 
hardware models commercial microprocessors arm available 
presently somewhat incomplete kernel verification purposes extendable major problems 
higher order logic hol language system modelling specification refinement specifically instantiation hol theorem prover isabelle 
hol expressive logic standard mathematical notation 
terms logic typed hol directly simple functional programming language 
hol consequently programmers computer science background 
functional language describe behaviour kernel level 
description refined inside prover program written standard imperative language 
refinement part state space concrete substitutions operations new state space described proven simulate operations 
example albeit simplistic view page table address space function mapping virtual pages page table entries 
refinement replace function page table data structure multi level page table corresponding insertion lookup procedures 
description level manual relatively easy understand 
level analysing behaviour system proving additional simple safety properties requirement virtual address translated different physical addresses 
model operational essentially state machine 
close intuition systems implementors kernel behaviour extended hardware machine associated understood hierarchical refinement methodology 
operational model kernel behaviour hol helps minimising gap requirements specification 
refinement process stands formally verified imperative program 
purely syntactic translation transforms program ansi detailed description process 
isabelle suitable task 
mature large scale projects reasonably easy interface 
actively developed open source tool able extend working developers fix problems arise 
process formalising vm subsystem discovered places existing semi formal description manual significant ambiguities existed inconsistencies implementation behaviour 
ordering internal operations system calls responsible establishing revoking vm mappings map underspecified leading problems describing formal semantics 
potential security problem result inconsistencies 
interesting experience expected culture clash kernel hackers formal methods people non issue 
author junior phd student significant kernel design implementation experience 
obtained necessary formal methods background months degree productively perform proofs isabelle 
took time participants gain appreciation side challenges 
reasons believe full verification achievable 
convinced important requirements met project chance 
essential participants significant experience formal methods understanding feasible best approach 
hand essential participants understanding kernel design implementation trade offs underlying various design decisions factors determine kernel performance 
possible change implementation needed requires understanding changes done performance 
looking ahead challenges formal verification kernel level relate performance size level abstraction 
runtime performance verified code highest priorities operating systems particularly case microkernel virtual machine monitor invoked frequently 
software verification traditionally focused aspect getting verified hard 
size limiting factor 
small microkernel measures lines code 
larger systems verified description implementation level 
compared application code level abstraction lower kernel code 
features direct hardware access pointer arithmetic embedded assembly code usually subject mainstream verification research 
practically important issue ensuring verified code remains maintainable 
principle change implementation invalidate verification 
extent occurs depend nature change 
hand optimisation ipc path example may require reestablish correctness changes system call semantics optimisation case higher level abstraction proofs remain valid 
fact proofs machine checked easy determine proofs broken change techniques careful layered proof structure improved automation simple changes help problem easier handle 
remains open question 
believe full formal specification kernel api prior kernel implementation desirable 
benefits having complete consistent unambiguous kernel implementors users verifiers clear effort required modest compared implementation verification 
investment virtual memory part pilot project person years 
specifications proofs run lines proof scripts 
significantly effort invested virtual memory subsystem place includes exploration alternatives determining right methodology formalising proving correct general refinement technique documentation publications 
estimate full verification take person years including verification tool development 
sounds lot seen relation cost developing kernel place potential benefits verification 
kernel written person team period months significant improvements 
furthermore developers third series similar kernels written meant starting considerable amount experience 
realistic estimate cost developing high performance implementation probably person years 
circumstances full verification longer prohibitive argue fact highly desirable 
kernel lowest critical part software stack assurances system behaviour built sand long kernel shown behave expected 
furthermore formal verification puts pressure kernel designers simplify systems obvious benefits maintainability robustness formally verified 
saying problem engineers cheat order get results problem mathematicians toy problems order get results problem program verifiers cheat toy problems order get results 
ready tackle real problem cheating 
contributed part kernel verification pilot project report kevin kai engelhardt michael ken robinson adam wiggins 
national ict australia funded australian government department communications information technology arts australian research council backing australia ability ict research centre excellence programs 

abrial 
book assigning programs meanings 
cambridge university press 
ball rajamani 
automatically validating temporal safety properties interfaces 
spin workshop model checking software volume lncs pages 
berghofer strecker 
extracting formally verified fully executable compiler proof assistant 
proc 
electronic notes theoretical computer science pages 

kit study operating system verification 
ieee transactions software engineering 
brock hunt jr kaufmann 
fm microprocessor proof 
technical report computational logic 
cohn 
notion proof hardware verification 
journal automated reasoning june 
fox 
formal specification verification arm 
basin wolff editors tphols volume lncs pages 
springer 
hallem chelf xie engler 
system language building system specific static analyses 
pldi pages 
stephens 
applying source code verification microkernel project 
technical report tud fi rz tu dresden 
klein editor proc 
fm workshop os verification 
technical report national ict australia 
klein tuch 
verified virtual memory 
slind editor tphols emerging trends park city utah usa 
ka team 
experimental kernel manual version 
university karlsruhe oct 
ka org projects version pdf 
neumann boyer levitt robinson 
provably secure operating system system applications proofs 
technical report csl sri international 

formalised hol 
phd thesis computer laboratory university cambridge 
shapiro sridhar miller 
verified general purpose operating system kernel 
klein pages 
tuch klein 
verifying virtual memory subsystem 
klein pages 
turner lepreau back 
formal methods practical tool os implementors 
hotos vi 
project 
org 
verisoft project 
www verisoft de 
walker kemmerer popek 
specification verification ucla unix security kernel 
communications acm 
