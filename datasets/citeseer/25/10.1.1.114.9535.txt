fast file system unix marshall kirk mckusick william joy samuel leffler robert fabry computer systems research group computer science division department electrical engineering computer science university california berkeley berkeley ca reimplementation unix file system described 
reimplementation provides substantially higher throughput rates flexible allocation policies allow better locality adapted wide range peripheral processor characteristics 
new file system clusters data sequentially accessed provides block sizes allow fast access large files wasting large amounts space small files 
file access rates times faster traditional unix file system experienced 
long needed enhancements programmers interface discussed 
include mechanism place advisory locks files extensions name space file systems ability long file names provisions administrative control resource usage 
revised february cr categories subject descriptors operating systems file systems management file organization directory structures access methods operating systems storage management allocation deallocation strategies secondary storage devices operating systems performance measurements operational analysis information systems information storage file organization additional keywords phrases unix file system organization file system performance file system design application program interface 
general terms file system measurement performance 
unix trademark bell laboratories 
william joy currently employed sun microsystems garcia avenue mountain view ca samuel leffler currently employed po box san rafael ca done national science foundation mcs defense advance research projects agency dod arpa order monitored naval electronic system command contract 

smm fast file system unix 

old file system 
new file system organization 
optimizing storage utilization 
file system parameterization 
layout policies 
performance 
file system functional enhancements 
long file names 
file locking 
symbolic links 
rename 
quotas table contents 
describes changes original byte unix file system new released berkeley software distribution 
presents motivations changes methods effect changes rationale design decisions description new implementation 
discussion followed summary results obtained directions additions changes facilities available programmers 
original unix system runs pdp simple elegant file system facilities 
file system input output buffered kernel alignment constraints data transfers operations appear synchronous 
transfers disk byte blocks placed arbitrarily data area file system 
virtually constraints available disk space placed file growth ritchie thompson vax unix enhancements original byte unix file system incapable providing data throughput rates applications require :10.1.1.100.7314
example applications vlsi design image processing small amount processing large quantities data need high throughput file system 
high throughput rates needed programs map files file system large virtual address spaces 
paging data file system occur frequently 
requires file system providing higher bandwidth original byte unix provides percent maximum disk bandwidth kilobytes second arm white smith 
modifications unix file system improve performance 
unix file system interface understood inherently slow development retained abstraction simply changed underlying implementation increase throughput 
consequently users system faced massive software conversion 
problems file system performance dealt extensively literature see smith survey 
previous improve unix file system performance done 
unix operating system drew ideas multics large high performance dec pdp vax trademarks digital equipment 
practice file size constrained gigabyte 
fast file system unix smm operating system 
includes hydra spice thompson file system lisp environment symbolics 
physical latencies disks described 

old file system file system developed bell laboratories traditional file system disk drive divided partitions 
disk partitions may contain file system 
file system spans multiple partitions file system described super block contains basic parameters file system 
include number data blocks file system count maximum number files pointer free list linked list free blocks file system 
file system files 
certain files distinguished directories contain pointers files may directories 
file descriptor associated called inode 
inode contains information describing ownership file time stamps marking modification access times file array indices point data blocks file 
purposes section assume blocks file directly referenced values stored inode 
inode may contain indirect blocks containing data block indices 
file system byte block size singly indirect block contains block addresses doubly indirect block contains addresses singly indirect blocks indirect block contains addresses doubly indirect blocks 
megabyte traditional unix file system consists megabytes inodes followed megabytes data 
organization inode information data accessing file normally incurs long seek file inode data 
files single directory typically allocated consecutive slots megabytes inodes causing non consecutive blocks inodes accessed executing operations inodes files directory 
allocation data blocks files 
traditional file system transfers bytes disk transaction finds sequential data block cylinder forcing seeks byte transfers 
combination small block size limited read ahead system seeks severely limits file system throughput 
berkeley unix file system attempted improve reliability throughput 
reliability improved staging modifications critical file system information completed repaired cleanly program crash kow 
file system performance improved factor changing basic block size bytes 
increase factors disk transfer accessed twice data files described need access indirect blocks direct blocks contained twice data 
file system changes henceforth referred old file system 
performance improvement gav strong indication increasing block size method improving throughput 
throughput doubled old file system percent disk bandwidth 
main problem free list initially ordered optimal access quickly scrambled files created removed 
eventually free list entirely random causing files blocks allocated randomly disk 
forced seek block access 
old file systems provided transfer rates kilobytes second created rate deteriorated kilobytes second weeks moderate randomization data block placement 
way restoring performance old file system dump rebuild restore file system 
possibility suggested maruyama process periodically partition refer subdivision physical space disk drive 
traditional file system new file system file systems really located logical disk partitions may overlap 
overlapping available example allow programs copy entire disk drives containing multiple file systems 
actual number may vary system system usually range 
smm fast file system unix reorganized data disk restore locality 

new file system organization new file system organization old file system organization disk drive contains file systems 
file system described super block located file system disk partition 
super block contains critical data replicated protect catastrophic loss 
done file system created super block data change copies need referenced head crash hard disk error causes default super block unusable 
insure possible create files large bytes lev els indirection minimum size file system block bytes 
size file system blocks power greater equal 
block size file system recorded file system super block possible file systems different block sizes simultaneously accessible system 
block size decided time file system created subsequently changed rebuilding file system 
new file system organization divides disk partition areas called cylinder groups 
cylinder group comprised consecutive cylinders disk 
associated cylinder group bookkeeping information includes redundant copy super block space inodes bit map describing available blocks cylinder group summary information describing usage data blocks cylinder group 
bit map available blocks cylinder group replaces traditional file system free list 
cylinder group static number inodes allocated file system creation time 
default policy allocate inode bytes space cylinder group expecting far needed 
cylinder group bookkeeping information placed cylinder group 
approach redundant information top platter 
single hardware failure destroyed top platter cause loss redundant copies super block 
cylinder group bookkeeping information begins varying offset cylinder group 
offset successive cylinder group calculated track cylinder group preceding cylinder group 
way redundant information spirals pack single track cylinder platter lost losing copies super block 
cylinder group space cylinder group cylinder group information data blocks 
optimizing storage utilization data laid larger blocks transferred single disk transaction greatly increasing file system throughput 
example consider file new file system composed byte data blocks 
old file system file composed byte blocks 
increasing block size disk accesses new file system may transfer times information disk transaction 
large files byte blocks may allocated cylinder larger data transfers possible requiring seek 
main problem larger blocks unix file systems composed small files 
uniformly large block size wastes space 
table shows effect file system block size amount wasted space file system 
files measured obtain figures reside appears cylinder group laid super block known location file systems blocks sizes kilobytes greater 
requirement kilobytes disk reserved bootstrap program separate requirement cylinder group information file system block boundary 
start cylinder group file system block boundary file systems block sizes larger kilobytes leave empty space boot block cylinder group 
knowing size file system blocks system know function find cylinder group 
fast file system unix smm time sharing systems roughly gigabytes line storage 
measurements active user file systems containing megabytes formatted space 
space waste organization mb data separation files mb data file starts byte boundary mb data inodes byte block unix file system mb data inodes byte block unix file system mb data inodes byte block unix file system mb data inodes byte block unix file system table amount wasted space function block size 
space wasted calculated percentage space disk containing user data 
block size disk increases waste rises quickly intolerable waste byte file system blocks 
able large blocks undue waste small files stored efficient way 
new file system accomplishes goal allowing division single file system block fragments 
file system fragment size specified time file system created file system block optionally broken fragments addressable 
lower bound size fragments constrained disk sector size typically bytes 
block map associated cylinder group records space available cylinder group fragment level determine block available aligned fragments examined 
shows piece map file system 
bits map xxxx oooo fragment numbers block numbers example layout blocks fragments file system 
bit map records status fragment shows fragment shows fragment available allocation 
example fragments fragments free 
fragments adjoining blocks full block ev en large 
example fragments allocated full block fragments coalesced full block 
file system block size bytes fragment size bytes file represented zero byte blocks data possibly single fragmented block 
file system block fragmented obtain space small amount data remaining fragments block available allocation files 
example consider byte file stored byte file system 
file uses full size blocks fragment portion block 
block aligned fragments available time file created full size block split yielding necessary fragments single unused fragment 
remaining fragment allocated file needed 
space allocated file program write system call 
time data written file system checks see size file increased 
file needs expanded hold new data conditions exists space left allocated block fragment hold new data 
new data written available space 
file contains fragmented blocks block file contains insufficient space hold new data 
space exists block allocated space filled new data 
remainder new data contains full block data full block allocated program may overwriting data middle existing file case space allocated 
smm fast file system unix full block new data written 
process repeated full block new data remains 
remaining new data written fit full block block necessary fragments located full block located 
remaining new data written located space 
file contains fragments fragments contain insufficient space hold new data 
size new data plus size data fragments exceeds size full block new block allocated 
contents fragments copied block remainder block filled new data 
process continues 
new data written fit full block block necessary fragments located full block located 
contents existing fragments appended new data written allocated space 
problem expanding file fragment time data may copied times fragmented block expands full block 
fragment reallocation minimized user program writes full block time partial block file 
file systems different block sizes may reside system file system interface extended provide application programs optimal size read write 
files optimal size block size file system file accessed 
objects pipes sockets optimal size underlying buffer size 
feature standard input output library package user programs 
feature certain system utilities loaders input output management need highest possible file system bandwidth 
amount wasted space byte new file system organization empirically observed byte old file system organization 
file system byte blocks byte fragments amount wasted space byte block unix file system 
new file system uses space byte byte file systems indexing information large files amount space small files 
savings offset need space keeping track available free blocks 
net result disk utilization new file system fragment size equals old file system block size 
order layout policies effective file system kept completely full 
file system parameter termed free space reserve gives minimum acceptable percentage file system blocks free 
number free blocks drops level system administrator continue allocate blocks 
value parameter may changed time file system mounted active 
transfer rates appear section measured file systems kept full reserve 
number free blocks falls zero file system throughput tends cut half inability file system localize blocks file 
file system performance degrades may restored removing files amount free space reaches minimum acceptable level 
access rates files created periods little free space may restored moving data space available 
free space reserve added percentage waste comparing organizations table 
percentage waste old byte unix file system roughly comparable new byte file system free space reserve set 
compare wasted old file system waste reserved space new file system 

file system parameterization initial creation free list old file system ignores parameters underlying hardware 
information physical characteristics mass storage device hardware interacts 
goal new file system parameterize processor capabilities mass storage characteristics blocks allocated optimum way 
parameters include speed processor hardware support mass storage transfers characteristics mass storage devices 
disk technology constantly improving giv en installation sev eral different disk technologies running single processor 
file system parameterized adapted characteristics disk placed 
mass storage devices disks new file system tries allocate new blocks cylinder previous block file 
optimally new blocks rotationally fast file system unix smm positioned 
distance rotationally optimal blocks varies greatly consecutive block rotationally delayed block depending system characteristics 
processor input output channel require processor intervention mass storage transfer requests consecutive disk blocks accessed suffering lost time intervening disk revolution 
processors input output channels main processor field interrupt prepare new disk transfer 
expected time service interrupt schedule new disk transfer depends speed main processor 
physical characteristics disk include number blocks track rate disk spins 
allocation routines information calculate number milliseconds required skip block 
characteristics processor include expected time service interrupt schedule new disk transfer 
giv en block allocated file allocation routines calculate number blocks skip block file come position disk head expected amount time takes start new disk transfer operation 
programs sequentially access large amounts data strategy minimizes amount time spent waiting disk position 
ease calculation finding rotationally optimal blocks cylinder group summary information includes count available blocks cylinder group different rotational positions 
rotational positions distinguished resolution summary information milliseconds typical revolution minute drive 
super block contains vector lists called rotational layout tables 
vector indexed rotational position 
component vector lists index block map data block contained rotational position 
looking block system looks summary counts rotational position non zero block count 
uses index rotational position find appropriate list index relevant parts block map find free block 
parameter defines minimum number milliseconds completion data transfer initiation data transfer cylinder changed time file system mounted active 
file system parameterized lay blocks rotational separation milliseconds disk pack moved system processor requiring milliseconds schedule disk operation throughput drop lost disk revolutions nearly block 
eventual target machine known file system parameterized initially created different processor 
move known advance rotational layout delay reconfigured disk moved allocation done characteristics new host 

layout policies file system layout policies divided distinct parts 
top level global policies file system wide summary information decisions regarding placement new inodes data blocks 
routines responsible deciding placement new directories files 
calculate rotationally optimal block layouts decide force long seek new cylinder group insufficient blocks left current cylinder group reasonable layouts 
global policy routines local allocation routines locally optimal scheme lay data blocks 
tw methods improving file system performance increase locality minimize seek latency described trivedi improve layout data larger transfers possible described 
global layout policies try improve performance clustering related information 
attempt localize data try spread unrelated data different cylinder groups 
localization attempted local cylinder group may run space forcing data scattered non local cylinder groups 
taken extreme total localization result single huge cluster data resembling old file system 
global policies try balance conflicting goals localizing data concurrently accessed spreading unrelated data 
resource inodes 
inodes describe files directories 
inodes files directory frequently accessed 
example list directory command smm fast file system unix accesses inode file directory 
layout policy tries place inodes files directory cylinder group 
ensure files distributed disk different policy directory allocation 
new directory placed cylinder group greater av erage number free inodes smallest number directories 
intent policy allow inode clustering policy succeed time 
allocation inodes cylinder group done free strategy 
allocates inodes randomly cylinder group inodes particular cylinder group read disk transfers 
disk transfers required cylinder group may inodes 
puts small constant upper bound number disk transfers required access inodes files directory 
contrast old file system typically requires disk transfer fetch inode file directory 
major resource data blocks 
data blocks file typically accessed policy routines try place data blocks file cylinder group preferably rotationally optimal positions cylinder 
problem allocating data blocks cylinder group large files quickly available space cylinder group forcing spill areas 
space cylinder group causes allocations file cylinder group spill areas 
ideally cylinder groups completely full 
heuristic solution chosen redirect block allocation different cylinder group file exceeds kilobytes megabyte newly chosen cylinder group selected cylinder groups greater average number free blocks left 
big files tend spread disk megabyte data typically accessible long seek performed cost long seek megabyte small 
global policy routines call local allocation routines requests specific blocks 
local allocation routines allocate requested block free allocates free block requested size rotationally closest requested block 
global layout policies complete information request unused blocks allocation routines reduced simple bookkeeping 
maintaining complete information costly implementation global layout policy uses heuristics employ partial information 
requested block available local allocator uses level allocation strategy available block rotationally closest requested block cylinder 
assumed head switching time zero 
disk controllers case may possible incorporate time required switch disk constructing rotational layout tables 
tried 
blocks available cylinder block cylinder group 
cylinder group entirely full quadratically hash cylinder group number choose cylinder group look free block 
hash fails apply exhaustive search cylinder groups 
quadratic hash speed finding unused slots nearly full hash tables knuth 
file systems parameterized maintain free space rarely strategy 
file systems run maintaining free space typically free blocks allocation random important characteristic strategy conditions strategy fast 
spill point kilobytes point file byte block file system requires single indirect block 
appears natural point redirect block allocation 
spillover points chosen intent forcing block allocation redirected file data blocks cylinder group 
observing new file system day day heuristics appear minimizing number completely filled cylinder groups 
fast file system unix smm 
performance ultimately proof effectiveness algorithms described previous section long term performance new file system 
empirical studies shown inode layout policy effective 
running list directory command large directory contains directories force system access inodes multiple cylinder groups number disk accesses inodes cut factor 
improvements dramatic large directories containing files disk accesses inodes cut factor 
encouraging programs daemons access small files programs tend flood disk request queue old file system 
table summarizes measured throughput new file system 
comments need conditions tests run 
test programs measure rate user programs transfer data file performing processing 
programs read write data insure buffering operating system affect results 
run times succession get system known state second insure experiment stabilized repeatable 
tests results discussed detail 
systems running multi user quiescent 
contention cpu disk arm 
difference tests controller 
tests megabyte disk 
table shows file system test runs vax 
file systems production month measured 
number system calls performed tests basic system call overhead negligible portion total running time tests 
type processor read file system bus measured speed bandwidth cpu old kbytes sec new kbytes sec new kbytes sec new kbytes sec new kbytes sec table reading rates old new unix file systems 
type processor write file system bus measured speed bandwidth cpu old kbytes sec new kbytes sec new kbytes sec new kbytes sec new kbytes sec table writing rates old new unix file systems 
old file system transfer rates new file system appear change time 
throughput rate tied strongly amount free space maintained 
measurements table file system free space reserve 
synthetic loads suggest throughput deteriorates half rates table file systems full 
percentage bandwidth table measure effective utilization disk file system 
upper bound transfer rate disk calculated multiplying number bytes track number revolutions disk second 
bandwidth calculated comparing data rates file system able achieve percentage rate 
metric old file system able disk bandwidth new file system uses bandwidth 
unix command similar reading test cp file dev null file megabytes long 
smm fast file system unix reads writes faster new system old system 
biggest factor speedup larger block size new file system 
overhead allocating blocks new system greater overhead allocating blocks old system fewer blocks need allocated new system bigger 
net effect cost byte allocated systems 
new file system reading rate fast writing rate 
expected kernel allocating blocks simply reading 
note write rates read rates byte block file system write rates slower read rates byte block file system 
slower write rates occur kernel twice disk allocations second making processor unable keep disk transfer rate 
contrast old file system faster writing files reading 
write system call asynchronous kernel generate disk transfer requests faster serviced disk transfers queue disk buffer cache 
disk buffer cache sorted minimum seek distance average seek scheduled disk writes data blocks written random disk order generated 
er file read read system call processed synchronously disk blocks retrieved disk non optimal seek order requested 
forces disk scheduler long seeks resulting lower throughput rate 
new system blocks file optimally ordered disk 
reads synchronous requests disk better order 
writes asynchronous disk minimum seek order gain reordering 
disk seek latencies limited old file system little effect new file system 
cost allocation factor new system causes writes slower reads 
performance new file system currently limited memory memory copy operations required move data disk buffers system address space data buffers user address space 
copy operations account time spent performing input output operation 
buffers address spaces properly aligned transfer performed copying vax virtual memory management hardware 
especially desirable transferring large amounts data 
implement change user interface file system major ways user programs required allocate buffers page boundaries data disappear buffers written 
greater disk throughput achieved rewriting disk drivers chain kernel buffers 
allow contiguous disk blocks read single disk transaction 
disks unix systems contain byte sectors track 
track holds exactly byte file system blocks byte file system blocks 
inability contiguous disk blocks effectively limits performance disks available bandwidth 
block file laid contiguously minimum spacing block platter sixth half revolution 
implication best possible layout contiguous blocks uses half bandwidth giv en track 
track contains odd number sectors possible resolve rotational delay number sectors finding block begins desired rotational position track 
reason block chaining implemented require rewriting disk drivers system current throughput rates limited speed available processors 
currently block allocated file time 
technique demos file system finds file growing rapidly blocks releasing file closed remain unused 
batching allocations system reduce overhead allocating write cut number disk writes needed keep block pointers disk synchronized block allocation powell 
technique included block allocation currently accounts time spent write system call current throughput rates limited speed available processors 
fast file system unix smm 
file system functional enhancements performance enhancements unix file system require changes semantics data structures visible application programs 
sev eral changes generally desired time introduced require users dump restore file systems 
new file system required existing file systems dumped restored functional enhancements introduced time 

long file names file names nearly arbitrary length 
programs read directories affected change 
promote portability unix systems running new file system set directory access routines introduced provide consistent interface directories old new systems 
directories allocated byte units called chunks 
size chosen allocation transferred disk single operation 
chunks broken variable length records termed directory entries 
directory entry contains information necessary map name file associated inode 
directory entry allowed span multiple chunks 
fields directory entry fixed length contain inode number size entry length file name contained entry 
remainder entry variable length contains null terminated file name padded byte boundary 
maximum length file name directory currently characters 
av space directory recorded having entries accumulate free space entry size fields 
results directory entries larger required hold entry name plus fixed length fields 
space allocated directory completely accounted totaling sizes entries 
entry deleted directory space returned previous entry directory chunk increasing size previous entry size deleted entry 
entry directory chunk free entry inode number set zero indicate unallocated 

file locking old file system provision locking files 
processes needed synchronize updates file separate lock file 
process try create lock file 
creation succeeded process proceed update creation failed process wait try 
mechanism drawbacks 
processes consumed cpu time looping attempts create locks 
locks left lying system crashes manually removed normally system startup command script 
processes running system administrator permitted create files forced different mechanism 
possible get problems solutions straight forward mechanism locking files added 
general schemes allow multiple processes concurrently update file 
techniques discussed peterson 
simpler technique serialize access file locks 
attain reasonable efficiency certain applications require ability lock pieces file 
locking byte level implemented onyx file system bass 
standard system applications mechanism locks granularity file sufficient 
locking schemes fall classes hard locks advisory locks 
primary difference advisory locks hard locks extent enforcement 
hard lock enforced program tries access file advisory lock applied requested program 
advisory locks effective programs accessing file locking scheme 
hard locks override policy implemented kernel 
advisory locks policy left user programs 
unix system programs system administrator privilege allowed override protection scheme 
programs need locks run system administrator chose implement advisory locks create additional protection scheme inconsistent unix philosophy system smm fast file system unix administration programs 
file locking facilities allow cooperating programs apply advisory shared exclusive locks files 
process may exclusive lock file multiple shared locks may 
shared exclusive locks file time 
lock requested process holds exclusive lock exclusive lock requested process holds lock lock request block lock obtained 
shared exclusive locks advisory process obtained lock file process may access file 
locks applied removed open files 
means locks manipulated needing close reopen file 
useful example process wishes apply shared lock read information determine update required apply exclusive lock update file 
request lock cause process block lock immediately obtained 
certain instances unsatisfactory 
example process wants check lock require separate mechanism find information 
consequently process may specify locking request return error lock immediately obtained 
able conditionally request lock useful daemon processes wish service area 
instance daemon locks directory takes place daemon processes easily check see active daemon exists 
locks exist locking processes exist lock files left active processes exit system crashes 
deadlock detection attempted 
deadlock detection done system file lock applied lock type second successive calls apply lock type fail 

symbolic links traditional unix file system allows multiple directory entries file system single file 
directory entry links file name inode contents 
link concept fundamental inodes reside directories exist separately referenced links 
links inode removed inode deallocated 
style referencing inode allow physical file systems support inter machine linkage 
avoid limitations symbolic links similar scheme multics added 
symbolic link implemented file contains pathname 
system encounters symbolic link interpreting component pathname contents symbolic link prepended rest pathname name interpreted yield resulting pathname 
unix pathnames specified relative root file system hierarchy relative process current working directory 
pathnames specified relative root called absolute pathnames 
pathnames specified relative current working directory termed relative pathnames 
symbolic link contains absolute pathname absolute pathname contents symbolic link evaluated relative location link file hierarchy 
normally programs want aware symbolic link pathname 
certain system utilities able detect manipulate symbolic links 
new system calls provide ability detect read write symbolic links system utilities required changes calls 
berkeley software distributions may possible file systems located remote machines pathnames 
occurs possible create symbolic links span machines 

rename programs create new version existing file typically create new version temporary file rename temporary file name target file 
old unix file system renaming required calls system 
program interrupted system crashed calls target file left temporary name 
eliminate possibility rename system call added 
rename call rename operation fashion guarantees fast file system unix smm existence target name 
rename works data files directories 
renaming directories system special validation checks insure directory tree structure corrupted creation loops inaccessible directories 
corruption occur parent directory moved descendants 
validation check requires tracing descendents target directory insure include directory moved 

quotas unix system traditionally attempted share available resources greatest extent possible 
single user allocate available space file system 
certain environments unacceptable 
consequently quota mechanism added restricting amount file system resources user obtain 
quota mechanism sets limits number inodes number disk blocks user may allocate 
separate quota set user file system 
resources hard soft limit 
program exceeds soft limit warning printed users terminal offending program terminated exceeds hard limit 
idea users stay soft limit login sessions may resources actively working 
encourage behavior users warned logging soft limits 
users fails correct problem login sessions eventually having soft limit enforced hard limit 
robert ongoing interest new file system adding disk quotas rational efficient manner 
acknowledge dennis ritchie suggestions appropriate modifications user interface 
appreciate michael powell explanations demos file system worked ideas implementation 
special goes peter kessler robert henry acting real users early debugging stage file systems stable 
criticisms suggestions reviews contributed significantly coherence 
sponsors national science foundation mcs defense advance research projects agency dod arpa order monitored naval electronic system command contract 

robertson extensible file system hydra proceedings third international conference software engineering ieee may 
bass bass implementation description file locking onyx systems rd san jose ca jan 
organick multics input output system proceedings third symposium operating systems principles acm oct 
pp performance robustness improvements version unix computer graphics laboratory technical report school pharmacy university california san francisco january 
winter usenix conference santa monica california 
performance revisited login usenix association newsletter vol november 
pp mckusick performance effects disk subsystem choices vax systems running bsd unix computer systems research group smm fast file system unix kow dept eecs berkeley ca technical report 
kow fsck unix system check program bell laboratory murray hill nj 
march knuth knuth art computer programming volume sorting searching addison wesley publishing reading mass 
pp maruyama maruyama smith optimal reorganization distributed space disk files cacm 
nov 
pp determining blocking factors sequential files heuristic methods computer journal 
aug 
pp estimating file access time floppy disks cacm 
oct 
pp peterson peterson concurrent reading writing acm transactions programming languages systems acm 
jan 
pp powell powell demos file system proceedings sixth symposium operating systems principles acm nov 
pp ritchie ritchie thompson unix time sharing system cacm :10.1.1.100.7314
july 
pp smith smith input output optimization disk architectures survey performance evaluation 
jan 
pp smith smith bibliography file system optimization related topics operating systems review 
oct 
pp symbolics symbolics file system symbolics ave ca aug 
thompson thompson unix implementation bell system technical journal part 
pp july august 
thompson thompson spice file system carnegie mellon university department computer science pittsburg pa cmu cs sept 
trivedi trivedi optimal selection cpu speed device capabilities file white assignments journal acm 
july 
pp white disk storage technology scientific american august 
