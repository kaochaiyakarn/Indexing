mechanized metatheory masses challenge brian aaron bohannon matthew fairbairn nathan foster benjamin pierce peter sewell dimitrios geoffrey stephanie weirich steve zdancewic department computer information science university pennsylvania computer laboratory university cambridge subversion revision document generated april 
close world programming languages accompanied electronic appendix proofs 
propose concrete set benchmarks measuring progress area 
metatheory system typed lambda calculus second order polymorphism subtyping records benchmarks embody aspects programming languages challenging formalize variable binding term type levels syntactic forms variable numbers components including binders proofs demanding complex induction principles 
hope benchmarks help clarify current state art provide basis comparing competing technologies motivate research 
proofs programming languages straightforward long te just interesting cases 
complexity arises management details deep conceptual difficulties overlooked cases invalidate large amounts 
effects amplified languages scale hard keep definitions consistent reuse ensure tight relationships theory implementations 
automated proof assistants offer hope problems 
despite encouraging progress years availability mature tools acl coq hol hol light isabelle lego nuprl pvs twelf commonplace believe time right join efforts communities bringing developers automated proof assistants large eager potential clients programming language designers researchers 
particular answer questions 
current state art formalizing language metatheory 
recommended best practices groups typically proof assistant experts embarking formalized language definitions small large scale 

improvements needed tool support common place 
community contribute 
past months attempted survey landscape assistants language representation strategies related tools 
collectively applied automated theorem proving technology number including proving transitivity algorithmic subtype relation kernel proving type soundness featherweight java soundness variants simply typed calculus tial formalization behavior tcp udp sockets api 
carried case studies variety object language proof techniques proving environments 
experimented lightweight tools designed easier define formal informal mathematics 
experts programming language theory relative novices respect computer 
experiments relevant technology point widely language researchers 
seek push threshold making proof practice programming language research mechanized metatheory masses tool support formal reasoning programming languages useful levels 
machine checked metatheory 
classic problems type vation soundness theorems unique decomposition properties operational semantics proofs equivalence algorithmic type systems results typically proved hand small medium sized calculi proved definitions 
envision papers conferences principles programming languages popl functional programming icfp routinely accompanied mechanically checkable proofs theorems claim 
definitions oracles testing animation 
developing language implementation formal definition definition oracle testing 
requires tools decide typing evaluation relationships differ embedded proof assistant 
cases definition directly prototype 
support engineering large scale definitions 
move full language definitions scale standard ml larger pragmatic issues increasingly important potential benefits tool support 
large definitions need elegant concise notation pressing witnessed care taken informal mathematics 
lightweight tool support full mechanized proof useful domain typesetting definitions informal proofs automatically instantiating definitions performing substitutions intend stimulate progress providing common framework com alternative technologies 
issue set challenge problems dubbed challenge chosen exercise aspects programming lan guages known difficult formalize variable binding term type levels syntactic forms variable numbers components proofs demanding complex induction principles 
challenge problems past theorem proving community attention specific areas evaluate relative merits different tools ranged scale benchmark suites small problems grand challenges floyd hoare moore 
hope challenge similarly stimulating effect problems drawn basic metatheory call value variant system enriched records record subtyping record pat terns 
provide informal mathematics definition type system operational semantics outline proofs metatheory appendix language moderate scale toy calculus full blown programming language keep involved attempting 
plan collect disseminate solutions challenge problems related mechanized metatheory web site 
longer run hope site serve forum promoting advancing best practices proof assistant technology making technology available broader programming languages community 
researchers try challenge send solutions inclusion web site 
section discuss detail reasons selecting set challenge problems 
section describes problems section sketches avenues development set 
design challenge section motivates choice challenge problems discusses eval uation criteria proposed solutions challenges 
variable binding central aspect challenges briefly survey relevant techniques experience area 
challenges explicitly address points regard pragmatic issues equally critical clear formulate useful challenge problem larger scale 
www cis upenn edu proj mmm problem selection goal challenge provide small defined setof problems capture critical issues formalizing programing language metatheory 
nature benchmark reflect important issues practical require challenge participants formalize large scale language example 
concentrate important features binding 
programming languages form binding require treatment ff equivalence semantics 
pure name binding needs capture avoiding substitution 
adequately represent languages support multiple kinds binders term type constructs introducing multiple binders scope mutually recursive functions potentially unbounded lists binders record patterns dependent lists binders module definitions complex inductions 
programming language definitions involve complex mutually recursive definitions 
structural induction objects mutual induction induction heights pairs derivations commonplace metatheory experimentation 
proofs programming languages just aspect formalization applications experimenting formalized lan guage designs equally interesting 
easy language designer execute typechecking algorithms generate sample program behav iors importantly test real language implementations formalized definitions component reuse 
facilitate experimentation sharing language designs infrastructure support way definitions parts proofs 
carefully constructed challenge stress theorem proving infrastructure addresses challenge applicable wide spectrum programming language theory 
evaluation criteria constitutes solution challenge 
valid appropriate software tools language representation strategy demonstration infrastructure sufficient formalize section 
appendix presents reasonably detailed informal proofs challenge properties 
solutions challenge follow proofs expect details vary prover prover term representations primary metric success correctness course infrastructure give confidence success similar techniques 
particular implies technology impose reasonable overheads 
accept cost formalization intent able prove things easily hand certainly welcome 
weare willing spend time effort proof infrastructure overhead doing prohibitive 
example experience explicit de bruijn indexed representations variable binding structure fail test 
technology accessible 
representation strategy syntax depart radically usual conventions familiar technical audience content theorems selves apparent familiar theorem proving technology representation strategy chosen 
usable say semester training knowledgeable programming language theory expert prover technology 
representing binders problem representing reasoning inductively defined binders central challenges 
representing binders recognized crucial theorem proving community different solutions problem proposed 
limited experience emerge clear winners 
section briefly summarize main approaches applicable describe experiments 
far complete refrain drawing hard give proponents method chance try hand meeting 
order named approach similar flavor standard informal pre sentations formalize metatheory untyped calculus 
representation requires assigned unique name aspect called barendregt convention 
popular concrete representation de bruijn nameless representa tion 
de bruijn indices easy understand support full range induction principles needed reason terms 
experience de bruijn representations major flaws 
statements theorems require complicated clauses involving shifted terms contexts 
clauses difficult see correspondence informal formal versions theorem question simply formal statement pasting 
second notational clutter manageable toy examples size simply typed lambdacalculus quite heavy burden fairly small languages 
formalization properties pure type systems mckinna pol lack hybrid approach combines representation strate gies 
approach free variables ordinary names bound represented de bruijn indices 
radically different approach representing terms binders higher order syntax hoas 
hoas representations binders metalanguage represent binders object language 
hoas encodings mainly twelf shown provide conveniently high level abstraction encapsulating complexity binders applicable 
experience suggests difficult hoas represent problems 
forexample languages constructs require lists binders obvious encoding hoas 
example closure conversion 
representing closure conversion algorithm requires intensional mechanism calculating free variables aterm possible hoas 
gordon melham propose way axiomatize inductive reasoning lambda terms suggest inductive structures binding encoded setting correspondence untyped 
pursued direction observes axioms cumbersome assistance theorem proving tool particular axioms universal quantification inductive hypotheses informal practice 
library lemmas system permutations top axioms aids reasoning significantly approaches binding take concept swapping primitive build nominal logic 
gabbay pitts proposed reasoning binders set theory extended intrinsic notion permutation 
pitts followed proposing new nominal logic idea permutations 
urban proposes methods intuitions carried logic personal communication 
preliminary experiments urban methods encouraging 
challenge challenge problems taken basic metatheory system 
formed enriching types terms system subtype relation refining universal quantifiers carry subtyping constraints record subtyping record patterns 
presentation sources background information divide challenge distinct parts 
deals just type language second considers terms evaluation type soundness subdivided parts starting definitions properties pure growing language little asking thesame properties proved records patterns 
development start small importantly focuses attention issues reuse sub part re second sub part 
third problem asks useful algorithms extracted earlier formal definitions animate properties 
challenge transitivity subtyping part challenge problem deals purely type 
syntax language defined grammar rules 
grammar simple syntactic forms key properties require fairly sophisticated reasoning 
syntax types type variable top maximum type type functions universal type gamma type environments empty type env 
gamma type variable binding variable binding occurrence scope 
gamma domain gamma domain gamma standard practice issues ff conversion substitution left implicit follows 
ways issues formalized take gamma structure association list named variables types quotient types terms alpha equivalence take alpha equivalence 
axiomatize formedness types contexts auxiliary gamma ok gamma ok judgments 
leave decisions individual formalization 
acceptable small changes rules reflect adding formedness premises 
changing presentation rules notationally different equivalent style hoas clear argument really equivalent 
formalization chosen clear dealing scoped terms 
example possible derive top inthe empty context 
subtyping relation capturing intuition subtype written instance may safely instance defined follows 
technical note type experts reasonable ways defining subtyping relation differing formulation rule comparing bounded subtyping gamma gamma top sa top gamma sa refl tvar gamma gamma gamma sa trans tvar gamma gamma gamma sa arrow gamma gamma gamma sa rules algorithmic version subtyping relation 
familiar declarative presentation rules implementation type checker rules somewhat easier reason having example obvious inversion property lemma 
declarative rules differ explicitly stating subtyping reflexive transitive 
reflexivity transitivity turn derivable properties algo system 
straightforward induction shows algorithmic rules reflexive 
challenge show transitive 
lemma transitivity algorithmic subtyping gamma gamma gamma difficulty lies reasoning needed prove lemma 
transi tivity proven simultaneously property called narrowing inductive argument case analyses final rules derivations 
full details proof appear appendix lemma narrowing gamma delta gamma gamma delta challenge transitivity subtyping records extend challenge enriching type language record types new syntax subtyping rule record types shown 
implicit syntax condition labels li appearing li ti pairwise distinct 
quantifiers rule sa tractable flexible version called kernel rule expressive technically somewhat problematic full subtyping rule 
choose full variant metatheory interesting 
new syntactic forms types li ti type records new subtyping rules gamma li kj kj li gamma sj ti gamma kj sj li ti sa rcd shown records encoded dealing directly worthwhile task forms record types arbitrary finite number fields 
informal proof challenge extends record types adding cases 
formal proof reflect 
challenge type safety pure challenge considers type soundness pure moment 
complete definition describing terms values typing environments term binders giving inference rules typing relation small step operational semantics usual informal presentations elide formal definition substitution simply assume substitutions type denoted 
term denoted 
capture avoiding 
syntax terms variable abstraction application type abstraction type application values abstraction value type abstraction value gamma type environments empty type env 
gamma term variable binding gamma type variable binding typing gamma gamma gamma var gamma gamma abs gamma gamma gamma app gamma gamma tabs gamma gamma gamma 
tapp gamma gamma gamma sub evaluation 




evaluation contexts evaluation contexts hole app fun app arg type fun evaluation context 

ctx evaluation relation parts rules capture immediate reduction rules language ctx permits reduction arbitrary evaluation context definitions evaluation contexts reduce notational clutter explicit uniform nature congruence rules 
evaluation contexts interesting point view formalization may include binders 
unfortunately examples call type soundness usually proven style popularized wright felleisen terms preservation progress theorems 
challenge isto prove properties pure 
theorem preservation gamma 
gamma theorem progress closed typed term value 

proof transitivity subtyping inductive arguments re quired straightforward 
variable binding significant issue language includes binding type term variables 
relating kinds binding shown particular lemmas type term substitutions 
lemmas turn require permuting weakening strengthening typing environments 
full details proof appear appendix challenge type safety records pattern matching challenge extend preservation progress results pattern matching 
new syntax rules language appear 
record types labels li appearing record li ti assumed pairwise distinct 
similarly variable pattern assumed bind pairwise distinct variables 
new syntactic forms terms li ti record projection pattern binding patterns variable pattern li pi record pattern values li vi record value new typing rules gamma gamma delta gamma delta gamma gamma ti ti gamma li ti li ti rcd gamma li ti gamma lj tj proj pattern typing rules var pi ti delta li pi li ti delta 
delta rcd new evaluation rules 

match letv li vi lj 
vj new evaluation contexts evaluation contexts projection li vi lj lk tk record binding matching rules match 
var li kj li kj match pi vj oei match li pi kj vj oen ffi ffi oe rcd compared language challenge construct tally new binding form patterns may bind arbitrary finite number term variables 
challenge testing animating respect semantics complete formal definition language interest ing ways opposed reasoned 
implementing language possible formal oracle testing implementation checking conform definition running test cases implementation confirming mally outcome prescribed 
secondly construct prototype implementation definition animating lan guage exploring language properties particular examples 
cases done error prone definitions 
final challenge provide implementation functionality specifically tasks language challenge 
terms decide 


terms decide transitive closure 

term find term 

subtasks useful testing language implementations useful animating definition 
subtasks system accept syntax reasonably close informal ascii math notation necessary translate syntaxes formal environment implementation 
provide implementa tion interpreter records patterns challenge order challenge concrete 
solution challenge decision procedures proof assistant extract stand code 
program extraction old problem received significant attention theorem proving ture examples coq hol isabelle hol 
general may necessary combine theorems rule algorithmic definition typing coincides declarative definition proof search deciding particular instances algorithmic definition 
challenge challenge meant exhaustive aspects pro gramming language theory raise formalization difficulties interestingly different problems proposed name logical coinductive simulation arguments undecidability results linear handling type environments 
welcome suggestions community ad ditional challenge problems help focus issues 
believe technology provides solution formulated sufficient attract eager adopters programming languages community authors 
waiting 
time bring mechanized metatheory tothe masses 
acknowledgments number people joined preliminary discussions including andrew appel hugo herbelin jason hickey michael andrew pitts randy pollack carsten sch phil wadler 
especially grateful randy pollack helping guide earliest efforts formalization randy michael carsten sch challenge problems 

james andrews 
executing formal specifications translation higher order logic programming 
gunter amy felty editors theorem proving higher order logics tphols murray hill nj volume lecture notes computer science pages 
springer 

henk barendregt 
lambda calculus 
north holland revised edition 

stefan berghofer 
program extraction simply typed higher order logic 
herman geuvers wiedijk editors types proofs programs types volume lncs pages 
springer 

stefan berghofer tobias nipkow 
executing higher order logic 
callaghan luo mckinna pollack editors types proofs programs types volume lecture notes computer science pages 
springer verlag 

stefan berghofer martin strecker 
extracting formally verified fully executable compiler proof assistant 
electr 
notes theor 
comput 
sci 

yves bertot pierre 
interactive theorem proving program development volume eatcs texts theoretical computer science 
springerverlag 

luca cardelli 
extensible records pure calculus subtyping 
research report dec compaq systems research center january 
gunter mitchell editors theoretical aspects object oriented programming types semantics language design mit press 

luca cardelli simone martini john mitchell andre scedrov 
extension system subtyping 
information computation 
summary tacs sendai japan pp 


luca cardelli peter wegner 
understanding types data abstraction polymorphism 
computing surveys december 

robert constable stuart allen mark bromley rance cleaveland james cremer robert harper douglas howe todd knoblock paul mendler prakash panangaden james sasaki scott smith 
implementing mathematics nuprl proof development system 
prentice hall englewood cliffs nj 

pierre louis curien giorgio ghelli 
coherence subsumption minimum typing type checking 
mathematical structures computer science 
gunter mitchell editors theoretical aspects object oriented programming types semantics language design mit press 

de bruijn 
lambda calculus notation nameless dummies tool automatic formula manipulation application church rosser theorem 
mathematicae 

louise dennis 
inductive challenge problems 
www cs nott ac 
uk lad research challenges 

robert floyd 
assigning meanings programs 
schwartz editor mathematical aspects computer science volume proceedings symposia applied mathematics pages providence rhode island 
american mathematical society 

murdoch gabbay andrew pitts 
new approach syntax involving binders 
th symposium logic computer science pages 

gent walsh 
benchmark library constraints 
technical report technical report apes 
available cs strath ac uk 
shorter version appears proceedings th international conference principles practices constraint programming cp 

giorgio ghelli 
proof theoretic studies minimal type system integrating inclusion parametric polymorphism 
phd thesis universit di pisa 
technical report td dipartimento di informatica universit di pisa 

andrew gordon tom melham 
axioms alpha conversion 
von wright grundy harrison editors theorem proving higher order logics th international conference tphols turku finland august proceedings volume lecture notes computer science pages 
springer verlag 

gordon melham editors 
hol theorem proving environment higher order logic 
cambridge university press 

ian green 
dream corpus inductive conjectures 
dream dai 
ed ac uk dc lib html 

john harrison 
hol light tutorial 
srivas albert editors proceedings international conference formal methods computer aided design fmcad volume lecture notes computer science pages 
springer verlag 
see www cl cam ac uk users hol light index html 

tony hoare 
verifying compiler grand challenge computing research 
acm 

holger hoos thomas stuetzle 
satlib 
www intellektik informatik 
tu darmstadt de satlib 

atsushi igarashi benjamin pierce philip wadler 
featherweight java minimal core calculus java gj 
acm sigplan conference object oriented programming systems languages applications oopsla october 
full version acm transactions programming languages systems toplas may 

matt kaufmann strother moore panagiotis 
computer aided reasoning approach 
kluwer academic publishers 

zhaohui luo robert pollack 
lego proof development system user manual 
technical report ecs lfcs university edinburgh may 

mckinna pollack 
lambda calculus type theory formalized 
journal automated reasoning november 

robin milner mads tofte robert harper david macqueen 
definition standard ml revised edition 
mit press 

strother moore 
grand challenge proposal formal methods verified stack 
bernhard maibaum editors formal methods crossroads 
panacea foundational support th anniversary colloquium unu iist lisbon portugal volume lecture notes computer science pages 
springer 

strother moore george porter 
apprentice challenge 
acm trans 
program 
lang 
syst 

tobias nipkow lawrence paulson markus wenzel 
isabelle hol proof assistant higher order logic volume lecture notes computer science 
springer verlag 

michael 
hankin barendregt gordon melham axioms 
merlin proceedings workshop mechanized reasoning languages variable binding pages 
acm press 

michael 
recursive function definition types binders 
konrad slind annette ganesh gopalakrishnan editors theorem proving higher order logics th international conference tphols park city utah usa september proceedings volume lecture notes computer science pages 
springer verlag 

sam owre rajan john rushby natarajan shankar srivas 
pvs combining specification proof checking model checking 
international conference computer aided verification cav new brunswick new jersey volume lecture notes computer science pages 
springer verlag july 

christine paulin mohring benjamin werner 
synthesis ml programs system coq 
symb 
comput 

pfenning elliot 
higher order syntax 
pldi proceedings acm sigplan conference programming language design implementation pages 
acm press 

frank pfenning carsten sch 
system description twelf metalogical framework deductive systems 
harald ganzinger editor automated deduction cade th international conference automated deduction trento italy july proceedings volume lecture notes artificial intelligence pages 
springer verlag 

benjamin pierce 
types programming languages 
mit press 

andrew pitts 
nominal logic order theory names binding 
inf 
comput 

rajan 
executing hol specifications evaluation semantics classical higher order logic 
luc michael gordon editors higher order logic theorem proving applications tphols leuven belgium volume ifip transactions pages 
north holland elsevier 

geoff sutcliffe christian 
tptp problem library 
journal automated reasoning 

ren james 
mechanisation barendregt style equational proofs residual perspective 
mechanized reasoning languages variable binding merlin volume electronic notes theoretical computer science 
elsevier 

ren james 
formalised order confluence proof calculus sorted variable names 
information computation 
special edition selected papers rta 

andrew wright matthias felleisen 
syntactic approach type soundness 
information computation november 
proofs sake concreteness standardize proof techniques easier compare proofs properties mentioned challenges 
algorithmic subtyping challenges give proof full subtyping relation including records 
proof forthe pure system obtained simply deleting cases involving records 
lemma reflexivity gamma provable gamma proof induction structure lemma permutation weakening 
suppose delta formed permutation gamma delta gamma ordering delta preserves scopes type variables gamma sense binding gamma introduces type variable thatis mentioned binding right bindings appear order delta gamma delta 
gamma dom delta dom gamma gamma delta proof routine inductions 
part sa case part 
lemma transitivity narrowing 
gamma gamma gamma 
gamma delta gamma gamma delta proof parts proved simultaneously induction stage induction argument part assumes part established question part uses part strictly smaller qs 

proceed inner induction structure gamma final rules derivation gamma right hand derivation instance sa top done gamma top sa top 
left hand derivation instanceof sa top top inspecting algorithmic rules right hand derivation instance sa top 
instance sa refl tvar done derivation exactly desired result 
left hand derivation ends instance sa trans tvar gamma subderivation gamma inner induction hypothesis gamma sa trans tvar gamma required 
left hand derivation ends instance sa arrow sa sa rcd considered case right hand derivation ends sa top rule 
rule sa arrow subderivations gamma gamma gamma gamma 
apply part outer induction noting immediate subterms obtain gamma gamma sa arrow obtain gamma 
case derivations sa gamma gamma gamma gamma subderivations 
part outer induction hypothesis subterm combine subderivations obtain gamma 
bodies need little harder contexts quite agree 
part outer induction hypothesis noting immediate subterm bound derivation gamma obtaining gamma 
part outer induction hypothesis applies immediate subterm yielding gamma 
sa gamma 
derivations sa rcd li si hj qj gk tk gk hj li li hj gamma si hj gk gamma qj tk premises 
li gk hj hj gk li 
gamma si qj gamma qj tk 
observing qj immediate apply outer induction hypothesis obtain gamma si tk 
sa rcd gamma li si gk tk 

proceed inner induction structure derivation gamma delta cases proceed straightforward inner induction hypothesis 
interesting case sa trans gamma delta subderivation 
applying induction hypothesis subderivation yields gamma delta applying weakening lemma part gamma yields gamma delta part outer induction hypothesis gamma delta rule sa trans gamma delta required 
type safety challenges lemmas give proof type safety system including pattern matching 
preliminary technical facts typing subtype relations 
lemma permutation typing suppose delta gamma gamma delta proof straightforward induction derivations 
lemma weakening subtyping typing 
gamma gamma formed gamma 
gamma gamma formed gamma 
gamma gamma formed gamma 
gamma gamma formed gamma 
gamma gamma delta formed gamma delta 
gamma gamma delta formed gamma delta proof proofs parts proceed straightforward derivations 
sa cases require permutation subtyping derivations lemma part 
proofs parts proceed straightforward induction derivations parts sub tapp cases 
abs tabs cases require permutation derivations lemma 
parts follow induction number bindings delta parts 
lemma strengthening gamma delta gamma delta proof typing assumptions play role subtype derivations 
proof type preservation relies lemmas relating typing subtype relations 
state analog typing relation narrowing lemma subtyping lemma part 
lemma narrowing typing relation gamma delta gamma gamma delta proof straightforward induction lemma sub case 
usual lemma relating substitution typing relation 
lemma substitution preserves typing gamma delta gamma gamma delta 
proof induction derivation gamma delta 
particular lemma tapp sub cases 
may substitute types type variables reduction lemma relating type substitution typing 
proof lemma specifically sub case depends new lemma relating substitution 
definition write 
gamma context obtained substituting right hand sides bindings gamma lemma type substitution preserves subtyping gamma delta gamma gamma 
delta 

note need substitute part follows binding conventions scoping require thatthe types left binding contain proof induction derivation gamma delta case sa trans tvar gamma delta gamma delta subcases consider 
result follows con cases gamma delta induction hypothesis sa trans tvar 
note 
gamma hand induction hypothesis gamma 
delta 

note 
gamma 
gamma weakening gamma 
delta 
transitivity gamma 
delta 
gamma 
delta 

case sa gamma delta gamma delta induction hypothesis gamma 
delta 


gamma 
delta 


sa gamma 
delta 



gamma 
delta 


similar lemma relates type substitution typing 
lemma type substitution preserves typing gamma delta gamma gamma 
delta 

proof induction derivation gamma delta give cases 
case tapp gamma delta 
gamma delta induction hypothesis gamma 
delta 

gamma 
delta 



subtyping substitution lemma gamma 
delta 


tapp gamma 
delta 




gamma 
delta 



case sub gamma delta gamma delta induction hypothesis gamma 
delta 

subtyping substitution lemma gamma 
delta 

result follows sub 
establish simple structural properties subtyping 
lemma inversion subtyping right left 
gamma type variable 

gamma type variable form gamma gamma 

gamma type variable form gamma gamma 

gamma li ti type variable kj qj li kj li kj implies gamma qj ti proof part immediate definition subtyping relation 
lemma turn establish straightforward typing relation needed critical cases type preservation proof 
lemma 
gamma gamma gamma gamma gamma 

gamma gamma gamma gamma gamma 

gamma li ti gamma kj tj kj li li kj implies gamma ti tj proof straightforward induction typing derivations lemma forthe induction case rule sub 
type safety challenges progress progress theorem relatively straightforward 
canonical forms property telling possible shapes closed values arrow record quantifier types 
lemma canonical forms 
closed value type form 

closed value type li ti form kj vj li kj 

closed value type form 
proof parts proceed induction typing derivations give ar third part 
similar 
inspection typing rules clear final rule derivation tabs sub 
tabs desired result 
suppose rule sub 
premises rule wehave 
inversion lemma form type variable empty 
result follows induction hypothesis 
observe non value term decomposed evalu ation context subterm take step 
lemma value exists term 

proof induction derivation give 
case app induction hypothesis applied subcases consider 
subcase value apply induction hypothesis 
value forms lemma form 



take 

take 
subcase 
case take 
case tapp case similar app case 
case induction hypothesis cases consider 
subcase value 
match letv 
take subcase 
case take 
case proj lj li ti induction hypothesis cases consider 
subcase value canonical forms lemma form hk vk li hk 


take case 
subcase 
case take lj 
case rcd li ti li ti ti ti ti value re done 
induction hypothesis tj 

case take li ti lj lk nk 
proof progress straightforward 
theorem progress closed typed term value 

proof lemma value evaluation context term 

case take observe 
ctx 
type safety challenges preservation proof preservation proving substitution lemma patternmatching records 
lemma matched patterns preserve typing suppose delta gamma gamma delta 
gamma match 
proof induction derivation delta case var delta match 
result follows lemma 
case rcd li pi li si pi si delta delta delta 
delta lemma form gj vj li gj gj li implies gamma vj si definition oen ffi ffi oe li gj implies match pi vj oei starting gamma delta iteratively apply 
pn obtain gamma match 
formally result follows induction applying weakening lemma gamma vj si needed 
lemma relates evaluation contexts typing relation 
lemma 
gamma gamma implies gamma gamma 
gamma gamma 
proof parts proven induction structure evaluation con texts 
case consider rule derivation gamma tand apply induction hypothesis 
prove immediate reduction preserves types terms 
lemma gamma 
derivation 
rule ctx gamma proof induction derivation gamma give 
case app gamma gamma derivation 



lemma gamma gamma gamma 
narrowing lemma typing substitution lemma gamma 
obtain gamma 
sub 
case proj lj tj gamma li ti derivation 

record value hk vk 
lemma li hk li gamma vk ti vk hk lj 
gamma tj required 
case tapp gamma 
gamma derivation 



lemma gamma gamma gamma 
preservation typing lemma gamma 

gamma 

follows lemma sub 
case gamma delta gamma delta derivation 
letv 
value match 
result follows lemma 
prove main preservation theorem 
theorem preservation gamma 
gamma proof induction derivation 

suppose derivation ctx 


lemma gamma 
induction hypothesis gamma gamma 
result follows lemma 
cases result follows lemma 

