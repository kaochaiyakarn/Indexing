covariance contravariance conflict cause giuseppe castagna type theoretic research object oriented programming issue con continuing debate 
short argue covariance con appropriately characterize distinct independent 
called contravariance rule correctly captures subtyping relation relation establishes sets functions replace set eve 
covariant relation characterizes code definition new code replaces old def particular cases 
covariance contravariance opposing views distinct concepts place oriented systems 
integrated type safe manner object oriented languages 
show independence mechanisms characteristic model valid general covariant specialization record models hidden deficiency calculi realize model 
calculus calculus model approach obtains vision oriented type theories case record approach gains multiple dispatching feature existing record models capture 
categories subject descriptors programming languages language classifica tions object languages logics meanings programs studies program constructs type structure general terms theory languages additional key words object oriented languages type theory 
type theoretic research object oriented programming issue covariance versus contravariance core heated debate 
dis goes back ken richard ez covariant specialization methods data model 
disputed ant contravariant specialization methods object oriented language 
fact debate heated witnessed excellent tutorial object oriented type systems michael schwartzbach popl conference schwartzbach tutorial schwartzbach fingers partially supported consiglio nazionale delle nazionale delle scienze italy liens 
author address liens rue ulm paris ih ante email castagna dmi ens 
fr 
permission digital hard copy part personal classroom granted fee provided copies distributed profit commercial advantage copyright notice title publication date appear notice copying permission acm copy republish post servers redistribute lists requires prior specific permission fee 
acm acm languages systems vol may pages castagna contravariance issue specificity object oriented type systems 
short note argue choice covariance false problem 
covariance contravariance characterize completely distinct mechanisms subtyping specialization 
confusion appear mutually exclusive 
fact covariance contravariance conflicting views distinct concepts integrated type safe formalism 
argue error exclude corresponding mechanism properly implemented 
result clear model object oriented programming defined giuseppe longo giorgio ghelli author castagna ghelli seminal ghelli hidden obj goguen meseguer jouannaud marti oliet meseguer 
notes want stress result indepen dent particular model object oriented programming chooses covariance contravariance coexist record model proposed luca cardelli cardelli developed authors see collection gunter mitchell wide review record model 
article organized follows 
section recall terms problem hint solution 
section introduce overloading model object oriented programming give precise explanation 
show covariance contravariance coexist type safe calculus 
analysis determine precise role mechanism show conflict 
section provides evidence analysis independent particular model revealing type safe covariance record model 
section contains golden rules typesafe usage covariance cent 
assume reader familiar objects records model object oriented programming aware typing issues raises 
presentation intentionally kept informal definitions theorems 
matter defining new system explaining comparing existing ones technical results widely published 

controversy controversy concerning covariance contra described follows 
record model 
proposed luca cardelli cardelli object modeled record hose fields contain methods object labels corresponding messages invoke methods 
object specialized create new object different ways adding new methods new fields redefining existing ones overriding old methods 
specialized object object specializes 
implies method overriding lit unimportant context specialization performed object level tion class level acm transactions programming systems vol may covariance contravariance restricted type safety desired 
sufficient condition assure type safety method specialization requirement field specialized terms types subtypes field 
core covariance contravariance controversy concerns methods functional type 
subtyping relation functional types defined cardelli follows consider arrow type constructor borrowing ogy category theory functor covariant right argument preserves direction contravariant left argument reverses direction 
behavior left argument char rule called contravariant rule arrow covariant left argument rule sense equality reversed type safety lost 
modified rule quite easy write statically typed term produces run time type error 
despite unsoundness covariant specialization defenders cause 
eiffel meyer system bancilhon example covariant specialization 
contravariant rule intuitive covariant source problems 
surprising appears binary methods exemplified follows 
consider object type create object type specialization 
suppose defined method equal objects compares object issue object type 
equal method type bool object bool object 
record approach fields labeled equal type bool bool method belongs object knows argument usually denoted keyword self 
contravariant rule type associated equal objects subtype type equal objects 
order type safety oz specialization 
words subtype quite unintuitive 
imagine objects real numbers natural numbers 
soon number respond message asks equal number natural number longer real number expected 
furthermore experience third sold object oriented database management system world shows unsoundness type checker caused problems practice 
people prefer give type safety covariant subtyping rule specialization 
general contravariance static type safety required covariance natural flexible expressive 
viewpoint covariance advocates contravariance advocates appealing totally incompatible 
rule better name rule prefer adopt name usage object oriented community 
rest article contravariance contravariant rule contravariant specialization denote contravariant behavior arrow 
acm transactions programming languages systems vol 
may 
giuseppe castagna flaw comparison covariance nearly overloading model compared contravariance record model difference models type parameter self appears model disappears see type equal previous example 
drawn wrong show sections take account disappearance type model 
proceed studying covariance contravariance overloading model section record section 
show covariance contravariance way guarantees type safety 
achieve need impose restrictions just point concepts serve 
proceeding fix terminology 
recall object set private operations associated called methods smalltalk goldberg robson objective pinson wiener clos demichiel gabriel member functions stroustrup 
operations executed applying special operator object object receiver message alk objective argument generic function clos left argument dot selection 
order simplify exposition refer different ways selecting method message sending operations message name generic function clos right argument dot selection 
additionally message may parameters 
introduced keywords smalltalk objective arguments ary generic function clos surrounded parenthesis 
enter core discussion type class actual parameters message may may considered run time selection method execute 
example clos type argument generic function taken account selection method 
smalltalk objective arguments considered type receiver drives selection sections formally show method selected message parameters overridden parameters determine dynamic selection covariantly overridden corresponding parameters overriding method lesser type 
parameters taken account selection contravariantly overridden corresponding parameters overriding method greater type 

formal statement section give formal framework state precisely elements problem intuitively explained section 
analyze strictly peaking sible clos identify generic function 
overloading requires brief resolves overloading time static types dynamic method look affect code executed overloaded member function 
run time code functions expanded reason overloading quite different describe section acm transactions programming languages systems vol 
may 
covariance contravariance problem overloading model castagna model covariance contravariance issue clearer formalization 
section discuss record model 
idea overloading model type messages objects 
precisely assume messages special functions composed ordinary functions methods 
message sent object class method defined objects class selected composing message 
object passed selected method executed 
model quite natural programmers languages generic functions clos dylan apple computer generic func tions clos coincide special functions understanding requires effort abstraction programmers object oriented languages group methods inside host objects formalized record model inside messages ignore implementation issues ways grouping methods object message essentially equivalent simply different perspectives scene 
true point view suggested section 
class definitions describe objects 
class generally characterized name set instance variables set methods 
method class associated message 
overloading model assume classes type instances assumption messages special functions composed codes methods special function applied argument messages sent argument code execute chosen class type argument 
words messages overloaded junctions 
functions applied code selection performed compile time usual done run time late binding late selection strategy run time selection called dynamic binding dynamic dispatch 
see run time selection necessary considering example 
suppose code graphical editor object oriented style 
editor uses classes line square subclasses subtypes picture 
suppose defined method draw classes 
method selection performed compile time message draw ax tire 
draw 
executed draw code defined pictures compile time type picture 
late binding code draw chosen parameter bound evaluated basis run time type bound inst ante line square picture 
overloaded functions late binding fundamental feature loading model way records fundamental feature record model 
study cardelli extended simply typed prefer little vague moment precise definition typing objects case name name class type 
case structural subtyping functionality object acm transactions programming languages systems vol may giuseppe castagna lambda calculus subtyping records 
study extended simply typed lambda calculus subtyping overloaded functions 
extension led definition calculus intuitive ideas described follows detailed presentation see castagna castagna see castagna second order case 
overloaded function consists collection ordinary functions abstractions called branch overloaded function 
chose symbol name calculus glue ordinary functions overloaded 
add simply typed lambda calculus terms form ill intuitively denotes overloaded function branches applied argument branches selected accord ing type argument 
distinguish ordinary application application overloaded function fundamentally different mechanisms 
implemented substitution imple mented selection 
denote overloaded application usual 
build overloaded functions lists start empty overloaded func tion denoted concatenate new branches 
term overloaded function ordinary branch re overloaded function 
write overloaded function branches ml mz mn ml mz 
mn 
type overloaded function set types branches 
overloaded function type ul vl ug vz un vn 
pass function argument type uj selected branch mj 
formally 
mn means rewrites zero steps 
short add terms mon terms simply typed lambda calculus add sets arrow types types simply typed lambda calculus 
add subtyping relation types 
intuitively expression type safely types expression type expected definition calculus produce run time type errors long evaluation rules maintain reduce types terms 
subtyping relation arrow types cardelli covariance right contravariance left 
subtyping relation overloaded types deduced observation overloaded function place overloaded branch branch replace 
overloaded type smaller acm transactions programming languages systems vol may covariance contravariance overloaded type arrow type smaller arrow type formally subtyping type may match just subtype 
case choose branch best approximates type precisely type select branch uh min iu 
system set arrow types considered overloaded type 
particular set arrow types ac overloaded type satisfies conditions maximal lb ui exists unique vh lb denotes set common lower bounds uj 
condition concerns selection correct branch 
said earlier apply overloaded function type ul vz ei term type selected branch type uj vj uj 
condition guarantees existence uniqueness branch necessary sufficient condition existence proved castagna 
interesting purposes article second condition call covariance condition 
condition guarantees computation type term may decrease 
concretely branch overloaded function type ul pass term compile time type compile time type vi 
normal form type possible ut run time type vz 
condition requires vi 
far shown include overloading subtyping calculus 
late binding remains 
simple way obtain impose condition reduction performed closed normal form 
restriction precise type apparent argument select appropriate branch overloaded function 
stress important understand overloaded functions late binding significantly different form overloaded functions definable example 
late binding overloading resolved run time overloaded functions resolved compile time 
point intuitively show calculus model object oriented languages noting possible encode subjective pairings simple records cardelli described section extensible records see cardelli mitchell wand 
encodings castagna 
conditions natural interpretation object oriented lan guages 
suppose mesg identifier overloaded function acm transactions programming languages systems vol may 
giuseppe castagna type mesg object oriented jargon mesg cl ti 
message containing methods defined class class class cl method returns result type class method returns result type 
cl subclass precisely subtype cl method cl overrides 
condition requires 
say covariance condition expresses requirement method overrides return smaller type 
cl unrelated exists subclass cl defined multiple cl 
condition requires branch defined mesg case multiple inheritance methods defined message ancestor explicitly redefined 
see fits example 
consider class dpoint integer instance variables subclass dp int ad ditional instance variable relationships expressed definitions class dpoint class dpoint dpoint int int int int int place dots definitions methods 
ap proximation classes modeled atomic types dpoint dpoint dpoint respective representation types records int int int int int 
note assumption dpoint dpoint compatible subtyping relation corresponding representation types 
method include definition dpoint norm sqrt self self self denotes receiver message may override method dpoint method norm sqrt self self self methods written branch overloaded function norm dp nt 
sel sel dp nt 
sel omitted brevity 
type overloaded function dpoint real dpoint real 
note self parameter overloaded function class determines select ion 
acm transactions programming systems vol 
may covariance contravariance covariance appears example define method modifies instance variables 
example method initializing instance variables dpoint dpoint objects type initialize dpoint dpoint dpoint dpoint 
framework inheritance mechanism subtyping plus branch selection rule 
send message type cz object class method defined class mini ic executed 
minimum exactly receiver uses method defined class minimum strictly greater receiver uses method class inherited minimum 
note search minimum corresponds exactly smalltalk method look searches superclass receiver class method defined 
modeling messages overloaded functions advantages 
example functions class values messages 
possible write functions overloaded ones take message argument return result 
interesting characteristic model allows methods added existing class modifying type objects 
method concerned associated message suffices add new branch type overloaded function denoted context article notable advantage loaded functions allows multiple dispatch hinted previous section major problems record model impossible combine satisfactorily subtyping binary methods methods pa rameter class class receiver 
problem gave rise proposed unsound covariant subtyping rule 
reconsider point example adding method equal 
record models dimensional dimensional points modeled recursive records eqpoint int int equal eqpoint bool eqpoint int int int equal eqpoint bool 
contravariance arrow type field equal eqpoint subtype type equal eqpoint 
eqpoint eqpoint consider example 
defined atomic types dpoint dpoint 
happens record case adding new method class change type instances 
declaration dpoint dpoint bool dpoint dpoint bool important new method available instances possible send message object class object hss defined branch capability selecting method account classes receiver message 
subtyping rule recursive type says deduce yv follows 
example ux 
int int equal bool 
acm transactions programming languages systems vol 
may 
giuseppe castagna defined dpoint condition ance condition requires bool dpoint bool hold contravariance arrow left argument 
noted function choose branch type just argument 
code equal chosen types arguments known 
essential reason type rejected case easy write term type producing error 
possible write function takes account types arguments branch selection 
equal obtained follows equal dpoint bool dpoint dpoint bool 
send function objects class dpoint second branch chosen arguments class dpoint class smaller equal dpoint branch chosen 
point able precise roles played covariance contravariance subtyping contravariance correct rule want substitute function type different type ance correct condition want specialize object oriented jargon override branch overloaded function smaller input type 
important notice case new branch replace old branch objects classes 
tion shows issue contravariance versus covariance false problem caused confusion mechanisms little common sub overriding 
substitutivity establishes expression type place expression different type information type ordinary applications 
concretely function type want characterize category types values passed arguments noted arguments substituted body function formal parameter type define subtyping relation accepts argument type smaller category issue set subtypes may happen body formal parameter applied expression type 
deduce facts actual parameter function ti tz shape si furthermore function pass argument type 
contravariance 
clear interested passing functions arguments reason define subtyping relation arrows reason works 
overriding totally different feature 
suppose identifier circumstances message identifies functions incomparable 
identifier applied expression meaning application applied type smaller holes resulting time data flow analysis program 
acm transactions programmmg languages systems vol 
may covariance contravariance sense explained org applied eif type smaller suppose application case resolved selecting type included selecting type smaller equal problem 
types may decrease computation 
may happen type checker sees type infers applied type selected 
computation type decreases application type type elements substituted elements type sense substitutivity may call feature covariance clear subtyping rule replace applied arguments type independent functions perform precise different tasks handles arguments type included handles arguments type smaller equal case defining substitutivity giving formation rule sets functions order ensure type consistency computation 
words contravariance characterizes subtyping rule tool deduce existing relation covariance characterizes formation condition law programs observe 
arguments somewhat object oriented prac write plain object oriented terms section 
message may parameters type class parameter may may taken account selection appro priate method 
method message overridden parameters determine selection covariantly overridden corresponding parameters overriding method lesser type 
parameters taken account selection contravariantly overridden corresponding parameters overriding method greater type 
translated object oriented type systems 
consider message applied sent objects el 
en instance class 
suppose want consider classes objects method selection process 
dispatching scheme expressed ion el en en 
type ti expression means want select method input type min cl 
ck st pass arguments 
type say sj tj selected branch form ak 
sj tj ai ci want override ind ed covariance condition methods input type compatible arguments form 
acm transactions programming languages systems vol 
may giuseppe castagna selected branch precise explained new method covariantly override 
ak specialize branch contravariantly override ak 
am type safety 

covariance record model said previous section covariance specialize arguments taken account method selection 
record models arguments taken account method selection method uniquely determined record object dot selection applied 
models appears covariance condition 
strictly speaking argument precise record model possess limited form covariance sense covariant dependency input output message respect hidden encoding objects 
consider label 
subtyping rule record types send label records type result returned record type type smaller equal type returned requirement exactly corresponds dependency form limited expressed covariance condition cause applies record types sent label products multiple dispatch arrows 
may see correspondence treating record label potentially infinitely branching overloaded function takes argument record field labeled returns value corresponding type note treatment respects covariance condition implies 
types arguments records form kind type allowed 
record models pos sess limited form covariance implicit covariance 
idea explicit covariance multiple dispatching exist 
actual record models possess multiple dispatching 
lack mean analogy objects records incompatible multiple dispatching 
problem simply formalisms analogy expressive model 
rest section show construct record model object oriented programming describe model objects modeled records 
model obtain possible perform multiple dispatch recover covariance relation 
shown example covariance contravariance cohabit type safe systems analogy objects records 
key point records encoded 
encoding recs ll overload ing model hm exactly ss 
smaller type object message label sent smaller type result acm transactions programming languages systems vol 
may 
covariance contravariance mimic model simple records additional benefit overloaded functions 
purposes article simple records suffice 
recall encoding castagna 
lz 
infinite list atomic types 
assume isolated type li introduce constant 
possible encode record types record values record field selection respectively follows vn ll ln vn words record value overloaded function takes argument label label belongs different type select particular branch field discarded fv 
ll 
isolated typing reduction rules records special cases rules overloaded types 
henceforth enhance readability record notation encoding 
terms types written encodable mz consider equal message 
problem recall possible select right method knowing type just argument 
solution overloading approach multiple dispatching select method class arguments 
solution records 
method defined eqpoint select different code class second argument similarly eqpoint 
obtained field equal overloaded function 
definition previous recursive types eqpoint int int eqpoint int equal eqpoint bool eqpoint bool int int equal eqpoint bool eqpoint bool note eqpoint eqpoint 
objection may raised define class eqpoint class eqpoint may exist impossible define method equal eqpoint branch eqpoint 
note lambda abstraction considered special case overloaded function branch arrow type may relation encodings record types subtyping relation record types relation 
precisely plus recursive types 
acm transactions programming languages systems vol 
may 
giuseppe castagna considered overloaded type just arrow just matter notation see section castagna 
defined eqpoint eqpoint int int equal eqpoint bool added class eqpoint type eqpoint int int int equal eqpoint bool eqpoint bool note eqpoint eqpoint holds 
example objects types self 
elf nt 
equal qp ij self equal ap nt se self po self self self fixpoint operator encodable see castagna 
type safety expressions having types assured type safety calculus 
type requirements specializing methods case explained simple way specializing binary general ary method new class old class specialized method specify behavior case applied object new class behavior case applied object old class going back example section saying specializes class natural numbers real numbers type safety obtained specifying compare natural number natural number compare real number 
record approach specialization functional fields done contravariant subtypes specialization type safe convenient binary general ary methods accurately specialize binary general ary methods defining behavior objects new class possible combinations new objects old ones 
acm transactions programming languages systems vol 
may 
covariance contravariance object hierarchy deep approach require define branches ancestor cases definitions 
definitions necessary 
cases branches suffice assure type safety 
example suppose specialize equality point hierarchy adding dimensions 
define necessary define behavior equal method eqpoint 
branches eqpoint really neces sary 

reason rules follows tt take eqpoint various eqpoint may see branch eqpoint bool suffices definition guarantee type safety branches strictly necessary may added 
furthermore branch guarantees type safety missing added automatic way 
multiple dispatch embedded directly compiler technology order patch programs languages covariant subtyping modifying language syntax 
case type safety obtained modification code exists recompilation see castagna 
want stress record model covariance con naturally coexist 
apparent example equal branches equal return type bool 
see concepts coexist imagine method equal method add 
objects types int int int add int int add various branches multimethod add related variant way classes arguments determine code executed 

article hope contributed decisively debate covariance contravariance 
tried show concepts antagonistic covariance specialization er ati depend size depth hierarchy valid ary methods branches may required multiple inheritance collection methods branches 
multimethod applied argument objects appropriate method execute selected type arguments 
multimethods correspond overloaded functions 
acm transactions programming languages systems vol 
may giuseppe castagna contravariance substitutivity 
tried convey idea independence concepts characteristic particular model valid general 
fact covariance appear explicitly record model caused defect model deficiency calculi model 
particular able capture multiple dispatching 
deals multiple dispatching differences covariance contravariance apparent 
overloaded functions allowed expose covariance hidden records 
aside shown calculus taken basic calculus overloading record model 
obtain uniform vision object oriented type theories case record approach gain multiple dispatching believe solution typing binary methods 
note give golden rules summarize discussion 
golden rules left covariance arrow subtyping covariance override parameters drive dynamic method selection 
overriding binary ary method specify behavior actual class ancestors 
acknowledgments want benzaken encouraged write article kathleen patient reading suggestions 
special john mitchell kathleen fisher revisions notes readable 
apple computer 
dylan ob ect language 
eastern research technology apple computer cambridge mass bancilhon delobel kanellakis 
eds 

implementing object database system story morgan kaufmann san mateo 
cardelli 
semantics multiple inheritance inf 
comput 

previous version data types lecture notes computer science vol 

springer verlag new york pp 

cardelli mitchell 
operations records math 
struct 
comput 


castagna 
meta language typed object oriented languages 
comput 

published 
extended appears proceedings th foundations software technology theoretical computer lecture notes computer science vol 

springer verlag new york 
castagna 
proposal making type safe 
tech 
rep liens liens paris france 
available anonymous ftp ftp ens fr file pub dmi users castagna dvi castagna 
overloading subtyping late binding functional foundation object oriented programming 
ph thesis university paris paris france 
appeared liens tech 
rep castagna ghelli longo 
calculus overloaded functions subtyping 
comput 

preliminary version acm transactions programming languages systems vol 
may covariance contravariance acm conference lisp programming san francisco june 
demichiel gabriel 
common lisp object system overview 
proceeding ecoop european conference ob ect oriented paris france 
lecture notes computer science vol 

springer verlag berlin 
ghelli 
type system passing 
proceedings 
acm new york 
goguen meseguer 
order sorted algebra equational deduction multiple inheritance overloading exceptions partial operations 
tech 
rep sri csl computer science laboratory sri international menlo park calif july 
goldberg robson 
smalltalk language implementation 
addison wesley reading mass gunter mitchell 
aspects ob ect oriented types semantics language design 
mit press cambridge mass jouannaud kirchner kirchner 
obj programming equalities subsorts overloading parametrization 


richard object oriented data model 
pro ceedings acm sigmod conference chicago acm new york 
oliet meseguer 
inclusions subtypes 
tech 
rep sri csl computer science laboratory sri international menlo park calif dec meyer 
language 
prentice hall englewood cliffs pinson wiener 
objective ob ect oriented techniques 
addison wesley reading mass 
typechecking records variants natural extension ml 
th annual acm symposium principles languages 
acm new york 
schwartzbach 
developments object oriented type systems 
popl 
unpublished 
stroustrup 
language 
addison wesley reading mass wand 
complete type inference simple objects 
nd annual symposium logic computer science 
ieee computer society press los alamitos calif received april revised january accepted february acm transactions programming languages systems vol 
may 
