obfuscation executable code improve resistance lambda cullen saumya computer science university az 
cs arizona edu great deal software distributed form code 
ability reverse engineer executables create opportunities theft intel property software piracy security breaches allowing attackers discover ities application 
process reverse engineering executable program typically begins translates machine code assembly code 
followed various tion steps aim recover higher level abstractions assembly code 
date obfuscation focused disrupting confusing decompilation phase 
contrast focuses initial disassembly phase 
goal disrupt static disassembly process harder disassemble correctly 
describe widely static disassembly algorithms techniques thwart 
experimental results indicate significant portions obfuscated techniques disassembled incorrectly showing ef methods 
advances program analysis software engineer ing technology years led significant improvements tools program analysis soft lambda supported part national science foundation eia ccr 
ware development 
unfortunately technol ogy cases subverted reverse engineer software systems goal making unauthorized modifications stealing intellectual property 
require ity take executable program reconstruct high level structure extent 
example vulnerabilities software system hacker able works attacked 
similarly steal piece software embedded copyright notice software water mark pirate reconstruct internal structure able identify delete watermark affecting functionality program 
problem addressed maintaining encrypted form decrypting needed execution specialized hardware see 
effective approaches disadvantages high performance overhead flexibility software longer run stock hardware 
alternative approach focus code obfuscation techniques enhance software security goal deter attackers making cost reconstructing high level structure high 
processes compilation reverse engineer ing illustrated 
compilation refers translation source language program ma chine code consists series steps producing successively lower level program representa code gen flow parsing final code gen assembly machine code assembly code control flow graph syntax tree source code decompilation disassembly processes compilation tions 
reverse engineering dual process re covering higher level structure semantics machine code program 
broadly speaking di vide reverse engineering process parts disassembly produces assembly code ma chine code decompilation reconstructs higher level semantic structure program fromthe assembly code 
prior code obfuscation tamper proofing focus various decompilation 
example number researchers suggest relying difficult problems involving complex boolean expressions pointers indirect control flow harder construct precise control flow graph program 
described contrast fo disassembly process 
goal increase difficulty statically disassembling pro gram 
approach independent complementary current approaches code cation 
independent techniques applied regardless obfuscating transformations 
complementary program harder disassemble accurately add barrier recovering high level program 
header sections text section program entry section size size structure executable file background disassembly machine code file typically consists numberof different sections text read data contain various sorts information pro gram header describing sections 
things header contains program entry point location file machine instructions execution begins total size extent instructions see 
bly refers process recovering sequence assembly code instructions file format readable human 
broadly speaking approaches dis assembly static disassembly file disassembled examined disassembler executed course disassembly dynamic disassembly file executed input execution monitored external tool debugger identify instruc tions executed 
static disassembly advantage able process entire dynamic disassembly slice program instruc tions executed particular input 
advantage static disassembly takes time proportional size program time taken dynamic typically proportional number instructions applies file formats commonly encountered practice including unix elf dos exe files information entry point code section size implicit dos com files 
executed program runtime considerably orders magnitude making static disassembly con efficient dynamic disassembly 
focuses static disassembly 
generally techniques linear sweep recursive traversal 
remainder sketches 
linear sweep linear sweep algorithm begins disassembly atthe input program entry point simply sweeps entire text section disassembling struction encountered global proc addr addr doi decode instruction address addr addr length od proc main ep program entry point size text section size ep ep size ep method programs number link time optimization tools main weakness algorithm prone disassembly errors resulting data embedded instruction stream 
special circumstances invalid opcode encountered disassembler aware disassembly errors 
recursive traversal problem linear sweep algorithm take account control flow behavior program go data alignment bytes jump tables embedded instruction stream mistakenly executable code 
obvious fix take account control flow behavior pro gram disassembled order determine disassemble 
intuitively encounter instruction disassembly determine possible control flow successors instruc tion addresses execution continue proceed disassembly addresses conditional branch instruction consider branch target fall address global proc addr addr addr visited return decode instruction address addr mark addr visited branch function call possible target od return addr length od proc main ep program entry point size text section size ep ep size ep variations basic approach disassembly term recursive traversal number binary translation optimization systems :10.1.1.25.279
virtue algorithm flow behavior program processed able go avoid disassembly embedded text section 
main weakness key assumption precisely iden tify set control flow successors control transfer operation program may case indirect jumps 
imprecision determining set possible targets jump failure disassemble reachable code set targets underestimated data set targets overestimated 
switch case case case default 
code case code case code case jmp jump table code accessing jump table goto default evaluate source code implementation jump table example switch statement implementation jump table researchers proposed ad hoc basic algorithm outlined handle common cases indirect jumps 
example ofthe commonest uses indirect jumps involves jump tables construct compilers style switch statements 
illustrated 
jump table contiguous code addresses corresponding cases switch statement 
code access evaluates index expression checks see expression falls bounds adds scaled valueof index expression base address table obtain address ith entry table jumps indirectly location 
check index expression falls accomplished single unsigned comparison denoted instruction 
determine possible target addresses indirect jump jump table needs know base address table extent values fig ure 
done scanning back indirect jump instruction find instruction scaled index base address instruction base address unsigned compare index instruction table size canbe determined 
done disassembly continue target identified starting location code reachable indirect control transfers may basic 
handle problem systems uqbt binary translation system resort spec disassembly 
idea process portions text segment appear tobe code expectation targets indirect function calls speculative bit done speculative disassembly particular region memory abandoned encountered 
disassembly easy see order thwart disassembler confuse possible notion instruction boundaries pro gram lie 
section discusses ways achieved 
discuss expected disassembly errors repair relatively short dis tance 
followed discussion general technique inject junk bytes struction stream introduce disassembly errors 
discuss specific details way done confuse disassembly algorithms discussed previous section 
byte bytes bytes synchronizes instrs 
synchronizes instr 
synchronizes instrs memory esp add esp add esp eax mov esp eax sub eax actual disassembly bytes hex example self repairing disassembly self repairing disassembly way understand process static bly happens disassembly error occurs compare set instruction start addresses addresses statically disassembled instruction begins identified static actual instruction addresses encountered program executed 
ifthe static disassembly completely correct sets identical 
effect disassembly cause sets different 
goal techniques discussed difference 
turns instruction sets intel ia architecture pentium instruction structure disassembly process self repairing disassembly error occurs due data disassembler eventually ends re synchronizing actual instruction stream words instruction sets disassembly error results nonzero difference instruction start addresses identified disassembler actual instruction addresses difference typically goes zero disassembly continues time instruction identified disassembler coincide actual instruction addresses illustrated example shows typical byte sequence memory actual disassembly left obtain disassembler bytes right 
disassembly single byte disassembler produces erroneous instructions back synchrony disassembly second instruction actual disassembly sequence 
similar disassembler initially bytes second actual disassembly producing single incorrectly disassembled instruction 
initially bytes generates incorrectly disassembled instructions bythe third instruction actual disassembly 
obviously actual resynchronization behavior ona particular program depend particular distribution instructions 
practice disassembly errors usually resynchronize quite quickly just instruc tions point disassembly error occurred 
efforts confuse disassembly self repairing aspect disassembly account 
junk insertion introduce disassembly errors inserting junk bytes selected locations instruction stream disassembler expect code alternative approach involves partially fully overlapping instructions see section 
difficult see junk bytes satisfy properties 
confuse disassembler junk bytes partial instructions complete instructions second order preserve program semantics partial instructions inserted unreachable runtime 
define basic block candidate block junk bytes inserted 
order ensure junk inserted unreachable exe cution candidate basic block execution fall 
words basic candidate block unconditional control transfer return function 
candidate blocks identified straightforward way basic blocks program final memory layout determined mentioned section static disassembly process manages re synchronize disassembly error 
candidate block identified junk bytes insert confuse disassembler possible delay re synchronization long possible 
take particular byte instruction current im plementation considers byte bitwise instruction easy extend instructions determine far away re synchronization occur bytes candidate block determine re synchronization point simulate disassembly candidate block assuming disassembler bytes continuing byte sequence comprising machine level encodings instructions approach determine value kmax re synchronization distance maximized insert kmax bytes immediately linear sweep observed section linear sweep generally unable distinguish data embedded text section 
exploit weakness insert ing junk bytes selected locations instruction stream discussed section 
point note simulation disassembly candidate determine number junk bytes inserted important decisions candidate subsequently invalidated insertion subsequent candidates 
avoid effects consider candidate blocks backwards order junk 
approach described far find typically able attain confusion factor average program incorrectly disassembled confusion factors discussed detail sec tion 
reason higher candidates insertion junk bytes exe cution fall preceding block unconditional control transfer 
programs obtained typical optimizing compiler candidate blocks tend instructions apart average distance combined self repairing nature disassembly means disassembly goes wrong insertion junk candidate typically man ages re synchronize candidate encountered 
increase number candidates bya transformation called branch flipping 
idea invert sense conditional jumps form bcc addr cc represents condition eq ne bcc jmp cc complementary condition cc beq converted bne 
basic block candidate 
distance candidate blocks drops instructions average con fusion factor rises 
data reflect specint benchmark suite compiled gcc optimization level 
averages geometric means 
recursive traversal main strength recursive ability deal intelligently control flow disassemble data text segment turns weakness take advantage confuse bly process 
related aspects recursive traversal exploit 
encounters control transfer disassembly continues locations deemed transfer targets 
context disassemblers typically assume commonly encountered conditional branches function calls behave reasonably 
example assumed possible targets branch target fall instruc tion 
similarly function call assumed return instruction immediately call instruc tion 
second aspect recursive traversal iden set possible targets indirect control transfers difficult 
recursive traversal generally resort ad hoc techniques examining bounds checks associated jump tables disassembling speculatively handle commonly encountered situations involving indirect jumps discuss different ways characteristics exploited confuse disassembly 
branch functions assumption function returns instruc tion call instruction exploited term branch functions 
idea illus 
finite map locations program fa 

branch function fj function called locations causes transferred corresponding location branch function fj unconditional branches program jmp 
jmp 
jmp bn calls branch function call fj 
call fj 
call fj code branch function responsible de target location called branching way state encountered location bi original code uncon ditional branches 
note branch function behave normal functions return instruction call instruction branches program depends general called branch functions serve distinct purposes 
obscure flow control program sufficiently obscuring computation target address bi branch function difficult attacker reconstruct original map realizes 
second create ties misleading disassembler disassembler typically continue disassembly instruc tion call instruction introduce errors disassembly inserting junk bytes immediately call instruction ina manner similar discussed section 
branch functions implemented numberof ways 
trivial implementations involve looking table simple linear binary search usingthe return address passed branch function determine target address 
disadvantage relatively straightforward reverse engineer 
sophisticated ap proach perfect hashing discussed fredman schemes dif reverse engineer 
complexity adverse performance implications architectures intel pentium interfering prediction return stack buffer mechanisms 
bn bn jmp jmp jmp 
call call fa call fan bn original code code branch function branch functions branch function implementation way inwhich accessed offer interesting tradeoff execution speed hand reverse engineering 
example choose different branch function jump instructions depending execution frequencies frequently executed jump instructions directed lightweight branch function frequently executed ones complex branch func tion 
particular jump instruction program part branch map ping different branch functions chosen arbitrary manner runtime 
current implementation uses scheme callee passes argument branch function offset instruction immediately address passed branch function return address target bi 
branch func tion simply adds value argument return address return address original target code onthe intel ia architecture follows eax esp add esp eax pop eax ret instruction exchanges contents register word top stack effectively saving contents eax time loading condition code flags live call point saved caller just call restored atthe target 
displacement target passed branch func tion argument stack eax 
instruction effect adding return address 
restores previously saved value eax effect address computed function 
resulting code quite bit expensive execution cost single branch instruction original program execution profile infor mation apply transformation code hot frequently executed discussed section 
opaque predicates assumption conditional branch pos sible targets exploited unconditional branch conditional branch happens runtime go direction taken falls falls 
technique relies predicates evaluate true constant false regardless values inputs predicates known predicates 
researchers discussed techniques synthesizing opaque predicates ideas translate straightforward way context discuss issue unconditional branch replaced conditional branch uses opaque predicate wehave location branch target fall depending opaque false true appears legitimate continuation execution condi tional branch fact 
bytes point discussed earlier mislead disassembly 
jump table spoofing generalize notion opaque predicates opaque expressions expressions evaluate constant value itis difficult discern examination code evaluate expression 
mem denote memory location address opaque predicate evaluates false set arbitrary legal memory addresses construct opaque expression evaluates denotes bitwise operation 
sum expression mem tant purpose memory loads confuse attacker disassembler thevalue computed care addresses set legal readable addresses sothat memory generate exceptions 
opaque predicate result bitwise operation 
similarly opaque predicate true expression gamma evaluate 
obtain opaque expres sion evaluates value simply add number result evaluates 
values opaque expressions jump table constructs mislead disassembler 
refer technique jump table spoof ing 
recall discussed section recursive traversal disassemblers attempt jump table identify size determine set possible targets jump table 
basic idea take unconditional jump address con vert indirect jump jump table address appears kth table entry 
table indexed value opaque expression evaluates bounds check table uses table size leading believe jump table contains entries 
entries contains real code ad dress put junk addresses text segment addresses correspond actual instructions entries confusing disassembler 
implementation status implemented ideas system developed intel ia executables running linux 
system reads cally linked executables input binary constructs control flow graph eliminating process unreachable code unused library routines linked 
controlflow graph processed ways 
user specifies profiling carried mentation code inserted generate edge profile resulting binary executed 
user requests obfuscating transformations carried system reads edge profile infor mation available generates memory layout code profile data carries branch flip ping increase number candidate blocks section applies various obfuscating transformations writes resulting executable 
transformations currently implemented junk insertion section transformation unconditional jumps branch function calls section 
expect additional transformations jump table spoofing section implemented near 
experimental evaluation evaluated efficacy techniques benchmark suite 
experiments run unloaded ghz pentium gb main memory running redhat requirement statically linked executables result fact relies presence relocation distinguish addresses data 
unix linker ld refuses retain relocation information executables 
linux 
programs compiled gcc ver sion optimization level 
programs profiled spec training profiles identify hot spots transformations 
final performance ofthe transformed programs evaluated spec inputs 
execution time re ported computed average runs 
experimented different attack evaluate techniques 
disassemblers wrote sweep disassembler recursive disassembler uses bounds checks handle indirect jump tables incorporates speculative disassembly see section 
order avoid un optimistic results provide recursive disassembler additional information size jump table program start address function 
re sults obtained disassembler serve lower bound estimate extent 
third disassembler ida pro commercially available disassembly tool gener ally regarded best disassemblers available efficacy obfuscation measured computing confusion factors basic blocks functions 
intuitively confusion factor measures fraction instructions basic blocks functions obfuscated code incorrectly identified 
instructions compare actual instruction sequence produced tool applying conventional disassembler output tool minimal edit essence diff count number instructions incorrectly disassembled 
functions basic blocks similar conceptual difference ba sic block function counted incorrectly disassembled instructions incor rectly disassembled 
reason computing confusion factors basic blocks functions instructions determine errors disassembling instructions clustered small re code distributed significant portions program 
execution time secs original obfuscated slowdown compress gcc go ijpeg li ksim perl vortex geo 
mean effect obfuscation execution speed mentioned section transform branch function calls jump occur hot basic block 
questions address hot basic blocks identified effect different choices hot block extent obfuscation achieved performance 
identify hot frequently executed basic blocks start user defined fraction specifies fraction tal number instructions executed runtime accounted hot basic blocks 
example means hot blocks account atleast instructions executed program 
formally weight basic block bethe number instructions block multiplied execution frequency block total number instructions executed runtime 
tot instr ct total number instructions ex program execution profile 
value consider basic program decreasing order execution frequency determine largest execution freq weight delta tot instr ct basic block execution frequency considered hot 
effect varying hot code threshold obfuscation speed shown compress gcc go ijpeg li ksim perl vortex fraction candidates converted thresholds 
jumps converted branch function calls compress gcc go ijpeg li ksim perl vortex slowdown factor thresholds slowdown execution speed effect hot code threshold branch function conversion execution speed 
shows fraction converted branch function calls different thresholds closely tracks sion factors achieved 
shows concomitant degradation performance 
seen programs small welldefined hot spot result varying modest value high dramatically affect number candidates con 
benchmark affected gcc candidates 
average converted 
il varying hot code threshold significant effect execution speed 
forexample programs slow theta average ksim bench mark experiencing largest slowdown factor theta increased drops quickly theta theta 
summary choosing threshold thatis close results candidate blocks program converted branch func tion calls excessive performance penalty 
purposes give measure ments shows efficacy obfuscation transformations disassembly methods dis cussed section 
confusion factors achieved linear sweep disassembly quite high aver age instructions basic blocks functions incorrectly disassembled recursive traversal confusion factors attained somewhat lower case understand deal control flow somewhat better linear sweep 
average instructions program incur disassembly errors 
result basic blocks close functions average incorrectly disassembled confusion factor linear sweep recursive basic blocks functions instructions basic blocks functions compress gcc go ijpeg li ksim perl vortex geo 
mean efficacy obfuscation confusion factors disassembly method 
achieved penalty execution speed see currently working techniques reduce penalty significant amounts 
reason confusion factors basic lower instructions functions disassembly methods basic blocks quite widely size ranging single instruction cases instructions oth ers 
disassembly error occurs high likelihood nearby instructions correctly disassembled 
group incorrectly disassembled instructions falls ba sic block count just single incorrectly disassembled block 
hand consists just single instruction instruction correctly disassembled counts cor rectly disassembled block 
words view distribution disassembly errors gran basic blocks clustering effects incorrect disassembly result smaller confusion factor contrast viewed level functions clustering effects significant func tions rarely get small size basic blocks resulting confusion factors higher 
data reported quite con effort avoid unduly optimistic results supply disassemblers additional formation size extent jump tables program helps disassembly 
toevaluate efficacy techniques realistic situation commercial disassembly tool ida pro version widely considered advanced disassembler available results experiment reported 
seen tool fails pro gram close instructions functions program disassembled correctly 
part reason high degree failure ida pro believes guaranteed instruction addresses 
effects large portions ofthe code reached branch function addresses simply disassembled user hex data second location immediately branch function call address control returns causes junk bytes erroneously bled 
shows techniques effective state art disassembly tools 
shows impact code size terms number instructions increases example due number bytes occupied text section 
includes effects ofthe new instructions inserted junk bytes added program 
seen increase total number instructions increase size text section executables 
techniques described apply wide vari architectures 
insertion partial instruc 
instructions text section size bytes original obfuscated change original obfuscated change compress gcc go ijpeg li ksim perl vortex geo 
mean effect obfuscation code size program confusion factor instructions basic blocks functions compress gcc go ijpeg li ksim perl vortex geo 
mean efficacy obfuscation ida pro tions confuse disassembly discussed sec tion applicable variable length instruction sets widely intel pen motorola strongarm thumb bit instruction ing mixed mode architectures mips mips 
branch functions jump architecture 
related aware addresses making executable programs harder disassemble cohen proposes overlapping ad instructions fool disassembler 
aware actual implementations proposal 
implemented idea num ber variations basic scheme results disappointing resulting confusion typically 
reason order overlap adjacent instructions satisfy conditions execution fall ii trailing bytes identical bytes 
tend relatively candidates satisfy ing criteria largest number overlaps achieved gcc benchmark overlaps instructions contrast approach branch flipping program candidates branch flipping 
variations judicious insertion immediately instruction ops dead code second condition help matters significantly 
scarcity candidates self repairing property disassembly errors discussed section poor confusion factor numbers approach 
considerable body code cation focuses making harder attacker decompile program extract high level seman tic information 
typically authors rely static analysis problems involving complex boolean expressions pointers indirect control flow harder construct precise controlflow graph program 
cited focuses specifically executable programs 
orthogonal proposals complementary aim program harder disassemble correctly sow uncertainty attacker portions disassembled program correctly disassembled parts disassembly errors 
program obfuscated higher level ob techniques techniques add additional layer protection harder deci actual structure program 
greater security may obtained maintain ing software encrypted form decrypting needed execution suggested specialized hardware discussed lie 
extremely effective ap proaches disadvantages high performance overhead case runtime decryption ab specialized hardware support loss flexibility software longer stock hardware 
great deal software distributed form code 
code potentially vulnerable reverse engineering form bly followed decompilation 
allow attacker discover vulnerabilities software modify unauthorized ways steal intellectual property software piracy 
evaluates techniques executable programs harder disassemble 
techniques seen effective applied widely specint benchmark suite result disassembly er program best commercially available disassembly tool fails correctly ble instructions functions obfuscated binaries 

tamper resistant software 
information hiding international workshop proceedings volume lecture notes computer science pages 
springer verlag 
bernstein 
producing code statement 
software practice experience october 
cho lee park 
software tamper resistance extended control flow obfuscation 
proc 
systems cybernetics informatics 
international institute ics systematics 
cifuentes gough 
decompilation programs 
software practice experience july 
cifuentes van emmerik 
uqbt adaptable binary translation low cost 
ieee computer march 
cifuentes van emmerik 
ery jump table case statements binary code 
science computer programming july 
cohen 
operating system tion program evolution 
net books ip evolve html 
cohn goodwin lowney optimizing alpha executables windows nt spike 
digital technical journal 
collberg thomborson 
software wa models dynamic embeddings 
proc 
th 
acm symposium programming languages popl pages january 
collberg thomborson 
watermark ing tamper proofing obfuscation tools software 
technical report tr department computer science university arizona february 
collberg thomborson low breaking abstractions data structures 
proc 
ieee computer languages pages 
collberg thomborson low 
man cheap resilient stealthy opaque constructs 
proc 
th 
acm symposium programming languages popl pages january 
sa nv li ege belgium 
ida pro www com 
fredman koml os szemer edi storing sparse table worst case ac cess time 
journal acm july 
levine 
linkers loaders 
publishers san francisco ca 
lie thekkath mitchell lincoln boneh mitchell horowitz 
architectural support copy tamper 
proc 
th 
international conference architectural support programming lan guages operating systems asplos ix pages november 
muth debray 
alto link time optimizer alpha 
software practice experience january 

gnu manuals online 
free software foundation 
www gnu org manual html chapter html 
miyaji software obfuscation theoretical basis implementation 
ieee trans 
fundamentals january 
pettis hansen 
profile guided 
proc 
acm sigplan conference programming language design imple mentation pages june 
schwarz debray andrews link time optimizer intel ia architecture 
proc 
workshop 
schwarz debray andrews disassembly executable code revisited 
proc 
ieee working conference re verse engineering wcre pages october 
sites chernoff kirk marks robinson 
binary translation 
communications acm february 
srivastava wall 
practical intermodule code optimization link time 
journal programming languages march 

extracting safe precise controlflow binaries 
proc 
th conference real time computing systems applications december 
wang davidson hill knight protection software survivability mechanisms 
proc 
international conference de systems networks july 
wang hill knight davidson software tamper resistance obstructing static analysis programs 
technical report cs 

general method obfuscation 
phd thesis university technology institute 

