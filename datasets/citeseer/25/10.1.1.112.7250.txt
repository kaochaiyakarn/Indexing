software evolution benchmark serge demeyer universiteit antwerpen serge demeyer uia ua ac case studies extremely popular rapidly evolving research disciplines software engineering allow quick fair assessment new techniques 
unfortunately proper experimental set rarely case case studies single small chosen favour technique study 
lack scientific rigor prevents fair evaluation serious consequences credibility field 
propose representative set cases benchmark comparing various techniques dealing software evolution 
hope proposal launch consensus building process eventually lead scientifically sound validation method researchers investigating re engineering techniques 
categories subject descriptors software software engineering software engineering distribution maintenance enhancement 
general terms measurement experimentation standardization 
keywords software evolution empirical survey case studies benchmark 

software engineering constant state flux 
top rapid escalation hardware keep enlarging repertoire techniques build maintain software 
consequence developers want improve software production process choose wide range techniques accompanying tools 
adopting new technique tool involves cost launching solution rational decision makers demand evidence claimed benefits 
empirical surveys traditional scientific means provide evidence 
experiment continued long time reliable claims cost benefit trade certain technique 
unfortunately experiments take lot time effort applied techniques proven mature 
case studies represent lightweight opportunity providing scientific evidence 
case study tom mens postdoctoral fellow fund scientific research flanders belgium version friday august camera ready copy accepted www ac jp tom mens vrije universiteit brussel pleinlaan brussel tom mens vub ac michel departamento de inform tica universidade nova de lisboa mw di fct unl pt illustrate applicability concrete project provides opportunity learn new techniques importantly performed reasonable amount time 
case studies ideally suited investigating novel techniques prove value 
serve basis rational decision making case study satisfy criteria representative results obtained study generalised projects defined category replicable artefacts necessary perform study accessible results confirmed falsified 
appearance world wide web trend open source projects wide range realistic cases satisfying criteria available 
unpleasant side effect interpretation case study results hard difficult compare wide variety results 
way circumvent problem agree scientific community representative set cases may serve benchmark problems investigated 
building consensus benchmark process requires iterations revisions scientific communities 
step direction hope launch consensus building process eventually lead scientifically sound validation method 
proposes benchmark comparing techniques deal software evolution 
precisely specify design space evolving software systems listing characteristic attributes systems section 
cases representatives part design space sections 
complementary cases propose list attributes classify merits techniques tools section 
conclude explicit position statement phrased number questions regarding potential value benchmark section 

context january started international research network ultimate goal develop consistent set formal techniques accompanying tools support software developers typical evolution problems large complex software systems goal chosen numerous studies shown half global budget software development spent maintenance 
need better methods techniques tools 
see prog vub ac network html network consists wide range international research groups investigating techniques related evolving software 
give idea diversity group list expertise areas various partners declarative reasoning logic graph rewriting systems software metrics software visualisation techniques analysis design methods migration component web systems meta modelling approaches reverse engineering code generation 
facing diversity group concluded definite need benchmark allow compare various techniques 
groups particularly concerned object oriented paradigm agreed common theme driving benchmark 

evolution characteristics order specify design space evolving software systems define list characteristic attributes 
list assess cases may serve representatives complete design space 
life cycle characteristics determine case comprises artefacts correspond phases software life cycle 
analysis requirements specification domain models user interviews mock ups crc cards cases design architecture detailed design formal specifications implementation source code testing test plans test code test results maintenance bug reports feature requests version control configuration management evolution characteristics assess evolution process case various iterations increments identify development process 
number iterations total time evolution process scale size iteration lines code number classes number cases type iteration refactoring extension correction adaptation granularity increments terms time days weeks months size lines code pages documentation components methods classes modules staff persons involved personnel turnover iterations level experience developers domain characteristics qualify domains case 
application domain telecommunication commerce desktop systems problem domain graphical user interfaces distributed systems web systems embedded systems real time systems solution domain library framework components program tool characteristics evaluate kind tools necessary replicate case 
tool characteristics necessary assess case may serve representative 
implementation language java smalltalk object pascal delphi ada eiffel analysis design language notations uml omt vdm statecharts 
operating system unix linux windows macos integrated development case environments special libraries corba 
extra utilities merge tools version control tools 
candidate cases defined characteristic attributes evolving software systems list possible cases may serve representative certain category evolving software systems 
material source code documentation concerning listed cases available prog vub ac cases toy examples toy examples limited scope provide ideal means initial assessment technique 
course means assess scalability technique categories serve purpose 
lan simulation 
software composition group university berne programming technology lab vrije universiteit brussel small simulation lan network illustrate teach object oriented design 
simulation starts simplistic model gets refactored requirements added 
lan simulation cases may serve representative small scale software systems 
ease comparison insist people stick lan simulation 
encourage research small list options 
tictactoe 
course programmierung prof oscar nierstrasz guides students trough series steps incrementally develop game tictactoe incrementally extended framework board games incl 
distributed playing gui 
increments written java 
scaled version tictactoe game available oberon 
conduits framework 
introductory course object oriented programming principles object oriented languages prof theo hondt developed conduits framework framework simulate flows fluids pipes 
available java smalltalk 
industrial systems general hard find industrial cases typically involve non disclosure agreements go criterion replicability experiments 
industrial cases necessary obtain necessary credibility 
visualworks smalltalk 
smalltalk long tradition shipping source code products 
quite impressive gui builder comes visualworks programming environment freely available academic purposes 
swing 
java platform independent gui builder named swing 
subsequent releases swing framework mark smooth evolution process 
public domain software alternative industrial cases consider software created public domain 
hotdraw 
hotdraw dimensional graphics framework structured drawing editors case tools pert chart editors 
started smalltalk framework redone java name 

separate similar project having lots design issues common people university zurich union bank switzerland created framework 
written served known design patterns 
open source projects current wave open source software development provides evolving software projects 
mozilla 
classic course open source web browser designed standards compliance performance portability partly serving basis netscape browser 
just toy examples insist people stick single representative 
encourage larger scale studies list options 
squeak 
open source variant smalltalk table overview selected cases characteristics life cycle smalltalk virtual machine written entirely smalltalk superb graphic features 
apache 
umbrella various open source projects mainly related web servers including variety xml projects 
linux 
linux operating system developed open source 

selected cases table sets selected cases specified characteristics 
way assess part design space covered cases part left open covered cases 
table infer candidate cases fall bit short 
early life cycle phases sparsely covered little analysis design documentation available 
implementations limited java smalltalk systems ada eiffel 
important application domains embedded distributed systems covered 
lack quantitative data concerning various cases number iterations staff 
replicability cases questionable release publicly accessible 
feasible collect missing data committing efforts want see better suite cases identified 

techniques tools complement characteristics evolving software systems section lead selection cases sections section proposes list attributes may classify merits applicability toy example industrial system public domain open source project lan simulation visualworks swing hotdraw mozilla analysis crc cards design uml partly implementation smalltalk java smalltalk java smalltalk java java testing maintenance partly partly evolution scale tiny classes medium small large type refactoring extension types types types granularity fine refactoring coarse coarse fine large staff domain application domain networks tool tool network problem domain simulation gui graphics web systems solution domain program black box framework white box framework family programs evolution support techniques tools 
categories existing classification 
time evolution support predictive evolution 
category covers techniques tools allow maintainers decisions concerning parts software improved 
evolution critical identify parts software need evolved due lack quality quality metrics evolution prone assess parts evolve visualising number changes evolution sensitive distinguish parts software suffer evolution impact analysis curative evolution 
category concerns techniques tools support actual changes software system 
passive infrastructure allows keep track changes version control systems active techniques tools allow apply changes refactoring tools merge tools retrospective evolution 
category includes techniques tools allow analyse software system evolved past 
state techniques tools compare intermediate stages unix facility diff change techniques tools analyse changes inspecting change log degree automation semi automatic tools require human assistance 
interpret results software visualisation provide additional information derived automatically complex refactorings 
fully automated tools require human intervention parsers 

open questions propose benchmark evaluating techniques dealing evolving software 
benchmark consists number cases representing different kinds evolving software artefacts differences captured set characteristics 
complement cases proposes list attributes may classify merits evolution support techniques tools 
course definition benchmark step sound scientific research area software evolution 
invite workshop participants help answering questions sense define benchmark purpose research groups apply favourite technique cases 
compare various techniques see may complement overlap 
feel benchmark ideal vehicle exchanging information experience concerning evolving software 
complete specification benchmark requires lot 
ask workshop participants consider validate benchmark 
characteristics complete minimal list characteristics designed instrument selecting set representative cases 
care taken instrument accurate 
particular address question list characteristics complete risk selected cases representative 
equally important question list characteristics minimal risk select cases cover possibilities 
initial experience case selection suggests list minimal reasonably complete 
explicitly ask workshop participants propose improvements better point attempts concerning software evolution benchmarks 
cases representative cases meant represent design space evolving software systems 
current cases fall bit short weak early life cycle phases little analysis design documentation available include objectoriented implementations limited java smalltalk systems ada eiffel cover application domains embedded systems distributed systems 
explicitly ask workshop participants point industrial cases provide better coverage characteristics 
cases replicable cases source code documentation available web 
latest release directly accessible earlier releases contact original developers 
intend collect material including better quantitative data size granularity changes acquire necessary permissions experimentation purposes 
want ask workshop participants kind information need replicate case study 

research performed inside international research network foundations software evolution financed fund scientific research flanders belgium 

fenton pfleeger glass science substance challenge software engineers 
ieee software july 
fenton pfleeger software metrics practical approach international thomson computer press 
kemerer slaughter empirical approach studying software evolution 
ieee transactions software engineering july august 
mens demeyer evolution metrics proceedings 
