mathsat solver progress report extended marco alessandro cimatti gabriele roberto sebastiani itc irst sommarive povo trento italy cimatti itc universit di trento sommarive povo trento italy kirk science unitn roberto sebastiani dit unitn may problems practical relevance conveniently expressed boolean combinations propositional variables mathematical constraints 
development decision procedures able check satisfiability formulas devoted increasing interest 
mathsat family extension dpll propositional satisfiability procedure assignment enumerator 
mathsat pioneers lazy layered approach propositional reasoning tightly integrated solvers increasing expressive power reason equality linear arithmetic way expensive layers called frequently 
show advances development mathsat 
discuss implications related minisat new generation propositional sat solver role incremental mathematical reasoner role static learning extension integer variables 
show new version mathsat significantly efficient previous 
problems practical relevance equivalence checking model checking rtl designs verification timed hybrid systems temporal planning easily expressible propositional logic 
conveniently expressed extensions propositional logics boolean combinations propositional variables mathematical constraints 
instance timing constraints typical timed automata expressed inequalities differences real variables 
development decision procedures able check satisfiability extended formulas devoted increasing interest parallel related lines activity 
eager approach see instance ssb encoding satisfiability extended theory propositional satisfiability problem new axioms encode required properties boolean logic 
approach called eager theory lifted boolean level search started 
crucial problem eager approach containment propositional theory resulting encoding encoding produced solving carried efficient shelf propositional solver 
lazy approach acg bds hand theory reasoning invoked demand decide consistency mathematical theories resulting assignment truth values 
may advantage cases eager approach fails generate encodings reasonable size solvers conceptually complex purely propositional engines crucial optimize interplay boolean component mathematical reasoners 
mathsat abc family lazy solvers integration theory dpll propositional satisfiability procedure assignment enumerator 
mathsat pioneers layered approach propositional reasoning tightly integrated solvers increasing expressive power reason equality linear arithmetic way expensive layers called frequently 
furthermore compared approaches mathsat leverages counterexamples inconsistencies detected mathematical reasoning 
mathsat applied bounded model checking timed acks hybrid systems verification rtl hardware designs 
advances development mathsat 
particular discuss implications related minisat es new generation propositional sat solver respect previous pre chaff solver sim static learning role incremental mathematical reasoner 
show new version mathsat significantly efficient previous 
organized follows 
section give background mathsat approach solver 
section describe advances discussed 
section preliminary experimental evaluation accurate analysis available final version 
section draw outline ongoing directions 
mathsat version starting point call math formula boolean combination boolean variables linear constraints numerical variables 
call interpretation map assigns real boolean values real boolean variables respectively preserves constant values arithmetical boolean operators 
call mathsat problem checking satisfiability math formula 
call truth assignment math formula truth value assignment subset atoms 
say propositionally satisfies written iff evaluate true 
represent truth assignments sets literals intended meaning positive negative literals represent atoms assigned true false respectively 
satisfies iff satisfies elements 
solve mathsat problem implemented mathsat abc solver variant dpll sat procedure dll 
basic schema procedure reported 
mathsat takes input math formula expressed cnf empty interpretation returns truth value asserting satisfiable respectively interpretation satisfying null 
mathsat invokes math dpll passing arguments empty assignment interpretation boolean mathsat formula interpretation return boolean formula assignment interpretation base return null backtrack return false literal occurs unit clause unit propagation return assign unsatisfiable intermediate assignment check return false choose literal split return assign assign pseudo code basic version mathsat procedure 
tries find truth assignment propositionally satisfying satisfiable mathematical viewpoint 
basically variant dpll modified enumerator truth assignments satisfiability recursively checked 
function assign assigns propositionally simplifies result 
key difference standard dpll base step 
standard dpll needs find satisfying assignment simply returns rue 
needs check satisfiability invokes 
returns rue non null interpretation satisfying returns alse backtracks 
takes input assignment returns interpretation satisfying null 
implementation performs substitutions allowed equalities 
inequalities variables left variant bellman ford minimal path algorithm invoked linear programming procedure 
notice mathsat works polynomial space 
abc improvements procedure described preprocessing sorting intermediate assignment checking triggering math driven backjumping learning implemented 
mathsat version advances denote mathsat version mathsat abc acks mathsat current version 
new sat solver major bottleneck mathsat underlying sat solver sim implement useful state art techniques 
overcome problem mathsat built top minisat es 
minisat chaff sat solver featuring advanced techniques watched literals value propagation splitting heuristic efficient conflict driven backtracking learning restarts 
minisat com efficiency simplicity engineered clear documented api easy modify customize needs 
static learning general problem mathsat approach sat solver may possibly enumerate large number assignments intrinsically inconsistent underlying theory 
specific kinds satisfiability problems disjunctive temporal constraints problems dtp acg possible easily detect priori pairs theory literals intrinsically mutually inconsistent 
binary mutual exclusion clauses added priori formula allow solver avoid generating assignment including inconsistent pairs 
technique called allows dramatically reducing computational effort solving dtp tests acg 
improve competitiveness kinds problems implemented tested mathsat 
particular form static learning preprocessing phase constraints theory atoms formula learned added form clauses input formula guide sat solver avoid generating theory inconsistent assignments 
instance embedded techniques encoder mathsat bounded model checking timed hybrid automata acks 
currently implementing forms static learning expressive theories versions mathsat 
notice extra clauses added ssb clauses added static learning refer atoms occur original formula new atom added 
means boolean search space enlarged 
furthermore notice added clauses needed completeness efficiency order prune search space 
math incrementality major bottleneck mathsat fact mathematical solver repeatedly called check consistency intermediate assignments increasingly large long satisfiable 
mathematical solver memoryless subroutine function current assignment checked call restarts computation scratch repeat partial computations 
mathsat implemented incremental version mathematical solver stack interface behaviour stack boolean search 
solver remembers computation status call call new math literals added assignment requested normalize new constraints restarting saved status 
core implementation cassowary linear solver lp tool incremental version simplex algorithm bb 
incremental cassowary amenable mathematical learning inconsistent set equalities returns clear indication subset equalities caused incon median cpu time total time mathsat mathsat mathsat clause var median cpu time total time mathsat mathsat mathsat clause var vars vars comparison mathsat mathsat mathsat random dtp tests 
vars clauses vars 
sample formulas point 
median cpu times secs 
background satisfiability rate 
save cpu time test stopped samples exceed timeout seconds 

allows construct lift boolean level form clause conflict set results efficient implementation mathematical backjumping learning general purpose linear equalities 
currently investigating new techniques combining math incrementality layered strategy described abc 
experimental results test benchmarks application example consider problem solving consistency disjunctive temporal problems dtp proposed sk acg abc 
sk encode dtp particular mathsat formulas form ij ij cij cij real variables integer constants respectively dtp produced randomly generating distinct clauses length form atom obtained picking ij ij uniform probability cij uniform probability 
atoms containing variable vi vi clauses containing identical disjuncts discharged 
empirical tests performed benchmarks 
second benchmark formulas taken abc acks plus taken equivalence checking sequential circuit designs bounded variables 
empirical tests performed benchmarks 
notice formulas restricted difference constraints may contain full linear expressions 
role sat solver emphasize role played sat solver tests comparing mathsat version mathsat 
math incrementality implemented substantially mathsat differs mathsat fact uses minisat sim 
minisat mathsat sim mathsat minisat mathsat sim mathsat comparison mathsat mathsat set formulas 
left cpu time 
right size boolean search space 
consider upper plots random dtp tests 
notice mathsat outperforms mathsat sets 
particular math sat mathsat able complete benchmark reaching median value seconds 
second consider scattered plots formulas 
points diagonal line represent better results mathsat points diagonal line represent better results mathsat looking left plot cpu times notice mathsat win typically outperforms mathsat harder benchmarks performance gap order magnitude instances 
analyze particular size boolean search space number elementary assignments truth values atoms notice analogous behaviour gaps reduced directions 
role static learning effectiveness dtp consider lower plots tests 
notice mathsat outperforms mathsat orders magnitude performance gap increases size formulas number variables 
role incrementality order highlight effectiveness incrementality mathematical solver consider scattered plots run different versions mathsat subset formulas consider formulas involving full linear mathematical atoms linear solvers 
fact incremental version mathsat cassowary lp solver layered compared non layered left layered right version mathsat 
notice non layered incremental version outperforms non layered left layered right non incremental ones 
confirmed extensive experiments may suggest needed may sacrifice layering issue 
incremental cassowary mathsat non layered mathsat incremental cassowary mathsat layered mathsat left incremental cassowary vs non layered mathsat 
right incremental cassowary vs layered mathsat 
extended reports advances development mathsat decision procedure respect version abc 
discussed integration simple efficient sat solver results significant improvement 
shown interesting tradeoff carrying mathematical reasoning boolean level mathematical level idea static learning allows efficiently lift boolean level mathematical information discovered learned costly manner run time 
shown idea incremental mathematical reasoning mathematical solver cassowary bb able extend theory currently reasoning clear advantage compared memoryless mathematical reasoner 
working directions 
eliminate limitation mathsat works numerical variables domain reals applications requires handling integer variables 
whilst separation logic handling integer values straightforward see ssb general linear case complicated deserves care 
naive way extend mathsat simply substitute linear solver mathsat integer linear solver omega pug version ber 
unfortunately known lp integers harder problem reals see bw solution cause unacceptable overhead 
identified layered solution invoke integer linear solver strictly necessary 
start observation practical problems set constraints having solution idea run integer linear solver ber assignment complete assignment propositionally satisfies formula real linear solver verified consistent don run integer solver intermediate assignment checking calls intermediate call real linear solver returns satisfiable trust go 
clearly lose benefit early pruning intermediate assignments satisfiable hand avoid big overhead invoking integer linear solver intermediate check 
comparing mathsat solvers results reported final version extended 
directions include design new version mathsat able deal uninterpreted functions non linear arithmetic 
abc bertoli cimatti sebastiani 
sat approach solving formulas boolean linear mathematical propositions 
proc 
cade 
cimatti sebastiani 
verifying industrial hybrid systems mathsat 
proc 
st cade workshop pragmatics decision procedures automated reasoning 
acg armando giunchiglia 
sat procedures temporal reasoning 
proc 
european conference planning cp 
acks cimatti sebastiani 
sat bounded model checking timed systems 
proc 
forte volume lncs 
springer november 
bb borning 
cassowary linear arithmetic constraint solving 
acm transactions computer human interaction december 
bds barrett dill stump 
checking satisfiability order formulas incremental translation sat 
th international conference computer aided verification 
ber michel 
solver lp solve linear programming mixed integer problems 

available zib de pub packages 
bw 
solving numerical constraints 
robinson voronkov editors handbook automated reasoning volume chapter pages 
elsevier science 
dll davis loveland 
machine program theorem proving 
journal acm 
leonardo de moura harald maria 
lazy theorem proving bounded model checking infinite domains 
th international conference automated deduction 
es een 
extensible sat solver 
proc 
sat volume lncs 
springer 
cormac flanagan rajeev joshi ou james saxe 
theorem proving lazy proof explication 
th international conference computer aided verification cav lecture notes computer science 
springer verlag 
giunchiglia 
evaluating search heuristics optimization techniques propositional satisfiability 
proc 

moskewicz madigan zhang malik 
chaff engineering efficient sat solver 
design automation conference 
pug pugh 
omega test fast practical integer programming algorithm dependence analysis 
communications acm 
sk koubarakis 
backtracking algorithms disjunctions temporal constraints 
proc 
aaai pages 
lahiri bryant 
hybrid sat decision procedure separation logic uninterpreted functions 
proc 
th design automation conference dac 
ssb bryant 
deciding separation formulas sat 
proc 
computer aided verification cav lncs 
springer 

