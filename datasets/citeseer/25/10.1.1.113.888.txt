simpoint faster flexible program analysis greg erez jeremy lau brad calder department computer science engineering university california san diego department computer science university describes new features available sim point release 
release provides techniques drastically reducing run time simpoint faster searching find best clustering efficiently clustering large numbers intervals 
simpoint provides option output simulation points represent majority execution reduce simulation time increase error 
release provides support correctly clustering variable length intervals consideration weight interval clustering 
describes simpoint new features points common pitfalls 
modern computer architecture research requires understanding cycle level behavior processor execution application 
gain understanding researchers typically employ detailed simulators model cycle 
unfortunately level detail comes cost speed simulating full execution industry standard benchmark take weeks months complete fastest simulators 
matters worse architecture researchers simulate benchmark variety architecture configurations designs find set features provides best trade performance complexity area power 
example program binary exact input may run hundreds thousands times examine effectiveness architecture changes cache size 
researchers need techniques reduce number machine months required estimate impact architectural modification introducing unacceptable amount error excessive simulator complexity 
run time programs exhibit repetitive behaviors change time 
behavior patterns provide opportunity reduce simulation time 
identifying repetitive behaviors single sample repeating behavior perform fast accurate sampling 
representative samples represent complete execution program 
underlying philosophy simpoint program behavior patterns guide sample selection :10.1.1.2.7638:10.1.1.18.7813
simpoint intelligently chooses small set samples called simulation points simulated weighed appropriately provide accurate picture complete execution program 
sim carefully chosen simulation points save hours days simulation time low error rates 
goal run simpoint binary input combination simulation points potentially thousands simulations performing design space exploration 
describes new simpoint release 
section overview simpoint approach 
section describes new simpoint features describes tune parameters 
section provides summary simpoint results discusses suggested configurations 
section describes detail command line options simpoint 
section discusses common pitfalls watch simpoint section summarizes 
major new features simpoint release include efficient searching find best clustering 
trying value nth value running means algorithm provide binary search method choosing reduces execution time simpoint factor 
faster simpoint analysis processing intervals 
speed execution simpoint large inputs thousands millions intervals sub sample set intervals clustered 
clustering intervals selected clustering assigned phases nearest cluster 
support variable length intervals 
prior versions simpoint assumed fixed length intervals interval represents amount dynamic execution 
example past interval represented dynamic instructions 
simpoint provides support clustering variable length intervals interval represent different amounts dynamic execution 
variable length intervals weight interval considered clustering 
reduce number simulation points representing majority executed instructions 
provide option output simulation points clusters account majority execution 
reduces simulation time increase error 
background ground discussion common vocabulary list definitions describe analysis performed simpoint 
interval section continuous execution slice time program 
intervals assumed nonoverlapping perform analysis break program execution contiguous non overlapping intervals 
prior versions simpoint required intervals size measured number instructions committed interval interval sizes instructions 
simpoint supports fixed length intervals provides support variable length intervals allows intervals account different amount executed instructions described 
phase set intervals program execution similar behavior 
phase consist intervals temporally contiguous phase re appear times execution 
similarity similarity defines close behavior intervals measured set metrics 
formed phases intervals similar behavior various architecture metrics ipc cache misses branch misprediction 
frequency vector interval represented frequency vector represents program execution interval 
commonly frequency vector basic block vector represents times basic block executed interval :10.1.1.18.7813
frequency vectors track code structures branch edges loops procedures registers opcodes long tracking usage structure provides signature program behavior :10.1.1.2.7638
similarity metric similarity intervals calculated distance corresponding frequency vectors intervals 
simpoint determines similarity calculating euclidean distance vectors 
phase classification phase classification groups intervals phases similar behavior similarity metric 
phase classifications specific program binary running particular input binary input pair 
similarity metric distance code signatures simpoint represents intervals frequency vectors 
frequency vector dimensional array element array tracks usage way represent program behavior 
focus code structures frequency vector consist structure data working sets data stride access patterns may provide signature program behavior :10.1.1.2.7638
frequency vector collected interval 
interval start frequency vector containing zeros program executes update current frequency vector structures 
frequency vector list static basic blocks called basic block vector list static loops procedures number registers isa opcodes described :10.1.1.2.7638:10.1.1.18.7813
tracking basic block usage frequency vectors count number times basic block program entered current interval record count frequency vector weighted number instructions basic block 
element frequency vector count times corresponding basic block entered corresponding interval execution multiplied number instructions basic block 
basic block vectors results 
intuition behavior program time directly related code executed interval :10.1.1.18.7813
basic block vectors signatures interval execution vector tells portions code executed frequently portions code executed 
comparing intervals evaluate similarity intervals 
intervals similar intervals spend amount time roughly code expect behavior intervals similar 
prior showed loop procedure vectors entry represents number times loop procedure executed performs comparably basic block vectors fewer dimensions :10.1.1.2.7638
compare frequency vectors simpoint uses euclidean distance shown effective line phase analysis 
euclidean distance calculated viewing vector point dimensional space calculating straight line distance points 
means phase classification clustering divides set points groups clusters points cluster similar metric usually distance points different clusters different 
means algorithm efficient known clustering algorithm quickly accurately split program behavior phases 
means refers number clusters phases algorithm search 
steps summarize phase clustering algorithm high level 
refer interested reader detailed description step 

profile program dividing program execution contiguous intervals record frequency vector interval 
frequency vector normalized sum elements equals 
reduce dimensionality frequency vector data smaller number dimensions random linear projection 

run means clustering algorithm data set values 
cache way set associative byte blocks cycle latency cache way set associative byte blocks cycle latency cache meg way set associative byte blocks cycle latency main memory cycle latency branch pred hybrid bit gshare bit predictors bimodal predictor issue order issue operations cycle entry re order buffer mem load store queue loads may execute prior store addresses known registers integer floating point func units integer alu load store units fp adders integer mult div fp mult div virtual mem byte pages cycle fixed tlb latency earlier issued instructions complete table baseline simulation model 

choose different clusterings wellformed clustering small number clusters 
compare evaluate different clusters formed different values bayesian information criterion bic measure goodness fit clustering dataset :10.1.1.19.3377
choose clustering smallest bic score close best score seen 
close means percentage range scores seen 
chosen clustering represents final grouping intervals phases 

final step select simulation points chosen clustering 
cluster phase choose representative interval simulated detail represent behavior cluster 
simulating representative interval phase extrapolate capture behavior entire program 
choose representative simpoint picks interval cluster closest centroid center cluster 
simulation point associated weight fraction executed instructions program cluster represents 

weights detailed simulation results simulation point compute weighted average architecture metric interest cpi rate 
weighted average simulation points gives accurate representation complete execution program input pair 
methodology performed analysis complete set spec programs multiple inputs alpha binaries simplescalar website 
collect frequency vector profiles basic block vectors simplescalar 
generate baseline fixed length interval results programs executed start completion simplescalar 
baseline microarchitecture model detailed table 
examine accuracy approach provide results terms cpi error means variance 
cpi error percent error cpi simulation points simpoint baseline cpi complete execution program 
means variance average squared distance vector closest center 
lower variances better 
sub sampling report variance vector just sub sampled ones 
relative means variance reported experiments measured input basis ratio means variance observed clustering sample means variance observed clustering input 
simpoint features section describe reduce run time sim point number simulation points sacrificing accuracy 
choosing interval size simpoint decisions interval size 
interval size number simulation points chosen simpoint determine simulation time binary input combination 
larger intervals allow aggregation profile information allowing simpoint search large scale repeating behavior 
comparison smaller intervals allow fine grained representations searching smaller scale repeating behavior 
interval size affects number simulation points smaller intervals simulation points needed larger intervals represent proportion program 
showed smaller interval sizes results high accuracy reasonable simulation limits 
disadvantage smaller interval sizes warmup issue efficient techniques address warmup discussed 
comparison warmup really issue larger interval sizes may preferred simulation environments 
results interval size instructions 
support variable length intervals ideally align interval boundaries code structure program 
examine algorithm produce variable length intervals aligned procedure call return loop transition boundaries code 
variable length interval represented frequency vector interval frequency vector account different amounts program execution 
able pick simulation points need change way simpoint clustering include different weights intervals 
simpoint supports detailed changes described 
high level changes focused parts simpoint algorithm computing means cluster centers variable length intervals want means cluster centers represent centroid intervals cluster weights interval 
means include interval weights calculating cluster center 
important modification allow means better model intervals represent larger proportion program 
choosing best clustering bic bic criterion log likelihood clustering data minus complexity penalty 
likelihood calculation sums contribution interval larger intervals greater influence modify calculation include weights intervals 
modification change bic calculated fixed length intervals 
computing cluster centers choosing simulation points similar centroids weighted execution interval cluster accounts 
format frequency vector files 
user allow simpoint determine weight interval specify weights see options section 
methods reducing run time means simpoint needs run binary input combination want fast clustering algorithm produces accurate simulation points 
address runtime simpoint look options greatly affect running time single run means 
options number intervals cluster size dimension intervals clustered number iterations takes perform clustering 
start examine number intervals affects running time simpoint algorithm 
shows time seconds running simpoint varying number intervals vectors vary number clusters value 
experiment interval vectors randomly generated uniformly random noise dimensions 
results show number vectors clusters increases amount time required cluster data 
graphs show vectors took minutes simpoint perform clustering 
clear number vectors clustered value large effect run time simpoint 
run time changes linearly number clusters number vectors 
see dividing time multiplication number iterations clusters vectors provide time basic operation gives improving performance larger due new optimizations 
number intervals sub sampling means algorithm fast iteration run time linear number clusters dimensionality 
means iterative algorithm iterations may required reach convergence 
prior revisit section reduce number dimensions maintain program sp sp sp bins gcc min min min crafty min min min table table shows running times minutes sim point sp simpoint binary search sp simpoint binary search sp bins 
simpoint run searching best clustering uses random seeds projects vectors dimensions 
second column shows vectors size vector static basic blocks programs 
simpoint clustering accuracy 
main influence execution time simpoint number intervals 
show effect table shows simpoint running time gcc crafty ref shows lower upper ranges number intervals basic block vectors seen spec interval size instructions 
second third column shows number intervals vectors original number dimensions vector projected dimensions 
columns show time took execute simpoint searching best clustering random initializations seeds sp time took simpoint 
second column shows time took run simpoint searching manner simpoint column shows clustering time new binary search described section 
results show increasing number intervals times increased running time simpoint times 
results show significantly reduced running time simpoint combined new binary search functionality results faster choosing simulation points simpoint 
results show number intervals clustered large impact running time simpoint take iterations converge case crafty 
effect number intervals running time simpoint critical small interval sizes instructions smaller millions intervals cluster 
speed execution simpoint large inputs sub sample set intervals clustered run means sample 
sample vector dataset weighted sampling uniform sampling fixed length vectors 
number desired intervals specified simpoint chooses intervals replacement 
probability interval chosen proportional weight interval number dynamically executed instructions represents 
sampling common clustering datasets large fit main memory :10.1.1.101.2607
clustering dataset sample set clusters centroids 
single pass unclustered intervals assign cluster nearest center centroid interval 
represents final clustering simulation points chosen 
originally examined seconds vectors vectors vectors total time cluster seconds vectors vectors vectors time iterations seconds vectors vectors vectors time iterations plots show varying number vectors clusters affects amount time required cluster simpoint 
experiment generated uniformly random data dimensions 
plot shows total time second plot shows time normalized number iterations performed third plot shows time normalized number operations performed 
number vectors number clusters linear influence run time means 
sub sampling variable length intervals 
millions intervals sub sample intervals clustering achieve reasonable running time simpoint providing accurate simulation points 
experiments shown show effects subsampling spec benchmarks interval size clusters projected dimensions subsampling sizes vectors program 
plots show effects subsampling cpi errors means variance degrade gracefully smaller samples 
average spec int spec fp average results shown 
shown second graph sub sampling program result means finding slightly representative clustering results higher means variance higher cpi errors average 
sub sampling cases reduce means variance cpi error compared vectors sub sampling remove unimportant outliers dataset means may trying fit 
interesting note difference floating point integer programs shown plots 
surprising easier achieve lower cpi errors floating point programs integer programs plot indicates 
addition second plot suggests floating point programs easier cluster quite small samples 
third plot shows effect number vectors running time simpoint 
plot shows time required cluster benchmark input combinations sub sampled versions 
addition fit logarithmic curve squares points give rough idea growth run time 
plot shows different datasets number vectors may require different amounts time cluster due number means iterations required clustering converge 
number dimensions random projection number vectors important aspect running time means number dimensions 
chose random linear projection reduce dimension clustered data simpoint dramatically reduces computational requirements retaining essential similarity information 
simpoint allows user define number dimensions project 
simpoint default dimensions adequate spec applications shown 
earlier looked information structure frequency vector data preserved projecting varying dimensions 
observing clusters low dimensional version 
noted dimensions able find structure data going lower dimensions removed structure 
examine random projection shows effect changing number projected dimensions cpi error left run time simpoint right 
experiment varied number projected dimensions 
number dimensions increases time cluster vectors increases linearly expected 
note run time increases low dimensions points crowded result means requires iterations converge 
expected dimensions information retained accurately cluster data 
reflected fact cpi errors increase rapidly low dimensions 
see dimensions simpoint default cpi error quite low higher number dimensions improve significantly requires computation 
dimensions problem light known curse dimensionality implies number dimensions increase number vectors required densely populate space grows exponentially 
means higher dimensionality clustering algorithm converge poor solution 
wise choose dimension low allow tight clustering low important information lost 
cpi error sample fraction int programs fp programs average relative means variance sample fraction int programs fp programs time seconds number vectors sample size plots show sub sampling clustering affects cpi errors means variance run time simpoint 
plot shows average cpi error integer floating point spec benchmarks 
second plot shows average means clustering variance relative clustering vectors 
plot shows scatter plot run time cluster full benchmarks sub sampled versions logarithmic curve fit squares 
cpi error int programs fp programs projected dimensions time relative dimensions int programs fp programs projected dimensions plots show effects changing number projected dimensions simpoint 
default number projected dimensions simpoint uses show results dimensions 
left plot shows average cpi error right plot shows average time relative dimensions 
plots averaged spec benchmarks fixed clusters 
number iterations needed final aspect examine affecting running time means algorithm number iterations takes run converge 
means algorithm iterates hits userspecified maximum number iterations reaches point improvement possible whichever 
means guaranteed converge determined centroids longer change 
simpoint default limit iterations easily changed 
iterations may required especially number intervals large compared number clusters 
interaction number intervals number iterations required reason large simpoint running time crafty ref table 
results observed runs spec benchmarks reach limit iterations 
experiment instruction intervals dimensions random seeds initializations runs means 
shows number iterations required runs experiment 
spec program input combinations run crafty ref perlbmk runs converged iterations 
longest running clusterings programs reached convergence iterations respectively 
maxk controlling number simulation points number simulation points simpoint chooses direct effect simulation time required points 
maximum number clusters maxk interval size discussed section represents maximum amount simulation time needed 
fixed length intervals maxk interval size puts limit instructions simulated 
simpoint enables users trade simulation time accuracy 
researchers architecture tend want keep simulation time fixed number instructions run 
desirable find interval number iterations ammp ref applu ref apsi ref art art bzip graphic bzip program bzip source crafty ref eon cook eon kajiya eon rushmeier equake ref ref fma ref ref gap ref gcc gcc gcc expr gcc integrate gcc gzip graphic gzip log gzip program gzip random gzip source lucas ref mcf ref mesa ref mgrid ref parser ref perlbmk perlbmk perlbmk perfect perlbmk ref swim ref twolf ref vortex vortex vortex vpr route ref plot shows number iterations required randomized initializations benchmark interval vectors dimensions 
note program inputs total runs required default limit iterations converge iterations 
size maxk provides accuracy show reasonable simulation time instructions average 
accuracy desired decreasing interval size setting maxk maxk equal square root total number intervals performs 
empirically discovered granularity finer number phases discovered increases sub linear rate 
upper bound defined heuristic works spec benchmarks 
thing matters user accuracy simpoint chooses number clusters close maximum allowed possible maximum small 
case simulation time acceptable better double maximum re run simpoint analysis 
choosing simulation points represent top percent execution advantage simpoint analysis simulation point associated weight tells original program execution represented cluster simulation point represents 
simulation points ranked order importance 
simulation time costly user may want simulate simulation points small weights 
simpoint allows user specify explicitly option 
option specified value sets threshold execution represented simulation points reported extra set files simulation points weights 
default entire execution represented 
example user specified simpoint report simulation points associated weights nonempty clusters files largest clusters program weight 
reduced coverage set simulation points potentially save lot simulation time simulation points small weights severely affecting accuracy analysis 
shows effect varying percentage coverage simpoint reports 
experiments binary search maxk dimensions random seeds 
left graph shows cpi error right shows number simulation points chosen representing top execution 
bars show maximum value second highest value max average 
results show coverage reduced average number simulation points decreases reduces simulation time required expense cpi error goes average 
example comparing coverage average number simulation points reduced reduction required simulation time fixed length vectors 
time average cpi error increases 
depending user goal practitioner types results decide appropriate tradeoff simulation time accuracy 
spec binary input pairs combination represented maximum bad error rate 
ammp ref reason simulation point removed small weight executed instructions behavior significantly different effect estimated cpi 
note simulation points architecture design space exploration cpi error compared baseline important making sure error consistent different architectures examined 
important consistent relative error seen design space exploration simpoint consistent bias shown 
ignoring simulation points account tiny fraction execution create consistent bias different architecture runs compared complete simulation 
acceptable technique reducing simulation time especially performing large design space exploration trade offs 
searching smallest clustering described suggest setting maxk appropriate maximum amount simulation time user tolerate run 
techniques search possible values describe 
goal try pick reduce number clusters simulation points reduces simulation time reducing number points needed represent program execution 
setting bic percentage examine clusterings values need method choosing best clustering 
bayesian cpi error max max average coverage total execution number simulation points chosen max max average coverage total execution plots show cpi error number simulation points picked different percent coverages execution 
coverage simulation points simulation points smallest clusters discarded keeping simulation points represent desired coverage 
bars labeled max show second largest value observed 
cpi error max max average bic score fraction number simulation points chosen max max average bic score fraction plots show cpi error number simulation points chosen affected varying bic threshold 
bars labeled max show second largest value observed 
information criterion bic gives score goodness clustering set data :10.1.1.19.3377
bic scores compare different clusterings data 
bic score penalized likelihood clustering vectors considered approximation probability 
bic score increases number clusters increase 
choosing clustering highest bic score lead selecting clustering clusters 
look range bic scores select score attains high percentage range 
simpoint default bic threshold 
bic rises levels method chooses clustering fewest clusters near maximum value 
choosing lower bic percent prefer fewer clusters risk accurate simulation 
shows effect changing bic threshold cpi error left number simulation points chosen right 
experiments binary search maxk dimensions random seeds 
bic thresholds examined 
bic threshold decreases average number simulation points decreases similarly average cpi error increases 
bic threshold perlbmk maximum cpi error spec suite 
due clustering picked threshold clusters 
anomaly artifact looser threshold better bic scores point better clusterings better error rates recommend bic threshold set 
varying number random seeds means initialization means clustering algorithm essentially hill climbing algorithm starts randomized initialization requires random seed 
running means multiple times produce different results depending initializations 
means means converge locally solution poor compared best clustering data number clusters 
conventional wisdom suggests run means times different randomized starting point time cpi error max furthest max sample avg furthest avg sample number means initializations seeds plot shows average maximum cpi errors sampling furthest means initializations different random seeds 
results spec benchmark suite instruction vectors dimensions 
take best clustering observed means variance bic 
simpoint functionality different random seeds initialize means time 
experience random seeds works 
shows effect cpi error different means initialization methods furthest sampling different numbers initial means seeds 
experiments binary search maxk dimensions bic threshold 
multiple seeds simpoint runs means multiple times different starting conditions takes best result 
results see sampling outperforms furthest means initialization 
attributed data clustering large number anomaly points 
furthest method pick anomaly points initial centers furthest points apart 
sampling method randomly picks points average better furthest method 
important try multiple seed initializations order avoid locally minimal solution 
results shows seed initializations sufficient finding clusterings 
binary search picking simpoint faster find best clustering simulation points program trace earlier versions 
bic score generally increases increases simpoint uses perform binary search best example maximum desired earlier versions simpoint search increments requiring clusterings 
binary search method ignore large parts set possible values examine clusterings 
binary search method clusters times max max 
proceeds divide search space cluster bic scores observed clustering 
binary search may early window values relatively small compared maximum value 
binary search method requires user specify maximum value performs log max clusterings 
shows comparison new binary search method choosing best clustering old method simpoint searched large number values range 
top graph shows cpi error program bottom graph shows number simulation points clusters chosen 
experiments binary search maxk dimensions random seeds bic threshold 
simpoint performs slightly better binary search method searches exhaustively values maxk 
binary search possible find small clustering exhaustive search 
shown bottom graph exhaustive search picked simulation points average binary search chose simulation points average 
terms cpi error rates average spec programs exhaustive binary search 
simpoint command line options clustering projection options specifies values searched 
regular expression search start start step search means simpoint search binary search user specified maxk 
maxk option set search 
searching default behavior 
user chooses search may specify comma separated ranges positive integers argument specifies single value range start indicates integers start inclusive range start step indicates simpoint values starting start stepping interval step reaching 
example specifying specific values regular expression represents searching values 
maxk search clustering method see option command line option provided 
specifies maximum number clusters simpoint 
specifies frequency vectors loaded treated vectors means having equal weights vectors 
default 
weights loaded weight cpi error number simulation points chosen simpoint binary search ammp applu apsi art art bzip graphic bzip program bzip source crafty eon cook eon kajiya eon rushmeier equake fma gap gcc gcc gcc expr gcc integrate gcc gzip graphic gzip log gzip program gzip random gzip source lucas mcf mesa mgrid parser perlbmk perlbmk perlbmk perfect perlbmk swim twolf vortex vortex vortex vpr route average simpoint binary search ammp applu apsi art art bzip graphic bzip program bzip source crafty eon cook eon kajiya eon rushmeier equake fma gap gcc gcc gcc expr gcc integrate gcc gzip graphic gzip log gzip program gzip random gzip source lucas mcf mesa mgrid parser perlbmk perlbmk perlbmk perfect perlbmk swim twolf vortex vortex vortex vpr route average plots show cpi error number simulation points chosen different ways searching best clustering 
method simpoint searching choosing smallest clustering achieves bic threshold 
second method binary search maxk examines clusterings 
interval determined summing frequency counts vector interval dividing total frequency count intervals 
simpoint finds highest lowest bic scores examined clusterings chooses smallest bic score greater max score min score min score 
default value 
dim number dimensions simpoint randomly project un projected frequency vectors 
string projection done data 
dim option specified default dimensions 
option apply loading data pre projected vector file options 
seed random number seed random projection 
default 
changed integer different random projections 
samp ff type means initialization sampling furthest 
default samp 
sampling chooses different vectors program random initial cluster centers 
chooses random vector cluster center repeats times find closest center vector choose new center vector furthest closest center 
seed random number seed means initialization see 
default 
changed integer obtain different means initializations seed runs provide reproducible initializations 
number random initializations try clustering dataset clustered num times different means initializations means initialization seed changed initial ization 
num runs best highest bic score kept 
default 
iters maximum number means iterations clustering 
default algorithm converges stops earlier 
chosen means terminate converged 
running spec programs inputs default parameters simpoint runs converge iterations 
clearly default number iterations usually sufficient increased simpoint reaching limit 
verbose level amount output simpoint produce 
argument level non negative integer larger values indicate output 
default minimum amount output 
sampling options number frequency vectors intervals randomly sample clustering means 
smaller number vectors allows means run faster small cost accuracy 
vectors sampled replacement vector sampled 
vectors vectors chosen probability proportional execution represent 
default vectors clustering 
random number seed vector sampling 
default 
changed integer different samples 
load options file specifies frequency vector fv file intervals 
argument provide simpoint frequency vectors analyzed 
options specify number frequency vectors maximum number dimensions frequency vector file file doesn need parsed twice options 
file specifies projected text vector file saved 
loaded way simpoint random projection change vectors 
file specifies projected binary vector file saved 
binary format version 
option provides fastest way load dataset 
option specifies input vectors compressed gzip compression decompressed reading 
file specifies initial centers clustering allowing simpoint choose initial centers furthest sampling 
centers points dimension projected frequency vectors necessarily actual frequency vectors 
option incompatible multiple values corresponding number centers file run 
useful want specify exact starting centers perform clustering 
file specifies labels form initial clusters allowing sim point choose furthest sampling 
option incompatible multiple values 
want specify initial starting clusters perform clustering set labels 
doing new starting centers formed labels clustering iterations proceed 
file specifies text projection matrix project frequency vector file saved previous run allowing simpoint choose random projection matrix 
option allows users specify projection matrix 
file specifies binary projection matrix project frequency vector file 
binary version 
file specifies text file contains weights applied frequency vectors 
weights non negative sum positive 
save options file saves file vectors chosen simulation points corresponding cluster numbers 
frequency vectors numbered starting means vector execution index 
note earlier versions simpoint started numbering vectors 
file saves file containing weight simulation point corresponding cluster number 
weight proportion program execution simulation point represents 
file saves file weight frequency vector computed simpoint 
weight vector proportion vector represents vectors provided 
option calculated vector total value entries vector divided total value entries vectors 
weights stored projected vector files saved option necessary just saving loading projected data 
option specified simpoint saves specified outputs best clustering bic threshold 
option specified simpoint save specified outputs values clustered 
option affects saving labels simulation point weights simulation points initial centers final centers 
option tells simpoint save additional simulation points weights belong largest clusters proportion vector weights entire program 
range default 
example means output smallest number simulation points account execution vectors 
option affects saving simulation points simulation point weights 
simulation points associated weights clusters saved 
file specifies file save text version projected frequency vectors enable faster loading 
see 
file specifies file save binary version projected frequency vectors enable faster loading 
see 
file specifies file save text version projection matrix may reused 
see 
file specifies file save binary version projection matrix may re 
see 
file specifies file save initial cluster centers 
file specifies file save final cluster centers means 
file specifies file save final label distance cluster center clustered vector 
table shows default required options running simpoint 
required parameters run simpoint providing frequency vectors setting maxk option maxk option 
common pitfalls important potential pitfalls worth addressing ensure accurate simpoint simulation points 
setting maxk appropriately maxk set interval size maximum number instructions willing simulate described section 
maximum number clusters interval size represent maximum amount simulation time needed simulation points selected simpoint 
finding simulation points simpoint requires recognizing tradeoff accuracy simulation time 
user wants place low limit number clusters limit simulation time option default value search samp dim iters sub sampling table table gives standard options simpoint default values 
run sim point frequency vectors provided frequency vector file pre projected data file 
search method maxk provided 
simpoint provide accurate results intervals differing behaviors may grouped result 
cases may advantageous increase option value 
allow different behaviors grouped clusters final set simulation points smaller dominant behaviors chosen simulation points 
interval errors simpoint starts counting intervals cluster ids 
counts ids written file simpoint indicates intervals selected simulation points respective cluster ids 
common mistake may assume simpoint previous versions simpoint counts intervals starting 
just remember interval execution cluster sim point number 
reproducible tracking intervals simulation points important reproducible simulation environment creating interval vectors simulation points simulation 
instruction counts stable runs selection intervals skewed resulting additional error 
simpoint provides interval number simulation point 
interval numbers zero relative start execution previous simulation point 
fixed length intervals get instruction count start simulation point just multiply interval number interval size watch interval drift described 
example interval number interval size instructions means simulation point starts correct path instructions fetched 
detailed simulation simulation point occur instruction just 
way get reproducible results instruction program counter start pc occurs start interval execution relying instruction count 
program counter reappear times necessary keep track times program counter value appear indicate start interval execution 
example simulation point triggered pc executed th time 
detailed simulation starts pc seen times simulation occurs length interval 
user needs profile pcs parallel frequency vector profile record pc seen interval number times pc executed point execution 
simpoint provides interval chosen simulation point data easily mapped pc profile determine start pc nth occurrence simulation start 
highly recommended simulation point start pcs performing simulations 
reasons 
reason deals making sure calculate instructions fast forwarding exactly simulation points gathered 
second reason slight variations execution count different runs binary input due subtle changes simulation environment 
discussed detail section 
interval drift creating intervals problem may occur counts inside interval just slightly larger interval size 
time counts add try find particular fixed length interval simulation environment different intervals generated intervals 
example occur forming fixed length intervals instructions 
instructions execute interval created boundary may occur middle basic block additional instructions included interval complete basic block 
may extremely small accumulate thousands intervals cause slow drift interval endpoints terms instruction count 
mainly problem executed instructions determine starting location simulation point 
drift intervals calculate starting instruction count just multiply simulation point fixed length interval size described interval lengths exactly 
result simulating wrong set instructions simulation point 
instruction count start simulation point need keep track total instruction count interval interval drift 
calculate instruction count starting location simulation point summing exact instruction counts intervals interval chosen simulation point 
accurate instruction counts ops important count instructions exactly frequency vector profiles detailed simulation diverge 
note simulation points simpoint website include correct path instructions instruction counts include ops 
reach simulation points simulator committed correct path instruction including ops counted 
system call effects users reported system call effects running simulation points slightly different os configurations cluster machines 
result slightly fewer instructions executed get point program execution number instructions executed find simulation point may lead variations results 
avoid suggest start pc execution count simulation point described 
way avoid variations startup checkpointing 
calculating weighted ipc ipc instructions cycle just apply weights directly done cpi 
convert simulated samples cpi compute weighted average cpi convert result back ipc 
calculating weighted rates compute rate cache rate calculate weighted average number cache accesses weighted average number cache misses 
dividing second number gives estimated cache rate 
general care taken dealing ratio numerator denominator averaged separately divided 
number intervals sufficient number intervals clustering algorithm choose 
rule thumb sure intervals order clustering algorithm able find partition intervals 
intervals decrease interval size obtain intervals clustering 
simpoint described section simpoint assumes fixed length intervals vectors clustered variable length 
problem simpoint data clustered uniform weight distribution intervals correct representing execution properly 
means centroids may representative program execution cluster 
result large error rates vector representative majority cluster chosen simulation point 
wanting variable length asking want variable length weighting interval need option 
may need vector weights automatically calculated vector values 
summary modern computer architecture research depends understanding cycle level behavior processor running application gaining understanding done efficiently judiciously applying detailed cycle level simulation simulation points 
level detail provided cycle level simulation comes cost simulation speed targeting carefully chosen samples small number behaviors real programs cost reduced reasonable level 
main idea simpoint realization programs typically exhibit unique behaviors interleaved time 
finding behaviors determining relative importance maintain high level picture program execution time quantify cycle level interaction application architecture 
key able find phases efficient robust manner development metric capture underlying shifts program execution result changes observed behavior 
simpoint uses frequency vectors calculate code similarity cluster program execution phases 
simpoint automates process picking simulation points line phase classification algorithm significantly reduces amount simulation time required 
goals met simulating handful intelligently picked sections full program 
simulation points carefully chosen provide accurate picture complete execution program gives highly accurate estimation performance 
release provides new features reducing run time simpoint simulation points required provides support variable length intervals 
simpoint software downloaded www cse ucsd edu users calder simpoint acknowledgments funded part nsf 
ccr nsf 
acr uc micro intel microsoft 
bellman 
adaptive control processes 
princeton university press 
van calder 
efficient sampling startup sampled processor simulation 
technical report ucsd cs uc san diego november 
van sherwood calder 
phase matrix guide simultaneous multithreading simulation 
ieee international symposium performance analysis systems software march 
burger austin 
simplescalar tool set version 
technical report cs tr university wisconsin madison june 
lewis elkan :10.1.1.2.7638
scalability clustering algorithms revisited 
sigkdd 

calder 
simpoint pick simulation points 
acm sigmetrics performance evaluation review march 
lau calder 
selecting software phase markers code structure analysis 
technical report ucsd cs uc san diego november 
lau sherwood calder 
motivation variable length intervals hierarchical phase behavior 
ieee international symposium performance analysis systems software march 
lau sampson calder 
strong correlation code signatures performance 
ieee international symposium performance analysis systems software march 
lau calder :10.1.1.2.7638
structures phase classification 
ieee international symposium performance analysis systems software march 
macqueen 
methods classification analysis multivariate observations 
neyman editors proceedings fifth berkeley symposium mathematical statistics probability volume pages berkeley ca 
university california press 
patil cohn kapoor sun 
pinpointing representative portions large intel itanium programs dynamic instrumentation 
international symposium microarchitecture december 
pelleg moore :10.1.1.19.3377
means extending means efficient estimation number clusters 
proceedings th international conf 
machine learning pages 
calder 
picking statistically valid early simulation points 
international conference parallel architectures compilation techniques september 
provost kolluri 
survey methods scaling inductive algorithms 
data mining knowledge discovery 
sherwood calder :10.1.1.18.7813
basic block distribution analysis find periodic behavior simulation points applications 
international conference parallel architectures compilation techniques september 
sherwood calder 
automatically characterizing large scale program behavior 
th international conference architectural support programming october 
