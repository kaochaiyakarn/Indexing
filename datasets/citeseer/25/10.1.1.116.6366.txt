exploiting hardware performance counters flow context sensitive pro ling glenn ammons thomas ball james larus dept computer sciences bell laboratories dept computer sciences university wisconsin madison lucent technologies university wisconsin madison ammons cs wisc edu research bell labs com larus cs wisc edu program pro le attributes run time costs portions program execution 
pro ling systems su er major de ciencies rst simple metrics execution frequency elapsed time static syntactic units procedures statements second aggressively reduce volume information collected reported aggregation hide striking di erences program behavior 
addresses concerns exploiting hardware counters available modern processors incorporating concepts data ow analysis ow context sensitivity report context measurements 
extends previous cient path pro ling ow sensitive pro ling associates hardware performance metrics path procedure 
addition describes data structure calling context tree ciently captures calling contexts procedure level measurements 
measurements show spec benchmarks execute small number hot paths account data cache misses 
hot paths concentrated routines complex dynamic behavior 
program pro le attributes run time costs portions program execution 
pro les direct programmer attention algorithmic bottlenecks ine cient code knu focus compiler optimizations research supported wright laboratory avionics directorate air force material command usaf arpa order 
nsf nyi award ccr support hewlett packard sun microsystems nsf mip 
government authorized reproduce distribute reprints governmental purposes notwithstanding copyright notation thereon 
views contained authors interpreted necessarily representing cial policies endorsements expressed implied wright laboratory avionics directorate government 
appear acm sigplan conference programming language design implementation las vegas nevada june 
parts program er largest potential improvement 
pro les provide compact summary program execution forms basis program coverage testing software engineering tasks 
program pro ling widely tools report rudimentary pro les execution frequency time static syntactic units procedures statements 
extends pro ling techniques new directions 
rst exploits hardware performance counters available modern processors intel pentium pro sun ultrasparc mips 
processors complex microarchitectures dynamically schedule instructions 
machines di cult understand model accurately 
fortunately processors contain readily accessible hardware counters record wide range events 
example sun ultrasparc processors sun count events instructions executed cycles executed instruction stalls various types cache misses collectively hardware performance metrics 
existing pro ling systems exploit counters limited simple metrics instruction execution frequency bl time procedure sof cache misses lw 
second extension increases usefulness program pro les reporting richer context measurements applying concepts static program analysis ow context sensitivity 
ow sensitive pro le associates performance metric acyclic path procedure 
context sensitive pro le associates metric path call graph 
pro ling systems ow context insensitive attribute costs syntactic program components statements loops procedures 
flow sensitive pro ling enables programmers nd hot spots identify dependencies 
example ow insensitive measurement nd statements procedure high cache rates ow sensitive measurement show misses occur statements execute common path possibly due cache con ict 
context sensitive pro ling associates metric sequence procedures calling context active intervals program execution 
labeling metric calling context separate measurements different invocations procedure 
calling context pro ling tools approximate program contextdependent behavior 
example pro ling systems gprof qpt bl cost procedure callers proportion relative frequency calls pair procedures calculation produce misleading results pf 
context essential elucidate hardware measurements 
hardware events instruction stalls cache misses ected execution relationships program components 
performance tools associate metric isolated component program overlook relationships 
paths capture temporal relationships reporting sequence statements leading behavior interest 
addition measurements important metric data cache misses heavily concentrated small number paths routines complex dynamic behavior 
tools report cache misses procedure statement level isolate hot paths 
contributions describes instrument programs record hardware performance metrics ciently ow sensitive context sensitive manner 
contributions fold flow sensitive pro ling extends technique path pro ling previously recorded execution frequency paths procedure control ow graph bl 
generalizes path pro ling associating hardware performance metrics paths 
context sensitive pro ling provides calling context ow sensitive procedure level pro les 
uses run time data structure called calling context tree cct label arbitrary metric set metrics dynamic calling context 
cct captures program calling behavior precisely call graph size bounded complete dynamic call tree 
techniques constructing cct general handle indirect function calls recursion non local returns 
techniques may combined cct record calling context paths procedure 
combination provides cient approximation interprocedural path pro ling 
measurements executable editing library eel ls built tool called pp path pro ler instruments program executables record ow sensitive context sensitive pro les 
pp records instruction frequency ne grain timing event count information accessing hardware counters ultrasparc processors 
run time overhead ow sensitive context sensitive pro ling spec benchmarks average 
furthermore results show quite compact practice 
measurements spec benchmarks show programs contain small number hot paths incur data cache misses 
collective paths account misses programs go gcc 
programs execute paths lowering hot path threshold misses nds approximately paths respectively account misses 
hot paths average rates 
hot paths concentrated small number routines incur cache misses execute roughly times paths cold routines 
overview organized follows 
section summarizes result intraprocedural path pro ling section shows generalized perform ow sensitive pro ling hardware counters 
section describes cct data structure built record context sensitive pro les 
section describes implementation pp uses techniques record variety hardware speci metrics sun ultrasparc processors 
section presents experimental measurements show overhead perturbation technique reasonable examines hot path phenomenon 
section describes related 
cient path pro ling section summarizes previous intraprocedural path pro ling bl extends 
procedure control ow graph cfg path pro ling algorithm assigns integer label edge acyclic cfg sum integers unique unique path entry exit procedure 
labelling compact path sums fall range number potential paths entry exit 
inserts simple instrumentation track path sum integer register run time 
path sum directly index array counters key hash table counters number potential paths large 
transforms cfg containing cycles loops contain unbounded number potential paths acyclic graph bounded number paths 
algorithm handle reducible irreducible cfgs 
illustrates technique simple graph containing unique paths path unique path sum shown 
shows simple instrumentation scheme tracking path sum register shows optimized instrumentation scheme see bl details 
instrument acfg cient path pro ling unique entry vertex entry vertices reachable unique exit vertex exit reachable vertices 
algorithm straightforward extension cfgs meet requirement 
description breaks algorithm parts instrumentation acyclic cfgs method containing cycles acyclic cfg 
path encoding abcdef count count path pro ling edge labelling instrumentation 
integer labelling unique path sums paths path sums simple instrumentation tracking path sums optimized instrumentation tracking path sums 
path pro ling acyclic cfgs conceptually algorithm linear time traversals cfg visiting vertices reverse topological order pass 
passes easily combined single linear time pass 
rst pass vertex labelled integer np denotes number paths exit 
values de ned graph acyclic 
base case np exit 
successors wn labelled vertices visited reverse topological order np np np wn 
second pass labels edge cfg integer val path entry exit generates path sum range np entry 
value range np entry isthe path sum path entry exit 
processing required exit vertex pass outgoing edges 
consider vertex successors wn 
algorithm traverses cfg reverse topological order may assume wi edges reachable wi labelled path wi exit generates unique path sum range np wi 
vertex successors totally ordered wn order chosen immaterial 
value associated edge ei wi simply sum number paths exit successors wi val ei np wj 
illustrates labelling process successors 
paths wi exit generate path sums range np wi 
label edge paths exit edge generate path sums range np 
label edge np paths exit edge generate path sums range np np np 
path sums paths exit lie range np np np 

np np np np 
np exit np edge labelling phase 
np np np edge labelling instrumentation phase simple 
integer register tracks path sum initialized entry vertex 
edge non zero value incremented val 
exit vertex indexes array update count count serves hash key hash table counters 
details greatly reduce number points incremented see bl bal 
path pro ling cyclic cfgs cycles cfg introduce unbounded number paths 
cycle contains backedge identi ed search entry algorithm pro les paths backedges occur rst edge path 
result paths fall categories backedge free path entry exit backedge free path entry followed backedge execution backedge backedge free path followed backedge executing backedge backedge free path exit 
hw cnt hw cnt count instrumentation measuring metric paths 
order processors ultrasparc necessary read hardware counter writing ensure write completed 
algorithm previous section guarantees uniqueness path sums paths starting single entry point 
paths di erent starting points categories may compute identical path sums 
simple graph transformation turns cyclic cfg acyclic cfg extends uniqueness compactness properties path sums paths described regardless category 
backedge cfg transformation removes cfg adds pseudo edges place entry bend exit 
resulting graph acyclic contains bounded number paths 
pseudo edges represents paths start backedge 
example path entry vertex followed backedge original cfg translates directly path starting entry pseudo edge bend exit 
path algorithm acyclic cfgs runs transformed graph labelling original edges pseudo edges 
labelling guarantees paths entry exit unique paths sums including paths containing pseudo edges 
labelling instrumentation inserted exception 
pseudo edges represent actual transfers control instrumented 
values incorporated instrumentation backedge count st art value pseudo edge bend st art value pseudo edge 
flow sensitive pro ling hardware metrics section shows path pro ling algorithm accumulate metrics execution frequency 
hardware metrics may record execution time cache misses instruction stalls discussion focuses ultrasparc hardware counters sun similar considerations apply processors 
tracking metrics path associating hardware metric path straightforward shown 
path set hardware counter zero 
path read hardware counter add value accumulator associated path 
paths intraprocedural hardware counters saved restored procedure calls 
system save counter call restore call save counter procedure entry restore procedure exit 
implementation uses approach reduce code size capture cost call instructions 
ultrasparc provides instruction reads bit hardware counters bit general purpose register 
additional instructions necessary extract values register 
total instrumentation requires thirteen instructions increment accumulators frequency metric path 
counters zeroed writing bit register hardware counters 
ultrasparc superscalar architecture necessary read counters immediately writing ensure write completes subsequent instructions execute 
measurement perturbation important problem hardware counters perturbation caused instrumentation 
simple example consider hardware counters record instruction frequency 
instrumentation instruction executed path counted 
shows example pro ling instrumentation introduces instructions path instruction read write hardware counters instruction instrumenting executable introduces perturbation 
example path pro ling requires free local register procedure 
procedure free registers eel spills register stack requires additional loads stores instructions originally register 
instructions ect metric 
addition eel layout edited code introduce new branches 
simple predictable metrics instruction frequency pro ling tool correct perturbation path frequency subtract ect instrumentation code 
metrics di cult estimate perturbation ects 
example metric processor stalls cache misses separating instrumentation underlying behavior appears intractable 
instrumentation executes path outside measured interval cause cache con icts increase program cache misses 
general solution di cult problem explored 
section contains measurements perturbation 
ow ultrasparc hardware counters bits wide 
metric cycle counts cause counter wrap seconds 
intraprocedural instrumentation measures call free paths bit counters ashok singhal sun microsystems 
personal communication 
oct 
dynamic call tree corresponding call graph corresponding calling context tree 
wrap conceivable path 
accumulated metrics bit quantities handle program 
context sensitive pro ling section describes calling context tree cct data structure compactly represents calling contexts presents algorithm constructing cct shows cct capture ow sensitive pro ling results performance metrics 
calling context tree cct ers cient intermediate point spectrum run time representations calling behavior 
precise space ine cient data structure shown dynamic call tree dct 
tree vertex represents single procedure activation precisely record metrics invocation 
tree edges represent calls individual procedure activations 
size dct proportional number calls execution 
spectrum dynamic call graph dcg compactly represents calling behavior great loss precision 
graph vertex represents activations procedure 
dcg edge edge program dynamic call tree 
dcg size bounded size program vertex accumulates metrics unboundedly activations 
accumulation leads gprof problem metric recorded procedure accurately attributed callers 
furthermore call graph contain infeasible paths asm occur program execution 
calling context tree cct compactly represents calling contexts original tree shown 
de ned equivalence relation pair vertices dct 
vertices dct equivalent represent procedure tree parent ofv equivalent tree parent equivalence classes vertices dct de ne vertex set cct 
eq denote equivalent class vertex edge eq eq cct edge dct 
shows cct preserves unique calling contexts associated procedure dynamic call tree containing recursive calls corresponding call graph corresponding calling context tree 

cct contains unique vertex unique path call chain underlying dct 
stated way cct projection dynamic call tree discards redundant contextual information preserving unique contexts 
metrics identical contexts aggregated trading precision space 
cct accurately record metric di erent call paths solving gprof problem 
important property sets paths dct cct identical 
de ned degree vertex cct bounded number unique procedures may called associated procedure 
breadth cct bounded number procedures program 
absence recursion depth cct bounded number procedures program 
recursion depth cct may unbounded 
bound depth cct rede ne vertex equivalence 
vertices dct equivalent represent procedure tree parent equivalent tree parent vertex represents procedure ancestor modi ed second condition ensures occurrences procedure including instance dct equivalent 
result new equivalence relation depth cct exceeds number procedures program procedure occurs path root leaf cct 
new equivalence relation introduces backedges cct strictly tree 
include cross edges forward edges 
implies tree edges uniquely de ned separable backedges 
unfortunately backedges arise solely due recursion destroy context uniqueness property cct respect dct 
shows dynamic call tree recursive calling behavior corresponding call graph cct 
recursive invocation procedure initial invocation represented vertex cct 
space precision trade cct distinguish calls procedure di erent call sites calling procedure 
distinguishing call sites requires breadth dct unbounded due loop iteration 
ancestor 
struct list struct typedef union list le cr int offset callee typedef union cr int offset struct int id procedure identifier parent tree parent int metrics nm metrics callee children callees struct list list dynamic callees pr list cct data structures 
space useful path pro ling distinct intraprocedural paths reach di erent call sites 
applications cct may aggregate metric pair procedures bene increased precision 
approach described assumes call sites distinguished changes combine minor 
constructing calling context tree cct constructed program execution describe 
vertex cct referred call record di erent run time activation records may share call record 
cr call record associated currently active procedure principle building cct simple just called represented record cr children existing call record 
look call record ancestors 
record dr call recursive create pointer cr dr backedge dr current call record 
ancestor create new call record dr cr 
rst time new callee encountered pay cost traversing parent pointers 
subsequent calls callee immediately nds call record regardless call recursive 
structures de ne basic data types cct 
contains scalar elds arrays id int identi es procedure function associated 
currently procedure starting address identi er compact encodings possible 
parent pointer tree parent 
pointer null represents root cct 
metrics array counters recording metrics 
size array usually xed 
combining path pro ling call graph pro ling size array depends number paths procedure 
representation rst levels cct 
dashed lines indicate pointers lists solid lines indicate pointers call records 
simplicity cell assumed bytes wide 
children array slots call site procedure 
slot may list children indirect calls pointer directly child uninitialized value set start call record 
low order bits slot form tag discriminates possible values 
illustrates cct data structure rst levels cct includes procedures call record structure begins corresponding procedure id root cct labeled special identi er corresponds procedure 
distinguished node useful ways 
executable editing tool insert full instrumentation start program entry point unix 
second extended tool handle signals cct need multiple roots signal handlers represent additional entry points program 
call record root accumulate metrics 
ways build cct 
approach allows procedure instrumented separately knowledge callers callees 
procedure creates initializes call records 
procedure executes call caller passes pointer slot call record callee insert call record 
algorithm inserts instrumentation points program order build cct start program execution 
initialization code allocates heap cct memory mapped region 
region demand paged physical memory allocated 
root call record allocated callee slot initialized list element set back call record 
global register called callee slot pointer set root call record 
callers register pass pointer callee slot record callee 
procedure entry 
instrumentation code rst obtains pointer procedure call record 
code loads value pointed procedure callee slot 
low order bits value tag 
tag value pointer call record procedure 
tag procedure called context 
masking low order bits yields set current call record caller call record 
code searches parent pointers looking ancestral instance callee 
record call recursive old record reused 
record code allocates initializes new call record 
initialization sets id children elds new record 
callee slots direct calls set tagged set slot record 
slots indirect calls set tagged pointer list containing single entry tagged set call record 
cases code stores pointer allocated record callee slot 
tag callee slot contains pointer list callees 
procedure called site call record list 
code moves pointer front list quickly time 
pointer list list element tagged set caller call record 
provides information follow parent pointers nd create call record 
callee call record new current call record held local register call 
instrumentation saves stack 
exception signal transfers control instrumented code normal exception mechanisms restore 
control transfers uninstrumented code restore 
exceptions instrumented code handled transparently exception handling mechanism changed handle exceptions uninstrumented code 
signals resumption semantics problem 
procedure exit 
instrumentation restores old stack 
instrumented procedure calls uninstrumented procedure calls instrumented procedures saving restoring ensures correctly counted children procedure call 
instrumentation sets sum set callee slot call site 
program exit 
immediately program terminates instrumentation writes heap containing cct le cct reconstructed 
associating metrics cct instrumentation code uses metric elds current call record capture metrics procedure invocation 
simplest metric execution frequency just increments counter 
combine intraprocedural path pro les calling context simply requires minor change keep procedure array counters hash table section 
recording hardware metrics slightly trickier 
expensive approach record hardware counter entry procedure compute accumulate di erence exit 
approach problems 
correctly measure functions returned conventional manner due longjmp exceptions 
second measured interval extends entire function invocation may cause bit counters wrap 
avoid problems instrumentation reads hardware counters loop backedges 
higher instrumentation costs produces information mitigates eliminates problems 
implementation implemented algorithms tool called pp instruments sparc binary executables pro le intraprocedural paths call paths 
pp built eel exe editing library library hides complexity system speci detail editing executables ls 
eel provides abstractions allow tool analyze modify binary executables concerned particular instruction sets executable le formats consequences deleting existing code adding foreign code instrumentation 
ultrasparc hardware counters sun ultrasparc processors sun implement sixteen hardware counters record events instructions executed cycles executed instruction stalls cache misses 
architecture provides registers mapped hardware counters program quickly read set counter operating system intervention 
solaris currently save restore counters registers context switch measure processes running processor 
experiments minimized activity running process locked high numbered processor smp server low number processors service interrupts 
bit length counters problem pp records hardware metrics acyclic intraprocedural paths 
experimental results section presents measurements spec benchmarks pp 
benchmarks ran sun mhz ultrasparc processors gb memory running solaris 
benchmarks compiled gcc version fortran benchmarks compiled sun version 
compilers option 
runs ref input dataset 
elapsed time measurements entire dataset 
hardware metrics entire run input le case programs gcc multiple input les 
run time overhead overhead intraprocedural path pro ling low average overhead spec benchmarks roughly twice cient edge pro ling bl 
details reported bl 
extensions described increase run time cost pro ling overheads remain reasonable 
table reports cost forms pro ling 
recording hardware metrics intraprocedural paths flow hw incurs average overhead 
recording hardware metrics call graph context context hw incurs average overhead 
recording path frequency hardware metrics call graph context context flow incurs average overhead 
perturbation pp instrumentation code perturb hardware metrics 
table reports rough estimate perturbation metrics 
baseline case uninstrumented program measured sampling ultrasparc hardware counters seconds avoid base flow hw context hw context flow benchmark time time overhead time overhead time overhead sec sec base sec base sec base go ksim gcc compress li ijpeg perl vortex cint avg tomcatv swim su cor hydro mgrid applu turb apsi fpppp wave cfp avg spec avg table overhead pro ling 
base reports execution time uninstrumented benchmark 
flow hw reports cost intraprocedural path pro ling hardware counters 
context hw reports cost context sensitive pro ling hardware counters 
context flow reports cost context sensitive pro ling frequency counts hardware counters 
cycles insts dcache dcache icache mispredict store fp read write stalls bu er stalls misses misses stalls stalls benchmark go ksim gcc compress li ijpeg perl vortex cint avg tomcatv swim su cor hydro mgrid applu turb apsi fpppp wave cfp avg spec avg table perturbation hardware metrics pro ling 
reports ratio metric recorded ow sensitive pro ling intraprocedural paths corresponding metric uninstrumented program 
reports ratio metric recorded context sensitive pro ling call graph paths metric uninstrumented program 
avg avg height max call sites benchmark size nodes node size degree avg max replication path go ksim gcc compress li ijpeg perl vortex tomcatv swim su cor hydro mgrid applu turb apsi fpppp wave table statistics cct intraprocedural path information nodes 
size size bytes pro le le 
nodes number nodes cct 
avg node size reports average size allocated call record bytes 
avg degree reports average number children interior nodes 
height reports average maximum height tree 
max replication reports maximum number distinct call records routine cct 
call sites reports total number call sites call records 
call sites reached 
path call sites reached call record exactly path procedure entry 
paths hot paths cold paths dense paths sparse paths benchmark num inst num inst num inst num inst go ksim gcc compress li ijpeg perl vortex cint avg tomcatv swim su cor hydro mgrid applu turb apsi fpppp wave cfp avg spec avg spec avg go gcc table data cache misses paths 
hot paths intraprocedural paths incur program cache misses 
cold paths paths 
dense paths hot paths average rate 
sparse paths hot paths average rate 
num quantity paths category 
inst instructions executed paths 
data cache misses path 
hot procedures cold procedures dense procedures sparse procedures benchmark num path proc misses num path proc misses num path proc misses go ksim gcc compress li ijpeg perl vortex cint avg tomcatv swim su cor hydro mgrid applu turb apsi fpppp wave cfp avg spec avg spec avg go gcc table data cache misses procedure 
hot procedures incur program cache misses 
dense procedures average ratios sparse procedures average ratios 
cold procedures incur fewer program cache misses 
path proc average number paths executed procedures category 
misses fraction misses incurred procedures category 
counter wrap 
measurements slightly perturbed hardware counters data collection process suspends application process brie runs 
hardware counters set record user processes events kernel directly measured 
kernel code indirectly ect metrics example polluting cache 
table reports ratio metric collected ow context sensitive pro ling uninstrumented program 
cases instrumentation improve performance example spreading apart stores reducing store bu er stalls 
average perturbation metrics small programs exhibited large errors 
isolated cause results 
encouraging techniques ow context sensitive pro ling typically obtained similar results 
cct statistics table contains information size cct 
data structure increases size factor cct built call site basis 
total size data structure bytes benchmarks 
cct quite large programs vortex contain call paths 
table shows cct bushy tall tree 
addition gures show routine call records max replication accounts large fraction tree nodes 
nal columns report total number call sites allocated call records sites sites reached path 
gure particularly interesting case combination ow context sensitive pro ling produces precise result complete interprocedural path pro ling 
flow sensitive pro ling sections contains sample measurements hardware performance metrics intraprocedural paths 
processor stalls manifestations cache misses branch load latency resource contention general occur operations long latencies overlapped excessive contention arises resources 
processor dynamic scheduling logic delays operations preserve program semantics resolve resource contention 
compiler techniques trace scheduling instruction scheduling loop transformations reorder instructions reduce stalls 
compilers operate blindly apply optimizations program empirical basis making tradeo measurements show conventional approach ine cient best stalls heavily concentrated small number paths call hot paths 
cache misses path example table reports hot paths spec benchmarks ultrasparc data cache chip kb direct mapped cache 
hot paths intraprocedural paths incur total cache misses threshold parameter control number paths 
paths hot cold paths 
dense path hot path ratio program average ratio 
sparse path hot path average ratio 
sparse paths incur large number misses execute heavily poor data locality 
dense paths common sparse paths fortunate dense paths optimized compiler 
spec benchmarks excepting go gcc avg 
dense paths account avg 
cache misses 
considering hot paths dense sparse increases number paths increase coverage avg 
misses 
programs go gcc awell known reputation di ering rest spec benchmarks 
numbers corroborate observation 
execute roughly order magnitude paths programs path signi cant contribution program rate 
necessary reduce threshold hot paths 
change nds hot paths go account misses hot paths gcc account misses 
cases number hot paths executed paths fraction potential paths 
cache misses procedure way cache misses procedure 
table reports hot procedures spec benchmarks data cache 
hot procedure incurs cache misses 
dense procedure hot procedure average ratio 
sparse procedure hot procedure average ratio 
cache misses heavily concentrated small portion program 
avg 
procedures account avg 
cache misses 
time go gcc vortex signi cantly lower coverage programs 
lowering threshold improves coverage procedures cover misses go procedures cover misses gcc procedures cover misses vortex 
implications pro ling table demonstrates reporting cache misses procedure may help isolate aspects program behavior caused cache misses 
hot procedures execute paths average dense sparse procedures respectively knowing procedure incurs cache misses may help isolate path occur 
collecting reporting cache misses measurements statement level addition far expensive path pro ling alleviate problem 
benchmarks basic blocks hot paths execute average di erent paths type 
path pro ling ers low cost way provide insight program dynamic behavior 
related section describes previous related ow context sensitive pro ling 
call related performance measurement pro ling tools approximate context sensitive pro ling information heuristics 
tools qpt bl counts number times caller invokes callee approximate time procedure attributable di erent callers 
pro ling tools label procedure timings context information lost accurately recovered 
furthermore tools naive assumptions propagating timing information presence recursion results inaccuracy 
abnormalities result approximating context sensitive information known pf 
ponder fateman propose instrumentation schemes solve problems 
preferred solution associates procedure timing caller callee pair single procedure 
results level context sensitive pro ling 
generalizes complete contexts 
pure commercial pro ling system quantify uses representation similar cct record instruction counts procedures time spent system calls ben 
details overheads system unpublished 
goes incorporating path pro ling hardware performance metrics 
context sensitive measurement mechanisms call path pro ling approach context sensitive pro ling hal hg 
di ers substantially implementation overhead 
hall scheme re instruments re executes programs collect call path pro ling lisp programs top manner hal 
initially call sites main function instrumented record time spent callee 
measurements system re instruments program deepest level call graph examine particular behavior interest 
amount instrumentation small overhead introduced run quite low 
iterative re instrumentation re execution impractically expensive programs behavior 
contrast technique requires instrumentation execution phase record complete information calling contexts 
goldberg hall process sampling record context sensitive metrics unix processes hg 
interrupting process tracing call stack constructed context performance metric 
inaccuracy introduced sampling approach disadvantages 
sample requires walking call stack establish context 
size data structure unbounded sample recorded call stack 
calling context trees related sharir pnueli call strings sequences calls label values interprocedural ow analysis sp 
interprocedural analysis need bound size representation recursive programs de ne distributive meet operator call strings impractical 
need capture single execution behavior possible behaviors practical data structure 
jerding stasko ball describe approach compacting dynamic call trees proceeds bottomup fashion jsb 
hash consing create dag structure identical subtrees call tree represented exactly dag 
approach activations identical contexts may di erent nodes dag node equivalence de ned subtree rooted node path node 
summary flow context sensitivity data ow analysis increase precision static program analysis 
applied techniques dynamic program analysis program pro ling improve precision reporting hardware performance metrics 
previous tools associated metrics programs syntactic components missed spatial temporal interactions statements procedures 
paths procedure call graph capture program temporal behavior provide context interpret hardware metrics 
showed extend cient path pro ling algorithm track hardware metrics path procedure 
addition described simple data structure associate metrics paths program call graph 
measurements spec benchmarks showed run time overhead ow context sensitive pro ling reasonable techniques ectively identify small number hot paths pro table candidates optimization 
program paths identi ed pro ling close ties compilation 
compiler optimizations attempt reduce number instructions executed paths procedure mw bgs 
order ensure pro optimizations increase total instructions executed paths procedure strongly path procedure 
addition optimizations duplicate paths customize increases code size detriment high issue rate processors 
optimization complexity heuristics stems assumption paths equally 
compilers path pro les identify portions program optimization empirical basis making optimization tradeo ashok singhal sun microsystems assistance understanding ultrasparc hardware counters 
chilimbi mark hill chris provided helpful comments 
bal thomas ball 
ciently counting program events support line queries 
acm transactions programming languages systems september 
ben jim bennett 
personal communication november 
bgs bodik gupta interprocedural conditional branch elimination 
proceedings sig plan conference programming language design implementation june 
bl ball larus 
optimally pro ling tracing programs 
acm transactions programming languages systems july 
bl ball larus 
cient path pro ling 
proceedings micro pages december 
chang mahlke 
hwu 
pro le information assist classic code optimizations 
software practice experience december 
graham kessler mckusick 
execution pro ler modular programs 
software practice experience 
hal hall 
call path pro ling 
proceedings th international conference software engineering icse pages 
hg hall goldberg 
call path pro ling monotonic program resources unix 
proceedings usenix summer technical conference pages cincinnati oh 
jsb jerding stasko ball 
visualizing interactions program executions 
proceedings international conference software engineering appear may 
knu knuth 
empirical study fortran programs 
software practice experience june 
ls james larus eric schnarr 
eel machineindependent executable editing 
proceedings sigplan conference programming language design implementation pldi pages june 
lw alvin lebeck david wood 
cache pro ling spec benchmarks case study 
ieee computer october 
morel renvoise 
interprocedural elimination partial redundancies 
muchnick jones editors program flow analysis theory applications 
prentice hall englewood cli nj 
allen daniel reed harry performance measurement perturbation analysis 
ieee transactions parallel distributed systems july 
mw mueller whalley 
avoiding conditional branches code replication 
proceedings sig plan conference programming language design implementation pages june 
pf ponder fateman 
inaccuracies program pro 
software practice experience may 
reps ball das larus 
program pro ling software maintenance applications year problem 
technical report computer sciences department university wisconsin madison wi january 
sof pure software 
quantify user guide 

sp micha sharir amir pnueli 
approaches interprocedural data ow analysis 
steven muchnick neil jones editors program flow analysis theory applications pages 
prentice hall 
sun sun microelectronics 
ultrasparc user manual 
woodward 
experience path analysis testing programs 
ieee transactions software engineering may 
