efficiently counting program events support line queries thomas ball university wisconsin madison count events program execution program applications 
instrumentation method efficiently counting events program execution support line queries event count event counting differs basic block profiling aggregate count events kept set counters due difference solutions basic block profiling suited event counting 
algorithm finds subset points program instrument guaranteeing accurate event counts obtained efficiently point execution 
categories subject descriptors performance systems measurement techniques software engineering tools general terms algorithms languages additional key words phrases control flow graph counting instrumentation 
ability count events program execution required program analysis applications 
instruction counts determine time spent procedure graham debuggers execution driven simulators countdown timers return control executing program debugger simulator certain events mellor crummey leblanc reinhardt counts syn events events system calls measure performance parallel programs hollingsworth miller 
applications require capability query event count line program executes line program terminated 
investigate count events program execution efficiently support line queries event count 
algorithm efficiently supported part national science foundation ccr defense advanced research projects agency monitored office naval research contract xerox 
author address bell laboratories software production research department room lg box rd il esearch 
att com permission copy fee part material granted provided copies distributed direct commercial advantage acm copyright notice title publication date appear notice copying permission computing machinery 
copy republish requires fee specific permission 
acm acm programmmg languages systems vol september pages thomas ball counting querying program events uses program tation 
instrument program component algorithm instruments select points guaranteeing accurate event count obtained efficiently point execution 
event counting simple formalization 
program component basic block control flow edge constant number events denoted events 
goal event counting track total number events executed components 
applications debug gers simulators require completely accurate event counts program instrumentation obtain counts 
basic mentation methods event counting instrument program record number times component executes maintain basic block edge profile 
event count computed summing component counters weighted appro component executes times add events event count 
potentially large number counters summed query method suitable queries event count execution program query line 
instrument program record number events directly event counter 
straightforward approach add code compo nent increment event counter 
approach incur high overhead range programs small basic blocks ball larus 
furthermore instrumentation code dynamically added deleted programs patching basic block jump code stub rewriting original code overhead increase substantially kessler 
event counting scheme similar involves instrumenting control flow edges basic blocks procedure control flow graph 
previous shown tion control flow edges profile programs low execution time overhead samples goldberg ball larus 
mentation control flow edges basic blocks allows greater opportunity place code areas lower execution frequency 
efficient profiling instrumented edge counter incremented edge executes 
program execution propa gation phase determines count uninstrumented edge instrumented edges counts 
efficient event counting instrumented edge increments counter different increments 
pro gram execution event counts propagated uninstrumented mented edges determine event increment instrumented edge 
challenge determine necessary sufficient set edges instrument compute increment associated instrumented edge 
acm transactions programmmg languages systems vol september efficiently counting events edge increment exit exit fig 

example efficient event counting 
vertex querying exit gives example efficient event counting 
example number events vertex basic block denoted vertex label 
example control flow graph instrumented edges marked black dots 
instrumented edge constant increment increment 
amount added event counter time edge executes 
hard verify execution path exit event count computed instrumented edges path correct example count path exit increment increment exit exit 
effect efficiently counting events event counter may accurate points 
path executed event counter incremented 
hand path executed event count overestimates true count counts incorporated 
solve problem computing vertex query increment added event counter produces correct count 
shows query increment vertex control flow graph 
uninstrumented edges control flow graph form undirected spanning tree graph 
show spanning tree control flow graph instrumentation edges sufficient event counting 
simple depth search algorithm computes increment value edge 
cases cycles uninstrumented edges allowed explore 
background material 
control flow graphs spanning tree theory 
show count intraprocedural inter procedural events 
discuss related conclude 

background path directed graph sequence vertices edges form ul el vz er 
un edge acm transactions programmmg languages systems vol september thomas ball ul 
cycle path vi 
path cycle directed edge 
simple cycle cycle vertex occurs exactly vertex occurs exactly twice 
edge src tgt denote vertices source target respectively terms path cycle denote undirected paths cycles 
edge direction matters state explicitly path cycle directed 
control flow graph rooted directed graph special vertex exit distinct root vertex corresponds procedure way vertex represents basic block instruc tions edge represents transfer control basic block 
root vertex represents entry point procedure exit return point 
vertex directed path root vertex exit 
technical reasons edge exit root graph strongly connected 
exit vertex successors root vertex 
execution procedure induces directed path root vertex exit vertex 
addition edge exit root directed path turns directed cycle 
control flow graph directed spanning trees consider undirected 
spanning tree graph subgraph tree contains vertices set spanning tree edges edge called chord spanning tree 
addition chord spanning tree creates exactly simple cycle cycle called fundamental cycle denoted 
theorem knuth shows number times edge appears directed cycle control flow graph uniquely determined number times chord spanning tree graph appears cycle 
discussed section theorem applications related area profiling 
denote number times edge appears path cycle containing edges dw equal edges direction edges opposite directions theorem knuth 
control flow graph spanning tree directed necessarily simple cycle edges dir st ee 
intraprocedural event counting section focuses counting edge events procedure 
vertex events modeled edge events replacing vertex edge predecessors predecessors successors successors 
event count associated acm transactions programming languages systems vol september counting program events fig 

transformation vertices edges associated edge 
shows control flow graph transformation applied vertex 
edge contains constant number events denoted events 
goal intraprocedural event counting find small set edges edge constant increment directed cycle ex control flow graph ex increment ex events 
vee mentioned previously points execution path may accurate query points 
find fc edge query increment incomplete execution path ix starts root vertex ends edge ix vf section shows placing querying ix events 
instrumentation code chords spanning tree control flow graph sufficient event counting shows determine increment chord fundamental cycle 
section presents depth search algorithm computes increment chords linear time 
section shows compute query increments 
practice spanning trees chosen carefully order reduce execution overhead incurred chords 
concern issue 
shown ball larus different spanning trees produce different run time overhead 
acm transactions programmmg languages systems vol 
september thomas ball computing edge event increments increment value chord defined fundamental cycle direction edges cycle increment events dir 
vee edge direction positive contribution increment edge opposite direction negative contribution 
course increment edge instrumented 
shows fundamental cycle chord control flow graph increment chord exit edges exit directed direction edge 
fundamental cycle defines increment exit edge opposite direction edge exit direction 
note edges contribute increment 
theorem straightforward show definition increment desired property shown theorem theorem 
control graph set chord edges induced spanning tree graph 
directed cycle ex cfg ex increment ex events 
vfs ves proof 
substituting definition increment left hand side equation moving ex inside inner sum resulting equation yields ex uent dir fe equation rewritten bound outer sum bound inner sum follows ex du 
vf st gr moving events inner sum yields events ex dir st knuth theorem inner sum equation equal finishes proof 
acm transactions programmmg languages systems vol september qp efficiently counting program events qy el exit fig 

fundamental cycles graph respect tree 
fundamental cycle shown edges hanging context edges computing edge increments depth search naive algorithm determining increment chord simply traverse fundamental cycle 
fundamental cycle worst case size chords naive algorithm run worst case time 
presents algorithm uses depth search spanning tree determine increments chords time 
parameters depth search procedure dfs integer current event increment vertex tree edge just traversed reach chord visited twice algorithm tree edge visited exactly 
running time algorithm clearly 
explain algorithm show computes increment correctly chord point depth search just traversed path ends chord edge added events 
change edge direction events negated 
edge direction negated number times negation making positive contribution increment assignment increment takes place 
edge opposite direction negated odd number times making negative contribution increment 
event value associated chord added chord increment depth search 
show increment correctly computed chord cases consider root vertex 
case depth search reach times paths pi 
edge shared paths union edges 
shown edges direction acm transactions programmmg languages systems vol september thomas ball increment od dfs root null increment events procedure dfs events vertex edge function dlr edge integer andf common endpoint dfs lhr events events src null od src src src dfs dtr events events tgt andf od src tgt opposite increment increment dw events fi fig algorithm determining increment chord depth search spanning tree graph positive contribution increment edges opposite direction negative contribution increment desired 
suppose root vertex 
depth search reach times paths pi 
case pi share common prefix containing edges members 
edge suffix pi pj suffix 
edge shared union edges pj pj 
clear event values edges correctly accounted increment 
show event values accumulated prefix cancel 
suppose edge encountered call dfs 
clear edge direction edge paths pi 
event value negated number times path odd number times path canceling 
computing query increments mentioned trade efficiently counting pro gram events number points program queries accurate 
program component updates event counter queries accurate component 
updating event count chord edges spanning tree leads fewer accurate query points 
problem solved computing query increment querying edge query just executing edge simply added event counter obtain correct event count event counter acm transactions programmmg languages systems vol september efficiently counting program events updated incomplete execution path starts root vertex ends edge ix uents ix 
vee vf edge accurate query point 
computing easy 
set spanning tree edges 
add edge tgt root control flow graph treat member edge chord spanning tree fundamental cycle 
defined increment 
addition edge incomplete path 
starts root vertex ends yields directed cycle 
itfollows ix ix events lx 
vee directed cycle theorem implies lx events lx 
vf increment querying ix formed adding edge ix follows ix ix 
vf illustrates computation edge control flow graph 
chord edge bou added control flow graph define fundamental cycle shown 
increment 
compute query increment edges control flow graph simply add chord edge tgt root original edge apply algorithm determine increments chord edges 
inte event counting previous section addressed count events procedure 
section describes problems efficiently counting events procedure boundaries solutions 
problem maintain global count events executed entire program capability query counter accurately place program 
problem solved steps 
step query increments update event counter correctly execution procedure terminates early exit vertex due exceptional condit interprocedural transfer control setjmp mp 
acm transactions programming languages systems vol september thomas ball querying increment flg computmg computes spanning tree determines chord edge increments procedure control flow graph 
second step ensures event count correct procedure passes control procedure treating procedure calls queries immediately call event counter incremented query increment call immediately call event counter decremented value ensure counts correct call query event counter vertex procedure need add event counter 
second step queries event counter pro expensive example illustrates suppose vertex control flow graph contains call procedure passes control event count increment accounted vertices executed 
accurate query vertex procedure add querying event counter 
general second step query may perform addition active procedure 
second problem maintain count 
call site call procedure events executed procedure procedures calls transitively called procedure number counters solve problem 
procedure global counter initialized program execution tracks events executed procedures transitively called updated inside procedure procedure call site call pair global counter counter local variable procedure counter initialized execution initialized described 
counter increments determined follows procedure spanning tree chord increments computed 
incre call poss ble increment decrement increment nearby chords acm transactions programming languages systems vol september efficiently counting program events ments events solely inside update counter 
call site call procedure assignment cnt placed immediately call assignments cnt cnt placed immediately call 
difficult see solution con ect induction calling history program represented call tree 
show base case 
induction step quite similar 
base case leaves call tree call 
recording cnt lent call difference cnt number events executed procedure called call site query call site counter reflect number events terminated calls call site 
effect active call reflected count call terminates 
add query increment get accurate event count 
outside procedure value current reflect number events executed procedures called updated inside procedure 
related number works related topic efficiently profiling programs instrumentation knuth knuth stevenson sarkar samples goldberg ball larus 
sarkar spanning tree determine small set points control flow graph place counters vertex basic block profiles edge profiles derived measured points 
knuth theorem stated section shows number times control flow edge appears execution uniquely determined number times chord spanning tree appears execution 
edge profiling chord associated counter incremented time chord executes 
execution knuth theorem applied determine count tree edges chords counts 
event counting knuth theorem program execution determine increment value chord summarizes event counts associated tree edges 
herd increment value may zero case instrumentation chord unnecessary profiling chord edge instrumented 
mellor crummey leblanc describe call instruction counter 
software instruction counter count number instructions executed 
software instruc tion counter pair pc sic pc program counter sic counter incremented backward branch procedure call executed 
program counter value reused backward branch taken chain recursive calls pair values uniquely es particular instruction program execution acm transactions programmmg languages systems vol september thomas ball history 
counter utility cyclic debugging interested repeated executions stopping particular state 
defined software instruction counter count number instruc tions executed 

events program execution may counted efficiently instrumenting chords spanning tree control flow graph 
efficient depth search algorithm computes increment value chord query increment vertex query needs 
ball larus optimally tracing programs acm tram program lang syst july goldberg reducing overhead counter execution tech rep csl tr computer systems laboratory stanford univ stanford calif ott graham kessler mckusick execution profiler modular programs softw pratt 
exper 
hollingsworth dynamic control performance large scale parallel systems tech rep 
madison jan 
fast breakpoints des gn implementation acm sigplan conference programming language design implementation sig plan 
june knuth art computer programmmg vol 
fundamental algorithms nd ed addison wesley reading mass knuth stevenson optimal measurement points program frequency counts bit leblanc software instruction counter rd asplos proceedings 
sigarch comput 
arch news optimal software probes delimited programs 
ieee trans softw eng 
se jan hill larus lebeck wm wood wmd tunnel virtual prototyping parallel computers proceedings acm sigmetrics conference measurement computer systems 
acm new york 
profile dr ven ph thesis rep ucb csd 
berkeley apr sarkar average program execution times variance pro ceedings acm sigplan conference programming language de gn imple mentation portland ore 
acm sigplan received october revised march accepted april acm transactions programmmg languages systems vol september 
