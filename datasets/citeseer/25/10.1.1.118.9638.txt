modelling optimising run time reconfigurable systems wayne luk shirazi department computing imperial college queen gate london england sw bz simple model specifying optimising designs contain elements reconfigured run time 
model control mechanism reconfiguration implemented ways user multiplexers logic blocks fpgas support dynamic partial reconfiguration 
model encoding layout information assessing tradeoffs circuit speed design size reconfiguration time complexity reconfiguration controller 
approach illustrated various reconfigurable implementations filtering locating edges images 
design tradeoffs implementations evaluated pci platform contains xilinx device 
fpgas favoured choice implementing glue logic experimental systems hardware prototypes advantages short turnaround time user reconfigurability low development costs 
density speed devices fraction integrated circuits similar technology due area time overheads providing uncommitted logic routing resources associated control circuitry 
designers realize key overcoming drawbacks exploit fully flexibility fpgas especially rapidly partially reconfigured 
purpose multi peter cheung department electrical engineering imperial college exhibition road london england sw bt plex operations time domain design maintain high performance minimising required amount resources 
run time partial reconfiguration fpgas computer vision designs edge corner detectors applications include coding decoding neural networks database searching 
hardware reconfiguration increasingly popular deployment largely art involving tedious error prone crafting low level designs 
studies specification development methods designs elements reconfiguring run time assessing trade offs circuit speed design size reconfiguration time complexity reconfiguration controller 
objective enhance effective reconfiguration technology addressing issues 
particular appropriate model necessary provide basis techniques involved producing efficient reconfigurable systems analysing trade offs 
overview follows 
section describes simple model specifying visualising developing reconfigurable systems 
section covers architecture dimensional image processing reconfigurable implementations architecture developed section 
section describes pci board evaluate reconfigurable designs section shows reconfigurable implementations mapped xilinx device board 
concluding remarks section 
modelling reconfiguration appropriate model key understanding new technology exploiting effectively 
main difficulty understanding reconfiguration dynamic nature 
simple model proposed uses static network capture dynamic behaviour 
basic idea straightforward 
block configured behaved described network tween control blocks 
responsible routing data results external ports desired instant choice determined runtime conditions 
possible control inputs shown 
static network modelling design behave depending control blocks readers may feel behaves demultiplexer behaves multiplexer note components may possible implementations intended entities need implementable 
importance control blocks stem simple intuitive properties possess order useful reasoning designs property cascade behave pair wires time wires active identical network collapses just contains 
property corresponds observation design reconfiguring block time distinguish reconfigure 
property ii implementations satisfy properties acceptable 
property cascade behave pair wires wires active time 
property ii design reconfiguring block time distinguished reconfigure 
properties help refining designs 
important optimisation developing reconfiguring designs minimise amount reconfiguration 
achieved avoiding reconfigure components common configurations 
properties described reduce granularity reconfiguring elements steps 
identify common blocks temporally consecutive configurations partition components 
insert pair control blocks partition property 
collapse common blocks single block property ii 
example consider simple design blocks behaves series series 
application steps move outside design behaves series series dotted line separates common configurations 
property introduce pair dotted line 
property ii collapse circuit single block 
reconfigurable sandwich shown 
model informally formalised various ways 
capturing model ruby language rebecca system provide means simulate designs assist realisation examples ruby reasoning reconfiguring designs 
notations csp may useful 
summarise features model provides way specifying reconfigurable designs static network appropriate control blocks 
provides methodology developing recon systems design global reconfiguration usually easier understand cient steps outlined vary number elements required reconfiguring 
steps altering granularity re configuring regions extract registers common temporally consecutive configurations register values configuration configuration 
method may guide cal implementation dynamically reconfiguring designs instance expressed ruby framework facilitates encoding layout information 
readers familiar ruby recognise transformations captured concisely ruby 
appropriate context control blocks implemented fan outs multiplexers merged processing logic examples 
filtering finding edges illustrate approach look architecture consists gaussian filter gf removing noise image sobel edge detector locating vertical edges block ved horizontal edges block image 
components new representative low level image operations benefit hardware acceleration 
gf ved design consists gaussian filter gf vertical edge detector ved horizontal edge detector 
blocks gf ved realised masks respectively 
consider implementations involve run time reconfiguration design devices support partial reconfiguration design reconfiguration mechanism largely included user circuit 
design shall estimate size reconfiguration time implemented xilinx device 
device particular interest capability rapid partial run time reconfiguration 
details device provided 
reconfiguring implementations optimised implementations gaussian filtering sobel edge detection 
binomial filter structure implementing gaussian filtering core design contains adders registers 
implementation gf block gaussian filtering 
block corresponds stage delay line width image 
unlabelled blocks represent registers 
implementation ved block finding vertical edges image 
exploit values coefficients mask avoid multiplication implementing multiply divide 
show vertical horizontal edge detectors implemented hardware 
abs block computes absolute value 
abs div mux design reconfigured core element gf ved 
dotted lines identify components common configurations 
implementation smaller number reconfiguring elements suitable partially reconfigurable fpgas 
variation implements fan multiplexer reconfigurable adder bit level implementation 
implementation block finding horizontal edges image 
consider case need implement blocks gf ved sequentially reconfiguration minimise space 
size abs bvh cell ing block dictated largest configuration case gf 
reconfigurations involved gf ved ved gf 
illustrate techniques described section produce optimised reconfigurable designs 
reconfigure gf block ved block need transform adder register pairs registers ii divide block abs block 
shows development optimised implementations 
explained section identify common components successive configurations indicated dotted bvh cell bvh cell bvh cell mux bvh architecture containing circuitry mux support reconfiguring gf ved 
lines 
property property ii reduce size reconfiguring region result shown 
design implemented effectively devices capable partial reconfiguration provided registers retain state parts circuit undergoing reconfiguration 
shows local reconfigurations involved adder transformed wires second adder transformed 
alternative implementation shown derived implementing fan multiplexer mux check control block implementations support property property ii operating environment 
reconfiguring component reconfigurable adder implemented array controlled add subtract cells page 
complete design shall call may larger shown extra hardware multiplexing shorter reconfiguration time simpler reconfiguration controller needs reconfigure control inputs mux adder block 
kinds tradeoffs xilinx device illustrated section 
shows architecture called bvh reconfigured behave gf ved 
reconfiguration control part design div abs mux implementation mapped efficiently devices support partial reconfiguration 
pci board architecture viability designs demonstrated pci board supplied xilinx development contains xilinx device 
explained earlier implementation efforts focused xilinx devices ability rapid partial reconfiguration 
shows primary components board architecture 
bit wide memories data flow controlled bus switches multiplexer chips 
xilinx fpga pci bus interface 
board architecture allows xilinx reconfigured pci interface runtime 
pci interface provides direct access host pc logic cells user circuit 
output cell function unit read pci interface flip flop cell written 
find facilities useful testing evaluating designs especially involving run time reconfiguration 
memory xilinx organised banks 
bank memory accessed separate address busses memories controlled individually 
memory architecture allows multiple modes operation set selecting multiplexers compute element west data external data xilinx xilinx pci interface pci bus east data bus switch east address west address mux mux bank sram sram bank sram sram pci board demonstrating reconfigurable designs 
bus switches desired manner 
delay lines designs see example implemented efficiently memories 
bit external datapath available xc input output blocks 
datapath attach real time video input 
mapping xilinx devices xilinx device contains array cells configured logic function block multiplexer latch 
hierarchical routing network connecting cells 
studied ways realising image processing design described section 
time writing completed detailed implementation test design bit version shown 
cells arranged block implement full adder latch latches functions taken resources cal technology 
arithmetic building blocks involve nearest neighbour connections design number cells savings bvh bvh gf ved hierarchical routing occasionally overcoming routing congestion interconnecting cells 
reg mux add implementation xilinx device 
complete bvh design takes cells xilinx device 
extra time required reconfiguring design filter mode edge detector modes vice versa multiplexers adder require reconfiguration set reset cycle input data 
reconfiguration controller kept simple needs write table size statistics 
components appropriate time 
routing congestion problem memory mapped input output feature xilinx fpga routing control signals external pins 
alternative way implementing image processing design described section individually optimised configurations gf ved reconfiguring bvh architecture 
method estimate take cycles reconfigure gf ved cycles ved cycles gf 
explained earlier size design gf block largest configurations 
reconfiguration controller capable reconfiguring appropriate cells appropriate time required power dissipation may larger implementation bvh size reconfiguring region larger 
table summarises size various blocks 
conclude design smaller shorter critical path ii design estimated save cycles reconfiguration time requires simpler reconfiguration controller may consume power 
optimised configuration needs developed 
interesting note xilinx devices include support efficient implementation design styles 
design takes longer reconfigure design ii reconfiguration time independent datapath size wildcard registers devices 
second extra multiplexing circuitry design ii implemented efficiently multiplexer data inputs takes single cell 
memory mapped input output feature xilinx device avoid need routing reconfiguration control signals external pins 
design design ii run faster speed required real time video performance improved including additional pipeline stages designs 
concluding remarks rapid run time reconfiguration offers possibility implementing architectures flexibly high performance minimising resources required 
simple model specifying visualising developing designs contain elements reconfigured run time 
architecture image processing illustrate application model design tradeoffs resulting reconfigurable implementations evaluated xilinx devices 
clearly described represents exciting project 
research includes extending model applications instance including temporal information model ii studying parametrisation macros support reconfiguration iii development techniques tools automatically varying granularity reconfiguring regions estimating resulting impact metrics size performance complexity reconfiguration controller iv investigating techniques conjunction optimisation methods serialisation benefit compilers declarative imperative languages 
john gray tom anonymous referees comments suggestions gary glenn baxter help pci design 
support xilinx development uk overseas research student award scheme gratefully acknowledged 
luk binomial filters journal vlsi signal processing vol 
pp 

gray reconfigurability variable length code detection video rates field programmable logic applications moore luk eds lncs springer pp 

churcher wilkie xc fastmap processor interface field programmable logic applications moore luk eds lncs springer pp 

gokhale marks automatic synthesis parallel programs targeted dynamically reconfigurable logic arrays field programmable logic applications moore luk eds lncs springer pp 

guo luk compiling ruby fp gas field programmable logic applications moore luk eds lncs springer pp 

hadley hutchings design methodologies partially reconfigured systems proc 
fccm athanas pocek eds ieee computer society press pp 

hoare communicating sequential processes prentice hall 
hogg singh sheeran new hdl research challenges posed dynamically reprogrammable hardware proc 

hwang computer arithmetic john wiley 
jones oswald schoner issues wireless video coding run time reconfigurable fpgas proc 
fccm athanas pocek eds ieee computer society press pp 

run time reconfiguration fpgas scanning genomic databases proc 
fccm athanas pocek eds ieee computer society press pp 

luk systematic serialization array architectures integration vlsi journal vol 
february pp 

luk ferguson page structured hardware compilation parallel programs fpgas moore luk eds ee cs books pp 

luk wu page hardware software codesign multidimensional programs proc 
fccm buell pocek eds ieee computer society press pp 

luk declarative approach incremental custom computing proc 
fccm athanas pocek eds ieee computer society press pp 

law artificial neural network implementation fine grained fpga field programmable logic architecture synthesis applications hartenstein eds lncs springer pp 

