blueprint introducing disruptive technology internet larry peterson princeton university tom anderson university washington david culler intel research berkeley timothy roscoe intel research berkeley pdn july appears proceedings acm workshop hot topics networks hotnets princeton nj october 
blueprint introducing disruptive technology internet larry peterson princeton university tom anderson university washington argues new class geographically distributed network services emerging effective way design evaluate deploy services overlay testbed 
conventional network testbeds advocate approach supports researchers want develop new services clients want 
dual turn suggests design principles widely supported existing testbeds services able run continuously access slice overlay resources control resources distributed overlay management services run slices apis designed promote application development 
believe testbed supports design principles facilitate emergence new network architecture 
briefly describes planetlab overlay network designed principles mind 

internet founded simple model routers inside network responsible forwarding packets source destination application programs run hosts connected edges network 
years seen blurring distinction packet forwarding application processing new widely distributed applications making forwarding decisions 
emerging class applications includes network embedded storage peer topeer file sharing content distribution networks robust routing overlays scalable object location scalable event propagation 
time network elements layer switches transparent caches performing application specific processing 
emerging services result convergence historically separate research communities 
distributed systems community traditionally viewed network merely providing bit pipes edge machines increasingly embedding functionality important crossroads access points network 
network community traditionally worried forwarding packets regard application semantics increasingly aware synergy appears acm workshop hot topics networks hotnets october 
david culler timothy roscoe intel research berkeley comes unifying computational storage resources network requirements application 
believe full integration perspectives result new service oriented network architecture 
unfortunately done environment internet influenced research increasingly shaped commercial interests 
fact report national research council points internet successful widely adopted technologies subject hard introduce new capabilities current technology run course replace better 
existing industry players generally motivated develop deploy disruptive technologies 
offers blueprint introducing disruptive technologies internet overlay networks 
overlays provide right opportunity innovation rapidly programmed provide innovative capability feature having compete existing infrastructure terms performance reliability administrative tools 
time expect weight overlays place underlying internet result emergence new architecture way internet overlay network influenced telephony network built 
concludes speculating new architecture look 

design deployment example applications mentioned currently designed studied combination simulation network emulation small scale testbeds 
systems greatly benefit testbed supports large scale real world experiments 
overlays play roles testbed applications testbed structured overlays testbed overlay perspective controlling managing deploying applications 
define testbed main dimensions 
physical dimensions overlay network large order sites enable wide deployment services measurement tools 
envision majority sites running single overlay node connects large client population overlay 
think nodes providing viewpoints network 
selected provide rich diversity link behavior wide spread geographic coverage 
envision overlay including roughly sites substantial computing resources cluster machines located network crossroads peering points location centers 
second overlay consists main software components virtual machine monitor vmm running node management service control overlay 
vmm specifies interface services distributed testbed written 
controlled interface resources network ports logical disks interface provides direct access hardware 
management service control testbed example discover set nodes overlay monitor health keep software running nodes date 
final dimension distinguishing characteristic approach advocate overlay mode operation 
view overlay strictly testbed take long term view overlay research testbed deployment platform 
words overlay support seamless migration application early prototype multiple design iterations popular service continues evolve 
overlay research testbed deployment platform synergistic 
testbed overlay value give researchers access large set geographically distributed machines realistic network substrate experiences congestion failures diverse link behaviors potential realistic client workload 
value deployment platform provide researchers direct technology transfer path popular new services users access new services 
believe supporting roles critical success system 
important consequence dual testbed support continuous operation network services opposed providing mechanisms starting stopping experiments 
leads obvious tension needs test measure researchers reproducible results interested system deployment platform 
overlay bandwidth latency loss achieved network variable unpredictable 
overlay real value research platform providing realistic network conditions 
dual paradigm implies experimental services share nodes unreasonable dedicate order distributed nodes single experimental service months time 
leads strong security resource control requirements virtual machine monitor 
way understand essential aspects approach proposing compare current testbed efforts 
internet includes abilene backbone physical network includes high speed optical links connecting major research universities 
network nodes closed commercial routers making impossible introduce new functionality middle network 
contrast main virtue overlay nodes fully programmable 
emulab network experimentation facility supported university utah 
researchers able schedule set nodes experiments dictate nodes configured emulate different network topologies 
overlay experimental aspect dual role deployment platform means experimental systems run continuously limited period time 
grid collection middleware called globus allows researchers distribute large scientific applications distributed set computational resources 
main difference grid proposed overlay emphasis grid primarily interested gluing modest number large computing assets highbandwidth pipes overlay primarily concerned scaling bandwidth intensive applications wider collection nodes 
overlay testbed grew active networks initiative 
allows service developers dynamically load applications overlay nodes 
high level goals similar important difference active networks primarily focused supporting extensibility network forwarding function take inclusive view types applications deployed network including involve significant storage component 
overlay network support ip ip tunneling 
includes gui toolset establishing monitoring specific overlay configurations 
proposed overlay share goal supporting multiple independent overlays set machines limited ip tunnels hope support higher level overlays implemented peer peer systems 
alternative developing new service traditional testbed package application run desktop machine 
proves popular service users install 
file sharing systems napster kazaa successfully adopted approach clear extends styles services 
importantly deploying services wild viral dissemination shortcomings 
service immediately widely popular 
impossible example research studies algorithms managing overlay networks 
technically superior solution applications content happen popular 
second difficult modify system deployed making process learning experience cumbersome 
version algorithms generally iteration design cycle requires new set compelling applications 
third systems secure 
problem kazaa exposing files local system just example potential dangers 
prefer system allows understand sandbox viral peer peer applications users need trust entire systems coding standards random peer peer developers 

design principles vision overlay serves service developers service users implications architecture system 
section outlines key design principles shape overlay 
slice ability services expected run continuously globally scheduled run time overlay support distributed virtualization 
application acquires runs slice overlay 
distributed virtualization turn requires node multiplex multiple competing services 
key responsibility vmm running node allocate schedule slices node processor link storage resources 
node slicing mechanism secure protects node faulty malicious services 
resource control mechanism proportional share scheduling enforce bounds resources consumed service 
scalable sense node able efficiently multiplex resources large number services 
note node able enforce slices local resources including outgoing link bandwidth system overlay network possible ensure application receives predictable network performance internet support bandwidth reservations 
addition viewing slice collection resources available set nodes slice characterized global level terms nodes resources spread internet 
example slice contain resources distributed wide area possible wish ensure resources autonomous systems high degree connectivity 
distributed control resources dual role testbed deployment platform types users researchers want install evaluate new services clients want access services 
initially researchers users important researcher community develop applications want order function deployment platform overlay provide explicit support people willing add nodes overlay sake accessing services 
user populations different views nodes 
researchers want dictate services deployed 
may simple nodes possible may want dictate certain node properties crossroads site sufficient storage capacity 
clients want decide services run nodes 
required allocate slices machines experimentation postponing need able set policy resources allocated different services 
shared control resources implies highly decentralized control structure 
example central authority may provide legitimate service developers credentials allow request slice node node independently deny request local policy 
essence node owner decides node resources may consumed different services 
security perspective applications trust central testbed authority physical security nodes individual sites 
ultimately means service overlays need aware cross administrative domain boundaries protect rogue elements 
management view testbed management single fixed service overlay management set largely independent sub services running slice overlay 
example overlay management partitioned follows discover set nodes overlay learn capabilities monitor health instrument behavior nodes establish default topology nodes manage user accounts credentials keep software running node date extract tracing debugging information running node 
sub services part core system managing user accounts exist single agreed version 
provided set alternative services 
system need provide default set services bundled expect replaced better alternatives time 
words management structure engineered innovation evolution 
better appreciate power able run new management services slice overlay imagine able go back days ip defined put instrumentation hooks need today measure internet traffic 
overlay ensures fraction node programmed give ability 
strategy management service requires appropriate interfaces defined 
individual services depend hooks vmm example possible retrieve status node resources 
second various sub services may depend example node monitoring service provide input realtime database queried resource discovery service 
allowing services evolve independently require common representation node attributes 
application centric interfaces single greatest failure testbeds general promote application development 
reason short lived experience teaches builds applications pure testbeds lifetime definition limited 
related point usually little motivation integrate testbed desktop machines making nearly impossible clients access applications available 
hope designing overlay serve research testbed deployment platform lower hurdle application development 
tangible problem difficult simultaneously research needed create effective testbed testbed platform writing applications 
users require stable platform odds need research platform 
matters worse research results new apis requiring applications written scratch 
final design principle overlay support existing widely adopted programming interface platform related research changing underlying implementation time api remains largely unchanged 
alternative api emerge effort new applications written original api maintained legacy applications 

planetlab currently building overlay testbed called planetlab adheres design principles 
envision planetlab achieving goals outlined phases 
strategy incrementally enhance capabilities accordance user community hope attract 
seed phase seeded planetlab machines provided just functionality meet needs small known set researchers 
researchers implementing experimenting services mentioned 
expect support client community phase planetlab function pure testbed 
researchers clients opening planetlab larger research community expect drive size sites 
recognize adding clusters strategic internet crossroads require broader government industrial support 
phase user community primarily researchers experimenting services 
expect researchers primitive services provided applications 
attracting real clients thesis research community poised develop innovative services true client base follow 
accessing service world equivalent joining overlay network expect growing client community connect planetlab 
extent successful services developed expect spin physically distinct copies planetlab 
hardware dedicated planetlab nodes opposed client owned desktop machines 
minimize heterogeneity headaches prescribe permitted hardware configurations 
ensure conformance common interfaces policies central planetlab authority opposed node owners root access machines 
node owners able establish policy nodes sliced planetlab retain right allocate fraction node experimental services 
ensure stability planetlab maintain core highly available nodes sites 
initial default management service provided combination ganglia resource monitoring tool boot software update process account project management interface patterned emulab 
currently evolving ganglia separate components resource monitor reports resources available node resource broker aggregates information set nodes responds requests slices 
evolving account managment way moves planetlab away simply providing set unix accounts service oriented architecture services dynamically create slices run 
stage process service manager contacts resource broker select discover set candidate nodes constitute slice contacts nodes set initialize network virtual machines involves node admission control decision launches service resulting slice 
terms vmm strategy evolve kernel component planetlab strong notion isolation kernel maintaining operational system usable researchers experimentation longterm deployment 
pursuing complementary development efforts 
builds traditional unix operating system distinguish interface resource allocation protection applied isolation interface system call interface program developers application interface 
settled linux popular platform implementing network services 
plan augment linux functionality provide better security resource isolation services running 
attractive way doing includes virtualizing kernel hardware style vservers replacing privileged kernel functionality safe alternatives safe raw sockets adding support slice ability resource containers plus proportional scheduling link cpu 
second effort revolves isolation kernels denali provide low level isolation interface closely resembles virtualization hardware 
operating systems linux bsd windows xp ported virtual machine operation greatly simplified similarity virtual machine architecture real hardware operating systems originally developed 
expectation easier assure correctness minimal isolation kernel improving security system 

concluding remarks just internet originally experimental network evolved ubiquitous communication substrate time believe possible design shared overlay infrastructure evolve modest research testbed planetary scale service deployment platform 
fact accident underlying design philosophy similar internet define minimally required interfaces virtualization slice ability system engineered evolve 
second interesting comparison point internet experimental testbeds planetlab 
internet originally overlay network viewed underlying telephony system providing collection leased lines grew weight internet eventually contributed complete re design phone network 
likewise overlay networks planetlab initially view internet providing set bit pipes time internet architecture evolve better support service level overlays 
words interesting questions emerging effort interaction internet overlay network planetlab eventually results new service oriented network architecture 
illustrative example process take place case multiple overlay services running planetlab independently probe network part topology selection process 
inefficient needs shared topology probing mechanism 
additional step mechanism define interface allows overlays internet share topology information 
eventually imagine designed topology services evolving services employing inventing new 
single winner emerges effort subsumed new internet architecture nature programmable overlay means services continue define routing machinery remains subject speculation 


www isi edu 
andersen balakrishnan kaashoek morris 
resilient overlay networks 
proceedings th acm symposium operating systems principles sosp pages chateau lake louise banff alberta canada october 
balazinska balakrishnan karger 
ins twine scalable peer peer architecture intentional resource discovery 
proceedings pervasive international conference pervasive computing zurich switzerland august 
dabek kaashoek karger morris stoica 
wide area cooperative storage cfs 
proceedings th acm symposium operating systems principles sosp chateau lake louise banff alberta canada october 
druschel castro 
kermarrec rowstron 
scribe large scale decentralized application level multicast infrastructure 
ieee journal selected areas communications 
foster kesselman 
globus metacomputing infrastructure toolkit 
journal supercomputer applications 
fraser hand harris leslie pratt 
computing infrastructure 
www cl cam ac uk research srg pdf 
ganglia 
ganglia sourceforge net 
grid 
www globus org 
internet 
www internet edu 

virtual private servers security contexts 
www qc ca context hc 
kubiatowicz bindel chen czerwinski eaton geels gummadi rhea weatherspoon weimer wells zhao 
oceanstore architecture global scale persistent storage 
proceedings ninth international conference architectural support programming languages operating systems asplos nov 
national research council 
looking fence networks 
national academy press washington 
ratnasamy handley karp shenker 
topologically aware overlay construction server selection 
proceedings ieee infocom conference new york ny june 
rowstron druschel 
pastry scalable distributed object location routing large scale peer peer systems 
proceedings th ifip acm international conference distributed systems platforms middleware heidelberg germany november 
rowstron druschel 
storage management caching past large scale persistent peer peer storage utility 
proceedings th acm symposium operating systems principles sosp pages chateau lake louise banff alberta canada october 
savage collins hoffman snell anderson 
effects internet path selection 
proceedings acm sigcomm conference cambridge ma september 
stoica morris karger kaashoek balakrishnan 
chord peer peer lookup service internet applications 
proceedings acm sigcomm conference san diego ca september 
touch hotz 
bone 
proceedings third global internet mini conference globecom pages sydney australia november 
wang pai peterson 
effectiveness request redirection cdn robustness 
proceedings th symposium operating system design osdi boston ma december 
whitaker shaw gribble 
scale performance denali isolation kernel 
proceedings th symposium operating system design osdi boston ma december 
white lepreau stoller ricci hibler barb 
integrated experimental environment distributed systems networks 
proceedings th symposium operating system design osdi boston ma december 

www cl cam ac uk research srg boot 
