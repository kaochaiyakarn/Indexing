near optimal hierarchical path finding adi martin ller jonathan schaeffer department computing science university alberta edmonton alberta canada jonathan cs ualberta ca problem path finding commercial computer games solved real time constraints limited memory cpu resources 
computational effort required find path search algorithm increases size search space 
pathfinding large maps result serious performance bottlenecks 
presents hpa hierarchical path finding hierarchical approach reducing problem complexity path finding grid maps 
technique abstracts map linked local clusters 
local level optimal distances crossing cluster pre computed cached 
global level clusters traversed single big step 
hierarchy extended levels 
small clusters grouped form larger clusters 
computing crossing distances large cluster uses distances computed smaller contained clusters 
method automatic depend specific topology 
random real game maps successfully handled domainspecific knowledge 
problem decomposition approach works domains dynamically changing environment 
technique advantage simplicity easy implement 
desired sophisticated domain specific algorithms plugged increased performance 
experimental results show great reduction search effort 
compared highly optimized hpa shown times faster finding paths optimal 
problem path finding commercial computer games solved real time constraints limited memory cpu resources 
hierarchical search acknowledged effective approach reduce complexity problem 
detailed study hierarchical path finding commercial games published 
part explanation game companies usually ideas source code available 
industry standard iterative deepening ida 
generally faster ida uses memory 
numerous enhancements algorithms run faster explore smaller search tree 
applications especially multiple moving real time strategy games time space requirements limiting factors 
describe hpa new method hierarchical path finding grid maps performance tests 
technique abstracts map linked local clusters 
local level optimal distances crossing cluster pre computed cached 
global level action cross cluster single step moving adjacent atomic location 
method simple easy implement generic applicationspecific knowledge apply technique independently map properties 
handle variable cost terrains various topology types forests open areas obstacles shape building interiors implementation changes 
real time path finding applications complete path needed 
knowing moves valid path suffices allowing mobile unit start moving right direction 
subsequent events may result unit having change plan obviating need rest path 
returns complete path 
contrast hpa returns complete path sub problems 
sub problem solved giving unit moves path 
needed subsequent sub problems solved providing additional moves 
advantage unit change plan effort wasted computing path goal node needed 
hierarchical framework suitable static dynamically changing environments 
case assume local changes occur immobile topology elements bomb destroys bridge 
recompute information extracted modified cluster locally keep rest framework unchanged 
second assume mobile units map computed path blocked unit 
compute path reduced effort spend additional effort refine low level representation 
quickly get character moving proven direction refine parts path character needs 
path blocked replan path current position character 
hierarchy method number levels making scalable large problem spaces 
problem map large larger number levels answer reducing search effort price storage pre processing time 
technique produces sub optimal solutions trading optimality improved execution performance 
applying path smoothing procedure solutions optimal 
motivation consider problem traveling car los angeles california toronto ontario 
specifically minimum distance travel car santa monica blvd los angles street toronto 
detailed roadmap north america showing roads annotated driving distances implementation compute optimal minimum distance travel route 
expensive computation sheer size roadmap 
course human travel planner low level detail 
solve problems 
travel santa monica boulevard major highway leading los angeles 

plan route los angeles toronto 

travel incoming highway toronto street 
third steps require detailed roadmap city 
step done high level map roads connecting cities abstracting away detail city 
effect human travel planner uses abstraction quickly find route los angles toronto 
treating cities black boxes search guaranteed find shortest route 
example may faster stay highway cities highway goes city leaving highway going city shorter route 
course may faster route city speeds slower highway speeds example trying minimize travel distance 
abstraction taken higher level planning state province level 
path reaches state boundary compute best route state state 
know entrances exits states plan inter state routes 
may result sub optimal solution 
taken extreme abstraction country level travel united states canada 
clearly comes point abstraction coarse effectively useless 
want adopt similar abstraction strategy computer game path finding 
complete map represents potentially huge search space 
abstraction reduce dramatically 
consider block map city 
search map cities 
city know city entrances costs crossing city entrance pairs 
know travel cities 
problem reduces steps start node block containing start node find optimal path borders block 
search block level blocks optimal path block containing start node block containing goal node 
goal node block containing goal node find optimal path border block goal 
result faster search giving nearly optimal solutions 
abstraction topology independent need level designer manually break grid high level features annotate way points 
contributions contributions include 
hpa new hierarchical path finding algorithm including pseudo code source code domain independent works static dynamic terrain topologies 

experimental results hierarchical search variety games mazes gate showing fold speed improvement exchange degradation path quality 

variations hierarchical search idea appear game companies algorithmic details public 
best knowledge scientific study hierarchical domain commercial computer games 
section contains brief overview background literature 
section presents new approach hierarchical performance evaluated section 
section presents topics research 
appendix provides pseudo code algorithm 
literature review part section summarizes hierarchical approaches pathfinding commercial games 
second part reviews related general context including applications grid domains robotics 
path finding level hierarchy described 
author provides high level presentation approach 
problem map abstracted clusters rooms building square blocks field 
action crosses room middle entrance 
method similarities 
approaches partition problem map clusters square blocks 
second actions block crossings opposed going block center block center 
third techniques block entrance transition point fact allow points 
leads fast computation gives solution optimality 
significant differences approaches 
extend hierarchy abstraction levels abstraction domain independent way 
pre compute cache optimal distances block crossing reducing costs line computation 
important hierarchical approach path finding commercial games uses points visibility 
method exploits domain local topology define graph covers map efficiently 
graph nodes represent corners convex obstacles 
node edges added nodes seen current node connected straight line 
method provides solutions quality 
particularly useful number obstacles relatively small convex polygonal shape building interiors 
efficiency method decreases obstacles shape convex polygon 
consider case map containing forest dense collection small size obstacles 
modeling topology points visibility result large graph terms number nodes edges short edges 
key idea traveling long distances single step wouldn efficiently exploited 
problem map contains concave curved shapes method poor performance needs sophisticated engineering build graph efficiently 
fact need algorithmic designer assistance create graph disadvantages method 
contrast approach works kinds maps require complex domain analysis perform abstraction 
navigation mesh aka 
powerful abstraction technique useful maps 
environment approach covers unblocked area map minimal set convex polygons 
method building near optimal 
method relaxes condition minimal set polygons builds map coverage faster 
commercial computer games path finding applications research areas 
path finding approaches topological abstraction explored robotics domains especially relevant described 
quadtrees proposed way doing hierarchical map decomposition 
method partitions map square blocks different sizes block contains cells blocked cells 
problem map initially partitioned blocks 
block contains obstacle cells cells decomposed smaller blocks 
action abstracted framework travel centers adjacent blocks 
agent goes middle box method produces sub optimal solutions 
improve solution quality quadtrees extended framed quadtrees 
framed quadtrees border block augmented cells highest resolution 
action crosses block border cells 
representation permits angles direction solution quality improves significantly 
hand framed quadtrees memory quadtrees 
framed quadtrees similar quadtrees block crossings actions 
don consider cells block border entrance points 
reduce number block entrance points abstracting entrance points 
approach allows blocks contain obstacles 
means distance transition points necessarily linear 
reason compute optimal paths entrance points placed border block 
multi level hierarchy enhance performance multiple goal path planning mdp markov decision process framework 
problem posed efficiently learn near optimal policies travel pairs map locations 
number policies computed stored quadratic number map cells 
improve memory time requirements price losing optimality multi level structure called airport hierarchy 
locations problem map airports assigned different hierarchical levels 
strategy travelling similar traveling plane real world 
travel bigger bigger airports reach airport big connection area contains destination 
second go hierarchy travelling smaller airports destination reached 
approach similar strategy outlined section 
analysis nature path finding various frameworks performed 
authors classify path finding problems type results sought environment type amount information available challenges specific problem type solving strategies replanning dynamic data structures briefly discussed 
hierarchical approach shortest path algorithms similarities hpa analysed 
decomposes initial problem graph set fragment sub graphs global boundary sub graph links fragment sub graphs 
shortest paths computed cached similarly caching hpa performs cluster traversal routes 
authors analyse shortest paths sub graphs cache information keep complete path cost best performance limited memory available 
technique related hpa hierarchical uses hierarchical representations space goal reducing search effort 
way hierarchical representations different techniques 
approach uses abstraction structure enhance representation search space hierarchical method automatically generating domain independent heuristic state evaluations 
search heuristic function evaluates distance state goal guide search process 
quality function greatly affects quality search algorithm 
starting initial space hierarchical builds hierarchy spaces state space obtained 
building space states current space grouped form state space 
hierarchy space compute heuristic function previous space 
hierarchical path finding hierarchical approach implements strategy described section 
searching solution hierarchical framework step process called line search 
travel border neighborhood contains start location 
second search path border start neighborhood border goal neighborhood 
done level search simpler faster 
action travels relatively large area need deal details area 
third complete path traveling border goal neighborhood goal position 
abstracted graph line search built information extracted problem maze 
discuss detail framework hierarchical search built pre processing path finding line search 
initially focus building hierarchy levels low level level 
adding hierarchical levels discussed section 
illustrate approach works small map shown 
pre processing grid step building framework hierarchical search defines topological abstraction maze 
maze abstraction build graph hierarchical search 
topological abstraction covers maze set disjunct rectangular areas called clusters 
bold lines show clusters topological abstraction 
example grid grouped clusters size 
note domain knowledge abstraction tuning size clusters 
border line adjacent clusters identify possibly empty set entrances connecting 
entrance maximal obstacle free segment common border adjacent clusters formally defined 
consider adjacent lines tiles cluster determine border edge 
tile define symm symmetrical tile respect border 
note symm adjacent belong cluster 
entrance set tiles respects conditions border limitation condition 
condition states entrance defined exceed border adjacent clusters 
symmetry condition symm obstacle free condition entrance contains obstacle tiles 
maximality condition entrance extended directions long previous conditions remain true 
shows zoomed picture upper left quarter sample map 
picture shows details identify entrances build abstracted problem graph 
example clusters left side connected entrances width width respectively 
entrance define transitions depending entrance width 
width entrance predefined constant example define transition middle entrance 
define transitions entrance 
transitions build problem graph 
transition define nodes graph edge links 
edge represents transition clusters call inter edge 
length 
pair nodes inside cluster define edge linking called intra edge 
compute length intra edge searching optimal path inside cluster area 
shows nodes light grey squares inter edges light grey lines part intra edges top right cluster 
shows details abstracted internal topology cluster top right corner 
data structure contains set nodes distances 
define distance straight transition diagonal generic path finding library experiments utilizes value approximating 
slightly appropriate approximation probably 
transition 
cache distances nodes discard actual optimal paths corresponding distances 
desired paths stored price memory usage 
see section discussion 
shows graph running example 
picture includes result inserting start goal nodes graph dotted lines described sub section 
graph nodes including change search 
level abstraction clusters inter connections intra connections 
additional edges link rest graph 
comparison low level non abstracted graph contains nodes unblocked tile edges 
graph constructed intra edge distances computed grid ready hierarchical search 
information pre computed game ships stored disk loaded memory game run time 
sufficient static non changing grids 
dynamically changing grids pre computed data modified run time 
grid topology changes bridge blows intra inter edges affected local clusters need re computed 
line search phase line search connects starting position border cluster containing step completed temporarily inserting graph 
similarly connecting goal position cluster border handled inserting graph 
added search path graph 
important part line search 
provides path actual moves border cluster path cluster actual moves border cluster steps line search optional 
path refinement convert path sequence moves original grid 

path smoothing improve quality path refinement solution 
path refined post processing step obtain detailed path real time path finding applications complete path needed moves 
information allows character start moving right direction goal 
contrast complete search generate entire path determine steps character 
consider domain dynamic changes occur frequently mobile units travelling 
case finding path refine gradually character navigates goal 
current path invalid agent discards searches path 
need refine path advance 
searching path able search path graph part graph 
processing start goal show node connect border cluster contains 
add graph search locally optimal paths nodes path exists add edge graph set weight length path 
represent edges dotted lines 
experiments assume change new search 
cost inserting added total cost finding solution 
path remove graph 
practice computation done efficiently 
consider game units find path goal 
case insert re 
cost inserting amortized searches 
general cache store connection information popular start goal nodes 
inserting graph search path run standard single agent search algorithm graph 
path refinement path refinement translates path low level path 
cluster crossing path replaced equivalent sequence low level moves 
cluster pre processing cached move sequences attached intra edges refinement simply table look 
perform small searches inside cluster path re discover optimal local paths 
factors limit complexity refinement search 
solutions guaranteed correct provided environment change finding path 
means backtrack re plan correcting solution 
second initial search problem decomposed small searches cluster path low complexity 
path smoothing topological abstraction phase defines transition point entrance 
efficient gives optimality computed solutions 
solutions optimal graph necessarily initial problem graph 
improve solution quality length aesthetics perform postprocessing phase path smoothing 
technique path smoothing simple produces results 
main idea replace local sub optimal parts solution straight lines 
start solution 
node solution check reach subsequent node path straight line 
happens linear path nodes replaces initial sub optimal sequence nodes 
experimental results example experimental results running example summarized rows table 
represents running low level graph call level 
uses hierarchy levels level level uses hierarchy levels level level level 
meaning row labeled described section 
low level original grid search manhattan distance heuristic poor performance 
example chosen show worst case scenario 
abstraction visit unblocked positions maze 
search expands nodes 
factor limits search complexity maze size 
larger map similar topology represents hard problem 
performance greatly improved hierarchical search 
inserting graph linked node border starting cluster 
add node corresponding edge links accessible node cluster 
finding edge cost uses search expands nodes 
inserting graph identical 
abstracted graph search path searching level expands nodes graph 
problem worst case scenario searching level 
time search effort reduced 
main search expands nodes 
addition inserting expands nodes 
total finding path requires node expansions 
effort provide solution problem moves edge cluster path cluster edge desired path refined partially completely additional cost 
worst case refine path completely actual paths intra edges cached 
intra edge cluster crossing path perform search compute corresponding low level action sequence 
small searches expand total nodes 
adding levels hierarchy hierarchy extended levels transforming graph multi level graph 
multi level graph nodes edges labels showing level abstraction hierarchy 
perform path finding combination small searches graph various abstraction levels 
additional levels hierarchy reduce search effort especially large mazes 
see appendix details efficient searching multi level graph 
build multi level graph structure maze abstraction levels 
higher level larger clusters maze decomposition 
clusters level called clusters 
build new level top existing structure 
building clusters section 
cluster obtained grouping adjacent clusters parameter 
nodes border newly created cluster update level call nodes 
inter edges transitions clusters increase level call inter edges 
add intra edges level intra edges pairs communicating nodes placed border cluster 
weight edge length shortest path connects nodes cluster nodes edges 
details provided section 
inserting graph iteratively connects nodes border cluster contains increasing maximal abstraction level 
searching path node restricted level area current cluster contains perform identical processing 
way build graph ensures find solution matter levels 
particular adding new level graph diminish solution quality 
provide brief intuitive explanation formal proof statement 
new edge added level corresponds existing shortest path level 
weight new edge set cost corresponding path 
searching level finds solution searching level faster 
example adding extra level creates large clusters quarter map 
example single cluster 
cluster contains clusters size 
node cluster bottom left corner 
compared level total number nodes second abstraction level reduced 
level main search performed nodes including 
shows level graph 
edges pictured dotted lines connect graph level 
abstraction level illustration pre processing solves local constraints reduces search complexity graph 
cluster shown large contain large dead room exists local topology 
level avoid useless search room go directly exit bottom left corner 
inserting ready search path search highest abstraction level 
start goal highest abstraction level find solution assuming exists 
result search sequence nodes highest level abstraction 
desired path repeatedly refined low level solution obtained 
experimental results example level hierarchy third row table shows numerical data running example level hierarchy levels 
shown section connecting border clusters expands nodes total 
similarly connect border clusters 
searches level expand nodes nodes main search level expands nodes 
nodes ones path expanded 
important improvement consider search level graph expanded nodes graph 
total finding solution extended hierarchy requires nodes 
worth adding new abstraction level cost inserting dominates main search cost 
illustrates general characteristic method cost inserting increases number levels main search simpler 
finding trade searches important optimizing performance 
table shows costs complete solution refinement 
refining solution level level expands nodes refining level level expands nodes total nodes 
storage analysis computational speed amount storage method uses path finding important performance indicator 
main factors influence amount memory hierarchical approach uses size problem graph size open list 
discuss factors detail rest section 
graph storage include empirical analysis worst case theoretical discussion 
graph storage requirements table shows average size problem graph gate test suite 
see section details data set settings cluster sizes edge definition original problem graph 
compare original lowlevel graph graphs hierarchies levels counting level 
table show number nodes number inter edges number intra edges 
multi level graphs show total numbers numbers level li 
data show storage overhead graph small compared size original problem graph 
adding new graph level updates level existing nodes inter edges creating new objects types 
overhead consists new intra edges level creates 
data set add intra edges levels defined initial graph having nodes edges 
assuming node edge occupy amount memory obtain overhead 
way overhead translates terms memory bytes highly dependant factors implementation compiler optimizations size problem map 
instance map size storing coordinates graph node takes bytes 
memory necessary larger maps 
nodes edges labeled level memory necessary store element larger graph initial graph 
additional requirement called level overhead little bits element corresponding largest possible number levels 
compilers round bit size objects multiple level overhead exist practice 
storage utilization optimized keeping memory cache parts graph necessary current search 
hierarchical framework need sub graph corresponding level area current search performed 
example main search performed drop low level problem graph greatly reducing memory requirements search 
worst case scenario cluster blocked tiles free tiles alternate border border nodes connected 
assume size problem maze maze decomposed clusters size cluster worst case obtain nodes cluster 
pair nodes defines intra edge number intra edges cluster 
analysis true clusters middle maze 
define nodes maze edges marginal clusters smaller number nodes 
cluster maze corner number nodes number intra edges 
cluster maze edge number nodes number intra edges 
corner clusters edge clusters middle clusters 
total number nodes 
total number intra edges 
number inter edges 
storage open list hierarchical path finding decomposes problem sum small searches average size open smaller hierarchical search low level search 
table compares average length open list low level search hierarchical search 
average performed searches described section refining results solution length 
data shows fold reduction list size low level search main search abstracted framework 
experimental results experimental setup experiments performed set maps extracted game gate varying size 
map searches run randomly generated pairs valid path locations existed 
atomic map decomposition uses 
tiles define adjacency relationship straight diagonal directions 
cost vertical horizontal transitions 
diagonal transitions cost set 
allow diagonal moves blocked tiles 
entrances width transition 
larger entrances generate transitions 
code implemented university alberta path finding code library www cs ualberta ca games 
library research tool quickly implementing different search algorithms different grid representations 
generic nature overhead associated library 
times reported viewed generous upper bounds custom implementation 
timings performed mhz pentium iii gb memory 
programs compiled gcc version run red hat linux version 
analysis compares low level search hierarchies maximal level set 
left graph shows number expanded nodes right graph shows time 
hierarchical search display total effort includes inserting graph searching highest level refining path 
real effort smaller cost inserting amortized searches path refinement necessary 
graphs show complete processing necessary abstraction level map sizes experiment 
assume larger maps benefits levels significant 
complexity reduction larger overhead adding level 
show levels useful path refinement necessary searches 
reported times generic implementation important note solution length appropriate level abstraction able provide answers milliseconds average 
length average time search milliseconds mhz machine 
slightly better hpa solution length small 
small solution length usually indicates easy search problem solves reduced effort 
overhead hpa inserting cases larger potential savings algorithm achieve 
better connected straight line grid 
case euclidian distance heuristic provides perfect information expands nodes belong solution 
shows total effort hierarchical search composed effort effort inserting effort solution refinement 
cost finding path sum main cost cost inserting reused searches part cost counts cost problem 
considering shows finding path easier hierarchies levels 
shows solution quality 
compare solutions obtained hierarchical path finding optimal solutions computed low level 
plot error path smoothing 
error measures overhead percents computed formula hl ol ol hl length solution hpa ol length optimal solution 
error independent number hierarchical levels 
factor generates sub optimality considering possible transitions entrance 
cluster size parameter tuned 
ran performance tests clusters size 
choice level supported data 
graph shows average number expanded nodes search changes varying cluster size 
main search reduces increasing cluster size cost inserting increases faster 
expanded node count reaches minimum cluster size 
higher levels cluster contains clusters 
small value larger values cost inserting increases faster reduction main search 
tendency especially true relatively small maps smaller clusters achieve performance increased costs larger clusters may amortized 
overhead inserting results having connect nodes placed border large cluster 
longer cluster border nodes connect 
ran similar tests randomly generated maps 
main similar lack space discuss details 
despite importance amount done path finding detailed publications hierarchical path finding commercial games 
hierarchical technique efficient nearoptimal path finding 
approach domain independent easy apply works different kinds map topologies 
method adapts dynamically changing environments 
hierarchy extended abstraction levels making scalable large problem spaces 
tested program maps extracted real game obtaining near optimal solutions significantly faster low level 
ideas hierarchical path finding 
plan optimize way insert graph 
shows costs increase significantly adding new abstraction layer 
strategy improving performance connect sparse subset nodes border maintaining completeness graph 
instance unconnected node node border try connect reachable graph connected node node border connected completeness preserved 
idea consider connection border nodes direction idea guarantee completeness hard evaluate benefits 
search fails graph incompleteness perform subset border nodes gradually enlarged 
clustering method currently simple produces results 
want explore sophisticated clustering methods 
application independent strategy automatically minimize clustering parameters number clusters cluster interactions cluster complexity percentage internal obstacles 
research supported natural sciences engineering research council canada nserc alberta informatics circle research excellence 
members path finding research group university alberta 
markus bj wrote generic path finding library experiments 
kindly gave access gate maps 
chen urhan jr planning conditional shortest paths unknown environment framed quadtree approach 
proceedings ieee rsj international conference intelligent robots system human interaction cooperation volume pages 
holte perez zimmer macdonald 
hierarchical searching abstraction hierarchies efficiently 
proceedings aaai pages 
korf 
depth iterative deepening optimal admissible tree search 
artificial intelligence 
moore baird kaelbling 
multi value functions efficient automatic action hierarchies multiple goal mdps 
proceedings international joint conference artificial intelligence ijcai 
rabin 
aesthetic optimizations 
mark editor game programming gems pages 
charles river media 
rabin 
speed optimizations 
mark editor game programming gems pages 
charles river media 
reese stout 
finding pathfinder 
citeseer nj 
nec com reese finding html 
samet 
overview quadtrees octrees related hierarchical data structures 
nato asi series vol 

shekhar goyal 
materialization trade offs hierarchical shortest path algorithms 
symposium large spatial databases pages 
stout 
smart moves intelligent pathfinding 
game developer magazine october november 

building near optimal navigation mesh 
steve rabin editor ai game programming wisdom pages 
charles river media 
stentz singh 
framed quadtree path planning mobile robots operating sparse environments 
proceedings ieee conference robotics automation icra leuven belgium may 
appendix appendix provide low level details hierarchical path finding technique including main functions pseudo code 
code web site www cs ualberta ca 
pre processing line search 
pre processing summarizes pre processing 
main method preprocessing abstracts problem maze builds graph level desired adds levels graph 
abstracting maze building graph initial stage maze abstraction consists building clusters entrances clusters 
levels added hierarchy maze abstracted computing clusters superior levels 
method set clusters set entrances defined map 
method creates graph problem 
creates nodes inter edges builds intra edges 
method newnode creates node contained cluster placed middle entrance simplicity assume transition entrance regardless entrance width 
methods return adjacent clusters connected entrance methods add node graph set node level add edge nodes 
parameter weight level inter intra shows type intra edge edge 
part method adds intra edges 
method searches path nodes returns path cost 
search optimized shown section 
creating additional graph levels hierarchical levels multi level graph built incrementally 
level built previous phase 
assuming highest current level build level calling method 
group clusters level form cluster level method 
set clusters 
part method adds new intra edges graph 
line search finding solution summarizes steps line search 
main method maxlevel performs line search 
insert graph method node level 
method adds edges node nodes placed border cluster reachable insert multi level graph method 
returns cluster contains node method orp ath maxlevel performs search highest abstraction level find path desired refine path low level representation method ath ath 
method ath llp ath improves quality low level solution 
searching multi level graph multi level graph search performed various abstraction levels 
searching level reduces search effort exploring small subset graph nodes 
higher level smaller part graph potentially explored 
searching certain level rules apply node expansion 
consider nodes having level greater equal second consider intra edges having level inter edges having level search space reduced ignoring nodes outside cluster 
useful situations connecting border clusters connecting nodes placed border cluster refining path 
maze example 
obstacles painted black 
start goal nodes 
bold lines show boundaries clusters 
abstracting top left corner maze 
nodes shown light grey 
simplicity intra edges shown top right cluster 
cluster internal path information 
problem graph hierarchy low level level 
level graph level hierarchy 
dotted edges connect rest graph 
search technique sg main refinement table summary results running example 
show number expanded nodes 
sg effort inserting graph 
sum previous columns 
measures effort finding solution 
refinement shows effort complete path refinement 
graph graph graph graph total total total table average size problem graph gate 
graph initial low level graph 
graph represents graph level graph levels graph levels 
number nodes number inter edges number intra edges 
low level main sg refinement open size table average size open list 
hierarchical search show average open size main search sg search search inserting graph refinement search 
number nodes total expanded nodes low level level level level solution length total cpu time secs low level level level level cpu time solution length low level vs hierarchical path finding 
effort hierarchical search hierarchies level levels levels 
show proportion main effort sg effort refinement effort contribute total effort 
gray part bottom data bar represents main effort 
dark part middle sg effort 
white part top refinement effort 
percent error solution quality smoothing smoothing solution length solution quality 
effort finding solution 
sg represents cost inserting main search finds path graph 
void void adjacent void void newnode newnode inter intra void int adjacent false continue intra void preprocessing int maxlevel maxlevel pre processing phase pseudo code 
phase builds multilevel graph void node cluster continue intra void node int maxlevel maxlevel maxlevel path node int ath llp ath ath smp ath llp ath return smp ath line processing pseudo code 

