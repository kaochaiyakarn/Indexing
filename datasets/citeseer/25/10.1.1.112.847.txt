visualizing interactions program executions dean jerding college computing georgia institute technology atlanta ga cc gatech edu implementing validating modifying reengineering object oriented system requires understanding object class interactions occur program executes 
seeks identify visualize analyze interactions object oriented program executions means examining understanding dynamic behavior 
discovered recurring interaction scenarios program executions abstractions understanding process developed means identifying interaction patterns 
visualizations focus supporting design recovery validation reengineering tasks applied object oriented procedural programs 
keywords software visualization object oriented software engineering program understanding reverse engineering understanding behavior began hypothesis visualizing interactions object oriented program executions assist software engineering tasks requiring program understanding 
importance dynamics design implementation modi cation objectoriented oo systems emphasized 
communication dialog classes objects typically designed notion scenarios expressed graphical notations trace diagrams interaction diagrams 
diagrams common design procedural parallel systems 
truly understand component class understand scenarios class methods invoked 
behavioral information evident object models john stasko college computing georgia institute technology atlanta ga stasko cc gatech edu thomas ball software production research bell laboratories il research bell labs com including class source code de ning class 
say described event trace diagrams interaction diagrams speci ed system design 
information required class correctly ectively taken account system modi ed 
di cult design dynamic relationships standard languages currently provide implementation support interactions entities gap terms abstraction design level behavioral models source code implements system result improper mappings design implementation 
system evolves modi cations may cause drift documented intended design 
created scalable visualizations examine program event traces numbering hundreds thousands 
interactive graphical visualizations voluminous information ectively textual representations allowing user control ltering abstraction available information 
views observed recurring sequences interaction classes objects oo systems 
high level program behavior abstracted low level event traces interaction patterns developed compact data structure allows identify existence interaction patterns large program event traces 
emphasized importance tools display manipulate help document explain system behavior visualize complex trace data compare observed predicted behavior 
envision prototypes support software engineering tasks ways identifying interaction patterns program event traces help analyst construct design level behavioral models low level behavior system 
useful reverse engineering tasks especially support reengineering legacy meet need research investigated language support associations 
systems 
visualizations behavior compared design level information execution scenarios interaction diagrams help validate design implementation identify areas need reengineering 
adding capabilities case tool help programmers keep behavioral models date respect modi cations system implementation common problem practice 
aim visualizations facilitate design recovery validation reengineering tasks exposing dynamic interactions 
prototypes originally intended object oriented systems call trace procedural program analyzed 
section describes focus interactions abstractions program understanding identify interaction patterns 
discuss visualization tools created related 
focus interactions purposes clarity remaining discussion formal de nitions order 
de ne actor entity system having object meaning 
actor class function object le package thread 
grouping containment hierarchy exists actors useful abstraction mechanism analyzing interactions 
example le groups classes functions objects 
class contains functions class groups objects class 
function groups objects implement function 
particular set actors grouped component 
interaction dynamic relation actors 
typically message passed actor instantiation deletion class object actor actor referencing actor data actor 
prototypes currently instrument programs track message interactions 
interaction scenario sequence interactions set actors occurs program executes 
scenario interleaved 
interaction patterns recurring interaction scenarios manifested repeated sequences messages message patterns recurring instantiation objects instantiation patterns 
design patterns interaction patterns exist various levels abstraction language constructs system architectures 
note word pattern di erent design patterns pattern languages related see section related 
level interaction patterns result implementa tion aspects iteration linked list data structure 
exist design level result semantic operations class uses class associations 
avery high level recurring interactions seen due repeated usage system 
de nitions may object oriented nature procedural program characterized function le considered actor function call considered interaction 
identifying interaction patterns order visualize analyze large program executions compact representation event trace way extract occurrences interaction patterns required 
developed compact representation call trace tools analyze large message traces 
spectrum possible representations calling behavior pit space overhead versus information accuracy call graph dynamic call trace represent endpoints 
extreme call graph compact representation calling behavior summarizes possible run time activation stacks 
information calling behavior dropped gain compactness 
sequencing calls context certain calls conditional indirect calls repeated calls examples calling behavior lost 
problems exist software tools call graph summarize dynamic program properties 
example inaccuracy program pro gprof qpt traced call graph summarize context dependent pro le information context independent manner 
spectrum dynamic call trace unbounded data structure containing record calls returns occur program execution regardless calls direct indirect 
extracting call trace may incur high runtime overhead storing trace may feasible long running programs 
furthermore data explosion problem nding interesting information mass data trace easy 
tools animate call graph show trace storing compute statistical summary information trace 
techniques deal space problem ignoring summarizing large amount dynamic information done call graph 
tohave best worlds compact representation call graph retains information possible dynamic calling behavior dynamic call trace 
developed middle ground allows range possibilities tradeo data structure provides various views dynamic infor call trace corresponding call tree call graph 
edge directions assumed directed page 
mation serves query engine software tools dealing calling behavior 
view data structure notion message pattern de ned previously 
implementation details basic ideas compact dynamic call tree 
hash consing ensure identical tree structures dynamic call trace represented exactly compact representation 
second compactly summarize repetitive sequences subtrees generated loops 
sequences summarized varying degrees accuracy resulting di erent compact representations subsequently di erent levels message pattern abstractions 
compress repetitive calling chains generated recursion 
compact representation dynamic call tree directed acyclic graph dag 
shows example call trace call tree call graph 
compact representation call tree shown 
vertex corresponds call 
clear representation captures exactly information call tree 
basic framework parsing call trace produce dag straightforward 
analysis requires main data structures active procedures heap dag structures hash table determining particular dag structure built 
dag structures built bottom fashion leaves dynamic call tree root 
hash consing ensures tree data structure constructed bottom duplicate trees hash element 
hash consing results sharing subtrees dag evident shared subtree calling 
subtree message pattern incoming parent edge 
implemented pattern iterator walks dag returns message patterns encountered 
addition looking shared subtrees pattern iterator looks repetitive subtrees sequences resulted iteration program execution 
discussion pattern recognition algorithm described limitations 
identifying duplicate subtrees call tree nd repeated sequences subtrees 
example suppose procedure calls procedure calls procedure repeats calling pattern 
pattern followed detected separate subtrees call tree 
extended algorithm detect patterns known substring matching heuristics 
human visualization prototypes nd visual patterns message trace pattern iterator nds 
pattern detection capabilities extremely useful starting point pattern matching process 
limiting stack depth pattern identi cation dag representing call trace lter lower level behavior get high level patterns 
additionally repeated patterns represented single instance dag compact representation call tree 
traversed logarithmic reduction number repetitions done 
facilities allow prototypes lter voluminous information program execution traces 
visualizations visualizing dynamics object oriented systems began idea useful expose interaction objects oo system executes evolved visualizations interaction patterns support program understanding tasks 
rst visualization prototype developed animated instantiation objects message passing objects single view 
visualization call trace les generated source code annotated hand 
small toy programs visualized 
generation visualization multiple views show call stack inheritance hierarchy instances message passing 
animation show progression time larger programs visualized 
sub sections include summary impact descriptive example current visualization prototypes refer 
readers wishing understand details prototypes skip example sections 
tools visualize execution programs 
visualizations written windows motif 
prototype summary rst prototype allows user display browse real world sized event traces messages 
traces generated executing subject program instrumented automatically inserting tracing objects source code 
execution mural view see shows time horizontal axis messages passed classes program vertical trace diagram rotated degrees 
take approach creating general view initially showing classes messages providing visual ltering mechanisms allow user focus information interest 
include global navigational information mural portrays entire trace ability ordering classes vertical axis selectively show hide particular classes speci messages zoom sub sections message trace :10.1.1.113.4136
visualization supports program understanding tasks include view source code system examined code concrete realization system course system programmed visually 
di erent models system developed help person understand behavior person modifying system abstractions eventually related source code 
code view see depicts messages classes functions overlaid view source code 
helps relate messages execution mural source code event trace generated 
impact animating execution program important global program understanding tasks able browse entire execution focus areas interest needed speci cs 
narrowed focus sequence object interactions published focused cumulative dynamics 
scalability number issue creating useful visualizations aid understanding processes implementation maintenance real world sized systems information mural technique created support goal :10.1.1.113.4136
prototype allowed visually examine event traces di erent programs including polka seesoft 
visual patterns seen entire message trace lower level patterns zoom sub sequences execution 
visual patterns result similar semantic operations code iteration loop 
weaknesses visualization terms helping program understanding tasks view individual messages really low level compared user mental model system design models diagrams 
message patterns nding useful abstractions help bridge gap 
prototype motivated development compact message trace representation views implemented 
example process includes steps static analysis source code gen automatic annotation source code script places tracing objects code described riordan compilation execution annotated source generate dynamic event trace les visualization information trace les 
execution mural views prototype shown figures 
subject program polka bubble sort algorithm animation 
polka isan object oriented toolkit creating algorithm program visualizations written 
major visual innovation execution mural ability create global overview message trace containing hundreds thousands messages 
technique utilizes grayscale color shading anti aliasing techniques create miniature representation entire large information space 
view called information mural described 
importance global overview quickly apparent uses 
viewing entire execution trace gives analyse immediate insight di erent phases execution see 
murals program traces repetitive mouse zoom smaller windows trace 
observation led develop automatic pattern detection features mentioned previously 
second locating particular messages real trace nearly impossible search mechanism 
global overview message coloring facilities allow trace searched visually see 
code view prototype uses representation le collection class function de nitions 
files listed horizontally view classes le represented initial execution mural polka bubble sort 
classes vertical axis message single pixel wide vertical line source destination class 
global view bottom mural entire set messages navigation rectangle shows position focus area relative rest classes messages trace 
execution mural classes hidden message width increased messages highlighted di erent colors 
source code view polka animation toolkit les arranged horizontally 
circles represent class de nitions squares represent functions ll color shows relative message passing volume particular execution trace 
arrows indicate set messages highlighted user execution mural view 
circles functions le squares 
dynamic information gathered event trace overlaid view coloring nodes relative message passing volume node active white 
mouse pointer brushes node name appears members class highlighted 
user highlights messages execution mural view arrows appear connecting corresponding function nodes code view shown 
notice functions appear sources edges computational access functions look sinks 
prototype summary second visualization prototype focused visualizing interaction patterns support design recovery reengineering tasks 
incorporates similar view execution mural addition automatic message pattern detection methods described previous section message pattern oriented views 
patterns tool detect starting point presenting user interaction patterns execution traces 
visual interface allows user examine message patterns look new ones various levels abstraction 
allows create views particular program execution static information program trace le interesting events function calls returns 
views observers single pro gram model contains static dynamic information exist single window handle user input 
composite class hierarchy de nes views visual objects 
interaction occurs pointing mouse pop menus associated various views 
impact usage scenarios prototype describe section concluded interaction patterns exist program executions automatically detect similar level abstraction design level models system design documents programmer mental models 
clear understanding patterns go understanding entire execution scenario example variations single pattern constitute percent messages trace 
obviously case clear interaction patterns abstractions relate low level implementation higher level design models design validation recovery tasks 
example example usage scenario serve nicely features usefulness 
describe tool examine polka program animation toolkit mentioned previously 
comparing polka toolkit designer mental model behavior actual implementation 
speci focus scenario interactions place animation frame rendered polka 
software engineering task occur validation implementation respect system design documents construction design models reverse engineering system architecture 
shows event trace diagram polka designer describe interactions involved polka animating frame 
trace le polka bubble sort algorithm animation consists function invocations read processed 
rst create global execution mural entire message trace 
view act global overview showing message patterns identi ed execution 
notice execution mural views prototype slightly di erent previous generation 
view rotated look interaction diagrams classes program horizontal axis messages drawn horizontal lines vertical axis information mural compression technique :10.1.1.113.4136
areas brighter mural dense information conveying visual patterns apparent event trace diagram entire program observed distance 
global execution mural focus area just shows messages 
notice repetitive diagram visually 
distinct pattern appears followed repeats times 
get feel information compression ratio shows approximately rst function invocations trace 
part visual patterns apparent ner resolution 
create pattern matrix showing classes involved top level message patterns identi ed pattern detection algorithm described previously 
top level means largest sequence messages occur closer root message dag subsequences message patterns 
matrix assigns message pattern column message patterns identi ed rst message name global message number rst message pattern 
rows matrix correspond classes program 
matrix created information mural technique effectively scalable hundreds classes patterns 
note order message patterns horizontal axis changed group patterns name size order occurrence trace 
pattern matrix mapping functions patterns available 
designer event trace diagram process animate frame polka animation toolkit 
global execution mural polka bubble sort animation essentially miniature event trace diagram entire message trace 
vertical resolution messages pixels information compression ratio 
part zoomed approximately rst messages trace 
information compression ratio 
pattern matrix polka bubble sort animation 
message patterns assigned columns matrix rows classes program 
entries classes members message pattern 
pattern currently highlighted 
view see patterns related designer execution scenario looking ones contain classes 
designer diagram includes animator view classes 
pattern matrix patterns contain classes example pattern highlighted contains classes animator view global class represents functions global scope 
message pattern candidate rst message rst designer diagram 
pattern mural view gives time ordering message patterns shown matrix showing message patterns vertical axis occur program execution horizontal 
view uses information mural technique drawing point message execution sequential coordinates appropriate coordinate message pattern message belongs 
note sequential coordinates terms message order pixels screen messages may compacted column pixels 
order patterns vertical axis changed pattern matrix view shows patterns order occurrence rst top 
view notice distinct patterns occur middle trace 
hypothesize patterns corresponds distinct phases global execution mural 
pattern mural polka bubble sort animation 
message patterns assigned vertical axis order occurrence message sequential coordinates value corresponding pattern member messages members patterns shown 
message pattern highlighted 
turn highlighting current selected pattern global execution mural con rm suspicion 
note views synchronized change current pattern view change show location pattern 
technique providing multiple views information analyzing allows observations 
pattern looking compare designer mental model frame animation 
system create execution mural pattern shown 
mural right hand side provides global overview messages pattern acts dimensional scroll bar moving focus area left 
messages corresponding function calls returns displayed calls solid returns grayed 
horizontal lines represent messages name labels optionally displayed message 
circle marks destination message 
designer event trace diagram include global function calls graphics remove global class mouse select class label choosing menu option remove class 
menu option allows eliminate return messages display 
scroll execution mural compare see implementation behavior conforms expected design 
quick glance entire pattern see conformance expected behavior 
updates deal deal 
designer include classes diagram presumably specializations class 
common design models deal classes feature adding execution mural allow subclass behavior generalized base class 
designer concludes frame bubblesort animation bars text labels changing places 
messages designer diagram correct place designer 
note original diagram message trans message observed pattern 
designer con rms old position object new position object moves changes size action 
case design model need updated 
example pattern fact appear implement frame animating process expected 
investigating execution murals patterns di erences result rst originating particular frames di erent updated drawn 
visualizations easy uncover di erences providing visual di patterns feature adding 
related di erent areas overlap including software visualization program understanding reverse engineering oo methods 
orts areas mentioned related 
mentioned previously attempted formalize notations describe communication entities systems notion temporal message ow diagram 
built tools display edit generate event traces simulate operation system 
general handling systems messages sent received interleaved nondeterministic sequence 
done identify patterns event traces 
notion pattern solution problem particular context provides literary form experience software documented reused 
contrast interaction patterns named repeat execution mural prototype message pattern 
mural right gives global view messages pattern acts dimensional scrollbar focus area 
navigation rectangle upper part global view corresponds messages displayed focus area 
global class removed messages corresponding function calls shown 
able entity create visual patterns screen visualize oo message traces 
relation types patterns arises interaction patterns result various design patterns seen low level evidence existence design pattern 
way identifying message patterns seen form design pattern mining 
program explorer program understanding tool focused class object centered views 
authors developed system tracking function invocation object instantiation attribute access 
views show class instance relationships usually focused particular instance class short method invocation histories 
system designed execute program execution focus particular classes objects 
intended global understanding tool user know execution interested 
examples system uncover design patterns real world sized systems 
user know design pattern idea pattern occurs exploit visualizations 
visual debugger smalltalk provides standard object views scripting language create simple program visualizations 
views show instances classes similar message passing individual instances instance attribute values 
possible record particular message traces replayed 
recording strip view shows instance activation time bene information mural technique 
visualizations focus debugging tasks support custom debugging scripting language maps instance values visual objects 
scripts written manually 
de pauw helm vlissides developed visualization techniques tool presenting attributes object oriented systems 
authors portable instrumentation techniques extract required information program execution 
developed views chart summary information execution 
views quite ective analyzing program performance class relationships terms amount classes objects 
information capture post mortem summary information seek uncover semantics sequence interactions 
authors compromise decided store incremental information execution favor storing cumulative information 
oo care tool version care environment program understanding 
idea oo care system extract visualize dependencies classes objects methods program control data ow 
system includes code analyzer dependencies database display manager 
hierarchically designed views class inheritance control ow dependencies le dependencies 
column oriented view called presents data ow dependencies 
dependencies extracted statically case virtual function call dummy member function created represent possible run time bindings 
views provide zooming panning capabilities plus hierarchical decomposition examples demonstrate scale handle large programs 
murphy developed approach allows software engineers specify high level models sys tem source code maps model 
re model computed uses call graph data referencing information determine model agrees disagrees actual implementation 
box arrow type diagram depict speci ed models di erences 
approach helped design reengineering conformance tasks 
directed static architectural models focused sequential behavioral type models 
described visualization prototypes reveal interactions take place program executes 
rst utilizes innovative global overviews large program event traces allows information ltered highlighted uncover details 
second prototype embodies notion interaction patterns higher level abstractions compared design level execution scenarios 
usage example prototype described gives evidence interaction patterns exist automatically detect similar level abstraction design level models system design documents programmer mental models 
software visualizations kind useful scale handle real world systems 
discussed techniques storing presenting large program event traces di erent alternatives vary level abstraction re ected message patterns 
example ignore multiple iteration call trace limit stack depth get higher level message trace summaries useful global understanding 
able interactively control ltering abstraction new feature adding system 
clear discussion second section characterize interactions messages actors instantiation deletion object actor actor 
current trace analysis prototypes track message patterns ability trace object instantiation destruction currently implemented giving rise complete interaction scenario analyses 
additionally actors current interaction patterns les classes functions useful object level 
prototypes currently basis new tool interaction scenario visualizer validate reverse engineered architectural models research seeking assist evolution legacy systems 
purpose project develop analysis techniques predict legacy architecture needs change response changing requirements 
analysis take place correct model legacy architecture established 
usage scenarios rst describe test existing system event traces generated 
new prototype allows user visualize interaction scenarios identify understand patterns interaction scenarios input design level models compare recovered scenarios store analysis sessions 
features new prototype usable especially allows user build save high level models behavior 
pilot system study ncsa mosaic web browser 
aho ullman 
design analysis algorithms 
addison wesley new york 


tracers 
proceedings ecoop oopsla conference pages ottawa ontario oct 
cockburn von hauser 
formalized temporal message ow diagrams 
software practice experience 
coplien schmidt editors 
pattern languages program design 
addison wesley 
de pauw helm vlissides 
visualizing behavior object oriented systems 
proceedings acm oopsla conference pages washington oct 
de pauw vlissides 
modeling object oriented program execution 
proceedings european conference object oriented programming 
devanbu 
language front independent code analyzer 
proceedings software engineering australia may 
ducasse 
re ective model rst class dependencies 
proceedings acm oopsla pages 
eick ste en jr seesoft tool visualizing line oriented software statistics 
ieee transactions software engineering nov 
gamma helm johnson vlissides 
design elements reusable object oriented software 
addison wesley 
goldberg 
smalltalk interactive programming environment 
addison wesley reading pa 
graham kessler mckusick 
execution pro ler modular programs 
experience 
jacobson jonsson 
object oriented software engineering 
addison wesley reading ma 
jerding stasko 
visualization foster object oriented program understanding 
technical report git gvu georgia institute technology july 
jerding stasko :10.1.1.113.4136
information mural technique displaying navigating large information spaces 
proceedings ieee visualization symposium information visualization pages atlanta ga october 
jerding stasko 
information murals visualization applications 
proceedings symposium user interface software demonstration pages pittsburgh pa november 
la ra malhotra 
visual debugger 
proceedings usenix th technical conference april 
lange nakamura 
interactive visualization design patterns help framework understanding 
proceedings acm oopsla pages 
larus ball 
rewriting executable les measure program behavior 
technical report computer sciences technical report university wisconsin madison 
courtois 
tool understanding object oriented program dependencies 
proceedings workshop program comprehension pages nov 
malan coleman 
lessons experiences leading edge object technology projects hewlett packard 
proceedings acm oopsla pages 
murphy notkin sullivan 
software re models bridging gap source high level models 
proceedings foundations software engineering page 
riordan 
debugging instrumentation programs 
proceedings usenix conference pages denver oct 
rumbaugh blaha premerlani eddy lorensen 
object oriented modeling design 
prentice hall new york ny 
stasko kraemer 
methodology building application speci visualizations parallel programs 
journal parallel distributed computing june 
