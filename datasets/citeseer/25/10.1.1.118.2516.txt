developing reusable software components robotic applications richard tara estlin hari das richard darren jet propulsion laboratory california institute technology pasadena ca overview claraty architecture aims developing reusable software components robotic systems 
com ponents support autonomy software plans schedules robot activities 
claraty architec ture modifies conventional level robotic archi tecture new layered design functional layer decision layer 
functional layer pro vides representation system components implementation basic functionalities 
deci sion layer decision making engine drives functional layer 
globally reasons intended goals system resources state system environment 
functional layer composed set interrelated object oriented hierarchies consisting active passive objects represent different levels system abstractions 
overview design functional layer 
functional layer decomposed set reusable core components set extended components adapt reusable set different hardware implemen tations 
reusable components provide interface definitions implementations basic functionality provide local executive capabilities manage local resources support state resource queries decision layer 
increased interest developing rovers mars exploration missions significant number rover platforms designed built years 
researchers engineers jet propulsion laboratory california institute technol ogy nasa centers universities plat forms test new concepts validate algorithms control operation autonomous robotic cles 
differences mechanical electrical design vehicles share little terms software infrastructure 
transferring ities rover major costly endeavor physical capabilities dif fer rover ii rovers differ ent control software architectures iii rovers complex systems integrate disciplines 
robotics systems cover domain areas researchers single domain need integrate newly developed technology complex robotic environment 
proper integration requires depth understanding characterization behavior various components system vary platform 
claraty architecture stands coupled layered architecture robotic autonomy aims developing flexible reusable software components robotic systems 
components intended support autonomy software plans schedules robot activities 
claraty architecture modifies conventional level robotic architecture new layered design functional layer decision layer 
functional layer provides representation system components implementation basic functionalities 
decision layer decision making engine drives functional layer 
goals provide design allows non experts domain integrate components applications 
need capture understood developed knowledge various domains generalized components 
just operating system provides level abstraction computational hardware functional layer provide level abstraction robotic systems 

background efforts focused developing robotic architectures 
typical robot autonomy ar comprised levels functional executive planning levels lo :10.1.1.165.5283
ar emphasized area dominant domain 
example architectures emphasized planning aspects system emphasized executive ls emphasized functional aspects system 
going research activities aimed blurring distinction planning executive layers ll 
architec tures explicitly follow typical breakdown 
focused particular paradigms fuzzy logic implementation behavior im plementation 
considerable effort architectures addressed multiple ing robots 
difference claraty architecture conventional level architectures ex plicit distinction levels granularity levels intelligence 
conventional architectures gran third implementation close feedback loop software running embedded processor 
different implementations motion control system behavior requirements controlled motor 
implementation position commanding velocity profiling trajectory control 
detect report stall conditions able interrupt motion 
read current desired positions velocities accelerations health status 
person developing vision navigation component mobile robot necessary understand behavior component required intimate knowledge implementation hardware details 
particular implementation inadvertently influence design vision navigation algorithms 
motor representation motion control define components supposed 
components hide details implementation compromising particular features hardware 
example imaging system 
primary function system acquire images 
imaging system acquires image depends largely implementation 
systems analog camera connected mounted computational backplane 
systems digital camera image transmitted fast serial interface directly host memory 
case primary function imaging system remains acquire images 
represent system camera component publishes uniform interface acquiring synchronizing image acquisition hides details implementation runtime models 
component classification classification physical functional components system evolving years 
object oriented system decomposition provide sev eral abstractions components systems 
physical components extended concrete components tie real system simulation components tie virtual systems 
components implemented classes 
terms article 
main types classes hnc tional layer data structure classes generic classes physical functional specialized classes physical functional 
types classes con tain domain knowledge different disciplines 
integrated framework maximize code reuse eliminate duplicated functionality simplify code 
result relationships de various classes 
provide modular integrated solution 
describe different types classes 
description relationships compo nents follow 
relationships different components types relationships components inheritance aggregation 
just seen relationship generic specialized components inheritance 
special ized classes derived generic classes 
generic specialized classes type 
aggregation aggregated component different type aggregate 
aggregation provide components different levels granularity 
example manipulator class gates lower level motor class link class objects 
reason decomposition robotic sys tems possible components lower levels granularity implemented little knowl edge neighboring components 
words coupling low level components loose part 
coupling compo nents increases move higher level components 
higher level components aggregate lower level compo nents manage interaction subordinate components 
approach abstracts functional ity components reduces complexity system significantly 
iv 
data structure classes data structure classes classes provide handling transformation storage data 
characteristic data structures executive capability making easiest im port multiple operating systems 
efficiency important invoke threads tasks 
reentrant support simultaneously executed different threads 
data structures reused components system 
single data structure dominates architecture types functional layer 
challenge design data structures en reusability different robotic mains 
types data structures relevant discussion general purpose data structures domain specific data structures 
general purpose data structures reusable scope robotics applications 
suitable leverage standardized developments gen eral data structures standard template library 
implementations fig 

hierarchy available real time operating systems impose constraints appropriate robotic applications replace alterna tive customized implementations maintaining interface 
examples general purpose data struc tures array vector matrix bit linkedlist map container string 
examples main specific data structures image message resource location homogeneous transfor mation quaternion 
domains impose certain constraints de sign implementation data structures 
example dimensional array class created vector vector vector class standard template library stl serve parent matrix class turn parent class image class 
image matrix classes contiguous memory alloca tions elements efficient processing 
pro cessing requirements derived classes impose certain constraints design base class 
words trade favor efficiency flexibility data structure influences design array matrix image hierarchy 
fig ure shows current relationships data structures expressed unified modeling language uml 
generic classes generic classes classes provide description implementation behavior component 
generic classes active objects generate separate threads execution run multiple threads 
words classes local executive capability 
example motor class generate threads execution control feedback 
classes local planning capabilities 
types generic classes generic physical classes gpc generic functional classes 
generic physical comp public fig 

typical generic physical component structure generic physical classes generic physical component gpc class defines structure behavior physical object sense 
type classes expose capabilities components independent underlying hardware configuration 
classes partial implementations eventually attached physical simulation objects complete implementation 
objects attach type 
extent implementation depends knowledge available class particular level abstraction 
examples classes motor joint wheel arm mast locomotor rover camera gyro socket 
components appear different levels granularity functional layer 
shows illustration typical generic physical component 
characteristics generic components represent view physical entity 
attach concrete physical classes type 
physical classes complete implementation generic class interface 
provide generic public interfaces supports different physical implementations 
interfaces define functionality services component 
provide runtime model component operation 
manage local atomic resources resolve local conflicts 
encapsulate states component provide access states public interface 
decision layer query state component time 
provide local state estimation information available scope component 
may attach external generic estimators kalman filter provide resource usage prediction response queries decision layer 
may internal state machines 
may include generic physical components 
components publicly accessible allow access subordinates 
state classes components state variables logging tracking recovery strategies 
components numerous state variables depending states interesting particular application 
state information different forms 
may contained software variable hardware register 
track hardware registers state variable created mirror registers 
doing enables tracking logging particular state planning recovery purposes 
typical components tens states 
state class designed provide uniform handling state variables 
state class wraps actual state variable 
state variables represented integers vectors matrices bit patterns 
state class tracks transitions time tags logs state history 
internal state machines keep track current states allowable state transitions 
state class attach external class provides additional global functionality periodic monitoring selected subset system states 
state tracking selectively disabled completely eliminated applications require feature 
state information accessed state query interface 
states internally monitored component externally monitored components decision layer 
public private operation particular component create new internal thread monitor state variable act state transitions 
single state monitored components simultaneously threads control 
successfully state class implementation reentrant 
state estimation state variables state estimation different forms 
estimation local state implemented scope component may implemented software hardware combination 
redundancy information available component provide better estimates state 
estimation state typically limited knowledge available component sophisticated estimates obtained querying higher level components larger scope 
state estimation occurs request ei ther external internal time component executes proper estimation operation updates state variable returns estimate 
resource queries addition state queries components sup port resource queries 
time component queried resources required execute op eration returns information client 
information form single number vector presenting resource usage profile set profiles 
local execution planning generic physical functional components local executive planning capabilities 
limited scope component higherlevel components enjoy executive control subordinates 
global resources power memory couple components system managed decision layer 
sense functional layer provides different granularity baseline functionality decision layer 
higher level components hide complexities subordinates 
generic functional components generic functional class class describes interface functionality generic algorithm 
provides framework implementing complex functional algorithms 
generic functional class complete implementation functionality interfaces generic physical classes 
generic functional components similar structure generic physical components attach hardware simulation components 
examples generic functional components visual navigator localizer 
state class example generic functional component 
generic functional components may generic physical components implementation 
example class class 
class implements algorithm combines robot motion estimates visual information provide accurate position estimates 
uses camera gpc class acquire successive images locomotor gpc class get estimate robot motion 
combines information provide refined estimate robot position 
example generic functional component class uses stereo vision mast rover improve position estimation 
class uses generic mast camera classes implementation 
similar generic physical components generic functional components publish interfaces hide internal implementations 
complexity components varies type 
provide easy interface novice user 
addition executive capabilities certain generic functional components may local planning capabilities 
example class uses vision plan paths avoid obstacles 
class uses camera classes image acquisition threedimensional map generation respectively 
information plans feasible path environment 
class local planning capabilities considering knowledge aggregated components 
class capable generating multiple paths results reported decision layer final selection 
decision layer larger scope visual navigator class carries global planning optimization consideration resource constraints goal requirements system 
vi 
specialized classes specialized classes extensions generic classes adapt generic components particular robotic platform 
known adaptation process specialized classes known adaptor classes 
specialized classes complete implementation generic counterparts may override default implementation necessary 
similar generic counterparts specialized classes executive capabilities 
executive capabilities encapsulate details threading model implementation unique existing hardware platform 
encapsulation enables design higher level abstractions generic classes worrying system specific details 
just generic classes types specialized classes specialized physical classes spc specialized functional classes sfc 
specialized nature classes suitable single 
specialized physical classes specialized physical class class adapts functionality generic class particular hardware component 
specialized class derived generic counterpart 
completes implementation generic parent cases overrides generic implementation suited particular robotic system 
short tie generic components actual hardware components 
process far difficult arduous task 
hardware component comes motor fib board lm chip fig 

generic specialized motor classes architecture theory operation 
generic component provides behavior theory operation 
putting careful design result architectural mismatch poor system performance 
ideally leverage features hardware architecture time fit nicely generic components 
job specialized classes implement behavior defined generic components functionality provided hardware components 
complete match functionality accomplished 
specialized classes adapt hardware behavior extent possible 
example specialized physical classes shown 
class gpc provides interface partial functionality controlled motor operations 
classes specialized class rocky rover motor rocky motor 
rocky implements motor control shared parallel bus implementing digital board rocky implements motor control control chips serial bus 
relationship class inheritance aggregation 
pattern allows users instantiate object specialized classes 
specialized functional classes specialized functional class class de rived generic counterpart generic func tional class 
cases applica tion requires parameter adjustments algorithms 
specialized adaptation allows user modify functionality generic algorithms override certain operations particular imple mentation 
classes common 
specialized classes typically application specific 
cases generic component types fig 

generic specialized manipulator classes interfaces sufficient particular implemen tation algorithm 
result extended version generic component 
extended classes generic counter parts limits portability different robotic plat forms 
algorithms generic component types implementation operate special ized derived types 
vii 
example manipulator class hierarchy consider rocky implementation manipulation 
rocky mars rover prototype degree freedom dof mast dof arm 
shows manipulator class hierarchy relationship parent aggregates children 
top hierarchy manipulator class generic physical component 
class derived class 
aggregates variable number link objects 
words manipulator system coordinated motors number links joints 
manipulator class provides generic functionality individual joint mode control global velocity acceleration control 
contains strategies recovery error conditions 
additionally provides hooks attaching various effectors 
manipulator types derived manipulator class serial manipulator class parallel manipulator class 
serial manipulator robotic arm concatenates number joints links 
parallel manipulator mechanism links attached parallel output plane 
example parallel manipulator stewart platform motion simulators 
duality equations governing kinematics serial parallel manipulators 
serial manipulators relatively simple forward kinematics parallel manipulators relatively simple inverse kinematics 
serial manipulator class generic forward kinematic equations apply types serial manipulators specialized arm closed form inverse kinematics particular arm 
similarly class generic inverse kinematics 
numerical methods solving general inverse kinematic problems serial manipulators 
available class 
hybrid manipulators combine serial parallel linkages represented separate class shown 
serial manipulator arm leg robot 
mounted fixed platform mobile robot 
options requires additional functionality behavior serial manipulator support 
example helpful manipulator mounted mobile platform know mobility system able control cases 
case arm 
arm aware mobility system extend arm edge workspace arm loses dexterity soon singular 
arm knows mounted mobile platform arm command mobility system advance robot slightly shift workspace arm forward keeping arm dexterous region workspace 
arm interface remains functionality workspace extended 
functionality implemented class uses generic locomotor class implementation 
derived class 
type mobile manipulator class 
addition supporting functionality mobile manipulator class extends interface class include additional operations stow rover specific functionality 
consider rocky rover defines specialized classes derived class 
mast class arm class 
classes define joint configuration parameters link types dimensions inverse kinematics properties unique manipulators 
adaptation process arm mast software generic rover manipulator class specialized rm mast classes 
class provides generic forward inverse kinematics joint motion control trajectory tracking conditional motion error recovery 
specialized arm classes specify link dimensions joint limits actuator types effector type 
override generic kinematics manipulator class closed form kinematics specifically derived instances 
fig 

rocky rover pdm viii 
experimental results running different platforms system computing architecture rocky rocky mars rover prototype drive wheels mobility mechanism 
steerable front wheels non steerable back wheels 
mounted rover platform ma degree freedom dof arm independently actuated degree freedom mast 
arm shoulder roll shoulder pitch mast additional el bow pitch 
pairs stereo cameras mounted rover stereo camera pair mounted mast stereo camera pairs mounted front back sides vehicle 
computing sys tem consists vme backplane mhz processor board ethernet frame digital board analog board 
main processor runs vxworks real time operating system 
ator dc controlled separate micro controller lm bit parallel bus 
board processor communicates external host wireless ethernet 
system ty computing architecture pdm pdm fixed manipulation platform dof arm dof mast mounted platform 
mast arm simi lar joint configuration include shoulder roll shoulder pitch elbow pitch wrist pitch 
arm single dof gripper mast stereo camera pair 
computing system different rocky consists backplane mhz pentium processor board ethernet px frame digital board 
main processor runs vxworks real time operating system 
actuator dc controlled separate micro controller lm connected board board 
board processor communicates external host wired ethernet maximum throughput mb sec 
implementation results rocky rover pdm different physical characteristics different hardware implementations 
parts claraty functional layer implemented tested systems 
rocky able demonstrate parallel execution arm mast mobility operations 
demonstrate continuous driving autonomous vision sample acquisition parallel execution vision processing drive commanding 
pdm able demonstrate vision sample acquisition fixed platform sharing functional layer code 
percentage increase develop generic framework 
proposed architecture flexible easy light weight memory speed 
simultaneous multiple task operations easy invoke shared resources needed resolved high context switching speeds 
example systems shared bit parallel bus control actuators 
resource managed locally class 
ix 
plan continue development func tional decision layers claraty architec ture 
implementing interface layers resource queries 
develop various domains functional layer include input output motion control mobility navigation manipulation perception vision resource management system control communica tion sensor instrument processing packages 
acknowledgments described carried jet propulsion laboratory california institute technology contract national tics space administration 
alami autonomy 
international journal robotics research april 
ronald arkin 
motor schema robot navigation 
int journal robotics research 
matthew 
generic programming stl extending standard template library 
addison wesley professional computing series reading ma october 
architecture 
international journal robotics research april 
rodney brooks 
robust layered control system mobile robot 
ieee robotics automation 
bruce douglas 
real time uml developing objects embedded systems 
addison wesley longman reading ma december 
tara estlin gregg darren steve chien 
continuous planning techniques coordinate multiple rovers 
proceedings ijcai workshop scheduling planning meet real time monitoring dynamic uncertain world stockholm sweden august 
firby 
adaptive execution complex dynamic worlds 
phd thesis yale university department computer science 
forest fisher steve chien leslie law michael 
automated deep space communications station 
proceedings ieee aerospace conference aspen march 
lo gat :10.1.1.165.5283
layer architectures 
kortenkamp murphy editors artificial intelligence mobile robots boston ma 
mit press 
ll knight chien keller 
integrating model artificial intelligence planning procedural elaboration onboard spacecraft 
proceedings space ops toulouse france june 
konolige myers ruspini 
architecture design autonomy 
journal experimental theoretical artificial intelligence 
maja mataric 
behavior control examples navigation learning group behavior 
journal experimental theoretical artificial intelligence 
la 
robotic software developed object oriented design 
asme design automation conference minnesota 
lynn parker 
alliance architecture tolerant multi robot 
ornl tm oak ridge national laboratory oak ridge tn 
pardo schneider chen wang 
software architecture complex electromechanical systems 
int journal robotics research april 
simmons 
task description language robot control 
ieee rsj intelligent robotics systems conference vancouver canada october 
reid simmons david 
task description language robot control 
proceedings international conference intelligent robots systems vancouver canada october 
mobility software 
com rwi software htm 
real world interface division ma 
estlin das 
claraty architecture robotic autonomy 
proceedings ieee aerospace conference big sky montana march 
