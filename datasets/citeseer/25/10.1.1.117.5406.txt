iee proceedings software number accepted publication revisions december 
understanding requirements developing open source software systems walt scacchi institute software research university california irvine irvine ca usa www ics uci edu ics uci edu study presents initial set findings empirical study social processes technical system configurations organizational contexts interrelationships give rise open software 
focus directed understanding requirements open software development efforts development requirements differs traditional software engineering requirements engineering 
open software development communities described examined compared help discover differences may 
kinds software informalisms play critical role elicitation analysis specification validation management requirements developing open software systems 
subsequently understanding roles software informalisms take new formulation requirements development process open source software focus study 
focus enables considering reformulation requirements engineering process associated artifacts formalisms better account requirements developing open source software systems 
iee proceedings software number accepted publication revisions december 

overview focus directed understanding requirements open software development efforts development requirements differs traditional software engineering requirements engineering 
hypothesis testing testing viability prescriptive software engineering methodology notational form 
study discovery description abstraction open software development practices artifacts different settings different communities 
expanding notions requirements engineering processes process models need address account open source software development 
set stage analysis need characterize research methods principles employed study 
subsequently understand open software communities examined characteristics distinguish community 
followed model processes artifacts give rise requirements developing open source software systems 
model artifacts focus analysis basis concluding discussion 
includes discussion new different findings report implications formalized developing different kinds open software systems 

research methodology comparative methods principles study reports findings results ongoing investigation socio technical processes practices community forms open source software development 
purpose multi year investigation develop narrative semi structured hypertextual formal computational models processes practices community forms 
report presents systematic narrative model characterizes processes requirements open source software systems developed 
model compares form presents contrasting account software requirements differ traditional software engineering open source approaches 
model descriptive empirically grounded 
model comparative attempts characterize open source requirements engineering process transcends practice particular project particular community 
comparative dimension necessary avoid premature generalizations processes practices associated particular open software system receive substantial attention news media gnu linux operating system 
comparison allows system projects may follow different form version open source software development astrophysics research community networked computer game arena 
subsequently model prescriptive characterize done order develop open source software requirements concluding discussion remarks bracketed qualified 
comparative case studies important serve foundation formalization findings process models process meta model :10.1.1.50.7533
meta model construct predictive testable incrementally refined theory open software development processes communities projects 
process meta model configure generate instantiate web process modeling prototyping enactment environments enable modeled processes globally deployed computationally supported 
may value academic research commercial development organizations seek adopt best practices open software development processes suited needs situation 
study results report denote new foundation computational models open software requirements processes may developed subsequent analysis simulation redesign 
study reported entails empirical field study methods follow conform principles conducting evaluating interpretive research design identified 
principles study manner 
iee proceedings software number accepted publication revisions december 
principle hermeneutic circle focusing attention analysis open source requirements process emerges consideration parts requirements subprocesses associated artifacts interacts shapes parts 
second principle contextualization draws attention need identify web situations conditions events characterize social historical background requirements engineering practices open source development projects communities 
begins sections continues presentation descriptive model informal artifacts open software requirements processes 
principle revealing interaction researcher subjects artifacts 
basic concern addressed disclosed research involves ethnographic field study particularly requiring virtual ethnography situation 
study researcher acted participant observer seeks understand open source software requirements set specific open software systems developed ends 
virtual worlds open software development projects generally corporate workplace single location software development occurs 
traditional face face ethnography visible participant observation readily occur 
occurs occurs generally online hosted web site interactively accessed internet mechanisms open public access dispersed geographic space multiple time zones 
informal hallway conversations organized scheduled meetings rare may generally take place electronic publicly visible online manner requirements development may implied hidden invisible 
subsequently web participant researcher sit group chat core developers pre announced event casual developers reviewers regularly 
alternatively potential active participants simply browse email community bulletin boards related web site postings signal occurrence events situations interest software release announcements problem reports 
modes participation uncommon cited way project newcomers join learn domain language issues minimal bother distraction doing core development effort 
social interaction open software project participants may rarely face face colocated open source development efforts 
real world events professional conferences may enable distant collaborators meet interact learn events may occur year effectively inaccessible project participants due distant location 
open software projects social technical interaction primarily occurs networked mediated computing environment populated web browsers email instant messaging utilities source text editors software development tools compilers debuggers version control systems 
program tool runs asynchronously different user processes application windows appearing graphic user interface appearing artifacts stored distributed repositories 
workplace open source software development screen furniture surroundings house 
workplace experienced navigated interacted keystrokes mouse cursor movement gestures concert seen read written typed 
observe participate comprehend going open source development project necessary situated embedded immersed software contributor reviewer reader projects networked computing environment workplace setting 
projects reported researcher reader acted interested unfamiliar software developer seeking understand review discuss participants contemporary legacy software development problems opportunities features constraints cf 

occurred asynchronously running user application sessions networked computing environment modes participation may restricted example may check download source code typically approved core development team may upload check modified code shared repository 
iee proceedings software number accepted publication revisions december 
indicated hours time totaling hours period months 
data exhibits appear section comparative minute sample web experiences shared artifacts screen displays seen community participant captured encountered researcher 
fourth principle abstraction generalization 
choice examine compare requirements engineering activities artifacts different software development communities response motivation 
requirements engineering process section provides description comparison spans distinct communities 
model abstracts details summary terms identified sub section headings span multiple open source projects sample space order create general model covers details examined projects 
similarly classification open source software requirements artifacts software informalisms section reflects similar kind generalization project community 
fifth principle dialogical reasoning compares received wisdom extant theory methodology software requirements engineering community empirically participant observation open source software development efforts 
appears sections 
sixth principle multiple interpretations highlights need recognize different participants see experience things differently may able communicate share things degree similarity replication 
descriptive model report unique characterization appear open source software development efforts communities described 
interpretation subject seventh principle suspicion possible biases systematic distortions presentation 
reader cautioned look alternative explanations arrangements data give rise different model requirements process follows 
models published contribution review comparison 
alternatively model revised updated account alternative interpretations generalization better accounts principles listed 
issues addressed sections 
understanding open software development different communities assume priori model globally accepted framework defines open software developed 
subsequently starting point investigate open software practices different communities ethnographic perspective 
chosen different communities study 
centered development software networked computer games internet web infrastructure ray astronomy deep space imaging academic software design research 
contrast efforts draw attention generally open source development project single community gained examining comparing communities processes practices open software development different communities 
may help clarify observations may specific community gnu linux projects compared span multiple distinct communities 
study communities primarily oriented develop software supports scholarly research ray astronomy academic software design research small user communities 
contrast communities oriented primarily software development efforts may replace create commercially viable systems large user communities 
sample space allows comparison different kinds 
community study briefly characterized 
networked computer game worlds participants community focus development evolution person fps games quake arena unreal tournament massive multiplayer online role playing games online sims com nights com 
interest networked computer games gaming environments single user counterparts exploded years major global mode entertainment playful fun 
release iee proceedings software number accepted publication revisions december 
doom early fps game web open source form mid began widely recognized landmark event launched development redistribution called pc game mods cleveland 
mods updates variants proprietary closed source computer game engines provide extension mechanisms game scripting languages modify extend game 
mods created small numbers users want able modify games compared huge numbers players games provided 
scope mods expanded include new game types game character models surface textures levels game play arenas virtual worlds artificially intelligent game bots game opponents 
companies id software makers doom quake game family epic games makers unreal game family helped encourage open extension proprietary game engines 
done game licenses require publicly distributed mods open source provision mod tools level editors model builders game engine programming scripting languages modifying game objects behavior potential create entirely new games 
companies recruit new game development staff community mod developers see exhibit 
internet web infrastructure participants community focus development evolution systems apache web server mozilla web browser development environment kde internet news server openbsd mono open source implementation net independent microsoft thousands community viewed typically considered popular accounts open source software projects 
gnu linux operating system environment course largest complex diverse sub community arena merits separate treatment examination 
internet web infrastructure projects constitute recognizable communities sub communities practice 
software systems focus generally standalone enduser applications targeted system administrators developers targeted user base eventual users systems 
notable exceptions web browsers news readers instant messaging graphic image manipulation programs growing number user community ray astronomy deep space imaging participants community focus development evolution software systems supporting chandra ray observatory european space agency newton observatory sloan digital sky survey 
highly visible astrophysics research projects scientific discoveries depend processing remotely sensed data complex network open source software applications process remotely sensed data 
contrast preceding development oriented communities open software play significant role scientific research communities 
example scientific findings discoveries resulting remotely sensed observations reported unreal half life proprietary license gave rise half life popular fps game game mod 
counter strike developed distributed open source independent game player developers 
developers financially engaged half life commercial developer valve software participate royalty stream generated retail sales cs mod publicly accessible web 
reasonable note main software systems enabled world wide web ncsa mosaic web browser descendants netscape navigator mozilla apache web server originally know httpd originally remain active open source software development projects 
sourceforge community web portal www sourceforge net currently stores information developers open source software development projects projects indicating availability mature released actively supported software system 
example see gsfc nasa gov ap html displays composite image constructed ray chandra observatory optical hubble space telescope sensors 
open software processing pipelines sensor distinct maintained different organizations 
outputs integrated images registered oriented synchronized overlay pseudo colored composed final image shown cited iee proceedings software number accepted publication revisions december 
members relevant scientific community want assured results byproduct questionable software calculation opaque processing trick 
scientific fields astrophysics critically depend software open source increasingly considered essential precondition research proceed scientific findings trusted open independent review validation 
furthermore discoveries physics deep space turn leads modification extension astronomical software order explore analyze newly observed phenomena modify add capabilities remote sensing mechanisms operate 
academic software systems design participants community focus development evolution software architecture uml centered design efforts argouml argouml tigris org cmu uci www isr uci edu projects 
community easily associated mainstream software engineering research 
people participate community generally develop software academic research teaching purposes order explore topics software design software architecture software design modeling notations software design recovery reverse software engineering accordingly may unreasonable expect open software developed community embody demonstrate principles modern software engineering theory practice 
furthermore ray astronomy community members community expect breakthrough technologies innovations declared refereed conference publication scholarly journal opportunity exists community members able access review try software assess demonstrate capabilities 
inability provide access may result software labeled innovation claim challenged discounted 
alternatively declarations non disclosure proprietary intellectual property generally academic software transferred commercial firm 
acceptable find academic software open source constitutes proof concept demonstration prototype system intended routine production users 
community characteristics community constituted people identify development open software arenas noted 
participants may employ pseudonyms user id identifying community assume rely anonymous identifiers communities cyberspace preece smith kollock 
open software developers contributors tend act ways building trust reputation fame generous time expertise source code valued traits community participants 
develop contribute software representations content programs design diagrams execution scripts code reviews test case data web pages email comments web sites community 
making contributions recognized community members having substantive contributions prerequisite advancing technically socially community fielding kim 
consequence participants communities participate different roles technical social networks smith kollock preece course developing evolving open software 
administrators open software community web sites serve choices information post site post post 
similarly may choose create site map constitutes classification site domain content geography community structure boundaries 
community participants regularly engage online discussion forums threaded email messages central way observe participate contribute public discussions topics interest 
people engage private online offline discussions get posted publicly disclosed due perceived sensitive content 
communities examined participants choose web page 
dozens open software programs brought alignment image produced scientific discovery claimed substantiated 
alternative scheme automatically discovering membership web community uses graph traversal crawling linked web pages maximum flow network algorithms 
iee proceedings software number accepted publication revisions december 
occasion author publish technical reports scholarly research papers software development efforts publicly available subsequent examination review secondary analysis 
highlighted items point public availability data collected analyzed re represented narrative computational process models quantitative studies :10.1.1.50.7533
significant examples kind data collected analyzed part ongoing study 
includes number examples serve data 
subsequently turn review requirements engineering order establish baseline comparison observe development open software system requirements similar different 

classic software requirements engineering process experts field software requirements engineering identify recurring set activities characterize engineering process 
activities generally construed necessary order produce reliable high quality trustworthy system include eliciting requirements identifies system stakeholders stakeholder goals needs expectations system boundaries 
elicitation techniques questionnaire surveys interviews documentation review focus groups joint application development team meetings may employed 
modeling specifying requirements focuses attention systematic modeling functional non functional software requirements 
model functional requirements operational domain problems specifying system processing states events input events output events process execution flags signals error detection exception handling triggers system data 
specifying system data may include identification data objects data types data sources user screen displays meta data construction data dictionary 
functional requirements specify system data flow system subsystem states controlled synchronized events 
advanced modeling techniques may include construction visual animations simulated walkthroughs system functionality 
contrast model non functional requirements goals capabilities constraints situate functional system context operation 
involve identifying enterprise model problem domain model system model type data model type 
analyzing requirements entails systematic reasoning internal consistency completeness correctness specification 
check see requirements externally correct accurate model world 
determination may result observing visual animation specification operational execution simulation 
sophisticated analyses may check reachability termination live lock dead lock safety modeled system 
validating requirements engages domain experts assess feasibility modeled system solution identify realizable plausible implausible system requirements 
systematic techniques inspecting requirements assess system usability feasibility may employed 
result validation requirements engineer better calibrate customer expectations developed 
communicating requirements entails documenting requirements example creation software requirements specification srs document establishing criteria requirements traceability managing storage evolution preceding requirements artifacts 
activities hand possible consider requirements engineering process captures suitably characterizes occurs development requirements open software systems occurs 
objective establish conformity distance metrics quantitative measures purport reveal insights comparative quality different open software systems reused experimental situations 
objective help determine classic process adequately characterizes covers observable iee proceedings software number accepted publication revisions december 
development open software requirements new alternative model requirements development open software needed 
experts requirements engineering begun recognize limits traditional requirements engineering process 
call better modeling analysis problem domain opposed just focusing functional behavior software 
draw attention need develop richer models capturing analyzing non functional requirements 
point opportunities bridge gap requirements elicitation techniques contextual ethnographic techniques techniques formal specification analysis 
take account suggested improvements study 

open software processes developing requirements contrast world classic software engineering open software development communities readily adopt practice modern software engineering requirements engineering processes 
surprise 
communities develop software extremely valuable generally reliable trustworthy readily associated user community 
processes practices develop requirements open software systems 
study date types software requirements activities employed communities 
find examples formal requirements elicitation analysis specification activity kind suggested software requirements engineering textbooks communities study 
similarly example online web sites offline published technical reports documents identified requirements specification documents communities 
different 
requirements elicitation vs assertion open software requirements appears open software requirements articulated number ways ultimately expressed represented depicted web 
closer examination requirements open software appear implied email message discussion thread captured posted project web site open review elaboration refutation refinement 
consider example web site kde system www kde org internet web infrastructure community 
example displayed exhibit reveals asserted capabilities qt subsystem kde 
capabilities identified exhibit re benefits qt discussion thread highlight implied requirements multi language character sets arabic hebrew english database support need access data database display gui vice versa 
requirements simply asserted documents sources standards focus groups requirements developers wanted capabilities 
asserted system capabilities post hoc requirements characterizing functional capability implemented 
concerned developers justify requirements provision required coding effort capabilities operational 
senior members core developers community vote agree discussion include asserted capability system distribution 
historical record may email discussion archive document required 
asserted generally software requirements specifications central manager cm distributed data network system july www sourceforge net projects 
fair observe srs follow guidelines embodied military standards software development suggesting origination industrial firm 
exhibit appears screenshot web browsing session 
includes contextual information second research principle requiring benefiting complete display view 
iee proceedings software number accepted publication revisions december 
exhibit 
sample implicit requirements kde software subsystem qt expressed threaded email discussion 
source dot kde org july 
iee proceedings software number accepted publication revisions december 
effort apparent document formalize substantiate capability system requirement 
asserted capabilities invisible transparent taken granted requirements labeled treated obvious shared awareness familiar system development 
example reveals different kind open software requirement 
case displayed exhibit finds requirements vision document conveys non functional requirement community software development bottom portion exhibit 
read non functional requirement system developers embrace community software development process develop evolve argouml system say process relies system models represented uml diagrams cf 

community software development extension community development recognized important development success system 
may method improving system quality reliability compared existing software engineering tools techniques uml supporting uml software design 
third example reveals kind elicitation internet web infrastructure community 
exhibit see overview mono project 
see multiple statements software component class owners sign commit developing required ideas run time object service classes projects 
non functional requirements people volunteer participate community software development manner compatible portrayed exhibit 
systems exhibits considered early development maturity call functional capabilities needed help sufficiently complete usage 
understanding requirements open software systems elicited find evidence elicitation volunteers come forward participate community software development 
similar example inviting new participants world game mods appears exhibit 
observe assertion requirements simply appear exist question trace point origination elicited stakeholders customers prospective users open software systems 
previously noted evidence data indicate occurrence documentation requirements elicitation effort arising open software development project 
finding evidence invalidate observations point need broaden scope software requirements captured recorded 
requirements analysis vs requirements reading sense making accountability open software development requirements analysis occur requirements specifications described 
requirements analysis specification interrelated activities distinct stages consider examining open software requirements analyzed 
exhibits come different points source document single research accessible web associated chandra ray center data system sensing imaging deep space astronomical objects ray spectrum 
exhibit suggests reader requirements involved complex seen exhibit confirm claim outsider interpreting shown exhibit 
data flow diagram exhibit suggests denotes part specification requirements 
software developers community understand involved functional operation complex system 
answer lies observation developers seek understanding read research quite closely able draw prior knowledge experience relevant physical digital software domains 
close reading means entails multiple re readings sense making relative expertise prior development experience cf 

casual competent reading requires degree confidence trust authors account functionality argouml tool academic software design community argouml tigris org 
iee proceedings software number accepted publication revisions december 
exhibit 
software requirements vision statement highlighting community development software development objective non functional requirement 
source argouml tigris org vision html july 
iee proceedings software number accepted publication revisions december 
exhibit non functional requirement identifying need volunteers owners software components classes bound developer 
source www go mono com ideas html july 
contents page updated reflect remaining tasks needing contributors adding new tasks development 
iee proceedings software number accepted publication revisions december 
exhibit 
asserted capability center invites open software game developers extensions kind require various types available extensions create levels mods models 
source www com editing iee proceedings software number accepted publication revisions december 
exhibit 
asserted capability indicating requirements involved complex require automated registry system software architecture configuring dozens application software pipelines 
source 
iee proceedings software number accepted publication revisions december 
exhibit 
specification data flow relationships network software module pipelines constitute processing threads configured order transform remotely sensed telemetry data digital images deep space objects 
source iee proceedings software number accepted publication revisions december 
architecture configured order accept plausible accurate correct 
notion requirements open software system practice analyzed reading technical accounts narratives making sense readings reconciled prior knowledge unique ray astronomy software community 
activities occur communities 
reviews functional non functional requirements appearing exhibits possible observe descriptions appearing exhibits self contained 
requires reader developer community closely casually read described sense consult materials expertise trust description author reliable accountable manner open software requirements described 
analyzing open software requirements entails little automated analysis formal reasoning visual animation software requirements specifications cf 

participants communities able understand functional non functional requirements ways sufficient lead ongoing development routine various kinds open software systems 
requirements specification modeling vs continually emerging webs software discourse requirements open software systems asserted elicited requirements specified modeled 
examining data communities increasingly apparent open software requirements emerge experiences community participants email discussion forums see exhibit example 
communication messages turn give rise development narrative descriptions succinctly specify condense web discourse functional non functional requirements open software system 
discourse rendered descriptions email discussion forum archives web pages populate community web sites informal software descriptions posted hyperlinked passively referenced assumed common knowledge community participants expect cohorts possess 
exhibit ray deep space imaging software community see passing opening paragraph requirements processing chandra telemetry imaging data involved complex comprehend recognize involved complex requirements community members develop open software applications generally ph degrees rarely simply competent software engineering professional 
subsequently develop software community need recapitulate software system requirement due problem domain astrophysics 
community members assumed mastery topics prior software development encountering problems understanding arising technical problems developing operation functional enhancement remote sensing digital imaging software 
openness effective software developer community competent discourse astrophysics tools techniques developing open software systems 
subsequently spanning communities exhibits observe requirements open software specified webs discourse link email discussion threads system vision statements ideas system functionality non functional need volunteer developers implement functionality promotional encouragement specify develop functionality need help get new job scholarly scientific research publications underscore requirements domain specific software astronomical imaging complex understood elaboration rely prior scientific domain knowledge tradition open scientific research 
iee proceedings software number accepted publication revisions december 
modes discourse web specification dissemination continually emerging source open software requirements new contributions new contributors participants new ideas new career opportunities new research publications cf 

requirements validation vs condensing discourse concentrates system functionality community development software requirements validated respect software implementation 
open software requirements generally recorded formal srs document requirements typically cast mathematical logic algebraic state transition notational scheme software implementations validated requirements 
communities appears requirements open software design implementation testing descriptions software artifacts user manuals usage artifacts input data program invocation scripts 
similarly requirements spread different kinds electronic documents including web pages sites hypertext links source code directories threaded email transcripts 
community requirements described asserted implied informally 
possible observe threaded email discussions community participants able comprehend condense wide ranging software requirements succinct descriptions lean media pushes context creation background 
goguen suggests metaphor concentrating hardening requirements way characterize software requirements evolve forms perceived suitable validation 
characterization quite closely match observed development requirements open software 
subsequently find requirements validation implicit product explicit goal open software requirements constituted described discussed cross referenced hyperlinked informal descriptions system implementations 
communicating requirements vs global access open software webs distinguishing feature open software associated communities requirements informal organized typically stored persistent form globally accessible 
true community web sites site contents source code directories threaded email discussion forums descriptions known bugs desired system enhancements records multiple system versions 
persistence hypertext style organization linkage global access open software descriptions appear conditions receive attention classic requirements engineering approaches exceptions 
conditions helps communication open software requirements 
conditions contribute ability community participants outsiders looking trace development evolution software requirements software development descriptions community participants 
enables observers developers trace example web different issues positions arguments policy statements design rationales support see exhibit challenge viability emerging software requirements cf 
traces appear lack persistent representation awkward history file web browser 
communities communicates community oriented requirements 
non functional requirements may similar enterprise modeling 
differences may minor 
community interested sustaining growing community development enterprise cf 

second community interested sustaining growing community open software artifacts descriptions representations 
third community interested updating evolving community information sharing web sites 
recognition community requirements surprising observe emergence commercial efforts sourceforge offer community support systems intended address requirements argouml community site www tigris org academic software design community 
iee proceedings software number accepted publication revisions december 
identifying common foundation development open software requirements data analysis possible identify items practices capabilities may better characterize requirements open software developed 
centers emergent creation usage evolution informal software descriptions vehicle developing open software requirements 
explored section 

informalisms open software system requirements functional non functional requirements open software systems elicited analyzed specified validated managed variety web descriptions 
descriptions treated collectively software informalisms 
choice designate descriptions informalisms draw distinction requirements open software systems described contrast recommended formal logic requirements notations formalisms advocated traditional approaches 
communities examined study software informalisms appear preferred scheme describing representing open software requirements 
explicit objective effort treat informalisms informal software requirements refined formal requirements communities 
accordingly initial classification scheme inventories available types software requirements informalisms communities study 
way seek identify relations link comprehensive stories intersecting story fragments help convey embody requirements open source software system 
types software informalisms identified sub types identified follows 
community communications requirements open software asserted read discussed condensed accountable small set computer communication tools modalities 
absence located workplaces community communication infrastructure serves place software requirements engineering performed requirements artifacts articulated refined stored discarded 
communication systems appear form messages placed webbased discussion forums email list servers network news groups frequently internet chat instant messaging messages written read systems links messages software webs provide sense context understand messages act 
scenarios usage linked web pages open software developers meet face face create employ read revise shared mental constructions system suppose function 
shared understanding occur distance space time community participants create artifacts screenshots guided tours navigational click sequences back web page links supplementary narrative descriptions attempting convey intent understanding system operates appears user 
occur participants find simpler easier explain suppose happen observable user interface pictures related hypermedia just words 
similarly participants may publish operational program execution scripts recipes develop extend designated types open software artifacts 
hypermedia scenarios usage may serve similar purpose formally elicited modeled cases apparent effort codify usage scenarios manner notational form communities study 
goguen observes formalisms limited mathematical logic state transition semantics include descriptive schemes formed structured semistructured narratives employed software requirements specifications documents 
instant messaging widely observed networked computer game community contrast academic software design ray astrophysics community find traces instant messaging activities support open software development 
iee proceedings software number accepted publication revisions december 
howto guides online documents capture condense perform behavior operation function system serve semi structured narrative assert imply user requirements 
formal howto descriptions include explicit declarations purpose howto may identified system tutorial 
community participants may seek formal howto need add system module class structure contribute resources efforts open software project 
contrast informal howto may appear selection composition recomposition proceeding 
informal howto guides may labeled faq list frequently asked questions system operates find development status developed known bugs workarounds faqs indicate frequently questions may asked effort measure track faq usage 
external publications communities study external publications describe open software available consumption public community members 
common technical articles books common growing popularity internet web infrastructure computer game community 
developers find books especially derived composition extension open software informalisms valuable convenient source recording explaining functional non functional requirements open software system developed 
hand professional articles inform interested readers promote author interests certain open software technology help identify general functional non functional software requirements systems 
article may appear trade publications linux journal game developer 
academic articles refereed appear conference proceedings scholarly journals serve similar purpose professional articles usually technical depth theoretical recapitulation analytical detail extensive bibliography related efforts 
may case readers academic research papers bring reading substantial amount prior domain knowledge 
expertise may enable determine open software requirements referenced may obvious received wisdom versus requirements new innovative noteworthy 
open software web sites source webs suggested open software easily web internet 
information infrastructure absolute necessity open software 
global infrastructure enabler open software communities processes practices 
open software communities take advantage community web site information infrastructure publishing sharing open descriptions software form web pages web links software artifact content indexes directories 
pages hypertext links directories community information structures serve kind organizational memory community information system 
memory information system records stores retrieves open software systems artifacts articulated negotiated employed refined coordinated community collaborating developer users 
web pages open software communities include content incorporates text tables presentation frames diagrams navigational images image maps describe associated open software systems 
content may describe vision statements assert system features characterize narrative functional non functional capabilities open software system 
content considered software requirements specification document unclear allow document narrative software system considered srs document formal requirements specification 
web content describes open software system comes embedded web links 
links associate content web pages sites applications 
links may simply denote traversal links goto links related software components example go source code named procedure call source web content explicit meaning semantics iee proceedings software number accepted publication revisions december 
assigned link 
alternatively may serve enumerated navigational index links site indexes helps direct community participant outsider find way community community information base community open source code base 
serve links implied helper applications tools invoked navigational access remotely served file types registered client associated external application programs plug programs invoked selected traversed 
open software communities study provides access web source code directories files compositions download build installation 
directories files contain operational software open source code related support files web pages 
source code denote requirements implementations requirements specifications 
program execution scripts take form shell tcl perl python java scripts linux unix systems may employed invoking system modules 
execution scripts functional sense invoke cause system behavior implemented open software source code 
scripts generally platform specific effectively impose functional requirements implemented system 
surprising find examples community web pages files describe requirements explicitly requirements open software system behavior control script requirements left implicit 
kinds concerns explication functional requirements files compilation build scripts cvs files specify control synchronize concurrent software versions deployment installation compositions zip files coordinating shared software production distribution 
software bug reports issue tracking obvious frequent types discourse appears open software systems discussion operational problems current version system implementation 
bugs issues missing functionality incorrect calculation incorrect rendering application domain constructs common open software software 
open software development situation community participants rely lean communication media email bug report related issue tracking mechanisms capture refine implicit mis stated unstated system requirements 
find capabilities bug report systems bugzilla internet web infrastructure community appearing academic software design community networked game communities 
contrast software developers ray astrophysics community rely threaded email discussion lists manage re emerging requirements relatively message postings 
traditional software system documentation open software systems online system documentation documentation intended printed support users developers 
systems examined study possible locate online man pages help pages describe commands command parameters invoke system 
similarly possible locate online user manuals systems 
apparent situations online documentation usually dated subsequently inconsistent current functional capabilities system commands 
may just expected closed open software systems 
apparent information resources software informalisms available developers users help detect resolve inconsistencies documentation 
set software informalisms serve context reconstructing system functional requirements 
open software manuals necessarily better worse software context may enable typical inconsistencies encounters readily resolved 
subsequently incentives online manuals help files open software systems better minimum needed assist unfamiliar user developer get started look help 
documentation 
iee proceedings software number accepted publication revisions december 
software extension mechanisms architectures developers software systems communities seek keep systems open provision variety extension mechanisms architectures 
just open application program interfaces apis generally represent operational mechanisms capabilities 
extensions include embedded scripting languages unreal tournament perl python internet web infrastructure applications 
open software architectures accommodate operational plug modules case apache web server chandra system infrastructure 
open architectural schemes accommodate reconfigurable processing pipelines chandra data processing infrastructure 
networked computer game community see game vendors providing tools utilities assist advanced users develop extensions custom programs order keep open software system alive continuously evolving 
mechanisms architectures treated software formalisms subject debate 
community apparent software extensions mechanisms extensible software architectures contribute enable continuing emergence open software requirements 
appears software informalisms defy effort formalize mathematical logic analytically rigorous notation 
software communities examined study perceived requirement formalization unrecognized opportunity improve quality usability cost effectiveness open software systems missed 
formalization software benefits benefit members communities realize current practices benefits articulated discourse pervades community 

understanding open software requirements open software development projects requirements engineering efforts implied activities routinely emerge product community discourse software take responsibility realizing requirements 
open software system requirements appear form situated discourse private public email discussion threads emergent artifacts source code fragments included message dialectical social actions negotiate interest commitment accountability 
simply traditional requirements engineering activities class status assigned recognized task open software development communities 
similarly software engineering tools support capture negotiation cost estimate level effort expertise skill timeliness open software development efforts activities occurs regularly informally 
open software systems may reliable high quality users assessments 
requirements exist finding recognizing demands familiarity immersion community discussions 
course stands contrast efforts academic software engineering requirements engineering community develop demonstrate tools explicitly capturing requirements negotiating trade offs system requirements stakeholder interests constructive cost estimation modeling 
furthermore open software systems developers generally users systems develop traditional software requirements engineering efforts developers users distinct developers tend routinely systems develop 
open software systems suffice reliance software informalisms traditional software engineering efforts struggle convert informal requirements formal ones 
developing open software requirements community building process institutionalized community software informalisms 
regard development requirements open software traditional requirements engineering process 
socio technical process entails development constructive social relationships informally negotiated social agreements commitment participate sustained contribution software discourse shared representations 
community building sustaining participation essential iee proceedings software number accepted publication revisions december 
recurring activities enable open software requirements system implementation emerge persist central corporate authority 
open software web sites serve hubs centralize attention happening development focal open software system status participants contributors discourse pending needs furthermore nature open software web sites accessible outside corporate firewall generally global reach accessibility 
means potential exists contributors come multiple remote sites geographic dispersion different times multiple nations potentially representing interests multiple cultures ethnicity 
conditions point new kinds requirements example community building requirements community software requirements community information sharing system web site interlinked communication channels email forums chat requirements 
requirements may entail functional non functional requirements typically expressed open software informalisms formal notations system mathematical logic 

reports study investigates compares describes requirements engineering processes occurs open source software development projects different communities 
number drawn findings 
study sought discover describe practices artifacts characterize requirements developing open software systems developed 
processes artifacts described obvious reader 
true scholars students software requirements engineering participated open software projects 
advocates open source software identify report processes described 
ask obvious source knowledge experience 
majority students participated disappointing find descriptions processes artifacts classic contemporary literature requirements engineering 
contrast study sought develop baseline characterization requirements process open software occurs artifacts mechanisms 
baseline process open software requirements engineering possible prescriptive models requirements engineering process address steps needed transform 
said differently process gets open software development 
position provides basis studies examine redesign open software practices closer advocated classic contemporary scholars software requirements engineering 
enable students scholars software requirements engineering example determine open source software development benefit rigorous requirements elicitation analysis management 
similarly help determine software requirements process relies informalisms effective rooted formalisms 
second report describes new set processes constitute open software requirements developed engineered form narrative model cf 
section 
step develop comprehensively detailed model processes turn analyzed simulated codified computational process model 
process model aligned combined traditional requirements engineering cf 
section 
integration processes broaden scope requirements engineering include open software development example poor quality software engineering alternative dominant tradition advocated contemporary software requirements experts scholars 
clearly development open software systems entails social technical relations differ advocated traditional software requirements engineering texts 
unclear kinds software systems amenable open source approach require struggle formalize traditional software requirements specifications 
iee proceedings software number accepted publication revisions december 
third study reports centrality importance open software requirements processes software informalisms development open software systems projects communities 
result construed advocacy informal formal software system requirements developed validated intended 
attention software informalisms open software projects need coerce transform mathematically formal notations raises issue kinds engineering virtues articulated evaluate quality reliability feasibility open software system requirements expressed 
example traditional software requirements engineering advocates need assess requirements terms virtues consistency completeness traceability correctness 
study appears open software requirements artifacts assessed terms virtues encouragement community building freedom expression multiplicity expression software informalisms readability ease navigation implicit versus explicit structures organizing storing sharing open software requirements 
low measures virtues potentially point increased likelihood failure develop sustainable open software system 
subsequently improving quality virtues open software requirements may benefit tools encourage community development social interaction communicative expression software reading comprehension community hypertext portals web repositories 
resolving issues appropriate subject study 
open software development practices giving rise new view complex software systems constructed deployed evolved 
software informalisms corresponding software applications tools part integrated traditional requirements engineer toolset 
open software development adhere traditional engineering rationality virtues legacy software engineering life cycle models prescriptive standards 
development open software system requirements inherently complex web sociotechnical processes development situations dynamically emerging development contexts 
way requirements open software systems continually emerge web community narratives 
extended narratives embody discourse manifest open software requirements engineering process 
participants process capture persistent globally accessible open software informalisms serve organizational memory hypertextual information system networked community environment information sharing communication social interaction 
consequently ethnographic methods needed elicit analyze validate communicate narratives form take practices processes give form research methods principles employed examine 
employing methods reveals involved open software process developer users participate create discourse software requirement informalisms course developing open software systems seek sustain 
report contributes new study kind 
research described report supported national science foundation iis defense acquisition university contract 
endorsement implied 
mark ackerman university michigan mark bergman li margaret elliott uci institute software research julia watson ohio state university collaborators research project described 


ackerman halverson reexamining organizational memory communications acm pp 
january 

atkinson socio technical soft approaches information requirements elicitation post methodology era requirements engineering pp 


boehm kwan port shah spiral model case study computer pp 

iee proceedings software number accepted publication revisions december 

bowker star sorting things classification consequences mit press cambridge ma 

conklin hypertext tool effective policy discussion acm transactions office information systems pp 
october 

cook votta wolf cost effective analysis place software processes ieee transactions software engineering pp 


cleveland past pc mod development game developer pp 
february 

curtis kellner process modeling communications acm pp 


reed computer assisted analysis refinement informal software requirements documents proceedings asia pacific software engineering conference taipei taiwan pp 
december 

davis software requirements analysis specification prentice hall 

stone open sources voices open source revolution reilly press sebastopol ca 

fielding shared leadership apache project communications acm pp 
april 

flake lawrence giles efficient identification web communities proc 
sixth intern 
conf 
knowledge discovery data mining acm sigkdd boston ma pp 
august 

fogel open source development cvs 
press 

goguen formality informality requirements engineering keynote address proc 
th 
intern 
conf 
requirements engineering pp 
ieee computer society 

virtual ethnography sage publishers london 

jackson software requirements specifications practice principles prejudices addison wesley pub 
boston ma 

kim community building web secret strategies successful online communities press 

klein myers set principles conducting evaluating field studies information systems mis quarterly pp 
march 

kling scacchi web computing computer technology social organization 
ed advances computers pp 

academic press new york 

koch schneider results software engineering research open source development projects public data zum und hansen und nr 
wien 

sommerville requirements engineering processes techniques john wiley sons new york 

lee tool managing group design rationale proceedings conference computer supported cooperative los angeles ca acm press pp 


mi scacchi meta model formulating knowledge models software development decision support systems pp 


mockus fielding case study open software development apache server proc 
nd 
international conference software engineering limerick ir pp 


noll scacchi supporting software development virtual enterprises 
digital information february jodi ecs soton ac uk articles noll 
noll scacchi 
specifying process oriented hypertext organizational computing network computer applications pp 


nuseibeh easterbrook requirements engineering roadmap finkelstein ed software engineering acm ieee computer society press www org html 

embracing open source software development sams publishing indianapolis 
iee proceedings software number accepted publication revisions december 

preece online communities designing usability supporting sociability 
chichester uk john wiley sons 

plummer subramanian chandra automatic data processing infrastructure asp conference 
series astronomical data analysis software systems jr payne eds san francisco asp 

raymond cathedral bazaar linux open source accidental revolutionary reilly associates sebastopol ca 

robbins redmiles cognitive support uml adherence xmi interchange argo uml information software technology pp 
january 

scacchi understanding software process redesign modeling analysis simulation software process improvement practice pp 


astronomical software review asp conference 
series astronomical data analysis software systems jr payne eds san francisco asp 

smith kollock 
eds communities cyberspace routledge london 

klein growing systems emergent organization communications acm pp 


sommerville informed analysis software engineers int 
human computer studies pp 


yamaguchi shinohara ishida collaboration lean media open source software succeeds proceedings conference computer supported cooperative cscw pp 
philadelphia pa acm press december 

wallace experimental models validating technology computer pp 
may 

