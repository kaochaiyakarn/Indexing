efficient algorithms distributed snapshots global virtual time approximation mattern department computer science university saarland im stadtwald saarbr cken germany mattern cs uni sb de 
presents snapshot algorithms determining consistent global state distributed system significantly affecting underlying computation 
algorithms require channels fifo messages acknowledged 
small amount storage needed 
important application snapshot algorithm global virtual time determination distributed simulations 
proposes new efficient global virtual time approximation schemes snapshot algorithms distributed termination detection principles 
appear journal parallel distributed computing vol 
snapshot distributed system global state consisting local states processes messages transit meaningful sense corresponds possible global state local states processes communication channels recorded simultaneously 
order get causally consistent state system common clock local state recording events coordinated receipt message recorded sending message usually takes place process recorded 
generally causal predecessors recorded event recorded 
fortunately possible freezing system 
snapshots snapshot algorithms fundamental paradigms distributed computing 
important applications algorithms detection stable properties termination distributed computation deadlock distributed system 
generally snapshot algorithms compute monotonic functions global state lower bounds simulation time called global virtual time gvt distributed simulation system advanced 
applications checkpointing recovery distributed data bases monitoring debugging distributed systems 
snapshot algorithm systems fifo channels chandy lamport 
main idea immediately recording local state process sends control messages outgoing channels 
process receives control message time takes local snapshot done spontaneously 
causal consistency guaranteed due fifo property channels message underlying application called basic messages sent control messages arrive local snapshot receiver 
messages transit easily recorded control messages flush channels 
non fifo systems taylor showed snapshot algorithm inhibitory possibly delaying actions underlying application occur particular delaying sending basic messages waiting control message process relies piggybacking control information basic messages 
inhibitory snapshot algorithm non fifo systems proposed local snapshot process send basic messages neighboring process knows taken local snapshot 
realized sending control messages neighbors recording local state suspending sending basic messages channel control message received channel 
non inhibitory snapshot algorithms non fifo systems relying piggybacking bit status information basic messages proposed lai yang 
new variant principle uses space described section section 
model definitions asynchronous distributed systems distributed computations modeled follows 
asynchronous distributed system consists processes communicate solely messages sent channels 
processes channels form strongly connected finite graph 
messages assumed delivered correctly arbitrary finite delay necessarily order sent 
common clock common memory relative speed processes undetermined 
process consists set states 
atomic actions may change state single process modeled events 
classified types send events receive events internal events 
events may change state process occur send events receive events change state channel defined set messages sent received inserting removing message 
local computation process sequence events affecting local state possibly state incident channels 
potential causal dependencies events local computations different processes modeled happens relation denoted introduced lamport 
smallest transitive relation satisfying conditions events local computation event send event corresponding receive event message sent received 
distributed computation consists local computations process set corresponding send receive events set events left closed respect message received sent earlier 
furthermore require partial order cyclic dependencies events 
informally distributed computation represented time diagram fig 

horizontal lines time axes processes points denote events arrows represent messages 
follow path causality event event moving direction arrows left right process lines 
partial order possible draw event left event 
process sends messages processes order initiate local actions messages usually received different time instants 
due unpredictable message delays possible guarantee local actions triggered messages executed simultaneously 
send event past receive event internal event fig 

time diagram cut 
cut event process line cut parts receive event initiating message 
motivates notion cuts 
graphically cut represented zigzag line cutting time diagram parts left part called past events happen cut right part called events happen cut 
pseudo events cut line intersects process lines called cut events 
cut events invisible underlying computation change local state processes respect underlying computation 
cut consistent message arrow starts ends past 
notion consistency fits observation message received sent 
fig 
shows consistent cut inconsistent cut 
fig 

consistent inconsistent cuts 
formally consistent cut distributed computation defined finite subset set events computation notice finite distributed computation maximal cut 
motivates definition partial order set cuts distributed computation cut said cut 
informally means time diagram cut line right cut line 
fig 

easily shown operations set consistent inconsistent cuts distributed computation forms lattice :10.1.1.47.7435
consistent cut events time diagram arranged way cut line drawn straight vertical line message arrows go forward time 
possible inconsistent cuts 
consistent cut possible execution computation cut events occur simultaneously sense define global state consistent cut called causally consistent global state 
consists state channels messages cross cut line sent past received set local states process recorded moment corresponding cut event occurs notice cut events change state 
sense formal set theoretic characterization consistent cut state process state local event initial state event exist 
particular interest distributed computations monotonic functions global state stable predicates 
denote global state consistent cut function set global states partially ordered set 
function monotonic implies 
typical examples monotonic functions total number messages sent distributed computation simulation time distributed simulation system advanced 
stable predicates characterized monotonic boolean indicator functions false true 
predicate stable implies 
distributed systems cut lines cuts adequate substitutes points global time means stable predicate true point distributed computation true points 
detailed discussion consistent global states stable predicates reader referred 
consistent cut algorithm snapshot algorithm computes causally consistent global state distributed system 
alternatively may directly compute value monotonic function stable predicate consistent global states 
algorithm superimposed underlying computation runs concurrently underlying computation affect significant way 
important application snapshot algorithm detection stable predicate distributed termination distributed deadlock 
achieved repeatedly executing somewhat specialized snapshot algorithm predicate holds 
works stable predicate guaranteed predicate true snapshot algorithm established truth true snapshot algorithm started establish truth 
analogous properties predicates form hold monotonic functions 
general cut defined local state recording events snapshot algorithm consistent order meaningful 
noteworthy exception gvt approximation distributed termination detection discussed sections 
determination consistent cut central general snapshot algorithm 
lai yang simple scheme compute consistent cut non fifo systems piggybacking bit status information basic messages process initially white turns red local snapshot 
message sent white red process colored white red 
process takes local snapshot convenience red message possibly received 
obviously cut defined white events consistent red message sent cut received white process cut 
order guarantee termination assured eventually processes take local snapshot applications local snapshots collected transmitted dedicated process 
sequel assume single process initiates snapshot algorithm 
initiating process red spontaneously starts virtual broadcast scheme directly indirectly sending red control messages processes order ensure eventually processes red 
virtual broadcast schemes implemented various ways example superimposing control computation underlying basic computation uses ring spanning tree flooding scheme 
note white process receive red basic message receiving control message see fig 

processes know receive red basic messages white process able take local snapshot moment receives red basic message 
local snapshot reflect local state receipt message 
practice problem 
possible peek message contents receiving order determine color possible take local snapshot just receiving message changing local state 
white process save relevant parts local state receiving message order reproduce state receipt event red message 
white fig 

receipt red message white process 
catching messages transit stable predicates monotonic functions global state gvt approximation see section section messages transit taken consideration 
catch messages lai yang proposed process keeps record messages sent messages received incident channels 
local snapshots assembled messages transit determined channel computing set theoretic difference 
serious drawback method complete message histories stored sent processes require large amount space 
propose different method catch messages transit suffer drawback 
obviously messages transit precisely white messages received red processes 
red process gets white message send copy snapshot initiator 
message may sent directly initiator routed superimposed control red receipt control message topology 
snapshot initiator received copy transit messages local snapshots processes knows complete snapshot 
fig 
illustrates principle 
initiator start fig 

snapshot principle 
local snapshots copy messages transit problem method described far termination detection 
initiator gets copies messages transit determine received 
principle problem solved distributed termination detection algorithm non fifo systems white messages considered 
purpose process considered active iff white passive 
white computation terminated process white white messages include control messages sent initiator transit 
note passive processes reactivated special case general distributed termination detection problem 
deficiency counting termination detection method particularly attractive case 
method process equipped counter part process state counts number basic messages process sent process minus number basic messages received process 
collecting accumulating counters local snapshots initiating process gets consistent view message counters 
knows basic messages transit cut knows copies get determine snapshot algorithm 
termination snapshot algorithm processes red white messages transit easy repeatedly execute snapshot algorithm 
introduces third color colors denoted cyclically 
process color mod receive messages color mod messages color mod messages sent previous cut copies forwarded initiator messages color mod messages sent cut 
case process takes local snapshot receiving switches color mod 
note message counters color blind count sent received messages color 
appropriate processes inform initiator time transit message received example message contents processed locally messages relevant snapshot termination detection method considered 
vector counter principle scheme guarantees termination control rounds devised 
control round started initiator realized virtual broadcast scheme called wave algorithm guarantees process visited control message collects distributed information stored processes returns initiator 
ease illustration assume processes send control messages ring 
vector counter method process counts number white messages sent process th component local vector length number processes 
decrements component time receives white message process 
control message control vector circulating ring accumulates local vectors resets zero operations performed component wise 
round colors processes red white collects local snapshots 
completion round indicates number white messages transit cut induced control round 
obvious respect white messages cut consistent 
round second round necessary 
second round control message waits process white transit messages received notice round new white messages generated 
second round relevant information contained transit messages collected 
fig 

vector counter method 
fig 
illustrates method 
various optimizations variants possible 
example necessary revisit processes holds round 
vectors coded way non zero components stored transmitted 
possible scalar counter vector counter 
merely variant deficiency counting method described earlier require rounds 
snapshot algorithm repeatedly executed local vectors counting white messages counting red messages 
swapping meaning colors algorithm executed 
adaptation algorithm gvt approximation section 
accumulated control vector dmc distributed monotonic computation scheme general global state determined snapshot algorithm algorithm previous section date longer valid 
monotonic functions global state outdated snapshot interest yields lower bound current value function 
section consider particular distributed computation scheme call dmc distributed monotonic computation computes monotonic function global state 
section see scheme interesting applications example distributed simulations represent simulation time 
specialized snapshot algorithms called gvt algorithms compute approximations monotonic function algorithms section section 
notions section due tel chapter 
partially ordered set finite non empty subset infimum 
process maintains variable domain basic messages stamped value send event stamps message value greater equal current value internal event may increase receive event may change new value greater equal value receive event greater equal stamp message received 
tel generalizes requirement new value infimum current value value stamp 
fig 
gives example computation behaves rules 
fig 

distributed monotonic computation 
interesting know far computation proceeded 
formalized definition global infimum function set cuts computes current infimum 
cut define infimum local values taken moment local cut event stamps messages cross cut line transit 
notice section define global state consistent cut shortly clear messages past harm 
order prove global infimum function monotonic consider cut cut see fig 

simplify proof concentrate messages transit assume event sends virtual message locally event stamped current value 
loss generality assume special internal initialization event past cut 
message crosses cut past possible construct finite backward chain directly related events ends past crosses value event denote value local variable immediately event 
send events internal events different initialization events directly preceding events value smaller equal value receive events possible choose directly preceding events corresponding send event previous local event way holds 
induction length monotonic backward chain easily follows stamps messages cross messages message fig 
greater equal stamps messages chain cross message fig 

construction possible messages cross applies infimum 
reader may prove tel generalization scheme similar way see 
initialization events fig 

construction monotonic backward chain 
fig 
illustrates matter message crosses inconsistent cut past message taken consideration messages exists message equal smaller stamp message fig 
goes past stamp message relevant infimum 
case general snapshot computation generally possible compute current value monotonic function possible approximate value determine lower bound calculating cut interestingly global infimum functions dmc schemes done coordinating local cut events 
fig 
explains case 
inconsistent consistent cut define consistent prefix closure 
graphically means adjust cut line pushing somewhat right order include events happened 
construction 
notice defined global state function messages coming ignored 
earlier virtual consistent cut depicted vertical cut line rightmost cut event cut diagram 
signifies lower bound value function moment determined 
dmc schemes works inconsistent care messages coming 
result section develop algorithms gvt approximation 

generalizes notions strongly weakly stable properties introduced lai yang 
exist examples dmc schemes lower bounds current value global infimum function important 
important applications distributed simulation schemes problem gvt approximation message driven distributed computations problem distributed termination detection 
examples comprise approximations logical time defined lamport clocks vector clocks :10.1.1.47.7435
distributed simulation fig 

construction consistent prefix closure cut 
particular interesting application dmc schemes theory distributed simulation 
global infimum function called global virtual time gvt algorithms compute lower bounds great practical importance 
distributed discrete simulation system consists set sequential event driven simulators implemented autonomous processes interact called event messages 
see fujimoto excellent survey parallel distributed simulation contains 
simulator simulation clock simulates part model independently simulators 
simulator schedule event execution simulator simulation time equal local simulation time 
remote event scheduling feature implemented sending event message simulator contains things timestamp determines simulation time event occur 
fundamental requirement guarantee correctness simulation events executed chronologically order simulation times 
general event messages need arrive simulator ordered simulation time 
notice case message transmission fifo event messages need generated monotonically increasing timestamps usually event messages received different sources different channels 
central problem distributed simulation theory guarantee decentralized control mechanism simulator executes events chronological order 
conservative distributed simulation schemes simulator allowed advance simulation clock simulation time earliest event local event scheduling list order execute event assured event message timestamp past arrive 
optimistic distributed simulation schemes time warp simulator may directly execute earliest event event scheduling list 
event message earlier timestamp subsequently arrives simulator rolls back earlier simulation time cancelling intermediate side effects re executes point including event arrived late 
rollback operation requires state simulator process saved regularly 
clear handling simulation time conforms distributed monotonic computation scheme defined section 
optimistic schemes simulation clock may set back event message received set value earlier timestamp value message 
technical reasons necessary go back local recovery point instant time replay computation transparent mechanism 
jefferson defines global virtual time gvt real time minimum local clocks real time timestamps event messages transit real time clearly gvt global infimum function sense defined section 
determination tight lower bound current gvt value important conservative optimistic distributed simulation systems 
conservative schemes suffer deadlock situations gvt approximation allows accelerating simulation time directly advancing local clocks calculated lower bound 
case gvt defined consist minimum message timestamps 
simulators may able give new model specific guarantees lower bounds timestamps event messages generate simulators consequently simulators may able proceed executing events parallel 
case conservative distributed simulation globally deadlocked gvt approximation yields simulation time event safely executed 
optimistic distributed simulation schemes gvt approximation important memory management output commitment gvt serves floor simulation times simulator roll back 
simulator exist checkpoint older gvt 
checkpoints older gvt kept 
checkpoints obsolete removed save memory 
case interactive animated simulation necessary outside world consistent chronological view going inside simulation system 
physical output undone animation events released gvt exceeds timestamp values 
gvt approximation algorithms gvt approximation distributed infimum approximation called tel known 
principle existing general distributed snapshot algorithms straightforward exercise apply algorithms variants described section gvt approximation 
specialized potentially efficient solutions preferable 
tel gave wave solutions different communication models 
asynchronous model solutions suggested 
solution relies sending acknowledgment received message maintaining data structure represent timestamp unacknowledged messages 
note message may transit message received cut acknowledgment received cut fig 
illustrates situation handled correctly 
basically algorithm 
second solu tion keeps list received messages list sent messages process 
having collected accumulated local lists messages transit determined appropriate difference 
notice inconsistent cut possible receipt message reported sending 
principle lai yang general snapshot algorithm suffers drawback control messages long large amount space keeping message lists 
ack fig 

acknowledgment transit message 
lin lazowska proposed algorithm similar algorithm acknowledgment message single message 
idea message carries sequence number process gets control message sends neighboring process smallest sequence number missing process implicitly acknowledging messages smaller sequence number 
assumes message messages larger sequence numbers transit 
messages transit able compute lower bound timestamps unacknowledged messages keeps local minima corresponding sequence numbers timestamps function sequence numbers 
algorithm works asynchronous systems explicit acknowledgments drawbacks approximated gvt value optimal second space needed data structures keep missing sequence numbers local minima sent timestamp values 
solutions gvt approximation problem baldwin bauer 
propose different simple solution main idea easily explained fig 

determine cuts 
realized control waves rounds control message ring 
goal compute gvt approximation cut 
determine minimum local clock values easy minimum timestamps messages cross cut 
shown section messages sent received ignored 
remaining set messages cross divided set messages sent set messages sent pushing right algorithm guarantees second set empty algorithm sure message sent received 
set lower bound smallest timestamp easily determined 
denote set messages cross past conceptually include virtual messages introduced section denote set messages sent 
algorithm guarantees message crosses cuts min timestamps min timestamps 
determine minimum timestamps messages sent get lower bound timestamps messages transit 
get approximation close white messages fig 

gvt approximation principle 
algorithm assumes processes messages colored similar way described section section 
initially process white 
process colored red right cut process counts number white messages sends receives 
cut red process remembers minimum timestamp values red messages sends 
consistent respect white messages possible determine number white messages transit cut 
messages transit minimum local variables computed valid gvt approximation lower bound 
second control round yielding cut initiated 
global minimum local variables timestamps sent red messages determined 
collecting accumulating counters received white messages checked white messages received cut 
case possibly invalid result ignored control round started repeated eventually counters signal white message received 
vector counters see section round control round needed possible wait slow white messages 
ring topology solution formal way 
processes denoted index unique initiator denoted 
process local variables local min minimal timestamp red messages vector counter white messages color color process white red initialized white gvt approx result algorithm initiator red messages exist basic message header fields represent color message timestamp 
timestamp equal greater value local simulation clock moment sending message 
sending message actions take place ignored virtual message send color timestamp color white min min min timestamp fi white messages counted red messages minimal timestamp value determined 
message msg col timestamp received process actions take place msg col white fi process message update min timestamp value receipt message 
check control message waiting see propagated 
control message fields accumulates local minimum local clocks onm clock minimum timestamps onm send accumulates vector counters 
control message clock send count received process initiator self explanatory actions take place color white min color red fi wait count send min clock min send min count mod control message clock send count received init actions take place wait init count init count gvt approx min clock send send min send min count init mod fi init gets back control message complete round red 
starts second round necessary 
notice send accumulated rounds clock calculated individually round 
initiator gets back control message second round count guaranteed zero vector gvt approximation 
note initiator init starts algorithm setting local andt min executing send init mod vector counters simple scalar counters requires obvious adjustments 
particular reducing vector scalar pertinent information lost possible wait specific processes messages known arrive 
wait statement removed 
case guaranteed count second round rounds necessary 
started way second round 
algorithm easily changed allow repeated executions control topologies rings details left reader 
parallel snapshot gvt approximation algorithm snapshot algorithm section gvt algorithm section way particularly suited implementation ring realized control topologies spanning trees 
section develop inherently parallel snapshot gvt approximation algorithm need specific control topology 
advantage compared previous solutions vector counters single control round necessary 
basic techniques coloring processes messages waiting messages transit cut previous solutions 
interestingly algorithm derived adapting chandy lamport elegant snapshot algorithm non fifo systems 
outline slight variant fifo algorithm process receives marker control message input channel recorded state records state sends marker incident output channels records state empty sequence records state sequence messages received state recorded received marker fi underlying network strongly connected finite time algorithm initiated process recorded state states incoming channels 
process spontaneously starts algorithm received marker virtual non existing channel 
reader may easily check global state consistent details refer 
communication non fifo cases considered 
message sent process process marker received marker message sent marker received marker 
fig 
illustrates cases 
fig 

non fifo communication 
know deal case process red moment records local state color process piggybacked basic message 
process receives message knows marker arrived communication fifo 
receiving red message white process red actions state recording marker propagation receiving marker 
subsequent arrival marker simply ignored 
notice gvt approximation messages harm premature actions taken correct record state propagate marker marker received fifo case 
case essentially problem knowing white message channel arrives 
fifo systems easy markers flush channels marker arrived white messages transit channel 
non fifo systems achieved extension flushing principle markers slower basic messages marker augmented number white messages sent channel 
acceptance marker deferred messages sent received 
fig 
illustrates idea 
realize process count channel number white messages received number white messages sent 
solutions cases combined piggybacking number white messages sent channel red message sent channel 
notice non fifo systems state channel set white messages received red process 
marker fig 

acceptance marker 
ahuja similar solution 
order extend applicability chandy lamport algorithm algorithms non fifo systems author proposes flush primitives non fifo channels 
messages sent channel sending forward flush marker received marker solves case fig 
messages sent channel sending backward flush marker received marker solves case 
author observes sending combined forward backward marker ordinary marker sufficient condition correct working chandy lamport algorithm non fifo systems 
discussion shows explicit flush primitives necessary efficient solution non fifo snapshot problem 
order form global state local snapshots including channel states collected 
single initiator system bidirectional communication channels done elegant way echo algorithm receipt marker red message process sends markers neighbors marker message received 
process having channel waits white messages received returns echo message contains local snapshot 
echoes behave markers contain number white messages sent 
process received markers echoes incident channel received white messages returns echo accumulated snapshots process received marker red message 
eventually echo wave reaches initiator 
easy see channels travelled echoes form spanning tree network 
gvt approximation take cut defined instants echo message sent 
initiator instant send echo 
construction white message transit cut qualifies cut fig 

process red receives marker 
instants processes red form cut fig 

global minimum local clocks red messages sent accumulated echo wave 
shall discuss technical details clear resulting algorithm parallel variant algorithm section 
control rounds rings uses wave control messages consists phases 
phase realized markers corresponds round second phase realized echoes corresponds second round 
exactly control messages number channels 
new distributed algorithms computing snapshots distributed computations approximating global virtual time distributed simulation system 
algorithms simple efficient require channels fifo messages acknowledged 
basic idea colors indicate process taken local snapshot message sent local snapshot process 
messages snapshot inconsistent easily recognized avoided messages transit caught receiving process 
problem knowing snapshot complete transit messages caught solved distributed termination detection scheme 
illustrated vector counter termination detection method termination detection scheme simple scaler counters vector counters 
gvt approximation done applying somewhat specialized variant principle 
particular messages cross cut wrong direction simply ignored 
main idea gvt approximation cuts sure messages cross cuts 
minimum timestamps messages cross second cut easily determined considering messages sent cuts 
cuts realized various ways 
simple implementation token circulating ring sketched echo algorithm phases realize cuts traversing arbitrarily connected network parallel 
additional advantage variant fact single round echo algorithm necessary control messages short 
distributed termination detection particular case gvt approximation scheme yield elegant parallel termination detection algorithm distributed computations 
interestingly possible derive gvt approximation algorithms termination detection algorithms shows problems closely related instances general snapshot problem 

ahuja flush primitives asynchronous distributed systems 
information processing letters 

baldwin chung chung overlapping window algorithm computing gvt time warp 
proc 
th international conference distributed computing systems pp 


bauer distributed logic simulation time warp 
proc 
vlsi international conference ifip edinburgh 

global virtual time algorithms 
proc 
scs multiconference distributed simulation pp 


chandy lamport distributed snapshots determining global states distributed systems 
acm transactions computer systems 

chandy misra asynchronous distributed simulation sequence parallel computations 
comm 
acm 

chandy misra haas distributed deadlock detection 
acm transactions computer systems 

chang echo algorithms depth parallel operations general graphs 
ieee transactions software engineering se 

taylor inhibition spectrum achievement causal consistency 
proc 
th acm symp 
principles distributed computing pp 


timestamps message passing systems preserve partial ordering 
proc 
th australian computer science conference pp 


fujimoto parallel discrete event simulation 
comm 
acm 

observing global states asynchronous distributed applications 
raynal 
eds 
proc 
rd international workshop distributed algorithms 
springer verlag lncs pp 


jefferson virtual time 
acm trans 
program 
lang 
syst 


koo toueg checkpointing rollback recovery distributed systems 
ieee transactions software engineering se 

lai yang distributed snapshots 
information processing letters 

lamport time clocks ordering events distributed system 
comm 
acm 

lin lazowska determining global virtual time distributed simulation 
proc 
international conference parallel processing pp 


mattern algorithms distributed termination detection 
distributed computing 

mattern experience new distributed termination detection algorithm 
van leeuwen 
ed 
proc 
nd international workshop distributed algorithms 
springer verlag lncs pp 


mattern virtual time global states distributed systems 
cosnard 
eds 
proc 
workshop parallel distributed algorithms chateau de bonas france oct elsevier pp 


mattern mehl tel global virtual time approximation distributed termination detection algorithms 
tech 
rep ruu cs department computer science university utrecht netherlands 

misra distributed discrete event simulation 
computing surveys 

muntz parker distributed algorithm detect global state distributed simulation system 
proc 
ifip conference distributed processing amsterdam north holland 

sarin lynch discarding obsolete information replicated database system 
ieee transactions software engineering se 

segal distributed network protocols 
ieee transactions information theory 

taylor role inhibition asynchronous consistent cut protocols 
raynal 
eds 
proc 
rd international workshop distributed algorithms 
springer verlag lncs pp 


tel topics distributed algorithms 
cambridge university press cambridge 
