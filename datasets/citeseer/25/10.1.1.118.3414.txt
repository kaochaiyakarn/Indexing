space filling software visualization baker stephen eick bell laboratories august seesys tm system embodying technique visualizing statis tics associated code divided hierarchically subsystems directories les 
technique display sizes components system relative stability components location new functionality location error prone code bug xes 
animation display historical evolution code 
applying technique source code line production software product visualized 
appear journal visual languages computing 
technical contact bell laboratories rm east road il email eick research att com software industry produces complicated data driven systems created 
single software system may contain millions lines written thousands programmers 
larger larger systems built problems understanding increasing complexity threaten set limit system size 
solution employs data visualizations help software engineers understand code working 
making data graphical representations software known software visualization wellknown produced useful tools developing code 
previous software visualization roots academia focused data structure algorithm visualization 
notable examples include baecker seminal sorting bm brown algorithm animation bh north displays software graphs price taxonomy software visualization psb stasko research visualizing parallel computation ks roman cox visualizations speci cations :10.1.1.28.8296
unfortunately current graphical techniques ine ective large software systems 
applied production sized systems routines producing owcharts function call graphs structure diagrams break display complicated 
produce displays contain information completely 
existing systems system structure diagrams impossible create original abstractions forgotten inapplicable years software modi cations 
large software projects management issues involving human aspects project execution code challenging technical issues 
example project managers need know new development activity occurring modules error prone assign best engineers 
deal problems developed space lling technique displaying source code related software statistics 
focused visualizing program source code les directories subsystems 
previous reduced representation eick ess method visualizing statistics associated lines code les 
technique implemented system called seesoft tm ts lines code high resolution display reduced representation 
seesoft line code displayed color coded row columns corresponding les row indentation length tracking actual code 
visualize larger systems technique code divided line chunks 
generalizes previous technique displaying lines les les directories subsystems 
generalization johnson shneiderman fundamental treemaps show hierarchical data js 
motivation studying source code visualization came source code database large communications software system software system continually modi ed customers world wide 
lines code organized hierarchically tens subsystems directories hundreds thousands les 
software releases occur year built previous release making changes adding new functionality hardware support 
database software release contains detailed information les directories subsystems including non commentary source lines ncsl software complexity metrics number scope modi cations les ected number programmers making modi cations number type bugs subcategory modi cations statistics 
information raises questions project managers 
subsystems largest 
new development activity 

large directories 
large small directories distributed evenly subsystems 
new development distributed evenly directories 
directories stable activity 

subsystems unusually complex error prone 
problematic directories 
development activity xing bugs adding new functionality 

bug xes problem 
components candidates code restructuring projects 

dates major releases 
subsystems shrunk disappeared 
rate growth di erent subsystems 
subsystems growing fastest rates 
subsystems remained size grown steady rate 
development done historically 
statistical methods analyzing distributions subsystem directory le statistics known cm 
software engineering equally important understand context statistics relate code 
bug rate directory may look trouble 
see directories realize may wrong subsystem 
similarly scatterplots useful identifying unusual les directories 
information di cult 
unusual directories related subsystem belong system hundreds thousands les relating worst respective directories involves correlating thousands les 
problem methods statistical analysis study software involves incorporating domain knowledge 
experienced software engineers detailed knowledge explanations included analysis properly interpret data 
example time events known explanations may indicate general trends 
address problems developed graphical technique visualizes subsystem directory le statistics context 
method implemented system called seesys tm preserves hierarchical relationships code making easy relate statistics components 
seesys accomplishes means space lling representations 
single computer monitor easily show directory level statistics system thousands directories 
approach took seesys discussed section applications seesys section factors seesys powerful visualization tool section 
approach visualization technique seesys idea software system decomposed individual components 
example ncsl directory sum ncsl individual les directory ncsl subsystem sum ncsl individual directories 
shows visual technique seesys 
left pane represents entire software system represent subsystems 
area subsystem subsystem statistic ncsl 
subsystems partitioned vertically show internal directories 
left pane rectangles labeled represent directories subsystem rectangle area proportional directory ncsl sum areas directories equals area subsystem 
technique allows straight forward visual comparison directories subsystem area visual component proportional statistic corresponding software component 
middle pane shows additional information vertically lling rectangle 
ll indicate ncsl correspond newly developed code 
ll provides visually pleasing display second statistic convenient method cross directory comparisons 
clear middle pane directory highest percentage new code added subsystem necessarily largest amount new ncsl 
fact directory new lines code largest area 
right pane shows zoom view subsystem middle pane 
directory partitioned horizontally represent internal les 
directories rectangle sizes proportional le level statistics 
leftmost directory contains les le le le le le average ll les re ects ll directory level 
previous example left pane subsystem directory statistics 
middle pane ll statistic directories 
right pane zoomed view subsystem showing le level statistics 
directory level ll display newly developed code release 
technique ective showing software statistics accumulate les directories subsystems 
include ncsl number bugs complexity metrics rates 
hierarchical decomposition immediately relates les directories directories subsystems making cross unit comparisons easy 
ll provides visual representation percentages enabling quick identi cation directory 
ll example ncsl xing bugs number comments code general percentage associated code unit 
color interaction overlay additional information display 
applications illustrates ectiveness seesys showing answer questions listed section software system 
file file file file file subsystem information subsystems largest 
new development activity 
seesys display shows ncsl subsystems see ll shows new ncsl added release 
rectangle forming boundary represents size entire system ncsl 
subsystem labeled code name 
rectangles contained boundary represent size individual subsystems ncsl 
color redundantly encode size color scheme slider bottom screen 
medium sized subsystems appear upper left hand corner 
note subsystems shown alphabetical order located easily 
gure show 
immediately clear largest subsystems rectangles visually prominent colors brighter spectrum 
ll light gray rectangles bottom subsystem rectangle shows largest percentage increases code size release 
new subsystem created release 
number ncsl releases shown lower left hand corner release release previous releases 
percentage increase color scale 
directory information large directories 
large small directories distributed evenly subsystem 
new development distributed evenly directories 
directories stable activity 
shows directory statistics added display 
area subsystem rectangles subsystem partitioned vertically display internal directories 
area directory rectangle proportional size ncsl 
ll proportional new development color redundantly encodes size directory 
largest directories highlighted color spectrum bottom display pink biggest yellow green nally blue smallest 
see largest directories data values names release numbers altered 
subsystems subsystems large directories directories show colors blue spectrum 
refer software skyline 
shows sizes subsystems directories new development directories new unchanged 
ll shows ncsl added release 
new directories entire directory space lled gray directories new code gray area lls half directory space 
example see directories actively developed new development 
zooming obtain information particular subsystem 
zoom view subsystem directory divisions clear 
darker gray ll directory represents new development 
see directory stable new code signi cant activity software release 
error prone code subsystems directories bugs 
problematic directories 
development activity xing bugs adding new functionality 
size subsystem directory new ncsl ll new ncsl added bugs directory color uniform longer encoding information 
largest subsystems subsystems new development 
light gray rectangle subsystem obscured directory ll spikes represents bug xing ncsl subsystem directory spikes represent directory bug xing ncsl detail 
subsystem takes larger portion display new development 
small light gray rectangle shows new development new functionality 
small percentage new ncsl xed bugs directories 
contrast subsystem high bug rate 
light gray subsystem rectangle shows development activity ing xing bugs 
directories blue directory spikes extend top rectangle indicate new ncsl involved bug xes 
recurring problems bug xes recurring problem 
components candidates code restructuring projects 
bug software bug correction modi es earlier bug high rate may indicate unstable code 
area representing subsystem directory proportional number bugs ll area proportional number bugs subsystem directory 
light gray rectangle represents subsystem average spikes subsystems represent directory level detail 
subsystems highest rates 
directories subsystems relatively high rates making candidates code restructuring projects 
system evolution major software releases 
subsystems shrunk disappeared 
rate growth di erent subsystems 
subsystems growing fastest rates 
subsystems remained size grown steady rate 
development done historically 
address questions seesys animates display historical evolution code 
impossible get full ect animation static display ideas conveyed 
figures shows frames animation 
animation depicts ncsl growth various software releases software 
bounding rectangle subsystem represents maximum size subsystem software releases dataset lled portion display represents size system software release seen frame slider left screen 
frame slider controls frame software release displayed 
described detail 
color redundantly encoding size subsystem changing relation size subsystem software release dataset 
shows earliest software release dataset 
note subsystem existence subsystems asd reached maximum sizes 
shows frame middle dataset shows software release dataset 
animation subsystems reached maximum size 
subsystems decreased size disappeared completely 
watching animation discovered changes size subsystems subsystems stable subsystem grew nally disappeared subsystems shrunk subsystem grew slowly rst fast subsystems currently growing fastest similar rates 
seesys visualization system seesys visualization system displaying software metrics 
requirements hold metric 
quantitative measure sum measure parts equal measure 
examples software metrics ncsl newly developed ncsl number bugs number bugs 
seesys lends software metrics 
example number modi cations valid measure 
case area rectangles proportional number modi cations component bounding rectangle represent total number software system 
seesys visualization system may extended display software complexity metrics halstead program volume measure hal mccabe cyclomatic complexity mcc 
color texture rectangle encode complexity corresponding subunit red indicating complex units blue indicating complex units 
user interaction user interaction mouse powerful means retrieving information visually 
seesys tracks mouse movements display area conveying additional information whichever component mouse touching time 
called active component indicated red highlighted boundary 
active component may subsystem directory subsystem 
subsystem directory active components 
directory name current statistic appear slider bottom screen bar marking place slider current statistic 
components activated placing mouse slider 
available statistics shown lower left side screen 
clicking mouse statistics causes display redrawn statistic 
display user may call information ncsl newly developed ncsl software faults bugs 
buttons mod lines mod names colors fill zoom appear upper left corner screen 
rst button turns directory bounding lines turned 
second button toggles directory colors turned 
third button turns ll directory level 
fourth button activates zoom feature allows user zoom particular subsystem see 
user clicks zoom button subsystems bring zoom window 
zoom windows main display linked operations ect 
buttons display simpler customized user preferences 
slider labeled rows control number rows display 
may point slider change corresponding number rows drag slider nd optimal layout 
figures additional sliders control animation left side screen 
speed slider controls animation speed delay milliseconds frames animation active frame slider controls frame displayed 
clicking mouse frame slider causes display corresponding frame result display space redrawn 
play button activates animation may interactively places interest 
dragging mouse slider shows animation drag speed 
ective interactive technique animation put mouse subsystem watch active bar move slider 
bar represents subsystem placed slider subsystem value 
bar moves slider animation user see active subsystem evolution color scale relative size providing di erent perspectives 
figures active subsystem viewed ways animation 
display area see maximum size rst software release dataset maximum size middle release nally reaches maximum size release 
looking color slider bottom screen ers perspective 
begins lower spectrum ncsl subsystems 
moves middle spectrum increase ncsl 
software release moves top spectrum ncsl distinguishing relatively large subsystem 
di cult see frames animation grows relatively constant rate 
display principles visualization approach seesys principles 
individual components assembled form 
allows user easily see relationships 

pairs components compared understand di er 
obvious subsystem larger subsystem 
components disassembled smaller components 
vertical bars clearly show division subsystems directories 
important feature components allows structure display re ect structure software 
screen real estate visualizing large software systems important utilize screen ciently 
objects placed screen large convey information small allow room objects 
seesys placing rectangles display area utilized 
area components large statistics visually dominant making technique ective components representing larger directories interesting de emphasizing small components 
example di cult see small directories 
seesys overcomes di culty zoom feature allows user zoom subsystem see 
spatial relationships important screen real estate technique lends rapid transfer information 
simply packing data screen necessarily helpful 
viewer able process information rapidly visualization technique useful 
seesys speeds transfer information advantage human ability recognize spatial relationships 
people naturally inferences con guration components relate component 
easier see relationships components heights rectangles approximately equal 
algorithm equalize heights retaining easy comprehensibility ofthe display example preserving alphabetical ordering 
heights exactly necessary split subsystems rows leave margins spaces variable width subsystems 
subsystem partially split rst second row 
undermine basis approach individual parts represent component system making harder see relationships individual components 
deal problem introduced slider allows user control number rows display 
changing aspect ratio user nd optimal display gaining insight particular characteristic 
number rows reduced just user easily compare percentage new development subsystems 
chosen order components alphabetically facilitate rapid location speci components foresee useful ordering techniques area complexity metric percentage changes statistic values 
version seesys include controls reorder components alphabetically area speci ed statistic 
color color visualization technique convey information 
previous examples color redundantly encode size brighter colors denoting larger components 
perceptually uniform color spectrum lh encode information fewer greater di ering colors distinctions components 
color encode information age complexity activity code churn number programmers 
implementation seesys implemented bell laboratories vz graphics library tm gro 
vz cross platform class library forming computational infrastructure producing innovative novel production quality visualizations large datasets 
vz uses object oriented capabilities factors common code embodies direct manipulation data abstractions selective manner building highly interactive visualizations large datasets linked views 
seesys consists linked views data colorful space lling display containing controls buttons sliders bottom space containing color scale statistics zoom view showing details particular subsystem 
mouse sensitive view implemented vz class tied vz linking united perceptually uniform color scale 
view highly interactive continuously responds mouse keyboard input views 
black white version color mapped gray level 
silicon graphics iris workstation screen updates occur real time appear continuous 
total seesys lines delicate code runs workstations supporting motif silicon graphics gl graphics language boa 
summary seesys system implementing graphics technique displaying large volumes information software 
seesys visualization technique display code existing software system organized hierarchically subsystems directories les representing system rectangle recursively representing various subunits interior rectangles 
area rectangle proportional statistic example ncsl associated subunit 
seesys uses color zooming ll statistic interactive techniques layer additional information base display 
applying seesys display code system show sizes subsystems directories development activity zoom particularly active subsystems discover development activity involves bug xes new functionality identify directories subsystems high rates locate historically active subsystems nd subsystems shrunk disappeared 
seesys visualization technique display source code statistics entire software system terms code structure complexity evolution 
principles adhered creating visualizations large software systems 
structure display re ect structure software 

individual components visually comparable decomposable 

animation depict evolution software 
potential users seesys include project managers feature engineers software developers 
project managers seesys help track evolution code understand subsystem directory le ts system 
feature engineers may seesys help determine components system impacted planned enhancements 
nally software developers seesys identify error prone subsystems candidates reengineering 
acknowledgments gratefully acknowledge haim providing perceptually uniform color scales helpful suggestions david weiss brian johnson careful proofreading suggestions anonymous referees 
early version appears icse proceedings 
research conducted baker summer employee bell laboratories 
bh marc brown john hershberger 
color sound algorithm animation 
ieee computer december 
bm baecker marcus 
human factors typography readable programs 
addison wesley reading massachusetts 
boa opengl architecture review board 
opengl manual 
addison wesley reading massachusetts 
cm william cleveland mcgill editors 
dynamic graphics statistics 
wadsworth brooks cole paci grove california 
christof ebert 
visualization techniques analyzing evaluating software measures 
ieee transactions software engineering 
stephen eick 
graphical technique display ordered text 
journal computational graphical statistics june 
ess stephen eick joseph ste en eric sumner 
seesoft tm tool visualizing line oriented software software 
ieee transactions software engineering 
emden gansner os stephen north vo 
technique drawing directed graphs 
ieee transactions software engineering march 
gro visualization group 
vz visualization library user guide version 
bell laboratories road illinois 
hal halstead 
elements software science 
elsevier new york 
js brian johnson ben shneiderman 
tree maps space lling approach visualization hierarchical information structures 
ieee visualization conference proceedings pages san diego california october 
ks kraemer john stasko 
parallel systems overview 
journal parallel distributed computing 
lh haim herman 
color scales image data 
ieee computer graphics applications 
haim richard gary meyer philip robertson 
color vs black white 
ieee computer graphics applications 
mcc mccabe 
complexity measure 
ieee transactions software engineering 
psb price ian small ronald baecker :10.1.1.28.8296
taxonomy software visualization 
journal visual languages computing 
roman kenneth cox donald wilcox jerome 
system declarative visualization concurrent computations 
journal visual languages computing 
edward tufte 
visual display quantitative information 
graphics press cheshire connecticut 
edward tufte 
envisioning information 
graphics press cheshire connecticut 
edward yourdon 
modern structured analysis 
yourdon press prentice hall 
ncsl new development subsystem release 
directory level detail 
zoomed view subsystem bug rates subsystem directory 
fix fix rates 
frame animation showing code growth 
frame animation showing code growth 
frame animation showing code growth 
new development subsystem 

