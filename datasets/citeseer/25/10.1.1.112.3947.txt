bsplnd spline dimensional package scattered data interpolation michael weis tracker business systems terminal drive suite wa mike net problem scattered data interpolation fitting smooth surface generally manifold set non uniformly distributed data points extends positions domain 
common sources scattered data include experiments physical measurements computational values 
scattered data interpolation assists interpreting data calculation values arbitrary positions domain 
despite attention literature scattered data interpolation remains difficult computationally expensive problem solve 
bsplnd software package solves problem 
uses scattered data interpolation technique lws 
technique fast produces continuous interpolation function set scattered data hierarchical set cubic splines 
bsplnd extends technique data having arbitrary number dimensions domain range 
categories subject descriptors graphics utilities computational geometry object modeling approximation data storage representations 
general terms algorithms performance design 
keywords scattered data interpolation multilevel splines data approximation 

scattered data interpolation technique lws discussed context bivariate data independent data dependent data scalar 
lws develop multilevel spline approximation method simpler algorithm depends spline approximation method 
spline approximation method defines approximation function set scattered data terms uniform cubic spline basis functions merit multilevel technique improves 
robert lewis washington state university school eecs university drive wa edu set problem context bivariate data section refer details mathematical development 
section extend math data having arbitrary number dimensions domain range 
design implementation bsplnd sections respectively 

problem definition bivariate data rectangular domain xy plane set scattered points space 
lws define approximation function data uniform bicubic spline function terms control lattice overlaid domain 
control lattice set control points spans integer grid 
restricting control points integer values simplifies math loss generality 
illustrates relationship 
mn 
control lattice configuration lws 
ij value ij th control point lattice located 
approximation function defined terms control points 
uniform cubic spline functions defined 
functions serve blending functions weighing contribution control point distance 
note spline curves sum value value problem determining reduced solving control points best approximate scattered data refer reader mathematical development calculating control lattice defines approximation function fitting scattered data 
mentioned lws methods calculation spline approximation method ba algorithm capable descendant multilevel spline approximation method mba algorithm 
section extend mathematical development data number dimensions 

extending technique data arbitrary dimensionality handling scattered data having arbitrary number dimensions domain range denote number dimensions domain range respectively 
data values range data point independent determine approximation function terms independent data dimension range 
solving problem reduced solving approximation functions domain range grouping functions manner 
derivation ba algorithm domain dimension range scalar 
ba algorithm development similar case 
domain defined scattered data defined 
control lattice overlaid md set control points spans integer grid 
id th control point lattice located 
approximation function defined terms control points kd kd bk td kd id kd id kd id xd td xd xd dimension domain 
uniform cubic spline functions defined earlier subscripts arguments range zero 
kd extend tensor product form generate function dimension domain 
similar case problem determining solve control points best approximate scattered data start consider data point xd zc relationship control points neighborhood 
assuming xd lws case control points kd determine value kd xd 
evaluate zc xd control points satisfy kd kd kd bk 
convert matrix notation defining column vectors kd 
kd note equation hyperplane space unknowns specifying minimization constraint lws case sum squares variables minimized amounts locating point hyperplane closest origin 
constraint chosen minimize deviation zero domain 
parametric form line origin perpendicular hyperplane uw represents normal vector hyperplane scalar 
substituting yields consider effects data points control lattice 
data point evaluate control points neighborhood 
neighborhoods data points overlap multiple assignments control point occur 
resolve multiple assignments control point lws consider data points neighborhood calling set data points proximity data set 
proximity data set single control point xd zc solving substituting gives solution 
summarizing equations solution control points vicinity data point xd 
direct substitution see function evaluates data point 
equation general solution case lws control points vicinity data point 
id id id xd id 
data point gives single control point kd id different value wc zc bk id kd id xd td xd xd 
resolve multiple assignments control point follow lws approach id minimizing error term wc id id wc wc difference real wc expected contributions id function xd 
derivative approximation error respect equating result zero find minimum gives id id 
developing pseudocode ba algorithm handle arbitrary number dimensions domain straightforward extension algorithm lws derivation 
recall derivation assumes solution applied dimension range dimension aspect algorithm shall section discussion bsplnd 
ba algorithm extended dimensional domain 
ba algorithm input scattered data xd zc output control lattice id id id id point xd zc dimension id xd td xd xd compute kd kd compute element compute kd element add id kd add id kd id id compute id id id id ba algorithm major loops 
loop algorithm initializes numerator denominator control point 
second loop visits data point calculating effect control points neighborhood second accumulating numerator denominator 
third final loop optimizes multiple assignments control point applying particular denominator nonzero assigned value zero 
mba algorithm tradeoff exists shape smoothness approximation accuracy spline function generated ba algorithm 
lws develop multilevel spline approximation method mba algorithm generate function smooth shape closely approximates data mba algorithm generates hierarchy control lattices ba algorithm represent sequence functions sum desired approximation function 
function sequence derived coarse lattice 
accuracy initial function data improved subsequent functions sequence derived finer lattices 
improving multilevel algorithm lws formulate technique called spline refinement reduce sum spline functions equivalent spline function 
refer reader detailed development multilevel approach 
briefly summarize algorithm reproduction graphical illustration algorithm pseudocode 
mba algorithm comes forms generating approximation function form basic mba generates hierarchy coarse fine control lattices overlaid domain representing sequence functions sum desired result coarsest lattice chosen approximate data ba algorithm 
difference data initial function evaluated data specifically serves input application ba algorithm generate control lattice chosen lws twice size density 
process continues calculation subsequent lattices twice size previous sequence applications ba algorithm lattices serve remove residual error 
illustrates basic mba case 
control lattice hierarchy spline refinement evaluate evaluate evaluate evaluate spline function sequence approximation function control lattice hierarchy refine spline refinement refine refine progressive control lattices evaluate approximation function 
approximation function evaluation mba algorithm lws 
algorithm basic mba lws modified domain dimension note basic mba algorithm input scattered data output control lattice hierarchy compute ba algorithm compute data pt 
notice evaluating requires evaluations spline function single evaluation afforded ba algorithm 
eliminate extra overhead computation significant evaluated large number points lws formulate technique call spline refinement illustrated 
technique reduce spline functions equivalent spline function 
second form mba algorithm 
spline refinement technique progressive applied level control lattice hierarchy 
illustrates process described 
denote spline function generated control lattice denote lattice size 
starting initial control lattice hierarchy new control lattice derived spline refinement 
words derived defines equivalent spline function size lattice hierarchy 
sum functions satisfied single lattice results sum corresponding control point 
referring continue progression level lattice applying spline refinement derive lattice 
progression ends finest lattice hierarchy 
process generalized pseudocode lws modified domain dimension algorithm represents updated data 
mba algorithm input scattered data output control lattice coarsest lattice exceed finest control lattice compute ba algorithm compute compute finer control lattice hierarchy refine spline refinement step loop performed variety methods noted lws 
case lws choose refine control lattice lattice control point spacing half large 
refined lattice size lattice hierarchy sum lattices algorithm simple matter summing corresponding control points 
letting ij ij ij th control point respectively position control point corresponds control point ij 
lws define relationships control points ij ij ij note equations case 
general unique equations relating control point control points vicinity 
notice factors blend control points sum example factors equations 

bsplnd design bsplnd package implements mba algorithm data having arbitrary number dimensions domain range 
bsplnd provides user options calculating approximation function mba algorithm set scattered data points bsplnd fit bsplnd 
routine returns data structure containing control lattice defines approximation function 
control lattice form passed bsplnd bsplnd eval routine evaluate function independent data value implementing dimensional form approximation function 
data structure allocated dynamically run time package provides bsplnd delete free memory 
bsplnd provides user flexibility separate implementations mba algorithm 
routine bsplnd fit accepts input number levels spline refinement defined see basic mba user size control lattice hierarchy 
refinement bsplnd fit implements ba algorithm 
second routine bsplnd accepts tolerance measure accuracy approximation function achieve evaluation scattered data points 
routine determines number levels spline refinement required achieve tolerance 
primary challenge implementing mba algorithm supporting routines bsplnd eval bsplnd delete programming data structure design required handle data arbitrary number dimensions domain range 
bsplnd routines accept dimensionalities domain range input order properly interpret scattered data receive dimensions array store ddimensional control lattice specified compile time determined run time 
solution problem features design shall discussed section 
shall data structure design storing dimensional control lattice follow discussion procedural design accessing structure 
accomplished set procedures algorithms led implementation bsplnd routines mentioned 
start algorithm bsplnd eval demonstrates read access data structure 
algorithm assumes control lattice calculated 
simplest algorithm set help introduce complex multidimensional ba algorithm context control lattice data structure 
algorithm demonstrates write access data structure calculates control lattice 
follow multidimensional algorithm spline refinement control lattice generates finer control lattice defining approximation function 
ba algorithm spline refinement algorithm build mba algorithm illustrated 
algorithm led implementation bsplnd routine bsplnd fit slight modification routine bsplnd 
name bsplnd algorithm implemented counterpart algorithm led directly implementation 
referring algorithm led implementation implementation obvious context 
storage access dimensional control lattice discussion control lattice data structure frequently ba algorithm mba algorithm ba algorithm calculates control lattice 
mba algorithm uses ba algorithm calculate lattices control lattice hierarchy 
principal input ba algorithm set scattered data points principal output dimensional control lattice overlaid domain data 
order properly interpret scattered data ba algorithm receive number dimensions domain range data number data points method storing scattered data memory separate data stores dimensional array independent data dimensional array dependent data rows corresponding arrays represent abscissa ordinate data point respectively 
denote data sets domain range respectively 
scattered data conveniently stored dimensional array structure detailed storage output data control lattice requires dimensional array lattice overlaid domain data illustrated 
lies difficulty storing lattice 
specified input array dimensions specified compile time determined implementation ba algorithm runs 
review dimensional array may accessed onedimensional array provide insight solving problem face storing accessing data control lattice 
caller ba algorithm pass scattered data dimensional arrays 
conceptual view memory dimensional array subscript varies data points illustrated 
dimensional array xd xd xd dimensional array indices dimensional array index dp 
independent data dimensional array corresponding dimensional array 
cartesian indexing scheme consistent indexing control points see indices fastest varying index subscript indicating contiguous memory locations 
shall continue convention introducing multidimensional control lattice shortly 
contrary convention indexing dimensional arrays second index varies fastest row major order 
conventions converting dimensional index dimensional index 
caller perspective passing dimensional array sense data logically organized 
dimensional array stored contiguous set memory locations ba algorithm access data dimensional array elements illustrated 
derived traversing data left right bottom top 
long parameter passed ba algorithm pointer data value algorithm index dimensional array relationship dj represent dimensional array indices 
illustrates dimensional indexing array ba algorithm accesses scattered data input fashion 
gives caller freedom pass dimensional onedimensional array long passes algorithm pointer element array values 
store dimensional control lattice dimensional array accesses similar manner 
array allocated run time capacity elements control point lattice 
recall calculate separate lattice dimension range assumption particular dimension 
discussion steps assume 
shall elaborate storage access lattice affected 
dimensional array consists elements 
demonstrate consider dimensional domain 
illustrates dimensional view control lattice cartesian indexing scheme 

dimensional control lattice 
similar subscripting independent data store indexing control points simplified subscripting change variable 
number contiguous control points dimension domain 
similar dimensional example independent data store dimension horizontal left right represented subscript second vertical bottom top represented second subscript third dimension page front back represented third subscript 
introduces concept stride represented variable stride provide means indexing dimensional array example similar dimensional case 
elements dimensional array laid number elements adjacent elements dimension illustrates dimensional array storage dimensional control lattice stride dimensional array indices dimensional array index 
storing control lattice dimensional array 
notice stride maps dimensional view dimensional view data 
specify dimensional array index control lattice illustrated function dimensional array indices stride js ks 
figures 
example control point dimensional array index 
explaining result notice starting initial control point traversing left right bottom top front back order lay dimension control point th control point sequence 
zero indexing index corresponding dimensional array calculated 
extend dimensional example general case domain dimensions 
notice example stride increasing dimension data increases elements skipped reach adjacent element dimension apply pattern develops threedimensional case dimensions define stride recursively 
dimensional array index function dimensional indices stride sd 
recall indexing multidimensional control lattice introduced section 
notice twodimensional application general case 
elaborate case 
mentioned section range scattered data vector solve approximation functions dimension range group manner 
accommodate control lattices defining functions increasing control lattice array elements elements 
essence control point element vector 
illustrates dimensional conceptual view storage array index dimension range second onedimensional index calculated values control point vector adjacent memory 

dimensional view complete control lattice 
case values stride accessing dimensional array straightforward jr md 
index control lattice dimensional array steps 
combining relationships yields 
sd bsplnd algorithms evaluation approximation function bsplnd eval bsplnd eval algorithm evaluates approximation function defined control lattice position xd domain words implements 
algorithm shall demonstrate procedural design accessing dimensional array dimensional control lattice 
assumes control lattice calculated example ba algorithm 
introduce data structure object encapsulates control lattice data store data elements 
additional data fields structure include data required user bsplnd calculate control lattice calculated data useful bsplnd algorithms 
pass separate parameters require calculation algorithm packaged structure structure pointer communicated 
table lists data fields structure 
table 
data structure storing control lattice 
field array size description number control points control lattice 
stride 
scalar 
dimensions domain 
scalar 
dimensions range 

control points dimension domain 
xmin xmax slope intercept lower upper boundary values domain dimension domain 
fields slope intercept represent transformation function domain scattered data domain control lattice 
scalar 
levels spline refinement calculating control lattice 
data fields maintain definitions 
fields xmin xmax element arrays real numbers specify lower upper bound domain dimension fields slope intercept element arrays real numbers define linear mapping function domain scattered data domain control lattice 
define domain control lattice follows 
reasonable bsplnd user required specify domain defined section control points span integer grid 
define domain control lattice defined similar section md map domain zero corresponds xmin md corresponds xmax map position xd scattered data domain domain fields slope intercept development section 
field data structure number levels spline refinement calculate lattice 
data field array real numbers control points control lattice initially zero elements size 
array sizes array preset reasonable upper limit consuming memory capacity large practice vary widely dynamically allocate storage prior calculating ba algorithm 
listing bsplnd eval algorithm introduce algorithms 
calculates stride calc stride mapping function stored fields slope intercept calculated bsplnd new algorithm 
bsplnd new algorithm initializes control lattice object table 
accepts xmin xmax input ultimately bsplnd user control lattice object output 
populates including fields slope intercept ba algorithm ba calculates control lattice field 
shall 
bsplnd new xmin xmax xmin xmin xmax xmax range xmax xmin slope range intercept xmin range calc stride calculate capacity field allocate memory size alloc size bsplnd algorithms calc stride bsplnd new pseudocode closely resembles actual programming language pascal algorithms lws previous sections 
bsplnd algorithms generally follow conventions 
note output parameter indicated formal parameter list algorithm input output parameter indicated 
absence symbol parameter denotes input parameter 
arrays greater dimension subscripting convention row major order 
listing bsplnd eval algorithm algorithm called eval basis functions evaluates uniform cubic spline functions value algorithm called bsplnd eval 
eval basis functions aa tt ct ab execution algorithm array contains spline function evaluated 
spline functions readily recognizable eval basis functions algorithm calculates minimum number operations possible 
software application mathematica determine quickest means calculating functions algorithm called times scattered data point input ba algorithm 
list bsplnd eval algorithm implements evaluating approximation function stored control lattice object independent data stored element array returns result element array bsplnd eval locate independent data relative control lattice anchor index dim 
domain evaluate spline functions dim 
loop slope intercept id td eval basis functions evaluate control lattice dim 
range 
loop calculate sum terms summation 
loop index term generate unique combination kd calc 
spline func 
product accum index loop kd accumulate 
bk accum 
index assuming 
index index finish index account dim 
index index add current term summation 
index algorithm bsplnd eval follows directly mathematical development accessing dimensional control lattice stored dimensional array 
may helpful reader refer back equation point terms equation referenced walking bsplnd eval 
loop algorithm calculates data second loop 
maps independent data control lattice domain 
result calculates dimensional indices array control point indices dimension effect value approximation function loop participate generating dimensional array index control lattice accessing control point term 
calculating array arguments spline functions loop evaluates functions call eval basis functions 
completion loop array contains values illustrated 
conserve execution time calculating unique evaluations spline functions loop storing memory 
calculated loop needed basis requires evaluations functions 

populated array loop bsplnd eval 
second loop accumulates terms summation dimension range independently accessing appropriate control point elements array 
noted earlier separate set control points dimension range 
loop completes stored separate evaluations output array nested loop calculates summation dimension range pass loop generates term summation 
key algorithm nested loop generates unique combination summation variables kd array dimension kd function loop iteration variable 
summation variables kd index spline functions spline function product assist indexing bk dimensional control lattice array loop calculated term bk summation indexed dimensional array 
indexing occurs line increments array element convert zero indexing 
line algorithm completes indexing dimensional control lattice account correct dimension range 
line algorithm adds current term accumulating sum current dimension range 
bsplnd ba algorithm bsplnd section bsplnd multidimensional ba algorithm 
algorithm bsplnd spline refinement algorithm section basic building blocks bsplnd mba algorithm complete algorithm set 
name bsplnd version ba algorithm bsplnd 
ul stands uni level ba algorithm calculate control lattice level control lattice hierarchy mba algorithm 
bsplnd algorithm listed accepts scattered data parameters array independent data array dependent data 
input parameters domain range respectively number scattered data points algorithm assumes element array element array 
furthermore assumes components data point independent data stored contiguous memory locations components data point dependent data 
boundaries scattered data domain passed bsplnd parameters xmin xmax element arrays properly map independent data control lattice domain defined input parameter array 
input parameter return dz boolean variable true cause bsplnd calculate deviation calculated approximation function data points overwriting range data points input output parameter feature useful mba algorithm calculating control lattice hierarchy 
sole output parameter represents control lattice object 
algorithm assumes object contains meaningful data including zero element control lattice array data field 
bsplnd determine control lattice size allocate memory 
bsplnd return dz xmin xmax populate control lattice object bsplnd new xmin xmax calculate size control lattice array allocate size elements numerator denominator size alloc size alloc size size loop data point calculate effect control points nearby set points dimension range 
loop locate data point relative dim 
control lattice 
anchor index dim 
domain evaluate spline functions dimension loop slope cd intercept eval basis functions calculate ss spline products 
loop loop calculate control lattice dimension range loop accum 
effect data point 
pts 
nearby dim 
range results loops loop index gen spline product wc calc 
array index independent loop loop index index complete index accounting dim 
range index index calculate data point effect control point phi cr indexing control point accumulate numerator denominator index index phi index index control point vicinity data point dimension range data point calculate control lattice size loop return deviation approx 
function defined lattice scattered data points storing parameter return dz loop bsplnd eval addr cd loop cr cr cleanup free free walk code bsplnd reveals bsplnd version ba algorithm closely follows logic extended ba algorithm section 
version brings ba algorithm closer implementation considers data store dimensional control lattice accounts multiple dimensions range scattered data 
algorithm performs setup initializing control lattice object parameter call bsplnd new 
allocates storage element control point local arrays accumulating numerator denominator control point 
setup algorithm calculates contribution data point control points vicinity storing contribution appropriate elements 
done dimension range independently data point effects elements 
data point visited algorithm calculates control point dividing element element nonzero denominator sets control point zero 
control point category data points proximity data set 
algorithm calculates deviation calculated approximation function data points requested 
essence bsplnd calculates separate control lattices parallel algorithm viewing component range separate scalar range applied full domain data 
control lattice object designed accommodate algorithm coded store separate 
bsplnd spline refinement algorithm bsplnd refine section bsplnd multidimensional spline refinement algorithm second basic building block bsplnd mba algorithm 
name algorithm listed bsplnd refine 
bsplnd refine algorithm accepts control lattice calculated calculates finer lattice defining equivalent approximation function returning output parameter 
bsplnd refine allocate memory coarse lattice indices contribute control point fine lattice memory weights 
capacity loop capacity capacity tmp refined lattice twice fine alloc capacity alloc weights capacity populate refined lattice twice fine coarse bsplnd new tmp xmin xmax size assume calc 
fine lattice control point time 
assume 
size loop resolve index dimensional indices rem downto loop rem div indexing rem rem mod calculate array indices coarse lattice weights contribute current control point refined lattice 
dimensional indices control pt 
locate related dimensional indices coarse lattice convert back index 
weights loop odd index indexing downto loop weights weights weights weights index indexing downto loop weights weights weights weights weights weights dimension domain calculate control points 
account computing lattices parallel 
loop jr loop jr jr weights algorithm performs setup populating call bsplnd new 
lattice values data fields xmin xmax domain range change different values fields slope intercept dependent size lattice 
setup process includes memory allocation control points coarse lattice control point refined lattice potentially relate case corresponding weights blend control points 
line calculates number control points calculate assuming 
setup algorithm fills data stores weights control point calculate 
occurs loop dimensional index current control point loop counter loop dimensional index resolved dimensional indices stored 
recall indexing scheme lws 
loop arrays weights calculated solely function indices 
loops control points contribute value control point blended weights give value 
calculation weights strictly function geometric position control point fine lattice perform calculation dimension range independently 
bsplnd mba algorithm bsplnd fit section bsplnd multidimensional mba algorithm complete algorithm set 
built ba algorithm bsplnd spline refinement algorithm bsplnd refine 
predecessor bsplnd package bsplnd fit routine 
presenting algorithm ll discuss modify tolerance calculating levels spline refinement required achieve level accuracy approximation function 
bsplnd fit algorithm follows logic displayed lws diagram mba 
listing list short algorithms calls correspond nicely 
bsplnd finer calculates finer lattice control lattice hierarchy see current lattice current deviation hierarchy scattered data 
calculates new deviation data extended hierarchy fed subsequent call bsplnd finer 
algorithm bsplnd add calculates lattice sum equally sized lattices defined domain scattered data see 
algorithm bsplnd delete frees memory dynamically allocated data field control lattice object allowing bsplnd fit reuse memory previous levels hierarchy algorithm progresses 
bsplnd finer dz 
lattice hierarchy twice fine 


tmp 
calculate lattice hierarchy return deviation dz 
bsplnd dz true tmp xmin xmax bsplnd add sum 
populate sum 

bsplnd new xmin xmax sum 
sum corresponding control points 

size 
size 
sum bsplnd delete 
nil 
free listing bsplnd fit follows 
notice parameter list matches ba algorithm bsplnd dependent data strictly input parameter addition parameter number levels spline refinement 
bsplnd fit reduces bsplnd 
bsplnd fit public routine implementation opposed bsplnd don edit user data 
note returned lattice data field input parameter level hierarchy level zero doubles lattice size call bsplnd finer 
algorithm directly maps 
bsplnd fit xmin xmax current lattice hierarchy current unrefined lattice current refined lattice nil initialize important memory reuse storage delta lattice scattered data points 
start data 
alloc dz pr loop loop dz cr cr calculate control lattice control lattice hierarchy loop nil bsplnd delete memory reuse bsplnd dz true xmin xmax bsplnd add bsplnd delete memory reuse refine bsplnd refine finer hierarchy current deviation bsplnd finer dz bsplnd finer dz copy levels refinement lattice object bsplnd delete cleanup bsplnd delete free dz bsplnd tolerance mba algorithm bsplnd fit algorithm modified accept tolerance measure accuracy function achieve approximation scattered data 
calculating current value line modify bsplnd fit measure approximation error exit loop falls user specified tolerance new parameter 
course modify loop error meeting tolerance iteration input instances scattered dependent data denote deviation 
calculate root mean square error number scattered data points 
note scattered data truly functional nature tolerance specified user may reached 
bsplnd mba algorithm bsplnd requires maximum number levels spline refinement maximum value input halt calculated function meeting tolerance 

bsplnd implementation bsplnd package written programming language 
library consists primary routines bsplnd fit bsplnd bsplnd eval bsplnd delete 
addition library comes additional routines mba implementers bsplnd fit bsplnd perform bsplnd finer bsplnd refine bsplnd add 
included library advanced user write routines similar bsplnd fit bsplnd 
user guide library available form manual page 
user guide includes function prototype gives detailed specification routine 
lists error conditions reported library 
bsplnd algorithms mentioned earlier public interface library corresponding private routine library ul 
application bsplnd general purpose program works data having arbitrary number dimensions domain range 
applied variety applications wind velocity dimensional volume altitudes map compressed image fluid flow river tissue density cat mri scan temperature furnace implementation additional algorithm adaptive ba algorithm valuable addition bsplnd 
algorithm ensures interpolation data mba algorithm number levels hierarchy control point single point proximity data set 
similar bsplnd routine bsplnd 
single pair close data points may require dense data points sparsely distributed adaptive approach store control points lie neighborhood data point case conserving memory 
useful addition library integration routine accept approximation function defined control lattice interval subset domain integrate function specified interval 
example integrating density function dimensional volume give total mass substance volume 

acknowledgments dr robert lewis served primary author advisor chair committee completion master degree washington state university 
dr lewis help aspects project including assistance development bsplnd algorithms development application display output bsplnd review project 
colleague alain fournier provided spline refinement algorithm multiple dimensions implemented bsplnd 

lee wolberg shin scattered data interpolation multilevel splines ieee transactions visualization computer graphics vol 
july september cormen algorithms mit press cambridge massachusetts 
wolfram mathematica system doing mathematics computer nd edition addison wesley publishing reading massachusetts 
phillips manual software development group geometry center university minnesota 
