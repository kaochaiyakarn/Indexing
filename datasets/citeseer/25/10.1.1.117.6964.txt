church thesis holds 
notes peter wegner tracts interaction computability michael peter institute business informatics university koblenz landau koblenz germany email uni koblenz de peter wegner definition computability differs markedly classical term established church kleene markov post turing wegner identifies interaction main feature today systems lacking classical treatment computability 
compare different approaches argue wegner criticism appropriate 
account major arguments literature show church thesis holds 

wegner considers relation computability interaction 
introduces new machine model interaction machine stating concept interaction powerful challenges church thesis 
wegner proposes shift view software development rational empirical perspective interaction 
try shed new light ideas related publications focusing computational power wegner interaction machines abstracting philosophical side matter :10.1.1.57.9269
divided sections 
sketch wegner ideas 
give overview classical framework computability theory 
proceed subject interaction introduced informally wegner suggest formal models interaction machines 
show models exceed computational power turing machines affect validity church thesis 
conclude discussing relevance wegner light results 

wegner ideas wegner derives ideas observing systems usually consist communicating components computers interface user modern software built modules communicate open systems react external events environment object oriented programming paradigm describes software systems nets interacting objects 
context wegner tries interactive capabilities computability theory finds interactive tasks driving home author correspondence addressed 
referred church turing thesis 
received november revised august computer journal vol 
realized algorithms 
algorithms execute automatically notice surroundings handle traffic interactive events 
interaction simplify tasks algorithms exist game town inherently interactive tasks driving reserving seat airline 
interactive tasks introduces interaction machines turing machines input output allowing dynamic interaction environment 
turns turing machines open systems 
wegner argues interaction machines computationally powerful turing machines 
distinguishes types interaction machines capabilities input mechanisms 
simple interaction machine interactive identical machine outputs input unchanged message message 
wegner compares expressive power interaction concurrency distribution comes give turing machines greater power 
describes behavior interaction machine terms interfaces provide services machine environment allowing construction systems interactive components 
wegner calls shift view software development rational perspective empirical approach turing machines model important aspects real world interaction real time 

computability theory 
algorithm computer science algorithm understood procedure precisely describes finite form transformation input data defined output data result fully determined input 
covers probabilistic non deterministic algorithms long output uniquely determined 
uniqueness output guaranteed deterministic algorithms point time step computation uniquely 
algorithm recipe computation satisfies conditions finite number steps instructions may specified instruction uniquely identified effect step defined successor instruction carried context 
definition algorithm closely linked function input arguments transformed output function value justifying term algorithmic definition function 
consequently function called computable possesses algorithmic definition 
computability theory uncountably functions computable 

computability church thesis function called computable algorithm computes function value argument 
function partial undefined case represented non termination output result 
describe class computable functions accurately formal representations algorithms developed example turing machines markov algorithms flow charts partial recursive functions register machines 
classes functions computed models identical 
church thesis generalizes result statement function positive integers constructive objects computable algorithm intuitive sense partial recursive 
term computability usually associated term function 
corroborated fact partial recursive functions defining term algorithm 
cf 

original works turing church refer functions natural numbers results extend general word functions wherea kleene closure alphabet general functions constructive objects cf 
footnote 
cf 

proofs 
constructive object object recursively constructed finite set initial objects 
cf 
term function formulation church thesis 

procedures algorithmic nature computer journal vol 
procedures resemble algorithms fulfil conditions mentioned example protocols regulations directions infinite control sequences extent role playing 
procedures called algorithms broad sense non deterministic algorithms differ strict definition respect step computation drawn arbitrarily set successor steps 
case input multiple outputs non deterministic algorithm defines binary relation associating outputs possibly result applying algorithm input leads definition computable relation 
algorithms type computed turing machine characteristic function relation 
church thesis remains unaffected algorithms compute functions 
equivalent computable functions associated procedures exceed turing machines expressive power 
simply fulfil requirements computing functions 

interpretations church thesis approaches try capture intuitive notion computability completely turing machines 
mentioned ideas discussed philosophy artificial intelligence relevant ideas outlined extend scope original thesis 
example literature find concepts mundane procedures functions real numbers non functional procedures systems human thinking 
procedures authors typically try construct counterexamples church thesis 
procedures see section fulfil fundamental requirements algorithms finite execution determinacy uniqueness output restriction input output constructive objects integers words finite alphabet 
want emphasize remaining sections important note term computability associated term function 
church thesis significant strict interpretation statements concerning computability functions show important limits algorithmic tractability problems hint general tractability 
problems typically contain functional parts thesis applies 
concede non functional parts cf 

non deterministic algorithms compute functions possible computations input yield result 
case non deterministic algorithms coincide deterministic algorithms defined 
cf 

great importance real world problems case church thesis help 
validity thesis called question 
consequence certainly worthwhile investigating similar theses cover broader spectrum procedures 
find hypothesis form xy discussed heading church thesis gives rise lot confusion 
concentrate strict interpretation thesis consider admissible interpretation 

discussion 
interactive computations systems interactive system system interacts environment input output behavior 
environment system generally identified components belong 
interactive system referred open system depends external information fulfil task 
external resources integrated system system longer interacts environment get new closed system 
difference open closed systems lies eye 
useful design system 
today large number systems interactive nature example information systems office applications development environments retrieval systems dialog systems network applications distributed systems 
mentioned objects considered machines interact objects 
interaction important characteristic object oriented systems 
distinguish internal view comprises interaction objects system external view behavior system user interface 
considering existence computer applications interactive systems face question systems relate turing machines 

turing machines input output turing machines describe process computation 
function inputs prior computation 
termination tape contents interpreted output 
turing machines closed systems describe functions employ input output operations initial input final output 
contrast computers possess dedicated input output channels communication human user system environment resources limited infinite tape 
respect acknowledge wegner achievements having recognized importance shown effectively computable procedures importance human affairs 
cf 
theses similar church studied concerning quantum mechanics human brain computers thought church thesis holds 
simple interaction 
additional input output operations investigating influence performance computers 

relevance interaction shows flow chart simple interactive program repeatedly computes square natural numbers entered user 
regardless programming paradigm interaction provides communication facilities control flow program 
flow chart describes procedure completely uniquely finitely 
neglecting input output iteration interpreted computation performed turing machine 
influence unknown user input control flow hard determine function computed procedure procedure seen computation 
solution consider combination program plus user corresponding function computer journal vol 
xn undefined empty word 
input determined run time 
function derived integrating user computation closing system 
evident turing machines model behavior directly due missing input output operations 
need models take account inputs outputs run time describe computer systems adequately 

interactive protocol 

interaction machines wegner defines interaction machines turing machines input output operations turning open systems depending external factors 
outsourcing tasks external partners computation requires interplay partners 
wegner leaves open series questions input output operations carried 
interaction machines compute accept 
define operation machine 
interaction communication 
output interpret 
compare wegner characterization interaction machine formal definition turing machine obvious accepted computational model 
wegner provide precise constructive example support thesis contradiction church thesis 
scarcely assess validity statements 

formal definitions interaction machines wegner proposal equip turing machines interaction capabilities pp 
ff 
interactive proof systems arthur merlin games treated interactive turing machines defined behaviors 
interactive turing machine itm turing machine read input tape read random tape working tape read communication tape communication tape write output tape 
interactive protocol ordered pair mp mv sharing input communication tapes reversed access see 
operation protocol consists communication rounds starting mv verifier 
having sent message mp prover mv deactivated mp takes computation 
message prover verifier reverses roles original status quo finishes round 
mp suggests proofs mv accepts rejects 
language interactive proof system fixed verifier mv prover mp exists protocol mp mv accepts word provers corresponding protocol accept word interactive proof proceeds lines prover suggests proof verifier example word element language 
verifier examines proof 
proof convincing verifier accepts protocol stops positive answer 
example interactive protocols shows possible principle specify interaction machines formally exactly interactive protocols compared wegner interaction machines due probabilistic nature complexity restriction 
sections follow base discussion deterministic interactive turing machines similar 
focus communication facilities offered communication tape probabilistic features 
try lacking formalization wegner interaction machines 
mentioned interactive turing machines models exist interaction communication process algebras petri nets neural networks communication protocols 
interaction church thesis computer journal vol 
having prepared ground investigate relation church thesis interaction 
peter wegner writes hypothesis formal notion computability turing machines corresponds intuitive notion computable accepted obviously true years 
intuitive notion computable broadened include interactive computations church thesis breaks 
thesis valid narrow sense turing machines express behavior algorithms broader assertion algorithms capture intuitive notion computers compute invalid 
wegner argues interaction challenges term computability machines capable input output powerful turing machines 
statement requires specification set problems solvable interaction machines solvable turing machines example interaction machine solving halting problem 
certainly interesting ask interaction machines turing machines 
investigating expressive power interaction machines done steps 
procedures compute function expressible interaction machines 
computability mean case tasks driving home 
peter wegner calls computations non algorithmic give precise definition term 
functions computable interaction machines turing machines 
question interesting answered affirmative model capable computing functions turing machine church thesis contradicted 
important note wegner give examples case publications 
answer questions view interaction machines different perspectives investigate additional computational power provided input output secondly incompleteness interaction machines resulting relative model computation 
take component oriented look interaction machines 

input output interaction machines defined turing machines input output 
internal behavior expressiveness differ equivalent turing machines 
wegner leaves open question input output mechanism works assumed input output involve data transport computational capabilities 
interaction machine possess greater computational power turing machine 
communication computational capabilities machines utilized 
interaction interpreted subroutine call 

relative computation model view interaction machines lead relative model computation resembling oracle machines 
conversely approaches view oracles terms interactions example oracle machine interacts oracle 
shows close relation interaction machines oracle machines 
wegner employs proof show interaction machines expressive turing machines interaction machines passively interact input sequences generated oracles processes nature richer behavior direct sense input may recursively enumerable specification 
proof relies comparison oracles 
greater computational power arise input output operations external interaction partners 
oracle machines compute solution problem respect oracle 
oracle undecidable oracle machines solve non computable problems 
decidable oracle coincides subroutine call turing machine turing machine complete problem computable 
oracle machine compute function 
template concrete oracle machine instantiated certain problem case oracle machine call oracle simple turing machine 
church thesis holds specific oracle defined 
holds interaction machines important characteristic indeterminacy output due intermediate inputs 
contrast oracle machines oracle specified wegner leaves point open 
wegner interaction machine merely template 
concrete machine result specify interaction partners interaction behaviors 
interaction machines lead relative model computation 
computations machines regarded relative interaction participants 
assume interaction partners machine treat computable problems resulting machine solve computable problems 

interaction machines components interaction essentially new way putting procedures 
partial recursive functions closed respect operation turing machine sequencing interaction simulated subroutine 
due incomplete specification dependency interaction partners general compute function 
interaction machines algorithms computability theory components interactive systems 
systems protocols interaction machines define computation model respect certain interaction behaviors accepting rules 
protocols specify type procedures performed interaction machines 
means independent interaction machine protocol decides procedure algorithm 
wishes compare interaction machines turing machines choose protocol calculate functions 
human beings external processes act interaction partners problems concerning computability arise immediately evident behave partial recursively procedure computable 
known fact system non computable component lose computability 
particular interaction model computability providing composition possesses feature 

computer journal vol 
views interaction machines conclude models set partial recursive interaction machines capable computing functions computable turing machine 
interaction lead enhanced computability functions 
depicts relation problem classes 
please note set tasks definable interaction machines represent partial recursive functions potentially empty 
wegner recognized objections mentioned restricted original claim publications boldly asserts interaction machines defined extending turing 
computational power interaction machines 
machines input actions read statements shown expressive computable functions providing counterexample hypothesis church turing intuitive notion computation corresponds formal computability turing machines year states cautiously turing machines capture intuitive semantics algorithms broader church turing thesis turing machines capture intuitive notion computing invalid 
draw wegner concept computability focuses real computers systems theoretical function oriented view church kleene markov post turing 

synthesis peter wegner raises interesting problem theoretical computer science software development interaction fit computability theory 
question possible answers certainly fascinating computer scientist 
agree wegner interaction contradicts church thesis 
peter wegner draws basis broader understanding computability church computability functions 
interaction machines compute non recursive functions church thesis holds 
characterize wegner ideas better speak computer ability computability 
deals mathematical computations focuses computer applications include important aspects real world systems interaction 
computer able model suits description systems 
wegner claims interaction machines property 
consider wegner light conceded important contribution description modern software systems interactive user interfaces 
aspects certainly covered concept turing machine 
interaction machines allow fair description object oriented modular systems 
methods offer interesting way formally describing object oriented systems 
computer journal vol 
wegner :10.1.1.57.9269
interaction powerful algorithms 
cacm 

algorithm 

ed encyclopaedia mathematics 
kluwer academic publishers dordrecht 

computable function 

ed encyclopaedia mathematics 
kluwer academic publishers dordrecht 
hopcroft ullman 
automata theory languages computation 
addison wesley reading ma 

constructive object 

ed encyclopaedia mathematics 
kluwer academic publishers dordrecht 

church thesis 

ed encyclopaedia mathematics 
kluwer academic publishers dordrecht 


springer berlin 
copeland 
church turing thesis 
online stanford encyclopedia philosophy 
plato stanford edu 
kearns 
thinking machines fundamental confusions 
minds machines 

church turing thesis true 
minds machines 

church turing thesis effective mundane procedures 
minds machines 


minds machines 
fetzer 
thinking computing computers special kinds signs 
minds machines 
odifreddi 
classical recursion theory 
elsevier science publishers amsterdam 
diaz 
structural complexity ii 
springer berlin 
sch ning 
complexity theory interaction 

ed universal turing machine half century survey 
springer berlin 
wegner 
tutorial notes models paradigms interaction 
oopsla www cs brown edu people pw 
wegner 
interactive foundations computing 
unpublished manuscript december www cs brown edu people pw 
meyer 
object oriented software construction nd edn 
prentice hall englewood cliffs nj 
programming contract 
formal definition interaction machines remains 
