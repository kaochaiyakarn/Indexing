understanding trust management systems stephen weeks strategic technologies architectural research laboratory technologies patrick henry santa clara ca usa com presents mathematical framework expressing trust management systems 
framework easier understand existing systems compare design new systems 
framework defines semantics trust management engine fixpoint lattice situations leads efficient implementation 
demonstrate flexibility keynote spki instantiations framework 
systems multiple entities share resources access control mechanism 
problem access control broken subproblems determining request allowed enforcing decision 
trust management systems solve subproblem defining languages expressing authorizations access control policies providing trust management engine determining particular request authorized 
traditional access control mechanisms centralized operate closed world assumption parties known 
trust management systems generalize traditional mechanisms operating distributed systems eliminating closed world assumption 
years number trust management systems developed focusing authentication specialized purposes general purpose authorization logics 
wide range precision specification systems wide variety trust management languages difficult compare systems order intelligently decide apply new situation 
lack formality specifications difficult understand weaknesses especially troubling domain interest security related 
common conceptual framework underlying systems difficult reason tradeoffs design 
design new trust management systems art science 
presents mathematical framework expressing trust management systems 
framework express known systems including keynote spki 
trust management systems concisely helps comparing current systems analyzing design tradeoffs new systems 
framework defines semantics trust management engine fixpoint lattice instantiations directly leads implementation 
case spki shows implementation semantics trust management decision simply efficiently combination certificate path discovery tuple reduction 
concerned cryptographic underpinnings trust management 
assumes appropriate integrity checking signature validation happens trust management engine begins computation 
discuss important issue revocation 
proposal new trust management system lays foundation exploration range new systems 
section defines framework presents instantiation extended example toy trust management system 
sections show express spki keynote logic systems instantiations framework 
section formalizes concepts generally applicable trust management systems 
section concludes presents unanswered questions raises 
appendix reviews mathematical background defines notation 
readers unfamiliar lambda expressions lattices refer appendix necessary 
framework section defines framework expressing trust management systems presents extended example 
idea framework leave open kinds authorizations system requiring satisfy natural mathematical properties 
framework defines kinds assertions entities system gives precise semantics specifying collection assertions means request granted 
cases direct implementation semantics leads viable trust management engine 
elements framework principals authorizations authorization maps abbreviated licenses assertions 
principal atomic entity may authorize requests 
range principals 
principal framework necessary property principals distinguishable 
real implementation cryptographic reasons principal correspond public key 
example section deal principals alice bob carl dave 
authorization expresses permissions granted principal 
authorizations form lattice auth means permits operations auth trust management decision principal system associated single authorization describes permissions granted principal 
upper bound operator defines sensibly combine multiple authorizations principal single authorization 
auth lattice instantiated varying ways express different trust management systems 
example imagine auth specifies alice may read particular file write file 
denote alice may read file denote may write file rw denote may read write file denote may 
auth rw 
order auth lattice define rw rw rw 
note authorization lattice specifies authorizations granted alice particular file principal file 
represent authorizations complicated lattice principal file rw stick simple lattice example section 
function mapping principals authorizations describes authorizations principal trust management decision 
principal auth recall appendix lattice pointwise ordering auth lattice 
example lattice expresses authorization principal alice read write file 
map bob carl rw 
license authorization expressed monotone function authorizations 
license auth intuitively meaning license principals authorizations authorization 
shows licenses example lattice 
license delegates bob shows dependence licenses expresses delegation 
monotonicity requirement means authorizations granted license increase consequence increase principals authorizations 
reader verify licenses monotone 
particular licenses note license monotone 
monotonicity required order give sensible meaning collection assertions trust management engine defined 
assertion expression authorization principal 
assertions framework abstraction digital certificates 
formally assertion consists principal license 
assertion principal license assertion read authorizes 
principal referred issuer 
principal issue assertion licenses 
real implementation assertions typically signed public key issuing principal require signature checking processed trust management engine 
trust management engine take set assertions various principals may delegate find coherent representing authorizations principals 
assertions may reside local machine may principal making request may created various places 
act finding coherent various assertions component distinguishes trust management traditional access control mechanisms 
define semantics set assertions follows document subscript denote semantic function 
assertions assertion assertions lfp license intended meaning alice may write file 
bob alice may bob allows 
bob alice may write bob allows 
bob alice may write bob allows write 
bob carl alice may write bob carl say 
card bob carl dave alice may read bob carl dave say 
bob alice may read bob says may write 
card alice may read principals say 
intuition definition assertions combines assertions issued principal authorization principal delegation account 
detail set assertions principal 
authorization map set authorizations granted 
upper bound combine authorizations single authorization granted 
find authorization map consistent licenses take fixpoint lattice relies fact licenses monotone 
licenses assertions monotone assertions 
assertions input assertions authorizations resulting 
definition assertions fixpoint clear framework handle revocation require non monotone assertions 
shows example computations assertions 
row set assertions left column fixpoint computation middle comment example right column 
order assertions left column irrelevant 
fixpoint computation see appendix explanation shown sequence row column contains authorizations principal 
row contains consisting upper bound assertions applied previous row 
final row fixpoint set assertions 
examples give idea 
example licenses fixpoint computation express concepts path validation chaining tuple reduction communication 
trust management engine decision request authorizing principal set assertions 
authorizing principal reflects policy governing request 
request expressed element auth lattice 
semantics defined engine engine means principal authorizes request assertions engine principal auth assertion bool engine assertions trust engine computes corresponding provided assertions determines request requires authorization granted authorizing principal example lattice alice write file denoted request bob control assertions available trust engine compute engine bob determine bob authorizes alice write 
trust management engine necessarily need compute entire fixpoint defined assertions 
prove request justified engine find assertions 
finding may easier computing fixpoint reasons 
trust engine may able lattice elements compactly represented licenses efficiently computed 
second lfp computation assertion bob carl dave comment bob direct authorization 
bob combined bob rw bob unconstrained delegation 
carl bob bob carl fixpoint 
carl bob bob constrained delegation 
carl bob bob rw constrained delegation 
carl bob rw rw bob chained delegation 
carl bob dave carl bob multiway delegation 
carl rw rw dave bob carl rw bob inter assertion communication 
bob carl carl bob rw 
example fixpoint computations assertions principal auth principal auth license auth assertion principal license assertions assertion assertions lfp engine principal auth assertion bool engine assertions 
framework engine may terminate fixpoint computation early large 
sections keynote spki take advantage fact 
summarizes entire framework 
instantiation framework defines trust management system providing auth lattice language expressing licenses means computing engine 
art designing trust management system lies choosing lattice authorizations subset monotone functions licenses 
controls expressiveness system 
engineering comes choosing representation authorizations language licenses desired monotone functions expressed concisely engine computed efficiently 
rest section devoted toy language expressing licenses example lattice section 
sections show express realistic trust management systems 
toy trust management language mathematics write licenses fine expository purposes order build practical trust management engine define language expressing licenses give way trust management engine compute authorization expressed license 
example language expressions auth rw 
rw glb 
lub 
license expression constant denoting corresponding lattice element principal unspecified format denoting delegation principal greatest lower bound glb upper bound lub sequence expressions 
set expressions generated grammar 
give semantics expressions defining function el inductively structure expressions 
el license el el el el rw rw el el glb el 
el lub el 
observe el produces monotone function 
representation authorization principal constant time clear expression compute el time linear size expression 
compute assertions engine time proportional sum sizes licenses write expressions denoting examples 
bob lub bob glb bob glb bob carl glb lub glb bob carl glb carl dave glb bob dave expression shows language may verbose expressing monotone functions 
worse examples expressed language 
course adding constructs express examples cost additional complexity trust management engine possibly additional time taken computing el 
example require existential quantification operator similar 
simple public key infrastructure spki shows express spki including sdsi local names framework section 
upper part defines lattice spki authorizations representation spki assertions 
lower part gives semantics spki assertions showing map assertions sense section 
read defines supporting infrastructure framework 
spki auth lattice powerset lattice kinds authorizations name action 
name authorization principal authorizes principal act name time similarly action authorization principal authorizes principal perform operation time elements name arbitrary byte strings 
elements sexp expressions denote operations 
leave time unspecified note totally ordered 
meaning name taken relative principal 
full name principal sequence names means principal act behalf full name time extended subjects name assertions name 
name assertion represented tuple means principal authorizes subject act name sexp time auth principal name sexp time principal name subject int delegate bool action time time principal name subject principal subject delegate action action action sexp omitted principal time time subject principal time card name assertion name auth subject auth card assertion 
spki instantiation behalf name time 
subject field directly identify full name specify threshold subject form principal act threshold subject names 
denote principal 
authorization assertion represented tuple means principal authorizes subject perform delegate true operations allowed action time 
specify actions detail abstractly denote sets expressions assume function action gives meaning 
semantics authorization assertions specified auth relies define authorizations granted subject 
definition auth formalizes intuition requiring action include requested operation time period contain request time delegate flag set auth allows requests authorized subject requires requestor able act behalf subject 
place see trust management computation carried 
suppose want know principal authorizes principal perform operation denoted time assertions express request auth 
want compute engine equivalent assertions 
order avoid computing entire fixpoint specialize assertions request 
define restriction authorization follows 
principal name restriction authorization includes current request name authorizations current time 
extend sets assertions licenses produce restricted authorizations follows 
prove assertions assertions 
observe name assertions affect meaning authorization assertions vice versa 
implication facts computing fixpoint lattice compute fixpoint lattice principal principal name lattice principal bool 
fixpoint computes principal pairs authorizes act behalf name time second fixpoint computes principal request authorized assertions fixpoint requires space second requires space 
xavier avila built engine second fixpoint approach described 
experience time trust management computation cryptographic costs signature checking 
related spki standard presents tuple tuple reduction means implementing engine 
tuple reduction weaker fixpoint approach described relies action intersection takes actions attempts compute action action action action 
unfortunately possible action language expressive 
observed possible represent intersection range prefix action 
way fix problem add intersection operator action language 
show find action satisfying weaker condition action action action 
guarantees trust management engine returns true engine converse 
important weakness tuple reduction works ordered lists assertions unordered sets 
find right order client perform certificate path discovery complicated reduction requires space 
fixpoint computation automatically efficiently performs certificate path discovery subsumes reductions necessary trust management decision 
approach specifying spki gives simple prolog program rules correspond tuple reduction 
trust management decision assertion translated fact added logic program 
fixpoint semantics prolog includes authorizations derivable combining facts rules roughly equivalent tuples derivable tuple reduction 
prolog implementation uses appropriate search strategy program run directly implementation trust management engine 
keynote shows express keynote framework section 
read defines supporting infrastructure framework 
keynote authorizations auth form function lattice authorization maps request compliance value 
compliance values value action string string request principal action auth request value licensees conditions principal licensees conditions licensees licensees principal value value omitted conditions conditions request value omitted keynote assertion keynote conditions licensees strings totally ordered intended denote levels authorization 
keep simple example mind imagine value false true false true 
partial order auth derived order value viewed lattice 
request consists set requesting principals called action action represented list pairs arbitrary strings 
action describes request example action delete file operation delete file tmp foo 
keynote assertion means issuing principal authorizes requests specified conditions possibly delegating licensees licensees language similar toy language section 
operators greatest upper bound compliance values value order operation finding th largest set compliance values 
semantics summarized function licensees takes licensees expression map giving compliance value principal gives value expression 
conditions language floating point integer string relational operators inspecting request computing compliance value 
semantics summarized conditions takes conditions expression request computes compliance value 
semantics keynote assertions keynote says license corresponding keynote assertion returns greatest lower bound value order meaning conditions licensees fields 
delegation possible licensees field allowed query find principals authorizations request license field assertion monotone licensees monotone second argument 
keynote trust management engine responsible computing compliance value set assertions 
keynote instantiation request 
suppose principals principal assertions prove action justified compliance value express request partial function 
trust management engine decide engine equivalent assertions equivalent assertions 
trust management engine need compute fixpoint lattice principal value recording principal compliance value request 
logic approaches logic approach trust management trust management engine responsible constructing checking proof desired request valid 
logic defined set formulas formula binary relation read formula proved formulas axioms 
logic contains primitive constructor express authorizations principals principal formula says means principal authorizes formula 
logic contains rules inference rules ensure principal logically consistent 
says says says says assertion represented signed formula form says request represented formula 
trust management system says principal authorizes request assertions says formula auth formula says principal formula shows model approach framework section 
read defines supporting infrastructure framework 
elements auth lattice deductively closed sets formulas ordered 
set formulas deductively closed 
upper bound operation union elements deductively closed fi fi 
request represented element auth 
set logical assertions logic 
semantics assertions logic defined assertions says trust engine says authorizes request assertions engine equal assertions equivalent assertions equivalent says definition trust engine framework coincides logic definition 
depending logic direct fixpoint computation may may feasible 
set consequences finite set formulas finite fixpoint directly computed 
hand logic undecidable trust management computation incomplete proof search require client provide proof assertions 
applications certificate reduction section formalizes notion certificate reduction trust management system provides mechanism combine certificates single certificate summarizes meaning spki tuple reduction 
example assertions aa alice bob ab bob carl create assertion aa alice carl logic assertion logic says says 
logic approach prove increased authorizations granted alice 
certificate reduction system efficient reducing number certificates carried subsequent trust engine decisions 
provide anonymity participants 
example bob longer needs mentioned alice authorizations delegating carl 
careful case sets assertions assertions aa ab assertions aa example shows reason 
carl assertions aa ab bob assertions aa bob obviously removed bob delegation carl reduced bob authorizations 
example shows authorizations granted alice may change 
bob assertions aa ab alice assertions aa alice removed alice delegation bob reduced alice authorizations 
simplify formalization consider certificate reduction certificates 
suppose assertions define reduction possible prove reduced assertion authorizations granted original assertions 
sets assertions assertions assertions earlier examples showed equality hold arbitrary sets assertions 
assertions mention equality hold principals 
formally assertions assertions particular trust management system language writing licenses expressive allow certificate reduction 
may license expressions denoting licenses license expression denoting 
case spki minor exception intersection range prefix actions license language expressive 
principle designers new trust management systems keep mind making license language powerful express monotone functions needed certificate reduction 
proof checking vs proof construction way view implementation engine engine true engine constructed proof assertions 
reasons may sense require client trust engine provide proof trust engine simply check proof valid done 
trust engine smaller faster proof checking easier computing entire fixpoint 
third party modules introduced find proof efficient complex new methods 
part trusted computing base having simpler reliable engine increases security 
model approach framework slightly modified trust engine takes input finite sequence assertions unordered set assertions 
principal auth assertion bool decide 
ai pi li trust engine computes increasing sequence 
mn lattice mi mi pi li mi engine returns true mn 
easy see mi assertions 

computes lower bound fixpoint needed engine 
pointwise ordering assertions assertions 
follows 
engine 

authorizes request engine authorized 
framework explain existing trust management systems help design new ones 
provide precise specification semantics trust management system important building correct interoperable implementations 
fixpoint semantics leads implementations trust management engines 
framework concisely specify trust management systems authorization lattice language licenses 
possible compare expressiveness systems 
easier assess applicability system situation analyze design tradeoffs current new systems 
framework help improve existing languages expressing licenses making regular expressive 
aspects trust management systems fit framework 
example ref trust management engine directly interprets policies credentials finding fixpoint meaning 
impossible express non monotonic systems 
interesting explore generalizations framework encompass systems 
interesting technical question raises right auth lattices choose collections monotone license functions trust management system expressive trust management engine efficiently approximate fixpoint 
answering question useful insights field interpretation program analysis technique fixpoint computation 
jim donahue neal glew stuart haber jim horning umesh maheshwari jeff andrew wright helpful comments early drafts 
xavier avila helping learn spki collaborating spki implementation 
anonymous referees helpful suggestions provided basis section 
notation mathematical background section introduces notation mathematical background 
capitalized names italic font indicate sets example int set integers 
lower case letters typically denote elements sets int 
power set integers denoted int 
upper case letters typically range elements power set int 
cardinality set denoted card 
sets disjoint sum cartesian product set partial functions respectively 
set denotes set finite sequences elements expressions denoting sets operator precedence decreasing order 
element denoted element denoted 
expression 
denotes function 
expression denotes function applied argument returns result expression may refer denotes element example function adds argument 
expression denotes application function argument inner dropped written 
function application associates left associates right 
example int int int 
binary relation subset expression denotes 
relation reflexive transitive anti symmetric partial order set relation reflexive transitive anti symmetric 
partial order upper bound subset upper bound denoted upper bound upper bound greatest lower bound denoted defined analogously 
lattice partial order subset upper bound 
element lattice denoted equal 
set lattice iff ai ai 
lattices lattice iff ai bi ai bi set lattice lattice pointwise ordering iff fi fi 
function partial order partial order monotone set monotone functions written fixpoint partial order fixpoint written lfp fixpoint fixpoint fixpoint unique 
lattice fixpoint 
chain partial order sequence ai ai ai 
partial orders continuous chain ai ai ai 
define 
continuous fixpoint lfp int elements lattice representable computable gives method computing lfp compute sequence converges 
abadi burrows lampson plotkin 
calculus access control distributed systems 
feigenbaum editor advances cryptology crypto th annual international cryptology conference pages aug 
lncs 
appel felten 
proof carrying authentication 
th acm conference computer communications security nov 
balfanz dean spreitzer 
security infrastructure distributed java applications 
proceedings st ieee symposium security privacy may 
blaze feigenbaum ioannidis keromytis 
keynote trust management system version 
rfc sept 
blaze feigenbaum keromytis 
keynote trust management public key infrastructures 
lecture notes computer science 
blaze feigenbaum lacy 
decentralized trust management 
proceedings ieee symposium research security privacy research security privacy oakland ca may 
ieee computer society technical committee security privacy ieee computer society press 
blaze feigenbaum strauss 
policymaker trust management system 
proc 
nd financial crypto conference pages 
springer verlag 
lncs 

chu feigenbaum lamacchia resnick strauss 
referee trust management web applications 
computer networks isdn systems sept 
clarke 
ellison rivest 
chain discovery spki sdsi 
available theory lcs mit edu rivest nov 
cousot cousot 
interpretation unified lattice model static analysis programs construction approximation fixpoints 
acm symposium principles programming languages pages jan 


certificate discovery spki sdsi certificates 
master thesis massachusetts institute technology may 
ellison 
spki requirements 
rfc sept 
ellison lampson rivest thomas 
spki certificate theory 
rfc sept 
ellison lampson rivest thomas 
simple public key certificate july 
available www com cme spki txt 
howell kotz 
formal semantics spki 
technical report department computer science dartmouth college hanover nh mar 
li 
local names spki sdsi 
proceedings th ieee computer security foundations workshop july 
li grosof feigenbaum 
logic knowledge representation authorization delegation extended 
proceedings th ieee computer security foundations workshop pages 
ieee computer society press 
mass herzberg 
access control meets public key infrastructure assigning roles strangers 
proceedings st ieee symposium security privacy may 
available www hrl il ibm com default asp 
rivest lampson 
sdsi simple distributed security infrastructure oct 
available theory lcs mit edu cis sdsi html 
union 
itu recommendation information technology open systems interconnection directory authentication framework aug 
wobber abadi burrows lampson 
authentication taos operating system 
acm transactions computer systems feb 
zimmerman 
official pgp user guide 
mit press cambridge 
