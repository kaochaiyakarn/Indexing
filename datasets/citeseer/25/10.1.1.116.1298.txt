information computation semantics multiple inheritance luca cardelli bell laboratories murray hill nj 
major ways structuring data programming languages 
common example pascal said derive standard branches mathematics 
data organized cartesian products record types disjoint sums unions variant types function spaces functions procedures 
second method said derive biology taxonomy 
data organized hierarchy classes subclasses data level hierarchy inherits attributes data higher hierarchy 
top level hierarchy usually called class objects datum object datum inherits basic properties objects ability tell objects 
functions procedures considered local actions objects opposed global operations acting objects 
different ways structuring data generated distinct classes programming languages induced different programming styles 
programming taxonomically organized data called object oriented programming advocated effective way structuring programming environments data bases large systems general 
notions inheritance object oriented programming appeared simula dahl 
simula objects grouped classes classes organized subclass hierarchy 
objects similar records functions components elements class appear elements respective superclasses expected 
subclasses inherit attributes superclasses 
simula issues somewhat complicated objects coroutines communication objects implemented message passing processes 
smalltalk goldberg adopts exploits idea inheritance changes 
stressing message passing paradigm smalltalk object usually separate process 
message passing realized function calls association message address dec src lytton ave palo alto ca 
names functions called methods straightforward 
respect simula smalltalk abandons static scoping gain flexibility interactive strong typing allowing implement system introspection introduce notion meta classes 
inheritance single multiple 
case single inheritance simula smalltalk subclass hierarchy form tree class unique superclass 
class considered subclass incompatible superclasses arbitrary decision determine superclass 
problem leads naturally idea multiple inheritance 
multiple inheritance occurs object belong incomparable superclasses subclass relation longer constrained form tree form dag 
multiple inheritance elegant simple inheritance describing class hierarchies difficult implement 
far considered context type free dynamically scoped languages implemented lisp smalltalk extensions borning bobrow steels weinreb part knowledge representation languages attardi 
exceptions galileo albano obj futatsugi multiple inheritance typechecked 
definition language object oriented controversial 
examination differences simula smalltalk languages suggest inheritance notion critically associated object oriented programming 
coroutines message passing static dynamic scoping typechecking single multiple superclasses fairly independent features may may languages commonly considered object oriented 
theory object oriented programming focus meaning inheritance 
aim clean semantics multiple inheritance show context strongly typed statically scoped languages sound typechecking algorithm exists 
multiple inheritance interpreted broad sense limited objects extended natural way union types higher order functional types 
constitutes semantic basis unification functional object oriented programming 
clean semantics advantage making clear issues fundamental implementation accidents optimizations 
implementation multiple inheritance suggested semantics na preclude sophisticated implementation techniques 
emphasized advanced implementation techniques absolutely essential obtain usable systems inheritance deutsch 
part informal presents basic notations intuitions means examples 
second part formal introduces language semantics system typechecking algorithm 
algorithm proved sound respect inference system inference system proved sound respect semantics milner 

objects records ways thinking objects 
pure smalltalk view objects recall physical entities boxes cars 
physical entities unfortunately useful semantic models objects far complicated describe formally 
simpler interpretations objects emerge implementations objectoriented languages 
interpretation derives simula objects essentially records possibly functional components 
message passing achieved simple field selection functional record components inheritance number type fields possessed record 
second interpretation derives lisp 
object function receives message string atom dispatches message select appropriate method 
message passing achieved function application inheritance way messages dispatched 
sense interpretations equivalent records represented functions labels messages values 
say objects functions misleading qualify objects functions messages 
safely assert objects records labels essential part records 
want regard objects records typechecking purposes 
character string message result arbitrary computation record selection usually requires selection label known compile time 
case possible statically determine set messages supported object compile time type error reported attempt send unsupported messages 
property true simula lost succeeding languages 
shall show objects records paradigm account basic features objects provided surrounding language rich 
features consider multiple inheritance message passing private instance variables concept self 
duality records functions remains language objects records semantics interprets records functions 

records record finite association values labels example true abc record fields having values integer boolean true string abc respectively 
labels belong separate domain labels identifiers strings computed result expressions 
records unordered contain label twice 
basic operation records field selection denoted usual dot notation true abc expression types write indicate expression type 
records record types labeled sets types distinct labels example true int bool general write informal typing rule records rule en 
en 
series informal rules meant capture initial intuitions typing 
supposed form complete set independent 
subtype relation record types corresponds subclass relation simula smalltalk 
example may define types type definitions prefixed keyword type type type object age int type vehicle age int speed int type machine age int fuel string type car age int speed int fuel string intuitively vehicle object machine object car vehicle machine object 
say car subtype machine vehicle machine subtype object general record type subtype written record type fields possibly common fields relation 
basic types int bool subtypes rule basic type 


consider particular car value definitions prefixed keyword value value mycar age speed fuel gasoline course mycar car mycar type car want assert mycar object 
obtain say value type types subtype 
leads third informal type rule rule define function value age object int age meaningfully compute age mycar rule mycar type required age 
mycar types car vehicle machine object empty record type ones 
meaningful apply function argument 
determined rules rule meaningful rule meaningful rule just consequence rule rule 
rule deduce certainly meaningful compute 
conventional subclass relation usually defined objects classes 
subtype relation extends naturally functional types 
consider function serial number int car argue serial number returns vehicles cars vehicles 
general functions vehicle valued functions domain type say car appropriate domain functions car subtype vehicle car vehicle car vehicle consider function speed vehicle int cars vehicles function compute speed car 
speed function car int 
general function vehicles function cars say vehicle int subtype car int vehicle car car vehicle interesting happening note subtype relation inverted left hand side arrow 
happens particular meaning giving operator explained formally sections 
semantically universal value domain computable values 
function function written conventional continuous function space 
indicate function element returns element asserted behavior outside 
function domain codomain consider function smaller domain bigger codomain 
example function vehicle vehicle context age mycar function car object application mycar sense car vehicle mycar vehicle sense compute age vehicle object 
general rule subtyping functional types expressed follows rule said subtype relation extends higher types 
example definition function mycar attribute takes integer valued function cars applies car 
value mycar attribute car int int mycar apply functions type subtype car int age object int 

car subtype object object int subtype car int rule mycar attribute car int int age object int sense rule 
mycar attribute age mycar attribute speed proceeded assigning certain types certain values 
subtype relation strong intuitive flavor inclusion types considered sets objects want justify type assignments semantic grounds 
semantically regard type vehicle set records field age field speed having appropriate types cars belong set vehicles fields vehicles 
obtain inclusion intuitively expect say type vehicle set records fields may fields 
sense car vehicle set cars included set vehicles expect 
care needed define sets done formally sections 
conclude section pragmatic consideration record notation 
record types large number fields need way quickly defining subtype record type having list fields record type 
sets definitions equivalent type object age int type vehicle age int speed int type machine age int fuel string type car age int speed int fuel string type object age int type vehicle object speed int type machine object fuel string type car vehicle machine type object age int type car object speed int fuel string type vehicle car ignoring fuel type machine car ignoring speed operator forms union fields record types record types labels common vehicle machine corresponding types match 
point specify exactly match means example matching equivalent 
full generality corresponds meet operation type expressions explained section 
ignoring operator simply eliminates component record type 
ignoring undefined types record types 

variants basic non functional data type constructions denotational semantics cartesian products disjoint sums 
seen inheritance expressed subtype relation record types extends higher types 
record types just labeled cartesian products analogy ask similar notion deriving labeled disjoint sums 
labeled disjoint sum called variant 
variant type looks record type unordered set label type pairs enclosed brackets type int bool int bool element variant type labeled value label labels variant type value type matching type associated label 
element int bool integer value labeled boolean value labeled value int int bool value bool true int bool basic operations variants tests variant object particular label extracts contents variant object having particular label int true int false int int value variant type subtype variant type written labels correspondingly matching types 
int bool subtype int bool string 
type associated label unit trivial type defined element constant unity omit type altogether variant type fields unit type called enumeration type 
examples deal enumeration types 
type precious metal gold silver gold unit silver unit type metal gold silver steel value enumeration type gold unity similarly abbreviated omitting unity part gold 
function returning precious metal function returning metal precious metal metal precious metal metal function working metals precious metals metal precious metal precious metal metal evident rule holds unchanged variant types 
justifies symbol record variant subtyping 
semantically subtype relation variants mapped set inclusion just case records metal set defined elements gold silver steel precious metal set defined elements gold silver 
ways deriving variant types previously defined variant types 
defined metal precious metal type precious metal gold silver type metal precious metal steel type metal gold silver steel type precious metal metal dropping steel operator union cases variant types dropping operator removes case variant type 
precise definition operators contained section 

inheritance idioms framework described far recognize features called multiple inheritance objects car inherits attributes vehicle machine 
aspects unusual example inheritance relation depends structure objects need declared explicitly 
section compares approach approaches inheritance shows simulate number common inheritance techniques 
trying explain existing inheritance schemes smalltalk detail trying new perspective issues 
differences inheritance schemes result net gains 
example aware languages typechecking multiple inheritance higher order functions exception galileo albano amber cardelli developed conjunction 
typechecking provides compile time protection obvious bugs applying speed function machine vehicle obvious mistakes 
complex type hierarchies built difficult remember objects support messages 
subtype relation holds types similar relation objects 
model directly subobject relation example omega attardi define class gasoline cars cars fuel equal gasoline 
simple cases achieve effect turning certain sets values variant types 
example having fuel field machine string redefine type coal gasoline electricity type machine age int fuel type car age int speed int fuel type gasoline car age int speed int fuel gasoline type combustion car age int speed int fuel gasoline coal obtain gasoline car combustion car car 
function combustion cars example accept gasoline car parameter give compile time type error applied electrical cars 
case function contained record field refer components record 
smalltalk done referring record object self selecting desired components 
simula similar concept called 
self referential capability obtained special case rec operator introduce 
rec operator define recursive functions data 
example recursive factorial function written rec fact int int 
int 
fact expression declaration 
body rec restricted constructor vague term indicating implementation computation temporarily suspended avoiding looping situations morris 
language considering constructor constant record variant function rec expression obeying restriction 
examples circular data definitions extremely common object oriented programming 
example functional component record refers components 
functional component computes distance active point point 
type point real real type active point point point real value active point px real py real active point rec self active point 
px py point 
sqrt self self objects private variables useful maintain update local state object preventing arbitrary external interference 
counter object starts fixed number incremented step time 
cell updatable cell initial contents cell updated contents extracted get side effects treated formal semantics 
abbreviation unit occur introduces new variable initialized local scope value returned 
type counter increment unit unit fetch unit int value counter int counter count cell increment 
count get count fetch 
get count private variables obtained full generality known static scoping technique 
presence side effects useful cascade operations objects 
example want define different kind counter way abbreviation unity counter increment increment fetch case local record operation able return record 
requires recursive objects recursive types type counter rec counter 
increment unit counter fetch unit int value counter int counter count cell rec self counter 
increment 
count get count self fetch 
get count sequencing operations 
recursive types treated formal semantics believe dealt complications distract major topic 
smalltalk terminology subclass automatically inherits methods superclasses 
subclass redefine inherited methods 
case objects created members particular class subclass share methods 
example class called class defined methods function creates objects class class forming records components 
type class value value value class define subclass class called subclass extra method 
function assembles objects subclass component superclass explicitly inheriting newly defined component modifying inherited method new component local subclass 
type subclass class value value value subclass contrarily simula smalltalk prevents having totally different methods different objects class long methods prescribed type 
simula smalltalk allow objects access methods superclasses 
simulated general direct way framework partially presence multiple superclasses 

typechecking anomalies style inheritance typechecking unexpected aspects 
lack parametric polymorphism side effects 
consider identity function records having integer component type int value id possible apply id subtype type information lost process result type example expression typecheck id true serious consequences practice forced adopt polymorphic style previous example necessary write identity functions different types 
example shows inheritance polymorphism achieve effect parametric polymorphism quite type rec list 
nil unit cons rest list type intlist rec list 
nil unit cons int rest list type rec list 
nil unit cons int second int rest list value rest cons rest value intlist int cons value int cons second value rec length int nil length rest subtype intlist subtype 
rest operator lists define polymorphic length function 
possible define polymorphic operator 
function works intlist works 
solution problem proposed cardelli multiple inheritance parametric polymorphism merged 
inheritance typechecking restricted preserve soundness presence sideeffects 
parametric polymorphism restricted order deal side effects problem different nature 
consider example due antonio albano assume possible update record fields operator different update mechanism previous section value unit value expression cause run time error component changed prevent sufficient distinguish syntactically updatable record fields require type equivalence type inclusion checking inclusion updatable fields 
discussion informal side effects dealt rest 

expressions formal treatment multiple inheritance 
define simple applicative language supporting inheritance 
denotational semantics domain values certain subsets regarded types inheritance corresponds directly set inclusion types 
type inference system typechecking algorithm 
soundness algorithm proved showing algorithm consistent inference system inference system turn consistent semantics 
language variant typed lambda calculus type inclusion recursion data domain including records variants 
notation records similarly record variant types 
en ai ei 
en 
ai ei syntax expressions type expressions expressions identifiers constants conditionals ai ei records variants functions rec recursive data type specs type expressions type constants ai record types ai variant types function types ai aj take unit bool int syntactic restriction body rec 
constant record variant lambda expression rec expression obeying restriction 
labels identifiers syntax distinguishable syntactic context 
type constants unit domain defined element bool int 
constants unity type unit booleans true false numbers 
operations variants single case construct 
direct illustrate semantic handling exceptions elegant construct avoids dealing exceptions 
standard abbreviations appear 
rec rec 
record variant type expressions unordered permutation identify ai ai 
semantic domain semantics expressions recursively defined domain values 
domain operators disjoint sum cartesian product continuous function space 

flat domain character strings called labels bi flat domains basic values 
take unity true false 
bij th element basic domain bi domain contains single element wrong value 
value model run time type errors trying apply integer function want compiler trap execution 
model run time exceptions trying extract head empty list context generated operator 
name wrong denote member simply member 
runtime exceptions modeled extra summand simplicity shall undefined element abbreviated 
domain records associations values labels 
domain variants pairs label value domain continuous functions give semantics lambda expressions 

semantics expressions semantic function exp env exp syntactic expressions grammar env id environments identifiers 
semantics basic values exp obvious definition omitted 
conventions define bij bij wrong 
en en wrong wrong fst wrong wrong wrong wrong rec comments equations summand injection appropriate summand confused notation local variables 
summand function yielding true false 
summand function yielding 
syntax function cond mapping equality yields argument fst extracts element pair snd extracts second 
fixpoint operator type defines call value semantics allows circular structures built 
intuitively typed program return wrong value run time 
example consider occurrence wrong semantics records 
typechecker sure record selection operate records having appropriate field instance wrong returned 
similar reasoning applies instances wrong semantics wrong run time type error detected compile time 
run time exceptions detected represented instance semantics equation having defined satisfies intuitions run time errors sections interpreting semantically typed mean wrong give algorithm statically checks typing 

semantics type expressions semantics types weak ideal model macqueen set nonempty left closed subset closed upper bounds increasing sequences contain wrong 
lattice domains ordering set inclusion 
closed intersections finite unions usual domain operations 
typeexp bi ai ai ai ai theorem properties 
ideal wrong wrong value deliberately left type domains value type value run time type error 
way saying wrong type 

type inclusion subtyping relation defined syntactically structure type expressions 
definition formalizes initial discussion subtyping records variants functions 
ai aj ai iff ai ai aj iff iff type expressions relation proposition partial order 
possible extend type expressions constants 
defines lattice structure type expressions sublattice 
mathematically appealing chosen view intended application 
example expression true produce type error conflict int bool branches conditional 
full lattice type expression conceivable return type expression carry typechecking 
bad reasons 
objects type framework 
second type errors difficult localize presence manifest eventual occurrence resulting type 
said ordering domains model set inclusion 
allows give direct semantics subtyping simple set inclusion domains 
theorem semantic subtyping proof induction structure 
shall need direction sequel 

type inference rules section formally define notion syntactically typed expression 
expression typed type deduced set type rules forming inference system 
type deduced expression said contain type errors 
general types deduced expression 
provided inference system consistent types sense compatible 
typechecking algorithm choose admissible types type expression respect algorithm type systems may best general principal type 
inference systems may shown consistent respect semantics language shall see section 
inference system language 
designed contains exactly type rule syntactic construct satisfies intuitive subtyping property expressed syntactic subtyping theorem satisfies semantic soundness theorem relating semantics language 
subtyping predicate critical type rules 
noted subtyping affect fundamental calculus typing rules abs comb 
indicates style subtyping merges naturally functional types 
var bas bij cond bool record 
en 
en ai dot 
variant 

bool 
abs 
comb rec rec spec comments rules called set assumptions finite mapping variables types type associated set assumptions extended association maps 
non trivial inclusions basic types int real bas changed bij 
record derived record type fewer fields corresponding record object 
variant derived variant type number fields long includes field corresponding variant object 
rule assumes set basic types contain supertype bool refined rule needed 
similarly cond assumes subtypes bool 
basic syntactic property inference system expressed syntactic subtyping theorem expression type subtype expression type 
lemma required prove abs case theorem 
lemma theorem proved induction structure derivations 
lemma syntactic subtyping theorem syntactic subtyping 
theorem states soundness type system respect semantics possible deduce type value denoted belongs domain denoted 
set assumptions agrees environment domain implies 
theorem semantic soundness agrees proof induction structure derivation semantic subtyping properties theorems 
words syntactically typed semantically typed agrees implies wrong 

join meet types examples type operators going need definition typechecking algorithm 
operators part syntax type expressions ignoring dropping 
operators restricted kinds type expressions 
applied arbitrary type expressions undefined eliminated normalization process 
type expression containing operators process expression checking operators context case normalize away obtaining normal type expression 
operator interpreted partial meet operation types written interpreted partial join written 
joins meets taken partial order determined exist 
definition operators immediately defines normalization process eliminates ai bj ai ck ai defined bj ck ai bj ai ck ai bj ck defined bj ck undefined ai bj ai ck ai bj ck defined bj ck ai bj ai ck ai defined bj ck undefined ai ignoring aj ak ignoring undefined ai dropping aj ak dropping undefined note may undefined upper bound respect operands similarly 
proposition properties defined smallest 
defined largest 
set ideals denoted ordinary type expressions operators 
proposition largest ideal contained defined ignoring defined smallest ideal containing defined dropping defined 

typechecking partial typechecking function exp typeexp exp typeexp respectively expressions type expressions grammar id typeexp type environments identifiers 
description intended scheme program returns type expression denoting type term fails case type errors 
fail word global jump type error detected program stops 
similarly typechecking fails operations undefined 
assert imply typechecking fail 
bij bool fail 
en 
en 
fail 
bool fail 
fail fail rec fail fail typechecking algorithm correct respect type inference system algorithm succeeds returns type expression possible prove type 
type environment agrees set assumptions domain 
theorem syntactic soundness agrees proof theorem induction structure properties 
combining syntactic soundness semantic soundness properties theorems immediately obtain corollary typechecking prevents type errors wrong 
successfully typechecked produce run time type errors 
typechecking algorithm intentionally restrictive type inference system possible deduce bool true practice want type error reasons rule type 
restriction enforced definitions similarly infer type typechecker fails justified fail run time 
reasons desirable syntactic completeness theorem form agrees defined 
strive syntactic completeness partial typechecking algorithm modified algorithm computes true replacing primitives case construct 

originated attempt justify multiple inheritance constructs galileo data base language albano provide sound typechecking algorithm language 
amber language cardelli devised experiment things inheritance typechecking 
believe adequately solves basic problems practical theoretical issues may require 
parametric polymorphism treated 
intention study multiple inheritance problems cleanest possible framework interaction features 
side effects circular types integrated full formal treatment 
confusion may arise fact languages smalltalk referred polymorphic languages 
correct polymorphism mean object function types 
appears subtly different kinds polymorphism inheritance polymorphism type inclusion parametric polymorphism type variables type quantifiers 
kinds polymorphism incompatible 
seen inheritance explained semantic domains normally parametric polymorphism 
technical explanation polymorphism cases domain intersection 
merging kinds polymorphism introduce new semantic problems 
interactions inheritance parametric polymorphism typechecking addressed cardelli 
competing totally independent styles parametric polymorphism noticeably milner reynolds mccracken macqueen 
inheritance orthogonal better study independently initially 
final goal achieve full integration parametric polymorphism multiple inheritance merging functional programming object oriented programming semantic typing levels problem currently receiving attention 

related mention reynolds oles expose similar semantic ideas different formal framework ait kaci exposing similar ideas prolog related framework mitchell time presenting different related ideas formal framework futatsugi obj system implements order multiple inheritance typechecker subsorts subtypes 
david macqueen discussions john reynolds referees detailed suggestions corrections antonio albano orsini motivating carry 
ait kaci ait kaci outline calculus type subsumptions technical report ms cis dept computer information science moore school electrical engineering university pennsylvania august 
albano albano cardelli orsini galileo strongly typed interactive conceptual language ieee transactions database systems june 
attardi attardi simi semantics inheritance attributions description system omega memo august 
bobrow bobrow stefik loops manual memo kb vlsi xerox parc 
cardelli cardelli wegner understanding types data abstraction polymorphism computing surveys vol pp december 
cardelli cardelli amber combinators functional programming languages proc 
th summer school le val france may 
lecture notes computer science springer verlag 
dahl dahl nygaard simula algol simulation language comm 
acm vol pp 

deutsch deutsch efficient implementation smalltalk proc 
popl 
futatsugi futatsugi goguen jouannaud meseguer principles obj proc 
popl 
goldberg goldberg robson smalltalk 
language implementation addison wesley 
programming environment ifip mason ed north holland paris 
mccracken mccracken typechecking programs implicit type structure semantics data types lecture notes computer science springer verlag 
macqueen macqueen plotkin sethi ideal model recursive polymorphic types information control pp 

milner milner theory type polymorphism programming journal computer system science pp 

oles oles type algebras functor categories block structure algebraic semantics nivat reynolds ed cambridge university press 
reynolds reynolds theory type structure colloquium sur la programmation pp 
springer verlag lecture notes computer science 
reynolds reynolds category theory design implicit type conversions generic operators semantics directed compiler generation lecture notes computer science pp 
springer verlag 
morris morris schwarz computing cyclic list structures conference record lisp conference pp 
steels steels orbit applicative view object oriented programming integrated interactive computing systems pp 
degano sandewall editors north holland 
weinreb weinreb moon objects message passing flavors chapter lisp machine manual fourth edition symbolics 

