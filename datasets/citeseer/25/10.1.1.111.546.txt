swissqm generation data processing sensor networks system overview rene mueller gustavo alonso donald kossmann sensor networks important part landscape 
existing systems limited fundamental ways lack data independence poor integration higher layers data processing chain 
swissqm generation architecture sensor networks built address limitations 
swissqm combines virtual machine sensors powerful gateway access point system 
flexibility swissqm opens doors sensor networks richer functionality data model independence optimised performance smooth integration rest architecture 
swissqm supports adaptability push strategies multiple users applications high query turn extensibility user defined functionality optimised resources 
describes swissqm features provides examples 

moore law industry seen computers getting smaller cheaper powerful decades 
coming years computers increasingly enhanced powerful sensing devices 
computing devices extended sensors combined sensor networks tackle larger data acquisition tasks monitor behaviour large population animals monitor climate large territory 
commercial applications sensor networks include supply chain management support elderly people security facilities manufacturing sites homes 
supported part national competence center research mobile information communication systems mics center supported swiss national science foundation number 
publication licensed creative commons attribution license see org licenses details 
rd biennial conference innovative data systems research cidr january asilomar california usa 
department computer science eth zurich zurich switzerland alonso kossmann inf ethz ch building deploying sensor networks remain elusive difficult tasks 
existing deployments application specific hard coded software 
typically little support data independence high level abstractions multiple users integration higher layers data processing chain 
systems rigid sensors programmed sensor network 
research projects addressing limitations 
relevant reported projects uc berkeley tinyos tinydb 
tinyos operating system small sensing devices event processing derivative called nesc 
designed operate sensing devices limited storage processing capabilities battery life times 
tinydb built top tinyos provides declarative query interface sql dialect sensor network capabilities network data processing aggregation 
project proposes staging architecture acquire clean aggregate data acquired applications tinydb 
indicate higher level abstractions powerful platforms sensor network level needed 
project eth zurich established research effort aims developing comprehensive platform supporting entire data cycle sensor networks data acquisition data processing storage including deployment optimisation routing embedding user devices 
describes key components swissqm scalable sensor network query machine 
short swissqm intended generation architecture data acquisition data processing sensor networks 
main objectives provide richer flexible functionality sensor network level powerful adaptable interface outside world data independence query language independence optimised performance wider range settings current systems smooth integration rest data processing architecture 
swissqm specialised virtual machine runs optimised byte code queries 
result swissqm assumptions query language sql xquery deployment strategy underlying sensor network single network multiple networks easily provide highly efficient multi user support 
compared existing systems swissqm provides generic high level declarative programming model support sql xquery imposes data model relational xml 
swissqm turing complete supports user defined functions window queries complex event generation sensor level extensible instruction set sophisticated optimisations sensor provisioning overlapping distinct sensor networks 
features possible implement swissqm important optimisations possible cumbersome implement existing systems 

swissqm design considerations swissqm designed requirements mind separation sensors external interface swissqm implement particular query language 
programming model independent query language 
dynamically adaptable 
result sensor nodes contain application specific functionality ability parse sql join operators 
functionality treated dynamically deployable extension 
dynamic multi user multi programming environment swissqm impose restrictions query submission change rate number queries run concurrently inherent limitations underlying hardware 
optimised sensors processing sensor nodes related capturing aggregating forwarding data 
pushed 
increases memory available data leaves room queries sophisticated processing event generation user defined functions 
extensibility swissqm programmable include ability implement user defined functions ability push functionality higher data processing layers 
extensibility refers swissqm possible dynamically extend modify behaviour swissqm needed 
swissqm sensor network swissqm sensor network built gateway node sensor nodes 
gateway node assumed sufficient computing power energy memory restrictions 
gateway acts interface system 
sensor nodes assumed resource constrained devices running batteries 
sensors perform actual data acquisition 
concentrate query machine qm virtual machine runs sensor nodes explain functionality gateway needed see example type processing occurring gateway 
sensor nodes organised tree routes data root gateway node located fig 

strategy tinydb tree facilitates network aggregation reduces amount routing data node keep 
details creation maintenance routing tree scope 
assume node wireless sensor network queries root node gateway sensor node wire link sensors nodes organised tree topology root node connected gateway link parent closer gateway 
assume single tree swissqm built support multiple independent trees individual node addressing 
sensor network gateway requirements led radical separation functionality sensor nodes gateway typically encountered sensor networks 
sensor networks require gateway swissqm designed exploit gateway possible 
dictated optimisation strategies minimisation data transfer done gateway done sensor nodes 
gateway provides external interfaces query optimisation compilation facilities 
sensor nodes finds code strictly needed capture aggregate propagate data 
additional code user defined functions located sensor nodes explicitly pushed gateway 
resulting architecture considerable advantages 
swissqm support wide variety interfaces dictated requirement sql xquery web services interfaces change time requiring changes code sensor nodes 
sophisticated optimisation strategies implemented gateway affecting performance sensor nodes 
gateway natural place implement data cleaning pipelines described 
gateway works follows gateway processes user queries replies data streams 
user queries expressed various languages 
gateway processes combines user queries smaller optimised subset virtual queries 
virtual queries expressed internal format suitable multi query optimisation query merging subexpression matching window processing optimisation optimised virtual queries transformed network queries expressed byte code understood sensor nodes 
tier mechanism sensor network permits optimisation requirement user queries efficient sensor network 
virtual swissqm aggregate group expressions synopsis installed programs executing program send transmission buffer bytecode interpreter sensors radio send receive operand stack query machine components query step possible multi query optimisation queries submitted different interfaces sql xquery 
query machine requirements motivated implement sensor nodes stack virtual machine query machine qm name emphasises dual role query engine virtual machine 
instruction set qm small subset java virtual machine extended specialised instructions reduce size programs 
qm uses uniform type simplify implementation reduce footprint qm 
data types represented bit signed integer types booleans represented style semantics 
floating point types supported keep size instruction set small possible necessary conversion easily done gateway way operations qm integers see requirement 
qm includes components shown fig 
operand stack stores bit elements operands results instructions 
transmission buffer temporarily holds data sent received processed 
accessed index bit data elements 
synopsis data structure keep state execution aggregation queries 
set sensors 
set qm programs expressed qm byte code produced gateway user submitted queries 
current version qm lines nesc top tinyos 
runs berkeley mica motes atmel atmega micro controller kb flash memory program storage kb sram dynamic program data stack heap 
core qm byte code interpreter associated logic takes kb flash memory 
qm bytecode table shows basic set instructions qm 
length qm instruction bytes depending zero byte byte immediate field 
top group table includes stack manipulation operations dup swap arithmetic iadd con trol instructions 
complete instruction set swissqm shown table appendix 
mnemonics semantics identical counterparts defined java virtual machine specification 
remaining groups query specific extensions 
load store group includes instructions accessing transmission buffer synopsis 
sensing instructions access physical sensors system parameters push obtained value stack 
transmission instructions provided send tb sends content transmission buffer send sy sends current aggregation state stored synopsis 
aggregation instruction merge described section 
requirement instruction set modular 
need dictates device capabilities evolve additional instruction classes added removed sophisticated aggregation floating point support 
additionally swissqm ported different platform instructions sensing instruction class adapted order reflect physical sensors humidity barometric pressure acceleration available particular platform 
table instruction set query machine instructions stack operations arithmetic operations control instructions load store instructions sensing instructions transmission instructions aggregation instructions total mentioned core qm requires kb flash memory 
instructions require kb 
full qm complete instruction set uses kb flash kb sram including space dynamic program data 
comparison tinydb uses kb flash kb sram memory 
sensor networks program execution dominated time send data 
send tb instruction requires ms single result message bytes contention occurs network mac layer 
execution sampling instruction requires 
execution qm instructions takes approximately cpu cycles 
qm programs purposes consider network query equivalent qm program 
translation process virtual query qm program known compiler technique 
translation phase query optimised 
optimiser constant parts expressions identifies common subexpressions selection clause list group list selection predicate 
identifying common subexpressions reordering computation expressions final program size reduced considerably complex queries 
qm programs consist code sections executed different times 
init section executed program start 
initialise state synopsis program starts producing data tuple 
delivery section executed sampling period 
sensors sampled data gathered merged local synopsis 
reception section executed arrival message child 
extracts data child message merges local synopsis 
example consider xquery expression sensor nodes send id gateway temperature exceeds temperature sensor sampled periodically seconds 
xt sample sensors node temp gt return nodeid query xt sample user defined function scope takes uri sensors sampling period input returns sequence elements 
xml schema defines sensor network sequence node elements nodeid temp element 
xquery gt denotes greater relation 
delivery reception sections corresponding qm program follows section delivery get temp read temperature sensor skip temp get nodeid read node id istore store pos 
send tb send transmission buffer section reception send tb forward tuple child temperature sensor sampled reading pushed stack get temp line 
line constant pushed stack 
sensor reading constant compared line 
temperature execution resumed label marks section 
node identification number deploy time parameter read get nodeid line stored position zero transmission buffer istore line 
instruction delivery section send tb line sends transmission buffer id parent node 
node receives message children message placed transmission buffer reception section executed 
example data transmission buffer immediately forwarded send tb line 
default behaviour reception section data child simply forwarded 
general reception section indicates merge data child local synopsis 
taken program sections example take bytes program memory 
network aggregation approach network aggregation follows tag idea tinydb 
tree topology forward data aggregate path gateway 
general aggregation applied grouping 
instance consider query select building floor avg temp max light sensors group building floor sample period aggregate expressions avg temp max light computed building floor pair 
query grouping expressions aggregate expressions 
avg aggregation state pair consisting sum number summands max aggregation state single value 
aggregation implemented merge instruction 
merge instruction form merge 
parameter number grouping expressions second parameter number aggregation expressions follow 
constants specify aggregation operations 
aggregation type constants pushed stack calling merge operation 
aggregation operations currently supported count min max sum avg variance 
required stack layout merge instruction definition aggregation operations shown table appendix 
example code excerpt merging follows max avg merge example merging step complex query section fig 

synopsis table dynamically built program 
contains row group example row building floor pair 
layout local synopsis transmission buffer implicit established code delivery section data captured sensors written transmission buffer merging occurs delivery reception section 
general data children merged arrives local data added sampling period 
merge instruction performs nested loop join table local synopsis table transmission buffer overwrites local synopsis 
default example synopsis cleared automatically sampling period 
temporal aggregation sampling periods window queries clearing synopsis overridden 
explicit clearing synopsis implemented clear sy instruction 
multiprogramming provide multi query support layers merging different user queries virtual query see second multi programming qm 
multi programming qm done sequential execution programs 
execution duration program typically short compared sampling interval 
program execution including data capturing merging data received child written delivery section child match format established delivery section parent 
order microseconds 
data transmission order milliseconds 
sampling periods order seconds larger 
optimisation possible run number programs shortest sampling period second 
instance example shown section execution reception section takes ms mica sensor nodes sampling period seconds 
cpu point view room queries 
course trade number programs executed memory available program size synopsis storing aggregation state size stack transmission buffer 
combined multi query optimisations possible support relatively large number user queries run user queries 
program propagation limitations ad hoc sensor networks restricted message size 
large messages increase collisions probability transmission errors unreliable medium 
different radio platforms provide different message sizes 
example zigbee mac layer ieee telos nodes defines maximum message size bytes 
mica nodes proprietary radio transceiver gross message size bytes 
bytes mac broadcast routing layers tinyos application message size bytes 
larger message sizes convenient data processing query propagation 
instance tinydb uses tinyos packets bytes smaller packets bytes 
increase message length reasons large data losses observed tinydb deployments 
intend explore issue detail 
swissqm opted smaller bytes message size 
reasons strive compact byte code complex instruction set merge operation 
programs long transmitted gateway messages called fragment messages 
sophisticated protocol guarantee reliable program distribution scope highly dependent type deployment wants achieve default swissqm tinydb single network paradigm nodes exactly limiting simplifies dynamics reliable program distribution adding removing nodes 
comparison tinydb provides query processing engine run sensor nodes 
query distributed gateway network 
tinydb distribute raw query string directly query split gateway fields expressions selection clause predicate grouping list 
sensor attribute accessed expression query query message sent 
equal byte code dissemination mechanism efficient query dissemination mechanism tinydb especially small queries 

examples conventional streaming queries query specified streaming variant sql introduced analyse correlation temperature brightness light readings 
assume light sensor produces unprocessed raw values converter 
assume light sensor offset reading needs accounted 
goal query average temperature readings sensor nodes similar brightness readings 
groups built removing offset forming bins applying integer division 
select light avg temp sensors group light sample period simple query illustrates key differences swissqm tinydb 
query contains expressions computed part query evaluation 
tinydb encode complete expression trees 
expressions match fixed format form attribute aggregate attribute operation constant range expressions supported current version tinydb limited 
swissqm query translated byte code 
traditional compiler techniques expression trees translated short sequence byte code instructions 
query easily support arbitrarily complex expressions inherent limits memory available qm programs impose hard coded expression format 
order compare tinydb simplified grouping expression light light 
tinydb uses query messages bytes total disseminate query 
case corresponding qm program requires bytes fragment messages 
byte code original query follows section delivery get light isub idiv istore store group expression get temp istore sum temp iconst istore count agg avg iconst number agg expr iconst number grp expr merge send sy section reception agg avg iconst number agg expr iconst number grp expr merge fig 
shows layout synopsis example 
group identified value grouping expression 
aggregation state avg consists sum count pair 
fig 
shows layout transmission buffer synopsis group sum count aggregate expression groups transmission buffer index group sum count aggregate expression group layout synopsis transmission buffer delivery section grouping aggregation query delivery section 
aggregate state contributed sensors prepared merged local synopsis merge 
reception section executed transmission buffer contains partial aggregation state received child 
size program including complex grouping expression bytes fragment messages 
network event generation assume sensor network deployed building detect potential fire related alarms 
reasonable assume presence fire correlated sudden increase temperature 
example ids nodes temperature reading increased minutes returned 
corresponding query select nodeid temp nodeid nodeid sensors select nodeid min temp sensors range min group nodeid sample period min inner query window temperature reading created node 
query returns smallest temperature values observed minutes node 
values compared current temperature reading outer query 
observe window maintained locally node aggregation state needs exchanged 
second contrast centralised approach event detection done gateway message needs sent gateway predicate clause satisfied 
qm program implementing query uses window contains temperature samples 
window advanced minutes resulting total window width minutes 
window entries stored element ring buffer 
buffer implemented array index insert determine insert element 
fig 
shows layout synopsis ring buffer stored 
array occupies positions insert index position 
bytecode listing corresponding qm program shown 
synopsis initialised init section 
initially ring buffer elements set 
largest positive value represented bit signed integer type 
initialise synopsis set syn max fff section init dup exit dup fff push max swap istore sy syn max goto pop iconst insert istore sy section delivery min find min syn iload sy establish invariant setup variant loop variant top stack invariant stack content min syn dup exit loop dup iload sy syn dup syn syn syn jump syn swap min syn max syn pop min syn swap min syn goto pop stack content loop min syn insert new element window get temp read new dup min temp temp temp iload sy get insert istore sy syn insert temp advance insert iload sy get insert insert insert istore sy insert insert current stack content min temp swap temp min dup temp min min idiv temp min min iadd temp min min skip temp min min get nodeid read nodeid istore send tb send nodeid reception section invoked minutes window needs advanced 
minimum synopsis index init 
value window values max max max max max insert points insert position element layout synopsis example value ring buffer elements determined lines 
temperature sensor sampled value obtained stored insert position synopsis lines 
insert position advanced lines 
lines evaluate predicate temp 
predicate evaluates true event detected node sends id root 
size byte code bytes disseminated fragment messages 
execution delivery section takes ms mica implementation 
reception section empty data need aggregated nodes 
adaptive sampling principle sufficient sensor nodes send data observed physical phenomena change 
allows answering queries directly gateway fetching tuple network 
similar idea proposed statistical model run gateway 
prediction model reach confidentiality specified query gateway actively requests additional data sensors order update model parameters increase quality prediction 
model gateway decides acquire additional data 
extension idea consider running replica simpler complex model sensor nodes allows node decide model gateway outdated requires new data update parameters 
moving pull push mode operation number messages reduced explicit requests sent 
illustrate trivial strategy adaptive sampling implemented swissqm 
idea simple increase sampling rate phenomenon changes rapidly decrease sampling rate 
pseudo code corresponding bytecode show implement adaptive sampling 
int period int count int oldval min int newval count newval abs newval oldval oldval change threshold decrease period period don change period fastest period period period period increase period oldval newval send newval count period sampling required count count initialise synopsis section init iconst istore sy period iconst istore sy count get light istore sy oldval section delivery min iload sy load count jump count get light light dup light light iload sy light light oldval isub light light oldval dup light light oldval light oldval skip light abs light oldval iload sy light abs light oldval oldval light abs light oldval oldval idiv light abs light oldval oldval limit increase period iload sy light period dup light period period ifeq skip fastest decrement period dup light period period istore sy period period goto iload sy increment period dup light period period istore sy period period stack content light period istore sy count period dup light light istore sy oldval light istore send nodeid light get nodeid istore send tb goto go section iload sy sampling skipped count count istore sy pseudo code shows program applies adaptive sampling light sensor 
routine min line scheduled minutes determines shortest possible sampling period 
larger sampling periods variable count introduced 
routine scheduled variable decremented line 
sampling done count reaches zero line 
sampling periods multiples minutes 
initial value assigned count current sampling period stored period 
period increased decreased depending difference consecutive samples newval oldval 
difference larger period decremented line pseudo code 
period increased 
sample node sends id sensor value root line 
length resulting qm program bytes 
sent program messages 
bytecode state kept program stored global variables placed synopsis period position count position oldval position 
initialisation done init section 

outlook propose swissqm generation architecture data acquisition sensor networks 
spite operating small resource constrained devices swissqm opens doors richer functionality data model independence optimised performance smooth integration rest architecture 
key design decisions swissqm separation gateway sensor nodes implementation virtual machine sensor nodes query processor 
gives turing completeness independence sensor side query language independence user data model necessary extensibility pushing user defined functions complex aggregation operations way sensors 
related swissqm borrows ideas existing systems mainly tinydb 
relation tinydb swissqm commented 
tinydb related done virtual machines small devices 
authors note single general purpose virtual machine execution model suit problem domain 
suggest virtual virtual machine universal virtual machine run different bytecodes domain specific virtual machines 
virtual machines sensor networks proposed 
difference previous swissqm virtual machine specialised data processing generic platform application development 
swissqm general better optimised 
similarly runtime environment embedded control systems 
composed virtual machines 
called embedded machine machine processes external events 
second called scheduling machine machine interprets code temporal execution order specified 
execution swissqm delivery section relates code execution done machine code reception section map machine 
aiming hard realtime systems 
allow arbitrary code delivery section gives expressiveness 
compiling queries bytecode virtual machines proposed 
version available download subset features described implemented 
particular clear network aggregation implemented 
furthermore system implemented aims emulating tinydb 
swissqm tries expand achieved tinydb 
swissqm key element project eth zurich 
features swissqm excellent position implement realistic setting various optimisation techniques maximisation life time sensor network network provisioned 
exploring impact xml gateway interface appropriate language constructs needed xquery capable dealing sensor data streams complex event generation 
ultimately swissqm heart raise redundant arrays independent sensors scenarios targeted 
motivation raise quite simple hand prices sensors dropping rapidly hand difficult provision sensor network correctly 
idea raise simply provision sensor network 
calculating exactly sensors batteries computing power needed place raise suggests rough estimate take say twice times sensors 
approach imposes risks opportunities time 
swissqm offers flexibility required program sensors risks avoided opportunities exploited 
instance redundant sensors serve purpose provide sensor readings comparable locations coordinate order maximise battery life time sampling period seconds instance redundant sensors take turns sensor stay asleep seconds 
example involves adjacent sensor sample different environment variables sensors sample currently done 
examples critical success factor supported swissqm sensor runs swissqm addressed programmed individually 
exact protocols raise important avenue 
clear flexible powerful programming model provided swissqm necessary order implement optimisations 

alarm wireless security systems 
www alarm com 
bose pal 
auto id managing anytime supply chain 
commun 
acm 
deshpande guestrin madden hellerstein hong 
model approximate querying sensor networks 
vldb journal 
riccardi 
dynamically configurable multi language execution platform 
proceedings th acm sigops european workshop pages 
franklin jeffery krishnamurthy reiss rizvi wu cooper hong 
design considerations high fan systems approach 
cidr pages 
hill szewczyk woo hollar culler pister 
system architecture directions networked sensors 
proceedings asplos ix pages 
jeffery alonso franklin hong widom 
declarative support sensor data cleaning 
proceedings pervasive pages 
kirsch henzinger 
programmable microkernel real time systems 
proceedings vee pages 
levis culler 
mat tiny virtual machine sensor networks 
asplos pages 
levis gay culler 
active sensor networks 
proceedings nsdi nd symposium networked systems design implementation pages 
lindholm yellin 
java virtual machine specification 
addison wesley professional second edition 
madden franklin hellerstein hong 
tag tiny aggregation service ad hoc sensor networks 
sigops oper 
syst 
rev si 
madden franklin hellerstein hong 
tinydb query processing system sensor networks 
acm trans 
database syst 
mainwaring culler polastre szewczyk anderson 
wireless sensor networks habitat monitoring 
proceedings wsna pages 
ller alonso 
efficient sharing sensor networks 
proceedings mass 
johnson 
smart sensor detect falls elderly 
ieee pervasive computing 
tschudin gruber 
project university basel 
cn cs ch projects 
appendix swissqm instruction set table lists instructions currently implemented swissqm 
instruction state operand stack invocation specified left right respectively 
designate remainder stack left unchanged instruction 
encoding specify aggregates merge instruction shown 
stack arithmetic logic control buffers sensors aggregation instruction description dup dup dup dup dup dup pop pop swap iconst iconst iconst iconst iconst int sign ext int iadd isub idiv mod ior int jump int jump int jump int jump int jump int jump ifeq int int jump jump int jump int jump int jump int jump goto int jump iload int buf iload buf istore int buf istore buf iload sy int syn iload sy istore sy int syn syn istore sy syn clear sy clear synopsis send tb send transmission buffer send sy send synopsis get nodeid nodeid get parent parent get light get temp light temp get noise noise get tone get voltage merge code agg 
agg count max min sum avg number groups number aggregates code aggregate variance table swissqm instruction set 
