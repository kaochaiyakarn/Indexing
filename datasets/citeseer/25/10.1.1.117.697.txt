system architecture directions networked sensors jason hill robert szewczyk alec woo seth hollar david culler pister april technological progress integrated low power cmos communication devices sensors rich design space networked sensors viable 
deeply embedded physical world spread environment 
missing elements system architecture methodology systematic advance 
identify key requirements develop small device representative class design tiny event driven operating system show provides support efficient modularity concurrency intensive operation 
operating system fits bytes memory propagates events time takes copy bytes memory context switches time takes copy bytes memory supports level scheduling 
analysis lays groundwork architectural advances 
post pc era emerges new niches computer system design shape characteristics quite different traditional desktop server regimes 
interesting new design regimes networked sensors 
networked sensor enabled part moore law pushing level computing storage smaller cheaper lower power unit 
trends equally important complete systems chip integrated low power communication integrated low power devices interact physical world 
basic microcontroller building block includes just memory processing non volatile memory interface resources dac interrupt controllers counters 
communication may take form wired short range rf infrared optical various techniques 
sensors interact various fields forces detect light heat position movement chemical presence 
areas technology crossing critical threshold networked sensors exciting regime apply systematic design methods 
today networked sensors constructed commercial components scale square inch size fraction watt power microcontrollers connected various sensor devices spi device specific protocols small transceiver chips 
sensor described study 
possible construct processing storage equivalent pc order watts power 
simple extrapolation suggests equivalent eventually fit square inch sub watt space power niche run scaled unix embedded microkernel 
researchers envision driving networked sensor microscopic scales communication integrated chip micro electrical mechanical mems devices rich set sensors available cmos chip extremely low cost 
networked sensors integrated physical environment powered ambient energy smart space scenarios 
see power associated inch devices dramatically 
scenario essential network sensor design regime subjected rigorous workload driven quantitative analysis allowed microprocessor performance advance dramatically past years 
surprising unique characteristics regime give rise different design trade offs current general purpose systems 
provides initial exploration system architectures networked sensors 
investigation grounded prototype current generation device constructed shelf components 
research projects trying compress class devices single chip key missing technology system support manage operate device 
address problem developed tiny os called tinyos prototype platform 
draws strongly previous architectural lightweight thread support efficient network interfaces 
working design regime issues emerge strongly devices concurrency intensive different flows data kept moving simultaneously system provide efficient modularity hardware specific application specific components snap little processing storage overhead 
address problems context current network sensor technology tiny os 
analysis solution provides valuable initial directions architectural innovation 
section outlines design requirements characterize networked sensor regime guide approach 
section describes baseline current technology hardware design point 
section develops tinyos devices general class 
section evaluates effectiveness design collection preliminary benchmarks 
section contrasts approach prevailing embedded operating systems 
section draws study considers implications architectural directions 
networked sensor characteristics section outlines requirements shape design network sensor systems observations concrete sections 
small physical size low power consumption point technological evolution size power constrain processing storage interconnect capability basic device 
obviously reducing size power required capability driving factors hardware design 
system level key observation capabilities limited scarce 
sets background rest solution efficient 
concurrency intensive operation primary mode operation devices flow information place place modest amount processing fly accept command think respond 
example information may simultaneously captured sensors manipulated streamed network 
alternatively data may received nodes forwarded multihop routing bridging situations 
little internal storage capacity buffering large amounts data inbound outbound flows unattractive 
flows generally involve large number low level events interleaved higher level processing 
events real time requirements bounded jitter processing extend time critical events 
limited physical parallelism controller hierarchy number independent controllers capabilities controllers sophistication processor memory switch level interconnect lower conventional systems 
typically sensor actuator provides primitive interface directly single chip microcontroller 
contrast conventional systems distribute concurrent processing associated collection devices multiple levels controllers interconnected elaborate bus structure 
architectural developments may recreate low duty cycle analog conventional federation controllers interconnect space power constraints limited physical configurability chip retain need support concurrency intensive management flows embedded microprocessor 
diversity design usage networked sensor devices tend application specific general purpose carry available hardware support needed application 
wide range potential applications variation physical devices large 
particular device important easily assemble just software components required synthesize application hardware components 
devices require unusual degree software modularity efficient 
generic development environment needed allows specialized applications constructed spectrum devices heavyweight interfaces 
natural migrate components hardware software boundary technology evolves 
robust operation devices numerous largely unattended expected operational large fraction time 
application traditional redundancy techniques constrained space power limitations 
redundancy devices attractive devices communication cost cross device redundancy prohibitive 
enhancing reliability individual devices essential 
reinforces need efficient modularity components independent possible connected narrow interfaces 
example design point ground system design study developed small flexible networked sensor platform expresses key characteristics general class represents various internal interfaces currently available components 
photograph schematic hardware configuration device appear 
consists microcontroller internal flash program memory data sram data eeprom connected set actuator sensor devices including leds low power radio transceiver analog photo sensor digital temperature sensor serial port small coprocessor unit 
breakthrough right prototype invaluable developing feel salient issues design regime 
hardware organization processor mcu atmel ls conventionally receives attention particularly noteworthy 
bit harvard architecture bit addresses 
provides bit general registers runs mhz system memory constrained kb flash program memory bytes sram data memory 
mcu designed processor write instruction memory prototype uses coprocessor perform function 
additionally processor integrates set timers counters configured generate interrupts regular time intervals 
noteworthy sleep modes idle just shuts processor power shuts watchdog asynchronous interrupt logic necessary wake power save similar power mode leaves asynchronous timer running 
leds represent analog outputs connected general port may display digital values status 
photo sensor represents analog input device simple control lines 
case control lines eliminate power drain photo resistor 
input signal directed internal adc continuous sampled modes 
radio important component 
represents asynchronous input output device hard real time constraints 
consists rf mhz transceiver tr antenna collection discrete components configure physical layer characteristics signal strength sensitivity 
operates key mode speeds kbps 
control signals configure radio operate transmit receive power mode 
radio contains buffering bit serviced controller time 
additionally transmitted value latched radio jitter radio input propagated transmission signal 
temperature sensor analog devices ad represents large class digital sensors internal converters interface standard chip chip protocol 
case synchronous wire protocol software microcontroller synthesizing master general pins 
general different devices attached serial bus unique id protocol different conventional bus protocols explicit arbiter 
component active ma idle ma inactive mcu core mcu pins led radio rfm tr tx rcv temp ad proc ls eeprom lc table current hardware component baseline networked sensor platform 
prototype powered cr lithium battery rated mah 
peak load system consumes ma current run hours single battery 
idle mode system run hours 
switched inactive mode system draws current single battery run year 
bus negotiations carried software microcontroller 
serial port represents important asynchronous bit level device byte level controller support 
uses pins connected internal uart controller 
transmit mode uart takes byte data shifts serially specified interval 
receive mode samples input pin transition shifts bits specified interval edge 
interrupts triggered processor signal completion events 
coprocessor represents synchronous bit level device byte level support 
case limited mcu ls kb flash instruction memory bytes sram eeprom uses pins connected spi controller 
spi synchronous serial data link providing high speed full duplex connections mbit various peripherals 
coprocessor connected way allows reprogram main microcontroller 
sensor reprogrammed transferring data network coprocessor kb eeprom lc 
alternatively main processor coprocessor gateway extra storage 
extensions design include addition battery strength monitoring voltage temperature measurements radio signal strength sensor radio transmission strength actuator general sensor extension bus 
power characteristics table shows current drawn hardware component scenarios peak load active load idle mode inactive 
active power consumption led radio reception equal processor 
processor radio sensors running peak load consume ma volts mw 
leds increases mw 
contrasted current draw inactive mode 
clearly biggest savings obtained making unused components inactive possible 
system embrace philosophy getting done quickly possible going sleep 
minimum pulse width rfm radio 
takes energy transmit single bit 
transmitting zero free equal dc balance roughly transmitter requires proper operation costs transmit bit receive bit 
time processor execute cycles roughly instructions consume 
fraction instruction count devoted bit level processing 
remainder go higher level processing byte level packet level application level amortized bit times 
unused time spent idle power mode 
broaden coverage study deploy networked sensors configurations 
sram pc pgm 
mem 
flash inst 
register inst 
decoder ctrl lines regs alu sr sp eeprom voltage ls bit data bus mhz clock int unit spi uart io pins adc io pins io pins timer unit io pins mhz clock spi tx rx pwr data ctrl tx rx coprocessor serial port light sensor temp ad rfm tr mhz transceiver leds eeprom photograph schematic representative network sensor platform mobile sensor picks temperature light readings periodically presents wireless network tagged data objects 
needs conserve limited energy 
second stationary sensor bridges radio network serial link host internet 
power supplied host demanding data flows 
tiny operating system tinyos core challenge face meet requirements networked sensors put forth section class platforms represented design section manner scales forward technology 
small physical size modest active power load tiny inactive load provided hardware design 
operating system framework needed retain characteristics managing hardware capabilities effectively supporting concurrency intensive operation manner achieves efficient modularity robustness 
reasons described section existing embedded device operating systems meet challenge 
desire clean open platform explore alternatives 
problem tackle strikingly similar building efficient network interfaces maintain large number concurrent flows juggle numerous outstanding events 
tackled physical parallelism virtual machines 
tackle building extremely efficient multithreading engine 
tam cilk maintains level scheduling structure small amount processing associated hardware events performed immediately 
execution model similar fsm models considerably programmable 
system designed scale current technology trends supporting smaller tightly integrated designs crossover software components hardware 
contrast traditional notions scalability centered scaling total power resources computing paradigm 
essential network sensor architectures plan eventual integration sensors processing communication 
days sensor packs dominated interconnect support hardware opposed physical sensors numbered 
tinyos chosen event model allows high concurrency handled small amount space 
stack threaded approach require orders magnitude memory expect 
worst case memory usage reserved execution context sophisticated memory management support required 
additionally need able multi task execution contexts rate switches second twice service radio perform 
clear event regime required 
surprising researchers area high performance computing seen phenomena event programming achieve high performance :10.1.1.23.716
design space power precious resource 
believe event approach creates system uses cpu resources efficiently 
collection tasks associated event handled rapidly blocking polling permitted 
unused cpu cycles spent sleep state opposed actively looking interesting event 
additionally real time constraints calculation cpu utilization simple allowing algorithms adjust processor speed voltage accordingly :10.1.1.143.7417
tiny os design complete system configuration consists tiny scheduler graph components 
component interrelated parts set command handlers set event handlers encapsulated fixed size frame bundle simple threads 
threads commands handlers execute context frame operate state 
facilitate modularity component declares commands uses events signals 
declarations compose modular components application configuration 
composition process creates layers components higher level components issue commands lower level components lower level components signal events higher level components 
physical hardware represents lowest level components 
entire system written structured subset static memory allocation allows know memory requirements component compile time 
additionally prevents overhead associated dynamic allocation 
savings manifests ways including execution time savings variable locations statically compiled program accessing thread state pointers 
commands non blocking requests lower level components 
typically command deposit request parameters frame conditionally post thread execution 
may invoke lower commands wait long indeterminate latency actions take place 
command provide feedback caller returning status indicating successful buffer overrun 
event handlers invoked deal hardware events directly indirectly 
lowest level components handlers connected directly hardware interrupts may external interrupts timer events counter events 
event handler deposit information frame post threads signal higher level events call lower level commands 
hardware event triggers fountain processing goes upward events bend downward commands 
order avoid cycles command event chain commands signal events 
commands events intended perform small fixed amount occurs context executing thread 
threads perform primary 
atomic respect threads run completion preempted events 
threads call lower level commands signal higher level events schedule threads component 
run completion semantics threads possible allocate single stack assigned currently executing thread 
essential memory constrained systems 
threads allow simulate concurrency component execute asynchronously respect events 
threads block spin wait prevent progress components 
thread bundles provide way incorporate arbitrary computation event driven model 
thread scheduler currently simple fifo scheduler utilizing bounded size scheduling data structure 
depending requirements application sophisticated priority deadline structures 
crucial scheduler power aware prototype puts processor sleep thread queue empty leaves peripherals operating wake system 
behavior enables provide efficient battery usage 
see section 
queue empty thread scheduled result event need scheduler wake hardware event triggers activity 
aggressive power management left application 
example component typical component including frame event handlers commands threads message handling component pictured 
components exports commands initialization power management 
additionally command initiating message transmission signals events completion transmission arrival message 
order perform function message component issues commands packet level component handles types events indicates message transmitted signals message received 
components describe resources provide resources require connecting simple 
programmer simply matches signatures events commands required component signatures events commands provided component 
communication components takes form function call low overhead init init power mode send msg addr type data messaging component power mode tx packet buf msg rec type data send msg thread internal state tx packet done success msg send done success rx packet done buffer messaging component declaration accepts char tos command am send msg int addr int type char data void tos command am power char mode char tos command am init signals char am msg rec int type char data char am msg send done char success handles char am tx packet done char success char am rx packet done char packet uses char tos command am sub tx packet char data void tos command am sub power char mode char tos command am sub init sample messaging component 
pictorially represent component bundle threads block state component frame set commands upside triangles set handlers triangles solid downward arcs commands dashed upward arcs events signal 
elements explicit component code 
provides compile time type checking 
component types general components fall categories hardware abstractions synthetic hardware high level software components 
hardware abstraction components map physical hardware component model 
rfm radio component shown lower left corner representative class 
component exports commands manipulate individual pins connected rfm transceiver posts events informing components transmission reception bits 
frame component contains current state transceiver sending receiving mode current bit rate 
rfm consumes hardware interrupt transformed rx bit evt tx bit evt 
threads rfm hardware provides concurrency 
model abstracting hardware resources scale simple resources individual pins quite complex ones 
synthetic hardware components simulate behavior advanced hardware 
example component radio byte component see 
shifts data underlying rfm module signals entire byte completed 
internal threads perform simple encoding decoding data 
conceptually component enhanced state machine directly cast hardware 
point view higher levels component provides interface functionality similar uart hardware abstraction component provide commands signal events deal data granularity internally perform similar tasks looking start bit symbol perform simple encoding 
high level software components perform control routing data transformations 
representative class messaging module 
performs function filling packet buffer prior transmission dispatches received messages appropriate place 
additionally components perform calculations data data aggregation fall category 
radio requires data transmitted dc balanced 
currently manchester encoding 
component model allows easy migration hardware software boundary 
possible event model complementary underlying hardware 
additionally fixed size preallocated storage requirement hardware implementations 
ease migration software hardware particularly important networked sensors system designers want explore tradeoffs scale integration power requirements cost system 
putting shown sample components examine composition interaction complete configuration 
illustrate interaction components describe networked sensor application developed 
application consists number sensors distributed localized area 
monitor temperature light conditions periodically broadcast measurements radio network 
sensor configured routing information guide packets central base station 
sensor act router packets traveling sensors range base station 
internal component graph sensors shown 
devices application service network light sensor temperature sensor 
devices represented vertical stack components 
stacks tied application layer 
chose abstraction similar active messages top level communication model :10.1.1.23.716
active message model includes handler identifiers message 
networking layer invokes indicated handler message arrives 
integrates execution model invocation message handlers takes form events signaled application 
application data broadcasted form fixed length active messages 
receiver intermediate hop way base station message handler initiates retransmission message recipient 
base station handler forwards packet attached computer 
application running timer event periodically start data collection 
temperature light information collected application uses messaging layer send message command initiate transfer 
command records message location am component frame schedules thread handle transmission 
executed thread composes packet initiates downward chain commands calling tx packet command packet component 
turn command calls tx byte radio byte component start byte byte transmission 
packet component internally acts data drain handing bytes radio byte component previous byte transmission complete 
internally radio byte prepares transmission putting rfm component transmission state appropriate scheduling encode thread prepare byte transmission 
encode thread scheduled encodes data sends bit data rfm component transmission 
radio byte acts data drain providing bits rfm response tx bit evt event 
byte transmission complete radio byte propagate tx bit evt signal packet level controller tx byte done event 
bytes packet drained packet level signal tx packet done event signal application msg send done event 
transmission progress sensor active radio byte component receives bits rfm component 
start sequence detected transmission process reversed bits collected bytes bytes collected packets 
component acts data pump actively signals incoming data higher levels system respond read operation 
packet available address packet checked matches local address appropriate handler invoked 
init init init init application am power mode power mode packet power mode radio byte power mode rfm send msg addr type data send msg thr tx packet buf tx bytes tx mode rx byte ready data err encode thr decode thr tx bit data rx mode set bit rate level msg rec type data tx packet done success tx byte ready success tx bit evt msg send done success internal state rx packet done buf internal state tx done internal state rx bit evt data internal state timer interrupt init temperature write addr data init bus get data read addr thread data ready data read done data internal state write done success internal state sample configuration networked sensor init power photo get data data ready data internal state adc ready interrupt internal state timer interrupt component name code size data size bytes bytes multihop router am dispatch am temperature am light am packet radio byte rfm photo temperature uart uart packet bus init tinyos scheduler runtime total table code data size breakdown complete system 
processor init tinyos scheduler runtime required application components included needed 
evaluation small physical size table shows code data size components system 
clear code size complete system including network sensor application simple multihop routing remarkable 
particular scheduler occupies bytes complete network sensor application requires kb instruction memory 
furthermore data size scheduler bytes utilizes available data memory 
entire application comes bytes data bytes available 
concurrency intensive operations argued section network sensors need handle multiple flows information simultaneously 
context important baseline characteristic network sensor context switch speed 
table shows aspect calibrated intrinsic hardware cost moving bytes memory 
cost propagating event roughly equivalent copying byte data 
low overhead essential achieving modular efficiency 
posting thread switching context costs moving bytes memory 
expensive operation involves low level aspects interrupt handling 
hardware operations handling interrupts fast software operations save restore registers memory impose significant overhead 
techniques reduce overhead partitioning register set register windows 
efficient modularity key characteristics systems events commands propagate components quickly 
projects paths scout stackable systems similar goals regimes 
table gives cost individual component crossing shows dynamic composition crossings 
contains timing diagram logic analyzer event chain flows system completion radio transmission 
events fire component stack eventually causing command second message 
total propagation delay layer radio communication stack instructions 
discussed detail steps show event crossing layers 
entire event propagation delay plus cost posting command schedule thread send packet step 
limited physical parallelism controller hierarchy successfully demonstrated system managing am send msg application am packet radio byte rfm tx pin timer interrupt msg thread sampling packet start symbol timing diagram logic analyzer capturing event propagation networking components granularity division 
graph shows send message scenario described section focusing transmission bit packet 
starting hardware timer interrupt step events propagate tx bit evt step byte level processing 
handler issues command transmit final bit fires tx byte ready event step signal byte 
triggers tx packet done step 
step signals application send msg command finished 
application issues asynchronous send msg command step post thread step send packet 
send msg thread prepares message rfm component periodically scheduled listen incoming packets 
event propagation delay step step entire event command fountain starting step step completed total elapsed time 
multiple flows data single microcontroller 
table shows energy distribution software components engaged active data transmission 
highly active period processor idle approximately time 
remaining time access sensors photo sensor temperature controller 
devices provide interface primitive radio single controller support flows data rates bit kbps 
furthermore data design choices amount physical parallelism necessary 
example low level bit byte processing utilize significant cpu resources cpu system bottleneck 
bit level functions implemented separate microcontroller realize performance gain radio bandwidth limitations 
incur additional power time expense transferring data microcontrollers 
components implemented dedicated hardware able power saving design choices including sleeping save bit lowering frequency processor fold 
diversity usage robust operation able test versatility architecture creating sample applications exploit modular structure system 
include source multi hop routing applications active badge location detection applications sensor network monitoring applications 
additionally developing system ability target multiple cpu architectures systems 
related large amount developing sensors new communication devices 
development new devices strong case development software platform support connect 
tinyos designed fill role 
believe current real time operations average cost time normalized cycles byte copy byte copy post event call command post thread scheduler context switch overhead interrupt hardware cost interrupt software cost table overheads primitive operations tinyos components packet reception percent cpu energy breakdown utilization nj bit am packet radio handler radio decode thread rfm radio reception idle total components packet transmission percent cpu energy breakdown utilization nj bit am packet radio handler radio encode thread rfm radio transmission idle total table details breakdown distribution energy consumption layer packet transmission reception 
example receiving packets done rfm bit level component utilizes cpu time entire period receiving packet 
consumes nj bit processes 
note measurements done respect raw bits physical layer bit rate radio set bit dc balanced keying 
name preemption protection rom size configurable targets tasks static microcontrollers posix optional dynamic pii arm thumb vxworks posix dynamic pentium strong arm qnx posix dynamic pentium ii nec chips qnx realtime posix dynamic pentium ii os process dynamic pentium sh chorus os posix optional dynamic pentium strong arm ariel tasks static sh arm thumb data flow bytes static atmel table comparison selected architecture features embedded oses 
operating systems meet needs emerging integrated regime 
followed performance growth wallet size device 
traditional real time embedded operating systems include vxworks palmos qnx 
table shows characteristics handful systems 
microkernels allow capabilities added removed system needs 
provide execution environment similar traditional desktop systems 
posix compatible thread packages allow system programmers reuse existing code multiprogramming techniques 
largest provide memory protection appropriate hardware support 
increasingly important size embedded applications grow 
addition providing fault isolation memory protection prevents corrupt pointers causing seemingly unrelated errors parts program allowing easier software development 
systems popular choice pdas cell phones set top boxes 
come close meeting requirements suited world embedded pcs 
example qnx context switch requires cycles mhz ex processor 
additionally memory footprint vxworks hundreds kilobytes 
statistics order magnitude required limits 
collection smaller real time executives including ariel minimal operating systems designed deeply embedded systems motor controllers microwave 
providing support preemptive tasks severely constrained execution storage models 
example provides task execution model statically configured meet requirements specific application 
generally systems approach space requirements represent designs closest 
tend control centric controlling access hardware resources opposed movement centric 
meets memory requirements exceeds limitations context switch time 
optimal performance level assumption cpi instructions program powerpc equivalent bit atmel context switch time 
related includes finite state machine fsm description language express component designs compiled software 
assume software operate top real time os give necessary concurrency 
complementary requirements fsm design maps event command structure 
ability support high levels concurrency inherent finite state machines 
device side developing cubic millimeter integrated network sensors 
additionally developed low power hardware support streaming sensor readings wireless communication channels 
explicitly mention need inclusion microcontroller support multihop routing 
systems require support efficient software architecture allows high levels concurrency manage communication data collection 
system designed troubling note large amount information code size embedded oses hard performance numbers published 
started program test various real time operating systems keeping results confidential view fee 
scale types devices envision 
final class related applications enabled networked sensors 
piconet active badge location system explored utility networked sensors 
applications include personnel tracking information distribution wireless portable communication devices 
focused applications devices opposed system architecture allow heterogeneous group devices scale cubic millimeter category 
architectural implications major architectural question design network sensors individual microcontrollers manage device 
demonstrated possible maintain multiple flows data single microcontroller 
shows architectural option requirement utilize individual microcontrollers device 
interconnect system need support efficient event communication model 
tradeoffs quickly arise power consumption speed chip communication flexibility functionality 
additionally quantitative analysis enabled consider effects alternative microcontrollers 
believe higher performance arm thumb change architecture calculate point processor meet requirements 
similar lines extrapolate technology perform presence higher speed radio components 
clear bit level processing transfer rates bluetooth radios radio byte component needs hardware abstraction synthetic hardware 
analysis timing breakdown table reveal impact architectural changes microcontrollers 
example inclusion hardware support events significant performance impact 
additional register set execution events save event total cpu load 
savings directly transferred higher performance lower power consumption 
additionally able quantify effects additional hardware support managing data transmission 
table shows hardware support byte level collection data radio save total bit processor overhead 
represents elimination bit level processing cpu 
extension analysis reveal implication architectural changes including radios automatically wake start incoming transmission hardware implementation mac layer 
furthermore impact reconfigurable computing investigated relative design point 
traditional systems interconnect controller hierarchy configured particular system niche network sensors integrated chip 
reconfigurable computing potential making integrated network sensors highly versatile 
radio byte component perfect candidate reconfigurable support 
consumes significant amount cpu time radio protocol specific 
standard uart dma controller effective situation component search complex start symbol prior clocking bits transmission 
trivially implemented fpga 
extrapolation product fully developing analyzing quantitatively specific design point network sensor regime 
clear strong tie software execution model hardware architecture supports 
just spec benchmarks attempted evaluate impact architectural changes entire system workstation regime attempted systematic analysis architectural alternatives network sensor regime 
atmel arm thumb 
www atmel com atmel products prod htm 
atmel avr bit risc processor 
www atmel com atmel products prod htm 
ariel technical overview 
www com technologies ariel technology brief html 
palmos software overview 
www palm com docs palmos html 
pico radio 
eecs berkeley edu research pico radio 
pister smart dust 
www atmel com atmel products prod htm 
super small scalable real time operating system high volume deeply embedded applications 
www isi com products index htm 
datasheet 
www com products html ds html 
real time consult 
www realtime info com market rtos eval htm 
rf 
www rfm com products data tr pdf 
official bluetooth website 
www bluetooth com 
linux microcontroller project 
www org 
vxworks datasheet 
www com products html ds html 
anant agarwal geoffrey souza kirk johnson david kranz john kubiatowicz kurihara beng hong lim maa daniel mike donald yeung 
mit alewife machine large scale distributed memory multiprocessor 
proceedings workshop scalable shared memory multiprocessors 
kluwer academic 
atwood pister 
preliminary circuits smart dust 
proceedings southwest symposium mixed signal design san diego california february 
bennett clarke evans hopper jones 
piconet embedded mobile networking 

synthesis software programs embedded control applications 
chu lo berg pister optical communication link corner reflectors 
proceedings spie vol 
microsoft microsoft windows ce 
www microsoft com embedded 
culler singh gupta 
parallel computer architecture hardware software approach 

intel paragon xp architecture software environment 
technical report zam ib 
culler fine grain parallelism minimal hardware support compiler controlled machine 
proceedings th international conference architectural support programming languages operating systems april 
blumofe cilk efficient multithreaded runtime system 
proceedings fifth acm sigplan symposium principles practice parallel programming ppopp pages santa barbara california july 
richard guy john heidemann wai mak thomas page jr gerald popek dieter 
implementation ficus replicated file system 
proceedings summer usenix conference pages pages anaheim ca june 
heidemann popek 
file system development stackable layers 
acm transactions computer systems pages feb 
dan 
architectural overview qnx 
www qnx com literature whitepapers html 

meiko cs interconnect elan elite design 
james hu irfan pyarali douglas schmidt 
measuring impact event dispatching concurrency models web server performance high speed networks 
proceedings nd global internet conference 
ieee november 
hutchinson peterson 
kernel architecture implementing network protocols 
ieee transactions software engineering pages jan 
battery cr engineering data 
data com library primary lithium coin cr pdf 
barry 
concurrent embedded executive microcontrollers 
www 
com htm 
kendall paradiso gershenfeld 
parasitic power harvesting shoes 
proc 
second ieee international conference wearable computing iswc ieee computer society press pages pp 
october 
qnx software systems qnx realtime os www qnx com products os html 
james 
algorithms distributed sensor networks 
masters thesis electrical engineering univeristy california berkeley december 

os 
www com technologies os 
html 
mosberger malley peterson proebsting 
scout communications oriented operating system 
hot os may 
pering brodersen 
simulation evaluation dynamic voltage scaling algorithms 
proc 
int symposium low power electronics design pages pp 
aug 
pister kahn boser 
smart dust wireless networks millimeter scale sensor nodes 
pottie kaiser clare 
wireless integrated network sensors 
philips semiconductors 
bus specification version 
www semiconductors com acrobat various bus specification pdf 
standard 
real time extensions posix 
embedded systems :10.1.1.23.716
white dwarf linux 
www com linux 
html 
von eicken culler goldstein schauser :10.1.1.23.716
active messages mechanism integrated communication computation 
want hopper 
active badges personal interactive computing objects 
weiser welch demers shenker 
scheduling reduced cpu energy 
proceedings symposium operating systems design implementation osdi pages 

