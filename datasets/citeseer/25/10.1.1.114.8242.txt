system graph visualization evolution software christian collberg stephen kobourov jacob pitts kevin department computer science university arizona tucson az 
collberg kobourov cs arizona edu department computer science university auckland auckland new zealand 
jas cs auckland ac nz describe system visualizes evolution software novel graph drawing technique visualization large graphs temporal component 
extracts information java program stored cvs version control system displays temporal graph visualizer 
information programmers understand evolution legacy program program structured way programmers responsible parts program time periods 
parts program appear unstable long periods time may need rewritten 
type information complement produced static tools source code browsers static analyzers 
situations programmer faced having learn understand existing large complex software system 
consider example scenarios bob programmer large legacy program bob asked add new functionality bob asked fix bugs bob asked determine algorithms exist violate intellectual property rights bob asked rewrite new programming language partially supported nsf ccr afrl contract 
partially supported nsf acr 
partially supported new economy research fund new zealand 
copyright association computing machinery permission digital hard copies part personal classroom granted fee provided copies distributed commercial advantage copies bear notice full citation page 
copyrights components owned acm honored 
abstracting credit permitted 
copy republish post servers redistribute lists requires prior specific permission fee 
request permissions permissions dept acm fax mail permissions acm org 
acm acm symposium software visualization san diego ca bob asked port new operating system architecture 
cases bob find program undocumented unstructured poorly written 
worse original developers may available explain system works 
start modifying program needs build mental model structure 
aid discovery process run program examine source code read available documentation 
various tools source code browsers static analyzers may helpful respect 
describe new tool aids discovery structure legacy systems 
discovers evolution program visualizing changes system gone 
particular extracts information java programs stored cvs version control system 
extracts inheritance graphs call graphs control flow graphs program displays changes graphs gone inception program 
allows bob visualize particular parts program created periods parts program heavily modified parts program unstable long period time may need rewritten programmers modified parts code parts program grown complexity long period time 
intended stand system 
ultimate goal integrate tools source code browsers 
allow programmer examine source code control flow inheritance structure call structure program change time order understand aspect system 
active development 
currently process integrating software complexity metrics chidamber kemerer henry kafura halstead mccabe system 
allow graph visualizations driven complexity class method changing time 
shows overview design 
order study effectiveness cvs tree collberg project 
software watermarking obfuscation tool developed jointly university arizona university auckland 
consists lines java code edited developers period years cvs tree 
remainder structured follows 
section types visualizations system capable 
section discuss temporal graph visualization system 
section describe information collected cvs repositories 
section related section discuss findings section summarize results 
temporal visualization models hoping useful tool learning new code base 
able view current snapshot code able visualize entire history development process 
may lead interesting insights gleaned examining mere source 
goal develop system allows visualization evolutionary aspects program 
extracting available information cvs repository java program expressing graphs temporal graph drawing system visualize information 
currently extracting data 
author change file 

control flow graphs method program 

change basic block control flow graphs 

inheritance graph program 

call graphs methods program 

time change file 
piece information collected time slice 
temporal granularity configurable current system size slice defaults day 
information allows visualize evolution program useful ways color code nodes depending long unchanged 
nodes start red grow time slice remained unchanged drawn pale blue 
node changes returns red process repeats 
user moves time slices draw attention parts system flux different points time 
user notices interesting event say code segment changing heavily long period time click node examine set authors affected changes 
user notices area graph remains constantly red grow significantly may mean area site constant bug fixes may need redesigned better tested 
visualization large evolving graphs theory problem encoded graph problem representing input output binary treating graphs adjacency matrix list 
case problem finding transformation takes input graph output graph 
approach practical applications sense visualizing programs particular inheritance graphs call graphs control flow graphs 
visualizing graphs lead discovery relationships patterns trends 
consider problem interactive visualization large graphs temporal component 
develop new techniques models algorithms allowed implement prototype system interactive visualization large temporal graphs arising large software development 
main algorithmic challenge develop techniques models algorithms data structures interactive temporal graph visualization 
consider graph evolves time 
changes graph include adding removing vertices adding removing edges 
visualization data ensure drawing readable drawing preserves mental map underlying structure 
readable layout graph shows underlying relationships 
example graph contains clique nodes nodes uniformly placed sphere say straight line segment 
mental map user preserved parts graph appear different frames remain position 
usually restrictive selected landmarks chosen remain position parts allowed deviate previous positions 
naive approach displaying sequence graphs draw scratch 
layout graph independently mental map preserved 
conversely layout graph incrementally previous preserve mental map quality layout suffer dramatically global changes allowed 
propose approach combines readability mental map preservation 

gn sequence graphs visualize timeseries 
define aggregate graph graph obtained adding graphs sequence 
weighted graph vertex weight corresponds number frames vertex appears edge weights defined analogously 
problem finding readable layout aggregate graph account edge vertex weights placement vertices time frame 
algorithm display various program structure graphs grip kobourov 
grip lay large graphs reasonable time computing hierarchical filtration graph 
set filtrations graph forms sequence vn subsets nodes vi vj vn vi vj 
practice usually case vi vi filtration normally contain elements 
filtrations laid cvs repository day day day check extract day cfg call graph inheritance graph smallest largest smallest index largest index layout vi provide outline layout vi 
layout filtration proceeds approach related spring embedder eades eades force directed method kamada kawai kamada kawai kamada kawai 
main underlying principle methods vertices repel edges prevent adjacent vertices getting far 
node displacement calculated dg position node ni neighborhood node dg distance nodes graph predefined optimal edge length 
level filtration fruchterman reingold calculation fruchterman reingold force vector fa fr cfg view overview system :10.1.1.13.8444
displacement node simply ff fa fr day graph visualizer prev day dynamic graph visualization zoom day pan grip kobourov designed quickly layout graphs tens thousands vertices assuming information underlying graphs 
base visualization graphs evolve time 
employ aggregate graph approach grip need modify attributes weights nodes edges graph taken account 
accommodate kinds information interest software visualization grip extended support additional attributes weights nodes edges time slice information 
meaning weight information self evident time slice label associated node representing snapshot state system analyzed node 
dynamic graph consist series time slices graph representing state system point time 
edges arranged time slices various ways depending properties interested 
node edge weights modification forces act nodes accommodate weights achieve goals 
nodes connected edge weight behave connected edge 
edge connecting nodes weight zero natural length zero 
heavy nodes placed apart 
heavy edges shorter 
edge weight connects nodes weight edge ideal length edge snapshot system viewing inheritance graph 
subset classes labelled 
weight connecting nodes weight larger stronger connection 
considerations edge weight connecting nodes weight wu wv respectively ideal length wu wv formula lead division zero 
resulting infinite distance correct ideal distance fruchterman reingold force calculations disconnected nodes repulsive forces 
practice undesirable ensure edges weight zero removed 
account layout constraints weighted graphs graph distance nodes replaced ideal distance nodes 
computational space requirements calculating effects paths nodes computing shortest weighted path approximation 

pn sequence nodes shortest unweighted path connecting nodes define wpi wp wep approximation works quickly 
final force calculation modified kamada kawai method achieve aesthetically pleasing layout graph employ modified fruchterman reingold forces kamada kawai method achieve satisfactory methods creates approximate layout fruchterman reingold calculations quickly tidy layout 
modifications needed snapshots inheritance graph 
nodes colored author latest change 
node appears color author 
example author red author yellow authors green author classes library system classes black 
time step node change color fade blue 
nodes belonging author go color progression author nodes go snapshots call graph 
nodes start red 
time passes node change turns purple blue 
change affected node red 
support weighted graphs simple fa fr graph time slices wu wv modifications needed support time slices kamada kawai method quite simple 
equation alteration required function redefined nodes time slice indexes tu tv respectively kronecker delta ij wu wv modifications needed fruchterman reingold calculations similar repulsive forces eliminated outside time slice fa fa fr fr extracting cvs information shown system check consecutive versions code java program study 
program compiled collection java classfiles 
classfiles loaded control flow graphs call graphs inheritance graphs built 
graph stored individual file loaded viewer 
result extraction step sequence files generated graph 
number days cvs repository 
call graph day call call inheritance graph day inher inher number control flow graphs day cfg cfg cfg cfg cfg constructing inheritance graphs straight forward java class file indicates parent class control flow graph 
call graph changed nodes start red gradually fade blue 
note current system changes large number nodes graph shown result undesirable changes layout graph 
interfaces implements 
java class extend class java single inheritance language implement interfaces inheritance graph dag 
constructing call graphs slightly complicated 
target method invocation depend runtime type conservative type analysis potential targets method invocations considering inheritance graph 
precise data flow analysis possible necessary purposes 
call graph typically forest directed graphs 
reason java programs multi threaded explicitly implicitly graphical user interfaces calls appear spontaneously actions java runtime system 
control flow analysis complicated fact java bytecode instructions throw exception 
result control flow graphs dense exception edges highly unreadable 
omit edges generated possible null pointer exceptions 
daily graphs constructed merged time slice graph merge graphs modified version identify node corresponds node add edge colors indicate node identities 
knows dashed time slice edges treated specially 
particular attempt place node slices approximately location 
allow smooth transitions user navigates time 
inheritance graphs call graphs straightforward add time slice edges 
reason node easily unique identity 
case inheritance graph node identified fully qualified class name 
case call graph node identified class name method name method signature 
necessary include signatures identifier java allows method overloading 
adding time slice edges control flow graphs significantly difficult 
see consider example nodes corresponding branches statement control flow graph changed 
general possible determine node changed node 
heuristically identify nodes smallest edit distance best educated guess 
current version system employs conservative estimate nodes correspond nodes slices 
particular identifies nodes calculating hash instruction body node linking nodes identical hashes time slices 
assumes nodes changed new hash values fact new nodes 
means changed nodes may appear close node different 
practice significant problem nodes change nodes fix position new node relatively close original obvious new node altered version old 
addition information extracted program code incorporate information cvs graphs 
includes time stamps author information 
pieces information gathered graphs merged left graphs inheritance graph call graph set control flow graphs 
graph number days layers node layer connected time slice edge corresponding node layer 
related program visualization tools proposed past 
aim tools improve understanding computer programs humans form readable mere source code 
section briefly review software visualization tools 
depth information refer reader available visualization taxonomy studies myers 
myers price roman cox :10.1.1.28.8296
static visualization best known interactive software visualization systems balsa brown developed brown university 
balsa annotates program visualized hooks interesting events changes data structures subroutine calls relayed visualization system 
turn builds view corresponds events 
balsa evolved zeus brown system shows multiple synchronized views running program :10.1.1.37.6284
zeus allows developer interrupt running program edit available data structure representations 
changes propagated update views 
furthermore zeus allows user sound color enhance visualization 
shrimp storey system offers variety different graphical views software system 
example class inheritance hierarchies aggregation visualized 
programmer trying understand various components software system fit zoom particular components focus specifics relevant documentation source code 
major problem visualizing call graphs density 
young young munro attempts overcome problem abandoning standard graph view view 
lays call chain stack cubes 
view examined virtual reality environment 
visualizing evolving software real world software changes time software better worse changes 
tools available analyzing changes 
usually extract historical information stored change management systems cvs sccs 
mockus tool extracts complexity size purpose author changes program summarizes information textual webbased reports 
authors note study software changes essential handle large complex data sets 
volume complexity lack structure software change data overwhelm standard statistical analysis tools ball ball describes tool attempts deduce better understanding program development history :10.1.1.48.910
system attempts synthesize views requirements software implementation technology development process organization developers version control system logs source code 
ball ball eick describes system visualizes different aspects software different types representation line representation shows program source scaling levels giving detail overview 
pixel representation shows line code individual pixel 
hierarchical representation model statistics structured data file systems 
cases text pixels color coded show particular statistic interest 
particularly relevant fact system collects information code age 
eick eick visualizes software changes traditional views bar graphs pie charts matrix views views 
large number different types statistics displayed allowing changes system viewed different perspectives 
significant strength system able examine extremely large programs lines code 
similar technique called revision towers taylor el 
taylor munro uses color bars varying thickness height represent current size changes authors piece code 
bars animated time show development software repository 
dynamic graph drawing graph drawing techniques static graphs dynamic graph visualization 
north north studies incremental graph drawing problem system 
brandes wagner adapt force directed model dynamic graphs bayesian framework brandes wagner 
diehl rg diehl rg consider graphs sequence create smoother transitions 
special classes graphs trees series parallel graphs st graphs studied dynamic models cohen cohen 
approaches limited special classes graphs usually scale graphs vertices 
discussion shows sequence snapshots inheritance graph 
notable events 
author broke build checked code compile properly 
problem fixed time slice 
going timeslice large code segment lines code shown green stretching top page removed 
interesting note different authors seen play distinct roles 
author yellow obviously involved core architecture software 
nodes classes introduces lie close center inheritance tree classes extend 
author red prolific generating new classes author introduces classes fringe graph 
specializations core classes presumably implement actual functionality 
reasonable conclude author system architect author programmer 
shows snapshots call graph 
shows early part system consisted main parts gui top obfuscation algorithms bottom 
june new structure created util controlflow mediation point structures 
shown purple 
initially gui calls obfuscation algorithms directly time util controlflow comes existence parts acts intermediary 
shows instance build broken 
shows control flow graph method util execute 
large size graph stand control flow graphs methods identifies candidate refactoring 
furthermore relative absence blue indicating unchanged basic blocks allows deduce method rewritten period 
important note reasonable size programs generated graphs huge 
current test case system consists approximately lines code developed days 
generated call graphs total nodes edges time slices 
inheritance graphs total nodes edges 
actual development time longer days extent cvs record 
control flow graphs consist total nodes edges 
visualizing graphs magnitude daunting task 
techniques uses making graph manageable preprocess displaying contain nodes user currently interested 
system allows user specify regular expression range values particular field node user wishes view 
example control flow graph contains nodes user may interested nodes occur particular package particular author 
summary system visualization evolution software novel graph drawing technique visualization large graphs temporal component 
different types graphs considered inheritance control flow program call graphs 
acknowledgments extraction cvs graphs done christopher 
kelly helped analyzing temporal views 
ball eick 
software visualization large 
ieee computer 
ball kim porter 
version control system talk 
icse workshop process modelling empirical studies software engineering 
brandes wagner 
bayesian paradigm dynamic graph layout 
proceedings th symposium graph drawing gd springer verlag di battista ed vol 
lecture notes computer science 
brown 
exploring algorithms balsa ii 
ieee computer 
brown 
zeus system algorithm animation multi view editing 
tech 
rep 
chidamber kemerer 
metrics suite object oriented design 
ieee transactions software engineering june 
cohen battista tamassia tollis 
framework dynamic graph drawing 
proceedings th annual symposium computational geometry scg acm press berlin frg 
acm siggraph ed 
cohen di battista tamassia tollis 
dynamic graph drawings trees series parallel digraphs planar st digraphs 
siam comput 

collberg 
tool study software protection algorithms 
www cs arizona edu 
diehl rg 
graphs changing 
proceedings th symposium graph drawing gd 
eades 
heuristic graph drawing 
congressus numerantium 
eick graves karr mockus schuster 
visualizing software changes 
software engineering 
fruchterman reingold 
graph drawing placement 
softw 
pract 
exp 
kobourov 
grip graph drawing intelligent placement 
proceedings th symposium graph drawing gd 
goodrich kobourov 
multidimensional approach force directed layouts 
proceedings th symposium graph drawing gd 
halstead 
elements software science 
elsevier north holland 
henry kafura 
software structure metrics information flow 
ieee transactions software engineering sept 
kamada kawai 
automatic display network structures human understanding 
tech 
rep department information science university tokyo 
kamada kawai 
algorithm drawing general undirected graphs 
inform 
process 
lett 

mccabe 
complexity measure 
ieee transactions software engineering dec 
mockus eick graves karr 
measurement analysis software changes 

drawing dynamic trees 
ieee software july 
myers 
visual programming programming example program visualization taxonomy 
acm sigchi conference human factors computing systems 
myers 
taxonomies visual programming program visualization 
journal visual languages computing mar 
north 
incremental layout 
proceedings th symposium graph drawing gd 

control flow data flow program complexity 
proceedings ieee compsac 
price small baecker 
taxonomy software visualization 
proc 
th hawaii int 
conf 
system sciences 
roman cox 
taxonomy program visualization systems 
ieee computer 
storey 
wong fracchia muller 
integrating visualization techniques effective software exploration 

taylor munro 
revision towers 
visualizing software understanding analysis ieee computer press 
young munro 
new view call graphs visualising code structures 
system graph visualization evolution software collberg kobourov pitts snapshots inheritance graph 
nodes colored author latest change 
node appears color author 
example author red author yellow authors green author classes library system classes black 
time step node change color fade blue 
nodes belonging author go color progression author nodes go 
