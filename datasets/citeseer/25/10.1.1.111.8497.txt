nimrod architecture resource management scheduling system global computational grid rajkumar buyya david abramson jonathan giddy school computer science crc enterprise distributed systems technology software engineering general purpose south building monash university campus university queensland st lucia melbourne australia brisbane australia email rajkumar jon monash edu au availability powerful microprocessors high speed networks commodity components enabled high performance computing distributed systems wide area cluster computing 
environment resources usually distributed geographically various levels department enterprise worldwide great challenge integrating coordinating presenting single resource user forming computational grid 
challenge comes distributed ownership resources resource having access policy cost mechanism 
proposed nimrod grid enabled resource management scheduling system builds earlier nimrod follows modular component architecture enabling extensibility portability ease development interoperability independently developed components 
uses globus toolkit services easily extended operate emerging grid middleware services 
focuses management scheduling computations dynamic resources scattered geographically internet department enterprise global level particular emphasis developing scheduling schemes concept computational economy real test bed globus testbed gusto 

popularity internet availability powerful computers high speed networks lowcost commodity components changing way computing 
technology opportunity leads possibility networks computers single unified computing resource popularly called cluster computing 
clusters appear various forms highperformance clusters high availability clusters dedicated clusters non dedicated clusters 
possible cluster couple wide varieties geographically distributed resources computers including supercomputers storage systems data sources special class devices single unified resource forming popularly known computational grids 
computational grid analogous electric power grid provides pervasive access power vision offer dependable consistent pervasive inexpensive access high resources irrespective physical location location access points 
infrastructure expected transforming effect society similar electric power grid trigger emergence new classes applications 
supercomputing driving applications grid computing 
applications include demand just time data intensive collaborative high throughput computing 
large scale parameter study simulation suited high throughput computing :10.1.1.42.8707
involves execution large number tasks task farms range parameters 
scientific engineering applications domain field experts study system behavior need hours days compute time order perform system simulation arrive decision 
experiments usually conducted expensive proprietary supercomputers costing millions dollars purchase additional high maintenance cost 
cost computing drastically reduced existing resources pcs workstations smps clusters scattered department enterprise offices globe 
computational grids expected model computational economy create market interested offering computational resource rental services 
environment application needs additional computational resources run user hire rent resources fly pay uses 
resource price may vary time time user user 
runtime user enter bidding negotiate best possible resources low cost access computational service providers 
order get best value money user reserve resources advance 
computational economy simpler providing layer allows user select deadline period application execution completed price amount user willing pay completion application 
layer responsible individual resources satisfy constraints user requirements resource reservation bidding methods 
order address complexities associated parametric computing clusters distributed systems devised system called nimrod :10.1.1.42.8707
nimrod provides simple declarative parametric modeling language expressing parametric experiment 
domain experts easily create plan parametric computing task farming nimrod runtime system submit run collect results multiple computers cluster nodes 
nimrod run applications ranging bio informatics operations research simulation business processes 
reengineered version nimrod called commercialized active tools 
nimrod system successfully static set computational resources unsuitable implemented large scale dynamic context computational grids resources scattered administrative domains user policies employing queuing system varying access cost computational power 
shortcomings addressed new system called nimrod uses globus middleware services dynamic resource discovery dispatching jobs computational grids 
preliminary monolithic version nimrod discussed :10.1.1.42.8707
mainly discuss architecture new highly modularized portable extensible version nimrod takes advantage features supported latest version globus automatic discovery allowed resources 
furthermore introduce concept computational economy part nimrod scheduler 
architecture extensible grid middleware services netsolve 
rest focuses nimrod architecture interactions grid components scheduling computational economy related 

system architecture architecture nimrod shown key components client user station parametric engine scheduler dispatcher job wrapper interaction components grid resources shown 
client user station component acts user interface controlling supervising experiment consideration 
user vary parameters related time cost influence direction scheduler takes selecting resources 
serves monitoring console lists status jobs user view control 
feature nimrod client possible run multiple instances client different locations 
means experiment started machine monitored machine different user experiment controlled location 
feature monitor control experiment monash university australia argonne national laboratory usa simultaneously 
possible alternative clients purely text client application active sheets extended microsoft excel spreadsheet submits cell functions execution computational grid 
parametric engine parametric engine acts persistent job control agent central component experiment managed maintained 
responsible parameterization experiment actual creation jobs maintenance job status interacting clients schedule advisor dispatcher 
parametric engine takes experiment plan input described declarative parametric modeling language plan created gui manages experiment direction schedule advisor 
informs dispatcher map application task selected resource 
parametric engine maintains state experiment ensures state recorded persistent storage 
allows experiment restarted node running nimrod goes 
parametric engine exposes network interface components allows new components plugged central engine 
scheduler scheduler responsible resource discovery resource selection job assignment 
resource discovery algorithm interacts grid information service directory mds globus identifies list authorized machines keeps track resource status information 
resource selection algorithm responsible selecting resources meet deadline minimize cost computation 
discussion scheduling computational economy see section 
dispatcher dispatcher primarily initiates execution task selected resource scheduler instruction 
periodically updates status task execution parametric engine 
current implementation dispatcher starts remote component known job wrapper 
job wrapper interprets simple script containing instructions file transfer execution subtasks 
job wrapper job wrapper responsible staging application tasks data starting execution task 
architecture nimrod assigned resource sending results back parametric engine dispatcher 
basically mediates parametric engine actual machine task runs 

scheduling computational economy integration computational economy part scheduling system greatly influences way computational resources selected meet user requirements 
handled ways 
systems nimrod user behalf try complete assigned deadline cost 
deadline represents time user requires result imposed external factors production schedules research deadlines 
second user enter contract system pose requests am willing pay complete job deadline 
second case user negotiate resources grid find job performed 
system employ resource reservation trading technique order identify suitable resources 
user proceed changing deadline cost 
advantage approach user knows experiment started system deliver results cost 
extent earlier prototype nimrod followed method able select resources artificial costs :10.1.1.42.8707
system tries find sufficient resources meet user deadline adapts list machines depending competition 
cost changes competing experiments put grid 
implementation second method computational economy part nimrod system complex needs grid middleware services resource reservation broker services negotiating cost underlying system having management accounting infrastructure place 
scheduling system various kinds parameters order arrive scheduling policy optimally complete application execution 
parameters considered include resource architecture configuration resource capability clock speed memory size resource state cpu load memory available disk storage free resource requirements application access speed disk access speed free available nodes priority user queue type length network bandwidth load latency jobs need communicate reliability resource connection user preference application deadline user capacity willingness pay resource usage resource cost terms dollars user need pay resource owner resource cost variation terms time scale high daytime low night historical information including job consumption rate important parameters computational economy influence way resource scheduling done resource cost set owner price user willing pay deadline period application execution need completed scheduler sorts information gathered resource discoverer negotiate resource owners get best value money 
resource offers best price meets resource requirements eventually selected 
achieved resource reservation bidding 
user deadline relaxed chances obtaining low cost access resources high 
cost resources vary dynamically time time resource owner full control deciding access cost 
cost vary user 
scheduler solicit bids tenders computational resource providers open market select feasible service provider 
real challenge resource sellers decide costing order profit attract customers 
nimrod globus components interactions 
implementation interaction various components nimrod grid resources see discussed sections clear need dedicated protocols communication 
nimrod components tcp ip sockets exchanging commands information 
implementation latest version nimrod follows network protocols possible 
order avoid need user understand low level protocols developing library higher level apis accessed extension components inter operating nimrod job control agent 
user build alternative scheduler apis 
earlier version nimrod developed globus toolkit version :10.1.1.42.8707
components globus implementation gram globus resource allocation manager mds metacomputing directory service gsi globus security infrastructure gass global access secondary storage 
current version uses services new features grid directory information services supported latest version globus toolkit version 
globus toolkit expected support resource reservation services 
scheduler services order support market computational economy model discussed earlier 
currently plan build simulated model investigation purposes build real model middleware services available 
dedicated clusters computers beowulf class linux clusters common master node able communicate external world internet nodes interconnected private high speed networks 
accordingly private nodes cluster accessed master node 
order address problem developed proxy server order integrate closed cluster nodes part computation grids 
proxy deployed cluster master node acts mediator external nimrod components cluster private nodes accessing storage 
client running cluster private nodes call accessing data available external system proxy uses globus gass services fetch stage required data 

evaluation purpose new component architectural design nimrod allow extended implemented different middleware services 
new architecture support experimentation computational economy way possible date 
order illustrate potential system show results produced previous monolithic version nimrod real science case study simulation ionization chamber calibration gusto testbed resources :10.1.1.42.8707
experiment ran code different design parameters specified different real time deadlines 
sake completeness results trials conducted april may shown 
machines available trial 
expect repeat trial new architecture near experimentation new computational economy discussed section 
shows effect varying deadline experiment number processors 
surprisingly deadline tightened scheduler needs find resources deadline met 
gusto test bed resources selected change deadline time time due variation availability status resources 
deadline tight scheduler selects large number resources expensive order complete experiment deadline 
case scheduler selected resources keep cost experiment low possible meeting deadline 
clearly demonstrates ability scalability nimrod schedule tasks time cost constraints grid resources 
new architecture allow varied experimentation 

related number projects investigating scheduling computational grids 
include apples netsolve employ concept computational economy scheduling 
rexec supports concept computational economy limited department campus wide network workstations 
apples application level scheduling builds agents application case case responsible offering scheduling mechanism 
uses nws network weather service monitor varying loads resources networks select viable resource configurations 
nimrod offers tool level solution applies applications users required build scheduling agents applications apples 
hours deadline hours deadline hours deadline 
gusto resources usage hours deadline 
netsolve client agent server system enables user solve complex scientific problems remotely :10.1.1.42.8707
netsolve agent scheduling searching resources offer best performance network 
applications need built apis provided netsolve perform rpc computations 
netsolve provides api creating task farms means framing applications needs developed case case basis netsolve apis 
case nimrod non computer scientists easily gui create task farms modifying application 
interesting note netsolve middleware services build system nimrod parametric engine 
concept computational economy supported netsolve offers ability build scheduling agents allows user plug scheduling policies 
distributed information systems control world service oriented metacomputing environment client server server model 
remote users login environment internet request access data invoke services operations available data 
aims remote information access nimrod focuses providing easy transparent mechanism accessing computational resources 
related tool uses concept computational economy rexec remote execution environment campus wide network workstations part berkeley millennium project 
command line user specify maximum rate credits minute willing pay cpu time 
rexec client selects node fits user requirements executes application 
rexec provides extended shell remote execution applications clusters 
offers generic user interface computational economy clusters nimrod aims offering comprehensive specialized environment parametric computing computational grids 
difference rexec executes jobs node computer directly nimrod capability submit jobs queues remote system turn manages compute resources 

evolution nimrod scheduling local computing environment scheduling global computational grid discussed 
particular focused nimrod architecture resource management scheduling computational grid 
various parameters influence scheduling computational grids computational economy 
preliminary results earlier experiment demonstrate scalability ability nimrod making scheduling decisions 
show nimrod relates projects 
focuses economic theories grid resource management scheduling 
components grid architecture computational economy grace include global scheduler broker bid manager directory server bid server working closely grid middleware fabrics 
grace infrastructure offers generic interfaces apis grid tools applications programmers develop software supporting computational economy 
acknowledgments nimrod project supported distributed systems technology centre dstc australian government crc program 
award australian government international postgraduate research scholarship monash university graduate scholarship mgs dstc monash scholarship ieee computer society richard scholarship acknowledged 
jack dongarra university tennessee knoxville berman university california san diego toni cortes universitat de catalunya barcelona hai jin university southern california los angeles motorola india electronics bangalore anonymous reviewers comments 
abramson sosic giddy cope laboratory bench distributed computing simulations parallel computing transputers conference 
abramson sosic giddy hall nimrod tool performing simulations distributed workstations th ieee symposium high performance distributed computing virginia august 
abramson foster giddy lewis sosic white nimrod computational workbench case study desktop metacomputing australian computer science conference macquarie university sydney feb 
abramson giddy high performance parametric modeling nimrod killer application global grid international parallel distributed processing symposium ipdps mexico :10.1.1.42.8707
active tools www com nov 
fran berman wolski apples project status report proceedings th nec research symposium germany may 
buyya 
ed high performance cluster computing architectures systems volume prentice hall ptr nj usa 
casanova dongarra netsolve network server solving computational science problems intl 
journal supercomputing applications hpc vol 
number 
casanova kim plank dongarra adaptive scheduling task farming grid middleware intl 
journal supercomputer applications high performance computing 
chun culler rexec decentralized secure remote execution environment sequential programs special issue cluster computing high speed networks journal supercomputing 
review 
active tools nov www com products html case studies nov cs monash edu au manual writing job plans chap 
www com plans htm manual application programming interface chap 
oct www com plans htm james environment service metacomputing generation computing systems fgcs vol 

dstc project active spreadsheets enterprise wide computational grid distributed systems technology centre 
foster kesselman globus metacomputing infrastructure toolkit international journal supercomputer applications 
foster kesselman 
editors computational grids 
grid blueprint computing infrastructure morgan kaufmann publishers usa 
foster advance reservations scheduling workshop workshop results nasa ames research center argonne national laboratory 
globus grid programming toolkit version www globus org lewis abramson sosic giddy tool parameterisation application perspective computational techniques applications conference melbourne july 
wolski neil spring jim hayes network weather service distributed resource performance forecasting service metacomputing journal generation computing systems vol 
october 
william vipin kumar information power grid new frontier parallel computing ieee concurrency vol 
oct dec 
