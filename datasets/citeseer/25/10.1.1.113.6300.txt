plan distributed system dave presotto rob pike ken thompson howard trickey bell laboratories murray hill new jersey plan computing environment physically distributed machines 
distribution transparent programs giving users administrators wide latitude configuring topology environment 
properties possible process group name space uniform access resources representing files 

plan general purpose multi user portable distributed system implemented variety computers networks 
commands libraries system calls similar unix operating system possible port unix programs plan little changes 
casual user find little difference systems 
distinguishes plan organization 
goals organization reduce administration promote resource sharing 
programming style minimalism 
believe small number chosen abstractions code provide function larger system 
approach unix operating system smaller multics 
building plan generalized proven ideas unix operating system add new untried concepts 
plan divided lines service function 
diskless cpu servers concentrate computing power large multiprocessors file servers provide repositories storage terminals give user system dedicated computer bitmap screen mouse run window system 
sharing computing file storage services provides sense community group programmers amortizes costs simplifies management administration 
cpu servers terminals kernel users may choose run programs locally terminals remotely cpu servers 
plan provides flexibility constraining choice 
users administrators configure environment distributed centralized wish 
users tend terminals workstations running interactive programs locally reserving cpu servers data compute intensive jobs compiling computing chess games 
home connected dedicated baud line users choose run locally remotely reduce communication cost 
applications editor pik split multiple programs choice flexible 
plan shows configured environment 
multiprocessor cpu file servers clustered computer rooms connected megabyte sec point point links pre 
permits cpu servers high performance compute engines starved data 
terminals connected servers lower speed lower cost distribution networks megabit ethernet met megabit incon kal res 
emphasizing shared service clusters quickly cheaply incorporate new technologies arise 
time users wishing autonomy incorporate computing power wish offices losing advantage transparently sharing resources 
distribution network cpu file cpu cpu high speed dma file nationwide long haul cpu file plan topology distribution network cpu cpu high speed dma rest describes features plan possible flexible topology 
information hardware system see previous pik details file server see qui 
minimalism resources process access aside program memory reside name space accessed uniformly 
simply stated resources implemented look file systems henceforth shall call file systems 
file system strict tree links 
file systems traditional type representing persistent storage disk implemented shared file servers 
represent physical devices terminals complex abstractions processes 
file systems implemented kernel resident drivers user level processes remote servers 
file system representing physical device normally contains files 
example rs line represented directory containing actl file 
file stream bytes transmitted received line 
file control channel change device parameters baud rate file systems represent software concepts 
environment variables unix implemented files kernel resident file system 
processes represented directories separate files representing different aspects process memory text file control 
things require system call operating systems represented operations files plan need system call 
file reading id process user id associated process time kernel data structure called channel pointer file 
user level file descriptor just handle kernel channel 
system calls eventually translate primitive operations channels 
attach point channel root file system 
file system told user attaching 
clone copy channel 
new channel points file old 
walk level directory lookup channel point new file directory 
stat get attributes file pointed 
change attributes file pointed 
open check permissions prior channel 
read read opened file 
write write opened file 
close close opened file 
kernel resident file system implemented device driver containing procedure primitive operation 
device drivers accessed indirectly kernel array contains pointers driver primitive procedure 
channel contains offset indicating driver accessing file points 
accessing file systems resident kernel special device driver mount driver 
channels pointing driver contain pointer communication channel 
mount driver turns operations channels request messages written communication channel 
mount driver written multiplexor allowing multiple outstanding messages 
messages communication channel transmitted type channel pipe process network connection rs line 
system call described create new mount device channel supply communication channel 
plan components connected file system protocol 
code encapsulate primitives request reply messages lines long 
mount driver lines long 
compared equivalent nfs code implementing vnodes xdr tiny 
lines code plan lines perform memory management process management hardware interface system calls 
rest different file systems implementing devices networks process control file systems completely self contained complexity kernel code lower lines imply 
working albeit useful kernel configured containing file systems implementing pipes local root console 
totals lines commented code counted ch 
comparison mach micro kernel device drivers lines code calculated re told counting semi colons 
metric minimal kernel lines long size 
fact kernel file system included half size micro kernel 
note similarities parts unix operating system block device switch character device switch file system switch vnodes 
advantage plan recognized essentially mechanism implemented 

virtual name space user boots terminal connects cpu server new process group created processes 
process group starts initial name space provides minimum root binaries processor process running bin local devices dev 
processes group add rearrange name space systems calls mount 
mount call attach new kernel resident file system point name space 
syntax mount int fd char old int flags 
fd file descriptor communication stream pipe network connection old name existing file current name space file system attached 
attachment creates new mount device channel communication channel referred fd 
subsequent accesses old files hierarchy request messages written communication stream 
bind call attach kernel resident file system name space rearrange pieces name space 
syntax bind char new char old int flags new name current name space old mount 
attachment works depends flags specified call 
possibility old file replaced new 
files directories plan allows possibility 
result union directories 
effect putting directory 
case name conflicts files contained directories front wins 
flags specifies new directory replaces goes front goes old 
concept essentially search paths unix libraries various shells 
fact plan search paths uses union directories place 
command executed plan uses directory bin way unix uses execution path 
ability specify complete name space process contains resources process access forms basis true virtual machine 
aspect process world rearranged 
remote objects substituted local ones 
processes implement part name space processes 
capability basis number important services 

cpu command consider shared cpu servers accelerators terminals commands run maintaining environment 
important little possible change running cpu server 
virtual name space provides means cpu servers feel way users 
command cpu calls cpu server network 
daemon process server answers call creates new process group caller sets name space starts shell process new process group 
name space set analogue name space calling process terminal 
particular local resources terminal screen mouse visible server processes place name space terminal 
standard input standard output standard error current directory cpu command remote shell 
directories mounted bin changed contain executables cpu server processor type terminal may cpu server mips 
general user typing cpu command just notices things compilations speed graphics operations slow 
initial handshake pass information describing caller environment cpu command file server answering file system requests network connection 
server daemon mounts network connection terminal standard place mnt term binds resources decides keep places new name space 
example binds mnt term dev mouse dev mouse mnt term dev dev subsequent accesses files converted mount driver cpu server file system messages sent terminal 
local kernel resources referred syntactic escape hack name space 
name starting refers local resource 
character specifies type resource remaining characters parameter specifying instance resource 
bind local console standard place name space bind dev front 

window system user interface files dev writes represent operations screen dev mouse reads return mouse events button clicks movement dev cons reads return keyboard input writes put characters screen 
devices represent user 
window system pik offers processes multiplexed view devices 
window opened window system starts new process group command usually shell run window 
process group name space window system mounts pipe front dev 
subsequent new process group devices sent file system messages window server 
interprets requests accesses window screen 
similarly multiplexes mouse keyboard mouse keyboard input available processes window selected 
result program written kernel resident user interface inside window 
true window system new versions window system run debugged windows current window system 

network gateways insurmountable problem accessing network system physically attached 
example system may connected fra network dod internet 
gateways exist try solve problem performing protocol protocol translation 
unfortunately transport protocols completely equivalent concepts 
order perform best translation necessary know semantics requested program 
example tp message delimiters tcp 
protocol translator going tcp tp know bytes correspond single write sender 
plan network interface file system 
gateway file server serves network interfaces machines 
process wants get remote network connects gateway mounts gateway interface remote network name space 
process accesses interface mount driver send request gateway 
gateway sees exactly process 

file caching building environment reluctant add local disk file systems terminals cpu servers 
essentially reasons choice 
administration 
local disk administer 
disk unique long term state requires knowledge time administer 
fact bell labs computer center murray hill doing business maintaining peoples sun workstations owners time experience necessary 
second reason sharing 
workstations export access local file systems left individual users rarely happens 
terminals users tied particular room 
plan survives local disk file systems partially hardware partially caching 
cpu servers links file servers transfer substantial percentage memory speed 
file servers maintain large main memory caches disk file systems 
servers configured megabytes main memory ensure plenty room cache 
getting file file server generally faster get local disk 
office terminals connected file servers shared megabit sec links 
home terminals baud links 
cases link slower access local disk 
avoid obvious performance hit caching 
keep caches coherent file identifiers supplied file server 
identifiers unique bit quantities 
bits identify file bits identify version file 
version number incremented time file modified 
time file opened file server returns identifier reply 
possible guarantee coherency opening file 
office terminals cache pages executable files 
program terminates unmodified text data pages immediately freed 
retained space required programs 
program rerun executable file current version number returned 
version number changed pages remain run reused 
version number changed remaining pages stale version discarded 
data intensive done cpu servers simple cache saves traffic office terminals file servers 
caching helpful require complexity 
cache sufficed home terminals persistent 
added disks home terminals write caches file server files 
write cache contains state isn duplicated file servers 
needs little maintenance compared local file system 
code discovers disk problem disk discarding current contents 
user suspect cache contaminated request reformatted boot 
system slows subsequent cache information lost 
user need consciously update disk cache uses file identifiers maintain coherency file servers 
time file opened cache discards stale data file 
user doesn copy needs disk done consequence data 
disk cache implemented process resides kernel file server connection 
read request process satisfies data cached disk 
gets rest file server 
new data passes saved disk 
cache fills file discarded 
amount data cached file limited megabytes prevent file displacing 
disk cache checks coherency file opened provides slightly different semantics seen office terminals cache data files 
looser coherency constraint forces programs communicate files ensure open transaction 
far change programs 

distributed system simple structure flexible 
flexibility simplicity result properties process group name space single resource interface 
coupled minimal caching provide simple system usable home 

people helped build system 
especially bart built terminal encouraged program tom duff wrote command interpreter rc tom killian built programmed scsi interface ted kowalski early versions software dennis ritchie frequently provided needed wisdom 
fra 
fraser modular network synchronous asynchronous traffic proc 
int 
conf 
commun boston ma june 
kal 
incon network maintenance privacy internal memorandum bell laboratories 
met 
metcalfe boggs crane taft ethernet local network reports csl xerox palo alto research centers february 
pik 
pike plan window system usenix summer conference proceedings 
pik 
rob pike text editor sam software practice experience pp 
november 
pik 
pike presotto thompson trickey plan bell labs proceedings summer conference london england july 
pre 
presotto plan bell labs network proceedings spring conference london england april 
qui 
quinlan cached worm file system software practice experience appear 
res 
incon wire interface integrated circuit design internal memorandum tm bell laboratories 
