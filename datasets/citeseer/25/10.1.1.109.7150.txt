host intrusion detection dynamic static behavioral models dit yan yeung ding department computer science hong kong university science technology clear water bay kowloon hong kong cs ust hk november intrusion detection emerged network security 
adopt anomaly detection approach detecting possible intrusions program user pro les built normal usage data 
particular program pro les unix system calls user pro les unix shell commands modeled di erent types behavioral models data mining 
dynamic modeling approach hidden markov models hmm principle maximum likelihood static modeling approach occurrence frequency distributions principle minimum cross entropy 
novelty detection approach adopted estimate model parameters normal training data opposed classi cation approach normal intrusion data training 
determine certain behavior similar normal model classi ed normal scheme justi ed perspective hypothesis testing 
experimental results show dynamic modeling approach better static modeling approach system call datasets dynamic modeling approach worse shell command datasets 
static modeling approach similar performance instance learning reported previously shell command database higher computational storage requirements method 
keywords anomaly detection computer security data mining hidden markov model intrusion detection maximum likelihood minimum cross entropy pro ling shell command system call intrusion detection problems intrusion detection refers certain class system attack detection problems relatively new area computer information security 
intrusion detection systems built far general model proposed denning seminal 
high level view goal nd system operating normally 
abnormality anomaly system behavior may indicate occurrence system intrusions consequences successful exploitation system vulnerabilities 
aspect categorization intrusion detection systems target environment detection related systems 
host intrusion detection systems detect possible attacks individual computers intrusion detection systems run 
systems typically information speci operating systems target computers 
hand network intrusion detection systems monitor network behavior examining content format network data packets typically speci exact operating systems individual computers long computers communicate network protocol 
types intrusion detection systems may data mining approach mining host network data collected detect possible attacks internal external intruders 
aspect categorization modeled behavior detection related methods implementing systems 
misuse detection systems detect evidence attacks knowledge abnormal behavior acquired known attacks 
anomaly detection systems hand model normal system behavior provide deviations detected alerted possible intrusions 
words major di erence approaches normal abnormal intrusive behavior modeled explicitly 
misuse detection anomaly detection systems referred knowledge behavior systems respectively 
misuse detection systems typically require known intrusive scenarios hand coded priori scenarios usually speci operating systems approach host systems anomaly detection approach preferred choice host intrusion detection systems pattern recognition machine learning methods density estimation methods may modeling normal system behavior 
data mining methods anomaly detection approach proposed host intrusion detection 
consider normal program pro ling system calls normal user pro ling shell commands :10.1.1.47.6145:10.1.1.50.2488:10.1.1.158.7469:10.1.1.134.4855:10.1.1.46.2976
operating systems unix privileged processes superuser authorized execute system calls access privileged system resources services 
privileged processes major target intruders 
monitor user behavior systems accept shell commands users shell command sequences audit logs user pro ling 
remainder organized follows 
rst discuss section di erent paradigms building behavioral models followed discussions general categories behavioral models section 
speci methods dynamic modeling approach section static modeling approach section 
section system call shell command datasets experiments described :10.1.1.158.7469:10.1.1.46.2976
methods preprocessing data dynamic static models explained 
section details model construction performance evaluation aspects 
justi cation procedure hypothesis testing perspective 
experimental results section 
section contributions summarized possible research issues outlined 
classi cation versus novelty detection typical classi cation problems studied pattern recognition formulated building classi er classi es pattern classes low classi cation error possible 
build discriminative classi er training examples classes needed 
classi er built machine learning techniques approach referred supervised learning 
formulation commonly pattern recognition exists formulation called novelty detection explored classi cation 
simply put novelty detection refers detection novel abnormal events patterns 
probabilistic sense equivalent deciding unknown test pattern produced underlying data distribution corresponds training set normal patterns 
novelty detection problems appear similar class classi cation problems classes corresponding normal abnormal patterns respectively major di erence novelty detection methods typically training examples class corresponding normal patterns build generative model normal behavior 
table summarizes major di erence 
novelty detection approach particularly attractive situations novel abnormal patterns expensive di cult obtain model construction 
model built machine learning techniques refer unsupervised learning approach 
novelty detection approach adopted superior classi cation approach data scarce 
dynamic versus static behavioral models normal program user behaviors pro led building behavioral models data collected normal operations 
generally categories behavioral models 
dynamic models explicitly model temporal variations essential discriminating abnormal system behavior normal behavior 
static models hand explicitly model temporal variations 
anomaly detection problems normal system behavior exhibit signi cant temporal variations temporal sequences rst converted non temporal representation typically form multidimensional feature vectors time dimension 
general dynamic models powerful representing subtle temporal regularities possible 
di erent anomaly detection methods applied 
include instance learning multi layer perceptrons decision trees hidden markov models hmm frequent episodes correlation analysis statistical likelihood analysis rule learning uniqueness method :10.1.1.47.6145:10.1.1.47.6145:10.1.1.158.7469:10.1.1.46.2976
methods hmms intrinsically dynamic nature 
preferred novelty detection approach normal intrusion data model construction 
intrusion detection systems pro ling system call sequences shell command sequences rst studied dynamic modeling approach hmms 
systems seen extensions variants previous hmm intrusion detection systems 
propose information theoretic static modeling approach usage frequencies system calls shell commands 
comparative studies modeling approaches di erent intrusion detection problems di erent operating conditions performed 
dynamic modeling approach hidden markov models maximum likelihood hidden markov models hmms stochastic models sequential data successfully applications knowledge discovery pattern recognition speech recognition 
hmm contains nite number unobservable hidden states 
state transitions governed stochastic process form markov chain stochastic nite state machine 
state state dependent events observed 
emission probabilities observable events determined probability distribution state 
interest discrete hmms observed events system calls shell commands discrete symbols opposed models studied called continuous density hmms 
connectivity topology states types hmms distinguished 
fully connected ergodic hmms allow state transitions state pairs 
hand left right hmms allow state transition back state left current state 
fact left right hmms practice allow state transition state called self transition immediate neighbor right neighbor steps right 
left right hmms restricted rst types state transition shown 
estimate parameters hmm modeling normal system behavior sequences normal events system calls shell commands case collected normal system usage training examples 
expectation maximization em algorithm known baum welch re estimation algorithm mixture density estimation nd maximum likelihood ml parameter estimate 
details algorithm 
sample likelihood respect model trained hmm sample likelihood observation sequence respect computed forward algorithm backward algorithm 
generative point view seen computing probability observation sequence generated model 
alternatively consider providing quantitative measure assessing model matches sequence 
ideally awell trained hmm give su ciently high likelihood values sequences correspond normal behavior 
sequences correspond intrusive behavior give signi cantly lower likelihood values 
comparing sample likelihood respect certain threshold decide deviates signi cantly considered possible intrusion 
describe determine threshold section 
static modeling approach occurrence frequency distributions minimum cross entropy occurrence frequency distributions suppose occurrence frequencies di erent events system calls shell commands measured certain period time 
probability distribution probability mass function de ned space possible events consideration represent occurrence pattern period 
order di erent events occur taken account distribution refer static modeling method 
representation scheme normal program user behavioral model simply represented occurrence frequency distribution basis possible system intrusions detected 
denote probability distribution characterizing behavior normal model denote occurrence probability total possible events 
similarly denote probability distribution individual event probabilities respectively behavior monitored 
follows dependencies explicitly shown sake notational simplicity 
cross entropy distributions characterize di erent distributions need measure quantifying dissimilarity 
information theoretic measure serve purpose known cross entropy related kullback leibler information measure 
purpose de nition cross entropy nx qi pi log qi pi note changing roles ect measure measure symmetric respect distributions involved shown properties hold checking cross entropy larger certain threshold decide considered possible intrusion respect model describe determine threshold section 
data preprocessing partitioning preprocessing system call data system call datasets available public domain archive department computer science university new mexico 
report results unix programs ps login named sendmail 
general executing single program may lead multiple processes 
system calls issued process group form trace 
example table shows system calls corresponding process ids 
system calls grouped traces 
general di erent traces di erent lengths 
intrusion data generated running programs public advisories posted internet 
ps login trojan intrusions allow unauthorized access system built back door 
named data intrusion bu er ow :10.1.1.46.2976:10.1.1.46.2976
sendmail intrusions decode alias attack :10.1.1.47.6145
note ground truth intrusion data di cult vet expect 
program contains anomalous code particular execution program may involve anomalous code generate trace system calls entirely normal 
fact discussed section evidence datasets exception ps possibly attributed 
ideally tohave intrusion datasets contain truly 
require implementation ltering mechanism data generated program general easy materialize 
url www cs unm edu data 
preprocessing shell command data shell command datasets available public domain kdd archive maintained department information computer science university california irvine 
contributed researchers purdue university :10.1.1.158.7469
di cult obtain real intrusion data normal data collected history le mechanism di erent unix users period years 
user login session login logout word typed recorded token 
unix commands followed parameters ls laf notes tex set distinct tokens large manageable 
reduce size token set count les directories represented token actual le directory names ls laf 
similar case system calls tokens login session form trace 
note datasets contain real intrusion data di cult collect data real applications 
holds general kind intrusion detection problems 
experiments normal data users intrusive data user 
nature problem classi cation problem novelty detection problem novelty detection approach desirable practice 
partitioning datasets general set data partitioned subsets di erent purposes 
training set normal data 
threshold determination set normal data 
test set normal intrusion data training set data estimating parameters behavioral model 
normal data needed novelty detection approach 
model built normal data need criterion decide new behavior observed considered normal intrusive 
particular corresponds nding threshold similarity likelihood dissimilarity cross entropy measure 
threshold determination set cf validation set cross validation statistics normal data determining threshold 
model parameters threshold estimated training threshold determination sets respectively test set evaluating performance model 
details performance measures discussed section 
table shows dataset sizes system call data experiments 
available data programs ps login quite limited similarity normal url kdd ics uci edu databases unix user data unix user data html 
determining threshold set data di erent training test sets just special case model selection 
general threshold determination set called validation set parameter selection set 
traces usually quite high system call data con rmed preliminary investigations normal data training separate threshold determination set test set 
tried separate threshold determination set named result better training set determine threshold 
separate test sets available programs named sendmail 
table summarizes dataset sizes shell command data experiments 
discussed user normal data users treated intrusive data user 
test data user measuring false detection rate fdr test data users measuring true detection rate tdr 
performance measures explained detail section available datasets quite large disjoint sets data training threshold determination testing 
partitioning datasets follows 
user shell command traces recorded chronological order partitioned groups tokens rst group roughly twice second group 
second group forms test set 
minimize di erences training threshold determination sets traces rst group assigned sets interleaved manner odd numbered traces assigned set numbered traces assigned set 
sets roughly number traces 
table shows number distinct tokens data user 
datasets users combined total number distinct tokens equal 
model construction performance evaluation performance criteria performance evaluation de ne measures true detection rate tdr false detection rate fdr tdr pr intrusive intrusive number intrusive testing traces detected intrusive number intrusive traces test set fdr pr intrusive normal number normal testing traces detected intrusive number normal traces test set words tdr probability intrusive trace correctly detected fdr probability normal trace incorrectly reported intrusive 
prefer measures relate reporting occurrence intrusive event ground truth normal intrusive nature event 
line convention refer measures true positives false positives respectively :10.1.1.46.2976
term detection meaning detecting intrusions explicit 
hit rate false alarm rate place tdr fdr respectively 
note commonly term called false acceptance rate false negatives expressing pr normal intrusive computed simply subtracting tdr 
model training train hmm xed length sequences events extracted trace training set moving window ofthe speci ed width sequence length entire trace step size 
identical sequences extracted represented single copy inthe training set 
fully connected left right hmms experiments 
follows refer types hmms fc hmm lr hmm respectively 
static modeling approach traces training set create behavioral model 
threshold determination parameters model estimated training data threshold determination set determine appropriate threshold subsequently criterion detecting possible intrusions 
hmm dynamic modeling xed length sequences extracted trace threshold determination set way training data 
sample likelihood sequence respect model computed 
static modeling approach trace threshold determination set compute distribution cross entropy distribution distribution computed training data 
chosen fdr threshold determination set corresponding threshold value obtained 
note case hmms trace said intrusive intrusive sequence 
experiments di erent threshold values tried choosing di erent fdr values 
model testing test trace test set intrusive xed length sequences extracted trace trained hmm compute likelihood values 
sequence likelihood value lower threshold trace said intrusive 
words conclude trace investigation intrusive soon rst intrusive sequence inside trace trace reached 
case static modeling approach order perform timely detection possible intrusions desirable decision soon su cient data collected compute reasonably reliable distribution 
trace may take avery long time complete program generates system calls runs long time user login session long want wait trace decision 
distribution computed sub trace sequence 
cross entropy distribution distribution model computed training data compared threshold determine intrusive sequence 
extraction variable length sequences trace illustrated 
detection possible intrusions trace performed immediately rst events system calls shell command tokens arrived 
refer minimum sequence length 
value small implies possible intrusions detected small time delay favorable 
value set small insu cient information making reliable decisions 
choice appropriate value tradeo considerations 
hypothesis testing perspective section justify scheme testing perspective 
explanation hmms holds information theoretic static modeling method cross entropy 
denote hmm learned training data 
sequence test set want decide generated words want determine normal sequence 
problem formulated applying statistical test 
generate su ciently large sample normal sequences arbitrary sequence likelihood respect denoted equal log pr 
similarly likelihood denoted equal log pr 
empirical probability distribution log pr sample test hypothesis drawn probability distribution log likelihood sequences pr threshold 
reject null hypothesis probability greater implying normal sequence respect model case threshold determination set normal data plays role generated trained model representing training set underlying distributions training threshold determination sets close threshold determination set su ciently large unreasonable threshold determination set apparently see threshold just fdr chosen threshold determination set 
experimental results discussions experiments system call data results experiments conducted system call data dynamic modeling approach fc hmm lr hmm static modeling approach 
tables show results programs ps login named 
di erent choices sequence length number states tried hmms 
sequence length chosen hmm smallest number states maximizes tdr shown 
fc hmm maximum number states tested approximately equal total number di erent system call categories corresponding program ps named sendmail 
fc hmm discrimination power detecting intrusions number states set small smaller 
generally speaking performance improved increasing sequence length number states case 
lr hmm maximum number states tested equal sequence length 
performance sensitive sequence length 
increasing sequence length improved discrimination power model 
similarly static modeling method di erent values minimum sequence length tried 
recall normal data ps login training leaving separate data threshold determination 
hmms threshold chosen minimum likelihood training sequences 
case distribution static modeling cross entropy value computed entire training set trace training set 
threshold chosen maximum cross entropy traces training set 
fdr training set equal 
separate normal data available testing fdr entries programs marked table 
named traces set similar slight change threshold value lead great change tdr 
result determined threshold training set separate threshold determination set normal data 
sendmail determined threshold separate set normal data threshold determination set 
di erent threshold values chosen model con guration making fdr threshold determination set equal 
fdr test set close threshold determination set 
discussed practice separate set normal data determine threshold justi ed hypothesis testing perspective possible 
sendmail example general case system call data 
tdr login named go respectively 
examining training set normal traces traces test set program discovered intrusive traces failed detected intrusive fact identical normal traces training set 
mentioned section possible reason execution program generate normal trace execution involve anomalous part program 
tdr values best obtain 
sendmail data intrusive trace identical normal training trace 
discussions experimental results shown see information theoretic static modeling method consistently inferior hmm dynamic modeling intrusion detection problem involving system calls 
particular model constructed ps pro gram unable detect intrusive trace 
speculate possible reasons 
di erent traces dataset usually quite similar distributions making di cult distinguish normal traces intrusive ones simply basing cross entropy values induced di erent distributions 
second system calls generated execution program modeled nite state machine temporal dependencies system calls salient features intrusion detection captured dynamic modeling techniques 
experiments shell command data results tables show results shell command data di erent methods 
method choices sequence length minimum sequence length included table illustrate ect varying parameter choices tried experiments 
sendmail example threshold chosen way fdr threshold determination set equal prespeci ed value 
chosen fdr value tdr shown average taken individual tdr values treating data users intrusion data 
number states shown minimum value maximizes tdr 
increasing sequence length increased discrimination power fc hmm lr hmm detecting intrusions 
traces shorter sequence length chosen eliminated exist short shell command traces datasets corresponding short login sessions system call traces long typically system calls trace increasing sequence length consequence eliminating shorter traces partially responsible performance improvement traces model behavior 
possible reason observed performance improvement static modeling method minimum sequence length increases 
discussions experiments information theoretic static modeling method performed signi cantly better fc hmm lr hmm typically higher tdr 
possible reason temporal dependencies shell commands weaker particularly useful intrusion detection 
static shell command distribution su cient 
general discussions experiments conclude hmm dynamic modeling approach better suited intrusion detection problem system calls information theoretic static modeling approach better choice shell commands 
fc hmm usually gives slightly better performance lr hmm increasing number states lr hmm approach performance fc hmm fewer states 
example fc hmm sequence length table similar performance lr hmm sequence length table 
note time complexity training iteration fc hmm denotes number states denotes sequence length 
comparison time complexity ofeach training iteration lr hmm wt 
measured cpu execution time di erent methods 
tasks run ultrasparc workstation mb memory 
tables show time required training testing stages measured user experiments reported tables 
seen lr hmm faster fc hmm training testing stages 
information theoretic static modeling method cross entropy impressive training time negligible simply requires computation distribution training data 
testing time comparable hmms 
method particularly attractive new models built regularly due frequent changes system behavior 
comparison previous compared results previous 
facilitate comparison performed experiment experimental setup :10.1.1.158.7469
datasets partitioned training parameter selection threshold determination case test sets shown table 
tdr fdr computed sequences 
think sense measure tdr fdr traces experimental results reported earlier 
facilitate comparison scheme theirs experiment 
table shows classi cation results obtained instance learning ibl giving average tdr average fdr :10.1.1.158.7469
table shows classi cation results obtained static modeling method cross entropy 
average tdr average fdr 
concluded methods achieve similar performance terms tdr fdr measures 
noted major di erences methods terms computational storage requirements 
apparently ibl higher storage requirement training examples explicitly stored 
unknown test case matched stored examples computational overhead high 
data reduction techniques alleviate problems certain extent high computational storage requirements major limitations ibl methods 
method clearly superior aspect training examples summarized distribution storage requirement depend size training set 
similarly testing computational requirement isvery low discussed 
concluding remarks di erent anomaly detection approaches di erent host intrusion detection problems 
intrusion detection problem involving system call sequences dynamic behavioral models superior 
possible reason temporal dependencies salient features problem 
line sequence learning problems subtle temporal relationships hmms best methods 
hand static behavioral models give better results intrusion detection problem involving shell command sequences 
speculated temporal dependencies useful may harmful problem 
information theoretic static modeling approach cross entropy simple computationally cheap outperform sophisticated dynamic modeling approach hmms 
lesson learn careful nding best match problems methods 
apparently static modeling approach cross entropy better match problem dynamic modeling approach hmms 
contributions contributions fold 
hmms cross entropy new solving novelty detection problems opposed classi cation problems area far su ciently explored 
formulating detection problem hypothesis testing framework presents demonstrates theoretically justi ed methods solving novelty detection problems 
hope ort lead research line 
second intrusion detection important topic signi cant practical implications 
contribution application area proposed practically feasible methods solving types host intrusion detection problems extensive experiments performed real world data 
serves ort broaden applications pattern recognition techniques 
research closer look tables reveals fact ibl better users cross entropy method better users 
shows methods complementary 
potential research direction combine methods possibly methods improve discrimination power 
addition host intrusion detection problems conducting research network intrusion detection 
ideas learned current research may relevant intrusion detection 
acknowledgments research reported supported part hong kong innovation technology commission itc project af hong kong university committee ugc areas excellence research aoe 
denning 
intrusion detection model 
ieee transactions software engineering 
debar dacier wespi 
taxonomy intrusion detection systems 
computer networks 
duda hart stork 
pattern classi cation 
wiley newyork ny usa nd edition 
forrest hofmeyr somayaji sense self unix processes :10.1.1.47.6145
proceedings ieee symposium security privacy pages oakland ca usa may 

intrusion detection applying machine learning solaris audit data 
proceedings fourteenth annual computer security applications conference pages phoenix az usa december 
wong honavar miller 
intelligent agents intrusion detection 
proceedings ieee information technology conference information environment pages syracuse ny usa september 
lee stolfo 
data mining approaches intrusion detection 
proceedings seventh usenix security symposium pages san antonio tx usa january 
forrest pearlmutter :10.1.1.46.2976
detecting intrusions system calls alternative data models 
proceedings ieee symposium security privacy pages oakland ca usa may 
ryan lin miikkulainen 
intrusion detection neural networks 
jordan kearns solla editors advances neural information processing systems pages 
mit press 
ru intrusion detection behavioral data 
proceedings third international symposium intelligent data analysis pages amsterdam netherlands august 
lane 
hidden markov models human computer interface modeling 
proceedings ijcai workshop learning users pages stockholm sweden july 
lane brodley :10.1.1.158.7469
temporal sequence learning data reduction anomaly detection 
acm transactions information system security 
lee stolfo mok 
data mining framework building intrusion detection models 
proceedings ieee symposium security privacy pages oakland ca usa may 
schonlau 
detecting intrusion detection unpopular commands 
information processing letters 

autoassociation novelty detection 
science 
bishop 
novelty detection neural network validation 
iee proceedings vision image signal processing 
japkowicz myers gluck 
novelty detection approach classi cation 
proceedings fourteenth international joint conference arti cial intelligence volume pages montreal quebec canada august 
lane brodley :10.1.1.158.7469
temporal sequence learning data reduction anomaly detection 
proceedings fifth acm conference computer communications security pages san francisco ca usa november 
rabiner 
tutorial hidden markov models selected applications speech recognition 
proceedings ieee 
dempster laird rubin 
maximum likelihood incomplete data em algorithm discussion 
journal royal statistical society series 
baum petrie soules weiss 
maximization technique occurring statistical analysis probabilistic functions markov chains 
annals mathematical statistics 
shore johnson 
axiomatic derivation principle maximum entropy principle minimum cross entropy 
ieee transactions information theory 
johnson shore 
comments correction axiomatic derivation principle maximum entropy principle minimum cross entropy jan 
ieee transactions information theory 
kullback leibler 
information su ciency 
annals mathematical statistics 
cohen 
empirical methods arti cial intelligence 
mit press cambridge ma usa 
left right hmm state transition types trace sequence sequence sequence events events events events extraction variable length sequences trace table classi cation vs novelty detection terms data usage classi cation paradigm training validation test set set set class normal data class abnormal data novelty detection paradigm training validation test set set set class normal data class abnormal data table example system calls forming traces process id system call table data partitioning system call datasets program ps login named sendmail 
system call categories 
training traces set 
normal system calls threshold 
determination traces training set set 
normal system calls training set 
test traces training set set 
normal system calls training set 
test traces set 
intrusive system calls table data partitioning shell command datasets threshold training determination test set set set 





user traces tokens traces tokens traces tokens table number distinct tokens user 
distinct tokens total 
user training set distinct tokens table results system call data ps login named minimum sequence 
sequence tdr fdr program model length states length fc hmm ps lr hmm cross entropy fc hmm login lr hmm cross entropy fc hmm named lr hmm cross entropy table results system call data sendmail minimum tdr sequence 
sequence fdr fdr fdr fdr program model length states length fc hmm sendmail lr hmm cross entropy table results shell command data fc hmm tdr fc hmm tdr fc hmm sequence length sequence length 
fdr fdr fdr fdr 
fdr fdr fdr fdr user states states average worst best table results shell command data lr hmm tdr lr hmm tdr lr hmm sequence length sequence length 
fdr fdr fdr fdr 
fdr fdr fdr fdr user states states average worst best table results shell command data cross entropy tdr cross entropy tdr cross entropy min 
sequence length min 
sequence length fdr fdr fdr fdr fdr fdr fdr fdr user average worst best table execution time statistics shell command data fc hmm cpu time sec 
fc hmm cpu time sec 
fc hmm sequence length sequence length 

user states training testing states training testing average table execution time statistics shell command data lr hmm cpu time sec 
lr hmm cpu time sec 
lr hmm sequence length sequence length 

user states training testing states training testing average table execution time statistics shell command data cross entropy cpu time sec 
cross entropy cpu time sec 
cross entropy min 
sequence length min 
sequence length user training testing training testing average table data partitioning shell command datasets comparative study parameter training selection test set set set 





user tokens traces tokens traces tokens traces table classi cation results shell command data comparative study instance learning tested user model user fdr average tdr table classi cation results shell command data comparative study cross entropy tested user model user fdr average tdr :10.1.1.158.7469
