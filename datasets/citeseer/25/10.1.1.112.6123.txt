securering protocols securing group communication kim potter moser melliar smith department electrical computer engineering university california santa barbara ca alpha ece ucsb edu moser ece ucsb edu pmms ece ucsb edu securering group communication protocols provide reliable ordered message delivery group membership services despite byzantine faults caused modifications programs group member illicit access capture group member 
protocols multicast messages groups processors asynchronous distributed system deliver messages consistent total order members group 
ensure correct members agree changes membership correct processors eventually included membership processors exhibit detectable byzantine faults eventually excluded membership 
provide message delivery group membership services protocols unreliable byzantine fault detector 

group communication protocols provide foundation fault tolerant distributed systems built 
coordinating delivery messages group communication protocols easier keep replicated information consistent updated presence faults 
existing group communication protocols resilient crash faults copyright ieee 
published proceedings hawai international conference system sciences january hawaii 
personal material permitted 
permission reprint republish material advertising promotional purposes creating new collective works resale redistribution servers lists reuse copyrighted component works obtained ieee 
contact manager copyrights permissions ieee service center lane box piscataway nj usa 
telephone intl 

effort sponsored defense advanced research projects agency rome laboratory air force materiel command usaf number 
government authorized reproduce distribute reprints governmental purposes notwithstanding copyright annotation thereon 
views contained authors interpreted necessarily representing official policies endorsements expressed implied defense advanced research projects agency rome laboratory government 
handle byzantine faults 
byzantine faults caused modifications programs group member illicit access capture group member 
inserted earlier regular programs group member trojan horse 
describe securering suite group communication protocols provide protection byzantine faults 
protocols multicast messages groups processors asynchronous distributed system impose consistent total order messages maintain consistent group memberships 
approach adopted securering protect byzantine faults optimize performance normal fault free operation pay performance penalty byzantine fault detected expected rare 
protocols require messages digitally signed extra rounds message exchange incur severe performance penalty normal operation 
securering group member embeds digests messages multicast signed token multicasts reduce performance penalty 
developing protocols resistant byzantine faults difficult task starting understood protocols task somewhat easier 
securering protocols inspired totem protocols provide reliable totally ordered delivery messages despite processor crash faults network 
logical token passing ring imposed processors broadcast domain 
total order messages derived sequence number token 
flow control mechanism reduces message loss due overflow processor input buffers membership protocol maintains consistent group memberships 
problems maintaining consistent total order messages consistent group memberships related problem reaching consensus impossible solve asynchronous distributed system subject faults 
problems solved unreliable fault detector 
unreliable popular terminology refers unreliable failure detectors iso standard definitions fault failure properly called unreliable fault detectors 
fault detectors defined environments subject byzantine faults consensus shown solvable environments fault detector provided processors correct system processors 
reiter rampart system provides reliable atomic group multicast asynchronous distributed systems subject process corruption 
achieved echo strategy requires multicast destinations transmission unsigned multicast message signed point additional unsigned multicast message 
rampart membership protocol phase commit strategy 
network underlying rampart provides authenticated fifo channel pair processors 
trans total system provides reliable totally ordered delivery messages asynchronous distributed systems 
byzantine fault tolerant versions total protocol 
membership protocols developed operate top total protocol 
rendering trans total system resistant byzantine faults pursued parallel described 
malkhi reiter described multicast protocol tolerates malicious corruption group members 
method chaining acknowledgments part trans protocol 
protocol provides reliable multicasts reliable totally ordered multicasts provided securering protocols 
assumes static set processors contrast securering supports dynamic membership changes 

system model consider asynchronous distributed system consisting processors communicate messages network completely connected 
refer processors subscripts unnecessary 
processor system unique identifier 
system asynchronous bound placed time required computation communication message 
processors access local clocks clocks synchronized 
processor multicasts messages processors 
processor receives multicast messages 
imposed communication medium logical ring token controls multicasting messages 
configuration view system provided application ring underlying mechanism message ordering protocol operates 
membership configuration consists set processor identifiers 
ring representative chosen deterministically membership identifier consists ring sequence number identifier representative 
regular configuration membership identifier corresponding ring 
transitional configuration membership consisting processors transitioning old ring new ring 
distinguish terms generate originate receive deliver 
message generated application multicast communication medium originated processor multicasts time 
processor receives multicast messages delivers messages total order application 
communication processors unreliable messages may need retransmitted may arbitrarily delayed network assumed partition 
communication channels assumed fifo authenticated 
employ public key cryptosystem rsa processor possesses private key known digitally sign messages 
processor able obtain public keys processors verify signed messages 
protocols employ message digest function md arbitrary length input message mapped fixed length output processor signs message private key encrypt digest message including encrypted digest transmitted message 
system subject processor faults 
processors correct faulty 
correct processors behave specification 
faulty processors exhibit arbitrary byzantine behavior 
byzantine processor may behave crashed include crash faults byzantine faults consider 
regular transitional configuration size require processors correct 
number byzantine processors satisfy 
protocol properties securering protocols consist message delivery protocol primary component membership protocol unreliable byzantine fault detector message diffusion protocol 
organization shown 
pseudocode protocols proofs protocols satisfy properties full version 

message delivery protocol message delivery protocol delivers types messages application 
regular messages generated application delivery application 
regular message contains identifier processor originated 
configuration change message informs fault detector application membership protocol message diffusion protocol best effort broadcasts reliable totally ordered message delivery protocol securering protocol stack 
securering application membership change delivered message sequence regular messages 
securering provides secure delivery configuration defined terms properties integrity 
message contains identifier processor correct processor delivers correct originated processor uniqueness 
correct delivers message correct processor delivers mutant message having identifier contents 
different self delivery 
correct processor originates message configuration configuration change occurs delivers correct processor installs consecutive configurations originates message delivers atomicity 
correct processors members configuration configuration change occurs delivers message delivers correct processors install consecutive configurations delivers message delivers total order 
correct processors deliver messages delivers delivers 
membership protocol message delivery protocol depends membership protocol handle types processor faults masking effects types processor faults 
faults handled membership protocol called detectable byzantine faults 
defer discussion different types faults section discuss unreliable fault detectors 
membership protocol receives information detectable byzantine faults fault detector reconfigures system form new membership 
install new configuration configuration change messages delivered application 
configuration change message introduces transitional configuration includes processors transitioning old ring new ring 
messages old configuration may delivered transitional configuration requirements secure delivery met old configuration met smaller transitional configuration 
second configuration change message introduces new regular configuration 
membership protocol satisfies properties agreement 
correct processor installs configuration correct processor installs configuration having identifier different membership 
self inclusion 
correct processor installs configuration includes total order 
correct processors install configurations installs installs eventual exclusion 
correct processor processor exhibited detectable byzantine fault time installs configuration excludes subsequently installs configuration includes eventual inclusion 
correct processors time installs configuration includes 
fault detector membership protocol depends fault detector properties eventual strong byzantine completeness 
time processor exhibited detectable byzantine fault permanently suspected correct processor 
eventual strong accuracy 
time correct processor suspected correct processor 
accuracy property states eventually correct processor suspected correct processors practice sufficient condition hold long new configuration installed 

message diffusion protocol securering protocols include message diffusion protocol communication special messages membership protocol fault detector retransmission messages recovery phase membership protocol prior installing new configuration 
message diffusion protocol defined terms broadcast receive primitives terms origination delivery 
primitives satisfy properties self receipt 
correct processor broadcasts message eventually receives uniform receipt 
correct processor receives message correct processor eventually receives diffusion protocol works follows 
processor receives message time processor relays processors receives 
communication reliable protocol guarantee properties protocol 
implementation correct processor receive message processor eventually comes suspected faulty correct processors 
communication fault viewed processor fault considered resilience constraint 
diffusion protocol message complexity achieve high efficiency fault free operation securering message delivery protocol employs different strategy achieve secure delivery normal operation 

message delivery protocol securering provides secure delivery messages multicast processors membership 
message delivery protocol provides properties defined section despite malicious attempts disrupt provided processors correct processors byzantine regular transitional configuration size 
data structures message delivery protocol employs number message types local data structures provide secure delivery messages 
proper forms regular message token shown 
sender id seq ring id sender id seq contents regular message ring id aru rtr list rtg list prev token digest message digest list regular token proper forms regular message token 
signature 
regular message 
regular message contains number fields including identifier processor originating message ring identifier message sequence number application specific contents message 
regular messages signed 
identifier regular message consists seq ring id fields 

regular token 
originate regular message ring processor hold regular token referred token 
sequence number message obtained seq field token incremented regular message originated ring 
seq field incremented multicast token token contains unique sequence number 
tokens signed token holder multicasting 
tokens delivered application may retransmitted 
token contains ring identifier ring id field 
identifier token consists seq ring id fields 
token contains aru received field message identifier indicate processor multicasting token received message identifier equal aru 
rtr list retransmission request list field request retransmission regular messages tokens token holder received contains identifiers messages 
rtg list retransmission list contains identifiers messages tokens token holder retransmitted 
digest token received token holder previous token contained previous token digest field message digest list field contains digests regular messages originated token holder 
define relation regular messages tokens originated configuration follows 
regular message originated processor subsequent token multicast contains digest message digest list field write processors immediate predecessor ring successive tokens multicast respectively contains digest previous token digest field write relation regular messages tokens transitive closure relation 

protocol processors pack small messages generated application larger messages packets sign multicast 
packing improves performance reducing number messages multicast 
processor messages multicast fit packet follows procedure form multicast subsequent packets 
refer packet simply regular message 

token processing 
processor receives regular messages subsequent token processor checks messages correspond message digest list field token message digest subsequent token ignored 
token received valid signature ignored 
receives token processor message correspond accepts token contains digest token previous token digest field 
token holder receiving token predecessor computes digest token received places previous token digest field token multicast 
processor updates aru field reflect regular messages tokens received 
failed receive regular messages tokens previously originated processor detected gap message sequence numbers places identifiers messages tokens missing rtr list field token 
received token token acknowledge receipt aru field token multicasts 
processor retransmits messages tokens received retransmission requested rules 
processor retransmits message token identifier appeared rtr list field token received received subsequent tokens processors contain ignores token identifier rtg list field resilience byzantine faults 
message token retransmits places identifier rtg list field token 
retransmissions originates new regular messages generated application 
new message originates places digest message message digest list field token increments seq field token 
finished multicasting messages increments seq field time signs multicasts token 

message delivery 
processor delivers regular message originated configuration size follows 
denote processors ring order token rotation originate message token multicast processor multicast message multicasts multicasting subsequently multicasts processor deliver message delivered message originated sequence number received token token resilience byzantine faults received regular message token originated sequence number token secure delivery ensures correct processor delivers regular message correct processor delivers mutant message reason successive tokens multicast received include token multicast correct processor processor receives mutant token multicast correct processor multicasts token accepted token predecessor correct processor accepts token predecessor 
membership protocol securering protocols include membership protocol reconfigures system processors exhibit detectable byzantine fault 
membership protocol forms new ring consisting apparently correct processors able communicate 
membership protocol satisfies properties defined section despite malicious attempts disrupt provided processors correct processors byzantine regular transitional configuration size communication membership protocol performed message diffusion protocol described section 

data structures membership protocol employs special message types local data structures 
proper forms join message commit token shown 

join message 
processors attempt reach agreement new membership exchanging join messages 
join message contains number fields including sender id ring id seq order join messages broadcast sender proc set contains set processors sender considering membership new ring fault set contains sender id seq ring id proc set fault set signature join message sender id seq ring id aru memb list signature commit token proper forms join message commit token 
set processors sender fault detector suspects faulty 
join message signed 
join messages delivered application 

commit token 
commit token confirm processor committed new membership agreement reached 
commit token contains number fields including sender id ring id seq order commit tokens broadcast sender memb list list identifiers members new configuration 
commit token contains information necessary proper handling messages old configuration delivered 
simplicity information shown 
commit token signed 

local variables 
processor maintains local variables including memb contains membership processor current ring proc set contains set processors processor considering membership new ring 
local variable fault set contains set processors sender fault detector suspects faulty 
local structure agreement indicates processor membership agreement processor proc set fault set 

protocol securering membership protocol described finite state machine states shown 

operational state 
message delivery protocol executed processor operational state 
fault set local fault detector module changes processor shifts gather state 
processor receives properly signed foreign message processor memb fault set processor updates proc set contains union memb identifier foreign processor shifts gather state 

gather state 
message delivery protocol executed processor gather state long join msg received agreement representative suspects change previous membership gather operational foreign message received suspects change suspects change previous membership suspects change suspects change previous commit join msg received agreement suspects change representative commit token received agreement suspects change previous agreement commit delivered configuration change messages recovery commit token received finite state machine membership protocol 
token continues circulate ring 
gather state processors attempt achieve agreement new membership 
done exchanging join messages 
processor shifts gather state broadcasts join message proc set contains processors proc set fault set contains processors fault set received output fault detector 
processor periodically broadcasts join message remains gather state 
processor receives join message gather state checks sequence number greater previous join message sender current configuration 
processor compares proc set fault set fields local data structures proc set fault set respectively 
identical processor records sender join message reaching agreement agreement array 
processor reaches agreement recorded agreement array processor difference proc set fault set reaching agreement difference proc set fault set contains processors local variable memb memb 
number processors processor shifts gather state retains information state transitioning values proc set fault set prior change caused shift gather state 
fault set proc set changes processor gather state processor broadcasts new join message clears agreement array 
proc set fault set identical previous values transition occurred processor shifts back state prior gather state 
processor remains gather state 

commit state 
agreement reached representative member lowest identifier generates commit token contains list members new ring 
commit token broadcast successively processor ring order allows exchange information necessary ensure proper handling messages old ring 
processor periodically broadcasts commit token remains commit state 
fault set local fault detector module changes processor commit state processor broadcasts new join message shifts gather state 

recovery state 
processor commit token member new ring shifts recovery state 
representative shifts recovery state generates broadcasts regular token 
processor recovery state token holder receiving token predecessor processor new ring processor messages tokens received received processors transitioning old ring new ring 
processor signs broadcasts token 
new messages originated processor recovery state 
recovery state rtr list rtg list fields token way message delivery protocol 
fault set processor fault detector changes processor recovery state processor broadcasts join message shifts gather state 
processor determined messages meet delivery criteria old transitional configurations processor atomic action delivers application messages delivered old configuration 
delivers configuration change message initiates transitional configuration consisting processors transitioning old ring new ring 
delivers messages delivered old configuration delivered smaller transitional configuration 
delivers second configuration change message initiates new regular configuration 
shifts operational state 

termination 
termination membership protocol ensured properties fault detector time processor exhibited detectable byzantine fault permanently suspected correct processor time correct processor suspected correct processor 
sender id seq ring id prev token list prev notify signature proper form notify message 
properties hold correct processors reach agreement install new configuration 
fault detector fails satisfy eventual strong byzantine completeness eventual strong accuracy membership protocol may fail satisfy liveness properties eventual exclusion eventual inclusion 
membership protocol continue satisfy safety properties agreement self inclusion total order fault detector properties satisfied 

unreliable byzantine fault detector literature fault detectors defined terms properties terms specific implementation 
question support abstraction real system addressed 
completely asynchronous system impossible implement fault detector properties eventual strong byzantine completeness eventual strong accuracy 
practical systems expected exhibit reasonable behavior time 
assume periods stability bounds relative processor speeds message transmission times assume signatures unforgeable byzantine fault detector implemented 
output fault detector consists list processors suspected exhibiting detectable byzantine fault 
particular instances faults sending mutant signed messages sending signed message properly formed failing forever acknowledge receipt regular message token failing forever send message required message delivery protocol membership protocol 

data structures fault detector uses special message type called notify message exchange information necessary detection byzantine processor sent mutant tokens 
notify messages communicated message diffusion protocol described section 
notify message contains sender id ring id seq order notify messages sent sender list containing tokens sender received described 
notify message signed 
proper form notify message shown 

protocol fault detector monitors messages sent message delivery membership protocols provides output membership protocol form list fault set contains processors currently suspected local fault detector module 

mutant messages 
processor receives token processor checks previous token digest field corresponds previous token broadcasts notify message 
notify message contains signed tokens received including resilience byzantine faults 
processor broadcast notify message current configuration receives properly formed notify message broadcasts notify message contains signed notify message received prev notify field 
processor broadcast notify message periodically broadcasts notify message reaches agreement new membership 
processor receives notify message determines processors sent mutant tokens list signed tokens contained notify message 
adds processors fault set 
processor receives join message broadcast processor checks mutant join message having identifier different contents adds fault set 
similarly receives mutant commit tokens notify messages sent adds fault set 

improperly formed messages 
processor receives token join message commit token notify message proper form processor adds sender fault set 
proper form messages shown figures described 
properly formed notify message contain signed tokens inconsistent notify message prev notify field contains inconsistent tokens 
processor receives signed notify message properly formed adds sender fault set 
processor receives token processor compares fields token received predecessor ring previous token holder 
processor checks seq field differs number message digests contained adds fault set 
processor verifies aru field rtr list field token sent mutually consistent adds fault set 
aru reported correct processor monotonically non decreasing successive tokens 
processor receives regular commit token processor verifies aru reported great aru previous regular commit token sent adds fault set 
byzantine processor attempt disrupt message ordering advancing seq field token including corresponding message digest token multicasting message 
mechanism detect type fault correct processors fail receive non existent message may eliminated failure receive 
processor determines processors membership reported aru included identifier rtr list value remained unchanged predetermined number token rotations processor determines message non existent 
event processor sent token containing digest non existent message added fault set 

failure acknowledge messages 
processor allowed fail acknowledge message indefinitely processors buffer missed message subsequent messages message acknowledged 
processor multicasts predetermined number tokens aru field unchanged identifier appears rtr list field added fault set 
similar strategy messages tokens broadcast recovery state 

failure send messages 
fault detector timeouts detection faults 
token loss timeout set time processor receives token expires received token token holder allotted amount time 
processor heard presumed faulty added fault set 
token loss timeout set processor shifts recovery state expires processor receive token representative allotted amount time 
representative presumed faulty added fault set 
additionally token loss timeout set processor reaches agreement receives commit token expires commit token received 
processor commit token expected presumed faulty added fault set 
byzantine processor token holder selectively multicast token processors successor ring 
occurs processors incur token loss timeout may come suspect token retransmission implemented provide protection type attack reduce probability token lost 
time processor receives sends token sets token retransmission timeout 
receives token resets token retransmission timeout 
token retransmission timeout expires forwards token received sent 
token retransmission timeout shorter token loss timeout 
processor initially broadcasts notify message sets notify timeout 
notify timeout expires processor received notify messages members difference memb fault set processor presumes processors received notify message faulty adds fault set 
agreement timeout set processor gather state reached agreement processors number processors memb reached agreement processors difference proc set fault set 
agreement timeout canceled fault set changes 
agreement timeout expires agreement reached processor presumes processors reaching agreement faulty adds fault set 

removal fault set 
processor added fault set processor timeout expired entry fault set appended indicate suspicion due timeout 
subsequently receives message expecting removes fault set 
processor added fault set processor repeatedly failed acknowledge message token entry fault set appended indicate suspicion due failure acknowledge 
subsequently acknowledges message token removes fault set 
processors sent improperly formed message mutant messages removed fault set membership 

example give possible scenario involving byzantine processors ring processors 
example illustrates multiple byzantine processors cooperate sending mutant tokens 
fault detector able detect faults 
byzantine processor sends message correct processors sends mutant message correct processors cover sends token contains byzantine processor sends mutant messages byzantine processor sends mutant tokens byzantine processor sends mutant tokens byzantine processor sends mutant tokens correct processor sends mutant tokens example multiple byzantine processors cooperate sending mutant tokens 
byzantine processors mutant tokens shaded 
digest processors sends contains digest processors byzantine processor covers sending tokens contain digests respectively 
similarly byzantine processor covers sending tokens contain digests respectively 
shown correct processor sends contains digest processors 
subsequently fault detector modules processors detect inconsistency digest contained multicast notify messages 
leads removal processors membership 
additionally processors deliver message 
securering protocols provide reliable ordered message delivery group membership services asynchronous distributed system logical ring token contains ordering fault detection information 
protocols resistant byzantine faults 
message delivery protocol ensures correct processors configuration deliver messages total order achieves multiple rounds message exchange requiring digital signatures message 
membership protocol ensures correct members agree changes membership correct processors eventually included membership processors exhibit detectable byzantine faults eventually excluded membership 
provide message delivery group membership services protocols unreliable byzantine fault detector 
acknowledgments wish anonymous referees constructive comments michael reiter helpful discussions 
agarwal totem reliable ordered delivery protocol interconnected local area networks 
phd dissertation 
department electrical computer engineering 
university california santa barbara august 
amir moser melliar smith agarwal totem single ring ordering membership protocol acm transactions computer systems vol 
november pp 

chandra toueg unreliable failure detectors reliable distributed systems journal acm vol 
march pp 

fischer lynch paterson impossibility distributed consensus faulty process journal acm vol 
april pp 

moser melliar smith unreliable byzantine fault detectors solving consensus department electrical computer engineering 
university california santa barbara technical report 
moser melliar smith securering group communication protocols department electrical computer engineering 
university california santa barbara technical report 
malkhi reiter high throughput secure reliable multicast protocol proceedings th computer security foundations workshop kenmore ireland june pp 

malkhi reiter unreliable intrusion detection distributed computations proceedings th computer security foundations workshop ma june pp 

melliar smith moser agrawala broadcast protocols distributed systems ieee transactions parallel distributed systems vol 
january pp 

moser melliar smith total ordering algorithms asynchronous byzantine systems proceedings th international workshop distributed algorithms le mont saint michel france september lecture notes computer science pp 

moser melliar smith agarwal papadopoulos totem faulttolerant multicast group communication system communications acm vol 
april pp 

moser melliar smith agrawala processor membership asynchronous distributed systems ieee parallel distributed systems vol 
may pp 

narasimhan moser melliar smith message packing performance enhancement strategy application totem protocols ieee global telecommunications conference london uk november pp 

reiter secure agreement protocols reliable atomic group multicast rampart proceedings nd acm conference computer communications security november pp 

reiter secure group membership protocol ieee transactions software engineering vol 
january pp 

rivest md message digest algorithm internet activities board april 
rivest shamir adleman method obtaining digital signatures public key cryptosystems communications acm vol 
february pp 

