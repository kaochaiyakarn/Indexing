software development objects agents services michael huhns university south carolina department computer science engineering columbia sc usa huhns sc edu www cse sc edu huhns 
software system developers number methodologies available 
set abstractions advantages disadvantages 
surveys available methodologies evaluates regard support reuse robustness 
focuses trends evident software engineering impact trends system development 
concludes current trends anticipated needs converge multiagent service oriented computing methodology 
computing midst paradigm shift 
decades progress representations algorithms geared individual computations emphasis shifting interactions computations 
motivation practical major theoretical implications 
current techniques inadequate applications ubiquitous information access electronic commerce digital libraries involve number independently designed operated subsystems 
metaphor interaction emphasizes autonomy computations ability interface environment 
powerful conceptual basis designing solutions applications 
paradigm shift manifested trends computing multiagent systems 
trends complementary services need ability behave proactively negotiate provided agents agents need capability mutual understanding provided semantic web form ontologies objects processes 
methodologies developing software suitable large distributed applications 
requirements methodology support distributed development execution software reuse robustness 
michael huhns fundamental abstractions programming methodology associated set abstractions characterize approach determine appropriate applications 
abstractions help elucidating benefits limitations methodology 
section describes abstractions methodologies evaluates regard software engineering major goals reuse robustness 
procedural programming earliest programming languages exemplified fortran cobol procedural 
major abstraction supported procedural programming notion algorithm representation instructions suitable von neumann architecture 
procedural programs typically intended executed discretely batch mode specific start 
advantage procedural programming computational efficiency easily optimized representations match computing architecture 
reason compilers easier construct 
early computer systems little memory slow cpus natural design programs close computer systems execute 
resulted limitations procedural programming scale large applications difficult distribute development execution difficult reuse code new applications obscures errors bugs making difficult developers locate repair 
object oriented programming major abstractions supported object oriented programming representations real world entities programming entities 
example object truck random number generator 
representations include properties procedures objects 
benefits oop achieved encapsulation polymorphism inheritance 
encapsulation enables encourages software developed tested modular fashion 
inheritance reuses code automatically improving robustness ease development 
polymorphism easier developers construct modules independently 
disadvantages object oriented programming related lack abstractions support relationships interactions objects 
complex applications typically require objects interoperate coherently 
object designed created known functionality state affected 
lead unanticipated errors 
furthermore passive sense object functionality invoked externally accurate model realworld entities desired 
abstractions object oriented programming wrong simply insufficient 
component design development objects agents services components objects typically larger horizontally having features vertically extend user interfaces operating system hooks 
introduce additional abstraction facility 
important enables objects find locate external functionality wish invoke 
enables developers locate components wish reuse easing development effort major advantage 
disadvantage self description abstraction go far components aid reuse discovered runtime 
objects essentially passive waiting discovered utilized 
agent oriented programming abstractions provided agents derived psychology animate behavior 
psychology abstractions mentalistic state consisting beliefs desires intentions 
animate behavior abstractions active functionality autonomy 
combined activity autonomy enable agent guard unwarranted changes internal state unwanted uses functionality appropriate participation environment 
focus individual agent time resultant systems tend consist complex entities simple interactions deal complex environment 
programming effort concentrated developing complex entities providing knowledge beliefs needed act intelligently environment choose intentions achieve desires 
little effort modeling environment incorporating model agent 
multiagent oriented programming software development multiagent systems takes advantage abstractions derived sociology economy law 
abstractions social consisting commitments obligations 
focus interactions active entities agents passive entities objects environment 
development effort focuses modeling environment importantly agents leading mutual beliefs joint intentions common goals desires 
commitments provide natural abstraction encode relationships autonomous heterogeneous parties 
commitments important organizational control provide layer mediates declarative semantics organizations operational behavior team members 
advantages organizational control michael huhns commitments assigned roles agent fills role inherit role commitments commitments delegated commitments reassigned 
example agent fails meet commitment responsible authority agent release agent commitment delegate commitments negotiated 
agent ask peer take commitment met commitments fail met failure communicated agent authority release original commitment reassign 
obligations commitments follow required policies enable agent reason relationship responsibilities decision making constraints goals 
feature decides organizational policies apply current situation marks unacceptable intended actions inappropriate 
paradigm ideally suited addressing disadvantages inherent earlier paradigms meeting objectives open enterprise wide applications 
requires large population agents mutual understanding requirements capabilities 
service oriented computing described section removes disadvantage providing generators sources agents 
table summarizes major features existing software paradigms features promised service multiagent approaches described 
table 
features programming languages paradigms multiagent procedural object service oriented concept language language language abstraction type class service interaction building block instance data object agent computation model procedure call method message perceive reason act design paradigm tree procedures interaction patterns cooperative interaction architecture functional inheritance managers assistants decomposition polymorphism peers modes behavior coding designing enabling enacting terminology implement engineer activate assessment objects agents services focus build software agents agents fundamental building blocks software engineer agents se agents help construct software agent case tools 
conventional computer science viewpoint behavior module understood executed invoked module human 
understanding practical execution environment open modules complex modules numerous modules learn adapt unfortunately modern enterprise level applications characterized 
applications service oriented computing intended address 
leads potentially feasible achievement programming 
procedural declarative approaches programming suffer primarily line time techniques basis functional decomposition 
object technology improves replacing decomposition inheritance hierarchies polymorphisms 
enables design reuse larger patterns components 
inheritance polymorphism just complex error prone decomposition great complexity interactions objects limits production small community software engineers 
focusing encapsulating data structures objects relationships objects supports data centric view difficult think sequences activity dataflow 
scenarios overcome difficulty depicting message sequences threads control supported current object languages 
service oriented computing service oriented computing relies standardized web services 
current incarnation web services emphasizes single provider offering single service single requester 
keeping client server architectural view web 
service oriented computing provides major benefits 
enables new kinds flexible business applications open systems simply possible 
new techniques improve reaction times organizations people weeks seconds change structure business 
mere quantitative change major qualitative change 
ramifications business conducted 
service oriented computing improves productivity programming administering applications open systems 
applications notoriously complex 
offering productivity gains new techniques kinds applications practical helping bring 
michael huhns additional benefits service oriented computing achieve interoperation applications enterprise provides tools model information relate models construct processes systems assert guarantee transactional properties add flexible decision support relate functioning component software systems organizations represent 
interoperation additionally provides ability interacting parties behaviors may apply local policies autonomously achieve effective coherent processes 
enables customization new applications providing web service interface eliminates messaging problems providing semantic basis customize functioning application 
enables dynamic selection business partners quality service criteria party customize 
enables efficient usage grid resources 
facilitates utility computing especially redundant services achieve fault tolerance 
provides semantically rich flexible computational model simplifies software development 
realize advantages impose requirements loose coupling tight transactional properties generally apply components 
general appropriate specify consistency data information resources parts various components 
reasonable think high level contractual relationships interactions components specified 
implementation neutrality interface matters 
depend details implementations interacting components 
particular approach specific set programming languages 
flexible configurability system configured late flexibly 
words different components bound late process 
configuration change dynamically 
long lifetime necessarily advocate long lifetime components 
dealing computations autonomous heterogeneous parties dynamic environments able handle exceptions 
means components exist long able detect relevant exceptions take corrective action respond corrective actions taken 
components exist long discovered relied engender trust behavior 
granularity participants soa understood coarse granularity 
modeling actions interactions detailed level better capture essential high level qualities objects agents services visible purposes business contracts participants 
coarse granularity reduces dependencies participants reduces communications messages greater significance 
teams framing computations centrally better think terms computations realized autonomous parties 
words participant commanding partners computation open systems matter business partners working team 
individual team cooperating participants better modeling unit 
team oriented view consequence peer topeer architecture seriously 
researchers multiagent systems mas confronted challenges open systems early attempted develop autonomous agents solve problems cooperatively compete intelligently 
ideas similar service oriented architectures developed mas literature 
brand new address fundamental challenges open systems 
clearly time right architectures prevalent 
service oriented computing adds mas ideas ability build conventional information technology standardized manner tools facilitate practical development large scale systems 
engineering soc applications constructing application composing services requires existing services functionalities provide identified 
essential services missing constructed application developer construction sourced 
step select plan specify desired combination services 
composition services executed monitored success faults 
current approaches take procedural view service composition formulating workflow graphs stepped simple manner 
main engineering challenges arise concern standardizing data syntax semantics 
web services attributes set apart traditional closed applications autonomous heterogeneous long lived interact subtle ways cooperate compete 
engineering composition services requires abstractions tools bring essential attributes fore 
requirements expressive highlight potential violations failure modes composition 
engineering composed services requires capturing patterns semantic pragmatic constraints services may participate different compositions 
requires tools help reject unsuitable compositions acceptable systems built 
key aspect design composed service multiagent system maintain global coherence explicit global control 
calls michael huhns means pool knowledge evidence determine shared goals determine common tasks services avoid unnecessary conflicts 
result collaboration 
challenges regarding transport messaging security constraints handled collaboration 
general business collaborations increasingly complex systems dealing multiple collaborations time 
transactions legally bound nonrepudiation condition may satisfied 
lastly usual possibility exceptions 
automating business transactions ontologies agents appealing approach meeting 
steps technologies underway industry 
example oasis biztalk rosettanet standardizing syntax semantics documents exchanged transaction 
needed basis standardizing automating behaviors expected participants transaction 
handled 
example precise specification purchase order say case receive response assume recipient interested po lost 
architecture application specified terms workflow causal model process model goal subgoal graph modeling formalism realized compositions available services 
services local repository located internet 
engineering service oriented computing system process discovering matching appropriate services planning interactions composing run time 
process illustrated 
note deciding tasks decomposing goals subgoals important tasks goals match services available repository ones constructed easily 
unresolved problem services repository typically organized 
consensus software needed research advancements service oriented computing investigate mutual understanding reached autonomous entities consensus behavior agents overlapping interests achieved 
investigating context constructing conventional software agent components 
hypothesize robust software achieved redundancy redundancy achieved agents different algorithms similar responsibilities 
agents produced wrapping conventional algorithms minimal set agent capabilities specify 
initial experiments verifying hypothesis show improvement robustness due redundancy 
advance hypothesis redundant algorithms obtained efforts people outside traditional soft task subgoal subgoal task task subgoal goal subgoal discovering matching planning composing repository directory services webservice webservice task task subgoal objects agents services subgoal 
discovering matching planning composing task subgoal subgoal subgoal fig 

engineering soc system process discovering composing proper services satisfy specification specification expressed terms goal graph top workflow bottom model task michael huhns ware development community 
successful widespread development require tools infrastructure means semantic reconciliation investigate characteristics requirements 
analyzes relationship software systems manage control societal institutions members society 
consensus software internally coherent comprehensible consensus ontologies developing 
second software component industry arising distribute demand components functionality customized user needs 
uniqueness component providers confident components behave properly 
problem solved agent components actively cooperate components realize system requirements user goals 
application executes set geographically distributed parts distributed active object architecture required 
objects part application developed various languages execute various hardware platforms 
simple powerful paradigm needed communications heterogeneous objects 
anticipate agent web services fulfill requirement 
identities resources known application developed infrastructure enable discovery pertinent objects 
object discovered infrastructure facilitate establishment constructive communication new object existing objects application satisfied agent web services 
pattern interaction objects critical part application may vary time important pattern workflow explicitly represented available application user 
object discovered relevant application language interaction pattern interaction object determined 
interaction part larger set object interactions application 
objects collaborate carry application task 
relationship software systems social institutions consequence object oriented programming computer software closely resembles models real world 
non oop paradigms procedural programming methodologies typically model mathematical abstractions 
example fortran subroutine compute matrix inverse oop module represent class automobile 
software mimics world developed way 
software produced small number professional developers world example visit amazon com agent model suggestions purchases model inaccurate way improve 
objects agents services example employer software information model instance employee class contribute directly consciously construction model 
models employees organization constructed centrally 
tension order comes centralization freedom comes decentralization 
reflected similar debates concerning privacy versus security prevention versus protection generally free markets versus centralized economies 
economic historian douglass north believed institutions evolve free markets institutions conceptual structures coordinate activities people 
institutions view consist network relationships including skills strategies norms participants contribute institution 
believed driving force evolution institutions self interest 
current economic organizations facing declines revenues budgets 
common centralized response cut salaries expenses view employee receive minimum salary 
employee individual view receive maximum salary deficit 
receive maximum salary institution fail receive salary 
pressure institution grow receive 
contrast economist john commons viewed institution set working rules govern individual behavior 
rules codify culture practices defined collective bargaining 
result institutions evolve ideally democracy 
example common view employee object allow salary reflect organization budget employee particular contribution organization performance 
individuals contributing accurate model accurate characterization systems behave society easier understand efficient productive satisfying principles better adhered 
societies attempt coordinate control members utilities resources individuals means influence coordination control preferences 
societal services personal services 
decisions centrally collectively system dynamic decisions real time individuals benefit active systems behalf 
examples institutions banking distributing electricity determining routes new roads controlling traffic managing telecommunication networks manufacturing supply chains designing buildings cities 
michael huhns designing engineering agents software engineering principles applied multiagent systems yielded new modeling techniques despite notable efforts 
comprehensive review agent oriented methodologies contained 
agent uml mas commonkads extensions previous software engineering design processes 
gaia developed specifically agent modeling 
investigated applied 
methodologies include methodology mase tropos prometheus roadmap 
agents useful broad range applications software engineering methodologies multiagent systems combination efforts 
combination principles techniques generally give flexible approach fit design team particular expectations requirements 
multiagent systems form fundamental building blocks software systems software systems require agent behaviors 
conventional software system constructed agents modules exhibit characteristics benefits agent modules active closely represent realworld things subjects applications 
modules hold beliefs world especially behavior consistent beliefs behavior predictable reliable modules volunteer part software system compensate limitations modules 
systems constructed dynamically modules system interactions unknown runtime 
modules added system time software continue customized lifetime users proposing investigate agents represent multiple viewpoints different decision procedures produce robust systems 
essence multiple viewpoints multiple decision procedures redundancy basis error detection correction 
bugs errors redundancy software problems typically characterized terms bugs errors may transient omnipresent 
general approaches dealing prediction estimation prevention discovery repair tolerance exploitation 
bug estimation uses statistical techniques predict flaws system severe effects 
bug prevention dependent software engineering techniques processes 
development run time tools aid bug discovery repair tolerance depend redundancy 
redundancy basis forms robustness 
provided replication hardware software information repetition objects agents services communication messages 
redundant code added arbitrarily software system just steel added arbitrarily bridge 
bridge stronger adding beams identical ones equivalent functionality 
turns basis robustness software systems software components equivalent functionality fails perform properly provide needed 
challenge design software system accommodate additional components take advantage redundant functionality 
hypothesize agents convenient level granularity add redundancy software environment takes advantage akin society agents multiple agents filling societal role error 
source 
agents design know deal agents accommodate additional alternative agents naturally 
fundamentally amount redundancy required specified information theory 
want system provide functions robustly introduce agents ways producing function 
group agents understand detect correct inconsistencies behavior fixed leader centralized controller 
consider agent behavior correct incorrect binary notion hamming distance error correcting codes agents detect errors behavior correct errors 
redundancy balanced complexity determined number size components chosen building system 
adding components increases redundancy increases complexity system 
agent system cope growing application domain increasing number agents agent capability computational infrastructure resources agents productive 
agents interactions enhanced maintain redundancy enhanced factor version programming called dissimilar software technique achieving robustness considered consists separately developed implementations functionality 
produce robust systems limited applicability independent implementations times cost implementations flawed specification result flawed system change specification implementations 
database systems exploited idea transactions atomic processing unit moves database consistent state 
consistent transactions achievable databases types processing done regular limited 
applying software execution requires michael huhns state software system saved periodically checkpoint system return state error occurs 
consensus ontologies modeling objects resources agents key enabling agents interact productively construct maintain models passive components environment 
unfortunately agents models mutually incompatible syntax semantics due different things modeled due mismatches underlying hardware operating systems data structures usage 
attempting model portion real world information models necessarily introduce simplifications inaccuracies result semantic incompatibilities 
models related incompatibilities resolved 
entities environment need model entities resulting models maintained 
infeasible large domains 
solve means 
propose agents maintain advertise models resulting total models 
second consider source models 
agent represent acquire information needs construct model representation 
believe simple elegant answer agent presume unknown agents choose represent 
agent learns agents encode differences discovers 
resultant representation concise efficient advantages agent manage kind model kind representation 
inference mechanisms reason behavior reason behaviors agents agent trying predict imagine similar situation 
main criteria agent decide contribute new problem relative importance feature dimension problem degree similarity agent capabilities estimate agent capabilities relative agents capabilities 
agent maximizes problem solving utility rational 
portray agent rational decision maker perceives interacts environment 
case percepts interactions messages received sent agents 
agents rational context agents organization institution aware agents constraints preferences intentions commitments act accordingly 
organizational institutional knowledge typically comes independent sources semantics 
information objects agents services large numbers sources associated organized merged 
hypothesis multiplicity ontology fragments representing semantics independent sources related automatically global ontology 
pair ontologies related indirectly semantic bridge consisting previously unrelated ontologies way determine direct relationship 
relationships ontology fragments indicate relationships sources enabling source information categorized organized 
investigation hypothesis conducted relating numerous small independently developed ontologies domains 
nice feature approach common parts ontologies reinforce unique parts 
result consensus ontology 
problem addressing familiar solutions proposed ranging requiring search criteria precise constructing intelligent search engines requiring sources precise describing contents 
common theme approaches ontologies describing requirements sources 
unfortunately ontologies panacea adheres constructed ontology comprehensive spite determined attempts create cyc project underway 
exist probably adhered considering dynamic eclectic nature web information sources 
approaches relating information large numbers independently managed sites sites terminology agreed semantics improbable site terminology provide translations global ontology difficult site small local ontology related sites described 
hypothesize small ontologies related automatically global ontology 
pair ontologies related indirectly semantic bridge consisting previously unrelated ontologies way determine direct relationship 
methodology relies sites annotated ontologies consistent visions semantic web 
domains sites similar interesting relationships undoubtedly dissimilar ontologies annotated independently 
researchers attempted merge pair ontologies isolation merge domain specific ontology global general ontology 
knowledge previously tried reconcile large number closely related domain specific ontologies 
evaluated methodology applying large number independently constructed ontologies 
agents communicate reconcile semantics 
seemingly impossible ontologies share concepts 
michael huhns ontologies share concepts third ontology third ontology provide semantic bridge relate 
note agents relate entire ontologies portions needed respond request 
difficulty establishing bridge depend semantic distance concepts number ontologies comprise bridge 
methodology appropriate large numbers small ontologies situation expect occur large complex information environments 
metaphor small ontology piece jigsaw puzzle 
difficult relate random pieces jigsaw puzzle constrained puzzle pieces 
expect true ontologies 
attempting relate ontologies system unable find correspondences concepts insufficient constraints similarity terms 
trying find correspondences ontologies yield constraints relate original ontologies 
ontologies related constraints terms pair advantage 
disadvantage constraints conflict 
preponderance evidence resolve statistically 
conducted experiments domains follows asked group graduate students computer science construct small ontology humans people persons domain second group students construct small ontology buildings domain third group students construct small ontology sports domain 
ontologies written owl required contain classes levels subclasses 
merged files domains 
humans people persons ontology domain component ontologies described classes merged ontology contained classes single graph root node owl concept owl thing 
constructed consensus ontology counting number times classes subclass links appeared component ontologies performed merging operation 
example class person matching classes appeared times 
subclass link mammals matches humans matches appeared times 
termed numbers reinforcement concept 
removing nodes links reinforced resultant consensus ontology contained classes related subclass links 
consensus ontology useful information retrieval humans represents way people view world information 
example people wrongly believe kind mammal people find easier locate information placed mammals grouping belonged 
agent web services objects agents services typical agent architectures features web services 
agent architectures provide yellow page white page directories agents advertise distinct functionalities agents search locate agents order request functionalities 
agents extend web services important ways web service knows users clients customers 
agents self aware gain awareness capabilities agents interactions agents occur 
important awareness web service unable take advantage new capabilities environment customize service client providing improved services repeat customers 
web services agents designed reconcile ontologies 
client provider service different semantics result invoking service incomprehensible 
agents inherently communicative web services passive invoked 
agents provide alerts updates new information available 
current standards protocols provision subscribing service receive periodic updates 
web service currently defined autonomous 
autonomy characteristic agents characteristic envisioned internet applications 
autonomy natural tension coordination higher level notion commitment 
coordinated agents keep commitments agent relinquish autonomy 
attempt coordinate appropriate keep commitments exercise autonomy agreeing commitments place 
agents cooperative forming coalitions provide higher level comprehensive services 
current standards web services just address composition 
suppose application needs simply sort data items suppose web sites offer sorting services described input data types output date type time complexity space complexity quality faster handles data types busy returns stream results returns batch costs 
application take possible approaches application invokes services randomly succeeds application ranks services invokes order succeeds application invokes services reconciles results application contracts service requesting bids services self organize team sorting services route requests best 
require services behave agents 
furthermore scalable robust take advantage redundancy available 
michael huhns applications span enterprises autonomous components 
web making possible individuals available information behavior 
semantic web making possible mutual understanding reached autonomous components 
ongoing research consensus software enables individuals participate directly behavior governing institutions 

agirre ansa hovy enriching large ontologies www proceedings ontology learning workshop ecai berlin germany july 

tim berners lee james hendler ora lassila semantic web scientific american vol 
may pp 


antoine jean marc noel plouzeau damien watkins making components contract aware ieee computer vol 
july pp 


coelho luis luis agent design rationale proceedings xi de artificial october pp 


philip cohen hector levesque persistence intention commitment intentions communication philip cohen jerry morgan martha pollack eds mit press 

commons institutional economics place political economy university wisconsin press madison wi 

scott analysis design mase proc 
th midwest artificial intelligence cognitive science conference 

gamma design patterns elements reusable object oriented software addison wesley reading ma 

les gasser social conceptions knowledge action dai foundations open systems semantics artificial intelligence vol 
pp 


michael huhns interaction oriented programming agent oriented software engineering paulo ciancarini michael wooldridge editors springer verlag lecture notes ai volume berlin pp 


michael huhns agent teams building implementing software ieee internet computing vol 
january february pp 


michael huhns multiagent oriented programming intelligent agents potential design synthesis environments ahmed john malone editors nasa langley research center hampton va february pp 


michael huhns munindar singh multiagent treatment agenthood applied artificial intelligence international journal vol 
january march pp 


garijo gonzales analysis design multi agent systems mas commonkads proc 
aaai workshop agent theories architectures languages providence usa 
objects agents services 
garijo gonzalez survey agent oriented methodologies muller singh rao editors proc 
th international workshop intelligent agents agent theories architectures languages atal springer verlag heidelberg germany 

nicholas jennings agent software engineering artificial intelligence vol 
pp 


nicholas jennings commitments conventions foundation coordination multi agent systems knowledge engineering review vol 
pp 


juan pearce sterling extending gaia methodology complex open systems proceedings autonomous agents multi agent systems bologna italy july 

elizabeth kendall margaret chong jiang multiagent system design object oriented patterns journal object oriented programming june pp 


david kinny michael georgeff modelling design multi agent systems muller wooldridge jennings eds intelligent agents iii proceedings third international workshop agent theories architectures languages springer verlag berlin pp 


lenat guha building large knowledge systems addison wesley reading ma 

david martin adam cheyer douglas moran open agent architecture framework building distributed software systems applied artificial intelligence vol 
pp 


north institutions institutional change economic performance cambridge university press cambridge ma 

james odell van dyke parunak bernhard bauer extending uml agents proceedings agent oriented information systems workshop gerd wagner yves lesperance eric yu editors austin tx 

lin padgham prometheus methodology developing intelligent agents proc 
third international workshop agent oriented software engineering july bologna italy 

giunchiglia giorgini mylopoulos knowledge level software engineering methodology agent oriented programming proceedings autonomous agents montreal ca 

pierre practical issues automated categorization web sites electronic proc 
ecdl workshop semantic web lisbon portugal 
www ics forth gr proj semweb program html 
pont practical methodology agent oriented software engineering java leicester university technical report december 

anand rao michael georgeff modeling rational agents bdi architecture proceedings international conference principles knowledge representation reasoning pp 


yoav shoham agent oriented programming artificial intelligence vol 
june pp 


charles intentional ieee computer vol 
may pp 


munindar singh michael huhns social abstractions information agents intelligent information agents matthias klusch ed kluwer academic publishers boston ma 
michael huhns 
taylor hendler efficient management large ontologies proceedings american association artificial intelligence conference aaai aaai mit press pp 


swartout tate ontologies ieee intelligent systems vol 
pp 


clement szyperski component software object oriented programming addison wesley longman 

jose vidal paul buhler michael huhns inside agent ieee internet computing vol 
january february pp 


peter wegner interaction powerful algorithms communications acm vol 
may pp 


gio wiederhold algebra ontology composition proc 
monterey workshop formal methods naval postgraduate school pp 


darrell woelk michael huhns christine tomlinson uncovering generation active objects object magazine july august pp 


michael wooldridge agent software engineering iee proceedings software engineering vol 
february pp 


michael wooldridge nicholas jennings software engineering agents pitfalls ieee internet computing vol 
may june pp 


michael wooldridge jennings kinny gaia methodology agent oriented analysis design journal autonomous agents multi agent systems 

yao ko neches asynchronous information space analysis architecture content structure service brokering proceedings fifth acm conference digital libraries dl san antonio texas june 

edward yourdon java web software development ieee computer august pp 

