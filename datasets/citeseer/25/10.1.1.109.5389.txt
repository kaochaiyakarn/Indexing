parallel functional reactive programming john peterson trifonov andrei serjantov yale university peterson john cs yale edu trifonov cs yale edu andrei serjantov yale edu 
demonstrate functional reactive programming frp framework description interactive systems extended encompass parallel systems 
frp haskell purely functional programming language incorporates concepts time variation reactivity 
parallel frp serves declarative system model may transformed parallel implementation standard program transformation techniques functional programming 
semantics parallel frp include non determinism enhancing opportunities introduce parallelism 
demonstrate variety program transformations parallel frp show frp model may transformed explicitly parallel code 
parallel frp implemented linda programming system handle underlying parallelism 
example parallel frp show specification web online auctioning system transformed parallel implementation 
common approach developing parallel programs express sequential specification system declarative way transform model parallel implementation preserving semantics 
develop framework expressing models interactive systems web servers databases 
functional reactive programming frp library functions types extend haskell pj purely functional language means describing interactive systems containing values vary time 
core frp notions events behaviors 
event type event denotes discrete series occurrences time having timestamp value type behavior type behavior may sampled time yield value type frp defines rich set functions operating datatypes designed retain look feel pure functional haskell resorting constructs monads handle interaction 
enable parallelism frp programs extended basic framework constructs enrich semantics models nondeterminism representing fact order computations separate processors started determine order finish 
formalize process parallelizing frp models introduce number equations define valid transformations sequential frp constructs parallel ones 
transformations performed means understood meaning preserving process equational reasoning 
currently done hand possibly automated 
basic concepts simple frp model web server 
system receives requests web pages urls reacts generating events post resulting web pages 
server event url event webpage server urls urls server simple event transformer 
url incoming event transformed webpage 
event transformation primitive frp function event event implements directly 
actual web page generation performed function haskell function maps url webpage 
assume web pages unchanging pure function perform io 
semantics frp dictate resulting events logically occur time stimulus clock event times associated web pages exactly matches clock input event stream 
example incoming event stream com com com output stream page page page represent event streams lists tuples tuple containing occurrence time value 
necessarily events implemented serves illustrate operation system 
simplifying problem somewhat requests real server carry example ip address port identifying client 
model serves single processor web server parallel version problem 
observe system stateless generated web pages depend incoming url previous transactions 
infer property directly specification stateless definition frp function interactions outside world 
property processors serve requests dividing incoming requests processors arbitrarily 
rewriting new server server event url event webpage server urls urls 
urls urls urls urls event event event 
event event event added standard frp primitives 
merges event streams defined property 
states incoming event distributed resulting event streams 
stands different ways partitioning event stream 
note property guarantee referential transparency calls event stream produce different results 
little free semantics haskell 
reality family event splitting functions simplicity name member family 
strictly speaking give different names examples indicating split event streams potentially different manners 
functions family abide property choose name clarity 
show server equivalent server need frp equivalence distributing 

server urls definition server urls property urls urls urls urls 
urls floating urls urls urls urls 
urls 
urls urls urls urls 
urls definition server server urls server calls 
step implement modified server calls placed different processors 
step back go outside frp framework incorporate explicit message passing resulting processes 
describing haskell linda system handles communication processes 
contemplate serious semantic issue non determinism 
introduced non deterministic construct 
particular system non determinism observable specific event splitting seen user 

removes evidence non determinism result 
model constrains parallel implementation 

problem lies clocking event streams 
semantics frp dictate functions applied event stream take observable time previously explained 
reason require times preserved 
example server respond com com com completely different set timings page page page result completely acceptable fact page served page doesn matter application assuming tagged event requesting ip address sent right client 
pages go separate processors reason delay delivering result second request request completed 
addressing real time issues specifying requests served fixed time arrival presently part model 
need express fact server required maintain ordering output event stream 
accomplished placing pseudo function system model shuffle function semantically allows timings event stream re assigned possibly re ordering sequence events 
thought function non deterministically rearranges event stream shuffle event event model sequentially function may ignored altogether 
model generate parallel code function produces event stream timing may altered parallelization 
single name denote family functions 
strictly speaking shuffle distinct name 
furthermore shuffle serves annotation function 
scope precisely define rules correctly transforming program containing shuffle pseudo functions intuitively functions easily understood 
treat separate uses shuffle different functions 
change original system model server event url event webpage server urls shuffle urls model states results output event stream may arrive different order events input stream permits effective parallelization system 
shuffle function number algebraic properties described 
implementing parallelism haskell linda looking implementation parallel frp need examine low level constructs allow parallel programming haskell 
implemented parallel frp existing parallel programming infrastructure linda 
linda linda paradise commercial version linda implement basic parallel programming services including message passing message broadcast object locking shared objects persistence 
linda paradise system implements global shared memory called tuple space storing just bytes structured haskell objects 
basic access operations write read read remove provided write read provided conventional address spaces 
operations atomic built synchronization 
data transfer processes machines implicit demand driven 
haskell linda tuple space partitioned set regions containing values specific type 
tuple space operations performed context specific region region name embedded operator 
read operation access part tuple space 
scope reading operation may narrowed pattern requiring set fields object known values 
region may contain arbitrary number tuples 
tuple space shared processes values written process may read 
regions storing higher order values defined needed context 
haskell linda implemented preprocessor transforms haskell linda code pair programs haskell connected haskell 
done linda support dynamically constructed tuple space queries pre processor generate code compile time 
distinguished set declarations common haskell programs tuple space defines regions types tuple space 
tuple space operators haskell io monad 
values tuple space ordered way 
read operation may return value designated region matching associated pattern regardless order values placed tuple space 
basic read operation non deterministic tuple matches pattern 
complex disciplines layered top basic tuple space operations 
example reader writer may preserve sequence tuples adding counter data objects 
tuple space functions region name 
function writes values region tuple space 
function reads deletes tuple read delete tuple 
reading functions may optionally select tuples fields match specified values allowed type region defined named fields 
example tuple space definitions region data key int val string read key reads tuples key field 
currently support matching recursive datatypes arbitrary levels nesting 
tuple space allows interprocess communication events 
event producer places event values tuple space event consumer reads deletes event values tuple space 
multiple producers write events region tuple space events implicitly combined 
oper ator 
multiple readers take values event implicit occurs 
haskell linda frp program written functional reactive programming executed engine converts incoming outgoing events haskell linda commands 
frp process uses separate engine function type io event event io io arguments engine input event source frp event transformation dispatcher outgoing events 
event source io action generates events stimulating system 
incoming events timestamped time arrival frp engine clocked locally globally 
event moves process engine timestamp outgoing event dropped new local time stamp placed event enters new frp engine 
eliminates need global clock synchronization restricts way program may partitioned parallel tasks 
engine blocks waiting io action deliver new stimulus 
multiple frp engines may running separate processes fork primitive concurrent haskell processor keep busy frp engines waiting io actions 
returning web server example program defining single server process looks region url region webpage event url event webpage urls urls main server version web server may executed running program different processes share common tuple space 

transformed version server implicit tuple space operations frp engines 
complete web server need add process interfaces server tuple space 
process simply listens incoming requests drops region tuple space listening region sending web pages appropriate ip addresses 
parallel frp parallel frp augments traditional frp ways expands core semantics frp number new functions defines transformation rules increase potential parallelism specifies compilation process transforms system specification set frp processes running parallel communicating haskell linda 
events essential property events system haskell linda moved process 
example consider program pipeline event input event output stage event input event middle stage event middle event output pipeline stage stage encapsulate stages separate process result stage passed stage tuple space 
side effect time elapsed stage computations observable timing event occurrences different event streams fed stages process uses clock timestamp events actual time arrival 
expression reads timestamp event frp primitive different values different stages 
additionally event occurrences propagated second stage order generated stage arbitrary order approach general yield faster implementation changing order occurrences may observable program 
restrictions programs partitioned separate processes losing meaning 
get better grasp restrictions classify event transformers considering relation time transforms events 
time transform events endomorphism event preserves values associated event occurrences may alter times arbitrarily may different order going time transform 
consider event transformer event domain obvious imperative implementation events real time call stateless commutes time transforms intuition value occurrence depends value corresponding time occurrence time independent event transformer commutes monotonically increasing time transforms case value occurrence may depend values earlier occurrences may internal state 
event transformers classes may observe timestamps input events 
denote re timestamping event stream connecting processes marker functions shuffle delay event event pipeline stage delay shuffle stage function shuffle introduced earlier represents unspecified time transform delay unspecified monotonically increasing time transform 
effect functions designate event streams may completely reordered shuffle may delayed remain order delay 
definition shuffle delay commute stateless event transformers delay commutes stateful time independent operators 
equivalences involving functions shuffle shuffle shuffle shuffle delay delay operators observe timestamps placement shuffle delay observable moving markers operator changes meaning program 
give formal proofs equivalences believe proved suitable tools 
frp transformations serve introduce new opportunities parallelism 
example transformation allows event transformation computed stages 
behaviors events behaviors continuously available may observed time 
absence time transforms program piecewise constant global behaviors may implemented directly tuple space single tuple containing current value behavior current implementation haskell linda support shared non piecewise constant behaviors 
illustrate behaviors modify web server example include hit count passed html page formatting routine server event url event webpage server urls urls 
urls urls urls urls event event integer snapshot behavior integer stepper event integer urls 
program structure previous web server addition call 
function gets current value hit counter frp primitive snapshot event behavior event samples behavior event occurrence augments event value include current value behavior 
hit counter behavior generated frp functions stepper event behavior event event event numbers incoming urls behavior value available times 
conversion hit count behavior strictly necessary small example leave embedded event stream 
behavior improves modularity keeping event structure separate hit count 
keeps url stream stateful allowing easier parallelization 
behavior implemented maintaining single tuple designated region tuple space making current value behavior available processes 
producer stepper function deletes old tuple inserts new time stepped event delivers new value 
consumers behavior perform read tuple find current value behavior 
read leaves tuple tuple space producer removes tuple 
point point communication pass events processes tuple space broadcast current value behavior processes 
implementation semantic problem similar encountered earlier connecting processes event streams clocks various processes synchronized behavior may slightly date 
example new url enters system producer may updating hit counter web page construction process reads 
going back non parallel semantics introduce non determinism 
don quite know time behavior sampled 
events add marker function program indicate necessary sample behavior precisely current time 
blur function serves purpose blur behavior behavior example adding blur front function states acceptable see value hit counter close current time quite 
partitioning program independent frp processes semantically correct behaviors share blurred partitioning formally process partitioning specification set parallel programs involves rewriting program set mutually recursive global definitions 
definition corresponds event behavior placed tuple space shared processes 
principles govern partitioning process global event behavior associated unique region tuple space 
events referenced shuffle delay may 
shuffle marker absent hidden counter inserted ensure tuples transferred correct order 
similarly process may global behaviors tagged blur 
semantic marker functions shuffle delay blur removed translation 

define global event implemented tuple space 
event streams process sent multiple regions 
process may produce consume global event stream 
multiple streams combined single type stream union type 
process defines produces shared piecewise constant behavior encodes associated stepper function tuple space operations turn frp events io actions 
exactly process define shared behavior 
exactly process run stateful event transformer task communicating event streams shuffle marker arbitrary number processes may run stateless event transformer 
partitioning process complex fully describe small example little clearer 
split web server hit counter annotated marker functions processes keep track hit counter serve web pages 
assume outside agent places incoming urls regions copy page servers hit counter 
tuple space declarations region url region url region integer region webpage keeps hit counter date 
urls code page server processes urls urls snapshot read function creates behavior io action 

operations implicit tuple space 
code restricted server processes arbitrary number server processes may event transformer stateless 
stateful event handling discussed parallel implementation operator common encounter stateful systems ones transaction modifies system state transaction 
stateful event processing typified frp function event event function takes initial value stream state update functions produces stream values 
time independent stateless event transformer perform sort parallelization compute value event occurrence general wait evaluation previous occurrence update state approach parallelizing stateful event streams consider restricted situation state comprises set independent substates 
example online auction example satisfies restriction incoming requests partitioned auction allowing different processes operate different auctions parallel 
structure resulting program quite similar construction parallel web page server 
difference splitting incoming event stream dictated auction name embedded request 
example auctions named integers may choose processor handle numbered auctions handle odd numbered ones 
investigated different ways partitioning incoming stream requests static partitioning substate resides fixed processor requests routed statically determined way 
interacting requests delivered process 
dynamic partitioning substate resides tuple space 
modify substate process locks 
interacting requests resolved blocking processes 
strategies advantages disadvantages 
static partitioning easily expressed ordinary frp terms filtering merging dynamic partitioning handled frp drivers 
dynamic partitioning requires special rule partitioner generate modified drivers 
dynamic partitioning presents difficulties transactions observe substates 
case domain specific knowledge applied transformation process allow parallel handling stateful requests 
example online auction server demonstration frp suitability distributed transaction processing built parallel web line auction system 
essentially event transformer takes stream inputs turns stream outputs defined data input auction user item description date bid user auction price query auction search item data output webpage webpage mailto user system consists number independent auctions having unique auction identifier database items auctioned answer queries auctions involving particular type item 
incoming events type input get partitioned initiate operation update global state system starting new auction handled event transformer just relate state particular auction query price place bid case passed 
initial system specification quite simple 
auction event input event output auction 
delay suchthat suchthat note real auction doing may want try parallelize simply run multiple copies concurrently 
take approach partition stream auction related events 
resulting model follows auction 

delay suchthat suchthat suchthat suchthat possible partition program create processes add auction names input direct events proper handler suchthat functions run running 
related combining frp paradigm distributed shared memory system linda produce new functional environment facilitates parallel programming 
problem partitioning applications components execution different processors considered 
addressed separately ways frp originally developed conal elliott fran language interactive animations robotics phe computer vision safety critical systems sj 
concurrent functional languages implemented various forms 
concurrent haskell extends haskell small set primitives explicit concurrency designed monadic concurrent ml rep formalized synchronous operations class purely functional values called events functional language eden bkl built top haskell distinguishes transformational reactive systems introduces slightly general versions 
special process abstractions encapsulate nondeterminism keeps referential transparency user processes 
support time varying behaviors notion time 
linda architecture studied widely languages extensions pascal object oriented languages integrated haskell 
lastly idea efficiently partitioning problem web server online auction constituent components run parallel addressed mainly concept skeletons 
imperative world languages cdf developed infer way partitioning problem annotations highlighting regions code task parallelism data parallelism exploited 
version system implemented functional language ocaml 
preliminary large design space 
attempt combine different styles programming declarative style reactive programming imperative style parallel programming represented linda tuple space 
primary contribution incorporation interaction semantic framework parallel system 
specific parallel programming technology linda influenced way built semantic models models ultimately independent underlying implementation mechanisms 
initial effort succeeded number ways applied large variety problems practical importance 
developed reasonable way incorporating non determinism semantics frp controlled fashion 
non determinism restricted behavior event values affecting semantics haskell 
combines operations discrete messages events continuously available values behaviors 
shown declarative executable specification synthesize complex parallel system 
primary problem transformation strategy somewhat ad hoc 
systematic way automate process test equivalence system model generated parallel program 
expect adding appropriate annotations specification allow automation 
able evaluate performance online auction example particularly meaningful way 
observed expected speedup adding processors system effectively measured overhead attributed tuple space 
investigated static partitioning model processes 
dynamic system create destroy processes needed allowing effective resources 
style programming easily supported underlying linda system tuple pattern matching allows essence new global variables created destroyed dynamically 
approached partitioning order higher order manner 
inherent problems adding dynamic partitioning system 
features frp integrated framework 
example time transformation supported difficult reconcile imperative nature tuple space operators 
shortcoming lack interprocess garbage collection 
underlying implementation frp events longer needed removed garbage collector 
parallel system require feedback consumer particular type tuple back producer allowing consumer signal values longer needed 
addressed real time performance criteria 
example interrupt computation progress higher priority task assurances fairness response time 
features require serious enhancements semantics implementation frp 
basic transformations set pipelines multiple processors service stateless event streams easily understood transformations relating stateful event behavior usage harder understand 
expect practical experience necessary develop useful application appropriate set transformations 
formalized semantic basis model 
elliott hudak eh provides semantic basis version frp notion event corresponds occurrence event model ell leading different treatment event primitives 
clear semantic definition frp step proving formal correctness transformations inferring valid set transformations directly underlying semantics 
acknowledgment grateful paul hudak anonymous referees constructive comments 
bkl 
sequential haskell parallel eden implementation point view 
proc 
principles declarative programming plilp alp pages 
cdf 
ana template compiler 
proc 
th parallel computing workshop pcw canberra australia september 
carriero gelernter mattson sherman 
linda alternative message passing systems 
parallel computing 
di cosmo leroy 
parallel functional programming skeletons experiment 
proc 
acm sigplan workshop ml september 
eh elliott hudak 
functional reactive animation 
proc 
acm sigplan international conference functional programming pages june 
ell elliott 
embedded modelling language approach interactive multimedia animation 
ieee transactions software engineering may june 
peterson elliott shu ling 
fran user manual 
research 
microsoft com conal fran htm july 
phe peterson hudak elliott 
lambda motion controlling robots haskell 
proc 
st international conference practical aspects declarative languages padl pages january 
pj peyton jones ed 
haskell non strict purely functional language 
technical report rr yale university february 
peyton jones gordon finne 
concurrent haskell 
proc 
rd acm sigplan sigact symposium principles programming languages january 
rep reppy 
cml higher order concurrent language 
proc 
conference programming language design implementation pages 
acm sigplan june 
reid peterson hudak hager 
prototyping real time vision systems experiment dsl design 
proc 
st international conference software engineering icse may 
sj sage johnson 
declarative prototyping environment development multi user safety critical systems 
proc 
international system safety conference august 
