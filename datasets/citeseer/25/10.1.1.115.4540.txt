tcp westwood bandwidth estimation enhanced transport wireless links tcp westwood tcpw sender side modification tcp congestion window algorithm improves performance tcp reno wired wireless networks 
improvement significant wireless networks lossy links tcp westwood relies endto bandwidth estimation discriminate cause packet loss congestion wireless channel effect major problem tcp reno 
important distinguishing feature tcp westwood respect previous wireless tcp extensions require inspection interception tcp packets intermediate proxy nodes 
fully complies tcp design principle 
key innovative idea continuously measure tcp source rate connection monitoring rate returning acks 
estimate compute congestion window slow start threshold congestion episode duplicate acknowledgments timeout 
rationale strategy simple contrast tcp reno blindly halves congestion window duplicate acks tcp westwood attempts select slow start threshold congestion window consistent effective bandwidth time congestion experienced 
call mechanism faster recovery 
proposed mechanism particularly effective wireless links sporadic losses due radio channel problems misinterpreted symptom congestion current tcp schemes lead unnecessary window reduction 
experimental studies reveal improvements throughput performance fairness 
addition friendliness tcp reno observed set experiments showing tcp reno connections starved tcpw connections 
importantly tcpw extremely effective mixed wired wireless networks throughput improvements observed 
tcpw performs localized link layer approaches popular snoop scheme incurring specialized link layer protocol 
research supported nsf ani high speed networks performance measurements analysis 
mascolo politecnico di bari claudio politecnico di torino mario gerla ren wang ucla computer science department 
effective error congestion control heterogeneous wired wireless networks active area research 
link layer split connection approaches suggested relative merits extensively assessed studies 
drawn studies schemes effective local recovery techniques handling wireless losses promising significant gains achieved extensive support network layer routers base stations :10.1.1.113.2393
motivations propose tcp approach error recovery congestion control wired wireless networks study performance 
known challenge providing tcp congestion control mixed environments current tcp implementations rely packet loss indicator network congestion 
wired portion network congested router reason packet loss wireless link hand noisy fading radio channel cause loss 
creates problems tcp reno possess capability distinguish isolate congestion loss wireless loss 
consequence tcp reno reacts wireless loss drastic reduction congestion window sender transmission rate best strategy fact increase retransmission rate 
approaches address problem discussed compared excellent balakrishnan :10.1.1.113.2393
alternative approaches split connection localized link layer methods carefully contrasted 
best performing approach shown localized link layer solution applied directly wireless links 
clever snooping protocol introduced 
protocol appropriately called snoop monitors packets flowing wireless link related acknowledgments 
protocol entities cache copies tcp data packets monitor acks reverse direction 
packet loss detected duplicate acknowledgments dupacks cached copy local retransmission packet carrying feedback information back tcp sender extracted avoid premature retransmission tcp sender 
protocol effective reducing retransmissions importantly preventing associated reduction congestion window size 
snoop limitations 
requires snoop proxy base station 
tcp sender mobile tcp code modified respond explicit loss notification eln packets base station 
view limitations introduced link layer solutions interest explore recovery solutions independent link layer versatile 
propose handle wireless losses modified version tcp reno 
new version named tcp westwood tcpw short enhances window control backoff process 
tcpw sender monitors acknowledgment reception rate estimates data packet rate currently achieved connection 
sender perceives packet loss timeout occurs duplicate acks received sender uses bandwidth estimate properly set congestion window slow start threshold ssthresh 
backing ssthresh values estimated available bandwidth simply halving current values reno tcp westwood avoids overly conservative reductions ssthresh ensures faster recovery 
experimental studies reveal benefits intelligent backoff strategy tcpw better throughput goodput delay performance fairness competing connections differ propagation times 
addition studies tcpw friendliness coexisting tcp reno reassuring observed tcp reno connections starved presence tcpw connections 
importantly tcpw effective handling wireless loss 
tcpw uses current estimated rate resetting congestion window 
current rate marginally impacted loss long loss relatively small fraction data rate 
simulation results section confirm claim 
example throughput improvement tcp reno observed 
tcp variants bandwidth estimation set congestion window proposed 
knowledge schemes require intervention network layer 
example ba tcp bandwidth aware tcp scheme relies intermediate routers take measurements available bandwidth compute fair share tcp connections 
fair share value piggybacked tcp header conveyed tcp source 
uses appropriately set ssthresh parameters 
ba tcp tcpw similar reliance bandwidth information set congestion control parameters 
ba tcp requires new network layer functions measure available bandwidth compute fair share tcpw relies information readily available current tcp header 
tcpw require support lower layers strictly adheres layer separation modularity principles 
tcpw bandwidth estimation congestion control algorithms discussed section 
tcpw performance behavior wired mixed networks studied sections 
section concludes 

bandwidth measurement ack measurement procedure fundamental design philosophy internet tcp congestion control algorithm performed endto 
network considered black box 
tcp source receive explicit congestion feedback network 
source determine rate transmit probe path progressively increasing input load slow start congestion avoidance phases implicit feedback timeouts duplicate acknowledgments signals network capacity reached 
importance principle 
fact principle guarantees delivery data kind heterogeneous network 
key idea tcp westwood exploit tcp acknowledgment packets derive sophisticated measurements 
propose source perform estimate bandwidth available tcp connection measuring averaging rate returning acks 
congestion episode source receives duplicate acks timeout source uses measured bandwidth properly set congestion window slow start threshold starting procedure call faster recovery 
ack received source conveys information amount data corresponding specific transmitted packet delivered destination 
transmission process affected losses simply averaging delivered data count time yields fair estimation bandwidth currently source 
duplicate acks dupacks indicating reception reach source count bandwidth estimate new estimate computed right reception 
source position tell sure segment triggered dupack transmission unable update data count size segment 
average segment sizes sent far ongoing connection allowing corrections cumulative ack received 
sake simplicity assume tcp segments size 
assumption assume sequence numbers incremented segment sent actual tcp implementation keeps track number bytes notations interchangeable segments size 
important notice immediately congestion episode followed timeout general duplicate acks bottleneck saturation connection delivery rate equal share best effort bandwidth saturation bandwidth available connection 
steady state proper conditions stated section fair share 
saturation condition confirmed fact packets dropped indication intermediate buffers full 
congestion episode bandwidth equal available bandwidth tcp source increasing window probe network capacity 
result tcp westwood adjusts input account network capacity available time congestion current tcp reno simply halves congestion window 
filtering ack reception rate 
ack received source time corresponding amount data received tcp receiver 
measure sample bandwidth connection time previous ack received 
congestion occurs low frequency input traffic rate exceeds link capacity employ low pass filter average sampled measurements obtain components available bandwidth 
notice averaging critical filter noise due delayed acknowledgments 
choice filter important 
experience simple exponential averaging kind tcp rtt estimation unable efficiently filter highfrequency components bandwidth measurements 
propose discrete time filter obtained discretizing continuous low pass filter approximation obtain bk bk 
particular form shows new value bk tk tk 
bound maximum sampling interval obtained inserting virtual sample previous value plus arithmetic average sample bk bk 
filter useful explain average computed networks interarrival time constant 
counteract effect time varying interarrival time coefficients filter depend effect time varying coefficients easy understand 
interarrival time increases value significance represents older value significance samples higher 
exactly happens filter coefficient decreases interarrival time increases meaning previous value significance respect samples multiplied 
bk bk filtered measurement available bandwidth time cut frequency filter 
structure filter simple 
understand works useful consider constant interarrival time tk filter filter constant coefficients filter cut frequency equal 
means frequency components filtered 
nyquist sampling theorem order sample signal bandwidth sampling interval equal necessary 
ack stream may irregular instance acks returned sender idle sampling frequency constraint guaranteed 
guarantee nyquist constraint preserve low pass filter effect establish time elapsed received ack receiving new ack filter assumes reception virtual sample bk 
situation shown fig 
tk time ack received arrival times virtual samples bk virtual samples sample computed ack received interesting look form filter takes persistent absence acks absence acks estimated bandwidth exponentially goes zero 
bk bk bk 
experiments set 
effects delayed cumulative acks bandwidth measurement previously stated dupacks count bandwidth estimation arrival indicates successfully received segment albeit wrong order 
consequence cumulative ack count segment worth data duplicate acks ought taken account 
matter complicated issue delayed acks 
standard tcp implementation provides ack sent back sequence segment received ms timeout expires reception single segment 
combination delayed cumulative acks potentially disrupt bandwidth estimation process 
stress important aspects bandwidth estimation process source keep track number dupacks received new data acknowledged source able detect delayed acks act accordingly 
approach chosen take care issues procedure detailed showing set actions undertaken reception ack correct determination number packets accounted bandwidth estimation procedure indicated variable acked pseudocode 
key variable accounted keeps track received dupacks 
ack received number segments acknowledges determined ack 
ack equal received ack clearly dupack counts segment dupack count updated 
ack larger received ack delayed ack cumulative ack retransmission event case number acked segments checked number segments accounted accounted 
received ack acknowledges fewer number segments expected means missing segments accounted dupacks received counted twice 
received ack acknowledges segments expected means part accounted way dupacks rest cumulatively acknowledged current ack current ack count cumulatively acknowledged segments 
noted condition correctly estimates delayed acks ack 
procedure ack current ack seqno ack seqno ack accounted accounted ack endif ack accounted ack accounted accounted ack ack accounted ack ack accounted endif endif ack seqno current ack seqno acked ack return acked procedure 
tcp westwood section describe bandwidth estimation congestion control algorithm executed sender side tcp connection 
explained congestion window dynamics slow start congestion avoidance unchanged increase exponentially linearly respectively current tcp reno 
general idea bandwidth estimate set congestion window slow start threshold ssthresh congestion episode 
start describing general algorithm behavior duplicate acks coarse timeout expiration 
algorithm duplicate acks pseudocode algorithm dupacks received ssthresh seg size ssthresh congestion avoid 
ssthresh endif endif note seg size identifies length tcp segment bits 
congestion avoidance phase probing extra available bandwidth 
dupacks received means hit network capacity case wireless links segments dropped due sporadic losses 
slow start threshold set equal available pipe size bottleneck buffer empty congestion window set equal ssthresh congestion avoidance phase entered gently probe new available bandwidth 
value set smallest rtt sample observed duration connection 
setting allows queue drained congestion episode 
slow start phase probing available bandwidth 
obtain duplicate acks set slow start threshold 
ssthresh set congestion window set equal slow start threshold ssthresh 
words slow start features exponential increase current implementation tcp reno 
algorithm coarse timeout expiration pseudocode algorithm coarse timeout expires ssthresh seg size ssthresh ssthresh endif endif rationale algorithm simple 
timeout ssthresh set equal respectively basic reno behavior captured speedy recovery granted ssthresh set bandwidth estimation time timeout expiration 
tcp westwood convergence fair share important goal tcp implementation connection get fair share bottleneck 
informal argument similar reno show tcpw achieves fair share 
consider case connections rtts 
suppose sake example rtt packet transmission times bottleneck buffers 
connection say starts 
window cycles tcpw algorithm described earlier section cycle terminating buffer overflows 
connection starts slow start mode congestion avoidance mode 
congestion avoidance cycle windows grow approximately rate segment rtt 
eventually bottleneck buffer overflows terminating cycle 
show window overflow rtt achieved rate bottleneck buffer size bottleneck trunk capacity 
general property true tcp protocols particular tcpw 
overflow tcpw reduces windows new values asfollows rtt ratios windows preserved overflow 
ratio keeps increasing congestion avoidance 
consequently window throughput ratchet cycle 
equilibrium reached connections windows bandwidth fair share 
graphically illustrates convergence fix point informal proof validated actual simulation results 
generalized simultaneous connections rtt 
applied case bottleneck affected random errors equally hitting connections 
connection window equal bandwidth share connection window bottleneck overflow zero backlog 
convergence fair bandwidth sharing 

tcp westwood performance fairness friendliness section report basic performance behavior tcpw fairness number tcpw connections sharing bottleneck link friendliness coexisting connections tcp variants reno 
effectiveness bandwidth estimation algorithm studied single tcp connection fluctuating udp traffic rate 
tcpw window dynamics ssthresh sequence numbers considered 
tcpw performance behavior compared standard widely tcp reno tcp sack 
simulations run lbl network simulator ns ver 
new simulation modules tcp westwood written available existing modules simulations involving tcp reno tcp sack 
simulated tcp receivers implement delayed acks 
notice introduces complication bandwidth estimation algorithm delayed acks represent noise filtered explained section 
scenario involving different bottleneck link capacity rtt number concurrent connections includes link common literature 
intermediate node buffer capacity set equal bandwidth delay product scenario study 
packet size set bytes experiments 
ack arrival pattern repetitive rtt absence packet losses errors buffer overflow 
interval span rtts 
experimentally observed performance sensitive choice long rtt 
experiments set equal ms 
bandwidth estimation effectiveness section test effectiveness proposed bandwidth estimation algorithm 
purpose consider single tcpw connection sharing bottleneck link udp connections 
packets queued transmitted link fcfs order 
addition demonstrating accuracy bandwidth estimation algorithm scenario illustrates capability tcp westwood connection bandwidth left dynamic udp flows 
configuration simulated features mb bottleneck link way propagation delay ms 
tcp connection shares bottleneck link udp connections tcp udp packets assigned priority 
udp connection transmits constant bit rate mb 
udp connections start state udp connection turned joined second second connection follows pattern times time udp connection turned 
udp connections remain silent simulation 
tcpw connection sends data simulation 
scenario intended demonstrate effectiveness feedback control tcpw subjected step impulse stimuli 
behavior bandwidth estimation process shown fig 

bandwidth estimation mb sec bw estimate actual bw time sec 
tcpw concurrent udp traffic bandwidth estimation tcpw fairness fair bandwidth sharing implies connections provided similar opportunity transfer data 
experiments show tcpw fairness better provided widely tcp reno 
sample results show flows different round trip times rtt share bandwidth effectively tcpw tcp reno 
sequence segments ms westwood ms reno ms reno ms westwood time sec 
sequence numbers vs time long short rtt connections red ran simulations connections subject ms ms rtt respectively 
show sequence number progress tcpw reno connections red respectively 
cases short connection progresses faster expected 
note tcpw provides better fairness reno different propagation times 
reason superior fairness exhibited tcpw long connection suffers reduction ssthresh 
reno reduction independent rtt 
results show protocols benefit red far fairness concerned 
remarkably improvement tcpw due red higher improvement reno 
sequence segments ms westwood ms reno ms reno ms westwood time sec 
sequence numbers vs time long short rtt connections red tcpw friendliness friendliness important property tcp protocol 
tcpw friendly tcp variants 
tcpw connections able coexist connections tcp variants providing opportunities connections progress satisfactorily 
tcpw connections result starvation connections running tcp variants 
better bandwidth share tcpw connections equal fair share 
ran simulation experiments parameters mbps bottleneck link flows total flows ms rtt 
connections running tcpw average throughput connection mbps 
reno connections resulted average throughput mbps 
predicted got results schemes 
ran reno westwood connections sharing mbps bottleneck link path ms rtt 
average throughput tcpw connection went reno connection went 
shows tcpw behavior departs fair share tcpw gains tcp reno loses 
unfairness moderate tolerated allows coexistence reno 
probe friendliness issue carried actual measurements tcpw linux implementation lab 
shows topology lab test bed 
link emulator vary link propagation time error characteristics 
average throughput mb sec average throughput mb sec 
experimental test bed layout link westwood reno lossy link westwood reno 
average throughput vs 
reno connections lossy link connections total measured throughput total connections variable reno tcpw mix 
evaluate friendliness tcpw stress introduce relatively high error rate bottleneck link packet loss see 
error rate appropriate wireless links shall discuss 
note tcp west presence line errors friendliness error situation difficult establish error free operation 
rtt ms 
error rates propagation delays introduced test bed link network emulator 
shows average throughput connection tcpw reno 
lower average throughput line reno connections 
horizontal axis represent number reno connections mix 
example point marked horizontal line measurement experiment includes reno connections tcpw connections results illustrate important points 
tcpw significant edge high error rate environment tcpw get throughput tcp reno 
press 
secondly friendliness preserved 
tcpw advantage reno error prone environments reno connections starved 
fact tcpw connections mix reduces average throughput reno connection minimal amount 
practical purposes claim tcpw friendly 

tcpw performance mixed wired wireless networks tcpw proposed solution error congestion control mixed wired wireless networks 
view claim number different scenarios studied show benefits tcpw wired wireless environments 
independent correlated loss models 
ground radio satellite scenarios developed studied 
independent loss model ground radio environment mb ms mb ms bs 
simple simulation topology shows topology mixed network wired portion including mbps link source node base station 
propagation time wired link initially assumed ms 
propagation time varied ms represent variety wired network environments ranging campus connections 
throughput mb sec loss rate packets westwood reno sack 
throughput vs error rate wireless link wireless portion network short mbps wireless link propagation time ms 
wireless link assumed connect base station destination mobile terminal 
errors assumed occur directions wireless link 
compare throughput tcpw reno sack assuming independent bernoulli errors ranging packet loss probability 
error model assumed equivalent exponential error model time successive errors exponentially distributed :10.1.1.113.2393
range error rates assumed similar range :10.1.1.113.2393
results show tcpw gains reno sack 
gain occurs realistic packet error probability 
assess tcpw throughput gain relation propagation time ran simulations wired portion propagation time varying ms 
results show significant gain tcpw propagation time ms 
propagation time small say ms protocols equally effective 
small window adequate window optimization issue 
tcpw reaches maximum improvement reno sack propagation time increases ms 
experiment gain starts decrease feedback information estimate available bandwidth arrives late significant help tcpw 
throughput mb sec westwood reno sack way propagation time msec 
throughput vs way propagation delay simulation results show tcpw gains increase significantly bottleneck link transmission speed increases matters window size determined bandwidth delay product 
tcpw effective tcp reno utilizing gbps bandwidth provided new generation high speed networks 
shows improvement obtained tcpw increases approximately wireless link speed reaches mbps 
error model bernoulli parameter propagation time ms 
throughput mb sec uniform error rate bottleneck link westwood reno sack throughput vs link capacity window dynamics tcpw tcp reno 
graphs show improved window dynamics tcpw 
ssthresh values consistently higher corresponding values reno yielding higher throughput compare tcpw snoop leading local strategy shown provide biggest improvement tcp reno 
published results show snoop provides approximately improvement approach tcp reno error rate bit kbytes round trip propagation time ms 
simulations similar parameter values show tcpw provides segments ssthresh congestion window time sec 
tcp westwood lossy link ssthresh segments ssthresh congestion window 
tcp reno lossy link ssthresh improvement reno 
shows tcpw snoop gains remarkably close 
plan probe issue effectiveness local versus error recovery simulation measurements 
qualitative protocol implementation standpoint note tcpw completely require support network link layers 
scalability problems snoop may encounter number mobile terminals increase 
effectiveness snoop wireless subnets including multiple base stations handoffs clear 
explicit loss notification eln scheme introduced assessed :10.1.1.113.2393
basically method provides explicit notification tcp receiver tcp sender loss due link error occurred 
lost packet identified sender tcp entity 
parameter values bit kbytes error rate ms propagation time eln shown provide gain approximately reno 
comparison tcpw provides closer snoop performance 
eln assumes destinations detect errors link identify packet tcp source 
assumptions uniformly satisfied various error causes various link technologies limitation versatility eln addition limited gain reno 
compared simulation tcpw ba tcp alternative strategy routers explicitly measure relay bandwidth available connection back tcp sender 
ms round trip time bit kb error rate ba tcp improvement reno 
tcp westwood throughput improvement parameter values 
quite remarkable considering ba tcp measures bandwidth available connection bottleneck router tcpw works support routers estimate available bandwidth bottleneck 
note router functionalities required ba tcp available today routers 
burst error models ground radio environment study tcpw performance correlated errors state markov models :10.1.1.41.816
models burst errors occur high rate due variety conditions associated terminal mobility 
conditions include variable fading blackouts due shadowing 
depicts state markov model 
wireless link assumed states bad 
state bit packet error bernoulli model assumed 
time intervals bit errors exponentially distributed memoryless channel errors 
addition link assumed stay state time interval exponentially distributed parameter gb time spent bad state exponentially distributed parameter bg 
bad state assume errors bernoulli rates errors bad state higher 
simulation experiments vary error rate bad state depending specific link conditions want study 
represent fading conditions bit error rate assumed range 
blackouts error rate 

state markov model burst error characterization simulation results state markov models show tcpw improves throughput links fading blackouts discussed 
fading bad state represent fading conditions mean duration bad states sec respectively 
error rate state assumed packet loss error rate bad state varied packet loss rate 
results show improvement obtained tcpw reno sack 
tcpw increases throughput 
achieved error rate bad state 
error rate higher protocols perform poorly 
error rate tcpw provides improvement 
varied link speed determine impact protocols performance 
throughput mb sec gb bg bad westwood reno sack loss rate burst error state packets 
throughput vs error rate bad state throughput mb sec error rate bad state westwood reno sack 

throughput vs link capacity state error model shows tcpw improvement increases wireless link bottleneck link case increases expected similar trend observed wired links 
mbps link speed throughput improvement achieved error rate bad state packet loss 
blackouts assume bad state represents blackout base station temporarily visible terminal due mobility 
mean duration state sec mean duration bad state varies sec shows throughput improvement obtained tcpw reno sack mean blackout duration sec 
longer blackouts tcp timeouts occur protocols equally affected 
throughput mb sec westwood reno sack duration blackout period sec throughput vs average duration blackout leo satellite model environment tcpw valuable leo satellite system 
leo satellites environment varying link quality relatively long propagation delay 
higher transmission speeds expected 
tcpw beneficial 
considered study scenario single hop satellite earth terminal connects terminal gateway terrestrial network 
way terminal gateway propagation time assumed ms 
error rate assumed normal operating conditions 
occasionally leo system supports satellite diversity handoff different leo satellite different orbit necessary overcome blocking due buildings thick foliage handoff assume packets lost 
model handoff satellite needs ms complete period handoffs say 
shows major improvements tcpw reno sack especially high speeds 
westwood reno sack throughput mb sec transmission speed leo link mb sec 
throughput vs link capacity satellite link 
research proposed new version tcp protocol tcp westwood tcpw short aimed improving performance random sporadic losses 
tcpw tested simulation showing considerable throughput gains wireless scenarios 
retrospect new scheme viewed step tcp evolution 
tcp tahoe resets 
tcp reno halves duplicate acks 
tcp westwood introduces faster recovery mechanism avoid shrinking duplicate acks 
account estimation bandwidth available tcp 
bandwidth estimation feedback control congestion window effect goes faster recovery 
tcp window congestion control solely packet loss ambiguous congestion indicator presence wireless links bandwidth estimate time loss 
benefits bandwidth estimation addition packet loss amply demonstrated broad range wireless scenarios 
issue friendliness raised previous reviewers addressed 
qualitative proof fair behavior appropriate conditions provided 
unfriendly trends due tcpw aggressiveness detected experiments shown contained severe lead starvation 
code modifications required implement tcp westwood comparable ones implemented transition tcp tahoe tcp reno 
tahoe reno transition major advantage tcp westwood modification affects source tcp opposed variants tcp sack require destination modifications 
allows tcp westwood source destinations internet 
progress directions 
directions indicated anonymous referees thorough reviews valuable comments 
planning include tcpw newreno feature allows efficient recovery multiple losses window 
aware cases bottleneck link backward path receiver sender 
cases bottleneck fairly shared data packets connections acks connections 
plan attack problem defining suitable measure fairness data ack streams 
fairness defined equal throughput connections regardless data ack bound data packet size connections show tcpw provides fair solution equilibrium connections measure 
comparison tcpw link level techniques snoop deserves study 
clear link level recovery general powerful recovery isolates corrects loss 
instance suppose bottleneck wired network connections sharing bottleneck goes wireless lossy link 
recovery tcpw tcp reno alike wireless connection heavily penalized respect 
link layer recovery snoop fair sharing enforced 
tcpw performs poorly random packet loss rate exceeds percent 
snoop hand quite robust high error rates 
investigating tcpw enhancements part correct deficiencies 
plan refine bandwidth estimation filtering method order improve tcpw friendliness 
intend pursue development control theoretical models enable study stability tcpw function various systems parameters 

acknowledgments authors take great pleasure acknowledging valuable contribution ma bryan ng giovanni pau cathy yang 
implemented tcpw linux conducted lab measurements experiments reported 

roy :10.1.1.41.816
stochastic modeling tcp lossy link 
infocom tel aviv israel march 
str wittenmark computer controlled systems prentice hall englewood cliffs 
balakrishnan padmanabhan seshan katz :10.1.1.113.2393
comparison mechanisms improving tcp performance wireless links 
ieee acm transactions networking december 
balakrishnan seshan amir katz 
improving tcp ip performance wireless networks 
mobicom berkeley ca usa november balakrishnan randy katz 
explicit loss notification wireless web performance 
proc 
ieee globecom internet mini conference sydney australia november 
comparison tcp reno tcp vegas efficiency fairness 
proceedings performance istanbul turkey october 
gerla lee mascolo tcp faster recovery milcom los angeles ca october 
clark design philosophy darpa internet protocols proc 
sigcomm acm computer communication review vol 
pp 

gerla lo mascolo weng 
generalized window advertising tcp congestion control 
csd tr ucla ca usa february 
gerla weng bandwidth feedback control tcp real time sources internet globecom san francisco ca usa november 
henderson satellite transport protocol specification 
technical report university california berkeley 
gross 
tcp vegas revisited 
proceedings ieee infocom tel aviv israel march 
jacobson congestion avoidance control 
acm computer communications review august 
kurose ross computer networking top approach featuring internet addison wesley li hwang link capacity allocation network control filtered input rate high speed networks ieee acm networking vol 
feb pp 
mathis mahdavi floyd romanow 
tcp selective options 
rfc april mitzel iab wireless internetworking workshop rfc 
stevens tcp ip illustrated vol 

addison wesley reading ma usa ns network simulator ver 
lbl url cs berkeley edu ns 
tcp westwood modules ns 
url www telematics tcp westwood 
