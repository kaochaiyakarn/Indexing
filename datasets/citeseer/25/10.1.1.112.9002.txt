kerberos authentication service open network systems jennifer steiner project athena massachusetts institute technology cambridge ma steiner athena mit edu clifford neuman department computer science fr university washington seattle wa bcn washington edu jeffrey schiller project athena massachusetts institute technology cambridge ma jis athena mit edu open network computing environment wor rest athena environment 
describe trusted identify users correctly interaction different kerberos authentication domains network services 
kerberos provides alternative approach realms case relation project athena trusted third party authentication service kerberos kerberos running mit laboratory verify users identities 
gives overview computer science 
kerberos authentication model implemented mit proj section mention open issues problems ect athena 
describes protocols clients servers unsolved 
section gives current status kerberos kerberos achieve authentication 
describes project athena 
appendix describe detail management replication database required 
views kerberos applied network file service authenticate kerberos seen user programmer administrator described 
role kerberos larger athena users wish gain access remote file systems 
picture list applications presently kerberos user authentication 
describe addition conventions kerberos authentication sun network file system case study integrating kerberos existing application 
terms may ambiguous new reader differently 
state terms 
user client server 
user mean human uses program service 
client uses gives overview kerberos authentication system designed miller neuman open network computing environments describes experience mit project athena 
section explain new authentication model needed open networks requirements 
second section lists components kerberos software describes interact providing authentication service 
section describe kerberos naming scheme 
section presents building blocks kerberos cation ticket authenticator 
leads discussion authentication protocols initial authentication user kerberos analogous logging protocol mutual authentication potential consumer potential producer network service 
kerberos requires database information clients section describes database management protocol modification 
section describes kerberos inter face users applications programmers administrators 
section describe project athena kerberos fits necessarily person program 
network applications consist parts program runs machine requests remote service program runs remote machine performs service 
call client side server side application respectively 
client contact server behalf user 
entity uses kerberos system user network server sense client uses kerberos service 
distinguish kerberos clients clients services term principal indicate entity 
note kerberos principal user server 
describe naming kerberos principals section 
service vs server 
service specification actions performed 
process performs actions called server 
time may servers usually running different machines performing service 
example athena bsd unix rlogin server running timesharing machines 
clifford neuman member project athena staff design initial implementation phase kerberos 
key private key password 
kerberos uses private key encryption 
kerberos principal assigned large number kerberos authentication service open network systems private key known principal kerberos 
environment places requirements case user private key result way cation mechanism 
secure 
circumventing function applied user password 
key short difficult potential attacker find hand private key 
authentication mechanism weak link 
credentials 
unfortunately word special meaning watching network able obtain informa sun network file system kerberos system 
tion necessary impersonate user 
second explicitly state mean nfs credentials reliable 
access services depend eros credentials term normal tion service 
reliable system services english language sense 

third transparent 
ideally master slave 
possible run kerberos user aware authentication place 
tion software machine 
scalable 
systems communicate definitive copy kerberos database 
athena hosts 
support mechanism machine houses database called master software break 
machine just master 
machines may possess read kerberos result satisfy copies kerberos database called ments 
user walks workstation logs 
slaves 
far user tell initial identification sufficient prove identity required network servers duration login session 
security kerberos motivation relies security authentication servers system users log security servers 
authentication server non networked personal computing environment resources provides properly authenticated user way prove information protected physically securing identity servers scattered network 
personal computer 
timesharing computing environment authentication fundamental building block secure operating system protects users con networked environment 
example server knows resources 
order determine user able certain identity client decide provide read modify necessary timesharing system service user special privileges identify user 
accomplished user logs 
receive bill service forth 
network users requiring services separate words authorization accounting schemes built computers approaches take access top authentication kerberos provides resulting control relying machine equivalent security lone personal computer user logged prevent unauthorized access require host prove identity trust host word user require user prove timesharing system 
identity required service 
closed environment machines kerberos 
strict control approach 
organization controls hosts communicating network reasonable approach 
open environment selectively trust hosts organizational control 
case host required prove identity 
rlogin rsh programs approach 
protocols authentication done checking internet address connec tion established 
athena environment able honor requests hosts organizational control 
users complete control workstations reboot kerberos trusted third party authentication service model needham schroeder 
trusted sense clients believes kerberos judgement identity clients accurate 
time stamps large numbers representing current date time added original model aid detection replay 
replay occurs message stolen network resent 
complete description replay issues authentication see kent 
bring standalone boot tapes 
third approach taken user prove identity desired service 
server 
prove identity 
sufficient physically secure kerberos keeps database clients private keys 
host running network server net private key large number known kerberos may masquerading server 
client belongs 
case client user steiner neuman schiller encrypted password 
network services requiring may replaced des implementations cation register kerberos clients wishing different encryption library 
services 
private keys negotiated registration 
replaceable module database management kerberos knows private keys create system 
current athena implementation database messages convince client really library uses ingres originally 
claims 
kerberos generates temporary private keys database management libraries 
called session keys clients kerberos database needs straightforward record 
session key encrypt messages held principal containing name private key parties 
expiration date principal administrative kerberos provides distinct levels protection 
information 
expiration date date application programmer determines appropriate entry longer valid 
usually set years requirements application 
example registration 
applications require authenticity established user information real name phone number initiation network connection assume forth kept server nameserver messages network address originate 
way sensitive information passwords authenticated party 
authenticated network file system handled kerberos fairly high security measures uses level security 
non sensitive information kept dealt applications require authentication message differently example sent unencrypted care content message disclosed network 

kerberos provides safe messages 
higher kerberos servers database library tools level security provided private messages administering database 
message authenticated encrypted 
private administration server server provides messages example kerberos server read write network interface database 
client side sending passwords network 
program may run machine network 
server side run machine housing software components kerberos database order changes database 
authentication server kerberos server athena implementation comprises modules see 
kerberos applications library provides inter face application clients application servers 
contains routines creating reading authentication requests routines creating safe private messages 
encryption kerberos des data encryption standard 
encryption library implements routines 
methods encryption provided tradeoffs speed security 
extension des cypher block chaining cbc mode called propagating cbc mode provided 
cbc error propagated current block cipher error propagated message 
renders entire message useless error occurs just portion 
encryption library independent module hand performs read operations kerberos database authentication principals generation session keys 
server modify kerberos database may run machine housing read copy master kerberos database 
database propagation software manages replication kerberos database 
possible copies database different machines copy authentication server running machine slave machines receives update kerberos database master machine intervals 
user programs logging eros changing kerberos password displaying destroy ing kerberos tickets tickets explained 
kerberos applications library kerberos names encryption library database library database administration programs administration server authentication server db propagation software user programs applications part authenticating entity naming 
process authentication verification client named request 
name consist 
kerberos users servers named 
far authentication server concerned equivalent 
name consists primary name instance realm expressed name instance realm see 
primary name name user service 
kerberos software components 
instance distinguish variations kerberos authentication service open network systems bcn private key encryption encrypted different root keys 
ticket securely pass identity person jis lcs mit edu ticket issued authentication server rlogin mit edu server 
ticket passes information kerberos names 
sure person ticket person issued 
authenticator contains primary name 
users instance may entail special additional information compared root admin instances 
services ticket proves client presenting ticket athena environment instance usually name ticket issued 
machine server runs 
example rlogin ticket single server single client 
service different instances different hosts rlogin contains name server name client rlogin server host named 
kerberos ticket single named server 
separate ticket required gain access different instances service 
realm name administrative entity maintains authentication data 
example different may kerberos machine housing different database 
different kerberos realms 
realms discussed section internet address client time stamp lifetime random session key 
information encrypted key server ticket 
ticket issued may multiple times named client gain access named server ticket expires 
note ticket encrypted key server safe allow user pass ticket server having worry user modifying ticket see 
ticket authenticator 
works new generated time client wants section describes kerberos authentication protocols 
abbreviations client server addr client network address service 
problem client able build authenticator 
authenticator contains name client workstation ip address current workstation time 
authenticator encrypted session key part ticket see 
life lifetime ticket tgs tgs ticket granting server getting initial ticket kerberos authentication server administration server kx private key kx session key abc kx abc encrypted key tx ticket ax authenticator ws workstation figures 
mentioned kerberos authentication model needham schroeder key distribution protocol 
user requests service identity 
ticket server proof ticket originally issued user stolen 
phases authentication kerberos 
phase user obtains credentials request access services 
second phase user requests authentication specific service 
final phase user presents credentials server 
user walks workstation piece information prove identity user password 
initial exchange authentication server designed minimize chance password compromised time allowing user properly authenticate knowledge password 
process logging appears user logging timesharing system 
scenes quite different see 
user prompted username 
entered request sent authentication server containing user name name special service known ticket granting service 
authentication server checks knows client 
generates random session key client ticket granting server 
credentials types credentials kerberos authentication model tickets authenticators 
addr timestamp life kerberos ticket 
addr timestamp kerberos authenticator 
steiner neuman schiller requesting service 
getting initial ticket 
previous request 
server allowed keep track past requests timestamps valid 
order foil replay attacks request received ticket timestamp received discarded 
creates ticket ticket granting server contains client specifies wants server prove client name name ticket granting server identity server adds timestamp client current time lifetime ticket client ip address sent authenticator encrypts result session key random session key just created 
encrypted sends result back client see 
key known ticket granting server exchange server certain server 
kerberos client says mutual authentication server sends ticket authentication occurs client convinced server copy random session key additional informa authentic 
client server share key tion back client 
response encrypted client knows safely assume reasonably private key known kerberos client message encrypted key originated derived user password 
response received client user party 
asked password 
password converted des key decrypt response getting server tickets tion server 
ticket session key information stored user password des key erased memory 
exchange completed workstation possesses information prove identity user lifetime ticket granting ticket 
long software workstation previously tampered information exists allow impersonate user life ticket 
recall ticket single server 
necessary obtain separate ticket service client wants 
tickets individual servers obtained ticket granting service 
ticket ing service service service access protocol described previous section 
program requires ticket requested sends request ticket granting server see 
request contains name server ticket requested ticket granting ticket requesting service authenticator built described previous section 
ticket granting server checks authenticator moment pretend user ticket ticket granting ticket described 
valid desired server 
order gain access server granting server generates new random session key application builds authenticator containing client name ip address current time 
authenticator encrypted session key received ticket server 
client sends authenticator ticket server manner defined individ client new server 
builds ticket ual application 
authenticator ticket received server server decrypts ticket uses session key included ticket decrypt authenticator compares information ticket authenticator ip address request received time 
matches allows request proceed see 
assumed clocks synchronized minutes 
time request far mutual authentication 
past server treats request attempt replay getting server ticket 
kerberos authentication service open network systems kerberos authentication protocols 
changes may master kerberos database slave copies read 
server may run master kerberos machine see 
note authentication occur slaves administration requests serviced master machine 
experience problem administration requests infrequent 
handles requests users change passwords 
client side program sends requests network program 
accepts requests kerberos administrators may add principals database change passwords existing principals 
client side administration program sends requests network program 
new server containing client name server server name current time client ip address new session key just generated 
lifetime new ticket minimum remaining life ticket granting ticket default service 
ticket granting server sends ticket session key information back client 
time reply encrypted session key part ticket granting ticket 
way need user enter password 
summarizes authentication protocols 
server accepts requests add principals database change passwords existing principals 
service unique ticket granting service issue tickets 
authentication service service get ticket granting ticket 
purpose require user enter password 
user left tion unattended walk change password prevented 
likewise administrator left workstation unguarded change password kerberos database system 
server receives request authorizes point discussed operations requiring read access kerberos database 
operations performed authentication service run master slave machines see 
section discuss operations require write access database 
operations performed service called kerberos database management service 
current implementation stipulates comparing authenticated principal name requester change principal name target request 
request permitted 
server consults access control list stored file master kerberos system 
requester principal name file request permitted denied 
convention names null instance default authentication requests 
administration requests 
steiner neuman schiller instance appear access control list file dumped hour 
database sent entirety admin instance 
user slave machines update databases 
administrator kerberos admin instance username program master host called sends update created added access control list 
peer program called running slave convention allows administrator different password machines see 
sends checksum kerberos administration normal new database send 
checksum encrypted login 
kerberos master database key master requests program permitted slave kerberos machines possess 
data logged 
network slave machine 
slave propagation server calculates checksum data programs received matches checksum sent master new information update slave administrators kerberos program add principals database change passwords existing principals 
administrator required enter password admin instance name invoke program 
password fetch ticket server see 
users may change kerberos passwords program 
required enter old password database 
passwords kerberos database encrypted master database key 
information passed master slave network useful eavesdrop 
essential information master host accepted slaves tampering data detected checksum 
invoke program 
password fetch ticket server 
kerberos outside looking database replication section describe kerberos practical point kerberos realm master kerberos machine houses master copy authentication database 
possible necessary additional read copies database slave machines view seen user application programmer viewpoint tasks kerberos administrator 
system 
advantages having multiple copies database usually cited replication higher availability user eye view better performance 
master machine goes user hardly notice kerberos cation achieved slave machines 

unix implementation ticket granting ticket ability perform authentication machines obtained kerberos part login process 
reduces probability bottleneck master machine 
changing user kerberos password part passwd keeping multiple copies database introduces prob program 
kerberos tickets automatically destroyed lem data consistency 
simple meth user logs 
ods suffice dealing inconsistency 
master database user login session lasts longer lifetime kerberos administration protocol 
database propagation 
kerberos authentication service open network systems ticket granting ticket currently hours user notice assigned private key usually automatically kerberos presence time kerberos generated random key 
data including server cated application executed fail 
kerberos ticket key extracted database installed file expired 
point user run server machine 
default file 
program obtain new ticket ticket granting server 
krb rd req library routine called server see previ logging password provided order ous section uses information file decrypt messages get 
user executing command curiosity may sent encrypted server private key 
file surprised tickets silently obtained authenticates server password typed terminal behalf services require kerberos authenticates user 
authentication 
kerberos administrator ensure kerberos machines physically secure wise programmer viewpoint maintain backups master database 
programmer writing kerberos application adding authentication existing network application bigger picture consisting client server side 
call process program 
usually involves making call kerberos library order perform authentication initial request service 
may involve calls des library encrypt messages data subsequently sent application client application server 
section describe kerberos fits athena environment including network services applications interacts remote kerberos realms 
complete description athena environment please see 
commonly library functions krb mk req client side krb rd req server side 
network services kerberos krb mk req routine takes parameters name instance realm target server requested network applications modified possibly checksum data sent 
client eros 
rlogin rsh commands try authenticate sends message returned krb mk req call kerberos 
user valid kerberos tickets rlogin network server side application 
server athena machine having set rhosts receives message call library routine files 
kerberos authentication fails programs fall krb rd req 
routine returns judgement back usual methods authorization case sender alleged identity 
rhosts files 
application requires messages sent client modified post office protocol kerberos server secret library calls authenticating users wish retrieve electronic krb mk priv krb rd priv encrypt decrypt messages mail post office 
message delivery program called session key sides share 
zephyr developed athena uses kerberos administrator job kerberos authentication 
program signing new users called register uses service management system sms kerberos administrator job begins running pro gram initialize database 
program run register essential principals database kerberos administrator name admin instance 
kerberos authentication server administration server started 
slave databases administrator eros 
sms determines information entered new athena user name mit identification number valid 
checks kerberos see requested username unique 
goes new entry kerberos database containing username password 
detailed discussion kerberos secure arrange programs propagate database updates sun network file system please refer appendix 
master slaves kicked periodically 
initial steps taken administrator manipulates database network program 
program new principals added interaction passwords changed 
expected different administrative organizations particular new kerberos application added want kerberos user authentication 
expected system kerberos administrator take steps cases users organization want get working 
server registered database services 
kerberos supports multiple administrative steiner neuman schiller domains 
specification names kerberos includes obtain new requires user enter pass field called realm 
field contains name word 
administrative domain user open problem proxy problem 
authenticated 
cated user allow server acquire network services services usually registered single realm behalf 
example important accept credentials issued authentication server service gain access protected files realm 
user usually registered single realm directly fileserver 
example problem local realm possible obtain credentials call authentication forwarding 
user logged issued realm remote realm strength workstation logs remote host nice authentication provided local realm 
credentials valid user access services available locally remote realm indicate realm user running program remote host 
difficult originally authenticated 
services remote realm user trust remote host choose honor credentials depending tion forwarding desirable cases 
presently degree security required level trust realm solution problem 
initially authenticated user 
problem important athena order perform cross realm authentication necessary environment guarantee integrity software administrators pair realms select key running workstation 
problem shared realms 
user local realm private workstations user request ticket granting ticket local control 
public workstations tion server ticket granting server remote realm 
come modified login program save ticket remote ticket granting server rec user password 
solution presently available request realm uses environment difficult people modify previously exchanged key decrypt ticket granting software running public workstations 
better solution ticket 
issues ticket normally require user key leave system realm field client contains name realm user knows trusted 
way done client originally authenticated 
user possessed smartcard capable doing approach extended allow authenticate oneself series realms reaching realm desired service 
order encryptions required authentication protocol 
necessary record entire path taken just name initial realm user authenticated 
status situation known server prototype version kerberos went production says says user 

january kerberos statement trusted path project athena sole means authenticating users trusted 
workstations servers 
addition kerberos place rhosts files controlling access athena timesharing systems 
issues open problems number issues open problems associated kerberos authentication mechanism 
issues kerberos initially designed steve miller clifford decide correct lifetime ticket allow neuman suggestions jeff schiller jerry saltzer 
proxies guarantee workstation integrity 
time numerous people involved ticket lifetime problem matter choosing proper project 
jim aspnes bob baldwin tradeoff security convenience 
life ticket john richard jim bloom bill bryant mark long ticket associated session key stolen rob french dan john kohl john kubiatowicz misplaced longer period time 
bob brian murphy john ken chris information stolen user forgets log reed jon mike bill ted public workstation 
alternatively user win stan 
cated system allows multiple users user grateful joshua dan kathy access root able find information needed ken jerry saltzer ed steiner robbert van renesse stolen tickets 
problem giving ticket short win suggestions improved earlier lifetime expires user drafts 
kerberos authentication service open network systems illustration headed dog form piece data included nfs request called 
credential nfs terminology 
credential contains information unique user identifier uid appendix requester list group identifiers requester membership 
information nfs kerberos application sun network file system nfs server access checking 
difference trusted key component project athena workstation system non trusted workstation credentials interposing network user workstation private file storage home directory 
private storage resides set computers currently vax accepted nfs server 
dedicated purpose 
allows offer services publicly available unix workstations 
user modified nfs logs publicly available workstations environment nfs servers accept credentials validate name password locally workstation credentials indicate uid dent password file kerberos determine workstation user 
authenticity 
login program prompts username obvious solution change nature cre unix system 
username fetch kerberos mere indicators uid full blown ticket granting ticket 
login program uses password kerberos authenticated data 
significant perfor generate des key decrypting ticket 
decryption mance penalty paid solution adopted 
successful user home directory located consulting credentials exchanged nfs operation including naming service mounted nfs 
disk read write activities 
including kerberos login program turns control user shell cation disk transaction add fair number run traditional user customization files full blown encryptions done software transaction home directory attached workstation 
envelope calculations delivered service construct entry local unacceptable performance 
required placing password file 
benefit programs look kerberos library routines kernel address space 
information passwd 
needed hybrid approach described 
basic options delivery remote file service idea nfs server map credentials received chose sun network file system 
system fails client workstations valid possibly different credential mesh needs crucial way 
nfs assumes server system 
mapping performed server workstations fall categories viewed file kernel nfs transaction setup mount time server point view trusted untrusted 
untrusted systems user level process engages kerberos moderated access files trusted 
trusted systems authentication prior establishing valid kernel credential completely trusted 
assumed trusted system man mapping 
aged friendly management 
specifically possible implement added new system call kernel trusted workstation masquerade valid user required server systems client systems file service system gain access just file provides control mapping function maps system 
files owned root 
incoming credentials client workstations credentials environment management workstation valid server 
basic mapping function traditional sense unix system management maps tuple hands user currently 
secret client ip address uid client root password workstations realize truly valid nfs credential server system 
client unfriendly user break fact sitting ip address extracted nfs request packet physical location machine access uid client extracted credential supplied console functions 
truly trust client system 
note information client gener workstations nfs interpretation trust 
allow proper ated credential uid client discarded 
access controls environment modi mapping exists server reacts ways base nfs software integrate kerberos depending configured 
friendly configuration scheme 
default requests credentials user privileged access unique unmodified nfs uid 
unfriendly servers return nfs access error valid mapping incoming nfs credential 
implementation nfs started new system call add delete entries university wisconsin authentication provided kernel resident map 
provides ability flush steiner neuman schiller entries map specific uid server system flush entries client ip address 
modified mount daemon handles nfs mount requests server systems accept new transaction type miller neuman schiller saltzer kerberos authentication mapping request 
basically part mounting process client system provides kerberos authenticator indication uid cli ent encrypted kerberos authenticator tion 
server mount daemon converts kerberos principal name local username 
username looked special file yield user uid section 
kerberos authentication tion system project athena cambridge massa december 
lerman computing higher education athena experience communications acm pp 
acm november 
needham schroeder encryption list 
efficiency file database file authentication large networks computers username key 
information nfs credential communications acm pp 
constructed handed kernel valid mapping ber 
client ip address client uid tuple kent security mechanisms request 
high level network protocols computing surveys time request sent mount daemon acm june 
remove previously added mapping kernel 
possible send request logout time invalidate mapping current user server question cleaning remaining mappings exist shouldn workstation available user 
national bureau standards data encryption stan dard federal information processing standards publi cation government printing office washington 

dyer name server usenix confer ence proceedings winter 
bryant kerberos programmer tutorial project athena preparation 
security implications bryant kerberos administrator manual project athena preparation 
modified nfs berkeley unix workstations athena changes bsd usenix conference pro implementation completely secure 
starters user ceedings winter 
data sent network unencrypted french form 
low level transaction authentication client ip address client uid pair provided unencrypted request packet 
information forged security compromised 
noted user actively files logged valid mappings place form attack limited user question logged 
user logged sky kohl zephyr noti fication system usenix conference proceedings winter 
rosenstein levine take leader service management complicated environment usenix conference proceedings win ter 
sandberg goldberg kleiman walsh lyon design implementation sun network amount ip address forgery permit unauthorized access filesystem usenix conference proceedings sum files 
mer 
