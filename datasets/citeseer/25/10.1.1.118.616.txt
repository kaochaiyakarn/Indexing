scalable peer peer process management osiris approach christoph schuler roger weber heiko schuldt hans 
schek swiss federal institute technology eth ch zurich university health sciences medical informatics technology innsbruck mail schuler weber schek inf ethz ch heiko schuldt functionality applications increasingly available services 
general concepts standards soap wsdl uddi support discovery invocation single web services 
state art process management conceptually centralized process manager 
resources coordinator limit number concurrent process executions especially coordinator persistently store state change recovery purposes 
overcome limitation executing processes peer topeer way exploiting nodes system 
distributing execution navigation costs achieve higher degree scalability allowing larger throughput processes compared centralized solutions 
papers describes prototype system osiris implements true peer peer process execution 
promising results verifying advantages centralized process management terms scalability 

years information technology undergone major changes 
especially current trend service orientation dedicated services allow access data applications strong impact information systems middleware radically changed way information processing takes place 
particular web services invoked common web protocols soap led proliferation service oriented computing 
system support invocation single web services widely available 
important tasks dealing web services combine existing services coherent 
applications spanning web service invocations usually realized processes 
platform independent definitions xml soap wsdl simplify composition application scenarios processes maintenance purposes implement replication enforce consistency constraints different sources 
done automatically triggering execution process violation constraint occurred 
furthermore natural systems implement accesses data queries users processes gather information different service calls aggregate retrieved data user demand 
result infrastructure systems cope large numbers concurrent processes ensure quality service traditional database applications 
reasons process support come set new challenges dynamics new services service providers may enter leave system time system keep track changes parallel service invocations process execution 
optimal routing sophisticated routing strategies service invocations distribute requests service providers run time approximate knowledge availability load 
reliability correctness processes executed reliably dedicated correctness guarantees case failures 
scalability infrastructure scale number services processes users 
clearly centralized systems soon reach limitations 
node community equipped small software layer part infrastructure 
layer implements process support peer peer fashion gets rid monolithic process management system 
view challenges number groups started new projects object globe isee mar cas breaking conventional hdb layer services data load repository lr subscription repository sr service repository sr process repository pr :10.1.1.106.1506
peer peer process execution technology 
eth zurich vision established years ago objective identify new middleware infrastructure understood concepts evolving database technology 
database systems handle data records system deals services service invocations 
services turn may database system 
short takes care optimal routing similar query optimization conventional database provides process support transactional guarantees distributed components existing services generalization traditional database transactions :10.1.1.16.199
importantly contrast traditional database technology follow monolithic system architecture fully distributed participating nodes network 
node equipped additional thin software layer called layer hdb layer depicted 
hdb layer extends existing layers tcp ip stack process related functionalities 
hdb layer abstracts service routing tcp ip abstracts data packet routing 
tcp ip protocol guarantees correct transfer bytes hdb layer guarantees correct shipment process instances 
course distributed process infrastructure requires service provider locally installs additional software layer 
ideally layer comes operating system tcp ip stack comparable net framework 
implemented prototype system called osiris short open service infrastructure reliable integrated process support princi ples 
previous papers describe vision process model general architecture concentrate discussion evaluation osiris reliable scalable infrastructure management services processes :10.1.1.16.199
contributions describes provide process execution true peer peer manner 
solution sophisticated failure handling mechanisms 
note failure handling distributed environment complex compared failure handling central process engine 
evaluation results osiris benchmark show significant scalability improvements compared central solutions 
summarize osiris architecture discuss main architectural decisions section 
section contains details peer peer process execution necessary understand evaluation results described section 
discuss related section conclude open problems section 
process model architecture osiris section summarize earlier topics process models execution guarantees architecture large scale peer peer systems offering web services :10.1.1.16.199
extension previous sections describe evaluate true peerto peer process execution discuss advantages approach compared traditional centralized solutions terms scalability 

osiris process model process corresponds ordered set activities 
order activities defines sequence service calls activities directly mapped existing services processes 
process manager invoke activity pre ordered activities finished conditions execution fulfilled 
intra process parallelization implemented parallel branches process fork join process conceptually exactly start activity final activity define data flow mappings data space process instance called whiteboard service request parameters back response values whiteboard execution 
note implies branch process required typical request reply model service infrastructures process service 
version whiteboard data flow parallel branches possible versions merged joining branches 
model allows loops conditions edges 
respect quality service osiris follows approach transactional processes :10.1.1.16.199
model bases flexible transaction model guarantees correct process termination 
activity compensatable retriable pivot 
effects compensatable activities semantically undone corresponding service invocation successfully returned 
activity pivot compensatable 
retriable activities guaranteed terminate correctly invoked repeatedly 
case invocation succeeds previous invocations activity leave effects 
process contain pivot activities required guaranteed successful path termination state pivot element rollback process instance case failure pivot element feasible rollback may include invocation compensation steps back state reflecting successful execution forward recovery possible alternative execution paths required pivot elements process 
transactional processes specify preferences providing multiple correct paths 
osiris comes grape java process modeling tool supports designer defining validating processes 

principles architecture architecture driven goal implementing true peer peer process execution engine process model 
follows vision process execution involves machines network offer service required process definition 
central synchronization navigation node drive process instances 
see true peer peer process execution mainly problem efficient metadata replication 
architecture osiris split parts firstly node network runs hdb layer provides local services routing process navigation envisioned 
secondly osiris runs number global meta data repositories holding information process definitions subscription lists service providers load information 
cf 
middle box 
global repositories store meta information xml documents essential run system 
hdb layers execute processes query meta information global repositories 
push mechanism replicates parts meta information hdb layers require fulfill tasks 
instance node involved executing process definition changes definition pushed process repository hdb layer 
perspective hdb layers perform tasks local versions global meta information 
sufficient hold approximate versions instance load information nodes required hdb layer balance process activities available service providers 
sufficient load information approximately accurate 
hand changes process definitions propagated immediately avoid version conflicts 

replication meta information important understand global meta data repositories directly involved execution processes 
just maintain meta information distribute information hdb layers needed 
previous introduced measures reduce amount data transferred nodes see details 
firstly publish subscribe scheme path predicates xml document replication 
path predicate subscription selects parts document node locally requires instance assume processes hdb layer involved execution process services required process provided node 
obviously hdb layer subscribes portion process meta data includes definition holds true pieces meta information hdb layer requires load information nodes eventually send requests 
publish subscribe scheme ensures changes central xml document transferred covered path predicate 
previous example process repository push updates process definition specific hdb layer 
secondly called freshness predicates reduce number publications 
freshness predicates especially useful replication dynamic meta data load information small changes load node significant load balancing 
avoid unnecessary updates subscription meta data repository comprises freshness predicate defines circumstances new data item published 
eager freshness instance denotes repository publish change soon possible case load information freshness predicate may denote updates published dif provide freshness predicate transactional guarantees update central repository separated updates hdb layers 
costs updates negatively affect scalability approach 
ference global version local version 
conceptually freshness predicate piece code sent subscription decides global version local version peer update published 
optimization global repositories keep track current states subscribed peers changes performed 

process execution described deploy true peer peer system process navigation gather maintain meta data centralized repositories repository may run cluster distribute load 
benefit approach terms scalability osiris completely separates process navigation meta data replication 
section describes detail peer peer process execution system 
especially want address key problems nodes know migrate process instances 
information needed 
nodes execute processes 
minimal information needed reduce replication costs 
system overcome severe failures providing transactional guarantees 

routing late service binding benefit load balancing different service providers application designers encode service bindings activities development time 
specify type service invoked parameters 
concrete service binding selected runtime depending load machines costs invoking particular service instance 
purpose osiris requires service provider subscribe tasks fulfill 
alternatively application developer register subscriptions behalf service provider 
subscription contains xslt scripts map generic interface service type concrete interface service provider concrete interface may different parameters result values 
runtime hdb layer selects service provider costs parameters conditions services 
similar automatic service discovery exception osiris requires performance reasons service discovery precomputed repeatedly updated activity process type 
selection detected services performed execution time 
apart service selection process navigation instance migration requires select node activity executed 
cases may want replicate service entire network ideas grid computing 
select concrete service type 
select appropriate node execute service 
osiris uses traditional load balancing methods select node trying advance process instances fast possible 
tasks described require hdb layer knows subscriptions service providers service types including mappings load machines providing services 
osiris maintains information centralized repositories uses inherent replication feature distribute meta information network 
deploy path predicates freshness predicates dramatically reduce number updates propagated repositories peers 
communication 
hdb layer identified node migrate current process instance deploys pc protocol ship instance data 
transportation possible case disconnection mobile device network problems hdb layer tries find alternative node 
fails instance data remains node suitable service available alternative branches process model exist process execution continued alternative branch 
note pc protocol simple involves exactly nodes 
guarantees instance data lost duplicated cases network hardware software problems 
exception case node completely disappears 
process instances currently executed node disappear able finish 
situations difficult solve automatically difference normal disconnection mobile device permanent disconnection node hard detect 
fork join problem 
fork simply migration process instance different peers peer executing independent activities 
join branches nodes executing activity branch know meet branch es 
course costly broadcast communication protocol detect partners join avoided 
osiris assigns process instance dedicated reliable node joining branches instance creation time 
join performed additional activity automatically inserted actual join node model 
service activity stateful decides advance instance actual join node branches may conditions denote unused alternatives see 
merges whiteboards different branches process model 
merged process instance routed node executing actual join activity 
note join process instance handled node 
different instances course different join nodes 
source st phase nd phase join parameters interface definition 
decomposition process central description set distributed execution units 
deployment execution processes principle node network replicate process definitions execute process instances control flow data flow definitions model 
require large amounts data replicated entire network want replicate pieces process definitions locally required drive execution process instances potentially visit node 
approach osiris decompose process definition deployment time set execution units 
execution unit contains information execute corresponding activity navigate process depending result service invocation 
node subscribes execution units processes invoke locally available service 
consequently amount replicated data significantly reduces 
designer deploys new process definition nodes may execute activities automatically receive corresponding execution units 
process transformation 
general easily extract execution units process definitions basically correspond pairs consecutive activities 
special cases require explanations 
transformation algorithm transforms graphbased process definition set execution units phases cf 

phase graphical notation enriched additional activities edges 
process requires single source activity activity 
furthermore join preceded special join activity discussed previous subsection node 
add edges graph 
consider example process left hand side activity followed activities arrow note activity comprises xslt scripts mapping whiteboard data service request parameters mapping result service call back whiteboard 
edges denotes preference order execution paths service fails alternative path service followed 
problem arises join expects incoming edges exactly arrives join runtime 
solve problem assume service call successful 
case know alternative branch executed 
remove process model subsequent nodes longer reachable 
typically known dead path elimination performed runtime process manager 
osiris detects dead paths deployment time possible cases resolves execution time dead path leads join node inform node corresponding path arrives 
add special edge signals join node execution time path arrive edge replaces path 
analogously add edges care join nodes execution alternatives 
due space restriction omit detailed descriptions cases 
second phase algorithm depicted right hand side divides extended graph execution units node graph 
navigation tables directly result edges including ones dead path elimination preference orders 

failure handling failure handling distributed environment difficult centralized 
main reason global knowledge process instance currently executed 
addition costly broadcast messages detect whereabouts instance avoided 
osiris handle failures different levels levels apply centralized process management 
level process model provide alternatives compensation restarting activities react fail ures 
modeling tool grape verifies correctness process transactional process model 
definition correct navigation model guarantees process execution ends defined final state regardless failures service invocations 
compensation activities keep history activity executed 
compensation routed back path process instance advanced 
second level hdb layer persistent queues pc protocol guarantee state changes process instances results services persistent recoverable queued transactions supported 
hdb layer fails hardware software problem recovers current state active process instances traditional database technologies re instantiates service calls necessary continues process navigation instances currently residing node 
third level global level deal disconnection nodes 
disconnection reasons network splits failures node crashes disconnection mobile devices permanent removal nodes 
migrating process instance node pc protocol nodes guarantees instance data safely transferred 
migration fails source node simply selects destination migration delays migration failed node provider service 
difficult solve situation node permanently disappears disconnected long period 
osiris allow application developers specify timeouts assign special observer nodes watch critical peers critical peers non reliable nodes disconnect mobile devices 
critical peer disconnects timeout reached process instance migrated currently available node 
disconnected node reconnects informed observer version process instance longer valid 
approach cases non compensatable activity timeout invalidate process instance node reconnects executed activity 
grape supports application developer validating correctness process model 

performance evaluations section investigate potential process execution set experiments 
goal evaluate basic setup workload execution scales better centralized approach meta data management hinder scalability 
true service supports pc protocol 
result get lost host fails immediately delivery result persistent hdb 

evaluation settings preliminary experiments idealized workloads mainly investigate navigation costs load balancing features osiris compared equivalent centralized approach 
sake comparison modified osiris slightly order allow centralized navigation processes 
call modified version central 
systems osiris central share implementation modules configurations differ way execute processes 
osiris node instantiate advance process approach described section 
central hand consists additional peer navigates processes delegates execution activities peers 
approach represents typical setup coordination distributed web services central process management system ibm websphere application process choreographer 
infrastructure algorithms allows directly compare performance figures approach ones centralized process manager 
experimental setup determines scalability characteristics approaches investigation osiris vs central 
linear process invoking generic activities available peers 
process corresponds typically short running data request process clients 
activity accrues costs seconds average execution costs process seconds average activities average 
clients simulated queuing model triggering process instantiation milliseconds average 
order visualize scalability characteristics decrease minute 
load system steadily increases point may observe overload situation processes significantly delayed due full queues peers process manager 
experiment repeated different numbers peers 
theoretically system improve peers available activity execution observe break point time 

scalability peer peer navigation graphs presents results scenario described osiris central implementation 
axis denotes time minutes start scenario axis denotes number started processes thick line number finished processes plots interval minute 
described scenario number started processes thick line increases minute stops roughly processes minute 
minutes clients creating new processes system may number processes started peers peers peers peers peers peer peer time minutes osiris configuration number processes started peers peers peers peers peers central time minutes central configuration 
process throughput different configuration settings active instances 
remaining plots ones markers denote number finished processes minute setup peers 
consider depicts throughput osiris 
see execution nodes capable handle full workload system breaks small number concurrent processes 
adding peers system successfully delays point system overloaded 
fact peers osiris able cope maximum load concurrent process instances case centralized approach central depicted 
system able significantly improve peers peers scale peers 
reason behavior due central process navigation allows limited number concurrent process executions logging auditing persistence navigation time 
throughput central approach improved faster machines clustered approach ibm websphere 
limitation number concurrent processes remains regardless peers add system 
osiris hand appears scale perfectly number peers network 
workload large simply increase number peers cope additional load 
central solution replace central machine faster cope increased workload machine exists 

related osiris infrastructure provides scalable distributed process navigation platform 
achieve combines rich set aspects 
vision combined ideas process management peer peer networks gives overview database technology grid infrastructures 
parts glued value added coherent 
processes osiris running peer peer community established individual service providers service providers acting peers called 
contrast relatively simple file sharing applications execution processes services requires significantly richer set functionality 
osiris implements process management concepts state art systems ibm websphere application process choreographer biztalk 
systems realize centralized approach call service provider returns process engine 
albeit navigation tasks distributed cluster storage process instances usually done single centralized database instance products oracle support clustered databases 
prototype systems features similar architectures mentor lite sdm 
executing processes peer peer way involving centralized component osiris provides transactional guarantees model transactional processes :10.1.1.16.199
provide transactional semantics workflows distributed environment 
distributed mentor lite approach setting process engine cluster changed actively configuration tool osiris distributes process execution available service providers locally runs processes provider hosts 
requires middleware layer local hdb layer participating component resp 
service provider 
wide range middleware solutions net ee implementations corba follows similar ideas 
terms process management osiris middleware provides functionality particular meta data replication auditing system workload monitoring part osiris middleware 
peer peer process execution dynamics terms current service providers terms changes load addressed osiris 
dynamic changes process models supported 
osiris guarantees process instance executed consistently version process instance creation time 
reasons medical treatment running processes instances migrate newest process definition systems field deal process instance evolution 
ideas migrating running process instances currently implemented osiris 
concepts orthogonal seamlessly integrated 
execution process instances osiris follows late service binding realizes runtime lookup running instances certain type 
systems instance implement service discovery tmodel types include service discovery process navigation isee crossflow :10.1.1.108.2512:10.1.1.106.1506
osiris service discovery relies precomputed tables available node 
tables allow fast decision runtime semantic equivalent service types 
content tables maintained manually automated semantic approach 
service type bound publish subscribe topic provides channel actual providers 
similar ideas process management systems see instance 
conventional implementations publish subscribe techniques require centralized publish subscribe broker broadcast technologies 
contrast osiris peer peer solution needs uses transparent routing mechanisms similar dbcache 

service oriented computing necessitates possibility combine existing services applications higher level abstraction processes applications impose certain requirements infrastructure process support 
addition dynamics service providers scalability terms number services processes infrastructure support important issue 
state art process management systems feature highly optimized algorithms provide certain degree throughput performance 
require specialized powerful hardware 
performance throughput centralized approach process management limited number concurrent process instances increases 
true peer peer approach contrast process execution distributed peers entire network able significantly outperform centralized approach terms scalability 
osiris system implementation provides process support true peer peer way 
peer peer process execution achieved collecting metadata available processes providers load global repositories applying sophisticated replication algorithms distribute metadata 
local layers associated service provider manage replicas global metadata sufficient locally drive execution process 
order provide reliable infrastructure process execution central control osiris applies sophisticated failure handling strategies 
important aspect support correct concurrent process executions 
truly distributed way currently investigating distributed concurrency control protocols 
protocols enable process synchronization introducing centralized component process instance routed 
experiments underlining scalability features osiris 
step want carefully investigate circumstances peer peer approach beneficial centralized approach 
purpose currently developing benchmark suite various application scenarios including failure handling concurrency reveal strengths weaknesses different system architectures 
acknowledgment want frank leymann supporting osiris ibm providing equipment enabling studies benefits peer peer approach osiris 
aberer sch neuhold transaction support cooperative overview project 
proc 
workshop extending data management cooperative darmstadt germany 
chandra cheng coleman gupta han liu lud scher pu moore shoshani 
modeling execution environment distributed scientific workflows 
proc 
int 
conf 
scientific statistical database management ssdbm cambridge usa 
bawa cooper crespo daswani ganesan garcia molina kamvar marti schlosser sun yang 
peer peer research stanford 
sigmod rec 
bernstein newcomer 
principles transaction processing 
morgan kaufmann publishers 
vd krishnamurthy mohan pirahesh 
dbcache middle tier database caching highly scalable business architectures 
proc 
acm sigmod int 
conf 
management data san diego california usa 
kemper kossmann kreutz 
ubiquitous query processing internet 
vldb journal large data bases 
casati jin krishnamoorthy shan 
adaptive dynamic service composition 
proc 
conf 
advanced information systems engineering caise stockholm 
casati 
shan 
semantic analysis business process executions 
proc 
int 
conf 
extending database technology prague czech republic 
dayal hsu ladin 
business process coordination state art trends open issues 
proc 
int 
conference large databases roma italy 
ga arpinar arpinar tatbul 
design implementation distributed workflow management system 

istanbul turkey 
ga zsu sheth eds 
workflow management systems interoperability volume nato asi series computer system sciences 
springer verlag 
proceedings nato advanced study institute asi workflow management systems 
istanbul turkey august 
ga tumer tatbul beeri 
workflow system cooperating agents control document flow internet 
cooperative information systems th international conference coopis volume lecture notes computer science israel 
elmagarmid leu litwin rusinkiewicz 
multidatabase transaction model 
proc 
int 
conference large databases brisbane australia 
foster kesselman eds 
grid blueprint new computing infrastructure 
morgan kaufmann nd edition 
ein dor 
metaknowledge intelligent routing system 
data knowl 
eng 
weikum 
workflow management service quality guarantees 
proc 
acm sigmod int 
conf 
management data madison wisconsin 
grefen aberer ludwig :10.1.1.108.2512
cross flow cross organizational workflow management service outsourcing dynamic virtual enterprises 
ieee data engineering bulletin 
haller schuldt 
consistent process execution peer peer information systems 
proc 
conf 
advanced information systems engineering caise klagenfurt austria 
kemper 
service globe distributing services internet 
meng su lam helal :10.1.1.106.1506
achieving dynamic inter organizational workflow management integrating business processes events rules 
proc 
annual hawaii int 
conf 
system sciences hicss big island hawaii usa 
levy meredith andrews beckman klein 
biztalk server business process orchestration 
ieee data engineering bulletin volume 
ller rahm 
rule dynamic modification workflows medical domain 
btw freiburg germany 
microsoft net 
www microsoft com net 
oracle database database grid 
oracle com products database oracle 
pu schwan walpole 
infosphere project system support information flow applications 
acm sig mod record 
reichert dadam 
adept flex supporting dynamic changes workflows losing control 
journal intelligent information systems 

schek schuldt schuler weber 
infrastructure information spaces 
proc 
east european conf 
advances databases information systems adbis volume lecture notes computer science bratislava slovakia 

schek schuldt weber 
infrastructure information space 
proc 
working conf 
visual database systems brisbane australia 
schuldt 
process locking protocol ordered shared locks execution transactional processes 
proc 
acm symposium principles database systems pods santa barbara california usa 
schuldt alonso beeri :10.1.1.16.199
schek 
atomicity isolation transactional processes 
acm tods 
schuler weber schuldt schek 
peer peer process execution osiris 
proc 
int 
conf 
service oriented computing trento italy 
verma sheth miller 
adding semantics web services standards 
las vegas nevada usa 
weber schuler schuldt 
schek 
webservice composition grape osiris 
proc 
int 
conference large databases berlin germany 
ibm websphere application process choreographer 
www ibm com developerworks websphere zones wpc html 
