appeared proceedings ieee infocom san francisco ca march 
tcp behavior busy internet server analysis improvements hari balakrishnan venkata padmanabhan srinivasan seshan mark stemm randy katz hari stemm randy cs berkeley edu srini watson ibm com computer science division university california berkeley berkeley ca rapid growth world wide web years caused significant shift composition internet traffic 
past studied behavior tcp dynamics context bulk transfer applications studies begun investigate interactions tcp extensive realworld traffic traces examine problem 
interaction interesting way current web browsers tcp connections multiple concurrent short connections single host 
analyze way web browsers tcp connections extensive traffic traces obtained busy web server official web server atlanta olympic games 
time operation web server busiest internet handling tens millions requests day clients 
describe techniques gather traces reconstruct behavior tcp server 
detailed analysis tcp loss recovery congestion control behavior recorded transfers 
important results short web transfers lead poor loss recovery performance tcp concurrent connections overly aggressive users network 
discuss techniques designed solve problems 
improve datadriven loss recovery performance short transfers new enhancement tcp loss recovery 
improve congestion control loss recovery performance parallel tcp connections new integrated approach congestion control loss recovery works set concurrent connections 
simulations trace analysis show enhanced loss recovery scheme eliminated timeout events integrated approach provides greater fairness improved startup performance concurrent connections 
solutions general application specific enhancements persistent connections addresses issues improved tcp loss recovery considered 

rapid growth world wide web years caused significant shift composition internet traffic 
today web traffic forms dominant component internet backbone traffic 
example reports web traffic constituted packets bytes traversing busy backbone link 
significant value understanding web traffic characteristics implications network performance protocol design 
web data disseminated clients hypertext transfer protocol uses tcp underlying reliable transport protocol 
characteristics web traffic significantly ibm watson research center yorktown heights ny different generated traditional tcp applications ftp telnet 
current web transfers typically shorter ftp transfers logically separate transfers active time example separate transfers text inlined images constituting web page 
coupled single reliable byte stream abstraction provided tcp resulted distinctive characteristics tcp connection initiated tends short separate connection transfer component page ii web browsers launch multiple simultaneous tcp connections server reduce user perceived latency 
unfortunately transfer characteristics poorly suited current tcp mechanisms 
short duration connections gives tcp limited opportunity probe network adapt congestion control parameters characteristics network 
multiple concurrent connections web clients exacerbate network congestion 
solution proposed literature single long lived tcp connection logical data streams multiplexed application 
examples include persistent connection session control protocol scp persistent connections 
schemes help improve performance drawbacks 
specifically tied single application application level protocol 
multiplexing data streams single tcp connection introduce undesirable coupling streams independent 
performance problems mentioned limitations existing solutions motivate 
analyzed large trace tcp connections busy server determine exactly performance limitations 
designed new transport level mechanisms address performance problems 
mechanisms application independent benefit applications tcp 
simulations evaluate performance benefits mechanisms 
currently process implementing real network stack 
goal trace analysis answer questions 
divide categories concerning behavior individual tcp connections concerning combined behavior concurrent connections web browsers 
single connection behavior 
loss recovery effective tcp fast retransmission recovery mechanism avoiding timeouts 

receiver bottleneck tcp receiver advertised window size limiting factor performance 

ack compression ack compression occur impact packet loss rate :10.1.1.37.1592
parallel connection behavior 
throughput throughput seen client vary number connections open server 

congestion control set parallel connections respond congestion induced packet losses 

loss behavior packet losses distributed multiple parallel connections function congestion windows individual connections 
answer questions analyze large data set packet level traces millions tcp connections collected official web server atlanta olympic games 
week period traces included approximately tcp packets distinct hosts world 
analysis traces yield answers questions raised existing loss recovery techniques effective dealing packet losses new techniques developed handle 
losses require coarse timeout recover 
fast retransmissions recover losses 
remainder losses recovered slow start timeout 
network implementations increase default socket buffer size avoid receiver window bottleneck 
socket buffer size limited throughput approximately observed connections 
ack compression observed phenomenon correlated subsequent packet losses 
client collection parallel connections connect server aggressive user network uses single tcp connection 
throughput positively correlated number parallel connections 
set parallel connections responsive congestion induced losses single connection 
group parallel connections ones small outstanding windows experience larger number losses share total outstanding window warrant 
means may harder initiate new connection keep existing connection going 
results propose new tcp mechanisms overcome eliminate observed problems 
mechanisms completely compatible existing tcp wire protocol require modifications sender side tcp implementation 
current web servers tcp senders benefit mechanisms leaving web clients untouched 
facilitates incremental deployment internet 
proposed mechanisms fall classes designed improve performance individual tcp connections designed improve performance multiple concurrent tcp connections 
major enhancements propose enhanced tcp loss recovery improved loss recovery technique improves effectiveness tcp fast retransmission window sizes small 
modification timeout events observed trace avoided 
integration concurrent connections integrated approach congestion control loss recovery multiple simultaneous tcp connections pair hosts 
trace statistic value packets captured packets dropped average packet drop percentage distinct client addresses total bytes collected gb table 
trace statistics site statistic value total server hits olympics max hits day table 
site statistics allows unmodified applications open tcp connections wish host adversely affecting performance 
rest organized follows 
section describes details traffic collection site data collection post processing 
section presents results traffic analysis 
section presents modifications tcp improve performance individual connections section presents modifications improve performance concurrent tcp connections 
section presents pointers 

data collection web server setup section briefly describes details trace collection post processing performed packet traces 
related data describe setup detail 
data collection site methodology server complex consisted cluster ibm rs machines connected mbit sec token ring network running reno version tcp 
complex connected internet network access points 
www request entering server complex passed load balancing connection router sent token ring network single server node 
fetching appropriate web object server node transmitted internal atm network internet clients 
note asymmetric topology web requests responses traversed different network links 
trace collection machine token ring network connecting server nodes capturing traffic port port 
traffic consisted request tcp transfers 
modified server nodes indicate tcp retransmission occurred sending packet trace collection machine 
information combined techniques described section able reconstruct dynamics tcp connections 
tables figures summarize variety interesting information collected data 
table describes various statistics trace data table contains data activity site olympics 
details traces study stability wide area network performance 
tcp emulation engine post processed packet traces generate record summary progress tcp connection including times sequence numbers acknowledgments retransmission notifications 
organized connection summaries database allowed cluster connections single client compare tcp performance different clients different times 
order faithfully reproduce state sender side implementation tcp reno wrote tcp emulation engine took captured acknowledgments input reproduced evolution sender side state variables congestion window roundtrip time estimate maximum packet sequence transmitted 
captured acknowledgments sufficient change sender side state variable triggered reception acknowledgment expiration timer 
essence engine implementation subset functions tcp sender user level driven sequence acknowledgment traces 
evolution sender state completely driven arrival acks usually case connection experiences losses possible reconstruct complete accuracy 
handled complications due timer events number heuristics addition estimating round trip time done tcp sender 
validated engine comparing times predicted retransmission event actual times retransmissions occurred reported modified server nodes captured trace collector 
completed engine predicted number coarse timeouts fast retransmissions slowstart retransmissions correct number assuming retransmission notifications lost packet capture process 
result window size calculations accurate bound plus underlying loss rate packet capture process average 
summary tcp emulation engine tool emulates evolution tcp sender state high degree accuracy 
emulation engine combined collected traces allow analyze tcp connections web browsers behave today internet 

analysis section results analysis realworld behavior tcp connections 
consider single connection behavior analyzing tcp connections independent analyzing different tcp loss recovery mechanisms practice looking presence receiver bottlenecks ack compression 
analyze effects multiple simultaneous connections network focusing loss recovery behavior congestion window evolution parallel connections 
graphs error bars error bars represent confidence interval plus minus standard error 
single connection behavior table summarizes results analysis single connection behavior 
rest section discuss performance behavior retransmissions loss recovery receiver advertised window sizes ack compression 
trace statistic value total connections packet re ordering receiver window bottleneck total packets slow start slow start pkts lost congestion avoidance congestion avoidance pkts lost total retransmissions fast retransmissions slow start retransmissions coarse timeouts retransmissions avoidable sacks avoidable enhanced recovery table 
summary analysis results percentages relative category retransmissions loss recovery classify retransmissions lost segments tcp reno categories fast retransmissions triggered threshold number duplicate acknowledgments tcp reno received sender timeouts retransmissions triggered expiration timer arrival acknowledgment missing segment slow start retransmissions retransmissions performed sender immediately timeout subsequent packets presumed lost window 
typically situations result coarse timeouts 
tcp reno loss multiple segments window usually leads coarse timeout 
coarse timeout occurs number duplicate acknowledgments insufficient trigger fast retransmission 
running tcp emulation engine observed acknowledgment trace showed timeouts subsequent slow start retransmissions predominant mechanism loss recovery tcp reno 
specifically hour trace involving connections individual retransmission events retransmissions due timeouts result tcp fast retransmission result slow start retransmissions 
retransmissions occurred soon coarse timeout 
characterized state sender time loss occurred slow start periods congestion avoidance periods determine mode shows inherently different behavior 
congestion avoidance slow start similar frequencies loss packets lost congestion avoidance packets lost slow start 
analysis see existing loss recovery techniques effective dealing packet losses new techniques developed handle 
sophisticated datadriven loss recovery mechanisms heavy dependence timeouts loss recovery 
section discuss effectiveness standard tcp selective cumulative probability socket buffer size kb 
cumulative distribution function cdf receiver advertised window size 
sack option reducing number timeouts describe enhancement loss recovery procedure significantly improve performance 
receiver advertised window assuming source data send amount data transmitted tcp time primarily governed minimum parameters sender congestion window tries track available bandwidth network receiver advertised window handles flow control 
maximum possible value parameter equal socket buffer size chosen application connection established 
excessively small value parameter result sub optimal performance receiver advertised window consistently smaller sender congestion window 
shows cumulative distribution function receiver advertised window transfers hosts connections hour period 
cdf shows distinct window sizes kb kb kb values commonly receivers 
connection compared receiver advertised window congestion window size computed tcp engine determined approximately connections connections grew larger receiver advertised window limited amount data tcp sender outstanding 
cases web client receiver potentially obtained higher throughput employed larger socket buffer consequently advertised larger window 
analysis recommendation 
network implementations increase default socket buffer size avoid receiver window bottleneck 
default values kb small 
ack compression ack compression occurs spacing successive acknowledgments compressed transit receiver sender 
acknowledgments arrive sender higher rate generated receiver 
ack clocking nature tcp causing sender transmit burst packets 
burst packets undesirable increases likelihood overflowing queue network router packet loss window ack bandwidth ratio 
probability packet loss window versus ack bandwidth ratio leading packet loss 
wanted determine degree acknowledgments compressed network quantify negative effect tcp senders 
analysis different ways 
method ack bandwidth ratio method calculate ack bandwidth tcp windows connections trace :10.1.1.37.1592
ack bandwidth respect starting acknowledgment defined number outstanding bytes time received divided time receive ack outstanding byte 
individual ack bandwidth sample compared median ack bandwidth windows connection 
ratio ack bandwidth median ack bandwidth allows quantify degree acks compressed 
shows results analysis 
axis quantized ack bandwidth ratio axis probability window contained packet loss 
important observations 
probability loss increases sharply small values ack bandwidth ratio 
point flattens network placed state congestion 
method dynamic comparison data ack bandwidths second method takes consideration flow data acks 
consider window data transmitted sender 
data bandwidth window computed dividing amount data sent time transmit window similarly ack bandwidth computed dividing amount data acknowledged time difference acks 
define ack compression factor ratio ack bandwidth data bandwidth window 
note acks clock data ratio ratio ack bandwidths consecutive windows 
analogous shows impact ack compression factor window packet loss rate window 
observe loss probability grows ack compression factor increases levels 

note data bandwidth exceed quantity window size rtt data sent burst 
packet loss window ack compression factor 
probability packet loss window versus ack compression factor see ack bandwidth ratio ack compression factor serve indicators packet losses induced ack compression 
significant advantage easily computed real tcp implementation 
ack bandwidth ratio derived ack compression factor require computing median :10.1.1.37.1592
analysis see ack compression observed phenomenon correlated subsequent packet losses 
tcp sender benefit keeping track severity ack compression instance dynamically computing ack compression factor corrective action slowing data rate significant danger packet loss 
parallel connection behavior section study effect multiple simultaneous connections parallel connections performance network 
investigate throughput varies number parallel connections degree parallelism 
investigate group parallel connections react loss 
look number parallel connections experience loss parallel connections experiences loss resulting combined congestion window size loss 
look losses spread time parallel connections spread function number unacknowledged bytes outstanding window parallel connections 
throughput analysis analyze traces determine significant correlation throughput seen client host number simultaneous connections open server 
important positive correlation provides mechanism allows applications obtain fair share bandwidth network path bottleneck link 
host divide entire duration interactions server periods constant 
transition period happens connection terminates decreases new connection starts increases 
period compute throughput ratio total number useful bytes transferred period connections put duration period 
cumulative probability coefficient correlation 
cdf coefficient correlation throughput number simultaneous connections 
cdf obtained aggregating hosts 
consider periods kb transferred throughput numbers meaningful 
considering periods compute coefficient correlation throughput number simultaneous connections 
compute hosts pairs throughput samples 
aggregating coefficients correlation hosts obtain cumulative distribution function cdf shown 
clear substantial positive correlation 
positive correlation hosts coefficient correlation larger hosts 
clients help opening simultaneous connections 
congestion control analysis apparent benefit individual client derives launching simultaneous connections parallel comes cost degraded congestion control behavior 
demonstrate analyze pattern losses seen connections individual client 
consider period time client host simultaneously open connections 
suppose connections experiences packet loss 
event mark loss epoch 
record amount outstanding data connections point time 
time outstanding data connections acknowledged marks loss epoch 
loss epoch record number simultaneously open connections outstanding window size connection distribution packet loss events connections 
aggregate data hosts 
set size connections active loss epoch subset size experiences loss loss epoch cuts individual congestion windows response 
assuming tcp connections congestion window size start epoch tcp connection experiences loss halves window effective multiplicative decrease host total transmission window 
see typically half total number open connections see loss loss epoch approxi number connections loss number parallel connections 
average number connections experience loss window parallel connections 
effective multiplicative decrease factor parallel fast recovery parallel coarse timeouts tcp fast recovery tcp coarse timeouts degree parallelism 
effect parallelism outstanding window size mately 
effective multiplicative decrease factor represents aggressive behavior halving window 
basic reason subset connections notified congestion occurring path shared connections 
complement back envelope calculation bounds actual multiplicative decrease factor 
order compute bounds knowledge individual congestion windows start loss epoch coupled extreme assumptions set connections experience loss loss epoch respond 
obtain upper bound assume fast retransmissions halve windows 
obtain lower bound assume undergo retransmission timeout drop windows segment 
case compute ratio combined congestion window loss event obtain bound effective multiplicative decrease factor 
bounds shown function degree parallelism curves labelled parallel fast recovery parallel coarse timeouts 
baseline comparison compute congestion window size ratio result connections treated single unit fast retransmission coarse timeout occurred 
shown tcp fast recovery tcp coarse timeouts curves fig ure 
effective multiplicative decrease factor backoff response congestion system parallel connections typically range various degrees parallelism 
clearly significantly aggressive normal tcp backs factor 
furthermore rate set parallel connections increase aggregate window times single connection connection increments window segment rtt 
short throughput congestion control analyses show client parallel connections connect server aggressive user network uses single tcp connection 
increases chances network gets congested state stays adversely affects network performance 
loss distribution analysis turn question packet losses loss epoch distributed parallel connections function individual window sizes 
interest space provide brief summary detailed analysis 
connection normalized size outstanding window dividing sum outstanding windows parallel connections 
loss epoch recorded normalized individual connections experienced loss epoch 
aggregated information hour long trace loss epochs 
main result obtained group parallel connections ones small outstanding windows total experience larger number losses share total outstanding window warrant 
new connection starts transfers progress suffer unfairly large number losses 
key results trace analysis analysis behavior individual parallel connection behavior led important results existing loss recovery techniques effective avoiding timeouts packet losses occur new techniques developed handle 
client collection parallel connections client server aggressive user network application uses single tcp connection 
remainder sender side modifications tcp solve problems 
section enhanced loss recovery scheme improve performance individual connections 
section new integrated connection approach congestion control loss recovery improve performance parallel connections 

improving single connection performance section describe techniques designed improve loss recovery performance tcp transfers 
enhanced loss recovery mentioned section retransmissions olympic web server happened coarse timeouts kept link client idle periods hundreds node router node 
topology simulation tests 
seconds 
analysis showed main reasons occurrence timeouts 
fast retransmit followed timeout tcp reno sender unable recover multiple losses transmission window 
situation recognized occurrence fast retransmission shortly coarse timeout 

insufficient duplicate acknowledgments number outstanding packets small packets window lost preventing sender receiving acknowledgment information trigger retransmission 
tcp selective acknowledgments sacks suggested technique improve loss recovery avoid timeouts genuine persistent congestion network 
windows small generate sufficient duplicate acknowledgments sack recover losses 
detailed analysis trace data showed coarse timeouts hour period sacks helped avoid 
words current approaches tcp reno enhanced sacks really avoid timeouts 
clear alternative technique needed recover bulk losses 
desirable lower threshold duplicate acknowledgments trigger retransmissions packets reordered network 
hour period approximately coarse timeouts occurred result insufficient acknowledgment information insufficient number duplicate acknowledgments arrived trigger retransmission 
timeouts duplicate acknowledgments arrived 
situations network experiencing severe congestion 
best solution sender wait coarse timeout occur transmitting packets 
remaining timeouts single duplicate acknowledgment arrives propose single new segment sequence number higher outstanding packet sent duplicate acknowledgment arrives 
packet arrives receiver generate additional duplicate acknowledgment 
acknowledgment arrives sender assured appropriate segment lost retransmitted 
call form loss recovery enhanced recovery 
scheme orthogonal sacks effectively combined sack information receiver better performance 
simulation results ns simulation topology shown performed test enhanced loss recovery algorithm 
significant amount additional cross traffic generated force transfers router cope frequent losses small congestion windows 
done recreate situations occur traces controlled fashion simulate existing typical network topology 
simulation tests consisted single tcp transfer node node duration seconds 
test different variant tcp sender protocol node packet sequence number newreno right edge recovery sack time sec 
tcp right edge recovery 
shows simulated sequence plots tcp sack enhancement tcp newreno tcp reno certain fixes described right edge recovery 
indicated large gaps sequence plot sack transfer experiences coarse timeouts transfer right edge recovery 
coarse timeouts usually happen aren duplicate acks trigger fast retransmission 
right edge recovery algorithm sender transmits new packet response duplicate acknowledgments 
cause receiver generate additional duplicate acknowledgments trigger fast retransmission sender 
eliminating coarse timeouts sender right edge recovery performs transfer twice fast standard transmitter 

improving performance multiple tcp connections section design implementation integrated congestion control loss recovery scheme enables multiple parallel tcp connections resulting aggressive congestion behavior 
addition scheme enables better loss recovery startup performance new connections 
integrated congestion control loss recovery motivation integrated congestion control loss recovery allow applications separate tcp connection transfer just today avoid problems mentioned section making appropriate modifications network stack 
divide tcp functionality categories having reliable ordered byte stream abstraction tcp pertaining congestion control data driven loss recovery 
done integrated manner set parallel connections 
call modified version tcp tcp int 
opening separate tcp connections transfer application logically independent reliable byte streams available 
flow control connection happens independently delivery data receiving application happens independently connection 
time congestion control integrated tcp connections 
single congestion window set tcp connections client server determines total amount outstanding data set connections network 
loss occurs connections com congestion window halved achieving effect single persistent tcp connection 
addition congestion window shared connections new connections undergo slow start estimate correct congestion window 
leads improved startup performance additional connections 
data driven loss recovery integrated set tcp connections 
packet lost connection successful delivery packets connections allows sender reliably detect packet loss resorting timeout improving performance 
briefly discuss tcp int different alternative solutions proposed literature 
involve application multiplexing data streams single tcp connection 
different tcp int operates network stack permits multiple tcp connections 
detailed discussion section 
notable exception alternative solutions proposes sharing information congestion window size round trip time estimate tcp connections 
similar tcp int respects differences including lack integrated loss recovery retention connection congestion window 
furthermore describe implementation evaluate potential improvement performance 
alternative solution application level multiplexing application level solutions avoid multiple parallel tcp connections resulting problems multiplexing data streams single tcp connection 
tcp provides single seamless byte stream abstraction application level solutions include framing schemes individual data streams 
examples include persistent connection session control protocol scp mux protocol 
significant reduction latency web accesses reported 
despite performance benefits application level solutions drawbacks 
require existing applications rewritten relinked 
necessary server client 

allow multiplexing transfers initiated application 

multiplexing single tcp connection introduces undesirable coupling data transfers logically independent 
discuss detail context 
persistent connections protocol standardized recommends persistent connections 
persistent connections find wide support client server software 
point section applications having rewritten issue 
drawbacks remain valid 
new protocol integrate applications tcp connections ftp tcp connections initiated helper applications 
believe symptomatic larger struct address addr address host int cwnd congestion window host int total bytes pipe host int ssthresh slow start thresh host int count count pkts cwnd increase time decr ts time window decrease packet pkts pkts sent order pkts pipe conn set tcp connections host struct packet conn connection sent pkt int seqno seqno int size size pkt time sent ts time sent int acks acks pkts conn 
new structures necessary shared congestion windows shared error recovery 
problem 
replaced different protocol special efforts terms framing format ensure drawbacks recur 
contrast solution works regardless application level protocol 
third drawback mentioned section affects persistent connections 
example consider simultaneous transfer images persistent connection 
tcp provides ordered byte stream abstraction loss data packet image stall delivery data images receiving application web browser 
clearly undesirable 
tcp int implementation describe implementation integrated congestion control loss recovery scheme modifies tcp sender 
host single machine corresponding tcp ip stack creates structure store information communication 
new structure enables desired shared congestion control loss recovery providing single point coordination connections particular host 
structure contains standard tcp variables associated maintenance tcp congestion windows cwnd ssthresh count 
structure introduces new variables aid congestion control decr ts variables support integrated loss recovery pkts 
subsections describe various tcp routines update new information 
new send data routine connection desires send packet checks see number bytes pipe sender greater desired size pipe cwnd 
connection prepares packet sent adding entry tail list outstanding packets 
entry contains sequence number size timestamp transmitted packet 
packet sent connection increments size packet 
round robin scheduling connections essential requirement 
new recv ack routine new ack arrives sender increases cwnd variable appropriate 
arrival new ack sender removes packets pkts list reached packet sequence number transfer transfer transfer transfer time sec 
tcp sack transfers router buffer size 
transfers start seconds 
receiver 
sender decrements variable size packets removed list 
arrival ack new duplicate sender uses ack timestamp increment acks field packet sure transmitted earlier just acknowledged 
sender traverses list packets pipe oldest identify candidates retransmission 
simple situation delayed acknowledgment algorithm retransmission candidate identified rules 
acks field greater 
avoid unnecessary retransmission result network reordering packets 
packet lowest sequence number unacknowledged packet connection 
connection associated packet pending retransmission 
presence delayed acknowledgments complicates rules effectively reordering transmission acknowledgments 
receivers implementing delayed acknowledgments acknowledge receipt packet ms receipt packet 
necessitates additional rules identify lost packets 
candidate retransmission packet connection acks 
compensates requirement acknowledging packet 
packet acknowledged ms possibly lost packet 
simulation ms provide conservative bound 
requirement acknowledge packet ms reception 
sender retransmits single oldest lost packet marks connection having retransmission pending 
sender 
absence timestamp option ack sequence number combined transmission order packets perform actions 
packet sequence number transfer transfer transfer transfer time sec 
tcp int transfers router buffer size 
transfers start seconds 
adjusts congestion window cwnd perform appropriate congestion control loss 
sender uses cwnd variables identify additional packets introduced pipe 
space new packets sender chooses connection transmit packets 
choice connection done round robin algorithm connections host 
simulation results client host case section describe results ns simulation designed examine integrated congestion control loss recovery simultaneous tcp connections 
test topology 
router buffer size set packets 
small force transfers small congestion windows experience frequent losses 
topology parameters chosen recreate situations frequently occur traces mimic actual network 
test transmitting node performs tcp transfers receiver 
transfers start seconds seconds 
actual choices values important just start times connection staggered time 
shows sequence plot test sack sender 
shows typically connection performs satisfactorily time 
example time seconds connection starting experiences early losses forced recover coarse timeouts 
fact connection send significant amount data seconds time sec 
second period connection starting time sec 
time sec 
account minuscule fraction total bytes transferred 
unfairness unpredictable performance due coarse timeouts undesirable application viewpoint connections carrying critical data get slowed carrying important data better 
shows sequence plot test senders tcp int 
integrated loss recovery helps tcp variant avoid coarse timeouts 
integrated congestion control allows different connections obtain equal share total bandwidth 
total number bytes transferred slightly case tcp sack protocol packet sequence number node node router router 
topology simulation tests 
time sec formance transfers consistent predictable 
new connections build slow start window growth achieved existing connections cut timed needed completion 
discuss second test involved competing connections host 
simulation results multiple client hosts case node 
tcp int transfers hosts single bottleneck router 
connection originates host starts time 
connections originate second host start time sec respectively 
investigate bottleneck link bandwidth shared connections initiated host 
test network topology shown 
time single tcp transfer starts node nodes 
time case fifteen seconds second transfer starts node 
addition significant amount additional cross traffic generated shared bottleneck link 
intended simulation realistic 
case node uses standard tcp congestion control performed connection basis connection receives approximately share bottleneck link bandwidth 
result node receives approximately twice bandwidth node second connection starts 
shows test tcp int 
second connection node starts transfers receive approximately half bandwidth transfer node 
congestion packet sequence number control performed host basis 
host receives equal share bottleneck link bandwidth 
situations unequal distribution bandwidth may desirable 
example proxy host launches connections behalf clients probably receive larger share bandwidth individual client host communicating directly server 
able achieve tcp int modifying window growth shrinkage process performing integrated loss recovery just 
basic idea manage congestion window set tcp connections proxy host operating independent 
discuss detail 
shows result test congestion control policy node modified connections receives share bottleneck bandwidth connection node 
connections continue benefit integrated loss recovery 

time sec 
tcp int transfers congestion control algorithm proxies hosts single bottleneck router 
connection originates host starts time 
connections originate second host start time sec respectively 
detailed analysis tcp behavior busy web server 
analysis focused main areas examining performance individual tcp connections carry payloads examining detrimental effects web browsers parallel tcp connections network performance 
existing loss recovery techniques effective dealing packet losses new techniques developed handle 
losses required coarse timeout recover 
fast retransmissions recovered losses 
remainder losses slow start timeout 
network implementations increase default socket buffer size avoid receiver window bottleneck 
socket buffer size limited throughput approximately observed connections 
ack compression observed phenomenon correlated subsequent packet losses 
analysis indicates dynamic comparison data acks bandwidths effective indicator ack compression easy implement tcp layer 
area investigation mechanisms traffic shaping combat adverse effects ack compression 
client collection parallel connections client server aggressive user network application uses single tcp connection 
throughput positively correlated number active connections 
multiple connections concurrently active experiences loss half remaining ones average experience loss 
combined congestion window group parallel connections decrease congestion window single connection loss epoch 
group parallel connections ones small outstanding windows experience larger number losses share total outstanding window warrant 
means may harder initiate new connection keep existing connection going 
proposed sender side tcp modifications improve performance tcp loss recovery parallel connections individual clients 
reduce occurrence timeouts enhanced loss recovery scheme improves performance window sizes small insufficient duplicate acknowledgments arrive multiple losses window 
analysis trace data shows coarse timeouts avoided scheme resulting significant performance improvements 
simulation results show test circumstances lead dramatic reduction number coarse timeouts 
address problem parallel connections individual clients integrated approach congestion control loss recovery allows tcp sender aggregate simultaneous connections individual clients treat single unit 
simulation results show approach achieves improved start behavior loss recovery bandwidth sharing parallel connections number hosts 
currently implementing enhanced loss recovery integrated connection techniques examining performance real world busy server environments 
addition part data collection traceroute collect network topology information large fraction clients visited web server 
plan topology information examine possibility extending integrated congestion control loss recovery methods share information connections nearby hosts connections originating host expanding results 

ibm alphaworks home page 
www alphaworks ibm com 
claffy thompson wilder 
oc mon flexible affordable high performance statistics collection 
www nlanr net na oc mon aug 
balakrishnan padmanabhan seshan stemm katz 
tcp behavior busy web server analysis improvements 
technical report ucb csd university california berkeley july 
balakrishnan seshan stemm katz 
analyzing stability wide area network performance 
proc 
acm sigmetrics june 
berners lee cailliau world wide web 
communications acm aug 
fall floyd 
simulation comparisons tahoe reno sack tcp 
computer communications review july 
fielding gettys mogul frystyk berners lee 
hypertext transfer protocol jan 
rfc 
gettys 
mux protocol specification wd mux 
www org pub www protocols mux wd mux html 
hoe 
improving start behavior congestion control scheme tcp 
proc 
acm sigcomm august 
jacobson 
congestion avoidance control 
proc 
acm sigcomm august 
mogul :10.1.1.37.1592
observing tcp dynamics real networks 
technical report digital western research lab april 
ns network simulator 
www mash cs berkeley edu ns 
padmanabhan mogul 
improving latency 
proc 
second international www conference october 

session control protocol scp 
www org pub www protocols ng html 
stevens 
tcp ip illustrated volume 
addison wesley reading ma nov 
touch 
tcp control block interdependence 
rfc april 
rfc 
boiler room 
www ibm com 
zhang shenker clark 
observations dynamics congestion control algorithm effects way traffic 
proc 
acm sigcomm pages 
