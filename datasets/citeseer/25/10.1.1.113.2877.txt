certi cation compiler optimizations kleene algebra tests dexter kozen maria cristina patron computer science department cornell university ithaca ny usa 
email kozen cs cornell edu center applied mathematics cornell university ithaca ny usa 
email cam cornell edu 
kleene algebra tests verify wide assortment compiler optimizations including dead code elimination common subexpression elimination copy propagation loop hoisting induction variable elimination instruction scheduling algebraic simpli cation loop unrolling elimination redundant instructions array bounds check elimination 
cases give formal equational proof correctness optimizing transformation 
kleene algebra ka algebra regular expressions 
rst introduced kleene developed monograph conway 
contexts mathematics computer science see 
extension ka called kleene algebra tests kat introduced 
system combines programs assertions simple purely equational system 
shown kat strictly subsumes propositional hoare logic greater complexity deductively complete relational models hoare logic 
kat requires constructs classical equational logic contrast hoare logic requires specialized syntax involving partial correctness assertions 
kat applied successfully various low level veri cation tasks involving communication protocols basic safety analysis source source program transformation concurrency control 
useful feature kat regard ability accommodate certain basic equational assumptions regarding interaction atomic instructions 
feature kat ideal reasoning correctness low level code transformations 
kat variety common compiler optimizations dead code elimination common subexpression elimination copy propagation loop hoisting induction variable elimination instruction supported national science foundation ccr 
scheduling algebraic simpli cation loop unrolling elimination redundant instructions array bounds check elimination 
cases give formal machine veri able equational proof correctness optimizing transformation 
veri cation compiler optimizations just theoretical exercise 
led investigations typed assembly language tal proof carrying code pcc cient code ecc :10.1.1.40.2507:10.1.1.24.6526
systems provide means untrusted compiler convince trusted veri er object code produces meets certain safety requirements 
pcc powerful systems 
quite exible security policies express signi cant problem size certi cates :10.1.1.126.9884
ecc addresses issue advantage compiler conventions giving signi cant reduction certi cate size 
ecc production veri cation certi cates cient invisible code producer consumer 
savings come cost reduced expressiveness compiler dependence 
particular tal pcc deal optimizing transformations ecc dependent form object code produced compiler robust respect code motion 
verify optimized code ecc require certi cate include concise description sequence optimizing transformations performed veri able justi cation transformations 
extension system kat described 
section discuss interesting paradox arises connection dead variables current value 
paradox source potentially dangerous pitfall informal reasoning 
formal treatment helps illuminate pitfall 
kleene algebra kleene algebra tests section brie review de nitions kleene algebra kleene algebra tests see thorough 
kleene algebra ka axiomatization 
kleene algebra idempotent semiring satisfying refers natural partial order pp pr rp qp def axioms say essentially behaves re exive transitive closure operator relational algebra kleene operator formal languages 
operation gives supremum respect operators monotone respect basic properties nd identities particularly useful qp pq qp identities called sliding rule rule respectively 
addition result prove useful lemma 
kleene algebra xy xy yx proof 
show independently xy xy yx xy yx xy show show xy yx yx reasoning assumption xy wehave yx xy xy sliding rule xy assumption xy xy xy distributivity xy yx sliding rule 
reasoning assumption xy wehave distributivity yy xy xy xy right hand side follows sliding rule 
kleene algebra tests kat kleene algebra tests kleene algebra embedded boolean subalgebra 
formally sorted structure kleene algebra boolean algebra boolean complementation operator de ned elements called tests 
denote arbitrary elements letters tests applied arbitrary elements operators refer nondeterministic choice composition fail skip respectively 
applied tests take additional meaning boolean disjunction conjunction falsity truth respectively 
usages con ict example sequentially testing testing conjunction bc coexistence permits considerable economy expression 
applications program veri cation standard interpretation ka binary relations set boolean algebra subsets identity relation 
consider trace models kleene elements sets traces sequences states boolean elements sets states traces length 
encoding program constructs propositional dynamic logic def pq def bp bq def bp result observed follows directly lemma 
intuitively execution program ect value test lemma 
kat qb bq bq qb proof 
bq qb boolean algebra bq bq qb lemma 
equations follow sliding rule symmetry 
kat hoare logic hoare logic system deriving partial correctness properties compound programs compositionally properties constituent parts 
traditionally properties expressed partial correctness assertions pcas form fbg fcg assertions underlying assertion language program 
intuitively pca says property holds start execution halts true halting state 
mentioned kat subsumes hoare logic 
pca fbg fcg expressed bpc equivalently bp bpc 
intuitively bpc says halting computation satisfying precondition postcondition bpc says testing executing precondition redundant 
traditional hoare logic atomic programs assignments atomic assumption assignment rule fp fp hoare logic operates deriving pcas involving compound programs inductively assignment rule axiom 
operation kat analogous assumptions equations programs form assumptions general 
theorems kat universally quanti ed horn formulas form applications typically premises involve atomic instructions tests immediately self evident equivalence unoptimized optimized code fragments 
optimization examples certain kinds premises occur frequently 
example need know atomic instructions ect occur order 
expressed kat commutativity condition form pq qp 
take assertion premise left hand side horn formula 
common example fact loading register value register contains value 
expressed equation form pa load instruction assertion register contains value 
assertion allows introduce new assertions annotated program delete longer needed 
nal example fact register contains value need load encoded equation form ap premise allows delete redundant instructions 
atomic premises extensively derivations section 
cases truth premise directly evident 
observed decision procedure kat premises form eliminated loss ciency 
verifying optimizations kat section consider examples common compiler optimizations show encoded veri ed kat 
case program fragments optimizations translations language kat equational proof fragments equivalent 
dead code elimination dead code elimination code transformation removes unreachable instructions 
start simple example 
consider program expressed kat aq 
expression represents implicit clause 
suppose know test false execution imply test statement false program executed 
remove obtain optimized fragment assumption test false execution expressed kat identity pa equivalently pa 
intuitively immediately execution wemust state holds 
case executing guard redundant equivalently executing guard aborts computation 
reasoning kat assumption pa wehave aq pa aq paa pa pa pa kat expressions representing program fragments equal 
case loop consider fragment encoded kat expression aq suppose test false execution pa means loop executed able obtain optimized fragment reasoning kat assumption pa wehave aq pa aq pa aq aq paa aq pa aq pa pa cases give examples assumptions atomic programs tests pa derive unoptimized optimized programs 
essentially purely equational proofs universal horn formulas pa aq pa aq common subexpression elimination common subexpression elimination code transformation avoids redundant evaluation expression result rst computation 
example consider program fragment expr expr expr expression containing replaced expr consider programs tests def expr def expr def def unde ned def expr def wish prove pq pr 
postulate premises pa atomic pca expr fi aq atomic pca fi expr fi jg br need assign wr dead immediately assignment qw assignment redundant 
rst instances hoare assignment rule 
premises reason equationally follows pq pq pqr pqr pwr pr copy propagation copy propagation code transformation eliminates assignment ofthe form replaces example consider program fragment expr expr occur expr 
common subexpression elimination section second assignment replaced argue replace assignment 
letting ands denote assignments expr respectively wish show pqs 
su ces show qr qs 
consider program tests def def def unde ned postulate premises qa atomic pca ar arb atomic pca fk bs need assign ws dead immediately assignment rw assignment dead variable redundant 
rst instances hoare assignment rule assumptions reason follows qr qr qrs qrs qs dead variable optimize removing assignment obtaining optimized code ps 
letting def unde ned wish show 
vs occur qv dead assignment redundant 
allows conclude pvs 
loop hoisting loop hoisting transformation involves moving code loops 
take forms rst form expression value depend number times loop need evaluated inside loop evaluated rst execution body loop 
second expression value inside loop need evaluated inside loop evaluated loop 
example rst type transformation consider program fragment sum sum sum expr expr expression containing sum 
new variable 
fragment equivalent fragment sum expr sum sum formally new variable captured saying appear expression rst fragment unde ned immediately execution fragment 
de ne program tests def def expr def unde ned aw pu ars aw 
postulating assumptions ub expr expr occur expr bu expr need assign expr bq qb sum occur expr bs sb occur expr br rb sum occur expr lemma copy propagation section argue follows pu ars pub ars pub pub pub pub pu commutes wehave lemma uw need assign dead variable 
pu aw pw aw pu ars aw aw prove 
example second type transformation consider program computation inside loop test assigned di erent expression time loop executed previous example apply 
rest loop obtain optimized code prove au au 
de ning atomic program def unde ned postulates wu dead just assignment wpq refer wa aw refer wa aw refer uw assignment dead variable redundant 
reasoning assumptions sliding rule lemma au au au au au induction variable elimination loop optimization replaces multiplicative operations inside loop expensive additive ones 
type optimization arise matrix algorithms 
example consider program init expr expr expr occur expr expr note increased expr increased expr expr 
optimized code init expr expr expr expr transformation section optimize obtain init expr expr expr expr establish equivalence rst programs uq uq apr su ces prove apr consider tests def expr def expr expr expr expr def expr expr expr assumptions qb bq basic number theoretic reasoning cr crb instance hoare assignment rule bp bpc follows instance fb fcg hoare assignment rule 
addition cq cr instance property expressions thesame value assignment expression variable ect 
hold occurred expressions 
occur expression expr def unde ned premises wq rw cq cr proved cr crb cq property cq cr holds general case occur expressions 
know hoare logic kleene algebra primitive assumptions introducing new symbols underlying programming assertion language 
content take cq cr primitive assumption 
bpq bpr 
bpq follows 
sliding rule lemma qb qb apr instruction scheduling unrelated instructions reordered maximize throughput processor pipeline 
example equivalent dependency instructions assumption expressed kat equation pq qp 
assumptions reorder instructions arbitrarily long dependencies violated 
algebraic simpli cation transformation eliminates statements corresponding trivial algebraic identities occasionally arise due constant propagation previous transformations 
example assignment form eliminated 
simply application assumption form ap kleene algebra axiom loop unrolling possible reduce number tests jumps executed loop unrolling loop 
unroll loop obtain fp pg 
wehave ap ap ap lemma pure kat captures essence transformation 
lemma 
kleene algebra uu proof 
direction monotonicity distributivity idempotence basic properties uu uu uu uu direction prove uu uu distributivity wehave uu uu uu uu uu uu uu prove equivalence programs sliding basic axioms lemma 
ap ap apa apa apa apa apa apa apa apa apa apa apa apa apa apa ap ap ap redundant loads stores instruction sequence load store store instruction redundant rst ensures value contents register obtain optimized code store letting def load def store def postulate pa loading register test redundant aq storing redundant 
assumptions pq pa array bounds check elimination consider program initialize elements array length fx compiler check array accesses fall bounds test length compute bounds error goto bounds check inside loop redundant 
optimized code consider tests test length compute goto def def length def ab bounds bp cq cs see true loop remains true iteration bp cq cs bp cq cs reasoning assumptions ua ab pc cp dead code elimination section lemma bp cq cs ua bp cq cs ua abp cq cs ua cp cq cs ua pc cq cs ua ua ua note kat contain explicit machinery number theoretic reasoning separate issue 
shown example reduce correctness optimizing code transformation set basic number theoretic assumptions atomic programs tests justify transformation 
example related arrays 
suppose want certain element say elements nonempty array length done nand true false order eliminate tests loop introduce sentinel extend array new element initialized optimized program true false prove programs equivalent consider tests def def def def program def unde ned 
want abq ab bq uw commutes programs tests ab introduce left hand side move expression lemma 
su ces prove abq ab bq uc cp pc andp pd wehave su ces prove cd abq ab cd bq note cdb words cdb cq qc 
lemma variously cd abq cd bq sliding properties cda cdb wehave cd abq ab cd ab cd cda cdb proves 
cdb cdb cd cd bq dead variable paradox conclude remarks interesting paradox concerning dead variables variables values 
paradox source potentially dangerous pitfall arise reasoning informally liveness variables 
formal helps illuminate issue 
reader noticed wehave extensive construct def unde ned atomic assertions pw wp assignment expression containing may wondered test def dead variable assertions pd dp 
example def def postulate atomic premises dp dead immediately assignment qd dq assignment ect pd assignment redundant eliminate rst assignment toi program arguing qp 
problem proposition dead variable property local state computation 
commute tests involving order boolean element kleene algebra tests test context kat lead paradoxical results 
illustrate consider calculation 
de ning def pa immediately assignment ap assignment ad da 
pp da clearly erroneous 
solution paradox program regarded assignment unde ned value transformation local state ordinary assignment 
program test required axioms kat commute tests 

ernie cohen 
hypotheses kleene algebra 
available ftp ftp bellcore com pub ernie research homepage html april 

ernie cohen 
lazy caching 
available ftp ftp bellcore com pub ernie research homepage html 

ernie cohen 
kleene algebra reason concurrency control 
available ftp ftp bellcore com pub ernie research homepage html 

john horton conway 
regular algebra finite machines 
chapman hall london 

michael fischer richard ladner 
propositional dynamic logic regular programs 
comput 
syst 
sci 

stephen kleene 
representation events nerve nets nite automata 
shannon mccarthy editors automata studies pages 
princeton university press princeton 

dexter kozen 
completeness theorem kleene algebras algebra regular events 
infor 
comput may 

dexter kozen 
kleene algebra tests 
transactions programming languages systems may 

dexter kozen 
cient code certi cation 
technical report computer science department cornell university january 

dexter kozen 
hoare logic kleene algebra tests 
trans 
computational logic july 
appear 

dexter kozen frederick smith 
kleene algebra tests completeness decidability 
van dalen bezem editors proc 
th int 
workshop computer science logic csl volume lecture notes computer science pages utrecht netherlands september 
springer verlag 

greg morrisett david walker karl crary neal glew 
system typed assembly language 
th acm sigplan symposium principles programming languages pages san diego california usa january 

george necula 
proof carrying code 
proc 
th symp 
principles programming languages pages 
acm sigplan sigact january 

george necula peter lee 
design implementation certifying compiler 
proc 
conf 
programming language design implementation pages 
acm sigplan 
