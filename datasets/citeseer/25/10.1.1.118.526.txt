appeared journal software systems modeling volume number pp 
december matters meta modeling thomas hne darmstadt university technology darmstadt germany mail informatik tu darmstadt de trend model driven engineering common understanding basic notions model metamodel pivotal issue 
notions widespread quite little consensus exactly appropriate 
aim article start establishing consensus generally acceptable terminology 
main contributions distinction fundamentally different kinds model roles token model versus type model formal notion consideration generalization basic relationship models 
particular recognition fundamental difference mentioned kinds model roles crucial order enable communication model driven engineering community free unnoticed misunderstandings unnecessary disagreement 
key words model driven engineering modeling metamodeling token model type model new research area gains momentum task defining central notions needs addressed 
communities take surprisingly long time come agreement notions object component encompass 
efforts tedious causing research meetings stall definition problem necessary order enable unambiguous communication community members 
number efforts establish unambiguous vocabulary testify need shared conceptualization model engineering 
community continues maintain different terms type token introduced peirce 
ontologies basic terms discipline communication may create illusion agreement unnoticed misunderstandings raise barriers communication just accidental 
focus term model context model driven engineering 
models language nature physical scale models describe opposed models mathematics understood interpretations theory 
attempt define scope notion model consider traditionally software engineering 
perspective model artifact formulated modeling language uml describing system help various diagram types 
typically model descriptions graph rendered visually 
model driven engineering context characterization narrow 
artifacts java programs considered models understood describing systems possible execution traces program 
liberal model result applying powerful principle unification model 
intent get new development paradigm possible 
instance transformations considered models fundamental operation model driven engineering model model transformation standard general infrastructure may obtain particular transformation transforming 
obviously model unconditionally true relieve task defining fundamental model relationships 
relative way needs able speak different roles system model element corresponding relationships representation instantiation independently considered model modeled system model elements model models notion definition task completed basic notions object orientation thomas hne notions instantiation inheritance fully understood full potential object orientation unfolded 
instance solid notion subtyping discipline inheritance crucial build safely reusable software 
need achieve clarity consensus basic notions model driven engineering order unlock full potential 
remainder article attempts home characterization model context model driven engineering may subscribe 
distinguish fundamentally different kinds model roles 
difference kinds explicit able define basic model notions properties metamodel generalization models 
complement discussion relating notions metamodel language conclude 
model 
section attempt define scope notion model broad include useful narrow useless 
notion includes loses discrimination property 
analogy practically characterized object technical term provides value communication included term object 
likewise notion model include transformation opportunistic manner considered useful deemed correct way includes transformation defined scope sufficient size unnecessary breadth 
context definition useful model abstraction real language system allowing predictions inferences 
aim article proofs complete formalization modeling try disambiguate concisely essence informal textual statements formal syntax denote relationship system model 
general establishes relationship model may describe systems system may described models 
mathematically binary relation 
subset relation representation relation model relation includes accidental legally conforming system model pair relation meant representation placeholder representative confused presentation concrete syntax communication purposes 
capture pairs model specifically intended represent corresponding system 
able state model models model represent single original system opposed 
fig 
shows corresponding example featuring map models 
fig 
figures standard uml notation usual meaning objects classes associations dashed dependency lines instance stereotypes denote instantiation non uml elements illustrative purposes 
associations annotated notation successively introduce order connect textual definitions examples shown figures 
easy tab 
serves final summary notation introduced fig 
illustrates important relationships accordingly 
order able discuss various model properties assume abstraction function produces model system 
spirit assuming available formal representation 
instance structured set rs elements relationships rs elements adequate choice 
system real physical system study thought generated process modeling system 
argue process modeling embodies operation trying study approach works loss generality 
purposes irrelevant system conceptualize real representation real system 
philosophical epistemological issues process modeling extract structure properties real system practically infinitely properties possibly unobservable behavior formal representation interest context focusing model technical term model driven engineering investigating process creating representations reality 
model features model needs possess features see tab 

features covered informally speaks model projection implies projected original lose property real systems expression language relevant section 
matters meta modeling mapping feature model original 
reduction feature model reflects relevant selection original properties 
pragmatic feature model needs usable place original respect purpose 
table model features 
information lost projection 
formally relating equation 
model abstraction consists projection abstraction elements including relationships translation representation modeling language 
projection associate filtering elements reducing number individual information content 
projection injective homomorphism structure preserving operation 
regard function homomorphism operation operation result preserves structure original parts retains creates relationship target subset source 
label reduced intermediate result projection abstraction sr exactly information system left projection depends ultimate purpose model third feature pragmatic model model purpose 
ller includes sender recipient relevant 
ller model information content meaning created sender somebody receiver purpose usage context 
common purpose model place system 
answers obtained model system provided model adequate correct 
typically motivation model cost saving cheaper quicker obtain answers model system 
models known imprecise false respect automatically mean inadequate 
imprecisions best may affect properties interest slightly worse may just evaluation worse skew acceptable extent 
far referred original system 
motivation modeling software engineering models typically come flavors descriptive prescriptive 
descriptive models capture knowledge requirements domain analysis prescriptive models aka specification models blueprints construction plans system designs implementations nowadays main purpose blueprints support planning early validation finding errors early possible partially evaluating system realized value obtainable prescriptive nature limited lack rigor preciseness regarding meaning 
primary goals model driven engineering shift emphasis informal non binding models rigorous binding models 
note idea model construction plan principle conflict required mapping feature 
original map model 
webster new encyclopedic dictionary includes definition model theoretical projection possible imaginary system 
words original built may remain completely imaginary 
possibility relevance context accept construction plans models clearly intended system model represent 
order connotation original preceding model time respect existence suitable term original subject 
transformations models 
far notion model accordance established definitions include unconventional interpretations model transformation 
fact model transformation information mapping model created transformation engineer transformation engine order automate translation process 
transformation refers original actual mapping links actual models reflects relevant properties original spell individual mapping links describes mapping scheme terms model languages 
true long understands transformation description transformation function 
interpret transformation actual links elements source model elements target model transformations considered models longer point reduction feature 
view accordance terminology offered actual course transformation model real transformation going originals respective source target models 
exceptional case considering 
thomas hne fig 
token models model transitivity frankfurt darmstadt connections links referred descriptions referred 
copy model obviously sake making artifacts possible eligible considered models drop demand models reduction feature 
threshold notion starts deteriorating meaningless 
note able speak absence reduction subjects finite representations 
representation real world subject automatically implies reduction granted model status 
context descriptions subjects finite formal representations may consider accepting definitions model webster new encyclopedic dictionary small exact copy long exact refers properties wants retain understood mean complete 
build car original precise minute detail constructed model copy 
copy crash test performed model simulation real test run 
exact copies offer advantages models typically cost reduction entail disadvantages typically inaccuracy regard original 
words abstraction model 
order maximize unification principle accept copies models refer degenerate models 
kinds model roles discussion far take account existence fundamentally different kinds models 
personal communication expert thought kind expert thought kind far agreement 
context refute model status copy observing language description original 
munich darmstadt munich soon characterizations attempted transitivity model relationship circumstances model metamodel experts start disagreeing may consolidate views discovering different 
course ways distinguish models product versus process models static versus dynamic models discussion differences irrelevant 
kinds models able create communication experts talking basic modeling notions token type models 
section title indicates kinds absolute properties models depend relationship system 
token models typical example token model map see middle part fig 

note left hand side fig 
depictions real world systems model subjects illustrative purposes better recognized subjects opposed regarded models 
formal treatment continue assume model subjects representations 
elements token model capture singular opposed universal aspects original elements model individual properties elements system 
uml natural choice creating token model object diagram captures system elements interested mapping represents individual attribute values 
note depending nature subject class diagrams may appropriate see section particular fig 

formally respect equation id words abstraction process creating token models involves abstraction projection translation see equation 
consequence elements restrict notion model pure abstractions subjects 
additional information contain matters meta modeling token model designators elements system retained reduced system sr see equation 
correspondence relationships elements model subset system property implies token model relationship transitive 
chain token models regarded chain designators linearly referencing ultimately system 
designators token model transitively reach subset system elements 
instructive realize coarsely capturing elements system model distinguishing lane lane representing just plain elements confused generalization 
projection elements number elements designating originals way generalization union special concepts general concept 
course correspondence equivalence relationship mapping different source elements target element generalization extension general concept may exactly define elements considered equivalent presence differentiating special concepts 
context article concept implies intensional abstraction predicates characterize elements description independent manner 
instance know mammal may refer characterized elements concept 
concept refer extension elements falling concept refer intension conjunction predicates characterizing element belongs concept respect generalization state intensionally extensionally 
uml parlance token models referred snapshot models capture single configuration dynamic system 
fine grained representation system retaining system elements potentially completely unrelated subject considered treatment 
fashion ideal capturing detail changes dynamically time 
possible names token models representation model due direct representation character instance model model elements instances opposed types singular model elements designate individuals universals extensional model enumerative respect system elements 
software engineering stereotypical usages token models include capturing initial system configurations system snapshots basis simulations regarding performance 
token models people mind talking models general 
example building plan house token model 
type models seen previous section token models useful applications 
little condense complex systems concise descriptions due toone representation elements relevant part system 
type models economic respect 
reasons human mind exploits power type models object properties legged sharp teeth classify objects predator draw properties known object class dangerous 
way human mind need memorize particular observations arrive decisions afresh just collects concepts universal properties 
models model driven engineering type models 
contrast token models type models capture universal aspects system elements means classification 
fig 
shows top type model modeled country uml natural diagram kind type models class diagram 
representing particular elements links type model captures types interest associations 
schema model classification model universal model intensional model appropriate names 
fig 
kinds model roles city instanceof frankfurt darmstadt road munich thomas hne formally respect equation classification function classifying elements including relationships considered equivalent respect certain properties respective type 
complete abstraction function creating type models involves classification addition projection translation see equation 
function homomorphism 
classifies system element sr singleton set isomorphism 
course usefulness type models stems fact typically case 
may check model conforms model mtype bottom right token model fig 
conforms type model attempting construct homomorphism mtype 
homomorphism see equation implies equivalence relation defining objects relationships considered equivalent type 
mtype may regarded quotient respect equivalence relation 
mtype type models created classification may say model instance model mtype 
proceed discuss recognizing difference token type models important clarify token type model depends relationship modeled system intrinsic model property 
roles 
fig 
shows middle top model usually considered type model elements designate universals classify individual objects existing runtime execution java program 
time token model corresponding java classes 
class diagram capture universal aspects java classes directly represents mapping 
needs careful judge role model contained elements 
consider product model pet store 
normally element named represent concept extension instances case pet store simply object representing animal types may order 
just designates individual choice shop corresponding model token model despite fact usually associated type 
conversely element typically indicates respective model token model particular 
type model actual instances classifies play role movie character 
famous brought life dog actors 
standard object reliable indicator actual nature corresponding model 
characterizing model token type model specify respect model subject 
precisely clearly demonstrated fig 
models may characterized may characterize mode model respect subject 
classification versus generalization equations show element abstraction resolves id token type models respectively 
cases tempted introduce generalization function consider token type models respectively 
generalization function maps equivalent subject elements model element equivalence relation confused classification intention obtain universal equivalent elements intention generalization increase extension existing universals 
words maps concepts super concept operation classification maps elements concept 
attach subscript instances aka tokens model relationship write order signal model regarded token model system subscript types write order signal regarded type model system obviously constrained way model regarded token model system system instance si type model si si si interesting observations considering fig 
referring java classes si referring java runtime see top right labels boxes fig 

si si type model si 
expected si viewed direct instance indirect instance 
matters meta modeling java classes token type model generalized type model harbor ferry city road java runtime darmstadt munich fig 
model modes generalization harbor city token model submodel subject assuming elements represented 
course prepared ignore elements harbor ferry considered token model want represent elements element represent elements possible token model 
course type generalization classification 
token model elements represent elements fashion 
note possible reinterpret reduced version completely ignoring way obtained 
assumption intend capture elements representative generalization possible state bearing mind complete reinterpretation original role considers system representation model instantiation basic notions model engineering discussion apparent model generalization basic notion interplay notions needs defined 
seen crucial distinguish token type model roles 
coming back original question generalization admissible additional abstraction function answer question token type models respectively token models answer id mandatory 
allowing generalization type models subjects 
seen generalization sense type models 
type models answer twofold may just generalization prerequisite subject type model role subject token model role consider model fig 
delete java runtime resulting super ferry road location connection model represent subject type token model 
course consider establishing new relationship token model 
fact resulting elements model look elements role level collaborations uml interaction diagrams 
clearly objects roles objects represent element subject traditional types don classify elements subject intensional manner types classes 
best interpretations author think entities placeholders true objects constrained attribute values variables 
application placeholders interaction diagrams represent program code 
stereotypical objects result alternative projection function constrained maintain mapping may project elements system element model 
application stereotypical objects object diagrams meant actual system snapshots illustrations object roles perform certain interactions general 
second respect generalization abstraction function type models relates combination generalization classification obtain generalized version type model 
note result achieved directly maps generalized types 
conversely state type model produced creating isomorphic type model subject singleton element represented singleton type generalizing resulting types adequate 
established different characteristics token type model roles investigated interplay basic model relationships representation instantiation generalization position answer question appropriate characterize model metamodel 
thomas hne fig 
ontological metamodeling metamodel 
ontological ontological instanceof instanceof breed literal analysis metamodel suggests investigate prefix meta signifies similar contexts 
apparently prefix meta operation applied twice 
instance discussion conduct discussion meta discussion learning general learning strategies learning particular subject metalearning 
final example consider mathematicians hilbert concerned proper founding mathematics worked subjects proof theory th century 
order sure ordinary mathematics performed reliably mathematical methods new subject area coined metamathematics mathematical methods applied mathematics 
summary prefix meta operation order denote applied twice 
stating class class states meta meta class 
application operation meta prefix added yield meta meta class find supporting statements defining metamodel implying modeling taken place twice metamodel model models 
model instance metamodel 
implies metamodel model model 
look right hand side model fig 
showing model model middle fig 
talking map uses larger scale just provides information original map justified label metamodel 
enjoys relationship original system subject model real involves detachment respect original 
instance meta discussions take away ordinary discussion metalearning immediate effect learning particular subject 
regarding fig 
need steps get back original system refrain accepting metamodel overarching link identifying ordinary non meta model 
characterize level detachment original double application operation need exclude transitive generalizing superclass instance yields superclass tempted construct super superclass read meta superclass 
due transitivity generalization super super just super 
relation entities going build meta entity transitive 
order define formally relation composition compose relation er intuitively means path length relation standard transitive property relations may expressed 
demand relation suitable building acyclic anti transitive 
note acyclic implies irreflexive er asymmetric extends exclusion cycles length 
considering model instantiation candidate meta level constructing relation confirm map elements claim elements mutual instances creating circular definitions disallow transitivity length 
anti transitive property excludes transitivity just levels 
constraints guarantee meta level constructing relationship relationships loose sense may cross level boundary 
undesired strict metamodeling property required level respecting novel designed property relations sure paths element element lengths 
note unique paths unproblematic anyway assign levels involved elements definition possibility inconsistencies 
multiple paths may exist due multiple self description useful self terminating meta hierarchy tops 
special application sense linguistic hierarchies see section admitted special case 
matters meta modeling classification 
note property level respecting implies property anti transitive discarded 
going back initial question firmly reject potential metamodel status right hand side model fig 
relationship models token model relationship transitive suitable constitute metamodels 
token model token model metamodel 
fig 
shows model right hand side truly metamodel 
time relationship models type model litmus test relationship transitive succeeds 
result confirm phrase metamodel model model true provided respective model relationship transitive 
note order create metamodel need non transitive relationship type model twice 
fig 
java classes type model java runtime token type model token model java classes metamodel java runtime missing type model relationship 
flavors model element instantiation seen construct model model model subject 
alternative way achieve anti transitivity potentially giving rise metamodels model content model language write model 
model right hand side fig 
specifies syntax language create token type models case tiny portion uml respective instanceof relationships labeled linguistic 
order able discuss section models fig 
granted metamodel status fully appreciate discussion section reasonable associate models language definitions need difference linguistic ontological instantiation explicit 
note possible distinguish instantiation relationship models called sem inter level instantiation relationship model elements called meta just overloaded term cases 
mean model element instance model element 
fig 
depicts answer depends talking ontological linguistic instantiation 
ontological instantiation defined alternatively 
extended fig 
include type model containing elements fig 
shows nice natural name breed 
see left hand side fig 
corresponding visualization uses real images denoting meaning models illustrative purposes 
object considered ontological instance type expect referenced element extension concept referenced type definition 
intensional variant definition demands referenced domain element satisfies intension conjunction predicates referenced concept 
ontological instantiation elements models relationship terms meaning 
ontological domain models may set meaning corresponding elements reduced system sr turn elements original system 
way distinguish original system represented model possibly rich meaning model see fig 

note practical modeling languages uml additionally define syntactic conformance rules see equation 
conformance regarded instance syntactically 
sense real ontological test performed automatically 
linguistic instantiation defined alternatively 
see bottom part fig 
corresponding visualization 
linguistic instantiation element linguistic type assumption type represents fragment language defining expressions valid sentences 
definition simply apply intension type predicate element 
note element appears argument linguistic instantiation concerns form elements opposed content meaning respectively case ontological instantiation 
seen fig 
language concepts object class right hand side subjects domain left hand side 
illustrates linguistic model ml model subject model subject ml ml mt mt uml metamodel metamodel 
fig 
shows model bottom left depicted object diagram corresponding ontological type model depicted class diagram top left 
corresponding excerpts linguistic uml metamodel unconnected shown right hand side 
sake simplicity just considering ontological levels principle thomas hne long hair bushy tail herd sheep intension extension concept fig 
ontological versus linguistic instantiation models model fragments granted metamodel status 
top left type model metamodel respect subject shown fig 
bottom left model 
test developed section require sequence non transitive model relationships single type model relationship making top left model simple type model see equation 
city frankfurt darmstadt ontological instanceof road munich fig 
linguistic metamodels linguistic instanceof linguistic instanceof class association object link interesting cases models right hand side fig 

bottom right model result applying non model operation twice system called metamodel basis tom ontological instanceof linguistic instanceof linguistic instanceof class type instance object fido object clock extension language intension name slots links model model model bottom left model subject see definition 
maintain relationship engages anti transitive relationship 
reason discussing case metamodel omg policy referring model metamodel 
fact old versions layer architecture objects frankfurt located level classes city level elements uml superstructure class level plausible language level thought maintaining level type relationship user objects level 
change correction interpretation belonging model stack user model objects moved level type model relationship uml language definition 
think level type model chain real user individuals case relationship concerning individuals type represents 
consequently clean case level type model chain 
top right model fig 

superficially appears feature level type model chain relationships bottom left top right model 
relationships kind 
ontological instantiation relates models subjects domain different logical levels 
linguistic instantiation relates model definition language expression 
ergo top right model linguistic level matters meta modeling notation name description abstraction creates model system projection possibly classification generalization 
classification creates type model generalization creates projection homomorphic mapping creating reduced system system selection reduction information 
represents records intention model represent system 
meaning assigns meaning model element 
may define 
model holds system model describing 
token model type model ontological model linguistic model table notation overview member extension fig 
relations functions holds system model representing fashion 
model elements may regarded designators system elements 
holds system model classifying fashion 
model elements regarded classifiers system elements 
indicates model controls content elements oi 
assuming systems model oi see definition 
indicates model controls form elements 
automatically implies type type member extension token token bottom right model intermediate ontological instantiation count respect linguistic 
strictly speaking right hand side models fig 
pure metamodels sense repeating non transitive operation twice 
wants stick term metamodel level right hand side models fig 
respectively basis linguistic models models models violating anti transitivity 
fig 
tab 
summarize concepts notation introduced far 
section order explore model adequate case linguistic models 
metamodel language definition 
task answering question question precise respect ontological metamodels rightmost model fig 
observe primary purpose define language 
albeit users think domain models may regard defining vocabulary plus constraints lower ontological level just class diagram regarded define vocabulary plus constraints language object diagrams conforming 
surprising definitions ontological linguistic instantiation definitions respectively differ detour domain subjects ontological case 
intents purposes answer question ontological metamodels language definitions interpret ontological metamodel domain specific language definition turning linguistic metamodel 
concentrate question relationship linguistic metamodels languages fig 
uml notation indicates relations lines featuring arrow heads sides functions lines featuring arrow head dashed lines exceptions rule 
thomas hne quotations indicate perceived close relationship metamodel model defines language expressing model metamodel model language models metamodel specification model systems study specified models certain modeling language reconstructing statements framework yields metamodel mm model model mm mm equivalently making language involved explicit mm see fig 
language fig 
language stack 
language concept refer language specification set sentences 
defines metamodel language linguistic instanceof model elementof fig 
metamodels language definitions language specification intension extension language sentences result model instance metamodel element set sentences generated language associated metamodel see definition 
note formal treatments term language associated said set language sentences labeled language sentences fig 

practice language extension defined intensional definition rules characterizing expression sentence language 
interpreted metamodel directly equivalent language specifications mm 
choice advantage symmetric comparison ontological instantiation 
initial question term model appropriate language specification layer omg layer architecture 
surely term model simply specification expressed modeling language 
true model expect reduction feature conflict expectation language specification precise complete 
argue just syntax language defined metamodel aspects belonging system models meta metamodel linguistic instanceof metamodel linguistic instanceof model fig 
language definition stack defines expressed 
defines expressed 
meta language language complete language specification concrete syntax semantics left 
want term metamodel aspects included 
fortunately need engage discussion existence reduction feature respect language specification 
justify model nature language specification expressed called metamodel sufficient recognize universally captures models may expressed instances 
capacity type model models expressible opposed capacity token model language specification qualifies model 
language metamodel deserve name means language classifies linguistic instances 
related zivin favre recommend conformsto instanceof context relating models order distinguish conformance relationship models instantiation relationship known object orientation objects classes 
better worse instanceof widely term relating models appears justifiable overload term way analogy type model token model class object pairs respectively 
may context description hierarchy omg layer architecture reasons different names inter level intra level relationships elements 
combination making difference explicit acceptable see tab 
comparison terminology section corresponding discussion 
takes systematic look description hierarchies constructed coins term matters meta modeling intra level inter level meta instanceof snapshot instanceof ontological instanceof linguistic instanceof table instantiation terminology omg stack tion principle operation repeatedly applied level level 
points counting meta levels order ascertain metamodeling level reached done respect principle case employed description chain 
formally define requirements principle allows construction meta hierarchy 
analysis relationship models languages similar see fig 
different distribution elements levels different terminology 
distinguishes kinds meaning models describes interpretation meaning sense model 
mapping elements model elements sus 
instance class model means java program contain classes describes theory modeling language meaning second sense relationship model models derivable 
instance class model means instances classes related way kinds meaning may explained terminology considering model question ontological model linguistic model 
meaning ontological model interpretation relates horizontally domain interest 
meaning linguistic model theory modeling language relates vertically metalevel enabling models checked linguistic model conformance mm check 
recognition interpretation theory modeling language relevant models general matched observation model ontological intention linguistic interpretation order provide syntactic conformance check subjects type model 
favre defines function relating model system represents 
represents sense german 
system study 
regarded model functional relation author assumes favre means refer single associated meaning furthermore favre defines meta step pattern similar characterization linguistic instantiation 
favre model conforms metamodel mm element language represented metamodel notation mm mm favre interprets metamodel directly represent language sentences 
contrast approach mm mm assumes linguistic models represent language concepts turn extension set language sentences intension language specification 
order establish commonly agreed terminology essential model driven engineering community define circumstances notions model metamodel associated basic relationships applicable 
article argued maintaining required features known technical models refrain overly extending notion model include copies 
approach subjects modeling available finite representation 
intentionally ignored process capturing systems real world representation necessarily implies number abstraction operations longer optional 
approach article possible discuss abstraction functions varying reduction degrees including extreme case reduction exact copying simply impossible dealing real world subjects 
order able judge circumstances model granted metamodel status extremely helpful distinguish token model type model roles 
means discrimination discussion statements metamodel model model settled systematically 
introduced systematic definition acyclic novel notion level respecting relations decide circumstances model granted metamodel status 
apparent omg policy referring uml language definition uml metamodel longer straightforward justification respect latest version layer architecture justified allow consistent interpretation anti transitivity model relationships 
context useful condition favre important 
thomas hne terms role mode emphasize fact model token type model depends relationship subject 
important observation seen examples models token type model time respect different subjects 
mode token model clearly demonstrates represents relationship model system correspond instanceof object technology 
turns wrong interpret systems instances token models 
reduction feature token models may create impression classification occurred really representation takes place 
furthermore shown generalization basic relationship models addition instantiation representation 
distinction token type models significantly simplified analysis interplay generalization relationship basic relationships 
argued language definitions may referred meta models regarding type model capacity opposed token model capacity 
author believes recognition token type model roles explicit treatment basic notions modeling including generalization may drastically simplify disputes fundamental issues metamodel definition provide useful basis build 
author participants dagstuhl seminar model driven language engineering stimulating discussion 
particular alphabetical order pieter van gorp martin grosse rhode heckel tom mens contributed sending emails author views modeling 
discussions colin atkinson friedrich led insights motivated influenced article 
grateful comments contributed wolfgang hesse commitment anonymous reviewers led number significant improvements 

jean zivin olivier 
precise definition omg mda framework 
proceedings th international conference automated software engineering island pages november 

jean marie favre 
basic theory model driven engineering 
third workshop software model engineering uml october 

chen chung chang 
model theory 
north holland amsterdam edition 

rumbaugh jacobson booch 
unified modeling language manual 
addison wesley reading mass 

jean zivin 
search basic principle model driven engineering 
special nov tica issue uml model engineering april 

roland 
little theory abstraction 
bernhard rumpe wolfgang hesse editors modellierung proceedings zur 
rz marburg volume pages 
gi 

herbert 
allgemeine 
springer verlag wien new york 

richard bird 
theory lists 
technical report prg oxford university october 

ller 
und gesellschaft einf hrung die angewandte informatik 
darmstadt 

ed 
models mean 
ieee software september 

michael editors 
webster new encyclopedic dictionary 
black dog publishers west th street new york 

rudolf carnap 
meaning necessity study semantics modal logic 
university chicago press 

jochen 
models software engineering 
journal software systems modeling march 

omg 
mda guide version 
version omg document omg 

omg 
unified modeling language infrastructure specification version 
version omg document ptc 

colin atkinson thomas hne 
profiles strict metamodeling framework 
journal science computer programming july 

colin atkinson thomas hne 
model driven development metamodeling foundation 
ieee software september 

susanne 
als instrument des 
shaker verlag aachen 

