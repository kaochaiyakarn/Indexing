deals balls bins processes related randomized load balancing dynamic resource allocation hashing 
suppose balls assigned bins ball placed knowledge distribution previously placed balls 
goal achieve allocation possible bin gets balls average 
known solution problem choose possible locations ball random look bins place ball full bins 
class algorithms investigated intensively past previous analyses assume locations ball chosen uniformly independently random set bins 
investigate non uniform possibly de pendent choice asymmetry helps load balancing berthold international computer science institute berkeley ca icsi berkeley edu locations ball improve load balancing 
types selections distinguished uniform independent non uniform independent non uniform dependent 
result shows choosing locations non uniform way type results better load balancing choosing locations uniformly type 
surprisingly smooth load balancing obtained algorithm called go left creates asymmetric assignment balls bins 
second result lower bound smallest possible maximum load achieved allocation algorithm type 
upper lower bounds tight small additive constant showing go left scheme achieves optimal load balancing 
furthermore show upper bound generalized infinite processes balls inserted deleted adversary 
supported iii von und daad 
research conducted part author staying heinz institute university paderborn support provided dfg 

suppose place balls bins putting ball bin chosen randomly uniformly random 
classical results probability theory process terminates expected number balls fullest bin 
karp luby meyer auf der heide introduced variant process 
suggest allow possible locations ball chosen independently uniformly random set bins 
simple parallel algorithm decides possible bins ball placed 
algorithm terminates balls fullest bin providing choices ball results exponential decrease maximum load number balls fullest bin 
exact results obtained azar broder karlin upfal 
consider sequential allocation processes balls arrive 
ball comes possible locations chosen independently uniformly random set bins ball placed full 
give matching upper lower bounds maximum load genuine allocation process show fullest bin gets balls applications simple balls bins process numerous dynamic resource allocation hashing line load balancing 
examples described exhaustively 
contribution 
investigate happens maximum load sequential allocation process possible locations ball chosen nonuniform possibly dependent fashion assume rules allocating ball balls possible locations ball may chosen non uniformly dependent 
term abbreviates high probability probability arbitrary constant 
goal improve results known uniform process 
view idea strange non uniform choice bins may tend uneven distribution balls resulting higher lower maximum load 
fact difficult prove allocation possible location ball expected maximum load gets worse changing non uniform distribution 
see intuition deceptive case choice ball 
define sequential allocation scheme algorithm places ball uses rules ball 
consider sequential allocation schemes place ball bins chosen types selection 
uniform independent locations ball chosen uniformly independently random denotes set bins 
possibly non uniform independent th location ball chosen inde random arbitrary probability distribution possibly non uniform possibly dependent locations ball chosen random set arbitrary probability distribution assume ball placed outcome random choices balls placed unknown 
regarding knowledge placed balls different assumptions lower upper bounds 
lower bounds allow algorithms full knowledge previous assignments balls bins algorithms yield upper bounds knowledge number balls locations ball placed 
result analyses see additional power having full knowledge distribution balls help 
upper bound maximum load non uniform independent allocation scheme type clearly improves lower upper bounds known uniform allocation process type 
furthermore prove matching lower bound best possible maximum load achieved possibly non uniform dependent allocation scheme type 
prove non uniform probability distributions help reduce maximum load dependency locations ball yields significant improvement 
main results 
upper bound obtained algorithm 
divide bins groups equal size group size groups numbered ball choose uniformly independently th location random th group 
ball placed full bins locations 
locations smallest load ball placed location leftmost group group smallest number 
asymmetric tie breaking mechanism algorithm called go left 
theorem reflects core upper bound 
general variant theorem allowing number balls larger number bins considering infinite sequences insertions deletions 
upper bound terms related fibonacci numbers 
define recursive definition define se quence corresponds standard fibonacci sequence 
define sponds golden ratio see 
example value corre eral gen theorem suppose balls placed sequentially bins go left algorithm type 
number balls fullest bin result generally improves uniform case particular result shows influence maximum load linear logarithmic uniform case 
case obtain improvement go left algorithm yields maximum load max imum load uniform case point asymmetry tie breaking algorithm important analysis result 
fair tie breaking mechanism deciding random bin gets ball case tie results higher maximum load precise maximum load upper lower bound shown slight variant proofs azar uniform scheme 
combining asymmetric tie breaking uniform choice locations help azar show uniform allocation scheme arbitrary tie breaking mechanism uniform allocation scheme 
conclude tie breaking mechanism irrelevant uniform case important non uniform case 
seen choosing locations nonuniform way combined asymmetric tie breaking mechanism reduces maximum load interesting question kinds choices locations schemes deciding locations gets ball improve result 
theorem answers question negatively 
theorem suppose balls placed sequentially bins arbitrary sequential allocation scheme choosing bins ball random arbitrary probability distribution type 
number balls fullest bin combining theorem conclude apart additive constants go left algorithm achieves best possible maximum load generalizations 
interesting study variants random allocation process assuming balls bins infinite sequence insertions deletions 
combined approach model variants 
particular assume possibly infinite sequence insertions deletions balls 
insertion corresponds ball assigned bins deletion specifies previously inserted balls removed bin assigned 
allocation algorithm serve allocations line sequence ball placed insertion knowing insertions deletions sequence assumed oblivious depend random choices allocation algorithm 
give generalized version theorem 
time denotes point time served ball said exist time inserted deleted theorem generalized version suppose balls exist point time 
go left algorithm yields maximum load fixed time step assuming insertions deletions model degenerates static problem allocating balls bins 
corresponding best known upper bound uniform allocation process azar 
assuming insertions sequence alternates deletions balls chosen uniformly random set existing balls insertions new balls model corresponds dynamic problem considered azar 
show upper bound maximum load uniform allocation process fixed step assuming arbitrary insertions dele tions model corresponds considered cole 
investigate complicated routing problem butterfly networks 
translating results simpler problem placing balls bins yields upper bound translation described explicitly 
furthermore upper bound holds polynomial number steps 
bound increases slightly time infinite setting 
applying proof techniques uniform process obtain improvement 
theorem suppose balls exist point time 
uniform allocation algorithm yields maximum load fixed time step rest organized follows 
section prove upper bounds theorems 
analyze infinite symmetric scheme theorem show analysis changes considering asymmetric scheme theorem 
section proof lower bound theorem 
proof upper bounds section prove upper bounds theorems 
infinite sequence insertions deletions balls described 
bins number balls exist time ball placed possible locations 
investigate maximum load produced symmetric uniform asymmetric non uniform allocation process 
symmetric asymmetric case kind analysis witness trees bound probability bad event bin contains balls 
witness tree tree graph nodes represent balls randomly chosen locations arranged bad fashion 
section describe construction symmetric witness tree symmetric allocation scheme 
section show construction changes asymmetric case 
initially simplifying assumptions 
assume events represented witness tree stochastically independent 
section remove simplifying assumption give common solution dealing dependencies symmetric asymmetric case 
second simplifying assumption balls exist time 
section extend proofs general witness tree analysis new idea 
introduced scheideler meyer auf der heide context pram simulations 
argument improved authors articles 
analyses deal sequential allocation balls bins 
lose constant factor maximum load analysis tight additive constant 
furthermore finite variant asymmetric allocation scheme analyzed techniques introduced azar mitzenmacher 
prefer witness tree analysis naturally extends case infinite sequences adversarial insertions deletions handled methods far 

witness tree symmetric scheme witness tree logical structure constructed case bad event maximum load exceeds threshold value specify 
active witness tree necessary condition bad events 
show existence active witness tree 
consequently bad events 
definition symmetric witness tree 
symmetric witness tree order complete ary tree height leaf nodes 
node tree represents ball 
assignment balls bins fulfill time constraints 
consider fixed sequence insertions deletions denote fixed time step theorem 
ball represented root node exists time ball represented node exists insertion time ball represented parent node note ball may represented nodes tree 
node witness tree represents event may occur depending random choices locations balls 
distinguish edge leaf events 
edge event consider edge th child edge represents event th location ball points location locations ball 
leaf event leaf node represents event locations ball points bin contains balls insertion time 
edge leaf node activated random choices possible locations balls come way corresponding event occurs 
witness tree activated edges leaf nodes activated 
construction symmetric witness tree 
active witness tree order represent bad event bins contain balls time assume allocation process determined time suppose bin holds balls time show implies exists active witness tree order tree constructed follows 
root gets assigned topmost ball bin ball inserted symmetric allocation scheme ensures locations ball point bin contains balls ball insertion time 
topmost balls bins assigned children root 
construction continued recursively reach leaf nodes 
ball assigned leaf node lies top balls locations points bin contains balls ball insertion time 
probability activation symmetric witness tree 
bin including balls implies existence active witness tree order probability maximum load larger time bounded probability witness tree order active 
calculate bound probability 
calculation explicit construction witness tree formal definition 
point drawing construction result vast dependencies considered events 
probability witness tree order active bounded number different witness trees multiplied probability fixed witness trees active 
section account witness trees nodes represent distinct balls assume ball occurs witness tree 
section show deal witness trees may include ball times 
start counting number different witness trees 
number possibilities choose root ball definition ball exist considered time balls exist time 
ball represented root gives time step balls corresponding children root exist 
number possibilities assign ball children 
applying argument level level nodes tree yields total number possibilities choose ball nodes witness tree 
denoting number nodes bound probability fixed witness tree activated 
probability event represented edge occurs bin th location points probability fixed locations hit bin assumption balls distinct events edges tree independent probability edges activated probability event represented leaf node locations ball point bin contains balls time number bins bounded note bound number bins load holds deterministically assume occurrence leaf event give evidence distribution balls represented respective leaf node 
probability leaf events occur denoting number leaves tree 
altogether conclude probability exists active symmetric witness tree distinct balls fixed time consequently choose prob ability existence witness tree distinct balls section extend argument witness trees non distinct balls 
investigate bound improves case go left algorithm 

witness tree asymmetric scheme witness trees construct asymmetric allocation scheme asymmetric 
see asymmetric trees larger symmetric counterparts resulting smaller probability activation 
definition asymmetric witness tree 
asymmetric witness tree defined similarly symmetric counterpart 
difference topology 
fibonacci tree defined recursively follows 
consist single node respectively 
left right 
roots trees rooted tree root children roots trees number leaves asymmetric witness tree order topology fibonacci tree leaves 
activation asymmetric witness tree defined analogously symmetric case 
rooted tree root construction asymmetric witness tree 
suppose bins contain balls time case construct active asymmetric witness tree follows 
simplify construction define labels nodes witness tree 
label tuple integers labels unique 
label root children node label left labels right 
children node label labels construction witness tree assign balls nodes maintaining invariant ball assigned node label placed bin contained balls insertion time 
bin belongs group root node care group 
assignment proceeds iteratively starting root 
root gets assigned topmost ball bins including balls 
th location ball points bin contains balls time topmost ball location assigned child label assume node label ball allocated bin group contains balls insertion time 
th location points bin contains balls 
go left scheme prescribes placed th location 
assign topmost ball location child label provided sufficiently large respective child exists 
th location contains balls insertion time 
case assign topmost ball location child label provided respective child exists 
obviously assignments fulfill invariant 
probability activation asymmetric witness tree 
derive bounds number trees probability activation fixed tree symmetric case 
number different witness trees denoting number nodes tree 
probability edge events occur probability leaf events occur denoting number leaves tree 
bound probability edge events assume groups exactly size 
difficult see analysis robust changes constant factors group sizes 
bound probability leaf events may need explanations 
analogously symmetric case bins contain balls time know bins distributed groups 
denote fraction bins group contain bins 
probability locations ball hit bins groups size get product positive variables sum fixed value maximized values variables equal conclude probability leaf event combining bounds yields probability exists active asymmetric witness tree distinct balls fixed time difference symmetric case asymmetric tree larger number leaves larger results smaller probability activation tree 
particular choose distinct balls probability existence witness tree 
witness trees non distinct balls estimated probability activation witness trees distinct balls 
order get bound probability high maximum load remains consider trees balls may occur 
case events represented edges leaves stochastically independent anymore important assumption calculations 
remove dependencies prune witness tree distinct balls remain 
unfortunately pruning tree smaller probability activation may larger 
compensate loss starting larger tree additionally gaining probability pruning event 
definition full witness tree 
full witness tree order includes symmetric asymmetric witness trees order respectively subtrees denotes suitable constant 
root full witness tree children child 
root full tree grandchildren 
grandchildren root symmetric asymmetric witness tree order respectively 
important new feature full witness tree balls assigned children root guaranteed pairwise distinct 
root represents ball children ball leftmost child 
define ball assigned child root location points bin root just case symmetric asymmetric witness tree 
denote index location choose arbitrarily 
denote child 
locations ball points bin location node definitions follow rules symmetric asymmetric witness tree respectively 
time constraints balls full tree activation full tree defined analogously symmetric asymmetric trees 
balls time construction full witness tree 
full witness tree constructed follows 
suppose bin holds holds assign topmost balls children root assign ball leftmost child root 
assign balls grandchildren 
consider ball assigned child root 
locations points bin location points bin 
location pointing fix arbitrarily 
select arbitrarily 
insertion time location balls 
topmost ball bin assigned child child construction continued done symmetric asymmetric witness tree order respectively 
pruning full witness tree 
order remove dependencies inspect non root nodes full witness tree bfs order 
inspect node represents ball node inspected cut edge parent node cutoff complete subtree rooted edge called cutoff edge keep witness structure evidence ball parent node shares location ball represented node tree 
continue process obtained cutoff edges inspected non pruned nodes 
inspected non pruned nodes cutoff edges defined build pruned witness tree 
notice pruning remove root nodes represent distinct balls visited traverse tree bfs order skipping root 
fewer cutoff edges symmetric asymmetric witness trees includes distinct balls 
bounded probability existence witness tree previous sections constant assumption chosen sufficiently large 
remains estimate probability existence active pruned witness tree includes exactly cutoff edges 
upper bound probability assumption witness trees grandchildren root nodes 
easy check number nodes suffices obtain probability case subtree distinct balls 
probability activation pruned witness trees 
take account pruned witness tree different topologies 
denote number edges full tree may cutoff edge 
number different topologies pruned witness tree assume topology fixed 
denote number non root nodes pruned witness tree 
number possibilities assign balls tree nodes 
recall ball root identical ball leftmost child 
furthermore probability edge events activated 
notice edge connecting root leftmost child active definition 
edge events probability probabilities independent truncated redundant balls 
denote number leaves pruned tree nodes children incident cutoff edges 
probability leaves activated apparently obtained bounds symmetric asymmetric witness trees 
may smaller need gain probability cutoff edges 
cutoff edges witnesses event ball represented non pruned node incident cutoff edge shares random location ball node node inspected truncated guaranteed included pruned tree 
cutoff edge specifies randomly chosen locations hits locations location falls bin location give bound probability event 
number possibilities select bounded number nodes pruned tree minus node 
number upper bounded probability location hits lo cations fixed ball upper bound probability event represented cutoff edge 
notice randomly chosen location represented cutoff edge considered bound probability activation edge leaf events 
furthermore events represented different cutoff edges independent 
obtain upper bound probability existence pruned witness tree cutoff edges 
theorems obvious assume term equation bounded combining result bounds previous sections obtain probability load exceeds symmetric case asymmetric case completes proof theorem 
balls bins extend proof general assume balls may exist time 
definitions symmetric asymmetric witness trees changed follows 
leaf node witness tree represents balls 
locations balls point bins contain balls constant balls 
assumptions probability existence active witness trees distinct balls bounded follows 
denote number nodes number leafs tree 
number possi bilities assign balls nodes possibilities choose balls leaf node possibilities choose ball internal node 
probability edge event tree includes edges 
edges leaves represent edge events 
probability activation edge events probability locations ball point bin balls account probability balls assigned leaves estimating probability edge events assumed balls assigned leaf node share random location 
consequently independent locations balls leaf node 
probability activation leaf nodes combining bounds probability existence witness tree distinct balls bounded chosen sufficiently large bounded analogously case rest proof proceeds 

proof lower bound section prove lower bound theorem 
suppose balls placed sequentially bins arbitrary sequential allocation scheme choosing bins ball random arbitrary proba bility distribution show num ber balls fullest bin major issue proving lower bound possibly dependent random choices locations ball difficult handle 
step separate effects different locations assume allocation algorithm uses disjoint groups consists bins numbered obviously algorithm original model total number bins simulated algorithm new model bins maximum load larger maximum load 
recall allow full knowledge distribution previously placed balls 
lower bound model bins holds original model bins 
denote positive real numbers 
define allocation assignment balls bins satisfying properties bins divided groups balls placed bins chosen arbitrary fixed probability distribution balls assigned 
ball placed random choices locations balls placed unknown 
maximum load allocation defined number balls fullest bin 
aggregate load defined denoting number balls fullest bin set lemma gives lower bound aggregate load allocation scheme 
lemma allocation scheme lemma implies lower bound theorem rest section deal proof lemma 
lower bound aggregate load recursive function positive real numbers define lemma suppose sufficiently large 
denote positive numbers aggregate load allocation probability constant proof 
prove lemma induction assume lemma holds allocation allow failure probability slightly increasing induction 
particular assume aggregate load allocation probability notice induction steps lose factor failure probability need induction steps 
denote set balls placed bins 
balls comes probability distribution locations chosen denote set balls inserted define define motivation definitions clear soon 
time sufficient notice show properties size set bin gets assigned balls set th location ball points bins properties hold probability property requires second property requires proving properties give evidence randomly chosen locations balls th locations fall bins balls choose locations probability distribution 
suppose remove balls allocation balls allocation probability distribution induction assumption allocation aggregate load probability allocation balls start set empty bins 
takes place top plateau height produced balls conclude aggregate load original allocation probability notice fact allocation balls takes place top balls interleaved allocation balls affect lower bound aggregate load balls assume allocation algorithm global knowledge kind advantage taken balls 
lower bound corresponds exactly recursive description recursion applied repeatedly 
particular defined way applying recursion lower bound repeatedly times choose iteration minimum operator yields exactly lower bound lemma 
lower bound implies bound lemma remains prove properties stated 
proof property bin set group called large probability th location ball falls bin ball called interesting locations fall small non large bin 
sum probabilities assigned small bins probability ball interesting locations ball points small bin notice bound holds regardless dependencies random choices locations 
expected number interesting balls applying chernoff bound yields balls interesting proba bility assumption large sufficiently calculate large bins interesting balls groups contain balls 
groups gets fraction group gets interesting balls 
denote group denote number interesting balls placed group 
assume balls distributed arbitrarily large bins group assignment balls groups done unknown mechanism 
manner balls distributed large bins contains balls 
total number balls smaller fix appropriate number large bins load second equation follows assumption define subset size set large bins load property satisfied 
proof property analyze balls location pointing bin probability th location ball points bins cause bins large probability hit 
expected number balls set balls location applying chernoff bound yields probability number balls assuming sufficiently large chernoff bound yields desired result 
equation shows property satisfied proof lemma completed 
lower bound aggregate load allocation obtain lemma depends apply recursion parameter smaller investigate behave recursion applied iteratively 
set denote values respectively recursion applied times 
lemma constant suitable proof 
start introducing simpler recursion relate original recursion 
define vector positive real values follows 
define define notice shows related fibonacci numbers expect recursions behave similarly 
fact having closer look recursion gives show bound suitable constant corresponds bound lemma 
order prove relationship need show properties suppose setting define numbers show induction monotonically increasing monotonically decreasing furthermore observe exchanging initial values increase value property shown induction vector fulfills property assumed initial vector exchanging vector components th iter ation recursion increase value consider vectors defined converting recursion vectors derive recursive description initial vector integers controlled minimum operator recursion recursion differs recursion aspects 
integers determine components subtracted replaced comparison recursion mechanism corresponds simply permuting components iteration seen increase second add positive value components iteration 
monotonicity property shown increase 
consequently conclude completes proof lemma 
combining lemma lemma derive lower bound aggregate load follows 
lemma conclude aggregate load allocation value equal recursion depth 
recursion ends iteration lemma conclude suitable constant satisfies solving equation yields corresponds bound lemma completes proof theorem 
acknowledgments klaus schr der helpful discussions valerie king suggesting name algorithm go left 
adler schr der 
analyzing infinite parallel job allocation process 
proc 
th european symposium algorithms esa pages 
azar broder karlin upfal 
balanced allocations 
proc 
th acm symp 
theory computing stoc pages 
cole maggs meyer auf der heide mitzenmacher richa schr der sitaraman 
randomized protocols low congestion circuit routing multistage interconnection networks 
proc 
th acm symp 
theory computing stoc pages 
cole frieze maggs mitzenmacher richa sitaraman upfal 
balls bins deletions 
proc 
random 
karp luby meyer auf der heide 
efficient pram simulation distributed memory machine 
proc 
th acm symp 
theory computing stoc pages 
knuth 
art computer programming volume 
addison wesley 
meyer auf der heide scheideler 
exploiting storage redundancy speed randomized shared memory simulations 
proc 
th symp 
theoretical aspects computer science stacs pages 
meyer auf der heide schr der 
routing networks optical 
proc 
euro par pages 
mitzenmacher 
load balancing density dependent jump markov processes 
proc 
th ieee symp 
foundations computer science focs pages 
mitzenmacher 
power choices randomized load balancing 
phd thesis university california berkeley 
