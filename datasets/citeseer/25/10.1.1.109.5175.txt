specifying enforcing intertask dependencies paul attie munindar singh carnot project mcc center drive austin tx usa mcc com extensions traditional atomic transaction model needed support development multi system applications ows access heterogeneous databases legacy application systems 
extended transaction models conditions involving events dependencies transactions 
intertask dependencies serve uniform framework de ning extended transaction models 
introduce event attributes needed determine dependency enforceable properly schedule events extended transaction models 
attributes formalization dependency temporal logic ctl automatically synthesize automaton captures computations satisfy dependency 
show set automata combined scheduler produces global computations satisfying relevant dependencies 
show dependencies required implement relaxed transactions sagas enforced discuss brie issues concurrency control safety recoverability 
main objectives carnot project cc provide environment applications access related information stored multiple existing systems ca 
important component ort facility task man permission copy fee material granted provided copies distributed direct commercial advantage vldb copyright notice title publication date appear notice copying permission large data base endowment 
copy republish requires fee special permission endowment 
proceedings th vldb dublin ireland amit sheth bellcore lane piscataway nj usa amit ctt bellcore com marek rusinkiewicz dept computer science university houston houston tx usa marek cs uh edu agement 
task unit computation performs useful function system 
tasks particular interest database transactions 
ciently develop multi system applications accessing existing heterogeneous closed systems able modularly capture execution constraints various applications 
achieved modeling relaxed transactions consisting related tasks executed di erent systems 
requirements traditional transaction model full isolation atomic commitment global serializability may strong particular multi system application 
example application may need ensure tasks commit certain temporal order 
example banking application deposits account certain period may tobe processed debits account period 
may need selectively relax acid properties gra hr transactions capture precisely synchrony coupling requirements true application semantics 
semantic constraints ed intertask dependencies constraints signi commit abort 
concomitant reduction semantic constraints tasks enables generation scripts ciently executed high level parallelism 
turn may result higher availability data better response times higher throughput 
modeling complex telecommunication applications discussed argued system applications ciently modeled executed relaxed transactions 
illustrate concepts consider scenario 
travel agency maintains databases containing detailed information bookings di erent agents systems data accessed existing interfaces internally stored control general purpose dbms 
systems frequently referred legacy systems applications access called ows 
containing summary information rst database number bookings agent 
summary changes task run sets alarm summary falls preset threshold 
obvious integrity constraint agent number rows bookings database equal number bookings stored agent summary database 
holds initially constraint assured executing updates databases atomic multidatabase transactions globally serializable bs 
may ine cient impossible database interfaces provide visible phase commit facilities 
may assume integrity executing separate tasks obey appropriate intertask dependencies 
dependencies state delete task bookings database commits decrement summary task commit 
furthermore delete task aborts associated decrement summary task commits restore consistency compensating spurious decrement 
executing increment summary task 
shows tasks involved example db ds denote delete booking decrement summary increment summary update alarm tasks respectively 
delete booking db child delete booking child decrement summary ds child update alarm increment cause update summary cause compensate alarm task graph delete booking example model intertask dependency dependency automaton nite state automaton paths represent computations satisfy dependency 
automaton ensures corresponding dependency violated permitting events execution lead violation dependency 
scheduler receives events corresponding possible task execution 
queries applicable dependency automata determine allow event executed 
event executed delayed delayable re attempted 
framework dependencies stated modularly constraints tasks 
enforces stated dependencies provided jointly enforceable assures dynamically changing collection tasks executed accordance dependencies 
appropriately accepting rejecting delaying signi cant events 
rest organized follows 
section provides technical methodological background gives example application 
section describes formally specify dependencies discusses event attributes impact dependencies considers dependencies added removed run time 
section gives formal de nition dependency automaton represent dependency shows dependency automata operate enforce corresponding dependencies 
section presents execution model notion viable whichwe correctness criterion 
formalizes de nitions uses de nition scheduling algorithm 
shows relaxed transaction model asthe sagas gs described enforced set dependencies 
section brie discusses concurrency control safety recovery issues context exible transactions 
section 
background speci cation enforcement dependencies received attention cr dhl el kl 
kl cr specify intertask dependencies constraints occurrence temporal order certain signi 
klein proposed primitives kl 
ife occurs occur 
implied ordering occurrences 

occur precede 
known examples dependencies include commit dependency cr transaction commit dependent transaction transactions commit commits commits 
relevant signi cant events denoted cma cmb 
expressed cma cmb 
abort dependency cr transaction transaction ifb aborts revised abbreviated version report available authors 
report contains proofs theorems 
attie singh sheth rusinkiewicz abort 
signi cant events aba abb written abb aba 
conditional existence dependency kl event occurs event occurs event occur 
existence dependency comes force occurs 
written 

note allow dependencies form general expressions 
expression formally treated event identifying rst event occurrences de nitely true 
example true soon complement ofe occurs 
primitives capture semantic constraints encountered practice useful framework intertask dependencies powerful 
approach meets criterion special cases formalism 
committed aborted hy jj hh abh abj cm done pr executing st executing example task state transition diagram relationships signi cant events task represented state transition diagram serves abstraction actual task hiding irrelevant details internal computations 
execution event causes transition task state 
shows example task state transition diagram taken kl 
initial state bottom diagram task rst executes start event st 
task started eventually abort represented ab transition nish represented pr transition done 
task done commit transition abort ab transition 
state transition diagrams signi cant events de ned represent travel agent application described previous section shown 
intertask dependencies shown links states result corresponding signi cant events di erent tasks performed denotes conjunction 
ak ak db ds ak xxxxxx xz ak st db st ds ab db pr ds ab ds cm ds st cm st ab db 
cm ds st dependencies signi cant events delete booking example intertask dependency declarations discussed section specify intertask dependencies constraints occurrence temporal order events 
signi cant events transitions task depend characteristics local system executes 
theory implementation applies tasks arbitrary set task states signi cant events 
assume event occur possible execution system 
restriction real terms 
task aborts re executed new id may events 
dependencies appropriately modi ed proceed normally 
ei ej denote signi cant event en denote unspeci ed dependency en 
formal speci cation dependencies adopt language computation tree logic ctl language dependencies em 
ctl powerful language known distributed computing 
brief description ctl dependencies appendix primitives useful macros yield ctl formulae 
ctl uniformly express di erent dependencies 
formal language helps reduce ambiguity communication 
possible formally determine relationships di erent dependencies consistent entails 
dependencies easily speci attie singh sheth rusinkiewicz able users database administrators 
reason essential automata enforce dependencies synthesized automatically dependencies 
ctl formulae automatically synthesize dependency automata process hidden dependency speci er 
retain exibility klein approach formal expressive general representation 
enforceable dependencies scheduler enforces dependency variously allowing delaying rejecting forcing events occur resulting computation satis es dependency 
syntactically formed dependencies may enforceable run time 
example dependency ab cm enforceable scheduler prevent ab occurring general guarantee occurrence cm 
general scheduler prevent tasks unilaterally deciding abort 
abort 
associate attributes signi cant events meet conditions forcible execution forced rejectable execution prevented delayable execution delayed 
assume local systems tasks executed provide prepared commit state task issue prepare commit pr event 
prepared commit state visible scheduler decide prepared task commit abort 
table shows attributes signi cant events transactions commonly database applications dbmss 
indicates attribute holds indicates attribute may hold 
event cm ab forcible 
rejectable 
delayable 
pr st table attribute tables signi cant events characterize dependency en terms attributes en 
example run time enforceable rejectable delayable hold delay submitted reject see task issues terminated timed see issuing 
alternatively ife forcible enforce run time forcing execution accepted execution 
somewhat vacuous strategy unconditionally reject 
strategy available rejectable holds 
example consider possible strategies 
rst applied delayable holds delay accepted execution task terminated issuing 
second applied rejectable holds executed submitted reject submitted 
way extend approach real time dependencies considering real time events clock times regular events lack attribute 
consider 
dependency enforceable rejectable 
scheduler enforce accepting occurred rejecting 
dynamic addition removal dependencies preceding exposition assumed dependencies initially compile time 
dependencies may added deleted dynamically run time 
removal dependency achieved simply removing corresponding automaton 
addition dependency requires automaton synthesized scheduling 
dependency may added late enforced 
suppose added occurs 
forcible submitted enforced 
unavoidable general addition dependencies predicted 
report violation dependency added 
dependency automata enforcing single dependency dependency create nite state machine ad responsible enforcing ad captures possible orders event satis ed 
done manually extension ctl synthesis technique ec em developed 
procedure requires speci cation dependencies tasks dependences de ned 
precise transitions task state transition diagram ect representations di erent dependencies 
result procedure generates open system 
contrast traditional temporal logic synthesis methods ec mw require specication entire system 
results recomputed system modi ed 
details synthesis procedure omitted brevity 
worst case size ad exponential number events attie singh sheth rusinkiewicz number small experience complexity major impediment practice 
ad tuple hs set states distinguished initial state alphabet transition relation 
indicate speci termination event denote event signi notated termination event 
discuss generation usage termination events 
elements notated forms described 
indicates ad accepts events transition taken ad accepted signi cant event forwarded event monitor execution 
em indicates ad rejects events em execution violate dependency jjj jjj indicates interleaving accept operations corresponding indicates accept operations occur accept operations 
example dependency automata represent ad labeled graph nodes states edges transitions 
labeled element denotes actions accept reject taken transition executed 
figures dependency automata dependencies respectively 
symbol indicates choice edge labeled may followed scheduler permits ja jr hj ja 
ja dependency automaton order dependency assuming rejectable delayable hold hj jr jr ja ja ja 
dependency automaton existence dependency assuming rejectable delayable operation automaton assume simplicity task event dependency intertask dependencies explicitly considered 
input alphabet ad form en fe en tng 
size input alphabet ad 
ad operates follows 
time state say initially 
events arrive sequentially 
current event 
outgoing edge labeled incident state transition enabled 
means far local state concerned ad change state ad transition scheduler permits see section 
scheduler permits certain transition automaton execute changing local state respect events executed far 
behavior scheduler accepts event nd event ordering consistent dependency automata contain event input alphabet 
accepts event relevant automata agreement 
execute accepting transition 
ensures acceptance event violate dependencies 
similarly reject event relevant automata reject nd event ordering consistent relevant dependency automata executing rejecting transition event 
reasoning accepting event applies rejection event cause violation dependency event mentioned 
section discusses operation scheduler detail 
observations concern dependency automaton enforces dependency 
ti indicates termination timing task dependency automaton reject ti event unilaterally prevent 
importance ti events submission tells automaton attie singh sheth rusinkiewicz events mayhave submitted task de nitely submitted 
signi cantly ect automaton behavior 
knowledge task terminated may allow accept execution previously delayed event ej knowledge ei occur may enable scheduler infer execution ej violate certain dependencies violated 
happens example dependency ei ej enforced ej submitted delayed 
case arrival ti ensures dependency ei ej violated consequently ej doing violate dependencies 
dealing failures timeouts far interpreted ti events indicate termination task ordinarily tasks terminate committing aborting 
system problems disk crashes communication failures may cause inde nite waits 
example automaton shown delays accepting submitted 
automaton possibly hang forever forthcoming 
policy automaton accept arrives reject arrives 
general policy speeds task cost aborting task possibly delaying aborting global task 
cases policies inde nitely delayed eagerly rejected unacceptable policy timeouts may preferred 
require tasks wait allow timeouts generated expected events received reasonable time 
improvement practical terms require signi cant change approach 
support timeouts modifying interpretation ti events associate normal termination task timeout corresponding event ei 
assume ei submitted ti submitted 
easy implement 
scheduler enforcing multiple dependencies system enforce dependencies time 
naive approach generate product individual automata ad enforce single dependency 
individual automata roughly size product automaton size order smallest state explosion problem cg coordinating relevant individual automata run time building static exponentially large product compile time techniques similar ae 
worst case time complexity exponential reason believe interesting cases certain ows telecommunications applications time complexity polynomial 
space complexity technique polynomial versus exponential complexity building product automaton 
execution model shows execution model 
events submitted scheduler tasks execute 
introduce correctness criterion viable check dependencies satis ed event executed 
computing viable pathset requires looking relevant dependency automata 
event accepted viable pathset criterion event dispatcher execution 
event accepted immediately may possible execute events occur provided event 
case event put pending set decision taken 
scheduler permits execution transition automata rejected reject message sent task submitted scheduler 
discuss algorithm compute discuss event execution detail 
event submitted scheduler searches pathset set paths path relevant dependency automaton 
desired pathset 
accept 
current global state scheduler 
order consistent 
closed closed 
executable 
pathset accepts member paths mentioning accept paths accepting termination event associated 
means di erent paths set agree order execution pair events 
requirements closure closure mean event accepted rejected paths automaton referring event included agree accept reject 
executable means rejected events submitted accepted events submitted forcible 
pathset meets criteria called viable 
technical de nitions give intuitions algorithm compute 
attie singh sheth rusinkiewicz tasks submitted events rejected events indicates process replies queries indicates data structure scheduler dependency automata de nition global state 
global state tuple hsd sdi sdi local state adi andd dn dependencies system 
global state simply aggregation local states individual dependency automaton 
de nition path 
path ad sequence 

sj sj transition relation ad 
global computation sequence events executed event dispatcher 
recall ad meant encode computations satisfy dependency path ad represents computations satisfy furthermore ad maximal sense possible computation pre xes satisfy represented path ad 
de nition global computation consist solely events accepted 
scheduler property dependency projection global computation events represented path ad 
means scheduler enforces dependency 
de nition pathset 
pathset 
element ad 

ad contributes path mentioned section event submitted scheduler scheduler attempts execute nding viable pathset accepts 
pathset events accepted pathset executed order consistent imposed pathset 
results global state scheduler updated appropriately 
pathset accepted events partial order re attempted execution delayed events execution model delayed events pending set event dispatcher execute event placed pending set 
attempt nding suitable pathset events ecting acceptability submitted 
event remains pending set viable pathset executed accepts rejects 
case task submitted informed decision 
pathset search algorithm recursive procedure search searches viable 
procedure initially called search 
event executed necessary data structures assumed globals simplicity passed parameters actual implementation 
search procedure attempts construct viable pathset selecting paths relevant automaton order consistent executable 
paths contain orr events occur automata outside set automata considered automata considered ensure closure closure eventual solution 
function get candidate paths returns set executable paths automaton order consistent paths returned paths may extensions paths establish correctness properties pathset search algorithm 
proofs included brevity appear 
lemma event global state search terminates viable global state accepts 
proof sketch 
show clauses de nition viable satis ed 
search pathset begins current global state 
new paths added candidate pathset ex attie singh sheth rusinkiewicz search closed closed accepts return automaton needed close get candidate paths search viable recursive calls return endfor paths failed return return pathset search algorithm order consistent de nition get candidate paths function 
search terminates closed closed 
lemma search terminates 
proof sketch 
essential idea number automata nite automaton nitely paths nitely candidate need considered 
algorithm terminates 
scheduler scheduler nonterminating loop iteration attempts execute event just submitted pending set 
invoking search 
invocation returns nonempty immediately executed 
placed pending set 
executed accepting events accepts partial order consistent rejecting events rejected de nition path projection 
projection global computation dependency automaton path obtained removing transitions lemma global computation generated scheduler 
dependency path ad 
proof sketch 
construction scheduler 
paths returned paths examined arbitrary order 
quality generated pathset improved paths examined appropriate criterion minimal length maximal acceptance 
currently experimenting criteria 
example scheduler operation give example relaxed transactions expressed algorithm 
simplicity dependencies force rejectable delayable 

corresponding automata shown figures 
assume submitted rst 
ina 
path 
begins empty pathset returned added pending set 
submitted executable paths anda 
requirement forces scheduler search path accepts 
path 
mutually order consistent viable pathset fa nally returned 
partial order consistent 
table shows axioms saga transaction model gs formulated cr acta formalism expressed primitives 
saga sequence subtransactions ti term post denotes postcondition event 
saga commits subtransactions successfully executed speci ed order subtransactions aborts saga aborts compensating transactions cti executed reverse order 
speci cations primitives scheduler execute relaxed transactions sagas semantics 
executing multidatabase transactions issues executing multidatabase transactions concurrency control safety recoverability 
concurrency control scheduler part multidatabase local database systems cooperate execution global transactions 
general contain concurrency control module enforces local concurrency control typically ensuring local serializability 
may assume task executing local systems serialization event determines position local serialization order 
example local system uses phase locking pl serialization order local transaction determined lock point point lock transaction granted 
problem arises local concurrency control modules impose inconsistent ordering serialization events tasks belonging multidatabase application 
attie singh sheth rusinkiewicz acta notation post ti bcd ti st ti cm ti cm ti st ti cm st ctn bad st ctn ab ab st ctn post ti ad ti ab ti ab ti wd cm ti ab cti bcd ti st cti cm ti cm ti st cti post commit ti cti cmd ab cm cti cti bad st cti ab ab st cti post tn scd tn cm tn cm table expressing saga dependencies acta notation resolve problem transferring responsibility global concurrency control scheduler 
achieved restating concurrency control obligations set dependencies treated dependencies 
scheduling dependencies concurrency control dependencies arise run time serialization precedence tasks di erent applications established site 
dependencies added di erence treated 
uniform mechanism dependency enforcement concurrency control 
main di culty approach serialization events reported local concurrency controllers deduced temporal order signi cant events controlled global scheduler start commit terminate 
possible local concurrency controller completely execute task ti task tj begun serialize away tj precedes ti 
problem overcome idea tickets introduced grs 
grs ticket read ticket write operation global application 
ticket read write operations regarded signi cant events execution controlled declaring dependencies refer 
required concurrency control obtained simply declaring appropriate set ticket access dependencies 
flexible transaction safety exible transaction de ned set subtransactions scheduling preconditions set conditions nal states 
conditions specify acceptable termination states exible transaction completes successfully terminates state 
consider example adapted 
travel agent exible transaction consisting reserve ight reserve car subtransactions 
fail secure car reservation wish cancel plane reservation 
cancellation achieved subtransaction transaction set acceptable termination states transaction table cm indicate subtransaction initial state committed aborted respectively 
set acceptable states constraint execution exible transaction 
constraint expressed set dependencies table 
cm cm ab ab ab cm cm ab cm cm abc cm abc cm cmc table acceptable states flexible transaction recoverability deal extensively issue recovery failure 
su ce say data checkpointed order enable recovery scheduler failure 
current state dependency automaton 

partially executed pathset see section plus current state path pathset 

set pending events 
data subject concurrent updates executed atomically respect checkpointing mechanism 
example event executed current state dependency automaton ad occurs updated 
wish checkpoint re ect updates 
re ect corresponding state executed re ect corresponding state executed 
addition communication mechanism scheduler tasks persistent messages lost scheduler failure recovery failure 
attie singh sheth rusinkiewicz mailboxes persistent pipes may functionality 
addressed problem specifying enforcing intertask dependencies 
framework allows dependencies stated modularly succinctly constraints tasks 
actual set signi predetermined vary application 
framework extended accommodate issues concurrency control exible transaction safety recoverability enforcement dependencies introduced dynamically run time 
showed dependency expressed automaton captures computations satisfy dependency 
scheduling algorithm enforces multiple dependencies time 
algorithm uses automata corresponding dependency 
global computation generated satis es dependencies 
showed relaxed transaction models saga model captured framework 
desiderata task scheduler multidatabase transaction processing include correctness dependencies violated safety transaction terminates acceptable state recoverability optimality quality 
wehave established correctness safety recoverability scheduler currently studying issues concerning quality schedules generated optimality generating 
implementation completed part distribution services carnot project ca mcc 
concurrent actor language asynchrony features natural realization execution model 
carnot enables development open applications information stored control existing closed systems 
speci cation run time enforcement data intertask dependencies important component ort 
indebted greg meredith christine tomlinson discussions allen emerson advice ctl 
bene ted conversations phil darrell woelk 
discussions eth zurich comments helpful 
sridhar ganti provided sagas example 
ansari ness rusinkiewicz sheth 
flexible transactions support multi system telecommunication ap plications 
proceedings th vldb conference august 
ae attie emerson synthesis concurrent systems similar sequential processes proceedings th annual acm symposium principles programming languages pages 
attie singh rusinkiewicz sheth 
specifying enforcing intertask dependencies 
mcc technical report carnot december 
ast attie singh tomlinson 
language temporal logic specifying intertask dependencies 
mcc technical report november draft 
bs breitbart silberschatz 
multidatabase update issues 
proc 
acm sigmod int conf management data june 
ca 
move interoperable database systems 
proceedings st international workshop interoperability multidatabase systems kyoto japan april 
cg clarke grumberg 
avoiding state explosion problem temporal logic model checking algorithms 
carnegie mellon university pittsburgh 
cr chrysanthis ramamritham 
ac ta framework specifying reasoning transaction structure behavior 
proceedings acm sigmod conference management data 
cr chrysanthis ramamritham 
ac ta saga continues 
chapter el 
dhl dayal hsu ladin 
organizing long running activities triggers transactions 
proceedings acm sig mod conference management data 
dhl dayal hsu ladin 
transactional model long running activities proceedings th vldb conference september 
el ahmed elmagarmid editor database transaction models morgan kaufman 
elmagarmid leu litwin rusinkiewicz 
multidatabase transaction model 
proceedings th vldb conference august 
attie singh sheth rusinkiewicz em allen emerson 
temporal modal logic 
handbook theoretical computer science vol 
van leeuwen editor 
ec allen emerson clarke 
branching time temporal logic synthesize synchronization skeletons 
science computer programming vol 

emss allen emerson mok prasad sistla srinivasan 
quantitative temporal reasoning 
appear real time systems journal vol 
january 
hr reuter 
principles transaction oriented database recovery 
acm computing surveys december 
gs garcia molina salem 
sagas 
proceedings acm sigmod conference management data 
gra gray 
transaction concept virtues limitations 
proceedings th vldb september 
grs georgakopoulos rusinkiewicz sheth 
serializability multidatabase transactions forced local con ict 
proceedings th international conference data engineering april 
jin ness rusinkiewicz sheth 
executing service provisioning applications multidatabase flexible transactions draft 
bellcore technical memorandum 
kl klein 
advanced rule driven transaction management 
proceedings ieee compcon 
mw manna wolper 
synthesis communicating processes temporal logic speci cations 
acm toplas vol 
january 
rusinkiewicz sheth 
specifying dependencies multidatabase environment 
mc report act may 
appears ieee computer december 
ctl syntax semantics syntax ctl denotes atomic proposition denote sub formulae 
ofp formula constructs indicate conjunction negation respectively 

formula intuitively means immediate successor state reachable executing step process pj formula holds 

fug formula intuitively means computation path state path holds holds state path state 

fug intuitively means computation path state path holds holds state path state 
formally give semantics ctl formulae respect structure ak consists set states ai binary relation giving possible transitions process labeling state set atomic propositions true state 
ak 
require total fullpath nite sequence states suchthat si si structure state corresponds computation tree nodes labeled occurrences states root thats arc tree ai 
usual notation indicate truth structure means true state structure structure understood write de ne inductively state aj fug si sj fug fullpath si sj write indicate valid true states structures 
introduce abbreviations logical disjunction implication equivalence respectively 
number additional modalities abbreviations fwg fu fwg fu aff eff ef egf af gu fore fug egf exi ex ax 
particularly useful modalities aff attie singh sheth rusinkiewicz means path exists state path holds means holds state path 
formula form fug ore fug formula 
eventuality corresponds liveness property promise happen 
promise ful lled 
fug fug ful lled provided respectively path starting exists nite pre path state satis es states satisfy afg efg special cases fug fug respectively eventualities 
contrast fwg fwg special cases agg egg invariance formulae 
invariance corresponds safety property asserts certain conditions necessarily met 
ctl propositional branching time temporal logic 
includes propositional logic temporal operators 
ctl temporal operator composed path quanti er meaning possible computations meaning possible computation followed linear temporal operator 
xp means holds point computation fp means holds point computation gp means holds points computation means holds point computation holds current point point 
expressing dependencies ctl atomic propositions naturally model states system proposition corresponds holds state immediately occurrence event 
show certain dependencies motivated de ned researchers expressed uniformly ctl 
order dependency kl events occur precedes 
expressed discussion 
ctl ag ag occurs occur subsequently 
existence dependency kl event occurs event occurs 
expressed discussion 
ctl computation occur state reached satises executed state subsequently occurs 
instances dependencies appeared literature 
commit dependency cr transaction commit dependent transaction transactions commit commits commits 
relevant signi cant events denoted cma cmb 
ag cmb ag cma abort dependency cr transaction transaction ifb aborts abort 
signi cant events aba abb written abb aba rendered ctl just aba abb aba conditional existence dependency kl event occurs event occurs event occur 
existence dependency comes force occurs 
written 

translating ctl involves applications translation nested inside 
rst application yields mixed formula second application substitutes ctl translation gives eliminating double negations nally yields formula ege expressing real time dependencies ctl ctl called real time computation tree logic emss 
ctl ef means occur time units computation 
real time order dependency events occur precedes ande occurs time units 
ag ag ef real time existence dependency event occurs event occurs 
furthermore occurs time units 
ef ef attie singh sheth rusinkiewicz 
