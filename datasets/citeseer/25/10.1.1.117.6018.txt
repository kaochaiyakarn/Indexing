computationally sound automated proofs security protocols cortier bogdan warinschi cortier loria fr loria cnrs nancy france fax bogdan soe ucsc edu computer science department university california santa cruz usa 
approaches developed analyzing security protocols 
approaches relies computational model considers issues complexity probability 
approach captures strong notion security guaranteed probabilistic polynomial time attacks 
approach relies symbolic model protocol executions cryptographic primitives treated black boxes 
seminal dolev yao realized approach enables significantly simpler automated proofs 
guarantees offers quite unclear 
show possible obtain best worlds fully automated proofs strong clear security guarantees 
specifically case protocols signatures asymmetric encryption establish symbolic integrity secrecy proofs sound respect computational model 
main new challenges concern secrecy properties obtain soundness result case active adversaries 
proofs carried fully automated tool 
security protocols short programs designed achieve various security goals data privacy data authenticity communication parties takes place channels controlled attacker 
ubiquitous presence important applications designing establishing security protocols important research goal 
unfortunately attaining goal quite difficult task protocols proposed flawed 
starting early distinct quite different methods emerged attempt ground security protocols firm rigorous mathematical foundations 
generically known computational cryptographic approach symbolic dolev yao approach 
computational approach security protocols security underlying primitives turn proved assuming hardness solving cortier partly supported aci crypto project 
bogdan warinschi partly supported national science ccr ccr various computational tasks factoring discrete logarithms 
main tools proofs reductions prove protocol secure shows successful adversary protocol efficiently transformed adversary primitive construction 
quantification universal possible probabilistic polynomial time adversaries execution model analyzed specified bit string level 
proofs computational model imply strong guarantees security holds presence arbitrary probabilistic polynomial time adversary 
time security reductions moderately sized protocols extremely long difficult tedious 
central characteristics symbolic approach view execution significantly limited adversary 
precisely model implementation details primitives abstracted away execution modeled symbolically 
furthermore actions adversary quite constrained 
instance postulated recover plaintext underlying ciphertext derive appropriate decryption key 
resulting execution models simple easily handled automated tools 
fact security proofs carried model checkers theorem provers 
unfortunately high degree abstraction limited adversary raise serious questions regarding security guarantees offered proofs especially perspective computational model 
significant research effort directed bridging gap approaches :10.1.1.4.5735
idea determine condition symbolic analysis sound respect standard computational models 
path promises tremendous benefits protocols analyzed proved secure simpler automated methods specific symbolic approach security guarantees respect comprehensive computational model 
extend apply micciancio warinschi demonstrate time fully automated security proofs clear computational implications possible 
specifically results follows 
give language specifying protocols 
syntax language close allows random nonces digital signatures public key encryption 
protocols specified language give kinds executions protocols 
models considers powerful active adversary controls potentially communication unbounded number sessions protocol executed honest users 
model computational model adversary arbitrary algorithm 
second model symbolic adversary typical dolev yao adversary 
crucial property model coincides execution semantics existing automated tool called 
link models ways 
contribution theorem soundness theorem proofs trace properties symbolic traces protocol satisfy certain predicate protocol secure symbolic model concrete traces satisfy predicate overwhelming probability adversaries protocol secure computational model 
result proper extension similar theorem protocols nonces public key encryption digital signatures 
second main result concerns soundness secrecy proofs 
issue significantly challenging case trace properties secrecy formalized quite different ways models consider inability deriving secret formal world indistinguishability adversary views computational world 
able prove case nonces symbolic secrecy implies computational secrecy 
theorems justify formal analysis briefly considered automatic tools casper strongly believe similar soundness results obtained tools 
choice mainly determined familiarity authors close collaborator team develops additional factor tools dedicated unbounded number sessions allow proofs secrecy authenticity 
related 
rationale need soundness theorems outlined abadi result obtained abadi rogaway 
quite results followed recall closest 
include soundness theorem secrecy properties abadi rogaway symmetric encryption presence passive adversaries 
results laud shows soundness confidentiality properties symmetric encryption model fixed number sessions 
soundness result trace properties proved micciancio warinschi language random nonces public key encryption 
extend include digital signature ciphertext forwarding 
soundness trace properties richer language includes addition symmetric encryption authentication backes pfitzmann waidner progress aimed achieving soundness secrecy symmetric keys 
conceivable building results partial automation symbolic proofs achieved remains carried 
rest structured follows 
section briefly recall digital signatures public key encryption schemes 
protocol syntax section execution models section 
section define generic security properties prove soundness theorems trace secrecy properties 
section concludes discussion regarding implications results proofs done 
computational cryptography generic digital signature scheme ds ks sig vf usual algorithms key generation signing verifying 
consider arbitrary public key encryption scheme ae ke enc dec algorithms secrecy alternatively defined equivalence formulation example concentrate formulation 
key generation encryption decryption 
precise specification syntax refer 
traditionally security defined individual primitive separately 
protocols aim analyze may encryption digital signatures convenient define security signatures encryption simultaneously multi user environment 
develop formal model security mixes definitional ideas digital signature schemes asymmetric encryption 
give overview definition 
precise definition 
consider experiment parametrized digital signature scheme ds asymmetric encryption scheme ae adversary bit security parameter 
experiment adversary access oracle denoted ods ae 
adversary issues requests order number times creation keys oracle generates internally keys encryption decryption signing verifying returns public keys keys encryption verifying adversary 
signature request adversary request signatures message chooses secret signing keys generated 
oracle computes signature returns adversary 
encryption requests adversary submits pair messages specifies encryption key generated obtains oracle encryption mb key 
decryption requests adversary require see decryption ciphertext choosing provided ciphertext obtained encryption oracle 
goal adversary produce valid signature message query oracle break signature scheme determine selection bit probability significantly better break encryption 
adversaries events happens negligible probability security parameter say ds ae jointly secure 
new measure security intended analyzing security encryption signing simultaneously easy prove implied standard requirements individual primitives 
precisely easy show digital signature scheme ds existentially unforgeable chosen message attack ae secure sense indistinguishability chosen ciphertext attacks ind cca ds ae jointly secure 
protocol syntax consider protocols specified language similar allowing parties exchange messages built identities randomly generated nonces public key encryption digital signatures 
consider algebraic signature function said negligible grows slower inverse polynomial 
sorts 
sort id agent identities sorts skey containing keys signing verifying encryption decryption respectively 
algebraic signature contains sorts nonce label ciphertext signature pair respectively nonces labels ciphertexts signatures pair 
sort label encryption signatures distinguish different encryption signature plaintext 
sort term supersort containing sorts skey 
operations operations ek dk sk vk defined sort id return encryption key decryption key signing key verification key associated input identity 
operations ag adv defined natural numbers return labels labels differentiate different encryptions signatures plaintext created honest agents adversary 
distinguish labels agents adversary randomness 
operations consider pairing public key encryption signing ranges domains 
term term pair term label ciphertext skey term label signature protocols specified algebra terms constructed signature set sorted variables 
specifically sets variables sort nonce agent ciphertext signature labels respectively 
furthermore follows 
fixed constant representing number protocol participants fix set agent variables 
ak partition set nonce variables party generates 
formally xn 
partition avoids specify role variables stand generated nonces variables stand expected nonces 
messages sent participants specified terms free algebra generated signature 
individual behavior protocol participant defined role describes sequence message receptions transmissions 
party protocol roles 
definition roles protocols 
set roles roles protocol participants defined roles init party protocol mapping roles denotes set 
assume protocol specification rj lj rj th role definition protocol executed player aj 
sequence 
roles specifies messages sent received party executing role step party expects receive message conforming li returns message ri 
wish emphasize terms rj actual messages specify message received message output look 
example 
needham schroeder lowe protocol specified follows roles corresponding sender role receiver role 
na ek na nb ek nb ek init ag ek ek ag ek ek ag ek ek executable protocols 
clearly protocols written syntax meaningful 
consider class executable protocols protocols role implemented executable program local knowledge corresponding agent 
requires particular sent message corresponding deducible previously received messages corresponding lj 
precise definition may 
execution models section give symbolic computational execution model protocols specified syntax defined previous section 
symbolic model honest parties adversary exchange elements certain term algebra adversary compute messages standard dolev yao restrictions 
concrete execution model messages exchanged bit strings honest parties adversary turing machines 
formal execution model formal execution model messages terms free algebra defined ek dk sk vk id ag ek adv ek ag sk adv sk id variable constant sort agent define knowledge kn dk sk xn agent knows secret decryption signing key nonces generates execution 
formal execution model state transition system 
global state system sid set terms representing messages sent network maintains local states sessions ids sid 
session identities tuples form ak id identifies session names 
ak identities parties involved protocol index role executed session 
mathematically function sid sid local state session sid 
function partial instantiation variables occurring role control point program 
transitions allowed 
ek adv ek sk adv sk ek vk mi ek dk ag sk adv sk initial knowledge pairing encryption decryption sk signature fig 

deduction rules formal adversary arbitrary set formal terms 
sid corrupt sid aj 
adversary corrupts parties outputting set identities 
receives return secret keys corresponding identities 
happens execution 
adversary initiate new sessions sid new ak sid sid defined follows 
sid session identifier new session sid denotes cardinality sid 
defined 
ak sid sid 
ak 
function defined follows 
sid sid sid sid 

ak partial function aj aj ai ai recall principal executing role represented ai role variable form represents nonce generated ai 
ai send sid sid sid sid defined follows 
define sid sid sid sid 
denote rj 
lj rj 
sid kj kj cases 
exists general unifier lj 
sid rj 
define sid sid state remains unchanged 
adversary send messages sid denote sid id set sessions ids set symbolic execution traces sid sid adversary intercepts messages honest participants computes new messages deduction relation defined 
intuitively means adversary able compute message set messages deduction rules standard exception rules explanations order 
rule states signature message adversary compute new signatures message 
rules states adversary recover corresponding message signature 
rules needed obtain soundness 
rules reflect capabilities contradict standard computational security definition digital signatures available computational adversaries 
symbolic execution trace sid 
fn hn valid messages sent adversary computed dolev yao operations sidi fi hi send sidi fi hi hi protocol set valid symbolic execution traces denoted exec 
example 
playing needham schroeder lowe protocol described example adversary corrupt agent start new session second role players send message adv ek player second role 
corresponding valid trace execution corrupt kn new send sid adv ek sid kn sid sid kn sid ag ek sid defined follows sid sid extends 
concrete execution model concrete execution messages exchanged bit strings depend security parameter example determine length random nonces 
denote set valid messages 
denote subsets containing values agent identities nonces encryption keys verification keys ciphertexts signatures pairs respectively 
implementation bit string unique type efficiently recovered function type 
operations implemented follows assume pki setting public keys parties encryption signature verification accessible parties 
model situation making available parties efficiently invertible publicly computable functions vk ek agent identity return signature verification key encryption key respectively 
concrete implementation encryption signing implemented encryption scheme ae ke enc dec digital signature scheme ds ks sig vf fix section 
pairing implemented standard efficiently invertible encoding function global state execution pair sid represent local state session sid represents set session ids 
session ids tuples unique session identifier index role executed session ak names agents involved running session 
state function sid session id sid returns sid assigns values variables program executed session see discussion regarding execution individual roles index role executed session program counter keeps track step executed session 
discuss execution proceeds setting 
execution adversary corrupts set parties request corrupt 
agent identities 
result key generation algorithms encryption signing executed public keys published secrets keys adversary 
adversary initiates new sessions issuing requests new 
ak 
ak case cryptographic keys generated agents keys public encryption verification keys published new session initiated sid state execution prior request resulting state sid sid sid sid sid sid ak defined follows sid local states previous sessions stay unchanged sid defined follows aj aj ai ai local state new session initialized mapping agent variables names agents selected adversary selecting random values nonces generated party executing role 
addition term ek aj term sk aj sent occur ring choose random coins resid aj rs sid aj respectively 
coins randomizing encryption signing functions concrete implementation 
third kind queries message transmission queries send sid sid sid processed steps incoming message parsed instantiation term local state sid session sid prior request 
parsing done recursively structure final result mapping assigning values variables occurring facilitate parsing procedure assume valid ciphertext easy recover key encryption public valid signature easy recover message signed verification key needs verifying 
requirements easily achieved tagging signatures ciphertext appropriate information 
second step local state sid updated protocol message computed returned adversary 
parsing procedure fails point types term bit string match ciphertext invalid local state sid remains unchanged 
case exists variable assign different values 
local store updated answer computed replacing variable replacing encryptions signatures computational counterparts randomized functions enc sig 
execution model described uses randomization adversary probabilistic honest parties randomization generating nonces encryptions signatures 
shown adversary runs polynomial time honest parties number coins polynomial security parameter 
fixed adversary denote pa resp 
ga spaces adversary resp 
honest parties draw coins execution 
notice pair random coins ra pa ga determines unique sequence global states sid sid called concrete trace determined random coins ra denote exec ra 
set possible session ids sid denote set possible concrete traces sid sid security properties soundness theorems interested types security properties 
integrity properties secrecy properties 
quite general example encompass various forms authentication messages entities 
focus secrecy properties give formalizations kind properties formal computational model focusing nonces 
prove second main result soundness theorem secrecy nonces 
relating symbolic concrete traces concrete traces regarded instantiations formal traces appropriate instantiations terms 
precisely formal trace ts sid sid fn hn obtain concrete execution trace tc sid 
sid gn way 
injective function maps terms bitstrings chosen tc obtained instantiating local states fi sid sid gi sid sid sid sid session ids unchanged sid sid case say tc concrete instantiation ts alternatively ts symbolic representation tc write ts tc denote concrete set tc ts ts tc concrete instantiations symbolic traces technically lemma core results 
states overwhelming probability concrete executions traces protocol instantiations valid symbolic execution traces 
lemma 
executable protocol 
concrete implementation schemes ae ds jointly secure algorithm pr exec exec ra probability choice ra pa ga negligible function 
proof overview 
due space constraints sketch main aspects proof details may 
proof works steps 
explain concrete execution trace exec ra determines unique symbolic trace ts construct tracing queries concrete adversary translating symbolic queries 
specifically map bit string occurring execution symbolic term follows 
agent identities cryptographic keys random nonces quantities uniquely determined canonically mapped symbolic representations example bit string representing decryption key party ai mapped sk ai 
rest messages interpreted occur message sent adversary parsed notice keys needed known symbolic interpretation obtained replacing occurring basic values keys nonces identities symbolic interpretation replacing concrete operations symbolic counterparts 
second step proof show overwhelming probability choice ra trace obtained explained valid execution trace 
prove statement contradiction adversary construct adversaries non negligible probability symbolic trace associated execution valid dolev yao trace adversaries breaks joint security ds ae 
idea construction adversaries execute adversary subroutine access oracle ods ae adversaries access simulate execution protocol behalf honest parties 
show invalid query adversary bi break encryption signing scheme adversaries exploiting possibilities 
adversary assumption invalid query adversary contains signature sk ai secret key honest party ai sent prior execution 
essentially means corresponding concrete term signature forgery adversary simply outputs 
adversaries correspond case adversary outputs encryption term encryption computed adversary previous messages dolev yao operations 
case show adversary determine secret able compute 
secret random nonce generated honest party case adversary signature generated honest party case adversary 
adversaries construct sample space partition sample space experiment adversary executed 
non negligible probability adversary invalid symbolic execution trace non negligible probability adversaries breaks joint security ds ae contradicts hypothesis theorem 
trace properties symbolic computational execution model trace properties predicates global execution traces 
definition security protocol satisfies trace property differs symbolic computational model 
give definitions give main result soundness theorem proofs trace properties 
symbolic trace properties 
symbolic trace property predicate alternatively subset set 
say protocol satisfies symbolic trace property write valid execution traces satisfy exec various definitions authentication may expressed trace properties 
informally trace protocol mutual entity authentication trace identities playing second role protocol finished session protocol intended partner playing role protocol finished session intended partner characterization say protocol secure authentication protocol traces 
depending notion authentication consider may require session terminates exists exactly corresponding session terminates finished computational trace properties 
computational trace property predicate 
say protocol satisfies concrete security property write execution traces satisfy overwhelming probability coins execution adversary probability pr exec ra negligible function 
probability taken choice ra pa qa mutual authentication traces satisfying predicate sketched symbolic model definition security protocols specific computational setting asks protocol traces overwhelming probability 
allows bad runs negligible probability 
contributions soundness theorem trace properties 
theorem 
executable protocol arbitrary symbolic trace property computational security property concrete implies proof 
arbitrary adversary 
pr exec pr exec exec exec concrete follows pr exec pr exec exec lemma deduce pr exec ra secrecy properties symbolic model secrecy naturally expressed trace property message secret derived adversary 
computational model typical definitions stronger usually say attacker obtain secret partial information secret 
section give symbolic computational definitions secrecy nonces protocol prove soundness theorem nonce deemed secret symbolic techniques nonce secret respect stronger computational definition 
concentrate case secrecy nonces canonical definition secrecy composed messages computational world 
addition noticed definition secrecy keys example weaker indistinguishability soon encrypted messages contain redundancy 
keys security keys similar security nonces results yield meaningful results symmetric key exchange 
secrecy symbolic model 
arbitrary party protocol 
say guarantees secrecy nonce ai xn ai possible executions instantiation variable remains unknown adversary 
formally means valid trace sid 
fn hn protocol session id 
ak 
ak honest agents appears corrupt query hn ai 
case write 
secrecy computational model 
define secrecy nonce ai sec protocol experiment exp exec describe 
experiment parametrized bit involves adversary input experiment security parameter 
starts generating random nonces adversary starts interacting protocol experiment exec generates new sessions sends messages receives messages sessions prescribed protocol 
point execution adversary initiates session role ai executed declares session attack 
session variable ai instantiated nb nonces chosen experiment selection bit 
rest execution exactly exec adversary outputs guess result experiment 
define advantage adversary adv sec pr exp exec sec exec pr exp sec exec say nonce computationally secret protocol write ai adversary advantage negligible 
second main result captured theorem states nonce secret symbolic model secret computational model 
theorem 
executable protocol 
schemes ds ae jointly secure implies 
automated proof section describe automated tool discuss implications results proofs done 
system automated verification cryptographic protocols developed group loria france available www loria fr softwares translates protocol common syntax rewrite system 
rewrite system processed order theorem prover equational logic automated detection flaws 
note allow signatures labels 
syntax semantics coincide public key protocols protocols pairing asymmetric encryption labels 
believe labels signatures easily added 
automated proof computational security 
prove particular types properties entity authentication authentication data data secrecy 
discuss implications proofs respect computational model 
syntax allow labels encryption 
shown security properties typically proved proofs execution model labels sound model labels 
theorem proofs security respect properties clear computational interpretation 
example proof needham schroeder lowe protocol secure mutual authentication protocol file nspk lowe implies property computational model 
similarly proofs nonce secrecy imply theorem strong computational secrecy notion gave section 
example enables prove computational secrecy nonces corrected needham schroeder lowe protocol lowe splice protocol file splice 
note works finite number sessions proofs computational model obtained fixed number sessions 
proofs consider adversaries create unbounded sessions obtain proofs computational security properties tools dedicated unbounded number sessions hermes 
require prove protocols secure symbolic models hermes secure symbolic model 
believe true symbolic models similar 
tools proofs provide automatic proofs secrecy 
automated proofs security properties authentication development 
martin abadi enlightening discussions advice daniele micciancio useful suggestions anonymous referees helpful remarks 

abadi 
taming adversary 
proc 
crypto 

abadi gordon 
calculus cryptographic protocols spi calculus 
proc 
th conf 
computer communications security pages 
acm press 

abadi rogaway 
reconciling views cryptography computational soundness formal encryption 
journal cryptology 

backes 
personal communication 

backes pfitzmann waidner 
composable cryptographic library nested operations extended 
proc 
th acm conference computer communications security ccs pages 

bellare micali 
public key encryption multi user setting security proofs improvements 
proc 
eurocrypt volume lncs pages 

blanchet 
efficient cryptographic protocol verifier prolog rules 
proc 
th csfw june 

lakhnech 
automatic tool verification secrecy security protocols 
th int 
conference computer aided verification cav volume lncs pages 
springer july 

chevalier 
tool lazy verification security protocols 
proc 
th conf 
automated software engineering ase 
ieee cs press 

cortier 
guide 
eva project report december 

cortier warinschi 
computationally sound automated proofs security protocols 
research report rr inria october 

phan pointcheval 
une comparaison entre deux de de 
proc 
pages 
french 

goldwasser micali rivest 
digital signature scheme secure adaptive chosen message attacks 
siam journal computing april 

laud 
symmetric encryption automatic analyses confidentiality active adversaries 
proc 
ieee symposium security privacy pages 

lowe 
breaking fixing needham schroeder public key protocol fdr 
tools algorithms construction analysis systems tacas volume lncs pages 
springer verlag march 

lowe 
casper compiler analysis security protocols 
proc 
th csfw 
ieee computer society press 

micciancio warinschi 
soundness formal encryption presence active adversaries 
theory cryptography conference tcc pages cambridge ma usa february 
springer verlag 

mitchell ramanathan scedrov 
probabilistic polynomial time calculus analysis cryptographic protocols 
electronic notes theoretical computer science 

paulson 
mechanized proofs recursive authentication protocol 
proc 
th csfw pages 
ieee computer society press 

rackoff simon 
non interactive zero knowledge proof knowledge chosen ciphertext attack 
crypto pages 

rusinowitch 
protocol insecurity finite number sessions npcomplete 
proc 
th csfw pages 
ieee computer society press 

yamaguchi 
design implementation authentication system wide area distributed environment 
ieice transactions information systems november 

