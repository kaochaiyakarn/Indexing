code 
automatic classification source code archives robert krovetz lee giles david pennock eric glover zha department computer science engineering pennsylvania state university pond lab university park pa zha cse psu edu various source code archives world wide web 
archives usually organized application categories programming languages 
manually organizing source code repositories trivial task grow rapidly large order terabytes 
demonstrate machine learning methods automatic classification archived source code eleven application topics programming languages 
topical classification concentrate programs ibiblio sourceforge archives 
support vector machine svm classifiers trained examples programming language programs specified category 
show source code accurately automatically classified topical categories identified specific programming language class 

software reuse process creating software systems existing software building software systems scratch 
software reuse old idea various reasons standard practice software engineering software reuse increase programmer productivity reducing time spent developing similar codes 
seemingly programmers benefit repository pre written code archived archives reportedly users 
software reuse mean existing code involves organization conceptual information 
methods programmers locate useful existing code quickly easily 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
sigkdd july edmonton alberta canada 
copyright acm 
nec research institute independence way princeton nj krovetz research nj nec com school information sciences technology pennsylvania state university thomas bldg university park pa giles ist psu edu various source code archives open source sites world wide web 
programs sites correctly classified topically components useful classifications software reuse greatly facilitated 
software programs categorized 
archives programs classified programming language application topic 
programmer attempting organize collection programs categorize resources source code design specifications documentation provided program 
understand application category code belongs programmer try gather natural language resources comments readme flies explicit representation algorithm 
information natural language extracted external documentation manuals specifications internal documentation comments function names variable names 
reasonable algorithms clearly reflect human concepts identifiers 
identify programming language programmer administrator look code distinguish keywords trying understand algorithm 
straightforward language reserved keywords syntax 
archives large rapidly changing manual categorization software costly time consuming 
goal automatic categorization believe idea take advantage natural language information available documentation code 
researchers applied different learning techniques text categorization bayesian models nearest neighbor classifiers decision trees support vector machines svms neural networks 
text classification document set represented vector words 
new documents assigned predefined categories textual content 
svms shown yield promising results text categorization :10.1.1.11.6124
programming languages written manner different natural languages commented information programming languages specific keywords features identified 
characteristics show text categorization techniques effective source code classification 
build classifier important step extraction features 
programming language classification feature set consists tokens source code words comments 
topical classification generate features words bigrams lexical phrases extracted comments readme files header file names extracted source code 
perform feature selection expected entropy loss 
program represented binary feature vector 
specific class vectors train svm classifier 
order evaluate effectiveness approach measure true positive false positive rates class accuracy 
rest organized follows 
section summarizes background information related 
section introduce data set 
section describe methodology algorithm 
results section section 
background related various software identification reuse problems explained literature vary terms techniques features programs take advantage 
rosson carroll examined reuse programs smalltalk language environment 
empirical results reuse user interface classes expert smalltalk programmers 
observed extensive reuse users programmers searched implicit specifications reuse target class evaluated contextualized information repeatedly 
programmers adapted code information provided matched goals 
davis designed system called patricia automatically identified object oriented software components understanding comments identifiers 
object oriented code reusable functionally oriented code 
patricia uses heuristic method deriving information linguistic aspects comments identifiers non linguistic aspects object oriented code class hierarchy 
merkl suggested organizing library reusable software components self organizing neural networks 
approach clustering software components groups semantically similar components 
keywords automatically extracted manual components 
component represented set keywords include word lists 
representations utilized build keywords components matrix vector space model data 
column matrix corresponds software components train neural network 
search tools source code software reuse 
chen build tool called uses fragments source code concurrent version systems cvs comments fact cvs comments describe lines code involved 
evaluations technique show cvs comments provide valuable information complements content matching 
henninger studied software components 
approach investigates retrieval tool called codefinder supports process retrieving software components information needs defined users familiar vocabulary repository 
expected entropy loss decide features select 
expected entropy loss statistical measure successfully applied problem feature selection information retrieval 
expected entropy loss computed separately feature 
ranks features lower common positive set negative set ranks features higher effective discriminators class 
glover method feature selection training binary classifier 
technique 
feature selection increases effectiveness efficiency removes non informative terms corpus statistics 
brief description theory follows 
event indicates program member specified class event program contains specified feature 
ff negations pr probability 
prior entropy class distribution pr lg pr pr lg pr posterior entropy class feature pr clf ig pr pr ig pr likewise posterior entropy class feature absent ef pr cj ig pr pr lg pr expected posterior entropy ef pr pr expected entropy loss fpr pr expected entropy loss nonnegative higher scores indicate discriminatory features 
support vector machines support vector machines svms binary classification task 
due space restrictions please see details svms :10.1.1.114.4532
support vector machines generally applicable text categorization problems outperform methods 
ability handle high dimension feature vectors reduce problems caused fitting produce solutions robust noise suited approach text classification 
choose svm classifier problem similar text classification 

data feature sets gathered sample source code files projects different archives internet including ibiblio linux archive sourceforge planet source code pages web include code snippets 
ibiblio archives gigabytes linux programs documentation freely available download ftp www access 
ibiblio archive includes binary files images sound documentation source files programs 
archives different versions project 
primary programming languages projects archive 
projects classified programming languages 
ibiblio archive organized hierarchically categories applications commercial development tools games hardware drivers science system tools 
net owned open source development network claims world largest open source development website 
time study hosted projects registered users 
archive categorized different programming languages topics 
programming languages include popular languages java fortran perl popular ones logo 
users capability browsing projects development status environment intended audience license natural language operating system 
planet source code claims largest public programmer database web 
analysis lines code 
code files organized application area 
programming language categories 
free code owned open source development network 
free code archive organized topical categories includes programming language information project 
train topic classifier downloaded examples ibiblio sourceforge archives concentrated 
programming language classification downloaded files resources 
analysis select popular programming languages asp fortran java lisp matlab pascal perl python prolog 
popular languages wide range applications 
class randomly grouped samples disjoint training testing sets 
training data consists source code files test data consists source code files category 
experiments include comments included files comments 
comments giving contextual information program speculate helpful finding programming language code far topics concerned selected categories subcategories contain sufficient number projects resources ibiblio sourceforge eliminated ones projects source code files 
reason chose different categorization evaluate chance mis classification task difficult 
category pairs separated database circuits category pairs quite similar games graphics 
table lists www ibiblio org pub linux www sourceforge net www com www eom categories number software programs resources 
table 
number programs topic category ibiblio sourceforge database development games graphics mathematics network serial communication sound utilities word processors 
methodology system consists main components feature extractor svm classifier 
supplementary modules necessary topical classification programs text extractor filter phrase extractor stemmer 
system works distinct phases training testing 
components phases explained sections 
feature extractor examples category considered positives rest examples counted negatives 
compute probabilities expected entropy loss feature follows pr pr pr pr pr pr pr qf pr pr pr pr pr feature extractor indexes file computes expected entropy loss feature 
features sorted descending expected entropy loss 
features appear frequently negative set large expected entropy loss values 
call features negative features 
feature higher frequency negative set distinguishing category 
feature extractor eliminate words take bigrams account 
consider lexical phrases features output phrase extractor module 
default feature extractor module removes features appear single file 
capable eliminating features occur threshold positive negative examples 
programming language feature extractor features correspond tokens code words comments 
define token alphabetical sequence characters separated non alphabetical characters 
consider numeric values operators tokens 
tokens gathered splitting source code text non alphabetical character white space 
example expression network tokens network 
top features selected expected entropy loss classes generate set features 
excluded features occurred positive negative set vocabulary 
application topic feature extractor feature extractor topic classification uses different resources comments readme files code 
extraction comments source code files identification readme files program performed text extractor module 
run feature extractor directly output text extractor preprocess data filtering stemming phrase extraction modules 
filter module written eliminate data uninformative identification application category license author information appear program 
expected entropy loss technique rank features low filtering decreases size files improves speed algorithms 
kstem grouping morphological variants 
kstem uses lexicon morphological rules determine word forms grouped 
designed avoid grouping word forms related meaning 
stemming useful example colors color typically refer concept merged feature 
lexical phrases important reduce ambiguity usually ambiguous component words isolation 
addition terms meaningful phrases station 
phrase essentially word embedded space 
combine readme files comments program separately pull single words bigrams phrases 
code just include header file names 
top features categories combined generate set features 
believe features sufficient classification 
selection threshold application topic classification 
generates feature vectors program source code file 
consider frequency features 
elements vectors consist 
feature vector means corresponding feature exists corresponding example means 
module uses features extracted training data creating vectors test training set 
svm classifier svm classifier trained vectors generated training set document class label 
returns accuracy classification percentage programs categorized correctly 
libsvm library support vector machines chang lin integrated software support vector classification regression distribution estimation :10.1.1.114.4532
libsvm capable performing cross validation multi categorization different penalty parameters svm formulation unbalanced data 
libsvm uses approach multi class classification 
approach classifiers constructed number classes 
classifier trains data different classes 
chang lin utilize voting strategy example voted class binary classification :10.1.1.114.4532
program assigned class maximum number votes 
case classes number votes smaller index selected 
approach multi class classification called 
technique number svm models number classes constructed 
class svm trained examples class positives rest examples negatives 
previous research shown approach multi class categorization outperforms approach 

experimental results programming language classification programming language classification performed experiments comments included code comments ascertain impact comments 
feature extraction step gives list words best describes programming language class 
table 
top features class class comments included comments excluded asp asp dim td head asp dim td language struct void sizeof include struct void ifdef sizeof unsigned fortran subroutine logical include subroutine logical java implicit dimension throws jboss java ejb dimension implicit jboss throws java package util lisp defun lisp setq emacs defun setq matlab zeros type denmark zeros name type string veterinary license pascal unit procedure plot implementation unit perl mpl speak voice said print procedure speak voice said print python def py def py copying hermann prolog pro og predicates descr fail diaz rgen fail built bip atom table lists top words comments code comments filtered 
minus sign indicates negative features ones frequent negative set compared positive set 
generated set features top features class 
training data consists source code files test data consists source code files language class 
table lists true positive rates false positive rates language class accuracy classifier 
table 
tp rate fp rate accuracy classifier comments included comments excluded class tp rate fp rate tp rate fp rate asp fortran java lisp matt pascal perl prolog accuracy think performance class highly depends programming language classified overlap tokens source code files 
reason explored intersections top features class results table 
table 
overlap features categories 
upper triangle shows overlap rates comments included 
lower triangle shows comments excluded 
cat asp fort java lisp pas perl pro asp java lisp matt pas perl pro ii upper triangle table lists overlaps features extracted code comments 
lower triangle hand lists overlaps features gathered form code 
observe cases matlab class highest overlap percentages language classes especially perl class highest false positive 
true examples correctly classified assigned matlab class 
hand effect comments programming language classification depends language 
comments help increase accuracy classification bad effect identification fortran matlab pascal prolog classes 
application topic classification test method topical classification performed different experiments different data sets combinations types features single words lexical phrases bigrams 
experiment chose features categories generated set features 
features selected expected entropy loss 
table lists abbreviations experiments feature types experiment 
sets generated sourceforge ibiblio archive 
table 
types features experiment exp top features extracted sw top features single words lp top features lexical phrases top features bigrams sw top features single words bigrams top features single words lexical phrases outputs feature extractor promising category 
able select features easily guess corresponding category 
example table top words lexical phrases extracted ibiblio archive 
surprising calculator mathematics class high score games class database database class 
hand features shared categories multiple meanings example play appears sound games classes 
observation utilities category negative features positive ones 
means words play client appear utility programs socket library included 
evaluate classifier able find appropriate penalties training applied fold cross validation data set ibiblio separately combined sets 
fold cross validation data divided subsets time subset test set subsets training 
archive training testing number examples categories archive sufficient 
factor data unbalanced 
example number programs word processors category network category 
weighted version svm changed penalty parameters categories 
penalty category computed multiplying weights specified cost chose linear kernel function assigned table lists accuracies cross validations performed sourceforge ibiblio archive combined sets experiment 
experiments combined sets set uses features extracted ibiblio linux uses features extracted sourceforge 
table 
top words lexical phrases category ibiblio archive class top words top lexical phrases circuits database development games graphics math network serial comm 
sound utilities word proces 
circuit spice pin simulator transistor sql database query postgresql class thread new malloc game games play score xlib image jpeg gif ppm pixel calculator mathematics exponent math fractal socket ip inet modem voice fax serial sound audio mixer game socket client floppy tex dvi latex table 
cross validation accuracies 
third data set features extracted sourceforge fourth data set features extracted ibiblio archive 
data set accuracy sw lp sw sourceforge combined sourceforge combined ibiblio table 
tp fp rates accuracies experiment features ibiblio class sw lp sw tp fp tp fp tp fp tp fp tp fp 
devel 
games graph 
math net 
serial 
sound util 


compare data sets ibiblio performs better sourceforge 
apply cross validation reason poor performance appears number examples sourceforge data 
categories fewer examples sourceforge archive 
far types features single words lexical phrases helpful feature group classification 
lexical phrases perform increase accuracy cross validation ibiblio archive standard ceil transfer curve circuit interface cell library short channel database database system database server sql statement method code class library item class hierarchy global function header file high score new game new level computer player map image independent jpeg jpeg library jpeg software image file plot radix mode real numbers palette change complex numbers ip address security fix error output backup copy libc version serial port modem device script language voice modem incoming data sound driver cd player sound card audio device track floppy disk illegal value block device locale appropriate system latex command style sheet dvi driver default value vertical scale single words 
single words bigrams useful outperform techniques data set 
second split combined data set subsets subset training testing 
features extracted linux archive experiment 
table shows true positive false positive rates accuracy svm classifier trained features ibiblio archive tested combined set 
similar programming language classification single words bigrams lexical phrases perform best 
true category utilities 
categories database games graphics network sound classes performed better classes 
related examples classes fuzziness utilities class 
observe utilities class high false positive rate 
table 
tp fp rates accuracies experiment features sourceforge class sw lp sw tp fp tp fp tp fp tp fp tp fp circuit 
devel 
games graph 
math net 
serial 
sound util 
word 
third step classifier trained features sourceforge archive tested combined data set 
table shows accuracy svm classifier category 
time experiments single words highest performance 
classes perform best change experiment false positive rate graphics category worse 
data sets compared surprisingly accuracy higher train classifier features ibiblio archive 
please note penalties method experiments able compare feature types 
weights different feature type increase accuracy 

experiments show source code accurately classified respect programming language application category 
accuracy classification depends factors 
variance data application categories selection features information retrieval techniques programming language affect performance 
demonstrate svm approach programming language topic classification programs 
train classifier automatically extracted features code comments readme files 
programming language classification features tokens code words comments 
topical classification words bigrams lexical phrases comments readme files header file names code features 
perform feature selection expected entropy loss values train svm classifiers features 
shows promising results explore including choice number feature vectors 
values term frequency vectors binaries improve performance classifier 
programming language classification extended adding syntactic features words 
believe properties languages way comments included tokens arithmetic logical operations help identifying programming language 
results imply large archive collections mixed data text source code effectively automatically classified categorized 
feel lead effective code archives reduction duplication programmer effort 

gratefully acknowledge gary flake comments contributions 

abramson information theory coding 
mcgraw hill new york 
bennett campbell support vector machines hype 
acm special interest group knowledge discovery data mining sigkdd 
chang lin libsvm library support vector machines :10.1.1.114.4532
software available www csie ntu edu tw cjlin libsvm 
chen lee yao code search cvs comments preliminary evaluation technical report 
school computer science eng university new south wales australia 
simos diaz stars conceptual framework reuse processes technology adaptable reliable systems stars technical report 
darpa 
dumais svms text categorization 
ieee intelligent systems magazine trends controversies 
dumais platt heckerman sahami inductive learning algorithms representations text categorization 
proceedings acm conference information knowledge management 
davis automatically identifying reusable oo legacy code 
ieee computer 
glover flake lawrence birmingham kruger giles improving category specific web search learning query modification 
ieee symposium applications internet saint 
san diego ca ieee 
henninger information access tools software reuse 
systems software 
joachims text categorization support vector machines 
proceedings tenth european conference machine learning 
personnaz dreyfus single layer learning revisited stepwise procedure building training neural network 
neurocomputing algorithms architectures applications 
fogelman ed springer verlag 
krovetz viewing morphology inference process 
artificial intelligence 
krueger software 
surveys 
kwok automated text categorization support vector machines 
proc 
international conference neural information processing 
merkl content software classification self organization 
proc 
ieee international conference neural networks platt cristianini shawe taylor large margin dags multiclass classification 
advances neural information processing systems 
mit press 
rosson carroll reuse uses smalltalk programming 
computer human interaction 
yang pederson comparative study feature selection text categorization 
proceedings fourteenth international conference machine learning icml 

