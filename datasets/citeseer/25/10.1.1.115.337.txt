universally composable efficient multiparty computation threshold homomorphic encryption ivan damg ard jesper nielsen brics department computer science university aarhus ny munkegade dk denmark 
new general multiparty computation protocol cryptographic scenario universally composable particular secure active adaptive adversary corrupting minority parties 
protocol efficient best known statically secure solutions particular number bits broadcast dominates complexity nk number parties security parameter size circuit doing desired computation 
previous adaptively secure protocols cryptographic model protocol non committing encryption homomorphic threshold encryption particular paillier cryptosystem 
problem multiparty computation mpc dates back papers yao goldreich 
proved basically collection parties efficiently compute value input function learns correct result new information 
precisely protocols proved secure polynomial time bounded adversary corrupt set parties initially behave likes say adversary active 
adversary able prevent correct result computed learn result inputs corrupted parties 
set corrupted parties fixed start adversary called static non adaptive 
proving security protocol requires complexity assumption existence trapdoor way permutations 
model communication considered adversary may see message sent ivan brics dk 
basic research computer science centre danish national research foundation 
damg ard nielsen parties known cryptographic model 
unconditionally secure mpc protocols proposed ben chaum model private channels assumed pair parties 
protocols secure adaptive adversary may decide dynamically protocol corrupt 
years protocols proposed specific computational assumptions improve efficiency general statically secure mpc see instance 
particular cramer damg ard nielsen proposed general mpc protocol secure static adversary corrupting minority parties 
protocol assumes keys threshold homomorphic cryptosystem set communication broadcast complexity nk number parties security parameter size circuit computing desired function 
far efficient protocol known cryptographic model tolerating dishonest minority best possible want guarantee termination 
homomorphic threshold cryptosystem paillier built quadratic residuosity assumption 
possible get adaptive security cryptographic model start adaptively secure protocol private channels model assuming perfect channels implement public key encryption 
general reduce adaptive security static non committing encryption adaptive security carries cryptographic model 
shown non committing encryption plus additional techniques provide mpc universally composable stronger notion security defined canetti 
protocols efficient best statically secure ones 
alternative approach gives adaptive security assume parties trusted securely erase certain critical data 
results new general mpc protocol cryptographic model paillier encryption 
protocol universally composable particular secure active adaptive adversary corrupting minority parties 
constant factor efficient statically secure protocol 
general mpc solution cryptographic model going adaptive security cause major loss efficiency costs extra assumption secure erasures 
non committing encryption may separate interest technical point view 
protocol private channels model uses non committing encryption building adaptively secure oblivious transfer 
non committing encryption ideas universally composable commitments combine protocol 
principle parties supply encrypted input protocol produces encryptions outputs parties cooperate decrypt 
secure introduce new technique randomizing encryptions decrypted 
means adversary control encryptions universally composable efficient multiparty computation decrypted turns essential proof security go 
prove protocols secure framework universally composable uc security canetti 
framework allows define security general reactive tasks just evaluation functions 
allows prove protocol just provide secure function evaluation fact equivalent call arithmetic black box abb 
abb thought secure general purpose computer 
party private specify inputs abb majority parties ask perform feasible computational task result result public 
abb invoked times keeps internal state invocations 
point view allows easier modular proofs easier protocols tools constructions 
informal description section give completely informal main ideas 
concepts introduced treated formally 
assume start scenario established semantically secure threshold public key system public encryption key pk known parties matching private decryption key shared parties party holds share 
threshold version paillier cryptosystem message space zn rsa modulus plaintext zn denote encryption certain homomorphic properties encryptions easily compute deterministically encryption denote require encryption constant zn easy compute random encryption denote immediately gives algorithm subtracting 
sketch computation performed securely statically secure protocol assume desired computation specified circuit doing additions multiplications zn allows simulate boolean circuit straightforward way values protocol starts having party publish encryptions input values give zero knowledge proofs knows values 
operation involving addition multiplication constants performed interaction parties know encryptions input values addition gate parties immediately compute encryption output leaves problem multiplications encryptions may case parties knows compute securely encryption ab 
done protocol slightly optimized version protocol damg ard nielsen 
party pi chooses random di zn broadcasts encryptions di 

parties prove zero knowledge know respective values di encrypts correct value 
subset parties succeeding proofs 

parties compute sdi 
ciphertext decrypted threshold decryption parties learn di 

parties set di 
final stage know encryptions output values just decrypt threshold decryption 
intuitively secure encryption secure outputs random values values known adversary decrypted 
intuition proved static adversary 
uc framework adversary adaptive known additional problems loosely speaking proof security requires building simulator simulates indistinguishable way adversary view real attack having access data adversary supposed know time 
means instance input stage simulator needs show adversary encryptions claimed contain inputs honest parties 
time simulator know inputs encrypt arbitrary values 
fine time honest parties corrupted simulator learns real inputs party reveal adversary simulation internal data party 
simulator stuck real inputs consistent arbitrary values encrypted earlier 
handle problem combination tricks include public key encryption 
redefine encryption method fix rule encrypt value computes normal circumstances encryption point simulation simulator decide set 
encryptions simulation contain fact algebraic properties encryption scheme simulator compute encryption store random coins computed desires 
simulator able find input values adversary supplies immediately encryptions public 
possible sees encryptions 
redefine way inputs supplied input value party pi pi uses uc commitment scheme commitment commit sends encryption proves zero knowledge commit contains value done efficiently paillier encryption uc property commitments precisely allows simulator extract inputs corrupted parties fake behalf honest parties 
universally composable efficient multiparty computation final problem face simulator able cheat threshold decryption protocol 
key setup protocol fixes shares private key simulation ciphertext decrypted value contains 
course decrypting outputs correct results produced simulation real life problem just said ciphertexts simulation really contain 
solve randomizing ciphertexts decrypted include fixed encryption public key 
ciphertext parties cooperate create encryption secret randomly chosen value depends input parties 
compute decrypt ciphertext 
normal circumstances course contain plaintext simulation simulator set cheat process chosen value simulator wants decryption return 
works simulation encrypts 
preliminaries notation denote security parameter 
probabilistic polynomial time ppt algorithm denote running input uniformly random bits producing output polynomial upper bounding running time non erasure protocols consider binary relation checked ppt 
denote set 
non erasure protocol relation ppt algorithms hvs rbs integer specifying move public randomness honest verifier zero knowledge protocol special soundness 
prover input verifier input prover computes message ra sends returns bit challenge prover computes response challenge ra sends verifier 
verifier computes indicates believe prover knows valid witness 
algorithm hvs called honest verifier simulator takes input uniformly random bit string produces output supposed distributed produced honest prover instance receiving challenge defined formally 
algorithm rbs called random bits simulator 
takes input challenge bits think random bits hvs run hvs produces output bit string ra ra ra 
messages simulated hvs just 
known possible construct random bits ra looks generated ra ra 
knowledge extractor damg ard nielsen correct conversations message compute witness 
formalize requirements completeness 
completeness ra ra ra 
special non erasure honest verifier zero knowledge random variables identically distributed exec ra ra ra sim hvs ra rbs ra special soundness non erasure concurrent zero knowledge proofs knowledge concurrent zero knowledge proofs knowledge protocol 
protocol assumes prover verifier agree key trapdoor commitment scheme 
prover input verifier knows protocol proceeds follows 

prover generates ra commits rc sends verifier 

verifier sends uniformly random prover 

prover computes ra sends rc verifier 

verifier outputs iff rc 
simulate protocol assumes simulator knows trapdoor simulator fake commitment receives compute hvs compute rc rc send rc 
observed protocol protocol adaptively secure 
assume corrupted simulator learns witness 
compute ra rbs special non erasure honest verifier zero knowledge simulation perfect 
call patch state proof knowledge 
knowledge extractor working follows 
assume random commitment key computational binding assume corrupt prover succeeds giving acceptable proof probability say 
giving new random challenges proof accepted get values compute witness expected number needed run proof extract correct proof expected number extraction probability proof accepted place 
generalizes proofs run concurrently 
time proof accepted invoke get witness 
context proofs run ppt universally composable efficient multiparty computation running time number proofs bounded polynomial invocation expected running time total invocations linearity expectation gives expected polynomial running time note zero knowledge simulator trapdoor commitment key knowledge soundness needed key random ensure computational binding 
pick key send need ensure simulator get hands trapdoor protocol simulator exactly way 
universally composable security section give sketch notion universally composable security synchronous protocols authenticated link model 
minor technical differences synchronous model described 
protocol consists parties 
pn ppt interactive turing machines 
execution protocol takes place presence environment ppt itm supplies inputs receives outputs parties 
models adversary protocol schedules activation parties corrupts parties 
round party pi sends message mi party pj message mi state pi round mi ri security parameter random bits pi 
model open channels showing messages mi 

round inputs value xi pi receives output yi pi 
write th activation pi mi yi pi mj xi 
model parties reliably erase state giving ri pi corrupted 
denote set corrupted parties detail real life execution proceeds follows 
init input random bits 
rn auxiliary input set 
mi mi ri 
input activate environment activation activated outputs commands activate xi mj corrupt round guess 
commands handled described environment activated 
require honest parties activated round commands 
guess command execution stops 
party activation mj defined previous round add mj environment compute mi yi pi mj xi 
give mi corrupt give ri set 
round give value yi defined party activation set 
damg ard nielsen result execution bit output denote bit real 
defines boolean distribution ensemble real real take uniformly random 
define security protocol ideal functionality specified 
ideal functionality ppt itm input tapes output tapes think connected parties 
input output behavior ideal functionality defines desired input output behavior protocol 
able specify protocols allowed leak certain information special output tape sot writes information 
ideal functionality special input tape sit 
time input pi writes value sot modeling part input required kept secret 
receives input activate round response writes value output tape party 
value models inputs corrupted parties 
party pi corrupted ideal functionality receives input corrupt sit 
say protocol realizes ideal functionality exists interface called simulator access simulate run input output behavior 
doing inputs corrupted parties information leaked sot specify inputs corrupted parties 
detail ideal process proceeds follows 
init input random bits rf rs auxiliary input set 
provide rs provide rf give activate environment activation defined exactly real word commands handled described 
party activation give mj give xi input tape pi run get value vf sot 
value required compute value mi corrupt corrupts pi values xi yi xi 
exchanged pi 
furthermore corrupt input sit writes value sot value outputs value ri set 
round activated produces value activate input produces output yi 
yi yi set 
result ideal process bit output denote bit 
defines boolean distribution ensemble 
definition 
say realizes exists interface environments corrupting parties holds real define hybrid models 
hybrid model basically reallife model parties addition communication lines universally composable efficient multiparty computation access ideal functionality round parties give input receive output round 
inputs sit receives outputs sot 
defining security protocol hybrid model interface addition communication internal state parties simulate values exchanged call hybrid interface 
definition 
say realizes hybrid model exists hybrid interface environments corrupting parties holds hyb universal composability theorem proven framework 
protocol realizes functionality replaced functionality contexts 
description easily generalizes case ideal functionalities hybrid model 
particular protocols assume parties access ideal functionality fba doing byzantine agreement 
expects bit bi input parties 
honest parties agree value fba outputs parties 
environment allowed determine output sit 
assume broadcast channel easily model ideal functionality 
paillier cryptosystem tools section describe paillier cryptosystem 
public key bit rsa modulus pk pq chosen primes bits 
plaintext space zn ciphertext space 
encrypt zn chooses uniformly random computes ciphertext epk mod element order 
encryption function homomorphic sense epk epk mod epk mod mod epk epk ab mod rb mod 
private key sk mod straightforward verify arn sk mod na mod computed 
compute rn rn mod mod appropriate complexity assumption dcra system semantic secure 
dcra states random elements computationally indistinguishable random elements form rn mod ciphertext epk rk consider function epk kmr mod epk am smr mod 
uniformly random smr mod uniformly random epk uniformly random encryption am mod notice epk sk efficiently compute epk semantically secure encryption function 
hand epk uniformly random encryption 
epk seen perfect hiding commitment scheme epk 
damg ard nielsen trivial see computationally binding 
epk perfect binding algorithm find different openings 
algorithm finding different openings epk distinguish encryptions encryptions 
notice furthermore epk rk rk known arbitrary zn compute sm mod epk epk 
argued epk rk random encryption perfect hiding computationally binding trapdoor commitment scheme trapdoor tk 
considering values keys call keys form epk tk trapdoor keys call keys form epk encryption keys 
describe commitment scheme 
uc commitment scheme introduce called commitment scheme 
consider trapdoor commitment scheme key encryptions 
commit epk epk uniformly random values mod fake commitment just commit random values call commitment 
trapdoor open commitment know trapdoor 
open open open 
note distribution random bits independent trapdoor 
note domain extended committing block wise 
protocol 
setup assume commitment sender receiver agree independently chosen paillier public keys commitment key en en 
honest protocol furthermore assume uniformly random 
commitment commits zn follows 

generate uniformly random ls commits cl ls rl sends cl 
generates uniformly random lr zn sends lr 
computes mod commits cs rs uniformly random sends cs ls rl outputs cs rs 

checks cl ls rl computes mod outputs cs 
simulator uc framework property called hitting commitment cs simulate run protocol results outputting cs 
simulator needs trapdoor corrupted opening rs cs corrupted 
simulator properties theorem 
theorem 
consider simulation hitting commitment cs output commitment universally composable efficient multiparty computation 
uniformly random cs uniformly random commitment simulation distributed exactly real life protocol input 
honest simulation cs 

modulus computationally binding simulation corrupted cl sent honest simulation encryption key simulating trapdoor commitment pk mean 
generate en rl uniformly random compute cs en rs uniformly random rs 
run hitting commitment cs 
write resulting commitment cs 
point zn rs compute cs epk give patch state simulation 
call patching cs non erasure protocol non erasure protocol identical plaintext paillier cryptosystem 
instance witness epk epk 
escape secure threshold decryption section introduce adaptively secure threshold decryption protocol 
definition help state results precisely 
introduce weaker notion uc security call escape security 
escape simulator defined simulator uc framework augmented special escape state 
proceeds exactly uc framework enters escape state simulation terminates output say simulation escaped 
environment values security parameter define simulation probability sz pr 
sz non zero define pr conditional probabilities cz sz sz zero define cz 
cz cz defines boolean distribution ensemble denote 
definition 
say escape securely realizes exists escape simulator real environments corrupting parties 
proceed result framework 
public key cryptosystem consider ideal functionality threshold decryption 
init round generates pk sk outputs pk parties adversary 
decryption public key pk output allow parties input ciphertext decryption round allow ciphertext input round 
ciphertext handled follows damg ard nielsen round honest parties input send dsk adversary round return parties 
terminology proved theorem 
exists protocol pal escape securely realizing simulation probability key distribution handled trusted party general mpc 
model assuming key generated ideal functionality key gen generates random threshold key pv sk 
random paillier public key sk 
private key shares parties pv public values protocol checking decryption shares 
decryption protocol pal dec key described 
simulator consists parts 
simulator key gen public key pk ideal functionality simulates key pv sk 
key gen pk property pv computationally indistinguishable real key 
furthermore simulator dec decryption protocol computationally indistinguishable real protocol long simulation escaped 
need property protocol 
random paillier key pk sk possible generate threshold key pk pv sk 
distribution key gen write pk pv sk 
pk sk 
arithmetic black box abb ideal functionality 
initially outputs uniformly random key pk parties defining ring zn arithmetic 
activation expects command honest parties carries command honest parties agree 
typically agreement means parties gave command 
sense 
party pi load secret value variable command pi course parties acknowledge giving command 
case input pi intended meaning pi allowed define value unknown parties 
honest parties disagree goes corrupted sense outputs entire current state inputs sot 
lets environment determine outputs sit 
functionality holds list defined variable names stores value val zn 
commands require variables right hand side defined defined output command 
command pi require defined pi 
command 
violation requirements go return values adversary specify part func tionality keep secret universally composable efficient multiparty computation corrupted 
time variable defined outputs defined parties 
pi input values output sot 
init number rounds setting keys real life protocol 
init command abb simply runs rounds ignoring inputs 
generates random paillier key sk outputs pk parties outputs sk adversary 
load pi 
round pi inputs pi zn set val round 
round round pi corrupted adversary inputs change sit val adversary inputs fail val defined 
linear combination aj zn define val xj mod round 
private multiplication pi round pi inputs pi extra requirement pi corrupted round define val val val mod round round adversary inputs fail sit pi corrupted val defined 
output output round output output val sit output output val parties round 
functionality general multiplication command running hybrid model parties multiplication variable multiplication protocol 
describe protocol abb realizing 
variable val represented encryption enc epk parties agree 
init protocol runs hybrid model access copies functionality key gen described section 
call public key returned copy pk assume copy returns random encryptions epk epk 
call public key returned second copy pk assume second copy return random encryptions ki epk 
key kj running proof knowledge protocol section relation section pj verifier 
denote pi proves pj 
double trapdoor key kj kj kj running universally composable commitment scheme section pj receiver generate commitments pi value denote pi commits pj 
round parties call ideal functionalities wait keys returned 
load key encryptions 
parties carry load commands environment implementation output uses load command internal sub routine 
pi computes epk rs broadcasts 
party pi commits pj 
denote commitment lj cs rs 

party pi proves pj instance pk lj cs witness rs rs 
damg ard nielsen 
party pj inputs fba iff zero knowledge proof pi pj accepted 

wait fba outputs bit parties set enc linear combination set enc enc xj mod private multiplication assume pi knows rs enc epk rs 

pi computes epk enc rx broadcasts 
party pi proves pj instance pk enc enc witness rs rx parties run ba determine accept proof 

result ba parties set enc output 
pi generates random ri zn loads variable xi cj denote commitments step load 

parti pi loads ri variable yi reuses commitments cj previous load 
party pi input ba previous load pj input load 

size subset set indices yi defined 
degree lagrange coefficients interpolating zn compute enc yi mod enc mod assume fixed way picking subset parties agree 
parties run pal dec section take output value returned pal dec theorem 
abb securely realizes 
due space limitations sketch proof theorem full proof appear ph dissertation second author 
proof construct interface simulating abb ideal process access 
simulator runs copy protocol abb keeps consistent inputs outputs ideal process run 
simulating abb provide inputs behalf corrupted parties 
commands load private multiplication inputs honest parties consider 
load pi 
private multiplication pi input matters 
case provide input pi defined second case provide input pi defined 
simulator supplies inputs value depends lets pi participate simulation abb way results honest parties defining enc hold encryption provide input case load determine appropriate value initialization simulated follows init copy receives key pk sk computes pv sk 
pk sk computes epk rk computes epk rr outputs pk pv ski party pi 
second copy generates keys kj en rj distributes protocol 
running simulator zero knowledge proofs pj verifier key kj simulator pj corrupted tj universally composable efficient multiparty computation simulator 
notice sk commitment schemes epk computationally binding required 
running simulator commitment pi pj key kj kj simulator pj corrupted tj tj simulator 
notice initialization simulates perfectly protocol 
simulator maintains invariant variable defined simulated abb iff defined 
furthermore simulator maintains defined variables knows ran enc epk ran 
values trapdoor openings simulation load command load describe simulate loads key know value load simulation done running protocol 
pi pi honest proceed follows 
pi computes epk broadcasts pi corrupted step learn pi ideal process 
rk compute rs epk rs uses rs internal state pi 

party pi simulates trapdoor commitment pj giving commitment lj cs 
pi corrupted step patch patch lj cs 
party pj party pi run simulator section instance pk lj cs 
pi corrupted step patch 
rs rs witness give witness simulator section patch state proof knowledge 

parties execute ba protocol 
result parties set enc ran 
corrupted pi simulator inputs pi behalf pi lets honest parties follow protocol 
ba fails simulator inputs fail sit 
broadcast value enc accepted simulator load input change behalf pi sit 
ba output parties input party pj honest input 
lj cs commitment received pj 
proof received accepted pi open lj cs value say rewind extract value 
theorem assume sent adversary lj binding key lj sj opened value 
sk decrypt lj cs obtain value pi open intuition encryption value pi open plaintext value extracted plaintext pi honest onset load corrupted third message commitment protocol sent round environment send commitment lj cs value different input guarantee lj encryption key 
need decrypt simulator sent patched state pi consistent rs 
binding key state pi consistent 
cases enc accepted simulator decrypts enc learn random bits ran enc epk ran 
damg ard nielsen private multiplication simulated similarly letting epk known computing rx epk enc rx doing know ran enc epk ran 
linear combination simulated letting enc ga enc xj aj ran ran xj aj mod output simulated follows output input output know honest parties got input output output rounds 
simulator section simulate decryption inconsistent party get corrupted 
cheating randomization encryption decrypt honestly 

honest pi run load command committing uniformly random elements trapdoor keys 

indices corrupted parties load xj succeeded 
add indices uniformly random honest parties parties ri pick random degree polynomial rj honest parties set ri patch load xi consistent ri 
load ri yi running load protocol honestly 
possible previous load consistent ri 

step simulated protocol 
encryption corrupted party pj able load different values xj yj encryption 
run decryption protocol protocol 
prove real abb hybrids argument 
define running modification pal pk run produce key dec dsk run pal gen 
doing got rid sk introduced 
results section 
define section extract plaintext random bits 

results section 
define run dec dec dsk 

sections proved dsk 
notice produced sk semantic security epk 
define epk 
follows semantic security 
define correct inputs honest parties pick ri values uniformly random honest parties 
seen epk information leaked inputs environment sees ri values distinguish random values random values consistent degree polynomial 
define epk semantic security prove 
simulator simulating commitments anymore 
needed honest parties correct universally composable efficient multiparty computation inputs time start running commitments honestly 
define starting sk get 
define run dec dsk 
proving basically involves proving protocol correct done results sections 
difference real abb key gen dec key gen pal dec real abb follows 

beaver haber 
cryptographic protocols provably secure dynamic adversaries 
editor advances cryptology eurocrypt pp 
berlin 
springer verlag 
lncs vol 


ben goldwasser wigderson 
completeness theorems fault tolerant distributed computation extended 
th stoc pp 
chicago illinois may 

canetti 
universally composable security new paradigm cryptographic protocols 
th focs 
ieee 

canetti feige goldreich naor 
adaptively secure multi party computation 
th stoc pp 
philadelphia pennsylvania may 

canetti lindell ostrovsky sahai 
universally composable multi party secure computation 
th stoc pp 
montreal quebec canada 

chaum cr damg ard 
multiparty unconditionally secure protocols extended 
th stoc pp 
chicago illinois may 

cramer nielsen 
multiparty computation threshold homomorphic encryption 
advances cryptology eurocrypt pp 
berlin 
springer verlag 
lncs vol 


damg ard 
efficient concurrent zero knowledge auxiliary string model 
preneel editor advances cryptology eurocrypt pp 
berlin 
springer verlag 
lncs vol 


damg ard nielsen 
perfect hiding perfect binding universally composable commitment schemes constant expansion factor 
yung editor advances cryptology crypto pp 
berlin 
springer verlag 
lncs vol 


gennaro rabin rabin 
simplified vss fast track multi party computations applications threshold cryptography 
podc 

goldreich micali wigderson 
play mental game completeness theorem protocols honest majority 
th stoc pp 
new york city may 

lysyanskaya 
adaptive security threshold setting cryptosystems signature schemes 
boyd editor advances cryptology asiacrypt pp 
berlin 
springer 
lncs vol 


paillier 
public key cryptosystems composite degree residue classes 
stern editor advances cryptology eurocrypt pp 
berlin 
springer verlag 
lncs vol 


yao 
protocols secure computations extended 
rd focs 
ieee 

pp 
chicago illinois nov 
