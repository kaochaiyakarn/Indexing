architecture reconfigurable iterative mpi applications dynamic environments el szymanski carlos varela rensselaer polytechnic institute troy ny usa cs rpi edu www cs rpi edu 
proliferation large scale dynamic execution environments grids need providing efficient scalable application adaptation strategies long running parallel distributed applications emerged 
message passing interfaces initially designed traditional machine model mind assumes homogeneous static environments 
inevitable long running message passing applications require support dynamic reconfiguration maintain high performance varying load conditions 
describe framework provides iterative mpi applications reconfiguration capabilities 
approach integrating mpi applications middleware supports process migration large scale distributed application reconfiguration 
architecture reconfiguring mpi applications verify design heat diffusion application dynamic setting 
wide variety computational environments increasingly available host execution distributed parallel applications 
examples include large scale supercomputers shared dedicated clusters grid environments metacomputing environments 
performance variability environments rule exception 
application developers variability poses new challenges go far parallelism scalability 
issue optimize large applications run set distributed resources maintain desired performance anytime change pool characteristics resources application demands lifetime 
conventional distributed parallel systems achieving high performance matter applicationlevel scheduling application specific 
techniques relied assumptions application performance model known number resources static characteristics resources known 
obvious solution dynamic application reconfiguration adjusting allocation resources demand system availability varies 
new generation computational environments presents multiple resource management challenges provides abundant pool resources appealing large scale computationally demanding distributed applications 
examples parallel computational science engineering applications arise diverse disciplines astrophysics fluid dynamics materials science biomechanics nuclear physics 
applications involve simulating multi scale problems exhibit need computational resources 
applications implemented message passing interface mpi 
mpi widely standard develop parallel applications harness processors 
issues scalability adaptability load balancing remain challenge 
maintain performance level mpi applications need able scale accommodate new resources shrink accommodate leaving slow resources 
existing mpi implementations assume static network environment 
mpi implementations support mpi standard provide support dynamic process management allowing running processes spawn new processes communicate 
developers need handle explicitly issues resource discovery resource allocation scheduling profiling load balancing 
additional middleware support needed relieve application developers non functional concerns allowing high performance 
internet operating system ios distributed middleware framework provides support dynamic reconfiguration large scale distributed applications opportunistic load balancing capabilities resource level profiling application level profiling 
ios modular nature allows developers create easily various reconfiguration policies 
key ingredient application reconfiguration support process migration 
applications support process mobility able benefit ios reconfiguration policies 
target broad class iterative applications 
large number scientific engineering applications exhibit iterative nature 
examples include partial differential equation solvers particle simulations circuit simulations 
chosen experiment initially class iterative applications reasons class important scientific engineering communities exhibits predictable profiling reconfiguration points easily automated static software analysis code level annotations 
allow applications benefit reconfiguration capabilities ios middleware developed user level library top mpi allows process migration 
strategy achieves portability different implementations mpi standard 
mpi ios system integrates ios middleware strategies existing mpi applications 
mpi ios adopts semi transparent checkpointing mechanism user needs specify data structures saved restored allow process migration 
approach require extensive code modifications 
legacy mpi applications benefit load balancing features inserting just small number calls simple application programming interface 
previous described detail ios architecture evaluated migration scheme 
take demonstrating capability ios adapt class iterative mpi applications changing load conditions 
remainder organized follows 
section presents related 
section give overview ios middleware 
section presents mpi ios architecture details mpi extended support reconfiguration ios 
section discusses adopted reconfiguration policies 
section performance evaluation 
conclude discussion section 
related number conditions introduce computational load imbalances lifetime application application may irregular unpredictable workloads adaptive refinement execution environment may shared multiple users applications execution environment may heterogeneous providing wide range processor speeds network bandwidth latencies memory capacity 
dynamic load balancing dlb necessary achieve parallel performance imbalances occur 
dlb research targeted application level application continuously measures detects load imbalances tries correct redistributing data changing granularity problem domain repartitioning 
approaches proved beneficial suffer limitations 
transparent application programmers 
require complex programming domain specific 
second require applications amenable data partitioning applicable areas require rigid data partitioning 
lastly applications run dynamic grid application level techniques applied successfully heterogeneous clusters may fall short coping high fluctuations resource availability usage 
research targets middleware level dlb allows separation concerns load balancing resource management transparently dealt middleware application programmers deal higher level domain specific issues 
efforts focused enhancing mpi run time systems adapt applications dynamic environments 
adaptive mpi implementation mpi top light weight threads balances load transparently parallel object oriented language object migration support 
load balancing done migrating user level threads mpi processes executed 
approach limits portability process migration different architectures relies thread migration 
process swapping enhancement mpi uses allocation resources improves performance mpi applications allowing execute best performing nodes 
mpi process swapping class iterative applications 
approach different sense need allocate resources initially 
strategy potentially useful may impractical large scale dynamic environments grids resources join leave initial allocation may possible 
allow new nodes available join computational grid improve performance running applications execution 
efforts focused process checkpointing restart mechanism allow applications adapt changing environments 
examples include mpich srs library 
mpich support checkpointing fault tolerance provide feature allow process migration load balancing 
framework integrated sophisticated checkpointing techniques projects able support non iterative applications 
srs supports checkpointing allow application restart 
differs sense support migration finer granularity 
application transparent process checkpointing trivial task expensive architecture dependent requires saving entire process state 
checkpointing provides simpler solution portable approach 
proved useful important class iterative applications 
api calls inserted mpi program informs middleware important data structures save 
attractive solution benefit wide range applications incur significant overhead relevant state saved 
instrumentation applications easily automated iterative application common structure 
projects actively investigated issue application adaptivity grid environments 
examples include grads apples cactus grid way 
share performance scheduling ideas projects 
strategies adopted rely application restart mechanism entire application stopped checkpointed migrated restarted hardware configuration 
strategy result improved performance scenarios effective adaptivity achieved migration supported finer granularity 
address reconfigurability process level application increase flexibility 
overview ios framework goal ios middleware provide effective decentralized middleware triggered dynamic reconfiguration strategies enable application adaptation constantly changing behavior large scale shared networks 
distributed application developers lack time expertise handle complex performance ios promising approach combines ease high performance 
applications wishing interact ios need flexible structure easily dynamic nature shared networks 
exhibit large degree processing data parallelism efficient system scalability large number resources 
assume application consists distributed entities 
case mpi application entities refer mpi processes 
ios reconfiguration mechanisms allow analyzing profiled application communication patterns capturing dynamics underlying physical resources utilizing profiled information reconfigure application entities changing mappings physical resources migration 
key characteristic ios adopts decentralized strategy avoids global knowledge allow scalable reconfiguration 
ios architecture consists distributed middleware agents capable interconnecting various virtual topologies 
support hierarchical peer peer topologies 
suitable grid environments fig 

interactions reconfigurable application local ios agents 
usually consist hierarchy homogeneous clusters second suitable internet environments usually lack defined structure 
shows architecture ios agent interacts application entities hosted node 
ios agent consists profiling component decision component protocol component dynamic profiling component resource level application level profiling gather dynamic performance profiles physical resources application entities 
profiling generates performance profiles reconfiguration decisions 
application entity profiles processing communication data accesses memory usage 
resource profiling monitor monitors periodically utilization 
information resource available cpu power memory disk storage measured recorded periodically 
ios architecture defines defined interfaces profiling monitors allow profiling technologies long implement appropriate interfaces 
examples include network weather service nws mds 
protocol component protocol component responsible inter agent communication virtual topology creation 
middleware agents form virtual network 
new nodes join network existing nodes idle corresponding protocol component contact peers randomly steal 
strategy aids advertising new existing resources available 
stealing request carries performance related information node originated request 
reconfiguration module receiving stealing request reconfiguration module tries evaluate potential candidate entities benefit migration originator request 
decision done examining performance application entities local node predicted performance remote node 
gain predicted local protocol component notifies selected entities migrate 
applications communicate ios middleware clearly defined interfaces permit exchange profiled information reconfiguration requests 
shows profiling interface allows applications notify middleware communication exchanges 
profiling component maintains list application entities hosted local run time system 
application entity list maintains information entities exchanging messages frequency communication 
words list represents weighted communication subgraph application entity nodes represent application entities edges represent communication links weights represent communication rates 
entity unique name uan associated universal locator ual keeps track current location entity currently hosted 
uan stands universal actor name ual stands universal actor locator 
adopt naming conventions salsa language 
salsa language developing actor oriented application 
dialect java high level constructs universal naming remote message sending coordination 
ios prototyped salsa java 
methods notify profiling agent entities entering exiting local run time system due migration initial entity startup 
public void uan uan public void uan uan public void uan uan ual target profiling agent updates entity profiles message sending methods public void uan uan ual ual int msg size profiling agent updates entity profiles message reception method public void uan uan ual ual int msg size methods notify profiling agent start message processed message processed uan ual identify sending entity public void uan uan ual ual int msg size public void uan uan ual ual int msg size fig 

ios profiling api reconfiguring mpi applications ios process migration support mpi communication processes needs done part communicator 
mpi communicator opaque object number attributes simple functions govern creation destruction 
delineates communication domain point point communications collective communication members domain 
hand allows communication processes belonging disjoint 
achieve mpi process migration rearranging mpi communicators 
migration performed collaboration participating mpi processes 
done point pending communications 
process migration requires careful update communicator involves migrating process 
class iterative application natural barrier points 
necessary perform reconfiguration iteration 
migration request forces running mpi processes enter reconfiguration phase cooperate update shared communicators 
migrating process spawns new process target location sends local checkpointed data 
process migration checkpointing support implemented part user level library 
approach allows portability vendor mpi implementations support mpi process spawning feature library implemented entirely user space require infrastructural changes 
library called pcm process checkpointing migration 
profiling mpi application fig 

library executable structure mpi ios application mpi processes need send periodically communication patterns corresponding ios profiling agents 
achieve built profiling library mpi profiling interface 
mpi specification provides general mechanism intercepting calls mpi functions 
allows development portable performance analyzers tools access mpi implementation source code 
requirement mpi function callable alternate name xxxx xxxx 
built profiling library intercepts communication methods mpi sends communication event profiling agent 
profiled mpi routines call corresponding xxxx necessary pcm routines 
shows library structure mpi ios programs 
instrumented code linked profiling library pcm library vendor mpi implementation library 
generated executable passes profiled information ios run time system java native interface jni communicates local pcm daemon started node 
responsible storing local checkpoints passing reconfiguration decisions socket api ios agent mpi processes 
details reader referred 
fig 

reconfiguration scenario mpi ios application simple scenario adaptation mpi applications interact checkpointing migration services provided pcm library profiling reconfiguration services provided ios agents 
walking simple scenario application adaptation shown explains interactions 
example illustrates execution parallel mpi application composed processes running different processors 

available processor joins ios virtual network 

new processor starts requesting peers 

processor receives stealing request 
decision component local ios agent predicts gain migrating process remote processor 
mpi process gets notified migration event 

iteration migrating process broadcasts message rest processors enter reconfiguration phase 

migrating process checkpoints local state spawns image remote processor local takes care transferring checkpointed state newly created process notifying rest processes 

part completing migration process pcm library takes care rearranging com world communicator removing old process including new 
newly created process gets assigned rank 
reconfiguration policies reconfiguration policies application characteristics underlying resources characteristics evaluate performance gain migration 
resources storage cpu processing power network bandwidth network latencies ranked importance running application 
instance application computationally intensive weight cpu processing power 
application communication intensive messages exchanged large sizes weight network bandwidth 
communication intensive small exchanged message sizes network latency important 
set processes running local node pm set resources available local node rl weight assigned resource ri importance performance set ri ri amount resource available foreign node amount resource processes local node estimated cost migration set average life expectancy set processes predicted increase performance gained migrating log node receives stealing request node process group processes migrated gain positive 
larger value beneficial migration important factor equation remaining life expectancy group processes intuition processes expected short remaining life migrated cost reconfiguration exceed benefit remaining life expectancy 
case iterative applications estimate life expectancy looking number remaining iterations multiplied average time iteration takes current node 
performance evaluation application case study fluid dynamic problem solves heat diffusion solid testing purposes 
applications representative large class highly synchronized iterative mesh applications 
application implemented mpi instrumented pcm library calls 
simplified version problem evaluate reconfiguration strategies 
dimensional mesh cells represent problem data space 
mesh initially contains initial values mesh boundary values 
cells uniformly distributed parallel processors 
master process takes care distributing data processors 
iteration value cell calculated values neighbor cells 
cell needs maintain current version values neighboring cells 
achieve processors exchange values neighboring cells referred ghost cells 
sum iteration consists doing computation exchange ghost cells neighboring processors 
shows structure parallel decomposition heat diffusion problem 
adaptation experiments iterative dimensional heat diffusion application evaluate reconfiguration capabilities mpi ios framework 
original mpi code instrumented pcm calls enable checkpointing migration 
experimental fig 

parallel decomposition heat diffusion problem 
testbed dual node cluster sun blade machines 
node processing speed cycles second gb memory 
comparative purposes mpich free implementation mpi standard 
emulated shared dynamic environment varying load conditions introducing artificial load cluster nodes varying periodically 
conducted experiments heat application mpi ios framework mpich similar load conditions 
experiments started running application kept increasing load cluster nodes watched application performance affected case 
experiment conducted mpi ios 
shows performance application 
started running application processes processors 
remaining processors joined virtual ios network gradually 
started increasing gradually load cluster nodes processors participating computation 
node joined virtual ios network iteration started sending stealing requests 
caused process migrate new machine reduce load original hosting node 
notice increase application throughput 
load slow machine increased iteration 
iteration fourth node joined virtual network started sending stealing packets 
point processes migrated machine 
caused slow processors eliminated computation 
application ended total best available processors caused substantial increase performance 
total execution time application 
shows performance application mpich 
emulated load conditions experiment 
ability adapt application stuck hardware configuration experienced constant slowdown fig 

performance dimensional heat simulation application reconfiguration mechanism mpi ios 
experiment conducted dual processor sun blade cluster 
performance 
highly synchronized nature application causes run fast slowest processor 
application took finish decrease performance compared adaptive execution 
fig 

performance dimensional heat simulation application mpich 
experiment conducted dual processor sun blade cluster 
discussion architecture enhances performance iterative applications dynamically changing conditions 
implemented user level library adds checkpointing process migration features existing iterative mpi applications 
integrated library middleware reconfigurable computing 
experimental evaluation demonstrated importance augmenting long running mpi application reconfiguration capabilities achieve high performance 
opens interesting directions 
direction evaluation different reconfiguration policies effective dynamic execution environments 
sensitivity policies application characteristics needs investigated 
important direction extending framework class iterative applications 
require developing sophisticated checkpointing migration policies 
plan evaluate framework larger networks interesting realistic load characteristics network latencies 
acknowledgments authors acknowledge members worldwide computing laboratory rensselaer polytechnic institute 
particular special go travis contributions ios middleware 
supported ibm sur award ibm sur award nsf career award 
cns nsf int 

message passing interface forum mpi message passing interface standard 
international journal supercomputer applications high performance computing 
gropp lusk dynamic process management mpi setting 
proceedings th ieee symposium parallel processing ieee computer society 
message passing interface forum mpi extensions message passing interface 
varela load balancing autonomous actors dynamic networks 
hawaii international conference system sciences hicss software technology track hawaii 
varela network sensitive reconfiguration distributed applications 
technical report cs department computer science rensselaer polytechnic institute 
fox williams messina parallel computing works 
morgan kaufmann publishers san fransisco ca available www npac syr edu pcw 

szymanski teresco varela middleware framework dynamically reconfigurable scientific computing 
ed grid computing new frontiers high performance processing 
elsevier appear 

monien diffusive load balancing schemes heterogeneous networks 
proceedings twelfth annual acm symposium parallel algorithms architectures acm press 
flaherty loy shephard szymanski teresco parallel structures dynamic load balancing adaptive finite element computation 
applied numerical mathematics 
teresco flaherty resource aware scientific computation heterogeneous cluster 
technical report cs williams college department computer science appear computing science engineering 

de adaptive load balancing mpi programs 
proceedings international conference computational science part ii springer verlag 
huang kal adaptive mpi 
proceedings th international workshop languages compilers parallel computing college station texas 
casanova simple mpi process swapping architecture iterative applications 
international journal high performance computing applications 
checkpointing process migration mpi 
proceedings th international parallel processing symposium ieee computer society 
friedman fault tolerant dynamic mpi programs clusters workstations 
proceedings eighth ieee international symposium high performance distributed computing ieee computer society 
herault neri mpich scalable fault tolerant mpi volatile nodes 
proceedings acm ieee conference supercomputing ieee computer society press 
dongarra srs framework developing malleable parallel applications distributed systems 
parallel processing letters 
volume 

dongarra self adaptivity grid computing 
concurrency computation practice experience 
berman wolski casanova cirne hayes schopf shao spring su adaptive computing grid apples 
ieee trans 
parallel distrib 
syst 

allen foster karonis ripeanu seidel supporting efficient execution heterogeneous distributed computing environments cactus globus 
supercomputing proceedings acm ieee conference supercomputing cdrom new york ny usa acm press 
framework adaptive execution grids 
softw 
pract 
exper 

wolski dynamically forecasting network performance network weather service 
cluster computing 
czajkowski fitzgerald foster kesselman grid information services distributed resource sharing 
proceedings th ieee symposium high performance distributed computing 

blumofe leiserson scheduling multithreaded computations stealing 
proceedings th annual symposium foundations computer science focs santa fe new mexico 
varela agha programming dynamically reconfigurable open systems salsa 
acm sigplan notices 
oopsla intriguing technology track proceedings www cs rpi edu oopsla pdf 

national laboratory mpich www unix mcs anl gov mpi mpich 
