transport layer abstraction peer peer networks ferreira christian paul ruth department computer sciences purdue university west lafayette usa rf ruth cs purdue edu www gnu org software gnunet initially unrestricted host host communication model provided internet protocol deteriorated due political technical changes caused internet growth 
problem clientserver applications peer peer networks frequently struggle peers partially reachable 
describe peer peer framework hide diversity obstacles underlying internet provide peer peer applications abstractions hide transport specific details 
details implementation transport service smtp 
small scale benchmarks compare transport services udp tcp smtp 
keywords peer peer framework transport layer security 
peer peer networks typically overlay networks built top existing internet infrastructure 
ideal overlay network node communicate node 
case modern internet 
firewalls network address translation nat devices dynamic ip assignment dhcp create obstacles global peer peer applications need overcome 
central design goal peer peer framework virtualize network give application view uniform address space communication model 
may possible guarantee connectivity node node details implementation transport layer clearly hidden application 
important problem communications internet increasing interference governments activities citizens 
china example blocks access news sites hosted outside country :10.1.1.18.5049
desirable peer peer system offer transport protocols spite circumstances 
udp proceedings rd ieee acm international symposium cluster computing grid ccgrid ieee tcp easily blocked port number associated specific application hand protocols smtp conveniently blocked interfering significant portion users 
clear discussion important design requirements peer peer system support wide variety transport mechanisms 
goal transport abstraction support full spectrum transport services 
services may unidirectional bidirectional stream oriented record oriented reliable unreliable low latency high latency 
particular desirable support mixture different features peer peer network 
fact peers may want different modes communication link 
example suppose node nat box reached directly udp tcp 
system multiple transport protocols initiate connection sending mail smtp contact tcp allowing continue communication bidirectional tcp connection 
gnunet peer peer system clear idea transport abstraction applied systems 
gnunet peerto peer framework main focus security 
goal gnunet project important tool free information exchange world hostile uncontrolled communication 
gnunet primary design goals protect privacy users guard attacks abuse 
gnunet mechanism control track censor users 
gnunet protocols aim hard possible identify specific network activities disrupt operations 
transport layer abstraction gnunet benchmarking results evaluate performance corresponding udp tcp smtp transport implementations 
describe smtp transport implementation detail conventional choice 
gnunet transport layer gnunet peer peer framework support multiple applications 
layered design see normally runs daemon 
applications talk gnunet daemon client server manner tcp connections 
current examples applications anonymous file sharing afs message exchange program chat 
gnunet server responsible accounting routing link encryption 
core relies implementations actual transport messages 
gnunet peers identified node identities hash codes public keys 
gnunet core provides link link encrypted transmission messages nodes identified node identity 
core binds node identity address underlying internet 
nature network addresses depends transport mechanism 
example udp tcp ip address port number 
smtp mail address 
core responsible link link encryption binding node identities routable addresses peer discovery 
leaves peer peer applications concerned node identities 
due space limitations refer reader details gnunet various protocols remainder concentrate transport abstraction 
gnunet gtk afs ui tcp io afs lib chat ui application service api gnunet core tcp io chat lib encryption discovery transport service api tcp udp smtp ipv 
gnunet layers 
node node communication peer peer networks inherently unreliable 
contrast client server architectures node failure part normal mode operation 
proceedings rd ieee acm international symposium cluster computing grid ccgrid ieee gnunet chat nodes fail transport layer may built top unreliable communication protocol ip udp 
design question case transport layer implementation hide fact guarantee delivery node reachable 
words question transport layer core provide reliable communication tcp hide unreliability network network problems exposed application 
peer peer systems better expose unreliability transport layer applications higher level abstractions go scope simple link level transport 
multiple reasons 
links peer peer overlay network bound reliable physical links ip concerned 
connections asymmetric bandwidth protocols require forwarding messages multiple peers frequently force peers drop messages 
congestion control difficult generic transport abstraction deal connections 
application specific solutions take specifics protocol potential security problems account needed 
reason applications may require reliable communications example flooding search may send queries parallel lost transport layer possible remaining queries return sufficient number results 
adding retransmission transport layer cases merely increases overhead providing major benefit 
rationale applies question ordered delivery 
choosing weaker semantics guarantee order delivery transport layer cheaper resilient 
example adversary changes message order delays messages impact 
course strict semantics implementation transport udp order preservation smtp high latency easier 
transport layer implementation may underlying protocol tcp stronger semantics happen example network host configuration allow cheaper protocols ip udp 
order allow common transport protocol basis transport layer size messages exchanged core transport layer fixed case equal smallest value transport mtus communicated transport layer core 
udp technically support datagrams kb operating system may impose smaller mtu see rfc example 
fragmentation considerations dictate smaller message sizes bytes ethernet 
protocols smtp restrictions message size may sender header msg unsigned int size int int crc typedef struct unsigned int version void receive mp 
data structure interface core transport layer 
high message overhead 
advocate idea transport layer advertise mtu core 
core responsible queuing multiple application messages larger message smaller mtu transport layer transmit message 
smallest mtu ideally larger largest single application message impossible core provide fragmentation reassembly 
core api gnunet core provides simple interface data structure transport layer 
consists method receive invoked transport layer message received 
core structure contains version number identity local node 
shows data structure 
pointer data structure passed initialization method transport layer implementation implement 
method returns data structure methods core invoke transport layer see section 
receive method core interface takes message argument 
message contains transport session handle 
handle identify transport session tcp stream 
contains type id transport opaque handle transport layer free define 
transport layer pass null session handle specific transport implementation notion sessions 
second field sender node identity sender message 
transport layer communicate information means communicated transport implementation 
example udp messages contain sender identity message tcp implementation client typedef struct unsigned short unsigned short mtu unsigned int cost int helo message helo int helo message helo int connect helo message helo int send void msg unsigned int size int int crc int associate int disconnect int void int void 
transport api 
sends identity connection established 
remaining arguments describe message 
passed transport layer core 
consist pointer message size message flag specifying message plain text encrypted crc checksum plain text message 
transport layer concerned encryption verification checksum concerned transmitting pieces information 
details information communicated transport specific specified 
transport interface proceedings rd ieee acm international symposium cluster computing grid ccgrid ieee data structure containing list function pointers see 
provides access fields methods extend gnunet new transport service 
new transport mechanism integrated gnunet building dynamic library xxx exports function xxx 
finds command load transport named xxx configuration file load dynamic library invoke xxx method passing core previous section 
xxx supposed return pointer data structure null error 
transport structure contains fields 
field protocol number unique small number identify transport protocol inside gnunet 
second field maximum transfer unit mtu supported transport implementation 
gnunet transport implementation tcp obvious limit message size mtu chosen reasonable trade message overhead ip level fragmentation latency achieved 
third field defines cost transport mechanism compared services 
example udp typically cheaper tcp tcp cheaper smtp 
choice gnunet core choose cheapest available transport mechanism send message 
function gnunet typically call transport 
function called gnunet ready receive messages transport layer 
start server thread example listens port incoming messages 
gnunet stopped calls order give transport chance shutdown properly 
gnunet uses called helo messages notify nodes available transports 
helo message contains things transport protocol number address transport endpoint 
gnunet core know addressing scheme transport mechanism ip address port number mail address ipv address calls transport mechanism order obtain information 
helo messages variable size transport layer address variable length field message 
supposed fill fields protocol mtu 
returns ok success 
fail example may fail transport service unidirectional send advertised address local node reached 
case example tcp service nat box 
tcp implementation aware nat problem may decide return ensure nodes attempt initiate tcp connection 
case tcp service outbound connections gnunet 
function counterpart 
invoked gnunet receives helo message transport protocol id supposed check sender address specified helo conforms standards set sender addresses specific transport mechanism 
verify helo verify rest helo formed address reachable 
may check user configured transport mechanism specifically deny sending messages address blacklist mechanism may example prevent attempts connect ip network 
remaining methods ones concerned sending messages 
connect proceedings rd ieee acm international symposium cluster computing grid ccgrid ieee connection remote node 
connect passed helo message successful supposed set second argument transport session established 
handle core calls send identify send message 
arguments send message size message indication information encrypted checksum message plain text 
provide transport mechanism arguments passed receive function core receiver node 
disconnect method opposite connect shuts connection deallocates resources associated 
particular transport implementation free data structures created connect 
set functions described far sufficient need additional method associate order handle bidirectional transport mechanisms 
problem bidirectional transports session initiated local gnunet core calling connect may started remote node 
gnunet core sees session transport layer calls receive 
point things may happen 
core decides bidirectional session send replies core uses potentially cheaper transport mechanism answer answers 
core wants existing session send replies retain transport session handle 
associate cause problems transport layer know close connection free resources 
require core invoke associate decides transport session communication 
associate similar connect ensures session handle valid core calls disconnect 
implementation associate similar counting garbage collection 
connect associate increment counter disconnect decrements 
important detail implementation bidirectional transports time stale connections 
current interface allow nodes establish connection indefinitely 
example core node may decide establish cheaper way communicate associate inbound connection 
transport node instantly close session node may send data 
may keep connection open reason may expect receive data connection 
transport service time sessions associated core writing 
gnunet tmp gnunet smtp var spool mail user 
example configuration gnunet filter line tmp gnunet smtp name pipe 
security considerations interesting security problem peer peer networks arises malicious nodes advertise invalid incorrect peer addresses 
example possible gnutella advertise example com peer port freely chosen advertisement 
peers spread advertisement frequently attempt connect host peer peer network tool distributed denial service attack 
hand central server ability peers advertise peers avoided 
solution problem peer receives advertisement peer check advertised address valid sending ping message containing challenge randomly chosen integer advertised peer 
receives ping responds pong message contains challenge confirming reached address 
protocol run notify peers existence 
prevents malicious node advertising non participating third party network properly respond ping 
easily fabricate pong message sent contains challenge unknown 
sending single message ping seriously attack send message 
sent message directly caused equal amount traffic 
gain potentially achieved able hide identity example smtp implementation gnunet starts running loads transport modules defined configuration file 
process initialization code smtp transport opens connection smtp server sendmail running local host remotely connection send messages peers 
observe gnunet establish direct smtp connection peers relies existing mail transfer agents send messages 
sending mail smtp transport service receives message gnunet core message extended header contains node identity sender meta information provided parameters send 
resulting message base encoded encapsulated mime conventions sent mta pre existing tcp connection 
store mail drive sending client order ensure guaranteed delivery crash 
required gnunet mail especially semantics specify unreliable communications disk significant overhead smtp transport 
mta resolves destination address dns mx record contacts remote mail server receives message smtp initiates delivery 
receiving mail proceedings rd ieee acm international symposium cluster computing grid ccgrid ieee order gnunet receive inbound mail mail delivered local machine 
local machine receiving host mx record mail address step handled smtp protocol 
case gnunet node runs nat box mail typically stored mail server isp 
case host periodically poll new mail example pop client 
configuration polling interval major contributor delay smtp transport 
gnunet properly assume minute reasonable interval 
polling pop easily automated tool available unix systems 
cases problem 
normally users mail account available 
necessary filter inbound gnunet messages messages destined user 
want tag gnunet mails uniform header easy adversaries filter effectively censor gnunet traffic advertisement smtp address peer contain mail address filter line 
sender required add line header 
receiver mail specified filter distinguish mails appropriate filter line 
user change filter line wants course take time propagate new address information network 
needs informed deliver process 
easiest way named pipe fifo 
user specifies gnunet configuration name pipe writes filtered mail pipe 
smtp transport reads mail decodes base encoded body forwards message gnunet core 
example configuration file 
security considerations smtp primary security problem smtp potential users 
transports udp tcp problem lesser extent 
sending massive amounts traffic attack transport protocol fairly moderate amounts data problem sent user mail especially user educated filter spam 
possible smtp possible transport mechanism peer peer networking 
gnunet completely decentralized solution security challenge requires peers able advertise mail addresses peers network 
order prevent attacks peer validates advertisements mail address actual transmission advertising 
validation procedure requires peer send mail message containing gnunet ping message advertisements transports peer 
peer responds proper gnunet pong message address considered valid 
ping message contains random number challenge responding peer copy pong message 
impossible send fake pong reply anybody control router path peers 
note pong message smtp transport mechanism known transport peer 
mechanism ensures malicious peer sends advertisement invalid non gnunet mail address trick receiving peer sending small message address 
bandwidth adversary spends sending advertisements proportional amount mail victim receives 
importantly adversary anonymous 
victim receive mail directly attacker clear attacker node sending advertisements honest node send advertisements having received pong confirmations 
possible track attacker 
sophisticated attack involves mailing lists 
transport udp tcp purdue rh bytes ms ms bytes ms ms bytes ms ms 
time send messages transport 
problem adversary subscribe mailing list advertise address mailing list gnunet 
peers send mail list adversary send responses ping messages recipients 
peers confirm address valid start advertising address causing traffic list 
way adversary anonymously open mailing list unsolicited traffic 
solution problem ensure gnunet smtp traffic forwarded modern mailing list software 
achieved making gnunet mail look bounce message 
bounce messages notify sender email invalid unavailable receiver address 
mailing lists problem members unavailable safe assume bounces filtered 
performance measurements proceedings rd ieee acm international symposium cluster computing grid ccgrid ieee measurements gnunet configured transport service benchmarks automatically switching efficient protocol impossible 
benchmark latency udp tcp smtp transport services measured 
service called send message 
gives network independent approximation overhead service peer 
loopback measurements smtp transport performed different machines spanning range modern smtp configurations 
pentium iii mhz running redhat purdue computer science configuration includes filters spam 
xeon ghz vanilla redhat sendmail configuration 
furthermore pentium iii ghz running gnu linux sgl 
numbers udp tcp provided sgl configuration 
benchmark uses internal filtering sendmail benchmarks filter deliver mail 
transport layer send message bytes excluding transport protocol headers directly local machine 
way network latency packet losses wire impact time measurements 
mes sages sent sequentially transport layer sending message th message received 
messages sent connection time establish connection taken account overhead minuscule practice long connection significant number messages 
benchmarks show udp tcp expected significantly faster compared smtp services compared benchmark run machine recognized faster sendmail 
smtp implementations significant differences depending smtp configuration 
filtering external tool needs reload parse configuration mail expensive 
applying spam filters significantly impact performance underlying smtp implementation 
micro benchmark shows smtp viable solution initiating peer peer sessions seconds connect peer probably noticed users 
percentage received messages percentage received messages udp time ms percentage received messages tcp time ms 
sending messages octets payload unreliable udp tcp transports spacing 
udp time ms percentage received messages tcp time ms 
sending messages octets payload hand optimized spacing message trains 
second set benchmarks measures possible throughput transport 
throughput measured sending multiple messages parallel measuring packet loss 
note udp tcp transport lose messages tcp implementation drops messages write socket blocks 
benchmark report message loss allowing seconds sending messages 
messages sent percentage received messages smtp mtus vs time proceedings rd ieee acm international symposium cluster computing grid ccgrid ieee percentage received messages smtp impact disc time 
smtp throughput spacing avoid thrashing total payload different mtus ram disk mail spool 
received seconds considered lost 
benchmark performed xeon ghz machines running redhat sendmail 
machines connected direct mbit ethernet connection 
shows percentage messages payload octets received seconds messages passed kernel artificial delays 
maximum throughput case kilobytes second kbps udp 
application limit transmission rate linux kernel starts dropping messages shortly start benchmark 
allows application finish sending messages earlier processing time dropped packet smaller loss rate quite dramatic exceeding 
tcp situation due inherent protocol overhead throughput slightly worse kbps 
high packet loss occurs naive design avoided reducing rate application sends messages 
shows results achieved application sends packets trains hand tuned spacing trains 
conceptually delays equivalent congestion control tcp timers available application coarse grained performance worse real tcp hand tuned static testbed 
note tcp bit easier tune tcp windows better timers available os help leverage coarse grained application level timers 
kbps throughput tcp throughput random bit better kbps udp 
smtp show rate controlled numbers 
shows smtp throughput messages size octets kbps 
high message overhead alleviated increasing message size octets resulting kbps throughput 
major bottleneck case sendmail writing message drive message queued 
ram drive mail queue violating smtp reliability case machine crash throughput increased kbps times slower udp spacing 
shown loopback benchmark may different performance characteristics 
related encapsulating networking protocol protocol tunneling traffic known technique long time ip 
asynchrony high reliability universal availability encapsulation various services mail popular choice 
high latency low efficiency smtp applications problem 
research focused addressing security issues inherent protocol mainly attempting allow users filter unwanted mail 
infranet hides traffic requests provide users high level security :10.1.1.18.5049
fairly low overhead compared protocols steganographic encryption increases traffic requirements order magnitude 
peer peer framework jxta example networking protocol encapsulate traffic requests 
jxta allows traffic encrypted steganography 
jxta supports peers network address translation nat 
peers nat want communicate traffic routed peer globally addressable 
approach establish connections machines nat boxes described dan kaminsky explained 
hosts synchronously send messages initial tcp handshake hosts small value ttl ip header 
nat boxes see outbound connection start routing messages 
small ttls cause dropped router nat boxes icmp connection refused messages returned 
problem approach needs way peers synchronize 
furthermore assumes nat box ignores icmp ttl expired messages 
design transport abstraction peer peer systems 
abstraction support wide range underlying transport mechanisms implemented service modules udp tcp smtp 
benchmarks clearly show smtp significantly worse terms performance service useful initiate connections negotiate www org html speakers html cheaper service 
addressed security concerns arise smtp argued peer peer transport abstraction unreliable semantics 
author partially funded cnpq brazil 
authors krista bennett careful editing improvements text 
proceedings rd ieee acm international symposium cluster computing grid ccgrid ieee androutsopoulos paliouras spyropoulos 
evaluation naive bayesian anti spam filtering 
bennett 
efficient sharing encrypted data 
proceedings 
gerald boyd 
just mail 
www com 
braden 
requirements internet hosts communication layers 
rfc ietf october 
feamster balazinska balakrishnan karger :10.1.1.18.5049
infranet circumventing web censorship surveillance 
proceedings usenix security symposium san francisco ca 
freed borenstein 
multipurpose internet mail extensions mime part format internet message bodies 
rfc ietf november 
gnunet project 
www gnu org software gnunet 
gnutella 
gnutella wego com 
li gong 
jxta technology overview 
technical report sun microsystems april 
korb 
standard transmission ip datagrams public data networks 
rfc ietf september 
moore 
extensible message format delivery status notifications 
rfc ietf january 
patrick pantel dekang lin 
spam classification organization program 
learning text categorization papers workshop madison wisconsin 
report ws 
mehran sahami susan dumais david heckerman eric horvitz 
bayesian approach filtering junk mail 
learning text categorization papers workshop madison wisconsin 
report ws 

traditional ip network address translator traditional nat 
rfc ietf january 
