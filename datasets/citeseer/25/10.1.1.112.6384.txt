incentives build robustness bittorrent 
michael tomas thomas anderson arvind krishnamurthy arun fundamental problem peer peer systems tendency users free ride consume resources contributing system 
popular file distribution tool bittorrent explicitly designed address problem tit tat reciprocity strategy provide positive incentives nodes contribute resources swarm 
bittorrent extremely successful show incentive mechanism robust strategic clients 
performance modeling parameterized real world traces demonstrate peers contribute resources directly improve performance 
results drive design implementation bittyrant strategic bittorrent client provides median performance gain mbit client live internet swarms 
show applied universally strategic clients hurt average swarm performance compared today bittorrent client implementations 
fundamental problem peer peer systems tendency users free ride consume resources contributing system 
early peerto peer systems napster novelty factor sufficed draw plentiful participation peers 
subsequent peer peer systems recognized attempted address free riding problem fixes proved unsatisfactory incentive priorities kazaa spoofed currency cumbersome satellite model clients taken 
bittorrent popular file distribution tool swarming protocol proposed tit tat tft strategy aimed peers contribute resources system discouraging free riders 
tremendous success bittorrent suggests tft successful inducing contributions rational peers 
bilateral nature tft allows enforcement centralized trusted infrastructure 
consensus appears incentives build robustness bittorrent 
question widely held belief 
conduct large measurement study real bittorrent swarms understand diversity bit dept computer science engineering univ washington dept computer science univ massachusetts amherst torrent clients today realistic distributions peer upload capacities possible avenues strategic peer behavior popular clients 
measurements develop simple model bittorrent correlate upload download rates peers 
parametrize model measured distribution peer upload capacities discover presence significant altruism bittorrent peers regularly contributions system directly improve performance 
intrigued observation revisit question strategic peer game bittorrent significantly improve download performance level upload contribution 
primary contribution settle question affirmative 
insights gained model design implement bittyrant modified bittorrent client designed benefit strategic peers 
key idea carefully select peers contribution rates maximize download unit upload bandwidth 
strategic behavior bittyrant executed simply policy modifications existing clients change bittorrent protocol 
evaluate bittyrant performance real swarms establishing peers regardless upload capacity significantly improve download performance reducing upload contributions 
example client mb upload capacity receives median performance gain bittyrant 
bittyrant peers swarm affect performance 
find peers individually benefit bittyrant strategic behavior irrespective peers bittyrant 
peers bittyrant experience degraded performance due absence altruistic contributions 
taken results suggest incentives build robustness bittorrent 
robustness requires performance degrade peers attempt strategically manipulate system condition bittorrent meet today 
bittorrent peers ostensibly contributions improve performance show contribution unnecessary reallocated withheld improving performance strategic users 
average download times currently depend significant altruism high capacity peers withheld reduces performance users 
addition primary contribution bittyrant efforts measure model altruism bittorrent independently noteworthy 
modeling bit torrent seen large body see section model simpler suffices capture correlation upload download rates real swarms 
second existing studies recognizing altruism bittorrent consider small simulated settings swarms poorly capture diversity deployed bit torrent clients peer capacities churn network conditions 
evaluation comprehensive 
trace driven modeling drive design bittyrant evaluate popular real world swarms synthetic swarms planetlab 
bittyrant available publicly source code anonymized traces gathered largescale measurement study 
remainder organized follows 
section provides overview bittorrent protocol measurement data parametrize model 
section develops simple model illustrating sources extent altruism bittorrent 
section presents bittyrant modified bit torrent client strategic peers evaluate section 
section discuss related conclude section 
bittorrent overview section presents overview bittorrent protocol implementation parameters measurement data seed model 
protocol bittorrent focuses bulk data transfer 
users particular swarm interested obtaining file set files 
order initially connect swarm peers download metadata file called torrent content provider usually normal request 
metadata specifies name size file downloaded sha fingerprints data blocks typically kb comprise content downloaded 
fingerprints verify data integrity 
metadata file specifies address tracker server torrent coordinates interactions peers participating swarm 
peers contact tracker startup departure periodically download progresses usually frequency minutes 
tracker maintains list currently active peers delivers random subset clients request 
users possession complete file called seeds redistribute small blocks participants swarm 
peers exchange blocks control information set directly connected peers call local neighborhood 
set peers obtained cumulative distribution raw bandwidth capacity bittorrent peers equal split capacity distribution active set peers assuming clients implementation bittorrent 
tracker unstructured random requiring special join recovery operations new peers arrive existing peers depart 
control traffic required data exchange minimal peer transmits messages indicating data blocks currently possess messages signaling interest blocks peers 
refer set peers bittorrent client currently sending data active set 
bittorrent uses rate tft strategy determine peers include active set 
round peer sends data peers received data rapidly past 
strategy intended provide positive incentives contributing system inhibit free riding 
clients send data small number randomly chosen peers earned status 
peers said optimistically 
optimistic unchokes serve bootstrap new peers tft game facilitate discovery new potentially better sources data 
peers send data quickly earn reciprocation removed active set tft round said 
modulo tcp effects assuming hop bottleneck links peer provides equal share available upload capacity peers actively sending data 
refer rate peer equal split rate 
rate determined upload capacity particular peer size active set 
official implementation bittorrent active set size proportional upload capacity details appendix popular bittorrent clients size static 
measurement bittorrent behavior depends large number parameters topology bandwidth block size churn data availability number directly connected peers active tft transfers number optimistic unchokes 
furthermore parameters matter pol implementation percentage share azureus torrent unknown remaining table bittorrent implementation usage drawn measurement data 
icy unspecified bittorrent protocol 
policies may vary different client implementations defaults may overridden explicit user configuration 
gain understanding bittorrent behavior diversity implementations wild conducted measurement study live bit torrent swarms ascertain client characteristics 
making opportunistic measurement techniques gather empirical measurements bittorrent swarms hosts 
measurement client connected large number swarms waited optimistic unchoke unique peer 
estimated upload capacity client tool 
previous characterizations host capacities peer peer participants conducted saroiu 
update results capacity estimation tools 
observed unique bittorrent ip addresses hour period april distinct ases countries 
upload capacity distribution typical bittorrent peers distribution equal split rates arise peers bittorrent implementation limit upload rates 
modeling altruism bittorrent section examine questions relevant understanding incentives impact performance bit torrent altruism sources altruism 
question suggests improve performance second informs design 
answering questions real world swarms complicated diversity implementations myriad configuration parameters 
take restricted view develop model altruism arising observed capacity distribution default parameter settings implementation bittorrent 
assumptions simplify analysis provide conservative bound altruism 
assumptions realistic swarms modeling results intended predictive 
results simply suggest potential sources altruism reasons emerge bittorrent swarms today 
exploit sources altruism design real world strategic client discussed section 
representative distribution cdf shown bandwidth capacity observed ip addresses swarms 
distribution typical swarm may identical 
instance high capacity peers tend finish quickly low capacity peers may join swarms simultaneously 
join single swarm leave shortly completion relative proportion low capacity peers increase lifetime swarm 
uniform sizing peers modified client active set sizing recommended bittorrent implementation 
practice bittorrent implementations popular see table different active set sizes 
show aggressive active set sizes tend decrease altruism implementation uses aggressive strategy popular implementations inspected 
result model provides conservative estimate altruism 
steady state active sets comprised peers random draws upload capacity distribution 
churn low time tft may match peers similar equal split rates biasing active set draws 
argue section bittorrent slow reach steady state particularly high capacity peers 
high block availability swarm performance limited upload capacity peers able find interesting data download 
find bittorrent implementation designed ensure high availability interesting blocks practice static active set sizing clients may degrade block availability high capacity peers 
assumptions allow model altruism bit torrent terms upload capacity distribution 
model built expressions probability tft reciprocation expected download rate expected upload rate 
section focus main insights provided model 
precise expressions listed detail appendix 
tit tat matching time subsequent modeling results assume swarms reach steady state examine convergence properties tft strategy match peers similar capacity 
default bit torrent client optimistically unchokes peers seconds attempt explore local neighborhood better reciprocation pairings 
peers assuming peer set infinite size expected time required new peer discover peers equal greater equal split capacity fill active set 
performing exploration concurrently seconds peer expect explore candidate peers explored candidate peers 
know equal split capacity distribution express probability finding peer equal greater equal split capacity number second rounds 
expectation multiplying size active set gives estimate long new peer wait filling active set peers 
shows expected time observed bandwidth distribution 
results suggest tft implemented quickly find matches high capacity peers absence churn 
example peer kb upload capacity transfer gb data reaching steady state 
practice convergence time longer 
consider peer content matching equal split matched exceeded peer 
peers matching exact searching alternates switching discovered causing renew search 
long convergence time suggests potential source altruism high capacity clients forced peer low capacity searching better peers optimistic unchokes 
probability reciprocation node sends data peers active transfer set reevaluated seconds 
peer sends data rate fast merit inclusion active transfer set receive data tft round say reciprocation determined factors rate sends data rates peers send data peers current active set send rates greater reciprocate gives probability reciprocation terms reciprocation probability peer function raw upload capacity bittorrent equal split bandwidth 
reciprocation probability strictly increasing raw rate due sawtooth increase active set size see table appendix 
raw upload capacity significantly equal split rate 
sharp jump reciprocation probability suggests potential source altruism bittorrent equal split bandwidth allocation peers active set 
certain equal split rate kb reciprocation essentially assured suggesting contribution may altruistic 
expected download rate tft round peer receives data tft reciprocation optimistic unchokes 
reciprocation possible peers active set depends upload rate optimistic unchokes may received peer local neighborhood regardless upload rate 
bittorrent client number optimistic unchoke slots defaults rotated randomly 
peer unchokes peers round expected number optimistic unchokes receive fixed local neighborhood size 
gives expected download throughput peers function upload rate observed bandwidth distribution 
sub linear growth suggests significant unfairness bittorrent particularly high capacity peers 
unfairness improves performance majority low capacity peers suggesting high capacity peers may able better allocate upload capacity improve performance 
expected upload rate having considered download performance turn upload contribution 
factors control upload rate peer data availability capacity limit 
peer constrained data availability data interest local neighborhood saturate capacity 
case peer upload capacity wasted utilization suffers 
dependence upload utilization data availability crucial client downloads new data rate fast expectation download performance function upload capacity 
represents small portion spectrum observed bandwidth capacities samples capacity kb client redistribute downloaded data saturate upload capacity 
case bittorrent client square root growth rate active set size 
practice popular clients follow dynamic strategy active set size configurable static parameter 
instance popular bittorrent client traces azureus suggests default active set size appropriate cable dsl hosts far lower required high capacity peers 
explore impact active set sizing section 
modeling altruism upload download throughput tools required compute altruism 
consider definitions altruism intended reflect perspectives constitutes strategic behavior 
consider altruism simply difference expected upload rate download rate 
shows altruism percentage upload capacity definition reflects asymmetry upload contribution download rate discussed section 
second definition upload contribution withdrawn loss download performance 
shown 
contrast original definition suggests peers altruistic contributions eliminated 
sufficiently low bandwidth peers earn reciprocation high capacity peers send faster minimal rate required reciprocation 
effects exploited 
note low bandwidth peers despite reciprocated receive data aggregate faster send data 
receive indiscriminate optimistic unchokes users spite low upload capacity 
expected percentage upload capacity altruistic defined equation function rate 
sawtooth increase due sawtooth growth active set sizing equal split rates arising integer rounding see table 
expected percentage upload capacity altruistic defined upload capacity resulting direct reciprocation 
validation modeling results suggest part altruism bittorrent arises sub linear growth download throughput function upload rate 
validate key result measurement data 
time bittorrent client receives complete data block peer broadcasts message indicating redistribute block peers 
averaging rate messages duration measurement client observes peer infer peer download rate 
shows inferred download rate function equal split rate throughput seen measurement client optimistically 
data drawn measurements includes peers 
results indicate higher level altruism predicted model 
note equal split rate parameter conservative lower bound total upload capacity shown client sends data peers simultaneously 
instance peers contributing kb measurement client observed download rate kb model suggests contribution split multiple peers induce measured validation sub linear growth download throughput function rate 
point represents average taken peers measured equal split capacity intervals points 
download rate kb believe underestimate due conservative active set sizes practice assumed model 
building bittyrant strategic client modeling results section suggest altruism bittorrent serves kind progressive tax 
contribution increases performance improves direct proportion 
section describe design implementation bittyrant client optimized strategic users 
chose base bittyrant azureus client attempt foster adoption azureus popular client traces 
performance low capacity peers disproportionately high strategic user simply exploit unfairness masquerading low capacity clients improve performance 
flooding local neighborhood high capacity peers low capacity peers inflate chances tft reciprocation dominating active transfer set high capacity peer 
practice attacks mitigated common client option refuse multiple connections single ip address 
peers able coordinate multiple ip addresses attack capabilities users 
focus practical strategies employed typical users 
unfairness bittorrent noted previous studies include protocol intended promote fairness 
redesign bittorrent protocol ignores different important incentives question get users adopt 
shown section majority bit torrent users benefit unfairness today 
designs intended promote fairness globally expense majority users adopted 
focus redesign protocol level focus bittorrent robustness strategic behavior find improve performance isolation promoting fairness scale 
maximizing reciprocation modeling results section operational behavior bittorrent clients suggest strategies improve performance 
maximize reciprocation bandwidth connection things equal node improve performance finding peers reciprocate high bandwidth low offered rate dependent peers high capacity node 
reciprocation bandwidth peer dependent upload capacity active set size 
discovering peers large reciprocation bandwidth client optimize higher reciprocation bandwidth connection 
maximize number peers client expand active set maximize number peers reciprocate marginal benefit additional peer outweighed cost reduced reciprocation probability peers 
deviate equal split connection basis client lower upload contribution particular peer long peer continues reciprocate 
bandwidth savings reallocated new connections resulting increase reciprocation throughput 
modeling results indicate strategies effective 
largest source altruism model unnecessary contribution peers node active set 
reciprocation probability shown indicates strategically choosing equal split bandwidth reduce contribution significantly high capacity peers marginal reduction reciprocation probability 
peer equal split capacity kb instance reduce rate kb reduction expected probability reciprocation 
reducing kb kb result decrease roughly 
reciprocation behavior points performance trade 
active set size large equal split capacity reduced reducing reciprocation probability 
additional active set connection additional opportunity reciprocation 
maximize performance peer increase active set size additional connection cause reduction reciprocation connections sufficient reduce download performance 
equal split capacity distribution swarm known derive active set size maximizes expected download rate 
observed bandwidth distribution shows download rate function active set size peer kb upload capacity active set size maximizes 
graph implicitly reflects sensitivity recip left expected download performance client kb upload capacity increasing active set size 
right performance maximizing active set size peers varying rate 
strategic maximum linear upload capacity implementation bittorrent suggests active size rate 
peers may required maximize throughput trackers return fewer peers request 
probability equal split rate 
single strategic peer suggests strategic high capacity peers benefit manipulating active set size 
example peer upload capacity kb realizes maximum download throughput roughly kb increasing reciprocation probability active set sizing extremely sensitive throughput falls quickly maximum reached 
unclear active set sizing sufficient maximize reciprocation environment strategic clients 
challenges suggest priori active set sizing function may suffice maximize download rate strategic clients 
motivate dynamic algorithm bittyrant adaptively modifies size membership active set upload bandwidth allocated peer see 
bittorrent bittyrant set peers receive data tft round decided unchoke algorithm seconds 
bittyrant differs bittorrent dynamically sizes active set varies sending rate connection 
peer bittyrant maintains estimates upload rate required reciprocation download throughput dp received 
peers ranked ratio dp order sum terms peers exceeds upload capacity bittyrant peer 
rationale underlying unchoke algorithm best peers reciprocate number bytes contributed accurate information regarding dp 
implicit strategy assumptions characteristics strategy attempts maximize download rate upload budget 
ranking strategy corresponds value density heuristic knapsack problem 
practice download benefit dp upload cost known priori 
peer maintain estimates expected download performance dp upload required reciprocation 
initialize dp assuming bandwidth distribution 
dp initially expected equal split capacity initially rate just step reciprocation probability 
round rank order peers ratio dp unchoke top rank upload capacity reached 

choose cap round peer peer unchoke peer unchokes dp observed rate 
peer rounds bittyrant unchoke algorithm date operation dynamically estimates rates conjunction ranking strategy optimizes download rate time 
bittyrant designed tap latent altruism swarms unchoking altruistic peers 
continue unchoke peers exhausts upload capacity marginal utility sub linear 
potentially opens bittyrant cheated topic return 
strategy easily generalized handle concurrent downloads multiple swarms 
client optimize aggregate download rate ordering dp ratios connections swarms dynamically allocating upload capacity peers 
user defined priorities implemented scaling weights dp ratios 
algorithm ideal assumption peer capacities reciprocation requirements known 
discuss predict 
determining upload contributions bittyrant unchoke algorithm estimate upload contribution induces reciprocation 
initialize distribution equal split capacities seen measurements periodically update depending offered rate 
implementation decreased peer rounds increased peer fails reciprocate previous round 
small multiplicative factors spread equal split capacities typically small current swarms 
natural choice binary search algorithm maintains upper lower bounds upload contributions induce reciprocation peer reciprocation changes rapidly churn bounds reciprocation inducing uploads eventually violated 
estimating reciprocation bandwidths peers unchoke bittyrant client dp simply rate data obtained note packet pair bandwidth estimation technique suggested bharambe consider average download rate tft round 
measurements due space limitations find packet pair bandwidth estimates accurately predict peers equal split capacities due variability active set sizes host traffic shaping 
observed rate longer period accurate estimate sentiment shared cohen 
course estimate available peers uploaded data bittyrant client 
cases bittyrant approximates dp peer measuring frequency block announcements rate new blocks arrive provides estimate download rate estimate total upload capacity 
divide estimated capacity azureus recommended active set size rate estimate equal split rate 
strategy overestimate upload capacities unobserved peers serving encourage selection ranking dp ratios 
preference exploration may advantageous due high skew altruism 
discovering high peers rewarding th th percentiles reciprocation throughput doubles 
course strategy may open bittyrant exploitation peer rapidly announces false blocks 
discuss bittyrant robust sections 
sizing local neighborhood existing bittorrent clients maintain pool typically directly connected peers 
set sized large provide diverse set data peers exchange blocks data availability constraints 
modeling results section suggest typical local neighborhood sizes large maximize performance high capacity peers may need active set size peers maximize download throughput 
maintaining larger local neighborhood increases number optimistic unchokes received 
increase local neighborhood size bittyrant rely existing bittorrent protocol mechanisms third party extensions implemented azureus 
request peers possible centralized tracker maximum allowed frequency 
bittorrent protocol incorporated dht distributed tracker provides peer information indexed hash torrent 
increased query rate 
azureus implementation includes bittorrent protocol extension gossip peers 
unfortunately protocol extension push allows client gossip peers identity peers induce peers gossip return 
result exploit gossip mechanism extract extra peers 
concern increasing size local neighborhood corresponding increase protocol overhead 
peers need exchange block availability information messages indicating interest blocks peer lists 
fortunately overhead imposed maintaining additional connections modest 
comparisons bit existing azureus client described section find average protocol overhead percentage total file data received increases 
suggests scaling local neighborhood size impose significant overhead bittyrant 
additional cheating strategies discuss strategies improve download performance 
implement bittyrant thwarted simple fixes clients 
mention completeness 
exploiting optimistic unchokes bit torrent client optimistically unchokes peers randomly 
azureus hand weighted random choice takes account number bytes exchanged peer 
peer built deficit number traded bytes picked optimistic unchokes 
bittorrent today observe high capacity peers trading deficits peers 
cheating client exploit disconnecting different client identifier past history increasing chances receiving optimistic unchokes particularly high capacity peers 
exploit ineffective clients maintain ip addresses peers encountered download keep peer statistics disconnections 
downloading seeds early versions bittorrent clients seeding algorithm seeds upload peers fastest downloaders algorithm prone exploitation fast peers clients falsify download rate emitting messages 
versions seeding algorithm performs unchokes randomly spreading data uniform manner robust manipulation 
falsifying block availability client prefer unchoke peers blocks needs 
peers appear attractive falsifying block announcements increase chances 
practice exploit effective 
client consider peers interesting large number blocks typical swarm 
second false announcements lead short term benefit client continue transferring cheating peer satisfy issued block requests 
evaluation evaluate bittyrant explore performance improvement possible single strategic peer synthetic current real world swarms behavior bittyrant participants synthetic swarms 
evaluating altruism bittorrent experimentally scale challenging 
traditional wide area testbeds planetlab exhibit highly skewed bandwidth distribution observe measurements crucial factor determining amount altruism 
alternatively fully configurable local network testbeds emulab limited scale incorporate myriad performance events typical operation wide area 
bittorrent implementations diverse shown table 
address issues perform separate evaluations 
evaluate bittyrant real swarms drawn popular aggregation sites measure real world performance single strategic client 
provides concrete measure performance gains user achieve today 
provide insight bit functions revisit results planet lab evaluate sensitivity various upload rates cdf download performance real world swarms 
shown ratio download times existing azureus client bittyrant 
clients started simultaneously machines uw capped kb upload capacity 
evaluate happen bittyrant universally deployed 
single strategic peer evaluate performance full diversity realistic conditions crawled popular bittorrent aggregation websites find candidate swarms 
ranked popularity terms number active participants ignoring swarms distributing files larger gb 
resulting swarms typically released files sizes ranging peers swarms having peers 
simultaneously joined swarm bit client unmodified azureus client recommended default settings 
imposed kb upload capacity limit client compared completion times 
represents relatively provisioned peer azureus recommended active set size 
cdf ratio original client completion time bittyrant completion time 
results demonstrate significant real world performance boost users realize behaving strategically 
median performance gain bittyrant factor downloads finishing twice fast bittyrant 
expect relative performance gains greater clients greater upload capacity 
results provide insight performance properties real bittorrent swarms limit bittyrant effectiveness 
random set peers bittorrent trackers return high skew real world equal split capacities bittyrant improve performance 
instance bittyrant worst performing swarm peers average equal split capacities greater kb contrast unmodified client received peers 
total download time roughly minutes typical minimum request interval peers tracker 
re download times sample standard deviation comparing performance single bittyrant client unmodified azureus client synthetic planet lab swarm 
sult bittyrant recover initial set comparatively poor peers 
extent performance luck respect set initial peers returned 
bittyrant benefits requests comparatively large set peers tracker 
circumstance bittyrant significantly improve performance swarm aggregate performance controlled data availability upload capacity distribution 
wild swarms number peers seeding file complete copy 
capacity peers low torrent available may simply available data peers saturate upload capacities 
words seed kb capacity providing data swarm newly joined users peers able download rate kb regardless capacity 
swarms joined effect may account swarms download performance differed 
scenarios hinder performance bit account small percentage observed swarms 
real swarms today users realize significant performance benefits strategic behavior bittyrant 
performance improvements gained bittyrant real world encouraging provide little insight operation system scale 
evaluate bittyrant synthetic scenarios planetlab shed light interplay swarm properties strategic behavior performance 
planetlab exhibit highly skewed bandwidth distribution observed traces rely application level bandwidth caps artificially constrain bandwidth capacity planetlab nodes accordance observed distribution 
planetlab shares bandwidth equally competing experiments nodes capable matching highest values observed distribution 
cope scaled th upload capacity draws distribution relevant experimental parameters file size initial unchoke bandwidth block size 
sufficient provide fidelity intended distribution 
shows download performance single bittyrant client function rate averaged trials sample standard deviation 
experiment hosted planetlab nodes bandwidth capacities drawn scaled distribution 
seeds combined capacity kb located uw serving mb file 
change default seeding behavior varying combined seed capacity little impact swarm performance exceeding average upload capacity limit 
provide synthetic churn constant capacity node bit client disconnected immediately completion reconnected immediately 
results provide insights operation bittyrant 
bittyrant simply improve performance provides consistent performance multiple trials 
dynamically sizing active set preferentially selecting peers optimistically unchoke bittyrant avoids randomization existing tft implementations causes slow convergence high capacity peers section 
point diminishing returns high capacity peers bittyrant discover 
clients high capacity number peers available bandwidth distribution significant factors determining performance 
modeling results section suggest highest capacity peers may require available peers fully maximize throughput due reciprocation 
real world swarms rarely large 
circumstances bittyrant performance consistent allowing peers detect reallocate excess capacity uses 
low capacity peers benefit bittyrant 
significant performance benefit comes intelligently sizing active set high capacity peers see low capacity peers improve performance strategic peer selection providing incentive adopt bittyrant 
fidelity specified capacity distribution consistent multiple trials 
comparability experiments concern planetlab results suggest minimum download time determined capacity distribution consistent trials spanning hours 
consistent performance bittyrant comparison unmodi fied azureus suggests variability observed due policy strategy differences planet lab variability 
bittyrant peers users individual incentive strategic current swarms examine performance bittyrant peers swarm 
consider types bittyrant peers strategic selfish 
peer uses bittyrant unchoking algorithm strategic 
peer contributing excess capacity improve performance say strategic selfish 
bit operate mode 
selfish behavior may arise users participate multiple swarms discussed simply users want upload capacity services bittorrent 
examine performance peers strategic bittyrant contributing excess capacity 
experimental setup included planetlab nodes upload capacities drawn scaled distribution simultaneously joining swarm distributing mb file combined seed capacity kb peers departed immediately download completion 
initially expected performance degrade high capacity peers finish quickly leave reducing capacity system 
surprisingly performance improved altruism increased 
results summarized cdfs completion times comparing bittyrant unmodified azureus client 
results consistent model 
swarm upload capacity distribution significant skew high capacity peers require connections maximize reciprocation 
bittyrant reduces bootstrapping time results high capacity peers having higher utilization earlier increasing swarm capacity 
bittyrant improve performance improvement due effective altruistic contribution 
bittyrant detect point diminishing returns performance contributions withheld reallocated selfish clients 
users may choose reallocate capacity services bittorrent swarms peers participate swarms simultaneously 
popular bittorrent implementations support downloading multiple swarms simultaneously attempt intelligently allocate bandwidth 
typically allocate amount global upload capacity swarm individually split equally peers statically sized active sets 
existing implementations accurately detect bandwidth allocated swarm reallocated improve performance 
contrast bittyrant unchoking algorithm transitions naturally single multiple swarms 
allocate bandwidth swarms existing clients bittyrant allocates bandwidth connections optimizing aggregate download throughput connections swarms 
allows high capacity bittyrant clients effectively participate swarms simultaneously lowering swarm performance low capacity peers 
model effect selfish bittyrant users repeated planetlab experiment upload capacity high capacity peers capped kb point diminishing returns observed 
cdf performance capped distribution shown 
expected aggregate performance decreases 
interesting stable rate diminishing returns bittyrant identifies 
result skewed bandwidth distribution certain point peers contribute significantly data see significantly faster download rates 
peers reallocate altruistic contribution aggregate capacity average performance reduced particularly low capacity peers 
reflected comparing performance single clients scaled distribution single client performance scaled distribution constrained 
average completion time low capacity peer moves seconds 
average completion time peer kb upload capacity increases seconds 
bittyrant improve performance single swarm circumstances causes performance degrade 
high capacity peers participate swarms limit altruism total capacity swarm decreases 
reduction capacity download times users single swarm regardless contribution 
high capacity peers see increase aggregate download rate swarms low capacity peers successfully compete multiple swarms simultaneously see large reduction download rates 
individual peer incentive strategic performance improves relative standard clients strategic selfish 
new users experience lengthy bootstrapping period 
maximize throughput bittyrant unchokes peers send fast 
new users data bootstrapped excess capacity system 
bootstrapping time may reduced optimistic unchokes clear selfish peers incentive 
peering relationships stable 
bittyrant designed exploit significant altruism exists left cdfs completion times node planetlab experiment 
bittyrant original unmodified client assume users contribute capacity 
capped bittyrant shows performance high capacity selfish peers limit contribution point diminishing returns performance 
right impact selfish bittyrant caps performance 
download times bandwidth levels increase cf 
high capacity peers gain little increased contribution 
error bars give sample standard deviation trials 
bittorrent swarms today 
continually reduces send rates peers reciprocate attempting find minimum rate required 
attempting ramp send rates high capacity peers bittyrant tends spread available capacity low capacity peers potentially causing inefficiency due tcp effects 
effect bittyrant advertises connection time peer id hash 
protocol modification bittyrant peers recognize switch block tft strategy ramps send rates capacity reached 
bittyrant clients bittyrant peers block request rates exceeds send rates 
gradually increasing send request rates bittyrant clients fairness preserved maximizing reciprocation rate fewer connections 
way bittyrant provides deployment path leading conceptually simple strategy block tft providing short term incentive adoption users stand lose shift block reciprocation 
claim bittyrant strategyproof extended block tft leave open question effective 
switch block tft mutually agreeing peers place hard limit altruism limit range possible strategies 
related modeling analysis bittorrent current incentive mechanism effect performance seen large body cohen seminal 
effort differs existing fundamental ways 
refute popular wisdom bittorrent incentive mechanism robust strategic peer behavior 
second methodology existing studies consider small simulated settings poorly capture diversity deployed bit torrent clients strategic peer behavior peer capacities network conditions 
contrast explore bittorrent strategy space implementation strategic client evaluate analytical modeling experiments realistic network conditions testing wild 
canonical tft strategy evaluated axelrod showed competition strategy performs better submissions repeated games persistent identities collusion 
qiu srikant specifically study bit torrent rate tft strategy 
show peers strategically limit upload bandwidth split equally trying maximize download bandwidth distributions system converges nash equilibrium peers upload capacity 
results lead believe bit torrent incentive mechanism robust users contribute entire upload capacities 
unfortunately shows bittorrent fails attain equilibrium typical file sizes swarms realistic bandwidth distributions churn bit exploits strategic peer rate selection 
bharambe simulate bittorrent synthetically generated distribution peer upload capacities 
show presence significant altruism bittorrent propose alternate peer selection algorithms matching peers similar bandwidth ii enforcing tft block level strategy proposed 
fan propose strategies assigning rates connections adopted members swarm lead fairness minimal altruism 
robustness mechanisms strategic peer behavior unclear 
importantly proposals appear lack convincing evolution path peer adopting strategies day severely hurt download throughput majority deployed conformant clients find peer unattractive 
contrast demonstrate bit drastically reduce altruism improving performance single strategic client today adoption 
identify forms strategic manipulation sybil attacks third uploading garbage data 
propose downloading seeds identify exploit uploading garbage data 
investigate similar techniques ignoring rate limits tracker requests increase number available peers connecting peers possible 
exist straightforward fixes minimize impact byzantine behavior 
third exploit involves downloading fastest peers strategy take account upload contribution required induce reciprocation 
contrast bittyrant maximizes download unit upload bandwidth drastically reduce upload contribution varying active set size sharing upload bandwidth uniformly active peers 
argue bittorrent robustness due tft mechanism due human sociological factors cause swarms high concentration altruistic peers preserved selfish ones 
claim releasing selfish clients wild may degrade performance due underlying natural selection 
validating hypothesis requires building releasing strategic selfish client contributions 
massoulie model bittorrent coupon replication system particular focus efficiently locating coupons 
altruism necessary bittorrent efficient 
study account strategic behavior part peers 
studies pointed presence significant altruism bittorrent suggest preserving 
contrast show altruism consequence bittorrent incentive mechanism fact easily circumvented strategic client 
revisited issue incentive compatibility bittorrent arrived surprising tft discourages free riding bulk bittorrent performance little tft 
dominant performance effect practice altruistic contribution part small minority high capacity peers 
importantly altruism consequence tft selfish peers modest resources significantly reduce contribution improve download performance 
bittorrent works today simply people client software trying cheat system 
shown selfishness hurt swarm performance practice remains unclear 
public release bittyrant provides test 
users continue donate excess bandwidth ensuring maximum yield bandwidth 
users behave causing shift completely different design centrally enforced incentives 
strategic behavior induce low bandwidth users invest higher bandwidth connections compensate worse performance yielding better swarm performance long run 
time tell 
uncertainties leave open question incentives build robustness bittorrent 
bittyrant source code distribution publicly available bittyrant cs washington edu acknowledgments shepherd li anonymous reviewers comments 
supported nsf cns arcs foundation 
axelrod 
evolution cooperation 
basic books 
bharambe padmanabhan 
analyzing improving bittorrent network performance mechanisms 
proc 
infocom 
cohen 
incentives build robustness bittorrent 
proc 
iptps 
douceur 
sybil attack 
proc 
iptps 
fan 
chiu liu 
delicate tradeoffs bittorrent file sharing protocol design 
proc 
icnp 
gnu scientific library 
www gnu org software 
guo chen xiao tan ding zhang 
measurements analysis modeling bittorrent systems 
proc 
imc 

cheat bittorrent 
technical report ublcs computer science university bologna 
jun ahamad 
incentives bittorrent induce free riding 
proc 

blake kohler strauss 
automated detection multiple bottleneck capacities path 
proc 
imc 
keller michiardi 
rarest algorithms 
proc 
imc 
nelson kohler zhang 
exploiting bittorrent fun profit 
proc 
iptps 
label definition meaning number simultaneous optimistic unchokes peer local neighborhood size directly connected peers dr probability upload capacity rate cumulative probability upload capacity rate active size peers active transfer set upload capacity rate split active connection upload capacity upload capacity rate probability equal split rate active sizing dr cumulative probability equal split rate table functions model default settings official bittorrent client 
moor schmid wattenhofer 
free riding bittorrent cheap 
proc 
hotnets 
dixon anderson krishnamurthy 
information plane distributed services 
proc 
osdi 

coupon replication systems 
sigmetrics perform 
eval 
rev 
morris 
tcp behavior flows 
proc 
icnp 
qiu srikant 
modeling performance analysis bittorrent peer peer networks 
proc 
sigcomm 
saroiu gummadi gribble 
measurement study peer peer file sharing systems 
proc 
multimedia computing networking 
parkes 
faithfulness internet algorithms 
proc 
pins 
modeling notes numerical evaluation performed numerics package 
refer section assumptions table definitions 
upload download probability reciprocation peer upload capacity rp rq recip rp rq rp active rq expected reciprocation probability capacity recip recip dx expected download upload rate capacity active recip split dx split dx min active altruism altruism defined difference upload contribution download reward altruism gap max altruism connection defined upload contribution resulting direct reciprocation 
altruism conn recip split recip max split split dx total altruism resulting direct reciprocation 
altruism active altruism conn convergence probability peer rate discovering matched tft peer iterations time populate active set matched peers upload capacity note split period optimistic unchokes switched 
convergence time active unchoke probability distribution number op unchokes binomial success probability overhead low active bittyrant approximate active 
expected number optimistic unchokes round 
unchokes unchokes 
