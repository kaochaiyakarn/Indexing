search program generator implement generic transformations high performance computing albert cohen maria jesus christoph herrmann david padua group inria orsay france dcs university illinois urbana champaign fmi university passau germany quality compiler optimized code high performance applications lags way optimization domain experts achieve hand 
explores solutions fully automatic fully manual code optimization 
discusses generative approaches help design optimization supercomputing applications 
outlines early results research directions metaocaml design generative tool box design portable optimized code 
identify limitations metaocaml system 
advocate approach bring high level safe metaprogramming imperative languages 

motivation high performance computing turning mature domain 
architecture designs programming languages compilation optimization techniques lately evolutionary 
programmers high performance applications complain lack efficiency machines ratio sustained peak performance poor performance optimizing parallelizing compiler 
path research prototypes production quality optimizers difficult expected advanced loop nest interprocedural optimizations performed manually application programmers 
main reasons driving selecting profitable optimizations difficult due complexity dynamic behavior modern processors domain specific knowledge unavailable compiler required prove optimizations legality profitability hard drive transformations available compilers including transformations profitability difficult assess risk degrading performance high speculative optimizations complex loop transformations compose due syntactical constraints code size increase optimizations fact algorithm replacements selection appropriate code may depend architecture input data 
manual optimizations degrade portability performance fortran code platform preclude performance different architectures speaking low level machine specific extensions 
works successfully addressed issue improving compiler design application specific program generators active libraries 
generators rely feedback directed optimization select best generation strategy exclusively 
popular examples atlas dense matrix operations fftw fast fourier transform 
generators follow iterative optimization scheme depicted case atlas external control loop generates multiple versions optimized code varying optimization parameters empirical search engine drives search best combination parameters 
program transformations applied generators previously proposed classical compiler frameworks existing compilers fail apply abovementioned reasons 
conversely optimizations involve domain specific knowledge specialization interprocedural optimization library functions application specific optimizations algorithm selection 
spiral project investigated domain specific extension program generators operating domain specific language digital signal processing formulas 
project step forward bridge gap application specific generators generic compiler approaches improve portability application performance 
driver selects best value feedback matrix product template atlas driver execute generate compile optimization optimization empirical search atlas optimization context iterative compiler optimization gaining interest capability drive complex transformations 
uses feedback real executions optimized program explore optimization search space operations research algorithms machine learning empirical experience 
theory iterative optimization applied domain specific user defined transformations framework describing transformations available application programmers 
goals telescoping languages compiler approach reduce overhead calling generic library functions enable aggressive interprocedural optimizations lifting semantical information libraries compiler 
libraries multiple alternative ideas proposed domain specific optimizations 
works highlight increased need researchers developers field high performance computing metaprogram optimizations portable fashion 
multistage language metaprogramming world popular optimizations partial evaluation specialization simplification 
transformations useful supercomputing applications far sufficient 
matter fact research generative programming multistage evaluation greatly influenced design high performance applications compilers abovementioned projects ad hoc program generators 
discusses important issues raised application generative approaches high performance computing 
outlines research directions early results metaocaml design generative tool box design portable optimized code 
context explore static type checking restricts expressiveness multistage evaluation 
heterogeneous multistage approach safe metaprogramming imperative languages 

generative strategies loop transformations main program transformations high performance target regular loop oriented computations arrays 
transformations defined imperative intraprocedural setting 
interprocedural program analyses integrated modern compilers advanced interprocedural optimizations proposed 
advanced optimizations fail applied compiler implemented important optimizations require domain specific knowledge important hidden information libraries input data structure 
compiler perspective means improve situation programmer way teach compiler new analyses optimizations drive possibly apply overriding static analysis programmer implements generator class programs produce optimized code automatically 
multistage evaluation primarily supporting second direction survey typical transformations revisited multistage setting 
close active library provides multistage evaluation loop transformation support adaptive optimization high performance codes numerical image processing particular 
share similar goals impose additional constraint metaprogramming may occur program generation aim purely generative approach code produced multistage evaluation brackets escape run approach implements loop transformations high level transformations code representation 
consequence library embeds full restructuring compiler generator require back code generation 
addition allowing code transformations metaprogram opens door unpredictable failures apply optimizations due pattern mismatches syntactic limitations 
happen representation ir 
avoiding unpredictability major reason programmer choose generate optimized code relying external compiler stick purely generative framework 
rec full unroll lb ub body lb ub 
lb ub body lb 
body lb full unroll lb ub body 
val full unroll int int int code unit code unit code fun array body fun 
full unroll body 
full unrolling primitive transformations consider simple example loop unrolling 
partial loop unrolling decomposed bound stride recomputation step body duplication step 
second step called full unrolling straightforward application multistage evaluation 
code recursive multistage implementation full loop unrolling body function single argument value loop counter loop unrolled lb ub loop bounds 
enable substitution arbitrary expression notice code expression plain integer 
quite simple implementing transformation important caveats 

free variables code expressions utterly important code versioning specialization example 
metaocaml free variables eventually bound function arguments 
partial application handles practical cases generation steps multiple specializations needed 

arguments full unroll return value different nature 
easy compose generation function transformation steps subsequent transformations leave duplicated loop bodies invariant 
vertical bars left delimit values returned toplevel 
second issue major difficulty transformation composition key practical optimization strategies high performance 
achieve partial unrolling convert original loop bounds adjusted bounds strided interval call full unroll perform actual body duplication see 
partial unroll lb ub factor body number ub lb factor bound number factor ii number full unroll factor fun body ii factor lb done bound lb ub body 
done 
val partial unroll int int int int code unit code unit code fun body fun 
partial unroll body ii ii ii ii ii ii ii ii ii done done 
partial unrolling supercomputing context simple example function inlining advocates multistage evaluation 
inlining unrolling cause serious compilation problems today choosing 
complex transformations experiment realistic example reimplemented part atlas code generator matrix matrix product 
pseudo code generator nb tile size mu unroll factors scalar promoted block latency number iterations pipelined multiplications additions inner products hold automatically generated names large collection scalar variables inner loops fully unrolled operate scalar variables 
addition loop unrolling main transformations involved 
loop tiling 
outer loops matrix product rescheduled compute blocked product better cache locality 
transformation usually seen composition strip mining making nested loops loop interchange 
transformations multistage evaluation 
possible implement bound stride operations loop generation strip mining way executed generator mu nu done done template generated code ii step nb jj step nb ii ii nb nu step nu jj jj nb mu step mu fully unrolled loops mu nu done done nb fully unrolled loops mu done nu done latency done mu nu latency latency done mu nu latency mu nu done done fully unrolled loops mu nu done done done postlude 
done postlude 
done postlude 
done postlude 
simplified matrix product template partial unrolling compose loop interchange code expression level 
write ad hoc generator tiled template matrix product 
get benefits metaocaml strings syntax tree atlas enable code reuse applications loop tiling loop nests 
scalar promotion 
second tiling step innermost loops fully unrolled called unroll jam array accesses large resulting blocks promoted scalars enable register reuse transformation called register tiling 
transformation definitely fit generative framework falls back straightforward code substitution 
may explicitely craft new variable names metaocaml identifiers fun bindings class citizens name valid syntax 
approaches may followed 
method assumes dynamic single assignment arrays 
arrays replaced fresh scalar variables names automatically generated metaocaml system proposed monadic continuation passing style 
interested reader refer details 
approach advantage directly generating efficient scalar code unboxed cons programming monads explicit continuations unnatural style programmers high performance numerical applications 
studied approach assume array accessed single assignment manner individual array element may multiple times 
natural solution code expressions scalar type splicing appropriate code expression place original accesses array scalar promoted 
solution leads efficient code ocaml compiler scalar 
approach developed 
solutions perfectly satisfactory investigate approach safe generation code metaocaml help 
instruction scheduling 
better hide memory floating point operation latencies instructions innermost loops rescheduled loop body possibly delayed advanced iterations 
instruction scheduling software pipelining may immediately cases generative languages fits typical scheduling strategy instructions extracted priority list generated order 
possible write generic list scheduling algorithm dependence graph code expressions extend modulo scheduling 
important issue code readability debugging 
static checking great tool developing robust metaprograms writing generative template tiled unrolled scalar promoted pipelined matrix matrix product trial error game 
mixing functions code expressions escapes partial application code hard follow especially supercomputing experts 
investigate interprocedural optimizations classical applications generative languages specialization cloning inlining complex transformations may combine loop function transformations 
believe addressing issues raised atlas contribute support transformations 
study legality code transformations 
issue course important critical stand compiler decision considering program transformation fully automatic 
check array scalar dependences evaluate global impact optimization improves effects scheduling heuristic backend compiler 
data layout transformations ocaml type system insufficient 
coupling multistage generator static analysis framework interesting research direction 
prototyping scalar promotion section meta programming facilities caml express computation expensive kernel program style array accesses replaced single variables 
expect advanced native code compiler metaocaml processor registers variables 
names variables constructed internally metaocaml system version accessed list code expressions indices original array 
combinators takes length array turned collection variables function maps list variables piece code 
list taken environment 
refer variables indexing list names printed metaocaml system run time 
creates loop environment loops stride greater ocaml 
takes lower bound upper bound stride function abstracts loop body iteration variable 
arguments code parts depend dynamic values 
expresses loops stride fully unrolled program 
takes static lower upper bound function loop body maps static index code part loop body 
shows scalar promoted loop program matrix multiplication body loop nest 
static arguments unrolling software pipeline latency 
dynamic arguments listed lambda abstraction inside code part nested innermost environment applications 
arrays apply combinator define functions aa bb tt cc translate access array access appropriate register 
loop nest body depicted 
consists parts 
part values result array loaded register set accessed cc 
second part updates values registers 
third part values stored back array 
second part consists dynamic loop body consists sequences statements expressed terms combinator 
elements loaded registers 
temporary register set accessed filled initial products expresses pipelining effect concurrently involved multiplication addition products computed flushed adding pending values register set accessed cc 
composition transformations matmult mu nu latency array mu nu array mu nu ref mu nu done done mu fun aa nth nu fun bb nth mu nu fun tt nth nu mu nu fun cc nth nu fun nn mm nb 
nn 
nb 
fun ii 
mm 
nb 
fun jj ii 
ii nb nu 
nu 
fun jj 
jj nb mu 
mu 
fun loop nest body 
scalar promotion loop template mu fun nu fun cc nb mu fun aa nu fun bb latency fun tt aa bb mu nu latency fun latency cc cc tt tt aa bb mu nu latency mu nu fun cc cc tt done mu fun nu fun cc 
scalar promotion loop body describes real optimization sequence spec cpu fp benchmark borrowed 
sequence transformations program region complex loop nest manually applied optimization methodology feedback directed optimization 
experimental platform hp alphaserver es ghz alpha ev mb cache 
analysis transformation phase depicted gray box showing time difference executing full benchmark seconds negative number performance improvement base execution time benchmark sequence particularly complex representative real optimizations performed rare compilers programmers 
composi tionality example shows important extensibility provisions implementing new transformations debugging support static generation time dynamic 
shows practical example classical loop transformations convert simple loop nests code fragment partially shown loop interchange double loop fusion software pipelining shifting 
multistage evaluation may clearly help programmer write template code lifting parameters generation phases automatically customize code target architecture 
unfortunately template feature code reuse loop optimizations 
original nests 
done done done done loop transformations 
mn min mn mn done mn mn mn mn mn mn mn mn mn done mn mn mn mn mn mn mn mn done mn 
composition polyhedral transformations previous study clear lack reusability limits applicability multistage evaluation implementing advanced program transformations 
successful generative approaches enable application programmers implement generator single program 
practice code reuse portability achieved intermediate representation higher order skeletons see expressive domain specific languages see survey consel 
code expressions constrained terms reusability code expressions produced program generator may evolve predefined set arguments function predefined escape points expression shown loop unrolling example 
code fragment code expression invariant generation steps 
result optimizations built sequences simpler transformations implemented composition generators 
study limitation loop unrolling 
partial loop unrolling decomposed strip mining full unrolling inner strip mined loop may implement strip mine generator shown hoping composition mechanism allow define partial unrolling strip mine full unroll 
unfortunately smoothly full unroll operate closed code expression pair integer arguments bounds function code expressions body 
strip mine lb ub factor body number ub lb factor ii number factor body ii factor lb 
done done number factor lb ub body 
done 
val strip mine int int int int code code unit code fun body fun 
strip mine body ii ii ii done done done 
strip mining obvious similarities mine partial unroll aside recursive implementation full unroll partial unrolling lifted version strip mining code expression extended loop body inner loop 
similarities possible reuse code factoring common template mine unroll 
purpose generalized strip mining generator 
kindly provided reviewers original submitted ik ii ee ik ii ee optimizing base new strip mine generator easy implement plain strip mining partial unrolling composition see 
composition works code reuse opportunities overcome fundamental asymmetry structured arguments generator functions code expressions produce 
strip mine lb ub factor body number ub lb factor ii number factor fun body ii factor lb done number factor lb ub body 
done 
loop gen lw ub body lw ub body 
done 
plain strip mining strip mine loop gen body partial unrolling strip mine full unroll body factoring strip mining unrolling course obvious enable compositional approach generators suitable intermediate representation 
difference thin compared implementing transformations compiler framework 
may expect benefits static checking view invariant code parts seen polymorphic code expressions 
example building intermediate representation loop transformations easy invariant pieces code represented code expressions rest captured trees loop triplets 
carrying preliminary experiments believe compositional approach multistage evaluation intermediate representations followed application programmers 
effort master language may worth additional safety abstraction 
addition complexity variety program transformations high performance computing classical development errors avoided approach loop bounds initialization inconsistencies 
section illustrate better compositionality needed bring code reuse practical application generative techniques design optimization supercomputing applications 

alternative ideas polytope model proposed represent loop nests loop transformations unified fashion 
constrained regularity assumptions control structures applicable loop nests scientific applications captures loop specific information systems affine inequalities 
advances polyhedral code generation new approach enable compositional transformations framework fit search generative compositional optimization framework 
fortunately exists powerful ocaml interface effective libraries operate polyhedra 
multistage evaluation easy efficient design polyhedral code generator couple lowerlevel back optimizations including scalar promotion instruction scheduling 
ocaml language facilitate implementation symbolic legality checking profitability analyses involved polyhedral techniques 
polytope model alternative ways achieve better compositionality may incur re escaping mechanism perform substitutions closed code expressions 
may take form extension ocaml pattern matching construct operating elements ocaml grammar 
extension compromise static checking properties caml long type invariant substitutions performed subtyping specialization possible 
unfortunately mechanism help overcoming incompatibility static checking multistage generation new variable names required scalar promotion see las template 
course ability post process generated code substitution powerful tool major infringement metaocaml design 
transformations operating level polyhedral undoubtedly elegant general purpose transformation framework emerge anytime soon 
allowing user control generated code pragmatic solution consider 

safe metaprogramming exist stage evaluation extensions language standard preprocessor template metaprogramming project fast runtime code generation framework 
tools provide higher order functions code expressions partial application cross stage persistence static checking features caml 
possible design multistage extension features probably strong restrictions language constructs allowed higher stages longstanding effort 
addition ocaml language choice develop language processors 
heterogeneous approach pragmatic research demonstrator metaocaml generator programs may involve ocaml translator benefit imperative features ocaml ease generation efficient code may design small preprocessor embed code fragments lower stages metaocaml program relying code generation primitives assemble fragments 
advocate second direction avoids transforming generated code generative programming guidelines provides full expressiveness hidden overhead 
rest section outlines interesting issues presents simple solutions extension caml describe realistic implementation aim fully safe code generation 
safe generation code ocaml goal design set code generation primitives ocaml program calling primitives may generate syntactically sound type safe code 
aware attempt achieve goal 
course generation primitives natural design preprocessor converting embedded syntax proper ocaml declarations calls 
current solution partially achieves goal imperfectly handles function declarations calls 
practically mirror grammar productions polymorphic generator functions operating specific polyvariant types represent meaningful fragments 
variable embedded ocaml pair string name dummy value matching type variable variables declared explicit usage ocaml variables 
shows main types generation primitives intraprocedural constructs shows code generation example 
design grammar productions guarantee syntax correctness 
challenging deal scope variable declarations enforcing type safety 
choose represent block placeholder variable declarations function environment 
interestingly environments record code generated serve delay evaluation generation primitives production surrounding block syntax 
continuation passing style key embedding scoping typing rules ocaml ones 
example integer variable simultaneously declared ocaml generated code evaluating gen int decl env 
generated code appended environment env 
assignments callgen assign directly read turn lvalue function 
generating new names scheme easy support generation new names explicit usage monads continuation passing style avoiding possible overhead solution proposed section 
shows class operate arrays generation time array bound checking 
course checking done statically general specific cases handled proper encoding ocaml type system scalar promoting array bound accesses yields bound exceptions 
example scalar promoted array simultaneously declared type environment mutable txt string text produced mutable cnt int private counter alpha renaming ind string pretty printing indentation syntactic elements type rvalue rvalue string type lvalue lvalue string type loop rvalue bool rvalue rvalue environment unit get nam var match var lvalue get def var match var lvalue get txt exp match exp rvalue get val exp match exp rvalue get init var match var get cond var match var get iter var match var get body var match var support function turns lvalue rvalue var rvalue get nam var get def var support function build loop object create loop init rvalue cond bool rvalue iterator rvalue block init cond iterator block output declaration nam env gen int decl env nam var nam string int env cnt txt sprintf int var env txt env txt env ind txt env cnt env cnt lvalue var output instruction built expression exp env gen inst env exp txt sprintf get txt exp env txt env txt env ind txt output block enclosing notice block function environments allows defer evaluation generators block gen block block env txt ind cnt ind ind block env env txt env txt ind txt txt env txt productions self explanatory gen loop env loop env txt env ind get txt get init loop get txt get cond loop get txt get iter loop gen block env get body loop gen env cond bool rvalue env txt env txt get txt cond gen block env env txt env txt gen block env gen int cst cst int txt sprintf cst rvalue txt cst gen assign var lvalue exp rvalue txt sprintf get nam var get txt exp rvalue txt exp gen lt op rvalue op rvalue txt sprintf get txt op get txt op rvalue txt true gen add op rvalue op rvalue txt sprintf get txt op get txt op rvalue txt get val op get val op generation primitives ocaml generated code evaluating new sp int array may referenced method idx 
global txt cnt ind generated block block env gen int decl env gen int decl env gen loop env create loop gen assign gen int cst gen lt gen int cst gen assign gen add gen int cst fun env gen loop env create loop gen assign gen int cst gen lt gen int cst gen assign gen add gen int cst fun env gen int decl env gen inst env gen assign gen int cst gen inst env gen assign gen add gen int cst gen env gen lt gen int cst fun env gen inst env gen assign gen int cst fun env gen inst env gen assign gen int cst gen block global block print string global txt int int int example generation class sp int array fun nam siz ini env siz env txt env txt sprintf int nam done object val name nam val size siz method idx siz var sprintf name lvalue var failwith illegal nam support scalar promotion interprocedural extensions currently support function declarations calls awkward 
scalar types specific generator functions function type implemented 
ocaml functions needed function type function prototype declaration call 
generators operate polyvariant function type enforce proper prototype declaration call ordering language assuming generation single file program 
unclear polymorphism achieved possibly requiring triple generators number arguments 
step course write preprocessor code reduce burden writing code block generator 
application atlas highlights significant parts implementation generator template matrix matrix product 
simple implementation instruction scheduling done hand explicit split separate unrolled loops 
empirical search strategies drive optimization simulated annealing included 
new sp int array env new sp int array env new sp int array array env 
block mab env gen block env fun gen inst gen assign idx gen mul idx idx 
multiply env mu nu done done 
full unroll latency fun block mab env 
full unroll mu nu latency fun block mab env 
full unroll mu nu latency mu nu fun block mab env 
revisited matrix product template 
perspectives revisited classical optimizations domain highperformance computing discussing benefits caveats multistage evaluation 
advanced transformations currently applied manually domain optimization experts potential benefit generative approaches high 
projects followed ad hoc string generation strategies build adaptive libraries self tuned computation kernels 
took projects running example 
show metaocaml suitable implement kind applicationspecific generators full advantage static checking properties 
results show severe reusability compositionality issues arise complex optimizations multiple transformation steps applied code fragment 
addition believe static type checking metaocaml current state system complicates somewhat restricts usage important optimizations scalar promotion arrays 
summarize results 
multistage evaluation simple effective way implement program generators portable high performance computing applications relieve programmer reimplementing main generator parts target application 
way improve code reuse generator base design custom intermediate representation may convoluted application programmers designing compiler 
second part addressed execution overhead writing high performance applications ocaml 
described heterogeneous multistage approach bring safe metaprogramming programs 
embedding declarations variables ocaml ones possible constrain generator produce syntactically correct type safe code 
prototype shows approach combined front generator metaocaml enabling design robust elegant generator safe optimized code fully metaocaml 
heterogeneous approach lifts name generation restriction delays safety checks generation program 
plan metaocaml experimental framework evaluate multistage evaluation possibly extend better support adaptive optimization needs 
wish investigate potential heterogeneous metaocaml generator combining preprocessor embed actual code metaocaml 
parallel help design metaprogramming layer top llvm robust extensible framework lifelong program analysis transformation :10.1.1.152.2608
acknowledgments supported exchanges programs french cnrs university illinois german daad 
wish paul feautrier vikram adve marc snir jiang patrick meredith xiaoming li chris lengauer walid taha 

allen kennedy 
optimizing compilers modern architectures 
morgan kaufman 
august connors mahlke 
cheng eaton 
hwu 
integrated predicated speculative execution impact epic architecture 
proceedings th intl 
symp 
computer architecture july 

efficient code generation automatic parallelization optimization 
ieee international symposium parallel distributed computing slovenia oct 
cohen sharma 
putting polyhedral loop transformations 
workshop languages compilers parallel computing lncs college station texas oct 
beckmann houghton kelly mellor 
run time code generation foundation domain specific optimisation 
proceedings dagstuhl workshop domain specific program generation 
bik grey tian 
automatic intra register vectorization intel architecture 
int 
parallel programming 
redon 
symbolic parameterized polyhedral calculator www fr west 
taha huang leroy 
implementing multi stage languages asts gensym reflection 
acm sigplan sigsoft intl 
conf 
generative programming component engineering pages 
kennedy 
optimizing strategies telescoping languages procedure strength reduction procedure vectorization 
acm int 
conf 
supercomputing ics pages june 
cohen 
polyhedral approach ease composition program transformations 
europar lncs pisa italy aug 
springer verlag 
cooper subramanian torczon 
adaptive optimizing compilers st century 
supercomputing 
darte robert vivien 
scheduling automatic parallelization 
ser boston 
de rose padua 
techniques translation matlab programs fortran 
acm trans 
programming languages systems 
feautrier 
array expansion 
acm int 
conf 
supercomputing pages st malo france july 
feautrier 
parametric integer programming 
rairo recherche op sept 
feautrier 
efficient solutions affine scheduling problem part ii multidimensional time 
int 
parallel programming dec 
see part dimensional time 
johnson 
fftw adaptive software architecture fft 
proc 
icassp conf volume pages 
herrmann lengauer 
parallelization divide conquer translation nested loops 
functional programming 
herrmann lengauer 
hdc higher order language divide conquer 
parallel processing letters 
kap openmp tru unix kap dec fortran digital unix 
www hp com software kap html 
kelly 
optimization unified transformation framework 
technical report cs tr university maryland 
kennedy 
telescoping languages compiler strategy implementation high level domain specific programming systems 
proc 
intl 
parallel distributed processing symposium pages 
taha 
methodology generating verified circuits 
embedded software conf 
pisa italy sept 
boyle 
iterative compilation program optimization 
proc 
cpc compilers parallel computers pages 
lattner adve :10.1.1.152.2608
llvm compilation framework lifelong program analysis transformation 
acm conf 
code generation optimization san jose ca mar 
lengauer batory consel odersky editors 
domain specific program generation 
number lncs 
springer verlag 
li 
padua 
dynamically tuned sorting library 
acm conf 
code generation optimization san jose ca mar 

swing modulo scheduling lifetime sensitive approach 
parallel architectures compilation techniques pact 
wilde 
parameterized polyhedra vertices 
int 
parallel programming dec 
fr polylib 
cohen 

systematic pragmatic architecture aware program optimization process complex processors 
acm supercomputing 
appear 
poletto hsieh engler kaashoek 
tcc language compiler dynamic code generation 
acm trans 
programming languages systems mar 
pugh 
practical algorithm exact array dependence analysis 
communications acm aug 
singer xiong moura johnson padua veloso johnson 
spiral generator platform adapted libraries signal processing algorithms 
journal high performance computing applications special issue automatic performance tuning 
rauchwerger padua 
lrpd test speculative run time parallelization loops privatization reduction parallelization 
ieee transactions parallel distributed systems special issue compilers languages parallel distributed computers 
smith 
overcoming challenges feedback directed optimization 
acm sigplan workshop dynamic adaptive compilation optimization pages 
keynote talk 
standard performance evaluation 
www spec org 
van deursen klint visser 
domain specific languages annotated bibliography 
acm sigplan notices 
veldhuizen 
template metaprograms 
report 
veldhuizen gannon 
active libraries rethinking roles compilers libraries 
siam workshop object oriented methods inter operable scientific engineering computing oct 
whaley dongarra 
automated empirical optimizations software atlas project 
parallel computing 
wolf 
improving locality parallelism nested loops 
phd thesis stanford university aug 
published csl tr 
li ren dejong padua pingali wu 
comparison empirical model driven optimization 
acm symp 
programming language design implementation pldi san diego ca june 
