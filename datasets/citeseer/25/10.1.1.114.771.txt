efficient cost driven index selection tool microsoft sql server surajit chaudhuri vivek narasayya microsoft research microsoft way redmond wa 
microsoft com describe novel techniques possible build industrial strength tool automating choice indexes physical design sql database 
tool takes input workload sql queries suggests set suitable indexes 
ensure indexes chosen effective reducing cost workload keeping index selection tool query optimizer step 
number index sets evaluated find optimal configuration large 
reduce complexity problem techniques 
remove large number spurious indexes consideration account query syntax cost information 
second introduce optimizations possible cheaply evaluate goodness index set 
third describe iterative approach handle complexity arising indexes 
tool implemented microsoft sql server 
performed extensive experiments range workloads including tpc 
results indicate tool efficient choices close optimal 

enterprise class databases require database administrators responsible performance tuning 
large scale deployment databases minimizing database administration function important 
started research project microsoft investigate new techniques self tune self administer database systems achieve performance competitive systems cared database administrators 
important task database administrator selecting physical database design appropriate workload system 
important part physical database design selecting indexes 
novel technique developed project automate task selecting set indexes 
permission copy fee part material granted provided copies distributed direct commercial advantage vldb copyright notice title publication date appear notice copying permission large data base endowment 
copy republish requires fee special permission endowment 
proceedings rd vldb conference athens greece index selection problem studied early importance problem recognized 
despite long history area research prototypes commercial products widely deployed 
basic approaches taken index selection problem 
textbook solutions cg take semantic information uniqueness constraints rudimentary statistics small vs big tables produce database design 
designs may perform poorly ignore valuable workload information 
second class tools adopt expert system approach knowledge designs encoded rules come design 
tools take account workload information suffer disconnected query optimizer 
adverse ramifications reasons 
selection indexes optimizer uses 
words optimizer consider particular index query presence database benefit query 
second tools operate model query optimizer index usage 
making accurate model hard ensuring consistency tool evolving optimizer software engineering nightmare 
third approach index selection tool uses optimizer cost estimates compare goodness alternative hypothetical designs 
approach avoids asynchrony index selection tool query optimizer 
approach adopted adopted fst 
contributions index selection tool describe significant ways 
recognized index selection just difficult search problem 
taken systems approach identifying building blocks index selection tool tool uses optimizer cost estimates 
implementing index selection tool understanding architectural system level issues 
second novel search technique filters spurious indexes early stage exploits characteristics relational query engine reduce cost selecting indexes 
novelty search technique exploring space alternative indexes iterative way complex alternatives multi column indexes generated simpler alternatives single column indexes 
fully implemented tool microsoft sql server necessary server changes able extensive experimental results 
results demonstrate proposed techniques result improvement factor search time significantly sacrificing quality result 
experimental results complement intuition effectiveness strategies proposed 

overview approach problem statement goal pick set indexes suitable database workload 
index single column multi column 
index may clustered single table clustered index 
workload consists set sql data manipulation statements select insert delete update 
term configuration mean set indexes 
define size configuration number indexes configuration 
pick configuration able compare relative goodness configurations 
configuration workload sum optimizer estimated costs sql statements workload metric goodness 
refer metric total cost configuration 
workload configuration value total cost called optimal configuration 
goal index selection tool pick configuration optimal close optimal possible 
index selection process subject constraints upper bound number indexes storage space 
describe technique deal problem picking configuration subject upper bound number indexes 
architecture index selection tool overview architecture index selection tool 
dotted line denotes process boundary tool sql server 
index selection tool takes input workload specified database 
tool basic search algorithm iteratively picks complex index structures 
iteration tool considers single column indexes second iteration considers single column indexes 
search algorithm derives efficiency modules 
candidate index selection module section eliminates consideration large number indexes provide little benefit query workload 
configuration enumeration module section intelligently searches space subsets candidate indexes picks configuration low total cost 
multi column index generation module selects multi column indexes considered iteration indexes chosen configuration enumeration module 
tool designed modules replaced newer improved version having change remaining modules 
index selection tool bases choices optimizer cost estimates requires ability evaluate workload configuration 
service provided architecture cost evaluation module section 
module maintains cost table information shown 
cost evaluation module performs optimizations needs invoke optimizer selected subset configurations 
index considered search algorithm may database tool requires ability simulate presence index database optimizer 
index creation module provides tool interface specifying requirement 
modified sql server support creation loading index 
detailed discussion required changes server scope 
workload candidate index selection configuration enumeration multi column index generation config final indexes cost index creation cost evaluation sql server 
architecture index selection tool queries total cost 
table maintained cost evaluation module 
important measures efficiency index selection tool number indexes considered tool workload 
number configurations enumerated index selection tool 
number optimizer invocations necessary evaluate total cost enumerated configuration 
solution index selection problem judged efficiency quality close solution optimal 
show index selection tool efficient designed algorithms significantly reducing quality 
preliminaries indexable columns identify columns query potentially useful indexing 
simple definition indexable columns 
indexable columns form basis defining admissible indexes workload identify set potentially useful indexes workload provide starting point index selection tool picks subset indexes 
definitions easily modified affecting rest index selection tool 
definitions refer sql dml statement query interchangeably 
definitions indexable column query workload column condition form operator expression clause 
operator 
columns group order clauses considered indexable 
update query updated columns table considered indexable 
ii admissible index query index case multi column index indexable columns query 
iii admissible index workload index admissible index queries workload 
example indexable columns query consider query select unique unique unique definition follows indexable columns unique unique unique 

cost evaluation na approach evaluating configuration cost evaluator asks optimizer cost estimate query workload 
configurations queries workload estimation requires asking sql server optimize queries 
invoking optimizer times expensive despite batching invocations requires communication process boundaries tool server 
section techniques result significantly reducing number optimizer calls concept atomic configurations cf 
fst 
intuitively configuration atomic workload query workload possible execution query query engine uses indexes section show configuration atomic workload derive cost queries configuration accurately 
having evaluate configurations space admissible indexes workload sufficient ask optimizer evaluate configurations long atomic configurations included 
identifying configurations included crucial accuracy efficiency tool techniques section 
way reduce optimizer invocation exploit fact atomic configuration needs evaluated query workload 
particular may able estimate cost query atomic configuration cost query simpler configuration 
section describes optimization 
deriving cost configuration atomic configurations assume configuration atomic select update query workload 
consider atomic configurations subsets configurations chosen optimizer optimizing behaved optimizer choose atomic configuration set minimal cost 
derive cost min cost invoking optimizer 
furthermore select query inclusion index configuration reduce cost suffice take minimum cost largest atomic configurations subsets insert delete query analysis complex 
cost insert delete query non atomic configuration divided components 
cost selection cost updating table indexes may selection cost updating indexes affect selection cost 
note cost updating index independent assumed independent plan chosen 
optimizer pick plan minimizes costs 
select update query derive minimum costs atomic configurations subsets reflect components cost get cost updating index look cost cost 
estimate total cost cost cost invoking optimizer identifying atomic configurations section address important issue identifying atomic configurations workload 
total number atomic configurations large 
particular multi table queries number atomic configurations exponential number tables 
sections describe techniques heuristically reducing number atomic configurations need considered workload significantly sacrificing accuracy cost estimation 
query processor restrictions characteristics query processor influence constitutes atomic configuration 
exploit widely applicable considerations restrict set configurations consider atomic 
execution query query processor indexes table integer 
restriction reflects pragmatic small number indexes may intersected identify tuples relation 
query engines support index intersection strengthen condition requiring index table appear atomic configuration 
execution multi table query indexes tables need considered atomic configuration 
intuition indexes joins query impact cost query 
designing cost evaluation module values provide quality solutions dramatically reducing number atomic configurations complex workloads 
refer single join atomic configurations 
search strategy discussed section determines atomic configurations evaluated 
particular may evaluated demand asked evaluate cost evaluate atomic configurations subsets evaluated 
possible search strategies different values enumeration 
fact explored tier search strategy phase single join atomic configurations 
indexes chosen phase considered second phase restrictions atomic configurations imposed phase 
due space constraints don discuss experimental results tier search strategy cn 
example 
single join atomic configurations consider select query conditions case table atomic configuration indexes may answer query 
due single join atomic configuration pruning step atomic configuration evaluated 
cost query table configuration estimated minimum costs atomic configurations 
adaptive strategy index interaction second technique assumptions characteristics query processor 
adaptively detects atomic configurations workload interaction indexes 
assume atomic configuration size evaluated evaluated cost compared derived cost techniques section 
evaluated cost significantly different derived cost signals correlation precise 
index clustered non clustered 
indexes interact 
cases evaluate atomic configurations size extend formalize intuition algorithm 
atomic configurations size 

evaluate configurations 
configuration determine indexes interact strongly 
testing see evaluated cost configuration derived cost 

meets condition add atomic configurations size supersets 

exit 
goto step 
parameter defines threshold index interaction 
value chosen small risk spurious atomic configurations chosen step high 
hand large interaction indexes go undetected 
algorithm perform choosing appropriate value important 
due space constraints unable provide details choose defer discussion experimental results cn 
reducing cost evaluating atomic configurations evaluating atomic configuration substantial savings possible number optimizer calls optimization 
idea asked evaluate cost find simpler atomic configuration cost cost 
assume set indexable columns select update query indexes columns set effect cost query configuration consisting indexes cost cost 
cost evaluated simply reuse cost 
refer step relevant index set optimization 
extreme case relevant index set optimization occurs relevant set empty 
case estimated cost query database indexes 
call irrelevant index set optimization 
example reducing calls optimizer consider query select unique assume index unique index unique wish evaluate configuration 
indexable columns similar arguments apply insert delete queries 
details available cn 

adaptive detection relevant atomic configurations 
unique 
optimization technique cost cost 
cost evaluated previously save optimizer invocation 

candidate index selection consider admissible index workload spurious indexes considered resulting blow space configurations enumerated 
describe algorithm picking set candidate indexes space admissible indexes 
idea determine best configuration query independently consider indexes belong best configurations candidate index set 
intuition algorithm index part best design single query workload part best design entire workload 
refer technique query specific best configuration candidate index selection algorithm 
challenge determine best configuration query workload 
key observation choosing best configuration query problem different problem index selection difference workload consists exactly query 
obtain best configuration configuration index selection tool 
elaborate technique 
workload 
enumeration step described section picks final set indexes enumerating configurations set ci candidate indexes 
denote step enumerate ci ci set candidate indexes 
bounds designate step enumerate ci 
denote indexable columns query describe algorithm notations 
step algorithm shows purpose determining candidate indexes consider indexable columns query candidates 
avoid cyclic dependence candidate index selection module 

workload consists queries generate workloads consisting query wi 
workload set indexable columns query starting candidate indexes 

configuration picked index selection tool enumerate 

candidate index set union 
candidate index selection algorithm 
comment properties algorithm 
workload free updates including insert delete statements impose bound number indexes may chosen configuration chosen algorithm equal total cost workload compared configuration 
workload contains updates bound number indexes chosen algorithm guarantee hold 
example say workload consists query indexable columns insert query best configuration consists index 
case index maintenance cost predicted high possible index selection tool recommend index enumeration phase consider 
situations result inappropriate pruning 
similar observation may restrict number indexes chosen candidate index selection algorithm 
generalizations algorithm possible account observations modifying step pick best top configuration basic scheme variety workloads including updates 
due couple factors 
indexes part best configuration query may appear best configuration query workload 
multiple indexes selected best configuration may considerable overlap indexes best best configurations 
step algorithm picks configurations bound number indexes expect indexes best configurations find way set candidate indexes 

configuration enumeration candidate indexes tool asked pick indexes na enumeration algorithm enumerate subsets candidate indexes size pick lowest total cost 
na enumeration algorithm guarantees optimal solution practical realistic values number configurations enumerated large exhaustive enumeration feasible 

best index configuration na enumeration algorithm 
exit 

pick new index cost cost choice 
cost cost exit 
exit 
goto 
greedy enumeration algorithm 
approach configuration enumeration problem greedy algorithm shown 
algorithm picks optimal configuration size seed 
seed expanded greedy fashion indexes chosen reduction cost possible adding index 
greedy step considers possible choices adding index adds resulting highest cost reduction 
note extreme parameter algorithm takes pure greedy approach 
hand algorithm identical na enumeration algorithm 
algorithm computationally efficient small relative case enumeration exhibits near greedy behavior 
value relative reflects desired degree completeness enumeration 
issue heuristically determining appropriate value depending index interactions queries workload discussed cn 
measure adjusted user tool explicitly vary nature enumeration quick heuristic exhaustive 
despite fact greedy algorithm principle arbitrarily bad configuration enumeration cn experimental results indicate relatively low value produces near optimal results 
key reason greedy algorithm performs enumeration cases despite interaction indexes largest cost reductions results indexes candidate indexes 
important capture significant interactions merge join clustered indexes single table index intersection 
justifies exhaustive phase greedy helps capture interactions significant effect cost 
example observe single query join order determined primarily sizes intermediate relations presence absence important indexes 
join order determined additional indexes may come play indexes help reduce cost join locally strongly interact indexes operations execution tree 
cases exhaustive phase greedy chooses important interacting indexes affect join order subsequently picks remaining indexes greedily 
variant enumeration algorithm described uses branch bound 
algorithm uses greedy low predetermined generate configuration serves cut solution 
subsequently configurations enumerated exhaustively constraint cost partial configuration certain factor cost corresponding partial configuration cut greedy solution 
algorithm explained details compared greedy cn 
multi column index generation index selection tools past failed take account complexity arising inclusion configuration consisting set indexes subsets partial configurations multi column indexes 
set columns table 
multi column indexes possible considering permutations significantly increase space configurations considered tool 
section technique dealing complexity 
adopt iterative approach account multi column indexes increasing width 
iteration consider single column indexes 
single column indexes picked iteration select set admissible column indexes 
set column indexes winning single column indexes input second iteration notation represent index columns leading column column index 
strategy selecting set column indexes intuition column index desirable single column index leading column desirable 
set single column indexes picked iteration column index column consider set admissible multi column indexes form 
note bean indexable column may index call algorithm mc lead 
considered aggressive variant mc lead 
variant column index considered set contains index algorithm assumption index important single column indexes important 
refer algorithm mc 
note set indexes considered mc subset indexes considered mc lead 
section comparison performance algorithms scheme single column multi column indexes searched pass iterative step 
refer algorithm mc basic 
results demonstrate mc lead significantly superior 
strategies selecting candidate indexes closely related technique tool consider indexes help index access 
cases considering need indexable column may part projection list workload strongly correlated column details cn 

implementation experiments implementation implemented index selection tool microsoft sql server 
tool takes input workload sql dml statements generated utility generates set indexes output 
startup tool gathers schema information technique generalizes case indexes width equal needed performing iterations 
server analyzes workload determine set admissible indexes 
modified sql server support creation indexes hypothetical index server available optimizer distribution information column index defined 
enables optimizer estimate costs queries configurations containing hypothetical indexes 
tool needs evaluate workload configuration simulates presence query optimizer loading catalog tables sql server distribution information indexes submits queries workload optimizer batch 
batching reduces communication overhead query ensures loading distribution information configuration needs done exactly 
queries optimized execute mode optimizer returns plan cost estimate query 
cost gathering distribution information amortized multiple executions tool multiple workloads statistics need gathered index 
details creating simulating indexes necessary changes server described 
tool run administrator privileges needs update system catalogs 
index selection tool accompanied design assistant tool analyze current design cost techniques similar index selection tool cn 
experimental setup tested tool schemas workloads including synthetically generated schemas workloads 
due space constraints report results experiments representative workloads tpc schema 
table summarizes relevant characteristics workloads 
workload number joins pure queries update stmts 
admissible indexes tpcd tpcd tpcd tpcd tpcd table 
summary workloads 
workloads generated synthetic workload generation program 
program ability vary number parameters including percentage update statements number joins query selectivity conditions frequency conditions column 
tpcd consists join queries tpcd consists join queries 
tpcd tpcd differ percentage update statements workload 
tpcd workload consisting set tpc queries specified benchmark 
experiments considered multi column indexes width single column indexes possible structures indexes 
column table shows total number admissible indexes workload 
stated numbers report case tool asked select indexes 
experiments candidate index selection evaluate performance query configuration algorithm denoted best conf picking candidate indexes compared total number candidate indexes picked algorithm number admissible indexes considered algorithm workload 
shows workload number candidate indexes chosen best conf algorithm significantly smaller number admissible indexes workload 
degradation quality final configuration picked index selection tool best conf algorithm update intensive workload tpcd 
provide insight characteristics best conf considered variants best conf best conf choose respectively candidate index es query workload 
table underscores importance strategy best conf including indexes best configuration query predetermined bound reasons explained section 
results experiments clearly bring effectiveness candidate index selection algorithm 
number indexes tpcd tpcd tpcd tpcd tpcd 
performance candidate index selection algorithm 
best best best conf conf conf tpcd tpcd tpcd tpcd tpcd table 
drop quality final configuration 
admissible indexes candidate indexes note number admissible indexes passing candidate index selection module total number admissible indexes workload column indexes selected second iteration 
effectiveness query processor restrictions atomic configurations experiment show effectiveness cost estimates single join atomic configurations described section 
refer pruning technique sj figures 
compare sj cost estimations query processor constraints 
refer mj 
shows comparison number atomic configurations evaluated sj mj 
tpcd reduction atomic configurations sj large workload consists join queries 
benefits sj tpcd consists join queries tpcd consists complex queries respectively 
conclude workloads large join queries sj significantly reduce number configurations evaluated 
number atomic configurations 
number atomic configurations sj vs mj 
drop quality compared mj tpcd tpcd tpcd tpcd tpcd number indexes picked 
drop quality sj compared mj tpcd 
compare quality configuration picked workload sj mj respectively 
results show asked pick indexes configuration picked sj identical picked mj 
provide intuition sj performs designed experiment tool invoked repeatedly number indexes picked varied tpcd workload 
shows resulting configurations sj mj 
sixth index picked mj ninth index picked sj 
sj caused drop quality 
intuitive explanation behavior small obviously sj mj indexes selected cases 
large indexes provide benefit included 
middle range expect deviation sj mj 
note maximum drop quality quite small 
similar results observed workloads 
conclude query processor restrictions provide reasonable method restricting set atomic configurations need evaluated workload 
reducing calls optimizer 
experiment shows extent number calls optimizer reduced optimizations discussed section 
total reduction optimizer calls workloads varied 
savings due irrelevant index set optimization relevant index set optimization reduced number optimizer calls 
experiment shows optimizations truly significant 
performance greedy vs optimal experiment compare greedy na enumeration algorithm discussed section 
na enumeration algorithm exhaustive search configuration space finds optimal configuration size refer optimal 
case greedy optimal asked pick indexes 
experiments run restrictions atomic configuration ensure accurate information atomic configuration costs available 
observed fraction configurations enumerated greedy compared optimal varied different workloads 
recall greedy starts considering optimal configuration size 
asked pick indexes exhaustive nature optimal causes explore larger space configurations greedy 
workload greedy compromise optimality 
counter example tpcd update intensive workload optimal chose different clustered index lineitem table greedy 
absolute difference cost optimal configuration chosen greedy small 
experiment experience greedy databases workloads greedy large variety workloads microsoft sql server 
multi column index generation compared algorithms selecting admissible multi column indexes described section 
shows number admissible indexes picked algorithm 
note workloads techniques substantially reduce number admissible multi column indexes picked compared mc basic 
table shows mc lead performs compared mc basic mc suffers noticeable drop quality workloads 
success mc lead confirms intuition single column index column winner interaction winning column significant multi column index attractive 
mc lead fails important single column index important 
expect cases relatively rare occur impact total cost fairly small practice seen tpcd tpcd 
number admissible indexes tpcd tpcd tpcd tpcd tpcd 
number admissible indexes 
mc basic mc lead mc mc lead mc tpcd tpcd tpcd tpcd tpcd table 
drop quality configuration chosen compared mc basic putting section summarize algorithm index selection 
run query specific best configuration algorithm identifying candidate indexes 
requires splitting workload queries workloads query finding best configuration query 
union configurations candidate index set step 
run greedy algorithm enumerate configurations subject single join atomic configuration pruning technique select set indexes required number indexes picked total cost reduced 
produced solutions 

select set admissible multi column indexes technique mc lead indexes picked step 
repeat steps starting admissible index set consisting single column indexes chosen step multi column indexes selected step 

summary index selection algorithm 
compare performance algorithm described baseline algorithm 
baseline algorithm differs algorithm non iterative execute candidate index selection step 
considers admissible indexes workload including multi column indexes enumeration 
runs greedy algorithm imposing query processor restrictions atomic configurations 
table shows important category number candidate indexes number optimizer calls number configurations enumerated algorithm significantly baseline algorithm 
running time algorithm improves factor baseline algorithm 
final column table shows drop quality final configuration picked algorithm small num 
candidate indexes num 
optimizer calls num 

enum 
running time drop quality tpcd tpcd tpcd tpcd tpcd table 
comparison index selection algorithm baseline algorithm 

related substantial body literature physical database design dating back early section briefly review representatives major directions 
previous index selection takes account workload information divided categories identifying set possible indexes configurations workload searching space possible indexes 
problem identifying set possible indexes looked angles 
syntactic analysis workload identify potentially useful indexes 
approach taken fst hc 
fon alternative approach generate set configurations query may potentially optimizer choose union configurations queries workload 
technique scalable large workloads 
framework shasha rs suggests generation set candidate configurations query knowledge approach 
set configurations explored union configurations 
idea pursued cbc cbc propose rule framework 
knowledge approach taken commercial product 
approach candidate index selection section distinct approaches 
observed deviation baseline algorithm occurred approximation dealing multi column indexes 
problem selecting configuration set candidate indexes aspects 
cost function characterize goodness configuration needed 
approach fst optimizer cost driven estimates 
approximate stand cost model hc cbc 
efficient search technique compromise quality solution needed 
greedy search algorithms proposed past 
variants greedy algorithms recommended context materialized view index selection problem 
particular show bounds deviation greedy optimal 
results assume monotonicity inclusion index impact effectiveness 
exploiting exhaustive phase greedy able capture significant index interactions traditional greedy algorithm unable capture 

index selection important aspect physical database design 
described design implementation index selection tool microsoft sql server 
effectiveness algorithm index selection attributed novel techniques query specific best configuration algorithm choosing candidate indexes 
algorithm reduce number atomic configurations number optimizer calls evaluated workload 
iterative technique handling multi column indexes 
experimental results show techniques increase efficiency tool factor significantly compromising quality indexes selected 
explore techniques choose structures join indexes materialized views physical database design addition indexes 
acknowledgments sql server team help project 
comments gerhard weikum greatly helped improve 
cbc chang automation physical database design proc 
acm sac 
cbc chang index selection relational databases proc 
th ieee 
cg peter oracle performance tuning reilly associates 
cn chaudhuri narasayya physical database design assistant wizard sql server microsoft research technical report preparation fon frank omiecinski navathe adaptive index selection rdbms proc 
edbt 
fst finkelstein physical database design relational databases acm tods mar 
gupta harinarayan ullman index selection olap proc 
icde 
hc hammer chan index selection self adaptive data base management system proc 
sigmod 
hobbs england rdb vms comprehensive guide digital press 
rss ross srivastava sudarshan materialized view maintenance integrity constraint checking trading space time proc 
sigmod 
harinarayan ullman implementing data cubes efficiently proc 
sigmod 
quass physical database design data warehouses proc 
icde 
rs shasha framework automating physical database design proc 
vldb 

