load balancing structured systems rao lakshminarayanan surana richard karp ion stoica karp cs berkeley edu systems provide dht abstraction distribute objects peer nodes choosing random identifiers objects 
result log imbalance 
systems highly heterogeneous may consist peers range old desktops modem lines powerful servers connected internet high bandwidth lines 
address problem load balancing systems 
explore space designing load balancing algorithms uses notion virtual servers 
schemes differ primarily amount information decide re arrange load 
simulation results show simplest scheme able balance load optimal value complex scheme able balance load optimal value 
address problem load balancing peer peer systems provide distributed hash table dht abstraction 
structured systems data item stored mapped unique identifier id identifier space partitioned nodes node responsible storing items mapped identifier portion space 
system provides interface comprising functions put id item stores item associating identifier id get id retrieves item corresponding identifier id peer peer algorithms symmetric peers play role protocol systems highly heterogeneous 
system gnutella kazaa may consist peers range old desktops modem lines powerful servers connected internet high bandwidth lines 
node identifiers chosen random random choice item ids results imbalance factor number items stored node 
furthermore applications may associate semantics ids means ids longer uni research supported nsf cooperative agreement ani project iris net career award ani 
distributed 
example database application item tuple id represents value primary key 
popular technique deal hot spots caching 
caching certain types resources storage 
furthermore load caused popularity large number small items expected database applications caching push significant fraction items effective 
hand techniques propose effective dealing hot spots 
believe caching orthogonal complementary load balancing techniques describe 
presents simple load balancing schemes differ primarily amount information decide rearrange load 
simulation results show simplest scheme able balance load optimal value complex scheme able balance load optimal value 
ii 
preliminaries concept virtual servers load balancing 
virtual server looks single peer underlying dht physical node responsible virtual server 
example chord virtual server responsible contiguous region identifier space node noncontiguous portions ring having multiple virtual servers 
key advantage splitting load virtual servers move virtual server node node system 
operation looks leave followed join underlying dht supported dhts 
contrast node virtual server transfer load nodes neighbors id space example successor predecessor chord 
splitting load virtual servers increase path length overlay believe flexibility move load node node crucial load balancing scheme dhts 
large number applications suggested literature dht systems lit tle predicted applications eventually turn popular typical workloads experienced 
hard address load balancing problem full generality simplifying assumptions believe reasonable practice 
restrict particular type resource storage bandwidth cpu assume bottleneck resource trying optimize 
second consider schemes achieve load balancing moving virtual servers heavily loaded nodes lightly loaded nodes 
schemes appropriate balancing storage distributed file systems bandwidth systems web server load processing time serving dynamic html content performing distributed join operations 
third assume load virtual server stable predicted distributed join operation timescale takes load balancing algorithm operate 
iii 
load balancing schemes section simple load balancing schemes 
schemes try balance load transferring virtual servers heavily loaded nodes lightly loaded nodes 
key difference schemes amount information required transfer decision 
simplest scheme transfer decision involves nodes complex scheme transfer decision involves set consisting heavy light nodes 
delving details schemes define notion light heavy nodes precisely 
heavy light nodes denote load node represents sum loads virtual servers node assume node target load chosen 
node considered heavy light 
goal load balancing algorithms decrease total number heavy nodes system moving load heavy nodes light nodes 
binary modeling state node may restrictive glance believe simple sufficient number applications 
systems defined cliff curve load cliff occurs natural choice target load 
hand goal equalize load nodes system choose target close average load system rough estimate random sampling 
assume denotes capacity node goal divide load proportion capacity 
ideally want load node total number nodes system average load average capacity practice target may hard achieve approximate resents trade amount load moved quality balance achieved 
virtual server transfer slack variable rep fundamental operation performed balancing loads transferring virtual server heavy node light node 
heavy node light node define best virtual server transferred virtual server transfer satisfies constraints 
transferring heavy 

lightest virtual server light 

virtual server transfer light transfer heaviest virtual server intuitively scheme tries transfer minimum amount load light maintain ing light 
possible scheme transfer largest virtual server change status 
idea increase chance finding light node eventually allow shed excess load 
note scheme guarantees transfer decrease number heavy nodes 
addition consider transfers nodes type nodes heavy light 
way guarantee load system high thrashing occur 
time desired performance reached 
splitting virtual servers virtual server heavy node transferred entirety node possibility split smaller virtual servers transfer smaller virtual server light node 
improve time taken achieve balance possibly reduce total load transferred risk excessively fragmenting identifier space 
increase number virtual servers imply increase overlay hop length size routing tables 
scheme periodically merge virtual servers needed counteract increase number virtual servers caused splitting 
example link bandwidth case web server complicate algorithms considerably consider load balancing schemes need split virtual servers 
assume load virtual servers bounded predefined threshold 
node responsible enforcing threshold splitting virtual servers needed 
simulations set threshold splitting choice property target achievable virtual servers need split 
recall number nodes system 
scheme scheme rendezvous mechanism nodes picked random 
virtual server transfer initiated nodes heavy light 
scheme easy implement distributed fashion 
light node periodically pick random id perform lookup operation find node responsible id node heavy node transfer may take place nodes 
scheme light nodes perform probing heavy nodes perform probing 
advantages design choice 
heavy nodes relieved burden doing probing 
second system load high nodes heavy danger overloading network thrashing 
third load node correlated length id space owned node random probe performed light node find heavy node 
scheme scheme scheme allows heavy node consider light node time 
denote heavy node set light nodes considered pair pick vir tual server procedure described section iii 
virtual servers procedure gives choose lightest heavy node light 
virtual server pick heaviest virtual server virtual server transfer 
implement scheme maintaining directories store load information set light nodes system 
dht system store directories 
assume directories system significantly smaller number phys ical nodes light node hashed directory known hash function takes values interval directory stored node responsible identifier known hash function 
light node periodically advertise target load current load node sible directory turn heavy nodes pe sample existing directories 
heavy node picks random number sends information target load loads virtual servers node receiving mes sage node looks light nodes directory directory find best virtual server transferred light node directory 
process repeats heavy nodes light 
scheme scheme logical extension schemes 
scheme match heavy node light node second scheme match heavy node light nodes scheme match heavy nodes light nodes 
start description centralized scheme full information nodes system 
goal bring loads node value corresponding target 
allow heavy nodes light nodes interact concept global pool virtual servers intermediate step moving virtual server heavy node light node 
pool local data structure compute final allocation load moved algorithm terminates 
scheme consists phases unload phase heavy node transfers virtual servers greedily global pool till light 
phase nodes light virtual servers pool transferred nodes accommodate 
insert phase aims transfer virtual servers pool light nodes creating new heavy nodes 
phase executed stages 
stage choose heaviest virtual server pool transfer light node determined best fit heuristic pick node mini subject condition phase continues pool empty virtual servers transferred 
case algorithm terminates nodes light virtual servers pool 
case algorithm continues phase 
phase swaps largest virtual server pool virtual server light node light nodes pick remove lightest virtual server 
identify light node algorithm terminates 
algorithm returns insert phase 
considering nodes pool descending order load insert node pool 
implement scheme distributed fashion similar techniques scheme 
main difference case hash heavy nodes directories 
particular node chooses random number load information node pareto distribution load virtual server chosen power law distribution exponent mean standard deviation distribution heavy tailed nature distribution particularly bad case load balancing 
consider key metrics simulations total load moved nodes achieve state nodes light number probes number rounds 
second metric gives idea total time taken converge control traffic overhead caused load balancing algorithm 
scalability look scalability dif ferent algorithms 
number directories sends complete schemes fraction load moved num receives ber probes node depend information nodes node performs algorithm sends solution back nodes 
solution specifies node virtual servers transfer 
algorithm continues nodes rehashing periodically directories 
distributed version stage insert fails choice going phase just moving virtual server considered back node came pool 
re hashing may able find better light node move round 
avoid overhead moving load light node cost having go rounds 
iv 
simulations simulated algorithms variety conditions understand performance limitations 
goal simulations understand fundamental trade offs different approaches claim bullet proof algorithm efficiently dht systems 
lack information applications workloads conservative assumptions stress algorithms 
consider types distributions generate load virtual server 
gaussian distribution fraction identifier space owned virtual server 
fraction assumed exponentially distributed true chord 
load virtual server chosen gaussian distribution mean standard deviation mean standard deviation total load system set 
distribution result total load virtual server due large number small items stores individual loads items independent 
number nodes system number directories 
directory contains random sample size characteristics sample depend large similar argument holds scheme 
schemes terms scalability 
remainder section consider simulations nodes 
reasoning results hold larger systems 
efficiency look efficiency different schemes terms amount load transferred 
plots total load moved fraction total load system function different schemes load pareto distributed 
due space limitations results gaussian distribution 
note surprisingly schemes perform better gaussian distribution 
plot shows trade slack defined section iii load moved system 
points worth noting 
load moved depends distribution load particular load balancing scheme 
schemes useful moves move minimum required nodes light 
second plot point graph runs simulation result scenario nodes light 
means range axis line range loads algorithm converged 
scheme capable balancing load factor ideal case case algorithms able balance load factor ideal case 
reason scheme performs better schemes uses best fit heuristic match set heavy nodes set light nodes 
contrast schemes higher chance light node may able accept large virtual server despite fact happen heavy nodes smaller virtual servers contact node 
conclude scheme capable achieving balance small reasonable number rounds schemes 
fraction load moved achieve balance centralized directory nodes directory centralized node rounds load target fig 

fraction total load moved different schemes 
node assigned virtual servers random 
total number probes results show scheme achieves similar results respect load moved quality balance achieved scheme 
main problem scheme number probes negatively impacts convergence time control traffic overhead 
quantify overhead plot total number probes performed heavy nodes completely shed excess load 
probe considered useful results transfer virtual node 
graph shows scheme may sufficient loads remain stable long time scales control traffic overhead affect system adversely 
effect size directory need look nodes time reduce number probes question arises nodes look perform efficiently terms control traffic 
answer question look effect size directory number probes scheme 
axis shows average size directory useful number probes performed 
note initial number heavy nodes lower bound number axis shows total approximately rounds pareto distribution probes 
graph shows heavy nodes successful shedding load probing directory 
observed trend number rounds taken scheme 
number probes achieve balance total probes useful probes nodes directory load target fig 

number probes total nodes required nodes light 
number probes achieve balance gaussian total gaussian useful gaussian initial overloaded nodes pareto total pareto useful pareto initial overloaded nodes number nodes number buckets fig 

number probes needed function expected number nodes get hashed single directory 
trade involved doing scheme longer true useful moves done 
enabled total load moved disabled 
natural question extra load moved justified reduction number rounds 
shows dis lodging useful trying optimize number rounds 
note number rounds required nodes light high close heavy nodes light round 
conclude may useful operation practice 
number rounds node rounds node rounds load target fig 

effect number rounds 
load distribution gaussian 
related structured systems assume object ids uniformly distributed 
assumption number objects node varies factor number nodes system 
improves factor considering subset existing nodes node neighbors single node deciding portion id space allocate new node 
chord propose notion virtual servers means im proving load balance 
allocating virtual servers real node chord ensures high probability number objects node constant factor optimal 
achieve load balancing schemes assume nodes homogeneous objects size object ids uniformly distributed 
cfs accounts node heterogeneity allocating node number virtual servers proportional node capacity 
addition cfs proposes simple solution shed load overloaded node having overloaded node remove virtual servers 
scheme may result thrashing removing virtual nodes overloaded node may result node overloaded 
douceur wattenhofer proposed algorithms replica placement distributed filesystem similar spirit algorithms 
primary goal place object replicas maximize availability untrusted system consider load balancing problem cooperative system 
triantafillou studied problem load balancing context content resource management systems 
considers unstructured system meta data aggregated level hierarchy 
re assignment objects computed aggregated global information 
vi 
simple techniques achieve load balancing structured peer peer systems 
simulation results demonstrate effectiveness schemes showing possible balance load optimal value minimal load movement 
plan extend directions 
plan study effectiveness schemes dynamic system items continuously inserted deleted access patterns items changes continuously 
second plan develop theoretical underpinnings proposed schemes 
allow study trade offs transfer overhead effectiveness scheme better 
third plan build prototype load balancing schemes top chord lookup system 
ratnasamy francis handley karp shenker 
scalable content addressable network proc 
acm sigcomm 
stoica morris karger kaashoek balakrishnan 
chord scalable peer peer lookup service internet applications proc 
acm sigcomm 
dabek kaashoek karger morris stoica 
wide area cooperative storage cfs proc 
acm sosp 
hildrum kubiatowicz rao zhao 
distributed object location dynamic network proc 
acm spaa 
rowstron druschel 
pastry scalable distributed object location routing large scale peer peer systems proc 
ifip acm international conference distributed systems platforms middleware heidelberg germany pages november 
harren hellerstein huebsch loo shenker stoica 
complex queries dht peerto peer networks proc 
iptps 
douceur wattenhofer 
competitive hill climbing strategies replica placement distributed file system lecture notes computer science vol 

douceur wattenhofer 
optimizing file availability secure serverless distributed file system proc 
th ieee srds 
triantafillou koubarakis 
high performance peer peer content resource sharing systems proc 
cidr 

