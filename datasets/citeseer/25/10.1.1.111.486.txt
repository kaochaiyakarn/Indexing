fulldoc full reporting debugger optimized code clara rajiv gupta mary lou soffa department computer science university pittsburgh pittsburgh pa cs pitt edu department computer science university arizona tucson az gupta cs arizona edu 
compilers increasingly rely optimizations achieve high performance effectiveness source level debuggers optimized code continues 
values source variables computed execution optimized code source level debuggers optimized code unable report expected values source variables breakpoints 
fulldoc debugger report expected values source variables computed optimized code 
fulldoc uses statically computed information guide gathering dynamic information enables full reporting 
fulldoc report expected values breakpoints reportability affected values overwritten early due code hoisting register reuse written late due code sinking 
debugger report values path sensitive value may computed path location value may different different paths 
implemented fulldoc programs experimentally evaluated effectiveness reporting expected values 
experimental results indicate fulldoc report values reportable statically computed information 
show improvements existing schemes limited dynamic information 
optimizations introduced compilers years ago difficulty debugging optimized code recognized 
difficulty grown development increasingly complex code optimizations path sensitive optimizations code speculation aggressive register allocation 
importance debugging optimized code increased years production compilers apply optimizations 
supported part nsf ccr ccr eia hewlett packard labs university pittsburgh nsf ccr ccr university arizona 
problems surface trying debug optimized code viewpoint source code 
code location problem relates determining position breakpoint optimized code corresponds breakpoint source code 
data value problem problem reporting values source variables user expects see breakpoint source code optimizer may reordered deleted statements computing values overwritten values register allocation 
techniques developed tackle code location data value problems goal reporting expected values determined optimized code reporting expected value determined 
progress development debuggers report expected values 
early techniques focused determining expected values information computed statically 
techniques proposed information collected execution static information improve reportability values :10.1.1.38.9648
dhamdhere time stamp basic blocks obtain part execution path optimized code dynamically determine currency actual values source variables optimized code execution expected values breakpoints 
wu selectively take control optimized program execution emulate instructions optimized code order mimics execution unoptimized program :10.1.1.38.9648
execution reordering enables reporting expected values source variables occur source 
despite progress techniques able report possible expected values variables breakpoints source program 
fulldoc full reporting debugger optimized code reports expected values computed optimized program 
call level reporting full reporting 
values report deleted cases report value deleted 
noted techniques exist recovering values certain circumstances 
example statement deleted due copy propagation possible report value copy available 
recovery techniques incorporated debuggers regardless choose include techniques knowing improve results debuggers optimized code including fulldoc 
illustrated fulldoc report expected values computed optimized code wu dhamdhere :10.1.1.38.9648
technique non invasive code executes code optimizer generated 
emulation technique execute instructions different order avoid problem masking user optimizer errors :10.1.1.38.9648
fulldoc works programs written syntactically mapping breakpoints source code corresponding positions optimized code 
fulldoc extends class reportable expected values judiciously static dynamic information 
strategy technique wu fulldoc statically current techniques reportable breakpoints reportable source program 
existing static analysis values computed optimized program execution report values fig 

reportability debugger strategies determine static program analysis values optimizer placed position values may reportable 
reportability values may depend run time debugging information including placement breakpoints paths taken program execution 
execution strategy employs invisible breakpoints gather dynamic information aids reporting placed values 
employ schemes transparent user debugging session enable full reporting 
report values overwritten early respect breakpoint code motion register reuse fulldoc saves values overwritten deletes soon longer needed reporting 
fulldoc saves values expected values breakpoint 
report values written late respect breakpoint code sinking fulldoc prematurely executes optimized program report value saving values overwritten roll ahead execution reported subsequent breakpoints 
reportability variable breakpoint dependent execution path optimized code fulldoc dynamically records information indicate impact path reportability value able report values path sensitive computation value location dependent path 
implemented technique demonstrate effectiveness practicality experimentation 
show technique practical terms run time overhead 
capabilities fulldoc follows 
value source level variable computed optimized program execution reportable breakpoints source code value variable reportable 
report expected values computed optimized program execution existing technique 
values computed optimized program execution values report 
fulldoc incorporate existing techniques recover values 
run time overhead minimized performing analysis compilation 
fulldoc utilizes debugging information generated compilation determine impact reportability values user breakpoints determine invisible breakpoints inserted report affected values 
techniques transparent user 
user inserts breakpoint reportability values affected breakpoint potential breakpoint fulldoc automatically inserts invisible breakpoints gather dynamic information report expected values 
errors optimized code masked 
user breakpoints placed source level statements regardless optimizations applied 
optimized program modified setting breakpoints 
statement level optimizations hoist sink code supported including speculative code motion path sensitive optimizations partial redundancy elimination register allocation 
organized section describing challenges reporting expected values examples 
section describes approach implementation 
section presents experimental results 
related discussed section concluding remarks section 
challenges reporting expected values reportability variable value involved optimization affected register reuse code reordering code deletion execution path including loop iterations placement breakpoints 
section consider effect optimizations cause value variable overwritten early written late deleted 
cases consider impact path placement breakpoints 
demonstrate approach handles cases 
figures paths highlighted regions reportability affected reportability affected regions 
overwritten early optimized program value val variable overwritten early optimized program val prematurely overwrites value 
application code hoisting optimization register reuse cause values overwritten early 
example consider unoptimized program optimized version xn refers nth definition speculatively hoisted result reportability affected 
regardless execution path optimized code debugger report expected value breakpoint region simply displaying actual contents expected value value computed early causing previous value overwritten early actual value 
path affect reportability 
assume breakpoint placed region 
expected value true program speculatively hoisted unoptimized execution fulldoc debugging strategy report saved save discard saved report current value value value optimized program true path taken execution fig 

overwritten early example path taken false path taken loop iteration 
computed branch actual value optimized code 
execution follows true path expected value reported false path taken value reported 
number loop iterations affect reportability 
expected value breakpoint region true path taken current loop iteration 
loop iteration expected value subsequent loop iterations expected value true path taken false path taken prior loop iterations 
computed loop actual value optimized code 
execution follows true path debugger report expected value subsequent loop iterations debugger report expected value dynamic currency determination expected value breakpoints region reported value overwritten 
emulation technique report expected value region true path region technique path sensitive expected value reported region false path region iterations :10.1.1.38.9648
fulldoc report expected values 
execution optimized code value overwritten early respect breakpoint fulldoc saves value value pool 
fulldoc saves necessary discards values longer needed reporting 
illustrates fulldoc strategy optimized program executes true path assuming loop executes time 
fulldoc saves assignment reports saved value breakpoints regions 
fulldoc discards saved value execution reaches original position breakpoints non highlighted path region fulldoc reports current value notice values saved long reportable source program save discard mechanism automatically disam value report breakpoints region 
currently saved breakpoint false path executed saved value reported 
currently saved true path executed current value reported 
notice saving strategy strategies performed respect user breakpoints 
words user insert breakpoints regions reportability affected fulldoc save value written late optimized program value val variable written late optimized program computation val delayed due example code sinking partial dead code elimination 
suppose partially dead false path moved true branch 
result expected value breakpoint regions jis reportable optimized code 
consider breakpoint placed region 
expected value actual value optimized code true path taken false path taken 
execution follows true path expected value reported 
reportability affected loop iterations effect overwritten early case 
dynamic currency determination expected value breakpoints region reported provided true path taken regions 
emulation technique path sensitive expected value region reported :10.1.1.38.9648
report values true path taken 
note values regions possibly reported schemes recovery techniques employed 
requested value written late respect breakpoint fulldoc prematurely executes optimized code saving previously computed values overwritten reported subsequent executes executing values program path report report value current debugging true path taken execution partially program ff fig 

written late example breakpoints 
illustrates fulldoc strategy optimized program executes true path 
breakpoints region fulldoc reports expected value executing optimized code saving previously computed values overwritten 
roll ahead execution stops executes 
breakpoints non highlighted path region fulldoc reports computed unoptimized program optimized program consider case statement deleted value computed optimized code 
example suppose dead unoptimized program deleted 
expected value breakpoint region jis reported optimized code 
consider placing breakpoint region 
expected value region jis true path taken false path taken 
deleted actual value optimized code true path actual value expected value reported false path expected value reported 
emulation technique report expected value region path sensitive :10.1.1.38.9648
dynamic currency determination technique report expected value breakpoints region jif true path taken 
illustrates fulldoc strategy optimized program executes false path 
breakpoint paths fulldoc reports current value execution reaches original position fulldoc knows reportable regions reports expected value computed 
execution reaches fulldoc disregards non reportability information optimized fulldoc debugging strategy computed report report value disregard remember path computed path value report current dead false path taken execution ft ft fig 

computed optimized program example fulldoc approach implementation fulldoc uses sources debug information debugging capabilities 
optimizations applied code location mapping generated source optimized code 
second code optimized generated compiler static analysis applied gather information reportability expected values 
reportability debug information user breakpoints inserted special program points reached program execution user breakpoint reached 
third execution dynamic debug information indicating special points reached position user breakpoints enable full reporting 
illustrates fulldoc strategy respect user inserting breakpoints 
user inserts breakpoints program executes program execution fulldoc uses code location mapping determine corresponding breakpoints optimized code 
fulldoc uses reportability debug information determine impact reportability breakpoints potential breakpoints ffl value overwritten early respect breakpoint fulldoc inserts invisible breakpoints save value execution long value reportable discard value longer needed 
ffl reportability variable respect breakpoint path sensitive fulldoc inserts invisible breakpoints update dynamic debug information regarding reportability value 
illustrates fulldoc strategy breakpoint reached 
user breakpoint reached fulldoc informs user 
fulldoc responds user queries static dynamic information 
invisible breakpoints fulldoc performs actions 
value overwritten early fulldoc saves value value pool discards value longer needed reporting 
value path sensitive fulldoc updates path sensitive info regarding reportability value depending execution path taken 
execution reaches user breakpoint user requests value variable fulldoc uses reportability debug information dynamic debug information determine reportability value 
value available location memory register variable value pool fulldoc reports value 
requested value written late breakpoints user breakpoints set set corresponding code location debug info static information reportability affected breakpoints fig 

fulldoc strategy respect user inserting breakpoints optimized fulldoc code location mapping static information path sensitive info dynamic information reportability debug info user breakpoint hit roll ahead invisible breakpoint invisible breakpoint hit fig 

fulldoc strategy respect breakpoints hit spect breakpoint fulldoc uses reportability debug information roll ahead execution optimized code saving previously computed values overwritten 
stops execution value computed reports value user computed 
value computed execution fulldoc informs user value reportable 
code location mapping code location mapping captures correspondence optimized code source code 
code location mapping fulldoc map user breakpoints source code corresponding breakpoints optimized code 
mapping compute reportability debug information described section 
statement source code code location mapping associates statement original position optimized code position control flow graph gopt prior application optimizations corresponding statement optimized code 
initially optimized code starts identical copy source program mappings original positions corresponding statements programs 
optimizations applied code location mapping maintained source optimized code 
reportability debug information describe reportability debug information computed static analysis optimized code provided fulldoc fulldoc employs information run time collects dynamic debug information response user setting breakpoints requesting values variables breakpoints 
simply reportable flg value variable reportable breakpoint provides location memory location register name value 
case value location matter execution path taken provides location 
possible location depends path taken execution reachable multiple definitions stores value different location different register 
case execution path taken determines latest definition encountered location value 
potential definition location pairs di li provided case 
breakpoint set debugger activates recording definition encountered 
inserting invisible breakpoints points 
invisible breakpoint hit execution debugger records latest definition encountered overwriting previously recorded definition 
overwritten early fes es overwrites early breakpoint bg es save discard user sets breakpoint statement es overwrites early activate save discard points es inserting invisible breakpoints 
ensures values variables overwritten early respect breakpoint saved available reporting value pool case requested user 
note save discard points activated immediately breakpoint set user values may requested user breakpoint hit saved 
discard point reached path currently saved save point reached path debugger simply ignores discard point 
example overwritten early handled case 
written late lateatbkpts fls ls writes late breakpoint bg ls assume user sets breakpoint statement ls lateatbkpts determine ls written late respect instance breakpoint original position ls reached execution current position ls reached breakpoint hit ls written late 
determine information follows 
statement ls written late insert invisible breakpoints original current positions ls record original position ls encountered execution 
current position ls reached execution recorded information discarded 
suppose execution reaches user requests value variable written late statement ls lateatbkpts 
original position ls currently recorded late current instance breakpoint execution program rolls ahead points ls encountered 
point value just computed known definitely computed recall sinking partially dead code cause situations arise 
overwritten early case save discard points activated breakpoint set points activated breakpoint hit request value written late 
example reportability region jis affected handled case 
reportable deleted path fv reportable deleted fv reportable late partial dead code removal performed value variable defined deleted statement 
breakpoint variables values reportable matter execution path taken recorded statements removed paths dead code elimination partial dead code elimination respectively 
user requests value variable breakpoint report user value reportable statement computes deleted execution path 
example reportability affected region handled case 
example reportability affected region jis handled case 
path sensitive reportability deleted fds ds may deleted breakpoint bg ds fds ds may deleted value may deleted path case reportable deleted path case reportable 
path sensitive case reportability information updated execution paths executed program points reached 
user sets breakpoint invisible breakpoints set original positions deleted statement ds record positions encountered execution 
invisible breakpoints set definition range ds stored ds 
ds reached execution recorded information discarded 
consider case breakpoint reached user requests value variable defined statement ds 
dynamically recorded information shows original position ds encountered debugger reports value computed ds deleted 
debugger reports current value example reportability region jis path sensitive handled case 
strategy deleted statement prevents fulldoc setting invisible breakpoints late 
holds deleted statements reportability affected potential breakpoints reportability necessarily affected invisible breakpoints set execution breakpoint fulldoc gathers appropriate dynamic information potential breakpoints 
path sensitive reportability written late fls ls may late breakpoint bg ls fls ls may late sinking code involve path sensitive reporting statement may sunk path 
case opposite previous late statement encountered reportable 
user sets breakpoint debugger initiates recording late statements setting invisible breakpoints new positions late statements 
debugger discard recorded information late statement ls ls encountered ls holds definition range ls 
consider case breakpoint reached user requests value variable defined statement ls 
dynamically recorded information shows late statement ls encountered debugger reports current value debugger reports value reportable 
example reportability region jis path sensitive handled case 
strategy applies late statement ds prevents fulldoc setting invisible breakpoints late 
computing reportability debug information code location mapping compute reportability debug information 
algorithm gives overview debug information computed 
lines gamma determine values overwritten early compute information 
lines gamma determine values written late compute lateatbkpts 
lines determine rest debug information data flow analysis 
details particular steps follow 
determining statements overwrite early write late 
determine values overwritten early due register reuse 
suppose dx definition variable location register optimized code 
dx reaches assignment reassigned variable temporary overwritten early reassignment 
source definition dv dv overwrites early discard discard 
corresponding positions original definitions reachable arhead dv optimized code dv arhead dv discard breakpoint path dv discard discard dv dv writes late optimized code dv dv fp earliest possible program point paths orhead dv dv breakpoint paths orhead dv dv lateatbkpts lateatbkpts dv compute comparing ranges orhead dv arhead dv compute determining deleted late statements occur path compute reachability fig 

algorithm compute reportability debug information determine values variables overwritten early due code hoisting optimizations compare gopt original positions definitions actual positions optimized program 
arhead dv denote actual position definition dv orhead dv denote corresponding original position dv 
determine existence path arhead dv orhead dv include backedges loops enclosing arhead dv orhead dv 
backedge restriction ensures consider positions instance dv optimization 
restricted notion path captured ath predicate 
definition 
predicate ath true path program point program point gopt include backedges loops enclosing ath arhead dv orhead dv true location program point arhead dv location hold value dv overwritten early dv optimized code 
example ath arhead orhead true overwritten early determine values variables written late optimized program similarly compare gopt original positions definitions actual positions optimized program 
definition dv determine existence path orhead dv arhead dv include backedges enclosing points 
ath orhead dv arhead dv true definition dv written late optimized code 
example written late ath orhead arhead true 
computing 
value overwritten early dv optimized code save point associated position dv optimized code discard points associated corresponding positions original definitions reachable dv optimized code 
data flow analysis determine reachable original definitions similar reachable definitions problem 
save discard points dv computed determine breakpoints reportability affected dv 
dv lies paths save corresponding discard points dv 
easily computed solving data flow equation gopt pred gamma fdv dv overwrites early save point dv bg fdv dv overwrites early discard point dv bg 
dv dv 
example arhead orhead 
breakpoint regions fx computing lateatbkpts 
definition dv written late dv earliest points execution late value computed point reached known value computed execution 
point dv associated arhead dv 
points associated earliest points paths orhead dv appropriate instance dv execute 
oint dv arhead dv 
dv ath oint dv condition ensures point placed dv 
condition ensures rest points placed program points appropriate instance late statement execute 
condition ensures points placed earliest points 
set statements written late reachable easily computed solving data flow equation gopt succ gamma fdv arhead dv bg fdv orhead dv bg 
consider example 
program point false 
points dv computed determine breakpoints reportability affected dv 
dv lateatbkpts lies paths orhead dv points dv 
lateatbkpts easily computed data flow analysis 
computing 
code location mapping construct program ranges variable value correspond unoptimized code real range optimized code actual range 
comparing ranges identify program ranges optimized code corresponding regions value variable available reporting 
breakpoint program range variable computed performing data flow analysis propagate locations memory registers variables program ranges 
computing 
determine values variables reportable breakpoint application dead code elimination propagate deleted statements reportability affected regardless execution path taken optimized control flow graph gopt solving data flow equation pred gamma fdv orhead dv fbg dv fdv orhead fbg definition vg 
breakpoint dv dv 
example breakpoint region 
computed similarly 
computing 
determine values variables may reportable path deleted compute data flow equation gopt pred gamma fdv orhead dv fbg dv fdv orhead fbg definition vg 
dv dv dv 
example breakpoint region 
computed similarly 
computing 
variable deleted statement ds ds corresponding positions original definitions reachable orhead ds gopt 
example original position orhead 
similarly variable late statement ls ls corresponding positions original definitions reachable orhead ls 
computing 
deleted statement dv dv lies paths orhead dv corresponding positions original definitions reachable orhead dv optimized code 
computed similarly 
experiments implemented fulldoc extending lcc compiler programs set optimizations including coloring register allocation loop invariant code motion dead code elimination partial dead code elimination partial redundancy elimination copy propagation constant propagation folding 
extended lcc perform analyses needed provide debug information fulldoc previous section 
implemented fulldoc debug information generated lcc fast breakpoints implementation invisible breakpoints 
performed experiments measure improvement reportability expected values suite programs yacc spec benchmarks 
randomly generate user breakpoints placed user breakpoint source statement determined improvement reportability fulldoc technique uses static information 
report breakpoint reasons reportability affected compare improvement technique techniques report overwritten values path sensitive values 
table shows benchmark percentage values reported statically computed information fulldoc 
row gives percentages values deleted paths reportable fulldoc noted fulldoc recover values debuggers 
rows give percentages values reportability affected overwritten early code hoisting row register overwritten table 
percentage local variables breakpoint reportable problems yacc compress go ksim ijpeg static full static full static full static full static full info doc info doc info doc info doc info doc deleted paths code hoisting reg overwrite code sinking rf del path path sens late path sens delete path sens location total table 
static statistics yacc compress go ksim ijpeg 
source statements statements affected number code hoisting table reg overwrite entries code sinking rf path sens late path sens delete path sens location increase compile time early row 
debugger include mechanism saving values overwritten early able report values 
rows give percentages values reportability affected statements computed values affected partial dead code elimination 
row indicates percentages values reportable paths sunk values 
row indicates percentages values reportable paths sunk values computed 
row indicates percentages values reportable paths reportability values sunk path sensitive 
debugger include mechanism roll ahead execution optimized program able report values 
rows give results reportability affected path sensitive information 
seventh row gives percentages reportable path sensitive deletes 
case values may deleted paths executed 
eighth row gives results location value path sensitive 
technique include path sensitive information fail report values 
row gives total percentages reported 
average fulldoc report local variables source breakpoint debugger static information report means fulldoc report values techniques statically computed information 
numbers fulldoc report values emulation technique path sensitivity register overwrites handled :10.1.1.38.9648
fulldoc report values dynamic currency determination technique early overwrites preserved roll ahead mechanism employed 
table statistics static analysis fulldoc 
rows show number source statements percentage source statements reportability affected optimizations 
rows give number entries tables generated run time 
noted largest table register overwrites 
row shows increase compilation computing debug information averaged 
table 
runtime statistics yacc compress go ksim ijpeg breakpoints reportability affected avg 
code hoisting invisible reg overwrite breakpoints code sinking rf source path sens late statement path sens delete path sens location duplicates removed source assignments executed roll forwards maximum roll forward length average roll forward length table show average number invisible breakpoints source code statement encountered execution 
numbers shown various types invisible breakpoints 
numbers indicate overhead incurred run time invisible breakpoints 
rows display overhead imposed roll ahead execution optimized program 
average source assignment statements executed roll 
maximum number statements executed roll forward ranges values means number values saved roll ahead moment 
average roll ahead source assignment statements ranges statements 
size value pool holding values overwritten early small maximum size ranging entries entries indicating optimizations moving code far 
experiments show table sizes required hold debug information increase compile time compute debug information quite modest 
run time cost technique maximum fast breakpoint source level statement possible values requested user possible breakpoints reasonable 
payoff technique substantial reports values best previously known techniques 
presence pointer assignments source program increase overheads strategies rely determining ranges reportability variables affected 
control equivalent code motion assignments introduced new paths removed paths statically determine ranges reportability values affected presence pointer assignments 
case reportability value variable affected reportable range possibly pointer assignment code deletion non control equivalent code motion strategy dynamically track range reportability value variable affected 
related difficulty debugging optimized code long recognized focusing development source level debuggers optimized code static analysis techniques determine expected values source level variables reportable breakpoints 
source level debuggers optimized code utilizes dynamic information provide expected values 
emulating certain program points optimized code order mimics execution unoptimized program values variables reportable debuggers reported :10.1.1.38.9648
pointed altering execution optimized program masks certain user optimizer errors :10.1.1.38.9648
emulation technique track paths report values reportability path sensitive 
dynamic currency determination technique proposed report values variables reportable debuggers time stamping basic blocks obtain partial history execution path precisely determine variables reportable breakpoints values overwritten early code hoisting register reuses reportable 
recovery techniques incorporated debuggers including fulldoc employed recompute values certain circumstances :10.1.1.38.9648
reporting expected values respect source program debugger reports values respect optimized source program version 
uses invisible breakpoints recover evicted variables 
approach debugging optimized code cop comparison checker optimized code verifies input semantic behaviors unoptimized optimized code versions 
incorporated debugger report values including deleted values 
technique requires execution unoptimized optimized programs 
presents fulldoc full reporting debugger optimized code reports expected values computed optimized program 
value source level variable computed optimized program execution reportable breakpoints source code value variable reportable 
experimental results show fulldoc report values techniques relying static information existing techniques limit dynamic information 
fulldoc improvement existing techniques achieved statically computing information guide gathering dynamic information enables full reporting 
values fulldoc reported computed optimized program execution 

adl tabatabai gross source level debugging scalar optimized code 
proceedings acm sigplan conf 
programming languages design implementation pages may 

brooks hansen simmons new approach debugging optimized code 
proceedings acm sigplan conf 
programming languages design implementation pages june 

debugging optimized code misled 
acm transactions programming languages systems 

coutant doc practical approach debugging globally optimized code 
proceedings acm sigplan conf 
programming languages design implementation pages june 

dhamdhere dynamic currency determination optimized programs 
acm transactions programming languages systems november 

fraser hanson retargetable compiler design implementation 
benjamin cummings 

gupta debugging code reorganized trace scheduling compiler 
structured programming 

hennessy symbolic debugging optimized code 
acm transactions programming languages systems july 

holzle chambers ungar debugging optimized code dynamic deoptimization 
proceedings acm sigplan conf 
programming languages design implementation pages june 

gupta soffa comparison checking approach avoid debugging optimized code 
acm sigsoft symposium foundations software engineering european software engineering conference pages september 

kessler fast breakpoints design implementation 
proceedings acm sigplan conf 
programming languages design implementation pages june 

soffa debugging parallelized code code liberation techniques 
proceedings acm onr sigplan workshop parallel distributed debugging may 

pollock soffa high level debugging aid incremental optimizer 
st annual hawaii international conference system sciences volume pages january 

tice non transparent debugging optimized code 
phd dissertation university california berkeley 
technical report ucb csd 

debugging globally optimized programs data flow analysis 
proceedings acm sigplan conf 
programming languages design implementation pages june 

wu patil olsen hwu new framework debugging globally optimized code 
proceedings acm sigplan conf 
programming languages design implementation pages may 

zellweger interactive high level debugger control flow optimized programs 
proceedings acm sigsoft sigplan software engineering symposium high level debugging pages 
