aspect oriented programming gregor kiczales john lamping anurag mendhekar chris maeda cristina lopes jean marc loingtier john irwin published proceedings european conference object oriented programming ecoop finland 
springer verlag lncs 
june 
copyright springer verlag subject copyright 
rights reserved part material concerned specifically rights translation re illustrations broadcasting reproduction microfilms way storage data banks 
duplication publication current version permission obtained springer verlag 
violations liable german copyright law 
aspect oriented ming gregor kiczales john lamping anurag mendhekar chris maeda cristina lopes jean marc loingtier john irwin xerox palo alto research center programming problems procedural object oriented programming techniques sufficient clearly capture important design decisions program implement 
forces implementation design decisions scattered code resulting tangled code excessively difficult develop maintain 
analysis certain design decisions difficult clearly capture actual code 
call properties decisions address aspects show reason hard capture cross cut system basic functionality 
basis new programming technique called aspectoriented programming possible clearly express programs involving aspects including appropriate isolation composition reuse aspect code 
discussion rooted systems built aspect oriented programming 

object oriented programming oop technology fundamentally aid software engineering underlying object model provides better fit real domain problems 
programming problems oop techniques sufficient clearly capture important design decisions program implement 
programming problems fit oop approach procedural approach replaces 
reports developing programming techniques possible clearly express programs oop pop fail support 
analysis design decisions difficult cleanly capture actual code 
call issues decisions address aspects show reason hard capture cross cut system basic functionality 
basis new programming technique called aspect oriented programming aop coyote hill road palo alto ca usa 
gregor parc xerox com possible clearly express programs involving aspects including appropriate isolation composition reuse aspect code 
think current state aop research analogous oop years ago 
basic concepts take form expanding group researchers 
furthermore aop qua aop new idea existing systems properties 
contribution analysis problems aop intended solve initial set terms concepts support explicit aop system design 
presents aop example driven way generalizations definitions derived examples advance 
section uses medium scale example aspect tangling problem aop solves section definition term aspect 
section presents small examples aspects 
sections provide example complete aop system 
remaining sections related 

background assumptions section outlines important assumptions relationship programming languages software design processes underlie rest 
software design processes programming languages exist mutually supporting relationship 
design processes break system smaller smaller units 
programming languages provide mechanisms allow programmer define abstractions system sub units compose abstractions different ways produce system 
design process programming language programming language provides abstraction composition mechanisms cleanly support kinds units design process breaks system 
perspective existing programming languages including object oriented languages procedural languages functional languages seen having common root key abstraction composition mechanisms rooted form generalized procedure 
purpose refer generalized procedure gp languages 
say ignorant important advantages oop languages 
say purposes discussion simpler focus common gp languages 
design methods evolved gp languages tend break systems units behavior function 
style called functional decomposition 
exact nature decomposition differs language paradigms course unit encapsulated procedure function object case feels comfortable talk encapsulated functional unit system 
point may familiar feels somewhat redundant 
important give explicit attention course considering units system decomposition functional 

aspects 
better understand origins tangling problems aop works solve section organized detailed example real application working 
implementations real application easy understand inefficient efficient difficult understand aop implementation easy understand efficient 
presentation analogous simplified implementations 
consider implementation black white image processing system desired domain model images passing series filters produce desired output 
assume important goals system easy develop maintain efficient memory 
need quickly develop bug free enhancements system 
images large order system efficient minimize memory storage requirements 
basic functionality achieving goal relatively easy 
old fashioned procedural programming implement system clearly concisely alignment domain model 
approach filters defined procedures take input images produce single output image 
set primitive procedures implement basic filters higher level filters defined terms primitive ones 
example primitive 
filter takes images returns pixelwise logical implemented communities term connotes functional programming languages side effect free functions term sense 
chosen common lisp syntax presentation written fairly easily algol language 
defun 
result new image loop width operation perform pixels loop height set pixel result get pixel get pixel result loop pixels input images storing pixels result image starting 
primitive filters programmer definition filter selects just black pixels horizontal edge returning new image consisting just boundary pixels 
functionality implementation pixelwise logical operations written loop primitive shift image written loop primitive slightly different loop structure difference images defun remove 


pixels top edge region defun top edge 
remove 

pixels bottom edge region defun bottom edge 
remove 

horizontal edge pixels defun horizontal edge 

top edge 
bottom edge 
note primitive filters deal explicitly looping pixels images 
higher level filters horizontal edge expressed clearly terms primitive ones 
resulting code easy read reason debug extend short meets goal 
optimizing memory usage simple implementation doesn address second goal optimizing memory usage 
procedure called loops number input images produces new output image 
output images created frequently existing briefly consumed loop 
results excessively frequent memory storage allo cation turn leads cache misses page faults terrible performance 
familiar solution problem take global perspective program map intermediate results inputs filters code version program fuses loops appropriately implement original functionality creating intermediate images possible 
revised code horizontal edge 
look defun horizontal edge 
result new image 

loop width loop height set pixel result operations sub filters result result images created loop structure shared component filters get pixel get pixel get pixel get pixel compared original code tangled 
incorporates different filters horizontal edge 
defined terms fuses loops 
loops 

fused operations different looping structure 
short revising code efficient memory destroyed original clean component structure 
course simple example difficult deal small amount tangled code 
real programs complexity due tangling quickly expands major obstacle ease code development maintenance 
real system example drawn important sub component optical character recognition system 
clean implementation real system similar code shown lines code tangled implementation fusion optimization memoization intermediate results compile time memory allocation specialized intermediate datastructures lines 
tangled code extremely difficult maintain small changes functionality require mentally re tangling 
aop re implementation full application fuses loops 
chose show code tangled difficult understand 

horizontal edge 
top edge 


remove 
cross cutting bottom edge 



returning example code provides different basis understanding tangling 
left hierarchical structure filtering functionality 
right data flow diagram original un optimized version horizontal edge 
diagram boxes lines show primitive filters data flow 
dashed oval shows boundary fused single loop optimized version horizontal edge 
notice fusion oval incorporate 
fact doesn align hierarchical units left 
properties implemented functionality loop fusion originate primitive filters compose differently filters composed 
functionality composes hierarchically traditional way 
loop fusion composes fusing loops primitive filters loop structure direct neighbors data flow graph 
composition rules easy understand looking appropriate picture 
composition relationships cut fundamentally difficult see picture 
cross cutting phenomena directly responsible tangling code 
single composition mechanism language provides procedure calling suited building un optimized functional units 
help compose functional units loop fusion 





different diagrams un optimized horizontal edge 
filter 
left functional decomposition aligns directly domain model 
right data flow diagram boxes primitive filters edges data flows runtime 
box labeled bottom input image 
ously follow different composition rules 
breakdown forces combine properties entirely hand happening tangled code 
general properties programmed compose differently coordinated say cross cut 
gp languages provide composition mechanism programmer composition manually leading complexity tangling code 
define important terms precisely respect system implementation gp language property implemented component cleanly encapsulated generalized procedure object method procedure api 
cleanly mean easily accessed composed necessary 
components tend units system functional decomposition image filters bank accounts gui widgets 
aspect cleanly encapsulated generalized procedure 
aspects tend units system functional decomposition properties affect performance semantics components systemic ways 
examples aspects include memory access patterns synchronization concurrent objects 
section provides examples aspects 
terms possible clearly state goal aop support programmer cleanly separating components aspects providing mechanisms possible compose produce system 
contrast gp programming supports programmers separating components providing mechanisms possible compose produce system 
components aspects components aspects 
analysis aspects system properties cross cut components helps explain persistent popularity mechanisms dynamic scoping catch throw purely gp languages 
mechanisms provide different composition mechanism helps programmers implement certain aspects systems 

examples aspects cross cut components going presentation aop solves problem aspect tangling code section briefly presents examples aspects components 
example table list application kind gp language job capturing component structure application component structure application programmed kind language aspects cross cut component structure 
application gp language components aspects image processing digital library matrix algorithms procedural filters loop fusion object oriented repositories printers services procedural linear algebra operations result sharing compile time memory allocation minimizing network traffic synchronization constraints failure handling matrix representation permutation floating point error aspects common easily thought particular domain 
best examples error failure handling 
familiar phenomenon adding support failure handling simple system prototype ends requiring little additions changes system 
different dynamic contexts lead failure bear failure handled cross cut functionality systems 
performance related issues aspects performance optimizations exploit information execution context spans components 

example aop section return image processing example sketch aop re implementation application 
presentation system developed simplified somewhat 
complete system discussed 
goal section quickly get complete structure aop implementation table fully explain structure 
section provide explanation 
structure aop implementation application analogous structure gp implementation application 
gp implementation application consists language ii compiler interpreter language iii program written language implements application aop implementation application consists component language program components aspect languages program aspects ii aspect weaver combined languages iii component program implements components component language iii aspect programs implement aspects aspect languages 
just gp languages aop languages designed weaving delayed runtime rt weaving done compile time ct weaving 
component language program current example component language aspect language 
component language similar procedural language minor changes 
filters longer explicitly procedures 
second primitive loops written way loop structure explicit possible 
new component language 
filter written follows define filter 
pixelwise aa bb aa bb pixelwise construct iterator case walks images lockstep binding aa bb pixel values returning image comprised results 
similar constructs provide different cases aggregation distribution shifting combining pixel values needed system 
introducing high level looping constructs critical change enables aspect languages able detect analyze fuse loops easily 
aspect language program design aspect language application observation dataflow graph easy understand loop fusion required 
aspect language simple procedural language provides simple operations nodes dataflow graph 
aspect program straightforwardly look loops fused carry fusion required 
code fragment part core aspect program handles fusion case discussed section 
checks nodes connected data flow edge pixelwise loop structure fuses single loop pixelwise structure appropriate merging inputs loop variables body original loops 
cond eq loop shape node pointwise eq loop shape input pointwise fuse loop input pointwise inputs splice loop vars splice body subst describing composition rules fusion structure kinds loops real system requires dozen similar clauses fuse 
part system handled relying optimizing compiler appropriate fusion program analysis understanding involved significant compilers counted reliably 
compilers able optimize particular simple example 
complication aspects real system handles including sharing intermediate results keeping total runtime memory allocation fixed limit 
weaving aspect weaver accepts component aspect programs input emits program output 
proceeds distinct phases illustrated 
phase weaver uses unfolding technique generating data flow graph component program 
graph nodes represent primitive filters edges represent image flowing primitive filter 
node contains single loop construct 
example node labeled contains loop construct refer edges coming node pointwise edge edge define filter 
pixelwise aa bb define filter 

cond eq loop shape node 
eq loop shape input fuse loop input pointwise aspect weaver void main int void loop int phase aspect program run edit graph collapsing nodes adjusting bodies accordingly 
result graph loop structures primitive pixel operations phase 
example node labeled corresponds fusion loops original graph body pointwise edge edge edge phase simple code generator walks fused graph generating function loop node generating main function calls loop functions appropriate order passing appropriate results prior loops 
code generation simple node contains single loop construct body composed entirely primitive operations pixels 
crucial feature system weaver smart compiler difficult design build 
aop arranged significant implementation strategy decisions actual provided programmer appropriate aspect languages 
weaver job integration inspiration 
asking programmer explicitly address implementation aspects sounds step backwards experience open implementation footnote continued aspect weaver image processing applications works phases 
results real system somewhat complex course 
thing additional aspect programs handles sharing common subcomputations ensures minimum possible number images allocated time 
system aspect programs written aspect language 
example aop re implementation met original design goals application code easy reason develop maintain time highly efficient 
easy programmer understand components compose 
easy programmer understand aspects compose 
easy programmer understand effect aspect programs total output code 
changes filter components fusion aspect easily propagated system simply re weaving 
isn easy programmer generate details output code 
power aop approach weaver handles details programmer having tangling manually 
aop re implementation application lines code including component program aspect programs 
aspect weaver including reusable code generation component lines true kernel weaver lines 
performance reimplementation comparable line manually tangled version time efficiency worse space efficiency better 
software engineering projects extremely difficult quantify benefits aop large experimental study involving multiple programmers aop traditional techniques develop maintain different applications 
study scope date hope 
developed initial measure degree applying aop techniques simplify application 
measure compares suggests fact isn programmer addressing implementation memory aspect proper aop means expressing implementation strategy appropriately level appropriate aspect language appropriate locality 
addressing implementation details working directly tangled implementation 
evaluating aop implementation important compare na inefficient implementation complex efficient implementation 
current code generator doesn packed datastructures results factor performance penalty hand optimized implementation aspectoriented implementation 
aspect oriented implementation times faster naive implementation 
gp implementation application aop implementation application 
measures degree aspects concisely coded aop implementation non aop implementation 
general equation measure numbers particular application follows reduction bloat due tangling tangled code size component program size sum aspect program sizes metric number greater indicates positive outcome applying aop 
application represents extremely large gain aop applications developed gain ranges number 
said size weaver included sum denominator 
point debatable weaver usable number similar image processing applications just table recognizer 
note entire weaver included metric evaluates 
single metric somewhat limited utility 
believe useful case important grounds performance aop implementation application comparable non aop implementation 
section presents requirements identified quantitative measures aop utility 

second example aop section uses second example aop system elaborate component language design aspect language design weaving 
example simplified version real system developing described 
example comes document processing domain wanted implement distributed digital library stores documents forms provides wide range operations documents 
component language aspect languages aspect weaver section general purpose nature highly domain specific example previous section 
functionality system captured object oriented model 
approach objects documents repositories different printable forms documents pdf ps rip printers servers aspects concern including communication mean controlling amount network bandwith application uses careful objects sub objects get copied remote method calls 
example want sure book object included remote method invocation different printed representations book aren sent wire needed receiving method 
coordination constraints mean synchronization rules required ensure component program behaves correctly face multiple threads control 
failure handling mean handling different forms failure arise distributed system appropriately context sensitive way 
continue just communication aspect 
handling communication coordination aop discussed 
failure handling aop research goal 
component language program designing aop system involves understanding go component language go aspect languages shared languages 
component language allow programmer write component programs implement system functionality time ensuring programs don pre aspect programs need control 
aspect languages support implementation desired aspects natural concise way 
component aspect languages different abstraction composition mechanisms common terms possible weaver compose different kinds programs 
keep common terms points contention aspect languages address different issues component languages 
image processing system replacing low level loops higher level looping primitives example ensuring component programs don preempt aspect programs 
change easier aspect programs detect implement opportunities loop fusion 
example component programs implement elements books repositories printers 
order allow communication aspect program handle communication component programs avoid doing 
case java serves quite component language 
provides object model implements appropriate components avoids addressing communication aspect 
java component lan explains order support coordination aspect language lowerlevel synchronization features removed java footnote continued guage definition simple classes books repositories books look public class book string title author int isbn ocr ocr pdf pdf postscript ps rip rip public string get title return title public string get author return author public int get isbn return isbn aspect language program public class repository private book books private int public repository int component language 
keyword synchronized methods wait notify notifyall 
books new book public void register book books public void unregister book public book lookup string communication aspect programs able control amount copying arguments takes place remote method invocation 
aspect language effectively allow step implementation method invocation detect local remote implement appropriate amount copying case 
way provide runtime reflective access method invocation 
shown reflective access control communication aspect distributed object system 
kind reflective access powerful dangerous difficult 
case chosen provide higher level aspect language tailored specific aspect controlling copying remote method invocations 
communication aspect language designed allows programmer explicitly describe object copied passed argument remote method invocation 
language fragment communication aspect program says books registered repository sub objects copied de registered returned result lookup isbn number copied 
rest book including large sub objects printable representations copied needed time 
remote repository void register book void unregister book copy isbn book copy isbn lookup string aspect weaver aspect process component aspect languages properly produce desired total system operation 
essential function aspect weaver concept join points elements component language semantics aspect programs coordinate 
image processing example join points data flows component program 
distributed objects example join points runtime method invocations component program 
examples serve illustrate important point join points necessarily explicit constructs component language 
nodes dataflow graph runtime method invocations clear implicit elements component program semantics 
aspect generating join point representation component program executing compiling aspect programs respect 
digital library example join point representation includes information dynamic method invocations concrete classes arguments location 
join point representation generated runtime reflective runtime component language 
approach aspect language implemented meta program called method invocation uses join point information aspect program know appropriately marshal arguments 
higher level aspect language designed implemented top lower level happens gp languages 
actual system compile time reflective techniques interpretive overhead incurred runtime 
image processing application join point representation quite simple 
just data flow graph operations access body nodes operations edit graph 

open issues explicit approach programming aop young idea 
date primarily focused designing implementing aspect oriented programming languages languages develop prototype applications 
programming centric initial focus natural parallels early development oop 
great deal done assess utility aop better understand relation existing ideas develop useful wide range users 
important goal quantitative assessment utility aop 
help development real world applications 
help maintenance 
develop measures applications useful 
difficult problem reasons quantitative assessment value oop difficult believe important take time get solid results 
believe important systematic study find existing systems aop elements design 
see way quickly accelerate development aop ideas providing way get rough empirical evidence having build large new systems ground 
important area exploration space different kinds component aspect language designs 
develop collection component aspect languages plugged different ways different applications 
meta level frameworks build collection 
theoretical support developed aop 
kinds theories best describe interaction aspects components woven 
theories support development practical weaving toolkit 
analysis design process 
design principles aspectual decomposition 
module structures aspect programs 
train people identify aspects 
clearly separate 
write aspect programs 
debug aop systems 
document aop systems 
important area exploration integration aop existing approaches methods tools development processes 
examples show aop improvement existing techniques 
fulfill promise developed way integrates techniques 

related section give brief survey related 
start closely related proceed closely related 
explicitly connected aop groups begun explicitly consider aop terms 
include mehmet aksit university twente developed composition filters object model provides control messages received sent object 
component language traditional oop composition filters mechanism provides aspect language control number aspects including synchronization communication 
weaving happens runtime join points dynamic message sends receives arriving object 
calton pu oregon graduate institute developing high performance high portability high adaptiveness os kernels :10.1.1.119.4056
components familiar functional elements os kernels 
aspects primarily optimizations invariants relate service 
weaver technology uses partial evaluation effectively specialize kernel code particular cases 
code structured expose join points places invariant ceases true 
karl lieberherr northeastern university developing techniques object oriented programs reusable brittle face common program evolution tasks 
component languages existing oops java 
succinct traversal specifications context objects provide aspect languages address variety crosscutting issues 
weaving aspect programs succinct traversal specification compile time oriented join point representation roughly speaking class graph 
weaving aspect programs context objects runtime oriented join points dynamic method function calls 
reflection metaobject protocols aspect oriented programming deep connection computational reflection metaobject protocols 
reflective system provides base language meta languages provide control base language semantics implementation 
meta languages provide views computation base language component see entire execution stack calls objects class 
cross cut base level computation 
aop terms meta languages lower level aspect languages join points hooks reflective system provides 
aop goal reflection powerful tool 
exploited connection great advantage aop 
prototyping aop systems start developing simple metaobject protocols component language prototype imperative aspect programs 
sense aspect programs need develop explicit aspect language support 
connection particularly evident section aspect languages provided layered top reflective architecture 
similarly loop fusion aspect described section implemented degree efficiency method combination facility clos metaobject protocol 
connection evident mentioned section demeter composition filters described reflective facilities 
program transformation goal program transformation similar aop 
want able write correct programs higher level language mechanically transform program ones identical behavior efficient performance 
style programming properties programmer wants implement written initial program 
properties added passing initial program various transformation programs 
separation similar spirit component aspect program separation 
notion component aspect new aop 
terms provide additional value system design 
transformations aspectual nature 
transformation programs tend operate terms syntax program transformed 
join points desired responsibility transformation program manifest 
possible layer kinds aspect programs top program transformation substrate separate piece implementation 
systematic analysis transformations developed community see providing different kinds aspect languages 
subjective programming natural question ask subjective programming aop vice versa 
believe aop subjective programming different important ways 
analogously way object oriented programming supports automatic selection methods message different classes subjective programming supports automatic combination methods message different subjects 
cases methods involved components aop sense localized generalized procedure 
possible program objectoriented style subjective style top ordinary procedural language significant tangling 
true aop 
aspects aop tend properties affect performance semantics components subjects subjective programming tend additional features added subjects 
believe subjective programming complementary compatible aop 
engineering disciplines engineering disciplines established aspectual decompositions 
example mechanical engineers static dynamic thermal models system part designing 
differing models cross cut different properties system compose differently 
similarly software development tools explicitly support particular aspectual decomposition tools omt methods programmers draw different pictures objects 

traced complexity existing code fundamental difference kinds properties implemented 
components properties system implementation cleanly encapsulated generalized procedure 
aspects properties implementation cleanly encapsulated generalized procedure 
aspects cross cut components cross cut system implementation 
analysis able develop aspect oriented programming technology supports clean abstraction composition components aspects 
key difference aop ap proaches aop provides component aspect languages different abstraction composition mechanisms 
special language processor called aspect weaver coordinate composition aspects components 
success working aop testbed applications 
aop conceptual framework helped design systems aop implementations proven easier develop maintain comparably efficient complex code written traditional techniques 
acknowledgments karl lieberherr lucas gail murphy generously provided extensive comments earlier drafts andy berlin geoff chase patrick cheung john gilbert arthur lee calton pu alex silverman marvin theimer mark yim discussions aop 
attendees aop friends meetings spent enjoyable days discussing aop related ideas mehmet aksit bergmans pierre cointe william harrison jacques malenfant satoshi matsuoka kim mens harold ossher calton pu ian simmonds tarr mark patrick steyaert bibliography 
aksit abstracting object interactions composition filters proc 
ecoop workshop object distributed programming pp 


bobrow demichiel common lisp object system specification sigplan notices vol 


chiba metaobject protocol proc 
conference object oriented programming systems languages applications oopsla austin 

consel program adaptation program transformation proc 
acm workshop strategic directions computing research 

harrison ossher subject oriented programming critique pure objects proc 
conference object oriented programming systems languages applications pp 
washington 

henry kafura software structure metrics information flow ieee transactions software engineering vol 
se 

matsuoka rbc reflective object oriented language run time kernel proc 
international workshop new models software architecture reflection meta level architecture pp 


irwin loingtier aspect oriented programming sparse matrix code xerox parc palo alto ca 
technical report spl february 

kiczales foil workshop open implementation xerox parc web pages www parc xerox com spl eca oi workshop foil main html 
kiczales black boxes hard reuse invited talk oopsla video tape web pages www parc xerox com spl eca oi gregor invite html 
kiczales des riv res art metaobject protocol 
book published mit press 

kiczales lamping open implementation design guidelines proc 
international conference software engineering forthcoming 

lieberherr silva adaptive object oriented programming graph customization communications acm vol 


lopes kiczales language framework distributed programming xerox parc palo alto ca 
technical report spl february 

lopes lieberherr abstracting process function relations concurrent object oriented applications proc 
european conference object oriented programming pp 
bologna italy 

lopes lieberherr ap case study mop purposes software evolution proc 
reflection pp 
francisco ca 

maeda lee open implementation analysis design proc 
symposium software reuse appear may 

mahoney functional visual routines xerox palo alto research center palo alto spl july 

massalin pu threads input output synthesis kernel proceedings th acm symposium operating systems principles pp 

matsuoka watanabe hybrid group reflective architecture object oriented concurrent reflective programming european conference object oriented programming pp 

mcclure model program complexity analysis proc 
rd international conference software engineering los alamitos ca 

mendhekar kiczales rg case study aspect oriented programming xerox parc palo alto ca 
technical report spl february 

okamura ishikawa distributed programming system multi model reflection framework proc 
international workshop new models software architecture reflection meta level architecture pp 


okamura ishikawa metalevel decomposition proc 
international symposium object technologies advanced software pp 


parnas designing software extension contraction proc 
rd international conference software engineering pp 


parnas hierarchical structure proc 
ifip congress pp 


parnas criteria decomposing systems modules communications acm vol 


pu optimistic incremental specialization streamlining commercial operating system proc 
th acm symposium operating systems principles sosp 

rational rational web pages rational software web pages www rational com 
rumbaugh blaha object oriented modeling design 
book published prentice hall 

palsberg evolution object behavior context relations proc 
fourth acm sigsoft symposium foundations software engineering pp 
san francisco 

smith reflection semantics procedural language lcs technical report cambridge ma 

steele common lisp language nd edition 
book published digital press 

wand friedman mystery tower revealed non reflective description reflective tower proceedings acm conference lisp functional programming pp 
acm 

watanabe yonezawa reflection object oriented concurrent language proc 
acm conference object oriented programming systems languages applications oopsla pp 
san diego ca 

yau stability measures software maintenance tse vol 
se 

reflective operating system concept implementation proc 
conference object oriented programming systems languages applications 

yonezawa watanabe object reflective concurrent computation proceedings acm sigplan workshop object concurrent programming sigplan notices agha wegner eds 
