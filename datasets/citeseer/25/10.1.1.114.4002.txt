proc 
acm sigmod san diego ca june appear programming platform generic model management sergey melnik university leipzig germany melnik db stanford edu model management aims reducing amount programming needed development metadata intensive applications 
complete prototype generic system high level operators manipulate models mappings models 
define key conceptual structures models morphisms selectors describe implementation 
specify semantics known model management operators applied structures suggest new ones develop new algorithms implementing individual operators 
examine solutions model management tasks involve manipulations relational schemas xml schemas sql views 

major goal model management reduce amount programming required development metadata intensive applications 
applications deployed context database design data integration data translation model driven website management data warehousing manipulate variety metadata artifacts called models relational xml schemas interface definitions mediator specifications website layouts mappings models sql views xslt transformations 
today model management tasks solved manually automated approach requires implementation effort due lack common programming platform 
database software engineering researchers studying individual aspects model management depth decades 
factoring common aspects model management subject active research 
major goal research develop set algebraic operators compose match merge generalize transformation operations utilized various metadata applications 
operators applied models mappings individual elements simplify programming metadata applications raising level abstraction 
operators generic sense utilized different kinds models scenarios 
model management tasks automated remain critical places human decision making needed address semantic permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
sigmod june san diego ca 
copyright acm 
rahm university leipzig germany rahm informatik uni leipzig de philip bernstein microsoft research redmond wa microsoft com heterogeneity 
operations inherently semiautomatic require feedback human engineer operator execution 
goal investigate metadata management done generic fashion key question raised 
detailed walkthroughs various model management problems examined address question :10.1.1.12.2729
contribution succeeded making programs executable 
prototype programming platform model management describe conceptual structures operators developed 
primarily prototype supports developers model management solutions providing high level programming environment 
addresses needs engineers deploy solutions offering graphical user interface gui receive feedback semiautomatic operations 
designing implementing prototype consciously focus simplicity 
investigate far go comparatively weak representation models mappings solve interesting class problems 
determine code needed basic useful model management system 
key contributions follows introduce conceptual structures representing models mappings 
explore simple class mappings models call morphisms suggest new structure called selector 
define semantics key model management operators conceptual structures introduce suggest new generic operators 
new algorithms implementing operators extract merge 
examine solutions important tasks involve manipulations relational schemas xml schemas sql views 
describe complete prototype implementation model management demonstrate extended embrace new kinds models 
organized follows 
section walk model management scenario motivate conceptual structures operator definitions sections 
section devoted implementation algorithms developed 
section describes prototype detail 
related reviewed section 
conclude section 
relational schema relational schema orders oid orderdate employee customer products pid pname brand orders oid orderdate employee customer shipdate products pid pname details oid pid quantity discount details oid pid quantity price orderdate employee customer product productid brand quantity discount orderdate employee customer product productid quantity price shipdate scenario illustrating propagation changes relational xml schema 
motivating scenario motivate operator definitions give scenario illustrated exemplifies patterns metadata intensive applications 
consider commerce needs supply purchase order data business partner 
data stored relational database relational schema 
purpose data exchange companies agree common xml schema 
correspondences elements schema depicted light gray lines 
schema differs terms structure naming 
relational schema undergoes periodic changes due dynamic nature business 
assume new version columns brand discount deleted columns shipdate added column renamed price 
changes highlighted bold need propagated xml schema 
change propagation described done follows 
changes introduced need detected need matched 
images elements deleted need removed 
xml schema counterparts added renamed columns need merged obtain 
steps intervention human engineer may required example decide new column added exchange schema part exchanged data omitted 
major portion mechanical automated 
notice procedure sketched applied reverse case xml schema modified changes propagated back relational schema 
instance pattern round modifications relational schema existing conceptual schema data may expressed er diagram 
key idea generic model xml schema xml schema management solve tasks high level abstraction concise generic script 
actual model management script implements solution change propagation scenario directly executable prototype 
script introduce major model management operators define subsequent sections 
explain individual steps script schematic representation solution shown 
rectangles labeled represent schemas 
arcs rectangles denote mappings schemas 
example correspondences schemas shown single arc rectangle 
bottom schema appear 
see needed recall expressed different schema languages 
new schema elements added way counterparts schema 
new elements need converted source schema language target language 
example attribute shipdate added relation orders needs converted subelement complex type xml schema 
step referred schema translation literature 
solution assume translation tool available operator say sql xsd takes input relational schema produces output xml schema mapping original converted schema elements 
schema mapping shown obtained sql xsd 
note schema desired result example may contain unneeded complex type details may differ structurally 
solution change propagation scenario expressed script operator 
match 
delete traverse domain 
extract traverse range 
invert invert invert 
merge 
invert invert invert 
return script defines generic operator takes parameters input including converted schema produces return values output 
explain script line line 
deleted converted added schematic representation solution change propagation scenario 
line schemas matched detect changes 
result mapping shown schematically 
speaking informally mapping connects equivalent elements 
new elements shipdate deleted elements brand matching counterparts remain unconnected 

line illustrates operators combined 
deleted elements identified expression domain elements matched deleted elements 
elements traverse mapping 
example deleted relational attribute brand traverses yields xml schema element brand 
images deleted elements removed operator delete 
result new schema subschema mapping describes relates 

line quite similar line 
new elements missing range traverse converted model example image relational attribute shipdate xml schema element shipdate obtained conversion 
subschema containing images new elements extracted operator extract returns mapping 
addition elements obtained traversal shipdate contains extra elements complex type encloses shipdate formed xml schema 
extra elements called support elements :10.1.1.12.2729

point subschema deleted elements contains added elements support elements 
schemas need merged obtain final result line 
explain section merging schemas driven mapping tells elements schemas specifically support elements correspond 
mapping shown arc connecting enclosed rectangles 
mapping obtained composing existing mappings invert invert invert 
get composition right mappings need inverted domains ranges mappings need swapped 

final result change propagation schema computed merge operator 
additionally operator returns mappings describe relates inputs merge 

step compute new version mapping part input 
need ensure change propagation script re applied source schema evolves 
obtained merging mapping essentially union mappings portion portion 
mappings obtained composition invert invert invert respectively 
union denoted plus sign 
notice script limited propagating changes relational schemas xml schemas 
fact reverse propagation problem solved script assigning original modified xml schemas relational schema 
course input parameters need obtained different converter xsd sql 
implementation intermediate result script examined adjusted human engineer graphical tool 
specifically result match line post processed remove incorrectly suggested matches add missing ones 
similarly merging line general semiautomatic process requires human feedback 
adjusting intermediate results operator compositions lines engineer decide additions deletions propagated 
discussion introduced operators informally 
operators effective usable developers semantics needs specified precisely 
goal semantics generic possible operators serve broad range model management tasks 
sections describe semantics defining structures operate describing operators 

conceptual structures model management applications deal wide range metadata artifacts include schemas relational xml schemas motivating scenario view definitions interface specifications represent formal descriptions models artifacts directed labeled graphs 
graph representation quite flexible accommodate virtually type models 
introduce additional structures called morphisms selectors 
morphisms binary relationships establish correspondences elements models nodes graphs 
example motivating scenario morphisms keeping track xml counterparts relational schema elements 
morphisms shown light gray lines 
third conceptual structure selector set elements models 
major benefit selectors various operations particular set operations typically produce non formed models directly applied selectors safely 
subsections define models morphisms selectors graph set structures 
describe equivalent representation relations 
easier define semantics operators follow 
models represent models directed labeled graphs 
nodes graphs denote model elements relations attributes relational schemas type definitions xml schemas clauses sql statements assume element uniquely identified object identifier oid 
directed labeled graph set edges source node edge label target node source label target nodes may sequentially ordered 
order captured ordinal property edges 
notation stands subject predicate object 
create table products pid int primary key pname varchar type column table column name products table type column column type name int pid type name type column int pid column varchar column type name products name varchar pname name type pname type sample model shown graph tuples conceptually graph viewed relation attributes oid oid oid literal integer optional attribute ordering form unique key 
node identifiers edge labels drawn set oids implemented integers pointers uris literals include strings integers floats data types 
type attribute defined union type oids literals 
consider example 
illustrates relational table products defined sql ddl top left represented graph bottom left corresponding set tuples right 
ovals graph denote oids rectangles denote literals 
nodes represent table products columns pid pname respectively 
node represents primary key constraint pid 
readability identifiers table column spelled names opaque ids 
order columns identified nodes determined values attribute fourth attribute table tuples 
general node ordering respect src node edge label determined sql query select src node edge label order example column 
formal specification rules encoding model graph called meta model 
model formed conforms meta model 
example illustrates graph encoding relational schemas uses specific edge labels name auxiliary nodes table varchar 
know relational meta model tell graph represents formed relational schema 
example know column sql type removing edge int graph yields model formed 
purposes unimportant meta model represented checks model conforms meta model 
details graph representation models remain opaque developer model management applications 
course representation visible developers model management operators 
developer aware representation implement custom non generic operator operator normalize relational schemas 
morphisms metadata intensive applications data integration warehousing tools graphical metaphor shown representing schema mappings 
mappings shown engineer sets lines connecting create table products pid int pname varchar schema xmlns complextype name product element name productid type xs int element name type xs string element name type xs string complextype schema morphism relational xml schema elements schemas 
call mappings schema morphisms 
morphism binary relation possibly overlapping sets oids set pairs drawn oid oid 
clearly morphism weaker representation transformation models sql view mapping languages expressions suggested :10.1.1.12.2729:10.1.1.12.2729
particular morphism carries semantics transformation instances conform models sql clause 
mappings expressed way change propagation scenario section 
morphisms advantages 
graph representation models morphism represent mapping different kinds models relational xml schema 
morphism inverted composed 
contrast sql view composed xslt transformation obvious way 
morphisms expressed binary relations implemented manipulated easily 
consider example 
top part shows relational schema xml schema 
morphism schemas depicted graphically arcs connect elements schemas 
bottom part shows morphism represented relation 
node identifiers correspond 
nodes denote respectively complex type product elements productid defined xml schema graph representation illustrated 
notice node connected multiple nodes connected 
various kinds model elements relations attributes participate morphism 
implementation may convenient annotate pairs additional properties 
example implementations match operator compute similarity values elements models 
values returned conveniently morphism pair additional similarity property 
define morphism conceptually binary relation oid oid may contain additional attributes required individual operators 
typically elements originate model elements 
selectors selector set node identifiers may originate single multiple models 
represented relation single attribute oid unique key 
shows example selector contains oids model depicted 
schema child tag tag complextype name product tag element tag name productid tag type int child name child type type child string name graph representation xml schema table column int varchar example selector 
operators motivating scenario introduced high level operators inputs outputs models morphisms selectors match delete traverse extract invert 
operators raise level abstraction manipulating metadata structures considering models morphisms time opposed node time primitives 
section define precise semantics operators structures defined section 
implementation covered section 
start presentation operator semantics section call primitive operators 
generic operators semantics defined formally relational algebraic manipulation relational representations section 
notational convenience express manipulation sql 
introduce powerful operators extract delete match merge semantics subtle subject ongoing research 
see operators subgraph copy agnostic kind models passed input semantics depends underlying meta model 
gui operators allow arbitrary transformations morphisms selectors engineer 
semantics constrained 
primitive operators table lists definitions primitive operators 
left column contains operator definitions expressed sql 
variables map hold model selector morphism respectively 
right column illustrates application operators simple examples 
primitive operators defined table standard set theoretic operators 
notice definitions expressed declaratively implementation operators functional combinations thereof optimized standard query optimization techniques 
operator domain extracts left elements morphism returns selector holds result 
operator restricts morphism smaller element domain specified selector passed second parameter operator 
invert operator swaps left right elements morphism 
compose operator defined natural join morphisms yielding morphism 
operator morphisms specified recursive sql definition 
id operator creates identity morphism selector 
operator subgraph extracts model subgraph induced nodes referenced literals attached nodes extracted example table literal pid contained input selector edge name pid returned part result 
extracted subgraph may formed model 
may fully connected may conform meta model 
set operators union difference intersection important primitive operators 
define models morphisms selectors corresponding set operations representation relations 
example union select union select note applying set operations formed models may produce model formed 
table definitions primitive operators definition example domain map select domain distinct map map map select map map invert map select map map map compose map map select distinct map map map map map map map recursive tc map union select distinct tc map tc map tc map select tc id select subgraph select invert compose id subgraph column int column type int name pid model primitive operators copy 
operator returns selector contains nodes denote model elements model meta model tables columns relational meta model 
example model operator yields selector filters auxiliary nodes table graph encoding 
frequently important ensure node identifier exactly model 
furthermore unique node ids possible refer model elements model boundaries 
reasons operator copy create copy model selected node ids replaced new uniquely created ids 
definition copy function generates unique oid call function ifnull returns null value 
output morphism bijection 
copy select select ifnull ifnull left outer join return derived operators derived operators functional combinations operators 
example consider definitions shown 
operator range map return domain invert map operator map selector return invert invert map selector operator traverse selector map return range map selector operator restrict map return map range morphism obtained domain inverted morphism combining primitive operators domain invert table 
similarly specified terms operator inverting input morphism applying inverting resulting morphism 
third operator traverse motivating scenario locating images elements deleted relational schema 
traverse morphism domain restricted selector range restricted morphism returned output 
operator restrict confines domain range morphism elements models 
notice definitions derived operators expressed declaratively allowing implementations optimized 
extract delete extracting deleting portions models operations heavily deployed metadata applications 
perform operations propose generic operators extract delete 
operator extract applied follows extract 
inputs formed model selector identifies set nodes extracted 
output model satisfies properties contains selected nodes ii formed model iii equally expressive model represent information iv minimal model satisfies iii 
condition ii may require unselected support elements included 
condition iii characterized formally terms dominance information capacity suggested 
morphism injective function model element counterpart general model may contain implicit information transitive relationships model elements 
cases result extract may need information explicit 
example consider class diagram classes explicit subclass definitions subclass subclass due condition iii extract return class diagram defined subclass example illustrates extraction rich operation semantics implementation may non trivial 
conceptually semantics operator extract realized algorithm 
create closure model implicit information represented explicitly 

assign temporary selector 

extend elements needed satisfy conditions ii iii 

apply fixpoint reached change 

extract subgraph induced subgraph 

obtain cover minimal model semantically equivalent 

return copy result extraction 
notice operator copy section returns model mapping 
deleting selected portion model defined extraction unselected portion 
define operator delete return extract note nodes represent model elements members impact result deletion due applying match purpose match uncover models correspond 
takes models input returns morphism 
match inherently heuristic 
previous literature match offer formal definition constitutes correct output morphism :10.1.1.16.700:10.1.1.16.700
general matching schemas requires information schemas fully automated 
human engineer needs review adjust suggestions produced automatic procedure post processing step iteratively 
merge combine models utilize operator merge applied merge map 
input models formed merge produce formed model expressive input models capable representing information contained models ii minimal deleting element model expressive input models 
third parameter merge morphism map describes elements equivalent merged single element output morphisms identify counterparts elements merged model conceptual definition merge say naming ordering model elements 
example prescribe attribute names take precedence way 
details considered part semantics merge inherently involve user decision making 
discussed section 
implementation section discuss implementation conceptual structures operators 
relations section standard mathematical representation graphs convenient implementation structure 
graph representation classical relational data model node identifiers constants shared models 
chose relational approach object oriented simplify implementation specification operators done sql :10.1.1.12.2729
relational graph model resource description framework rdf 
encoding relational schemas xml schemas sql views graphs approach 
meta model relational schemas 
example model elements relational schema comprise tables columns constraints table contains ordered list columns type tables columns carry names constraints specialized primary key unique key non null referential constraints referential constraint refers columns foreign key primary key graph representation xml schemas builds xml dom 
graph representation sql views deploy comparable parse tree produced sql processor see appendix 
clauses statements alias definitions functional terms represented separate nodes 
view graph replicate names attributes relations schemas refers directly respective nodes schema graphs 
output primitive operators defined uniquely section operator implemented differently meta model 
example relational schemas implementation specified follows select type table column nonnull extract delete describe implementation extract delete operators focus relational schemas 
consider schema shown left 
primary key constraints pid depicted horizontal bars underlining respective attributes 
referential constraint shown line connecting products pid details pid 
assume graph representation constraints denoted nodes respectively 
brevity henceforth refer graph nodes representing attributes simply names 
illustrates examples extraction deletion 
output morphisms omitted compactness 
example demonstrates extraction attribute pname yielding schema 
condition ii section ensures formed relational schema attribute pname belongs relation type specification 
applied relational schemas condition iii requires extracted schema contain constraints original schema affect selected elements 
example extracting attribute products pid causes primary key constraint extracted yielding schema 
dropping violate iii allow attribute pid contain duplicates original schema represent information 
analogously extracting details pid schema needs preserve referential constraint turn requires presence products pid primary key constraint 
condition iv prevents attributes appearing 
prototype implementation operator extract relational schemas conceptual algorithm section 
steps closure cover equality assignments 
step algorithm implemented follows contains constraint add attributes participate constraint definition 
products pid int pname varchar details int pid int quantity int price real extract products pid products pid int extract details pid products pid int details pid int delete products pid extract products pname details products products pname varchar pid int extract extract details pid int quantity int price real examples extraction deletion relational schema output morphisms shown 
contains attribute extended include enclosing relation type definition referential constraint non null constraint primary key unique key definition attributes participating key definition contained schemas illustrate extraction nodes denote constraints 
illustrate case consider relation name dob addr unique key constraint name dob 
algorithm extract name yields name 
unique key constraint included dob selected 
notice condition iii extract impossible delete constraint relational attribute deleting attribute definition delete primary key attribute participating referential constraint deleting foreign key attribute 
example consider schema 
selecting products pid constraints sufficient deleting attribute details pid selected 
flexible operators allow deletions providing fewer consistency guarantees extract delete 
extraction xml schemas implemented analogously algorithm 
type xml schemas treated similarly referential constraints relational schemas 
currently derived types supported 
match prototype match operator takes input models kind relational schemas returns output morphism 
implemented match similarity flooding sf algorithm graph matching algorithm 
sf algorithm exploits structure graphs matched performs especially detecting differences versions schema case motivating scenario metadata applications 
sf algorithm takes input graphs set initial similarity values nodes graphs expressed weighted binary relation seed 
pair seed carries similarity value zero 
fixpoint computation algorithm iteratively propagates initial similarity nodes surrounding nodes intuition neighbors similar nodes similar 
output algorithm weighted binary relation 
section defined morphism binary relation 
include weights morphism add third attribute sim holds similarity value pair nodes 
primitive operators section ignore extra information 
implement operator match operator match seed multimap seed multimap restrict multimap map multimap return map multimap operator encapsulates sf algorithm 
explained multimap returned algorithm may contain large fraction cross product nodes needs filtered 
operator implements filter suggested exploits property 
addition filtering restrict result operator nodes represent model elements operator restrict section 
input morphism seed typically obtained auxiliary operator computes similarities literals number grams common 
alternatively seed obtained composition morphisms 
seed omitted invoked default 
match implementation returns filtered morphism map unfiltered multimap 
morphism map adjusted engineer graphical tool invoking operator outputs match map map multimap 
graphical tool allows engineer inspect candidate matches suggested multimap 
script implementing match operator easily adapted call external schema matchers may deploy thesauri analyze schema annotations mine samples instance data reuse previous match results reduce manual post processing effort 
merge discuss implementation merge operator example 
top sample models get merged output morphisms omitted 
morphism map depicted directed arcs 
direction arc establishes preference model elements collapsing elements target element kept output source element discarded 
example attribute po orderdate kept order discarded 
preferences part semantics merge operator section essential practical deployment 
input morphism map contains extra attribute dir hold direction arcs 
merge executed human engineer chance specify arc direction graphical tool invoking operator 
bottom depicts graphs 
brevity arc labels type edges literals omitted compare 
node corresponds relation order denotes order morphism map 
implement merge operator developed algorithm called describe 
similar order cname caddr po amount orderdate cust customer algorithm consists conceptual steps node renaming graph union conflict resolution 

step graph nodes blunt ends map renamed targets sharp ends graphs 
result renaming shown bottom left 
nodes graphs renamed respectively 

second step graph union set union sets edges obtain graph depicted bottom right 
graph formed model node represent attribute cust customer attribute different relations order cust 

conflicts resolved third final step algorithm 
conflict eliminated deleting edge edge effectively making customer attribute relation cust relation order merged schema 
choice human engineer 
step step algorithm requires human feedback 
partially automate conflict resolution developed heuristic 
observe natural keep attribute customer relation cust move order 
generalize observation track origin edge merged graph assign edge tag indicates nodes incident edge source node map target node map possible cases assuming source target nodes map disjoint 
example edge obtained renaming tagged target node source node map 
analogously edge tagged appear map 
knew edges preferred edges conflict eliminated asking engineer 
examined variety merge problems context relational schemas xml schemas sql views established empirically total order tag variations helps resolve conflicts automatically way matches human intuition 
order shown middle right 
intuitively edges unchanged nodes oo order orderdate caddr amount cust customer priority order conflict resolution heuristic oo merging sample schemas rejected conflict highest priority 
similarly edges incident preferred incident 
steps realized follows 
edges merged graph sorted decreasing priority 
iteratively edge taken top sorted list appended initially empty graph appending edge violates model consistency rejected 
edges appended engineer examines result choices heuristically necessary adjustments 
description algorithm factored important aspect ordering nodes parent 
illustrate reestablish correct order merged schema consider 
node denoting relation po renamed merging node original move attributes amount orderdate position merged schema orderdate overrides attribute relation order remain position 
schema resulting order attributes orderdate caddr amount 
algorithm summarized algorithm map empty list empty graph edge rename nodes map assign tag append sort edges decreasing tag priority maxn select max empty take edge top tag maxn literal continue loop exists replace min append return number maxn obtained highest existing value ordinal property compare section 
move nodes hanging renamed nodes positions 
test renamed nodes check corresponding edge tag starts 
literals belonging renamed nodes removed ensure relation corresponding node merged graph named order po 
function checks appending new edge causes conflict 
algorithm various kinds models implementing function appropriately 
prototype deploy algorithm merging relational schemas xml schemas sql views 
example conflict detection relational schemas checks relations contain relations attributes attributes shared relations merge operator implemented follows operator merge map map select map dir union select map dir map id map id copy return invert invert recall merge return morphisms input models output model 
applying obtain merged model compute morphisms 
selector contains source nodes map 
example obtain union domain restricted map maps renamed node new name identity morphism renamed nodes 
copied node ids output model unique morphisms composed invert range algorithm invent new model elements establish new relationships existing elements 
operator merge implemented reorganize schemas resolve structural conflicts 
example consider xml schemas element elements firstname lastname 
merging ideally create new complex type name subordinate elements firstname lastname 
currently working addressing structural conflicts way merges intermediate schemas describing desired structural transformations 
section postulated semantic conditions merge satisfy 
implementation automatically ensure condition holds 
example engineer decide override non null constraint attribute schema primary key constraint schema case output model expressive constrained 
flexibility desirable practice working restrictive version merge guarantees satisfy ii 

prototype section describe prototype called detail 
architecture shown 
central component interpreter executes scripts 
interpreter run command line invoked programmatically external applications tools 
main task orchestrate data flow operators 
operators defined providing native implementation means scripts 
example native operator reads text document containing definition relational database creates graph representation exports graph back text 
similarly native operators load store arbitrary graphs sql dbms 
native operators defined scripts statements alias java class name operators implemented natively include primitive operators section operators launch guis editing morphisms selectors musical main theme returns number times 
native operators scripts compose domain gui sql dbms sql tables interpreter graphs file system schema translation conversion operators operators 
operators range match merge implemented scripts previous sections 
specification commonly native derived operators grouped single script utilized scripts include statements 
interpreter provides debugging facility allows examining execution traces complex scripts supports flexible handling input output parameters operators 
example operator returns argument implementation operator match subsequently script section tacitly ignored 
minimizing amount gui programming needed visualizing various kinds models technique 
require operator output textual representation model data structure describes terms text relate model elements graph nodes 
way schema elements shown enclosed boxes associated graph nodes representing elements gui operators exactly way relational schemas sql views 
current stage prototype supports basic features sql ddl xml schema rdf schema sql views preliminary form uml 
introduce new modeling language prototype steps required 
import export operators need provided ensure lossless round native format graphs back 
second callbacks need implemented supporting operators extract 
code breakdown prototype shown 
large share implementation effort due graph apis responsible memory representation manipulation graphs morphisms database support 
key generic model management functionality comprises lines code 
includes interpreter primitive operators implementations generic gui operators 
non generic part essentially divided code needed support sdl ddl xml schemas sql views 
smallest portion code due converters xsd sql sql xsd view morphism morphism view 
compactness converters due fact operate internal graph representation expressive queries 
total amount code prototype lines 
total scripting code files range match merge architecture prototype db graph apis generic mm sql views xml schema sql ddl converters code breakdown prototype lines code developed far measured hundreds lines 
scenarios shown run seconds mhz laptop mb memory 
scenarios implemented include reintegration scenario context version management iterative merge warehousing scenario extract subset schema sufficient answer set queries view reuse scenario 
due space limitations 
view reuse scenario appendix aspects illustrates views merged presents guis prototype demonstrates operators morphism view view morphism 

related individual aspects model management studied extensively literature voluminous cite 
highlight key aspects 
previous schemas typically represented graphs nodes denote classes entities participate various semantically rich relationships functional dependencies approach graphs syntactic structures semantics opaque operators :10.1.1.12.2729
morphisms varying names systems schema correspondences clio 
knowledge selectors introduced 
past papers model management reified mappings models 
surprises leverage get simple morphisms 
morphisms clearly limits 
appendix presents scenario sql views reified mappings describe instance transformations 
reified mappings add complexity scripts operator implementations 
general treatment reified mappings subject ongoing 
operators discussed include diff enumerate apply :10.1.1.12.2729
explained implemented operator diff extraction unmatched portion input models 
operators apply enumerate invoked passing selector native java code 
change propagation script section alternative realization round trip engineering scenario :10.1.1.12.2729
substantial effort devoted schema matching 
minimize amount manual post processing existing schema matching tools deploy various techniques surveyed machine learning prototype structural matcher available download authors website :10.1.1.16.700
definition merge operator influenced schema join operation 
schema merging addressed 
algorithms suggested exploit rich relationship types available algorithm developed take ordering model elements account 
heuristic deployed initial step challenging research issue semiautomatic conflict resolution 
schema translation different modeling languages explored 
techniques implementing generic operator generating model 
currently general approach converter implemented custom non generic operator 
knowledge generic operators extract delete investigated implemented 
algorithm extract inspired discussion schema merging 
operators syntactic just conceptual structures expressed graph transformations 
focusing syntax allows operators match merge implemented generic fashion different kinds models 
understanding semantics operators crucial assessing correctness model management scripts 
example effect applying syntactic operators schemas ultimately needs expressed terms operators instances schemas 
conditions iv extract operator section ii merge section reflect semantics operators limited degree 
algebraic model theoretic semantics model management structures operators considered detail new largely unexplored area 
currently working instancebased characterization morphism semantics building approach 

programming platform model management implements generic operators suggested far literature 
explored morphisms selectors introduced novel generic operators 
discussed operator semantics algorithms developed implementing 
showed introducing new model type sql ddl schemas prototype requires moderate programming effort brings large new class model management tasks reach 
main draw 
solve practical problems model management operators 

solutions require relatively small amount code 

get far relatively weak representation models mappings 
implementation experience backed depth investigation individual operations researchers suggests question raised positive answer generic metadata management fact feasible 
handle subtle complex cases solve large class non trivial problems offering useful programming platform 
resolving debate full extent done writing scripts substantial number real applications demonstrating 
hard challenges remain open 
examples providing meaningful semantic constraints operators proving certain syntactic transformations play rules 
salient non technical challenge acceptance developer morphism sources community 
new programming paradigm willingness engineers learn new way approaching old problems critical success generic model management 

acknowledgments gio wiederhold anonymous reviewers insightful comments 
grateful serge abiteboul paolo atzeni stefano ceri alon halevy martin kersten ren miller rachel pottinger gerhard weikum helpful discussions 
supported part database group microsoft research 
view reuse scenario appendix examine scenario illustrates operators addressing typical data warehousing task 
consider adding new source data warehouse assume similar existing source 
morphism source schemas shown 
existing sql view vs describe instances populate view vs depicted middle relevant portion warehouse schema seen create view clause 
goal reuse view vs importing data creating view vs 
conventionally problem solved manually involving tiresome error prone renaming attribute relation names vs similarities 
prototype obtain vs script 
match 
view morphism vs 
invert 
vs morphism view 
map match vs vs invert 
vs merge vs vs map match determine correspondences schemas 
seen elements remain unmatched department matched elements companies name companies 
step extract morphism view definition vs non generic operator view morphism 
example morphism omitted figures brevity associates attribute personnel pname attributes employee employee compute morphism composition 
step template view definition vs generated non generic operator morphism view 
shown vs vs merging sql views vs left 
morphism contains information values attribute personnel affiliation obtained companies name companies 
functional term fct generated vs placeholder 
step template vs existing view vs matched seed morphism 
resulting morphism minor manual corrections depicted 
step view definitions merged obtain vs shown right 
notice function symbol fct correctly replaced nested concatenation fct left unmatched clause borrowed vs attribute correctly replaced companies cid consultants cid 
achieve morphism map passed merge extended include 
heuristic deployed algorithm produces vs fully automatically due relative simplicity input views 

bernstein model theory generic schema management 
proc 
dbpl pp 

atzeni torlone management multiple models extensible database design tool 
pp 
edbt 
bergamaschi castano semantic integration semistructured structured data sources sigmod record pp 

berlin motro database schema matching machine learning feature selection 
pp 
caise 
bernstein applying model management classical meta data problems 
pp 
cidr 
bernstein halevy pottinger vision management complex models 
sigmod record pp 

bernstein moderator jarke rahm wiederhold generic metadata management feasible 
panel pp 
vldb 
bernstein carlson pal sanders microsoft repository version open information model 
inf 
systems 
bernstein rahm data warehousing scenarios model management 
pp 
proc 
intl 
conf 
conceptual modeling er 
bowers modeling conformance flexible transformation data models workshop transformation semantic web july 
buneman davidson theoretical aspects schema merging 
pp 
edbt 
claypool rundensteiner framework modeling heterogeneous database transformations 
cluet delobel sim mediators need data conversion 
pp 
sigmod 
davidson buneman semantics database transformations 
thalheim libkin eds semantics databases lncs pp 

hull relative information capacity simple relational database schemata 
siam computing pp 
aug 
madhavan bernstein domingos halevy representing reasoning mappings domain models 
pp 
aaai iaai 
melnik garcia molina rahm similarity flooding versatile graph matching algorithm application schema matching 
icde 
melnik rahm bernstein 
programming platform generic model management extended version 
technical report leipzig university 
available dol uni leipzig de pub 
miller ioannidis ramakrishnan schema equivalence heterogeneous systems bridging theory practice 
information systems pp 

mitra wiederhold kersten graph oriented model articulation ontology interdependencies 
edbt 
popa miller hern ndez fagin translating web data 
vldb 
pottinger bernstein creating mediated schema initial correspondences 
ieee data engineering bulletin sep 
rahm bernstein survey approaches automatic schema matching 
vldb journal 
