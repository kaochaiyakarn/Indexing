simple generation static single assignment form john aycock nigel horspool department computer science university victoria victoria canada csc uvic ca cfl springer verlag 
static single assignment ssa form program provides data flow information form compiler optimizations easy perform 
new simple method converting ssa form produces correct solutions control flow graphs produces minimal solutions reducible ones 
timing results show despite simplicity algorithm competitive established techniques 
static single assignment ssa form program representation variables split instances 
new assignment variable generally new definition variable results new instance 
variable instances numbered variable may easily linked back single definition point 
gives example ssa form straight line code 
name suggests ssa reflects static properties example value dynamic property static property instances labelled refer value hold 
read read fig 

ssa form straight line code 
problem arises join points control flow paths merge 
multiple definitions variable may reach join point result violation single assignment property 
problem illustrated fig 
definition final instance associated 
problem imaginary assignments introduced join points trivial oe functions 
oe function argument incoming read print 
read oe print fig 

oe 
control flow path kth argument oe function incoming value kth path 
shows inserted oe function 
initial assignment added instances corresponding definition 
oe functions inserted basic block considered executed simultaneously execution code block 
program converted ssa form executed real machine 
ssa form 
proponents ssa cited advantages 
variable dominated definition variable 
optimization algorithms may efficient advantage property 

ssa chains simpler store update def chains 

def chains may cause optimizations missed caught ssa algorithm 

distinct uses variable source program reusing loop variable purpose example distinct variables ssa form 
may allow optimizations performed 
converting ssa form ssa form conversion ssa form closely coupled dominance 
definition variable dominates may linked back single definition 
join points definitions may reach oe function needed 
oe functions needed definition stops dominating dominance frontier 
basis algorithm cytron far cited method converting ssa form 
idea precompute dominance frontiers information place minimal number 
oe functions definitions dominance frontier process repeated oe functions placed basic blocks iterated dominance frontier 
argument minimal number oe functions required inserted optimizations missed 
forms minimal ssa exist liveness variables account consider 
converting ssa form revisited appel gives gentle ssa form 
begins suggesting wasteful obviously correct method converting ssa really crude approach split variable boundary put oe functions variable block 
page dominance frontier algorithm cytron inserts minimal number oe functions 
appel presentation raises question minimal number oe functions discovered starting really crude approach iteratively deleting extraneous oe functions 
algorithm algorithm finds set oe functions variable reducible controlflow graph 
intuitively reducible control flow graph multiple entries loop 
important class control flow graphs modern languages oberon java admit reducible control flow graphs empirical evidence suggesting people tend write programs reducible control flow graphs 
assume unreachable nodes control flow graph algorithm derive correct solution case 
algorithm proceeds phases rc phase 
apply appel really crude approach quoted 
minimization phase 
delete oe functions form vi oe vi vi vi delete oe functions form vi oe vx vx xk fi jg replacing occurrences vi vj repeat minimizations possible 
phases determined set oe functions insert pass control flow graph renames instances variables ssa forms 
unique algorithm mentioned 
example shown figs 

original program listed fig 
result rc phase fig 

figures show sets oe functions converging respectively fig 
gives final result 
normally program variables renamed minimization phase renamed earlier illustrative purposes 
repeat write break repeat oe oe write oe oe oe oe break oe oe oe oe fig 

rc phase 
correctness section prove correctness algorithm 
correct mean algorithm produces set oe insertions possibly improper superset minimal solution 
note proof oe oe oe oe oe oe oe fig 

minimization phase convergence oe oe oe oe oe oe theta lambda fig 

minimization phase convergence repeat oe write break oe fig 

minimization phase renaming 
requires control flow graph reducible algorithm produces correct necessarily minimal solution graphs 
lemma 
rc phase produces correct solution 
proof 
rc phase places oe functions basic blocks minimal placement oe functions contained initial placement completion rc phase 
ut lemma 
minimization phase produces correct solution 
proof 
transformations performed phase 
deleting vi oe vi vi vi 
safely deleted corresponds assignment vi vi predecessor edges effect program state 
minimal solution contain clearly superfluous 

deleting vi oe vx vx xk fi jg replacing occurrences vi vj 
oe function assignment corresponds set assignments fvi vi vi 
vi vi effect ignored 
case vi vj means vi value vj points program due single assignment property 
safe replace vi vj vi ole alternate name vj part minimal solution 
ut theorem 
algorithm produces correct solution 
proof 
lemmas algorithm remove needed oe functions arrive possibly improper superset minimal solution 
ut proof minimality section prove reducible control flow graphs algorithm produces minimal placement oe functions 
proof draws reduction control flow graphs 
briefly summarize reduction transformation removal self edge transformation allows node eliminate node unique predecessor initial node 
construct instance relationship graph ir graph directed graph derived control flow graph shows relationships instances variable ssa form variable gives rise different 
instance vi variable node ir graph placed edges purposes proof avoid critical edge problem cited 
ir graph purposes proof algorithm 
oe function vi oe vx vx add edges ir graph vx vi vx vi 
vi instances defined terms oe functions 
call definitions correspond left hand sides oe function assignments real definitions 
instance vi corresponds real definition requires special attention case 
vi live basic block boundary 
case corresponds temporary instance created killed single basic block vi appear oe function 
final definition cited oe functions successor blocks 
vi appear disconnected node ir graph may deleted taken account algorithm doesn appear oe function 
vi irrelevant oe placement algorithm dominance frontiers definition giving rise vi dominates set successor instructions doesn appear dominance frontier result definition 
case 
vi live basic block boundary 
vi appear argument oe function 
ir graph vi node appear root graph degree zero 
set roots ir graph 
may take advantage graph reduction techniques augment ir graph supersource node vs root ir graph edge element supersource shown inert respect proof 
case 
vi definition reaches exit point control flow graph cross basic block boundaries 
case vi appear oe function appear disconnected node ir graph may deleted 
rc phase basic blocks contain oe function ir graph structure ape structure control flow graph 
example fig 
shows control flow graph code fig 
corresponding ir graph fig 

ir graph nature minimization phase apparent 
deleting vi oe vi vi vi equivalent applying ir graph 

deleting vi oe vx vx xk fi jg replacing occurrences vi vj equivalent applying possibly combination ir graph 
consider liveness include uses arguments oe functions 
vs fig 

control flow ir graphs 
fig 

graph 
structure ir graph important lemma 
ir graph control flow graph 
proof 
assume control flow graph reducible ir graph 
ir graph contain graph illustrated fig 

edge ir graph arises ways 
edge results paths control flow graph 
edge graph came control flow graph control flow graph yielding contradiction 

edge added supersource vs vs edges edge vs form part graph connect vi node part cycle graph 
definition ir graph construction vi nodes vs connect edges part cycle 
ut considering reducible control flow graphs ir graph initially contain graph lemma 
furthermore graph introduced reduction 
means reducible transformations single node vs comprise finite church rosser transformation 
means applied graph transformations possible unique graph result case single node vs furthermore unique result depend order applied 
freedom choose ordering reductions corresponds manner algorithm operates 
parse reducible flow graph ordered sequence reductions nodes reductions applied 
select full parse ir graph may partitioned 
part performs reductions possible eliminating root nodes 
final part applies transforms remainder ir graph reducing single node vs pi refers set nodes reduced partition definition pi 
vs pi vs eliminated 
lemma 
minimization phase computes pi gamma proof 
transformations performed minimization phase remove vi instances resulting oe functions remove vi instances corresponding real definitions 
applying subject proviso elements deleted 
minimization phase repeats transformations possible computing pi gamma ut lemma 
pi gamma iterated dominance frontier df 
proof 
rc phase inserts oe function basic block vi resulting oe function correspondence node control flow graph 
definition pi gamma contain vi real definitions may discuss ir graph nodes pi gamma control flow graph nodes df interchangeably 
pi gamma df 
reducible flow graph thought decomposed regions 
region header node region dominates nodes region save 
regions elements headers eliminated remains set nodes strictly dominated elements words left dominance frontier df 
nodes df headers regions reduced 
inductively repeating process get iterated dominance frontier df pi gamma suppose basic block df corresponding ir graph node vb pi gamma means vb eliminated earlier reduction parse 
happen vb strictly dominated node ir graph 
df contradiction 
ut theorem 
algorithm computes minimal oe function placement reducible control flow graphs 
proof 
lemmas algorithm computes iterated dominance frontier set real definitions iterated dominance frontier shown minimal oe function placement 
ut improvements basic algorithm algorithm improved improvements immediately apparent improvement 
pass rc phase 
inserting oe functions rc phase instances variable coming predecessor blocks known complete processing block requires predecessor blocks processed 
best case depth ordering blocks may require backpatching information back edges 
slight change numbering fixes 
instance variable coming block bi vi block may completely processed simply knowing block numbers predecessors information available anyway 
means rc phase run linearly regardless blocks ordered 
improvement 
mapping table 
na ive implementation minimization phase literally renamed instances vi vj deleting oe function clearly wasteful 
mapping table map vi vj variable instances oe functions filtered table 
technique known different names equivalence problem set merging disjoint set union 
improvement 
basic blocks single predecessors 
oe functions deleted immediately 
block single predecessor join point oe function need placed rc phase 
sight improvement incompatible improvement assumes oe functions block 
combined improvement difficulty overcome 
finding block single predecessor mapping table simply primed accordingly creating oe function 
timing results implemented algorithm improvements drop replacement cytron algorithm gardens point modula compiler 
timings conducted mhz pentium ram clock granularity ms running debian gnu linux version 
minimize transient timing errors ran test times times reported arithmetic mean runs 
shows time algorithms take sample source files comprising approximately lines code 
code modula compiler front 
files algorithm competitive faster cytron 
overlooked fact ssa generation algorithms operate vacuum 
revealing look algorithm context 
shows compared entire compilation algorithm takes insignificant amount time total time include time taken compiler front 
ssa generation time remotely dominant factor compilation time simple algorithm may reasonably 
related section survey methods converting ssa form 
methods categorized largest class control flow graph cfg operate reducible 
cytron minimization time ms fig 

timing results 
total time minimization time ms fig 

results context 
reducible cfgs generate ssa form pass structured controlflow graphs subset reducible control flow graphs delicate placement oe functions 
describe extend method reducible control flow graphs require dominator tree 
cytron lowry zadeck oe functions employ heuristic placement policy interval structure control flow graph similar rosen wegman zadeck 
interesting look patterns algorithm minimization phase 
generating ssa form correct second order effects created redundancy elimination 
cfgs cytron method generating ssa form described sect 

cytron ferrante refined method runs linear time 
johnson pearson pingali demonstrate conversion ssa form application program structure tree decomposition controlflow graph single entry single exit regions 
claim graph representation allows avoid areas control flow graph contribute solution 
genesis ssa form shapiro saint 
conversion algorithm finding equivalence classes variables walking control flow graph 
sreedhar gao devised linear time algorithm oe function placement dj graphs data structure combines dominator tree information data flow program merges 
algorithms control flow graphs described subsection proven yield minimal placement oe functions 
number avenues 
determine time complexity algorithm matter practice evidence suggesting algorithms rarely achieve worst case performance 
second algorithm may extendible forms minimal ssa pruned ssa form places oe function variable live point 
third currently throwing away useful information 
algorithm cytron compare algorithm sect 
determines oe functions placed 
algorithm determines course knows completion arguments oe functions cytron algorithm know variable renaming 
possible faster simpler variable renaming algorithm result 
applications algorithm particularly suitable applications simple algorithm preferred baggage extra data structures 
argue extra information computed algorithms fact cytron suggest 
compilers employing ssa iterated dominance frontier information 
optimizations necessitate re generation minimal ssa form 
example re minimization required ssa partial redundancy elimination algorithm suggest re running oe insertion algorithm 
optimizations may force ssa re generation changing structure control flow graph 
algorithm may useful situations 
new simple method generating ssa form finds minimal oe function placement important class control flow graph reducible ones finds correct placement control flow graphs ones 
timings indicate competitive prevalent method generating ssa form especially viewed context 
acknowledgments john gough gardens point modula compiler 
ifip working group number helpful comments particular bob morgan suggested applying algorithm re minimization 
anonymous referees helpful comments 
supported part national science engineering research council canada 

aho sethi ullman 
code optimization finite systems 
design optimization compilers ed 
prentice hall pp 


alpern wegman zadeck 
detecting equality variables programs 
proceedings fifteenth annual acm symposium principles programming languages pp 


appel 
ssa functional programming 
acm sigplan april pp 


appel 
modern compiler implementation java 
cambridge 


single pass generation static form structured languages 
acm toplas november pp 


briggs harvey simpson 
static single assignment construction version 
unpublished document 


choi cytron ferrante 
automatic construction sparse data flow evaluation graphs 
acm popl pp 


chow chan kennedy 
liu lo tu 
new algorithm partial redundancy elimination ssa form 
acm pldi pp 


cytron ferrante 
efficiently computing oe nodes fly 
acm toplas may pp 


cytron ferrante rosen wegman zadeck 
efficiently computing static single assignment form control dependence graph 
acm toplas october pp 


cytron lowry zadeck 
code motion control structures high level languages 
proceedings thirteenth annual acm symposium principles programming languages pp 


fischer 
efficiency equivalence algorithms 
complexity computer computations miller thatcher eds 
plenum press 

hecht 
flow analysis computer programs north holland 

hecht ullman 
flow graph reducibility 
siam journal computing june pp 


hopcroft ullman 
set merging algorithms 
siam journal computing december pp 


johnson pearson pingali 
program structure tree computing control regions linear time 
acm pldi pp 


knuth 
empirical study fortran programs 
software practice experience pp 


knuth 
art computer programming volume fundamental algorithms addison wesley 


program optimization theory practice 
conference programming languages compilers parallel vector machines pp 


morgan 
building optimizing compiler digital press 

muchnick 
advanced compiler design implementation 
morgan kaufmann 

rosen wegman zadeck 
global value numbers redundant computations 
proceedings fifteenth annual acm symposium principles programming languages pp 


shapiro saint 
representation algorithms 
rome air development center tr volume ii september 

sreedhar gao 
linear time algorithm placing oe nodes 
proceedings second annual acm symposium principles programming languages pp 


tarjan 
efficiency linear set union algorithm 
jacm april pp 


ullman 
fast algorithms elimination common subexpressions 
acta informatica pp 


wegman zadeck 
constant propagation conditional branches 
acm toplas april pp 

