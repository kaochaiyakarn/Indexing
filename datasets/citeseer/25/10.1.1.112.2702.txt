approximating data stream querying estimation algorithms performance evaluation sudipto guha labs research sudipto research att com obtaining fast quality approximations data distributions problem central interest database management 
variety popular database applications including approximate querying similarity searching data mining application domains rely quality approximations 
histogram approximation popular method database theory practice succinctly represent data distribution space efficient manner 
place problem histogram construction perspective generalize raising requirement finite data set known data set size 
consider case infinite data set data arrive continuously forming infinite data stream 
context single pass algorithms capable constructing histograms provable quality 
algorithms fixed window variant basic histogram construction problem supporting incremental maintenance histograms 
proposed algorithms trade accuracy speed allow graceful tradeoff application requirements 
case approximate queries infinite data streams detailed experimental evaluation comparing algorithms applicable techniques real data sets demonstrating superiority proposal 
obtaining fast quality approximations data distributions problem central interest database management 
variety database applications including approximate querying similarity searching data mining application domains rely quality approximations 
popular way database theory nick koudas labs research koudas research att com practice approximate data distribution means histogram 
histograms approximate data distribution fixed amount space certain assumptions strive minimize error incurred approximation 
problem histogram construction profound importance attracted lot research attention 
fundamental requirement histogram construction algorithm approximate underlying data distribution provably way efficient terms running time 
typical assumption constructing histograms data set approximated finite known size size easily derived performing single pass finite data set 
problem histogram construction datasets known size received lot research attention optimal lot heuristic solutions exist 
refer problem classic histogram construction problem 
number applications benefit solutions classic histogram problem including query optimization pi approximate queries data warehouses time series similarity queries yf 
place problem histogram construction perspective generalize raising requirement finite data set known data set size 
consider case infinite data set data arrive continuously forming infinite data stream 
data streams prevail variety applications including networking financial performance management tuning 
network elements routers hubs produce vast amounts stream data 
example router performance monitoring records traffic flows specific time intervals terms number bytes average utilization producing data streams 
stream easily accumulate multiple gigabytes rapidly 
network elements produce different types information stream fault sequences recording various types network faults flow sequences specifying different types network flows initiated stock sequences abound financial world typical form time series encountered 
web servers service applications produce different types data streams example number connections web server time granularity click stream sequence terms number bytes retrieved imperative monitor analyze 
applications crucial provide querying abilities capable adapting online incremental nature data source 
example network operators commonly pose queries requesting aggregate number bytes network interfaces time windows interest 
dynamic nature data streams raises challenging questions query processing 
formulate propose solutions problems related maintenance histograms provable quality infinite data streams query processing estimation purposes 
analysis query processing data streams posses challenging questions theoretical practical level 
algorithms able operate fixed amount memory sufficient buffer portion data stream time entire stream available 
second algorithms fast able keep online nature stream 
third better efficiency speed algorithms incremental sense new data produced possibly old data discarded intermediate results reused 
nature data stream algorithms agglomerative fixed window 
consider case data source produces new data element time unit 
agglomerative algorithm maintain information perform analysis answer queries starting stream current time 
fixed window algorithm maintain information perform analysis specific temporal windows interest say latest seconds data produced 
gives example kinds data stream algorithms 
cases algorithms operating fixed amount memory operation agglomerative algorithm 
algorithm operates entire stream starting time including current time 
contrast fixed window algorithm operates window length time 
formal study histogramming algorithms data streams introducing algorithms variety popular database applications involving estimations 
efficient data stream histogramming algorithm fixed window data stream model 
algorithms provably properties allow graceful tradeoff construction time accuracy estimation 
algorithms complement agglomerative data stream histogram algorithms gks solve pass histogram construction problem entirety 
data stream data stream 
examples data stream algorithms agglomerative algorithm fixed window algorithm section review related 
section presents definitions necessary remainder 
section algorithms approximate data stream histograms show properties resulting approximation analytically 
section results detailed experimental evaluation application algorithms various problems interest 
section concludes points interesting problems study 
related data stream algorithms attracted research attention theoretical database community 
results data streams results munro paterson mp studied space requirements selection sorting function number passes data stream algorithms pass algorithms 
model formalized henzinger hrr gave algorithms complexity results related graph theoretic problems 
guha agglomerative algorithms cluster data stream 
guha gks agglomerative algorithms problem histogram construction data stream 
manku srl srl considered problems computing medians quantiles order statistics single pass data set 
greenwald khanna gk improvement algorithms manku requiring memory 
domingos hulten considered problem decision tree construction single pass data set dh problem online association rule mining hid 
results available fm ind 
database community problem efficient histogram construction received research attention due central role histograms play query optimization approximate query answering ip 
exists optimal solution classical histogram construction problem quadratic number data points complexity 
alternate histogramming algorithms proposed transforms discrete cosine wavelet 
histogramming problem definition consider data streams consisting ordered sequence data points read 
formally data stream infinite sequence points xi read increasing order indices value xi integer drawn bounded range 
data stream algorithms incremental bounded memory pass algorithms 
seeing new point xi situations interest arise interested finite window points xi xi interested points seen 
denote fixed window data stream model agglomerative data stream model 
agglomerative model sequence denoted xn total number points seen 
central aspect data stream computation modeling computation small space relevant parameter interest primarily interested efficient incremental algorithms data streams 
concentrate fixed window data stream algorithms inside window behavior algorithm agglomerative necessitated incremental nature 
assume availability fixed buffer space memory available capable holding points stream data stream subsequence length time 
locations data points buffer 
buffer operates cyclic fashion 
point arrives temporally oldest point evicted buffer point placed 
consequently buffer acts sliding window length data stream 
successive data stream subsequences buffer data points common step interested designing algorithms approximate dynamically maintain approximation data distribution data stream points buffer approximation obtained suitable authors introduced models allowing small fixed number passes dataset assume single pass 
loss generality assume new point arrives time step possibilities exist batched arrivals framework incorporate 
obtaining answers common queries values points buffer point range queries 
representation approximation choose histograms popular estimation technique 
resulting histograms estimation quality allow fast incremental maintenance points added deleted buffer preserve estimation quality 
agglomerative data stream histogram algorithm maintain histograms reflecting data distribution stream starting time 
fixed window data stream histogram algorithm maintain histograms reflecting time data distribution sequence buffer points 
finite data point sequence vi jxj 
general problem histogram construction follows space constraint create store compact representation data sequence storage denoted hb hb optimal notion error ex hb defined data sequence hb 
need decide representation hb 
typical representation adopted results multiple instances technique collapse values sequence consecutive points say si ei single value hi typically average hi pei si vj forming bucket bi thatis bi si ei hi 
approximation values bucket bi bucket formed error induced due approximation 
need choose way quantify error 
common quantify error sum squared error sse metric defined bi ei si vj hi assuming space constraint expressed buckets resulting approximation hb consist buckets total error approximation ex hb bi 
optimal histogram construction problem defined follows problem optimal histogram construction sequence length jxj number buckets error function ex find hb minimize ex hb 
resulting optimal histogram known histogram ip 
exists efficient algorithm determine histogram time requires space 
algorithm requires prefix sums computed stored quadratic parameter interest typically assumed error functions possible maxi bi results hold point wise additive error function ex hb focus specific error function common literature 
small constant 
naive application optimal histogram construction algorithm subsequence length stream result incremental algorithm requires time new data item space 
fairly simple trick reduces required space time required update excessive 
histogram approximate data obvious question precision say close compute histogram necessarily optimal close optimal precision parameter faster 
leads problem problem approximate histograms sequence length jxj number buckets error function ex precision find hb ex hb minh ex minimization taken histograms buckets 
algorithm take nb log time construct approximate histogram 
adequate require time incrementally 
target algorithm grows slowly gives rise problem problem histogramming data stream data stream number buckets fixed memory space store portion stream capable storing data stream points error function es precision incrementally maintain best hb minimize es hb factor 
algorithm fixed window variant data stream histogram construction problem 
algorithm approximate result optimal algorithm points buffer requiring log incrementally trading accuracy construction speed vice versa 
histogramming data stream solution data stream histogramming problem steps description optimal histogram algorithm jagadish 
show directions improvement optimal histogram algorithm developing fixed window algorithm 
completeness agglomerative data stream construction algorithm gks subsequently show give reasonable fixed window algorithm 
fixed window histogram construction algorithm 
optimal histogram construction consider sequence data points indexed data points bucket represented mean 
refer optimal histogram consisting buckets optimal histogram 
basic observation bucket contains data points indexed optimal histogram rest buckets form optimal histogram 
easy observe cost solution decrease optimal histogram bucket defined points 
point belong bucket search bucket boundaries 
put things solve problem points bucket boundary bucket bucket defined error jx jx decide bucket need compute error efficiently 
naive approach easily done time 
maintain arrays sum compute error bucket time 
sum ix ix partial sums equation replaced sum sum 
denote herror error representing histogram buckets 
algorithm 
establish complexity algorithm 
directions improving algorithm basic structure dynamic programming requires top loops lines 
focus attention loop lines try improve running time 
observe 
positive non increasing function fixed increases 
shown solving case bucket start algorithm compute sum initialize herror 
forj 


herror min herror herror 
algorithm mathematically intuitive reasoning increases smaller set numbers summarize bucket 

herror positive non decreasing function increases 
shown rigorously idea increases trying represent larger set numbers number buckets case 
potentially useful searching minimum sum functions positive non increasing non decreasing 
natural idea monotonicity reduce search say logarithmic terms 
easily shown sequence numbers represented sum non increasing non decreasing function 
consider sequence xn positive values 
consider functions nx xj xj ix observe xi functions positive satisfy observation nonincreasing non decreasing 
value th element sum isp xj xi leaves finding minimum xi example consider initial sequence 
sum evaluates sequence original sequence shifted 
complexity finding exact minimum finding exact minimum original sequence 
implies search step lines described optimal histogram algorithm reduced searching exact minimum reduced search minimum sequence search minimum sum functions desired properties 
reduction preserve approximation closer terms ratio 
shift preserve approximation xj ratio 
interested finding minimum upto ratio close opposed exact better simple search values describe 
improving search search problem trying find minimum values arise sum functions 
interesting twist attempt represent functions histograms 
clearly suppose approximate functions set ranges fewer bound values function range 
search performed point ranges reduce search size range set 
precisely histograms applications 
suppose wehave herror herror forsome 
monotonicity properties get herror herror herror reduce search evaluating sum functions endpoint entire range 
non decreasing function construct intervals satisfy assumptions pair 
intervals range sets approximate function histogram piecewise constant function difference values bucket small relative magnitude values bucket 
agglomerative histogram algorithm agglomerative histogram algorithm gks give incremental fixed window algorithm seek algorithm sake comparison point algorithm fails incremental 
entire algorithm 
reduce search algorithm evolves covering index set intervals property forsome herror herror maximal gks shown maximum number intervals required bounded space required store intervals log 
observe algorithm interested sum endpoints intervals 
algorithm set queues store intervals assume access element queue 

compute herror 

fork 
endpoint queue 
herror min herror herror 

herror herror 
start interval th queue 
start new interval bl th 
queue store values sum 

gg 
algorithm maintain running prefix sum prefix sum store create interval 
algorithm maintains queues implemented arrays bounded size bound size queues 
keeping track number elements queue access element update easily 
element th queue store index number herror values 
putting shown gks compute approximate histogram time nb log space log data stream 
considering incremental behavior procedure useful constructing fixed window histogramming algorithm computation histogram allow information 
approximation intervals function necessarily approximate function function shifted constant amount 
consider 
shows function approximated piece wise constant functions intervals 
shows function function shifted downwards constant amount 
uses intervals observe function values interval close approximation anymore 
correct covering 
easily argued case downward shift number buckets go maintain guarantees 
agglomerative algorithm re 
shifting function downwards quire log time data point adjust histogram best compute relevant information scratch 
problem agglomerative algorithm tries maintain data structure approximates herror starting point seen 
sense agglomerative algorithm boundary interval depends initial points points 
require algorithm builds list intervals approximating function fly 
addition element recursion required compute histogram approximations need approximate histograms fewer buckets 
going 
new algorithm seeing new data point create space ranges searched locate best value space 
time bounded polynomial space polynomial comparison gain straightforward agglomerative algorithm 
fixed window data stream histograms section algorithm fixed window histogram construction problem 
computation resemble need strategy 
compute optimal need values histogram 
seeing new point create sets intervals histograms 
need formalize fixed window algorithm 

assume circular buffer reduces storage storage window 
buffer create lists intervals seeing input point 
computed fly take time compute intervals points buffer inspected 
store sum values xi sum squares values point past 
time time iterations update point point window 
require time amortized iterations ignored 
maintain sums arrays sum indexed sum sum likewise seeing st point value update th entry sum likewise easy verify partial sum elements easily computed subtracting sum sum entry similarly 
algorithm requires value compute sum sum equation 
algorithm 
main issue procedure build list required intervals time 
accomplished function 
accepts input start range list intervals build number required intervals defined recursively shown 
main feature function create list intervals approximating herror done 
list available compute herror values create th list intervals challenge create list evaluating values buffer 
achieve binary search procedure 
algorithm demonstrated example example consider case stream consisting values run compute intervals 
consider case dropped inserted 
call value herror 
invoke search herror maximal 
satisfied 
inserted queue queue invoke 
herror evaluate case herror 
add queue making invoke 
interval 
endpoints intervals 
computing herror solution required minimize partition compute right solution 
important point binary search detected transition position find optimal solution 
computed correct interval partitioning 
straightforward observe creating valid intervals endpoint maximal property 
start new interval function herror increases factor maximum number intervals log herror 
follows fact index values time data herror zero form interval herror worst example position dif assume start new interval herror value greater times herror value start previous interval log herror bounded log log largest number log values data points assumed bounded 
maximum number intervals inserted queue log 
analyze running time observe log binary searches search insertion 
binary search involve log computations herror 
computation herror involve minimization log endpoints values stored th queue 
binary search require log time 
total running time log 
single value total time taken incremental algorithm log log 
theorem time log operations data point output approximate histogram previous points 
binary search involves cost algorithm compute approximate histogram agglomerative problem require solution seeing points opposed solution seeing new point running time increases factor log interesting tradeoff incremental nature speed algorithm 
experimental evaluation section results detailed experimental evaluation application algorithms problem performing approximate queries data streams 
evaluate applications proposed fixed window algorithm case approximate range aggregation queries stream real data sets comparing applicable methods 
demonstrate experimentally algorithms offer histograms superior accuracy constructed efficiently 
conducted extensive evaluation applications proposed techniques similarity queries approximate queries data warehouses 
omit detailed results experiments due space limitations include short summary 
cases real time series data sets extracted operational data warehouses maintained labs 
follows maximal property equation 
hidden constant 
algorithm compute sum assume point circular buffer initialize th queue empty point th queue herror min herror herror approximate queries data stream section evaluate construction performance accuracy fixed window algorithm case approximate queries data stream 
experiments real data sets extracted data warehouses representing utilization information services provided 
cases construction time reported corresponds elapsed time devoted constructing incrementally maintaining data structures required data stream till 
focus evaluating accuracy range sum queries relevant data stream context similar results obtained range queries requesting average point queries 
accuracy measured reporting average result obtained performing random queries starting points span queries size requested aggregation range chosen uniformly independently 
presents results experiment fixed window histograms 
vary length subsequence allow window number buckets value underlying data stream consists points real time series data approximate stream fixed window histograms measuring accuracy random queries elapsed time 
case elapsed time corresponds time required incrementally maintain fixed window histogram entire data set consisting points observed 
figures accuracy results fixed window histograms 
wavelet histograms computed scratch time new point enters return insert th queue compute herror simply minimize endpoints th queue perform binary search find herror herror insert th queue 
algorithm temporally oldest point leaves buffer 
accuracy estimation fixed window histograms improves benefits accuracy compared wavelet histograms evident 
terms construction time figures fixed window histograms require time compute increases decreases 
penalty small evident graphs consistent analytical expectations 
omit construction time performance wavelet worse proposed fixed window histograms order magnitude experiments 
additional experiments prototyped algorithm evaluated accuracy performance agglomerative stream histogram construction compared wavelet approach 
resulting histograms superior accuracy construction time 
compared algorithm optimal histogram construction algorithm jagadish 
experiments construct histograms database pass algorithm utilize answering queries approximately data warehouse 
resulting histograms comparable accuracy resulting optimal histogram construction algorithm various values savings construction time profound savings increase size underlying data set increases 
approximated collections time average exact histogram wavelet subsequence length time sec histogram subsequence length average exact histogram wavelet time sec subsequence length histogram subsequence length 
accuracy estimation construction time fixed window histograms various values series algorithms utilized techniques keogh problem querying collections time series similarity 
experimented time series subsequence time series matching versions problem 
results indicate histogram approximations resulting algorithms far superior resulting algorithm keogh 
superior quality histograms reflected problems reducing number false positives time series similarity indexing remaining competitive terms time required approximate time series 
histogram construction problem central interest database applications 
variety applications view data infinite data sequence finite stored data set 
case querying performed online fashion 
proposed algorithms incrementally approximate data stream querying purposes 
shown analytically experimentally approach offers large performance advantages time able attain excellent accuracy comparable optimal approach superior applicable approaches 
detailed experimental evaluation demonstrated advantages algorithms novel applications querying data streams traditional problems approximate querying warehouses similarity searching time series databases 
raises issues discussion exploration 
algorithms fairly generic believe problems interest database theory practice benefit 
particular data mining applications superior quality histograms algorithms offer 
incremental nature algorithms applicable mining problems data streams 
currently investigating opportunities 
acknowledgments wish anonymous referees comments 
acharya gibbons poosala ramaswamy 
aqua approximate query answering system 
proceedings acm sigmod pa pages june 
dh domingos hulten 
mining high speed 

proceedings sigkdd august feigenbaum kannan strauss vishwanathan 
approximate difference algo fm rithm massive datasets 
foundations computer science focs pages june 
flajolet nigel martin 
probabilistic counting 
proceedings focs pages june 
gk greenwald khanna 
space efficient online computation quantile summaries 
proceedings acm sigmod santa barbara may 
gks guha koudas shim 
data streams histograms 
theory computing stoc july 
guha mishra motwani callahan 
clustering data streams 
foundations computer science focs september 
hid 
online association rule mining 
proceedings acm sigmod pages june 
hrr henzinger raghavan rajagopalan 
computing data streams 
digital equipment ind tr august 
indyk 
stable distributions pseudorandom generators embeddings data stream computation 
foundations computer science focs september 
ip ioannidis viswanath poosala 
balancing histogram optimality practicality query result size estimation 
proceedingsof acm sigmod san hose ca pages june 
jagadish koudas muthukrishnan poosala sevcik suel 
optimal histograms quality guarantees 
proceedings vldb pages august 
keogh mehrotra pazzani 
locally adaptive dimensionality reduction indexing large time series databases 
proceedings acm sigmod santa barbara march 
lee kim chung 
multidimensional selectivity estimation compressed histogram information 
proceedings acm sigmod pages june 
mp munro paterson 
selection sorting limited storage 
theoretical computer sci ence pages 
scott vitter wang 
wavelet histograms selectivity estimation 
proc 
acm sigmod intern 
conf 
management data jun 
vitter wang 
dynamic maintenance wavelet histograms 
pro pi ceedings international conference large databases vldb cairo egypt pages september 
poosala ioannidis 
selectivity estimation attribute value independence assumption 
proceedings vldb athens greece pages august 
srl singh rajagopalan lindsay 
approximate medians quantiles pass limited memory 
proceedings acm sig mod pages june 
srl singh rajagopalan lindsay 
random sampling techniques space efficient computation large dataset proceedings sigmod pa pages june 
yf yi faloutsos 
fast time sequence indexing arbitrary lp norms 
vldb cairo egypt 
proceedings 
