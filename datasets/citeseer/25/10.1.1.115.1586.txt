representing disjunction quantifiers rdf drew mcdermott dou yale computer science department new haven ct usa drew mcdermott dou yale edu 
advantage ofthe rdf daml oil family ordinary xml topic neutral composable 
expressivity severely limited 
limitation known usual remedy reification rdf describe formulas richer language 
propose method encoding typed predicate calculus reification handles bound variables cleanly causes size increase constant multiple 
method generalizes virtually system claim illustrate describing program encodes domain specifications pddl technique 
argue reification logically suspect practice benign algorithm capable inferences logical notations easily extended notations needed 
argue ability represent predicate calculus semantic web crucial 
semantic web really ought called inferential web people talk rdf related tools daml oil specify meaning symbols really specify relations symbols allow inferences drawn :10.1.1.44.6030:10.1.1.44.6030
rdf thought simple logical system assertions objects denoted uris 
providing uniform syntax allows different rdf documents combined straightforward way 
contrasts xml allowable contents element depend entirely meaning tag 
rdf element description property easy determine syntactically rdf puts restrictions values property 
arbitrary rdf node occur value property node indefinite amount descriptive material 
description document pointed restrictions vocabularies documents relate 
research supported darpa daml program 
technical ideas arrived collaboration jonathan mark burstein doug smith contributors www rdf logic mailing list 
horrocks hendler eds iswc lncs pp 

springer verlag berlin heidelberg rdf limitations representing disjunction quantifiers rdf 
syntax graph structure reminiscent semantic networks 
graph structures known problems scoping quantifiers negations disjunctions 
rdf solves problems disallowing constructs 
anonymous nodes considered existentially quantified scope quantifier entire graph 

allow arbitrary terms just bags sequences 
ways fixing bugs extending rdf building top rdf sort quotation device reification 
approach natural runs opposition users developers believe simplicity rdf worth preserving 
second approach 
reification rdf describe formulas language call embedded language 
word course language may look lot rdf 
describing formula matter providing rdf graph properties correspond syntactic relations embedded language 
instance consider simple language grammar sss sentence bbb described rdf graph top type type second second third third graph expressed triples top rdf type top second top third top rdf type drew mcdermott dou second third goal explain embed logic rdf reification argue embedding logic way idea 
lisp notation logical formulas specifically typed logic pddl 
formula traditionally written written forall 
type declarations involved declare types variables writing vars type forall animal predator bigger fears approach easy wrong thing embedding logic reification 
instance thinks implication relationship reified formulas relationship objects contains reification 
seen example reification blows size applied 
tolerate layer blowup solution requires ruled 
fortunately happen think reifying entire expressions 
appealing simple example fact inside doesn cause blowup node type type technical sense view roughly synonymous daml oil class :10.1.1.44.6030
embed logic simply take connectives correspond classes 
formula get transformed top rdf type drs top drs antecedent top drs consequent rdf type drs drs antecedent drs consequent conciseness notation rdf xml serialization 
result top drs drs antecedent drs drs antecedent drs consequent drs consequent representing disjunction quantifiers rdf atomic aren just continue process 
namespace prefix drs refer symbols part system 
brevity drs default namespace drop follows 
extend slightly spirit type abbreviations :10.1.1.44.6030
notation rdf type resource occurs element node convention little syntactic sugar write 
example written top antecedent antecedent consequent consequent reach atomic formula form predicate args weuse basic trick describing having parts subject predicate object :10.1.1.44.6030
loves fred sally represented atomic formula rdf subj fred rdf pred loves rdf obj sally remind practice terms resolved uris possibly complex 
basic trick won exactly args 
cases represent arguments term sequence defined daml oil list elements terms 
terms defined usual way constants variables functional terms form args 
translate instance class functional term function property term args property term sequence 
logical formula child bates mother bates father bates bates child bates mother bates father translated rdf atomic formula rdf subj bates rdf pred child rdf obj term seq rdf functional term term function mother term args term seq rdf bates rdf functional term term function father term args term seq rdf bates drew mcdermott dou course provide xml serialization formula computers produce consumption computers net atomic formula rdf subj bates rdf subj rdf pred child rdf pred rdf obj term seq rdf functional term term function mother term function term args term seq rdf bates rdf term seq term args functional term rdf rdf functional term term function father term function term args term seq rdf bates rdf term seq term args functional term rdf term seq rdf obj atomic formula part translation framework left explain variables handled 
obvious variable binders standard quantifiers forall exists possibilities lambda expressions allowed higher order logic 
focus standard quantifiers idea variable binders 
variable declared meaningful scope quantifier 
rdf provides notion scoping 
described entity may name id attribute description 
write rdf description rdf id file refer object described attribute resource 
ids behave existential variables scope entire graph document occur 
way narrow scope id avoiding name conflicts variables happen name 
way declare id correspond universally quantified variable 
representing disjunction quantifiers rdf solution defer issue quoted level 
name conflicts avoided making new name variable encountered 
variables just anonymous entities features universally quantified 
formula forall person moral agent forall quantifier vars variables list rdf var body atomic formula rdf subj var rdf pred moral agent var var name type person rdf type property var var explicit order contrast rdf type type drs type properties variable play entirely different roles 
identifies variable variable syntactically second constrains values variable objects type person 
collection classes atomic formula term seq interrelations constitute ontology formal sense 
daml oil formalization ontology may www cs yale edu dvm daml daml 
perfectly clear doing 
uses reification commits describing formula directly expressing 
description formula assert formula 
may taken asserting formula exists assertion conveys useful information syntactically formed formula exist 
reification useful conjunction tools know treat description formula certain context assertion formula 
come back issue section 
application web pddl pddl planning domain definition language define domains problems input automated planners 
originally developed input language ai planning systems aips competition gained acceptance standard classical planners generally 
pddl continues evolve guidance aips competition committee 
taken liberty evolving slightly different direction discuss go 
call result web pddl 
features discuss fully operational point go 
drew mcdermott dou web pddl just curiosity far world wide web concerned 
intense interest development notations describing web services pddl ideal purpose 
purpose describe sets actions agent take preconditions effects 
web world actions comprise sending receiving messages typical preconditions include knowing data included message typical effects include learning information putting order shopping cart purchase 
web pddl uses lisp syntax described section special extensions describing actions declaring types symbols 
resulting enlarged ontology may www cs yale edu dvm daml daml type declarations actions axioms organized domains 
domain inherit contents domains mixed matched 
example define domain www agents extends uri www yale edu domains knowing uri www yale edu domains regression planning uri www yale edu domains commerce requirements existential preconditions conditional effects types message obj message id string functions price quote money query stock pid product id reply stock boolean message predicates web agent agent reply pending agent id message id msg message message exchange interlocutor agent sent received message eff prop expected reply agent sent expect back message axiom vars agt agent msg id message id sent reply message implies normal step value receive agt msg id reply context web agent agt reply pending agt msg id sent expected reply agt sent reply action send parameters agt agent sent message value sid message id representing disjunction quantifiers rdf precondition web agent agt effect reply pending agt sid sent action receive parameters agt agent sid message id vars sent message eff prop precondition web agent agt reply pending agt sid sent value received message effect message exchange agt sent received eff eff description domain www agents describes actions send receive www agents domain extends domains knowing commerce identified uris turn domain foundation specific domains content particular messages 
symbols agent commerce domain know val knowing domain freely inherited descendent domains 
words domain closely resembles daml oil ontology resemblance shall return 
task hand translate pddl domain definitions rdf 
subexpressions domain definition logical formulas sort discussed section top level domain includes idiosyncratic constructs action name 
new constructs particular problem bag tricks section introducing rdf types pddl action 
example embedding send action rdf send pddl action pddl parameters param seq rdf ag rdf pddl value param seq rdf pddl precondition atomic formula rdf subj ag rdf pred web agent rdf obj drs empty pddl effect atomic formula rdf subj ag rdf pred reply pending rdf obj term seq functions field ofthe domain definition extension incorporated pddl official version 
value field action definitions extension hope eventually official part 
testing purposes currently load domains advance program visit remote sites domains www yale edu domains commerce 
drew mcdermott dou rdf rdf 
ag param name agt type com agent param name sent type com message param name sid type com message id 
formula presence drs empty object rdf obj predicate web agent indicates unary 
translation pddl rdf straightforward 
treat pddl expressions trees usual lisp way 
element expression gives basic syntactic type 
pddl reserved word precondition connective predicate reply pending function price quote 
connectives functions handled recursive walk arguments 
predicate atomic formula reified triples rdf type rdf subj rdf pred rdf obj exemplified complexity object handled 
case subject object may arbitrary terms recursive walk continue 
reserved word special handler 
example word requirements followed list requirement names discuss purpose section 
handler requirements creates rdf bag elements strings corresponding requirement names value requirements property domain constructed 
output process set triples described www agents requirements bag equivalent rdf graph :10.1.1.44.6030
important keep track multiple pointers node graph 
identifiers web agent obvious occurrence identifier translated internal node give name web agent resource web agent xml version 
variables special internal names avoid scope ambiguities explained section 
time create graph node enter hash table ensure find time need 
having produced set triples print xml serialization readable format 
space allow show serialization continue show rdf encodings 
possible web pddl translator outputs content way compatible daml oil 
said domain resembles ontology fact output standard daml oil ontology boilerplate top level domain representation representing disjunction quantifiers rdf rdf rdf xmlns rdf www org rdf syntax ns xmlns rdfs www org rdf schema xmlns daml www daml org daml oil daml xmlns www org xmlschema xmlns daml ontology rdf rdfs label www agents rdfs label daml imports rdf resource www daml org daml oil daml daml imports rdf resource www yale edu domains daml imports rdf resource www yale edu domains daml imports rdf resource www yale edu domains knowing daml imports rdf resource www yale edu domains regression planning daml imports rdf resource www yale edu domains commerce insert domain content daml ontology rdf rdf types web pddl resemble classes daml 
fact types simpler classes 
relationships types declared atomic named types disjoint subtype 
simpler pddl types simply daml classes 
www agents domain output daml class rdf id message daml class rdf id message id rdfs subclassof rdf resource string daml rdf resource message daml class translator translate back daml oil ontology web pddl 
checks see ontology imports web pddl ontology www yale edu domains assumes occurrence description formula taken occurrence formula 
assumes classes declared ontology turned web pddl types 
reconstructing lisp syntax formula descriptions straightforward 
translator parses xml rdf triples 
triples isomorphic lisp list structure ids playing role pointers easy walk triples rebuilding pddl formulas 
course undo tricks arguments functions non binary predicates 
program called available web ftp ftp cs yale edu pub mcdermott daml pddl translation doc tar gz daml org tools library www daml org tools pddl daml 
program written java 
internal object model rdf graphs jena experimental rdf parser written brian mcbride available www hpl hp uk people rdf adjustments 
developed algorithms parsing reifying printing scratch 
pddl looks lisp current version algorithm map types classes way treats types ordinary pddl symbols 
drew mcdermott dou conveniently represented lisp list structures internally simple implementation lisp data types java 
may occasionally sound talking lisp program lisp may program pure java 
objections replies encountered objections proposal 
fact rdf encode syntax richer languages known 
daml oil basically trick encode description logic rdf 
daml oil layering right way expressions new layer expressions rdf meaning 
encoding web pddl lacks property 
typed predicate calculus little common rdf objectoriented notions class subclass range domain directly applicable 
reason rdf evolved description logics predicate calculus theorem proving computational 
scheme sort worthwhile uses 
scheme gains popularity write programs understand web pddl represent web pddl objection reply simple know previous system representing disjunction bound variables rdf suffer exponential blowup 
daml oil trick similar 
fact doesn tricks rdf essentially subset daml oil 
daml oil handle disjunction implication simply rdf due fact asserting rdf graph asserts subgraphs 
objection reply tried possible daml oil representations 
instance declare web pddl types daml oil classes reifying declarations 
fewer opportunities daml oil style representations think 
simple fact top level domain qualify 
instance domain asserted sells com books single triple com sells books 
description atomic formula 
domains usually assert type declarations axioms atomic formulas 
far objection concerned agree general purpose theorem proving useful technique web various special purpose techniques horn clause theorem proving inference ofthese quotes paraphrases anonymous referees rejected earlier version ofthis submitted world wide web conference 
representing disjunction quantifiers rdf description logics play key role 
disagree best way control inference limiting syntax representation 
illustration point comes field automated planning 
planning problem intractable prevented development algorithms produce plans hundreds steps time measured seconds hours 
algorithms require domain specifications notations complexity web pddl 
way complexity controlled set requirement declarations allow domain specify exactly subset pddl domain requires 
www agents domain specified requirements existential preconditions conditional effects allows planner cope existential preconditions conditional effects recognize immediately domain reach 
said done planner potentially run forever problem appears domain way prevent ration time allowed take 
obvious notation complexity control responsibility designers rdf 
hand rdf evolve language syntax general notation world pddl kif 
subset 
probably need languages embedded rdf reification quoting technique 
achieving interoperability web requires managing notational levels 
lowest level xml rapidly standard 
xml languages supply particular vocabulary items allow domain specific structures described 
applications need 
achieve sort self description semantic web need languages describing resources way neutral composable 
rdf play role achieve expressive power go step embed complex languages rdf 
levels may sound messy reasons level problem translating uniform internal representation tricky tractable demonstrated 
difficult part arises run differences vocabulary ontology different information sources 
subject ongoing research 
objection encoding standard hear 
bother may keep rich famous 
real question essentially power going necessary 
believe answer hasten add ofthe domains algorithms handle artificial planners find plans realistic domains web services laboratory curiosity stage 
drew mcdermott dou 
notation improves proposal just popular switch 
related argued possible useful embed general logic constructs rdf xml 
demonstrated possibility providing program translates rdf xml pddl planning domain definition language 
incorporating system planning interactions web services 
key technical contribution method representing arbitrary formulas bound variables elements rdf classes 
logical symbols embedded language predicate calculus translated rdf types description entity type arguments translations fuller technical description see 
similar ideas proposed 
notation originally intended concise encoding rdf graphs 
lately berners lee extensions go expressive power rdf incorporated rdf easier embed logic rdf reduce number places quotation devices necessary 
ability represent arbitrary formulas rdf free thinking semantic web graph structures serialized number brackets 
semantic web surely exist marketplace alternative notations show alternative ontologies notational level just alternative ontologies coexist context level 
competing notations survive 
argue winners notations properties notations express truths 
inference engine access ontologies inferences 
composability expression source combined expression regardless designers intended 
generality notation able express people want express 
maintainability information sources evolve comprehensible maintainers 
right notations wsdl away favor alternatives describe services dictating manual write code connect 
notations rdf evolve allow disjunctions quantifiers devices standard 
xml serializations hidden away human view lest small children accidentally see frightened 
xml wonderful way making data self describing computer person way concealing information 
especially critical semantic web better surface notations 
representing disjunction quantifiers rdf 
tim berners lee 
primer getting rdf semantic web 
www org swap primer html 

tim berners lee 
notation 
www org designissues notation html 

erik christensen francisco curbera greg meredith weerawarana 
web services definition language wsdl 
technical report 
available www org tr wsdl 

wolfram reinhold 
revisited reification nesting containers lists dialect pure xml 
proc 
semantic web working symposium pages 

patrick hayes 
theory 
working draft september 
www org tr wd rdf mt 

kif 
knowledge interchange format draft proposed american national standard 
technical report ans 
logic stanford edu kif html 

ora lassila ralph swick 
resource description framework rdf model syntax specification 
technical report 
available www org tr rec rdf syntax 

drew mcdermott 
planning domain definition language manual 
technical report yale computer science 
cvc report 

drew mcdermott 
estimated regression planning interactions web services 
proc 
ai planning systems conference 
appear 

drew mcdermott jonathan mark burstein douglas smith richard waldinger 
proposal encoding logic rdf daml 
technical report yale cs 
ftp ftp cs yale edu pub mcdermott papers ps gz 

drew mcdermott mark burstein douglas smith 
overcoming ontology mismatches transactions self describing agents 
proc 
semantic web working symposium pages 

frank van harmelen peter patel schneider ian horrocks 
description ofthe daml oil march ontology markup language 
available www daml org html 
