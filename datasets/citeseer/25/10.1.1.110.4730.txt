types subtypes client server interactions simon gay malcolm hole department computer science royal holloway university london egham surrey tw ex uk 
email gay dcs rhbnc ac uk address author 
email hole dcs rhbnc ac uk 
define extension calculus static type system supports high level specifications extended patterns communication client server protocols 
subtyping allows protocol specifications extended order describe richer behaviour implemented server replaced refined implementation invalidating type correctness system 
pop protocol concrete example technique 
early success framework investigation foundations various concurrent programming styles calculus established vehicle exploration type systems concurrent programming languages :10.1.1.125.8009
inter process communication calculus point point transmission messages named channels proposed type systems started assignment types channels type channel determines kind message carry 
messages channel names straightforward idea leads detailed specifications intended uses channels system 
line research purely theoretical pict programming language directly calculus rich type system incorporates subtyping channel types higher order polymorphism 
honda proposed calculus languages certain channels session types :10.1.1.45.1431
channel call session channel restricted carrying single type message lifetime type specifies sequence message types 
messages indicate choices range possibilities different choices lead different specifications types subsequent messages session types branching structure 
application session types specification complex protocols example clientserver systems 
main contribution add subtyping system session types show strengthens application specification client server protocols 
differences syntax language calculus minimal special treatment session channels handled typing rules 
anticipate easier achieve goal incorporating type system modified version pict language compiler 
consider server mathematical operations initially offers choice addition negation 
client choose operation send appropriate number arguments server responds sending back result 
communications take place single session channel called session type plus int int int negate int int precisely type server side channel 

constructor specifies choice offered case options labelled plus negate 
label leads type describes subsequent communication note branches different types int indicates receiving integer int indicates sending integer sequencing constructor indicates interaction 
client side channel dual complementary type written explicitly plus int int int negate int int 
constructor specifies client choice plus negate 
label followed type describes subsequent interaction pattern sending receiving opposite pattern appears server side 
implementation maths server accordance type implementation client accordance type requirements enforced static typechecking guaranteed communication errors occur runtime 
client chooses label guaranteed labels offered server client sends subsequent message guaranteed type expected server similarly server sends message 
typing rules introduced section allow derivation server server plus int int negate int 
operation allows message choose listed alternatives 
labels pattern inputs int 
outputs 
matches usage annotation indicates side server 
possible definition client client negate int derive typing judgement client 
note select available options subsequent pattern inputs outputs matches specification client value received server realistically replaced continuation process client server put parallel typing rule par parallel composition server client server client usage annotation indicates sides 
usage annotations necessary order ensure side process 
system server client client erroneous clients trying communicate server 
system executed client choose plus negate 
server expects receive integer client choose plus negate 
runtime type error kind type system designed avoid 
see client client client client valid application typing rule par 
avoid runtime type errors ensure session channels linearly 
typing rules techniques similar kobayashi enforce linearity 
type system allows non session types specified restrictions processes may 
example int channel freely send receive integers 
implement server client 
solution client create session channel interaction server 
server consists replicated thread process thread receives session channel channel called port uses interact client 
thread port server thread client body negate int client port client body client body plus int client port client body port client client valid typing judgement 
port session type processes 
system executed client sends local channel copy thread standard calculus scope extrusion allows scope expand include copy thread client body server private interaction similarly client copy thread private channel communication 
notice session channel usage client sides side type sent away port side type communication client body 
final ingredient type system subtyping 
non session types subtyping defined exactly pierce sangiorgi type system calculus 
ti ui 
tn 
un 
un 
tn 
channels type permits input output positions just input just output required 

tn 
un 
un 
tn recall input behaves covariantly output behaves contravariantly 
subtyping sequences tn defined pointwise acting covariantly acting contravariantly 
interesting definition subtyping branch choice types 
process needs channel type 
ln tn allows offer choice 
ln safely channel type 
lm tm 
channel type prevents process receiving labels lm 
ln label received understood 
furthermore channel type 
lm sm si ti means choice continuation process uses channel type si ti safe 
section see subtyping modifications specification server 
remainder organised follows 
section defines syntax processes types basic operations type environments 
typing rules section 
section defines operational semantics language states main technical results leading type soundness 
section uses type system specify pop protocol discusses role subtyping 
discuss related outline plans section 
syntax notation language polyadic calculus output prefixing 
omit original calculus choice construct partly order keep language close core pict 
constructs introduced section choosing collection labelled processes proposed honda :10.1.1.45.1431
omit matching construct allows channel names tested equality core pict 
inclusion output prefixing different presentations calculus essential type system able impose order separate outputs channel 
convenient add conditional process expression written boolean value ground type booleans ground types int examples section added appropriate primitive operations 
standard replication operator recursive process definitions 
type system separate constructors input output dual capability channels suggested pierce sangiorgi 
constructors session types proposed honda :10.1.1.45.1431
need linear control session channels leads usage annotations session types play similar role polarities kobayashi 
subtyping defined section 
general lower case letters channel names 
ln labels choices upper case processes upper case types 
write finite sequence 
xn names finite sequence 
xn tn typed names 
processes syntax processes defined grammar 
note stand types lists types defined 

ln pn syntax fairly standard 
inactive process parallel composition declares local name type represents potentially infinite supply copies receives names types channel executes outputs names channel executes confusion output replication surrounding syntax quite different case 

ln pn offers choice subsequent behaviours pi selected continuation process sending appropriate label li channel explained section 
sends label order selection offered choice executes conditional expression mentioned 
define free bound names usual bound names bound occurrences free 
define equivalence usual identify processes equivalent 
define operation substitution names names denotes names 
xn simultaneously substituted 
yn assuming bound names renamed necessary avoid capture substituting names 
usual define structural congruence relation written helps define operational semantics 
smallest congruence equivalence classes processes closed rules 
unit comm assoc free extr nil perm rep 
ln pn 
offer rule offer permutation 

types syntax types defined grammar 
ground types bool channel types 
tn 
tn 
tn session types 
tn 
tn 
ln sn 
ln sn types type variable recursive type annotated session types usage annotation just usage session type indicates channel type specified sides including side described omit usage annotations omit usage annotations 
define unwinding recursive type unwind 
type dual complementary type defined inductively follows 

ln sn 
ln sn 
ln sn 
ln sn bool bool describe session channel ends 
adopt convention written branching type begins input 
say session type complete usage incomplete usage 
environments environment set typed names written 
xn tn 
stand environments 
assume names environment distinct 
write indicate names appearing write type write environment formed adding set typed names disjoint sets names write union 
implicitly true bool false bool appear environment 
partial operation types defined ground type channel type session type undefined cases 
partial operation combining typed name environment defined follows defined undefined cases 
extend partial operation environments defining 
xn tn xn tn say environment unlimited contains session types 
type system subtyping principles definition subtyping described section 
defines subtype relation formally means collection inference rules judgements form ranges finite sets instances 
derivable simply write inference rules interpreted algorithm checking follows 
goal apply rules upwards generate subgoals pattern matching structure determines rule rule assump causing current subgoal succeed applicable 
rec rec applicable order 
subgoal generated match rules algorithm returns false 
pierce sangiorgi give definitions subtype relation means inference rules form type simulation defined coinductively 
subtyping algorithm derived inference rules proved sound complete respect coinductive definition coinductive definition permits straightforward proofs transitivity reflexivity subtype relation 
way characterize subtype relation coinductively prove soundness completeness subtyping algorithm prove transitivity reflexivity due space constraints omitted details 
subtype relation defined non annotated types annotations preserve subtyping length 
ti ui write 
typing rules typing rules defined 
note judgement form means subtyping appears hypotheses rules possible promote type channel desired input output type 
appears explicitly rules offer choose type include labels choice constructed 
typing rule applicable instances contains defined 
ensures environment correctly records session channels 
consider applications par section 
server client server client client client client client correct second incorrect defined prevents session channel simultaneously copies client 
notice rules names output added environment means session channel output part usage away remainder process 
allows process communication session channel delegate rest session process sending channel course process channel 
behaviour arises recursive process uses session channel recursive type represented terms replication instance recursive process invoked session channel passed 
assump bool bool bool inout 
si ti branch 
lm sm 
ln tn 
si ti choice 
ln sn 
lm tm unwind rec unwind rec fig 

inference rules subtyping unlimited nil par session type complete new incomplete incomplete 
sn pn si incomplete offer 
lm sm 
ln pn si si ti choose 
ln sn li bool cond fig 

typing rules unlimited rep comm 
select 
ln pn li pi par true true new cong false false fig 

reduction relation note session type effectively specifies linear non session channel type 
operational semantics usual calculus languages operational semantics defined means reduction relation 
means process reduces process executing single communication step evaluating conditional expression 
reduction relation smallest relation closed rules standard 
rules comm select introduce communication steps comm standard select introduces communications select labelled options 
note comm applies session non session channels indication type process 
usual way proving type soundness prove subject reduction theorem environment proves immediately available communications cause type errors 
results imply typed process executed safely sequence reduction steps 
presence subtyping means examining sufficient determine constitutes correct names different occurrences single name constrained different types 
example typed process bool bool bool bool bool reduces steps essentially bool occurrences type bool type bool 
address difficulty adopt pierce sangiorgi technique introducing tagged processes written syntax tagged processes identical ordinary processes occurrences names typed example structural congruence defined tagged processes rules tags added untagged processes 
introduce tagged typing rules defining judgements form tagged typing rules essentially untagged typing rules typical example rule tt 
tt note type declared name environment subtype type name tagged process 
tagged reduction relation written defined rules tagged versions rules par cong new true false 

ln tr comm tr 
ln tn 
ln pn ti pi fig 

tagged reduction relation selected rules tr select function erase tagged processes untagged processes simply removes extra type information 
definition straightforward example erase erase 
theorem tagged subject reduction 
derivable derivable 
proof 
induction derivation assumption derivable provides information components needed build derivation observe tagged subject reduction theorem guarantees tagged reduction relation defined relation derivable tagged typing judgements 
lemma 
derivable untagged typing judgement tagged process erase derivable tagged typing judgement 
proof 
define function tag induction structure essentially tags name exact type declared binding input 
presence session types causes slight complication tag ensure tagged vice versa 
essentially problem encountered linear type inference solution tag returns pair tagged process differs possible removal usages session types 
tag tag tag 
tag unlimited session types removed ok erase 
theorem 
derivable derivable erase exists erase 
proof 
breaking sequence reductions individual steps showing result holds step fact proved induction derivation reduction step 
tagged subject reduction theorem lemma theorem imply sequence reductions typed untagged process mirrored sequence reductions typed tagged process 
final theorem establishes typed tagged processes contain immediate possibilities incorrect communication 
follows easily typing rules proving type soundness concentrated proof tagged subject reduction theorem 
case shows tagged process appears contain potential reduction preconditions relevant tagged reduction rule satisfied reduction safely carried 
theorem 
tagged process erase ok 
session type declaration occurs 

declaration occurs 

lm pm declaration occurs 
ln tn 
lr vr 
lr 

declaration bool occurs take typed untagged process convert tagged process reduction sequence lead type error 
reduction sequence typed untagged process matched reduction sequence typed tagged process conclude type errors result executing typed untagged process 
pop protocol substantial example type system specify pop protocol 
protocol typically electronic mail software quit ok str user str error str ok str quit ok str pass str error str ok str stat ok int int retr int ok str str error str quit ok str fig 

types pop protocol download new messages remote mailbox read processed locally deal sending messages routing messages network 
pop server requires client authenticate means user pass commands 
client may commands stat obtain status mailbox retr retrieve particular message quit terminate session 
commands require additional information sent example number message 
omitted pop commands description straightforward fill missing ones 
specify behaviour channel pop session type definitions describes interactions authentication state describes interactions transaction state 
definitions server side channel assume ground type str strings 
definitions illustrate complex structure possible session types show recursive types describe repetitive session behaviour 
server offers choices contrast example section 
receiving command label client server respond ok error quit command succeeds allow error response 
client implements interaction type offer choice ok error waiting response command 
published description protocol ok error responses simply strings prefixed ok err 
allow replace corresponding str definitions different continuation types ok error essential accurate description protocol behaviour 
specify string message pop server allowed provide extra information error code 
section implement process pop body pop body 
defining pop port pop body gives port pop published specification server protocol 
pop protocol permits alternative authentication scheme accessed apop command client sends mailbox name au string simultaneously 
option provided server implement requires channel type obtained adding third option choice apop str str error str ok str server implements apop command typed follows port 
suppose client pop client know apop command 
client port 
gives port client 
derivation shows client typed environment port put parallel 
key fact top level options provided subset provided port port new port port space permit definition pop body claim simpler readable equivalent definition conventional calculus pict 
key factor session type allows messages exchanged complete pop session 
session types client create fresh channel time needs send message different type server channels sent server adds overhead communication channel types 
case subtype relation non session types describe relationship interactions pop 
defined language type system incorporates session types suggested honda subtyping pierce sangiorgi extended session types :10.1.1.45.1431
session channels controlled linearly order guarantee messages go correct destinations adapted kobayashi purpose 
language differs minimally calculus additions primitives offering making labelled choices 
honda introduce special syntax establishing manipulating session channels taken care typing rules 
advocated session type part published specification server protocol static type checking verify client implementations behave correctly 
pop protocol example shown subtyping increases utility idea upgrading server causes protocol session type supertype original session type existing client implementations type correct respect new server 
session types similarities types active objects studied nierstrasz 
incorporate idea type specifies sequence interactions 
main difference case active objects types specify interdependencies interactions different channels 
underlying framework concurrent objects method invocation channel communication processes different detailed comparison systems 
report longer term project investigate advanced type systems context pict programming language 
goal extend pict compiler support type system 
pict asynchronous calculus output prefixing language encoded explicitly attaching continuation channel message 
initially non polymorphic version pict theoretical study interplay session types polymorphism integrate session types full pict type system including polymorphism 
pict compiler uses powerful partial type inference technique interesting see extended handle session types 
value explicit session types specifications want allow programmer omit completely automatic inference example usage annotations probably useful 
implementation allow gain experience programming sessions turn suggest typing features usefully added system example interesting consider kobayashi type system partial deadlock freedom 
malcolm hole funded epsrc project novel type systems concurrent programming languages gr 
simon gay partially funded epsrc project foundation 
anonymous referees comments suggestions 
paul taylor proof tree macros production 
boudol 
asynchrony calculus note 
de recherche inria sofia antipolis may 
gay 
sort inference algorithm polyadic calculus 
proceedings th acm symposium principles programming languages 
acm press 

girard 
linear logic 
theoretical computer science 
honda tokoro 
object calculus asynchronous communication 
proceedings european conference object oriented programming lncs 
springer verlag 
honda vasconcelos kubo 
language primitives type discipline structured communication programming 
proceedings european symposium programming lecture notes computer science 
springer verlag 
honda yoshida 
combinatory representation mobile processes 
proceedings st acm symposium principles programming languages 
kobayashi 
partially deadlock free typed process calculus 
proceedings twelfth annual ieee symposium logic computer science 
ieee computer society press 
kobayashi 
partially deadlock free typed process calculus 
acm transactions programming languages systems 
kobayashi pierce turner 
linearity pi calculus 
proceedings rd acm symposium principles programming languages 
mackie 
functional programming language linear logic 
journal functional programming october 
milner 
polyadic calculus tutorial 
technical report laboratory foundations computer science department computer science university edinburgh 
milner parrow walker 
calculus mobile processes ii 
information computation september 
myers rose 
post office protocol version may 
internet standards rfc 
nierstrasz 
regular types active objects 
acm sigplan notices october 
pierce sangiorgi 
types subtypes mobile processes 
proceedings eighth annual ieee symposium logic computer science 
ieee computer society press 
pierce turner 
pict programming language pi calculus 
technical report computer science department indiana university 
appear proof language interaction essays honour robin milner gordon plotkin colin stirling mads tofte editors mit press 
pierce turner 
local type inference 
proceedings th acm symposium principles programming languages 

synchronization expressed types communication channels 
proceedings european conference parallel processing euro par volume lecture notes computer science 
springer verlag 

coordination requirements expressed types active objects 
aksit matsuoka editors proceedings european conference object oriented programming ecoop volume lecture notes computer science 
springer verlag 
takeuchi honda kubo 
interaction language typing system 
proceedings th european conference parallel languages architectures number lecture notes computer science 
springer verlag 
turner 
polymorphic pi calculus theory implementation 
phd thesis university edinburgh 

