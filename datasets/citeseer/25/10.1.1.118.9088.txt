live monitoring adaptive instrumentation analysis debug maintain web applications ajax web applications enabling generation rich client side web applications today web application developers visibility required effectively build maintain reliable system 
argue new capability web application environment ability system automatically create serve different versions application user exploited adaptive cross user monitoring behavior web applications user desktops 
propose live monitoring framework building new class development maintenance techniques continuous loop automatic adaptive application rewriting observation analysis 
outline adaptive techniques localizing data corruption bugs automatically placing function result caching 
live monitoring framework requires minor changes web application servers changes application code modifications existing browsers 
years ajax asynchronous java script xml programming techniques enabled new generation popular web applications marking paradigm shift web service development provisioning 
traditional web services new web applications combine data preservation integrity storage capacity computational power data center rich client side experience implemented javascript program shipped ondemand users web browsers combination provides compelling way build new applications moving burden managing application distinction web service web application 
includes server side components includes significant client side javascript component man helen wang microsoft research microsoft com bility users application developers operators 
unfortunately today web application developers operators visibility need effectively build maintain dependable system 
traditional web services running exclusively controlled server side environments web application depends components outside developer control including client side javascript engine libraries third party back web services mash applications web applications combine functionality multiple back web services 
course web application developers contend traditional bugs occur writing large complex piece software including logic errors memory leaks performance problems 
inevitable problem occur web application developer lack visibility heterogeneous client environments dynamic behavior third party services reproducing debugging problem practically impossible 
address challenges propose live monitoring framework exploits new capability web application environment instant time client runs web application developers operators application automatically provide client new different version application 
live monitoring framework exploits capability enable dynamic adaptive instrumentation strategies integrates resultant line observations application behavior development operations process 
live monitoring enables new class techniques continuous loop automatic application rewriting observation analysis improve development maintenance web applications 
policy automatic rewriting application code provides necessary visibility application behavior collecting observations line live user desk op performance ms array join table performance simple methods concatenating strings varies browsers 
tops provides visibility real problems affecting clients 
distributing sampling instrumentation users web application provides low overhead instrumentation platform 
collected information adapt instrumentation line enables efficient drill specialized diagnosis techniques problems occur 
reliable web applications web application environment presents development operations challenges confront cross platform distributed system 
environment opportunities new approach addressing challenges 
challenges root challenge building maintaining reliable client side web application lack visibility behavior program brought fact execution web application split multiple environments including uncontrolled client side third party environments exacerbated heterogeneity dynamics 
non standard execution environments core javascript language standardized ecma script pieces javascript environment 
result applications frequently subtle subtle cross browser incompatibilities 
clear example sending xml rpc request requires calling activex object native javascript object 
subtle issues event propagation multiple registered event handlers mouse click order called 
standardized pieces javascript implementation differences cause serious performance problems see table examples performance variance browsers 
third party dependencies web applications dependencies reliability back web services 
back services strive maintain fail 
regular updates bug fixes feature enhancements app js bytes js loc live maps mb google maps kb kb amazon book reader kb cnn com kb table numbers amount client side code major web applications measured bytes lines code loc break dependent applications 
anecdotally breaking upgrades occur live com updated beta gadget api breaking dependent developers code popular social bookmark website del icio moved urls pointing public data streams breaking dependent applications 
software complexity course javascript suffers traditional challenges writing nontrivial program javascript programs simple scripts containing lines code grown dramatically point clientside code cutting edge web applications easily exceed lines shown table 
result web applications suffer kinds bugs traditional programs including memory leaks logic bugs race conditions performance problems 
difficulties caused heterogeneous execution environments dynamic third party behavior challenge writing correct software certainly improved complete standardization better web service management careful software engineering 
argue minimum software bugs human error continue give challenges long life frustrating web application developers 
opportunities challenges faced distributed systems technical features web applications provide opportunity building new kinds tools deal problems instant deployability web applications deployed updated modifying code stored central web server 
modulo caching policies clients download fresh copy application time run enabling instant deployability updates 
take advan coding javascript today difficult lack compile time errors warnings static type checking private scoping 
consider problems fundamental current upcoming tools google issues 
tage capability serve different versions web application varying instrumentation time users 
dynamic extensions execution javascript web applications dynamically load run new scripts allowing late binding functionality current requirements 
download specialized fault diagnosis routines web application encounters problem 
live monitoring goal live monitoring techniques improve developer operator visibility behavior web applications enabling automatic adaptive analysis application behavior real user desktops 
core live monitoring technique simple process 
automatic program rewriting instant serve differently instrumented versions applications time users 

continually gather observations line endto behavior applications running real workload user desktops 

observations application behavior gathered analyzed results guide adaptation dynamic instrumentation policy 

special cases client ability dynamically load scripts enable just time fault diagnosis handlers tailored previously gleaned information specific encountered symptoms 
framework live monitoring shown divides process key components 
transformer responsible rewriting javascript application sent web application servers user desktop 
transformer contains generic code javascript html parsers reusable live monitoring techniques technique specific rewriting rules 
rules expressed steps step searches target code points matching rule specific filter function call expressions variable declarations second step applies arbitrary transformation target code point modifying syntax tree javascript program 
rewriting rule exposes set discrete knobs controlling rewriting target code points 
example rule app transformer controller dynamic extension generator policy log generic app logs live monitoring framework 
adds performance profiling function calls expose knob function profiled 
controller component responsible core technique specific adaptation algorithm analyzing collected observations application behavior results analysis modify knobs exposed rewriting rules transformer 
log collector simple component responsible gathering observations returned rewritten programs dynamic extension generator creates special purpose fault diagnosis handlers application request configuration input controller 
parts process generic reusable techniques rest call live monitoring policy specific live monitoring technique 
policy includes rewriting rules transformer analysis policy controller responsible analyzing logs modifying knobs rewriting rules dynamic extension generator 
live monitoring policies developing new policy address debugging maintenance challenge consider questions appropriate rewriting rules 
consideration building monitoring policy observations application behavior need captured program modified efficiently capture 
particular ask instrumentation statically written code functionality dynamically determined downloaded needed dynamic extension generator 
rewriting adapt time 
second consideration code points program initially rewritten choice changes time gather observations behavior 
policy consider multi stage approach appropriate completely different rewriting rules applied gather different kinds information time 
policy spread instrumentation users 
third axis consideration policy distribute instrumentation users sampling re aggregate information reason program behavior 
developers operators interact live monitoring policies 
final question designing policy people 
policies may completely automated continuously running live monitoring policies may run occasionally explicit request developer 
particular policy application rewriting affect semantics program human interaction necessary 
built prototype live monitoring framework implemented policies debugging errors drilling performance problems analyzing runtime behavior detect potentially correct cache optimizations exploring answers questions 
rest section describes policies different styles adaptation address different problems 
example single rewriting rule applied different points code drill data structure corruptions 
second example uses different rewriting rules time decides place rewriting rule observations gathered previous application runs 
locating data structure corruption bugs difficult reproduce steps triggering bugs controlled development environment real users run problems real deployed application 
capture relevant error information debug problems real conditions adding necessary debugging infrastructure entire program high overhead 
solution adaptively enable debugging infrastructure code needed 
corruption memory data structures clear sign bug application easily lead serious problems application behavior 
straight forward method detecting data structure inconsistencies consistency checks appropriate locations ensure data structures corrupt 
consistency check small piece data structure specific code tests invariant 
doubly linked list data structure inspected unmatched forward backward 
today checks commonly written manually automatically inferring checks 
consistency check fails suspect bug exists executed code successful consistency check execute consistency checks infrequently narrowed possible locations bug 
hand execute checks frequently easily cause prohibitive performance overhead introduce false positives check data structure modified 
live monitoring build adaptive policy adds removes consistency checks balance need localizing data structures desire avoid excessive overhead 
initially policy inserts consistency checks stand script blocks event handlers essentially entry exit points execution javascript application 
assuming data structure corrupted execution script block event handler remain corrupted block execution high confidence detecting corruptions caused real workloads 
consistency checks notice data structure corruptions policy adds additional consistency checks suspect code path drill help localize problem 
clients download execute fresh copies application run data structure consistency problems report detail problems encounter suspect code path adaptive policy drill remove checks believed superfluous 
simple extensions example policy powerful 
example performance overhead reduced expense fidelity randomly sampling data structure consistency clients 
policy finds function intermittently corrupts data structure explore program state detail additional rewriting rule capture function input arguments key state arguments state help developer narrow cause problem 
javascript programs executed single thread avoiding possibility separate thread having corrupted data structure 
identifying promising cache placements simple features web applications cut performance problems poor performance overly ambitious ajax applications primary complaints users 
blame lies javascript nature scripting language designed building large applications lack access scoping ability dynamically load arbitrary code scripting engine safely apply simple optimizations caching variable dereferences lining functions 
live monitoring multistage instrumentation policy detect possibly valid optimizations evaluate potential benefit applying optimization 
consider simple optimization strategy insertion function result caching 
optimization strategy correct function cached return value deterministic function inputs side effects 
monitor dynamic behavior application cull functions empirically meet criteria 
rely human developer understand semantics remaining functions double check remaining functions determinism side effects 
stage instrumentation check benefit caching outweighs cost 
stage policy injects test predicates help identify function caching valid 
accomplish rewriting rule essentially inserts cache continues call original function check return value previously cached results 
client real workload application reports cache value match function actual return value know function safe optimization remove code location consideration 
gathering observations sufficient variety number user workloads provide list potentially cache able functions developer application ask knowledge function semantics determine side effects unseen non determinism 
advantage stage monitoring reviewing potentially short list possibly valid cache able code points easier inspecting functions potential cache optimization 
second stage policy automatic rewriting cache results functions developer deemed free side effects 
test cost benefit function caching distribute versions application optimization versions performance instrumentation added 
time compare observations versions determine optimization benefit 
example improve performance browser 
caches benefit network latency user central service high 
regardless testing optimizations context real world deployment opposed testing controlled pre deployment environment allows evaluate performance improvement avoiding potential systematic biases test workloads differences real world test environments 
related previous projects worked improved monitoring techniques web services distributed systems knowledge live monitoring extend developer visibility web application behavior user desktop 
including note moving debugging capability user desktop benefits leveraging information easily available moment failure strongly agree 
algorithm isolating bugs code randomly sampled predicates program behavior large user base 
believe adaptive instrumentation live monitoring improve algorithms enabling active learning techniques global information encountered problems dynamically control predicate sampling 
closest spirit paradyn uses dynamic adaptive instrumentation find performance bottlenecks parallel computing applications 
challenges implications summary live monitoring framework improving developers visibility web application behavior continuous adaptive loop instrumentation observation analysis 
examples shown live monitoring localize bugs analyze runtime behavior detect evaluate optimization opportunities 
face open challenges look building practical deployable live monitoring system privacy issues added instrumentation 
believe browser sandbox web applications explicit trust users give web services store application specific personal information mails purchasing habits greatly reduces potential privacy concerns extra instrumentation may corner cases live monitoring pose risk 
challenge maintain predictability predictable behavior performance web applications dynamically adapt instrumentation 
successful believe implications instant may go monitoring open door adaptive recovery techniques including variations failure oblivious computing rx techniques 
cases detection failure discovery appropriate mitigation technique user execution application immediately applied help users experience problems 
moment web applications widespread platforms capability instantly 
automatic update mechanisms centralized software management tools enable instant broader domains 
aguilera mogul wiener reynolds muthitacharoen 
performance debugging distributed systems black boxes 
proceedings sosp 
barham donnelly isaacs 
magpie request extraction workload modelling 
proceedings osdi 
bosworth 
provide web api 
www com blogs ajb provide web api html aug 
chandra lam 
collective cache system management architecture 
proceedings nsdi 
cohn ghahramani jordan 
active learning statistical models 
journal artificial intelligence research 
ernst guo perkins rinard 
inference enforcement data structure consistency specifications 
proceedings issta 
ecma 
language specification rd ed 
www ecma international org publications files ecma st ecma pdf dec 
google 
google web toolkit 
code google com 
zheng aiken jordan 
scalable statistical bug isolation 
proceedings pldi 
miller callaghan hollingsworth 
paradyn parallel performance measurement tool 
ieee computer nov 
reilly 
web 
www 
com pub tim news web html sep 
qin sundaresan zhou 
rx treating bugs safe method survive software failure 
proceedings sosp 
rider 
changes may break gadgets 
com forums nov 
rinard roy leu jr 
enhancing server availability security failure oblivious computing 
proceedings osdi 
lu huang zhou 
automatic line failure diagnosis user site 
proceedings 
