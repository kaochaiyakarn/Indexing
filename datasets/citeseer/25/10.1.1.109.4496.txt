testing programs buffer overflow vulnerabilities eric cs ucdavis edu security vulnerabilities result buffer overflows 
testing technique instruments programs code keeps track memory buffers checks arguments functions determine satisfy certain conditions warns buffer overflow may occur 
executed normal test data opposed test data designed trigger buffer overflows 
tool method developed evaluated testing widely open source software packages 
evaluation shows tool useful finding buffer overflow flaws low false positive rate compares techniques 
buffer overflow vulnerabilities common security flaws 
past years accounted advisories issued cert demonstrating just serious issue infamous internet worm exploited buffer overflow vulnerability server program 
buffer overflow flaw typically results programmer fails bounds checking writing data fixed length buffer bounds checking incorrectly example check 
classic scenario buffer located program stack value written return address current stack frame 
return address changed point back buffer function overflow occurred returns program jumps bogus return address begins executing contents buffer 
contents buffer determined attacker funded national aeronautics space administration jet propulsion laboratory contract university california davis 
matt bishop bishop cs ucdavis edu university california davis execute code fits buffer privileges program 
buffers allocated heap data segment pose threat typically harder attacker exploit 
attacker find value memory overwrite security critical user id filename 
function pointer stored heap changed point arbitrary location pointer dereferenced code attacker choosing executed 
attacks occurred 
traditional testing methods statement branch coverage little find buffer overflow vulnerabilities 
problem program values execution paths needed reveal security flaw show regular operation show testing 
propose testing method tracks possible buffer lengths program executes 
library functions preconditions defining buffer overflow occur 
lengths cause conditions violated buffer overflow occur particular execution 
problem 
section reviews approaches problem detecting buffer overflow flaws source code 
section presents approach aid tester find buffer overflow vulnerabilities 
involves instrumenting source program testing program warnings generated instrumentation indicator buffer overflow conditions 
section describes tool implements approach 
section presents results tool open source software packages section discusses results compares approach previous approaches 
section concludes 
focus programming language 
provides little syntactic checking bounds programs functions tend terse unfortunately minimum error checking 
programs suffer security problems including buffer overflows 
method works similar language 
previous analyzing programs buffer overflows falls classes static analysis dynamic analysis 
static analysis number tools examine source code buffer overflow 
typical large class tools scans source code known dangerous library calls 
small amount checking arguments calls reports severity threat 
example library calls copy fixed length string buffer rated severe library calls copy contents array buffer presumably programmer knows length string number characters array 
looks potential problems race conditions 
similar tools include splint 
wagner integer range analysis locate potential buffer overflows 
treat strings data type assume manipulated standard library functions track allocated memory possible length strings maximum length string exceed minimum allocated space buffer overflow may occur 
pointer aliasing flow insensitive analysis way function calls handled mean string length allocated memory amount approximations actual values possible execution 
method imprecise 
dor improved scheme required annotation 
problem static analysis methods imprecision 
general problem detecting buffer overflow vulnerabilities scanning source code general undecidable tools heuristics determine buffer overflow occur 
dynamic tools take different approach 
dynamic analysis dynamic analysis examines program execution determine buffer overflows occur execution 
compilers add code check bounds arrange data structures memory cause hardware faults bounds exceeded additional instrumentation turned name efficiency 
various tools augment replace ability 
example purify detect kinds memory errors including accessing buffer past bounds 
compiled program code performs different kinds memory bookkeeping 
alternate approach test programs 
tool called fuzz test standard unix utilities giving input consisting large random streams characters :10.1.1.32.7648
programs crashed hung 
dominant causes problems pointers array dereferencing including buffer overflow flaws 
property testing checks programs satisfy certain properties including security related properties 
example property program free buffer overflow vulnerabilities applicable programs specified 
testing violations specification detected 
software fault injection testing methods syntactic changes code test 
change result violation system security policy tester portion code correct order avoid presence vulnerability 
ghosh connor technique find buffer overflows 
main problem dynamic analysis need test data causes overflows 
data program causes overflow dynamic techniques detect possible cases buffer overflow occurs 
buffer sizes dynamic analysis extend wagner method dynamic execution 
enables detect potential buffer overflows occur testing occurred different test data 
consider library function copies string library function bounds checking length longer space allocated data didn fit writes memory locations follow buffer overflow contents determined user input attacker may able exploit execute arbitrary code change data values 
normal testing string stored long potential buffer overflow detected 
suppose space allocated longer space allocated tion program 
detected runtime may indicate vulnerability 
consider program fragment shown table 
buffer overflow condition user enters characters library function overflow detected runtime called noticing amount space allocated execu table 
unsafe call amount space allocated program instrumented keep track space allocated buffer potential overflow detected testing buffer overflow occur testing 
approach eliminate false positives 
example place string call length null assignment just call means contains string length 
case call safe 
buffers passed dynamically allocated may possible compute actual allocations execution 
consider code input characters space allocated space allocated warning issued 
buffer overflow occur amount space allocated allo cated dynamically length string common library functions amenable analysis listed 
property tested shown 
refer interesting functions purposes limited analysis interested reader encouraged find functions derive relevant property 
list notation means length string stored buffer means amount space allocated 





security analyst obtains report possible security problems may wish prioritize order investigates problems 
prioritized list vulnerabilities employ similar technique 
example destination dynamically allocated programmer calculate space allocate 
allocation small case believe case executions program 
program misbehave normal testing anyway 
course exceptions experience indicates overflows involving dynamic allocation occur involving buffers static size 
similar argument applies destination source buffers statically allocated type warning issued 
destination dynamically allocated type warning occurs source dynamically statically allocated 
source dynamically allocated destination statically allocated type error arises 
table summarizes warnings 
benefit dynamic approach need approximations deal pointers casts difficult analyze statically 
type description source destination statically allocated source dynamically allocated destination statically allocated destination dynamically allocated table 
warning types point execution program value variable known 
necessary imprecision static approach language warning generated static overflow detection tool investigated inspection 
dynamic approach outlined tester investigate warning inspection generate set test cases satisfy coverage metric 
dynamic approach suffer imprecision number false positives potentially 
test set generated functional testing application approach result tester providing similar level accuracy 
tool tool systematic testing buffer overflows implements ideas 
takes input source files program tested generates instrumented version file compiled creates input files preprocessed input executed behavior information testing coverage achieved warnings generated emitted trace file 
coverage metric called interesting function coverage simple metric satisfied function call interesting functions executed 
clearly interesting function coverage subsumed statement coverage 
metric chosen simplicity relatively easy tester satisfy 
keep track buffers programmer may pass interesting function creates special function calls appear call added variable declaration declares buffer standard library function manages dynamically allocated memory 
call interesting function replaced call wrapper function invokes interesting function 
consider modify code fragment output appear new function calls record fact new buffers come scope 
calls place starting address buffer list size buffer 
function additional compared scans list recorded statically allocated buffers removes entries buffers lifetime ended 
alternative removing expired buffers insert instrumentation point buffer expires return statements function 
non local jumps means buffers removed list longer 
keep track dynamic memory call standard library functions replaced wrapper function 
wrappers record starting address paired buffer length placed list dynamically allocated buffers 
list separate lists statically allocated buffers 
wrapper removes freed buffer list 
programmer allocate amount memory constant different executions program 
example better treat memory pointed stat ically allocated respect issuing warnings 
amount memory allocated call determined constant expression different wrapper function tracks memory memory dynamically allocated non constant expression 
consider output table 
ing entry list match 
entry consists buffer starting address length easy compute points element buffer represented entry 
wrapper scans buffer list compar points th element table 
sample output wrapper computes effective buffer size remembers matched entry list statically allocated buffers 
list scanned list dynamically allocated buffers constant size length 
wrapper compares finds points buffer static length larger static length pointed generates type warning 
evaluation test versions ftp server wu ftpd beta 
chosen see uncover known vulnerabilities third see uncover new ones 
analyze compared 
net tools package linux tested 
package consists commands related networking support library 
chosen testing compared tool developed wagner number buffer overflow flaws net tools 
testing done redhat 
wu ftpd beta known exploitable buffer overflow flaw due misuse 
call flagged type warning 
known overflow flaws exist misuse uncovered type warning 
second flaw caused series calls calls warning type warning 
number buffer overflow flaws wu ftpd uncovered appeared result serious vulnerability 
ability uncover flaws demonstrates usefulness flagged type function true positives false positives total sprintf strcat strcpy table 
results wu ftpd warning types function true positives false positives total sprintf strcat strcpy table 
results wu ftpd warning type function true positives false positives total sprintf strcat strcpy table 
results wu ftpd warning type function true positives false positives total sprintf strcpy table 
results wu ftpd warning type tool 
tables summarize number types warnings generated tool 
purpose true positive means exists input program test results function call writing data past destination buffer turns flaw doesn represent security vulnerability reason stated 
false positive means input program test function call write past destination buffer 
program type warning indicated presence flaw 
testing buffer overflows incurring false positives 
ignoring type warnings number false positives false positives buffer function true positives false positives total bcopy memcpy sprintf strcat strcpy table 
results wu ftpd flow discovered 
table shows results testing run command line parameter set sensitivity cutoff 
cutoff vulnerabilities database reported ones level cutoff chosen highest includes interesting functions checked net tools test set developed command 
union test sets considered satisfy interesting function coverage support library different parts support library covered different test sets 
number overflow flaws uncovered 
results shown tables 
ing type warnings buffer overflow flaws generated false alarms 
false positive rate false positives true positive 
vulnerabilities wagner tool emitted type warning 
flaw wagner tool appears support library call returns struct field arbitrary length 
field copied may length bytes 
data returned attacker may able arrange length longer 
flaws appear exploitable net tools similar just come network function true positives false positives total sprintf strcat strcpy table 
results net tools warning types function true positives false positives total strcat strcpy table 
results net tools warning type function true positives false positives total sprintf strcpy table 
results net tools warning type function true positives false positives total strcpy table 
results net tools warning type described 
unfortunately data number false positives known false negatives generated wagner tool available 
discussion able identify known security vulnerabilities past versions wu ftpd demonstrating ability find known problems 
respect limited sample programs job keeping false positives low finding flaws 
wu ftpd false positive rate false positives true positives net tools 
compare simple tool false positive rate wu ftpd 
false positives mean part analyst manually inspect warnings important minimize false positives 
test data functional testing may reducing time needed test buffer overflows 
known false negatives low zero wu ftpd 
difficult know flaws exist non trivial program discussion necessarily known false negatives false negatives 
requires buffer overflows arise programmer misuse library functions 
test run sudo uncover known buffer overflow flaw 
inspection known flaw arose variable properly re initialized 
result detect meaningless value variable bore relation value needed testing precondition interesting function 
analysis scope interesting functions pertinent 
tests type warnings indicated false positives 
supports claim earlier programmers usually determine amount dynamically allocated destination storage correctly 
secondly flaws involved involving functions take buffer length parameter 
suggests programmers fill buffers functions take length parameter tend length parameter correctly 
point functions takes length parameter suffers problems 
places tested programs authors forgot add terminating null byte destination 
problem length source string length parameter add null byte 
result destination semantically string operations functions assume string produce unexpected results 
authors recommend replacing takes length parameter value equal length destination buffer making harder commit errors 
function guarantees destination null terminated 
functions tested similar semantics involved buffer overflow flaws 
provides indirect empirical evidence harder misuse testing special case testing 
property testing tester writes specification associates code locations specifications language called 
program tested instrumented specification 
tester say instrument calls instruments calls differently depending parameter passed represented constant expression 
formal mechanism describing different kinds warnings 
reports violations consistently 
straightforward extend support 
aspect oriented programming way modularize cross cutting concerns 
programming tasks logging usually spread source code object oriented procedural languages put module 
aspect oriented extension partially implement functionality provide mechanism instrumenting variable declarations required instrument statically declared buffers 
suggests aspect extension includes ability specify variable declarations useful 
provides dynamic technique look buffer overflows test data exercise 
compares favorably tools wagner static analysis tool takes advantage values computed execution program 
obvious retrospect failed report errors reported 
examination reports generated potential buffer overflows arising segments code compiled guarded false positives occur reported problems executing code code flagged compiled 
preprocessor statements 
systems code compiled reports false positives 
systems code compiled reported problems reported 
extensions possible 
extending find vulnerabilities involving direct assignment buffer elements allow uncover overflows related functions 
require determine possible integer range expression index buffer lines wagner tool 
hard see information obtained dynamically normal user input input probably cause value index outside bounds buffer 
lowering false positive rate interesting question 
false positives arose flow control constructs properly guarded dangerous function calls 
consider code wu ftpd call flagged appears body statement executed buffer overflowed due condition statement 
complex flow analysis detect allowing spurious warning suppressed 

smashing stack fun profit 
phrack november 
cert coordination center advisory ca 
www cert org advisories ca html 
cert coordination center advisory ca 
www cert org advisories ca html 
cert coordination center vulnerability note vu 
www kb cert org id 
kiczales feeley 
improve modularity path specific customization operating system code 
th acm sigsoft symposium foundations software engineering vienna university technology austria september 
cowan wagle pu beattie walpole 
buffer overflows attacks defenses vulnerability decade 
proceedings darpa information survivability conference expo 
dor rodeh sagiv 
checking string manipulations programs integer analysis 
proceedings international static analysis symposium june 

microscope analysis internet virus november 
proceedings ieee computer society symposium security privacy 
fink bishop 
property testing new approach testing assurance 
acm sigsoft software engineering notes july 
fink bishop levitt 
interface language specifications testing 
technical report cse university california davis 
fink ko archer levitt 
property testing environment application security critical software 
proceedings th irvine software symposium pages april 
ghosh connor mcgraw 
automated approach identifying potential vulnerabilities software 
proceedings ieee symposium security privacy pages may 
oakland ca 
hastings joyce 
purify fast detection memory leaks access errors 
proceedings winter usenix conference 

testing programs buffer overflow vulnerabilities 
master thesis university california davis september 

nul byte post bugtraq mailing list october 
www securityfocus com archive 
evans 
statically detecting buffer overflow vulnerabilities 
usenix security symposium washington august 
miller :10.1.1.32.7648
empirical study reliability unix utilities 
communications acm december 
miller de 
consistent safe string copy concatenation 
proceedings usenix annual technical conference june 
monterey california usa 
security advisory sun solaris heap overflow 
online securityfocus com archive 
openbsd developers single byte buffer overflow vulnerability ftpd december 
www openbsd org advisories ftpd txt 
secure software solutions rats rough auditing tool security 
www com rats 
bloch mcgraw 
static vulnerability scanner code 
proceedings th annual computer security applications conference december 
mcgraw 
building secure software 
addison wesley boston 
wagner 
personal communication may 
wagner foster brewer aiken 
step automated detection buffer overrun vulnerabilities 
symposium network distributed systems security ndss pages february 
san diego ca 
