fast adaptive layout algorithm undirected graphs extended system demonstration arne frick andreas ludwig heiko universit karlsruhe fakult informatik karlsruhe germany 
randomized adaptive layout algorithm nicely drawing undirected graphs spring embedder paradigm contains new heuristics improve convergence including local temperatures gravitational forces detection rotations oscillations 
proposed algorithm achieves drawings high quality wide range graphs standard settings 
algorithm fast applicable general undirected graphs substantially larger size complexity :10.1.1.13.8444:10.1.1.20.5663
aesthetically pleasing solutions cases 
give empirical data running time algorithm quality computed layouts 
problem aesthetically pleasing drawing graph receiving increasing attention literature 
way dealing problem construction straight line drawings edge mapped straight line segment plane 
problem reduces problem positioning vertices determining mapping ir criteria judging aesthetics graph drawing 
influential display symmetries existing graph minimization edge crossings 
furthermore edges bends possible deviation lengths small 
area drawing small possible vertices edges evenly distributed area 
connected vertices close 
straight line drawings avoid bends edges definition 
remaining criteria matched optimally polynomial time np 
approximations optimal solution appear feasible current state art 
simultaneous optimization criteria involve quality tradeoffs exist incompatible combinations 
examples full 
introducing notation sect 
briefly describe heuristics obtain approximations simultaneous optimization problem sect 

continue detailed discussion proposed algorithm called gem sect 

empirical data convergence time complexity proposed email frick informatik uni karlsruhe de algorithm different types graphs sect 

results compared publicly available implementations force directed algorithms :10.1.1.13.8444
conclude suggestions investigation complement numerical data graphical output gem algorithm 
appendix describes algorithm development environment app 
contains drawings types graphs including known ones literature 
notation notation graph sizes density 
shall conventions classify graphs different groups 
graphs size jv called tiny small medium large huge respectively 
acknowledge partition somewhat arbitrary reflect fact methods discussed focus tiny small graphs handle medium sized sparse graphs mention large huge ones 
distinguish sparse normal dense graphs jej jv jv jej jvj jej jvj 
motivated fact trees considered sparse meshes tori hypercubes small dimension represent normal case 
previous approaches known heuristics constructing straight line drawing undirected graph classified groups computational model employed 
spring embedder model drawing undirected graphs due eades 
generalizes previously known algorithms layout pcb 
analogy physics vertices treated mutually repulsive charges edges springs connecting attracting charges 
starting arbitrary initial placement vertices algorithm iterates system discrete time steps computing forces vertices updating position accordingly 
algorithm stops fixed number time steps 
obvious drawback approach system may converged fixed number steps hand time wasted unnecessarily number chosen large 
algorithm explicitly support detection display symmetries turned display symmetries exist 
kamada kawai refined model subsequently 
introduce optimal edge length vertices updated sequentially moving vertex time step 
algorithm performs gradient descent converges deterministically local minimum 
time complexity approach expressed terms jv jej 
optimization theory researchers introduced randomness overcome problem local minima 
technique statistical mechanics called simulated annealing allowing changes states higher energy :10.1.1.123.7607
arbitrary state change computed 
downhill move accepted uphill moves accepted probability depending current temperature 
initially system ability perform arbitrary moves temperature high 
probability choosing state energy approaches zero temperature lowered 
davidson harel employ simulated annealing achieve aesthetically pleasing results small medium sized graphs 
approach flexible easily adapted incorporate quality measures weights cost function unfortunately slow 
independently fruchterman reingold modified eades algorithm simple cooling schedule :10.1.1.13.8444
algorithm deterministic performs local optimizations 
distance vertex travel time limited depending current temperature 
third group heuristics preprocessing graph get initial placement 
full contains reviews 
gem algorithm algorithm proposed called gem short graph embedder 
contains novel algorithmic ideas 
include concept local temperature attraction vertices barycenter detection oscillations rotations 
major design goal interactive speed achieved medium sized graphs 
consider drawing interactive takes compute 
designed gem rely fast integer arithmetic 
hypothesized randomization works domain force directed graph drawing 
randomization plays important role places algorithm 
discussion gem algorithm starts observation cooling schedules appear give better results methods relying solely gradient descent running time unsatisfactory 
temperatures gem indicate maximum distance vertex travel updated 
temperature scale direct influence suitable choice parameters constants formulae attractive repulsive forces 
fruchterman reingold conjectured better cooling schedules allow efficient algorithms theirs :10.1.1.13.8444
davidson harel suggested adaptive cooling schedule explore idea 
knowledge algorithm proposed approach idea employ cooling schedule strict sense 
algorithm adapts data locally require global cooling assumed schedule 
vertex local temperature defined depends old temperature likelihood vertex oscillates part rotating subgraph 
local temperatures raise algorithm determines vertex probably close final destination 
global temperature defined average local temperatures vertices 
indicates stable drawing graph proposed algorithm consists stages iteration stage 
initialization consists assignment initial position impulse temperature vertex 
main loop updates vertex positions global temperature lower desired minimal temperature time allowance expired 
algorithm gem depicted fig 

practice graphs easily cool tmin exclude possibility graph moving rounds 
solved choosing tmin larger 
procedure gem input graph set record current position impulse local temperature skew gauge rmax maximal number rounds jv tmax upper bound local temperature tmin desired minimal temperature output position computed forall initialize tmin rounds rmax choose vertex update compute impulse update position temperature gem fig 

main loop gem algorithm vertices moved sequentially choice function 
assuming vertex chosen updated attractive repulsive forces acting computed 
addition gravitational force pulling vertex barycenter vertex cluster assumed 
gravitation accelerates convergence gem 
addition helps keep disconnected graphs loosely connected components 
resulting force scaled current temperature form impulse reflect algorithm knowledge state computation 
low temperature indicates layout stable locally exist oscillations rotations 
case movements short 
gem ability leave wells containing local energy minima local temperature increases change global energy distribution 
relative old distribution uphill moves possible 
unfortunately feature proofs convergence hard impossible 
discuss turn initialization stage sect 
choice mechanism sect 
impulse computation sect 
adjustment local temperature sect 

initialization vertex initialized zero impulse vector direction skew gauge initial temperature 
general confirm claim kamada kawai great influence number rounds performed reach equilibrium 
random initial placement usually suffices convergence observed certain structures binary trees meshes may gain computation initial placement inserting vertices initial round 
choice vertex update gem uses sequential update strategy single vertex updated iteration 
hypothesis suggests random choice 
gem converges faster random choice mechanism deterministic schedule 
achieve random selection proceed follows 
iterations grouped rounds 
round random permutation determined vertices chosen 
complexity choosing permutation amortized iteration algorithm compute random permutation elements 
impulse computation gem memorizes movement vertex 
analogy physics refer impulse vertex 
computation impulse governed global constants desired edge length gravitational constant factor determining strongly vertex driven barycenter current layout 
additional attractive force important effects unconnected loosely connected components separated far may lead increase convergence speed 
algorithm computing new impulse single vertex fig 

function mentioned scaling factor giving vertices edges inertia 
improves layout quality cases fig 

temperature adjustment computing current impulse vertex position updated 
impulse non negligible update internal data structures see fig 

new local temperature computed temperature current movement skew gauge indicating oscillating part rotation 
detection rotations oscillations requires knowledge sin cos optimal edge length :10.1.1.13.8444
important barycenter opposed center layout area force finished graph move barycenter coincides center layout area 
input vertex updated barycenter computed jv function growing deg deg output current impulse constants functions desired edge length gravitational constant attraction center gravity jv pos random disturbance small random vector default range forall repulsive forces des forall attractive forces des fig 

impulse computation vertex rotations occur example final layout temperature high 
rare circumstances graph rotation converges cooling appropriate thing non negligible rotations detected 
rotation assumed repeatedly sign rotation sensitive range depicted fig 
impulse possible directions current movement 
examples movement right direction rotation oscillation respectively 
situation triggers skew gauge dj approaches unbalanced scaled measure part rotation 
choice scale factor allows necessary rotations 
vertex subject oscillation current impulse point opposite directions detected testing cos 
case gem assumes vertex just passed right position lowers temperature sensitivity factor assuming passed optimal position turn round 
subsequent oscillations freeze vertex 
opposite current impulse approximately direction input vertex updated current impulse output updated constants tmax maximal temperature opening angle oscillation detection opening angle rotation detection sensitivity oscillation sensitivity rotation jv jpj scale current temperature save division point sin sin rotation sgn sin cos cos oscillation cos jv dj min tmax rotation fig 

temperature update algorithm oscillation fig 

detection rotations oscillations rotation cos gem interprets move right direction raises temperature somewhat accelerate movement 
opening angle controls sensitivity situation 
course opening angles chosen carefully 
sensitive cause 
computing new local temperature adjusting skew gauge housekeeping done order update barycenter 
having done iteration finished 
measurements section compare runtimes gem algorithm publicly available implementations kamada kawai fruchterman reingold algorithms contained graphed tool subsequently called kk fr respectively 
test suite consists graphs different types sizes densities 
measurements conducted sparcstation graphed test suite procedure 
due unavoidable overhead incurred unix operating system timings interpreted relative comparison performance benchmark 
important determining factor parameters algorithms 
case default values 
mentioned source code fr implementation heavily optimized 
gem run single insertion mode initial placement 
hard coded animation output kk code commented achieve competitive test conditions 
priori expected gem outperform kk fr terms runtime rely integer arithmetic unclear randomization inherent imprecision influence quality drawings 
resulting runtime quality measurements fig 

quality data measured drawing includes number edge crossings mean edge length scaling results edge length deviation minimal vertex distance dmin maximal vertex distance dmax 
dmin dmax scaled ensure comparability results 
results compared algorithms strive satisfy aesthetic criteria surprising find quality measurements yield similar results 
average observed gem performs slightly better fr 
small sparse graphs kk gives slightly better results considerably worse large graphs 
quality gem drawings 
considering heuristics quality function notion crossing free drawing algorithm surprisingly results planar embeddings 
comparison fr kk gem resolve cycles parts graph easily see fig 
indicated low number edge crossings 
experience gem cool graph cases drawings significantly worse default tmin graph gem kk fr name jv time dmin dmax time dmin dmax time dmin dmax binary tree sparse path sparse cycle normal square grid normal wheel normal hypercube normal dense dense star sparse binary tree sparse dodecahedron normal hypercube normal triangular grid normal dense path sparse binary tree sparse fibonacci tree sparse cycle normal square grid normal torus normal triangular grid normal hypercube dense binary tree sparse hexagonal grid normal triangular grid normal path sparse binary tree sparse path sparse triangular grid normal square grid normal table 
test suite graphs tiny small medium large huge 
result gem consistently faster methods 
fr times slower kk deteriorates rapidly graph sizes increase 
remains unclear feature implementation inherent algorithm 
iteration gem algorithm takes time jv forces exerted remaining jv vertices recomputed 
pc version gem runs fast graphed version 
achieved optimizations data structure level may attributed fact environment gui multi user overhead 
amd dx pc measured speed approximately iterations second 
heuristic experimenting says need approximately jv rounds 
round consists jv iterations iteration considers jv vertices implies estimated time complexity jv constant small depends adaptive compute layout undirected graphs local temperatures 
introduced algorithmic improvements previous approaches including local temperatures attraction barycenter detection rotations oscillations 
represents departure conventional gradient descent methods narrowing nearest local minimum quality function 
able match improve quality results obtained widely implementations fruchterman reingold kamada kawai algorithms running consistently faster 
results confirmed hypothesis randomization successfully force directed layout undirected graphs 
published presents mainly small sized graphs occasionally medium sized graphs gem easily handle large complex graphs 
graphs get larger larger drawing area small quickly 
human eye difficulty comprehending larger graphs graph partitioning schemes taken consideration 
chose explicitly minimize edge crossings gem avoid crossings see fig 

open questions problems remain solved 
known theoretical behavior proposed algorithm 
able experimentally confirm time complexity jv small constants give formal proof 
worse gem algorithm terminates satisfactory results proof convergence apparent 
research necessary determine importance single factor gem algorithm interplay 
experiments direction investigate leaving single factors contributing success gem randomization oscillation rotation gravitation 
exist interesting connections gem algorithm artificial neural network theory 
having seen animations gem runs mesh structures similarities kohonen feature maps apparent 
question comes mind connections domains deeper 
second intriguing connection improved backpropagation learning algorithms rprop quickprop notion local learning rates similar gem idea having local temperatures 
interesting experiment devise neural network graph drawing 
unfortunately connections help settle complexity stability questions raised researchers areas actively investigating questions 
major problem area graph drawing non existence standard set graphs judge quality drawings 
step direction definition set restricted domain straight line drawings 
hope contributed distinction graphs sizes densities test suite 
zimmermann gave valuable comments presentation results 
anonymous referees pointed earlier force directed placement 

di battista eades de tamassia editors 
proceedings alcom international workshop graph drawing 
alcom 

di battista eades tamassia tollis 
algorithms drawing graphs annotated bibliography 
report brown university june 

davidson david harel 
drawing graphs nicely simulated annealing 
technical report cs applied mathematics computer science weizmann institute science rehovot israel 
revised july appear communications acm 

eades 
heuristic graph drawing 
congressus numerantium 

fisk west 
accel automated circuit card etching layout 
proceedings ieee november 

fruchterman reingold 
graph drawing force directed placement 
software practice experience 

himsolt 
graphed graphical platform implementation graph algorithms 
proceedings graph drawing lncs princeton new jersey october 
dimacs workshop graph drawing springer 
volume 

quinn jr breuer 
forced directed component placement procedure printed circuit boards 
ieee transactions circuits systems cas 

kamada kawai 
algorithm drawing general undirected graphs 
information processing letters 

scott kirkpatrick gelatt vecchi 
optimization simulated annealing 
science 

donald knuth 
volume 
addison wesley nd edition 

manning 
geometric symmetry graphs 
phd thesis purdue university december 

metropolis rosenbluth rosenbluth teller 
equation state calculations fast computer machines 
chem 
phys 


layout algorithm undirected graphs 
graph drawing alcom international workshop paris graph drawing topological graph algorithms september 

watanabe 
heuristic graph base 
international journal man machine studies 
appendix describes environment developed gem 
written pc borland borland graphics interface 
turned early design stage needed specialized tool visualizing vertex temperatures quickly producing large test graphs 
decided select implement mechanisms extending small graphs regular way described 
addition knows types parameterized graphs mesh structures trees hypercubes connected allows interactive creation modification graphs 
concepts iteration duplication complex structures created easily 
graph iterated graph defined cloning original graph jv times connecting vertex original graph vertices assigned clone 
iterated shown fig 

duplication defined cloning adding edges original vertex clone 
shows duplicated 
example usefulness concept fig 
shows torus defined duplicating cycle times 
hypercube dimension quickly produced follows 
create vertex repeat times duplicate graph produced far 
visual examples appendix examples quality graphs drawn gem including known examples literature 
turn attention sparse structures give sequence drawings cycles fig 

example adaptive nature gem algorithm folding causes local temperatures remain high 
fig 
heuristics evenly spacing vertices illustrated paths example 
sequence intermediate steps drawing triangular mesh see fig 
shows gem handle opposed :10.1.1.13.8444
observe neighborhood folded area remains hot 
drawings square fig 
hexagonal fig 
meshes different sizes examples demonstrating gem focused certain structures fig 

iterated fig 

torus defined duplicating cycle fig 

duplicated vertex distance heuristic forces vertices placed inside hull runtimes function jv observed huge graphs distorted 
consequence gravitational force compute vertex impulses merely random vectors added impulse perfect symmetry disturbed perturbations kind occur 
gem optimize number edge crossings resulting drawing projection picture 
exemplified fig 

fig 
left layout produced middle turn computed right 
finish gem output examples papers fruchterman reingold davidson harel compare results 
gem manages draw graph fig 
planar davidson harel drawing graph fig 
basically fruchterman reingold version 
article processed atex macro package llncs style fig 

cycle jv vertices different stages development fig 

paths size jv iterations fig 

binary trees size jv iterations fig 

intermediate states triangular mesh fig 

square grids size jv iterations fig 

hexagonal grids size jv iterations fig 

different layouts icosahedron jv jej iterations see fruchterman reingold fig 

different layouts dodecahedron jv jej iterations see fruchterman reingold fig 

different layouts octahedron jv jej iterations fig 

drawing soccer ball known chemistry molecule jv jej iterations fig 

gem drawing graph fig 
drawing similar fig 
fig 

gem drawing graph fig 
drawing similar fig 

