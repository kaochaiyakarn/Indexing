scalable cluster computing mosix linux amnon barak mosix software tool supporting cluster computing 
consists kernel level adaptive resource sharing algorithms geared high performance overhead free scalability ease scalable computing cluster 
core mosix technology capability multiple workstations servers nodes cooperatively part single system 
algorithms mosix designed respond variations resource usage nodes migrating processes node preemptively transparently load balancing prevent memory depletion node 
mosix scalable attempts improve performance dynamic distribution redistribution workload resources nodes computing cluster size 
mosix conveniently supports multi user time sharing environment execution sequential parallel tasks 
far mosix developed times different version unix bsd linux 
describes th version mosix linux 
copyright amnon barak 
rights reserved oren la amnon institute computer science hebrew university jerusalem jerusalem israel www mosix cs huji ac il describes mosix technology cluster computing cc 
mosix set adaptive resource sharing algorithms geared performance scalability cc size shared component network 
core mosix technology capability multiple nodes workstations servers including smp cooperatively part single system 
order understand mosix compare shared memory smp multicomputer cc 
smp system processors share memory 
main advantages increased processing volume fast communication processes shared memory 
smp handle simultaneously running processes efficient resource allocation sharing 
time process started finished changes computational profile system adapt instantaneously resulting execution environment 
user involved cases know activities 
smp computing clusters cc collections share workstations smp servers nodes different speeds memory sizes possibly different generations 
cc geared multi user time sharing environments 
cc systems user responsible allocate processes nodes manage cluster resources 
cc systems nodes run operating system cooperation nodes limited operating system services locally confined node 
main software packages process allocation cc pvm mpi 
lsf extreme linux provide similar services 
packages provide execution environment requires adaptation application user awareness 
include tools initial fixed assignment processes nodes load considerations ignoring availability resources free memory overheads 
packages run user level just ordinary applications incapable respond fluctuations load resources redistribute workload adaptively 
practice resource allocation problem complex different kinds resources cpu memory inter process communication ipc resource different manner cases usage unpredictable 
complexity results fact different users coordinate activities 
knows optimize allocation resources processes activities users interfere optimization 
user smp systems guarantee efficient balanced resources running processes regardless resource requirements 
smp easy employ adaptive resource management completely transparent user 
current cc lack capabilities 
rely user controlled static allocation inconvenient may lead significant performance penalties due load imbalances 
mosix set algorithms support adaptive resource sharing scalable cc dynamic process migration 
viewed tool takes cc platforms step closer smp environments 
able allocate resources globally distribute workload dynamically efficiently simplifies cc relieving user burden managing cluster wide resources 
particularly evident multi user timesharing environments non uniform cc mosix mosix tool unix kernel linux consisting adaptive resource sharing algorithms 
allows multiple uni processors smp nodes running kernel close cooperation 
resource sharing algorithms mosix designed respond line variations resource usage nodes 
achieved migrating processes node preemptively transparently load balancing prevent thrashing due memory swapping 
goal improve cluster wide performance create convenient multi user time sharing environment execution sequential parallel applications 
standard run time environment mosix cc cluster wide resources available node 
disabling automatic process migration user switch configuration plain cc mpp single user mode 
current implementation mosix designed run clusters pentium workstations smp connected standard lans 
possible configurations may range small cluster pc connected ethernet high performance system large number high pentium smp servers connected gigabit lan myrinet 
technology mosix technology consists parts preemptive process migration ppm mechanism set algorithms adaptive resource sharing 
parts implemented kernel level loadable module kernel interface remains unmodified 
completely transparent application level 
ppm migrate process time available node 
usually migrations information provided resource sharing algorithms users may override automatic system decisions migrate processes manually 
manual migration initiated process synchronously explicit request process user super user 
manual process migration useful implement particular policy test different scheduling algorithms 
note super user additional privileges regarding ppm defining general policies nodes available migration 
process unique home node uhn created 
normally node user logged 
pvm node task spawned pvm daemon 
system image model mosix cc process run uhn processes users session share execu tion environment uhn 
processes migrate remote nodes local remote node resources possible interact user environment uhn 
example assume user launches processes migrate away uhn 
user executes ps report status processes including processes executing remote nodes 
migrated processes reads current time invokes gettimeofday get current time uhn 
ppm main tool resource management algorithms 
long requirements resources cpu main memory certain threshold user processes confined uhn 
requirements resources exceed threshold levels processes may migrated nodes take advantage available remote resources 
goal maximize performance efficient utilization network wide resources 
granularity distribution mosix process 
users run parallel applications initiating multiple processes node allow system assign processes best available nodes time 
execution processes new resources available resource sharing algorithms designed utilize new resources possible reassignment processes nodes 
ability assign reassign processes particularly important ease provide efficient multi user time sharing execution environment 
mosix central control master slave relationship nodes node operate autonomous system control decisions independently 
design allows dynamic configuration nodes may join leave network minimal disruptions 
algorithms scalability ensure system runs large configurations small configurations 
scalability achieved incorporating randomness system control algorithms node bases decisions partial knowledge state nodes attempt determine state cluster particular node 
example probabilistic information dissemination algorithm node sends regular intervals information available resources randomly chosen subset nodes 
time maintains small window arrived information 
scheme supports scaling information dissemination dynamic configurations 
resource sharing algorithms main resource sharing algorithms mosix load balancing memory 
dynamic load balancing algorithm continuously attempts reduce load differences pairs nodes migrating processes higher loaded loaded nodes 
scheme decentralized nodes execute algorithms reduction load differences performed independently pairs nodes 
number processors node speed important factors load balancing algorithm 
algorithm responds changes loads nodes runtime characteristics processes 
prevails long extreme shortage resources free memory empty process slots 
memory depletion prevention algorithm geared place maximal number processes cluster wide ram avoid possible thrashing swap ping processes 
algorithm triggered node starts excessive paging due shortage free memory 
case algorithm overrides load balancing algorithm attempts migrate process node sufficient free memory migration result uneven load distribution 
process migration mosix supports preemptive completely transparent process migration ppm 
migration process continues interact environment regardless location 
implement ppm migrating process divided contexts user context migrated system context uhn dependent may migrated 
user context called remote contains program code stack data memory maps registers process 
remote encapsulates process running user level 
system context called deputy contains description resources process attached kernel stack execution system code behalf process 
deputy encapsulates process running kernel 
holds part system context process remain uhn process 
process migrate times different nodes deputy migrated 
interface user context system context defined 
possible intercept interaction contexts forward interaction network 
implemented link layer special communication channel interaction 
shows local process user level user level deputy link layer kernel kernel processes share uhn 
left process regular linux process right process split remote part migrated node 
migration time fixed component establishing new process frame new remote site linear component proportional number memory pages transfered 
minimize migration overhead page tables process dirty pages transferred 
execution process mosix location transparency achieved forwarding site dependent system calls deputy uhn 
system calls synchronous form interaction process contexts 
system calls executed process intercepted remote site link layer 
system call site independent executed remote locally remote site 
system call forwarded deputy executes system call behalf process uhn 
deputy returns result back remote site continues execute user code 
forms interaction process contexts signal delivery process wakeup events network data arrives 
events require deputy asynchronously locate interact remote 
remote local process migrated process link layer location requirement met communication channel 
typical scenario kernel uhn informs deputy event 
deputy checks action needs taken informs remote 
remote monitors communication channel reports asynchronous events signals just resuming user level execution 
note approach robust affected major modifications kernel 
relies machine dependent features kernel hinder porting different architectures 
drawback deputy approach extra overhead execution system calls 
additional overhead incurred file network access operations 
example network links sockets created uhn imposing communication overhead processes migrate away uhn 
overcome problem developing sockets move process allow direct link migrated processes 
currently overhead significantly reduced initial distribution communicating processes different nodes pvm mpi 
system imbalanced mosix algorithms reassign processes improve performance 
implementation porting mosix linux started feasibility study 
developed interactive kernel debugger pre requisite project scope 
debugger invoked user request kernel crashes 
allows developer examine kernel memory processes stack contents allows trace system calls processes kernel insert break points kernel code 
main part project implemented code support transparent operation split processes user context running remote node supported deputy runs uhn 
time wrote communication layer connects process contexts designed interaction protocol 
link contexts implemented top simple exclusive tcp ip connection 
implemented process migration mechanism including migration away uhn back uhn remote sites 
information dissemination module ported enabling exchange status information nodes 
facility algorithms process assessment automatic migration ported 
designed implemented mosix application programming interface api proc 
deputy remote mechanisms deputy representative remote process uhn 
entire user space memory resides remote node deputy hold memory map 
shares main kernel map similarly kernel thread 
kernel activities execution system calls necessary transfer data user space kernel 
normally done copy user copy user kernel primitives 
mosix kernel memory operation involves access user space requires deputy communicate remote transfer necessary data 
overhead communication due remote copy operations may repeated times single system call quite substantial mainly due network latency 
order eliminate excessive remote copies common implemented special cache reduces number required interactions prefetching data possible initial system call request buffering partial data deputy returned remote system call 
prevent deletion overriding memory mapped files demand paging absence memory map deputy holds special table files mapped remote memory 
user registers migrated processes normally responsibility remote context 
register combination registers may temporarily owned manipulation deputy 
remote guest processes accessible processes run node locally originated nodes vice versa 
belong particular user remote node run sent signals manipulated local processes 
memory accessed forced local system administrator migrate 
process may need perform mosix functions logically stopped sleeping 
processes run mosix functions sleep resume sleeping event waiting occurred 
example process migration possibly done process sleeping 
purpose mosix maintains logical state describing processes see process opposed immediate state 
migration constraints certain functions linux kernel compatible process context division 
obvious examples direct manipulations devices direct access privileged bus instructions direct access device memory 
examples include writable shared memory real time scheduling 
case allowed guarantee migrating unfair processes nodes 
process uses automatically confined uhn 
process migrated migrated back uhn 
information collection statistics process behavior collected regularly system call time process accesses user data 
information assess process migrated uhn 
statistics decay time adjust processes change execution profile 
cleared completely execve system call process change nature 
process control collection decay statistics 
instance process may complete stage knowing characteristics change may cyclically alternate combination computation mosix api mosix api traditionally implemented set reserved system calls configure query operate mosix 
line linux convention modified api interfaced proc file system 
prevents possible binary incompatibilities user programs different linux versions 
api implemented extending linux proc file system tree new directory proc mosix 
calls mosix proc include synchronous asynchronous migration requests locking process automatic migrations finding process currently runs finding migration constrains system setup administration controlling statistic collection decay information available resources configured nodes information remote processes 
mosix brings new dimension scaling cluster computing linux 
allows construction high performance scalable cc commodity components scaling introduce performance overhead 
main advantage mosix cc systems ability respond run time unpredictable irregular resource requirements users 
noticeable properties executing applications mosix adaptive resource distribution policy symmetry flexibility configuration 
combined effect properties implies users know current state resource usage various nodes number 
parallel applications executed allowing mosix assign reassign processes best possible nodes smp 
mosix project expanding directions 
completed design sockets reduce inter process communication overhead 
similar optimization temporary files allow remote process compiler create temporary files remote node 
general concept optimization migrate resources process reduce remote access overhead 
project developing new competitive algorithms adaptive resource management handle different kind resources cpu memory ipc 
researching algorithms network ram large process utilize available memory nodes 
idea spread process data nodes migrate usually small process data bring data process 
consider extending mosix platforms dec alpha sun sparc 
details current state mosix available url www mosix cs huji ac il 
amir barak 
opportunity cost approach job assignment reassignment scalable computing cluster 
proc 
oct 
barak braverman 
memory scalable computing cluster 
journal microprocessors microsystems aug 
barak braverman laden 
performance pvm mosix preemptive process migration 
proc 
seventh israeli conf 
computer systems software engineering pages june 
barak wheeler 
mosix distributed operating system load balancing unix 
lecture notes computer science vol 

springer verlag 
barak la 
mosix multicomputer operating system high performance cluster computing 
journal generation computer systems march 
boden cohen seitz 
su 
myrinet gigabit second local area network 
ieee micro feb 
platform computing lsf suite 

geist beguelin dongarra jiang manchek sunderam 
pvm parallel virtual machine 
mit press cambridge ma 
gropp skjellum 
mpi 
mit press cambridge ma 
red hat 
extreme linux 

