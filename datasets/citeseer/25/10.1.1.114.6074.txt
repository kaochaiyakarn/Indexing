edit automata enforcement mechanisms run time security policies jay bauer david walker department computer science princeton university princeton nj technical report tr may analyze space security policies enforced monitoring modifying programs run time 
program monitors called edit automata machines examine sequence application program actions transform sequence deviates specified policy 
edit automata rich set transformational powers may terminate application truncating program action stream may suppress undesired dangerous actions necessarily terminating program may insert additional actions event stream 
providing formal definition edit automata develop rigorous framework reasoning cousins truncation automata terminate applications suppression automata terminate applications suppress individual actions insertion automata terminate insert 
give settheoretic characterization policies sort automaton enforce provide examples policies enforced sort automaton 
designing secure extensible system operating system allows applications download code kernel database allows users submit optimized queries ask important questions 
revised extended version enforceable security policies appeared workshop foundations computer security june 

sorts security policies expect system enforce 

sorts mechanisms need enforce policies 
questions answered effectively understanding space enforceable security policies power various enforcement mechanisms 
significant effort define class enforceable security policies due schneider sch 
investigated security properties enforced specific type program monitor 
schneider monitors interpose untrusted program machine program runs 
monitor examine sequence security relevant program actions time recognizes action violate policy monitor terminates program 
mechanism general decisions terminate program depend entire history program execution 
monitors terminate programs modify behavior possible define powerful enforcement mechanisms 
re examine question security policies enforced run time monitoring untrusted programs 
approach differs schneider automata model program monitors view program monitors transformers edit stream actions produced untrusted application 
new viewpoint leads define hierarchy enforcement mechanisms different transformational capabilities truncation automaton recognize bad sequences actions halt program execution security policy violated modify program behavior 
automata similar schneider original security monitors 
suppression automaton addition able halt program execution ability suppress individual program actions terminating program outright 
insertion automaton able insert sequence actions program action stream terminate program 
edit automaton combines powers suppression insertion automata 
able truncate action sequences insert suppress security relevant actions 
general term security automaton refer automaton model program monitor including automata mentioned 
main contribution article development robust theory reasoning machines variety different conditions 
previous authors sch term refer specifically automata powers similar truncation automata discuss section 
theory characterize class security policies enforced sort automaton provide examples security policies lie class 
important particular result methodology gives rise straightforward rigorous proofs concerning power security mechanisms range enforceable security policies 
methodology broken main parts 
step 
define underlying computational framework range security policies considered 
define software systems sorts policies consideration section section 
step 
specify means enforce security policy 
see section choices definition 
sure enforcement model accurately reflects desires system implementer environment monitor operates 
section explains limitations induced decisions steps 
step 
formally specify operational behavior enforcement mechanism question 
sections define operational semantics different sorts monitors provides examples policies enforce 
step 
prove previous definitions security mechanism question able enforce desired properties 
sections state theorems concerning security policies type monitor enforce 
formal proofs appendix completing analysis edit automata related machines discuss related section 
section concludes taxonomy security policies discussion unanswered questions continuing research 
security policies enforcement mechanisms section define overarching structure secure systems intend explore 
define means security policy means enforce security policy 
give generic definition security automaton action sequence transformer 
systems executions policies specify software systems high level abstraction 
system specified set program actions referred program events set possible executions 
execution simply finite sequence actions 

previous authors considered infinite executions finite ones sch 
applications want enforce policies web servers operating systems considered run infinitely practice executions eventually terminate 
allow countably infinite restrict finite arbitrarily long executions simplify analysis 
metavariables range finite sequences actions 
symbol denotes empty sequence 
notation denote th action sequence count 
notation denotes subsequence involving actions 
denotes subsequence involving actions 
notation denote concatenation sequences 
prefix write 
set executions pre set prefixes executions 
important distinguish uniform systems nonuniform systems 
uniform system set finite sequences symbols conversely nonuniform system uniform systems arise naturally program completely unconstrained unconstrained programs may execute operations order 
effective security system combine static program analysis preprocessing run time security monitoring 
case java virtual machines example combine type checking stack inspection 
program analysis preprocessing model checking control data flow analysis program instrumentation type checking proof carrying code give rise nonuniform systems 
security policy predicate sets executions 
set executions satisfies policy 
common extensional program properties fall definition security policy including 
access control policies specify execution may operate certain resources files sockets invoke certain system operations 
availability policies specify program acquires resource execution release resource arbitrary point execution 
bounded availability policies specify program acquires resource execution release resource fixed point execution 
example resource released steps system invariant holds 
call condition demands release resource bound policy 
information flow policy concerning inputs outputs specify execution function exist execution 
security properties alpern schneider distinguish properties general policies follows 
security policy deemed computable property form 

property computable predicate property defined exclusively terms individual executions 
may specify relationship possible executions program 
information flow example specified condition set possible executions program property 
example policies provided previous section security properties 
assume empty sequence contained property 
describes idea untrusted program started executing violation property 
technical perspective decision allows avoid repeatedly considering empty sequence special case execution sequence definitions enforceable properties 
set actions predicate induces security property 

symbol interchangeably predicate execution sequences induced property 
normally context clear meaning intend 
safety properties properties specify bad happens called safety properties lam 
definition precise follows 
predicate induces safety property pre safety informally definition states bad action taken place excluding initial segment execution property extension segment remedy situation 
example policies safety properties restricted resource accessed policy broken 
way un access resource fix situation 
definition safety differs slightly previous authors 
wish consider nonuniform systems ranges pre 
uniform systems pre consequently definition give corresponds exactly previous 
nonuniform systems pre superset 
definition safety implies sequence may bad point correspond full execution sequence 
liveness properties contrast safety properties liveness properties state exceptionally bad happen finite amount time 
finite sequence actions extended lies property 
formally predicate induces liveness property pre liveness uniform systems availability liveness property 
program acquired resource extend execution releases resource step 
safety considering nonuniformity requires modified definition liveness lets range pre 
limiting considering finite sequences definition liveness excludes interesting liveness properties termination 
definition liveness sake comparison safety 
properties alpern schneider show property decomposed combination safety property liveness property 
bounded availability example property combines safety liveness uniform systems 
suppose bounded availability policy states resource acquired released released steps acquired 
property contains element safety bad thing may occur eleven steps releasing resource 
purely safety property sequences property taken steps releasing resource may extended sequences property release resource ninth step 
security automata way enforcing security properties monitor runs parallel target program sch 
target program wishes execute security relevant operation monitor checks policy determine operation allowed 
target program execution sequence property monitor transforms sequence obeys property 
program monitor formally modeled security automaton deterministic finite infinite state machine defined respect system 
specifies possible automaton states initial state 
variety automata slightly different sort complete deterministic transition function differences account variations expressive power 
exact specification part definition kind automaton 
specify execution different kind security automaton labeled operational semantics 
basic single step judgment form denotes sequence actions target program wants execute denotes current state automaton denote action sequence state automaton takes single step denotes sequence actions produced automaton 
input sequence observable outside world outputs observable 
consider nonuniform systems constrain may element 
generalize single step judgment multi step judgment follows 
basic multi step judgment form 
reflex trans consider security automata transition functions take current state input action actions target program wants execute returns new automaton state sequence actions automaton outputs 
automata may may consume current input action making transition 
enforceable properties able compare contrast power various security mechanisms crucial rigorous definition means mechanism enforce security property 
believe enforcement mechanisms accomplish task effectively obey principles 
soundness enforcement mechanism ensure observable outputs obey property question 
transparency enforcement mechanism preserve semantics executions obey property question 
criterion requires automata transform bad program executions way observable outputs obey property 
security mechanism allows outsiders observe executions satisfy policy unsound inadequate mechanism 
second criterion requires enforcement mechanisms operate invisibly executions obey property question 
words editing operations perform change meaning valid execution 
conservative enforcement 
enforcement mechanism able obey criterion necessarily second say mechanism enforces property conservatively 
definition conservative enforcement automaton starting state conservatively enforces property system 

conservative enforcement gives automaton great latitude 
relationship automaton output output target constrained automaton may choose enforce policies simply outputting particular stream actions regardless behavior target 
automaton able enforce property useful manner 
existential quantification ensures automaton eventually halts inputs 
precise enforcement 
order formalize second enforcement criterion transparency specific means preserve semantics program execution 
notion may differ substantially computational context offer couple different definitions 
simplest reasonable definition requires automaton question outputs program actions lockstep target program action stream 
definition precise enforcement automaton starting state precisely enforces property system 



automaton precisely enforces property conservatively enforces property outputs actions lockstep target application 
automaton interfere program execution way input obeys property action valid input sequence accepted action considered 
precise enforcement right correctness criterion security monitors delay outputting program actions change semantics application 
usually case interactive applications require action return value continuing 
effective enforcement 
definition precise enforcement recognize fact case syntactically different action sequences may semantically equivalent 
happens sorts ways 
sequence containing unnecessary actions series idempotent actions may equivalent sequence actions removed 
systems example closing file twice succession equivalent closing just 

sequence replaces action different action semantics may considered equivalent original sequence 
may permissible replace actions single action subsumes behavior 
example action opens socket followed action sends data socket semantically equivalent macro instruction 

sequence independent actions permuted may equivalent original sequence 
example want open different files order may matter 
final definition enforcement uses system specific equivalence relation executions take possibilities account 
require relation reflexive symmetric transitive 
property consider distinguish equivalent sequences equivalence equivalence relation hand give concrete definition means security automaton effectively enforce security property 
definition effective enforcement automaton starting state effectively enforces property system 


informally automaton effectively enforces property conservatively enforces property obeys principle transparency 
limitations reasoning security acutely aware situations formal results apply attacks come outside model 
case realistic situations security automata fail enforce desired policy 
policy predicate execution sequences 
policy depends external environmental factors value secret hidden monitor monitor may able enforce policy properly 
monitors see individual sequences actions general base decisions executions target application security automata properties general policies 
monitor unable effectively manipulate insert suppress certain security relevant actions 
real time system properties enforceable monitor simply perform expected computation necessary real time window 
alternatively may data secret keys passwords monitor effectively synthesize 
mean monitor unable insert certain program actions enforce certain properties 
monitor unable observe certain security relevant actions 
application direct access hardware device monitor unable interpose application device may unable enforce certain properties 
monitor compromised untrusted program 
application able corrupt monitoring code data monitor able enforce meaningful properties 
practice means software monitor isolated application safe language technology operating system support 
truncation automata limited sort security automaton investigate truncation automaton 
truncation automaton change target output way target attempts invoke forbidden operation 
occurs truncation automaton halts target program 
sort automaton primary focus schneider sch 
viewed truncation automata sequence recognizers 
fit idea framework recast machines sequence transformers 
definition truncation automaton finite infinite state machine defined respect system 
specifies possible automaton states initial state 
partial function specifies transition function automaton indicates automaton accept current input action move new state 
inputs defined automaton halts target program 
operational semantics truncation automata specified 
step described section extend single step relation multi step relation reflexivity transitivity rules 
precisely enforceable properties schneider ues ues demonstrate mechanisms similar truncation automata precisely enforce important access control properties including software fault isolation java stack inspection 
interestingly definition truncation automata independent definition safety limit attention uniform systems find truncation automata precisely enforce exactly set safety properties 
theorem uniform precise enforcement property uniform system precisely enforced truncation automaton pre 


proof please see appendix proof 
omit due length 
case security automata introduced expand set properties truncation automata precisely enforce considering operate nonuniform systems 
example suppose policy requiring program exits open resources closed suppose working system programs instrumented inserting resource close actions exit point program 
safety property illegal sequence open may lead legal sequence open close instrumenting ensures illegal executions eventually legal 
truncation automaton fact accept potentially illegal sequences 
example demonstrates nonuniform systems truncation automata precisely enforce just safety properties 
illustrates nonuniform system rules illegal input sequences impossible truncation automata precisely enforce desired property 
extent truncation automaton power nonuniform systems captured theorem 
theorem nonuniform precise enforcement property system precisely enforced truncation automaton exists decidable predicate executions pre 



proof see appendix intuitively encountering illegal portion input sequence truncation automaton options 
may halt way correct sequence may accept continue decide illegal input corrected actions 
effectively enforceable properties addition harnessing power constraints placed set executions precisely enforce non safety properties truncation automata take advantage system equivalence relation effectively enforce non safety properties uniform systems 
consider uniform system actions open close login window 
wish enforce policy action sequence close login window 
policy allows login window closed opened closed number times considered equivalent closing window 
sequences sequences form close open close satisfy property close open close close 
safety property illegal sequence close open extended legal sequence close open close 
truncation automaton effectively enforce property checking action closes login window 
automaton accepts action halts accept halts 
effectively enforces property legal sequence equivalent accepted close action sequences emitted automaton close obey property 
example precise enforcement nonuniform systems illustrates truncation automata effectively enforce just safety properties non safety properties limited 
formally characterize properties effectively enforceable truncation automata generalize transformations truncation automata induce instruction sequences functions act sequences actions 
set actions function truncation rewrite function satisfies conditions 


predicate defined general rewrite function sequence follows 
informally true automaton output matches rewrite function halts input output additional actions 
automaton stops processing input example applying rule examine extensions output extension match output 
restrictions placed truncation rewrite functions capture operational restrictions truncation automata 
condition ensures truncation rewrite functions output actions receiving input condition stipulates examining current action rewrite function accept output finished outputting actions corresponding earlier input halt output 
note deciding transform action rewrite function base decision history entire execution input function condition just theorem specifies properties effectively enforceable truncation automata uniform nonuniform systems 
theorem effective enforcement property system effectively enforced truncation automaton exists computable truncation rewrite function executions 

proof see appendix suppression automata novel view security automata sequence transformers short step define new sorts automata greater transformational capabilities truncation automata 
section describe suppression automata characterize properties enforce precisely effectively 
definition suppression automaton finite infinite state machine defined respect system 
set possible machine states distinguished starting state machine partial function specifies transition function 
partial function domain indicates action question suppressed emitted 
steps note rule strictly necessary halting automaton suppress actions simplifies automaton specification decreases running time 
extend single step semantics multi step semantics reflexivity transitivity rules section 
precisely enforceable properties similarly truncation automata uniform systems suppression automata precisely enforce safety property properties 
theorem uniform precise enforcement property uniform system precisely enforced suppression automaton pre 


proof see appendix nonuniform system suppression automata precisely enforce properties enforceable truncation automata 
example consider system aq rel aq rel aq rel aq rel symbols aq rel denote acquisition release resource 
set executions includes zero uses resource 
scenario arise publish policy programs release resource times 
publishing policy find bug implementation impossible handle load predicting 
naturally want tighten security policy soon possible able change policy published 
fortunately suppression automaton suppress extra uses dynamically change policy policy policy 
notice ordinary truncation automaton sufficient change terminate execution case rel symbol missing sequence 
terminating application truncation automation unable insert rel necessary satisfy policy 
formally characterize properties precisely enforced suppression automata generalize automata functions act sequences symbols 
set actions function suppression rewrite function satisfies conditions 


conditions encode restrictions placed suppression automata output actions input input action accepted suppressed 
halting equivalent suppressing additional input actions 
suppression automaton precisely enforce properties 
theorem nonuniform precise enforcement property system precisely enforced suppression automaton exists computable function sequences 



proof see appendix effectively enforceable properties uniform systems suppression automata effectively enforce proper superset properties enforceable truncation automata 
preceding discussion nonuniform precise enforcement illustrate example 
consider authenticated login policy requires users wish login authenticated login uniform system actions unauthenticated login authenticated login 
system unauthenticated login followed authenticated login semantically equivalent single authenticated login logging authenticated login equivalent single authenticated login 
truncation automaton effectively enforce property seeing take valid action 
accept authenticated login may occur violates property 
halt action may making automaton input obey property equivalent output 
contrast suppression automaton effectively enforce property simply suppressing 
action suppression automaton accepts correctly effectively enforced property output equivalent input 
appear input sequence violates property suppression automaton emitted satisfying property 
theorem formally specifies properties effectively enforceable suppression automata 
theorem effective enforcement property system effectively enforced suppression automaton exists computable function executions 

proof see appendix essence suppression automata effective suppress action potentially bad time unnecessary 
input sequence turns property suppressed action unnecessary harm done 
insertion automata section introduces insertion automata power insert actions action stream halt target program suppress actions 
truncation suppression automata define formally consider properties enforce precisely effectively 
definition insertion automaton finite infinite state machine defined respect system 
partial function specifies transition function 
new element partial function specifies insertion finite sequence actions program action sequence 
call insertion function type component returned pair indicates finite nonempty sequence actions inserted 
order maintain determinacy automaton require domain insertion function disjoint domain transition function 
specify execution insertion automaton 
relation defined 
step ins extend single step semantics multi step semantics 
precisely enforceable properties identically truncation suppression automata uniform systems insertion automata precisely enforce exactly set safety properties 
surprisingly power suppress insert actions enable security automata precisely enforce properties uniform systems 
illegal sequence transformed legal sequence doing prevents legal extension precisely enforced sequence modified accepted entirely lockstep manner 
regardless transformational capabilities security automaton execution sequences uniform systems precisely enforce safety properties 
theorem uniform precise enforcement property uniform system precisely enforced insertion automaton pre 


proof see appendix considering nonuniform systems expands set precisely enforceable properties 
consider nonuniform aq rel system section 
time want enforce property resource exactly twice zero times 
satisfy property aq rel aq rel 
truncation automaton precisely enforce property encountering aq take action 
accept full input sequence may aq rel automaton way inserting required truncate give precisely enforcing input start aq obey property aq rel 
insertion automaton precisely enforces property accepting aq actions 
encounters rel insert input 
formally characterize properties precisely enforced insertion automaton follows 
theorem nonuniform precise enforcement property system precisely enforced insertion automaton exists computable function executions pre 


proof see appendix compare power insertion automata suppression automata 
suppression automaton precisely enforce policy described section insert events necessary program releases resource simply suppress resource acquisitions modify sequences satisfy policy 
insertion automata precisely enforce properties suppression automata 
hand insertion automaton precisely enforce zero aq rel policy section simply inserting rel event halting bad sequence aq transformed aq rel 
generalizing see insertion automata strictly powerful precise suppression automata 
theorem precise enforceable subset precise enforceable exists suppression automaton qs precisely enforces system exists insertion automaton qi precisely enforces system 
proof see appendix effectively enforceable properties consider insertion automata operating effective precise 
automata seen far insertion automata viewed light enforce greater range properties uniform systems 
illustrate application specific example san francisco cable car 
property want enforce person boards car board show ticket conductor show conductor driver show driver 
may show ticket getting car ok redundant show ticket twice 
person may board car 
sequences property getting car showing ticket boarding 
insertion automaton effectively enforce property seeing bad sequence ticket shown passenger boards board insert action show driver 
stream turns contain show driver show conductor harm done show driver board show driver board show driver show driver board show conductor board show conductor 
rd rd rd insertion automaton effectively enforces cable car policy uniform system 
shows insertion automaton effectively enforces cable car policy 
nodes picture represent automaton states arcs represent transitions 
action arc triggers transition sequence arc represents actions emitted 
arc multiple symbols insertion transition 
transitions accepting transitions arc current action automaton halts 
truncation automaton effectively enforce property way handle initial board action 
accepts actions allowed passenger board showing ticket halts sequence obey property preserved semantics input sequence 
way effectively enforce property 
precise enforcement compare powers insertion suppression automata effective 
authenticated login policy section effectively enforced insertion automaton 
confronted sequence insertion automaton accept input output obey property halt sequence potentially property insert possible actions stream obey property equivalent stream inserted 
shows properties effectively enforceable suppression automata effectively enforceable insertion automata 
conversely properties effectively enforceable insertion automata effectively enforced suppression automata 
cable car example instance effectively enforced suppression automaton 
confronted board action suppression automaton accept board halt suppress change legal sequence equivalent board show driver show driver board show driver 
characterize properties effectively enforced insertion automata generalize automata functions act sequences symbols 
set actions function insertion rewrite function satisfies conditions 


computable predicate defined section 
intuition insertion rewrite functions similar rewrite functions possible behaviors corresponding automata consider 
processing action insertion automaton react ways may accept insert number actions number inserted actions finite article limit analysis finite length sequences accepting halt target insert number actions halting target 
clause condition captures possibilities allowing rewrite function insert number possibly zero actions accepting 
second part condition captures possibilities number possibly zero actions inserted halting 
sake determinacy sure clauses condition applies case automaton inserts sequence ends halts handled accepted halting 
theorem formally specifies properties effectively enforceable insertion automata 
theorem effective enforcement property system effectively enforced insertion automaton exists computable insertion rewrite function executions 

proof see appendix defining feature insertion automata effective allow required actions inserted sequence ok inserted actions repeated 
automaton input obey property automaton output remains semantically equivalent input 
edit automata turn far powerful security automaton edit automaton 
defining edit automata formally considering properties enforce precisely effectively extended example edit automaton effectively enforces market transaction policy 
definition form edit automaton combining insertion automaton suppression automaton 
machine described tuple form 
operational semantics derived composition operational rules previous automata 
partial functions domain disjoint domains 
steps ins rule strictly necessary accepting action automaton insert suppress original presence allows acceptance action step 
simplifies specification automaton general decreases running time 
similarly suppression automata effect rule accomplished suppressing input cost increased running time specification complexity 
security automata extend single step semantics edit automata multi step semantics rules reflexivity transitivity 
precisely enforceable properties uniform systems edit automata precisely enforce exactly set safety properties 
follows immediately discussion section precise uniform systems edit automata power truncation suppression insertion automata 
theorem uniform precise enforcement property uniform system precisely enforced edit automaton pre 


proof see appendix consider nonuniform systems edit automata precisely enforce exactly properties precisely enforceable insertion automata 
result particularly surprising edit automata just composition insertion suppression automata insertion automata precisely enforce superset properties precisely enforceable suppression automata 
theorem nonuniform precise enforcement property system precisely enforced edit automaton exists computable function executions pre 


proof see appendix effectively enforceable properties similarly truncation suppression insertion automata considering edit automata effective enables enforce wider range properties 
addition edit automata effectively enforce properties effectively enforceable suppression insertion automata 
section illustrates detailed example 
edit automata powerful effective insert actions required suppress actions appear original input sequence 
conversely edit automaton suppress sequence potentially illegal actions sequence determined legal just re insert 
interestingly technique edit automata effectively enforce property automaton simply suppresses actions confirm current prefix obeys property point inserts suppressed actions 
legal input output modification 
input illegal edit automaton output longest valid prefix 
theorem formalizes idea proof shows construct edit automaton effectively enforce property 
theorem holds systems uses strict equality equivalence relation places constraints set possible executions may uniform 
theorem effective enforcement property system effectively enforced edit automaton 
proof see appendix example transactions demonstrate power edit automata show implement monitoring transactions 
desired properties atomic transactions en commonly referred acid properties atomicity entire transaction executed part executed consistency preservation completion transaction system consistent state isolation effects transaction visible concurrently executing transactions transaction committed durability permanence effects committed transaction undone failed transaction 
property atomicity modeled edit automaton creating intentions log 
automaton suppresses input actions start transaction transaction completes successfully entire sequence actions emitted atomically output stream discarded 
consistency preservation enforced simply verifying sequence emitted leaves system consistent state 
durability permanence committed transaction ensured fact committing transaction modeled emitting corresponding sequence actions output stream 
action written output stream longer touched automaton furthermore failed transactions output 
model actions single agent example ignore issues isolation 
ning pay edit automaton effectively enforces market policy 
example concrete model simple market system main actions take pay represent acquisition apples corresponding payment 
range actions occur system take pay window shop browse 
policy time agent takes apples pay apples 
payments may come acquisition vice versa take pay semantically equivalent pay take 
automaton enforces atomicity transaction emitting take pay transaction completes 
payment automaton allows clients perform actions browse paying take pay transaction appears atomically intermediary actions 
hand apples taken paid immediately issue warning abort transaction 
consistency ensured remembering number apples taken size state machine 
acquisition payment occur sale final durability 
displays infinite state edit automaton effectively enforces market policy 
arcs symbols beneath represent suppression transitions 
insertion automation suppression automaton effectively enforce market policy 
insertion automaton encounters pay take action halt action may take accept may actions insert take may disrupt valid sequence take pay input obeys property 
suppression automaton encountering take take action suppress halt action may pay accept may actions 
related schneider sch analyze power security mechanisms 
defined set security properties precisely enforceable truncation automata observed subset safety properties 
schneider briefly mentions mechanisms powerful truncation automata give detailed analysis power 
schneider definition provides upper bound set properties precisely enforced security automata uniform input set 
loose upper bound 
viswanathan kim vis demonstrate obtain tighter bound power run time monitors add computability constraints definition truncation automata 
viswanathan vis demonstrated set properties enforceable run time monitoring equivalent core properties 
concurrently morrisett schneider hms begun investigate power broader set enforcement mechanisms 
consider security mechanisms static analysis run time monitoring program rewriting compare contrast power mechanisms 
observe statically enforceable properties correspond recursively decidable properties programs 
taken viswanathan result fact implies run time monitors access source program text enforce strictly properties enforced static analysis 
prove program correspond complexity class arithmetic hierarchy 
contrast theoretical research efforts provides detailed analysis power run time monitors 
introduce kinds monitors different run time capabilities truncation suppression insertion 
clearly specify means enforce property demonstrate power monitors varies depending context 
implementation efforts ues ues considerably advanced corresponding theoretical investigations 
general systems allow arbitrary code executed response potential security violation edit automata provide reasonable model attempting understand behavior 
cases languages considered domain specific aspect oriented programming languages designed facilitate enforcement security properties 
researchers investigated optimization techniques run time monitors cf thi certification programs instrumented security checks wal 
kim analyze performance cost run time monitors show language uses define monitors significant impact performance 
define optimizations decrease overhead run time monitoring 
run time monitoring checking settings security necessarily primary focus 
lee example developed monitoring system specifically improving reliability real time systems 
sandholm schwartzbach run time monitoring ensure concurrently executing web scripts obey important safety properties ss 
article introduced detailed framework reasoning power security mechanisms able intercept modify untrusted program actions run time 
analysis proper carefully define means enforce property run time 
definitions policy enforcement motivated main considerations soundness final output monitored system obey policy 
consequently bad programs violate policy executions modified enforcement mechanism 
transparency untrusted program obeys policy question run time enforcement mechanism preserve semantics untrusted program 
words actions enforcement mechanism observable monitoring programs violate policy 
obtains slightly different definitions enforcement depending interpretation means mechanism semantics preserving consequently necessary ensure definition enforcement appropriate application context hand 
definition enforcement set investigate power hierarchy monitors varying run time capabilities including truncation suppression insertion security relevant program actions 
demonstrate power different kinds monitors varies characterize enforceable properties precisely 
observe monitor input space constrained possibly prior program rewriting pass mechanisms monitor may able enforce larger set properties 
summary main findings figures 
ties ng taxonomy precisely enforceable security properties nonuniform systems 
article sets fundamental limits security mechanisms operate monitoring modifying program behavior run time 
open questions continue spark interest area 
particular desire understand impact constraining resources available running program run time monitor 
example practical properties enforced polynomial time monitors 
effect bounding space available edit automata set enforceable properties 
limit program access random bits ability strong cryptography 
generalize analyses infinite sequences 
unanswered questions similar ones suggest variety new research directions nascent research field 
taxonomy effectively enforceable security properties uniform nonuniform systems 
acknowledgments enlightening discussions kevin greg morrisett fred schneider helped stimulate research improve article 
anonymous reviewers helpful thorough comments 
bowen alpern fred schneider 
defining liveness 
information processing letters october 
bowen alpern fred schneider 
recognizing safety liveness 
distributed computing 
bauer david walker 
enforceable security policies 
foundations computer security copenhagen denmark july 
cf thomas pascal fradet 
enforcing trace properties program transformation 
seventh acm symposium principles programming languages pages boston january 
acm press 
en elmasri navathe 
fundamentals database systems 
benjamin cummings publishing 
david evans andrew 
flexible policy directed code safety 
ieee security privacy oakland ca may 
hms kevin greg morrisett fred schneider 
pursuit computability classes enforcement mechanisms 
unpublished manuscript november 
gregor kiczales erik hilsdale jim hugunin mik kersten jeffrey palm william griswold 
overview aspectj 
european conference object oriented programming 
springer verlag 
kim kannan lee oleg mahesh 
computational analysis run time monitoring fundamentals java mac 
run time verification june 
kim mahesh viswanathan ben abdallah kannan lee oleg 
formally specified monitoring temporal properties 
european conference real time systems york uk june 
lam leslie lamport 
proving correctness multiprocess programs 
ieee transactions software engineering 
sch fred schneider 
enforceable security policies 
acm transactions information systems security february 
ss anders sandholm michael schwartzbach 
distributed safety controllers web services 
fundamental approaches software engineering volume lecture notes computer science pages 
springer verlag 
thi peter thiemann 
enforcing security properties type specialization 
european symposium programming genova italy april 
ues fred schneider 
sasi enforcement security policies retrospective 
proceedings new security paradigms workshop pages hills canada september 
ues fred schneider 
irm enforcement java stack inspection 
ieee symposium security privacy pages oakland california may 
vis mahesh viswanathan 
foundations run time analysis software systems 
phd thesis university pennsylvania 
wal david walker 
type system expressive security policies 
seventh acm symposium principles programming languages pages boston january 
proofs theorems theorem uniform precise enforcement property uniform system precisely enforced truncation automaton pre 
proof direction construct truncation automaton precisely enforces follows 
states pre sequence actions seen far start state empty sequence transition function consider processing action state 
emit action continue state 
simply leave undefined case 
automaton maintains invariant invp output 
automaton initially establish invp definition property assumes properties 
simple inductive argument length input suffices show invariant maintained inputs 
show automaton precisely enforces system uniform 
cases consider 
case consider prefix 
safety constraint stated theorem fact contrary assumption 
true prefixes examination transition function automaton accept prefix halting 
case invp maintains regardless state automaton emitted 
automaton correctly precisely enforces cases 
direction consider pre 
truncation automaton edit supplied input 
precisely enforces case suppose sake obtaining contradiction 
definition precise enforcement actions accepted editing implying extended just showed true 
true 
theorem nonuniform precise enforcement property system precisely enforced truncation automaton exists decidable predicate executions pre 

proof direction construct truncation automaton precisely enforces follows 
states pre sequence actions seen far paired indicate sequence property start state empty sequence transition function consider processing action state 
emit action continue state 
simply undefined case 
emit continue state emit action continue state 
emit action continue state automaton maintains invariant invp processing input 
prefix input far emitted 
prefix input far emitted 
automaton initially establish invp definition property assumes properties 
simple inductive argument length input suffices show invariant maintained inputs 
automaton halts state precondition entering state automaton transition implying guarantees eventually reach prefix input property 
occurs having input automaton follow transition return state addition note transitions truncation automaton decidable boolean guards automaton halt inputs 
input automaton machine halts state halts transition 
case examination guard transition invp final state case invp ensures automaton halts emitted 
show automaton accepts action input sequence 
case predicate clearly true contrapositive clause theorem transition prevent automaton accepting actions transition followed input requires true automaton follow transition input accept action required 
direction truncation automaton construct decision procedure pre 

decision procedure simply runs input evaluates true prematurely halts 
true point steps rule input 
precise enforcer halt finite time inputs decidable predicate 
implies halting prevents automaton precisely enforcing 
implies 
case truncation automaton precisely enforcing emit prefix input emitted input conclude 
theorem effective enforcement property system effectively enforced truncation automaton exists computable truncation rewrite function executions 

proof direction construct truncation automaton effectively enforces follows 
states pre sequence actions seen far start state empty sequence transition function consider processing action state 
emit continue state 
halt leave undefined case 
automaton maintains invariant invp input far automaton emitted 
initially invp simple inductive argument length input suffices show invariant maintained inputs 
show automaton emits input 
cases derived inspection truncation automaton 
case automaton halts state invp emitted 
automaton halt state 
invp implies emitted automaton halts 
imply automaton fact emitted halts case 
consider execution 
clause theorem statement 
automaton outputs input correctly effectively enforces 
similarly clause theorem states automaton output equivalent input 
automaton effectively enforces direction define sequence emitted truncation automaton input 
definition computable function automaton effective enforcer acts deterministically halts inputs set executions 
show truncation rewrite function 
clearly 
processing action having processed sequence automaton may step step 
case step automaton emits emitted processing definition followed case automaton emits emitted 
automaton halts may examine remaining input implying true 
case truncation automaton output adheres definition truncation rewrite function 
consider arbitrary 
definition effective enforcement defined sequence emitted truncation automaton input 
theorem uniform precise enforcement property uniform system precisely enforced suppression automaton pre 
proof directions proceed completely analogously proof uniform precise enforcement 
theorem nonuniform precise enforcement property system precisely enforced suppression automaton exists computable function sequences 



proof direction construct suppression automaton precisely enforces follows 
states pre sequence actions seen far start state empty sequence transition suppression functions combined simplicity consider processing action state 
emit continue state 
suppress continue state suppression automaton maintains invariant invp input seen far output 
initially invp simple inductive argument length input suffices show invariant maintained inputs 
inspection automaton note processing input automaton halts state input process 
invp ensures automaton emits input automaton 
consider execution 
clause theorem statement 
automaton outputs input correctly precisely enforces 
similarly clause automaton suppresses action accepts action input 
automaton precisely enforces 
direction define sequence emitted suppression automaton input 
definition computable function automaton precise enforcer acts deterministically halts inputs set executions 
show suppression rewrite function 
clearly 
processing action having processed sequence automaton may step steps 
case automaton emits emitted processing definition followed cases automaton emits 
valid suppression function 
consider arbitrary 
definition precise enforcement defined sequence emitted suppression automaton input final outputs property halting may occur inputs property 
theorem effective enforcement property system effectively enforced suppression automaton exists computable function executions 

proof direction construct suppression automaton effectively enforces follows 
states pre sequence actions seen far start state empty sequence transition suppression functions combined simplicity consider processing action state 
emit continue state 
suppress continue state automaton constructed proof nonuniform precise enforcement reasoning automaton emits input automaton 
analogously argument effective enforcement theorem automaton outputs input clauses theorem statement ensure automaton effectively enforces 
direction define sequence emitted suppression automaton input 
computable suppression rewrite function argument direction proof nonuniform precise enforcement 
automaton effective enforcer matches output automaton input requirements stated theorem clearly met 
theorem uniform precise enforcement property uniform system precisely enforced insertion automaton pre 
proof directions proceed completely analogously proof uniform precise enforcement 
theorem nonuniform precise enforcement property system precisely enforced insertion automaton exists computable function executions pre 

proof direction construct insertion automaton precisely enforces follows 
states pre sequence actions seen far automaton step start state empty sequence transition insertion functions simplicity combine consider processing action state 
undefined rule applies 
emit continue state 
emit continue state 
insert continue state 
automaton halts inputs decidable boolean predicates need evaluated execution 
note transitions followed clauses statement theorem case 
eliminating transitions test needs performed order determine transitions apply assumed decidable predicate possibly contrast predicate 
input far automaton maintains invariant invp 
emitted 
automaton emitted 
initially invp definition property assumes properties 
simple inductive argument length input suffices show invariant maintained inputs 
invariant straightforward show automaton processes input properly precisely enforces cases 
case consider prefix 
induction show automaton accepts stopping inserting actions moving state 
automaton accepts prefix transition continues 
clause theorem statement true 
automaton accepts prefix transition continues 
case automaton may halt applying transitions running input actions process 
final state prior halting 
transition applied transition applied automaton ran input actions case invp ensures automaton output property 
second case dictates invp implies automaton output 
third case occur contradict invp 
automaton outputs sequence property 
direction show property precisely enforced insertion automaton conforms constraints outlined theorem define decidable algorithm computing pre 
definition follows 

run insertion automaton input completion 

output exactly input 

searching 

steps require finite time precise enforcer halt finite time inputs 
consider step occurs outputs exactly input 
pre enforces output sequence input guaranteed exists search finite time countable possibly countably infinite 
algorithm halts inputs pre meeting constraint computable function 
consider arbitrary pre show hold 


consider case hold 
output exactly input may extended precisely enforced accepting action 
defi nition 
case precise enforcer contrary assumption 
hold 
theorem precise enforceable subset precise enforceable exists suppression automaton qs precisely enforces system exists insertion automaton qi precisely enforces system 
proof construct follows show precisely enforces states qi pre state qi represents sequence actions seen far automaton step start state empty sequence transition insertion functions combine simplicity consider processing action state 
halt 
continue state accept insert continue state 
show precisely enforces considering cases 
precisely enforces accept action 
boolean guard transition insertion automaton evaluate true finite time precise enforcer halt inputs finite time accept action correctly precisely enforcing 
case implying edit output property 
action accepted implying accepts emits 
precisely enforces exist emit input case halting 
suppression halting occurs insertion automaton follow transition reaches exist automaton find insert requisite finite time countable possibly countably infinite 
final output input property required precisely enforce theorem effective enforcement property system effectively enforced insertion automaton exists computable insertion rewrite function executions 

proof direction construct insertion automaton effectively enforces follows 
states pre sequence actions seen far paired indicate automaton step rule ins automaton step start state empty sequence transition insertion functions simplicity combine consider processing action state 

emit action continue state 
insert continue state 
insert continue state 
automaton maintains invariant invp 
input far automaton emitted 
input far automaton emitted 
input far automaton emitted 
initially invp simple inductive argument length input suffices show invariant maintained inputs 
show automaton emits input 
cases derived inspection insertion automaton 
case automaton halts state invp emitted 
automaton halt state having seen input 
case invp implies emitted automaton halts 
imply automaton fact emitted halts case 
note automaton halt state step emit continue state transition 
analogously argument effective enforcement theorem automaton outputs input clauses theorem statement ensure automaton effectively enforces 
direction define sequence emitted insertion automaton input 
definition computable function automaton effective enforcer acts deterministically halts inputs set executions 
show insertion rewrite function 
clearly 
processing action having processed sequence automaton may step step ins 
case step automaton emits emitted processing definition followed 
case automaton emits emitted automaton halts may examine remaining input implying 
case ins automaton effectively enforces may insert finite sequence symbols accepting halting current action 
automaton may apply rule ins multiple times succession result insertion finite sequence actions followed acceptance termination 
case ultimate acceptance net output automaton case ultimate termination input may examined inserted action inserted action 
case insertion automaton output adheres definition insertion rewrite function 
consider arbitrary 
definition effective enforcement defined sequence emitted insertion automaton input 
theorem uniform precise enforcement property uniform system precisely enforced edit automaton pre 
proof directions proceed completely analogously proof uniform precise enforcement 
theorem nonuniform precise enforcement property system precisely enforced edit automaton exists computable function executions pre 

proof direction nonuniform precise enforcement theorem function property satisfying requirements stated may build insertion automaton enforce construct edit automaton defined domain domain 
clearly enforce property steps step ins respectively steps ins emitting exactly actions precisely enforces 
direction direction proceeds completely analogously direction proof nonuniform precise enforcement 
theorem effective enforcement property system effectively enforced edit automaton 
proof construct edit automaton effectively enforces follows 
states pre sequence actions seen far actions seen emitted indicate automaton suppress current action start state empty sequence transition insertion suppression functions simplicity combine consider processing action state 
suppress continue state insert continue state 
suppress continue state automaton maintains invariant invp 
input far automaton emitted longest prefix 
input far emitted 
initially invp simple inductive argument length input suffices show invariant maintained inputs 
inspection note edit automaton halt state step suppress continue state transition 
automaton halts state input invp ensures automaton emits inputs 
addition invp implies automaton emit exactly input 
edit automaton effectively enforces 
