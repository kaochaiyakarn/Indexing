scheduling contract algorithms multiple processors daniel bernstein theodore perkins shlomo zilberstein department computer science university massachusetts amherst ma bern perkins shlomo cs umass edu anytime algorithms offer tradeoff computation time quality result returned 
divided classes contract algorithms total run time specified advance interruptible algorithms queried time solution 
interruptible algorithm constructed contract algorithm repeatedly activating contract algorithm increasing run times 
acceleration ratio run time schedule worst case measure inefficient constructed interruptible algorithm compared contract algorithm 
smallest acceleration ratio achievable single processor known 
multiple processors smaller acceleration ratios possible 
provide schedule processors prove optimal results provide general guidelines parallel processors design real time systems 
complex reasoning problems faced natural artificial agents rarely solved exactly time solution useful 
game playing programs trading ecommerce agents information retrieval systems medical diagnosis systems act time pressure environments agents users limited patience 
successful ai system able time available deliberation maximum advantage opportunities incur costs slow action 
algorithms produce solutions different qualities depending available computation time called anytime algorithms horvitz dean boddy russell wefald :10.1.1.53.4593
distinction types anytime algorithms 
interruptible algorithms started interrupted time queried solution 
example local search approaches optimization hill climbing simulated annealing interruptible algorithms 
contract algorithms need query time input 
algorithms set internal parameters produce solution query time 
copyright american association artificial intelligence www aaai org 
rights reserved 
lev finkelstein computer science department technion israel institute technology haifa israel lev cs technion ac il contract algorithm need produce solution query time arrives may trouble utilizing spare time finds solution quickly query time delayed 
things equal interruptible algorithms convenient widely applicable contract algorithms 
contract algorithms intuitive design typically simpler data structures control structures making easier implement maintain 
interruptible algorithm formed contract algorithm running sequence contracts increasing lengths returning solution produced interruption occurs 
sequencing problem solved informally various domains 
example dechter rish develop mini bucket algorithm approximate automated reasoning tasks bayesian inference 
algorithm allows user specify bounds number variables dependency arises execution larger bounds lead better solutions expense computation time propose method scheduling sequence bounds solutions improving quality produced time 
similar vein moore propose various heuristics incrementally refining discretizations continuous state optimal control problems 
incremental refinements produce sequence finite state approximations increasingly complex solve provide solutions increasing quality original continuous state problem 
interested developing general contract schedules providing formal justification 
case serial execution contracts russell zilberstein suggest sequence contract lengths 
show interruption time contract completed length 
factor acceleration ratio schedule worst case measure loss due transformation contract algorithm interruptible algorithm 
zilberstein charpillet show sequence contracts single processor acceleration ratio 
multiple processors efficient transformation 
propose simple strategy producing interruptible algorithm scheduling contract algorithm processors parallel 
analyze strat egy deriving explicit formula acceleration ratio function furthermore show schedule yields better acceleration ratio strategy optimal 
results provide general guidelines parallel processors design real time systems 
discuss extensions connection formally similar problem involving multiple robots searching multiple rays goal 
scheduling contract algorithm anytime algorithm applied optimization problem instance time produces solution real valued quality qa 
qa called performance profile instance 
performance profiles defined interruptible contract algorithms 
interruptible qa quality solution returned interruption time contract qa quality solution returned time specified advance 
general know algorithm performance profile problem instance 
concept performance profile useful reasoning anytime algorithms 
assume performance profile anytime algorithm problem instance defined nondecreasing function interruptible algorithm constructed contract algorithm scheduling sequence contracts processors parallel 
schedule function 
length jth contract run processor assume loss generality denote interruptible algorithm formed contract algorithm schedule interrupted returns best solution contracts completed 
assume performance profiles nondecreasing equivalent returning solution longest contract completed 
illustrated 
interruptible algorithm performance profile qb depends profile schedule interrupted spent time running contracts superseded results 
contracts interrupted time spent contribute final solution 
general qb qa inequality strict 
wish find schedule optimal number processors assumptions query time contract algorithm performance profile 
metric compare schedules acceleration ratio measure similar competitive ratio line algorithms sleator tarjan 
acceleration ratio tells faster interruptible algorithm need run order ensure quality contract algorithm interruption time 
formally defining acceleration ratio establish formula performance profile terms performance profile schedule define total time spent processor executing contracts gx 
times define function specifies contracts finish gx 
take view contract completes time solution available returned interruption time length longest contract complete time lx max performance profile interruptible algorithm qb qa lx 
give precise definition acceleration ratio 
definition acceleration ratio schedule processors smallest constant qb qa contract algorithm acceleration ratio defined terms property solution quality lemma allows formulate lemma lx 
proof definitions qb qa lx qa 
holds algorithm suppose algorithm performance profile qa lx lx 
implies lx 
show equality holds assume contrary derive contradiction fact defined smallest constant enforcing inequality qb qa 
intuitively worst time interrupt schedule just contract ends contract time spent solution available 
lemma formalizes notion consequently enables consider finishing times 
lemma sup sup lx gx lx gx proof lx left continuous piecewise constant pieces delimited time points gx 
lx left continuous piecewise linear increasing 
local maxima lx occur points gx times may play role supremum 
define minimal acceleration ratio processors inf 
zilberstein charpillet prove 
sections derive expression general provide schedule achieves ratio 
processor processor processor performance profile interruptible algorithm time constructing interruptible algorithm scheduling contract algorithm processors 
exponential schedule simple approach scheduling contract algorithm contract lengths increase exponentially 
russell zilberstein study processor schedule consider generalization schedule processors contracts assigned processors round robin fashion contract times longer previous 
formally schedule expressed theorem proof straightforward show le ge true ge ge le ge ge mj mj mj mj ge le ge ge mj 
mj mj see expression derived case 
note expression independent increases ge sup le ge lim mj optimality exponential schedule section show exponential schedule optimal proving schedule achieve smaller acceleration ratio 
convenient index contracts relative finishing times 
function counts contracts finish jth contract ith processor finishes 
schedule gx gx 
assume loss generality contracts finish exactly time 
straightforward show schedule doesn satisfy condition dominated schedule 
assumption guarantees bijection 
refer global index jth contract run processor introduce contract length function takes input global index 
yx 
define finishing time function takes input global index hx gx 
loss generality assume yx yx 
schedule doesn property dominated 
lemma hx yx 
proof follows directly assumption definition acceleration ratio 
define function represent sum lengths contracts finishing contract finishes yx 
lemma expresses property function 
lemma 
proof consider contract global index 
define set global index contract processor finish contract finishes 
follows hx 
note contains distinct integers 
hx increasing hx hx 
lemma get hx yx theorem proof define 
lemma 

max 

cases consider 
case exists 


interested small 

suppose minimize right hand side respect free variable region 
setting derivative zero find dc cm cm cm cm mcm cm mc 
solution boundaries value goes infinity solution minimum 
substituting inequality find second case 
max 
max 
means form nonincreasing sequence 
sequence limit 
denote limit 
definition follows lim sup applying lim sup sides inequality get lim lim sup 
dm analysis previous case combining theorem get desired result 
discussion studied problem constructing interruptible algorithm scheduling contract algorithm run multiple processors 
proposed schedule shown optimal number processors 
number processors increases optimal acceleration ratio approaches distinction contract interruptible algorithms important 
results provide insight role parallelism design realtime systems 
assumed knowledge deadline contract algorithm performance profile 
problem specific knowledge sophisticated scheduling strategies appropriate 
zilberstein charpillet consider case performance profile known deadline drawn known distribution 
case problem scheduling contract algorithm single processor maximize expected quality results deadline framed markov decision process 
remains extend multiple processor case 
avenue research extend contract algorithm model include broader class algorithms 
number algorithms time complexity scales values input parameters fairly unpredictable way 
example worst case time complexity depth bounded search scales depth bound maximum branching factor 
actual search time upper bound 
contract algorithms able save information instantiation information accelerate instantiation 
may interesting consider contract algorithms parallelizable just scheduling inherently sequential contracts different processors 
challenge produce contract algorithm model takes characteristics account allowing insightful analysis 
note results may shed light robotics problem involving multiple robots searching goal 
problem robots start intersection rays move rays goal 
optimal search strategy defined minimizes competitive ratio worst case ratio time spent searching time spent goal location known initially 
problem considered baeza yates culberson rawlins shown optimal competitive ratio 
turns problem nearly identical scheduling contracts single processor zilberstein charpillet 
contract schedule corresponds sequence search extents robot search extent distance robot goes ray returning origin 
denote acceleration ratio schedule competitive ratio corresponding sequence search extents 
multiprocessor case processor corresponds different robot 
conjecture relationship acceleration ratio competitive ratio holds case 
acknowledgments fran ois charpillet philippe fruitful discussions 
support provided part national science foundation ecs ecs int iis nasa nag nag 
daniel bernstein supported nasa fellowship 
opinions findings recommendations expressed material authors reflect views nsf nasa 
baeza yates culberson rawlins 
searching plane 
information computation 
dean boddy 
analysis timedependent planning 
proceedings seventh national conference artificial intelligence 
dechter rish 
mini buckets general scheme approximating inference 
technical report department information computer science university california irvine 
horvitz 
reasoning beliefs actions computational resource constraints 
workshop uncertainty artificial intelligence 
moore 
variable resolution discretization high accuracy solutions optimal control problems 
proceedings sixteenth international joint conference artificial intelligence 
russell wefald 
right thing studies limited rationality 
cambridge ma mit press 
russell zilberstein 
composing realtime systems 
proceedings twelth international joint conference artificial intelligence 
sleator tarjan 
amortized efficiency list update paging rules 
communications acm 
zilberstein charpillet 
real time problem solving contract algorithms 
proceedings sixteenth international joint conference artificial intelligence 
