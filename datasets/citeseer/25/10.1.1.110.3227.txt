flexible exception handling process support systems technical report eth zurich department computer science claus hagen gustavo alonso institute information systems swiss federal institute technology eth eth zentrum ch zurich switzerland inf ethz ch february exceptions pervasive problems process support systems 
installations expected handle large number processes having exceptions bound normal occurrence 
programming tool intended large complex applications face problem 
current process support systems despite orientation complex distributed heterogeneous applications provide support exception handling 
shows exible mechanisms failure handling incorporated opera process support system combination programming language concepts transaction processing techniques 
resulting mechanisms allow construction fault tolerant ow processes transparent exible way ensuring reusability ofwork ow components 
process de ned sequence program invocations data exchanges distributed heterogeneous stand systems 
ow management systems wfms provide support business processes ghs hsu hsu jb wfm process support system pss generalizes idea arbitrary types processes am 
sense process support system appears tool programming large heterogeneous distributed environments am 
programming tools intended large complex applications incorporate exception handling mechanisms separate failure semantics normal program logic facilitate design readable comprehensible programs par goo yb 
exception handling mechanisms incorporated frameworks distributed applications corba operating systems windows nt 
despite similarities process support systems programming environments little support exception handling part funded swiss national science foundation project transactions active database mechanisms ow management 
current process systems 
possible exception encoded process 
exceptions hard wired process result aborting process require human intervention 
processes tend long days months involve considerable number resources personnel large number processes aborting human intervention satisfactory solutions kr ghs 
current orts standardization modularization ow management systems motivation 
ow management coalition process standardizing interfaces application subprocess invocation di erent ow systems 
furthermore ongoing orts standardization business objects prede ned ows purchased integrated larger business processes 
believe incorporation exception declarations standard interfaces important contribution allow fault tolerant ows pre existing building blocks 
address issues describes exception handling mechanisms implemented opera process support system 
opera aims generalizing process support concepts application domains business processes 
adaptable kernel process support tailored di erent environments purposes ranging job control distributed heterogeneous systems experiment management scienti applications ah 
opera approach exception handling borrows main ideas combination programming language concepts transaction processing techniques adapting special characteristics process support systems 
knowledge opera rst system integrate language primitives exception handling ow management systems 
previous approaches limited achieving atomicity take account need react di erently di erent types failures need tight integration failure handling modeling language 
contribution integration programming language concepts transactional ideas 
show semantics de ned language constructs enforced usage execution model advanced transaction models 
organized follows 
section provides example motivates ideas proposed 
section introduces exception handling concepts opera 
section discusses relation ow recovery transaction models 
section describes integration exceptions signaled external applications 
section proposes language primitives integrate exception handling graphical languages 
section contains example discusses described approach 
section brie discusses related section concludes 
motivation example task executing system flight car hotel check availability corba reserve corba new order dbms check availability legacy system reserve legacy system invoice record keeping manual dbms ow process reserve manual running example rest consider process incorporating reservation various rental cars nal sending documents invoice customer storage result travel agency internal database 
programs services incorporated process executed di erent autonomous systems flight reservation done corba gateway booking system 
sending documents invoice reserving hotel manual task handled travel agency personnel 
record keeping local database takes place tp monitor reservation rental car done legacy system 
possible failures classi ed categories program failures design communication errors semantic failures 
program failures lead unsuccessful abort external application 
instance ight reservation step fail seats seats requested category available manual tasks task usually associated time limit may violated record keeping task may fail transaction abort 
fault tolerant process provide handling strategies failures 
case unavailable seats solution may ask customer select di erent ight accept di erent category cancel reservation process 
case temporal constraints task automatically dispatched di erent employee supervisor noti ed 
transaction failure may solvable simply retrying execution reason abort deadlock 
note external application provides level fault tolerance 
database application database system may automatically reschedule aborted transaction 
simpli es done pss solve problem complex failure handling strategies 
instance train reservation contingency plan ight car reservations needs combination backward forward recovery assume car needed train booked railway station central car reserved ight available recovery requires reservation canceled train booked 
design system failures incorrect parameters program invocation impossible program executions con guration changes considered 
process programmer erroneously provided incorrect program name object id host address application moved host invocation fail 
failures captured process model order allow speci cation exible reactions 
true communication failures may prevent invocation program 
di erence design errors usually lead aborting process communication failures may resolved re trying execution point choosing di erent host 
semantic failures interesting kind exceptions 
execution program errors mean successful may additional constraints 
example service returns successfully available seat 
case exception available seats reservation 
process code detect invoke appropriate measures 
process system needs mechanisms de ne regarded semantic exception order incorporate general exception handling scheme 
discuss issues section 
motivation need structured exception handling shows slightly simpli ed implementation example flowmark la including recovery mechanisms compensation cancel flight activities contingency tasks hotel replacement hotel replaces aswell partial rollback compensation car available subsequent booking train 
flowmark wfms provides mechanisms structured exception handling interleaving original tasks recovery steps fault tolerant version complex original process logic hardly recognizable 
complexity explosion small example points drawbacks including exception handling part normal process speci cation 
mixing business logic exception handling logic di cult keep track complicating veri cation processes modi cations 
approach impossible reuse components lack meaning context originally designed 
key features process systems ability reuse subprocesses way libraries programming languages 
accomplished form system support exception handling allows separate normal code 
main objective opera approach exception handling augmentation process modeling languages appropriate way 
book flight rent car reserve hotel rc rc hotel rc rc hotel rc report failure handling exceptions programming control ow flowmark notation addition problem modeling exception handling strategies comprehensible way pss capture failure signals returned external applications 
ways exceptions signaled 
rst uses explicit exceptions illustrated shows interface description corba interface de nition language idl 
corba services communicate failures callers exceptions returned de ned return values 
example potential exceptions declared 
second approach communicating failures traditional return codes usually integer representing failure 
example record keeping activity implemented example signals failures way 
third important signaling method explicit failure channels persistent queuing systems queue oriented tp monitors 
process management system translate heterogeneous failure signals internal format allows treat uniformly 
exception handling opera basic mechanisms exception mechanism opera programming language concepts proposed goodenough goo adopted programming languages including ste standard ml pau str java fla :10.1.1.26.9545
constructs integral part communication standards distributed systems corba obj exception handling integrated windows nt cus handle system user de ned exceptions uniform way 
exception unusual event erroneous detectable software may require special processing seb 
goal exception handling give programmer means adapt behavior operations allowing react exceptions interface exception reason exception reason int date time string string string category string int raises int string string category string number string code raises sample idl de nition including exception declarations ight reservation tasks example process various kinds preserving information hiding autonomy 
achieved separating exception detection exception handling nested process structures 
process support systems cd cd la ow process opera nested structure represented tree di erent tasks processes blocks activities nodes 
set child nodes task ti de ned subtasks invoked inside ti 
task clearly de ned signature speci es call parameters return values 
information hiding demands signature known order invoke task 
opera exception handling mechanism principle case failures child task tik stops execution returns exception proper return values 
exceptions typed data structures contain information failure context 
task returning exceptions polymorphic executed successfully returns data conforming signature encounters unusual event returns exception di erent structure 
parent de ned exception handler arbitrary subprocess exception returned child signaler exception signaled control passed handler contains necessary steps failure handling 
handler de ned programmer default handler provided system aborts parent 
approach allows modular design programmer procedure concerned exception detection performed invoked operation exception handling may context dependent left invoker procedure 
flexibility improved giving exception handler control signaler continue handler possibility abort signaler resume execution dealt exception 
resuming execution cases raised invalid parameters exception handling incorporates querying user di erent data 
furthermore handler deal exception propagates exception level call hierarchy processed handler associated corresponding invoker 
shows examples ow control opera exception handling depending decision handler 
diagram exception handler resumes execution signaler 
diagram signaler aborted control returns process invoked 
diagram shows level nested execution innermost process raises exception propagated exception handler enforcing abort invocation exception handler associated 
handler resumes operation 
start subprocess failure raise exception semantics caller process signaler subprocess exception handler provided caller invoke invoke raise exception process exception handling resume signaler regular return signaler subprocess exception handler provided regular return start subprocess raise exception activity resume operation exception handler provided caller process exception handling abort signaler propagate exception control ow exception handling signaler subprocess exception handler provided caller exception handling abort signaler return caller semantics opera exception handling mechanisms replacement model yb 
logically exception handler replaces signaler aborted statement signaler raised exception execution signaler resumed 
poses additional requirements process execution model exception process aborts replaces signaler system undo possible side ects caused signaler 
achieved programming languages cleaning stack performing additional cleanup calling destructors purged objects str :10.1.1.26.9545
opera step corresponds external activities may cause arbitrary side ects outside world sending message deleting le changing record engine knowledge ects 
order able undo side ects opera relies semantic information provided failed task aka 
semantic information provided form compensating tasks managed transactional mechanisms discussed section 
transactional recovery exceptions constructs provided opera allow process designers describe failure semantics process convenient way order enforce failure semantics additional mechanisms necessary 
instance aborting task needs properly de ned 
practice aborting task executing exception handler equivalent known partial backward recovery advanced transaction models elm mos gh gs 
fact integrated exceptions system primarily looking way specify spheres atomicity modeling language level 
opera integrates transaction concepts directly system 
approach similar advanced transaction models provides exible recovery general distinguish di erent failure states task 
transaction models distinguish committed aborted transactions allow specify recovery strategy task 
knowledge bds discussed implications multiple possible failures recovery mechanisms 
furthermore transaction models usually assume tasks atomic 
true ow environments activities arbitrary program executions human activities may atomic 
may leave outside world inconsistent state fail 
recovery mechanism opera copes non atomic tasks 
transactional aspects opera embedded notion spheres way bracket operations units transactional properties 
spheres basically specialized blocks current prototype possibilities canbe combined blocks atomic units standard semantics sphere atomicity blocks isolation units sphere isolation blocks persistence units spheres persistence 
purposes exception handling relevant spheres spheres atomicity ones described detail 
atomicity property declared blocks processes activities 
information activity atomic provided person registering program human activity 
done part process selecting task interface 
currently tasks interfaces provided opera basic non atomic basic task interface serves root interface hierarchy 
activities conform interface assumed non atomic 
system guarantee atomicity 
semi atomic semi atomic tasks perform automatic rollback case runtime failure 
keep information allow undo failure happened 
examples certain cad systems perform logging operation 
failure undone issuing special command 
part semi atomic task interface rollback method describes undo partially executed task 
atomic tasks side ects fail 
transactions issued database distributed environment tp monitor fall category 
restartable sort task fails executed eventually succeed 
examples programs word processors may fail due failures program operating system 
compensatable task interface applies applications rolled back nished 
compensation way applied transaction models 
compensatable task interface contains method allows invoke activity task semantically undoes original task ects 
atomicity declarations basic steps opera enforces atomicity composite tasks processes blocks 
process guaranteed atomic declared semi atomic case process designer provide method performs rollback component task atomic semi atomic component task compensatable process ex structure 
ex structured process conforms rules ex transaction model 
consist compensatable restartable called pivot compensatable restartable tasks guaranteed atomic certain rules structure hold 
basic principle recoverability exible transactions pivot task allowed compensatable task executed pivot restartable tasks executed pivot 
rules complicated parallel tasks contingency executions taken account 
problems correctness rules exible transactions covered depth 
discuss 
opera uses rules determine recoverability processes compile time 
opera uses information provided process designers way task raises exception aborted exception handler stops note may require recursive abort component tasks case process block undone depending type 
task declared atomic actions performed 
task declared semi atomic holistic performed executing rollback method 
task declared non atomic single step performed executing compensating tasks component activities 
note ex structured processes atomic abort possible compensatable activities executed 
pivot repeatable activity succeeded processes semi atomic sense aborted method 
process designer possibility determine behavior ex structured processes specifying holistic single step preferred completed compensatable tasks 
exception detection internally exception represented triple name denotes allowed control ow options abort resume input data structure pass information context exception occured return data structure data sent back source exception 
programs part ow usually format rely proprietary ways exception signaling 
examples section 
opera translates external exceptions internal format run time mapping information provided programs registered program registration ensures engine necessary information invoke program notify user ip addresses command lines case programs role speci cations text human activities 
opera exceptions declared 
includes declaration exception translation function de ning external signals result internal exceptions 
format function dependent type external application ow aware applications applications speci cally designed opera incorporating calls opera application programming interface api 
opera api library procedure calls ones provided wfms 
api provides calls directly signal opera exceptions need translation exceptions ow aware applications 
legacy applications programs aware ow system 
stand applications invoked operating system signal failures special return codes converted opera exceptions runtime system 
conversion translation table registered program maps speci return values appropriate exception types 
standard environments 
distributed environments corba obj provide exception mechanisms 
exceptions returned applications directly converted opera exceptions 
exception declarations service parsed idl le provided service registered 
note application usually allow signaler resumption programs aborted send exception 
manual activities 
humans communicate wfms worklists graphical user interfaces 
signaling exceptions human agents supported worklist suitable gui 
internal exception detection opera exception mechanism detect signal semantic failures 
opera provides options synchronous exception raising special signal proxies embedded control ow description asynchronous exception raising predicates process internal data 
signal proxies occur inside process 
signal proxy associated exception name data containers exception category 
ow process reaches signal proxy control passed appropriate exception handler 
gives example explicit 
execution activity value parameter negative exception raised 
exception type cf 
section escape leads termination process 
activity activity negative escape explicit signaling exception signal proxy implicit signaling ow designer provide set predicates de ne circumstances exception raised 
variables predicates containers blackboard associated process 
designer instance de ne startup predicates termination predicates 
evaluate parameters passed process startup 
allow values allow execute correctly 
incorrect values encountered user informed notify exception 
user correct parameters resume process execution 
termination predicates check return values process raise exceptions incorrect values detected 
integration exception handling modeling languages process support systems strong focus process modeling 
usually provide graphical modeling language allows specify processes intuitive way 
important exception handling mechanism integrates graphical process languages 
section describe modeling languages opera exception handling primitives incorporated 
opera uses model hierarchy single language describe processes 
top hierarchy domain speci representations processes opera graphical ow language modeling language business processes 
simple graphical process description language ibm fdl la closely follows model proposed ow management coalition hol 
speci cations interacting user 
internally speci cations compiled ocr opera canonical representation translated data models underlying databases opera repositories 
graphical representation process directed acyclic graph nodes represent tasks arcs control connectors data connectors 
note spite graph acyclic loops possible block constructs 
control connectors de ne ow process 
control connector directed edge links activities regardless simple activities blocks subprocesses 
control connector marked transition condition boolean expression elements source activity output data structure 
condition determines connectors state model conditional branching process created connectors unevaluated state 
completion task states outgoing control connectors computed evaluating transition conditions leads connectors true false 
execution task dependent states incoming control connectors special start condition boolean predicate states incoming connectors determines connectors order schedule task execution 
contains example process 
note arcs starting activity equivalent construct conditions disjoint 
parallel execution speci ed control connectors predicates true time 
activity process activity activity true true true activity true activity activity control ow description block subprocess control connector data containers model ow data activities blocks processes 
equivalent ocr boxes 
data ow speci ed special data connectors 
data connector directed edge links activities indicates mapping source output container target input container 
completion task system copies data task output container input containers linked data connectors 
activity process activity ocr process representation true activity true true activity true activity data ow description source process input sink process output data connector suitable user interaction internal opera 
purpose ocr 
new process registered compiler translates ocr objects 
control connectors conditions transformed guards 
data connectors directly translated storing input parameter task output parameter reads data 
ocr process represented set tasks activities blocks subprocesses called blackboard set data items exchange data tasks 
activities basic processing steps 
activity associated number attributes executed people responsible execution supervision 
subprocesses blocks allow nesting processes di erence blocks de ned parent process similar blocks programming languages 
addition blocks assigned special properties instance iteration blocks blocks allow implement loops spheres de ne units rollback 
task represented object de ned interface allows access state information necessary navigation execution 
structure basic task interface table 
represents root interface hierarchy allows add new functionality system extending basic interface 
name type description guard guard control ow description inbox call parameters allows access return values state allows access current state task execution 
list exception declares exceptions possibly thrown task list event allows query list events signalled task 
type distinguishes subprocesses blocks activities 
object determining task executed table basic task interface control ow inside process determined guards associated tasks 
paradigm similar eca rules active databases wc 
guard consists activator speci es task considered execution start condition 
activator predicate execution states tasks 
start condition access blackboard output data sibling tasks 
note tasks process visible guard 
guarantees cient evaluation guards important di erence active database systems events visible rules 
inbox components task interface represent input output data structures 
data ow tasks possible copying data boxes blackboard 
incorporation exception handling text language ocr straightforward integration graphical language 
focus graphical representations remainder section 
exceptions synchronous exceptions represented ordinary activities 
input output containers unique name allows distinguish di erent exceptions 
exception associated exception category restrict behavior exception handler 
exception categories de ned opera signal allows handler abort resume signaler processing exception 
decision depend handler ability deal exception 
escape requires abort signaler 
exceptions allow resuming execution 
notify disallows abort 
forces handler return control signaler option especially useful humans involved process 
data ow mechanism normal activities handle data ow exception handling 
exception data containers exception occurs input container pass information handler 
similarly handler possibility return data signaler output container exception 
asynchronous exceptions similar synchronous exceptions fact take part normal control ow 
invoked exceptions occur 
conceptually seen activities activities connected control connector gets activated exception occurs 
advantage control ow exception implicit ow designer need construct explicitly 
note current systems way achieve similar functionality treat exception activity add control connectors activities possibly raise exception exception activity 
need done data connectors 
actual implementations resort inelegant ine cient solution able provide minimal failure handling capability 
exception handlers exception handlers contain arbitrary activities blocks subprocesses 
addition language provides special constructs useful ective reaction failures 
possible exception task may signal corresponding default handler system provided de ned task registered 
system default handler matches exception speci ed handler aborts signaler propagates exception caller 
process designer provide user level default handlers appropriate 
task integrated process designer provide override handlers exceptions default behavior needs modi ed 
advantage approach facilitates modular design reusing components easier cope possible exception pass exception caller 
signi cant advantage existing systems exception handling entirely hard wired needs modi ed time process di erent context 
combining default override handlers designer system take care exceptions specialize behavior necessary 
failed activity activity activity abort resume exception handler proxy activity example representation exception handler gure 
entry point handler process called proxy activity seen placeholder exception occurred 
output container proxy contains data passed signaler exception 
case dependent data accessible inside handler 
example predicates de ned data 
allows take di erent execution paths depending information provided signaler 
terminator proxies de ne endpoints handler 
determine control ow proceed termination handler 
di erent types terminators depending signaler aborted resumed exception propagated 
addition functionality provided ordinary processes opera provides special constructs exception handlers 
syntactical shortcuts facilitate convenient speci cation recovery related tasks terminator retry recovery requires retry execution task caused exception retry proxies introduced 
refer task raised exception currently handled marked time interval specify delay re execution scheduled 
mechanism lead inde nite number recursive invocations semantics de ned retry mechanism exception raised system call exception handler 
control ow returns rst invocation exception handler 
note repeated invocations possible rule need explicitly speci ed exception handler 
human interaction due complexity ow processes rules determine behavior may possible determine strategy follow exceptions time process de ned 
cases human intervention necessary 
provide special noti proxy allows transfer control user responsible dealing exception 
ow management systems provide sta modeling component allows exible assignment users activities usually role concept bus 
mechanism assign humans exception handling tasks 
means noti associated role determines noti ed 
noti input output containers allow pass information concerning failure users send information back handler failure resolved 
discussion language extensions opera allow elegant speci cation fault tolerant ow processes 
extensions ow systems functionality syntax included systems provide functionality allow development distributed applications 
language extensions corresponding system support result cleaner process speci cations overhead designing fault tolerant ow processes 
regarding system support implementation details directly derived descriptions new primitives treated standard constructs require signi cant changes engine instance exception treated activity triggered activity raises exception 
involves minimal changes control ow logic 
illustrate advantages approach speci cation introductory example new primitives figures 
left hand side shows graphical representation right hand side displays control ow case car rental activity fails gure shows textual representation ocr 
remember ocr representation compiled speci cation process designer write ocr code uses graphical design tool hides ocr syntax 
process description decomposed process travel shown center graphical process representation exception handlers 
note process contains business logic plus sphere transport indicates ight booking car regarded atomic respect failures 
graphical representation shows elegance proposed approach especially compared process possible way cope exceptions current systems 
furthermore modifying process straightforward 
consider addition task booking process reserving theater tickets 
conventional design require embedding new nodes arcs graph avoid violating failure semantics opera new task added process description recovery related steps taken care 
opera approach exception handling guarantees reusability process descriptions existing speci cations easily basis new processes 
reusability tasks improved exception mechanism seen form parameterization activities processes allowing declared task large number contexts 
consider program shown 
required seat category parameter raises exception seat category ight free seats requested category 
assume default exception handler exception aborts program propagates exception 
task failed eh exception handler associated process task failed notify initiator reserve train eh exception handler associated sphere abort resume book flight rent car hotel transport sphere travel process room hotel eh exception handler associated activity start sphere invoke travel transport eh comp signal exception propagate invoke contingency task invoke compensating operation abort sphere travel example modeled new primitives control ow handling failure activity appropriate behavior cases possible change providing override exception handler resumes execution program allowing reserve seat category originally requested 
criteria reusability exibility met approach 
room exception registered system ensures parameters known processes exception handlers 
note exception task failed declared system default exception 
activities associated default exception handlers propagate exception 
sphere associated override handler eh catches propagated exception 
fail handler gains control calls train reservation task sphere aborted mechanism cancels reservations sphere mode declared single step 
train reservation fail exception propagated automatically process remember allow recursive handler calls 
activates process handler noti es process 
person possibility abort process perform appropriate actions example organize travel private car resume execution 
execution resumed process continues hotel reservation 
activity associated exception handler eh invokes reservation hotel rooms available 
activity fails exception propagated process handler gets control informing invoker process 
illustration forward backward navigation performed system failure occurs right hand side shows control ow activity fails 
default handler invoked propagates standard exception task failed higher level case sphere leads invocation eh exception handler associated transport sphere calls activity order handle exception 
completion sphere aborted single step method system automatically calls compensating operation canceling ight operation continues regular operation 
example shows failure semantics speci ed spheres exceptions exception handlers exible recovery enforced 
ocr representation exception handling related parts marked boldface typing 
program declarations top region contain declaration transactional properties compensating process exists declaration program registrations user provided program input category string output string properties compensatable compensating exceptions seat seat category subsystem 
invocation 
program input string output string properties compensatable compensating exceptions seat subsystem 
invocation 
registration exceptions exception handlers compiled graphical representation exception room input city string output void exception handler eh input start city string components tf proxy task failed notify initiator activator tf output continue boolean terminator abort activator finished condition tf continue true terminator resume activator finished condition tf continue true process representation compiled graphical specification fig 
process travel input city string output success boolean single components transport block activity city hilton activator finished transport handlers eh handles room handlers eh city handles task failed program input city hotel string output string properties compensatable compensating exceptions seat subsystem 
invocation 
program input city string output string properties compensatable compensating exceptions car subsystem 
invocation 
exception handler eh input destination string components tf proxy task failed activity destination time activator tf exception handler eh components nr proxy room activity nr city central nr nr activator nr block transport ocr representation example ow properties atomic single components activity zurich city activity city activator finished handlers eh city handles task failed exceptions may raise 
exceptions exception handlers declared middle region 
note structure exception handler similar structure ordinary process travel process bottom region di erence handler contains proxy activity represents exception handled 
due space limitations descriptions compensating tasks programs example processes arbitrary complexity speci cations subsystems external included gure 
summarize extensions meet important criteria exible process exception mechanism support exible recovery strategies processes spheres provide natural boundaries partial backward recovery 
semantic recovery mechanisms compensation holistic ensure necessary exibility navigation exception handlers guarantee forward progress 
reusability shown example proposed primitives improve reusability process descriptions separation business logic failure handling semantics reusability tasks di erent contexts parameterization realized override handlers 
signi cant advantage possible current systems 
furthermore failure handling strategies re exception handlers registered system applied various processes 
result possible reuse de ned processes activities modi cation having redo exception handling procedures entirely 
openness mapping mechanisms described section allow incorporation arbitrary applications ranging legacy applications corba services programs utilize opera api 
possible achieve seamless integration external applications environments fault tolerance mechanisms system 
model requires minimal modi cations representation business logic 
shows necessary add spheres order specify atomicity 
recovery related information described separately exception handlers process description remains comprehensible 
related research point view problem ow recovery considered number projects 
ley introduces spheres joint compensation flowmark sets activities jointly aborted component fails 
rollback performed compensating step succeeded far executing special higher level compensating activity 
initially proposed spheres joint compensation lead complex semantics 
interesting ideas spheres compensation incorporated proposed concept modes section 
el give general classi cation exceptions describe recovery facilities wamo research prototype 
processes treated ow transactions components subtransactions fail succeed 
vital subtask fails supertask aborted compensated 
similar exible transaction model 
advanced approach exception detection wide prototype cgp 
eca rules speci cation exception conditions handling 
approach similar asynchronous exceptions provided opera 
powerful take account nested process hierarchies exceptions signaled external applications 
research projects focussed integration databases non databases distributed computing environments including extended transaction models etm distributed object management dom gh framework exible transaction structures ows developed contracts project wr focussed long running applications provided relaxed atomicity compensation forward recovery 
recovery transactional ows extended cd cd recovery mechanisms developed transactional ows consist transaction hierarchies arbitrary deep nesting 
addition considerable amount ofwork exible recovery done context advanced transaction models bds elm gs ws wr 
particular aka describe mappings advanced transaction models ow description languages show concepts transaction management ow environments 
approach di ers mainly strong focus modeling language aspects assume transactional environment 
exception handling programming languages par goo yb seb provided basics approach 
provides constructs seamless integration exception handling ow descriptions lacks consideration practical aspects important ow systems participation autonomous heterogeneous legacy systems strong impact human intervention 
extension ow speci cation languages allows exible handling exceptional situations occur execution processes 
concepts context speci system generic applied arbitrary process models 
solution exception handling concepts developed programming languages coupled ideas advanced transaction model domain atomicity partial rollback 
shows language extensions better describe ow processes exception handling logic support provide terms forward backward navigation transparency reusability exibility openness 
process support systems certainly gaining importance mission critical applications 
environments exible exception handling key aspect unfortunately supported current systems 
proposed primitives allow transparent modeling fault tolerant processes fundamental building block systems 
ah alonso hagen 
geo opera ow concepts spatial processes 
ssd 
alonso hagen 
schek 
distributed processing stand systems applications 
rd international conference large databases vldb athens greece 
alonso hagen 
schek 
platform distributed application development 
dogac ozsu sheth editors nato advance studies institute asi istanbul turkey august 
aka alonso kamath agrawal el abbadi mohan 
advanced transaction models ow contexts 
proc 
intl 
conf 
data engineering new orleans february 
am alonso mohan 
ow management generation distributed processing tools 
sushil jajodia larry kerschberg editors advanced transaction models architectures 
kluwer academic publishers 
alonso 
schek 
research issues large ow management systems 
sheth pages 
bds breitbart 
schek sheth weikum 
merging data centric approaches support transaction oriented multi system 
acm sigmod record september 
buchmann hornick georgakopoulos manola 
transaction model active distributed object systems 
elmagarmid editor database transaction models advanced applications pages 
morgan kaufmann 
bus bussler 
policy resolution ow management systems 
digital technical journal 
cd chen dayal 
transactional nested process management system 
proc 
th international conference data engineering icde 
cd chen dayal 
failure handling transaction hierarchies 
proc 
th international conference data engineering icde 
cgp casati grefen pernici pozzi sanchez 
wide ow model architecture 
technical report university 
cus custer 
inside windows nt 
microsoft press 
el eder liebhart 
ow recovery 
ifcis intl 
conf 
cooperative information systems coopis 
ieee computer society press june 
elmagarmid leu litwin rusinkiewicz 
transaction model 
proc 
intl 
conf 
large data bases pages brisbane australia 
elm elmagarmid 
transaction models advanced database applications 
morgan kaufmann 
fla flanagan 
java nutshell 
reilly associates 
gh georgakopoulos hornick 
framework speci cation extended transaction models transactional ows 
intl 
journal intelligent cooperative information systems september 
georgakopoulos hornick manola 
customizing transaction models mechanisms programmable environment supporting reliable ow automation 
ieee transactions knowledge data engineering 
ghs georgakopoulos hornick sheth 
overview ow management process modeling ow automation infrastructure 
distributed parallel databases 
goo goodenough 
exception handling issues proposed notation 
communications acm december 
gs garcia molina salem 
sagas 
proc 
acm sigmod 
hol 
ow model 
technical report tc ow management coalition december 
accessible www aiai ed ac uk wfmc 
hsu hsu editor 
bulletin ieee technical committee data engineering 
special issue ow extended transaction systems 
ieee computing society june 
hsu hsu editor 
bulletin ieee technical data engineering 
special issue ow systems 
ieee computer society march 
jb jablonski bussler 
ow management 
international thomson computer press 
kr kamath ramamritham 
bridging gap transaction management ow management 
sheth 
la leymann 
managing business processes information resource 
ibm systems journal 
ley leymann 
supporting business transactions partial backward recovery management systems 
buro technik und wissenschaft pages 
mos moss 
nested transactions approach reliable distributed computing 
mit press cambridge mass 
obj object management group 
common object request broker architecture speci cation corba 
john wiley sons 
par parnas 
response detected errors structured programs 
technical report computer science dept carnegie mellon univ 
pau paulson 
ml working programmer 
cambridge university press 
seb 
concepts programming languages 
addison wesley rd edition 
sheth editor 
proceedings nsf workshop ow process automation information systems athens georgia usa may 
schuster jablonski bussler 
general framework execution heterogenous programs ow management systems 
coopis conference brussels belgium 
ste steele 
common lisp language 
digital press edition 
str stroustrup :10.1.1.26.9545
programming language 
addison wesley edition 
van zee burnett 
retire handling exceptions seamlessly declarative visual programming language 
proceedings ieee symposium visual languages boulder colorado usa september 
wc widom ceri 
active database systems 
morgan kaufmann publishers 
wfm ow management coalition terminology glossary version 
available www aiai ed ac uk wfmc june 
wr reuter 
contract model 
elmagarmid editor transaction models advanced database applications chapter pages 
morgan kaufmann publ 
ws weikum schek 
concepts applications multilevel transactions open nested transactions 
elmagarmid editor database transaction models advanced applications chapter 
morgan kau man san mateo ca 
yb yemini berry 
modular veri able exception handling mechanism 
acm transactions programming languages systems april 
zhang nodine bhargava 
ensuring relaxed atomicity exible transactions multidatabase systems 
proc 
acm sigmod pages 

