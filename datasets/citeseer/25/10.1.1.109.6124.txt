ieee communications survey tutorial march survey comparison peer peer overlay network schemes eng lua jon crowcroft marcelo ravi sharma steven lim internet today computing communications environments significantly complex chaotic classical distributed systems lacking centralized organization hierarchical control 
interest emerging peer peer network overlays provide substrate creating large scale data sharing content distribution application level multicast applications 
networks try provide long list features selection nearby peers redundant storage efficient search location data items data permanence guarantees hierarchical naming trust authentication anonymity 
networks potentially offer efficient routing architecture self organizing massively scalable robust wide area combining fault tolerance load balancing explicit notion locality 
survey comparison various structured unstructured networks 
categorize various schemes groups design spectrum discuss application level network performance group 
index terms peer peer distributed scalable algorithms lookup protocols overlay routing overlay networks 
peer peer overlay networks distributed systems nature hierarchical organization centralized control 
peers form self organizing overlay networks overlayed internet protocol ip networks offering mix various features robust wide area routing architecture efficient search data items selection nearby peers redundant storage permanence hierarchical naming trust authentication anonymity massive scalability fault tolerance 
peer peer overlay systems go services offered client server systems having symmetry roles client may server 
allows access resources systems supports requires fault tolerance self organization massive scalability properties 
grid systems overlay networks arise collaboration established connected groups systems reliable set resources share 
view overlay network models spanning wide spectrum communication framework specifies fully distributed cooperative network design peers building self organizing system 
shows overlay architecture illustrating components overlay manuscript received march revised november 
eng lua jon crowcroft marcelo university cambridge computer laboratory 
ravi sharma nanyang technological university 
steven lim microsoft asia 
fig 

overlay network architecture communications framework 
network communications layer describes network characteristics desktop machines connected internet small wireless devices connected ad hoc manner 
dynamic nature peers poses challenges communication paradigm 
overlay nodes management layer covers management peers include discovery peers routing algorithms optimization 
features management layer deals security reliability fault resiliency aggregated resource availability aspects maintaining robustness systems 
services specific layer supports underlying infrastructure application specific components scheduling parallel tasks content file management 
meta data describes content stored peers location information 
application level layer concerned tools applications services implemented specific functionalities top underlying overlay infrastructure 
classes overlay networks structured unstructured 
technical meaning structured overlay network topology tightly controlled content placed random peers specified locations subsequent queries efficient 
structured systems distributed hash table dht substrate data object value location information placed deterministically peers identifiers corresponding data object unique key 
dht systems ieee communications survey tutorial march distributed structured overlay application distributed hash table peer peer peer peer value fig 

application interface structured dht overlay systems property consistently assigned uniform random nodeids set peers large space identifiers 
data objects assigned unique identifiers called keys chosen identifier space 
keys mapped overlay network protocol unique live peer overlay network 
overlay networks support scalable storage retrieval key value pairs overlay network illustrated 
key store operation put key value lookup retrieval operation value get key invoked store retrieve data object corresponding key involves routing requests peer corresponding key 
peer maintains small routing table consisting neighboring peers nodeids ip addresses 
lookup queries message routing forwarded overlay paths peers progressive manner nodeids closer key identifier space 
different dht systems different organization schemes data objects key space routing strategies 
theory dht systems guarantee data object located small logn overlay hops average number peers system 
underlying network path peers significantly different path dht overlay network 
lookup latency dht overlay networks quite high adversely affect performance applications running 
plaxton provides elegant algorithm achieves nearly optimal latency graphs exhibit power law expansion time preserving scalable routing properties dht system 
algorithm requires pair wise probing peers determine latencies scale large number peers overlay 
dht systems important class routing infrastructures :10.1.1.147.1879
support rapid development wide variety internet scale applications ranging distributed file naming systems application layer multicast 
enable scalable widearea retrieval shared information 
napster pioneered idea peer topeer file sharing system supporting centralized file search facility 
system recognize requests popular content need sent central server handled peers requested content 
file sharing systems peers join system add aggregate download capability 
napster achieved self scaling behavior centralized search facility file lists provided peer require bandwidth centralized search 
system issue single point failure due centralized search mechanism 
lawsuit filed recording industry association america forced napster shut file sharing service digital music literally killer application 
paradigm caught imagination platform providers users alike 
gnutella decentralized system distributes search download capabilities establishing overlay network peers 
system unstructured overlay network 
unstructured system composed peers joining network loose rules prior knowledge topology 
network uses flooding mechanism send queries overlay limited scope 
peer receives flood query sends list content matching query originating peer 
flooding techniques effective locating highly replicated items resilient peers joining leaving system poorly suited locating rare items 
clearly approach scalable load peer grows linearly total number queries system size 
unstructured networks face basic problem peers readily overloaded system scale handling high rate aggregate queries sudden increase system size 
structured networks efficiently locate rare items key routing scalable incur significantly higher overheads unstructured networks popular content 
consequently internet today decentralized unstructured overlay networks commonly 
efforts routing api abstractions allow application specific functionality built common basic api abstractions open publicly accessible dht service allows unification platform providing developers basic dht service models runs set infrastructure hosts deploy dht overlay applications burden maintaining dht ease spur deployment dht applications 
contrast unstructured overlay systems ad hoc nature possibilities unified common platform application development 
sections ii iv describe key features structured unstructured overlay networks operation functionalities 
providing basic understanding various overlays schemes classes proceed evaluate various overlays schemes classes discuss developments sections iii attempt taxonomy comparisons various discussed structured survey comparison peer peer overlay network schemes unstructured overlay schemes decentralization examine overlay system distributed 
architecture describe overlay system architecture respect operation 
lookup protocol lookup query protocol adopted overlay system 
system parameters required system parameters overlay system operation 
routing performance lookup routing protocol performance overlay routing 
routing state routing state scalability overlay system 
peers join leave describe behavior overlay system churn self organization occurred 
security look security vulnerabilities overlay system 
reliability fault resiliency examine robust overlay system subjected faults 
lastly section vi conclude thoughts relative applicability class research problems arise ad hoc location content delivery networks 
ii 
structured overlay networks category overlay network assigns keys data items organizes peers graph maps data key peer 
structured graph enables efficient discovery data items keys 
simple form class systems support complex queries necessary store copy pointer data object value peer responsible data object key 
section survey compare structured overlay networks content addressable network tapestry chord pastry kademlia viceroy 
content addressable network content addressable network distributed decentralized infrastructure provides hashtable functionality internet scale 
designed scalable fault tolerant self organizing 
architectural design virtual multi dimensional cartesian coordinate space multi torus 
dimensional coordinate space completely logical 
entire coordinate space dynamically partitioned peers number peers system peer possesses individual distinct zone space 
peer maintains routing table holds ip address virtual coordinate zone neighbors coordinate space 
message includes destination coordinates 
neighbor coordinates peer routes message destination simple greedy forwarding neighbor peer closest destination coordinates 
routing performance routing state bound 
shown adapted fig 

example space peer joins virtual coordinate space store key value pairs follows store pair key deterministically mapped point coordinate space uniform hash function 
lookup protocol retrieve entry corresponding key peer apply deterministic hash function map point retrieve corresponding value point requesting peer immediate neighbors point request routed infrastructure reaches peer lays 
peer maintains ip addresses peers hold coordinate zones adjoining zone 
set immediate neighbors coordinate space serves coordinate routing table enables efficient routing points space 
new peer joins system portion coordinate space allocated 
achieved splitting existing peer zone half retaining half peer allocating half new peer 
associated dns domain name resolved ip address bootstrap peers maintains partial list peers 
new peer join ieee communications survey tutorial march network peer looks dns domain name retrieve bootstrap peer ip address similar bootstrap mechanism 
bootstrap peer supplies ip addresses randomly chosen peers system 
new peer randomly chooses point sends join request destined point peer uses routing mechanism forward message reaches peer zone lies 
current peer zone splits half assigns half new peer 
example dimensional space zone split dimension 
pairs half zone handed transferred new peer 
obtaining zone new peer learns ip addresses neighbor set previous peer point adds previous peer 
peer leaves network immediate takeover algorithm ensures failed peer neighbors takes zone starts takeover timer 
peer updates neighbor set eliminate peers longer neighbors 
peer system sends soft state updates ensure neighbors learn change update neighbor sets 
number neighbors peer maintains depends dimensionality coordinate space independent total number peers system 
example illustrated simple routing path peer point new peer joining network 
dimensional space partitioned equal zones average routing path length hops individual peers maintain list neighbors 
growth peers zones achieved increasing peer state average path length grows 
different paths points space peer neighbors fail peer route best available path 
improvement algorithm done maintaining multiple independent coordinate spaces peer system assigned different zone coordinate space called reality 
realities single peer assigned coordinate zones reality available peer holds independent neighbor sets 
contents hash table replicated reality improving data availability 
data availability improvement different hash functions map key points coordinate space 
results replication single key value pair distinct peers system 
key value pair unavailable replicas simultaneously unavailable 
queries particular hash table entry forwarded peers parallel reducing average query latency reliability fault resiliency properties enhanced 
large scale storage management systems oceanstore farsite publius 
systems require efficient insert retrieval content large distributed storage network scalable indexing mechanism 
potential application cans construction wide area name resolution services decouple naming scheme name resolution process 
enables arbitrary location independent naming scheme 
chord chord uses consistent hashing assign keys peers 
consistent hashing designed peers enter leave network minimal interruption 
decentralized scheme tends balance load system peer receives roughly number keys little movement keys peers join leave system 
steady state peers system peer maintains routing state information logn peers number peers system 
may efficient performance degrades gracefully information date 
consistent hash functions assign peers data keys bit identifier sha base hash function 
peer identifier chosen hashing peer ip address key identifier produced hashing data key 
length identifier large probability keys hashing identifier negligible 
identifiers ordered identifier circle modulo 
key assigned peer identifier equal follows identifier space 
peer called successor peer key denoted successor 
identifiers represented circle numbers successor peer clockwise identifier circle termed chord ring 
maintain consistent hashing mapping peer joins network certain keys previously assigned successor need reassigned peer leaves chord system assigned keys reassigned successor 
peers join leave system logn performance 
changes keys assignment peers need occur 
adapted chord ring depicted 
particular ring peers stores keys 
successor identifier peer key located nodeid 
similarly peer join identifier store key identifier peer identifier 
peer chord ring needs know contact current successor peer identifier circle 
lookup queries involve matching key nodeid 
identifier passed circle successor pointers encounter pair peers include desired identifier second peer pair peer query maps 
example peer performs lookup key 
peer invokes find successor operation key eventually returns successor key peer 
query visits peer circle peer peer 
response returned reverse path 
number bits key nodeid space peer maintains routing table entries called finger table 
th entry table peer contains survey comparison peer peer overlay network schemes fig 

chord ring identifier circle consisting peers data keys 
shows path followed query originated peer lookup key 
finger table entries peer 
identity peer succeeds identifier circle successor peer th finger peer finger 
finger table entry includes chord identifier ip address port number relevant peer 
shows finger table peer finger entry peer points peer peer succeeds mod 
similarly finger peer points peer peer succeeds mod 
way peers store information small number peers know peers closely identifier circle peers 
peer finger table contain information directly determine successor arbitrary key example peer determine successor key successor key peer peer finger table 
peer joins system successor pointers peers need changed 
important successor pointers date time correctness lookups guaranteed 
chord protocol uses stabilization protocol running periodically background update successor pointers entries finger table 
correctness chord protocol relies fact peer aware successors 
peers fail possible peer know new successor chance learn 
avoid situation peers maintain successor list size contains peer successors 
successor peer respond peer simply contacts peer successor list 
assuming peer failures occur probability probability peer successor list fail increasing system robust 
tuning parameter degree robustness reliability fault resiliency may achieved 
applications examples chord cooperative mirroring cooperative file system cfs multiple providers content cooperate store serve data 
spreading total load evenly participant hosts lowers total cost system participant needs provide capacity average load peak load 
layers cfs 
dhash distributed hash layer performs block fetches peer distributes blocks servers maintains cached replicated copies 
chord layer distributed lookup system locate servers responsible block 
chord dns provides lookup service host names keys ip addresses host information values 
chord provide dns service hashing host name key 
dns require special servers ordinary dns systems rely set special root servers 
dns requires manual management routing information dns records allows clients navigate name server hierarchy chord automatically maintains correctness analogous routing information 
dns works host names hierarchically structured reflect administrative boundaries chord imposes naming structure 
dns specialized task finding named hosts services chord find data object values tied particular machines 
tapestry sharing similar properties pastry tapestry employs decentralized randomness achieve load distribution routing locality 
difference pastry tapestry handling network locality data object replication difference apparent described section 
tapestry architecture uses variant plaxton distributed search technique additional mechanisms provide availability scalability adaptation presence failures attacks 
plaxton proposes distributed data structure known plaxton mesh optimized support network overlay locating named data objects connected root peer 
hand tapestry uses multiple roots data object avoid single point failure 
plaxton mesh peers take roles servers data objects stored routers forward messages clients entity requests 
uses ieee communications survey tutorial march local routing maps peer incrementally route overlay messages destination id digit digit instance wildcard similar longest prefix routing cidr ip address allocation architecture 
resolution digits right left left right arbitrary 
peer local routing map multiple levels represents matching suffix digit position id space 
th peer message reaches shares suffix length destination id locate router th level map examined locate entry matching value digit destination id routing method guarantees existing unique peer system located logical hops system peers nodeids base peer local routing map assumes preceding digits match current peer suffix peer needs keep small constant size entry route level yielding routing map fixed constant size entries map 
lookup routing mechanisms tapestry similar plaxton matching suffix nodeid described 
routing maps organized routing levels level contains entries point set peers closest distance matches suffix level 
peer holds list pointers peers referred neighbors 
tapestry stores locations data object replicas increase semantic flexibility allowing application level choose set data object replicas selection criteria date 
data object may include optional application specific metric addition distance metric oceanstore global storage architecture finds closest cached document replica satisfies closest distance metric 
queries deviate simple find semantics tapestry route message closest distinct data objects 
tapestry handles problem single point failure due single data object root peer assigning multiple roots object 
tapestry surrogate routing select root peers incrementally publishing process insert location information tapestry 
surrogate routing provides technique identifier uniquely mapped existing peer network 
data object root surrogate peer chosen peer matches data object id happen sparse nature nodeid space 
tapestry assumes peer exists attempting route message 
route non existent identifier encounter empty neighbor entries various positions way 
goal select existing link act alternative desired link associated digit routing terminates map reached non empty routing entry belongs current peer 
peer designated surrogate root data object 
surrogate routing may take additional hops reach root compared plaxton algorithm additional number hops small 
surrogate routing tapestry minimal routing overhead relative static global plaxton algorithm 
tapestry addresses issue fault adaptation main tains cached content fault recovery relying tcp timeouts udp periodic heartbeats packets detect link server failures normal operations rerouting neighbors 
fault operation entry neighbor map maintains backup neighbors addition closest primary neighbor 
testbed machines peers simulations results shows routing rates maintenance bandwidths instantaneous failures continuing churn 
variety different applications designed implemented tapestry 
tapestry self organizing faulttolerant resilient load fundamental component oceanstore system 
oceanstore global scale highly available storage utility deployed planetlab testbed 
oceanstore servers tapestry disseminate encoded file blocks efficiently clients quickly locate retrieve nearby file blocks id despite server network failures 
tapestry applications include bayeux efficient self organizing application level multicast system decentralized spam filtering system uses similarity search engine implemented tapestry 
pastry pastry tapestry plaxton prefix routing build self organizing decentralized overlay network peer routes client requests interacts local instances applications 
peer pastry assigned bit peer identifier nodeid 
nodeid give peer position circular nodeid space ranges 
nodeid assigned randomly peer joins system assumed generated resulting set nodeids uniformly distributed bit space 
network peers pastry routes numerically closest peer key steps normal operation configuration parameter typical value 
nodeids keys considered sequence digits base pastry routes messages peer nodeid numerically closest key 
peer normally forwards message peer nodeids shares key prefix digit bits longer prefix key shares current peer nodeid 
shown pastry peer maintains routing table neighborhood set leaf set 
peer routing table designed rows row holds number entries 
number entries row routing table refer peer nodeid shares current peer nodeid digits th digit possible values th digit current peer nodeid 
entry routing table contains ip address peers nodeid appropriate prefix chosen close proximity metric 
choice involves trade size populated portion routing table approx entries maximum number hops required route pair peers 
survey comparison peer peer overlay network schemes fig 

pastry peer routing table leaf set neighbor set 
example routing path pastry peer 
value peers routing table contains average entries expected number routing hops 
neighborhood set contains nodeids ip addresses peers closest proximity local peer 
network proximity pastry uses scalar proximity metric number ip routing geographic distance 
leaf set set peers numerically closest larger nodeids peers numerically smaller nodeids relation current peer nodeid 
typical values concurrent peers failure eventual delivery guaranteed reliability fault resiliency peers adjacent nodeids fail simultaneously configuration parameter typical value 
new peer nodeid joins network needs initialize state table inform peers presence 
joining peer needs know address contact peer network 
small list contact peers proximity metric rtt peer provide better performance provided service network joining peer select random peers contact peer 
new peer knows initially nearby pastry peer proximity metric list contact peers 
peer asks route special join message key equal pastry routes join message existing peer nodeid numerically closest response receiving join request peers peers encountered path send state tables informs peers need aware arrival 
ensures initializes state appropriate values state affected peers updated 
peer assumed topologically close new peer neighborhood set initialize neighborhood set 
considering general case nodeids share common prefix ai denote peer row routing table level contains appropriate values entries row routing table independent peer nodeid 
levels routing table nodeids share common prefix 
appropriate values taken peer route path entries share prefix digit nodeid 
transmits copy resulting state peers neighborhood set leaf set routing table 
peers update state information received 
pastry peer considered failed immediate neighbors nodeid space longer communicate peer 
replace failed peer leaf set neighbor nodeid space contacts live peer largest index side failed peer requests leaf table 
example li failed requests leaf set 
received leaf set overlaps current peer leaf set contains peers nearby nodeids appropriate chosen insert verifying peer alive contacting 
repair failed routing table entry peer contacts peer referred entry row asks peer entry rd entries row pointer live peer appropriate prefix peer contacts entry casting wider coverage 
neighborhood set routing messages kept fresh update set plays important role exchanging information nearby peers 
peer contacts member neighborhood set periodically see alive 
peer responding peer asks members neighborhood sets checks closest proximity newly discovered peers updates neighborhood set 
pastry implementation application level multicast called splitstream 
relying multicast infrastructure network widely available participating peers route distribute multicast message unicast network services 
splitstream allows cooperative environment peers contribute resources exchange service 
key idea split content stripes multicast stripe separate tree 
peers join trees stripes wish receive ieee communications survey tutorial march specify upper bound number stripes willing forward 
challenge construct forest multicast trees interior peer tree leaf peer remaining trees bandwidth constraints specified peers satisfied 
ensures forwarding load spread participating peers 
example peers wish receive stripes willing forward stripes splitstream construct forest forwarding load evenly balanced peers achieving low delay link stress network 
scribe scalable application level multicast infrastructure supports large number groups large number members group 
scribe built top pastry create manage groups build efficient multicast trees dissemination messages group 
scribe builds multicast tree formed joining pastry routes group member rendezvous point associated group 
membership maintenance message dissemination scribe leverages robustness selforganization locality reliability properties pastry 
squirrel uses pastry data object location service identify route peers cache copies requested data object 
facilitates mutual sharing web data objects client peers enables peers export local caches peers network creating large shared virtual web cache 
peer performs web browsing web caching need expensive dedicated hardware centralized web caching 
squirrel faces new challenge peers decentralized cache incur overhead having serve requests extra load kept low 
past large scale persistent storage utility pastry 
past system composed peers connected internet peer capable initiating routing client requests insert retrieve files 
peers may contribute storage system 
storage system past attractive exploits multitude diversity peers internet achieve strong persistence high availability 
need physical transport storage media protect lookup archival data need explicit mirroring ensure high availability throughput shared data 
global storage utility facilitates sharing storage bandwidth permitting group peers jointly store publish content exceed capacity bandwidth individual peer 
pastiche simple inexpensive backup system exploits excess disk capacity perform backup administrative costs 
cost inconvenience backup unavoidable prohibitive 
small scale solutions require significant administrative efforts 
large scale solutions require aggregation substantial demand justify capital costs large centralized repository 
pastiche builds architecture pastry provides scalable network self administered routing peer location contentbased indexing provides flexible discovery redundant data similar files convergent encryption allows hosts encrypted representation common data sharing keys 
kademlia kademlia decentralized overlay network takes basic approach assigning peer nodeid bit key space key value pairs stored peers ids close key 
nodeid routing algorithm locate peers near destination key 
key architecture kademlia novel xor metric distance points key space 
xor symmetric allows peers receive lookup queries precisely distribution peers contained routing tables 
kademlia send query peer interval allowing select routes latency send parallel asynchronous queries 
uses single routing algorithm process locate peers near particular id message transmitted peer includes peer id permitting recipient record sender peer existence 
data keys bit identifiers 
locate key value pairs kademlia relies notion distance identifiers 
bit identifiers defines distance bitwise exclusive xor interpreted non euclidean metric 
ifa 
xor offers triangle inequality property 
similarly chord clockwise circle metric xor unidirectional 
point distance exactly point unidirectional approach sure lookups key converge path regardless originating peer 
caching key value pairs lookup path alleviates hot spots 
peer network stores list ip address udp port nodeid triples peers distance 
lists called buckets 
kept sorted time seen accessed peer head accessed tail 
kademlia routing protocol consists ping probes peer check active 
store instructs peer store key value pair retrieval 
find node takes bit id returns ip address udp port nodeid triples peers knows closest target id find value similar find node returns ip address udp port nodeid triples case peer received store key just return stored value 
importantly kademlia peer locate closest peers nodeid 
lookup initiator starts picking peers closest non empty bucket sends parallel asynchronous find node peers chosen 
find node fails return peer closer survey comparison peer peer overlay network schemes level level level fig 

simplified viceroy network 
simplicity link ring level ring links shown 
closest peers seen initiator resends find node closest peers queried 
route lower latency flexibility choosing peers forward request 
find key value pair peer starts performing find value lookup find peers ids closest key 
join network peer contact participating peer peer inserts peer appropriate bucket performs peer lookup peer id peer refreshes buckets far away closest neighbor refresh peer populates buckets inserts peers buckets needed 
viceroy viceroy decentralized overlay network designed handle discovery location data resources dynamic butterfly fashion 
viceroy employs consistent hashing distribute data balanced set servers resilient servers joining leaving network 
utilizes dht manage distribution data changing set servers allowing peers contact server network locate stored resource name 
addition viceroy maintains architecture approximation butterfly network shown adapted diagram uses links successors predecessors ideas re ring key mapped successor ring short distances 
diameter overlay better degree better chord tapestry pastry 
peers operational logn levels selected near equal probability 
level peer edges connected peers level 
right edge added long range contact level distance away left edge close distance ring level 
edge nearby peer level included 
level ring links added previous peers level routing done climbing connections level peer 
proceeds levels tree links moving level level 
follows edge nearby link link depending distance recursively continues peer reached links vicinity target peer 
vicinity lookup performed ring level ring links 
reliability fault resiliency peer leaves overlay network hands key pairs successor ring pointers notifies peers find replacement 
formalized proved routing process requires logn number peers network 
iii 
discussion structured overlay network algorithm plaxton originally devised route web queries nearby caches influenced design pastry tapestry chord 
method plaxton logarithmic expected join leave complexity 
plaxton ensures queries travel network distance peer key stored 
plaxton disadvantages requires global knowledge construct overlay object root peer single point failure insertion deletion peers avoidance hotspots congestion 
pastry tapestry schemes relied dht provide substrate semantic free data centric assignment semantic free nodeid bit key performed efficient request routing lookup peers efficient dynamic routing infrastructure peers leave join 
overlays perform query routing dht systems strong theoretical foundations guaranteeing key exists capture relationships object name content 
dht systems problems terms data object lookup latency overlay hop peers route message intermediate peer located far away regard physical topology underlying ip network 
result high network delay unnecessary long distance network deterministic short overlay path logn number peers 
dht systems assume peers equally participate hosting published data objects location information 
lead bottleneck peers 
pastry tapestry routing algorithms randomized approximation hypercube routing object done matching longer addresses suffixes object root peer peer nearby copy 
rhea freepastry implementation discover lookups fail complete excessive churn 
claimed short lived peers leave overlay lookups timed 
outlined design issues pertaining dht performance churn lookup timeouts reactive versus ieee communications survey tutorial march periodic recovery peers choice nearby neighbors 
reactive recovery increase traffic congested links periodic recovery lookup suggested exponential weighted moving average neighbor response time alternative fixed timeout 
discovered selection nearby neighbors required global sampling effective simply sampling neighbor neighbors 
castro uses implementation show cope high churn rates achieving shorter routing paths lesser maintenance overhead 
pastry exploits network locality reduce routing delays measuring delay round trip time rtt small number peers building routing tables 
routing table entry chooses closest peers network topology nodeid satisfies constraints entry 
average ip delay pastry hop increases exponentially reaches average delay peers network 
chord routing protocol similar pastry location algorithm past 
pastry prefix routing protocol differs details chord 
chord maps keys peers identifier ring guarantees queries logarithmic number hops keys balanced 
uses consistent hashing minimize disruption keys peers leave join overlay network 
consistent hashing ensures total number caches responsible particular object limited caches changed minimum number object move maintain load balancing 
chord lookup service presents solution peer maintains logarithmic number long range links gives logarithmic join leave updates 
chord network maintained appropriately background maintenance process periodic stabilization procedure updates predecessor successor pointers cater newly joined peers 
liben nowell asks question stabilization procedure need run determine success chord lookups determining optimum involves measurements peers behavior 
stoica demonstrates advantage recursive lookups iterative lookups improvement proposed improve resiliency network partitions small set known peers reduce amount messages lookups increasing size step ring larger fingers peer 
proposes correction mechanism distributed ary search dks similar chord reduce communication costs incurred chord stabilization procedure 
mechanism correction expired routing entries piggybacking lookups insertions 
constant degree network routing lookup requests 
organizes overlay peers dimensional cartesian coordinate space peer takes ownership specific hyper rectangular shape space 
key motivation design argument plaxton schemes perform churn peer departures arrivals affect logarithmic number peers 
maintains routing table adjacent immediate neighbors 
peers joining cause peer owning region space split giving half new peer retaining half 
peers leaving pass nodeid neighbors nodeid ip addresses key value pairs takeover peer 
number tunable parameters improve routing performance dimensionality hypercube network aware routing choosing neighbor closest destination space multiple peers zone allowing deliver messages peers zone anycast manner uniform partitioning allowed comparing volume region volumes neighboring regions peer joins landmark placement causes peers join time probe set known landmark hosts estimating network distances 
open research questions resiliency load balancing locality latency hopcount costs 
kademlia xor topology routing resembles phase routing algorithms pastry tapestry plaxton 
algorithms need additional algorithmic structure discovering target peer peers share prefix differ bit digit 
argued pastry tapestry algorithms require secondary routing tables size addition main tables size blog bn increases cost bootstrapping maintenance 
kademlia resolves distinctive ways xor metric distance bit nodeid peer maintains list contact peers longer lived peers preference list 
kademlia easily optimized base configuring bucket table approaches target bits hop 
needs having bucket range peers distance expects log bn buckets 
viceroy overlay network butterfly presents efficient network construction proved formally maintains constant degree networks dynamic environment similar 
viceroy logarithmic diameter similar chord pastry tapestry 
viceroy diameter proven better degree better chord pastry tapestry 
routing achieved logn hops number peers nearly optimal congestion 
peers joining leaving system induce logn hops require peers change states 
li describes limited degree may increase risk network partition limitations local neighbors 
advantage constant degree overlay properties 
kaashoek highlights fault tolerant blind spots complexity 
done viceroy authors proposal tier locality aware dht gives lower degree properties lower tier peer overlay de bruijn graph 
de bruijn graphs give short average routing distances high resilience peer failure suited structured overlay networks 
overlays discussed survey comparison peer peer overlay network schemes greedy degree algorithms suboptimal routing distance longer 
increasing de bruijn overlay proposals 
de bruijn graph degree varied achieve asymptotically optimum diameter maximum peers graph total number peers system 
logn neighbors peer de bruijn graphs hop count logn 
comparison study done loguinov example chord de bruijn study routing performance resilience overlay networks including graph expansion clustering properties 
confirmed de bruijn graphs degree offer best diameter average distance pairs peers determines expected response time number hops optimal resilience peer connectivity large bisection width bisection width graph provides tight upper bounds achievable capacity graph node peer expansion guarantees little overlap parallel paths destination peer peer failure alternative paths destination peer affected 
dht overlay systems susceptible security breach malicious peers attacks 
simple attack dht overlay system malicious peer return wrong data objects lookup queries 
authenticity data objects handled cryptographic techniques cost effective public keys content hashes securely link different pieces data objects 
techniques prevent undesirable data objects polluting search results preventing denial attacks 
malicious peers may able corrupt deny access response lookup queries replicas data object impersonate replicas may stored illegitimate peers 
sit provides clear description security considerations involve adversaries peers dht overlay lookup system follow protocol correctly malicious peers able eavesdrop communication nodes malicious peer receive data objects addressed ip address ip address weak form peer identity malicious peers collude giving believable false information 
taxonomy possible attacks involving routing deficiencies due corrupted lookup routing updates vulnerability partitioning virtualization incorrect networks new peer join contact malicious peer lookup storage attacks inconsistent behaviors peers denial service attacks preventing access overloading victim network connection unsolicited responses lookup query 
defenses design principles classified defining verifiable system invariants lookup queries nodeid assignment peers selection routing cross checking random queries avoid single point responsibility 
castro relates problems secure routing structured overlay networks terms possibilities small number peers compromise overlay system peers malicious conspire termed eclipse attack 
design analysis techniques secure peer joining routing table maintenance robust message forwarding presence malicious peers structured overlays 
technique tolerate malicious peers providing performance number compromised peers small 
defense restricts flexibility necessary implement optimizations proximity neighbor selection works structured overlay networks 
singh proposes defense prevents eclipse attacks structured unstructured overlay networks bounding degree overlay peers degree overlay peers higher average degree legitimate peers legitimate peers choose neighbors subset overlay peers degree threshold 
having done degree bounding possible attacker consume indegree legitimate peers prevent legitimate peers referencing bounding degree necessary legitimate peers choose neighbors subset overlay peers degree degree threshold 
auditing scheme introduced prevent incorrect information degree outdegree 
survey security issues wallach describe secured routing primitives assigning nodeids maintaining routing tables forwarding messages securely 
suggested looking distributed auditing sharing disk space resources overlay network barter economy mechanism implement economy 
sheds light formal computational approach applicable overlay systems exchanging resources higher level functionality incentive compatible economic mechanisms layered higher layers 
formal game theoretical approach models constructed analyze equilibrium user strategies implement incentives cooperation 
ability overcome free rider problems overlay networks definitely improve system reliability value sybil attack termed douceur described situation large number potentially malicious peers system central authority certify peers identities 
difficult trust claimed identity 
dingledine proposes puzzles schemes including micro cash allow peers build reputations 
proposal provides degree accountability allows attacker launch attacks 
computational models trust reputation systems emerged assess trustworthiness behavior feedback interaction mechanisms 
basic assumption computational trust reputation models peers engage bilateral interactions evaluations done globally agreed scale 
trust reputation systems suffer problems highlighted despotovic extensive implementation overhead vague trust related model semantics 
causes lie aggregation feedback peers ieee communications survey tutorial march overlay network order assess trustworthiness single peer anti intuitive feedback aggregation strategies resulting outputs difficult interpret 
proposed simple probabilistic estimation technique maximum likelihood estimation suffice reduce problems feedback aggregation strategy employed 
lastly basic structured systems defines different methods higher level dht abstractions map keys peers structured application specific systems cooperative storage content distribution messaging effort defining basic common api abstractions common services provide called key routing api lower tier abstractions 
higher tier abstractions built basic 
addition dht abstraction provides functionality hash table structured dht systems mapping keys objects group anycast multicast cast provides scalable group communication coordination decentralized object location routing dolr provides decentralized directory service defined 
karp points mentioned bundled library model applications read local dht state receive upcalls dht requires codes set applications available dht hosts 
prevents sharing single dht deployment multiple applications generates maintenance traffic running dht underlying infrastructure 
proposed distributed rendezvous service model requires put get interfaces shares common dht routing platform 
authors argued open dht service spur development dht applications burden deploying maintaining dht 
table summarizes characteristics structured overlay networks discussed section ii 
iv 
unstructured overlay networks category overlay networks organize peers random graph flat hierarchical manners super peers layer flooding random walks expanding ring time live ttl search graph query content stored overlay peers 
peer visited evaluate query locally content support complex queries 
inefficient queries content widely replicated sent large fraction peers coupling topology data items location 
section shall survey compare seminal unstructured overlay networks freenet gnutella fasttrack kazaa bittorrent overnet edonkey 
freenet freenet adaptive network peers query store retrieve data items identified location independent keys 
example loosely structured decentralized network placement files anonymity 
peer maintains dynamic routing table contains addresses peers data keys holding 
key features freenet ability maintaining locally set files accordance maximum disk space allocated network operator provide security mechanisms malicious peers 
basic model requests keys passed peer peer chain proxy requests peer local decision location send request similar internet protocol ip routing 
freenet enables users share unused disk space allowing logical extension local storage devices 
basic architecture consists data items identified binary file keys obtained applying bit sha hash function 
simplest type file key keyword signed key ksk derived short descriptive text string chosen user music britney spears 
descriptive text string input deterministically generate public private key pair public half hashed yield data file key 
private half asymmetric key pair sign data file providing minimal integrity check retrieved data file matches data file key 
data file encrypted descriptive string key perform explicit lookup protocol access contents data stores 
prevents users independently choosing descriptive string different files 
problems addressed signed subspace key ssk enables personal namespaces 
public namespace key descriptive string hashed independently xor ed hashed yield data file key 
retrieval user publishes descriptive string user subspace public key 
storing data requires private key owner subspace add files owners ability manage namespaces 
third type key freenet content hash key chk updating splitting contents 
key derived hashing contents corresponding file gives file pseudo unique data file key 
data files encrypted randomly generated encryption key 
retrieval user publishes content hash key decryption key 
decryption key stored data file published data file key provide measure cover operators 
chk splitting data files multiple parts order optimize storage bandwidth resources 
done inserting part separately chk creating indirect file multiple levels indirect files point individual parts 
routing algorithm storing retrieving data designed adaptively adjust routes time provide efficient performance local knowledge peers knowledge immediate neighbors 
routing performance popular content 
request hops live limit similar ip time live ttl decremented peer prevent infinite chains 
request assigned pseudo unique random identifier survey comparison peer peer overlay network schemes table comparison various structured overlay network schemes algorithm structured overlay network comparisons taxonomy chord tapestry pastry kademlia viceroy decentralization dht functionality internet scale butterfly network connected ring predecessor successor links data xor metric distance points key space 
plaxton style global mesh network 
plaxton style global mesh network 
uni directional circular nodeid space 
architecture multi dimensional id coordinate space 
managed servers 
routing levels tree peer reached vicinity search performed ring level matching key node id routing 
matching key prefix nodeid 
matching suffix nodeid 
matching key nodeid 
lookup protocol key value pairs map point coordinate space uniform hash function 
ring links 
number peers network 
number peers network number bits nodeid 
number peers network number bits base chosen identifier 
number peers network base chosen peer identifier 
number peers network 
number peers network number dimensions 
system parameters routing performance logn logn small constant routing state logn logn peers join leave logn logn small constant security low level 
suffers man middle trojan attacks 
failure peers cause failure 
load incurred lookups routing evenly distributed participating lookup servers 
failure peers cause failure 
replicate data multiple peers 
failure peers cause network wide failure 
replicate data multiple peers 
keep track multiple paths peer 
failure peers cause network wide failure 
replicate data multiple peers 
keep track multiple paths peer 
failure peers cause network wide failure 
replicate data multiple consecutive peers 
failures application retries 
failure peers cause failure 
multiple peers responsible data item 
failures application retries 
reliability fault resiliency ieee communications survey tutorial march peer object object request reply failed request fig 

typical request sequence freenet 
peer request peers avoid loops rejecting requests seen 
happens preceding peer chooses different peer forward 
process continues request satisfied exceeded limit 
success failure signal message returned back chain sending peer 
joining network rely discovering address existing peers band means peer privileged peer hierarchy centralized point failure exist 
intuitive resilience decentralization enhances performance scalability giving constant routing state peers joins leaves overlay 
addition described freenet uses datastore increase system performance 
object returned forwarded successful retrieval insertion peer caches object datastore passes object upstream downstream requester creates new entry routing table associating object source requested key 
new object arrives new insert successful request cause datastore exceed designated size lru objects ejected order space 
lru policy applied routing table entries table full 
depicts typical sequence request messages 
user initiates data request peer forwards request peer forwards peer peer unable contact peer returns backtracking failed request message peer peer tries second choice peer forwards request peer delivers peer peer detects loop returns backtracking failure message 
peer unable contact peer backtracks step back peer peer forwards request second choice peer data 
data returned peer peers data cached peers creates routing short cut similar queries 
example shows overlay suffers security problems man middle trojan attacks peer peer query query peer query download response peer ue ry peer re ns fig 

gnutella utilizes decentralized architecture document location retrieval 
failure peers cause network wide failure lack centralized structure 
gives reliability fault resiliency 
gnutella gnutella pronounced decentralized protocol distributed search flat topology peers 
gnutella widely large amount improving gnutella 
gnutella protocol supports traditional client centralized server search paradigm gnutella distinction peer peer decentralized model document location retrieval shown 
model peer server client 
system centralized directory possess precise control network topology file placement 
network formed peers joining network loose rules 
resultant topology certain properties placement data items knowledge topology structured designs 
locate data item peer queries neighbors typical query method flooding 
lookup query protocol flooded neighbors certain radius 
design extremely resilient peers entering leaving system 
current search mechanisms scalable generating unexpected loads network 
called gnutella peers perform tasks normally associated clients servers 
provide client side interfaces users issue queries view search results time accept queries check matches local data set respond applicable results 
peers responsible managing background traffic spreads information maintain network integrity 
due distributed nature network implement gnutella protocol highly fault tolerant operation network interrupted subset goes offline 
join system new peer initially connects survey comparison peer peer overlay network schemes known hosts available list peers available fromhttp 
com 
connected network peers send messages interact 
messages broadcasted sent peers sender open tcp connections simply back propagated sent specific connection reverse path taken initial broadcasted message 
message randomly generated identifier 
second peer keeps short memory routed messages prevent re broadcasting implement back propagation 
third messages flagged ttl hops passed fields 
messages allowed network group membership ping pong messages 
peer joining network initiates broadcasted ping message announce presence 
ping message forwarded neighbors initiates back propagated pong message contains information peer ip address number size data items 
search query query response messages 
query contains user specified search string receiving peer matches locally stored file names broadcasted 
query response backpropagated replies query messages include information necessary download file 
file transfer get push messages 
file downloads done directly peers types messages 
member network peer open connections peers network 
dynamic network environment cope unreliability joining network peer periodically pings neighbors discover participating peers 
peers decide connect network local information 
entire application level network peers open tcp connections links forming dynamic selforganizing network independent entities 
latest versions gnutella uses notion superpeers ultra peers peers better bandwidth connectivity help improve routing performance network 
limited flooding mechanism communications ultra peers 
ultra peer approach binary decision peer capacity ultra peer knowledge mechanism dynamically adapt ultra peer client topologies system evolves 
ultra peers perform query processing behalf leaf peers 
peer joins network leaf selects number ultra peers publishes file list ultra peers 
query leaf peer sent ultra peer floods query ultra peer neighbors limited number hops 
dynamic querying search technique queries return fewer results re flooded deeper network 
saroiu examines bandwidth latency availability file sharing patterns peers gnutella fig 

fasttrack peers connect superpeers search routed superpeers downloads done peer peers 
napster highlighted existence significant heterogeneity systems 
krishnamurthy proposes cluster architecture systems cap uses network aware clustering technique central clustering server group peers clusters 
cluster delegate peers act directory servers objects stored peers cluster 
chawathe proposes model called gia modifying gnutella algorithms include flow control dynamic topology adaptation hop replication careful attention peer heterogeneity 
simulation results suggest modifications provide orders magnitude improvement total capacity system retaining significant robustness failures 
making simple changes gnutella search operations result dramatic improvements scalability 
fasttrack kazaa fasttrack decentralized file sharing system supports meta data searching 
peers form structured overlay super peers architecture search efficient shown 
super peers peers high bandwidth disk space processing power volunteered get elected facilitate search caching meta data 
ordinary peers transmit meta data data files sharing super peers 
queries forwarded super peer 
gnutella typed broadcast search performed highly pruned overlay network super peers 
system exist super peer result worse query latency 
approach consumes bandwidth maintain index super peers behalf peers connected 
super peers broadcast protocol search lookup queries routed peers super peers relevant information query 
kazaa fasttrack applications 
mentioned kazaa proprietary fasttrack ieee communications survey tutorial march protocol uses specially designated super peers higher bandwidth connectivity 
pointers peer data stored associated super peer queries routed super peers 
approach offer better scaling properties gnutella design analyzed 
proposals incorporate approach gnutella network 
kazaa peer peer file sharing network client supports similar behavior allowing powerful peers opt network support roles consume cpu bandwidth 
kazaa file transfer traffic consists unencrypted transfers transfers include kazaa specific headers kazaa ip 
headers simple distinguish kazaa activity activity 
kazaa application auto update feature meaning running instance kazaa periodically check updated versions 
downloads new executable kazaa network 
power law topology commonly practical networks www property small proportion peers high degree connections peers vast majority peers low degree connections peers 
formally frequency fd peers degree exhibits power law relationship form fd 
zipf property zipf distributions looking linear plotted log log scale 
faloutsos internet routing topologies follow powerlaw relationship 
gummadi observes kazaa measured popularity file sharing workload follow zipf distribution 
popularity requested objects large immutable video audio objects limited clients typically fetch objects web 
popularity kazaa objects tends short lived popular objects tend born 
significant locality kazaa workload means substantial opportunity caching reduce wide area bandwidth consumption 
bittorrent bittorrent centralized system uses central location manage users downloads 
file distribution network uses tit tat peer responds action collaborating peer performed previously method seeking 
protocol designed discourage free riders having peers choose peers data received 
peers high upload speed probably able download high speed achieving high bandwidth utilization 
download speed peer reduced upload speed limited 
ensure content spread peers improve reliability 
architecture consists central location tracker connected download torrent file contains information file length name hashing information url tracker illustrated torrent tracker torrent server peer peer peer peer peer fig 

bittorrent architecture consists centralized tracker torrent file 

tracker keeps track peers file partially completely lookup peers connect downloading uploading 
trackers simple protocol layered top downloader sends information file downloading port number 
tracker responds random list contact information peers downloading file 
downloaders information connect 
downloader complete file known seed started send complete copy original file 
bittorrent cuts files pieces fixed size kbytes track content peer 
downloader peer announces peers pieces uses sha hash pieces included torrent file 
peer finishes downloading piece checks hash matches announces piece peers 
verify data integrity 
peer connections symmetrical 
messages sent directions look data flow direction 
data transmitted downloader peers keep requests pieces data queued order get tcp performance 
known pipelining 
requests written tcp buffer immediately queued memory kept application level network buffer thrown happens 
temporary refusal upload downloading happen connection need stops 
done reasons 
tcp congestion control behaves poorly sending connections 
additionally lets peer tit tat algorithm ensure get consistent download rate 
criteria algorithm meet 
cap number simultaneous uploads tcp performance 
avoid unchoking quickly known 
reciprocate service access peers download 
survey comparison peer peer overlay network schemes try unused connections find better currently ones known optimistic unchoking 
currently deployed bittorrent algorithm avoids changing peer seconds 
reciprocation number uploads capped unchoking peers best download rates interest 
peers better upload rate interested get interested worst gets 
downloader complete file uses upload rate download rate decide unchoke 
optimistic unchoking time single peer regardless upload rate 
peer interested counts allowed downloaders 
peers optimistically rotate seconds 
overnet edonkey overnet edonkey hybrid layer information storage network composed client server publish retrieve small pieces data creating file sharing network 
architecture provides features concurrent download file multiple peers detection file corruption hashing partial sharing files downloading expressive querying methods file search 
join network peer client needs know ip address port peer server network 
bootstraps peer 
clients connect server register object files sharing providing meta data describing object files 
registration clients search querying meta data request particular file unique network identifier providing guarantee service locate popular objects 
servers provide locations object files requested clients clients download files directly indicated locations 
discussion unstructured overlay network unstructured centralized overlay model popularized napster 
model requires managed infrastructure directory server show scalability limits 
flooding requests model decentralized overlay systems gnutella peer keeps user driven neighbor table locate data objects quite effective locate popular data objects powerlaw property user driven characteristics 
lead excessive network bandwidth consumption remote unpopular data objects may due limit lookup horizon typically imposed ttl 
argument dht systems efficient tasks strong theoretical fundamentals guarantee key exists suited mass market file sharing 
capture semantic object relationships name content metadata 
particular dht ability find exceedingly rare objects required mass market file sharing environment ability efficiently implement keyword search proven 
addition precise placement algorithms specific routing protocols searching efficient 
structured overlay systems widely deployed ability handle unreliable peers tested 
research community efforts improving lookup properties unstructured overlays include flow control dynamic geometric topology adaptation hop replication peer heterogeneity freenet chord assign responsibility data specific peers lookups take form searches cached copies 
prevents guaranteeing retrieval existing data providing low bounds retrieval costs 
freenet provides anonymity introduces novel indexing scheme files identified keys secured signed subspace keys ensure object owner write file read 
overlay designs dhts share similar characteristics freenet exact query yields exact response 
surprising freenet uses hash function generate keys 
research shows changing freenet routing table cache replacement scheme lru enforcing clustering key space significantly improve performance 
idea intuition small world models theoretical results kleinberg 
version gnutella protocol adopted concept ultra peers high capacity peers act proxies lower capacity peers 
main enhancements query routing protocol allow leaf peers forward index object name keywords ultra peers 
allows ultra peers leaves receive lookup queries match subsequently reduces lookup query traffic leaves 
shortcoming lookup query propagation independent popularity objects 
dynamic query protocol addressed letting leaf peers send single queries high degree ultra peers adjust lookup queries ttl bounds accordance number received lookup query results 
gnutella udp extension scalable searches guess aimed reduce number lookup queries repeatedly queries single ultrapeers ttl limit load lookup query 
described gnutella section chawathe improves gnutella design gia system incorporating adaptation algorithm peers attached high degree peers providing receiver token flow control sending lookup queries neighbors 
flooding random walk search algorithm system keep pointers objects neighboring peers 
proposed unstructured overlay gnutella built top structured overlay help reduce lookup queries overhead overlay maintenance traffic 
collapse point lookup query rate define node query rate successful query rate falls average prior collapse 
comparison ieee communications survey tutorial march done static network scenario older gnutella enhanced gnutella version 
bittorrent second generation overlay system achieves higher level robustness resource utilization incentives cooperation technique file distribution 
longest comprehensive measurement study bittorrent system provides insight comparing detailed measurement study bittorrent popular file sharing systems fasttrack kazaa gnutella overnet edonkey directconnect characteristics popularity total number users participating certain period time 
availability system availability depending contributed resources 
download performance contrast size data time required download 
content lifetime time period data injected system till peers willing share data anymore 
pollution level fraction corrupted content spread system 
fasttrack kazaa largest file sharing community overnet edonkey bittorrent gaining popularity 
popularity bittorrent system influenced availability central components terms number downloads technical faults system 
availability significant influence popularity 
fasttrack kazaa advanced architecture availability super peers allow network scale creating indexing 
gnutella overnet edonkey provide full partial distribution responsibility shared files respectively 
availability content bittorrent unpredictable vulnerable potential failures due lack decentralization 
bittorrent suited download performance due advanced download distribution protocol 
overnet edonkey takes opposite approach offering powerful searching capabilities queue scheduling downloads take longer waiting times 
lack archive functionality bittorrent results relatively short content lifetimes 
fasttrack kazaa uses directory level sharing policy allows data files located long peer holding data file stays connected 
fasttrack kazaa system limit number fake files overlay allow user identify correct files hash code verification 
bittorrent prevents fake files floating system 
arising firewalls nats growing problems systems effect reducing download speed 
proposal tries solve firewall problems designing hybrid cdn structure streaming protocol access network empirical study bittorrent need additional protection potential negative effect firewall download speeds 
fluid model bittorrent networks proposed capture behavior system arrival rate small study steady state network performance 
study provided expressions various parameters average number sees average number downloaders average downloading time proved nash equilibrium exists peer chooses uploading bandwidth equal actual uploading bandwidth 
interesting note unstructured network kazaa gnutella pure power law networks zipf distribution properties example analysis shows gnutella networks topologies power law random graphs measurement shows peers low number connectivity 
may attributed behaviors users networks 
research powerlaw networks shows networks diverse internet organize peers links small number peers large number links 
interesting adamic studies random walk search strategies power law networks discovers changing walkers seek high degree peers search performance optimized greatly 
search techniques unstructured networks discussed iterative deepening directed bfs local indices 
networks power law organizational structure display unexpected degree robustness ability peers communicate extremely high failure rates 
networks prone attacks 
unstructured networks reduce network dependence small number highly connected easy attack peers 
dht building blocks distributed applications skipnet new overlay skip lists organizes peers data primarily sorted string names skip lists hashes names 
way skip net supports useful locality properties usual dht functionality 
addition research loo proposes design hybrid model structured dht techniques locate rare object items unstructured flooding locate highly replicated contents 
security issues discussed structured overlay networks section applies unstructured overlay networks 
worthwhile highlight bellovin difficult limit napster gnutella firewalls information leaked search queries overlay network 
highlighted concern gnutella push feature intended firewalls useful distributed denial service attacks 
napster centralized architecture secure attacks due centralized trusted server 
table ii summarizes comparisons unstructured networks 
means comprehensive believe captures essence discussion analysis done previous section iv 
vi 
concluding remarks various schemes structured unstructured overlay networks proposed table ii comparison various unstructured overlay network schemes survey comparison peer peer overlay network schemes algorithm unstructured overlay network comparisons taxonomy freenet gnutella fasttrack kazaa bittorrent overnet edonkey hybrid layer network composed clients centralized model tracker keeping track explicit central server 
peers connected topology flat equal peers 
decentralization loosely dht functionality 
servers 
peers 
super peers 
flat ad hoc network level hierarchical net peers request information servers provide loca peers 
super peers central tracker 
tions files request flooding request peers 
ing clients download peers download directly 
directly 
query flooding 
super peers 
tracker 
client server peers 
architecture keywords descriptive text strings identify data objects 
lookup protocol keys descriptive text string search peer peer 
torrent file 
system parameters guarantee locate data guarantee performance popular content 
guarantee locate data guarantee performance popular content 
degree guarantee locate data queries routed super peers better scaling performance popular con guarantee locate data improvements adapting topologies performance popular content 
guarantee locate data key search requests exceeded hops live limits 
routing performance tent 
constant routing state constant constant constant constant temporary refusal upload may occur 
peers join leave constant constant constant constant constant bootstrapping peer connect server regis ter files shared 
moderate similar threats fasttrack bit torrent 
moderate centralized tracker manage file transfer allows control harder faking ip addresses port numbers low threats flooding malicious fake content viruses monitor activities peers background 
low threats flooding malicious content virus spreading attack queries denial service attacks 
security low suffers man trojan attacks 
server receive multiple replies peers available data 
tracker keeps track peers availability pieces files avoid changing peer seconds 
ordinary peers reassigned super peers 
degradation performance peer receive multiple copies replies peers data requester peers retry 
hierarchy central point failure exists 
reliability fault resiliency ieee communications survey tutorial march researchers 
overlay network best suited depends application required functionalities performance metrics example scalability network routing performance location service file sharing content distribution 
schemes applied sharing music replication electronic address books multi player games provisioning mobile location ad hoc services distribution workloads mirrored websites 
close survey thoughts directions overlay networking research concerns overlay networks virtual topology maps physical network infrastructure impact additional stress infrastructure undoubtedly incur costs service providers 
useful provide quantitative evaluation overlay application internet topology matching scalability overlay applications efficient underlying physical network resources 
having sort incentive model economic game theories peers collaborate crucial create economy equilibrium 
non cooperative users benefit free riding resources tragedy commons inevitable 
incentives implementation overlay services provide certain level self regulatory auditing accounting behavior resource sharing 
trust reputation important secured trustworthy overlay communications peers 
example kademlia developed trust secured architecture routing location service discouraging free riding honesty routing away defective malicious peer 
proximity overlay routing important factor routing decision overlay networks improve global routing properties 
going research area mapping peers coordinate space heuristic proximity routing optimizations 
heterogeneity peers account delegating responsibility peers overlay improve routing scalability 
research aim reduce stretch ratio overlay path underlying network path routing metric scalable robust proximity calculations 
leads improved overlay operations performance globally 
mixed set metrics include delay throughput available bandwidth packet loss provide efficient global routing optimization 
application overlay networking models mobile ad hoc wireless network 
similar features self organizing peer peer routing resilient communications application overlay approaches allow mobile peers optimized flow control load balancing mechanism proximity aware qos routing 
see overlay networks linked take subsequent commercial success overlay computing personal area ad hoc networking mobile location services mirrored content delivery networked file sharing 
may conjecture prevalent problems internet controlling spam maintaining directory services multicasting content intuitive solutions various overlay network schemes 
order move forward development community needs understand applicability various schemes structured unstructured overlay network models 
survey modest attempt address need 
acknowledgment authors reviewers valuable comments 
plaxton rajaraman richa accessing nearby copies replicated objects distributed environment proceedings th annual acm symposium parallel algorithms architectures 
breslau cao fan phillips shenker web caching zipf distribution evidence implications proceedings ieee infocom 
karger lehman leighton panigrahy levine lewin consistent hashing random trees distributed caching protocols relieving hot spots world wide web proceedings acm symposium theory computing may pp :10.1.1.147.1879

rowstron druschel pastry scalable distributed object location routing large scale peer peer systems proceedings middleware 
ratnasamy francis handley karp shenker scalable content addressable network processings acm sigcomm pp 

stoica morris karger kaashoek balakrishnan chord scalable peer peer lookup protocol internet applications ieee acm transactions networking vol 
pp 

zhao huang stribling rhea joseph kubiatowicz tapestry resilient global scale overlay service deployment ieee journal selected areas communications vol 
pp 
january 
napster 
online 
available www napster com gnutella development forum gnutella protocol 
online 
available groups yahoo com group files gnutella web caching system 
online 
available www net gnutella ultrapeers 
online 
available rfc gnutella 
sourceforge net proposals ultrapeer ultrapeers htm dabek zhao druschel stoica common api structured peer peer overlays proceedings nd international workshop peer peer systems iptps berkeley california usa february 
karp ratnasamy rhea shenker adoption dhts public dht service proceedings rd international workshop peer peer systems iptps berkeley california usa february 
maymounkov mazi res kademlia peer peer information system xor metric processings iptps cambridge ma usa february pp 

malkhi naor viceroy scalable dynamic emulation butterfly processings acm podc monterey ca usa july pp 

francis yoid extending internet multicast architecture unpublished april 
www aciri org yoid docs index html 
kubiatowicz bindel chen eaton geels gummadi rhea weatherspoon weimer wells zhao oceanstore architecture global scale persistent storage processings acm asplos november 
survey comparison peer peer overlay network schemes bolosky douceur ely theimer feasibility serverless distributed file system deployed existing set desktop pcs proceedings acm sigmetrics international conference measurement modeling computer systems june pp 

waldman rubin cranor publius robust censorship resistant web publishing system processings ninth usenix security symposium denver usa 
karger lehman leighton panigrahy levine lewin consistent hashing random trees distributed caching protocols relieving hot spots world wide web proceedings ninth annual acm symposium theory computing may pp 

secure hash standard nist dept commerce national technical information service fips april 
dabek kaashoek karger morris stoica widearea cooperative storage cfs proceedings eighteenth acm symposium operating systems principles pp 

cox muthitacharoen morris serving dns chord proceedings international workshop peer peer systems march 
rekhter li 
architecture ip address allocation cidr 
ietf internet draft rfc 
online 
available www isi edu notes rfc txt rhea wells eaton geels zhao weatherspoon kubiatowicz maintenance free global storage oceanstore ieee internet computing 
peterson anderson culler roscoe blueprint introducing disruptive technology internet sigcomm comput 
commun 
rev vol 
pp 

zhuang zhao joseph katz kubiatowicz bayeux architecture scalable fault tolerant wide area data dissemination proceedings th international workshop network operating systems support digital audio video pp 

zhou zhuang zhao huang joseph kubiatowicz approximate object location spam filtering peerto peer systems processings middleware june 
castro druschel 
kermarrec nandi rowstron singh splitstream high bandwidth multicast cooperative environments proceedings nineteenth acm symposium operating systems principles october pp 

rowstron 
kermarrec castro druschel scribe design large scale event notification infrastructure proceedings third international workshop networked group communications ngc london uk november pp 

castro druschel 
kermarrec rowstron scribe large scale decentralized application level multicast infrastructure ieee journal selected areas communications jsac special issue network support multicast communications october 
iyer rowstron druschel squirrel decentralized peer peer web cache proceedings st symposium principles distributed computing podc monterey california usa july 
druschel rowstron past large scale persistent peerto peer storage utility proceedings th workshop hot topics operating systems hotos viii 
schloss germany may 
rowstron druschel storage management caching past large scale persistent peer peer storage utility proceedings eighteenth acm symposium operating systems principles october pp 

cox murray noble pastiche making backup cheap easy sigops oper 
syst 
rev vol 

si pp 

muthitacharoen chen mazi res low bandwidth network file system proceedings eighteenth acm symposium operating systems principles pp 

manber finding similar files large file system proceedings usenix winter conference january pp 

siegel interconnection networks simd machines computer vol 
pp 

kleinberg small world phenomenon algorithm perspective proceedings second annual acm symposium theory computing pp 

re kranakis efficient routing networks long range contacts proceedings th international conference distributed computing vol 
pp 

rhea geels roscoe kubiatowicz handling churn dht proceedings nd international workshop peer peer iptps february 
castro costa rowstron performance dependability structured peer peer overlays proceedings international conference dependable systems networks dei florence italy june july 
liben nowell balakrishnan karger analysis evolution peer peer systems proceedings annual acm symposium principles distributed computing monterey california usa 
el brand haridi dks family low communication scalable fault tolerant infrastructures applications proceedings rd ieee acm international symposium cluster computing grid monterey california usa pp 

li plaxton name resolution peer peer networks proceedings nd acm international workshop principles mobile computing monterey california usa pp 

kaashoek karger koorde simple degree optimal hash table proceedings nd international workshop peer peer systems iptps berkeley ca usa february 
abraham malkhi land stretch epsilon locality aware networks dhts proceedings acm siam symposium discrete algorithms soda new orleans la usa 
de bruijn combinatorial problem netherlands van vol 
pp 

naor wieder novel architectures applications continuous discrete approach proceedings th annual acm symposium parallel algorithms architectures spaa san diego california usa june pp 

loguinov kumar ganesh graph theoretic analysis structured peer peer systems routing distances fault resilience proceedings acm sigcomm karlsruhe germany august pp 

naor wieder simple fault tolerant distributed hash table proceedings nd international workshop peer peer systems iptps berkeley california usa february 
content addressable networks laboratoire de recherche en informatique universit de paris sud tech 
rep technical report jan 
sit morris security considerations peer peer distributed hash tables proceedings st international workshop peer peer systems iptps cambridge ma 
castro druschel ganesh rowstron wallach secure routing structured peer peer overlay networks sigops oper 
syst 
rev vol 

si pp 

singh castro druschel rowstron defending eclipse attacks overlay networks proceedings sigops european workshop leuven belgium september 
wallach survey peer peer security issues proceedings international symposium software security tokyo japan november 
lua lin crowcroft tan novel mobile wireless roaming settlement model proceedings pp 

agrawal suri game theoretic framework incentives systems proceedings ieee linkoping sweden september 
leyton brown mironov lillibridge incentives sharing peer peer networks lecture notes computer science vol 
pp 

lai feldman chuang stoica incentives cooperation peer peer networks proceedings workshop economics peer peer systems linkoping sweden june 
douceur sybil attack proceedings international workshop peer peer systems march pp 

dingledine freedman molnar accountability measures peer peer systems peer peer harnessing power disruptive technologies ed 
reilly associates november 
ieee communications survey tutorial march despotovic aberer probabilistic approach predict peers performance networks proceedings eighth international workshop cooperative information agents cia erfurt germany september 
clarke sandberg wiley hong 
freenet distributed anonymous information storage retrieval system 
freenet white 
online 
available org freenet pdf fasttrack peer peer technology 
online 
available www fasttrack nu kazaa media desktop 
online 
available www kazaa 
com bittorrent 
online 
available org bittorrent overnet file sharing network 
online 
available www overnet com overnet edonkey 
online 
available www 
edonkey com public key cryptography financial services industry part secure hash algorithm sha american national standards institute tech 
rep american national standard 
ganesan sun garcia molina peer peer lookup service arbitrary topology proceedings ieee infocom san francisco usa march april 
lv ratnasamy shenker heterogeneity gnutella scalable proceedings st international workshop peerto peer systems iptps cambridge ma usa february 
chawathe ratnasamy breslau lanham shenker making gnutella systems scalable proceedings acm sigcomm karlsruhe germany august 
gnutella proposals dynamic querying 
online 
available www limewire com developer dynamic query html saroiu gummadi gribble measurement study peer peer file sharing systems proceedings multimedia computing networking mmcn san jose california usa january 
krishnamurthy wang xie early measurement cluster architecture systems proceedings acm internet measurement workshop san francisco usa november 

online 
available www com barab si albert jeong power law distribution world wide web science vol 

albert jeong barab si diameter world wide web nature vol 
pp 

faloutsos faloutsos faloutsos power law relationships internet topology processings sigcomm 
gummadi dunn saroiu gribble levy zahorjan measurement modeling analysis peer peer file sharing workload processings sosp bolton landing new york usa october 
goel govindan small world model improve freenet performance computer networks journal vol 
pp 
november 

ultrapeers step gnutella scalability 
online 
available groups yahoo com group files proposals working proposals ultrapeer fisk 
gnutella ultrapeer query protocol 
online 
available groups yahoo com group files proposals working proposals search dynamic querying daswani fisk 
gnutella udp extension scalable searches guess 
online 
available www limewire org fisheye raw core guess html sips measurement study bittorrent peer peer file sharing system delft university technology parallel distributed systems report series tech 
rep technical report pds 

goebel analysis bittorrent design streaming protocol hybrid cdn delft university technology parallel distributed systems report series tech 
rep technical report june 
qiu srikant modeling performance analysis bittorrent peer peer networks proceedings acm sigcomm karlsruhe germany august september 
jovanovic berman scalability issues large peer peer networks case study gnutella delft university technology parallel distributed systems report series university cincinnati tech 
rep technical report 
online 
available www uc edu research html broder kumar maghoul raghavan rajagopalan stat tomkins wiener graph structure web processings th int 
www conference amsterdam may 
barabasi albert emergence scaling random networks science vol 

adamic lukose huberman search power law networks physical review vol 

yang garcia molina efficient search peer peer networks proceedings nd ieee international conference distributed computing systems icdcs july 
albert barab si attack tolerance complex networks nature vol 

harvey jones amd theimer wolman skipnet scalable overlay network practical locality properties proceedings th usenix symposium internet technologies systems usits seattle wa usa march 
loo huebsch stoica hellerstein case hybrid search infrastructure proceedings rd international workshop peer peer systems iptps san diego california usa february 
bellovin security aspects napster gnutella proceedings usenix annual technical conference boston massachusetts usa june 
hardin tragedy commons science vol 
pp 

lua crowcroft highways proximity clustering scalable peer peer network proceedings ieee fourth international conference peer peer computing august pp 

costa castro rowstron key pic practical internet coordinates distance estimation th ieee international conference distributed computing systems icdcs tokyo japan march 
dabek cox kaashoek morris vivaldi decentralized network coordinate system proceedings acm sigcomm conference portland oregon august 
shavitt big bang simulation embedding network distances euclidean space proceedings ieee infocom conference san francisco california usa march april 
curvature internet usage overlay construction distance estimation proceedings ieee infocom conference hong kong march 
ng zhang predicting internet network distance coordinates approaches ieee infocom new york usa june 
crowcroft wilbur harris bhatti scalable distributed location nd international workshop peer peer systems february 
tang crovella virtual landmarks internet acm sigcomm internet measurement conference imc miami fl usa october 
lim hou choi constructing internet coordinate system delay measurement acm sigcomm internet measurement conference imc miami fl usa october 
castro druschel hu rowstron exploiting network proximity peer peer overlay networks microsoft research laboratory tech 
rep technical report msr tr 
rhea kubiatowicz probabilistic location routing proceedings ieee infocom 
karger ruhl finding nearest neighbors metrics proceedings acm symposium theory computing stoc may 
ratnasamy handley karp shenker overlay construction server selection proceedings ieee infocom 
waldvogel rinaldi efficient topology aware overlay network proceedings workshop hot topics networks hotnets october 
li jannotti couto karger morris scalable location service geographic ad hoc routing proceedings th acm international conference mobile computing networking boston massachusetts usa august pp 

