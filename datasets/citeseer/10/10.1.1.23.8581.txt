top composition software architectures hans de bruin hans van vliet vrije universiteit amsterdam mathematics computer science department de boelelaan hv amsterdam netherlands mail hans cs vu nl discusses approach top composition software architectures 
architecture derived addresses functional requirements 
architecture contains number variability points filled address quality concerns 
quality requirements associated architectural solution fragments captured called feature solution fs graph 
solution fragments captured graph iteratively compose architecture 
versatile composition technique allows pre post refinements refinements involve multiple variability points 
addition usage fs graph supports aspect oriented programming aop architecture level 
architecture software system captures early design decisions 
early design decisions reflect major quality concerns including functionality 
order reinvent wheel time capture chunks architectural knowledge explicitly chunks deriving architecture fulfills set quality concerns 
solution capturing knowledge feature solution fs graph connects quality requirements solution fragments architectural level 
concerned composing architecture solution fragments captured fs graph 
process envisage deriving architecture iterative quality driven approach software architecting see instance 
step process derivation software architecture meets functional requirements set 
called architecture 
attention focuses non functional requirements iteratively applying known design solutions architectural design patterns refine software architecture 
typically requires iterations 
iterations involve backtracking steps usually deal conflicting requirements 
heart iterative quality driven process composing software architectures feature solution fs graph 
fs graph requirements connected design solutions 
basis requirements specified feature space fs graph solutions meet requirements selected solution space 
way look fs graph embodies domain knowledge expressed requirements design solutions solving particular problems domain 
role fs graph iterative approach discussed extensively 
focus composition technique systematically derive software architecture recursively applying design solutions architecture 
architecture contains variability points places architecture expected varied instance cater non functional requirements 
variations design solutions form patterns turn may contain variability points 
principle architecture refined indefinitely 
call approach top approach software architecture composition contrast bottomup composition top decomposition approaches known software engineering may sound contradiction terms 
bottom composition start set elementary components aggregate higher level components glue mechanism 
abstraction level raised time compose component subcomponents 
system decomposition opposite direction followed 
start top level view system recursively decompose manageable pieces 
system decomposition lowers abstraction level 
approach starting point architecture description basic functionality variability points 
variability points plug existing design solutions address certain quality concerns 
plug ins turn may contain variability points fine tune solution 
leads top approach system composition 
fs graph plays key role top iterative composition process 
fs graph supposed contain relevant domain knowledge system construction explore design alternatives system wide impact 
instance quite possible change interaction style system user centered user control system centered don call system system call 
seen architecture level counterpart aspect weaving aspect oriented programming languages 
case maps ucm vehicle demonstrate principles 
ucm diagrammatic modeling technique describe behavioral lesser extent structural aspects system high level abstraction 
ucm provides stubs hooks variability points behavior system varied statically construction time dynamically run time 
advantage ucm focuses larger architectural issues support plug ins stubs static dynamic 
ucm prerequisite composition technique applied instance uml 
contributions twofold 
firstly versatile composition technique software architectures 
technique offers pre post refinement supports multiple plug ins design solution offers rules enforce formedness refinements 
secondly usage fs graph supports abstraction level lowering aspect oriented programming aop architecture level 
remainder organized follows 
section explains technique top composition 
section illustrate role fs graph system composition 
section illustrates realize global transformations software architecture 
section discusses related section contains 
composition technique described simple effective way system composition successive refinements 
basic idea provide ucm stubs plug ins placed 
plug may contain stub plug placed plug 
approach secure communication web browsers web system adding encryption decryption components firewall component 
idea works fine local refinements refinements encryption firewall apply variability point ucm stub 
falls short deal refinements applied multiple variability points 
example type refinement observer design pattern affects component role subject components role observers 
solution handle refinement multiple variability points 
basic concepts refinement explained example shown 
example deals encryption decryption firewall refinement 
time model encryption decryption refinement variability points gives greater flexibility solution 
example involves components peer peer 
component peer communicates component peer 
peer provides socket sending data peer provides socket receiving data 
communication peers refined adding encryption decryption components peer peer respectively firewall component peer 
meaning ucm elements refinement table 
notice options firewall placement example 
firewall component placed component placed depending firewall placed pre stub post stub rcv receiver socket peer respectively 
refinements obey certain rules 
rules enforce formedness transformation successive architectures 
rules easily understood viewing refinement ucm applied patterns match 
rules refinement follows readers familiar ucm short appendix basic ucm modeling peer peer communication peer provides socket refinement peer snd sender peer rcv receiver pre post pre post refinement containing plug encryption decryption encrypt snd sender decrypt rcv receiver encryptor pre post pre post result refining basic ucm encryption decryption peer refinement containing firewall plug snd sender rcv receiver encryptor pre post pre post snd sender peer fw rcv receiver pre post firewall pre post result placing firewall refinement pre stub peer snd sender rcv receiver pre encryptor post firewall pre post result placing firewall refinement post stub peer peer peer snd sender rcv receiver encryptor firewall pre post pre post refinement basics 
type matching 
sockets plug ins names type identifiers specified name type pair 
types organized type hierarchies supporting single multiple inheritance 
plug placed stub socket plug socket matching types 
type plug identical subtype stub type 
element meaning socket stubs socket placeholder provides ucm stubs ucm plug placed 
stub called pre post 
intention pre stub provides ability pre processing 
likewise post stub offers possibility post processing 
stubs depicted diamonds 
plug plug placed pre stub post stub socket 
may contain pre stub post stub creating opportunity recursively plug plug ins 
plug placed pre stub post stub plug discarded vice versa post stub placement 
plug boundary plug boundary encloses set plug ins placed single component 
mechanism ensure plug ins belong scattered number components 
plug boundary depicted rectangle surrounding plug ins 
refinement refinement combination plug ins enclosed plugin boundaries placed stubs provided sockets 
table meaning ucm refinement elements 
plug matching 
kinds plug ins recognized mandatory 
mandatory plug ins refinement sockets matching types 
optional 
socket provided optional plug plug placed socket discarded 
extension 
contrast optional plug socket needs provided extension discarded 
plug kind specified syntactically name type plug kind optional 
plug kind specified plug qualified mandatory 
boundary matching 
plug ins enclosed plug boundary placed component 
structure matching 
ucm path indicated straight curved line connects components means components communicate way 
exists structural relationship components 
ways specify details relationship communication may communication may direct indirect 
components reside plug boundaries may say relationships exist plug boundaries 
structural relations plug boundaries refinement correspond structural relations provided sockets 
path stack components denotes relation 
instance observer design pattern stack observers may connected single subject 
structural relation refinement matches relation target ucm vice versa 
distinction indirectly directly connected plug ins refinement 
case indirectly connected plug ins indicated ucm symbol attached start symbol corresponding sockets need necessarily direct connection 
required ucm path socket path may go arbitrary number components sockets 
permitted direct connections 
illustrate finer details refinement process consider example peer peer communication 
example abstracted away peers communicate 
way realizing deploying observer design pattern captured ucm refinement shown 
shows observer refinement plugged peer peer ucm encryption decryption firewall components 
firstly notice types specify plug ins placed 
plug type sender fits peer plug type receiver fits peer 
plug ins mandatory 
subject subscribe extension unsubscribe extension pre post publisher sender pre subscribe subscribers team unsubscribe post post pre continuation optional pre post observer subscriber receiver pre post observer design pattern captured ucm refinement 
optional continuation plug socket provided discarded refinement 
extension plug ins placed peer contained plug boundary contains publisher sender plug contains functionality subscribing 
structural relationship plug boundaries observer refinement indirect fits direct relationship peers 
remarks order 
firstly specific solution details added basic ucm started place 
call process abstraction lowering discussed section 
conversely observer design pattern captured general ucm refinement variety circumstances 
secondly flexible refinement mechanism provided form pre stubs post stubs 
particular case multicast interested observers positioned encryption component chosen place encryptor 
protection peer subscribe unsubscribe pre post post pre subscribe snd sender encryptor pre subscribers team unsubscribe post peer rcv receiver pre firewall post lowering abstraction level deploying observer pattern 
abstraction lowering refinement starting top level system structure refinement form plug placement lowers abstraction level 
example previous section observer pattern refinement resulted extension peer peer system subscription management 
approach architectural knowledge refinements quality concerns address captured feature solution fs graph 
example consider peer peer communication 
fs graph details basic peer peer ucm refined 
spaces recognized fs graph 
feature space contains requirements solution space contains solutions form plug ins placed basic peer peer ucm 
features solutions decomposed ex decomposition trees 
decomposition node means constituents available requires arbitrary number constituents exor requires precisely constituent 
key idea feature space select solution space defined directed selection links nodes indicated solid line 
possible explicitly rule particular solution 
done connecting feature negative selection link solution indicated dashed line 
functional 
flexibility requirements exor low medium high non functional performance exor low medium high security feature space exor low medium high solution space firewall ucm security encryption decryption ucm peer peer architecture ucm observer design pattern ucm exor communication exor permanent ucm message ucm feature solution graph peer peer communication 
pc ucm example focus non functional requirements particular flexibility security performance requirements 
high flexibility level desired fs graph dictates observer design pattern properties reducing coupling peers supporting multiple observers 
hand want high performance fs graph selects direct invocation style form remote procedure calls 
interesting observe high level flexibility high level performance obtained simultaneously requirements select solutions rule implied exor decomposition communication node 
fs graph contains trade information 
typically design process cycles required arrive architectural design satisfies non functional requirements 
quality driven iterative approach architecture generation evaluation described detail 
discussed abstraction level lowered time refinement step performed generally requires detail added general solution started 
example case application observer design pattern details filled subscribe unsubscribe observers 
deduced fs graph contain information abstraction lowering 
suppose opted high flexibility solution resulted selecting observer design pattern 
observer design pattern node fs graph exor decomposed permanent message solution stands setting connection permanently setting breaking connection message respectively 
case high performance permanent connection selected high security connection established message basis 
notice medium level security chosen negative selection link rules permanent connection explicitly exor decomposition relation implies selection message solution 
cases especially required flexibility security performance levels set low particular solution favored 
put differently fs graph contains degrees freedom explore design alternatives iterative design process 
result abstraction lowering permanent connection shown 
plug setting permanent connection plug boundaries 
matches subscribe socket peer matches subscriber receiver socket peer 
setting permanent connection requires initialization modeled extension plug 
applying refinement extension added result 
connection established additional functionality needed actual communication 
modeled empty plug type subscriber receiver 
empty plug needed determine plug applied 
applied leaves existing structure intact 
plug setting permanent connection result applying plug peer subject snd sender subscribe subscribe unsubscribe pre post post pre subscribe encryptor pre subscribers team unsubscribe post observer peer initialize setup extension pre subscriber receiver post pre post rcv receiver initialize setup firewall pre post filling details permanent connection 
pre post solution part fs graph contains collection ucm plug ins 
plug ins iteratively refine architectural solution guided quality requirements expressed feature part graph 
time apply refinement abstraction level architecture lowered 
crosscutting concerns means larger example show section fs graph refine particular solution locally globally system level 
handle aspects performance security general require adaptation components 
type refinement may called aspect oriented programming aop architectural level 
example clients ordering goods retailer 
typical simplified scenario ordering follows 
client fills form sends form electronically retailer 
retailer checks database see goods stock 
sends report client stating goods expected shipped 
assume basic scenario extended brokering 
certain goods supported retailer tries obtain 
take time get answers especially provide line services client driven approach basic ordering scenario longer applicable 
retailer takes initiative inform client status order outstanding requests collected 
communication client retailer changed client driven mixture client driven retailer driven communication 
frequently architecture systems ordering system client server cs architecture 
architecture shown basic scenario ordering goods contained 
client server component provide sockets refinement 
client input output server doit process pre post post pre pre post dbms client server architecture 
step extend system broker functionality 
shown 
functionality expressed ucm database consulted 
certain goods delivered retailer server broker sends request number 
simultaneously broker sends message client inform brokering progress 
brokering requests collected database updated status report sent client 
basic scenario ordering goods brokering client driven reverse holds sending status report results brokering process sorted 
case system takes initiative 
consequence client adapted support system driven approach 
instance client equipped mail component alternatively may contain kind message broker 
socket notify messenger contained client component acts placeholder system driven message delivery 
point extend server broker functionality extend client 
effect extension localized 
system wide impact 
call aop architectural level 
knowledge system extended adapted captured fs graph see 
observe effect requiring broker functionality 
selection links stemming brokering functional requirement select broker component placed server message delivery component placement client 
effectively fs graph ensures refinements extensions satisfy particular requirement 
related architecture architectural styles proposed means capture structural behavioral aspects partial design solutions quality properties 
combines architectural style certain quality attributes 
essentially fs graph stronger focus construction generation oriented representation architectural knowledge 
goal oriented requirements engineering relation goals requirements represented explicitly 
natural continuation line thought connect requirements high level design architecture 
done ucm 
goal oriented language combination ucm ucm lot similarities concepts 
approach link established requirements decomposition soft goals tasks design solution form ucm scenarios 
notion refinement ucm stubs plug ins supported 
approach differs respects plug brokering client notify messenger extension post pre resulting client server system client input pre post notify messenger post pre output post pre server server doit process post doit process post dbms broker pre dbms broker extending client server system broker functionality 
requirements non functional functional 
cases traits 
ordering brokering feature space solution space 
client ucm message delivery exor server architecture ucm message broker ucm feature solution graph client server system 

server broker ucm explicit distinction feature solution space connections 
opens way recursively apply idea 
instance establish linkages requirements software architecture space 
token establish linkages archi tecture detailed design solutions 
software architecture level space detailed design level space 
detailed design space turn act space implementation space 
space may contain nodes connected nodes space 
seen degrees freedom design alternatives explored 
idea refinement applied recursively plug ins provide stubs 
ucm supports hand level refinement 
support advanced refinement mechanism form multiple variability points 
allows refine patterns necessarily restricted local point 
observer pattern typical example support point 
concept refinement applied years especially field formal specifications vdm known approach refinement component oriented context catalysis 
main idea catalysis concept collaboration set related actions involving multiple objects resulting goal 
collaboration seen formalization case 
specified formally terms pre post condition invariants object constraint language ocl 
collaboration described high level abstraction 
description serves formal specification refined subsequent steps 
refinement key concept catalysis support notion variability points 
clues whatsoever refine 
approach refinement done automatically basis type structure matching content fs graph 
attention paid non functional quality attributes flexibility security performance 
main emphasis behavioral refinement 
surprisingly refinement main issue architectural description languages adl see classification framework survey adls 
adls favor bottom composition sense components treated black box building blocks 
sadl rapide noticeable exceptions 
sadl supports method stepwise refinement architecture lower level architecture 
refinement pattern applied refinement step maps architectural style dataflow pipes filters implicit invocation architecture architectural style refined architecture 
refinement patterns defined proved correct independent particular architecture 
sadl mappings global nature approach handle local global refinements guided fs graph 
rapide concurrent event simulation language defining simulating behavior architectures 
underlying semantical model rapide partially ordered event sets posets 
refined architecture related mapping concrete events events 
mappings provide means comparative simulations architectures different abstraction levels check refined architecture conformance architecture 
interesting explore idea approach ucms imply ordering events 
subject currently focus attention 
idea pre post stubs derived composition filters programming language sina 
composition filter model consists input output filters surround object affect messages sent received object 
composition filters seen objects role proxies perform additional pre post processing 
concluding remarks discussed approach top composition software architectures 
centered feature solution fs graph requirements linked design solutions alternatives 
design solutions expressed ucm provides intuitive way showing things globally 
ucm prerequisite approach 
idea supporting multiple variability points plug ins combination fs graph modeling techniques uml text specification language 
fs graph serves purposes 
firstly contains knowledge solving problems particular domain 
viewed graph guide iterative quality driven process software architecture generation 
iterative process abstraction level successively lowered refinements 
secondly fs graph system wide adaptations 
ensures consistent system wide application refinements 
system wide refinements resemble aspect oriented programming albeit applied higher level abstraction 
currently fs graph codify architectural knowledge various real life architecture projects 
experiences indicate promising areas research version fs graph discussed contains product knowledge 
currently investigating incorporation process knowledge fs graph 
selected process nodes guide architect finding appropriate design solutions 
process steps encoded process nodes heuristics instance form production rules particular situation encountered select solution 
alternatively process nodes may alert designer certain design choices 
small process steps embedded larger process cycles defined quality driven iterative approach 
leads content driven refinement process 
relationships currently captured fs graph strong high flexibility required select observer pattern 
actual relationships requirements solution chunks weaker kind high flexibility required suggest apply observer pattern 
represent weaker links fs graph enriched additional kinds relationships turn require additional resolution mechanisms get quality requirements acceptable architectural solutions 
jan bosch 
design software architectures adopting evolving product line approach 
addison wesley 
buhr 
case maps architecture entities complex systems 
ieee transactions software engineering december 
buhr 
case maps object oriented systems 
prentice hall upper saddle river new jersey 
hans de bruin hans van vliet 
scenario generation evaluation software architectures 
jan bosch editor proceedings third symposium generative component software engineering erfurt germany volume lecture notes computer science lncs pages berlin germany september 
springer verlag 
francis souza alan cameron wills 
objects components frameworks uml catalysis approach 
object technology series 
addison wesley reading massachusetts 
gregor kiczales john lamping mendhekar chris maeda cristina lopes jean marc loingtier john irwin 
aspect oriented programming 
matsuoka editors proceedings th european conference object oriented programming ecoop finland volume lecture notes computer science lncs pages berlin germany june 
springer verlag 
klein kazman bass carriere barbacci lipson 
attribute architectural styles 
editor software architecture pages 
kluwer academic publishers 
axel van lamsweerde 
requirements engineering year research perspective 
conference proceedings icse pages limerick ireland 
acm 
lin liu eric yu 
requirements architectural design goals scenarios 
icse workshop software requirements architectures straw pages toronto ontario canada 
acm 
david james vera 
event architectural description language 
ieee transactions software engineering september 
medvidovic richard taylor 
classification comparison framework software architecture description languages 
ieee transactions software engineering january 
mark qian 
correct architecture refinement 
ieee transactions software engineering april 
john mylopoulos lawrence chung stephen liao wang eric yu 
exploring alternatives requirements analysis 
ieee software january 
project 
www cs utwente nl sina 
brief case maps ucm visual notation humans understand behavior system high level abstraction 
scenario approach showing cause effects traveling paths system 
ucms clearly defined semantics strong point show things globally 
basic ucm notation simple 
consists basic elements responsibilities paths components 
simple ucm basic elements shown 
path executed result receipt external stimulus 
imagine execution pointer placed start position 
pointer moved path entering leaving components touching responsibility points 
responsibility point represents place state system affected 
effect touching responsibility point defined concept state part ucm 
typically effects described natural language 
position reached pointer removed diagram 
ucm concurrency neutral ucm prescribe number threads associated path 
token said transfer control data pointer leaves component re enters 
thing guaranteed causal ordering executing responsibility points path 
necessarily temporal ordering execution responsibility point may overlap execution subsequent responsibility points 
start path components pointer ucm basic elements 
realistic example shown depicting distributed client server system 
client communicates server network fail occasionally proxy server included provide transparent access real server 
proxy server modeled stub implementations transparent proxy server passes requests replies server unaltered denying possibility network failures proxy server timeout facility failures detected 
notation supposed self explanatory 
client proxy server network server transparent proxy server proxy server stub null watchdog proxy server join continuing path timeout path waiting place timeout fork entering path clearing path distributed client server ucm 
notation fork continuing paths failure point possible failure 
