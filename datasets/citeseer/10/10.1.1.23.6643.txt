survivable storage systems gregory ganger pradeep khosla mehmet michael garth goodson vijay craig soules john strunk jay wylie carnegie mellon university survivable storage systems maintain data access face malicious accidental problems storage servers interconnection networks client systems user accounts 
component types grouped classes server side problems client side problems 
pasis architecture addresses server side problems including connections servers encoding data threshold schemes distributing trust sets storage servers 
self securing storage addresses client user account problems transparently auditing accesses versioning data storage server 
pasis clients threshold schemes protect compromised servers self securing servers full access auditing protect data compromised clients 
techniques provide truly survivable storage systems 

society increasingly relies digitally stored accessed information supporting availability persistence integrity confidentiality information crucial 
need storage systems users critical information ensuring persists continuously accessible destroyed kept confidential 
continuing shift pervasive computing expert users administrators information storage infrastructures 
survivable storage system provides guarantees time despite failures malicious compromises storage nodes client systems user accounts 
current storage system architectures fall far short ideal 
exploring potential trade offs complementary approaches creating storage systems survive problems components surviving storage node problems storage system survive failures compromises storage nodes data sets nodes chosen encoding replication schemes 
schemes proposed employed years little understanding exists large trade space comprise 
selection parameterization data distribution scheme profound impact storage system availability security performance 
focus developing solid understanding tradeoffs developing automated approaches configuring reconfiguring systems 
investigate tradeoffs inherent survivable storage context pasis system 
pasis storage system encodes information threshold schemes distribute trust storage nodes system 
surviving malicious user activities presence detected way differentiate successful intruders legitimate users 
approach surviving malicious user activities consider requests suspect 
address need propose self securing storage storage nodes internally version data audit requests guaranteed amount time week month 
device maintained history information prevents intruders destroying tampering stored information 
provides information diagnosis recovery intrusions 
explore feasibility design space self securing storage prototype self securing nfs server 
describes progress halves building survivable storage systems 
section describes pasis uses threshold schemes client systems survive storage server network problems 
section describes self securing storage uses server side resources protect stored data compromised client systems 

pasis isbn ieee survivable systems operate fundamental design thesis individual service node user fully trusted having compromised entities viewed common case exception 
survivable storage systems replicate distribute data nodes persistence sets nodes individual nodes 
individual storage nodes able expose information compromising single storage node attacker bypass policies 
achieve survivability storage systems decentralized spread information independent storage nodes 
prior cluster storage systems berkeley xfs cmu nasd compaq petal mit bfs provides insight efficiently decentralize storage services providing single unified view applications 
key open issue information spread nodes 
availability confidentiality information primary goals storage systems 
systems enhance availability providing full replication systems employ erasure resilient correction codes space 
client side encryption protect information confidentiality storage nodes compromised 
threshold schemes known information dispersal algorithms offer alternative provides information confidentiality availability single flexible mechanism 
schemes encode replicate divide information multiple pieces shares stored different storage nodes 
system reconstruct original information shares available 
section presents overview general threshold schemes build survivable storage system 
pasis architecture characteristics trade offs available explained 
details pasis system 

general threshold schemes pasis uses general threshold schemes encode data stored 
specifically general threshold scheme breaks data shares shares reconstruct original data fewer shares reveal absolutely information original data 
encryption difficult ascertain original data change value information available theft informationtheoretic sense 
different parameter selections expose large space encoding mechanisms storage 
example specific threshold scheme way replication 
threshold scheme 
isbn ieee replica reveals information encoded data 
single replica required reconstruct original data replicas select attempting reconstruct original data 
table lists specific examples general threshold schemes 
table 
specific threshold schemes parameters description replication decimation striping splitting xoring information dispersal secret sharing ramp scheme threshold schemes implemented different manners 
blakley secret sharing scheme works space 
secrets data points space shares multidimensional planes 
fewer shares represent multidimensional plane contains secret 
points field considered part plane information revealed 
shares single point intersection secret determined 
illustrates blakley secret sharing scheme 
shamir secret sharing scheme developed time blakley interpolating coefficients polynomial evaluating polynomial certain points 

blakley secret sharing scheme original data implementations secret sharing random numbers provide guarantee collecting fewer shares reveals information original data 
rabin information dispersal algorithm threshold scheme random numbers 
parameter indicates number random numbers required encoding random numbers required encode secret threshold scheme 
ramp schemes implement full range general threshold schemes 
ramp schemes operate schemes shares information dispersal schemes shares 
threshold schemes cryptographic techniques guarantee confidentiality information techniques combined 
example short secret sharing encrypts original information random key stores encryption key secret sharing stores encrypted information information dispersal 
short secret sharing offers different set trade offs confidentiality storage requirements general threshold schemes 
confidentiality data stored short secret sharing hinges difficulty analyzing information gained collecting shares information gained pertains encrypted data 
extension threshold schemes cheater detection 
threshold scheme provides cheater detection shares constructed fashion client reconstructing original information object tell high probability shares modified 
technique allows strong guarantees 
cheater detection implemented cryptographic techniques adding digests data encoding shares data encoded 

pasis architecture pasis architecture shown combines decentralized storage systems data redundancy encoding dynamic self maintenance achieve survivable information storage 
pasis system uses threshold schemes spread information decentralized collection storage nodes 
client side agents communicate collection storage nodes read write information hiding decentralization client system 
client system apps pasis agent storage storage node isbn ieee network storage storage node client system apps pasis agent storage storage node 
pasis architecture current prior efforts employ pasis architecture achieve survivability 
example intermemory project eternity service proposal decentralization threshold schemes long term availability integrity archived digital information 
vault delta projects online read write information storage 
delta additionally addresses information confidentiality system services authentication 
projects advanced understanding technologies roles survivable storage systems systems achieved widespread 

pasis system components operation pasis system includes clients servers 
servers storage nodes provide persistent storage shares clients provide aspects pasis functionality 
specifically pasis client agents communicate collections pasis servers collect necessary shares combine threshold schemes 
approach helps system scale simplifies decentralized trust model 
fact system configurations employ pasis servers ignorant decentralization threshold schemes example simplest demonstration pasis client uses shared folders microsoft network neighborhood storage nodes 
advanced storage servers clearly possible 
presents design pasis client agent 
pasis client agent automated tradeoff management applications threshold encode decode multi server communication 
storage nodes 
pasis client agent distributed storage system pasis requires mechanism translates object names example file names storage locations 
directory service maps names information objects stored pasis system names shares comprise information object 
share name parts name storage node share located local name share storage node 
pasis file system embed information needed translation directory entries 
example pasis implementation nfs network file system functions way 
threshold scheme breaks information shares shares reconstruct information fewer shares reveal information 
service read request pasis client looks directory service names shares comprise object 
sends read requests storage nodes 
collects responses 
receives fewer responses client retries failed requests 
alternatively client send read requests previously unselected storage nodes 
step continues client collected distinct shares 
performs appropriate decode computations received shares reconstruct original information 
performing write pasis slightly different performing read 
write process complete isbn ieee whichever greater storage nodes stored shares 
write ensure fewer shares overwritten preclude reading shares updated 
maintain full availability shares updated 
addition consider clients writing object concurrently 
pasis storage nodes independent components distributed system assumptions order storage nodes see writes 
storage nodes shares shares similar problem arises client accidentally maliciously updates subset shares 
approach handling concurrency problems assumes higher level system addresses 
domains approach feasible 
example information belonging single user distributed applications manage concurrency storage system guarantee correctness concurrent writes 
general purpose pasis system provide mechanism guarantees atomicity operations 
mechanism atomic group multicast guarantees correct group members process messages correct members order 
atomic group multicast technology developed secure distributed systems rampart bfs 
unfortunately atomic group multicast expensive large faulty environments group members exchange rounds messages reach agreement 
technologies believed enhance storage system survivability focused efforts designing survivable systems performance manageability par simpler conventional approaches 
systems exist survivable information systems widely adopted 

pasis architecture characteristics pasis architecture provide better confidentiality availability durability integrity information conventional replication cost performance 
compare pasis architecture conventional information storage system consider pasis installation storage nodes uses threshold scheme uniformly distributes shares storage nodes 
conventional installation hand organizes servers server groups storing percent information primary server backup replica servers 
summary comparison pasis system conventional system table 
table 
summary security comparison characteristic confidentiality pasis primary backup percentage information percent revealed storage node compromised percentage information revealed storage nodes compromised availability probability system serve read request node fails probability durability number nodes destroyed erase piece information percentage information erased occurs integrity nodes compromised falsely serve read request nodes compromised modify stored information authorization percent percent server group percent percent nodes primary server greater nm primary server required storage blowup secret sharing nx nx information dispersal nx nx latency reading small objects significantly higher latency pasis reading large objects similar latencies confidentiality determines system ability ensure authorized clients access stored information 
breach conventional system confidentiality intruder needs compromise single storage node replica desired object 
pasis system intruder compromise storage nodes breach confidentiality 
availability describes system ability serve specific request 
comparison purposes assume storage node fails independently probability 
assumption pasis system orders magnitude higher availability conventional system 
isbn ieee durability system ability recover information storage nodes destroyed 
conventional system intruder destroy storage nodes entire server group maliciously erase information 
pasis system intruder destroy storage nodes erase information 
integrity system ability ensure correctly serves requests 
maliciously affect read request pasis system intruder compromise storage nodes serving read request assuming scheme place 
conventional system intruder compromising primary server cause return arbitrary values read requests 
required storage extra storage space system needs single copy baseline 
pasis system storage required depends threshold scheme 
example secret sharing requires storage replication information dispersal requires storage replication 
latency delay system experiences serves request 
conventional system client processes read write request exchanging messages single server 
pasis system messages exchanged multiple storage nodes significantly impact performance 
threshold schemes require servers provide dispersed object bytes 
large objects network client bandwidth limitations potentially hide overhead contacting servers 

pasis architecture performance trade offs threshold schemes increase information storage system confidentiality availability integrity 
schemes trade offs information confidentiality information availability storage requirements increases information availability increases probable shares available storage required information increases shares stored confidentiality decreases shares steal 
increases storage required information decreases share size proportional availability shares required reconstruct original object 
increases share contains information may increase number shares captured intruder reconstruct useful portion original object 
increases information system confidentiality increases storage space required dispersed information increases 
flexibility selecting appropriate threshold scheme environment trivial 
clients trade offs terms interact storage nodes hold shares 
shares required reconstruct object client request shares 
client send read requests storage nodes 
client reduces risk data storage node unavailable slow 

automatic trade selection pasis architecture effective possible full flexibility threshold schemes available clients 
believe option requires automated selection appropriate threshold schemes object basis 
selection combine object characteristics observations current system environment 
example pasis client short secret sharing store object larger particular size conventional secret sharing store smaller objects 
size determines threshold scheme function object type current system performance 
example object marked archival availability integrity important storage characteristics extra large read write objects increased write overhead large values desirable 
archival object marked public web page client ignore confidentiality guarantees selecting threshold scheme 
system performance observations dynamically improve request performance 
example clients request shares storage nodes responded quickly requests 
storage nodes help clients decisions providing load information asking look long response times expected 
mentioned earlier clients requesting improve performance 
example ad hoc network poor message delivery guarantees pasis client notice request loss rate increase number shares requested read 
hand busy environment excess load storage nodes inherent requesting reduce performance 

pasis summary pasis architecture combines proven technologies threshold schemes decentralized storage construct storage systems availability confidentiality integrity policies survive component failures malicious attacks 
main challenges deploying systems relate engineering 
specifically need implementation techniques help systems achieve performance manageability competitive today non survivable storage systems 
continuing research addresses requirement aggressively exploiting flexibility offered general threshold schemes pasis architecture 

self securing storage isbn ieee secure storage servers great difficulty coping undesirable requests legitimate user accounts 
requests originate malicious users rogue programs run unsuspecting users mail viruses intruders exploiting compromised user accounts 
unfortunately way storage system distinguish intruder real user system treat identically 
intruder read write real user access 
particular modify delete accessible data 
intrusion detected terminated system administrators face difficult tasks determining damage caused intrusion restoring system safe state 
damage includes compromised secrets creation back doors trojan horses tainting stored data 
detecting difficult crafty intruders understand audit logs manipulate file modification times disrupt automated tamper detection systems 
system restoration involves identifying clean backup created prior intrusion system restoring information backup 
restoration difficult diagnosis difficult user convenience important issue 
addition restoration requires significant amount time reduces availability original system frequently causes loss data created safe backup intrusion 
self securing storage offers partial solution problems preventing intruders tampering permanently deleting stored data 
intruders take identity real users host os resource controlled client system vulnerable including raw storage 
acting slaves client oses self securing storage nodes view users questionable entities 
self contained self controlled devices internally version data audit requests guaranteed amount time week month providing system administrators time detect intrusions 
intrusions detected window version audit information available analysis recovery 
critical difference self securing storage user controlled versioning elephant cedar vms client side intruders longer bypass versioning software compromising complex oses poorly protected user accounts 
intruders compromise storage nodes defeat thresholding mechanisms described previous section 
section describes problems client side intrusion diagnosis recovery self securing storage addresses design challenges feasibility 
details prototype implementation performance evaluation related 

intrusion diagnosis recovery gaining access system intruder avenues 
intruders attempt destroy evidence presence erasing modifying system log files 
intruders install back doors system allowing gain access 
may install software read modify sensitive files system platform launching additional attacks 
depending skill intruders hide presence detection latency intrusion discovered automated intrusion detection system ids suspicious user administrator 
time intruders continue malicious activities users continue system legitimate changes intruders 
intrusion detected discontinued system administrator left difficult tasks diagnosis recovery 
diagnosis challenging intruders usually compromise administrator account operating systems giving full control resources 
particular gives ability manipulate stored system disks including audit logs file modification times tamper detection utilities 
recovery difficult diagnosis difficult user convenience important issue 
section discusses intrusion diagnosis isbn ieee recovery greater detail section describes self securing storage addresses 

diagnosis 
intrusion diagnosis consists phases detecting intrusion discovering weaknesses exploited prevention determining intruder 
difficult intruder free storage os 
ability protect storage compromised operating systems intrusion detection may limited alert users system administrators noticing odd behavior 
examining system logs common approach intrusion detection intruders manipulate log files approach useful 
intrusion detection systems look changes important system files 
systems vulnerable intruders change ids thinks safe copy 
determining intruder compromised system impossible conventional systems system logs 
addition exploit tools utilities compromising computer systems may stored target machine multistage intrusions usually deleted 
common solutions try catch intruder act hope forgot delete exploit tools 
step diagnosing intrusion discover accessed modified intruder 
difficult file access modification times changed system log files 
addition checksum databases limited effective static files 

recovery 
usually possible diagnose intruder activities full system recovery generally requires compromised machine wiped clean scratch 
prior erasing entire state system users may insist data modified intrusion saved 
effort went creating changes motivation keep data 
unfortunately size complexity data grows likelihood tampering go unnoticed increases 
foolproof assessment modified data difficult overlooked tampering may hide tainted information back door inserted intruder 
restoring os applications system administrator identify backup prior intrusion backup may usable 
restoring data pre intrusion backup legitimately modified data restored system users may resume system 
process takes considerable amount time time users denied service 

self securing storage design self securing storage ensures information survival auditing accesses establishing security perimeter storage device 
conventional storage devices slaves host operating systems relying protect users data 
self securing storage device operates independent entity tasked responsibility storing data protecting 
shift storage security functionality storage device firmware allows data audit information presence file server client system intrusions 
oses systems compromised intruder able issue commands directly self securing storage device new security perimeter remains intact 
security perimeter storage device ensures data survival keeping previous versions data 
history pool old data versions combined audit log accesses diagnose recover intrusions 
section discusses benefits self securing storage core design issues arise realizing type device 

enabling intrusion survival 
storage assists intrusion recovery allowing administrator view audit information quickly restore modified deleted files 
audit version information helps diagnose intrusions detect propagation maliciously modified data 
self securing storage simplifies detection intrusion versioned system logs altered 
addition modified system executables easily noticed 
storage conventional tamper detection systems obsolete 
administrator complete picture system state intrusion discovery considerably easier establish method gain entry 
instance system logs normally examining versioned copies logs administrator see messages generated intrusion removed 
addition exploit tools temporarily stored system recovered 
previous versions system files intrusion quickly easily restored resurrecting history pool 
prevents need complete re installation operating system rely having backup date checksums tamper detection system files 
restoration critical data incrementally recovered history pool 
additionally utilizing storage device audit log possible assess data directly affected intruder 
data protection self securing storage provides allows easy detection modifications selective recovery tampered files prevention data loss due backups speedy recovery data need loaded line archive 
application client os system calls file system rpc device driver isbn ieee application storage requests new security perimeter self securing storage 
new security perimeter 
storage node executes distinct software distinct hardware compromising client operating system circumvent new security perimeter 
note new perimeter complements replaces existing operating system firewall perimeters 

device security perimeter 
device security model ability keep old versions just user convenience 
security perimeter consists self contained software exports simple storage interface outside world verifies command integrity processing 
contrast file servers client machines run multitude services susceptible attack 
self securing storage device single function device task making secure easier compromising firmware analogous breaking ide scsi disk 
illustrates new security perimeter 
actual protocol communicate storage device affect data integrity new security perimeter provides 
choice protocol affect usefulness audit log terms actions record correctness 
instance nfs protocol provides authentication integrity guarantees audit log may able accurately link request originating client 
principles self securing storage apply equally enhanced disk drives network attached storage servers file servers 
network attached storage devices opposed devices attached directly single host system new security perimeter useful device verify access coming valid user valid client 
verification allows device enforce access control decisions partially track propagation tainted data 
clients users authenticated accesses tracked single client machine device audit log yield scope direct damage intrusion machine user account 
time detection window file file file current versions history pool expired versions 
file versions self securing storage node 
current versions shown top 
history pool consists space holding retained historical versions 
detection window shown time dashed lines represents guaranteed window time full history changes available administrator 
point versions may expired removed history pool 

history pool management 
illustrates device versioning done new security perimeter 
old versions objects kept device comprise history pool 
time object modified deleted version existed just prior modification part history pool 
eventually old version age space reclaimed 
clients trusted demarcate versions consisting multiple modifications separate isbn ieee version kept modification 
contrast versioning file systems generally create new versions file closed 
self securing storage device guarantees lower bound amount time deprecated object remains history pool reclaimed 
window time old version object completely restored requesting drive copy forward old version making new version 
guaranteed window time object restored called detection window 
determining size window administrator examine tradeoff detection latency provided large window extra disk space consumed proportionally larger history pool 
capacity disk drives growing remarkable rate finite poses problems providing reasonable detection window exceptionally busy systems 
dealing malicious users attempt fill history pool 
note space exhaustion attacks unique self securing storage 
device managed versioning conventional user quotas ineffective limiting 
busy system amount data written providing reasonable detection window difficult 
fortunately analysis section suggests multi week detection windows provided environments reasonable cost 
aggressive compression differencing old versions significantly extend detection window 
deliberate attempts overflow history pool prevented simply increasing space available 
denial service attacks perfect solution 
flawed approaches addressing type abuse 
device reclaim space held oldest objects history pool full 
unfortunately allow intruder destroy information causing previous instances reclaimed overflowing history pool 
second flawed approach versioning objects history pool fills allow recovery old data system administrators longer able diagnose actions intruder differentiate subsequent legitimate changes 
third flawed approach drive deny action require additional versions history pool fills result denial service users legitimate 
hybrid approach problem try prevent history pool filled detecting probable abuses throttling source machine accesses 
allows human intervention system forced choose poor alternatives 
selectively increasing latency decreasing bandwidth allows behaved users continue system attack 
experience show works practice 
history pool intrusion diagnosis recovery just recovering accidental destruction data difficult construct safe algorithm save space history pool pruning versions detection window 
algorithm selectively removes versions potential abused intruder cover tracks successfully destroy modify information break 

history pool access control 
history pool contains wealth information system activity 
accessing history pool sensitive operation allows deleted overwritten objects 
standard problem posed versioning file systems exacerbated inability electively delete versions 
basic approaches taken access control history pool 
allow single administrative entity power view restore items history pool 
useful situations old data considered highly sensitive 
having single key accessing historical data decreases likelihood intruder gaining access 
improves security prevents users able recover mistakes consuming administrator time restore users files 
second approach allow users recover old objects addition administrator 
provides convenience user able recover deleted data easily allows intruder obtains valid credentials user recover user old file versions 
compromise allow users selectively decision 
choice user delete object version versions visibility administrator permanent deletion data method aging unsafe 
choice allows users enjoy benefits versioning presentations source code preventing access visible versions embarrassing images mail drafts 

administrative access 
method secure administrative access needed necessary isbn ieee dangerous commands self securing storage device support 
commands include setting guaranteed detection window erasing parts history pool accessing data users marked unrecoverable administrative access securely granted number ways including physical access flipping switch device cryptographic keys 
administrative access necessary users attempting recover files accidents 
users accesses history pool handled form protection normal accesses 
acceptable user activity actions permitted ordinary users audited repaired 

version administration tools 
storage devices store versions raw data users administrators need assistance parsing history pool 
tools traversing history assist bridging gap standard file interfaces raw versions stored device 
aware versioning system formats data objects utilities interfaces similar elephant time enhanced versions standard utilities ls cp 
accomplished extending read interfaces device include optional time parameter 
parameter specified drive returns data version object valid requested time 
addition providing simple view data objects isolation intrusion diagnosis tools utilize audit log provide estimate damage 
instance possible see files directories client modified period time compromised 
estimates propagation data written compromised clients possible imperfect 
example diagnosis tools may able establish link objects fact read just written 
link source file corresponding object file useful user determines source file tampered situation object file restored removed 
exploration tools important area 

feasibility self securing storage basic feasibility concerns storage concept performance capacity 
address constructed prototype nfs server 
experiments prototype show security data survivability benefits self securing storage realized reasonable performance 
specifically performance comparable freebsd nfs microbenchmarks application benchmarks 
detailed analysis shows fundamental costs associated self securing storage degrade performance relative similar systems provide data protection guarantees 
evaluate capacity requirements self securing storage workload studies examined 
shows results approximations worst case write behavior 
satyanarayanan afs trace study reports approximately mb day write traffic file server 
afs study conducted servers consisting cells distributed wide area containing total gb data 
study just modern gb disk yield days history data 
writes consume gb day server seen vogels windows nt file usage study days worth history data provided 
nt study consisted machines split personal shared administrative domains running workloads scientific processing development administrative tasks 
report write data rate mb day 
case days data kept 
environment consisted single file system holding gb data dozen researchers development 
nt afs base differencing compression time days 
projected detection window environments 
chart shows expected detection window days provided utilizing gb data versioning 
conservative history pool consume gb disk total capacity 
base line number represents projected number days worth history information maintained gb space 
gray regions show projected increase cross version differencing provide 
black regions show increase expected compression addition differencing 
done evaluating efficiency differencing compression 
briefly explore potential benefits self securing storage code base retrieved cvs repository single point day week 
compiling code differencing differencing compression applied tree direct neighbor time 
applying differencing space efficiency increased 
applying compression added additional total space efficiency 
results line previous 
applying estimates workloads indicates gb history pool provide detection window days 

self securing storage summary self securing storage nodes ensure data audit log survival presence successful client side intrusions user client impersonation compromised client operating systems 
experiments prototype show self securing storage nodes achieve performance comparable existing storage servers 
addition analysis workload studies suggest complete version histories kept weeks state art disk drives 
focus developing diagnosis recovery tools utilize extensive information provided self securing storage 

isbn ieee partially funded darpa ato assured survivable information systems oasis program air force contract number afrl national science foundation cmu data storage systems center 
members companies parallel data consortium including emc hp hitachi ibm intel lsi logic lucent mti network appliance novell quantum seagate sun veritas com interest insights support 
ibm supporting research efforts 
craig soules supported usenix fellowship 
anderson eternity service proceedings publishing house prague 
anderson serverless network file systems acm transactions computer systems february pp 

blakley safeguarding cryptographic keys proceedings national computer conference american federation information processing societies pp 

burns differential compression generalized solution binary files masters thesis university california santa cruz december 
burrows wheeler block sorting lossless compression algorithm digital equipment systems research center palo alto ca may 
burrows lampson mann line data compression log structured file system architectural support programming languages operating systems october 
castro liskov practical byzantine fault tolerance operating systems review acm press new york pp 

de santis multiple ramp schemes ieee transactions information theory july pp 

denning intrusion detection model ieee transactions software engineering february pp 

fabre intrusion tolerance distributed computing systems ieee symposium security privacy pp 

gibson nagle ii lanza zelenka nasd scalable storage systems usenix monterey ca june 
goldberg yianilos prototype implementation archival intermemory proceedings ieee adl april pp 

reimplementing cedar file system logging group commit acm symposium operating system principles november 
iyengar cahn garay jutla design implementation secure distributed data repository proceedings th ifip international information security conference sec september 
kim spafford design implementation tripwire file system integrity checker conference computer communications security november pp 

krawczyk secret sharing short advances cryptology crypto 
th annual international cryptology conference proceedings pp 

lee thekkath petal distributed virtual disks proceedings acm asplos october pp 

macdonald file system support delta compression department electrical engineering computer science university california berkeley 
isbn ieee macdonald hilfinger costello wang anderson improving performance log structured file systems adaptive methods acm symposium operating systems principles 
vms file system internals digital press 
rabin efficient dispersal information security load balancing fault tolerance journal association computing machinery pp 

reiter secure agreement protocols reliable atomic group multicast rampart proceedings nd acm conference computer communication security november pp 

feeley hutchinson elephant file system forgets hot topics operating systems ieee cs 
feeley hutchinson veitch deciding forget elephant file system acm symposium operating system principles 
shamir share secret communications acm pp 

strunk goodson soules ganger design implementation self securing storage device symposium operating systems design implementation october pp 

satyanarayanan empirical study wide area distributed file system acm transactions computer systems may pp 

tompa woll share secret cheaters journal cryptology pp 

vogels file system usage windows nt acm symposium operating system principles 
jay wylie michael john strunk gregory ganger han pradeep khosla survivable information storage systems ieee computer august 
