critical path analysis tcp transactions paul barford mark crovella improving performance data transfers internet web transfers requires detailed understanding delays introduced 
unfortunately complexity data transfers great identifying precise causes delays dicult 
describe method pinpointing delays introduced applications critical path analysis 
constructing pro ling critical path possible determine fraction total transfer latency due packet propagation network variation queuing routers route uctuation packet losses delays server client 
implemented technique tool called automates critical path analysis web transactions 
show analysis method robust analyze traces taken di erent tcp implementations linux freebsd 
demonstrate utility approach results critical path analysis set web transactions taken days variety server network conditions 
results show critical path analysis shed considerable light causes delays web transfers expose subtleties behavior entire endto system 
response time principal concerns users internet 
root causes delays internet applications hard pin 
relatively simple settings retrieval single static web page complexities great allow room inconclusive nger pointing delays arise 
network providers servers time server managers network 
considerable ort gone improving performance servers networks 
research server design led advances including highly scalable hardware con gurations highly optimized server implementations 
focus network led improvements protocols version computer science department boston university street boston ma 
email barford crovella cs bu edu supported part nsf ccr xerox foundation 

date research aimed improving internet application performance focused server network isolation 
improvements valuable enhancements require detailed understanding interaction networks systems 
focus methods aid pinpointing sources delays internet applications allowing conclusive accurate assignment delays network server 
furthermore methods aimed studying network server complete system 
focus particular web transactions looking understand relative joint contribution servers networks transfer latency 
general approach study transactions method critical path analysis 
critical path analysis natural tool understanding distributed applications identi es precise set activities determine application performance 
central observation critical path analysis applied distributed systems component activities distributed application responsible response time activities may occur parallel executions overlap result ect response time 
words reducing execution time activities critical path certainly reduce response time necessarily true activities critical path 
indicates dominant protocol world wide web today 
apply critical path analysis transactions tcp reno speci ed rfc transport service 
show critical path analysis tcp reno describe resulting critical path determine fractions response time due server delays client delays network delays including packet loss delay propagation delay delay due network variations queuing routers route uctuations 
analysis appealing property improvements delays identify surely improved response time 
suggests looking fraction response time assigned category provide guide part system pro improved 
despite implementation speci tcp reno methods discussed easily extended encompass packet loss recovery mechanisms versions tcp new reno sack 
strengths approach inherent limitations described section 
properly constructing critical path depends details tcp implementation 
able develop method believe applies tcp reno implementation compliant rfc slow start congestion avoidance fast retransmit fast recovery 
approach require instrumentation systems require passively collected network trac traces taken points transaction 
describe method detail show implementation tool called 
takes input endpoint traces tcpdump implementation speci constants tracking evolution tcp state controls packet ow determines critical path tcp ow 
pro le critical path assigning delays various categories 
pilot study demonstrate utility 
show results critical path analysis web transfers linux freebsd tcp implementations wide area internet 
results show critical path analysis give considerable insight root causes delays web transfers 
particular nd systems measured server load major determiner transfer time small les network load major determiner large les able characterize points transaction server delays introduced 
show critical path analysis pinpoint sources variability web transfers packet losses primary contributor variability transfer time nd number packets critical path show high variability 
remainder organized follows section discusses related section describes process constructing critical path tcp transactions detail section describes results applying critical path analysis data taken linux freebsd 
section summarizes concludes 
related previous performance analysis improvement web transactions falls categories servers networks protocols 
servers emphasized techniques improving performance example 
studies show web servers behave range loads including overload conditions suggested enhancements application implementations operating systems servers run 
studies date considered interactions networks clients wide area ects performance 
networking side considerable previous focused improving performance network infrastructure internet applications 
studies network dynamics improvements transport layer focused application independent issues 
studying tcp behavior context web transactions studies resulted variety enhancements including data compression persistent connections pipelining part speci cation :10.1.1.117.8087
studies looks system behavior interacts network protocol performance 
analytic models steady state tcp throughput latency developed :10.1.1.143.9137
models assume delays introduced systems approach speci cally attempts assess ects delays response time 
depends packet trace analysis extends set tools available packet traces 
basic problem packet trace analysis traces usually large complex dicult identify key information trace 
simple analysis techniques graphical time line plots sequence plots enable understand data acknowledgment sequences transaction 
brakmo developed sophisticated graphical tool enables multiple details tcp transaction followed simultaneously 
paxson describes tool document wide variety unusual behaviors number di erent tcp implementations 
paxson signi cant study points pitfalls packet traces address development 
critical path analysis tcp paxson discusses notion cause ect issues tcp transactions idea underlies approach 
paxson diculty fully developing notion interested establishing relationship measuring single point path 
explicitly term critical path schroeder burrows essentially critical path analysis fire rpc mechanism 
authors de ne static set events fast path 
estimate measure performance event local area environment 
suggest series improvements fast path estimate speed rpc mechanism factor 
broadly provides signi cant insight question web transfer slow 
network server 
question heart number studies commercial products 
keynote system measures response time timing delay perspective client result hard time accurately di erentiating server network delays 
accurate approach net medic infers server delays packet level measurements 
huitema presents measurements di erentiate network server delay ing server delay time get receipt rst data packet 
results section support idea rst order approximation show cases small transfers majority server induced delay occurs precisely point transaction 
large transfers server heavy load show signi cant server delays long connection start 
points fact dns lookups signi cant cause delay mainly interested network server interaction consider sources delays 
mechanics critical path analysis section describe discover critical path tcp ows details algorithm critical path discovery employed setting pro le critical path accurately assess causes transfer delays 
describe tool performs analyses 
discovering critical path unidirectional tcp flow start restricting attention heart approach analysis data transfer portion unidirectional tcp ow section discuss bidirectional ows application level protocols 
critical path analysis unidirectional ows examination packet dependence graph pdg particular tcp ow 
de ne packet dependence graph weighted directed graph fact tree node represents arrival departure single packet endpoint 
packet dropped en route corresponds nodes pdg 
illustration tree structure pdg shown 
gure shows idealization slow start portion tcp 
left traditional time line diagram dependencies data ack packets explicit 
right draw pdg dependencies explicit 
arcs pdg represent dependence relation corresponding lamport happened relation arc weighted elapsed time events form start points 
case dependence relation de ned semantics reliable data transport tcp reno 
kinds arcs graph rst distinct packet dropped construct arc departure endpoint arrival endpoint 
second acknowledgment packet ack nd data packet containing byte acknowledged ack 
construct arc arrival data packet departure ack packet re ecting client server time line diagram packet dependence graph time line diagram tcp ow re ection packet dependence graph pdg 
pdg shows data packets liberated individual acks 
fact ack emitted corresponding data packet received 
third type arc ack packets data packets 
ack packet determine data packets liberated construct arc arrival ack departure liberated data packet 
data packet mean arrival ack caused tcp open congestion window suciently allow transmission data packet 
tracking liberation data packets central approach done carefully discuss detail section 
cases packet loss occurs arc types sucient 
packet lost eventually packet retransmitted dependence relation events 
case construct arc departure dropped packet departure earliest subsequent retransmission 
having constructed weighted tree described process de ne critical path usual way longest path tree starting root 
considering unidirectional ow root rst data packet sent 
result weighted chain dependence relations running connection rst data packet data packet sent 
discovering critical path transaction discussion far assumed application level dependencies events 
case general example may departure data packets sent direction may depend arrival data packets traveling direction due application level semantics 
study focus syn syn ack ack client server get fin ack fin ack connection establishment application protocol bulk transfer connection tear network delay network delay network delay network delay network delay network delay server delay client delay client delay server delay critical path profile critical path analysis tcp connection setup get tcp connection tear 
retrievals static les persistent connections dependence exists packet comprising get rst data packet sent response 
properly construct critical path dependence taken account 
methods precludes analysis implementation speci 
want restrict applicability methods particular application attempt explicitly incorporate application level dependence pdg 
construct complete critical path breaking entire transaction parts connection establishment syn syn ack ack sequence packet sequence delivering get associated parameters returning bulk data transfer connection tear fin ack fin ack sequence 
breakdown shown details bulk transfer portion critical path discussed section 
advantage decomposition parts overlap dependence part clear parts depend size le easily analyzed special purpose code 
parts follows small set patterns patterns vary packets lost easily accounted 
discovering critical path transactions requires relatively straightforward analysis connection setup le request connection tear sequences combined unidirectional ow algorithm described previous section bulk data transfer 
implementing critical path discovery bulk data transport tcp reno critical path discovery algorithm tcp reno described section implemented stages forward pass packet trace backward pass critical path 
purpose forward pass construct round ack 
round consists ack data bytes liberated ack 
data bytes liberated speci ack determined state receive congestion windows server ack received 
identify data bytes liberated ack simulating receive congestion window states tcp reno slow start congestion avoidance fast retransmit fast recovery algorithms speci ed rfc described 
reason accounting ack may received server chance transmit packets permitted current window state safe assume data packet liberated arriving ack 
establishing bytes liberated ack determine data packet triggered ack comparing sequence numbers maintain pointer data packet round ack 
result tree rounds 
forward pass construction rounds critical path determined tracing back tree starting data packet fin sent containing fin 
round accumulate arcs critical path move parent round 
continues reaching rst round contain rst data packet 
example bulk transfer linux tcp stack shown 
key steps critical path analysis left capture packet traces analysis rounds construction critical path pro ling critical path 
gure rounds progressively consist data packets connection slow start 
ack round acknowledges packets transmitted round 
round responsible release data packets server perspective data packets ight current size congestion window illustrates need maintain correct receiver congestion window state properly construct dependence arcs 
maintaining proper receiver congestion window size simulation complicated packets dropped retransmissions signaled coarse grained time outs fast retransmits call di erent congestion window size adjustments 
fortunately distinguish drops recognized coarse grained time outs recognized fast retransmit mechanism follows retransmissions visible traces sender endpoint duplicate ack visible packet retransmitted know response coarse grained timeout response receipt duplicate acks 
note means necessary simulate tcp retransmission timer determine coarse grained timeouts occur dicult reconstruct fact introduce number tcp implementation dependent issues 
potential issue may rare instances coarse grained timeouts actual trigger retransmitted packet third duplicate ack received 
call instances hidden timeouts 
mechanism currently distinguish hidden timeouts 
occur tcp simulation larger congestion windows leading obviously incorrect client delays detected critical path analysis tool 
analysis sample data instances hidden timeouts 
strength critical path analytic tool evident gure 
consider data transfer shown 
packet fin released ack round critical path 
data triggered ack round released round critical path 
ack round triggered retransmitted packet originally liberated round 
shows packets round critical path considerable variations delivery times packets round ect eventual completion time transfer 
pro ling critical path critical path constructed identify sources delays data transfer 
assign natural category arc type critical path pro le total contribution category arc weights critical path 
map arcs categories follows arcs di erently typed nodes data ack ack data endpoint assigned endpoint server client arcs equivalently typed nodes data data ack ack opposite endpoints assigned network arcs data nodes endpoint assigned packet loss 
correspond intuitive sources delay case 
sample delay assignments seen far right side 
re ne classi cation somewhat 
possible distinguish packet losses recognized coarse grained timeouts signaled receipt duplicate acks receiver fast retransmits 
second network delay decomposed parts propagation delay network variation delay 
de ne propagation delay minimum observed delay direction experiments path change 
delay due network variation de ned server delay included call delay due packet loss coarse grained timeout receipt third duplicate ack heavily loaded server take time generate retransmitted packet 
di erence network delay propagation delay 
caused number things including queuing routers path route uctuation 
result part taxonomy delays transfers measured critical path server delays client delays propagation delays network variation delays losses recognized coarse grained timeouts losses signaled fast retransmit mechanism 
realization critical path analysis critical path construction method described sections general sense depends accurate tracking tcp receiver congestion window size method works implementation compliant rfc 
robustness evident section shows results di erent tcp implementations linux freebsd 
addition focus protocols evaluated accurate modeling application level packet dependences 
implemented entire critical path analysis process path construction pro ling tool consisting approximately lines code 
addition critical path analysis provides statistics higher level transaction study le packet transfer delay statistics produces time line sequence plots visual analysis 
principal inputs tcpdump traces taken client server 
addition packet traces inputs initial values congestion window cwnd slow start threshold ssthresh vary tcp implementations 
number implementation issues arise due tcpdump traces due need accurately measure way packet transit times 
discussed context automated packet trace analysis paxson 
speci cally problems occur packet lters linux packet filter lpf berkeley packet filter bpf tcpdump extract packet traces 
packets dropped lter 
sees ack response packet supposedly lost concludes dropped lter network 
second packets added trace lter 
address sees packet twice retransmit simply discards second copy packet 
third packet lter report packets di erent order occurred reality 
insures correct order sorting packets time stamp number places analysis 
packet lters incorrectly time stamp packets causes di erent type reordering packet trace 
account 
ect packets client server rounds critical path ack ack drop ack ack ack ack ack network delay network delay network delay network delay network delay network delay network delay network delay network delay network delay network delay server delay server delay server delay server delay client delay client delay client delay drop delay ack ack drop ack ack client server number bytes liberated original data flow ack ack profile time details critical path analysis bulk transfer portion unidirectional linux tcp ow 
appear sent congestion window agged error 
respect accurate measurements way delays carefully con gured ntp frequent hard resets multiple servers needed experimental setup obtain closest possible clock synchronization 
way experimental con gurations section resulting di erence time nodes order ms reported ntp 
nature approach demands highly synchronized clocks con gure systems gps synchronized clocks enabling synchronization order microseconds experiments 
limitations number limitations critical path analysis setting 
details web transactions take account 
obvious consider delay due domain name server dns resolution 
easily enhanced tracking dns packets 
consider client browser parse times experiments simply transfer les explained section 
aspects application cpa tcp transactions limit ability strengths cpa 
fundamental inability analysis establishing cpa tcp transaction 
explore ects changing delays drops particular critical path reality changing delays drop events change dependence structure entire transaction pdg 
example drop occurs changes congestion window size number packets liberated subsequent acks 
fact limits extent analysis simulating happen remainder transaction able know exactly happened 
critical path analysis applied transactions section apply critical path analysis measurements transactions taken internet 
experimental setup experiments distributed infrastructure consisting nodes boston university university denver harvard university 
boston university cluster consisting set pcs mbps switched ethernet connected internet mbps bridge 
pcs runs web server apache version running linux freebsd operating system performance monitoring software 
pcs generate local load surge web workload generator generates requests server follow empirically measured properties web workloads 
requests generated surge create background load server 
fourth pc collects tcp packet traces tcpdump fth active measurements network conditions route propagation delay loss measurements tests system manage tests 
site locations hold client systems generate monitored requests server 
client running linux located university denver hops server cluster boston university path site includes commercial backbone providers 
client running freebsd located harvard university hops server cluster boston university 
path harvard client travels vbns 
experiments explore variations network load conditions server load conditions le size network path length 
explore range di erent network conditions performed experiments busy daytime hours relatively busy hours 
study ects server load local load generators generate light heavy load server tests 
settings similar explored place servers light load surge user equivalents heavy load surge user equivalents 
shows user equivalents places systems near overload conditions 
local load generators requested les le set distinct le ranging size bytes mb 
main memory server large cache les le set initial request fetched disk subsequent requests le served main memory 
explore variations le size monitored transactions generated remote clients restricted les size kb kb kb 
choosing sizes guided empirical measurements 
kb le selected representative common transmissions small les single tcp packet 
kb le selected representative median sized le transferred web 
kb le selected representative large les common account majority bytes transferred web 
combinations network load light heavy server load light heavy downloaded le size result separate tests day 
test consisted downloading les size hour 
traces gathered weekdays client linux long path days client freebsd short path 
client route measurements taken direction minute intervals tests 
instance route change test observed 
pro led critical path transaction test type le size network load network path server load averaged resulting critical paths analysis 
results rst examine resulting critical path pro les transfers client 
results shown 
show small kb medium kb large kb le sizes respectively chart particular experiments denoted high low load network server 
number observations immediately evident gure 
highest level clear category important contributor transaction delay depends number factors including le size server load 
shows single aspect system generally blame long transfer times answer complicated 
addition gure shows propagation delay important contributor transaction delay large les le sizes server load low 
encouraging statement design system component data transport process hard avoid 
propagation delay dominates transfer time opening congestion window aggressively response time signi cantly reduced recognizing diculty doing contributing congestion 
note server load low delays client side server side roughly comparable 
client delays tend quite low remote site consists pc simply transferring single le consistent expectations 
addition data con rms retransmissions triggered time outs fast retransmit mechanism cases 
situation observed studies 
ect file size 
comparing critical path pro les le sizes observations 
small les dramatically ected load server 
server load low network delays network variation propagation dominate 
server load high server delays responsible response time 
small les common web suggests performance improvements quite noticeable users possible improving servers delivery small les 
medium sized les network delays dominate server load low server load high contribution delay network network variation propagation server comparable 
les component principally blame 
large les delays aggregate mean contributions transfer delay client small le medium le large le 
low network load low server load high network load high server load 
due network dominate transfer time regardless server load 
ect server load 
examining individual critical paths observe delays due server load spread uniformly transfer 
fact small medium les nearly server delay measured transactions occurs receipt get server generation rst data packet server 
plot typical critical paths small medium les comparing cases low high server load network load high 
diagram gure shows critical path transfer single le time progressing downward top lines representing dependence arcs pdg 
diagram client left sending rst packet syn server right 
gure shows server load high characteristic delay introduced moment get arrives server second packet client second handshake ack piggybacked rst data packet sent response 
note server start delay may speci apache architecture currently investigating case servers versions apache 
gures clearly show substantial server delay introduced connection start determine large les busy server introduces considerable delays transfer 
seen comparing total server induced delay twice large startup delay independent le size 
taken results le size server load indicate servers networks show startup costs transfers startup cost server load higher 
hand approaching steady state long transfers network introduces delays server 
ect network load 
propagation delay de ned proportional number round trips critical path 
small les packets critical path medium les typically packets critical path large les typically close packets critical path values absence losses 
way delay directions site client determined minimum ltering ms 
shows small medium sized les propagation delay independent network load server load agrees intuition 
large les propagation delays higher high network load 
rst glance assume dif aggregate mean contributions transfer delay client short path freebsd client long path linux medium sized le 
ference routes tests 
case 
detailed examination critical paths apparent round trips critical path average cases heavy network load 
tcp reduces congestion window dramatically coarse grained timeouts 
coarse grained timeout drops rare ect congestion window time grow large drops 
coarse grained timeouts frequent congestion window chance open fully round trips appear critical path 
contrast propagation delay delay due network variation generally increases network heavily loaded 
network variation delay important contributor transfer delay propagation delay network variation delay packet loss ects congestion generally signi cant 
ect path length 
study ect path length critical path pro le ran experiments client 
results medium sized les shown left show results client right repeat results client comparison purposes 
gure shows le transfers occurred order magnitude faster shorter path client 
general increases importance server delays transfer time example case transfers client ected equally propagation delay server delay transfers client dominated propagation delays 
interestingly nd server delays radically reduced client setting may due di erent systems software 
currently investigating cause ect 
causes variability transfer duration 
internet users typically interested mean transfer duration variability transaction duration source frustration 
results far mean statistics studying variability category critical path pro le shed light root causes variability transfer duration 
plots standard deviation category delay le sizes transferring client gure analogous 
gure exposes number important aspects transfer time variability 
coarse grained timeout losses overwhelming contributor variability transfer delay small medium sized les 
duration single timeout larger typical total transfer time absence timeouts le sizes coarse grained timeouts occur noticeable 
surprising result large les network heavily loaded signi cant cause transfer time variability propagation delay 
means number packets critical path showing high variability heavily loaded network conditions 
con rmed examining distribution critical path lengths large les comparing conditions low network load high network load 
histograms distribution minimum mode mean shown 
helps explain mean propagation delay high network load larger discussed summary statistics show common cases distributional modes heavy network load critical path length distribution shows longer tails 

pkts critical path 
pkts critical path min mode mean min mode mean histograms number packets critical path large le low network load high network load client high server load 
described methods tool critical path analysis internet ows 
shown construct critical path unidirectional tcp ows extend method transactions 
furthermore developed taxonomy kinds delays occur tcp ows taxonomy pro le critical path 
important goal trac analysis tools wide applicability shown method constructing critical path applies wide range tcp implementations conform tcp reno 
tool require intrusive instrumentation systems passively collected packet traces endpoints 
applying method transfers internet helps answer questions causes long web response times 
shown systems measured server load major determiner transfer time small les network load major determiner large les 
general lend support development server enhancements speed transfer small les 
furthermore critical path analysis uncovers number subtle points 
example contribution propagation delay critical path greater network variability queuing suggests may dicult improve transfer latency cases aggressive window opening schemes discussed better retransmission algorithms avoid timeouts slow start 
addition dominant cause variability transfer time packet loss surprisingly number packets critical path constant sized le show long distributional tail 
authors vern paxson anja feldmann input various aspects 
authors lars kellogg assistance experimental systems 
david martin peg sha er hosting client systems collect data study 
anonymous reviewers 
allman floyd partridge 
increasing tcp initial window 
ietf rfc september 
almeida almeida yates 
measuring behavior world wide web server 
proceedings seventh ifip conference high performance networking white plains ny april 
arlitt williamson 
internet web servers workload characterization performance implications 
ieee acm transactions networking october 
aron sanders druschel zwaenepoel 
scalable content aware request distribution cluster network servers 
proceedings usenix conference san diego ca june 
balakrishnan padmanabhan seshan stemm katz 
tcp behavior busy internet server analysis improvements 
proceedings ieee infocom san francisco ca march 
banga mogul 
scalable kernel performance internet servers realistic loads 
proceedings usenix annual technical conference new orleans la june 
time seconds time seconds time seconds time seconds critical path diagrams transfer small le light server load small le heavy server load medium le light server load medium le heavy server load 
barford crovella 
generating representative workloads network server performance evaluation 
proceedings acm sigmetrics pages madison wi june 
barford crovella 
performance evaluation hyper text transfer protocols 
proceedings acm sigmetrics atlanta ga may 
bestavros crovella liu martin 
distributed packet rewriting application scalable server architectures 
proceedings international conference network protocols icnp october 
bolot 
packet delay loss behavior internet 
proceedings acm sigcomm san francisco september 
brakmo malley peterson 
tcp vegas standard deviations delay components small le medium le large le 
new techniques congestion detection avoidance 
proceedings acm sigmetrics philadelphia pa may 
cardwell savage anderson 
modeling tcp latency 
proceedings ieee infocom conference tel aviv israel march 
mark crovella azer bestavros 
self similarity world wide web trac evidence possible causes 
ieee acm transactions networking december 
druschel pai zwaenepoel 
flash ecient portable web server 
proceedings usenix annual technical conference monterey ca june 
fielding gettys mogul frystyk berners lee 
hypertext transfer protocol 
ietf rfc january 
frystyk nielsen gettys baird smith prud hommeaux lie lilley 
network performance ects css png 
proceedings acm sigcomm cannes france 
hollingsworth miller 
parallel program performance metrics comparison validation 
proceedings supercomputing november 
huitema 
internet quality service assessment 
ftp telcordia com pub huitema stats quality today html 
keynote systems www keynote com 
lucent net medic 
www ins com software medic datasheet index asp 
jacobson 
congestion avoidance control 
proceedings acm sigcomm pages august 
krishnamurthy willis 
analyzing factors uence web performance 
proceedings ninth international world wide web conference amsterdam netherlands may 
lamport 
time clocks ordering events distributed system 
communications acm july 
lin kung 
tcp fast recovery strategies analysis improvements 
proceedings ieee infocom san francisco ca march 

critical path analysis 
pitman publishing new york 
mathis semke mahdavi ott 
macroscopic behavior tcp congestion avoidance algorithm 
computer communications review july 
miller clark hollingsworth lim 
ips second generation parallel program measurement system 
ieee transactions parallel distributed systems april 
mills 
network time protocol version speci cation implementation analysis 
technical report rfc network information center sri international menlo park ca 
mogul 
case persistent connection 
technical report wrl dec western research laboratory palo alto ca 
mogul douglis feldmann krishnamurthy 
potential bene ts delta encoding data compression 
proceedings acm sigcomm cannes france 
padhye firoiu towsley kurose 
modeling tcp throughput simple model empirical validation 
proceedings acm sigcomm vancouver canada 
padmanabhan katz 
tcp fast start technique speeding web transfers 
proceedings ieee globecom november 
paxson 
automated packet trace analysis tcp implementations 
proceedings acm sigcomm cannes france september 
paxson 
internet packet dynamics 
proceedings acm sigcomm cannes france september 
paxson 
measurements analysis toend internet dynamics 
phd thesis university california berkeley 
apache server project 
www apache org 
schroeder burrows 
performance re rpc 
proceedings twelfth acm symposium operating system principles eld park az december 
shepard 
tcp packet trace analysis 
master thesis massachusetts institute technology 
stevens 
tcp slow start congestion avoidance fast retransmit fast recovery algorithms 
rfc january 
stevens 
tcp ip illustrated volume protocols 
addison wesley 

yang miller 
critical path analysis execution parallel distributed programs 
proceedings th international conference distributed computing systems san jose ca june 

