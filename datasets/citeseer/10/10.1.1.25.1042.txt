joseph yoder university illinois yoder uiuc edu metadata active object models brian foote university illinois foote cs uiuc edu dirk riehle ubs ag dirk riehle ubs com www cat ncsa uiuc edu yoder research metadata object model representation particular domain objects description 
active object model object model object representation interpreted generated run time changed immediate controlled effect system interpreting running 
metadata data describe data 
data accompanied descriptions integrated new applications thefly 
descriptions sufficiently rich powerful constitute second level language 
distinct domain level helps specify domain way dynamic flexible 
domain objects reified 
metadata active object models new 
meta beta mantra database people designers contemporary object oriented systems build active object models day knowing doing special 
workshop brought practitioners language theorists pattern architects academics look patterns underlie disparate interests 
identifying patterns establishing common vocabulary hope relieve follow burden reinventing approaches 
volatile nature contemporary business requirements forces developers applications configurable flexible adaptable 
era business rules buried cobol code coming 
today users need dynamically change business rules 
customers require systems easily adapt changing business needs meet unique requirements scale large small installations 
multi tiered systems demand data move michel acm org carry descriptions 
number successful frameworks applications implemented delivered different areas industry domain specific languages meta data object oriented design flexible implementation business rules address sorts needs 
oopsla half demos explicit representation object model interpret 
system different name idea including meta part name 
name clearest active object model 
system active object model explicit object model interprets run time 
change object model system changes behavior 
example lot workflow systems active object model 
objects states respond events changing state 
active object model defines objects states events conditions object changes state 
suitably privileged people change object model programming 
programming 
changing active object model changes way business programming restricted domain 
metadata active object models describe object model 
runtime descriptions objects available users directly manipulate objects 
system interpret manipulate runtime descriptions easy add new objects active object model immediately available users 
workshop built held may university illinois 
workshops focused real world systems metadata active object models enhance flexibility maintainability ease power 
position papers workshop participants papers ncsa uiuc edu yoder metadata 
business case people building systems metadata active object models ground variety reasons 
sound sober business case 
workshop participants identified issues relating want build types systems reasons cause active object models fail 
business case higher roi higher flexibility change cheaper build applications foster business innovation incremental development prototyping ii build active object models need flexibility high pace business change need experimentation need empower users iii reasons failure inadequate bridge business technology level communication different universe discourse unclear operations deployment structure high availability runtime evolvability security forces meta number positive negative forces consider developing types systems static type safety flexibility commonality generality combinatorial explosion rate change fuzzy changing requirements skill level cleverness users may break system understandability comprehensibility unexpected things happen learning organization performance complexity meta vs framework cost architect capability vs constraints responsibility users patterns techniques list candidate patterns techniques mined workshop 
parameterization configuration expressions scripts table driven properties validation type object variable state strategies rules named values namespace context naming services schema specs message routing editor visual builder history composite builder dynamic relationship observers value holders dags connection structure behavior dynamic accessors boot strapping initial population scripting tools pluggable behavior prototypes factories views participants began categorize ways describe data behavior implement active object models tools define implement models number papers written describing qualities patterns types dynamic systems anderson foote yoder foote yoder johnson oaks roberts johnson johnson woolf 
terminology unfortunate legacy reflection heritage arcane vocabulary 
follows list terms identified workshop participants central discussion 
meta reflection business rules self describing data structures runtime modifiable systems self contained structures self aware software introspection dynamic system black box framework domain specific language causal connection teach people meta dealing meta systems training knowledge transfer difficult 
identified different areas knowledge transfer ways document systems process models communicating knowledge 
dimensions knowledge transfer thought limited developer manager business case users system users core developers documentation patterns tools browsers auto generated bring closer mentoring process model vision system continuity mentoring cross breeding communication culture participants participants workshop workshop included ali jens david randy dong brian foote james long donald malcolm macqueen martinez richard eliot miranda joseph claudia dirk riehle rosenthal wolf siberski peter michel torsten bobby woolf joseph yoder 
sign technical area number people independently discover 
case metadata active object models 
workshop brought researchers practitioners variety areas order explore patterns themes underlie systems 
dominant theme need confront change forcing system architects find ways allow systems users effectively keep pace 
way cast information business rules data code subject change runtime 
data objects objects time come constitute domain specific language allows users change system business needs dictate 
major accomplishment workshop get disparate group establish dialog 
begun task architectural issues uncovering patterns better defining vocabulary 
looking forward members community continue 

anderson francis 
collection history patterns collected papers plop europlop conference technical report wucs dept computer science washington university department computer science september 

brian foote joseph yoder 
architecture evolution metamorphosis pattern languages program design john vlissides james coplien norman eds addison wesley reading ma 

brian foote joseph yoder 
metadata active object models collected papers plop europlop conference technical report wucs dept science washington university department computer science september 

don roberts ralph johnson 
type object pattern languages program design robert martin dirk riehle frank buschmann eds addison wesley reading ma 

ralph johnson jeff oaks 
user defined product framework url cs uiuc edu users johnson papers udp 
ralph johnson bobby woolf 
type object pattern languages program design robert martin dirk riehle frank buschmann eds addison wesley reading ma 
