abstraction modular verification infinite state reactive systems zohar manna michael colon bernd sipma tomas uribe computer science department stanford university stanford ca 
manna cs stanford edu 
review number temporal verification techniques reactive systems modularity abstraction 
allows verification larger systems incremental verification systems developed refined 
particular show deductive verification tools combination finite state model checking abstraction allow verification infinite state systems featuring data types commonly software specifications including real time hybrid systems 
manfred broy bernhard rumpe editors requirements targeting software systems engineering volume lecture notes computer science pages 
springer verlag 
reactive systems ongoing interaction environment 
systems seen reactive systems including computer hardware concurrent programs network protocols concurrent software 
temporal logic convenient language expressing properties reactive systems pnu 
temporal verification methodology provides methods proving reactive system satisfies temporal specification mp 
computations reactive systems modeled infinite sequences states 
finite state systems possible system states determined fixed number variables finite domain finitely states 
algorithmic verification model checking automatically decide validity temporal properties finite state systems ce qs particularly successful hardware mcm 
software systems hand usually infinite state contain system variables unbounded domains integers lists trees data types 
finite state verification methods applied directly systems 
application temporal verification techniques research supported part national science foundation ccr defense advanced research projects agency nasa nag aro daah aro muri daah army contract dabt darpa 
manna colon sipma uribe software systems limited size complexity systems analyzed 
limitations appear verification large finite state systems complex hardware state explosion problem limitations symbolic methods restrict number finite state variables considered automatic methods 
deductive verification relies general theorem proving user interaction provides complete proof systems principle prove correctness property infinite state system provided property valid system 
methods limited size complexity system analyzed laborious system complexity grows 
overcome limitations verification methods analogous manage complexity software design investigated 
modular verification follows classic divide conquer paradigm portions complex system analyzed independently 
holds promise proof reuse creation libraries verified components 
abstraction ignoring details possible simplifying domain computation original system 
may allow instance abstracting infinite state systems finite state ones easily model checked 
presents overview number abstraction modular verification methods investigated geared verification general infinite state reactive systems 
methods implemented part step stanford temporal prover verification system see section 
show help design debug complex systems modularly described 
outline section presents basic preliminary notions step verification system 
section briefly abstraction describing number simple infinite state examples abstractions generated verified step 
section presents modular verification including larger example hybrid system modularly specified verified step 
section presents briefly discusses related 
preliminaries system property specification transition systems transition systems mp model finite infinite state reactive systems 
assertion language usually firstorder logic represent sets system states described terms set system variables reactive system set initial states set transitions initial condition described assertion transitions described transition relations assertions set system variables set primed system variables giving value system variables state 
run system infinite abstraction modular verification infinite state reactive systems sequence states 
satisfies transition satisfies transition relation transitions just weakly fair strongly fair indicating enabled infinitely continuously case justice taken 
computation run satisfies fairness requirements 
see mp details 
temporal logic express properties reactive systems linear time temporal logic ltl mp allow order quantification state level 
real time hybrid systems real time hybrid systems modeled clocked phase transition systems mp basic transition system representation 
real valued clock variables updated tick transition advances time constrained global progress condition 
case hybrid systems continuous variables evolve time set di erential equations 
allows reuse standard deductive verification techniques ms kmp 
timed automata hybrid automata easily translated formalisms 
furthermore adopting general transition system representation clocked phase transition systems model systems control component 
includes instance software real time constraints software controlled hybrid systems 
extension temporal logic required clock variables including global clock directly referred specifications 
real time hybrid systems fairness constraints usually replaced upper bounds long transitions enabled taken 
runs non zeno time grows bound considered computations 
deductive algorithmic verification mentioned section main approaches verification temporal properties reactive systems deductive verification theorem proving algorithmic verification model checking 
deductive verification validity temporal property system reduced general validity order verification conditions 
algorithmic verification temporal property established exhaustive search system state space usually searching counterexample computation 
model checking procedures automatic deductive verification relies user interaction identify suitable lemmas auxiliary assertions 
model checking usually applicable systems finite fixed number states deductive approach verify infinite state systems parameterized systems unbounded number components similar structure composed 
manna colon sipma uribe step system stanford temporal prover step supports computer aided formal verification reactive real time hybrid systems temporal specifications expressed linear time temporal logic 
step integrates algorithmic deductive methods allow verification broad class systems including parameterized component circuit designs parameterized process programs programs infinite data domains 
step described bbc bbc 
latest release step version described mbb 
abstraction abstraction reduces complexity system verified considering simpler system details original concrete system hidden 
theoretical foundations reactive system abstraction cgl dgg lgs dam usually ideas interpretation cc 
abstractions weakly preserve temporal properties property holds system corresponding property hold concrete 
converse true properties satisfied concrete system hold level 
positive results transfer concrete level 
means particular counterexamples correspond concrete ones 
abstractions remove information concrete system coarse fail prove property interest 
refined adding detail property proved concrete counterexample 
infinite finite state intuition motivates abstraction verification software systems limited interaction control data 
particular values taken data variables unimportant 
relationship variables relevant verifying system 
example decide branch conditional statement taken su cient know guard true false information gleaned analysis system transition ects truth value guard 
example bakery consider version lamport bakery algorithm mutual exclusion shown specified simple programming language spl mp 
step automatically translates program corresponding fair transition system 
system contains variables ranging non negative integers 
abstraction modular verification infinite state reactive systems local integer loop forever noncritical await critical loop forever noncritical await critical fig 

program bakery upper bound values variables take computation system 
system infinite state directly model checked 
knowing truth value assertions su cient determine branches conditional statements feasible 
assertions replace original integer variables maintaining finite domain control variables construct finite state abstraction bakery algorithm shown 
program model checker verify basic safety properties original system including mutual exclusion stating processes critical section time bounded overtaking states process waiting enter critical section process enter critical section 
transitions concrete bakery program just noncritical statements certain conditions transitions inherit fairness properties original ones kmp cu 
case prove accessibility model checking system inherited fairness requirements 
manna colon sipma uribe local boolean loop forever noncritical false false await critical true true loop forever noncritical false true await critical true fig 

abstraction program bakery generating abstractions constructing systems manually time consuming requires correctness abstraction checked separate phase 
done formally new potential source error introduced 
bakery example preceding section instance abstraction finite number assertions 
boolean variables system replacing concrete variables refer 
algorithm generates system automatically set assertions called basis abstraction cu 
algorithm uses validity checker establish relationships basis elements compositionally abstracting transition relations system directly produce transition relations 
algorithm implemented part step step validity checker automatically generated abstractions section 
example fischer second example consider fischer mutual exclusion algorithm shown 
real time system lower upper bounds amount time process wait control location 
provided program satisfies mutual exclusion mp 
program modeled clocked transition system clock variables measuring time process waiting control location 
clock variables system infinite state model checked directly 
examining system suggests truth value assertions value finite domain variables su cient determine transitions taken 
assertions inductive specialized model checkers real time hybrid systems hytech hh kronos automatically prove properties systems restricted linear hybrid systems finite control 
abstraction modular verification infinite state reactive systems local loop forever noncritical skip await skip critical skip loop forever noncritical skip await skip critical skip fig 

fischer mutual exclusion algorithm 
system contains transitions knowing truth values assertions su cient determine transitions taken 
remedy situation consider assertions additional assertions yield su cient information relationships clock variables generate finite state abstraction fine establish mutual exclusion 
example brp turn bounded retransmission protocol see hs gs 
protocol consists processes sender receiver communicating lossy channels 
sender sends list items unspecified type repeatedly transmitting frame containing current item frame acknowledged 
receiver repeatedly waits frame arrive acknowledges appends corresponding item list 
detect arrival duplicate frames process maintains bit compared bit included frames 
outgoing frame sender attaches bit receiver copies sends frame frame lost transit 
sender ignores arrive wrong bit flips bit arrival correct 
receiver acknowledges frame receives appends carried item list frame bit agrees flips bit case 
number retransmissions frame exceeds fixed predetermined bound sender aborts transmission 
sender receiver report status transmission terminate 
sender receiver report ok resp 
ok detect manna colon sipma uribe sion succeeded resp 
failed 
addition sender may report dont know happen abort transmitting item list 
property establish status reports consistent processes report ok report ok sender reports dont know receiver ok ok specified invariance ok ok ok ok dont know ok ok system directly model checked sender receiver lists unbounded retransmission count sendcount unbounded retransmission bound unspecified 
finite state abstraction system generated 
assertion nil determines sender successfully transmitted received items sent 
case sender abort transmission 
assertions cons head nil sendcount ensure generated abstraction accurately models sender behavior chooses abort item remaining sent 
case sender report ok transmit item 
sender report dont know unclear frame lost transmission 
basis unbounded variables preserving finite domain variables includes variables invariant proved step automatically generates finite state abstraction invariance model checked automatically 
property establish list correctly transmitted sender abort 
prove nil list list complete list transmitted 
abstraction 
assertions nil list track formula proven system 
assertion head abstraction modular verification infinite state reactive systems tracks current item moves sender receiver 
list tail list list concatenation operator capture inductive relationship sender receiver lists point time list transmitted invariant system 
basis 
step automatically generates model checks finite state abstraction 
modular specification verification advantages modular description development complex systems known 
formal verification point view decomposing systems modules allows verification closely follows design structure system 
instance general properties parameterized module proved reused module instantiated 
fms presents modular transition systems system specification formalism allows systems built transition modules 
modules consist interface describes interaction environment including list shared variables name exported transitions body describes module actions transitions synchronized interleaved modules 
complex modules constructed simpler ones module expressions 
description language includes recursive module definitions module composition instantiation variable hiding renaming augmenting restricting module interfaces 
composition synchronous asynchronous transitions label composed synchronously rest interleaved 
modular system specification language added step corresponding modular proof rules 
designing system modularly prove simple properties individual modules combinations modules entire system specified 
assumption guarantee reasoning prove properties module depend environment environment fully specified 
abstraction facilitate process modular properties model checked abstractions relative assumptions environment 
furthermore real time hybrid systems part complex realtime behavior abstracted away debugging individual modules 
expensive verification methods design components combinations pass simple fast checks 
example steam boiler case study steam boiler case study abl benchmark specification verification methods hybrid controlled systems 
time appearance manna colon sipma uribe plant maintenance pump operator controller working reporting waiting ok preparing wait starting monitoring shutdown boiler valve closed valve open maxl pump defective defective started running stopped actuator defective defective ps sensor defective defective range value broken reported repaired inorder idle notified started waiting starting running init normal degraded rescue fig 

schematic overview steam boiler system abstraction modular verification infinite state reactive systems developed step implementation system including plant controller consisting lines step spl code 
time step provide modularity abstraction techniques 
managed prove simple properties program discovered numerous bugs model system quickly decided full verification feasible tool hand 
modularity abstraction techniques place step case study revived 
system rewritten modular transition system consisting modules total transitions real valued variables finite domain variables 
briefly describe system techniques analyze 
system description specification system shown schematically 
system consists physical plant controller maintenance department operator desk plant top contains boiler pump supplies water boiler sensors measure water level boiler steam flow boiler actuator start pump 
controller bottom consists sub modules control program processes sensor values determines output actuator generally monitors plant 
responsible detect unsafe conditions faulty equipment necessary generate emergency 
maintenance communication sub module keeps track equipment status input maintenance department central control program 
operator communication sub module processes input operator desk start phase 
space considerations prohibit showing entire system illustrate modular description language shows top level composition various modules 
basic modules maintenance operator boiler pump environment 
sensor actuator incorporated boiler pump respectively 
module parallel composition instances maintenance modules 
multiple instances module may composition 
example full system module contains instances module steam flow sensor level sensor pump 
case generic variables instantiated variable specific corresponding piece equipment 
environment module specifies variables may modified physical environment plant 
close system hiding shared variables indicating behavior determined completely modules included system 
modules communicate shared variables synchronization transitions 
example maintenance boiler pump operator modules communicate shared variables parts communication controller manna colon sipma uribe module maintenance mc module operator mo module hide boiler pump rename rename rename ops environment fig 

top level modular specification steam boiler system modules solely synchronized transitions 
reflects fact controller access current plant data time sensors sampled 
system analysis modularity inheritance modular structure system allows prove properties system various levels 
example may want prove consistency internal states maintenance modules pieces equipment 
attractive prove property module instances full system inherit proving directly entire system furthermore module finite state model checker modular proof full system contains real valued variables ruling model checker step 
module contains shared variables 
able inherit properties assume variables arbitrarily modified module environment 
prove consistency property need stronger assumption environment 
provide ways state assumptions general way specify property assume guarantee property form assumption discharged parallel composition module environment 
cases leads large unintuitive temporal formulas 
second weaker way specify assumption include abstraction modular verification infinite state reactive systems explicit environment restriction module 
restriction part environment transition modular property proven 
module environment restriction composed transition relations composing modules required satisfy restriction 
show example approach environment restriction specifying consistency property property possible awkward mainly temporal formula hard separate actions module environment 
hand include assertion broken environment restriction module stating environment set broken modify way 
prove property directly module 
subsequently ensure modules composed satisfy property building full system 
assume guarantee reasoning example temporal property assume guarantee proof suited inorder stating piece equipment defective eventually working order 
sequence events equipment failure follows arbitrary time environment set equipment defective resulting faulty sensor reading pump failing start requested 
controller detects equipment broken sets corresponding equipment status broken 
maintenance function controller informs maintenance department acknowledges report repairs equipment eventually setting equipment inorder 
steps involved achieving inorder condition controlled module detection failure done module 
specify property assumption broken inorder implication model checked module 
module instantiated full system inherits assume guarantee properties form broken inorder manna colon sipma uribe steam sensor broken inorder level sensor broken inorder pump 
need separate proofs assumptions specific particular failure detection method piece equipment 
system analysis abstraction saw section abstraction reduce infinite state system finite state capturing relationships infinite domain variables form assertions 
example abstraction consider property inorder inorder stating long steam flow sensor defective status inorder 
controller detect failure equipment 
property certainly desirable failure status piece equipment may cause plant shutdown 
prove full system 
check steam flow sensor operating correctly cycle controller predicts range possible sensor readings reading minimum maximum assumed gradient flow 
reading outside range considered defective controller set status broken 
property involves finite domain variables validity obviously dependent real valued variables actual predicted steam flow 
property depend particular values variables certain relationships 
assertion basis su cient prove property sf sf delta sf delta slow delta delta abstraction modular verification infinite state reactive systems sensor reading local value steam flow controller sf actual steam flow going boiler 
parameters minimum maximum gradients steam flow delta sampling interval 
assume delta 
addition variables system allows remove realvalued variables construct finite state abstraction contains su cient information prove property 
abstraction test points constructing transition relations algorithm cu uses set test points built abstraction basis 
determine ect transition truth value basis elements di erent circumstances 
default test points form basis elements negation 
generating abstraction validity checker essence check implication transition compositionally structure formula describes transition relation valid implication added abstracted transition relation 
default test points generate abstractions described section 
cases precise abstraction required prove desired property obtained complex relationships basis elements explored 
implementation allows additional test points specified explicitly particular transitions letting general boolean combinations basis elements 
ect refining abstracted system producing abstraction properties proved 
illustrate abstraction process examples concrete corresponding transition relations 
evolution physical system modeled concrete relation ev sf sf delta sf sf delta abstracted ev preserve preserve stands 
transitions involved prediction acceptable steam flow range slow 
include transition relation fragments relevant abstraction particular finite state control variables retained included 
plan entire concrete systems available 
manna colon sipma uribe slow delta delta abstracted preserve 

preserve transition relations default test points su ce 
transition models sensor sampling synchronized transition boiler modules transition relation sf transition requires extra test point order establish su ciently strong postcondition results transition relation abstraction allows prove desired property 
related shown abstraction modularity allow automatic incremental verification reactive systems 
deductive methods allow verification abstraction infinite state systems including unbounded data types software systems 
clearly done techniques practical largescale software system design 
practice combination formal informal methods required 
believe abstraction refinement modularity useful settings 
proving simple properties help debug systems designed 
abstraction verification individual modules regarded lightweight formal method sense jw moving heavyweight ones 
initial negative results help debug system positive results establish simple properties useful complex global proofs 
important special case hybrid real time systems untimed components isolated debugged model checking timed components abstracted model checkable ones 
abstraction modular verification infinite state reactive systems related abstraction deductive verification methods automatic invariant generation bbm special case abstraction interpretation carried pre defined domains fixpoints approximations ciently computed 
methods implemented step automatically generating local linear polyhedral invariants depending domain 
verification diagrams mp bms provide visual representation proof system validity particular temporal properties 
deductive model checking sum interactively explores refines abstraction system state space search counterexample 
verification methods seen providing appropriate assertion abstraction succeed 
furthermore incorporate founded domains cases finite state abstraction exist 
abstraction modularity model checking procedure explicitly generates state space assertion abstraction similar abstraction algorithm gs automatic abstraction procedure uses validity checking blo 
hlp system specified lisp code abstracted manually model checkable finite state system uncovering significant flaws original design 
investigates separation control data infinite state systems combining model checking generation verification conditions established deductively 
lon cgl show abstraction modularity combined finite state systems synchronously composed symbolically model checked 
refinement general refinement seen dual abstraction formal system design methodology kmp highlevel version algorithm verified meet desired specifications 
implementation details added system ensuring desired properties hold 
step presents modular specification verification wellknown generalized railroad crossing real time case study 
invariants proved automatically generated separately module 
prove properties combinations modules turn prove desired properties entire system 
step test cases reported blm ms 
information including abstraction verification examples see step web pages www step stanford edu bjrner browne comments 
manna colon sipma uribe abl abrial langmaack editors 
formal methods industrial applications specifying programming steam boiler control vol 
lncs 
springer verlag 
ahs alur henzinger sontag editors 
hybrid systems iii verification control vol 
lncs 
springer verlag 
bbc bjrner browne chang colon kapur manna sipma uribe 
step stanford temporal prover user manual 
technical report stan cs tr computer science department stanford university november 
bbc bjrner browne chang colon kapur manna sipma uribe 
step deductive algorithmic verification reactive real time systems 
alur henzinger editors proc 
th intl 
conference computer aided verification vol 
lncs pages 
springer verlag july 
bbm bjrner browne manna 
automatic generation invariants intermediate assertions 
theoretical computer science february 
preliminary version appeared st intl 
conf 
principles practice constraint programming vol 
lncs pp 
springer verlag 
blm bjrner lerner manna 
deductive verification parameterized fault tolerant systems case study 
intl 
conf 
temporal logic 
kluwer 
appear 
blo bensalem lakhnech owre 
computing abstractions infinite state systems compositionally automatically 
hu vardi hv pages 
bms browne manna sipma 
generalized temporal verification diagrams 
th conference foundations software technology theoretical computer science vol 
lncs pages 
springer verlag 
bjrner manna sipma uribe 
deductive verification real time systems step 
th intl 
amast workshop realtime systems vol 
lncs pages 
springer verlag may 
cc cousot cousot 
interpretation unified lattice model static analysis programs construction approximation fixpoints 
th acm symp 
princ 
prog 
lang pages 
acm press 
ce clarke emerson 
design synthesis synchronization skeletons branching time temporal logic 
proc 
ibm workshop logics programs vol 
lncs pages 
springer verlag 
cgl clarke grumberg long 
model checking abstraction 
acm trans 
programming languages systems september 
cu colon uribe 
generating finite state abstractions reactive systems decision procedures 
hu vardi hv pages 
dam dams 
interpretation partition refinement model checking 
phd thesis eindhoven university technology july 
de bakker de roever rosenberg editors 
stepwise refinement distributed systems models formalisms correctness vol 
lncs 
springer verlag 
abstraction modular verification infinite state reactive systems dgg dams grumberg gerth 
interpretation reactive systems abstractions preserving ctl ectl ctl ifip working conference programming concepts methods calculi pages june 
damm grumberg 
model checking truly symbolic 
intl 
workshop tools algorithms construction analysis systems tacas vol 
lncs pages 
springer verlag may 
argenio katoen tretmans 
bounded retransmission protocol time 
rd workshop tools algorithms construction analysis systems tacas vol 
lncs pages 
springer verlag 
olivero tripakis yovine 
tool kronos 
alur ahs pages 
fms manna sipma 
deductive verification modular systems 
international symposium compositionality compos lncs 
springer verlag 
appear 
gs graf saidi 
construction state graphs pvs 
grumberg editor proc 
th intl 
conference computer aided verification vol 
lncs pages 
springer verlag june 
hh henzinger ho 
hytech cornell hybrid technology tool 
hybrid systems ii vol 
lncs pages 
springer verlag 
hlp havelund lowry penix 
formal verification space craft controller 
technical report nasa ames research center 
hs havelund shankar 
experiments theorem proving model checking protocol verification 
formal methods europe pages march 
hv hu vardi editors 
proc 
th intl 
conference computer aided verification vol 
lncs 
springer verlag june 
jw jackson wing 
lightweight formal methods 
ieee computer april 
kmp kesten manna pnueli 
temporal verification simulation refinement 
de bakker de roever rosenberg editors decade concurrency vol 
lncs pages 
springer verlag 
kmp kesten manna pnueli 
verifying clocked transition systems 
alur ahs pages 
lgs graf sifakis bouajjani bensalem 
property preserving abstractions verification concurrent systems 
formal methods system design 
lon long 
model checking abstraction compositional verification 
phd thesis school computer science carnegie mellon university pittsburgh pa july 
mbb manna bjrner browne colon sipma uribe 
update step verification reactive systems 
tool support system specification development verification pages 
universitat kiel june 
bericht nr 

mcm mcmillan 
symbolic model checking 
kluwer academic pub 
manna colon sipma uribe mp manna pnueli 
temporal verification diagrams 
hagiya mitchell editors proc 
international symposium theoretical aspects computer software vol 
lncs pages 
springerverlag 
mp manna pnueli 
temporal verification reactive systems safety 
springer verlag new york 
mp manna pnueli 
clocked transition systems 
technical report stan cs tr computer science department stanford university april 
ms manna sipma 
deductive verification hybrid systems step 
henzinger sastry editors hybrid systems computation control vol 
lncs pages 
springer verlag 
pnu pnueli 
temporal logic programs 
proc 
th ieee symp 

comp 
sci pages 
ieee computer society press 
qs sifakis 
specification verification concurrent systems cesar 
dezani ciancaglini montanari editors intl 
symposium programming vol 
lncs pages 
springerverlag 
sum sipma uribe manna 
deductive model checking 
appear formal methods system design 
preliminary version appeared proc 
th intl 
conference computer aided verification vol 
lncs springer verlag pp 

