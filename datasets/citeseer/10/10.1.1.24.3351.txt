fl kluwer academic publishers boston 
manufactured netherlands 
cps translations applications cube gilles barthe gilles di pt departamento de inform tica universidade braga portugal john hatcliff cis ksu edu department computing information sciences kansas state university manhattan ks usa morten heine diku dk diku dk copenhagen denmark editor 
continuation passing style cps translations typed calculi numerous applications 
range applications fact cps translations known non dependent type systems excluding known systems calculus constructions cc logical frameworks lf 
presents techniques cps translating systems dependent types emphasis pure applications 
rst part review lines need cps translations dependent type systems arisen discuss involved cps translating systems 
way overcoming called domain free type systems 
barendregt cube shall consider domain free cube traditional pure type systems shall consider domain free pure type systems 
second part reviewing domain free cube includes versions cc lf cps translations systems cube 
introduce direct style ds inverse cps translations systems domain free cube ds translations number applications previously formulated untyped simply typed languages 
third part review domain free pure type systems generalize cps translations domain free cube large class domain free pure type systems includes systems appear literature including domain free cube 
translations appear literature arise special cases 
fourth part approaches cps translations traditional pure type systems 
rst indirect technique lifts cps translation domain free pure type systems analogous class traditional pure type systems results relate derivations domain free traditional pure type systems 
second direct approach translates derivations requiring certain order derivations founded 
techniques yield translations systems appear literature including barendregt cube 
keywords continuation passing style pure type systems dependent types lambda cube 
continuation passing style cps translations typed calculi appeared literature meyer wand :10.1.1.44.7943
applications numerous listed exhaustively include compilation transformation analysis typed programming languages construction semantics denitions languages jumps exceptions concurrency primitives embedding classical logics intuitionistic logics techniques infer strong normalization weak normalization typed calculi construction looping combinators inconsistent pure type systems :10.1.1.48.8807:10.1.1.48.9627:10.1.1.22.7509:10.1.1.26.6893
related direct style ds translations theoretical implementation oriented applications :10.1.1.22.7509
range applications far fact cps translations known non dependent type systems 
general class systems known cps translation non dependent logical pure type systems studied coquand herbelin werner 
class contains number known systems simply typed calculus girard system second order calculus system higher order calculus excludes known dependent systems calculus constructions cc logical frameworks lf 
ds translations dened untyped simply typed languages 
sketch mentioned applications cps translations detail intermediate languages compiling partial evaluation inferring strong normalization weak normalization typed calculi embedding classical logics intuitionistic logics 
examples hope convince reader desirable extend existing results concerning cps translations richer type systems including systems dependent types 
subsections discuss involved extension propose solve 

intermediate languages compiling cps languages properties similar cps normal forms monadic normal forms refer cps languages intermediate languages compiling partial evaluating functional languages :10.1.1.48.8807
applications take advantage fact cps intermediate values named contexts represented explicitly 
example intermediate value naming aid register allocation compiling roughly name corresponds register prevent computations discarded reordered partial evaluation 
explicit context representation helpful optimizing tail calls compiling performing binding time improvements partial evaluation 
current trends compilation partial evaluation emphasizing importance typed cps intermediate languages 
intermediate languages particularly relevant compilation languages ml haskell sophisticated polymorphic type systems 
meijer peyton jones suggested cube basis typed intermediate languages :10.1.1.50.7152
strategy builds established practice system compilation see 
cube general pure type systems suited intermediate languages features ffl compactness terms types syntactic category functions manipulation ffl parametricity intermediate language robust respect changes type system source language extensions source type system amount changing specication pure type system 
direct style ds translations performing partial evaluation designing intermediate languages compilation partial evaluation 
danvy lawall cps ds translations enable partial evaluation functional programs control operators requiring partial evaluators treat control operators 
proceeds steps remove control operators cps translating partially evaluate apply ds translation obtain specialized program direct style 
apply technique routines written scheme call cc control operator 
sabry felleisen flanagan illustrated ds translation derive appropriate reduction calculus intermediate language called normal forms :10.1.1.48.8807:10.1.1.22.7509
sabry wadler authors ds translations establish correctness properties cps translations 
lawall thiemann ds translation prove correctness partial evaluation strategy specializing functional programs computational 
wide applicability cps ds translations compilation partial evaluation emphasis typed cps intermediate languages worthwhile investigate scaled languages type systems described cube framework pure type systems 
various researchers advocating programming languages dependent types investigation cps especially relevant context 
example augustsson developed version haskell dependent types called cayenne xi pfenning proposed extension ml uses dependent types eliminate array bound checking :10.1.1.26.4391
lack cps ds translations dependently typed systems means cps ds techniques discussed applied immediately systems 

strong normalization weak normalization informally term calculus weakly normalizing reduction sequence normal form term reductions apply 
term strongly normalizing reduction sequences term eventually normal forms term innite reductions 
classical proof strong normalization fi reduction simply typed calculus due tait 
generalized second order typed calculus girard subsequently tait 
technique generalized variety calculi 
notions reduction typed calculi technique prove weak normalization simpler tait girard technique prove strong normalization 
instance turing proves weak normalization fi reduction simply typed calculus giving explicit measure decreases step certain fi reduction sequence 
prawitz independently uses technique prove weak normalization reduction natural deduction derivations predicate logic 
weak normalization easier establish strong normalization natural develop techniques infer 
techniques infer strong normalization notion reduction weak normalization complicated notion reduction see 
rensen xi developed techniques infer strong normalization fi reduction typed calculus weak normalization notion reduction fi reduction 
techniques provide hope positive answer conjecture barendregt typed lambda calculus applications edinburgh stating pure type system weak normalization fi reduction implies strong normalization fi reduction 
conjecture mentioned geuvers concrete form klop :10.1.1.56.7045
explain techniques rensen xi consider simply typed calculus la curry 
denote set untyped terms dened syntax ranges denumerable set variables 
set simple types dened syntax ff ff ranges denumerable set type variables 
set contexts set fx xn xn variables write fx gamma gamma gamma gamma assumed variable oe oe gamma gamma relation triples gamma oe gamma context term oe simple type dened gamma gamma oe gamma oe gamma oe gamma oe gamma term typable gamma oe gamma oe 
usual fi reduction fi smallest compatible relation fi pfx qg pfx qg denotes substitution free occurrences fi normal form term term fi term fi weakly normalizing exists fi reduction sequence fi fi fi normal form fi strongly normalizing fi reduction sequences fi normal forms innite fi reduction sequences 
shall say simply typed calculus weakly strongly normalizing typable terms weakly strongly normalizing respectively 
property trivially implies converse obvious 
recall plotkin cps translation ffl dened 
main 
plotkin call name cps translation untyped terms idea techniques rensen xi modify plotkin translation changing clause abstractions arrive translation dened 
free variable right hand side construed hxi hx mi hmi hm hm hm 
modified call name cps translation untyped terms fresh time clause containing invoked 
hx xi hx xi abstraction hmi occurs free conservation theorem see weak normalization hmi implies strong normalization hmi :10.1.1.26.4391
intuition result way term weakly normalizing time fail strongly normalizing having roughly subterm innite reduction capability abstraction free subterm 
show strong normalization hmi implies strong normalization hmi weakly normalizing strongly normalizing 
incidentally modied translation map term fi equivalent fij equivalent original term translation useful intended application 
xed type variable oe oe 
map dened call name analogue meyer wand cps translation types :10.1.1.44.7943:10.1.1.44.7943
usual gammai fx oe gammag 
show hffi ff hoe hi 
call name cps translation types gamma oe gammai delta hmi certain delta translation maps simply typable terms simply typable terms 
follows typable terms weakly normalizing typable terms fact strongly normalizing 
suppose typable terms weakly normalizing 
typable term hmi typable hmi weakly normalizing strongly normalizing 
main problem extending technique typed calculi extend cps translation 
presents technique versions higher order calculus systems subtypes recursive types 
authors generalize technique class non dependent pure type systems 
far technique applied dependent systems partly cps translations systems known partly certain scope 

classical pure type systems curry howard isomorphism states correspondence constructive logics typed calculi old idea proofs constructive logics certain functions objects 
isomorphism evolved invention numerous typed calculi corresponding natural deduction logics see :10.1.1.56.7045:10.1.1.26.4391
late curry howard isomorphism concerned exclusively constructive logics 
time discovered felleisen control operator meaningfully added simply typed calculus typing double negation rule :10.1.1.26.6893
reduction rules related known reductions classical proofs 
discovered known double negation embeddings classical logic intuitionistic logic due kolmogorov correspond cps translations 
concreteness consider simple types assume xed type variable 
denote set untyped terms extended simple control operator ranges denumerable set variables 
relation triples gamma oe gamma context oe simple type dened gamma gamma oe gamma oe gamma oe gamma oe gamma gamma oe gamma oe typable gamma oe gamma oe 
reduction rules adopt fi denote smallest compatible relation fi pfx qg fi pfx pfx qg denotes substitution free occurrences core system studied 
fi normal form term term fi terms fi weakly normalizing exists fi reduction sequence fi fi fi normal form fi strongly normalizing fi reduction sequences fi normal forms innite fi reduction sequences 
calculus weakly strongly normalizing typable terms fi weakly fi strongly normalizing respectively 
may construed natural deduction presentation classical propositional logic proofs decorated terms turn viewed linear representation proofs formulation simply typed calculus preceding subsection corresponds minimal propositional logic 
mentioned cps translations control operators correspond embeddings classical logics 
consider extension plotkin call name cps translation call name variant translation 
show embedding property gamma oe implies gammai hmi 
shows logical consistency minimal propositional logic implies consistency classical propositional logic 
assume classical propositional logic inconsistent hmi 
assumption minimal propositional logic inconsistent 
hxi hx mi hmi hm hm hm hx mi 
call name cps translation embedding property relate normalization classical logic normalization minimal logic extract computational contents classical proofs 
authors considered control operators context rich type disciplines 
werner considers non dependent logical pure type systems extended variant operator shows extended systems strongly normalizing holds underlying pure type cps translations extended systems underlying pure type systems 
authors study general notion classical pure type system logical pure type systems including dependent types give rise corresponding classical pure type system 
order study embeddings classical pure type systems pure type systems general need arises general cps translations preliminary versions translations fact appeared 

dependent types recall plotkin translation 
translation dened induction structure alternatively size terms 
method denition scales richer languages untyped typed type system type system terms untyped terms possibly extended forms conditionals control operators language mentioned preceding subsections interested extending cps translations pure type systems particular dependent pure type systems type systems domain full abstractions oe tag oe attached indicate domain argument systems induction terms generally :10.1.1.22.7509:10.1.1.42.4772
nut shell translation abstraction oe form hx oe mi hmi problem 
turns want analogue embedding property hold ae type oe need take type term account transforming term 
conventional solution dene cps translation induction structure height derivations gamma example approach taken harper lillibridge cps translating 
denitions generally desires coherence property dioeerent derivations gamma oe translations hd hd equivalent sense 
reasonable notions equivalence include syntactic identity weaker notions fi convertibility 
coherence crucial property proofs properties built properties showing cps translation interacts substitution reduction conversion properties showing translation preserves typing 
dependent systems approach leads 
problematic aspect systems types may contain terms 
systems operate types form pix oe informally term type type oe type fx ng expressed application rule gamma piff oe gamma oe gamma fff ng instance may think term type arrays length number type arrays length term occurs type 
dependent systems terms arise inside types terms distinct category numbers adopts conversion rule gamma oe oe fi oe gamma oe naively dening cps translation dependent systems induction derivations runs conversion rule involves fi conversion application rule involves substitution 
denition translation involves substitution 
proceed rst addressing coherence proceeding substitution conversion forced tackle associated properties simultaneously 
point comparison harper lillibridge avoid problems associated conversion application rules 
translating dioeerent derivations judgment gamma oe conversion rule may cause terms hd hd dioeerent domain tags abstractions 
considering general theory equality fi desire harper lillibridge consider notion object equivalence operationally form reduction call name standard reduction insensitive domain tags 
insensitivity implies dioeerences domain tags equivalence terms 
substitution application rule issue 
system considered harper lillibridge non dependent system substitution fx ng degenerates dening cps translations induction derivations simply add clause side condition ae type oe non dependent systems works perfectly levels terms types depend 
route taken harper lillibridge coquand herbelin cps translation non dependent logical pure type systems 
dependent systems categories terms types case translation terms types mutually recursive denition side conditions founded ae may contain subterm 
preceding considerations show dening cps translations dependent church style type systems involves number 
true particular dependent pure type systems 

simple approach cps translations classes type systems include dependent systems consider domain free pure type systems variant pure type systems abstractions form traditional pure type fact idea motivations introducing domain free pure type systems 
idea carried sections 
reviewing domain free cube section includes versions cc lf cps translations systems domain free cube section 
introduce ds translations systems domain free cube section relate translations corresponding cps translations 
review general notion domain free pure type system generalize cps translations certain class domain free pure type systems section includes systems domain free cube domain free versions non dependent logical systems coquand herbelin 
translations appear literature arise special cases translation 
approaches cps translations traditional pure type systems indirect direct method 
carried section 
techniques systems occur literature 
rst indirect technique translation pure type systems translation domain free pure type systems 
second direct technique translates traditional pseudo terms pure type systems relies non standard order founded 
results justify dening cps translation domain free pure type systems traditional pure type systems 
extended elaborated version 

domain free cube section brief domain free cube 
rst subsection devoted denition systems involved 
readers previous knowledge calculi style second subsection includes number examples readers familiar may skip subsection :10.1.1.26.4391

denition domain free cube clarity exposition depart original presentation cube explicit distinction objects constructors kinds 
denition domain free cube 

denumerable disjoint sets variables ranged ff fi respectively 
dene syntactic classes obj constr kind domain free pseudo objects pseudo constructors pseudo kinds respectively follows obj ff constr ff ff pix piff kind pix piff denote arbitrary pseudo objects constructors kinds range set called sorts 
assume reader familiar notions free bound variables related :10.1.1.26.4391
symbol denotes syntactic equality modulo renaming bound variables 
write abbreviation piff ff free write xn xn 
substitution fflg dened usual capture free operation proviso belong class mfx ng 

set contexts domain free pseudo contexts dened syntax contexts gamma delta gamma write dom xn fx xn gamma delta denote pseudo contexts 
gamma xn write gamma ng 

domain free fi reduction fi obj constr kind dened smallest compatible relation fi afx bg gamma dom gamma gamma gamma gamma dom gamma gamma fi gamma gamma fi gamma delta gamma gamma pix gamma pix gamma gamma fx gamma ff gamma ff piff gamma piff gamma gamma fff cg gamma gamma pix gamma pix gamma gamma gamma ff gamma ff piff gamma piff gamma gamma fff gamma gamma pix gamma ff gamma piff gamma gamma pix gamma ff gamma piff 
domain free cube belonging class 
fi equality fi transitive symmetric closure fi relation fi extended contexts fi gamma delta fi gamma delta fi contexts transitive symmetric closure fi 
dene relation rules side condition 
indicates rule question included contains corresponding symbol rules marked 
included systems 
gamma gamma legal 
write delta oo 
oo oo oo 
domain free cube relations dened speak calculi depicted collectively known domain free cube 
abbreviations 
intuitively may view systems domain free cube domain free counterpart known typed calculi depicted table subsection 
simply typed calculus system second order calculus lf automath system considered system higher order calculus 
martin type theory universe 
calculus constructions 
systems subsection try provide intuitions systems domain free cube illustrate strength systems 

simplest system consists just rules fi 
rules 
system similar simply typed calculus la curry introduced subsection 
systems contain start rule introducing variables subsection left rule subsection rule 
rules exactly way 
formulation subsection contexts sets member context start rule 
contrast subsection contexts ordered sequences right member looked start rule 
weakening rule look variables left context formulated sequences 
side condition dom gamma subsection mirrored subsection stipulation gamma gamma dened domains gamma gamma disjoint 
side condition gamma axiom product rule 
lower left corner subsection ensure simple types simple types occur contexts 
simple types redexes follows conversion rule fi dependent systems 
show gamma delta system form pix free pix follows abstraction application rule subsection identical subsection 
system allows polymorphic functions dened 
example dene polymorphic composition pia 
polymorphic projections pia logical terms corresponds second order propositional logic curry howard isomorphism 
context formalization contexts ordered sequences captures usual side condition rule universal 

specication allows polymorphic higher order functions dened 
example gamma list nil piff list ff cons piff ff list ff list ff gamma gamma maplist pia list list derive polymorphic function object element list gamma ff cons ff nil ff piff ff list ff polymorphic function manipulates functions lists gamma maplist maplist pia 
list list 
specication power rst order predicate logic 
system closely related type system proof assistants automath alf elf acts framework formal systems dened 
example taken section introduces rst order arithmetic context 
base types respectively correspond arithmetic expressions logical formulae 
addition introduces usual operations natural numbers usual logical connectives 
theta oe context provides structure terms formulae rst order arithmetic encoded system 
context lacks structure build manipulate proofs 
section possible extend context proofs may encoded 
basic judgment form oe logical truth encoded context adding declaration true basic rules logic encoded context adding suitable declarations 
example left rule disjunction encoded pix true 
true note type declaration require dependent types 

specication combines dependent types polymorphism 
logical terms power second order predicate logic equality 
may polymorphism known impredicative encode usual connectives 
encoding operator denition type implication universal pix px pit truth pix falsehood pix conjunction pix disjunction pix 
negation 
existential pip pix pit 
leibniz equality pip 
py pit dene terms correspond standard natural deduction rules 
example pia note fundamental dioeerence predicate logic dened context logic system dened context 

system 
power higher order predicate logic 
dene polymorphic function forms conjunction predicates qx pia 
impredicative conjunction 

cps translation domain free cube section cps translations systems domain free cube 
carried rst subsection 
second subsection optimizing cps translations 

cps translation cube moves systems richer type structure immediately clear syntactic categories converted cps translation 
example domain free cube imagine non pervasive cps translation objects converted abstractions object level passed continuations pervasive translation objects constructors converted abstractions passed continuations 
presentation non pervasive translation motivated particular applications 
classical pure type systems systems control operator corresponding reductio ad rule appears object level 
needs convert objects embedding classical pure type systems traditional pure type systems 
similarly coquand herbelin method showing existence looping combinators compilation partial evaluation applications needs convert objects obtain associated cps 
denition cps translation 
dene cps translation functions ch delta deltai domain free cube clauses 
noted earlier translation objects plotkin original call byname translation untyped calculus see 
continuation passing occurs object level 
translation constructors kinds straightforward 
abbreviates 
distinguished arbitrary type variable answers 
top level translation ch delta objects kinds simply calls deltai 
constructors double negation added outer level 
assumptions answer variable added 
theorem establishes correctness translation 
theorem correctness cps translation gamma ch gamma chai ch proof sketch proceed steps show obj choi choi fi choi ii prove induction structure terms 
fi ogi cgi iii prove induction structure terms 
fi implies chai 
fi iv prove gamma ch gamma chai ch induction structure derivations 
objects oi choi cho choi cho oi ff choi cho ci choi constructors ff chc chc oi choi ci ff chc chc ch pix pix chc ch piff ci piff kinds hi ch pix ki pix ch piff piff chk contexts deltai delta ch gamma ci ch gammai ch gamma ff ki ch gammai ff top level translation ch choi ch ch ch ch gamma ch gammai :10.1.1.26.4391
call name cps translation domain free cube example illustrates cps translation applied context term object element list see section 
gamma cps list nil piff list ff cons piff ff list ff list ff gamma cps ff piff ff list ff nil ff cons ff note higher degree continuation passing obtain cps ing conventional call value program reasons 
ffl call name evaluation strategy encoded passed continuations 
ffl operations cons nil curried form continuations introduced function space 
monadic type systems provides framework distinguish values non values extended type system 
cps translation richer type system allows ner control continuation give specication avoids overly general continuations particular example 

optimizing cps translation discussing terms image cps translation convenient divide abstractions classes ffl source abstractions cps translated versions abstractions appearing argument cps translation 
abstractions form ff image translation source abstractions 
ffl administrative abstractions abstractions introduced translation manipulate continuations corresponding abstractions argument translation 
abstractions form administrative abstractions 
reducing cps term involves contracting administrative redexes redexes involving administrative abstractions 
write adm fi reduces contracting administrative redex 
ff ff ff ff ho hci 
optimizing cps translation domain free cube excerpts practical applications cps compiling partial evaluation optimizing version particular cps translation produces terms fewer administrative redexes :10.1.1.22.7509:10.1.1.42.4772
section optimizing version translation yields terms administrative normal form terms contain administrative redexes 
need consider cps translation objects continuations introduced category 
denition cps translation 
dene optimizing cps translation functions delta deltai domain free cube clauses 
presents translation objects translation remaining syntactic categories 
represents translation object continuation corresponding evaluation context appeared 
translation proceeds recursively transforming continuation administrative redexes 
depending form resulting continuation passed argument translation variable applied translation abstraction 
lemma optimizing cps translation cube terms cube gamma ffl chai adm hai ffl hai administrative normal form 
example illustrates optimizing cps translation applied term object element list context type example non optimizing translation 
gamma cps ff piff ff list ff cons ff nil ff contrast analogous term produced non optimizing translation term administrative redexes 

ds translation domain free cube section ds translation domain free cube maps continuation passing terms back direct style terms 
rules cube involve fi conversion ds translation able handle terms image cps translation terms fi convertible terms image cps translation 
systems cube church rosser suoecient reason language legal terms image cps translation closed fi reduction 
rst subsection presents cps pseudo terms gives rules deriving legal cps terms 
ds translation dened subsection 
subsection addresses relation cps ds translations 

language cps terms dene ds translation language cps cps terms 
denition cps pseudo terms contexts 
dene pseudo terms context grammar 
objects divided categories 
ffl computations pseudo objects continuations passed 
types objects double negated top level 
ffl values source abstractions dened 
types objects double negated top level 
terms computation value inspired presentations cps monads 
monadic framework computations values 
ffl arguments arguments source abstractions 
ffl answers pseudo objects answer type 
answer results passing value continuation passing continuation computation 
ffl continuations continuation abstractions passed values 
convenient divide cps language disjoint sets ffl computation bound source abstractions take computations arguments ffl value bound administrative abstractions take values formal parameters continuations ffl constructor bound source abstractions take constructors arguments ffl continuation bound administrative abstractions take continuations arguments 
rst sets countably innite 
continuation familiar property cps terms :10.1.1.22.7509
cps contexts include answer variable 
cps contexts contain constructor computation bound source abstractions 
unnecessary contexts contain value continuation identi ers bound administrative abstractions 
handled special cases dening legal terms 
ffl value bound immediately introduced don need appear contexts see rule 
ffl continuation needed types depend dene special purpose judgments gammai hk ci oe oe fans keep continuation separate rest context 
denition cps legal terms contexts 
figures rules deriving legal terms syntactic category cps language 
judgments answers continuations figures continuation special treatment context 
addition rules specic categories gives generic weakening conversion rules apply syntactic category 
conversion rules similar form show cases 
property states legal terms cps legal terms domain free cube 
property gamma gamma val arg con gammai hk ci oe gamma oe fans property states cps language contain image cps translation 
objects computations cps values cps ff arguments cps answers cps mk continuations cps constructors kinds constr cps ff ff pix piff kind cps pix piff computation ident cps value ident cps ff constructor ident cps continuation ident cps fkg contexts gamma contexts cps gamma gamma gamma ff 
cps pseudo terms computations gamma con gamma com gamma computation ident cps gammai hk ci ans gamma com gamma val piff gamma arg gamma com fff gamma val pix gamma arg gamma com fx ag values gamma com gamma con pix gamma val pix gamma ff com gamma con piff gamma val ff piff arguments gammai hk ci ans gamma arg gamma con gamma arg answers gammai hk cnt gamma val gammai hk ans gamma com gammai hk cnt gammai hk ans 
cps legal objects continuations gamma con gammai hk ci cnt gamma con pix gamma arg gammai hk cnt fx gammai hk cnt pix gamma computation ident cps gamma con piff gamma arg gammai hk cnt fff gammai hk cnt piff gamma computation ident cps 
cps legal objects continued constructors gamma knd gamma ff con ff ff gamma ff constructor ident cps gamma con gamma knd pix gamma con pix gamma ff con gamma knd piff gamma con ff piff gamma con pix gamma com gamma con fx ag gamma con piff gamma com gamma con fff gamma con gamma con gamma con pix gamma con gamma ff con gamma con piff kinds knd gamma con gamma knd gamma knd pix gamma knd gamma ff knd gamma knd piff 
cps legal constructors kinds weakening gamma gamma knd gamma ff ff gamma ff constructor ident cps gammai hk oe gamma knd gamma ff ki hk oe ff gamma ff constructor ident cps gamma gamma con gamma gamma computation ident cps gammai hk oe gamma knd gamma ci hk oe gamma computation ident cps conversion excerpts gamma con gamma knd gamma con fi gamma com gamma con gamma com fi val arg con oe fans 
cps weakening conversion rules property gamma ch gamma com choi ch gamma ch gamma con ch gamma ch gamma knd ch property states legal terms cps language closed reduction :10.1.1.26.4391
property gamma fi gamma val arg con gammai hk ci oe fi gammai hk ci oe oe fans 
ds translation cube presents ds translation domain free cps language domain free cube 
objects interesting aspect continuations translated call name evaluation contexts dened grammar 
evaluation contexts cube delta holes evaluation contexts lled translation cps answer syntactic category 
translation constructors kinds straightforward double negations removed translation continues substructures 
example illustrates interaction cps ds translation term easy induction structure terms shows inverse calculation illustrates interaction translations arbitrary terms ii fi dh cho cho chc com fi dh cho cho chc ans fi dh cho chc cnt dh cho com fi dh cho chc cnt fi dh chc cnt fi dhk cnt fi note contrast cps translation ds translation dened induction structure pseudo terms mapping domain full systems 
abstractions abstractions analogous administrative abstractions cps translations introduced ds translation required domain tags constructed translating tags appearing abstractions argument translation 
theorem correctness ds translation gamma dh gamma dh con 
proof sketch proof follows outline proof cps translation theorem 

interaction cps ds translations fi conversion principal notion equality cube consider interaction translations notion equality 
theorem states equational correspondence sabry felleisen direct style terms cps language :10.1.1.22.7509
theorem gamma sigma con 

fi 
fi ii 
fi ioe cha fi cha 
fi ioe dhp fi dhp optimizing cps translation equational correspondence theorem strengthened reduction correspondence 
noteworthy applications mind compilation partial evaluation inferring strong normalization weak normalization require relating ds cps reductions 
theorem reduction correspondence gamma sigma con 



fi ii 
fi implies cha 
fi cha objects com dhk ai com ans com val arg ai val dhk ai com ai val ff dhk ai com dhk ai arg dhk ai com arg con dhk vi ans cnt val ans cnt com cnt delta ki cnt cnt delta arg constructors con ff con con con con dhk ai com ci con ff con con con con dh pix con pix con con dh piff ci con piff knd con kinds dh pix ki knd pix con knd dh piff knd piff dhk knd dhk knd knd contexts dh 
delta dh gamma ci dh gammai con dh gamma ff ki dh gammai ff knd top level translation dh dh dh dh dh gamma dh gammai :10.1.1.26.4391
ds translation cube 
fi implies dhp 
fi dhp proof sketch proof similar proof analogous theorem untyped setting detail authors 

cps translations domain free pure type systems denition domain free cube contains certain amount redundancy 
product rules bottom rules similar fact may viewed instances general scheme 
similar said abstraction rules left gure application rules right gure 
possible presentation domain free cube having single rule product single rule abstraction single rule application parameterizing system considered 
section observation reviewing general notion domain free pure type systems 
development completely analogous classical development pure type systems barendregt berardi :10.1.1.26.4391
rst subsection introduce notion domain free pure type system 
second subsection show systems domain free cube viewed domain free pure type systems 
third subsection introduces notion logical specication due coquand herbelin captures common features specications cps translations may dened 
fourth subsection establish classication lemma provides main technical tool denition cps translations 
translation dened fth subsection 

specications domain free pure type systems parametricity achieved notion specication framework parameterized 
specications structures expressing dependencies type universes sorts 
denition specications 
specication triple 
set sorts 
theta set axioms 
theta theta set rules 
usual denote rules form 
concrete specications literature form shall see means products pix live universe role specications clearer subsection 
subsection assume xed specication 
presentation require variable underlying sort 
requirement reminiscent presentation domain free cube denition cps translation 
denition sorted variables 
vs brevity just leaving dependence implicit denote denumerable set variables partitioned countably innite sets ffl ffl ffl countably innite maintain sorted variables shall dene syntactic categories mutual recursion approach overly complicated arbitrary specications 
revert traditional formulation pure type systems single syntactic category expressions 
note cases shall able retrieve disjoint syntactic categories akin domain free cube classication lemma 
denition domain free pseudo terms 
set terms domain free pseudo terms syntax ranges ranges terms pix denote domain free pseudo terms denote variables denote sorts 
computational behavior domain free pure type systems expected 
denition domain free reduction 
notion fi reduction fi dened smallest compatible relation fi mfx ng fflg denotes obvious substitution operator 
turn typing relation domain free pure type systems 
denition domain free pure type system 
axiom delta start gamma gamma dom gamma weakening gamma gamma gamma dom gamma product gamma gamma gamma pix application gamma pix gamma gamma ag abstraction gamma gamma pix gamma pix conversion gamma gamma gamma fi 
domain free pure type systems 
set contexts domain free pseudo contexts syntax ranges ranges terms 
contexts gamma delta gamma gamma delta denote domain free contexts 
gamma xn write dom gamma fx xn say gamma ng 

domain free derivability relation triples gamma gamma contexts terms dened 
gamma gamma legal 
say judgment gamma derivable legal 

tuple terms contexts fi domain free pure type system induced domain free pure type systems enjoy properties pure type systems uniqueness types term may type single context uniqueness types fails 
refer reader detailed study theory domain free pure type systems 

domain free pure type systems vs domain free cube show recover formalism domain free pure type systems systems domain free cube choosing appropriate sorts axioms rules 
fact system domain free cube obtain corresponding domain free pure type system sets rules cube system rules corresponding specication 



elaborate detail 
set obj constr kind subset set terms 
show classication result stating gamma domain free pure type system 
obj theta constr 
constr theta kind 
kind theta 
notions objects constructors dened priori domain free pure type system notions derived typing system classication results form 
show 
obj theta constr 
constr theta kind 
kind theta gamma domain free cube system ioe gamma pure type system shows cube system corresponding domain free pure type system derive exactly judgments 
intuition unfolds inference rules pure type system rules obtains inference rules cube system 
rules start weakening fi conversion clearly identical 
rule identical axiom chosen 
product rules correspond instances rule product 
rules determine generalized function spaces may formed nature 
note domain free cube assumption missing product rules compared domain free pure type system 
instance product rule 
assumption gamma missing 
due disjointness syntactic classes cube show gamma fact gamma general setting domain free pure type systems priori distinction categories assumption necessary 

application rules correspond rule application dioeerent products 

abstraction rules correspond instances rule abstraction dioeerent products 
note domain free cube assumption missing abstraction rules compared domain free pure type system 
instance abstraction rule 
assumption gamma pix missing 
domain free system assumption prevent invocations abstraction rule products constructed rules cube obtained eoeect explicitly excluding inference rules instance cube system include rules labeled 

logical specications notion logical specication due coquand herbelin captures features specications possible dene cps translations 
review notion logical specication introduce class locally persistent specications cps translations may dened 
denition 

specication functional partial functions ffl ffl 
logical specication quadruple prop functional specication prop sort exists prop prop prop prop prop 
logical specication prop locally persistent prop prop 
logical specication prop non dependent locally persistent prop prop examples non dependent logical specication include specications left hand side cube specications cubes hol gamma :10.1.1.56.7045:10.1.1.26.4391:10.1.1.26.4391
specications right hand side cube 
examples dependent locally persistent specications 
generally logical specication rules form locally persistent 
specication logical prop prop axiom second requirement violated :10.1.1.26.4391

injective specications classication lemma cps translations section rely classication expressions dioeerent syntactic categories fact classication built system considering priori classes objects constructors kinds 
subsection showed starting domain free pure type systems particular choice type system divide pseudoterms dioeerent syntactic categories 
order scale cps translation domain free pure type systems generalize classication 
purpose introduce standard notions 
denition 
specication injective functional ffl ffl specications appearing literature injective 
speci cation uses rules form trivially satises conditions rules specication injective ioe injective partial function 
invite reader verify specications considered specications introduced injective :10.1.1.26.4391
specications formulate classication result direct consequence 
denition 
specication 
dene prp fm terms gamma prop gammag set fm terms gamma prf fm terms gamma gamma prop gamma ag elt fm terms gamma gamma gamma type prp set 
sequel assume types normalizing type wn fi assumption needed ensure preservation sorts gamma gamma fi turn needed proof classication 
proposition classification injective type wn fi prp set prf elt 
cube possible strengthen result dening pairwise disjoint decidable syntactic classes terms contain classes 
purpose conciseness limit weak form classication 

cps translations domain free pure type systems section dene cps translation injective locally persistent logical specication types weakly normalizing 
worth pointing technical hurdle scale cps translations 
sake brevity basic translation 
optimized direct style translations generalized similar fashion 
denition 
injective locally persistent logical specication type wn fi domain free cps translation dened 
provides compact alternative cps translation cube instantiating prop prf constr cube 
denitions ae prop ae prf chm ae chm chm prf ch pix bi pix ch ch ch ae prp ch prop ch gamma ch gamma ch 
cps translation domain free pure type systems exactly identical dened pseudo terms dioeerence importance primarily interested typed terms 
method theorem proposition proves theorem gamma ch gamma chai ch note assumption specication locally persistent needed application rule 
envisage generalize cps translation directions ffl consider larger classes logical specications requiring specication injective 
little incentive translation specications interest injective 
may cps translation summarized subsection relationship domain free pure type systems domain full pure type systems summarized subsection achieve desired translation 
ffl consider general notion logical specication universes propositions allowed 
fact generalization natural programming logical perspectives 
checked details expect scaling cps translation suitably dened extension class locally persistent specications 

cps translations domain full pure type systems domain free pure type systems appear appropriate purpose dening cps translation strong reasons study cps translations traditional setting traditional pure type systems 
primary reason sociological nature traditional pure type systems better established domain free counterpart existing cps translations phrased terms domain full systems 
second reason practical nature number applications interested domain full systems 
applications range looping combinators inconsistent pure type systems compilation typed intermediate languages 
section embark dening cps translations traditional pure type systems 
methods considered ffl direct method relies non standard induction principle inspired earlier dowek huet werner see 
ffl indirect method relies close correspondence traditional pure type systems see 
section organized follows 
rst subsection outline main denitions domain full pure type systems 
second subsection relate domain full domain free pure type systems 
third subsection exploit relation dene cps translations indirect method 
fourth subsection dene cps translations direct method 
fth subsection summarize dioeerent approaches dene cps translations 
conciseness limit plotkin style un optimized cps translation 
translations optimized direct style treated likewise 

domain full pure type systems pure type systems dened essentially way domain free pure type systems 
dioeerence feature domain full abstraction form rest subsection denotes arbitrary specication 
denition pure type systems 

set terms pts syntax terms pts pix 
set contexts pts syntax contexts pts gamma delta gamma axiom delta start gamma gamma dom gamma weakening gamma gamma gamma dom gamma product gamma gamma gamma pix application gamma pix gamma gamma ag abstraction gamma gamma pix gamma pix conversion gamma gamma gamma fi 
pure type systems 
fi reduction fi dened smallest compatible relation closed rule fi mfx ng 
pure type system derivability relation rules 
notation terminology conventions employed domain free pure type systems 

domain full pure type systems vs domain free pure type systems subsection relate derivability domain full pure type systems derivability domain free pure type systems 
results subsection come 
subsection xed specication 
trivial dene map domain full pseudo terms domain free pseudoterms 
denition erasure 
erasure map terms pts terms dened follows jxj jsj jt uj jtj juj jx tj jtj pix bj pix jaj jbj erasure preserves typing 
proposition gamma gammaj jm jaj 
dioecult dene decorating function inverse erasure maps domain free judgments domain full judgments 
proposition assume functional type wn fi delta exists gamma contexts pts terms pts gamma gammaj delta jm jaj exact description decoration process proof proposition 
indicate decoration process works 
clearly crucial case abstraction rule gamma gamma pix gamma pix assume decorations gamma gamma pix construct decoration gamma pix term treat simply decorate respective decorations suitable contexts 
induction hypothesis auxiliary results shows typing preserved 
sake completeness note decoration needs context dependent 
dene map dec terms terms pts terms gamma dec gamma dec dec dec extended obvious way contexts 
dene map 
consider term map dec mentioned properties satisfy dec judgments derivable case needs case 
contrast problem context dependent decoration examples decorated respectively 
indirect method subsection scale domain full ptss domain free cps translation subsection 
injective locally persistent logical speci cation type wn fi 
note type wn fi implies type wn fi 
indirect method consists factorizing cps translation domain full pseudo context gamma domain full pseudo term steps 
erase domains abstractions obtain domain free gammaj domain free pseudo term jm 
translate gammaj ch gammaj jm ji 
ch gammaj decorate abstractions ji obtain domain full pseudo term picture indirect method represented follows terms pts erase fflffl terms pts terms cps terms decorate oo symbolically dene gamma terms pts terms pts dec ch gammaj ji dec delta decoration delta proposition 

direct method subsection family cps translations preserve typing act domain full pseudo terms 
precisely dene family partial maps gamma terms pts terms pts gamma pseudo context 
denition proceeds founded induction pairs gamma gamma pseudo context pseudo term preserves typing applies pure type systems appear literature 
sake conciseness gloss technical details including denition order oe limit informal description order 
firstly oe contains subterm relation dened pairs gamma obvious way 
cps translation proceed induction structure pairs gamma gamma pseudo context pseudo term 
take example context gamma variable sort translated suitable cps translation preserve typing related cps translation gamma type gamma 
order denition translation satisfy gamma gamma oe gamma gamma take normal form resulting order oe founded systems appear literature 
denition 
gamma legal terms pts legal terms pts dened 
translation dened locally persistent logical specications oe founded 
specications theorem gamma ch gamma gamma hmi gamma 
assessment closing section worth noticing number variations cps translations dened domain free cube domain free ptss domain full ptss 
ffl syntactic type classication 
translation terms types dioeerent means distinguishing notions 
done syntactically dividing pseudo terms various categories categories pseudo objects constructors kinds domain free cube types dividing legal terms various categories categories prp set prf elt domain free ptss 
ffl context dependent independent classication 
type classication done independently context categories prp gamma hxi ae nf gamma hdi gamma prop gamma hsi gamma hx mi ae nf gamma hdi gamma hai gamma hmi gamma gamma hmi gamma prop gamma hm nf gamma hdi gamma hmi nf gamma hd gamma hm gamma hmi gamma hm gamma prop gamma gamma pix bi pix gamma gamma gamma ae gamma hmi gamma hmi gamma prop nf gamma hmi gamma hnf mi ch prop ch gamma ch gamma gamma 
domain full cps translation domain free ptss depending context checking gamma prop translation domain full ptss 
ffl context dependent independent translation 
cps translation uses type context dependent classication translation parametrized context 
translation reconstructs types domain full cps translation translation parametrized context 
various translations related results proposition gamma jc gamma hmi ji 
proof induction structure derivations 

directions generalized important cps translations classes pure type systems domain free pure type systems 
knowledge cps translations rst kind handle systems dependent types 
believe research avenues deserve attention sake clarity distinguish pure cps questions applications oriented questions 

pure cps questions fundamental question left open role normalization denition cps translations 
translations require types normalizing hope device cps translations rely assumption 
unfortunately unable come translations far 
important question limitations cps translations 
translations apply pure type systems appear literature extended readily sigma types usual translation pairs preserve typing 
similar appear inductive types standard class strictly positive inductive denitions closed cps translation 
class positive inductive denitions closed cps translation interesting study cps translations typed calculi positive inductive types 
limitations cps translations fact deeply connected inherent extracting computational content impredicative classical predicate logic axiom choice non conservativity results impredicative constructive predicate logic axiom choice 
positive side try build results ffl natural objective recast existing cps translations framework pure type systems domain free pure type systems 
priori techniques introduced general purpose expect 
particular worth exploring fischer style cps translations continuations rst arguments functions pure type systems 
sabry felleisen illustrate cps terms produced translations slightly dioeerent reduction properties produced plotkin style translations :10.1.1.22.7509
may applications ffl order enhance generality approach envision generic staging monadic metalanguage danvy 
preliminary step direction monadic type systems generalize simply typed metalanguage way pure type systems generalize simply typed calculus 

application related questions applications sketched give obvious directions 
ffl trends compilation emphasize typed intermediate languages sophisticated type structures 
worth apply results line remarks section 
ffl strong normalization weak normalization far klop conjecture remains open systems dependent types 
investigation needed determine tools developed lead successful solution conjecture 
authors solve conjecture called generalized non dependent pure type systems pervasive cps translation 
falls short treating systems dependent types ffl classical pure type systems important objective suitable generalization kreisel friedman theorem provides foundation extracting computational content classical proofs 
applications related consistency strong normalization partially achieved 
acknowledgments coquand useful discussions grateful referees comments suggestions 
part performed rst author working cwi amsterdam netherlands chalmers university teborg sweden 
rst author partially supported european tmr fellowship 
second author partially supported united states national science foundation ccr united states national aeronautics space administration nasa award nag 
notes 
assume reader familiar notions free bound variables related :10.1.1.26.4391

omit prex fi 

reader may wonder intuition property modi cation plotkin translation comes issues explained length 

discovery followed lines classical logic control operators curry howard initiated independently 
possible explain aims achievements individual lines see 

consistency classical minimal propositional logic course proved method truth tables 
method scales logics truth table method apply 

abstractions domain pure type systems motivated history type systems adopted abstractions practical considerations abstractions necessary type checking decidable 

presentation equivalent original sketched subsection 
distinguish systems corresponding systems barendregt cube introduced 

claim implicitly relies view pure type systems correspond known typed calculi 
issue studied detail 

appel 
compiling continuations 
cambridge university press 

augustsson 
cayenne spice programming dependent types 
proceedings icfp 

barendregt 
lambda calculus syntax semantics 
north holland 

barendregt 
lambda calculi types 
abramsky gabbay maibaum editors handbook logic computer science pages 
oxford science publications 
volume 
barthe rensen 

glaser hartel editors proceedings ninth international symposium programming languages implementations logics programs number lecture notes computer science pages southampton united kingdom september 

barthe rensen 
cps translation applications cube 
danvy editor proceedings second acm sigplan workshop continuations number ns brics notes pages 

barthe rensen 
notion classical pure type system 
proceedings mfps volume electronic notes theoretical computer science 

barthe rensen 
weak normalization implies strong normalization generalized non dependent pure type systems 
submitted publication march 

barthe rensen 
induction principle pure type systems 
submitted publication march 

barthe rensen 
taxonomy cps ds translations 
technical report tr department computing information sciences kansas state university 

barthe thiemann 
monadic type systems pure type systems impure settings 
proceedings second workshop higher order operational techniques semantics ii gordon pitts talcott editors volume electronic notes theoretical computer science december 

barthe rensen 
domain free pure type systems 
nerode editors proceedings lfcs volume lecture notes computer science pages 

berardi 
type dependence constructive mathematics 
ph thesis university torino 

consel danvy 
better support static data aeow 
hughes editor conference functional programming computer architecture volume lecture notes computer science pages 
springer verlag 

coquand herbelin 
translation looping combinators pure type systems 
journal functional programming 

curry feys 
combinatory logic 
north holland 

danvy 
back direct style 
science computer programming june 

danvy filinski 
representing control study cps transformation 
mathematical structures computer science december 

danvy lawall 
back direct style ii class continuations 
william clinger editor proceedings acm conference lisp functional programming lisp pointers vol 
pages san francisco california june 
acm press 

dowek huet werner 
existence long fij normal forms cube 
geuvers editor informal proceedings types pages 

hughes thiemann 
type specialisation imperative languages 
proceedings acm sigplan international conference functional programming pages amsterdam netherlands june 
acm press 

felleisen 
calculi cs conversion syntactic theory control state imperative higher order programming languages 
phd thesis indiana university 

felleisen friedman 
control operators secd machine calculus 
wirsing editor formal description programming concepts iii pages 
north holland 

felleisen friedman kohlbecker duba 
syntactic theory sequential control 
theoretical computer science 

flanagan sabry duba felleisen 
essence compiling continuations 
programming language design implementation 

friedman wand haynes 
essentials programming languages 
mit press mcgraw hill 

gandy 
early proof normalization turing 
seldin hindley pages 

geuvers 
logics type systems 
phd thesis university nijmegen 

geuvers nederhof 
modular proof strong normalisation calculus constructions 
journal functional programming april 


girard 
interpr tation fonctionelle des dans arithm ordre sup 
phd thesis universit paris vii 


formulae types notion control 
conference record annual acm sigplan sigact symposium principles programming languages pages 
acm press 

de groote 
conservation theorem revisited 
bezem groote editors 
typed lambda calculus applications volume lecture notes computer science pages 
springer verlag 

harper honsell plotkin 
framework dening logics 
journal acm 
preliminary version appeared proceedings ieee symposium logic computer science pages june 

harper lillibridge 
explicit polymorphism cps conversion 
conference record annual acm sigplan sigact symposium principles programming languages pages 
acm press 

harper lillibridge 
type assignment cps conversion 
lisp symbolic computation 

harper mitchell 
type structure standard ml 
acm transactions programming languages systems 

harper morrisett 
compiling polymorphism intensional type analysis 
proc 
nd annual acm symposium principles programming languages pages san francisco ca jan 
acm press 

foundations partial evaluation functional programs computational 
symposium partial evaluation 
acm computing surveys press 

danvy 
generic account continuation passing styles 
hans boehm editor proceedings rst annual acm symposium principles programming languages portland oregon january 
acm press 

danvy 
computational formalization partial evaluation 
mathematical structures computer science 
special issue devoted selected papers workshop logic domains programming languages 
darmstadt germany 
may 

hindley seldin 
combinators calculus 
cambridge university press 

howard 
formulae types notion construction 
seldin hindley pages 

lawall thiemann 
sound specialization presence computational 
proceedings theoretical aspects computer software lecture notes computer science september 

longo moggi 
constructive natural deduction set interpretation 
mathematical structures computer science july 

meyer wand 
continuation semantics typed lambda calculi summary 
parikh editor logics programs volume lecture notes computer science pages 
springer verlag 

meijer peyton jones 
henk typed intermediate language 
proceedings acm sigplan workshop types compilation amsterdam netherlands june 

minamide morrisett harper 
typed closure conversion 
proc 
rd annual acm symposium principles programming languages pages st petersburg fla jan 
acm press 

murthy 
extracting constructive contents classical proofs 
phd thesis cornell university 

nielsen rensen 
call name cps translation binding time improvement 
mycroft editor static analysis symposium volume lecture notes computer science pages 
springer verlag 

peyton jones 
implementation functional programming languages 
prentice hall international 


peyton jones hall hammond partain wadler 
glasgow haskell compiler technical overview 
proceedings uk joint framework information technology technical conference keele 

plotkin 
call name call value calculus 
theoretical computer science 

prawitz 
natural deduction proof theoretical study 
almquist wiksell 

prawitz 
ideas results proof theory 
fenstad editor nd scandinavian logical symposium pages 
north holland 

rehof rensen 
delta calculus 
hagiya mitchell editors theoretical aspects computer software volume lecture notes computer science pages 
springer verlag 

reynolds 
interpreters higher order programming languages 
proceedings th acm national conference pages 
boston 

sabry 
note axiomatizing semantics control operators 
tech 
rep cis tr dept computer information science university oregon 

sabry felleisen 
reasoning programs continuation passing style 
lisp symbolic computation 

sabry felleisen 
continuation passing useful data aeow analysis 
proceedings programming language design implementation 

sabry wadler 
call value 
proceedings international conference functional programming 
april 

schmidt 
denotational semantics methodology language development 
allyn bacon 

seldin 
normalization excluded middle studia logica 

seldin hindley editors 
curry essays combinatory logic lambda calculus formalism 
academic press limited 

shao appel 
type compiler standard ml 
proc 
acm sigplan conference programming language design implementation la jolla ca usa june 
acm press 

shivers 
control flow analysis higher order languages 
phd thesis carnegie mellon university 

steele jr rabbit compiler scheme 
technical report ai tr articial intelligence laboratory massachusetts institute technology cambridge massachusetts may 

st 
normalization theorems full rst order classical natural deduction 
journal symbolic logic 

rensen 
strong normalization weak normalization typed calculi 
information computation february 

tait 
intensional interpretations functionals nite type journal symbolic logic 

tait 
realizability interpretation theory species 
parikh editor logic colloquium volume lecture notes mathematics pages 
springer verlag 

tarditi morrisett cheng stone harper lee 
til type directed optimizing compiler ml 
proc 
acm sigplan conference programming language design implementation pages philadelphia pa usa may 
acm press 


een analyse van 
manuscript dutch 

werner 
continuations evaluation styles types systems 
manuscript 

xi 
weak strong typed calculi 
de groote hindley editors proceedings tlca volume lecture notes computer science 
springer verlag 

hongwei xi frank pfenning 
eliminating array bound checking dependent types 
proceedings acm sigplan conference programming languages design implementation june 
