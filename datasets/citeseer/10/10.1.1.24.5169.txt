empirical analysis different levels meta evolution wolfgang peter dittrich markus wolfgang banzhaf department computer science university dortmund germany dittrich banzhaf ls cs uni dortmund de ls www cs uni dortmund de contribution analyze different levels meta evolution graph gp system 
system allows represent individuals search space genetic variation operators coherent way graph programs differing operator set 
variants meta evolution tested real world classification problems 
complex variant consists meta levels graph programs meta level recombine individuals search space base level graph programs meta level recombine programs meta level programs meta level recombine programs meta level 
results shows meta levels advantageous 
keywords genetic programming graph gp self adaptation genetic operators classification domain evolutionary algorithms ea long tradition adaptive genetic operators 
common established method self adaptation strategy parameter global frequency operator applications adaptation mutation variance es ep ga 
addition approaches dynamically adjust global interpretation representation heuristics 
methods allow adaptation crossover operators adjusting probability position chosen crossover point 
approach successfully applied gp 
gp implicit adaptation variation neutral variation genotype 
usually happens implicitly gp introns appear change probability useful region hit recombination 
variety methods explicitly manipulate genotype adfs adaptive representations automatic library generation explicitly defined introns module acquisition techniques 
methods genetic programming applied mechanisms variation operators represented programs 
focus contribution meta evolution recombination variation operators 
schemes adaptive operators may adapted analyzed empirically 
adaptation adaptation operators achieved adding additional evolutionary levels recursively applying variation operators 
operationalized expressing genetic operators graph programs may undergo evolution methods hierarchical recursive fashion 
describing variants meta evolution examine section introduces briefly graph gp system approach teller 
graph gp representations programs gp classified underlying structure major groups treebased linear graph representations 
teller graph gp 
form graph gp program represented directed graph nodes 
node outgoing edges 
node program parts action branching decision 
action part constant function executed node reached interpretation program 
environment program consists indexed memory stack transfer data nodes 
action function get inputs stack push output back stack 
action node executed outgoing edge selected branching decision 
decision branching function determines edge node information held top stack memory branching constant node 
nodes graph necessarily visited interpretation 
program special nodes start node 
start node node executed interpretation program begins 
node reached action executed program halts 
graph structure inherently allows loops recursion possible node reached interpretation 
order avoid program runs forever terminated certain time threshold reached 
system time threshold implemented fixed maximum number nodes executed interpretation 
action const 
branching const 
branching type 
action type parent parent child child left structure node graph gp program example node 
right crossover operation example graph programs 
recombination graph programs crossover operation combines genetic material parent programs swapping certain program parts 
node parent label ed fixed index algorithm recombination graphs applied recombination 
mark nodes parents exchanged 
operation performed random selection nodes meta operator explained 

label edges external connecting marked nodes unmarked nodes edges connecting unmarked nodes marked nodes 

replace nodes parent marked nodes parent 
marked node index replaces node index parent 
target parent contain node index node gets new index added parent 
modify external edges parent point randomly selected nodes parent exchanged 
method assures edges connected child graphs valid graphs generated 
shows example crossover method 
variants meta evolution explore different variants meta evolution system consists different levels called task level meta level meta level meta level 
level consists population graph programs programs task level solve desired problem 
programs meta levels variation operators 
variants empirically investigated fig 
variant random conventional gp approach individuals recombined exchanging randomly chosen sub components 
demes individuals solve different classes classification problems 
individuals called task programs distinguish individuals higher levels explained 
variant meta random variant second population gp programs exists 
individuals called meta operators population meta level 
task programs recombined meta operators 
meta operators turn recombined random recombination variant 
variant meta self variant meta operators recombined 
variant meta random variant meta operators recombined meta operators 
meta operators form third population meta level recombined random recombination operator 
variant meta self variant meta operators recombined meta operators 
meta operators form third population meta level recombined 
random recombination task random deme deme deme task level recombination meta level deme deme deme meta random deme deme deme task level self recombination meta level deme deme deme meta self deme deme deme task level recombination meta level meta level deme deme deme meta random deme deme deme task level meta level meta level deme deme deme meta self self recombination deme deme deme task level meta level recombination meta level meta level deme deme deme meta random deme deme deme task level meta level self recombination meta level meta level deme deme deme meta self deme deme deme task level system structure different recombination variants 
variant conventional gp approach variant task level recombine programs task level task level recombined random recombination 
variant variant meta operators recombined 
variant meta level recombine programs meta level operators meta level recombined random recombination 
variant variant operators meta level recombined 
variant meta level recombine programs meta level operators meta level recombined random recombination 
variant variant operators meta level recombined 
variant meta random variant meta operators recombined meta operators 
meta operators form fourth population meta level recombined random recombination operator 
variant meta self variant meta operators recombined meta operators 
meta operators form fourth population meta level recombined 
sections describe structure evolutionary system different levels detail 
task level task level holds population task programs solve desired test problem classification problem 
task meta level population subdivided sub populations called demes 
number demes depends number classes distinguished 
demes needed speaker identification problem sec 
demes cancer diabetes problem demes gene problem 
task programs deme responsible classify input data class correctly 
task program task belonging deme represents mapping task input min max input represents set input data classified 
output number interpreted confidence value 
high value value task interpreted input belongs probably class variation selection task level selection method task level tournament strategy 
variation method depends variant variant uses random recombination applies random mutation maximum nodes program recombination 
recombination rate mutation rate means program task level recombined mutated generation 
variants recombination randomly chosen meta operators meta level 
mutation performed explicit mutate instruction part meta operator set meta programs 
meta levels meta operators enable gp system find suitable recombination method automatically 
meta operator meta represents mapping meta theta theta set programs task programs meta operators 
fitness function meta levels goal meta operator respect underlying level gamma population maximize fitness meta gamma programs meta operator tested allowing perform recombination program underlying level 
meta operator called operator edmonds smart operator teller task programs case fitness value function relative fitness programs parents fitness programs produces descendants children 
compute fitness generation evolutionary algorithm relative fitness increase meta operator able cause programs underlying level generation accumulated measure omega algorithm describes fitness calculation meta level equivalent meta levels 
algorithm represents loop generation offsprings generated 

reset counters omega gamma 
select parents task task task level meta operator meta meta level randomly 

create offsprings applying meta operator parents task task meta task task 
meta meta cj task cj task pj task pj task fitness child corresponding parent respectively 
fitness cj better parents fitness pj omega gamma meta omega gamma meta cj max pj fmax gamma meta meta fmax maximal fitness program reach 
goto task programs created form generation 

fitness meta operator defined meta meta meta meta omega gamma meta means meta operator children better fitness parents 
representation operator set meta levels meta operator programs marking nodes parents step recombination algorithm sec 

perform task meta operator needs ability examine input programs sufficient detail 
provide individuals special action functions functions individual examine input individuals 
execution meta operator environment contains additional element current node program node meta operator currently works 
meta operator executes graph program parent task independently task meta operator executed new child programs created exchanging marked nodes algorithm sec 

parent marked node meta operator receives fitness random crossover executed 
meta operators study mark subset nodes mutated recombination 
recombination process meta operator combination crossover mutation operation 
selection method meta levels tournament selection 
variation method depends variant described sec 

test problems different classification problems test problems 
test problem speaker identification problem classification problems chosen form proben benchmark set 
speaker identification speaker identification problem considered study identify person set persons speech samples 
raw sound data sampled khz bit format 
fast fourier transformation done msec window weighted hamming window 
windows overlapping 
spectral vector dimension computed fft spectral vectors triangle filter 
spectral vectors different word groups speakers received task programs inputs identify input word group speaker belongs specific class speaker 
input data identification task consist different words form class task program identify speaker speech sample seconds 
fitness function fitness function uses return values input set determine fitness value individual 
return value individual number min gamma max 
normalised return value interpreted measure probability 
return value high individual associated class input sample identified belonging class combining identification result programs associated different classes possible identify speaker input 
fitness task task program task associated class fitness cases computed task gamma task gamma task return value program executed input ae subset fitness cases containing samples class nc number classes 
operator set task level task level programs need ability examine input data spectral vectors sufficient detail order perform task 
various functions operate directly input vectors 
function read values special position input sample compare values input data calculate average difference input values 
programs opportunity store vector input data compare input 
words programs identify speaker vectors 
distinguishes method classical solutions speaker identification problem 
stack indexed memory store dimensional real values execution program 
task programs action function set consists arithmetic functions comparison functions functions examine input data reading value frequency calculating average value vector 
proben benchmark set proben benchmark set contains datasets neural network training 
proben contains data sets form different domains 
contribution chose classification problems data set diabetes data set cancer data set gene data set 
fitness function fitness function uses return values input set determine classification rate fitness value 
return value individual number min gamma max 
normalized return value interpreted measure probability 
return value high individual associated class input sample identified belonging class combining identification result programs associated different classes possible identify speaker input 
fitness task task program task associated class fitness cases computed task task task task task return value program executed input ae subset fitness cases containing samples class nc number classes 
operator set task level task level programs programs various functions operate directly input vector 
current input vector stored register set 
programs read registers opportunity store vector input data comparison input 
stack indexed memory store dimensional real values execution program 
task programs action function set consists arithmetic functions comparison functions functions examine input data 
results section describe effects variants task random meta random meta self meta random meta self meta random meta self recombination 
speaker problem task level contains programs deme maximum allowed number nodes set nodes 
meta population contains operators deme maximum number allowed nodes set nodes 
meta population contains operators structure meta operators 
meta population contains operators structure meta operators 
generation programs tested randomly chosen examples training set stochastic sampling 
problems task level contains programs deme maximum allowed number nodes set nodes 
meta population contains operators deme maximum number allowed nodes set nodes 
meta population contains operators structure meta operators 
meta population contains operators structure meta operators 
generation programs tested randomly chosen examples training set stochastic sampling 
gene problem nearly runs reached percent correct classification fitness cases generations differentiate different meta variants 
fitness shows progression fitness values 
shows advantage meta random meta self recombination task random 
results confirm speaker identification problem self recombination meta level lower performance complies results 
cancer diabetes problem significant difference performance meta variants 
despite high standard deviation variant meta self lower performance variant meta self 
may taken indication self application operators meta level preferable self application meta level 
evidence third meta level increases performance 
speaker problem performance decrease observed 
experiments show meta evolutionary methods performing better random crossover 
meta self crossover method worst performance 
speaker identification problem worse random recombination method 
meta self variant best performance 
system meta levels self recombination second meta level meta self recommended experiments 
deme oe deme oe deme oe deme oe rand meta rand meta self meta rand meta self meta rand meta self table best fitness values deme generation averaged runs including standard deviation speaker problem 
deme oe deme oe rand meta rand meta self meta rand meta self meta rand meta self deme oe deme oe rand meta rand meta self meta rand meta self meta rand meta self table best fitness values deme generation averaged runs standard deviation oe 
left diabetes problem 
right cancer problem 
summary outlook tested performance meta recombination different meta levels apply gp find better recombination scheme 
shown possible create gp system fixed recombination operator system create individuals better fitness 
experiments self recombination meta level smallest effect evolutionary process speaker identification problem reduces performance 
self recombination meta meta level works 
variants meta self speaker problem find recombination scheme better time generation speaker average fitness random meta self meta self rand meta rand meta self meta rand meta self meta rand meta self time generation speaker best fitness random meta self meta self meta self rand meta rand meta self meta rand meta self meta rand meta self time generation diabetes average fitness random meta random meta self meta random meta self meta random meta self rand meta rand meta self meta rand meta self meta rand meta self time generation diabetes best fitness random meta self meta self meta self rand meta rand meta self meta rand meta self meta rand meta self time generation cancer average fitness random meta random meta self meta random meta self meta random meta self rand meta rand meta self meta rand meta self meta rand meta self time generation cancer best fitness random meta self meta self meta self meta self meta rand rand meta rand meta self meta rand meta self meta rand meta self results speaker problem runs oe cancer problem middle runs oe diabetes problem runs oe 
random recombination 
variant meta self performance test problems 
third meta level useful 
say general phenomena genetic programming experiments run variety test problems different representations task programs meta operators 
support provided dfg deutsche forschungsgemeinschaft ba sfb 
bibliography angeline pollack 
coevolving high level representations 
langton editor artificial life iii pages reading ma 
addison wesley 
angeline 
self adaptive crossover operations genetic programming 
angeline kinnear jr editors advances genetic programming ii pages 
mit press cambridge ma 
th 
back 
self adaptation genetic algorithms 
varela bourgine editors proceedings artificial life pages 
mit press cambridge ma 
banzhaf dittrich 
hierarchical genetic programming local modules 
proc 
intl 
conference complex systems nh press 
banzhaf nordin keller 
genetic programming automatic evolution computer programs applications 
morgan kaufmann san francisco und verlag heidelberg 
lawrence davis 
adapting operator probabilities genetic algorithms 
david schaffer editor proceedingsof rd international conference genetic algorithms pages george mason university june 
morgan kaufmann 
peter dittrich wolfgang banzhaf 
self evolution constructive binary string system 
artificial life 
edmonds 
meta genetic programming evolving operators variation 
cpm report manchester metropolitan university 
damper 
vq score normalisation text dependent text independent speaker recognition 
audio video biometric person authentication pages 
international conference 
fogel fogel atmar 
meta evolutionary programming 
chen editor proceedings th asilomar conference signals systems computers pages pacific grove california 
hitoshi iba hugo de garis 
extending genetic programming guidance 
angeline kinnear jr editors advances genetic programming ii chapter pages 
mit press cambridge ma 
dittrich banzhaf 
meta evolution graph gp 
second european workshop genetic programming goteborg may accepted 
koza 
genetic programming 
mit press cambridge ma 
john koza 
spontaneous emergence self replicating evolutionarily self improving computer programs 
langton editor artificial life iii pages 
addison wesley reading ma 
keith mathias darrell whitley 
remapping hyperspace genetic search canonical delta folding 
whitley editor proceedings second workshop foundations genetic algorithms pages san mateo july 
morgan kaufmann 
nordin 
compiling genetic programming system directly manipulates 
jr kinnear editor advances genetic programming 
cambridge mit press 
riccardo poli 
evolution graph programs parallel distributed genetic programming 
thomas back editor genetic algorithms proceedings seventh international conference pages michigan state university east lansing mi usa july 
morgan kaufmann 
prechelt 
proben set neural network benchmarking rules 
technical report university karlsruhe 
rosca ballard 
learning adapting representations genetic programming 
proceedings ieee world congress computational intelligence orlando florida usa orlando florida usa june 
ieee press 
rosenberg 
simulation genetic populations biochemical properties 
phd thesis university michigan 
schaffer 
adaptive crossover distribution mechanism genetic algorithms 
proc nd int 
conf 
genetic algorithms applications pages 
schaffer 

schwefel 
evolution optimum seeking 
wiley new york 
craig 
strategy adaptive representation genetic optimizer technique 
john grefenstette editor proceedings nd international conferenceon genetic algorithms applications pages cambridge ma july 
lawrence erlbaum associates 
teller 
evolving programmers evolution intelligent recombination operators 
angeline kinnear editors advances genetic programming ii 
mit press 
teller veloso 
pado new learning architecture object recognition 
symbolic visual learning pages 
oxford university press 
whitley mathias 
delta coding iterative search strategy genetic algorithms 
rick belew booker editors proceedings fourth international conference genetic algorithms pages san mateo ca 
morgan kaufman 
annie wu robert lindsay 
empirical studies genetic algorithm non coding segments 
evolutionary computation 

