integrated testing technique component software main idea component development existing components building software 
resulting software features complicate testing feature example absence component source code 
article proposes approach testing explicitly takes account testing relevant features component software allows rigorous testing 
basic constituent approach graphical representation combining black white box information specification implementation respectively 
graphical representation test case identification known structural techniques 
testing important phases software development 
phase program test executed reveal faults detecting failures debugging techniques applied isolate remove faults 
obviously techniques various tasks depend tools techniques methodologies develop software test 
article proposes approach testing componentbased software 
takes special heed features type software absence component source code subset provided component functionality middleware dependency component integration state depend component behavior :10.1.1.37.6391
section introduce simple example explain testing approach 
example consists simple application called making deposits withdrawals bank accounts 
consists main component component called account middleware component required interaction main compo sami volker university dortmund computer science department software technology dortmund germany sami volker uni dortmund de initial ready final account true id balance deposit amount true balance amount withdraw amount amount balance balance amount balance true return balance remove true home remove 
specification account component component state machine 
nent account component 
section explains graphical representation test case generation 
section gives brief overview related 
section summarizes shows directions 
demonstrative example account component name suggests account component simulates bank customers account 
encapsulates id account balance provides suitable methods check alter 
shows specification component 
approach specification component special finite state machine called component state machine csm similar class state machines described hong 
main difference class state machine component state machine transitions component state machine augmented java code allow automatic generation executable prototypes event types shown 
states component rep resented circles transition depicted arrow leading source state target state 
transitions formally specified tuples transition consists addition state causing transition predicate fulfilled transition occur defining operations component variables transition 
mentioned transition defined java statements automation purposes 
depicted csm includes special circles labeled 
circles represent state component creation destruction respectively 
represent states component variables values defined meaning states real states component 
furthermore hong proposed introducing state representing state class error occurred 
figures state omitted sake clarity 
components supposed enter state occurrence event specified particular state fulfill guards 
account component initialized enters state ready receive deposit withdrawal requests 
deposit request account component remains state 
withdrawal requests imply change state entered clients account component try account 
account component provides observer method called balance checking account balance 
change state triggered invoking remove method 
method correspond finalize destructor method invokes appropriate method middleware destroys account component 
specification account component account modeled java object having attributes id balance 
middleware component system implemented enterprise javabeans technology sun microsystems 
enterprise javabeans specification defines component architecture building distributed java applications 
component enterprise javabeans technology called bean encapsulated server addresses multithreading resource pooling clustering distributed naming automatic persistence remote invocation transaction boundary management distributed transaction management 
java sun com products ejb initial final capacity capacity available limit true int capacity new hashtable capacity finalize true finalize true create id balance id size capacity ac new account id balance put id ac remove id id remove id id id return get id create id balance id size capacity ac new account id balance put id ac remove id id remove id id id return get id 
component state machine simple enterprise javabeans server 
testing system csm specifies small subset features enterprise javabeans server provides 
csm depicted models resource pooling functionality enterprise javabeans server 
important features automatic persistence remote invocation omitted sake simplicity 
simple server example possesses main states 
assuming simple server provide automatic persistence functionality enters state invocation initialization 
server maintains pool store account beans 
pool limited capacity state server changes state creating certain number beans server provides method change state 
selects particular account identified id pool 
specification uses hashtable object pool defined java util package 
main component contains specification main component 
assuming persistency addressed main component enters state initialization 
state indicates note simple example activation beans considered 
initial account available final account available main true home new ac null exit true exit true id balance true ac home create id balance id true ac home id ac balance ac remove ac null id true ac home id amount true ac deposit amount amount true ac withdraw amount 
specification main component component state machine 
certain account referred ac exist 
state changed creating new account 
case state entered 
similarly state entered account referred ac removed method 
main component provides method selecting accounts pool 
invocation method state main component changes state state account considered removed remains state 
state change case considered account changes 
methods provided component change state 
change balance existing account 
balance referred account influence state methods change 
state entered various situations 
situations distinguished groups 
error occur trying access account exist trying remove account empty 
implementation system account component implemented stateful session bean 
persistence component ensured enterprise javabeans server database jdbc 
enterprise javabeans server example bea weblogic server 
proposed technique tailored special technology 
information required specification middleware 
source code account component available necessary files bea weblogic server websites copies files source code main component authors website description testing technique component software flow graph basis proposed technique graphical representation component software called componentbased software flow graph visualizing information gathered specification source code similar class control data flow graphs proposed 
having generated graphical representation known techniques structural testing applied representation identify test cases 
test cases black box testing determined simultaneously considering strategies separately 
building starts transforming transition nested ifthen construct shown predicate source state guard guard action action throw new throw new predicate source refers predicate source state predicate component variables defining occurrence state 
instance predicate ac null 
transforming transition corresponding construct having event type combined prototype 
instance transition transition share event type create 
asa result prototype obtained id balance predicate id size capacity ac new account id balance put id ac id size capacity www weblogic com docs examples ejb basic index html ls www cs uni dortmund de ac new account id balance put id ac throw new throw new step consists constructing control flow graphs generated prototypes combining component source code 
reason working automatically generated prototypes due simple pre defined structure permit identification data flow defined specification corresponding component 
generally possible identify specified data flow source code require semantically comparison statements provably decidable 
explained directed graph visualizing control data flow component software 
method main component represented sub graphs 
sub graphs represents control flow graph prototype generated basis specification represents control flow graph determined source code method 
contrary method main application method component represented flow graph visualizing prototype 
reason obvious control flow graph method built source code available 
sub graphs interlinked control data flow edges 
types control data flow edges distinguished 
intra method control data flow edges intra method control data flow edges visualize control data dependencies single sub graph 
instance intra method data flow edge connects node representing definition variable node representing method 
intra method control flow edges drawn thin arrows intra method data flow edges omitted 
inter method control data flow edges edges type model control data flow subgraphs type 
instance invocation method modeled inter method control flow edge leading node representing invoking statement method node representing entry statement second method 
similarly inter method control flow edge models triggering event csm action part transition csm 
inter method control flow edges connect method control flow graphs prototype control flow graphs 
contrary control flow edges inter method data flow edges connect nodes prototype control flow graphs 
objective prototypes ease identification definitions uses component variables mutual association 
inter method data flow edges required method control flow graphs 
shown bold gray arrows note inter method data flow edges represent def pairs omitted 

specification implementation edges type edge visualizes connection specification source code connecting subgraphs main component methods 
edge leads node representing action prototype node representing entry node method 
specification implementation edges drawn dashed arrows 
statements represented rectangles interlinked control data flow edges 
number outgoing control flow edges depending statement represented node 
node representing predicate statement outgoing edges labeled rue alse indicate path taken corresponding result boolean expression 
nodes outgoing control flow edge number outgoing data flow edges vary number variable defined node 
graph possesses special nodes labeled event loop exit 
nodes take account event driven nature example 
generating test cases generating test cases main component remainder article data flow criterion sake simplicity 
proposed technique restricted single data flow criterion criteria including control flow criteria 
step test case generation definitions uses variables identified associated 
associating definitions uses local variables methods carried considering source code 
contrary associating local definitions uses associating definitions uses component variables take account possible method sequences defined appropriate csm 
definition associated method including invoked invocation method including definition 
important ensure component variable redefined 
instance definition variable ac action transition associated variable guard imply note switch statement java transformed nested construct 
exit error error error account remove error error error error error main error error error error event loop intra method control flow edge inter method control flow edge specification implementation edge inter method def pair control flow graph method frame method error error error error error error error error error error error create remove deposit withdraw error error error error error error error error error error error exit 

component software flow graph 
invoke twice ensure correct order definition 
defined state main component enter state second invocation 
definition action tested guard invoking 
shows definition pairs main component induced definitions criterion 
covered test cases main exit main exit main exit 
generating test cases account component source code account component available white box testing carried 
black box testing performed exactly way main component 
definitions uses control flow graphs prototypes associated definitions criterion 
test cases generated covering def pairs 
significant difference test case generation main component account component 
account component context main component valid method sequences tested 
account component invoked main component subset functionality provided account component 
definition pairs covered context data flow occur context 
need test functionality required specific context 
instance deposit balance valid test case testing definition component variable balance action valid current context system provide functionality check account balances 
need test interaction methods deposit balance 
balance invoked main component guard omit testing method 
account possible method sequences system def pairs covered order fulfil definitions criterion tested test cases main exit main exit main exit 
generating test cases middleware test case generation middleware component carried exactly way account component 
test cases need identified fulfill criterion 
test middleware appropriately def pairs covered test cases test cases executing def pairs main exit main exit main exit main exit main count exit generating test cases integration test important task test interaction main component account middleware components 
main component tested test cases generated black box testing 
main difference black box testing main component integration testing test cases repeated possible state components covered 
integration test main component account component require new test cases possesses state 
state entered initializing component done test case invoking 
contrary account component middleware component requires generating new test cases 
middleware component enter states 
integration test performed test cases main component difference parameters passed 
test state capacity parameter greater 
case capacity parameter set exactly order enter state creating account 
related components classes share properties allow application class testing techniques component testing 
assuming components internal state classes limited extend state class testing approaches component testing 
approaches state class testing rely finite state machines 
generated source code class specification 
generated finite state machine example identify test cases fulfill coverage criteria 
techniques require formal class specification 
examples techniques basing formal specifications 
years testing components componentbased software considered 
general issues testing components component software discussed :10.1.1.37.6391
theoretic investigation component software testing focuses adequacy problem test case sets 
approach testing components described 
article explains component testing approach microsoft research 
integration testing components addressed theoretic point view 
technique addressing issue testing entire component system 
technique addressing issue described 
usually debugging phase conducted detecting failure certain situations 
isolation faults component software mainly consists described 
article proposed graphical representation permits generating test cases black white box testing component software 
specifically takes account testing relevant aspects component software absence component source code subset provided component functionality middleware dependency component integration state depend component behavior 
interesting application proposed graphical representation regression testing 
approach rothermel adjustments combination 
current research activities focus automatic test case generation 
believe predefined structure utilized obtain test cases covering particular paths 

integrating white black box techniques class level testing object oriented prototypes 
software engineering applications conference las vegas nevada november pages 
buy ghezzi 
framework testing object oriented components 
proceedings international icse workshop testing distributed component systems los angeles california may 

frankl 
astoot testing object oriented programs 
acm transactions software engineering methodology apr 
ghosh mathur 
issues testing distributed component systems 
proceedings international icse workshop testing distributed component systems los angeles ca may 
grossman 
component testing 
proceedings third international workshop component oriented programming 
harrold liang sinha 
approach analyzing testing component systems 
proceedings international icse workshop testing distributed component systems los angeles ca may 

case study correcting system failure cots information system 
technical report carnegie mellon university software engineering institute sept 
carney 
isolating faults complex systems 
technical report carnegie mellon university software engineering institute feb 
hong kwon cha 
testing object oriented programs finite state machines 
proceedings second asia pacific software engineering conference brisbane australia december pages 


role formal specification software test 
proceedings symposium industrial benefit formal methods september lncs 
kung gao hsia suchak chen 
object state testing 
proceedings th annual international computer software applications conference taipei taiwan november pages 
liu 
formal test requirements component interactions 
proceedings canadian conference electrical computer engineering may edmonton canada may 
gall 
formalizing integration test strategies distributed systems 
proceedings international icse workshop testing distributed component systems los angeles california may 
murray mcdonald 
class testing classbench 
proceedings asia pacific software engineering conference taipei taiwan december pages 
weyuker 
selecting software test data data flow information 
ieee transactions software engineering apr 
rosenblum 
adequate testing component software 
technical report department information computer science university california aug 
rothermel harrold 
regression test selection software 
software testing verification reliability june 
tse xu 
test case generation class level object oriented testing 
proceedings th international software quality week san francisco california may pages 
turner robson 
state testing object oriented programs 
proceedings international conference software maintenance pages sept 
weyuker 
testing component software cautionary tale 
ieee software sept oct 
