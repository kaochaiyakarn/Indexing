reconfigurable nets class high level petri nets supporting dynamic changes eric badouel javier oliver irisa campus de beaulieu rennes cedex france 
mail eric badouel irisa fr 
upv de vera valencia spain 
mail upv es 

introduce class high level petri nets called reconfigurable nets dynamically modify structure rewriting components 
boundedness reconfigurable net decided constructing coverability tree 
net simulated self modifying petri net 
class reconfigurable nets provide subclass self modifying petri nets boundedness decided 
delayed dynamic changes workflow systems sense handled extension van der aalst workflow nets 
class reconfigurable workflow nets notion soundness defined verified coverability tree construction 
keywords reconfigurable nets workflow systems boundedness petri nets 
early sixties petri nets come play pre eminent role formal study behaviour concurrent distributed systems 
mention attractive features model successful 
vector addition systems commutative semi thue systems petri nets simple natural extension automata 
study mathematical properties manageable task particular effort devoted decidability complexity issues petri nets 
second lot techniques automated tools support verification properties systems modelled petri nets 
instance decide constructing coverability tree petri net bounded finite state system 
reduction techniques linear algebra techniques received wide attention 
third petri net graphical tool easily description design concurrent systems 
partially supported network express cicyt tic 
petri nets modelling computer supported cooperative cscw 
applications called groupware applications involve distributed systems agents computer systems humans cooperate solve global task structure dynamically change 
precisely consider workflow systems 
systems aim support realization procedures group collaborating agents coordinating flow tasks distributed system 
define workflow net petri net specific input place specific output place 
token input place corresponds new case entering system structure petri net describe set tasks required process case order tasks executed distributed nature system account 
token output place witnesses termination case 
important feature workflow systems ability manage dynamic change structure petri net allowed vary case proceeds system 
petri nets offer direct way express processes structure evolves computations 
reason conjunction sets rewriting rules order cope workflow systems system locally described petri net rewriting rules allow modification structure petri net 
purpose introduce reconfigurable nets class high level petri nets dynamically modify structures rewriting components supporting dynamic changes workflow systems 
reconfigurable nets natural extension petri nets confidence theoretical results automated tools exist petri nets adapted 
instance show decide boundedness property reconfigurable nets variant coverability trees 
dynamic nets asperti busi model allows dynamic changes 
dynamic nets tokens names places input token transition postset specify destination creation new nets firing transition possible 
asperti busi context net theory ideas concepts originated calculus related join calculus 
opinion model leaves little hope obtain significant mathematical results automated verification tools close 
model probably sophisticated easily modelling design groupware applications 
self modifying nets introduced valk subclass stratified petri nets extension petri nets 
dynamicity introduced self modification 
precisely flow relations places transitions self modifying nets linear functions marking 
techniques linear algebra study structural properties petri nets adapted extended framework particular transition may associated matrix modification marking due sequence transitions coded corresponding product matrices 
self modifying nets constitute small variation petri net paradigm important properties lost decide boundedness self modifying nets 
class nets clean concise definition hopeless describe design realistic systems directly formalism 
opinion self modifying nets reasonable attempt add mobility petri nets back model 
reconfigurable nets hand constitute direct formalisation manner groupware applications described combination petri nets rewriting rules describe translation reconfigurable nets equivalent self modifying nets 
reconfigurable nets viewed subclass self modifying nets boundedness decided 
rest organized follows 
reconfigurable nets introduced section indicate modelling workflow nets dynamic structure called reconfigurable workflow nets 
show section decide reconfigurable net bounded constructing coverability tree soundness reconfigurable workflow net implies boundedness verified coverability tree 
prove analogue result showing soundness reconfigurable workflow net reduces boundedness liveness reconfigurable net obtained adding extra transition connecting output place reconfigurable workflow net input place 
section show reconfigurable net simulated net 
conclude section 
reconfigurable nets reconfigurable nets high level petri nets supporting dynamic changes workflow systems 
instance admit local changes scheduling tasks required process case currently flowing system 
case order request customer involved tasks may order check inventory check credit check shipping billing archiving 
dynamic change may enable parallel execution tasks shipping billing previously performed sequentially order may refine task elementary tasks prescribed ordering 
assume set involved tasks set local changes known advance listed 
assumption implies set tasks instances finite 
set constitutes set transitions reconfigurable net 
switching configuration due local change taken care new kind place content denotes place exist current state system 
definition reconfigurable net structure fp pm non empty finite set places ft non empty finite set transitions disjoint theta theta weighted flow relation fr finite set structure modifying rules 
structure modifying rule map domain codomain disjoint subsets places 
marking net map fffg ff ff place said exist marking expresses exists marking value denote set markings net denote set events reconfigurable net 
denote fact event enabled marking net reaches marking firing event 
transition relation defined follows 
transition enabled marking ff transition fired marking resulting marking ff ff ff gamma structure modifying rule enabled marking ff ff firing enabled rule produces new marking defined ff fm pg pn marked reconfigurable net reconfigurable net initial marking 
firing policy transitions petri net obtained discarding non existing places 
petri net called configuration reconfigurable net 
long structure modifying rule take place reconfigurable net behaves exactly petri net 
structure modifying rules produce structure change net removing existing places creating new ones moving system configuration 
place removed tokens place disappear moved places net 
number tokens remains constant application structure modifying rules 
rule defines tokens moved net 
places set range places created structure modifying rule containing initially token 
roughly speaking reconfigurable net seen bunch petri nets configurations correspond various modes operation system 
structure modifying rules allow switch mode operation modifies current marking accordingly cases processed firing structure modifying rule creation disappearing tokens tokens simply displaced vanishing places created ones 
system modelled reconfigurable net ability dynamically change structure certain conditions met 
instance content place large large amount cases waiting processed duplicate ouput transitions place technically replace place new having twice output transitions playing role output transitions original place 
reconfigurable nets easily implement delayed dynamic changes 
dynamic structural changes called synthetic cut changes defined follows quoted 
synthetic cut change old new change regions maintained new procedure 
ensures tokens old change region continue progression change take place immediately justifies attribute delayed 
tokens evolving context old change region enter old change region possibly new change region say view tokens change immediate 
illustrate synthetic cut change example fig 

inventory check credit check billing shipping archiving parallel mode sequential mode region region fig 

synthetic cut change reconfigurable net describes proceed order request customer modes operation corresponding distinct regions graphical representation net billing shipping operations processed sequentially processed parallel 
structure modifying rule fp fp permits switch sequential mode operation parallel mode operation 
conversely structure modifying rule gamma realizes switching converse direction 
represents fragment marking graph reconfigurable net place graphically represented state place exists current marking value different ff 
observe switch sequential mode parallel mode tokens old region sequential mode region continue progression change take place tokens context place enter new region parallel mode region 
parallel mode sequential mode fig 

part marking graph reconfigurable net fig 
set places exists marking fp ffg termed domain markings said equivalent domain 
mode operation equivalence class identified subset places 
usually reconfigurable net implicitly attached fixed subset modes operation 
example modes operation sequential mode parallel mode respective domains fp nfp marking domain different sets intuitively correspond state system 
consider nets model workflow systems distinctive places input place source place place pre transitions ouput place sink place place post transitions 
places correspond respectively termination processing case 
example fig 
input place place output place place notion reconfigurable workflow net adaptation van der aalst notion workflow net 
definition reconfigurable workflow net reconfigurable net explicit set modes operation distinguished places source place sink place 
mode operation omega contains places set strongly connected sense omega derives omega finite sequence structure modifying rules omega derives omega rule omega omega omega omega subsets places omega omega structure modifying rule omega omega set modes operation reconfigurable workflow net connected component directed graph vertices subsets places arcs pairs omega omega omega omega structure modifying rule component strongly connected 
omega mode operation omega stand marking domain omega token place token similarly omega marking domain omega token place token 
subset events usually marking reached marking firing sequence events strong connectedness restore particular mode operation starting finishing processing case omega omega omega omega pair omega omega modes operation 
token input place corresponds case entering system 
case flows system token appearing output place indicates termination case 
role played marking twofold 
hand accounts current distributed state progress case hand encodes current state system processes case 
loss generality assume state system empty starting new case 
case terminates system recovered initial state order ready process new case 
mode operation may changed significant case unaware current mode operation system 
system intended process cases endlessly degraded behaviour transition dead state fired state transition discarded place 
requirements captured definition adaptation similar definition workflow nets 
markings domain denote set markings 
definition reconfigurable workflow net sound conditions met 
processing case terminate omega omega omega omega ii termination case restores initial state system possibly mode operation omega omega omega omega omega iii dead transitions omega omega observe processing case may terminate change mode operation may required order reach termination 
definition states properties expected behaviour workflow system processing individual case says system cases processed concurrently 
real applications case identity agent performing task system knows case currently processing 
may consider new case entering system colour colour distinct colours cases currently flowing system 
resulting colored petri net behaves follows order fire transition allowed pick input places tokens colour produces tokens ouput places colour 
means concurrent processing multiple cases represented non interfering superimposition processings individual cases 
reconfigurable workflow net considered respect individual case justifies definition 
weak form interference cases exists due fact current state system may effect decision allowed structure modifying rule invoked 
example number tokens certain place exceeds threshold may regulate flow invoking structure modifying rule converse modification may invoked content place goes threshold sense manner case processed may influenced cases 
notice thresholds appear definition structure modifying rules reflect fact decisions concerning invocation rules external system 
interference concerns modes operation processing case formalism allows designer system sure processing case insensitive dynamic changes occurring system 
necessary enrich description net adding extra places transitions order ensure processing cases independent dynamic changes 
instance identify list properties characterize fact case correctly processed 
general property corresponds completion task 
properties represented extra places pn pn extra place introduced new output place enriched net 
place filled extra transition preconditions places pn pn old output place 
manner token new output place indicates case correctly processed regardless dynamic changes may occurred 
boundedness reconfigurable net reachability tree marked reconfigurable net tree root labelled initial marking arbitrary vertex tree labelled marking arcs originating bijective correspondence firings arc associated labelled event extremity labelled reachability tree unfolding marking graph marked net 
net unbounded tree infinite 
similar done ordinary petri nets finite approximation reachability tree called coverability tree constructed 
properties basis algorithm karp miller 
correspond propositions 
proposition order relation markings ordering 
proof recall see order relation ordering infinite sequence indices equivalently infinite sequence infinite increasing subsequence 
usual ordering ordering 
extracting subsequences iteratively times notice ordering pointwise ordering ordering 
fffg order ff ordering 
sequence fffg extract subsequence constantly equal ff increasing sequence integers respectively infinite number indices ff 
order markings ordering 
proposition firing rule monotone jm gamma jm jm gamma jm sequence firings reproduced jm jm kn jm gamma jm proof gamma gamma property constant effect properties hold petri nets 
property holds trivially property constant effect weaken token moved places places conservation total number tokens jm gamma jm jm gamma jm key observation algorithm karp miller petri nets property constant effect markings sequence firings deduce 
place nk gamma place bounded 
weak form property constant effect observation longer holds reconfigurable nets 
concerned boundedness particular place net boundedness net exists place net unbounded propositions sufficient boundedness verified simplified version coverability tree 
definition coverability tree marked reconfigurable net constructed algorithm initially tree reduced root labelled tagged new vertex 
new vertices exist ffl select new vertex label 
ffl firing create new vertex labelled arc labelled exists node path root vertex label delta tag vertex old tag unbounded 
tag new 
ffl withdraw set new vertices 
proposition coverability tree marked reconfigurable net finite 
proof order relation set markings ordering coverability tree marked reconfigurable net contains infinite branch 
vertex jej successors deduce konig lemma tree finite 
proposition marked reconfigurable net bounded vertex coverability tree tagged unbounded 
proof coverability tree contains vertex tagged unbounded set labels vertices coincides set markings reconfigurable net reachable initial state label root marked reconfigurable net bounded 
contrary coverability tree contains vertex tagged unbounded 
exists vertex path root labels path root vertex labels path vertex vertex prop 
jm jm kn jm gamma jm 
finitely places net unbounded 
corollary boundedness reconfigurable net decidable 
reconfigurable workflow net said bounded marked reconfigurable net omega omega mode operation bounded 
definition depend choice omega omega omega pair omega omega proposition sound reconfigurable workflow net bounded decide reconfigurable workflow net sound 
proof omega bounded seen proof prop 
exists markings omega place sound omega sequence monotony omega omega contradicts fact sound 
boundedness checked properties iii def 
may checked directly coverability tree coincide reachability tree 
noted hack size karp miller construction decision procedure boundedness coverability grow fast ackermann function size petri net shows intractability verification soundness property construction coverability tree 
van der aalst showed soundness workflow net reduces boundedness liveness petri net obtained adding extra transition connecting output place input place 
possible decide boundedness liveness free choice petri nets polynomial time deduced soundness free choice workflow nets decided polynomial time 
show van der aalst construction carried reconfigurable nets significant changes unfortunately directly deduce polynomial time algorithm decision soundness reconfigurable workflow nets configurations free choice petri nets 
definition reconfigurable workflow net omega mode operation omega omega marked reconfigurable net consisting reconfigurable net initial marking omega ft new transition extended flow relation theta theta gamma obtained adding new transition enabled case reached termination token output place removes case system introduces new adding token input place 
proposition reconfigurable workflow net sound reconfigurable net omega live bounded 
proof notice initial state omega reachable initial state structure modifying rules omega omega reconfigurable net omega live bounded omega live bounded omega show omega live bounded sound reconfigurable workflow net 
omega live transition potentially reachable marking condition def 
satisfied 
omega omega omega omega denote set integers exists marking omega ft omega jm 
say prop 
omega omega records possible increases size markings computations omega marking greater omega marking greater omega omega omega omega omega omega omega 
omega omega 
condition def 
satisfied omega omega omega omega omega prop 
deduce omega omega required 
omega bounded deduce omega omega omega omega omega omega omega condition ii def satisfied 
condition iii def follows fact omega live omega conversely assume sound 
show omega bounded 
sound extended net returns initial state omega fires check marked reconfigurable net omega bounded omega case construction coverability tree deduce exist markings omega soundness deduce omega prop 
omega omega jm gamma jm gamma jm contradicts soundness second show omega live 
sound transition potentially reachable marking firing leads initial state omega omega omega arbitrary pair mode operations deduce net omega cyclic initial state omega reachable marking reachable reachable marking 
dead transitions omega condition iii def 
fact dead deduce marked net live 
reconfigurable nets self modifying nets purpose section show reconfigurable nets self modifying nets 
self modifying nets generalizations place transition nets flow relation place transition depends marking 
definition self modifying net structure fp pm non empty finite set places ft non empty finite set transitions disjoint theta theta flow relation fg vector represented formal sum delta constant coefficient entry corresponding place 
marking net map 
marking delta denote evaluation affine function marking transition enabled marking leads marking transition relation gamma marked self modifying net self modifying net initial marking 
proposition marked reconfigurable net associated marked self modifying net isomorphic marking graph set transitions set events reconfigurable net 
proof translation reconfigurable net equivalent self modifying net represent place reconfigurable net places places complementary bounded places contents indicate place exists current marking third place denoted content original place place exists 
gives sketch translation precise definition follows 
reconfigurable net associated delta delta fig 

translating reconfigurable net equivalent self modifying net self modifying net defined follows 
set places disjoint union copies set respective typical elements noted ranging set transitions consists transitions original net set structure modifying rules set events 
flow relation identities range respectively ae delta ae delta marking reconfigurable net associated marking self modifying net ff ff ff relations induce bijective correspondance markings markings 
direct comparison def 
def 
shows event enabled marking reconfigurable net transition self modifying net enabled associated marking mapping delta isomorphism marking graph marked reconfigurable net marking graph marked self modifying net marking boundedness decidable self modifying nets decidable reconfigurable nets 
order better delimit borderline nets boundedness decided precise terminology 
pair theta termed input arc respect transition 
similarly pair theta termed output arc input arc ordinary arc reset arc output arc ordinary arc 
self modifying net post self modifying net respectively pre self modifying net input arc resp 
ouput arc ordinary arc reset set nets infinite capacity input arc ordinary arc reset arc valk proved boundedness post self modifying nets decided 
result erroneously stated class reset set nets infinite capacity class pre self modifying nets 
proved boundedness class petri nets reset arcs class self modifying nets input arc ordinary arc reset arc output arc ordinary arc introduced class high level petri nets called reconfigurable nets dynamically modify structures rewriting components 
boundedness reconfigurable net decided constructing coverability tree 
net simulated self modifying petri net 
class reconfigurable nets provide subclass self modifying petri nets boundedness decided 
delayed dynamic changes workflow systems sense handled extension van der aalst workflow nets 
class reconfigurable workflow nets notion soundness defined verified coverability tree construction 
reconfigurable net seen bunch petri nets configurations 
configuration reconfigurable net gives description system mode operation 
interesting investigate properties reconfigurable net relationship specific assumptions configurations acyclic safe free choice 
workflow net models instance acyclic extended free choice elementary net systems nets usually assumed free choice free choice 
open question direction exists polynomial time algorithm deciding soundness property reconfigurable workflow nets 
additional assumptions concerning set structure modifying rules may considered 
instance shall restrict attention class reconfigurable nets structure modifying rule bijections 
extra assumption net simulated stratified petri net say self modifying petri net stratification set places layers exists flow relations attached place involve content places lower layers 
self modifying petri nets simulate reconfigurable nets stratified essential reconfigurable nets stratified petri nets general reversible sense firing deduce marking data event marking reconfigurable nets reversible structure modifying rules assumed bijective 
assumed implicitly done workflow nets system identify coloured tokens cases processed 
marking accounts time current states progress cases state system processes cases implies state system multi coloured vector states associated cases currently flowing system 
assumption may considered may seek non interference condition added definition soundness ensure behaviour changed colours forgotten 
interesting investigate notion controlled reconfigurable net stands reconfigurable net control part regulate flow system 
control marking evolving net input set allowed structure modifying rules output 
asperti busi mobile petri nets 
technical report ublcs university bologna italy 
van der aalst verification workflow nets 
proceedings volume lecture notes computer science springer verlag 
badouel darondeau ph stratified petri nets 
proceedings fct volume lecture notes computer science springer verlag 
desel esparza free choice petri nets 
volume cambridge tracts theoretical computer science 
cambridge university press 
de michelis ellis computer supported cooperative petri nets 
third advanced course petri nets dagstuhl castle germany 
appear springer verlag lecture notes computer science 
graph theory 
volume graduate texts mathematics 
springer verlag 
finkel schnoebelen ph reset nets decidability undecidability 
appear proceedings icalp 
ellis keddara rozenberg dynamic change workflow systems 
proceedings conference organizational computing systems acm press new york 
ellis nutt modeling enactment workflow systems 
proceedings volume lecture notes computer science springer verlag 
fournet gonthier reflexive chemical machine join calculus 
proceedings rd acm symposium principle programming languages 
fournet gonthier evy emy calculus mobile agents 
proceedings concur volume lecture notes computer science springer verlag 
hack recursive equivalence reachability problem liveness problem petri nets vector addition systems 
computation structures group memo 
cambridge massachussetts mit department electrical engineering 
heinemann subclasses self modifying nets 
girault reisig eds 
european workshop application theory petri nets 
informatik springer 
karp miller parallel program schemata 
journal computer system sciences vol 

milner parrow walker calculus mobile processes ii 
information computation vol 

murata petri nets properties analysis applications 
proceeding ieee 
petri kommunikation mit des iim nr 
institut fur mathematik bonn 
english translation technical report radc tr griffiths air force base new york vol 
suppl 

valk self modifying nets natural extension petri nets 
proceedings icalp lecture notes computer science vol 

valk generalizations petri nets 
proceedings mfcs lecture notes computer science vol 

article processed macro package llncs style 
