logical framework algorithmic debugging lazy functional logic programs rafael francisco opez mario rodr iguez artalejo sip ucm es 
traditional debugging techniques suited lazy functional programming difficult predict evaluation order 
declarative debugging techniques proposed allow focus intended meaning programs abstracting away operational concerns 
similar techniques known logic programming combined functional logic languages 
aim provide theoretical foundations declarative debugging wrong answers lazy functional logic programming 
propose logical framework formalizes intended meaning execution model programs simple language combines expressivity pure prolog significant subset haskell 
novelty previous related works obtain completely formal specification debugging method 
particular extend known soundness completeness results debugging wrong answers logic programming substantially difficult context 
serve clear guideline prototype implementation debugging system 
major declarative programming control component program left unspecified 
programmers describe characteristics problem solved considerations evaluation strategy related problem solved 
consequence execution flow hard predict program text problematic debug declarative programs conventional debugging tools breakpoints tracing variable watching 
difficulties serious case eager functional programming evaluation order easy predict 
field lazy functional programming problem known mid eighties 
area starting early proposals suggests generate form execution record basis debugging 
field logic programming shapiro proposed declarative debugging called algorithmic debugging semiautomatic technique allows detect bugs basis intended meaning source program disregarding operational concerns 
declarative debugging logic programs diagnose wrong missing computed answers proved logically sound complete 
partially supported spanish cicyt project cicyt tic trend declarative debugging adapted programming paradigms including lazy functional programming combined functional logic programming 
common feature approaches computation tree structure reflects functional dependencies particular computation abstracting away evaluation order 
lee naish formulated generic debugging scheme computation trees covers declarative debugging methods cited particular instances 
case logic programming shows computation trees clear interpretation declarative semantics programs 
hand computation trees proposed declarative debugging lazy functional programs combined functional logic programs clear logical foundation 
particular due lack adequate formalization relationship computation trees operational behaviour lazy evaluation formal correctness proof available existing debuggers lazy functional logic languages 
aim provide theoretical foundations declarative debugging wrong answers lazy functional logic programming 
going propose logical framework formalize declarative operational semantics programs simple language combines expressivity pure prolog significant subset haskell :10.1.1.35.693
define declarative debugger generic scheme 
contrast related works cited give formal characterization computation trees proof trees relate computed answers declarative semantics programs 
precisely formalize procedure building proof trees successful computations 
allows prove logical correctness debugger extending older results field logic programming substantially difficult context 
intended guideline prototype implementation working debugger functional logic programming system oy 
organized follows 
section presents general debugging scheme recalls known approaches declarative debugging lazy functional logic programs 
section introduces simple functional logic language rest 
section logical framework gives formal semantics language 
section defines debugger formal procedure build proof trees succesful computations 
section concludes points 
debugging computation trees section revisit known approaches declarative debugging lazy functional logic languages 
recall generic debugging scheme 
explain understand existing debuggers instances scheme 
general debugging scheme debugging scheme proposed assumes terminated computation represented finite tree called computation tree 
root tree corresponds result main computation node corresponds result intermediate subcomputation 
assumed result node determined results children nodes 
node seen outcome single computation step 
debugger works traversing computation tree looking erroneous nodes 
debugger called sound bugs reports really correspond wrong computation steps 
notice erroneous node erroneous child necessarily correspond wrong computation step 
instance consider computation tree 
erroneous nodes enclosed double thick circle 
result computation step corresponding erroneous node may depend result erroneous node 
unsound point node source bugs 
situation different case node erroneous erroneous children mistake computation node 
terminology erroneous node erroneous children called buggy node 
order avoid unsoundness debugging scheme looks buggy nodes 
tree sound return buggy node erroneous step 
kj tree erroneous buggy nodes relation buggy erroneous nodes easily proved proposition finite computation tree erroneous node iff buggy node 
particular finite computation tree root node erroneous buggy node 
result provides weak notion completeness debugging scheme satisfactory practice 
reiterated application scheme lead detection bugs 
coming back example suppose node corresponds truly wrong computation step 
stage returned debugger erroneous buggy 
fixing bug node node buggy node detected debugger 
instances debugging scheme known declarative debuggers understood concrete instances debugging scheme 
particular instance determined parameters notion computation tree notion erroneous node method extract bug indication buggy node 
choice parameters depends programming paradigm kind errors debugged 
instances debugging scheme needed diagnosing wrong missing answers pure prolog described 
cases computation trees formally defined relate answers computed sld resolution declarative semantics programs precise way 
fact allows prove logical correctness debugger 
existing declarative debuggers lazy functional functional logic programs proposed different essentially similar notions computation tree 
node contains oriented equation fa corresponding function call evaluated returned result 
arguments result displayed evaluated form eventually reached computation include unevaluated function calls corresponding suspensions implementation level 
children node correspond function calls evaluation eventually needed order obtain fa tree structure abstracts away actual order function calls occur lazy evaluation strategy 
node considered erroneous iff oriented equation false intended interpretation program bug indication extracted buggy node instance oriented equation program gave rise function call node 
contrast logic programming case formal proofs correctness exist best knowledge known lazy functional logic declarative debuggers 
achieve proof needs sufficiently formal characterization relationship proof trees suitable formalization program semantics 
attempt formalize deduction trees lazy functional programming denotational semantics 
authors acknowledge definition gives informal characterization function calls evaluation eventually demanded 
formal procedure building computation trees supplies crucial information 
functional logic programming paradigm instance general debugging scheme going define applied functional logic language 
functional logic programming flp short paradigm tries bridge gap main streams declarative programming functional programming fp logic programming lp see survey 
purposes chosen simple variant flp language studied implemented oy system see :10.1.1.35.693
choice give possibility point view declarative debugging exploiting proof theoretic model theoretic semantics developed contrast existing flp languages operational basis curry :10.1.1.35.693
flp programs support logic variables higher order programming lazy functions non determinism 
horn clause logic programs haskell functional programs easily expressible language 
define preliminary concepts 
syntax informal meaning programs goals language 
preliminaries signature constructors countable set sigma dc sigma fs sigma dc sigma dc sigma fs sigma fs sigma disjoint sets constructors defined function symbols respectively associated arity 
sequel explicit mention sigma omitted 
assume existence countable set variables 
set partial expressions built aid sigma denoted exp defined exp sigma exp expressions form stand application acting function acting argument 
usual assume application associates left abbreviates 
symbol 
read bottom represents undefined value 
distinguish important kind partial expressions called partial patterns denoted defined dc fs partial patterns represent partially computed values expressions play important role debugging process computation trees contain statements form correctness user asked debugger 
symbol appear place function calls evaluation needed order compute main result 
expressions patterns occurrence called total 
write exp sets total expressions patterns respectively 
notice partial application constructor function symbol number pattern arguments arity pattern represents functional value 
higher order patterns convenient way representing possibly intermediate ho results computations see appendix example 
proposals unclear deal functional results 
rest classification expressions called flexible expression dc fs called rigid expression 
rigid expression called active iff fs passive 
intuition classification outermost reduction root position sense active expressions 
substitutions mappings unique extension exp exp noted 
set substitutions denoted subst 
set subst 
partial substitutions defined analogously 
write result applying substitution expression usual fx xn stands substitution satisfies xng 
programs goals framework programs considered ordered sets function rules 
rule order important logical meaning program 
rule lefthand side right hand side optional condition 
general shape rule function fs left hand side right hand side condition linear sequence patterns linear means variable occurs sequence 
ii expressions 
iii variable occur words variables common gamma 
conditions fulfilling property iii sequence linear called admissible 
intended meaning rule call function reduced actual parameters match patterns conditions satisfied 
linearity condition common fp flp case implies unification arguments function call patterns rule part narrowing process occur check 
conditions called approximation statements satisfied evaluated match pattern variables called produced variables serve get intermediate results computation 
linearity condition means variables produced condition iii expresses variables produced 
readers familiar note joinability conditions written oy concrete syntax replaced approximation conditions :10.1.1.35.693
done order simplify presentation keeping expressivity programming purposes 

take take xs take take take take xs 
take xs program example fig 
presents haskell program running example rest 
different rules function labeled relative position rule function notice conditional part omitted empty rules 
signature program dc fz fs ffrom take 
constructors represent successor natural number natural number zero respectively 
infix constructor builds list element list function take returns applied number list elements function intended compute infinite list numbers starting initial value parameter 
bug right hand side 
general goal admissible condition atomic goal general goal 
proposing goal user asks exists substitution deducible program precise meaning deducible established section 
possibility having variables goals great difference flp fp functional programs fig 

possible goal program take goal solving mechanism section produce correct answers intended meaning program fn fn incorrect answer fn obtained 
debugger fp user guess values lead wrong result 
flp setting values system 
logical framework flp explained section debugging scheme declarative semantics programs 
provided semantic calculus subsection 
rest section introduce models programs goal solving calculus formalizes operational semantics 
semantic calculus meaning programs specified semantic calculus shortly sc higher order goal oriented rewriting calculus 
purpose sc derive approximation statements intended mean approximates value 
notice equational meaning equals value intended 
calculus rules exp partial expressions partial patterns sigma goal oriented rewriting calculus bt bottom 
rr restricted reflexivity ar dc decomposition outer reduction 
notation rule stands set subst partial instances rules notice rule calculus depends program 
rule specifies compute partial pattern value function application done computing suitable partial patterns values argument expressions applying instance program rule working partial patterns allows express non strict semantics syntactic simplicity strict semantics 
higher order function result applied remaining arguments nodes computation trees include special approximation statements form fs called basic facts 
order role basic facts explicit substitute rule new rule fa function application fa tn 
semantic calculus sc defined consist rules bt rr dc fa 
result ensures equivalence calculus 
proposition program approximation statement 
derivable sc iff derivable 
sequel write indicate deduced sc 
program atomic goal say total substitution subst answer iff 
sake simplicity consider variant fa part sc calculus fa tn 
shown sc fa equivalent sc fa take fa dc 
fa take 
rr 
take 
dc 
dc rr take 
fa rr 
fa dc 

dc rr bt take 
rr 
take 
dc 
dc rr take 
phi phi phi phi phi fa rr 
bt dc bt take 
dc proof tree semantic calculus sc derivation semantic calculus sc represented tree call proof tree pt 
proof tree fig 
shows approximation statement take follows program displayed fig 

nodes appear decorated name sc rule sequence rules point 
substitution fn answer goal take take showing symptom bug program 
fact user expects second element list 
basic fact node fa associated rule instance instance program rule node 
models intended models logic programs represented sets atomic formulas belonging programs herbrand base 
open herbrand universe set terms variables gives raise informative semantics 
flp setting natural analogous open herbrand universe set partial patterns equipped approximation ordering def 
def 
sc similarly natural analogous open herbrand base collection basic facts define herbrand interpretation set basic facts fulfilling requirements fs arbitrary partial patterns ffl 
ffl ffl subst 
debugging scheme assume intended model program herbrand interpretation herbrand interpretations ordered set inclusion 
running example intended interpretation contains basic facts 

take 

definition say approximation statement valid iff proved calculus sc consisting sc rules bt rr dc rule fa fai pattern pattern instance approximation condition take valid intended model running example 
basic facts turns valid iff denotation exp defined set ft valid ig 
program bugs intended model model relies definition model generalizes corresponding notion logic programming ffl model iff model program rule ffl model program rule iff substitution subst 
satisfies 
ffl satisfies rule instance iff satisfy ffl satisfies instantiated condition iff shown iff straightforward consequence previous definitions iff exists program rule subst 

valid 
valid 
conditions say program rule incorrect intended model incorrect instance program rule 
running example rule function incorrect interpretation incorrect instance rule rule 

valid 

corresponds items 


acting straightforward adaptation results obtain relationships programs models proposition program approximation statement :10.1.1.35.693
valid herbrand model 
mp ff tg herbrand model inclusion ordering 
valid mp results herbrand model correct program agree model 
case running example approximation statement take valid mp valid intended model 
goal solving calculus semantic calculus proving approximation statement holds program feasible solving goals finding answers oe oe deducible sc 
due different reasons ffl sc find answers goal 
proves goal substitution 
ffl rule fa uses instances program rules 
infinitely instances program rule fa tell choose right 
goal solving calculus gsc 
higher order lazy narrowing calculus 
gsc calculus consists rules specify transform goal gamma new goal yielding substitution oe done selecting atomic subgoal gamma replacing new subgoals gsc rule 
rules calculus shape fl oe representing valid goal solving step 
gsc computation successful ends empty goal represented 
composition substitutions oe yields answer oe initial goal sense 

auxiliary notions need introduce user demanded variables demanded variables 
intuitively say variable user demanded occurs condition initial goal introduced substitution binds user demanded variable 
formally initial goal gamma intermediate goal gamma fl oe calculus step 
set user demanded variables defined way var gamma var xoe atomic subgoal goal definition variable demanded user demanded variable atomic subgoal shape demanded variable 
goal solving rules 
note symbol fl rules compute substitution 
dc decomposition em tm fl em tm ob output binding fl fx tg fx tg variable 
ib input binding fl fx tg pattern demanded variable occurs 
iim input imitation em fl fx em xm fx em rigid passive pattern demanded variable occurs 
el elimination fl fx demanded appear 
fa function application en ak fl en tn ak new variable tn variant program rule demanded variable 
introduce variant rule fa case semantic calculus fa fl variant program rule demanded variable 
adopt suitable strategy order determine step atomic subgoal transformed selected atom 
assume quasi leftmost selection strategy select leftmost atomic subgoal gsc rule applied 
note necessarily leftmost subgoal 
subgoals non demanded variable may eligible steps 
delayed demanded disappears rest goal 
formalizes behaviour suspensions lazy evaluation 
assume execution model program rules tried rule fa order appear program 
show solving steps initial goal take ys program 
selected subgoals appear underlined demanded variables marked 
take ys 
fl fa 
xs take xs ys 
fl ob fn sn 
xs take xs ys 
fl fa 
xs take xs ys 
fl ib fm xg 
xs take xs ys 
fl dc 
composition substitutions yields computed substitution oe oe xoe oe 
adapting similar results prove soundness goal solving calculus semantic calculus subsection proposition assume gsc computes answer substitution oe atomic goal program sc oe :10.1.1.35.693
regarding completeness conjecture gsc compute answers expected sc assumption application free logic variable function occurs program initial goal 
proved conjecture 
completeness results closely related complex goal solving calculi :10.1.1.35.693
debugging lazy narrowing computations section introduce instance general scheme debugging wrong answers flp language 
explained subsection done defining suitable computation tree called abbreviated proof tree apt short characterizing erroneous nodes establishing method extracts bug 
establish soundness completeness resulting debugger 
obtaining proof trees successful computations gsc successful computation fl oe fl oe gn gamma fl oe computed answer oe build sequence trees tn follows ffl node ffl computation step corresponding rule gsc different fa fa gamma fl oe tree built gamma oe including children leaf oe gamma oe atomic goals ffl computation step corresponding rule fa gsc fl tree built expanding leaf gamma shown diagram 
analogously case fa rule fa similar diagram depicted 
en am gamma gamma tn phi phi xxxxxx am fa en tn phi phi fa ffl tree obtained tn repeatedly applying sc rules bt rr dc leaves application rules possible 
case running example pt fig 
obtained gsc computation steps shown subsection 
result guarantees tree constructed mechanically way pt showing computed answer deduced program 
note proposition simple corollary proposition 
proposition tree described pt goal oe 
simplifying proof trees second phase obtain apt pt removing nodes include non trivial boxed facts excepting root 
precisely pt goal apt defined recursively follows ffl root root ffl node children closest descendants boxed basic facts 
idea simplification removed nodes correspond unevaluated function calls computation steps rely application program rule 
define completely instance general schema need define criterium determine erroneous nodes method extract bug indication erroneous node 
definitions ffl apt consider erroneous nodes contain approximation statement valid intended model 
note possible exception root node nodes apt include basic facts 
simplifies questions asked oracle usually user 
ffl buggy node apt debugger show associated instance program rule incorrect 
instance form components appear explicitly pt see rule fa sc apt 
necessary include information apt node 
take 

xxxxxxx take 
take 
take 
apt corresponding pt fig 
shows apt corresponding pt running example 
erroneous nodes displayed bold letters buggy node appears surrounded double box 
tree similar computation trees statements nodes interpreted equalities see 

assuming debugger traverses tree preorder looking topmost buggy node see discussion different search strategies looking buggy nodes computation trees debugging session 

rule incorrect instance position prove logical correctness debugger theorem soundness 
buggy node detected debugger associated program rule incorrect intended model 
completeness 
computed answer wrong intended model debugger finds buggy node 
proposed theoretical foundations declarative debugging wrong answers simple sufficiently expressive lazy functional logic language 
known debuggers lazy functional functional logic languages rely generic debugging scheme 
novelty obtained formal characterization computation trees abbreviated proof trees relate computed answers declarative semantics programs 
characterization relies formal specification declarative operational semantics 
framework obtained proof logical correctness debugger extending older results logic programming field complex context 
best knowledge previous lazy functional logic field provided formalization computation trees precise prove correctness debugger 
improvement previous proposals framework ability deal functional values arguments results higher order functions 
plan extension current proposal supporting declarative debugging wrong missing answers 
require different kinds computation trees suitable extensions logical framework deal negative information 
plan implement resulting debugging tools oy system 
require deal additional language features consider operational semantics oy demand driven narrowing 
implement generation computation trees plan follow transformational approach described 

opez rodr iguez artalejo functional specification declarative debugging logic programming proceedings th international workshop functional logic programming 
grenoble 


error diagnosis logic programming adaptation shapiro method 
journal logic programming 

gonz alez moreno gonz alez rodr iguez artalejo 
higher order rewriting logic functional logic programming 
procs 
iclp mit press 

gonz alez moreno gonz alez opez rodr 
approach declarative programming rewriting logic 
logic programming pp 

hanus 
integration functions logic programming survey 
logic programming 
special issue years logic programming 

hanus ed curry integrated functional logic language version february 

lloyd 
declarative error diagnosis 
new generation computing 

opez rodr iguez artalejo 
demand driven computation strategy lazy narrowing 
procs 
plilp springer lncs 

opez anchez hern andez 
oy multiparadigm declarative system proc 
rta springer lncs pp 

naish 
declarative debugging lazy functional programs 
australian computer science communications 

naish 
declarative debugging scheme 
functional logic programming 

naish timothy 
declarative debugger logical functional language 
graham forsyth ali eds 
international conference industrial engineering applications artificial intelligence expert systems invited additional papers vol 
pp 

general document 

naish timothy 
portable lazy functional debugger 
australian computer science communications 

nilsson fritzson 
algorithmic debugging lazy languages 
journal functional programming 

nilsson 
evaluation dependence tree basis lazy debugging 
automated software engineering 

donnell hall 
debugging applicative languages 
journal lisp symbolic computation 

peterson hammond eds report programming language haskell non strict purely functional language february 

pope 
buddha 
declarative debugger haskell 
thesis department computer science university melbourne australia june 

shapiro 
algorithmic program debugging 
mit press cambridge mass 

sterling shapiro 
art prolog 
mit press 
