goal graph object association language jan dept math 
comp 
science eindhoven university technology tue box mb eindhoven netherlands mail win tue nl jan paredaens dept math 
comp 
science university antwerp uia antwerp belgium mail wins uia ac graph model describing schemes instances object databases graphical data manipulation language pattern matching introduced 
data model allows explicit modeling classes relations contain objects associations respectively 
goal consists mainly operations addition deletion 
perform part instance certain pattern 
syntax semantics language show computational completeness 
paredaens goal traditional database models entity relationship model niam functional data model labeled graphs represent schemes instances 
known graphically represented schemes easier grasp textual ones 
complex data models semantic object oriented data models important 
want er user consistent graphical interface database desirable graphical manipulation language 
unfortunately manipulation languages models usually textual graph limited expressive power 
rst graph data models ered graph manipulation language computationally complete graph oriented object database model 
data representation simply graph labeled nodes labeled edges 
data model extended labeling nodes explicitly objects tuples sets basic values 
furthermore manipulation language adapted meaning nodes 
possible conveniently model complex objects 
data model goal data model extended slightly di erent way 
goal distinguish kinds nodes value nodes object nodes association nodes 
value nodes represent called printable values strings integers booleans 
object nodes represent objects association nodes represent associations 
objects associations may properties represented edges 
participants association considered belong properties association 
main di erence associations objects identity objects independent properties associations considered identical properties 
properties may functional value multi valued consist set values 
type property constrained advance property object association may basic value object association 
contrast entity relationship model usually associations allowed hold entities 
language goal consists mainly operations addition deletion 
pattern matching nding occurrences prototypical piece instance graph 
occurrence addition speci es nodes edges add deletion speci es nodes edges delete 
furthermore xpoint operation introduced enable form iteration 
organization follows 
section introduce data model goal schemes instances represented graphs 
section paredaens goal operations goal 
section give extra examples goal programs discuss expressiveness goal 
section compare goal data models graph manipulation languages 
data model basic concept goal nite directed labeled graph 
represent schemes instances operations 
formal de nition concept 
de nition nite directed labeled graph node labels edge labels hn nite set nodes nite set labeled edges labeling function maps nodes node labels edges edge labels edges hn holds hn notice possible nite directed labeled graph edges nodes label 
object base schemes introduce notion scheme consider employee administration 
shows possible database scheme administration 
rectangular nodes represent classes rectangular nodes diamond shape represent relations round nodes represent basic value types 
single double headed arrows labeled represent properties objects associations 
labeled arrow single head means property functional single headed edge name indicates person name 
arrow double head means property multi valued double headed edge sections indicates department may consist section 
double arrows unlabeled indicate isa relation arrow manager employee indicates manager employee 
look scheme detail 
see class person contains persons properties name date birth address 
subclass person employee contains persons currently employed 
subclass employee manager contains employees considered run section entire department 
second subclass employee engineer contains employees technical skills certain domain 
class department contains departments name secretary manager assigned 
department consists paredaens goal str str num str section tech sect 
contract date department person employee engineer manager num day month year date birth name name date date address person department sections secretary name domain manager wage employees manager manager employee administration database scheme furthermore sections 
class section contains sections name manager set employees 
subclass section class technical section contains sections specialized technical done run engineer 
relation contract records contracts person department 
properties contract wage date date 
relation date contains dates represented day month year 
fundamental di erence objects associations identity object dependent properties objects exactly properties necessarily object associations properties identical 
relationships entity relationship model tuples object oriented data models modelled goal concept association 
examples contract relation date relation 
turn formal de nition scheme de ne database paredaens goal context contains preliminary concepts system 
de nition database context de ned hb mi nite set basic types int str bool enumerable set basic values maps basic type domain enumerable subset basic values enumerable set class names countable set relation names enumerable set functional edge labels enumerable set multi valued edge labels 
furthermore hold pairwise disjoint pairwise disjoint 
database context considered xed de nitions 
ready de ne exactly constitutes scheme 
de nition scheme nite directed labeled graph hn node labels edge labels 
furthermore hold di erent nodes di erent labels 
edges may leave nodes labeled basic type 
node may leave edges label isa edges 
isa edges allowed nodes labeled class names nodes labeled relation names 
nodes labeled basic type called basic type nodes 
represented round nodes 
nodes labeled class name called class nodes represented rectangles 
nodes labeled relation name called relation nodes represented rectangles lled diamond 
edges labeled functional edge label multi valued edge label called functional edges multivalued edges represented single headed arrows double headed arrows respectively 
edges labeled isa called isa edges represented double unlabeled bold arrows 
notice isa edges allowed classes relations 
look veri ed presents valid scheme basic type nodes labeled basic type 
formally scheme nodes merged informally allow duplication basic type nodes increase readability 
isa edges indicate employee person manager employee 
evidently follows manager person 
subtype relation easily derived isa edges 
de nition subtype relation scheme subset nodes labels respectively possibly empty directed path isa edges paredaens goal notice subtype relation holds class names relation names basic types nodes scheme 
notice isa edges allowed basic type nodes subtype basic type basic type 
database instances introduce notion instance small example weak instance employee database 
manager manager department name name person person str contract contract str nance date date johnson day month year day month year num num num department date date department weak instance employee database interpretation graph reminiscent interpretation scheme graph 
rectangle nodes represent objects rectangle nodes diamond inside represent associations round nodes represent basic values 
see manager name johnson manager nance department 
apparently johnson contracts department dates day month year 
de nition weak instance pair hhn hn nite directed labeled graph node labels edge labels partial function maps nodes labeled basic type basic value 
furthermore hold paredaens goal functional edge label may leave edge label node 
exactly nodes labeled basic type labeled basic value 
basic value node labeled basic type belong domain basic type 
nodes labeled basic type called value nodes 
nodes labeled class name called object nodes 
nodes labeled relation name called association nodes 
label label node said type label value label node respectively 
edges labeled functional edge label multi valued edge label called functional edges multi valued edges respectively 
graphical notation weak instances identical schemes 
easily veri ed graph valid weak instance 
turn question weak instance belongs certain scheme 
firstly may clear weak instance may contain objects associations classes relations mentioned scheme 
secondly goal consider properties optional property date birth class person de ned persons 
enables conveniently model incomplete information 
hand object association may properties de ned prescribed type supertype 
type property subtype types prescribed scheme type supertypes 
instance see manager section manager 
seen manager technical section engineer 
manager technical section manager engineer 
intuitions typing weak instance formalized way 
de nition weak instance scheme type labels weak instance occur scheme 
weak instance edge hn scheme edge hn 
weak instance edge hn scheme edge hn hold 
intuition typing weak instances may clear weak instance weak instance scheme 
look weak instance see date associations properties 
identity association depends fully paredaens goal properties associations merged 
properties contracts identical 
merged 
informally speaking nodes merged represent value 
de nition nodes said value equivalent holds de ned association nodes type label class node value nodes type label value label 
edge hn edge hn vice versa 
notice nodes labeled relation name holds furthermore observed value nodes value equivalent type value label object nodes value equivalent node 
forbid associations directly indirectly refer possible represent certain nite values weak instance 
consider example weak instance 
list list list list list num num tail head tail head tail head head tail tail head instance nite values nodes association nodes represent nite list 
value equivalent 
nodes represent nite lists alternating 
value equivalent represents list starting starting 
paredaens goal ready de ne instances weak instances respect notion associations identity 
de nition instance weak instance holds di erent nodes value equivalent 
de nition weak instance instance obtained merging nodes value equivalent 
instance called reduction weak instance 
example contracts dates value nodes value label merged obtain instance 
inheritance con icts scheme got small problem 
manager section manager manager technical section engineer 
goal data model objects belong class labeled superclasses 
implies object belong classes classes common subclass 
classes manager engineer common subclass exist manager engineer 
formally problem manager technical section may left unde ned avoiding contradiction 
course intended scheme 
introduce notion consistent scheme prevents problems 
de nition consistent scheme scheme edges hn hn holds node 
notice scheme consistent adding class technical manager inherits engineer manager 
language section operations goal 
operations de ned xed scheme intermediate nal instances scheme 
paredaens goal pattern matching language goal contains operations addition adds new nodes edges running instance deletion deletes nodes edges running instance 
operations follow principle pattern running instance operation applied 
pattern form weak instance necessarily value nodes value label 
de nition pattern weak instance value function allowed unde ned value nodes 
person contract num section section year year sections sections person department date date department date date example pattern shows pattern scheme represents persons contract signed department sections di erent dates identical year 
clearly pattern match parts instance 
matching called embedding pattern instance 
de nition embedding pattern weak instance total injective function pattern nodes mapped weak instance nodes type labels subtypes 
pattern nodes value labels mapped weak instance nodes value label 
edge hn paredaens goal set embeddings denoted emb 
note distinct nodes pattern mapped distinct nodes instance 
furthermore node pattern mapped node instance type subtype 
recalling employee node pattern mapped example manager node instance indicating manager node considered type employee 
additions addition add new nodes edges embedding pattern running instance 
addition represented pattern jm augmented bold nodes edges added 
bold nodes edges jm form pattern called de nition addition pair patterns jm jm subpattern patterns scheme language de ned 
str str name sections bergman employees date section treasury department nance person name num num contract str department date month day name employee year example addition represents addition new employee bergman contract starts bergman nance department added 
bergman employee treasury section 
bold node edge new node edge created 
creation new nodes edges obtain instance weak 
semantics addition ends reduction 
paredaens goal de nition semantics addition applied instance de ned reduction minimal weak embedding emb jm extension emb equal nodes jm pattern node jm mapped extension di erent node belong addition creates new association node new contract 
new association node date created merges existing date exists running instance 
new object node bergman created type employee 
node exist node merge 
basic values bergman drawn bold pattern match values exist object base added 
clearly semantics uniquely de ned isomorphism new object association nodes 
notice semantics may unde ned person receives new name removing old 
result person names property name functional possible instance 
deletions deletion delete existing nodes edges embedding pattern running instance 
deletion represented pattern jm nodes edges deleted drawn dashed lines 
nodes edges dashed form pattern called de nition deletion pair patterns jm subpattern jm patterns scheme language de ned 
represents deletion contracts removes contracted employees sections belong department contract 
deletion starts removal indicated nodes edges 
removal obtain instance weak 
semantics deletion ends reduction 
de nition semantics deletion applied instance de ned reduction maximal weak subinstance holds embeddings emb jm paredaens goal person department date section num person department date year sections contract employees example deletion node jm edge hn jm clearly semantics uniquely de ned isomorphism association nodes result merging reduction 
recursion transformation nite list additions deletions xpoints 
order handle recursion de ne xpoint transformation 
de nition xpoint de ned fht transformation nite list additions deletions xpoints 
result xpoint obtained rst iterating list transformations running instance xpoint reached 
xpoint reached semantics de ned 
de nition semantics xpoint fht applied strong instance de ned rst instance nite list holds equivalent isomorphism value association nodes result consecutively applying elements node deleted may return paredaens goal part prod class product parts class parts parts products scheme products parts product part parts product part part parts example xpoint operator shows scheme database represents products built parts turn built parts 
scheme edge labeled represents parts needed build product recursively 
transformation adds necessary edges instance 
separate operations semicolons notation xpoint 
examples section give examples goal transformations 
rst example presents calculation known abstraction 
transformation de ned context scheme 
intention create product class node class products class de ned set products contain parts 
rst operation product class created product 
notice product classes di erent products property 
prevents merged node 
second operation product classes obtain parts product belong 
third statement product class stripped products property 
property left parts property 
product classes parts merged 
products consisting parts paredaens goal product prod class prod class product part product class class parts parts products prod class products computation product classes point product class 
example shows simulate computations numbers 
purpose scheme 
num zero pos pred val old val old scheme numerical computations classes meant contain object variables respectively 
variables properties value old value 
value gives current value variable old value hold intermediate results 
relation number holds numbers zero positive 
positive number points predecessor numbers represented chained list positive numbers zero 
figures simulation simple computations 
value incremented 
value decremented 
notice old number removed may shared variables 
nodes represent number merged 
paredaens goal num num num num num old val val old val pred old plus num num num num num old val val old old val pred minus value set zero zero 
notice rst operation match value zero 
di erent nodes pattern embedded di erent nodes instance 
addition cause changes edge tries add exist 
total result identical intended 
remarks completeness goal 
previous examples observe form iteration simulated xpoint operation goal simulate computable functions numbers 
goal meant object database manipulation language interesting know reasonable manipulations computed 
known complete sense observation 
theorem goal computationally complete 
proof operations simulated goal 
technical details omitted 
paredaens goal val num val val zero zero val zero zero graphical object oriented database model graphbased manipulation language 
model result continuing research done 
distinct di erence presence called association nodes 
nodes di er normal object nodes automatically merged represent value 
suitable model relationships tuples 
fact seen uni cation concepts entity relationship approach objectoriented approach respectively 
furthermore semantics association nodes enables avoid operations abstraction completely pattern 
di erence injectivity pattern matching nodes pattern embedded node instance 
essential feature feel gives cases intuitive notion pattern matching 
operations goal resemble share simplicity expressiveness 
goal allow di erent nodes represent tuple set intermediate results 
goal ers relations conveniently model relationships objects 
furthermore goal tends lead succinct data models tuple set explicitly represented node 
small disadvantage goal association nodes represent nameless tuples need relation name 
tuples usually represent meaningful concepts deserve name anyway may considered feature bug 
goal provides multiple inheritance relations mechanism detect inheritance con icts 
chen entity relationship model uni ed view data acm transactions database systems 
nijssen halpin conceptual schema relational database dej 
paredaens goal sign fact oriented approach prentice hall sydney australia 
shipman functional data model data language acm transactions database systems 
abiteboul hull ifo formal semantic database model acm transactions database systems 
abiteboul kanellakis object identity query language primitive proceedings acm sigmod international conference management data portland pages 
richard velez object oriented data model proceedings fifteenth international conference large data bases amsterdam pages 
beeri formal approach object oriented databases data knowledge engineering 
gyssens paredaens van gucht graph oriented object database model proceedings acm symposium principles database systems nashville pages 
paredaens object oriented pattern matching language international symposium object technologies advanced software kanazawa japan pages 
van den bussche van gucht andries gyssens completeness object creating query languages proceedings rd symposium foundation computer science pages 
paredaens goal 
