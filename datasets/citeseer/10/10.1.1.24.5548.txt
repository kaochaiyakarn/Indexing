appears 
eds cl lnai springer verlag berlin heidelberg including diagnostic information con guration models tommi helsinki university technology dept computer science eng laboratory theoretical computer science box fin hut finland tommi hut fi 
presents new formal model software con guration 
con guration knowledge stored con guration model speci ed rule language 
language complete declarative semantics analogous stable model semantics normal logic programs 
addition new method add diagnostic information con guration models 
main idea divide con guration process stages 
rst stage user requirements processed check exist suitable con gurations con guration model 
second stage unsatis able requirements diagnosed diagnostic model 
diagnostic model constructed con guration model adding new set atoms represent possible error conditions 
diagnostic output explains problematic component included con guration 
example subset con guration problem debian gnu linux system formalized new rule language 
con guration diagnostic models problem 
rule language implemented existing implementation stable model semantics smodels system 
con guration problem complicated product consists di erent components con guration objects may interact complex ways 
collection objects relationships called con guration model 
con guration set objects con guration model 
may set constraints imposed model restrict allowed object combinations 
con guration process con guration model set user requirements want nd con guration satis es requirements 
con gurations divided classes 
valid con guration satis es constraints con guration model 
suitable con guration valid con guration satis es user requirements supported academy finland project helsinki graduate school computer science engineering 

optimal con guration suitable con guration additionally satis es optimality criteria 
done con guration management eld focused nding valid con gurations survey di erent con guration methods 
de ne rule language rrl express con guration knowledge 
rrl language allows variables declarative semantics stable model semantics normal logic programs 
main advantage declarative semantics implementation independence 
con guration system de ned semantics con gurations de ned behavior con guration tool tool changed set valid con gurations system may change 
addition suitable con gurations explain user case 
explanation dicult con guration model de ned semantics 
major aim closely examine situation user requirements satis ed 
cases decide suitable con guration exist need give user diagnostic explanation points problems 
diagnostic output properties 
diagnosis identify components cause problem 
component part problem diagnosis include explanation necessary take con guration 
diagnosis concise possible 
reason second property user may want include pair components mutually exclusive depend pair con icting components 
justi cation information added diagnostic model user may dicult time trying nd con guration system wants add seemingly unrelated components con guration 
third property important con gurations consist thousands components 
diagnosis contains lot information user dicult time trying nd actual problem 
take approach construct distinct models con guration system 
con guration model encodes components relationships diagnostic information stored diagnostic model 
con guration task rst try nd con guration satis es user requirements 
con guration exists con gure system 
know choose components way resulting con guration valid satis es user requirements compute diagnosis 
constructing invalid con guration satis es user requirements explaining violates constraints model 
process illustrated 
suitable con guration exist 
con gure system compute diagnosis model fig 

conceptual con guration task main reason models separated simplicity 
nd easier construct con guration model worry adding diagnostic information 
diagnostic model easier construct worry false alarms caused incompatible optional components 
reason separation eciency 
current implementation ecient models separated results conclusive possible exists ecient way combine data model 
practical example consider con guration management problem debian gnu linux system 
debian distribution gnu linux operating system currently version distinct software packages 
package may interact packages various ways 
package may depend functionality provided packages may con ict package may recommend package taken con guration 
debian distribution interesting case con guration management main reasons 
relationships software packages explicitly described collected place 
possible generate con guration model system automatically information 

large number software packages con guration management debian system non trivial task formal method handle probably handle dicult cases 
possible model con guration management debian system completely formalize small subset concentrate diagnostic model 
system modeled preliminary evaluation results 
rule language section introduce declarative rule formal language rrl subset language rl de ned 
language rl con guration rule language 
basic language component atom form predicate symbol variables constants 
convention variables start capital letter constants lower case letter 
literal atom negation nota 
literal ground literal variables 
truth valuation set ground atoms 
valuation assigns truth value ground literal 
atom true false 
negative literals conditions reversed 
atom literal nota false vice versa 
encode relationships atoms inference rules possible forms hm atom rule head literals form rule body 
rules form called basic rules rules form called choice rules 
basic rule empty rule body called fact 
ground instance rule obtained replacing variables constants 
rrl program set rules 
intuitive meaning basic rule literals rule body true head atom true 
body choice rule true include subset atoms hm model 
strictly speaking choice rules necessary replaced adding rule form noth noth choice rules programs compact syntax easy expand handle cases speci number atoms hm true body true 
de ne formal semantics rrl 
de nition similar stable model semantics normal logic programs 
variables handled instantiating rules possible constants program computing stable models resulting program 
de nition 
herbrand instantiation hi rrl program set ground instances rules constructed constant symbols example 
fp program hi hi de nition 
ground rrl program set atoms construct reduct 
replacing choice rules hm set fh mg rules 

removing rule negative literal nota body 
removing negative literals bodies remaining rules 
example 
ffag fbg fag 
construct reduct fa set reduct 
reduct set horn clauses unique minimal model mm 
minimal model coincides say stable model de nition 
rrl program set atoms stable model mm hi 
example 
ffag fbg 
stable models fag fbg 
saw example reduct regards fa minimal model fag coincides hand fa bg model propositional sense stable model reduct empty minimal model 
theorem 
ground rrl program question exists stable model np complete 
proof 
np hardness follows directly fact problem existence stable model normal logic program np complete normal logic programs rrl programs 
guess model construct reduct linear time respect number literals rule bodies minimal model mm computed linear time 
implies problem np np complete 
package justi ed depends con icts user include user exclude justi ed user include justi ed depends justi ed recommends fig 

simpli ed debian con guration model cm con guring debian system section formalize small subset con guration management problem debian gnu linux system 
particular formalize dependency con ict recommendation relations system 
leave package version information outline included model 
package depends package installed 
package con icts operate installed system 
package recommends enhances functionality signi cant way 
recommendation relation brings concept optionality con guration model 
package recommends choose add recommended package leave 
complete formalization debian con guration system 
debian con guration model cm constructed rrl language divided parts 
database stores information packages relations facts 
set inference rules construct valid con gurations facts stored database 
software packages modeled constants database 
package add corresponding constant program 
relations modeled predicates example package depends atom depends added fact program 
inference rules form core con guration model 
debian con guration essentially set packages predicate denote package chosen con guration 
valid con gurations con guration model correspond stable models rrl program 
user requirements modeled predicates user include user exclude 
set user requirements set facts form user include user exclude atom user include user explicitly selected con guration user exclude user wants ensure con guration 
de nition 
debian con guration model cm set user requirements stable model cm debian con guration cm set packages cm fp mg want con gurations compact 
contain user selected packages packages depend 
additionally package recommended package con guration may included con guration may left 
encode principle predicate justi ed true stable model package reason con guration 
basic rule con guration model package may added con guration justi ed justi ed package predicate package added rule body ensure available packages may added con guration 
error package con guration dependencies satis ed depends may con icting packages con guration con icts user explicit choice regarding package choice adhered user include user exclude package justi ed user selected package con guration depends included package recommends 
justi ed user include justi ed depends justi ed recommends mail extension mail reader mail reader mail transport agent dependency con ict recommendation fig 

relationships packages example example consider simple system consists di erent packages 
di erent mail reader packages mail reader mail reader mutually exclusive need installed mail transport agent mail transport agent package correctly 
addition mail reader recommends extension package mail extension mail reader relationships packages shown facts encode relationships table 
example 
suppose user selects mail reader package adding atom user include mail reader fact program 
conclude rules atoms justi ed mail reader mail reader stable model program 
mail reader con guration justify mail transport agent mail extension 
package justi ed 
justi ed packages include con guration rule 
rule forces add mail transport agent model 
choice left add mail extension package 
suitable con gurations mail reader mail transport agent mail extension mail reader mail transport agent example 
suppose user decided mail extension package wants mail reader requirements modeled adding facts user include mail extension user include mail reader program 
atom mail reader model leads table 
facts encode example 
package mail reader depends mail reader mail transport agent package mail reader depends mail reader mail transport agent package mail extension depends mail extension mail reader package mail transport agent con icts mail reader mail reader recommends mail reader mail extension contradiction mail reader 
consequence suitable con gurations 
main weakness con guration model model version information system 
unacceptable real applications need nd way extend model 
brief outline extension details 
associate di erent versions package predicate available version true version package con guration model 
predicate divided cases 
atom true exactly version chosen con guration 
atom true version con guration 
relationships packages may parametrized version numbers 
example package may depend version 
kinds dependencies modeled atoms form depends op op corresponding relational operator 
add rules ensure compatible version con guration 
rules may expressed compactly extending language allow cardinality literals form fl integral lower upper bounds respectively literals 
intuition cardinality literal cardinality literal satis ed number satis ed literals inclusive 
cardinality literals dependency constraint expressed fin available version depends available version denotes set packages may potentially satisfy dependency 
set automatically computed instantiation logic program 
diagnostic model construct diagnostic model dm adding new set atoms represent potential error conditions explanations 
modify constraints way diagnostic model stable model 
new atoms true stable model identify set errors requirements give explanation case 
new atoms divided classes depends package missing depends package user include package missing user include package con ict con icts con ict user exclude user exclude needs reason missing needs reason con ict package needs reason con ict package needs reason depends needs reason user selected needs reason user include needs needs reason depends fig 

simpli ed debian diagnostic model dm 
atoms denote error conditions 
predicates missing con ict purpose 

atoms mark packages way part problem need explanation 
predicate needs reason 

atoms explain certain packages taken con guration 
predicates user selected needs purpose 
predicates de ne debian diagnosis formally 
de nition 
debian diagnostic model dm set user requirements diagnosis tuple em pm rm 
stable model dm 
em error set em mg fin con ict mg 
pm problem set pm fp needs reason mg 
rm explanation set rm selected mg mg new program may diagnosis way break constraints 
diagnosis corresponds set choices lead contradiction 
diagnosing problem examine model 
reason possible choices lead contradiction matter particular set choices examine 
diagnosis prefer con icts missing packages 
example shows necessary 
example 
consider situation user wants packages con guration 
package needs con ict ways invalidate constraints 
add con guration con ict thing happens add leave dependency relation satis ed 
rst cases give information third 
notice real problem including packages con guration leads con ict 
third case notice dependencies satis ed directly see caused problem 
rst modi cation con guration model remove rule want diagnosis contain packages small possible 
addition ensures false alarms caused adding unnecessary recommended packages con guration 
missing packages atom missing denote package con guration depends reason con guration 
take approach add necessary packages con guration package may missing con guration model 
replace rule con guration model pair rules depends package missing depends package rule ensures existing packages added model rule marks non existing packages missing 
addition may case package user explicitly included con guration available 
handle situation replace rule rules user include package missing user include package con icts predicate con ict model con icts 
de ne atom con ict true exactly con ict con guration 
diagnostic model replace rule con ict con icts handle case user wants leave package package needs 
special constant user exclude rule con ict user exclude user exclude model cases 
justi cations package missing con guration packages con ict know problematic packages necessary 
base case package necessary user chose con guration 
package necessary mandatory package depends 
predicate needs reason mark atoms want justify 
nd explanations rst marking packages directly cause problems recursively marking packages depend marked packages con guration 
accomplished rules needs reason missing needs reason con ict package needs reason con ict package needs reason depends needs reason model justi cations predicates user selected needs 
atom user selected true user chose con guration atom needs true included con guration depends 
justi cations modeled rules user selected needs reason user include needs needs reason depends example 
reconsider situation example 
rule include atoms mail reader mail extension model adds atoms mail reader mail transport agent 
include atom con ict mail reader mail reader model 
con ict want nd reason 
rules know needs reason mail reader needs reason mail reader model 
rule see nd reason mail extension 
rule nd explanations user selected mail extension user selected mail reader 
get justi cation package rule nd needs mail extension mail reader model 
included model full diagnosis fin con ict mail reader mail reader reader mail reader mail selected mail reader user selected mail extension needs mail extension mail reader implementation con guration diagnostic models implemented extended logic programs smodels system developed laboratory theoretical computer science helsinki university technology 
smodels system available models described available preliminary tests full debian con guration model results 
model generated actual data debian version di erent packages 
model tested generating random set user requirements measuring time nd suitable con guration diagnosis 
tests run mhz intel pentium ii mb main memory 
compilation model took approximately seconds valid con guration seconds 
results similar diagnostic model 
models incorporated concrete con guration tool test results give hope possible approach practice 
method add diagnostic information con guration models de ned rule language rrl 
approach divide con guration task phases 
rst phase try nd con guration satis es user requirements 
con guration task completed 
second phase diagnose user requirements trying nd explanation unsatis able 
generate diagnostic model adding new set atoms con guration model represent possible error conditions modify rules ensure diagnostic model stable model user requirements 
new atoms true diagnosis identify set errors requirements 
addition diagnosis contains explanations tell component related error reason con guration 
modeled part con guration management problem debian gnu linux system rrl 
con guration diagnostic models constructed 
con guration objects distinct software packages may depend con ict recommend 
models simpli ed problem version management addressed brie possible error types user requirements debian con guration model 
rst necessary packages missing con guration 
second con icting packages con guration 
de ned diagnostic model way con icts preferred missing packages give information user package left cause con ict user notice absence package real cause apparent 
explanations generated marking packages missing con ict problematic packages 
addition packages depend problematic packages marked 
done possible problems arise unrelated packages depend con icting packages 
full con guration model debian system 
model incorporated existing tool step research construct simple back testing real environment 
results promising model integrated existing debian con guration tool 

debian gnu linux 
available 
dowling gallier 
linear time algorithms testing satis ability propositional horn formulae 
journal logic programming 

gelfond lifschitz 
stable model semantics logic programming 
proceedings th international conference logic programming pages seattle usa august 
mit press 

marek truszczy nski 
autoepistemic logic 
journal association computing machinery 

ilkka niemel patrik simons timo soininen 
stable model semantics weight constraint rules 
proceedings fifth conference logic programming nonmonotonic reasoning 
springer verlag december 

daniel sabin rainer 
product con guration frameworks survey 
ieee intelligent systems applications pages october 

simons 
ecient implementation stable model semantics normal logic programs 
research report helsinki university technology helsinki finland september 

simons 
extending stable model semantics expressive rules 
proceedings th international conference logic programming nonmonotonic reasoning pages el paso texas usa december 
springer verlag 

timo soininen ilkka niemel developing declarative rule language applications product con guration 
proceedings international workshop practical aspects declarative languages 
springer verlag january 


rule formal model software con guration 
research report helsinki university technology laboratory theoretical computer science helsinki finland december 

van emden kowalski 
semantics predicate logic programming language 
journal association computing machinery 

wielinga schreiber 
con guration design problem solving 
ieee expert march april 
