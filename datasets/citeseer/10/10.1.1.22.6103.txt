appeared proceedings ecoop lncs springer verlag pp 
object oriented effects system aaron greenhouse john boyland carnegie mellon university pittsburgh pa cs cmu edu university wisconsin milwaukee milwaukee wi boyland cs edu 
effects systems describes state may accessed execution program component 
information assist reasoning program determining data dependencies may exist computations 
define effects system java preserves abstraction facilities objectoriented programming languages attractive 
specifically subclass may extend regions mutable state inherited superclass 
effects system permits object state contain state wholly owned subsidiary objects 
describe set annotations declaring permitted effects method headers show actual effects method body checked permitted effects 
effects computation include reading writing mutable state 
effects system adjunct type system includes ability infer effects computation declare permitted effects computation check inferred effects set permitted effects 
effects system describe motivated desire perform semantics preserving program manipulations java source code 
transformations wish implement change order computations executed 
assuming computations intervene computation single entry single exit sufficient require effects computations interfere computation write state read written 
system tracks reads writes mutable state effects interesting allocation effect fx 
java supports separate compilation dynamic loading code goals project carry transformations material supported defense advanced research projects agency rome laboratory air force materiel command usaf agreement number 
government authorized reproduce distribute reprints governmental purposes notwithstanding copyright annotation thereon 
views contained authors interpreted necessarily representing official policies endorsements expressed implied defense advanced research projects agency rome laboratory government 
john boyland supported equipment sun microsystems incomplete programs 
earlier proposed system program annotations including ones declare permitted effects missing code 
effects system described uses expands annotations 
declaring permitted effects method necessarily constrains implementation method method overrides want break abstraction revealing implementations details program classes 
requirements useful object oriented effects system provide ability hide names private fields 
names map multiple mutable locations 
introduces concept named region object 
regions object provide hierarchical covering notional state object 
idea extended objects sole unique objects state owned objects treated extending state owning object 
result complex numerous objects hash table handled single notional object comprising regions mutable state 
effects system uses declared annotations fields methods java 
annotations non executable ignored implementing program optimizing compiler may find information useful 
exact representation annotations important purposes shown extension java syntax 
syntax effects annotations section 
method body checked annotation annotations methods calls 
similar type checking context separate compilation method bodies checked point program obeys annotations 
section describe basic concept effects system region mutable state object 
describe technique inferring effects computation checking inferred effects declared effects 
section show regions unique objects mapped owners 
precise description system appendix 
regions objects region encapsulation mutable state 
read write effects method reported respect regions visible caller 
section describe general properties region regions specified programmer 
describe methods annotated effects computed annotation method checked correctness 
properties regions regions program hierarchy root hierarchy single region includes complete mutable state program leaves hierarchy mutable fields comprise entire mutable state program 
see field region child regions 
hierarchy permits describe state accessed computation varying precision precise listing individual fields accessed precise 
java fields declared classes static 
case instance fields declaration implies multiple fields object class field declared 
generalization fields regions similarly declared classes ways static declarations add new region instance declarations add set disjoint regions object class region declared 
call non field regions regions 
region declared inside parent region creating hierarchy 
parent region specified static region declaration refer instance region static region effect multiple parents 
root region declared static child regions instance region instance declared root class object 
instance regions inherited subclasses subclass may declare regions possibly inherited non field region 
able extend existing regions critical able specify effects method able meaningfully override method see example 
arrays treated instances class array instance region pronounced element subregion instance 
subscripted element array accessed treated access region 
accessibility modifiers apply field declarations java public protected default package access private apply region declarations 
root region descendants instance public 
specifying regions new syntax declare regions class definitions 
syntax region region declares instance regions 
adding keyword static declare static region 
parent region may specified declaration appending annotation parent field region declaration 
region declarations explicit parent assigned instance respectively static 
external state file state scope 
suffice special regions model external state 
term emphasize implementation hiding characteristics regions usual sense java methods impose implementation requirements subclasses 
precision obtained distinguishing different types arrays especially arrays primitive types 
class point public region position private int position private int position public scale int sc reads writes position sc sc class colorpoint extends point public region appearance private int color appearance class point extends point private int position public void scale int sc reads writes position super scale sc sc fig 

definitions classes point colorpoint class point java field selection syntax object field instance fields class field static fields provision omitting current class extended regions 
example 
consider class point 
declares fields region position parent region 
instance class point instance regions instance contains position turn contains class point method scale 
method correctly annotated writes position short writes position 
annotation writes fields private method public 
annotation writes instance legal precise 
class colorpoint inherits point declaring field color new region appearance implicitly subregion instance 
colorpoint scale int overriding method access color color position reasonable color geometric property 
precise annotation scale int mentioned limitation lifted color instance 
create second subclass point point adds new field position allowing changed overriding scale int shown 
regions effects stated earlier effects objects reported terms regions affected 
distinguish kinds effects read effects annotation reads targets writes targets targets target target target var region region specific instance class region region instance class class class region static region class var restricted method parameters receiver 
fig 

syntax method annotations 
may read contents region write effects may change read contents region 
making writing include reading useful overriding methods demonstrated examples 
closely follows optional write modeled static single assignment form ssa merge read write 
methods labeled permitted effects notation similar java throws clause 
gives syntax method effect annotations 
analogous throws clauses declared effects method describe method overriding implementations affect 
error overriding method effects declared method overrides 
soundness static analysis effects system compromised 
example 
example shows importance regions usefulness having write include reading 
consider class var shown encapsulates reading writing value 
show set annotations permit useful subclass assuming legal expose names private fields regions annotations class var private int val public void set int reads writes val val public int get reads val writes return val suppose extended class remember previous value 
annotations illegal declared effects set greater declared effects var set 
class extends var private int saved public void set int reads writes val saved saved get super set public void undo reads saved writes val super set saved placing fields val saved inside new region value able produce legal effect declarations class var public region value private int val value public void set int reads writes value val public int get reads value writes return val class extends var private int saved value public void set int reads writes value saved get super set public void undo reads writes value super set saved implementation set legal writing include possibility reading 
computing method effects effects computed bottom traversal syntax tree 
statement expression associated set effects 
effect produced expression reads writes mutable variable mutable object field java immutability indicated final modifier 
effects expressions statements include union effects sub expressions 
computed effects specific regions possible 
analysis intraprocedural effects method calls obtained annotation called method analysis method implementation 
method declared effects respect formal parameters method effects particular method invocation obtained substituting actual parameters formal parameters declared effects 
checking method effects check method effects permitted effect computed body method checked effects permitted method annotation 
computed effect effects local variables irrelevant method returns effects newly created objects included permitted effects annotation 
hierarchical nature regions ensures effect included union effects included individual effects 
constructor annotations required include write effects instance region newly created object 
exceptions seen instance effects masking defined fx 
read effect includes read effect target includes target 
write effect includes effect target includes target may read write effect 
target var region includes target instance region included region 
target class region includes instance target referring region included region 
target class region includes target region included region 
appendix defines effect inclusion precisely 
example 
consider body set class 
inferring effects method body collect effects writes saved saved reads value get writes value super set 
reads effect ignored involves local variables 
effects included effect writes value annotation 
annotation method overrides unshared fields section describe additional feature effects system permits private state object abstracted hiding implementation details data type user class 
ideally user class vector care implemented array valid annotation addelement method far reveal effects interfere access existing array 
example array implement vector entirely encapsulated object impossible effects internal array interfere array 
addition effect annotations add annotation unshared language modifier field declarations 
unshared fields semantics unique fields described earlier formalized submitted 
essentially unshared field aliases read object read accessible variable local parameter field 
analysis ensures property partly keeping track dynamic aliases created read analysis rejects programs may property 
unique annotations formal parameters return values 
previously mentioned analysis ensures corresponding actual parameters point call unique return value method returns 
detailed comparison related terms researchers please see related 
class resolve region define inclusion 
precisely object accessed variable 
public class vector public region elements size private object list elements private int count size public vector reads writes list new object count public void addelement object obj reads writes size elements array count list length object temp new object list length 
int list length temp list list temp list count obj 
fig 

dynamic array class implemented unshared fields 
notice exposure writes array method addelement 
unshared fields refer object unshared field refers unique object 
object referenced reasonable think contents referenced object contents object instance regions object mapped regions object way existence object abstracted away 
default instance regions object referred unshared field mapped region contains unshared field equivalent mapping region instance region 
changed programmer 
examples extend syntax unshared fields map regions object referenced unshared field regions object containing field 
mapping enclosed braces 
see declaration field list 
mapping instance regions unshared field precisely regions object instance preserve region hierarchy 
consider unshared field object maps region region region descendant mapped descendant public class vector public region elements size private unshared object list elements instance elements private int count size public vector reads writes list new object count public void addelement object obj reads writes size elements count list length object temp new object list length 
int list length temp list list temp list count obj 
fig 

dynamic array class implemented unshared fields 
differences underlined 
writes array absent annotation method addelement 
example 
consider class vector shown implements dynamic array 
known possible aliasing field list assumed array aliased element array referenced list interferes array 
main reasons undesirable 
requiring effect annotation region revealed dynamic array implemented array 
reason user class needs know 
second required effect annotation prevents statements swapped vector vector aliased recall intend analysis support semantics preserving program manipulations 
vector addelement obj vector addelement obj reason user class expect distinct dynamic arrays interfere 
problem implementation vector indicate instantiations necessarily independent simple inspection code reveal 
making list field unshared information provided 
instance region includes region list mapped region elements vector object longer necessary include effect writes array annotation addelement 
checking method effects previous section mentioned passing effects local variables omitted checking method effects permitted 
effects newly created objects omitted similarly effects unique passed parameters omitted virtue passing caller retains access similar linear objects effects irrelevant 
unshared fields affect check inferred effects permitted effects 
specifically declared mappings convert effects regions unshared field effects regions owner 
process called elaboration detailed appendix 
irrelevant effects masked elaborated effects remaining effects checked method annotation 
example 
unshared fields away implementation class implement data type different ways classes methods having annotations 
consider implementation dynamic array shown 
field head class unshared 
captures notion dynamic array maintains unique list elements 
necessary sufficient effect annotations addelement correct 
sufficient indicates element linked list unshared says elements 
intention dynamic array maintains distinct linked list field node declared unshared 
verify annotation method addelement class node reads writes 
effect condition statement reads effect branch reads writes 
effect parameter ignored outside method effects covered declared effect writes 
branch interesting having recursive call addelement 
looking declared effects addelement find reads writes 
actual value receiver substituted method effects 
receiver case unshared field region mapped region 
effect method call writes write region object covered declared effects 
checking declared effects addelement correct effects vector addelement straightforward 
creation new node produce effects noticeable outside method 
conditional statement reads writes head class node public region obj public object obj obj public unshared node instance public unique node object node reads writes obj public void addelement unique node reads writes null addelement class public region elements size private unshared node head elements instance elements private int count size public reads writes head null count public void addelement object obj reads writes elements size node tail new node obj null head null head tail head addelement tail count 
fig 

dynamic array implemented linked list 
note annotation addelement object 
calls addelement head 
effects covered declared effect writes elements effect method call writes elements method call writes region unshared field head maps elements 
incrementing count effect writes count covered declared effect writes size 
example 
gives simple implementation dictionary association lists annotations away implementation details 
demonstrates utility able map regions unshared field multiple regions owner 
set annotations hash table built hash code method system 
assuming variable declared type table annotations permit reordering pair permit reordering clear 
annotation clear precise possible 
effect analysis briefly describe effects analysis applying semantics preserving program manipulations 
precondition manipulations typically cause code motion data dependencies parts program affected manipulation 
general computations interfere mutates state accessed 
assuming effects system sound see section computations interfere effect computation conflicts effect second 
effects conflict write effect involve targets may overlap may refer mutable state run time 
targets may overlap refer overlapping regions hierarchical nature regions ensures regions overlap included 
furthermore instance target instance region particular object overlap instance target objects identical 
effect inference system computes effects targets expressions computation context 
equality compared devoid context 
observation led formalize desired notion equality new alias question 
steensgaard points analysis may conservative approximation 
considerations complicated unshared fields 
details may seen appendix 
related reynolds showed interference algol programs restricted rules prevent aliasing 
technique simple general requires access bodies procedures called order check class node object key val unshared node instance instance key key val val unique node object object unique node reads writes key val int count reads writes null return return count object get object reads key val writes key return val null return null return get 
boolean object reads key writes return key null void pair reads key writes val val key null pair public class table region table region key table value table structure table private unshared node list structure instance instance key key val val structure return number key value pairs public int count reads structure writes list null return return list count remove entries table 
public void clear reads writes structure list null public object get object reads table writes list null return null return list get public void put object object reads writes table 
public void remove object reads writes table 
public boolean contains object reads val structure writes 
public boolean object reads key structure writes return list null list pair existing key 
public void pair reads key structure writes value list null list pair fig 

simple dictionary class effects annotations 
operate overlapping global variables 
includes type system mutable records records recursive type lists trees possible 
jackson aspect system uses similar abstraction mechanism regions order specify effects routines data types 
uses specifications procedure order allow checking proceed modular fashion 
specifications necessary effects check missing functionality 
effects studied fx system higher order functional language cells 
burden manual specification effects lifted effects inference studied gifford jouvelot talpin 
motivated desire stack allocation heap allocation pure functional programs assist parallel code generation 
approach demonstrated successfully purpose 
researchers concept disjoint regions mutable state regions global opposed objects 
original fx system effects verified exploited separately developed program components 
leino defines data groups sets instance fields class 
method declares data groups modify 
regions subclass may add new instance fields existing data groups proposal field may added data group 
system ability sound modifies clause see method modify field see effects methods interfere 
numerous researchers examined question unique objects detailed 
clarke potter noble formalized notion owner separates ownership uniqueness 
notion ownership appears useful kind effects analysis precise mechanism remains 
described ongoing 
continuing extend effects system cover java 
intend system infer suggested annotations methods 
ultimately effects system determine possible data dependencies statements require form alias analysis 
section sketches ideas 
important aspect static effect system sound say computations interfere access shared state fact 
proving soundness requires run time definition interference show conservatively approximated analysis 
run time state program interested includes fields reachable objects state local variables temporaries activation frames 
effects computation seen reads writes elements state 
effects compared second computation 
interference occurs element state written computation read written 
begun formulating proof correctness concept run time state accounted target covered target proving target includes target covers covered 
java permits limited form multiple inheritance form code interfaces 
order permit useful annotations method headers interfaces able add regions interfaces handle multiple inheritance instance regions 
static fields static regions inherited complicate matters 
multiple inheritance instance regions handled permitting class interface inheriting regions interface map regions long hierarchy preserved 
regions visible superclass classes interfaces performing mapping relation unrelated class interface 
restriction ensures reasoning regions remains sound 
conflicting relations superclasses superinterfaces may forbid certain inheritance combinations 
java blank final fields fields initialized constructor class declared follow restrictions final fields may assigned 
java language forbid methods reading value final field method called constructor field initialized 
situation aggravated classes override methods called constructor superclass 
order treat blank finals finals immutable fields determine data dependencies correctly extra annotations needed methods may called constructor 
particular methods annotated list blank final fields may read 
annotation breaks abstraction degree needed checking class subclasses 
java supports multiple threads 
far ignored possibility state modified concurrent thread 
explained javaworld article thread safety access field ensured situations 
access protected synchronization owning object 
field immutable final 
object thread safe wrapper 
cases easily checked syntactic checks 
third condition satisfied field accessed unshared unique 
discussed earlier task adding annotations burdensome semi automated 
technique test method stays permitted effects annotation help generate annotation unannotated method 
essentially set effects inferred method culled removing redundant effects effects regions inaccessible caller promoted effects nearest accessible parent region 
introduced effects system java permits implementor express effects method terms regions terms mutable private fields 
effects system properly treats wholly owned subsidiary objects part owning object 
introduce way checking effects inferred body method effects permitted method annotation 
described effects system check consistency annotations 
determine may data dependencies computations involving separately compiled code 
acknowledgments colleagues cmu william scherlis edwin chan adam webber comments drafts numerous conversations topic 
anonymous reviewers 

alexander aiken manuel fahndrich levien 
better static memory management improving region analysis higher order languages 
proceedings acm sigplan conference programming language design implementation san diego california usa acm sigplan notices june 

john boyland 
deferring destruction reading unique variables 
submitted march 

john boyland aaron greenhouse 
new alias question 
submitted march 

edwin chan john boyland william scherlis 
promises limited specifications analysis manipulation 
proceedings ieee international conference software engineering icse kyoto japan april pages 
ieee computer society los alamitos california 

david clarke john potter james noble 
ownership types flexible alias protection 
oopsla conference proceedings object oriented programming systems languages applications vancouver canada october acm sigplan notices october 

gifford jouvelot lucassen sheldon 
fx manual 
technical report mit lcs tr massachusetts institute technology laboratory computer science september 

daniel jackson 
aspect detecting bugs dependencies 
acm transactions software engineering methodology april 

pierre jouvelot david gifford 
algebraic reconstruction types effects 
conference record eighteenth annual acm sigact sigplan symposium principles programming languages pages 
acm press new york 

rustan leino 
data groups specifying modification extended state 
oopsla conference proceedings object oriented programming systems languages applications vancouver canada october acm sigplan notices october 

john reynolds 
syntactic control interference 
conference record fifth acm symposium principles programming languages pages 
acm press new york january 

bjarne steensgaard 
points analysis linear time 
conference record third annual acm sigact sigplan symposium principles programming languages st petersburg florida usa january pages 
acm press new york 

jean pierre talpin pierre jouvelot 
polymorphic type region effect inference 
journal functional programming july 

mads tofte jean pierre talpin 
implementation typed call value calculus stack regions 
conference record annual acm sigact sigplan symposium principles programming languages portland oregon usa january pages 
acm press new york 

bill 
design thread safety design tips synchronization immutable objects thread safe wrappers 
javaworld august 
definitions appendix class names types variable names represented elements set identifiers ide 
assume facilities available determining type class expression variable class hierarchy available determining classes related 
phrase class descendant class mean class equal superclass descendant var ide name ide type ide class ide syntax programming language language features text omitted simplicity remaining features express omitted features 
method receiver object implicit 
illegal write formal parameter 
parent regions specified default mappings unshared fields 
require instance fields regions explicitly declared keyword instance 
preprocessing pass convert program language body 
program classdecl classdecl class name extends name region field method constructor region kind region name name field kind type name name kind unshared type name name mappings mapping mapping mappings mapping name name kind instance static method type name params annotation block constructor name params annotation block annotation reads locations writes locations locations location location location var region class region class region params ffl type name block stmt stmt block return return expr type name expr expr args expr stmt stmt expr stmt expr name expr expr expr field expr phi expr true null type args ffl expr expr expr method args new type expr new class args super tracking locals need track mutable state occur local variables 
analysis computes relation local variables expressions preceding grammar variable may equal 
relation permits local paired initial value formal parameter 
necessary expressions available analysis point side effect free purpose 
analysis similar standard def dataflow analyses 
relations drawn set vb variable bindings 
bindings ide vb ide expr vb bindings name fb name fg gamma name statement define sets gamma fixed point solution set equations defined regard syntax method constructor name params block gamma block var var var block stmt stmtn gamma stmt gamma stmt block gamma block stmt stmt stmt block gamma block stmt gamma stmt block stmt stmt gamma stmt stmt type name stmt gamma stmt stmt name expr stmt gamma stmt phi name expr gamma stmt psi stmt expr expr stmt gamma stmt stmt args stmt gamma stmt stmt expr stmt stmt gamma stmt gamma stmt gamma stmt gamma stmt stmt stmt stmt stmt expr stmt gamma stmt stmt gamma stmt stmt gamma stmt stmt analyzing target involving local variable need set binding 
shorthand gamma immediately enclosing statement 
formalization regions effects region triple class name tag class class region declared name name region tag indicates region static instance 
require name region unique 
regions ide theta ide theta set instance regions regions ide theta ide theta set static regions regions regions regions ide theta ide theta effect read write kinds targets represent different granularities state 
effect read target write target target local ide instance expr regions static regions region hierarchy triple regions parent unshared regions set regions program parent parent ordering regions parent super region unshared mapping regions unshared fields regions class 
mapping set tuples class field region region interpretation field unshared field instances class class region region object referenced field mapped region region object containing field map ide theta ide theta regions theta regions hier regions theta regions regions theta map object static instance object instance instance element array instance fall instance instance element instance lookup regions ide ide regions lookup class descendant class region hierarchy parent built initial hierarchy analyzing field region declarations program class definitions 
properties region may parent region instance unshared field mapped region owning object unshared mappings respect tree structure instance regions unshared fields may mapped regions static unshared field may mapped static regions 
ru rc instance ru rc ru rc ru instance regions rc regions inclusion region hierarchy parent create reflexive transitive closure parent define inclusion relation regions 
regions theta regions parent inclusion relation targets defined reflexive transitive closure relation parent unshared ru rc shared unshared parent target theta target local parent local instance parent instance parent instance parent instance lookup typeof regions instance parent shared instance parent static lookup typeof regions parent parent parent static parent static parent static parent target theta target parent effect inclusion defined obvious manner 
effect theta effect read read write write read write method annotations method annotations construct method dictionary set tuples class method params effects class method method constructor name params vector type identifier pairs captures method signature formal parameter names effects set effects method produces 
method dictionary produced analyzing annotations methods defined class 
program region hierarchy parent set method dictionary ap 
method ide theta ide theta ide theta ide theta effect ap program regions method method ac classdecl regions method method ab regions ide method method ad regions ide method method aa annotation regions effect locations regions target af params 
ide theta ide ap classdecl ac classdecl delta delta delta ac classdecl ac class extends ab ab ad delta delta delta ad ad region ad field ad type name params anno name af params aa anno ad params anno af params aa anno aa ffl aa reads locs writes locs locs read locs write location location var region var lookup typeof var region class region lookup class region class region lookup class region af ffl af type name type name af type name params type name ap params typeof expr ide typeof static class expression computing effects effects expression program region hierarchy parent effects dictionary parent gamma hier method effect features effects return type true null features direct effects stmt stmt return expr expr expr expr expr expr expr stmt stmt expr stmt stmt expr stmt expr stmt expr phi expr expr expr expr expr expr new type expr expr features direct effects reading writing local variable produces effect local target 
array subscripting produces effect array region 
accessing field produces effect instance static target depending field instance static field respectively 
var fread local var fread local expr expr expr expr fread instance expr element expr field parent expr parent fread rgn lookup typeof expr field ae instance expr rgn rgn regions static rgn rgn regions var fwrite local var expr expr expr expr fwrite instance expr element expr field parent expr parent fwrite rgn lookup typeof expr field ae instance expr rgn rgn regions static rgn rgn regions method constructor calls addition effects produced evaluating actual parameters receiver method calls effects produced method 
looking method called method dictionary find uses language specific static method resolution semantics substituting expression actual parameter formal effects instance targets 
helper function process creates vector type expression pairs argument list types find expressions pair 
function pair create set formal actual parameter pairs 
actual substitutions function replace 
expr method args expr args replace pair expr process args method find typeof expr method new class args args replace pair process args class class find class class args args replace pair process args method find typeof typeof find method ide ide 
ide theta ide method find subject language static method resolution mechanism process args 
ide theta expr process ffl process expr typeof expr expr process expr process expr process pair ide theta ide 
ide theta expr ide pair pair pair replace effect ide effect replace gamma fread pg fwrite pg fread read pg fwrite write pg elaborating effects masking need expand set effects take account bindings local variables mapping unshared fields 
particular need elaboration check method annotation 
elaborate phi read elaborate phi psi read psi phi write elaborate phi psi write psi elaborate smallest set instance instance instance instance minr frc ru rc rug effect masking accomplished dropping effects local variables regions local variables handled elaboration regions newly allocated objects regions unshared fields redundant elaboration mask phi read mask phi psi read psi phi write mask phi psi write psi mask ft forms local local parameter instance local variable parameter instance instance unshared checking annotated effects annotated effects method ea need checked computed effects method ec ea account possible effect method annotation invalid 
formally annotated effects method valid mask elaborate ea conflicts interference effects conflict read included effects write included effect overlap extended sets effects conflict elaborate elaborate conflict 
computations interfere conflicting sets effects 
target overlap overlap symmetric closure overlap overlap regions theta regions overlap overlap target theta target overlap overlap overlap overlap target theta target local overlap local instance overlap instance overlap instance overlap shared overlap instance overlap static shared overlap overlap overlap overlap static overlap static overlap static overlap 
