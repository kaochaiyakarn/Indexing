management evolving speci cations category theory steve easterbrook nasa software research lab university drive wv usa atlantis nasa gov structure important large speci cations understanding testing managing change 
category theory explored framework providing structure successfully compose speci cations 
typically adopted correct construction approach components speci ed proved correct composed way preserve properties 
large project desirable able mix speci cation composition steps particular moment process may established properties components composition relations 
propose adaptations categorical framework order manage evolving speci cations 
demonstrate utility framework analysis part software change request space shuttle 
structure important large speci cations reasons important programs principles modularity information hiding essential managing large scale speci cations 
chosen structure greatly facilitates understanding validation modi cation speci cation 
primarily concerned management evolving speci cations especially analysis change requests 
ideally speci cation structure allows isolate changes small number components speci cation reason impacts change interconnected components 
category theory proposed framework providing structure successfully provide composition primitives algebraic temporal logic speci cation languages 
category theory ideal purpose provides rich body theory reasoning supported nasa nag objects relations case speci cations interconnections 
su ciently applied wide range di erent speci cation languages 
lends automation example composition speci cations derived automatically provided category speci cations obeys certain properties completeness 
drawback category theory branch mathematics removed practical software engineering formal methods 
philosophy hide possible underlying theory user whilst providing environment interconnecting speci cations reasoning resulting structures 
category theory software speci cation typically adopted correct construction approach components speci ed proved correct composed way preserve properties 
large project desirable able mix speci cation composition steps particular moment process may established properties components composition relations 
re ects reality large scale speci cations constructed team people 
speci cations inconsistent lifecycle 
speci cation evolves change may introduce inconsistencies 
correct construction approach requires eliminated change applied speci cation 
practice desirable temporarily ignore inconsistencies reasons 
firstly resolution inconsistency depends information available wish hold development process force premature decision 
secondly useful able explicitly represent inconsistencies reason possible corrective actions 
demonstrate categorical framework adapted manage evolving spec cations 
elements approach ability deal morphisms completely veri ed proof obligations discharged limits provide information potential ects di erent relationships system built integration properties framework speci cations order facilitate management evolution 
structured follows 
section provides brief overview notions category theory sucient understand 
section illustrates theory applied problem composing speci cations category speci cations speci cation morphisms 
section describes adaptation framework deal problems evolving speci cations 
section provides example framework applied analysis part software change request space shuttle 
section discusses implementations framework 
section suggests avenues research 
category theory section give de nitions notions category theory remainder 
de nition category 
category composed collections objects category morphisms arrows category 
collections respect properties morphism associated object domain object codomain 
notation morphisms exists composed morphism composition law associative object category exists identity morphism id id id category theory provides framework describe links objects manipulate means operations 
describe operations pushout pullback 
de nition pushout 
pushout pair morphisms source category object pair morphisms square commutes cf gure universal condition holds objects morphisms exists unique morphism au hj pushout morphisms intuitively second part de nition ensures chosen construct pushout minimal candidates generalisation operation objects morphisms called colimit 
practical interpretation colimit goguen species structure say widgets result interconnecting system widgets form super widget corresponds colimit diagram widgets morphisms show interconnected :10.1.1.13.362:10.1.1.13.362
de nition pullback 
pullback pair morphisms target category object pair morphisms square commutes cf gure universal condition holds objects morphisms exists unique morphism hj au pullback morphisms generalisation operation objects morphisms called limit 
intuition limit diagram category seen system constraints limit represents possible solutions system :10.1.1.13.362
modular speci cation systems category theory number years framework composing formal speci cations early goguen 
concentrated composition algebraic speci cations 
fiadeiro maibaum developed approach component system described theory temporal logic theories interconnected speci cation morphisms 
approach adapted applied tool implemented 
section brie main notions framework 
category speci cations particular category category speci cations speci cations objects speci cation morphisms arrows 
speci cation composed parts vocabulary needed describe component call extended signature distinguish classical notion algebraic signature sorts constants attributes actions behavior described temporal logic axioms 
particular logic concentrate solely structural part relations speci cations 
framework applied di erent linear temporal logics actions 
speci cation encapsulated means notions extended signature locality 
signature initial means delimiting speci cation component language global name space logic component parameterized signature 
speci cation respect locality property 
property states attributes speci cation modi ed actions speci cation 
property essential encapsulate component control interactions components 
speci cation morphism spec spec associates vocabulary element spec vocabulary element kind spec 
image axioms spec morphism true spec 
fiadeiro maibaum showed de nitions speci cation speci cation morphisms compositional veri cation achieved morphisms preserve properties 
showed category speci cations cocomplete colimits exist proved implementation category tool cf section 
speci cation systems 
basic principle specify system framework specify component system separately pushout colimit compose speci cations 
simple example illustrate 
wish specify system consisting components having behavior sending information synchronous way 
rst specify component independently means attributes characterize state component actions component execute axioms establishing constraints attributes actions 
component action send type information sent component action receive info 
components speci ed de ne third speci cation corresponding gure contains elements shared components 
example contains type action com 
de ne morphisms maps com send maps com info receive info sub speci cation morphisms de ne identity sorts info actions send receive 
compute pushout diagram get speci cation describing composed behavior communicating components 
principle michel developed extension approach components speci ed modules de ned interfaces interconnection patterns provided compose modules modules ehrig mahr 
aim framework simplify user task provide guidance 
detail part extensions proposed integrated framework 
tool support speci cation approach tool developed 
implemented layers 
rst layer categorical kernel encoding sml notions category theory necessary approach essentially graphs diagrams categories colimits cocomplete categories comma categories adjunction 
categorical kernel developed 
second layer implements notions speci cation module incremental way 
di erent categories built general constructions categorical kernel 
implementations important answer needs nd construction process categories need prove categories cocomplete construction process corresponds proof 
third layer interface parts language interface external speci cation language associated parser graphical interface providing access framework 
linked model checker theorem prover prove morphisms correct verify properties speci cations 
extensions handle evolving speci cations previous framework correct construction approach components speci ed proved correct composed way preserve properties 
desirable able manage evolutions manage di erent levels requirements design test uniform way 
propose extend previous framework 
basic principle allow handle partial speci cations completely correct correctly related 
explain represent di erent relationships components level abstraction operations give information ects relationships system built having build 
show integrate properties framework manage uniform way 
study capacity extended framework deal evolving speci cations 
morphisms management proof obligations saw section speci cation morphism spec sig ax spec sig ax associate element sig element sig preserve axioms ax 
current version tool morphism veri ed vocabulary level behavior level 
vocabulary level tool checks element sig image morphism image kind sort constant attribute action pro le type checking 
behavior level tool just performs simple check computes di erence sets axioms ax ax generates proof obligations axioms ax ax 
proof obligations discharged morphism correct 
done proving axioms logical consequences ax model checker theorem prover 
deal incomplete speci cations morphisms need relax framework 
basic principle allow morphisms completely correct vocabulary part formed proof obligations discharged 
means inconsistencies may exist components 
compose speci cations store proof obligations associated morphism consequently target speci cation 
allows deal incomplete speci cations incomplete relationships speci cations 
current tool environment store speci cations modules speci cation morphisms 
add bookkeeping information elements 
discussed section 
relationships speci cations addition morphisms totally correct need capture relationships speci cations morphism linking directly 
approach de ne sub speci cations represent areas overlap speci cations 
may number relationships speci cations 
de ning single sub speci cation capture total relationship de ne separate sub speci cation area overlap 
advantages approach 
allows reason interactions areas overlap 
second helps maintain traceability area overlap may di erent rationale may evolve di erent rate 
rely categorical framework manage proliferation speci cations may result 
consider speci cations sp sp sub speci cations example expressing relationship components 
sub speci cation captures area overlap speci cations 
sp sp sub speci cations link speci cations vocabulary level 
de ning element sub speci cation associating sp sp means morphisms means elements identi ed system 
interaction relationships 
limit diagram compute information ects combination di erent overlaps 
limit diagram object containing couples say couples associated elements relationships 
computation gives overlap overlaps 
ects relationship 
compute pullback 
gives couples 
compute image couples 
gives couples elements sp identi ed system 
reciprocally compute pullback 
computation allows detect unexpected interactions relationships 
example interaction transitive closure set identity relationships de ned results identity relationship elements sp captured explicitly 
order able compute operations described previously prove category extended signatures nitely complete 
issue discussed section 

analyzed relationships vocabulary level signatures relationships terminology di erent speci cations 
eventually plan study ect adding axioms sub speci cations express consistency relationships formalize notions 
properties modeled relationships speci cations need able represent properties speci cations especially properties wish preserve speci cation evolves 
important process able store properties want embed speci cations traceability reasons 
consider basic case system composed components speci ed respectively speci cations sp sp 
components may share elements declared speci cation sp 
speci cation system called sp case obtained computing pushout 
sp sp sp sp properties associated speci cation 
properties expect component respect need prove component 
represent properties framework speci cations allows category theory particularly categorical computations manage 
user de nes properties speci cation concern example property ax concerning sp 
create speci cation vocabulary sp ax axioms de ne morphism sp 
shadow subsystem system storing desired properties 
example system considered scheme sp sp sp sp ps ps ps advantage approach management properties status proved proved handled uniform way management morphisms proof obligations 
add morphisms di erent property speci cations projecting morphisms system speci cation 
example get sp sp sp sp ps ps ps allows compute properties associated speci cation sp just compute pushout 
get property speci cation morphism sp 
sp sp sp sp ps ps ps ps morphism obtained applying universal property pushout way pushout 
sp ps ps ps ps know exists morphism ps sp ps ps ps ps 
proof ps ps way built ps ps property pushout sp ps ps way built property associated component speci cations compute pushout property speci cation speci cation corresponding vocabulary axioms 
management evolving speci cations pointed dealing changes easier structured speci cation 
chosen structure helps circumscribe parts speci cation modi ed easily evaluate consequences changes 
explain precisely works framework 
speci cation system diagram speci cation component speci cations morphisms representing relationships components cases speci cations morphisms representing properties components 
change system may di erent consequences 
rst case change corresponds adding new speci cation system 
induce particular problems modularity framework just similar step construction system speci cation 
change result modifying existing speci cation relationship speci cations 
case rst identify parts need modi ed 
operations help modifying components relationships understanding impact changes 
check morphism departing arriving speci cations 
identify consequences changes related speci cations need modi ed detected check morphisms 
update proof obligations attached morphisms changes may discharge existing proof obligations add new ones necessitate re proof discharged obligations 
case useful store information proved obligations proved discuss section 
properties integrated framework updated uniform way 
example worked space shuttle change request part earlier case study 
think case study testbed explore management changes large speci cations 
give brief account framework case study sucient illustrate utility approach 

operational vehicle space shuttle regularly needs updates ight software support new capabilities docking space station replace obsolete technology move gps navigation correct anomalies 
change request typically consists selection pages current computer program design speci cation cpds functional subsystem software requirements speci cations handwritten annotations showing new changed requirements 
example change request east coast abort landing ecal automation cr 
change request covers changes needed automate entry guidance procedures emergency landing sites east coast loss thrust launch orbit attained 
core functionality change request covers management shuttle energy descent guidance needed align selected runway 
approach model old requirements rst update model re ect changes listed cr 
requirements structured functions 
main function executed time cycle calls functions depending value variable representing current guidance phase 
give detailed speci cation system proofs properties explain extended framework useful 
speci cation system 
model function separate speci cation 
bodies speci cations concentrate structure 
assume bodies speci ed suitable temporal logic 
sequencing represented way speci cation action action functions 
function speci cation actions 
action identi ed action function speci cation follows function beg beg speci cation describes sequencing functions function speci cation describes corresponding behavior requirements 
course sub speci cations describing shared elements speci cations shared variables 
get diagram specifying di erent functions interconnected 
colimit diagram speci cation system 
properties 
modeled speci cation structure want check various properties system 
example variables computed system commanded roll angle phic 
angle initialized computed di erent functions 
validation properties concerning commanded roll angle phic commanded angle held zero rst phases entry phases phic structure speci cations decompose global property lemmas concerning di erent speci cations prove property phic true initialisation 
prove called equal executed equal 
prove equal phic 
functions modify phic 
local property stored property speci cation linked speci cation relates 
local properties proved component speci cations 
colimit diagram property speci cations gives properties hold system 
change request 
change request modi es requirements 
know change speci cation reconsider properties attached speci cation 
structure speci cation helps lot identifying part speci cation modi ed 
fact properties integrated framework allows update status properties automatically computed checking morphisms know parts need proved re proved 

original approach case study build single large formal speci cation entry guidance requirements validate speci cation properties update speci cation change request revalidate properties 
signi cant problems doing due loss traceability change request formal speci cation 
particular aspects change request validated correspondence formal speci cation 
framework described offers number advantages case study 
structure formal speci cations faithfully re ects structure documented requirements 
improves ability trace ensures accurately capture change request model 
improves readability formal speci cation 
structure allows isolate changes reason impact 
property level framework allows compositional veri cation global properties decomposed structure speci cation 
integration properties framework allows manage uniform way 
implementation support framework kinds extensions needed tool described section 
need able compute pullbacks limits signatures 
add mechanisms store manage proof obligations 
finite completeness category extended signatures 
problem category extended signatures built tool nitely complete cf 
products equalizers pullbacks terminal object 
identi ed possible solutions problem 
rst solution de ne implement slightly di erent category signatures nitely complete 
solution general necessitates signi cant updates existing implementations 
second solution consider vocabulary elements constants attributes actions pro les 
case need compute limits category nite sets nitely complete category 
ad hoc solution sucient computations described section 
need build limits objects category speci cations give additional information user 
management proof obligations 
support partially correct morphisms management change need add information elements environment 
morphism need store information nature user de ned morphism automatically generated morphism morphism system properties system properties proof obligations attached morphism status proved proved 
speci cation need store information nature property system user de ned computed 
additionally computed speci cations operation arguments morphisms speci cation 
additional information managed interface level tool 
essentially bookkeeping operations support user require modi cation category theoretic level 
extensions existing categorical framework 
category theory provides excellent basis providing structure formal speci cations 
provides coherent founded theoretical basis representing structure existing speci cation languages avoiding need add structuring primitives language 
extensions described motivated need support evolution large speci cations 
large speci cations evolved team people correct construction approach suce 
needed consider adapt categorical framework support requirements support traceability speci cation evolves explicitly representing relationships speci cation components speci cation validation properties 
framework needs support ability trace relationships rationales support tracing impacts change 
support compositional veri cation global system properties decomposed structure speci cation limit number proofs re checked change 
support process de ning relationships morphisms speci cation ability handle morphisms partially correct 
approach adapts legacy systems changes existing speci cation need veri ed 
meet requirements rst adapted categorical framework permit morphisms formed totally correct provided bookkeeping support keeping track proof obligations arising morphism 
provided framework capturing relationships speci cation components representing areas overlap sub speci cations 
separate cation area overlap reason interaction relationships preserve traceability speci cation evolves 
incorporated speci cation properties framework relationships properties speci cations managed approach 
demonstrated framework apply case study veri cation change request space shuttle 
approach greatly improve ability perform veri cation validation change requests allows construct model accurately re ects existing structure speci cation isolate impacts change structure 
application case study progress need implement proposed extensions order management change 
investigating particular categorical framework proposed lopes fiadeiro 
framework uses di erent notion speci cation morphism allow better representation change particularly relationships potentially inconsistent multiple versions component 
plan study representation di erent relationships components interaction suggested section 
long term areas include di erent speci cation formalisms eventually heterogeneous speci cations allow better describe di erent parts system 
wish existing categorical framework specware compare approach 
interested integration test cases framework 
jacques patrice mike lowry useful discussions 

formal framework functional testing modular systems 
submitted 
easterbrook nuseibeh 
viewpoints inconsistency management 
software engineering journal 
ehrig mahr 
fundamentals algebraic speci cation volume eatcs monographs theoretical computer science 
springer verlag 
modules speci cations constraints 
fiadeiro maibaum 
temporal theories modularisation units concurrent system speci cation 
formal aspects computing 
goguen :10.1.1.13.362
categorical manifesto 
mathematical structures computer science march 
lopes fiadeiro 
preservation speci cation 
johnson editor algebraic methodology software technology volume lncs 
spinger verlag 
michel 
framework modular formal speci cation veri cation 
proceedings fme number lncs 
springer verlag 
miller 
specifying mode logic ight guidance system core 
proceedings formal methods software practice 
rydeheard burstall 
computational category theory 
international series computer science 
prentice hall 

de modules 
internal esf research report centre de recherches de toulouse av 
edouard belin toulouse cedex september 

finite completeness category signatures 
forthcoming 

logical categorical approach validation faulttolerant systems 
proceedings fme volume lecture notes computer science 
springer verlag 
srinivas 
specware formal support composing software 
proceedings conference mathematics program construction 

pour la conception la validation de syst emes 
phd thesis 
easterbrook 
formal modeling space shuttle software change requests scr 
forthcoming 
wirsing 
algebraic speci cation 
handbook theoretical computer science formal models semantics volume pages 
elsevier mit press 
