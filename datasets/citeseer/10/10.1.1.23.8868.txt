applying program dependence analysis java software zhao department computer science engineering fukuoka institute technology ku fukuoka japan zhao cs fit ac jp understanding program dependences essential software engineering activities including program slicing testing debugging reverse engineering maintenance complexity measurement 
presents software dependence graph java extends previous dependence representations represent various types program dependences java software 
consists group dependence graphs represent java methods classes extensions interactions interfaces extensions complete programs packages respectively 
underlying representation develop software engineering tools java software 
java new object oriented programming language achieved widespread acceptance emphasizes portability 
java commercial applications going accumulated development tools support understanding testing maintenance complexity measurement java software important issue 
program dependences dependence relationships holding program elements program determined control flows data flows program 
intuitively computation statement directly indirectly affects computation statement program exist program dependence statements 
compiler optimizations program testing analysis techniques rely program dependence information topically represented form program dependence graph pdg 
pdg originally proposed compiler optimizations applied various software engineering activities including program slicing debugging testing maintenance complexity measurements procedural programs 
researchers applied program dependence analysis object oriented software detailed discussions see related section software architectures 
number dependence representations proposed modeling various object oriented features classes objects class inheritance polymorphism dynamic binding object oriented software dependence representation proposed represent specific features java interfaces extensions packages exception handling java software 
best feature java elevated interfaces class status 
interface consists methods constants define functionality 
interface type define variables type 
interfaces implemented classes 
interface implemented times different classes 
variable interface type hold object classes implement interface 
classes interfaces may extended 
java code collected packages 
packages create grouping related interfaces classes 
interfaces classes package popular public names sense connect conflict name package 
packages types members available package 
identifiers available package code inaccessible outside code 
order represent full range java software efficient dependence representation able facilitate analysis features interfaces extensions packages java software 
software dependence graph java extends previous dependence representations represent various types program dependence relationships java software 
java software consists group dependence graphs represent java methods classes extensions interactions interfaces extensions complete programs packages respectively 
underlying representation develop software engineering tools java software 
rest organized follows 
section introduces various types program dependences may exist java software 
section presents software dependence graph java 
section discusses applications 
section discusses related 
concluding remarks section 
program dependences java software perform program dependence analysis java software necessary identify primary dependence relationships existing java software 
section various types primary program dependence relationships may exist java software 
control data dependences types primary program dependences statements java method control dependence data dependence 
ffl control dependences represent control conditions execution statement expression depends single method 
informally statement directly control dependent control predicate conditional branch statement statement switch statement statement statement statement executed directly determined evaluation result ffl data dependences represent data flow statements single method 
informally statement directly data dependent statement value variable computed direct influence value variable computed call parameter dependences types primary program dependences call called method java classes 
ffl method call dependences represent call relationships call method called method 
informally method method call dependent method invokes parameter dependence model parameter passing call called method 
types parameter dependences parameter dependence parameter dependence 
ffl parameter dependences represent parameter passing actual parameters formal input parameter formal parameter called procedure 
ffl parameter dependences represent parameter passing formal output parameters actual parameters formal parameter defined called procedure 
addition methods parameter dependences represent data flow return value method exit call site 
membership dependences types membership dependences java software 
ffl class membership dependences capture membership relationships class member methods 
informally method dependent class member method ffl interface membership dependences capture membership relationships interface member method declarations 
informally method declaration interface membership dependent interface member method declaration ffl package membership dependences capture membership relationships package member classes interfaces 
informally class interface package membership dependent package member class interface inheritance dependences types inheritance dependences java software represent java class extensions interface extensions 
note java support friend relationships classes 
ffl class inheritance dependences capture inheritance relationships java classes 
informally class class inheritance dependent class extending class ffl interface inheritance dependences capture inheritance relationships java interfaces 
informally interface interface inheritance dependent interface extending interface software dependence graph java section show construct software dependence graph java short 
java software consists collection dependence graphs represent java methods classes extensions interactions interfaces extensions complete programs packages respectively 
basically takes advantage constructing techniques previous representations 
dependence graphs java methods method java class similar procedure conventional procedural languages 
reasonable usual procedure dependence graph introduced represent single method java class 
contrast procedure dependence graph call graph method dependence graph mdg short 
mdg method arc classified digraph vertices connected types dependence arcs 
vertices ce class membership dependence arc control dependence arc data dependence arc ce class producer extends thread private cubbyhole cubbyhole private int number public producer cubbyhole int number cubbyhole number number public void run int cubbyhole put system println producer number put cubbyhole cubbyhole cubbyhole cubbyhole number number number number number value java class cdg methods mdg represent statements control predicates conditional branch statements method 
unique vertex called method start vertex represent entry method 
order model parameter passing methods mdg includes formal parameter vertices actual parameter vertices 
method entry formal vertex formal parameter method formal vertex formal parameter may modified method 
call site vertex actual parameter call site actual vertex actual parameter may modified called method 
addition call site method call vertex created connecting called method 
arcs mdg represent types dependence relationships method control dependences data dependences 
control dependence arc vertices control dependent data dependence arc vertices data dependent addition formal parameter control dependent method start vertex actual parameter control dependent call statement 
example 
shows java method run method dependence graph 
dependence graphs java classes section describes construct dependence graphs java single classes class extensions interactions 
section discusses represent polymorphism 
single classes class dependence graph cdg short represent single java class 
cdg java class arc classified digraph consists collection method dependence graphs representing single method class additional vertices arcs model parameter passing different methods class 
unique class start vertex class represent entry class class start vertex connected method start vertex method class class membership dependence arcs 
method invokes method class method dependence graphs methods connected call site 
case call dependence arc added call vertex method method start vertex method dependence graph called method parameter dependence arcs added connect actual formal vertices actual vertices model parameter passing methods class 
java support global variables 
instance variables java class accessible methods class regard global variables method class create formal formal vertices instance variables referenced methods 
interprocedural slices computed solving graph reachability problem sdg 
obtain precise slices computation slice preserve calling context called procedures ensure paths corresponding legal call return sequences considered 
facilitate computation interprocedural slicing considers call context sdg represents flow dependences call sites 
transitive flow dependence occurs actual vertex actual vertex value associated actual vertex affects value associated actual vertex 
transitive flow dependence caused data dependences control dependences 
summary arc models transitive flow dependence procedure call 
similar summary dependence arcs represent kind transitive flow dependences class dependence graph 
example 
shows cdg java class producer 
rectangle represents class start vertex labeled statement label related class entry 
circles represent statements class including method start labeled corresponding statement number class 
ellipses dashed line represent actual parameter vertices ellipses solid line represent formal parameter vertices 
example ce class start vertex start vertices methods producer run 
bold dashed arcs represent class membership dependence arcs connect class start vertex start vertex methods 
ce ce class membership dependence arcs 
start vertex methods root subgraph method dependence graph corresponding method 
subgraph may contain control data parameter dependence arcs 
constructor method producer formal vertices instance variables cubbyhole number variables referenced allocated class constructor 
class interaction java class may create object class declaration operator new 
class creates object class implicit call constructor 
represent implicit constructor call adds call vertex location object creation 
call dependence arc connects call vertex constructor method 
adds actual actual vertices call vertex match formal vertices constructor 
call site method method public interface connect call vertex method start vertex form call dependence arc connect actual formal vertices form parameter dependence arcs actual formal vertices form parameter dependence arcs 
result get new cdg represents partial java program connecting 
example 
shows representation interaction classes 
main class program statement instantiates object type producer 
construction includes adding actual actual vertices call vertex match formal formal vertices associated method start vertex constructor producer connecting call vertex method start vertex form call dependence arc actual formal vertices form parameter dependence arcs actual formal vertices form parameter dependence arcs 
class extending major benefits object orientation ability extend behavior existing class continue code written original class 
extend class create new class new extended class inherits fields methods class extended 
supports multiple inheritance java supports single inheritance new class extend exactly superclass 
things certainly simplify analysis java class extension 
java provide novel mechanism called interface support multiple inheritance introduce section 
just class inheritance permits code reuse java software dependence representation extended classes reuse analysis information 
construct cdg extended class construct representation method defined extended class reuse representations methods inherited superclasses 
class entry vertex extended class class membership dependence arcs connect class entry vertex method entry vertex method definition extended class 
class membership dependence arcs connect class entry vertex method entry vertices methods defined superclass inherited extended class 
formal vertices method represent method formal parameters instance variables extended superclass may referenced call method 
similarly formal vertices method represent method formal parameters instance variables super extended classes may modified call method 
polymorphism important feature object oriented languages polymorphism 
java software polymorphic time refer instances class 
result static representation represent dynamic feature java software 
cdg represent polymorphic method calls way possible destinations method call included representation type determined statically 
polymorphic choice vertex similar represent possible destinations polymorphic call cdg 
polymorphic choice vertex represents selection particular call set possible destinations 
dependence graphs java interfaces section describes construct dependence graphs java single interfaces interface extensions 
single interfaces interface dependence graph idg short represent java interface corresponding classes implement 
idg java interface arc classified digraph consists collection method dependence graphs representing single method class may implement method declaration declared interface additional vertices arcs model parameter passing different methods class 
unique vertex called interface start vertex entry interface 
method declaration interface call corresponding method class implement call vertex created method declaration interface 
interface start vertex connected call vertex method declaration interface membership dependence arcs 
classes implement interface connect method call interface corresponding method implement classes 
interface void method int void method int interface extends void method int ce class implements int public void method int public void method int ce class implements int public void method int public void method int ce class implements int public void method int public void method int public void method int interface membership dependence arc control dependence arc call dependence arc parameter dependence arc java interfaces 
example 
shows idg interface classes implement 
interface extending similar represent java class extending construct idg extended interface constructing representation method defined extended interface reusing representations methods inherited superinterfaces 
create interface entry vertex extended interface add interface membership dependence arcs connecting interface entry vertex method call vertex method declaration definition extended interface 
create dependence arcs connect interface entry vertex method call vertices method declarations declared inherited extended interface 
example 
shows idg interface class implements 
interface extended interface class contain methods interface interface dependence graphs complete java programs generally complete java program consists classes interfaces 
order execute program program include special class called main class 
program starts main class transfers execution classes 
system dependence graph sdg short proposed represent complete java program 
sdg complete java program arc classified digraph consists collection dependence graphs representing single method class additional vertices arcs model parameter passing different methods class 
construct dependence graph complete java program construct class dependence graph main class connect class dependence graph main class methods java classes call sites 
call dependence arc added method call vertex start vertex method dependence graph called method 
actual formal parameter vertices connected parameter dependence arcs example 
shows complete java program sdg 
dependence graphs java packages java code collected packages 
package dependence graph short represent java package 
java package arc classified digraph consists collection dependence graphs representing java class interface additional vertices arcs model relationships package member classes interfaces 
unique vertex called package start vertex entry package 
package start vertex connected class interface start vertex class interface ce class producer extends thread private cubbyhole cubbyhole private int number public producer cubbyhole int number cubbyhole number number public void run int cubbyhole put system println producer number put ce class consumer extends thread private cubbyhole cubbyhole private int number public consumer cubbyhole int number cubbyhole number number public void run int value int value cubbyhole get system println consumer number get value ce class cubbyhole private int seq private boolean available false public synchronized int get available false wait available false notify return seq public synchronized int put int value available true wait seq value available true notify ce class public static void main string args cubbyhole new cubbyhole producer new producer consumer new consumer start start ce cubbyhole cubbyhole cubbyhole cubbyhole number number number number number seq seq available available available available value value value number cubbyhole cubbyhole number number number number available available class membership dependence arc control dependence arc data dependence arc communication dependence arc parameter dependence arc call dependence arc complete java program sdg 
package membership dependence arcs 
example 
shows simple package collections corresponding 
package contains interface classes 
package start vertex interface start vertex interface class start vertices classes 
package membership dependence arcs 
applications having unified dependence representation java software discuss important applications include program slicing software maintenance 
program slicing direct application slice java software explicit representation various program dependences java software ideal computing slices java program 
program slicing originally introduced weiser decomposition technique extracts program statements related particular computation 
program slice consists parts program may directly indirectly affect values computed program point interest referred slicing criterion 
program slicing applications software engineering activities program understanding debugging testing maintenance reverse engineering complexity measurement 
information see tip survey program slicing techniques 
introduce notions pe package collections interface ce class ce class pe interface dependence graph class dependence graph class dependence graph ce ce package membership dependence arc simple package statically slicing complete java program 
static slicing criterion java program tuple statement program variable method call called static slice ss java program static slicing criterion consists statements program possibly affect value variable value returned method call sdg proposed complete java program regarded extension sdgs sequential object oriented programs procedural programs pass slicing algorithm proposed compute static slices java program 
step algorithm traverses backward arcs parameter arcs set marks vertices reached sdg second step algorithm traverses backward vertices having marks step arcs call parameter arcs sets marks reached vertices sdg 
slice union vertices sdg marks second steps 
similar backward slicing described apply forward slicing algorithm sdg compute forward slices java programs 
addition slicing complete java program perform slicing java classes interfaces packages class dependence graphs interface dependence graphs package dependence graphs 
software understanding maintenance attempt understand behavior java program usually want know variables statements affect variable interest variables statements affected execution variable interest program 
discussed slicing forward slicing satisfy requirements 
hand problems software maintenance ripple effect code change program affect behavior codes program 
maintain java program necessary know variables statements affected modified variable variables statements affect modified variable 
needs satisfied slicing forward slicing program maintained 
related time knowledge extend previous dependence representations represent full range java software 
ferrante dependence representation called program dependence graph pdg explicitly represent control data dependences sequential procedural program single procedure 
horwitz extended pdg introduce interprocedural dependence representation called system dependence graph sdg represent sequential procedural program multiple procedures 
representations represent features procedural program lack ability represent object oriented features java software 
larsen harrold chan yang extended sdg sequential procedural programs case sequential object oriented programs 
sdgs compute sequential object oriented programs regarded class sdgs 
proposed new dependence representation called object oriented program dependency graph sequential object oriented programs 
chen extended program dependence graph object oriented dependency graph modeling sequential objectoriented programs 
representations represent features sequential objectoriented programs lack ability represent specific features interfaces packages java software 
zhao dependence representation called system dependence net represent concurrent object oriented programs 
represent objectoriented features concurrency issues concurrent object oriented programs lacks ability represent specific features interfaces packages java software 
concluding remarks software dependence graph java extension previous de representations represent java software 
consists group dependence graphs represent java methods classes extensions interactions interfaces extensions complete java programs java packages respectively 
represent object oriented features specific features java software 
discussed applications include program slicing software maintenance 
developing maintenance environment java software underlying representation developing software engineering tools including program dependence analyzer program slicer 
agrawal demillo spafford debugging dynamic slicing backtracking software practice experience vol pp 
bates horwitz incremental program testing program dependence graphs conference record th annual acm sigplan sigact symposium principles programming languages pp charleston south california acm press 
beck eichmann program interface slicing reverse engineering proceeding th international conference software engineering pp baltimore maryland ieee computer society press 
bieman ott measuring functional cohesion ieee transaction software engineering vol pp 
chan yang program slicing system object oriented programs proceedings international computer symposium taiwan december 
chen wang chen slicing objectoriented programs proceedings pp hongkong china december 
cheng process dependence net distributed programs applications development distributed systems proceedings ieee cs th annual compsac pp 
ferrante ottenstein warren program dependence graph optimization acm transaction programming language system vol pp 
gallagher lyle program slicing software maintenance ieee transaction software engineering vol pp 
horwitz reps binkley interprocedural slicing dependence graphs acm transaction programming language system vol pp 
kamkar fritzson bug localization algorithmic debugging program slicing proceedings international workshop programming language implementation logic programming lecture notes computer science vol pp springer verlag 
korel program dependence graph static program testing information processing letters vol pp 
krishnaswamy program slicing application object oriented program dependency graphs technical report tr department computer science clemson university 
kuck kuhn padua wolfe dependence graphs compiler optimizations conference record th annual acm symposium principles programming languages pp 
larsen harrold slicing object oriented software proceeding th international conference software engineering german march 
mcgregor krishnaswamy extensible program representation object oriented software acm sigplan notices vol pp 
ottenstein ottenstein program dependence graph software development environment acm software engineering notes vol pp 
podgurski clarke formal model program dependences implications software testing debugging maintenance ieee transaction software engineering vol pp 
reps horwitz sagiv speeding slicing proceeding second acm conference foundations software engineering pp december 
sarkar concurrent execution semantics parallel program graphs program dependence graphs proceedings th international workshop languages compilers parallel computing vol pp 
tip survey program slicing techniques journal programming languages vol pp september 
weiser program slicing ieee transaction software engineering vol pp 
zhao cheng static slicing concurrent object oriented programs proceedings th ieee annual international computer software applications conference pp august ieee computer society press 
zhao dependence analysis support software architecture understanding li ed new technologies computer software pp international academic publishers september 
zhao cheng dependence representation concurrent object oriented software maintenance proceedings nd euromicro working conference software maintenance reengineering pp florence italy march 
