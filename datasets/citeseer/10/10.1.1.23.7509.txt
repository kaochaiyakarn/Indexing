distributed architecture multiplayer interactive applications internet christophe diot laurent gautier sprint atl adrian court ca usa 
com inria route des lucioles sophia antipolis france 
sophia inria fr describes design implementation evaluation mimaze distributed multiplayer game internet precisely design dedicated transmission control mechanisms 
mimaze implemented completely distributed communication architecture ip multicast protocol suite rtp udp ip 
analyze distributed interactive game multicast internet 
major element mimaze architecture distributed synchronization mechanism guarantees consistency game regardless network delay 
provides evaluation mimaze game mbone discusses approaches monitor evaluate new type application 
main contribution show example feasibility new family applications best effort network 
shown real time interactivity maintained provided level inconsistency tolerated application 
highlights role multicast enabling technology real time internet 
keywords system architecture interactive applications distributed synchronization experimental system group communication transmission control internet 
article describes design evaluation multiplayer game internet 
mimaze distributed serverless game uses unreliable communication system rtp udp ip multicast 
multiplayer games representative new generation distributed interactive applications dias includes distributed interactive simulation dis digital air traffic control atc cooperative tools home interactive applications 
applications expected represent major share internet traffic years 
chosen distributed architecture relies multicast communication client server architecture tcp order increase scalability application 
consequence central entity server compute game state see section 
contrary participant computes view game state increasing chance inconsistency responsibility game entity provide synchronization facilities cope distributed state computation heterogeneous internet delays 
server exists mimaze limited non real time tasks new player joining ongoing session session management issues general 
distributed architecture criticized multicast widely deployed internet experimental mbone 
group communication currently active research domains internet community 
access multicast tunneling available experimental purpose isps offer multicast internet services 
experimental analysis new family applications gives 
inconsistency occurs participants different view game global state 
inconsistency inherent distributed networked applications heterogeneous delays 
opportunity learn multicast service definition best suits new family applications 
central theme evaluation synchronization mechanism mimaze game referred bucket synchronization 
synchronization mechanism minimum functionality required distributed game 
synchronization mechanism real time requirements interactive game satisfied 
mimaze require information delivered destinations ms 
implemented simple dead reckoning algorithm recover lost late packets 
mechanism replaces classic arq error recovery applicable context acknowledgment techniques introduce unacceptable delays 
structured follows 
section describes mimaze 
start description game functional architecture 
give detailed description bucket synchronization algorithm 
section describe analyze performance measurements mbone describe monitoring tool resynchronize distributed traces 
global clock problem addressed 
performance results give opportunity discuss metric provide realistic evaluation performance dia 
propose new mechanisms improve consistency scalability dias 
conclude discussion mimaze design steps extension game realistic interactive environment including graphics virtual worlds 
main contribution show example feasibility new family applications best effort network 
conscious mimaze simple application results difficult generalize 
analyzing behavior simple application internet important step understanding dias deployed internet 
consequently try generalize results try analyze generalizable observations 
description mimaze characteristics distributed games similar dis applications 
main difference dis applications mimaze cpu requirement mimaze low 
reason choosing simple game term rules graphics choosing complex game difficult analyze game traffic parameters 
dis characteristics apply mimaze interaction delay action issued participant reach processed displayed participant shortest possible delay network delay excessive received action encoded application data unit adu late typically application 
participants join leave mimaze session dynamically 
context ip multicast model particularly convenient 
system architecture distributed 
justified case dis robustness requirements potentially better scalability see section 
important property dias real time behavior game objects called avatars continuous continuous mean behavior avatar time extrapolated behavior time consequence avatar description lost network easily recovered previous description avatar updates avatar position sent 
allows unreliable communication system rtp udp effects lost overly delayed packets 
delay range preserve real time interaction participants ms ms depending application characteristics 
mimaze chosen ms 
zed natural redundancy interactive data simple dead reckoning algorithm see section 
problem number participants addressed 
stage project idea large session interactive game 
consequently decided single multicast group mimaze initial experiments tell feasibility dias internet 
mimaze design characteristics mimaze inspired dimensional pacman game player representation view game see screen shot 
avatars move labyrinth try kill 
participant having representation vision domain global view game top shows location players 
mimaze distributed architecture knowledge mimaze game fully distributed architecture ip multicast see 
server new entity joins session learn session group address download maze 

screen shot showing mimaze participant local view maze view top session information multicast address session properties participant information scoring participants names front rear views participant avatar 
distributed architectures advantages server architectures robustness 
distributed architecture failure participants effect participants 
participant independent locally necessary information compute state game time 
serverless architecture require availability server supports currently active applications serverless architecture greatly simplifies deployment game application provider 
quality observed participant relies network properties including multicast support participant equipment 
scalability 
identified factors limit scalability centralized architectures data converge centralized server server bottleneck 
centralized server collect participants data serve participants game frequency game state computed slows cpu server saturated 
worst case overload server cpu leads loss interactivity game server architecture amount data transferred network best case equal amount data transferred distributed architecture 
higher multicast tcp collect data 
minimum delays 
centralized architecture information reaches destination server 
depending network topology routing tree structure increase network delay times delays distributed architecture 
distributed architecture information crosses network reach final destinations 
hand centralized architectures advantages 
participants game receive game state server global consistency guaranteed 
server introduces natural synchronization players 
important feature centralized architectures allow game companies easily charge players duration participation 
major advantage centralized architectures presence server cheating difficult 
totally distributed architecture entity decisions necessarily authority identify potential cheaters 
centralized architecture information flows server exactness global state 
consequently deployment distributed architectures require specific distributed mechanisms deal honesty participants 
player 
mimaze communication architecture showing session management server participant joining session fully distributed communication game started 
summarize choosing distributed architecture improves real time properties application cost consistency 
motivation consequently show real time properties dia preserved internet despite long heterogeneous delays provided acceptable level inconsistency tolerated application 
shows simple distributed synchronization mechanism global clock infrastructure ntp help control consistency 
data structures sends adus compute global state display global state player player rtp udp joining new participant player game server session group address game domain distribution dis standard defines numerous types information packetized managed application 
dis standard application level ieee standard designed applications experts 
optimized network transmission may unrealistic protocol internet 
dis standard defines different packet types called pdu protocol data units 
dis packet types relevant distributed games 
fre 
failure mode applies distributed architectures 
computational resources saturate larger group size single centralized server 
tcp quently pdu entity state pdu carries state information describing game objects 
specific pdu type defined exceptions collisions fire shooting detonation bullets logistics exercise control 
freely available implementation dis 
minimize network traffic generated mimaze type packet called adu application data unit 
mimaze adu similar dis 
size adu bytes including bytes rtp header bytes udp header bytes ip header bytes mimaze application payload 
mimaze adus contain description local state avatar consisting local position game position position angle displacement vector speed angular speed avatar projectile emitted avatar 
mimaze entity sends adus periodic basis 
current version mimaze adu transmission frequency times second 
game experts value corresponds fast reaction speed human player ms 
related amaze considered mimaze ancestor 
amaze designed cheriton played lan point point communication 
mimaze amaze distributed architectures manage state differently 
amaze transmits game state network maintains replicated copies game state 
distributed games internet real market companies 
microsoft bt intel sony projects line distributed games shared virtual worlds 
small companies enhance multiplayer games sophisticated transmission infrastructures see example 
commercial line games available date client server architectures tcp transmission simply technology fully available stable internet today 
additionally closely related works include spline virtual distributed interactive world animation spoken interaction 
spline distributed architecture dis standard 
effort spline done local flow synchronization 
distributed synchronization mechanism deal heterogeneous network delays 
paradise project stanford university aims architect build large scale simulation environment supports multi player interactive simulations running wide area network 
project produced interesting results group communication dead reckoning entity aggregation collision detection 
differs goal evaluate mimaze architecture system standpoint inter related issues bucket synchronization dead reckoning network impairments loss delay inextricably linked 
contrast aimed primarily aggregation considered specific dead reckoning algorithms 
worth noting dead reckoning primarily decrease frequency state transmission smooth trajectories state updates 
bucket synchronization mechanism serverless architecture synchronization introduced sure state displayed entity consistent adus issued time various game entities computed evaluate state game 
session entities display player game state simultaneously 
mimaze time divided fixed length periods bucket associated period 
adus received player issued senders period stored receiver bucket corresponding interval 
bucket interval adus bucket entity compute local view global state 
buckets computed ms sampling period adus issued ms playout delay 
words compute new global state entity computes adus available current bucket 
example synchronization adu issued player processed adu issued player received state processing interval 
bucket synchronization allows information received delayed bucket processed order synchronized adu issued implement specific mechanism perform aspect synchronization inter entity synchronization 
provided naturally bucket algorithm time interval buckets small 
adu received transmission delay ms destination bucket computed 
late adu stored bucket 
dead reckoning algorithm eventually replace missing adu computing buckets see section 
player entity state computed remote player entity 
bucket synchronization mechanism 
horizontal axis represents time 
player upper line player bucket algorithm observed 
playout delay bucket frequency static parameters defined independently network properties 
bucket frequency bucket frequency buckets xn xn bucket frequency defines rate new game state computed displayed 
human vision perceives smooth motion frame rate exceeds frames second chosen compute buckets second 
bucket frequency receiver application parameter influenced network parameters 
mimaze current settings adu transmission frequency equal bucket frequency new adu entity time bucket processed 

bucket mechanism similar playout buffer mechanism reduce network jitter effects packet audio information 

coincidence parameters equal 
transmission delay playout delay synchronization delay time global clock mechanism bucket synchronization mechanism uses global clock system evaluate delay participating entities 
discussion properties global clock system 
implementation ntp 
case ntp available ntp algorithm evaluation round trip time 
difficulties ntp levels strata ntp servers difficult maintain synchronization participants level servers involved 
lower stratum mechanisms sufficient 
ntp encodes clock information bits rtp uses bit clock 
mimaze manipulate clock representations 
ntp provide clock signal participant compute offset participant game session 
ntp assumption network links calculate timing delays symmetric case internet 
current implementation order increase precision ntp stratum ntp ntp mechanism specifically designed compute clock offsets see 
dead reckoning deliver complete view game bucket algorithm requires adu participant available bucket 
adu missing various reasons 
may lost network may late 
dead reckoning replace missing adus 
missing adu state computation algorithm goes back previous buckets looking adu received missing avatar 
adu dead reckoned evaluate position avatar probably current time 
accuracy evaluation depends dead reckoning algorithm possible dead reckoning algorithms available age adu game characteristics 
dead reckoning purpose implemented mimaze simplest possible dead reckoning algorithm 
avatar position adu missing time compute bucket simply replay known position avatar 
believe dead reckoning major mechanism error correction dias dead reckoning algorithms evaluated 
principal goal gain understanding behavior dias internet intentionally decided simple dead reckoning algorithm order analyze distributed synchronization minimal side effects 
performance evaluation section organized parts 
description experimental settings 
monitoring tool designed resynchronize distributed traces briefly 
define distributed game metric chosen evaluate mimaze consistency notion consistency defined section 
evaluation section begins providing analysis behavior mimaze experimental session mbone 
influence network parameters game consistency analyzed 
conclude section discussion experimental observations 
experimental environment performed evaluation mimaze mbone players located various places france 
number participants experiments varied order vary loss rate 
assumption losses due network congestion 
total traces minutes collected 
architecture experimental multicast tree 
delay values average values duration session network delays measured host 
note average network delays ms 
computers participating experiment sun sparc ultra dec alphas pcs 
monitoring experiment participants play mimaze participant collects trace composed network level data received adu collect senders identity transmission time stamp reception time stamp sequence number 
application level data information contained adus sent received time stamped collected trace file 
data allow reconstruct state game computed participant 
synchronization data network delays clock offsets respect participant 
data resynchronize traces 
main difficulty analyzing collected traces benchmark computation trace resynchronization 
system distributed absolute clock game session participant timestamps local traces 
global clock mechanism imperfect algorithm squares resynchronize traces 
simple method synchronize traces valid clocks drifting fast 
consequently decided limit analysis traces ntp clock synchronization successful 
omitted time intervals relative clock information interpretable 
accuracy delays computed mimaze strongly correlated ability ntp maintain synchronized global clock signal participants 
tac tom pif fr 
mbone architecture evaluation 
network delays averages measured located inria sophia antipolis 
locations france 
distributed game metrics ms inria fr inria fr polytechnique fr atm fr mbone fr atlas ibp fr laas fr hugo ms ms eurecom eurecom fr eurecom fr major difficulty attempting analyze distributed multiplayer games definition meaningful performance metrics 
criteria reflect far distributed game ms behavior perfect behavior occurred game played network delay network loss 
people expect networked game behave exactly non networked solution effects network delay 
clearly impossible achieve 
network introduces impairments integral part game projectile reach target instantaneously speed 
trying eliminate impairments particular network losses delays try minimize impact impairments game 
goal deliver information participant information slightly different network delay 
trying compare networked game session session played network wrong player actions inevitably influenced presence network 
evaluation purposes chosen game metric called drift distance 
drift distance represents distance units absolute value distance position avatar displayed local entity position avatar displayed remote entity 
game consistent drift distance zero 
small drift mean game inconsistent 
avatar radius units avatar constant speed units ms assume informal analysis player satisfaction errors units moving avatar significant see section 
performance analysis section provide informal analysis mimaze gaming sessions 
analyze network parameters sessions 
understanding network parameters helps understand game behavior improve consistency 
final part section analyzes mimaze consistency regard network parameters 
order keep figures clear performance observed participants hugo 
verified pair participants mbone roughly behavior 
important notice results interpretations provided conjectures 
discussed section metrics due nature application human related factors major impact caution generalization results 
level confidence conjectures high provided explanation observed systematically experimental traces filtering traces conforming synchronization prerequisites 
informal analysis mimaze experience distributed game internet useful informally describe players perceived game 
informal evaluation useful understand limits consistency metric chosen 
network delay note network delays average ms number participants negative impact quality game 
displacement avatars labyrinth smooth regular participant locations 
observed informal evaluation error units diameter avatar moving avatar position create inconvenience participants 
result important shows giving preference interactivity expense consistency choice 
behavior participant independent 
due distributed nature architecture unexpected behaviors participant disconnection due cpu load network failure trace memory saturation synchronization loss ntp resynchronization failure occurred evaluation session 
failures annoyed victim problem effects participants 
mbone load topology stable experiments 
noticed paths symmetrical mbone 
problem difficult compute network delays round trip times including ntp 
consequently computers connected ntp server asymmetric link 
network parameters delay distribution clock shows delay distribution measured hosts hugo mbone experiment 
percentage percentage distribution delays delay ms delay ms 
network delay distribution observed mimaze region mbone hosts hugo 
observe delay distribution long tailed 
standard deviation ms mean ms close average delay measured experiments ms shown 
long tailed distribution means significant part adus late available time bucket computed 
dead reckoning algorithm quite simple result significant drift increase late adus 
indicates adus experience network delays higher ms adus consequently time bucket computation 
reducing standard deviation reduce proportion late adus immediate consequences game consistency 
confirm previous observation gives different observations late adus 
late adus adus reached destination ms result missing adu time respective bucket computed 
adus lost corrupted considered analyzed section 
shows time period seconds percentage adus arrived time bucket computed 
plots time interval late adus distribution 
shows late adus occur buckets 
words buckets late adu 
result consistent observations 
reduction delay standard deviation significant influence proportion late adus 
ntp strata synchronized global clock network gps reduce standard deviation ms shorten delay late adus distribution tail 
percentage late adus percentage actions time 
percentage distribution late adus mbone hosts hugo 
addressing problem network losses note late adus exactly application effect losses synchronization algorithm corresponding data available bucket time computation 
losses gives observations lost adus 
network losses observed 
shows percentage adus missing bucket due losses mbone 
observation period 
figures gives loss distribution distribution adus lost bucket interval 
mean packet loss rate mbone experimental session 
loss distribution shows adus missing network loss buckets 
discuss consequences network losses game consistency section 
percentage actions percentage adus losses 
percentage distribution lost adus mbone hosts hugo 
bucket synchronization efficiency consistency mimaze unsynchronized actions time lost actions time time percentage percentage buckets percentage percentage buckets distribution unsynchronized actions percentage actions percentage late adus distribution lost actions percentage actions percentage adus losses recall drift distance actual position avatar seen local entity position avatar seen remote entity 
perfect scenario server architecture game drift zero 
obviously case mimaze 
shows drift distance hugo remote entity position 
drift distance appears vertical axis horizontal axis 
state drift state drift average drift state player time time 
evaluation drift distance local position avatar measured position observed remote entity hugo including sample distribution 
immediate observation drift diverge remote entity systematically come back compute real position computed wrong position 
reason entity just needs receive single time adu reset correct position 
reason network delays ms 
higher delays conjecture behavior higher error 
recall late adus late time new bucket computer assumed lost 
second observation drift time distance units 
distance units buckets 
error result inconvenience player level avatar diameter units 
consequently consider insignificant error 
drift distribution shows cases remote entities display exact position avatar 
result expected observations delay losses figures show adus missing buckets 
drift analysis reveals buckets computed missing adus 
experimentation needed confirm observation credible experimental conditions 
impact synchronization mechanism percentage percentage buckets position drift order understand distributed synchronization mechanism impacts mimaze consistency observed mimaze consistency bucket synchronization 
gives gain drift distance drift distances observed 
distribution drift distances observed experiments 
value vertical axis corresponds gain corresponds gain 
report average loss rate delay experiment filtering non conforming traces 
session parameters described section participants location speedy located ucl uk lip paris elvis inria sophia antipolis 
distribution average drift state player state drift 
consistency improvement gain distributed synchronization various network loss delay scenarios 
important result synchronization significantly reduces drift frequent drift values distance units 
case large drifts corresponding large sequences losses synchronization help reduce drift 
confirmed second observation synchronization reduces drift long delays curves elvis elvis speedy long delays low losses case high losses similar delays elvis speedy elvis curves gain smaller 
consequently new mechanism needs added mimaze order reduce inconsistencies due losses 
mechanisms discussed section 
observe local communication short delays loss synchronization slightly reduces consistency 
conjecture due clock inaccuracy causes adus scheduled incorrect bucket advance late case bucket synchronization 
discussion gain bucket synchronization speedy elvis high loss high delay ms mbone elvis speedy low loss high delay ms mbone elvis high loss low delay ms mbone elvis low loss low delay ms mbone elvis loss low delay ms lan state drift main problem addressed design communication infrastructure allows distributed interactive applications played heterogeneous networks internet 
shown distributed architecture synchronization possible preserve real time interactive properties application provided level inconsistency accepted 
major problem solved addressed study definition metric suitable express satisfaction session participants realistic manner 
performance analysis provided previous section shows buckets deliver exact position avatar 
time players satisfied entire game session 
indicates type application tolerant network impairments numerical observations tend show 
finding consistent state evaluation acceptable mimaze game users current network conditions 
better reflect player satisfaction parameters involved consistency evaluation characteristics avatar term speed acceleration size shape influence acceptable error position avatar 
small error position slow avatar dramatic 
error fast avatar visible player error trajectory avatar 
game nature 
avatar moving space terrain limits may difficult dead mimaze avatar trajectory constrained maze topology 
consequently easier extrapolate dead avatar trajectory mimaze 
approach deliver time view game close real participant location 
deliberate lack precision due unreliability architecture allows scalability provides real time interaction participants alter participants satisfaction 
believe similar results observed complex games shared virtual worlds 
mimaze design proves simple human controlled application need reliable transmission game perceived consistent buckets filled time 
complete analysis game parameters frequency adu transmissions dead reckoning algorithm show reliability relaxed 
particular expect observations dead reckoning key technique increasing consistency game demanding network environments high loss rates 
dead reckoning algorithm mimaze simplest possible 
appears due nature application due adu transmission frequency high mimaze algorithm sufficient minimize drift distance cases 
faster avatars different game environments sophisticated dead reckoning algorithms required 
dead reckoning help various situations replacing lost late adus 
dead reckoning algorithms defined dis standard complex 
choosing designing dead reckoning algorithm complex task influenced game nature adu structure cpu load level 
smoothing trajectory received adus 
adus missing received adus dead reckoning run interpolate trajectory received positions displaying smoother trajectory 
anticipating collisions avatars 
collision happens time late compute consequences collision real time case digital battle field applications complex changes happen 
anticipating collisions lead game inconsistencies 
dead reckoning sending entities anticipate potential collisions 
reducing network congestion 
reducing adu transmission frequency dead reckoning help reduce network load depending application characteristics network situation 
drawback increasing cpu load receiving entities possibly increase inconsistency 
concluding discussion noticed bursty losses significantly affect game consistency specific mechanism installed prevent losses 
mimaze necessary step understanding changes new generation distributed interactive applications introduce internet deploy safely considered non real time network 
main contribution show multicast communication architecture simple synchronization mechanism bucket mechanism fully distributed inte application provide acceptable level consistency distributed interactive applications internet 
shown relaxing reliability constraints possible level inaccuracy introduced global state computation 
identified problem defining metric evaluation application consistency 
able analyze mimaze scalability experimentation 
mimaze realistic application data complexity point view adus short cpu requirements small number participants limited 
scalability major problem soon adu size global state computing time increase 
major contribution proof feasibility distributed architectures heterogeneous best effort networks 
today popular architecture distributed systems client server architecture 
shown distributed approach provides level performance potentially better scalability better real time capabilities 
advent distributed games dias increase need wide development multicast internet 
multicast technique capable reducing transmission delays multi user session point point networks 
distributed games tell deploy multicast provide insights need specific group semantics group management pricing schemes mimaze display modified offer real view game terrain possible mapping mpeg video maze walls 
mimaze realistic application evaluation interactive virtual worlds 
allow investigations mimaze needs improved congestion control 
idea vary sending entity adu transmission frequency depending network congestion feedback information probably carried rtcp 
avatar collision detection anticipation 
local states dead reckoned source order anticipate position close 
potential collision detected specific adus sent entities announce collision 
session management subgroups participants 
dividing session subgroups necessary order increase scalability consistency applications 
extension mimaze synchronized virtual reality modeling language vrml objects video scenes mpeg spatial audio need higher clock resolution necessary step increase complexity application 
mimaze available evaluation mimaze web site 
acknowledgments going volunteer players experimental sessions possible ph advisors say long game sessions playing jim kurose helped analyze mimaze behavior 
large don supported helped improve 
final jorg extremely efficient helpful editor 
ieee standard distributed interactive simulation application protocols ieee std 
ieee computer society 

ieee standard distributed interactive simulation communication services profiles ieee std 
ieee computer society 

garth smith 
scenarios appropriate protocols distributed interactive simulation 
working internet draft draft ietf lsma scenarios txt 
march 

limitations internet protocol suite distributed simulation large multicast environment 
working internet draft lsma limitations txt march 

bolot vega garcia control mechanisms packet audio internet proceedings ieee infocom san fransisco pp 
april 
mills network time protocol version specification implementation analysis rfc march 
cox van kampen ripley 
time synchronization experiments proceedings th dis workshop dis 
spring 

kiel 
unter unix am beispiel des www tu de student 
schulzrinne casner frederick jacobson 
rtp transport protocol real time applications rfc january 
kurose towsley schulzrinne adaptive playout mechanisms packetized audio applications wide area networks proceedings infocom toronto canada pp 
april 
eriksson 
mbone multicast backbone 
communication acm 
vol 

pp 

august 

distributed operating system logical design 
wesley publishing 

gautier diot 
design evaluation mimaze multiplayer game internet 
ieee multimedia system conference 
austin 
june july 
cheriton 
amaze multiplayer computer game 
ieee software 
may 
designing writing multiplayer games internet technical considerations www com news white html 
deering 
host extensions ip multicasting 
rfc 

august 
anderson brogan casey mckeown waters 
diamond park spline virtual reality system animation spoken interaction runtime modifiability 
merl report tr 

waters anderson 
locales beacons efficient precise support large scale multiuser virtual environments 
ieee virtual reality annual international symposium 
santa clara ca 
march 
waters 
time synchronization spline 
merl report tr 
april 
singhal effective remote modeling large scale distributed simulation visualization environments phd thesis department computer science stanford university stanford ca august 
paradise project web site 
www dsg stanford edu paradise html 
gautier diot 
mimaze web page 
www inria fr mimaze 

virtual reality modeling language java communications acm vol 
pp 
june 
gautier 
une architecture de communication pour les applications multi sur internet 
phd report french language 
university nice sophia antipolis 
september 
glossary adu application data unit 
adu chunk data manipulated application 
transmission efficiency purposes recommended fragment adus communication stack 
avatar dynamic object game controlled participant automatically system 
dead reckoning extrapolation technique aviation systems compute estimate current position plane knowledge position past trajectory 
dia distributed interactive application real time applications users participants interact defined environment 
examples dias distributed games digital battlefield shared virtual worlds cooperative tools dis distributed interactive simulation 
dis ieee standard see describes format packets exchanged simulation entities distributed simulation defines protocol handle packets 
ip multicast extension ip support construction trees point point routes delivery data group receivers 
mbone virtual overlay installed internet implement ip multicast 
rtp rtcp real time transport protocol real time control protocol 
rtp encapsulation format designed handle realtime data transmission internet 
rtp generally conjunction udp 
rtcp control protocol carries statistic control information rtp data flows 
ntp network time protocol 
ntp protocol synchronize clock signal network words provide global clock network 
ntp client server protocols servers organized stratum 
ntp sensitive link asymmetry 
pdu protocol data unit 
pdu standard way describe packet constructed protocol transmission purposes 
dis popular pdu entity state pdu carries description avatar 
udp user datagram protocol 
udp unreliable transport protocol opposed tcp guarantees ordered reliable data transmission 
udp main functionality multiplex demultiplex data 
udp designed implement real time applications internet 
