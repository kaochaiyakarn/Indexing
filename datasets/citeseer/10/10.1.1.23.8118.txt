classes mixins matthew flatt shriram krishnamurthi matthias felleisen department computer science rice university houston texas class object oriented programming languages provide flexible mechanism re managing related pieces code typically lack linguistic facilities specifying uniform extension classes set fields methods 
result programmers unable express certain abstractions classes 
develop model class class functions refer mixins 
mixin function maps class extended class adding overriding fields methods 
programming mixins similar programming single inheritance classes mixins directly encourage programming interfaces 
develops ideas context java 
results 
intuitive model essential java subset 
extension explains models mixins 
type soundness theorems languages 
organizing programs functions classes object oriented programming languages offer classes inheritance overriding parameterize program pieces management purposes re 
functional programming languages provide various flavors functional abstractions purpose 
model developed known highly developed mathematical theory 
grew response need manage large programs re components possible 
form parameterization useful certain situations 
higher order functions programmer easily define functions share similar core differ details 
language designers programmers readily acknowledge functional approach parameterization best situations relatively small number parameters 
function research partially supported nsf graduate research fellowship nsf ccr cda ccr texas atp 
appear popl january san diego ca consume large number arguments approach quickly unwieldy especially arguments function uses 
class systems provide simple flexible mechanism managing collections highly parameterized program pieces 
class extension inheritance overriding programmer derives new class specifying elements change derived class 
pure class approach suffers lack abstractions specify uniform extensions modifications classes 
example construction programming environment may require kinds text editor frames including frames contain multiple text buffers frames support searching 
java example implement combinations multiple buffer searchable frames derived classes 
choose define class multiple buffer frames class includes searchable frames 
repeat code connects frame search engine branches class hierarchy single buffer searchable frames multiple buffer searchable frames 
specify mapping editor frame classes searchable editor frame classes code connecting frame search engine abstracted maintained separately 
class object oriented programming languages provide multiple inheritance permits programmer create class extending class 
programmer follows particular protocol extensions mimic class class functions 
common lisp programmers refer protocol mixin programming roughly corresponds mixing additional ingredients class creation 
bracha cook designed language class manipulators promote mixin thinking style permit programmers build mixin classes 
unfortunately multiple inheritance cousins semantically complex difficult understand programmers 
result implementing mixin protocol approaches error prone typically avoided 
design mzscheme class interface system experimented different approach 
mzscheme classes form single inheritance hierarchy class values created extended run time 
capability available program function entry points la fortran keyword arguments la common lisp symptom problem remedy 
dan friedman determined informal poll teaches teaches multiple inheritance pers 
com 
interface place interface barrier interface door extends place barrier class door extends object implements door room enter person class extends door class extends door place hj barrier phi phi door phi phi interfaces omega omega omega omega omega omega omega omega omega omega omega omega omega omega object phi phi hj door enter phi phi hj pq classes hj program determines static directed acyclic graph types omega omega omega player person theta delta gamma room room theta delta gamma door theta delta gamma qs door enter player 
player person theta delta gamma room room theta delta gamma door theta delta gamma context type graph reductions map store expression pair new store expression pair mers team extensively construction drscheme scheme programming environment 
thorough analysis reveals code contains order functions classes 
typed model class functors java 
refer functors mixins due similarity common lisp multiple inheritance mechanism bracha class operators 
proposal superior isolates useful aspects multiple inheritance retains simple intuitive nature class oriented java programming 
section develop calculus java classes 
third section motivate mixins extension classes small illuminating example 
fourth section extends type theoretic model java mixins 
section considers implementation strategies mixins puts perspective 
model classes classicjava small essential subset sequential java 
model type structure semantics known type elaboration rewriting techniques scheme ml 
figures illustrate strategy 
type elaboration verifies program defines static tree classes directed acyclic graph dag interfaces 
type simply node combined graph 
type annotated collection fields methods including inherited ancestors 
evaluation modeled reduction expression store pairs context static type graph 
demonstrates reduction pictorial representation store graph objects 
object store record field values tag indicates run time type object field values objects 
single reduction step may extend store new object may modify field existing object store 
dynamic method dispatch accomplished matching class tag object store node static class tree simple relation tree selects appropriate method dispatch 
class model relies implementation details possible 
example model defines mathematical relation selection algorithm associate fields classes purpose type checking evaluation 
similarly reduction semantics assumes expression partitioned proper redex evaluation context provide partitioning algorithm 
model easily refined expose implementation details 
classicjava programs syntax classicjava shown 
program sequence class interface definitions followed expression 
class definition consists sequence field declarations sequence method declarations interface consists methods 
method body class indicating method overridden subclass class instantiated 
method body interface 
java classes instantiated new operator class constructors classicjava instance variables initialized null 
evaluation language classicjava field uses super invocations annotated type checker extra defn defn class extends implements field meth interface extends meth field fd meth md arg body arg var body new var null fd fd md super md view var var variable name class name object interface name empty fd field name md method name classicjava syntax underlined phrases inserted elaboration part surface syntax formation see underlined parts syntax 
view forms represent java casting expressions local variable bindings respectively 
valid classicjava program satisfies number simple predicates relations described 
example predicate states class name defined program relation oe associates class name class extends overloaded relations capture field method declarations syntax summarizing relations induce second set relations predicates summarize class structure program 
subclass relation partial order predicates hold 
case classes declared form tree object root 
program describes tree classes decorate class tree collection fields methods accumulates local declarations inheritance 
source declaration field method class computed finding minimum farthest root superclass declares field method 
algorithm described precisely relations 
relation retains information source class field retain source class method 
reflects property java classes fields overridden instances subclass contain field methods overridden may inaccessible 
interfaces similar set relations declaration relation oe induces relation classes single interface multiple proper superinterfaces order forms dag tree 
methods interface described union interface declared methods methods superinterfaces 
classes interfaces related implements declarations captured oeoe relation 
relation set edges joining class tree interface graph completing subtype picture program 
type full graph subtype ancestors 
classicjava type elaboration type elaboration rules classicjava defined judgements elaborates type defn defn defn elaborates defn meth meth meth elaborates meth gamma elaborates type gamma type subsumption exists type elaboration rules translate expressions access field call super method annotated expressions see underlined parts 
field uses annotation contains compile time type instance expression determines class containing declaration accessed field 
super method invocations annotation contains compile time type determines class contains declaration method invoked 
complete typing rules shown 
program typed class definitions final expression typed 
definition turn typed field method declarations legal types method body expressions typed 
expressions typed elaborated context environment binds free variables types 
example get set rules fields determine type instance expression calculate class tagged field name yields type field class installed annotation 
set rule right hand side assignment match type field match may exploit subsumption coerce type value supertype 
expression typing rules similarly intuitive 
classicjava evaluation operational semantics classicjava defined contextual rewriting system pairs expressions stores 
store mapping objects class tagged field records 
field record mapping elaborated field names values 
evaluation rules straightforward modification imperative scheme 
complete evaluation rules 
example call rule invokes method rewriting method call expression body invoked method syntactically replacing argument variables expression supplied argument values 
dynamic aspect method calls implemented selecting method run time type object store 
contrast super reduction performs super method selection class annotation statically determined type checker 
classicjava soundness program type evaluation rules classicjava produce value subtype errors 
put differently evaluation get stuck 
property formulated type soundness theorem 
class name declared class delta delta delta class delta delta delta field names class declaration unique fd fd class delta delta delta delta delta delta fd delta delta delta fd delta delta delta fd fd method names class declaration unique md md class delta delta delta delta delta delta md delta delta delta delta delta delta delta delta delta md delta delta delta delta delta delta delta delta delta md md interface name declared interface delta delta delta interface delta delta delta method declarations interface md interface delta delta delta delta delta delta md delta delta delta feg delta delta delta oe class declared immediate subclass oe class extends delta delta delta delta delta delta field declared class hc fd ti class delta delta delta delta delta delta fd delta delta delta method declared class hmd gamma 
var varn ei class delta delta delta delta delta delta md var varn feg delta delta delta oe interface declared immediate oe interface extends delta delta delta delta delta delta delta delta delta method declared interface hmd gamma 
var varn ei interface delta delta delta delta delta delta md var varn feg delta delta delta oeoe class declares implementation interface oeoe class delta delta delta implements delta delta delta delta delta delta delta delta delta class subclass transitive reflexive closure oe classes extended defined rng oe dom oe class hierarchy order antisymmetric method overriding preserves type md hmd ei hmd field contained class hc fd ti hc fd ti minfc hc fd method contained class hmd ei hmd ei minfc hmd interface transitive reflexive closure oe extended implemented interfaces defined rng oe rng oeoe dom oe interface hierarchy order antisymmetric class implements interface oeoe methods consistent md hmd hmd method contained interface hmd hmd classes supply methods implement interfaces oeoe md hmd hmd ei class methods instantiated md hmd ei type subtype field method type sets names variables classes interfaces fields methods assumed mutually distinct 
meta variable method signatures form gamma 
variable lists form var gamma environments mapping variables types 
ellipses baseline indicate repeated pattern continued sequence centered ellipses delta delta delta indicate arbitrary missing program text class interface definition 
predicates relations model classicjava theorem defn ffl 
si object ht fi ffl 
si ffl 
herror bad cast si ffl 
herror dereferenced null si 
main lemma support theorem states step taken evaluation preserves type correctness expression store pair relative program 
specifically configuration left hand side evaluation step exists type environment establishes expression type environment consistent store gamma oe object hc fi gamma object dom fc fd hc fd rng dom fd object hc fd object hc object dom gamma object dom dom dom gamma defn defn defn defn defn defn prog meth meth class delta delta delta fd fdn meth class delta delta delta fd fdn meth meth defn meth meth interface delta delta delta meth interface delta delta delta meth meth defn var varn md var varn md var varn meth gamma new new new var dom gamma gamma var var gamma var var gamma null null null gamma hc fd ti gamma fd fd get gamma hc fd ti gamma ev gamma fd ev fd set gamma hmd gamma 
var varn gamma gamma md en md call gamma oe hmd gamma 
var varn gamma gamma super md en super md super gamma gamma view gamma dom oe dom oe gamma view view gamma gamma var gamma var var gamma abs gamma gamma sub dom oe dom oe type context sensitive checks type elaboration rules classicjava evaluation step yields possible configurations defined error state new expression store pair 
case exists new type environment consistent new store establishes new expression type complete proof available extended version 
related classes model class object oriented languages similar published semantics java entirely motivated prior scheme ml models 
approach fundamentally different previous semantics objects 
focused interpreting object systems underlying mechanisms record extensions lambda calculi native object calculi record flavor 
semantics types simply names entities declared program collection types forms dag specified programmer 
collection types static evaluation field method lookups casts 
evaluation rules describe transform statements formed type context plain values 
rules plain program text intermediate stage evaluation complete program 
short model simple intuitive firstorder functional programming enriched language expressing hierarchical relationships data types 
dynamic class loading expressed framework addition static context 
context remains evaluation 
object object null fd fd fd md md super md view var new si 
object object hc fc fd null hc fd ti gi new object dom object fd si 
si get object hc fi fd object fd si 
object hc fd set object hc fi object md vn si 
object var vn varn si call object hc fi hmd gamma 
var varn ei super object md vn si 
object var vn varn si super hmd gamma 
var varn ei view object si 
object si cast object hc fi var si 
var si view object si 
herror bad cast si object hc fi null fd si 
herror dereferenced null si null fd si 
herror dereferenced null si nset null md vn si 
herror dereferenced null si operational semantics classicjava classes mixins example implementing maze adventure game page illustrates need adding mixins class language 
player adventure game wanders rooms doors virtual world 
locations virtual world share common behavior differ wide variety properties game interesting 
example kinds doors including locked doors magic doors doors varying heights doors combine varieties 
natural class approach implementing different kinds doors implement variation new subclass basic door class door left side shows java definition simple door subclasses instance requires key open door instance requires player duck walking door 
subclassing approach implementation doors natural programmer declares different particular door variation compared door variation 
unfortunately superclass variation fixed door variations composed complex interesting variations 
example classes combined create new class doors locked short 
mixin approach solves problem 
mixins programmer declares particular door variation differs arbitrary door variation 
creates function door classes door classes interface input type 
basic door variation defined separate mixin 
mixins functionally composed create different kinds doors 
programmer implements mixins exactly way derived class programmer rely implementation mixin superclass interface 
consider advantage mixins enforces maxim program interface implementation page 
right side shows define mixins locked short doors 
mixin locked nearly identical original class definition superclass specified interface door new classes created applying locked short class door respectively 
similarly applying locked yields class locked short doors 
consider door variation similar player needs book spells key 
extract common parts implementation new mixin secure key book specific information composed secure produce locked magic shown 
new mixins extends door right hand mixin composition secure extends door new locked magic mixins composed form mixin expected behavior open instance player key book spells 
combinational effect achieved chain super calls distinct non interfering versions 
declarations locked magic interfere interface extended locked door contain 
contrast door contain method locked overrides chains magic mixins java mixedjava extension classicjava mixins 
classicjava class assembled chain class expressions 
specifically content class defined immediate field method declarations class extends door boolean person system println don key return false system println key return super class extends door boolean person height system println tall return false system println door return super classes implement interface door boolean person boolean person mixin locked extends door boolean person system println don key return false system println key return super mixin short extends door boolean person height system println tall return false system println door return super class locked door class short door class locked short door class definitions translation composable mixins interface extends door object mixin secure extends door implements object return null boolean person object item item system println don item return false system println item return super mixin extends object return mixin extends object return mixin locked compose secure mixin magic compose secure mixin locked compose magic mixin compose door class locked door composing mixins localized parameterization declarations superclasses object 
mixedjava class assembled composing chain mixins 
content class defined field method declarations entire chain 
mixedjava provides kinds mixins ffl atomic mixin declaration similar class declaration 
atomic mixin declares set fields methods extensions inherited set fields methods 
contrast class atomic mixin specifies inheritance inheritance interface static connection existing class 
abuse terminology say mixin extends inheritance interface 
mixin inheritance interface determines method declarations mixin combined inher boldfaced class refer content single class expression opposed actual class 
methods 
mixin declares method contained inheritance interface declaration overrides atomic mixin implements interfaces specified mixin definition 
addition mixin implements inheritance interface 
ffl composite mixin declare new fields methods 
composes existing mixins create new mixin 
new composite mixin fields methods constituent mixins 
method declarations left hand mixin override declarations right hand mixin left hand mixin inheritance interface 
composition allowed right hand mixin implements left hand mixin inheritance interface 
composite mixin extends inheritance interface right hand constituent implements secure door secure door door locked magic mixin corresponds sequence atomic mixins interfaces implemented constituents 
composite mixins composed mixins producing arbitrarily long chains atomic mixin compositions 
illustrates mixin previous section corresponds chain atomic mixins 
arrows connecting tops boxes represent mixin compositions composition inheritance interface left hand side noted arrow 
arrows show method declarations mixin override declarations mixins composition interfaces 
example arrow secure magic method included door interface 
method door corresponding arrows connect declarations 
mixins completely subsume role classes 
mixin instantiated new mixin inherit services 
mixedjava indicated declaring mixin extends special interface empty 
consequently omit classes model mixins realistic language include mixins classes 
subsections precise description mixedjava 
section describes syntax type structure mixedjava programs followed type elaboration rules section 
section explains operational semantics mixedjava significantly different classicjava 
section presents type soundness theorem section briefly considers implementation issues section discusses related 
mixedjava programs contains syntax mixedjava missing productions inherited grammar classicjava 
primary change syntax replacement class declarations mixin declarations 
change annotations added type elaboration 
view expressions annotated source type expression 
second type longer included super annotation 
type elaboration inserts extra view expressions program implement subsumption 
predicates relations interface specific parts summarize syntactic composition operator associative semantically type theoretically 
type system strengthened composition associative giving mixedjava categorical flavor letting mixin declare set interfaces inheritance single interface 
required interface satisfied propagated composition 
encountered practical extended type system 
defn mixin extends implements field meth mixin compose interface extends meth new var null fd fd md super md view var mixin name syntax extensions mixedjava content mixedjava program 
formed program induces subtype relation mixins composite mixin subtype constituent mixins 
composite mixin supertypes type graph mixins dag tree classes 
dag lead ambiguities subsumption subtypes 
example subtype secure contains copies secure see instance ambiguous instance secure concretely fragment door new view secure door ill formed viewable secure viewable relation theta restriction subtype relation eliminates ambiguities 
subsumption theta relations collect fields methods contained mixin similarly eliminate ambiguities 
mixedjava type elaboration despite replacing subtype relation viewable relation subsumption classicjava type elaboration strategy applies equally mixedjava 
typing rules combined defn meth var null abs rules 
new rules deserve special attention 
super rule allows super call method declared current mixin inheritance interface current mixin determined looking type 
second rule strips view part expression delegates subsumption rules 
third sub rule subsumption inserts view operator subsumption coercions explicit 
mixedjava evaluation operational semantics mixedjava differs substantially classicjava 
rewriting semantics mixin name declared mixin delta delta delta mixin delta delta delta field names mixin declaration unique fd fd mixin delta delta delta delta delta delta fd delta delta delta fd delta delta delta fd fd method names mixin declaration unique md md mixin delta delta delta delta delta delta md delta delta delta delta delta delta delta delta delta md delta delta delta delta delta delta delta delta delta md md methods mixin md mixin delta delta delta delta delta delta md delta delta delta delta delta delta oe mixin declares inheritance interface oe mixin extends delta delta delta delta delta delta oeoe mixin declares implementation interface oeoe mixin delta delta delta implements delta delta delta delta delta delta delta delta delta ffl ffl ffi ffl mixin declared composition ffi mixin compose method declared mixin hmd gamma 
var varn ei mixin delta delta delta delta delta delta md var varn delta delta delta field declared mixin hm fd ti mixin delta delta delta delta delta delta fd delta delta delta mixin ffi theta mixin viewable mixin mixin uniquely theta ffi theta xor theta mixins composed defined rng fm ffi dom oe dom mixin hierarchy order antisymmetric extended implemented interfaces defined rng oe rng oe rng oeoe dom oe oej mixin extends interface oej oe ffi oej mixin implements interface oe oeoe delta mixin viewable interface mixin uniquely implements interface delta oe oeoe ffi delta xor delta mixins composed safely ffi oej delta sequence constructors adds element sequence appends sequences gamma 
mixin corresponds chain atomic mixins gamma 
oe ffi gamma 
gamma 
views inverted subsequence order method definitions match inheritance interface md hmd ei hmd oej field contained mixin hm fd ti gamma 
hm fd ti fm fm hm fd method contained mixin hmd ei gamma 
hmd ei fm fm hmd mixins supply methods implement interfaces oeoe md hmd hmd ei oej hmd type subtype theta type viewable type theta theta delta field method type ffl ffl ffl mixin selects view chain fm fm gamma 
ffl ffl ffl interface selects view chain minfm oej ffl ffl ffl method sequence subsequence md oej hmd md ffl rt ffl ffl method view selected view chain hmd mi rt mv mo hmd ei mv md fm mg fm mo md hmd mg predicates relations model mixedjava relies uniqueness method name chain classes associated object 
uniqueness guaranteed chains mixins 
specifically composition compose contains methods named declare inheritance interface contain methods accessible instance composite mixin object viewed specifically instance strategy avoid duplication rename best global transformation program visible entire program public method 
worst renaming triggers exponential defn defn defn defn defn defn prog meth meth mixin delta delta delta fd fdn meth mixin delta delta delta fd fdn meth meth defn oej empty gamma new new new gamma hm fd ti gamma fd fd get gamma hm fd ti gamma ev gamma fd ev fd set gamma hmd gamma 
var varn gamma gamma md en md call gamma oej hmd gamma 
var varn gamma gamma super md en super md super gamma gamma view gamma gamma view view gamma theta gamma view sub dom oe dom dom oe type context sensitive checks type elaboration rules mixedjava explosion size program occurs mixin mixin represents type renaming splits different types requires type splitting expression program involving mixedjava semantics handles duplication method names run time context information current view object 
evaluation object bundled view object values form 
view changed subsumption method calls explicit casts 
view represented chain mixins 
chain tail object full chain mixins chain mixins object instantiation type 
tail designates specific point full mixin chain selecting methods dynamic dispatch 
example instance magic instance view object secure door 
view search method object begins element chain 
phase search method locates base declaration unique non overriding declaration visible current view 
declaration traversing view left right inheritance interface step guide step relations 
search view analogous subobject languages multiple inheritance complexity shared superclasses 
reaches mixin inheritance interface include base declaration 
base declaration destination dispatch destination overriding declaration base contained object instantiated mixin 
declarations override base leftmost declaration selected destination 
location overriding declaration determines method definition invoked view object representation destination method body 
dispatching algorithm encoded rt relation 
apply algorithm example mixin getter extends empty object get secure door new new getter get view secure view locked door get view secure view magic door call get replaced view secure secure door 
view base declaration leftmost secure interface extended secure overriding declaration appears left secure instantiated chain extends interface contains 
null fd fd fd md md super md view var new si 
object hm fd null mn fd null new object dom gamma 
fm fd mn fd ng fm fd hm fd ti fd si 
si get object hm fi fd fd si 
object hm fd set object hm fi md vn si 
var vn varn si call object hm fi gamma 
mo hmd var varn rt mo super mi md vn si 
var vn varn si super oej hmd var varn rt view si 
si view theta view si 
si cast theta object hm fi theta gamma 
var si 
var si view si 
herror bad cast si theta object hm fi theta null fd si 
herror dereferenced null si null fd si 
herror dereferenced null si nset null md vn si 
herror dereferenced null si operational semantics mixedjava contrast second call get receives view secure door 
view base definition rightmost secure full chain overridden definition leftmost occurrence secure candidate relative view secure extends interface hides 
mixedjava differs classicjava respect method dispatching treatment super 
mixedjava super dispatches dynamic super expression statically known 
super dispatch mixins implemented regular dispatches rt relation tail current view place instantiation view chains ensures method selected leftmost mixin follows current view 
contains complete operational semantics mixedjava rewriting system expression store pairs class semantics described section 
semantics object store tagged mixin class values null pairs 
mixedjava soundness type soundness theorem mixedjava mutatis mutandis soundness theorem classicjava described section 
prove soundness theorem introduce conservative extension mixedjava defined revising mixedjava relations see 
extended language subtype relation directly viewable relation eliminating ambiguities 
mixedjava allows coercions method type subtype extended views contains sequence contains oe theta type viewable type theta field method contained type choose leftmost field method instance ffl ffl ffl mixin selects view chain choose leftmost instance chain ffl rt ffl ffl method view selected view chain choose minimum view method revised relations mixedjava calls rejected ambiguous mixedjava 
mixedjava suitable programming language proof type soundness theorem significantly simpler 
soundness theorem mixedjava applies mixedjava lemmas 
mixedjava program mixedjava program 

si 
mixedjava si 
mixedjava complete definition mixedjava soundness proof proofs lemmas available extended 
implementation considerations mixedjava semantics formulated high level leaving open question implement mixins efficiently 
common techniques implementing classes applied mixins properties mixins require new implementation strategies 
object carry view object 
implemented double wide half object pointer half current view 
second method invocation depends current view instantiation mixin object reflected rt relation 
relation determines static mixin method table analogous virtual method tables typically generated classes 
cost mixins classes equivalent cost interface typed class typed 
justification cost mixins implement parts program easily expressed classes 
language provides classes mixins portions program mixins incur extra overhead 
related mixins mixins appeared clos programming pattern 
unfortunately original linearization algorithm clos multiple inheritance breaks encapsulation class definitions difficult clos proper mixin programming 
dialect clos supports multiple inheritance breaking encapsulation language provide simple composition operators mixins 
bracha investigated mixin modules general language expressing inheritance overriding objects 
system earlier cook underlying semantics reformulated categorical terms ancona zucca 
bracha system gives programmer mechanism defining modules classes sense collection attributes methods modules combined new modules various merging operators 
roughly speaking operators provide assembly language expressing class functions permit programmers construct mixins 
language forces programmer resolve attribute name conflicts manually specify attribute overriding explicitly mixin merge site 
result programmer faced problem common lisp low level management details 
contrast system provides language specify content mixin interaction mixins mixin compositions 
gives mixin explicit role construction programs sensible mixin compositions allowed 
distinguishes method overriding accidental name collisions permits system resolve name collisions automatically natural manner 
programming language mixins relies intuition single inheritance classes 
mixin declaration language hardly differs class declaration programmer local perspective little difference knowing properties superclass described interface knowing exact implementation superclass 
programmer global perspective mixins free collection field method extensions tyranny single superclass enabling new abstractions increasing re potential code 
mixins inherently expensive classes mixins enforce distinction implementation inheritance subtyping cost reasonable offset gains code re 
mixins focus exploring compilation strategies lower cost mixins studying designers exploit mixins construct better design patterns 
cartwright robby findler cormac flanagan dan friedman comments early drafts 
abadi cardelli theory primitive objects untyped order systems 
theoretical aspects computer software hagiya mitchell eds vol 
lncs 
springer verlag apr pp 

abadi cardelli theory primitive objects second order systems 
proc 
european symposium programming new york sannella ed lecture notes computer science springer verlag pp 

abadi cardelli imperative object calculus 
tapsoft theory practice software development may mosses nielsen schwartzbach eds lecture notes computer science springer verlag pp 

ancona zucca algebraic approach mixins modularity 
proc 
conference algebraic logic programming berlin hanus rodr iguez artalejo eds lecture notes computer science springer verlag pp 

bracha programming language jigsaw mixins modularity multiple inheritance 
ph thesis dept computer science university utah mar 
bracha cook mixin inheritance 
proc 
joint acm conf 
object oriented programming systems languages applications european conference object oriented programming oct 
bracha lindstrom modularity meets inheritance 
proc 
ieee computer society international conference computer languages washington dc apr ieee computer society pp 

cook denotational semantics inheritance 
ph thesis department computer science brown university providence ri may 
eisenbach java typesafe probably 
proc 
european conference object oriented programming june 
mugnier monotonic conflict resolution mechanisms inheritance 
proc 
conference objectoriented programming systems languages applications oct pp 

smith trifonov application oop type theory state decidability integration 
proc 
conference objectoriented programming systems languages applications oct pp 

felleisen programming languages lambda calculi 
url www cs rice edu matthias web mono ps 
felleisen hieb revised report syntactic theories sequential control state 
tech 
rep rice university june 
theoretical computer science volume 
findler flanagan flatt krishnamurthi felleisen drscheme pedagogic programming environment scheme 
proc 
international symposium programming languages implementations logics programs 
flatt plt mzscheme language manual 
tech 
rep tr rice university 
flatt krishnamurthi felleisen classes mixins 
tech 
rep tr rice university 
gamma helm johnson vlissides design patterns elements reusable objectoriented software 
addison wesley massachusetts 
gosling joy steele java language specification 
java series 
addison wesley reading ma usa june 
harper stone type theoretic semantics standard ml 
submitted publication 
kamin inheritance smalltalk denotational definition 
proc 
conference principles programming languages jan 
kessler lisp objects symbolic programming 
scott il usa 
common lisp companion 
john wiley sons new york 
mason talcott reasoning object systems 
international journal foundations computer science sept 
reddy objects closures semantics object oriented languages 
proc 
conference lisp functional programming july pp 

emy programming objects ml art extension ml record types 
theoretical aspects computer software new york apr hagiya mitchell eds lecture notes computer science springer verlag pp 

friedman wand modeling subobject inheritance 
proc 
european conference object oriented programming berlin heidelberg new york july cointe ed lecture notes computer science springer verlag pp 

snyder inheritance development encapsulated software components 
research directions object oriented programming 
mit press pp 

syme proving java type soundness 
tech 
rep university cambridge july 
wright felleisen syntactic approach type soundness 
tech 
rep rice university 
information computation volume 

