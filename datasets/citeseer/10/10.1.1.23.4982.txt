springer verlag published lncs proceedings ecoop automatic specialization java programs ulrik pagh schultz julia lawall charles consel gilles muller compose group irisa campus universitaire de beaulieu rennes cedex france ups consel muller irisa fr www irisa fr compose 
automatic program specialization derive cient implementations generic components reconciling opposing goals genericity ciency 
technique proved useful domains imperative functional logical languages far explored domain object oriented languages 
experiments specialization java programs 
demonstrate construct program specializer java programs existing specializer programs java compiler 
specialization managed declarative approach abstracts optimization process masks implementation details 
experiments show program specialization provides time speedup image filtering program 
experiments identify optimizations object oriented programs carried automatic program specialization 
argue program specialization useful field software components allowing generic component specialized specific configuration 
supported part bull part contract 
supported part powers college nsf eia 
author current address department computer science brandeis university waltham ma 
mail cs brandeis edu initially designed embedded systems marketed language web programming java increasingly gaining acceptance generalpurpose language 
object oriented paradigm recognized advantages application design specifically program structuring 
possible decompose application defined generic components closely corresponding structure modeled problem 
structuring leads number important software engineering improvements regarding maintainability re usability code 
advantages translate loss performance 
conflict software generality performance recognized areas operating systems graphics 
conflict increasingly addressed success forms program specialization 
program specialization adapts generic program component usage context 
approach lead considerable performance gains eliminating general code aspects related precise context 
specialization performed manually adapting critical program components common usage patterns :10.1.1.38.5072
manual specialization improves performance limited applicability process error prone 
tools developed automatically specialize programs 
applications program specialization emerging number fields including scientific code systems software computer graphics promising results 
automatic specialization object oriented programs remains 
existing base experience imperative languages construct specializer optimize object oriented programs specifically programs written java 
developing automatic specializer realistic imperative language long complex task 
designing java specializer scratch experimenting approach tempo specializer programs coupled harissa optimizing java compiler 
preliminary experiments specializing java programs 
contributions follows identify specialization transformations particularly useful object oriented languages 
transformations implemented single uniform framework 
illustrate approach concrete example graphical filtering application transforming generic code form close hand optimized code 
apply declarative approach specialization proposed volanschi specify specialization strategies high level manner 
contrast volanschi perform specialization automatically manually 
demonstrate choice target language specializing java programs possible address optimizations levels source program run time environment 
address issue expressing result program specialization java source code 
argue program specialization key approach improving performance generic software components adapting code component configuration 
organized follows section informally presents specialization 
section introduces example program 
program specialized section identify typical opportunities specialization java programs 
section describes functionality staged program specialization process implemented prototype 
section describes related 
section discusses 
section concludes 
background program specialization explored variety languages ranging functional logic languages 
years program specializers real sized languages fortran developed :10.1.1.109.6502
realistic applications program specializers areas systems software scientific computing clearly demonstrated automatic program specialization ective tool allow programmers write generic programs loss ciency 
object oriented languages encourage genericity er opportunities specialization specialization far unexplored class languages 
section program specialization introduced 
declarative approach specifying program specialized 
program specialization intuitively program specialization aimed instantiating program respect parameters 
restricting generic program specific usage context hopes enable aggressive optimizations 
object oriented program approach applied methods class 
method specialized respect parts calling context including parameters fields enclosing object static fields classes 
example parameters method may represent options analyzed determine particular task performed 
specialization typically eliminate interpretation contextual information 
approach program specialization partial evaluation performs aggressive interprocedural constant propagation data types 
input values specified user constants explicit program partial evaluation constant folding optimizations loop unrolling forms strength reduction 
computations simplified information available specialization known static 
class power private int exp power int exp int calculate int int res int res return res fig 

java class power function 
computations known dynamic reconstructed literally form specialized program 
illustrate program specialization simple java class computing power function displayed 
assume calculate method invoked repeatedly specific exponent say loop base changes 
situation worthwhile specialize calculate method respect exponent 
specialization loop calculate method producing specialized method 
int calculate int int res res return res set values specialize may gradually available compilation execution 
program may need specialized compile time run time 
power class example dynamically generated specialized version calculate exponent supplied run time 
fact partial evaluator tempo ers strategies uniform environment 
run time specialization widens opportunities eliminate genericity programs 
partial evaluation di ers ordinary optimization resource limits imposed computations performed transformation 
enables transformations scope ordinary compiler imply partial evaluation process guided user 
process specializing parts large program reorganizing program specialized code complex need language declaring specialization opportunities 
declarative approach program specialization volanschi declarative approach specifying specialization opportunities object oriented programs 
specialization opportunities declared separately program form specialization classes 
specialization class defines conditions specialization occur methods specialize 
illustrate approach power class example previous section 
associated specialization class defined follows 
cube specializes power exp calculate int specialization class specifies calculate method specialized respect value exp field 
mentioning exp field declares static location providing value indicates specialization carried compile time 
value supplied exp field specialization class specialization occur run time exp field assigned value 
case specialization class expresses possibility specialize calculate exponent 
specialization classes processed java specialization class compiler determines methods specialized values specialization occur compile time run time 
java specialization class compiler adds method original program switching specialized implementations generating specialized implementations run time needed places guards automatically invoke method switching implementations value specialization changes 
private void exp cube invocation original method replaced invocation method currently stored field 
field contain specialized method original generic implementation 
cube specialization class specifies specialization respect integer value 
specialization classes allow invariants object types expressed specifying type field name specialization class 
specialization classes allow user specify properties ranging objects 
described volanschi dependencies aggregate specialization classes determined specialization class compiler making possible eliminate virtual call switch implementations 
optimization essential cient implementation specialization example section 
specialization example object oriented programs structure genericity composed individual objects interact generic interfaces 
example image filtering program 
multiple layers abstraction facilitate extensibility maintenance wide range functionalities 
example illustrate specialization opportunities object oriented programs 
particular example exploits known abstraction mechanisms strategy factory design patterns 
general performance benefits specialization depend amount overhead eliminated specialization specialization opportunities algorithm 
section introduces image filtering details structure example discusses opportunities find specialization 
image filtering consider image filtering matrix known mask 
filtering performed moving mask image computing filtered pixel position center mask performing operations pixels covered mask 
filters obtain variety ects including blurring edge detection noise elimination 
cache ciency image decomposed rectangular tiles filtering performed tile time 
possible representations data defines image representation having specific advantages 
reason image data manipulated abstractly filtering process making possible choose cient representation image independently choice image filter 
structure implementation structure example shown object diagram 
classes critical presentation shown 
central class manipulates data stored tile pixel processing strategy defined implemented 
parameterized kernel defines mask 
tile stores sets tile image databuffer holding image data 
image data processed operators accessed databuffer pixel objects data representation pixel kernel class interface tile databuffer implements extends creates fig 

structure example program strategy defined 
pixel objects created factory 
describe implementation detail showing parts source code specialized cient implementations 
class processes tile image 
method produces filtered tile double loop applies method filtering operator pixel source tile 
classes implement define method computes filtered pixel 
method pixels covered mask traversed double loop extracted pixel method class tile 
method uses associated pixel look data databuffer tile 
pixel scaled mask result accumulated pixel acc 
convolution operator computes linear combination points covered mask median operator selects median pixels covered mask 
specialization class compiler guard values stored mask special class represent mask ordinary integer array 
public class implements src op public tile int tx int ty int tw int th int op tile src tx ty tw th tile tx ty tw th int int op return fig 

class 
applies operator pixel image 
class implementation multiple samples color components example packed single integer value 
methods reading pixel data stored tile model shown 
class implementation pixel instantiated factory 
cient representation subclass instantiated pixel consists bit samples 
avoid unnecessary extraction samples packed pixel value implementation switches packed representation directly accessible representation indicated field 
separation image processing algorithm distinct classes simplifies implementation facilitates extensibility induces heavy performance penalty 
limited small blurring mask implementation performs virtual calls filter single pixel 
hand optimized implementation dedicated filter programmed independently kind operator data representation perform virtual calls 
image processing applications rarely structured genericity chosen application 
ciency enhanced price genericity ease maintenance 
alternative program specialization applied program enhance performance 
start identifying critical points er opportunities optimization specialization 
opportunities specialization image filtering program structured allow flexibility specifying filter applied image concrete representation pixels example java api recommended type cast specific sample model having dedicated code kind representation 
public class implements int mask width mask height mask center mask center double mask divisor mask implements simple integer array model 
pixel acc pixel pixel initialized model public pixel int int tile int mx xmax ymax int mask element ymax mask height mask center xmax mask width mask center pixel acc acc pixel pixel memory efficiency acc reset reset pixel neutral color mask center mx mask center mx mx covered mask mask element mask get mask center mask width mx mask center scale mask element scale pixel colors acc add add pixel colors acc normalize mask divisor normalize normal range return acc fig 

class 
combines pixels covered kernel 
public class tile int width height coordinates tile image public databuffer data void int int pixel data width public class implements public void databuffer int idx pixel setvalue idx 
fig 

tile classes 
storage image data access image data 
image 
applying particular filter particular image filter pixel representation remain invariant 
flexible program structure chosen presents significant opportunities specialization 
method specialized specific filtering operator removing separation image traversal action perform pixel 
specialization captured specialization class specifies blurring operator 
method specialized apply specific convolution kernel image 
specialization class specifies kernel takes average surrounding pixels 
pixels manipulated operator specified represented specific sample model 
operator manipulates image data methods tile concrete pixel implementation 
methods concrete class manipulate raw data stored databuffer tile 
specializing operator concrete class exposes concrete type pixels allows data databuffer directly manipulated 
specialization class rgb captures common case bit samples represent pixel red green blue 
specialization class implies instantiates pixels type implementation concrete pixel factory shown 
public class extends int value boolean false value int sample sample sample bit samples public void setvalue int value false void int pixel value sample pixel xff sample pixel xff sample pixel xff true public void scale int sample sample sample 
methods implementing pixel interface fig 

class 
representation dedicated bit pixels samples 
specializes op void int tx int ty int tw int th specializes mask width mask height mask center mask center mask divisor mask rgb model void int int tile rgb specializes fig 

declaration specialization opportunities 
specialization classes linked method called concrete object specialized state aggregate objects described aggregate specialization classes specialized state 
virtual call choice implementation necessary calling method 
describe realize specialization opportunities 
specializing java programs traditionally program specialization optimizes program input values provided user constants explicit program 
case java specialization exploit additional static information type object simplify operations implicit virtual machine 
section readability illustrate result specialization java code equivalent code produced automatically implementation 
specializing data encapsulation object oriented language java values systematically encapsulated 
consequence accessing value implemented terms sequence pointer dereferences cost depends embedding depth object structure 
specialization replaces field containing static value value 
transformation eliminates memory improves performance 
example 
specialization class indicates specialized respect dimensions weights mask 
specialization propagates constants eliminating fields triggering optimizations 
dimensions mask control double loop unrolled specialization 
resulting code consists mask width mask height blocks code specialized current loop indices 
known indices allow specializer evaluate weights mask replacing array constants 
result specialization illustrated 
specializing object types object oriented language java control flow depends object types program values 
choice method invoked java method call depends type receiver object 
definition invoked method determined compile time method call said virtual typically implemented table pointer public pixel int int tile int mask element pixel acc acc pixel pixel acc reset scale acc add repeats times different arguments acc normalize return acc fig 

method specialized data values 
dereference 
type receiver object determined extra information available specialization specialization replaces virtual method call ordinary procedure call 
procedure call inlined leading optimizations 
example 
method class contains virtual call op doubly nested loop 
specialization class specifies op type 
specializing type op replaces virtual call op direct call method specialized class enabling subsequent inlining 
save space optimization illustrated figures 
sample model method provides dramatic example 
specialization class specifies pixels represented specialization class rgb 
specialization class implies sample model class creates pixels optimized representation 
specialization replaces virtual calls performing pixel operations direct calls methods object 
furthermore implementation optimized choose representations depending pixel 
specialization determine control flow methods eliminate overhead specifically field associated maintaining possible representations 
transformed method viewed specialized version illustrated 
code pro duced specialization compiled optimizing compiler example eliminates multiplications 
specializing virtual machine java requires run time checking performed virtual machine ensure safety properties 
particular casts array systematically checked 
object cast type supertype actual object type 
array access element array bounds 
general tests carried run time 
specializer determine type object size array index accessed element tests eliminated specialization 
unfortunately definition java bytecode optimizations expressed bytecode level 
directly execute specialized code harissa environment approach su er problem 
concretely specialized program cient equivalent program safety original java program price java portability 
example 
having specialized method respect values types number type casts remain pixels acc types pixels static type casts checked eliminated specialization 
shown show java level 
result specialization original image filtering program essentially constructed collection generic interacting objects 
program specialization automatically adapts object context obtaining implementation similar version 
case example specialization produces optimized implementation adapted specific filtering strategy 
experiments harissa code 
performance specialized code significantly better generic unspecialized code 
tested automatically specialized code harissa environment 
experiments conducted sun workstation mhz ultra sparc dell pc mhz pentium pro 
results including execution time speedup specialized code shown 
conducted experiments blurring convolution filter blurring convolution filter median filter 
speedups highest speedup obtained large convolution filter 
relatively minor speedup median filter derived primarily structural simplifications running time dominated median computation 
convolution filters code simplified degree memory access major bottleneck 
public pixel int int tile pixel acc acc pixel pixel acc value acc false value data width scale int pixel value sample pixel xff sample pixel xff sample pixel xff true sample sample sample specialized code acc add 
block repeats times different array indices 
specialized code acc normalize return acc fig 

method specialized types 
sparc pentium sparc pentium sparc pentium seconds unspecialized convolution kernel convolution kernel median specialized fig 

automatically specialized programs running harissa 
experiments specialized java source code 
estimate gains expected program specializer outputs java bytecode programs manually translated specialized code java 
benefits due virtual machine specific optimizations retained possible mimicking optimized translation process direct naive 
tests executed jdk version machines previous experiment 
shows result experiments note scale changed 
speedups times times resembling speedups automatically specialized programs 
speedups due specialization bit higher observed harissa 
jit executes programs slowly harissa environment memory access dominating factor harissa tests making benefits code simplifications performed specializer apparent 
description prototype writing program specializer scratch chosen construct prototype existing tools minimizing amount needed perform realistic initial experiments 
prototype implemented staged process 
java program specialization classes processed prepare specialization produce corresponding run time environment 
java code translated code specialized tempo specializer 
seen approach translating java programs allows aspects semantics java explicit exposes specialization opportunities 
examples include virtual calls casts array see section 
approach kinds specialization sparc pentium sparc pentium sparc pentium seconds unspecialized convolution kernel convolution kernel median specialized fig 

prospective benchmarks 
manual back translation java 
expressed approach limited syntax semantics java expressiveness possible loss precision analyses performed opposed java 
example alias analysis java need consider incorrectly typed aliases 
loss precision pose problem perform alias analysis translation generate annotated code specifically tempo 
structure prototype structure prototype 
input specialization process java program set specialization classes 
java specialization class compiler jscc prepares program specialization 
class specialized generates dispatcher select appropriate specialized generic implementation invoke respect execution context called enclosing object enclosing java 
additionally jscc produces stub methods native specialized implementations object java generated tempo phase 
extended java program compiled bytecode javac translated harissa compiler 
tempo takes translated program specialization parameters generates specialized versions 
translated program specialized code translated back java expense losing optimizations run directly harissa environment 
option currently implemented 
note java programs specialized compile time run time 
specialization simplifies program adding new code specialized program compatible harissa environment 
specialization parameters sc main java enclosing java java java javac harissa application tempo specialized gcc javac harissa files files generic java jscc fig 

structure prototype specialization class harissa harissa line compilation system supports dynamic loading bytecode 
compiles java bytecode code compiled standard compilers 
harissa includes aggressive optimizations method inlining driven class hierarchy analysis intra procedural static class analysis 
optimizations complemented compiler 
harissa run time system integrates java bytecode interpreter execute dynamically loaded bytecode 
harissa designed compile java program code preserving original structure possible 
preserving structure program harissa suitable generating programs processed back phase tempo 
object represented ordinary structure virtual call expressed indirect function call pointer stored structure field allowing precisely treated tempo replaced direct call pointer static 
harissa extended generate extra information useful tempo 
particular harissa generates context specialization containing information parts program specialized 
currently harissa implements exceptions longjmp function ignored tempo 
specializing presence exceptions produce incorrect results 
plan extend tempo explicit treatment exceptions extending input language include java exception mechanism harissa generate code exceptions 
tempo tempo line program specializer language supports compile time run time specialization 
analyses tempo su cient ectively specialize wide range programs 
necessary improve precision analyses better specialize java programs 
code generated java program di erent programs 
particular objects represented structures structures heavily harissa generated code ordinary programs 
memory management di erent memory management java objects dynamically allocated 
situation extended tempo precise treatment structures 
upward type casts implicit java type casts objects common 
contrast rarely occur considered bad programming style 
address need tempo extended handle type casts structures 
capability geared programs generated harissa layout structures guaranteed compatible 
related knowledge preliminary investigations specialization object oriented programs 
apply approach translation intermediate language specializer exists approach investigated earlier implement program specialization simple imperative language 
optimizing compilers addressed specialization data representation control flow 
specialization object oriented languages 
steensgaard developed partial evaluator small object oriented language emerald 
focused primarily implementation issues ensuring termination representation unknown values specialization process 
contrast investigated applicability program specialization object oriented paradigm 
khoo investigate partial evaluation means eliminating virtual calls simple object oriented language 
focuses formalizing analysis transformations realized performing program specialization programs virtual calls 
language incorporates templates allow single class statically compiled di erent types ect performing specialization 
templates perform computations compile time demonstrated veldhuizen albeit object types significant compilation overhead 
special syntax write programs optimized templates having specialized generic variants method requires writing di erent implementations 
specialization translation 
moura investigated approach translation extend applicability existing program specializer new program constructs 
designed approach specializing imperative programs translation functional subset scheme followed specialization existing specializer scheme named 
optimization data representation 
object inlining technique storing temporary objects stack 
object locally method stack allocated heap allocated improving performance program 
control flow simplification performed specialization enables optimizations data structures 
object inlining instance optimizations consider 
optimization control flow 
vortex compiler implements optimizations similar performed program specialization 
vortex static global analyses complemented automated profiling system 
profiling information guides aggressive optimizations 
optimizations eliminate virtual calls specialize methods types arguments 
fact optimizations ered vortex depend accuracy analyses profiling system 
result level optimization di cult predict 
contrast specialization parameterized information provided programmer component user 
furthermore vortex optimizations propagate exploit type information remove virtual calls 
specialization goes types propagating values 
result optimizations performed values loop unrolling array bounds checking 
vortex approach compilation performed program run 
considering compilation execution profiling separate phases execution environment include tasks perform compilation continuous process 
approach allows aggressive optimizations similar employed program specialization information form usage patterns available run time 
analyses performed inherently limited amount available time space 
checks retained verify invariants detected specializer 
provided outline automatic program specialization object oriented language java achieved 
program specialization java applications raises issues 
section outlines possible extensions 
software components 
trend software engineering development systems software components 
emerging software architecture illustrated java beans rapidly growing selection components 
trend stresses need genericity address class solutions specific software component 
overcome expected performance penalty specialization critical tool 
context step aims developing methodology designing developing highly generic components integrated specialize predictable way cient implementations 
java target language 
portability beneficial produce specialized code java 
option translate specialized program back java 
approach eliminate optimizations mainly related virtual machine see section 
translation back java possible specialized code information structure enable java constructions recovered 
specialization process depends translations performed harissa compiler transformations done tempo 
motivated encouraging benchmark results section includes development back translator 
run time specialization 
current implementation specialization class compiler support run time specialization tempo support specialization compile time run time 
run time specialization executable code assembled directly binary templates generated compiler 
approach directly harissa environment 
specializing run time obvious advantage exploiting values available running program 
component software technology growing trend software development 
genericity central issue 
demonstrated specialization key tool overcome performance penalty incurred genericity 
specialization exploits global information available software components integrated application 
performing transformations virtual call elimination inlining constant propagation constant folding turns modular component application monolithic optimized program 
developed specializer java existing tools java compiler harissa specializer tempo 
specialize image filtering application 
application structured modular way support variety data representations image treatments 
specialization shown eliminate overhead incurred structuring strategy 
practice specialized program times fast original 
lessons drawn 
specialization modular java programs drastically improve performance 
usual optimizations ered imperative specializers object oriented programs er opportunities improvement opportunities traditionally studied advanced optimizing compilation techniques 
re existing tools develop java specializer proved successful terms development time 
result obtained largely compromising quality specialized program 
approach involves specializing programs enables class optimizations reach ordinary java source bytecode compilers 
believe specializer key tool object oriented software development environments 
particular context java beans specializer allow modular applications mapped cient implementations 
availability 
tempo java specialization class compiler freely available 
harissa available gnu public license full source code 
information compose home page www irisa fr compose 
anonymous referees valuable comments renaud marlet helping streamline rasmussen encouraging comments 

andersen 
program analysis specialization programming language 
phd thesis computer science department university copenhagen may 
diku technical report 

auslander philipose chambers eggers bershad 
fast ective dynamic compilation 
pldi pages 

baier gluck 
partial evaluation numerical programs fortran 
acm sigplan workshop partial evaluation semantics program manipulation pages orlando fl usa june 
technical report university melbourne australia 

berlin 
partial evaluation applied numerical computation 
acm conference lisp functional programming pages nice france 
acm press 

bershad anderson lazowska levy 
lightweight remote procedure call 
acm transactions computer systems february 

cheung 
exploring issues operating systems structuring microkernel extensible systems 
acm operating systems reviews october 

consel 
tour partial evaluation system higher order applicative languages 
partial evaluation semantics program manipulation pages copenhagen denmark june 
acm press 

consel hornof noel volanschi 
uniform approach compile time run time specialization 
danvy gluck thiemann editors partial evaluation international seminar dagstuhl castle number lecture notes computer science pages february 

consel noel 
general approach run time specialization application conference record rd annual acm sigplan sigact symposium principles programming languages pages st petersburg beach fl usa january 
acm press 

dean defouw grove litvinov chambers 
vortex optimizing compiler object oriented languages 
oopsla conference pages san jose ca october 

dean grove chambers 
optimization object oriented programs static class hierarchy analysis 
proceedings ecoop aarhus denmark august 
springer verlag 

chien 
evaluation automatic object inline allocation techniques 
proceedings oopsla conference object oriented programming systems languages applications acm sigplan notices 
acm 

engler kaashoek 
dpf fast flexible message demultiplexing dynamic code generation 
sigcomm symposium communications architectures protocols pages stanford university ca august 
acm press 

gamma helm johnson vlissides 
design patterns elements reusable object oriented software 
addison wesley 

knoblock ruf 
specializing shaders 
computer graphics proceedings annual conference series pages 
acm press 

holzle ungar 
optimizing dynamically dispatched calls run time type feedback 
proceedings conference programming language design implementation pages new york ny usa june 
acm press 

cheng khoo 
compiling inheritance partial evaluation 
partial evaluation semantics program manipulation pages new haven ct usa september 
acm sigplan notices 

gluck 
fortran program specialization 
meyer snelting editors workshop analyse entwicklung und von pages 
universitat germany 
report 

lee leone 
optimizing ml run time code generation 
pldi pages 


fast asm cpp 
european unix systems user group conference proceedings pages bell laboratories murray hill september 


marlet thibault consel 
mapping software architectures cient implementations partial evaluation 
conference automated software engineering pages lake tahoe nevada november 
ieee computer society 

steensgaard 
partial evaluation object oriented imperative language 
master thesis university copenhagen department computer science copenhagen denmark april 

moura 
bridging gap functional imperative languages 
phd thesis university rennes april 

muller marlet volanschi consel pu goel 
fast optimized sun rpc automatic program specialization 
proceedings th international conference distributed computing systems pages amsterdam netherlands may 
ieee computer society press 

muller moura consel 
harissa flexible cient java environment mixing bytecode compiled code 
proceedings rd conference object oriented technologies systems pages portland oregon usa june 
usenix 

muller schultz 
harissa hybrid approach java execution 
ieee software pages march 

proceedings acm sigplan conference programming language design implementation philadelphia pa may 
acm sigplan notices 

pu black consel cowan inouye walpole zhang 
optimistic incremental specialization streamlining commercial operating system 
proceedings acm symposium operating systems principles pages copper mountain resort usa december 
acm operating systems reviews acm press 

pu massalin ioannidis 
synthesis kernel 
computing systems winter 

russ 
image processing handbook 
crc press second edition 

veldhuizen 
templates partial evaluation 
acm sigplan workshop partial evaluation semantics program manipulation pages san antonio tx usa january 
acm press 

volanschi consel muller cowan 
declarative specialization object oriented programs 
oopsla conference proceedings pages atlanta usa october 
acm press 

