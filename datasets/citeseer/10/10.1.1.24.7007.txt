probing tcp implementations douglas comer john lin department computer sciences purdue university west lafayette indiana demonstrate technique called active probing study tcp implementations 
active probing treats tcp implementation black box uses set procedures probe black box 
studying way tcp responds probes deduce characteristics implementation 
technique particularly useful tcp source code unavailable 
demonstrate technique shows example probe procedures examine aspects tcp 
results informative reveal implementation flaws protocol violations details design decisions vendor supported tcp implementations 
results experiment suggest active probing test tcp implementations 
transmission control protocol tcp connection oriented flow controlled transport protocol provides reliable transfer ordered delivery data 
tcp designed operate successfully communication paths inherently unreliable lose damage duplicate reorder packets 
ability tcp adapt networks various characteristics computer systems various processing power tcp important component fast expansion global internet 
original definition tcp appears rfc 
researchers identified problems weakness protocol proposed solutions :10.1.1.15.3262
rfc updates supplements definition meet tcp standard implementation follow rfc rfc 
supported part fellowship 
rfcs give detailed description tcp implementation tcp implementations conform specifications differ slightly implementor freedom choose software design parameters interpret protocol standards 
possible deduce design decisions parameters choices source code understanding operation complex software module tcp difficult 
demonstrate technique called active probing study tcp implementations 
active probing especially useful source code unavailable 
furthermore shows tcp code operates presence system components 
active probing treats tcp implementation black box uses set procedures probe black box 
studying way tcp responds probes deduce characteristics implementation 
information deduced depends probing procedures 
show example procedures examine aspects tcp 
results informative reveal implementation flaws protocol violations details design decisions commercially available tcp implementations 
results experiment suggest active probing test tcp implementations 
active probing operates traditional tcp trace analysis 
uses software tool capture tcp segments directed particular tcp implementation segments tcp implementation sends response 
analyzes trace data find patterns reveal characteristics tcp implementation 
trace analysis active probing uses specially designed probing procedures induce tcp traffic passively monitoring normal traffic network 
software tools capture tcp segments assist analysis trace data widely available public domain commercial domain 
rfc gives detailed catalog tools 
experiments reported tools capture tcp segments assist analysis trace data wrote programs parse analyze captured data 
experiments reported examine commercially available tcp implementations solaris sunos sunos hp ux irix 
chose implementations widely available workstation operating systems 
access source code sunos sunos 
remainder organized follows 
section examines tcp retransmission time intervals successive retransmission single data segment 
section studies keep alive mechanism tcp implementations 
section investigates tcp zero window probing 
section draws discusses 
successive retransmission intervals tcp tcp uses acknowledgment retransmission scheme ensure reliable delivery packets 
sending packet sender starts timer expects acknowledgment receiver retransmission time rto period 
sender receive acknowledgment period assumes packet lost retransmits packet 
correct estimation retransmission time vitally important provide effective data transmission avoid overwhelming internet excessive retransmissions 
hand sender uses smaller rto value actual packet round trip time rtt unnecessary retransmissions occur 
packet round increase due network congestion unnecessary retransmissions situation worse may lead congestion collapse 
hand sender uses larger rto value lost packet causes sender wait longer necessary degrading throughput 
calculation rto value originally suggested rfc known inadequate replaced 
rfc specifies new standard uses algorithm described jacobson 
new algorithm uses measured rtt values calculate smoothed mean measure variance smoothed mean difference 
rto calculated smoothed mean 

interface multi homed host interface solaris irix 
hp ux sunos sunos control host monitor host monitor host router mbps ethernet configuration networks hosts obtain successive retransmissions intervals tcp variance 
rfc specifies tcp implement rto values successive retransmissions segment 
probing procedure determine tcp implementation chooses rto values successive retransmissions probe procedure 
host tested select multi homed host destination see 

ip address interface say destination address reached 
open tcp connection discard port host interface start sending data 

login host control host interface say 
disable interface communication host host progress disabling interface host sending data discard port host interface simulates network failure host host triggers retransmissions note runs multi homed host host connects networks 
unix command disable interface 
rto second retransmission count sunos rto second retransmission count hp ux rto second retransmission count sunos rto second retransmission count irix rto second retransmission count solaris rst rst rst rst connection connection dropped dropped connection dropped connection dropped connection dropped tcp rto intervals successive retransmissions lan environment probe program host tcp probed 
enable continued control interface login control host interface interface connected ethernet 
rto estimate depends packet round trip time tested host host tcp implementations tested run hosts connected megabit second mbps ethernets 
average load ethernets experiment capacity 
tested hosts located gateway see 
average round trip time packets tested host experiments measured ping ms measurements accurate monitor program captures tcp segments runs host connected ethernet hosts probed 
monitor program runs host depending host probed 
results tcp implementation conducted experiments shows results 
graphs show probed operating systems sunos sunos hp ux behave 
increases rto values successive retransmissions reaches maximum rto seconds 
retransmits data segment twelve times thirteenth transmission sends reset rst segment data drops connection terminates process executes probe program 
solaris tcp increases rto values successive retransmissions drops connection ninth retransmission 
solaris tcp send rst segment ninth retransmission 
delays seconds drops connection terminates process executes probe program 
rfc specifies threshold dealing excessive retransmissions segment tcp 
measured units time count re obtained gamma interval instance probe program calls connect routine establish connection instance process runs probe program called exits th experiment interval instance tcp sends segment instance tcp sends segment measured monitor program th experiment 
time interval consists parts ff fi ff interval instance probe program calls connect instance segment sent fi interval instance segment sent instance process exits 
ff small compared fi gamma approximation fi 
initial rto millisecond experiment irix hp ux sunos sunos solaris initial rto values tcp implementations lan environment transmissions 
number retransmissions segment reaches tcp closes connection 
rfc specifies correspond seconds 
implementations probed meet requirement 
implementation allows users configure value rfc mandates 
initial rto values tcp implementations worth noting 
local area network lan environment consists mbps ethernet segments average load available bandwidth typical packet rtts average ms variance smoothed mean difference packet rtts averages ms typical rto value calculated mean plus variance remain ms shows initial rto values tcp implementations higher ms large initial rto values suggest implementations imposed lower bound rto estimates 
lower bound rto estimates reasons imposing lower bound rto estimates 
timer measure packet rtt may coarse accurate measurements 
example bsd tcp derivatives uses timer ms tick measure packet round trip time schedule retransmissions 
lan environment typical packet rtt ms timer measure packet rtt accurately impossible 
lower bound filters rtt samples small measure accurately coarse granularity timer 
second imposing lower bound rto estimates improve throughput lan environment 
lan environment exhibits low packet loss low average packet round trip time 
imagine tcp implementation uses millisecond granularity timer measure packet round trip time schedule retransmissions lower bound rto estimates 
normal load conditions smoothed rtt ms variance smoothed mean difference ms sudden network delay host processing delay causes rtt segment exceed ms cause retransmission segment segment lost transit 
redundant retransmission consumes network bandwidth adds unnecessary processing overhead sender receiver forces sender slow start mode reduces transmission rate 
way lower rto estimates consider threshold rto estimation algorithm take effect 
lower bound set infinity tcp ignores rto estimates entirely tcp attempt retransmit lost packets lower bound set zero tcp uses rto estimates transmission 
rto estimation algorithm derives estimate rto previous rtt samples cover fluctuations packet rtt specific range 
calculate rto mean plus twice variance 

transmission missing data transmission missing data error 
sequence sequence number number data octets acknowledgment number window segment number host solaris host comment note digits sequence number acknowledgment number shown 
illustration implementation flaw solaris tcp 
sudden rtt fluctuations exceed range trigger unnecessary retransmissions 
hand higher lower bound allows tcp tolerate greater network delay fluctuations triggering unnecessary retransmissions tcp take longer respond lost packets 
hand lower lower bound allows tcp respond lost packets quickly may cause unnecessary retransmissions network delay fluctuations exceed rto estimations 
lower bound rto estimates design parameter tcp implementation choose carefully 
shows lower bound observed systems range values irix tcp largest lower bound range ms ms solaris tcp smallest lower bound range ms ms 
sunos hp ux sunos lower bound set range ms ms implementation flaw analyzing probe results solaris tcp apparent implementation flaw 
symptom occurs instances tcp trace data gathered 
illustrates host running solaris sends data discard port host segment sequence number carries octets data 
data segment sequence number 
reading sunos tcp source code inaccuracy timer algorithm scheduling retransmissions cause lower bound rto range values 
segment sequence number 
apparently tcp skipped octets sequence space 
milliseconds transmits missing octets data segment segment 
note monitor program runs host connected ethernet missing segments discarded gateway 
furthermore retransmissions missing data segments segments show error result monitor program missed original transmissions 
symptom occurs instances irix trace data 
tcp keep tcp specification include mechanism probing idle connections 
theory host crashes establishing connection host second machine continue hold idle connection forever 
tcp implementations include mechanism tests idle connection releases remote host crashed 
called tcp keep alive mechanism periodically sends probe segment elicit response peer 
peer responds probe sending ack connection alive 
peer tcp fails respond probe segments longer fixed threshold connection declared connection closed 
rfc tcp implementation may include keep alive mechanism 
tcp keep alive included applications able turn connection basis snd wnd rcv wnd snd nxt rcv nxt receive window byte receive send window byte send snd nxt sender send sequence space receiver receive sequence space rcv nxt right edge right edge rcv wnd receive window send window snd wnd snd nxt sender send receiver receive tcp sequence spaces connection quiet operating data size sequence ack seq 
probing system seg 
number number interval solaris sunos snd nxt rcv nxt sec 
sunos snd nxt rcv nxt sec 
hp ux snd nxt rcv nxt sec 
irix snd nxt rcv nxt sec 
table results tcp keep alive probing tcp implementations default 
threshold interval send tcp keep configurable default seconds hours 
tcp reliably transmit ack segments carry data ack segment response keep alive probe may lost 
tcp drop connection predefined number keepalive probes fail elicit response peer 
probe procedure probe procedure study implementation tcp uses keep alive implement 

host tested open tcp connection discard port host 

enable keep alive connection 

pause terminating signal occurs 
illustrates tcp connection quiet sequence number sender retransmission timer set ack segment carries data 
library function pause may 
keep alive segment observed observations observation lasted hours 
octet send snd nxt sequence number receiver octet receive rcv nxt size sender send window snd wnd receiver receive window size rcv wnd 
rfc recommends sequence number seg seq snd nxt octet garbage data keep alive segment 
octet garbage data keep alive mechanism compatible early tcp implementations handle seg seq equal snd nxt octet data 
sequence number snd nxt lies outside peer receive window causes peer tcp respond ack segment connection alive peer dropped connection respond reset rst segment ack segment 
results tcp implementations tested correctly set default tcp send keep alive probes applications turn keep alive connection basis 
implementations second hours time interval probes specified rfc 
sunos uses second interval probes 
implementations allow users configure probing interval mandated rfc 
solaris provides socket option turn tcp keep alive observe keep alive probes observations observation lasted hours 
rfc specify contents acknowledgment field seg ack keep alive segment 
table shows tcp implementations set seg ack rcv nxt 
unnecessary set seg ack rcv nxt backward compatibility early tcp implementations 
see probed implementations respond keep alive segment seg seq equal snd nxt seg ack equal rcv nxt include octet data modified sunos tcp code send keep alive segment 
implementations responded correctly keep alive segment 
keep alive server applications tcp keep alive especially useful server application prevent clients holding server resources indefinitely clients crash network failure 
example see network failure affect host server application turn tcp keep alive deploy mechanisms handle idle connections consider probe procedure section 
probe procedure deliberately disables interface host probe program host communicating tcp discard server host interface host retransmits data segment preset number times response closes connection 
unfortunately discard server host idea peer aborted connection turn tcp keep alive attempt detect idle connection 
point view connection remains quiet 
experiment orphan discard server process left host orphan server processes stay system reboots system manager destroys explicitly zero window probes tcp receiving host uses window field inform tcp sending host data willing accept 
receiver temporarily runs buffer space sends ack window field set zero 
space available receiver sends ack nonzero window size 
ack window lost transit connection may hang forever 
tcp specifications require host received zero window advertisement transmit zero window probe segments receiving host requesting current buffer space receive nonzero window advertisement specified period time 
sender increase intervals zero window probes exponentially retransmissions 
program inetd implements discard server 
prevent orphan discard server processes affecting experiment destroyed orphan process experiment 
buffer contains data 
zero window probe win ack data win ack data zero window probe win ack receive buffer receive buffer tcp echo win xx ack data data send buffer tcp data win ack data win ack data receive buffer send buffer send buffer receive buffer send buffer send buffer receive buffer send buffer receive buffer generating zero window probes tcp echo service probing procedure simple procedure study probing various tcp implementations 
implementation conduct experiments 

host tested open tcp connection echo port host 

keep sending data echo port reading echoed data 
shows probe program sends data reading echo receive buffer tcp eventually full causing send zero window ack segment tcp tcp send data tcp send buffer tcp full echoed data 
echo server send data receive buffer tcp full 
receive buffer tcp full advertises zero window tcp zero window condition exists threshold time period sides sending zero window probes 
results table show implementations probed exponentially increase time interval probe interval second zero window probe count sunos probe interval second zero window probe count sunos probe interval second zero window probe count hp ux probe interval second zero window probe count irix probe interval second zero window probe count solaris expr 
expr 
time intervals zero window probes shown 
intervals successive zero window probes tcp implementations operating data size min 
probe max 
probe system win probe seg 
interval interval solaris mss octets ms sec 
sunos octet sec 
sec 
sunos octet sec 
sec 
hp ux octet sec 
sec 
irix octet sec 
sec 
table zero window probe tcp implementations probes limit probe interval maximum value seconds 
implementations impose minimum probe interval seconds solaris uses lower bound rto estimates minimum probe interval smaller systems 
shows difference solaris implementation systems curves graph solaris 
curve corresponds results experiments experiment curve corresponds 
plausible explanation difference solaris uses finer granularity timer systems 
probe intervals shown represent exponential increase divergence curves result difference initial rto values 
conclude solaris tcp rto estimates experiments 
approaches handling probing data observe approaches handle zero window probing 
observe sender need distinguish peer insufficient buffer space receive segment segment lost 
situations data segment unable reach application 
receiving tcp generate zero window ack segment receive buffer space generate ack lost data segment unreliable delivery zero segment tcp situations look similar sending tcp 
observation suggests retransmitted data segment zero window probe 
approach uses retransmitted data segment zero window probe 
receiving tcp sufficient buffer space accept incoming data segment sends zero window ack acknowledging data segment 
period rto sender retransmits data segment 
retransmitted data segment acts probe 
retransmitting missing data segments sender keep transmitting zero window probes receiver ack probes 
retransmitted data segment zero ack window zero window probe error 
bad sequence ack seq 
expected zero window probe seconds 
side zero receive window note digits sequence number acknowledgment number shown 
sequence number number data octets acknowledgment number window 
segment number host sunos host solaris comment illustration implementation flaw solaris tcp window probe optimistic sense sends data possible zero window probe expects receiver receive window open rto period 
scheme responds quickly ack reopen window lost 
scheme efficient tcp implementations implement silly window syndrome avoidance algorithm 
receiver opens receive window open size maximum segment mss 
scheme consumes network resources second approach described receiver zero window persists 
second approach treats zero window probing special case 
sender receives advertisement receiver enters zero window probing state delays sending data predetermined interval window opening ack segment arrives interval tcp immediately sends data sending zero window probe 
scheme suffers long delay ack segment reopen window lost transit 
zero window probes approach carry octet data designed elicit ack segment peer transfer data 
experiments conclude solaris uses approach second approach 
silly situation steady pattern small tcp window increments results small data segments sent 
sending small data segments lowers tcp performance tcp ip headers consume network bandwidth 
experiments show seconds probed see table 
implementation flaw data zero window probe experiments shows protocol violations sunos version implementation flaw solaris 
sunos tcp acknowledge zero window probes 
solaris tcp responds incorrectly peer zero window probe sides zero receive window describe flaw 
illustrates host communicates host running solaris hosts zero receive window 
segment sends probe sequence number octets data acknowledges properly segment 
seconds segment sends zero window probe octet data note ack number segment ack number segment acknowledge octets data sent segment 
acknowledges probe segment segment containing invalid sequence number zero window probe acknowledged segment sent segment 
acknowledges error sending ack segment segment sequence number expects 
flaw occurs solaris trace data gathered 
introduces active probing technique demonstrates study tcp implementations 
technique treats tcp implementation black box uses specially designed probe procedures examine behavior 
packet trace taken active probing de duce design parameters design decisions tcp implementations 
results show active probing effective tool 
insight black box behavior depends probe procedure design careful analysis resulting output 
demonstrated probe procedures examine aspects tcp 
additional probe procedures study aspects tcp possible 
example design probe procedure generates heavy network traffic gateway examine tcp behaves congested environment 
active probing deduce design parameters design decisions tcp technique applied protocol conformance checking 
design procedures induce output tcp implementation automated tool analyze output verify conforms protocol specification 
example failure respond zero window probes sunos discussed section easily detected method 
implementation flaws show active probing test tcp implementations operate correctly 
point view software engineering design probe procedures create conditions occur frequently infrequently providing tests cover cases normally passive monitoring 
unusual detect implementation flaws tcp 
example implementation tcp generates excessive retransmissions lan environment may contain implementation flaw 
implementation flaws solaris discussed sections detected observing excessive retransmissions trace output 
interesting combine knowledge trace analysis tool active probing accurately detect abnormal tcp behavior 
tcp implementations probed bsd derived tcp implementations 
possible probe non bsd derived tcps plan tcp tcp determine similarities differences 
biographies dr douglas comer full professor computer science purdue university 
written numerous research papers textbooks heads currently networking research projects 
designed implemented net networks operating system 
director internetworking research group purdue editor chief journal internetworking editor software practice experience member internet architecture board 
john lin phd student department computer sciences purdue university 
received degree information computer science georgia institute technology 
attending purdue member scientific staff bell northern research 
received outstanding teaching assistant award purdue acm year fellowship association 
research interests include operating systems transport protocol design analysis distributed systems high speed networking 
acknowledgment authors grateful win anonymous reviewers comments draft 
trademarks unix registered trademark unix system laboratories incorporated 
sunos solaris trademarks sun microsystems incorporated 
hp applications trademarks hewlett packard 
irix trademark silicon graphics incorporated 
registered trademark association 
braden 
rfc requirements internet hosts communication layers 
request comments october 
network information center 
david clark 
rfc window strategy tcp 
request comments july 
network 
comer stevens 
internetworking tcp ip vol 
ii design implementation internals 
prentice hall englewood cliffs new jersey 
reynolds 
rfc network management tool catalog tools monitoring debugging tcp ip internets interconnected devices 
request comments june 
network information center 
bruce 
knowledge monitoring control approach understanding behavior tcp ip network protocols 
proceedings sigcomm pages aug 
hp metrix network systems 
protocol analyzer load monitor 
jacobson braden borman 
rfc tcp extensions high performance 
request comments may 
network information center 
van jacobson 
congestion avoidance control 
proceedings sigcomm pages aug 
phil karn craig partridge 
time estimates reliable transport protocols 
acm transactions computer systems november 
leffler mckusick karels quarterman 
design implementation bsd unix operating system 
addisonwesley reading massachusetts 
mills 
rfc internet delay experiments 
request comments december 
network information center 
john nagle 
rfc congestion control ip tcp internetworks 
request comments january 
network information center 
pike presotto thompson trickey 
plan bell labs 
proc 
summer conf pages july 
postel 
rfc transmission control protocol 
request comments september 
network information center 
postel 
rfc echo protocol 
request comments may 
network information center 
postel 
rfc discard protocol 
request comments may 
network information center 
presotto pike thompson trickey 
plan distributed system 
proc 
spring conf pages may 
blumer 
rfc problems specification military standard transmission 
request comments november 
network information center 
lixia zhang 
timers don 
proceedings sigcomm pages aug 
