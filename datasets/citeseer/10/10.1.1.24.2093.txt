understanding software evolution combination software visualization software metrics michele lanza st phane ducasse software composition group university berne switzerland lanza iam unibe ch ducasse iam unibe ch 
coping huge amounts data major problems context software evolution 
current approaches reduce complexity filtering irrelevant information 
propose approach combination software visualization software metrics software visualization apt complexity reduction metrics introduce possibility qualify evolution 
discuss simple effective way visualize evolution software systems helps recover evolution object oriented software systems 
addition define vocabulary qualifies specific situations occurs considering system evolution 
sum 
analyser un tr grand volume de donn es est un des probl mes de la de de 
les cette complexit en les informations non 
dans cet article nous une approche bas sur la de de visualisation la visualisation une duction information les une qualification de 
ainsi nous pr une matrice une visualisation simple qui aide des applications orient es objets 
en plus nous un de qualifier les situations es 
keywords evolution software visualization software metrics patterns reverse engineering 
mots cl visualisation de programmes du patterns 
objet 
lmo pages objet 
lmo 
coping huge amounts data major problems software evolution research versions software analyzed parallel 
technique reduce complexity software visualization asa visual display allows human brain study multiple aspects complex problems parallel 
useful approach dealing large amounts data software metrics 
metrics help assess complexity software discover software artifacts unusual measurements 
visual technique called evolution matrix lan combines software visualization software metrics 
allows quick understanding evolution classes software systems 
evolution matrix acts certain specific situations occur system evolution classes grow shrink lifetime system 
define simple vocabulary describe specific behaviors 
intention build vocabulary software evolution 
note results obtained software systems written smalltalk approach depend particular programming language underlying metamodel language independent duc dem 
structured follows section visualization technique categorization classes 
apply discuss approach case studies 
discuss shortly codecrawler moose tools written 
conclude discussing benefits limits approach related 
give outlook area 

combining metrics software visualization section visualization technique called evolution matrix lan 
want stress put special emphasis lightweight techniques fields metrics software visualization 
discuss technique show example matrix 
section introduce categorization classes visualization evolution matrix 

visualization technique software evolution evolution matrix displays evolution classes software system 
column matrix represents version software row represents different versions class 
classes different versions considered name 
columns classes sorted alphabetically case appear time system 
placed vertical position predecessors 
order important allows represent continuous flow development existing classes stresses development new ones 
presents schematic evo evolution matrix lution matrix rows represent new classes added system release 
class class class class class 
version version version version time 
schematic display evolution matrix 
classes alphabetically ordered stay version 
classes appeared version evolution matrix allows statements evolution object oriented system system level 
granularity system level coarse evolution matrix enhanced additional information metrics shown section 

characteristics system level see schematically system level able recover information regarding evolution system size system number classes column number classes particular version software 
height column indicator system size terms classes 
addition removal classes classes added system certain point time easily detected added bottom column version 
objet 
lmo removed classes easily detected absence leave empty spaces matrix version 
growth stabilization phases evolution shape evolution matrix indicator evolution system 
growth phase indicated increase height matrix stabilization phase classes added height matrix stay 
certain number new classes added create leap phase 
characterizing evolution system level evolution matrix provides information classes 
specific situations worth mentioned classes class short lifetime exists version system 
classes may created try idea dropped 
persistent classes persistent class lifespan system 
part original design 
persistent classes examined may represent cases dead code developer remove able explain purpose class 
version system major leap evolution growth phase stabilization phase time versions removed classes persistent 
system level evolution aspects evolution matrix version evolution matrix remarks 
system level view provided evolution matrix precise 
stabilization describes fact classes stayed multiple versions system 
said quality changes occurred 
information crucial understanding system evolution matrix enhanced software metrics see section 
qualifying evolution metrics play evolution matrix shape provides information regarding system evolution granularity coarse 
software metrics improve quality information 
distinguish kinds metrics absolute ones reflecting values entity measure differential ones measuring difference values subsequent versions 

visualizing classes metrics previously seen dimensional boxes represent classes 
enrich representation metrics width height boxes reflect metric measurements classes see 
approach lan dem 
visualization visualize classes metrics number methods nom width number attributes noa height tool choose metrics 
case differential metrics just subtract metric measurements predecessor class measurements class methods version second differential metric value 
chose deliberately focus metrics easily extracted source code intention investigate new kinds metrics 
visualize class different metrics 
decided number methods number variables 
visualize different versions class effectively see class grows shrinks stays version 
figures colors denote changes version version black growing classes light gray shrinking classes white classes stay 

categorization classes evolution matrix categorization classes visualization different versions class 
categorization stems experiences obtained applying approach case studies 
large part vocabulary taken domain astronomy 
objet 
lmo width metric class height metric 
graphical representation classes metrics names domain convey extremely described types evolution 
vocabulary utmost importance complex context situation evolution software communicated person efficient way 
idea comes domain patterns gam 
case studies encountered ways class evolve lifetime 
list prominent types 
note categories introduced mutually exclusive class behave pulsar certain part life white dwarf rest life 
pulsar pulsar class grows shrinks repeatedly lifetime see 
growth phases due additions functionality shrinking phases probably due refactorings class 
note refactoring may class grow example long method broken shorter methods 
pulsar classes seen hot places system new version system changes pulsar class performed 
time 
visualization pulsar class 
note shape may change depending metrics associated representation supernova supernova class suddenly explodes size 
reasons explosive growth may vary common cases major refactorings system caused massive shift functionality class 
data holder classes mainly define attributes values accessed 
due simple structure classes easy class grow rapidly 
evolution matrix called sleeper classes 
class defined long time ago waiting filled functionality 
moment comes developers may certain functionality introduced short time 
supernova classes examined closer accelerated growth rate may sign design introduce new bugs system 
time 
visualization supernova class white dwarf white dwarf class certain size due varying reasons lost functionality defined classes 
see schematic display white dwarf class 
white dwarf classes examined signs dead code may obsolete removed 
possibilities include redistribution responsibilities 
time 
visualization white dwarf class red giant red giant class seen permanent god class rie versions keeps large 
god classes tend implement functionality quite difficult refactor example split class refactoring fow 
idle idle class change versions software system belongs 
list reasons may lead idle class dead code 
class may obsolete certain point time removed varying reasons 
design 
idle classes implementation simple structure resistant changes affecting system 
class belongs subsystem performed 
objet 
lmo 
illustration approach section case studies evolution visualized approach described 
shortly introduce case study show discuss 

ste small medium sized application written visual works smalltalk developer little year part diploma thesis 
taken versions software case study 

evolution matrix discussion 
see evolution matrix 
see version left small number classes survived version persistent classes 
see major leaps long phase stabilization 
note second leap fact case massive class renaming classes removed previous version appear added classes version 
version classes 
classes rarely change size class annotated renamed pulsar class sight central classes system 
presents system difference metrics represented 
reveals sudden increases size certain classes 

difference evolution matrix evolution matrix interesting property view emphasizes changes 
example having flat boxes shows class grows versions 
due graphical screen constraints nearly see picture view allows see attributes added 
displaying boxes view default size nodes soon metrics values zero lose 
choice consequence metric small values number attributes added easily identifiable 
differential view solves problem 
objet 
lmo 
kon written visualworks smalltalk 
taken versions application case study 

evolution matrix discussion 
see evolution matrix 
see apart stabilization phase constant growth system major growth phases 
note growth phase due massive renaming classes 
pulsar classes strike eye considerable size 
see original classes persistent system renewed nearly completely 
presents system differential view emphasizes changes 

implementation codecrawler moose codecrawler tool generate views 
code crawler supports reverse engineering combination metrics soft 
difference evolution matrix evolution matrix ware visualization lan dem duc 
power flexibility simplicity scalability repeatedly proven large scale industrial case studies 
codecrawler implemented top moose 
moose language independent reengineering environment written smalltalk 
famix metamodel dem provides language independent representation object oriented sources contains required information reengineering tasks performed tools 
language independent need legacy systems written different implementation languages 
extensible know advance information needed tools reengineering problems tools need language specific information allow language plug ins extend model language specific features 
allow tool plug ins extend model tool specific information 
simplified view famix metamodel comprises main object oriented concepts class method attribute inheritance plus necessary associ objet 
lmo 
simplified view famix metamodel ations method invocation attribute access see 
uml metamodel specifically targeted objectoriented analysis design representing source code 
say uml sufficient modelling source code purpose reengineering dem 
depth discussion question see tic 
moose allows models loaded time 
load models different versions software get sequence snapshots evolution software 
technique base evolution matrix visualization 

related various approaches understand software evolution proposed literature graphical representations software long accepted comprehension aids 
holt pak hol visualization tool called elucidate architectural changes different versions system 
ray built tool called exploring evolution successive versions jdk 
intent provide tool detecting possible problem areas developers wish port java tools versions jdk 
provide evolution analysis level reuse contracts ste 
riv claudio riva presents similarities visualizes versions software subsystem level colors 
obtained colored displays evolution system 
approach differs actual software artifacts information software releases 
implies verify correctness informations 
approach allows enrich display metrics information able access version software artifacts 
evolution matrix munro analyzing calling structure source code bur 
transformed calling structures graph dominance relations indicate call dependencies functions 
dominance trees derived acyclic graphs bur 
dominance trees show complexity relationships functions potential ripple effects change propagation 
gall jazayeri examined structure large telecommunication switching system size releases gal 
analysis information stored database product releases underlying code available considered 
investigated measuring size components growth change rates 
aim find conspicuous changes gathered size metrics identify candidate subsystems restructuring reengineering 
second effort system focused identifying logical coupling subsystems way potential structural shortcomings identified examined gal 
sah lou aspect research software evolution prediction evolution 
current focus understand evolution long term goal gain better prediction parts system cause problems 

lightweight approach helping understanding system evolution definition graphical matrix displaying classes enriched metrics information 
approach properties reduces complexity provides system wide views help understand essential changes evolution application 
provides finer understanding evolution classes 
builds vocabulary describe system class evolution 
scales 
screen limitation problems huge systems 
working level abstraction required 
approach limitations fragile regarding renaming classes 
right consider class similar subsequent versions name 
assumption plan remove applying simple heuristics identify renamed classes percentage common methods attributes 
apply evolution matrix levels granularity 
particular want able reason terms subsystems packages applications concepts represent conceptually linked classes large applications 
context understand evolution subsystems inside objet 
lmo example class moved 
applying metrics number lines code combination number methods statements class investigated see qualify actual changes new methods added results code refactoring time number lines decrease 
metrics number subclasses hierarchy nesting level classes number inherited methods may help detect hierarchy refactorings 
choice case studies factor analyze 
rates change may quite different longer periods releases 
experiences access versions developers really assess major versions 
plan apply approach versions large systems squeak java swing visualworks smalltalk microsoft foundation classes mfc time spent versions months years 

bur munro initial approach measuring characterizing software evolution proceedings working conference reverse engineering wcre 
dem demeyer ducasse lanza hybrid reverse engineering platform combining metrics program visualization blaha rugaber eds proceedings wcre th working conference reverse engineering ieee oct 
dem demeyer ducasse tichelaar unified universal 
uml shortcomings coping round trip engineering rumpe ed proceedings uml second international conference unified modeling language lncs kaiserslautern germany oct springer verlag 
dem demeyer tichelaar ducasse famix information exchange model report university berne appear 
duc ducasse lanza tichelaar moose extensible language independent environment reengineering object oriented systems proceedings second international symposium constructing software engineering tools coset june 
duc ducasse lanza methodology understanding object oriented systems technique science vol 
num 

fow fowler beck brant opdyke roberts refactoring improving design existing code addison wesley 
gal gall jazayeri kl sch software evolution observations product release history proceedings international conference software maintenance icsm 
evolution matrix gal gall hajek jazayeri detection logical coupling product release history proceedings international conference software maintenance icsm 
gam gamma helm johnson vlissides design patterns addison wesley reading ma 
hol holt pak visualizing software evolution large proceedings wcre 
jazayeri gall riva visualizing software release histories color third dimension icsm proceedings international conference software maintenance ieee computer society 
kon scenario approach refactoring duplicated code object oriented systems diploma thesis university berne june 
lan lanza combining metrics graphs object oriented reverse engineering diploma thesis university bern oct 
lan lanza evolution matrix recovering software evolution software visualization techniques proceedings international workshop principles software evolution page published 
lou melo vers un mod le de pr diction de la du pour les syst mes objets objet num ro sp cial objets vol 
num 

ray kerr kontogiannis change adaptive maintenance detection java software systems proceedings wcre ieee computer society isbn 
rie object oriented design heuristics addison wesley 
riv riva visualizing software release histories color third dimension master thesis politecnico di milano milan 
sah eth predicting class libraries interface evolution investigation machine learning approaches proceedings th asia pacific software engineering conference 
ste steyaert lucas mens hondt reuse contracts managing evolution reusable assets proceedings oopsla conference acm press 
ste steiger recovering evolution object oriented software systems flexible query engine diploma thesis university bern june 
tic tichelaar modeling object oriented software reverse engineering refactoring phd thesis university bern 
