harvest yield scalable tolerant systems armando fox stanford university fox cs stanford edu cost reconciling consistency state management high availability highly magnified unprecedented scale robustness requirements today internet applications 
propose strategies improving availability simple mechanisms scale large applications output behavior tolerates graceful degradation 
characterize degradation terms harvest yield map directly engineering mechanisms enhance availability improving fault isolation cases simplify programming 
collecting examples related techniques literature illustrating surprising range applications benefit approaches hope motivate broader research program area 

motivation hypothesis relevance increasingly infrastructure services comprise routing application level resources search engines adaptation proxies web caches 
applications confront operational expectations exponentially growing user loads routing infrastructure consequently absorbing comparable amounts hardware software 
current trend harnessing commodity pc clusters scalability availability reflected largest web server installations 
sites tens hundreds pc deliver read page views day primarily simple replication relatively small data sets increase throughput 
scale applications bringing wellknown tradeoff consistency availability sharp relief 
propose general directions building large scale robust systems 
approaches tolerate partial failures emphasizing simple composition mechanisms promote fault containment translating possible partial failure modes engineering mechanisms provide smoothly eric brewer university california berkeley brewer cs berkeley edu degrading functionality lack availability service 
approaches developed context cluster computing accepted major challenges nontrivial software engineering required automate partial failure handling order keep system management tractable 

related cap principle discussion strong consistency means acid consistency assumption system provides ability perform updates discussing consistency irrelevant 
high availability assumed provided redundancy data replication data considered highly available consumer data reach replica 
partition resilience means system survive partition data replicas 
strong cap principle 
strong consistency high availability partition resilience pick 
cap formulation explicit trade offs designing distributed infrastructure applications 
easy identify examples pairing cap outlining proof exhaustive example strong cap principle ca databases provide distributed transactional semantics absence network partition separating server peers 
cp event partition trans actions acid database may blocked partition heals avoid risk introducing merge conflicts inconsistency 
ap web caching provides clientserver partition resilience replicating documents client server partition prevents verification freshness expired replica 
general distributed database problem solved expiration caching get ap replicas majority voting get pc minority unavailable 
practice applications best described terms reduced consistency availability 
example weakly consistent distributed databases bayou provide specific models defined consistency availability tradeoffs disconnected filesystems coda explicitly argued availability strong consistency expiration consistency mechanisms leases provide fault tolerant consistency management 
examples suggest weak cap principle characterize precisely stronger guarantees strong consistency high availability resilience partitions weaker guarantees third 

harvest yield cap principle strategies propose improving availability simple mechanisms rely ability broaden notion correct behavior target application exploit tradeoffs cap principle improve availability large scale 
assume clients queries servers case metrics correct behavior yield probability completing request harvest measures fraction data reflected response completeness answer query 
yield common metric typically measured nines nines availability means tion probability practice ha systems aim nines 
presence faults typically tradeoff providing answer reducing yield providing imperfect answer maintaining yield reducing harvest 
applications tolerate harvest degradation deviation single defined correct behavior renders result useless 
example sensor application provide binary sensor reading presence absence tolerate degradation output 
hand applications tolerate graceful degradation harvest online aggregation allows user explicitly trade running time precision confidence performing arithmetic aggregation queries large dataset smoothly trading harvest response time particularly useful approximate answers avoiding looks worthwhile preliminary results 
glance appear kind degradation applies queries updates 
model applied case single location updates changes localized single node technically single partition 
case updates consistent term yield semiconductor manufacturing typically die wafer intolerant harvest degradation yield defined fraction working dice wafer 
affect reachable nodes occur correctly limited visibility form reduced harvest require unreachable nodes fail reducing yield 
localized changes consistent exactly new values available 
model updates fails global changes quite useful practical applications including personalization databases collaborative filtering 

strategy trading harvest yield probabilistic availability nearly systems probabilistic realize 
particular system available single faults probabilistically available non zero probability multiple failures internet servers dependent best effort internet true availability 
availability maps naturally probabilistic approaches worth addressing probabilistic systems directly understand limit impact faults 
requires basic decisions needs available expected nature faults 
example node faults inktomi search engine remove proportional fraction search database 
node cluster single node fault reduces harvest duration fault harvest usually measured longer interval 
implicit approach graceful degradation multiple node faults specifically linear degradation harvest 
randomly placing data nodes ensure lost random average case worstcase fault behavior 
addition replicating high priority subset data reduce probability losing data 
gives precise control harvest increasing reducing practical impact missing data 
course possible replicate data doing may relatively little impact harvest yield despite significant cost case ensure harvest yield best effort internet protocols service relies 
similar example transformation proxies thin clients trade harvest yield degrading results demand match capabilities clients unable get results 
harvest answer useful client may preferable trade response time harvest server bandwidth limited example intelligent degradation low bandwidth formats 

strategy application decomposition orthogonal mechanisms large applications decomposed subsystems independently intolerant harvest degradation fail reducing yield independent failure allows application continue functioning reduced utility 
application tolerant harvest degradation 
decomposition actual benefit potential benefit 
actual benefit ability provision subsystem state management separately providing strong consistency persistent state subsystems need entire application 
savings significant small subsystems require extra complexity 
example typical commerce site read subsystem user profile driven content generation static corpus transactional subsystem billing subsystem manages state persistent course session shopping cart subsystem manages truly persistent read state user personalization profile 
subsystems possibly billing fail rendering service useless 
user profile store fails users may browse merchandise benefit personalized presentation shopping cart mechanism fails time purchases possible 
traditionally boundary subsystems differing state management requirements data semantics characterized narrow interface layers propose cases possible better identify orthogonal mechanisms 
layered mechanism sits layer orthogonal mechanism independent mechanisms essentially runtime interface mechanisms possibly configuration interface 
brooks reveals complexity software project grows square number engineers leveson cites evidence failures complex systems result unexpected inter component interaction intra component bugs conclude machinery quadratically better 
ability exploit orthogonal mechanisms constitutes second potential advantage decomposition 

programming orthogonal mechanisms somewhat surprise orthogonal mechanisms limiting practice description suggests 
example cluster scalable network server sns deployed example orthogonal mechanisms approach 
sns software layer provides high availability incremental scaling cluster pc provides persistent state management facilities data consistency guarantees 
fact programming requirement sns hosted applications structured composable subsystems described application module restartable essentially arbitrary times 
constraint nontrivial allows sns simple orthogonal mechanisms timeouts retries sandboxing automatically handle variety transient faults load imbalances cluster keep application modules available doing reasonable job automatic load balancing 
despite constraint lack state maintenance sns deploy group state application adaptation proxy desktop application allows palmpilot participate multi user shared whiteboard session 
srm scalable reliable multicast underlying communication protocol 
srm applications hard copies group session state soft copy maintained peer session multicast repair mechanism provides basis collaborative state maintenance 
crash recovery refreshing soft state repair mechanism 
behavior compatible sns constraint restartable workers state maintenance orthogonal sns interfaces behaviors added modified sns support srm applications 
similar techniques prototype real time streaming media server soft state protocol modules running sns 

related uses orthogonal mechanisms composition orthogonal subsystems shifts burden checking possibly harmful interactions runtime compile time deployment orthogonal guard mechanisms improves robustness runtime interactions occur providing improved fault containment 
practical implication effects application writers need concern directly provision incremental scaling replication load management high availability simple mechanisms sns perform functions applications 
orthogonality new 
various forms sandboxing including stack overrun guarding monitoring software fault isolation constitute examples orthogonal safety 
orthogonal privacy data integrity exemplified secure socket layer ssl protocol initial band handshake establishes secure channel substrate stream connection 
orthogonal approaches particularly useful adding operational fea tures security robustness legacy applications designed features mind requiring special changes core application code 
safety critical systems community orthogonal mechanisms time mechanical interlocks removed radiation therapy machine unmasked software race condition ultimately led patient 
similar examples constitute abundant anecdotal support design principle simple failsafe mechanisms small state spaces contribution identification collection techniques potential synergy pairing compile time orthogonal composition strategies improving robustness 

discussion research agenda implemented examples mapping harvest degradation specific mechanisms provide engineering tractability availability redundancy desired operational feature 
case inktomi search engine node timeout constraints keep system yield constant expense probabilistic harvest degradation 
general maps faults degradation harvest yield providing probabilistically answers essentially time yield 
case sns cluster application server constraint application modules restartable allows simple scaling reliability mechanisms including orthogonal mechanisms timeouts retries constraint addressed composing applications orthogonal state maintenance mechanisms srm 
specific mechanisms able exploit simplify engineering improve robustness scalability include simple mechanisms small state spaces easy reason timeout partial failure handling guard timers orthogonal security inspired orthogonal mechanisms systems 
orthogonalization mechanisms re spect application logic separating application functionality provision high availability 
composition sns srm provide illustration approach 
replacement hard state soft state beneficial side effect making recovery code code 
load balancing manager sns works way soft state mechanisms inspired ip multicast routing srm state repair 
tractability large scale engineering involving hardware replication redundancy 
expensive specialized systems teradata node data mining cluster really compare size aggregate capacity cluster internet services 
remains formally characterize applications tolerate graceful harvest degradation including special case applications composed degradation intolerant possibly orthogonal subsystems 
expect formal characterization induce programming model provides class abstractions manipulating degraded results 
formally characterizable framework deploying applications amount constructive proof weak cap principle 
traditionally application system designed incremental scalability high availability mind differed counterparts designed respect constraints 
despite simplicity engineering techniques design construction example applications afforded surprising flexibility range applications built 
simple techniques chosen order simplify formidable programming task techniques fault isolation favored order preserve fault isolation advantages inherent clusters 
particular sns server showed possible separate scalability availability concerns design applications application structure reconciled design constraints imposed simple orthogonal mechanisms 
motivate broader research effort extends observations resulting set design guidelines construction large scale robust applications spanning range acid base 
offer initial observations step direction 
anonymous reviewers comments draft colleagues stanford berkeley sounding boards early ideas 
brooks 
mythical man month essays software engineering 
addison wesley revised 
chawathe brewer 
system support scalable fault tolerant internet service 
ifip international conference distributed systems platforms open distributed processing middleware lake district uk sep 
cowan pu maier walpole beattie wagle zhang 
stackguard automatic adaptive detection prevention buffer overflow attacks 
seventh usenix security symposium security san antonio tx january 
davidson garcia molina skeen 
consistency partitioned networks 
acm computing surveys 
demers petersen spreitzer terry theimer welch 
bayou architecture support data sharing mobile users 
proceedings workshop mobile computing systems applications december 
floyd jacobson liu mccanne 
reliable multicast framework light weight sessions application level framing 
acm sigcomm pages boston ma aug 
fox brewer 
reducing www latency bandwidth requirements real time distillation 
fifth international world wide web conference www paris france may 
world wide web consortium 
fox gribble chawathe brewer 
adapting network client variation active proxies lessons perspectives 
ieee personal communications invited submission aug 
special issue adapting network client variability 
fox gribble chawathe brewer gauthier 
cluster scalable network services 
proceedings th acm symposium operating systems principles st malo france october 
freier kocher 
ssl version march 
internet draft available home 
netscape com eng ssl ssl toc html 
goldberg wagner thomas brewer 
secure environment untrusted helper applications confining hacker 
usenix security symposium 
gray cheriton 
leases efficient fault tolerant mechanism distributed file cache consistency 
technical report csl tr stanford university dept computer science january 
gray 
transaction concept virtues limitations 
proceedings vldb cannes france september 
hellerstein haas wang 
online aggregation 
acm sigmod international conference management data tucson az may 
inktomi 
inktomi technology hotbot may 
www inktomi com html 
kistler satyanarayanan 
disconnected operation coda file system 
acm transactions computer systems february 
leveson 
system safety computers 
addison wesley 
leveson turner 
investigation accidents 
ieee computer july 
mccanne brewer katz rowe amir chawathe mayer patel raman simpson swan 
tung wu smith 
common infrastructure multimedia networking middleware 
th intl 
workshop network operating systems support digital audio video nossdav st louis mo may 
invited 
national laboratory applied network research 
squid internet object cache 
squid nlanr net 
ncr teradata scalable rdbms 
www 
ncr com teradata 
pfister 
search clusters revised ed 
addison wesley 
raman chawathe mccanne katz 
soft state protocol accessing multimedia archives 
nossdav 
wahbe lucco anderson graham 
efficient software fault isolation 
proceedings th acm symposium operating systems principles 
