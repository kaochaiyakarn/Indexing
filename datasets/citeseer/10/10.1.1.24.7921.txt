extracting proof coherence monoidal categories proof normalization monoids ilya peter dybjer department computing science chalmers university technology goteborg sweden 
studies problem coherence category theory type theoretic viewpoint 
show curry howard interpretation formal proof normalization monoids directly yields coherence proof monoidal categories 
formalize coherence proof intensional intuitionistic type theory show relies explicit reasoning proof objects intensional equality 
formalization checked proof assistant alf 
mac lane pp proved coherence theorem monoidal categories 
basic ingredient proof normalization object expressions 
ingredient needed 
show proof coherence theorem hidden curry howard interpretation proof normalization monoids 
second point contribute development constructive category theory sense huet implemented part elementary category theory proof assistant coq :10.1.1.39.4193:10.1.1.39.4193
extend scope constructive category theory area coherence theorems cf 

formalized proof martin lof type theory implemented proof assistant alf 
interesting aspect formalization problem reasoning explicit proofs equality object language arrows free monoidal category reduces reasoning explicit proofs equality metalanguage proof objects intensional equality 
organized way 
section prove normalization theorem monoids 
section introduce notion monoidal category prove coherence 
section show proof formalized intuitionistic type theory 
section contains remarks implementation alf 
section related 
alf implementation web 
discussion comparison implementation proof hol dybjer 
normalization monoids set binary words variables set set omega write congruent respect associativity omega omega omega omega unit laws omega omega 
free monoid generated subset normal binary words set omega shall analyze proof obvious normalization theorem see theorem 
function algorithm nf iff nf nf 
simple way construct function function composition identity function forms monoid 
nf defined omega omega theorem follows lemmas lemma 
nf nf 
proof 
induction proof lemma 
nf 
proof 
omega nf auxiliary lemma lemma 
omega 
proof 
induction section shall see kind curry howard interpretation proof yields proof coherence monoidal categories 
coherence monoidal categories monoidal categories definition 
monoidal category consists category bifunctor omega theta object natural isomorphisms ff omega omega gamma 
omega omega omega gamma 
ae omega gamma 
diagrams called coherence conditions commute omega omega omega ff omega omega omega ff omega omega omega omega omega omega id omega ff ff omega omega omega ff omega id omega omega ff omega omega omega oe ae omega id id omega mac lane pp definition contained third coherence condition ae proved redundant kelly 
proof coherence condition 
definition 
category elements binary words objects 
hom sets equivalence classes arrow expressions 
arrow expressions inductively generated follows ffi gamma 
gamma 
gamma 
id gamma 
object omega omega gamma 
omega gamma 
gamma 
ff omega omega gamma 
omega omega objects ff gamma omega omega gamma 
omega omega objects omega gamma 
object gamma gamma 
omega object ae omega gamma 
object ae gamma gamma 
omega object equivalence arrow expression congruence relation inductively generated associativity identity laws making category composition ffi identity id interchange laws making omega bifunctor laws making ff ae natural isomorphisms inverses ff gamma gamma ae gamma respectively coherence conditions 
see alf implementation section 
arrow expressions denote arrows proposition 
free monoidal category generated 
ii groupoid arrows isomorphisms 
iii arrow gamma 
iff proof 
free monoidal category construction 
ii follows directly induction arrows 
iii induction direction proof coherence theorem theorem 
gamma 
arrows prove theorem note implies coherence theorem formulated mac lane 
defines category objects 
unique arrow binary words iff words length 
preorder arrow invertible 
mac lane coherence theorem theorem states free monoidal category 
theorem entails isomorphic mac lane theorem corollary 
proof theorem 
set considered discrete category 
coherence theorem follows immediately categorical counterparts lemmas nf extended functor nf 
lemma natural isomorphism nf lemma 
gamma 
gamma ffi id ffi naturality nat nf id nf lemma 
functions nf extended functors nf 

proof 
follows immediately lemma 
lemma 
natural isomorphism nf 
proof 
gamma omega auxiliary natural isomorphism constructed lemma typographical reasons write components nat follows naturality nat omega id omega gamma omega oe gamma nat nf id oe nf lemma 
natural isomorphism omega 
proof 
defined recursion omega omega omega ff omega omega omega id omega omega omega ae omega id omega dual definition gamma prove natural induction arrow expressions 
naturality trivial discrete category 
justify case induction commuting diagram 
indicate explicitly induction hypothesis ind coherence equation coh functoriality fun omega naturality nat 
explicit indication simply unfolded definition basic category law 
case ffi omega id omega ffi omega fun omega id omega id omega ind ind id id id case id omega id omega id omega fun id case omega omega omega id omega omega omega omega nat omega omega id omega omega ff omega omega oe ff ind omega omega id id omega omega omega id ind omega id oe omega case ff omega omega omega id omega ff omega omega omega ff coh ff omega omega omega ff omega omega omega oe ff omega id omega omega omega nat omega omega omega id ff omega omega omega id omega id omega id omega omega omega id omega omega omega id omega omega cases ae omega omega id omega omega coh omega omega ae omega id ff omega id omega omega id omega ae omega coh omega omega ae ff nat omega omega id omega id oe ae diagram top triangle derived coherence equation mac lane 
formalizing proof intuitionistic type theory formalized coherence proof martin lof intuitionistic type theory proof assistant alf developed goteborg coquand magnusson nordstrom 
formalize free monoid type theory introduce explicit proofs elements monoid equal 
proofs correspond arrow expressions free monoidal category get full definition just need add definition equivalence arrow expressions 
appear proof objects nf omega 
show coherence essentially remains show naturality 
explain essential features formalization recapitulate proof type theoretic notation 
fact description rational reconstruction actual implementation 
reviewing treatment equality intensional type theory 
show formalize monoids monoidal categories 
show refine informal proof formal proof type theory 

section standard mathematical terms category functor refer formalization type theory stated 
equality intensional type theory need consider kinds equality intensional type theory 
firstly definitional equality expressed equality judgement expressions definitionally equal iff normal form 
definitionally equal objects substituted arbitrary judgement depending secondly basic intensional equality expressed equality proposition 
relation inductively generated reflexivity axiom simplify notation omitting arguments 
example proper form 
rule substitutivity intensional equality elim note depends proof equality 
definitional equation elim elim intensional equality prove necessary introduce special equivalence relation play role equality certain set book equality automath terminology extensional equality functions set example 
shall follow hofmann call pairs sets equivalence relations setoids 
necessary setoids form new set quotient set respect equivalence relation 
intuitionistic type theory term set reserved inductively generated constructors way datatype functional programming language 
furthermore setoids ha hb interested pairs functions proofs function preserves equivalence 
call pairs setoid maps just maps 
monoids monoid type theory defined setoid hm element binary map ffi laws expressing unit ffi associative satisfied call monoid strict intensional equality terminology intended suggest distinction strict non strict monoids type theory reminiscent distinction strict non strict categorical notions strict relaxed monoidal categories category theory strict monoidal category monoidal laws hold equality isomorphism 
normalization proof monoids difficulty principle formalizing normalization proof monoids 
see 
minor point define set lists elements introduce explicit injection 
true subsets type theory 
normalization function defined follows nf monoidal categories follow aczel huet dybjer formalize notion category intuitionistic type equality objects part structure :10.1.1.39.4193:10.1.1.39.4193
category consists set objects setoids arrows indexed pairs objects 
family identity arrows indexed objects function object assigns arrow family composition maps indexed objects 
object part functor function object sets arrow part map hom setoids appropriate way 
natural transformation defined family arrows proof commutativity naturality diagram 
natural transformations equal iff arrow components extensionally equal 
prove functors natural transformations equality form category 
gone notions definition monoidal category refers 
clear define notion inside type theory 
show implementation coherence proposition alf 
show formalization monoidal categories adequate respect standard set theoretic definition sense 
essential idea naive interpretation classical set theory type theory 
need interpret hom setoids hom sets equivalence classes set theoretic setoids similarly interpretation maps 
coherence proof subsets type theory subcategories 
analogously monoid case construct independently define injection functor objects elements arrows proofs intensional equality define arrows equality elimination elim id jm jm jn definition obj set var obj obj obj obj object part hom obj set obj hom hom hom hom hom hom hom obj hom obj hom obj hom obj hom obj hom obj hom arrow part hom set syme equivalence relation arrows ao lo ro oe ffi laws omega laws natl naturality conditions isomorphism obj obj coherence conditions statement coherence theorem coherence obj hom fig 

excerpts alf code implies identity arrow 
equality id jn ill typed type 
define arrow part functor 
simply put id id informal account definitional equality 
point id fixed write general statement 
proof objects witness propositional equality verify family arrows natural phenomenon forces slight modification formalization proof naturality base cases go exactly informal account induction steps need modified 
consider left diagram case composition informal proof omega id omega ffi omega omega id omega id omega ind ind id id id jn omega id omega ffi jn omega jn omega id jn omega id jn omega ind ind ffi ffi informal version type theoretic version note difference lower triangles 
previously commutativity followed directly identity law 
type theoretic formalization appeal functoriality 
consider case multiplication omega omega id omega omega omega omega nat omega omega id omega omega ff omega omega oe ff ind omega omega id id omega omega omega id ind omega id oe omega informal version jn omega omega id omega omega jn omega omega nat jn omega omega id omega omega ff jn omega omega oe ff ind omega omega id omega omega omega id omega omega oe omega type theoretic version difference lower 
prove commutes analyze type theoretic version omega omega omega fun omega omega id id omega ind nat omega omega right nat commutes naturality may type theoretic proof significantly complex quite true 
formal proof need perform reasoning substitutivity equality explicitly represented diagram informal proof 
experience alf implementation basic message proof coherence monoidal categories implicit proof normalization monoids 
additional just involves checking naturality fairly mechanical human ingenuity required 
reader misled size diagrams analyze case great detail 
learn mechanizing proof alf 
firstly understand reason explicit proofs equality diagram chasing speak think questions meta coherence 
practical problems task mechanizing proof quite tedious 
example essential part proof consists chasing non trivial diagrams 
doing equality inference explicitly machine including informally trivial steps transitivity congruence associativity composition hidden diagrammatic notation 
alf stores proof terms full monomorphic form subexpressions deduced 
instance full form oe rule congruence respect composition obj hom hom parameters matter controlled user usually hidden cf 
compact definition 
application superfluous parts terms tended dominate internal representation term times bigger polymorphic term displayed screen 
related discussions martin hyland john power revealed extracted proof essentially logical version proof coherence bicategories special case monoidal categories gordon power street 
proof relies street yoneda lemma 
case proof similar structure discovered curry howard interpretation explicit connection formal proof normalization proof coherence 
seen application certain approach normalization logical calculi called reduction free normalization 
idea construct appropriate model calculus function inverts interpretation function 
appropriate model category inversion application unit 
proof coherence style lafont cccs 
mention proof coherence monoidal categories huet 
contrast approach reduction uses method knuth bendix completion rewriting theory 

author supported swedish institute 
second author supported part esprit projects types ii tfr swedish technical research council isaac newton institute mathematical sciences 

aczel 
galois theory development project 
report progress turin meeting representation logical frameworks 

dybjer 
comparison hol alf formalizations categorical coherence 
theorem proving higher order logic hol 
springer lncs 
appear 
available www cs chalmers se ilya fmc ps gz 

altenkirch nordstrom von 
user guide alf 
draft january 

altenkirch hofmann streicher 
categorical reconstruction reduction free normalization proof 
pitt rydeheard johnstone editors springer lncs category theory computer science th international conference ctcs cambridge uk august 

berger schwichtenberg 
inverse evaluation functional typed calculus 
proceedings th annual ieee symposium logic computer science amsterdam pages july 

coquand 
semantics rules machine assisted analysis 
borger gurevich meinke editors proceedings csl lncs 

coquand dybjer 
intuitionistic model constructions normalization proofs 
preliminary proceedings types workshop nijmegen 

dybjer 
inductive sets families martin lof type theory settheoretic semantics 
logical frameworks pages 
cambridge university press 

dybjer 
internal type theory 
types types proofs programs lecture notes computer science 
springer 

dybjer 
implementing category sets alf 
manuscript 

formal proof coherence theorem 
home page 
www cs chalmers se ilya fmc 

gordon power street 
coherence 
memoirs american mathematical society 
appear 


normalizing associative law experiment martin lof type theory 
formal aspects computing pages 

hofmann 
elimination extensionality quotient types type theory 
types proofs programs international workshop types lncs 

huet 
initiation la th eorie des cat egories 
notes de cours du dea structures de calcul programmation donn universit paris vii en 

huet 
constructive category theory 
proceedings joint types workshop categories type theory goteborg january 

lafont 
logique categories machines 
implantation de langages de programmation guid ee par la logique cat 
phd thesis universite paris vii january 

mac lane 
categories working mathematician 
springer verlag 
article processed macro package llncs style 
