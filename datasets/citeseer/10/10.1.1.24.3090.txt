appear proc 
th international joint conference ai ijcai montreal august proposes logic programs specification robot control 
provide formal specification agent depending senses previous sensory inputs actions 
show axiomatise reactive agents events interface continuous discrete time persistence integration differentiation time terms limit sums differences 
specification need evaluated prolog program fact evaluated time get efficient agent 
give detailed example nonholonomic maze travelling robot language model agent environment 
main motivations clean interface logic programs model uncertainty embedded probabilistic horn abduction 
step building decisiontheoretic planning system output planner plan suitable controlling robot 
shakey strips fikes nilsson logic robotics history 
interest logic high level robotics lesp rance wang assumption low level reactive control inherently 
challenges assumption 
investigates idea logic programs representation control autonomous robots 
seen logic programming sense logic control kowalski logic program specify time execution mechanism exploits derived notion state order practical 
main highlights approach 
agent seen transduction function inputs sensor values outputs action attempts scholar canadian institute advanced research logic programming robot control david poole department computer science university british columbia main mall vancouver canada email poole cs ubc ca www cs ubc ca spider poole actuator settings 
causal sense output depend current inputs previous inputs outputs 
function represented logic program specifying output time implied current previous inputs 
causality ensures acyclic rules 

logic programs axiomatised phase space dean wellman product space time predicates refer times part axiomatisation similar manner event calculus kowalski sergot 
allows axiomatise persistence accumulation integration time differentiation respect time 

notion state derived concept state needs remembered past order agent operate 
axiomatisation terms current action depends current inputs past inputs values state derived output function current inputs past history function current inputs state 

specification looks prolog program evaluated prolog program 
exploit fact agent exists time inputs received sequence previous inputs received subsequent inputs received agent decision 
treating logic program may need arbitrary computation reasoning past actively maintain state 
reasoning time depends current inputs remembered state 
perspective useful number reasons 
provides representation agent behaviour language defined semantics see apt bezem 

lets model robot environment language 
robot axioms evaluated modes 
situated mode agent gets sensor values directly environment acts environment 
simulation mode model environment run models simulation integrated system 
appear proc 
th international joint conference ai ijcai montreal august 
clean way integrate models uncertainty noisy sensors sloppy unreliable actuators 
logic programs form probabilistic horn abduction system poole 
aims produce representation robot behaviour suitable controlling real robot output decision theoretic planning system 

logic programs form executable specification agent 
evaluated reasonably quickly current logic programming technology may possible compile specifications circuits robots manner similar 

shows traditions ai logic ai robot programming seemingly odds unified 
successful remains seen 
particular proposal initial feasibility study remains done competitor programming robots 

inspired constraint nets zhang mackworth shows model hybrid systems 
axioms true limit continuous time 
derive discrete events continuous time 
representation problem trying solve represent simulate build agent senses acts world 
agent receives sequence trace inputs percepts sensor values outputs sequence trace outputs actions actuator settings 
assume time structure totally ordered metric intervals 
continuous discrete 
trace function domain transduction function input traces output traces causal sense output time depend inputs times agent specification transduction 
transductions form general abstraction dynamic systems zhang zhang mackworth rosenschein kaelbling 
problem consider logic programs specify transductions 
language acyclic logic programs apt bezem limited repertoire predicates explicitly refer time 
assume acyclicity corresponds temporal ordering time time predicates referring time lower acyclic indexing referring time 
negation failure mean completion program forms sound complete semantics acyclic programs apt bezem 
axioms assume limited form arithmetic constraints 
fluent mccarthy hayes function depends time 
fluent associated set called range fluent 
propositional fluent fluent true false range syntactically fluent term language 
definition agent specification module tuple set fluents called inputs 
inputs specify sensor values available various times 
range input trace cross product ranges fluents inputs 
atom true input fluent value time set fluents called outputs 
output fluent specifies actuator settings various times 
seen actions agent particular action attempts 
true agent sets actuator value time action time set fluents called fluents 
fluents previous value recalled 
fluents model persistence integration differentiation 
set fluents called local fluents 
fluents inputs outputs 
pred true local fluent value time acyclic logic program 
specifies outputs implied inputs previous values fluents local fluents arithmetic constraints non temporal relations intermediaries 
interface agent specification module pair rule logic program current time predicates refer 
restricted facilities referring past values fluents previous times 
particular agent recall hasn remembered 
facility specifying needs remembered predicates recalling value provide predicates fluents user defined predicate specifies fluent value time fluents specified way referred 
predicate specifies re callable fluent assigned value time latest time value time value immediately time 
axiomatised manner similar event calculus kowalski sergot see section true fluent assigned value interval appear proc 
th international joint conference ai ijcai montreal august predicate defined section consider problem representing dense time 
predicate specifies fluent value time axiomatised follows user programs restrictions apply appear body user clause 
appears body rules 
appear head user clauses 
head user clause 
defined clauses 
appear times referred clauses time current time clause exception third parameter predicate refer times current time clause arithmetic comparisons times 
pure reaction model pure reaction memoryless systems built combinational networks agre chapman output function immediately available inputs 
logic program fluents referring time represent arbitrary combinatorial circuits 
persistence allows fluents persist 
value fluent set value persists new value set 
time value set look property allows build efficient implementations means means setting value fluent fl time violates acyclicity assumption 
fluent time proof predicate fluent time 
persistent values true left closed right open intervals 
fluent set value time set different value time settings value occurred fluent value opposite convention event interval calculus shanahan 
want convention robots internal state affect robot realises time doing different change doing immediately wait 
notion persistence close event calculus kowalski sergot shanahan see section 
allow model transport delays see section essential modelling analogue systems 
general facility means maintain history values just state values 
integration differentiation reasons phase space making time explicit integrate time 
try integrate riemann integrable 
want produce value accumulative predicate lim fixed compute sum recursively 
integral limit approaches zero 
write sum approaches integral schema rule integrable fluent similarly axiomatise derivative fluent respect time schema differentiable fluent solving may involve constraint solving 
define true limit discuss issues relevant acyclicity restriction 
suppose derivative integrable fluent function value force spring function position object 
define clause derivative need determine value time body rule prove violates acyclicity constraint 
solutions problem forward euler backward euler 
defined assume relation means derivative time value 
forward euler uses previous value value integration clause 
correct limit 
solution turns problems stability 
backward euler works better practice uses value derivative rules schemata choose fluent integrable derivable 
fluent differences values compute derivatives derivatives compute differences values 
violates acyclicity restriction leads infinite regress 
appear proc 
th international joint conference ai ijcai montreal august solving may involve constraint solving 
truth limit axioms incomplete specify structure time 
time discrete interpretation problems axioms 
particular predicate true time predicate refers previous time point time point value set finite duration time interval 
time continuous semantic difficulties interpreting sentences particular integration differentiation formulae allow setting values time point 
interpret integration differentiation axioms limit limit integration axioms cyclic gies differentiation axioms provide constraints value order able interpret sentences consider limit finite finer finer way integration defined 
axioms talk true discretisation 
values refers defined 
meaning continuous case true limit 
define limit consider uniform discretisation time interval 
consider discretisation consists time points integer definition axioms entails fluent value time written discretisation denotes truth clark completion unique stable model equivalent semantics acyclic logic programs apt bezem axioms axioms defining arithmetic 
definition axioms entails fluent value limit time written exists subtlety noted 
ask true case definitions values particular time times increments exist integer 
official time constrains past values referred 
note consider theory infinite partition 
discrete mean sequences different values get closer closer cauchy sequences see zhang mackworth 
informally means finitely time points time points 
compass robot goal direction environment compass steer coupled robot environment example detail steer demonstrate representation example modelling robot environment 
axiomatisations highlight different features robot model highlight reactive systems remembered events environment model highlight integration time 
example maze travelling robot continuously trying go east orientation may avoid obstacles 
robot sense obstacles direction travel control direction steering 
robot model assume robot sense direction travelling sensor front robot sensor right detect obstacles 
control agent change steering angle assume agent instantaneously change steering left right straight steering takes time achieve desired effect 
example adapted zhang 
robot specification axiomatise steering depending current previous sensor values 
predicates defining inputs different times heading direction time directions degrees east standard directions graph 
means robot sensing means front sensor de obstacle time time output means right sensor means robot steer wards time left right straight appear proc 
th international joint conference ai ijcai montreal august clauses axiomatise bang bang controller specifies direction steer compass reading current desired direction robot 
true robot wants clauses go direction time arbitrarily chosen threshold 
goal direction depends current previous sensor values 
robot changes goal direction travelling previous desired direction finds way blocked case wants travel left travelling alternatively robot changes desired direction right travelling previous desired direction blocked right going ultimate desired direction 
note desired direction case wants turn right follow right wall enable robot get maze traps maze 
order allow noise sampling error robot needs desired direction margin error current direction 
predicate true directions error 
model derive time sensor values received 
means robot designer modeller need consider sensors middle turn 
chosen show events derived continuous change 
logic program run situated robot gets sensor values environment acts environment see section 
order show generality model show integration time language model environment 
environment model agent model simulate system 
environment model assume environment agent robot 
inputs output robot outputs sensed robot 
models joined form feedback control system 
main constraint conjoined logic programs acyclic apt bezem indexing due acyclicity constrained temporal 
front sensor depends position robot direction robot wall close robot front robot 
means robot position time true robot detect wall direction position depend time position direction robot 
similarly axiomatise axiomatise maze position robot integral velocities time derivatives axiomatised follows robot steering left degrees time unit 
robot steering straight 
robot steering right 
position robot integral velocities axioms define derivatives derivatives position respect time 
assuming speed cos sin degrees appear proc 
th international joint conference ai ijcai montreal august walls robot time unit sampling simulation robot maze 
opposed say radians 
computation run axiomatisation prolog program code hopelessly inefficient 
problem consider previous times check event occurred previous times inputs arrived 
check event occurred check previous times check previous event occurred 
imagine computation hopelessly slow 
order efficient take advantage fact evaluating time time previous observations arrived subsequent observations arrived 
exploit fact past terms axioms defining explicitly actively maintain state remembering latest values predicate implemented looking values 
words values remembered forming state agent 
logic program evaluated proving output current inputs current state 
shows simulation robot maze 
simulated time time unit intervals 
long coarse give similar results 
simulation robot environment ran faster steps second running sicstus prolog 
partial evaluation able speed possible compile logic program specification hardware 
logical specification robot action impractical efficiency point view 
discussion comparison intended just define robot programming language 
take general view agent causal function input history outputs zhang mackworth rosenschein kaelbling 
suppose want logic formal specification actions robot example order prove theorems robot behaviour 
treat values inputs various times values outputs various times propositions constraint imposed robot function case inputs certain values output appropriate function inputs exactly definition definite clause inputs imply outputs 
argued logic represent want example represent disjunction 
careful robot unsure actions 
commit action order carry 
robot action doing 
mean agent ignorant unsure agents unsure values receive environment 
general discussion issues way handle logic allowing independent choices different agents nature see poole 
noisy sensors actuators axiomatisation showed model partial information environment agent limited sensing ability 
section sketch way model noisy sensors actuators continuous version probabilistic horn abduction poole 
general idea probabilistic horn abduction probability distribution possible world generated unconditionally independent random variables 
logic program gives consequences random choices world 
formally possible world selects value alternative disjoint set true possible world defined unique stable model selection acyclic logic program poole 
probability world product probabilities values selected world 
framework logic programs interpreted logically resulting framework independent random variables represent probability distribution poole 
model noisy sensors add extra noise term rules 
example represent additive gaussian noise compass sensor standard deviation rule alternative set 
true world compass noise standard deviations mean time world world unique true time 
normally distributed mean standard deviation usually called score noisy sensor agent dead reckoning maintaining record position 
appear proc 
th international joint conference ai ijcai montreal august actuator unreliable errors explode 
unreliable actuators modelled similarly noisy sensors example treated analogously dynamics linear noise gaussian posterior distributions solved analytically kalman filter see dean wellman 
constraint nets constraint nets zhang mackworth form modelling language hybrid systems combines discrete continuous time discrete continuous domains coherent framework 
done abstracting notion time covers discrete continuous models time events interface continuous discrete time 
constraint nets built basic transductions 
depend past axiomatised allowing acyclic logic programs specify current outputs depend current inputs 
predicate corresponds unit delays 
transport delays time modelled atom implement maintain history long just state 
logic control wang logic discrete control shares features discrete form logic 
main difference state system explicit term language 
language complicated simple horn clauses main control loop extra logical 
declarative control nerode kohn uses prolog control 
main aim prolog program prove action optimal 
prolog rules different level simple rules impractical prolog back chaining search strategy 
golog golog lesp rance programming language robots situation calculus 
proposal golog programs sentences logic 
logic meta level providing semantics algol golog language 
intriguing idea logic programming approach write low level controller interprets golog programs 
done having state variables current action agent doing list actions 
rules reduce expressions time example interpret action sequences similarly interpret complicated constructs loops monitoring primitive actions see setting goal direction example high level action decomposes continuous action monitored complete 
full discussion scope 
event calculus event calculus kowalski sergot shanahan provides mechanism represent persistent properties intervals events properties true false 
new deriving events changes continuous properties having cumulative properties exploiting evaluation time gain efficiency 
quite simple translation map event calculus framework 
event calculus uses predicates true event happens time true event true true event longer true 
mapped fluent representation want convention predicates true left closed intervals represent meaning predicate holds time main advantage representation act time done temporal ordering maintain state implement fast looking value assigned variable 
shanahan notion similar deriving events continuous change 
mixes logic continuous time proposed mixes logic continuous time sandewall shanahan dean pinto reiter time span situation fluents change truth values pinto reiter needs know priori properties accumulate effectively integration line 
robot control know sensor values change best derive estimate integrals online 
proposals 
argued logic programs effectively programming language robot control 
logic program forms executable specification robot appear proc 
th international joint conference ai ijcai montreal august 
language modelling robot environment multiple robots 
axiomatisation combined probabilistic horn abduction poole allow modelling uncertainty environment exogenous events noisy sensors unreliable actuators 
described ideas improving efficiency adaptive sampling partially evaluating logic program determine inputs look order event occur 
running robot build sensors detectors conditions detected run program forward direction derive events 
simulation query environment determine events occur 
ideas currently pursued 
alan mackworth ying zhang interesting discussions hybrid systems 
mike comments previous draft 
supported institute robotics intelligent systems project ic natural sciences engineering research council canada operating 
agre chapman agre chapman 
pengi implementation theory activity 
proc 
th national conference artificial intelligence pages seattle washington 
apt bezem apt bezem 
acyclic programs 
new generation computing 
wang wang 
conditional observer controller logic finite machines 
siam journal control appear november 
dean dean 
approach reasoning continuous change applications planning 
proc 
th national conference artificial intelligence pages boston ma 
dean wellman dean wellman 
planning control 
morgan kaufmann san mateo california 
fikes nilsson fikes nilsson 
strips new approach application theorem proving problem solving 
artificial intelligence 

vlsi architecture design predicate logic 
phd thesis department computer science university waterloo waterloo ontario canada september 
kowalski sergot kowalski sergot 
logic calculus events 
new generation computing 
kowalski kowalski 
algorithm logic control 
communications acm 
lesp rance lesp rance levesque lin marcu reiter scherl 
logical approach high level robot programming progress report 
kuipers editor control physical world intelligent systems papers aaai fall symposium pages new orleans november 
mccarthy hayes mccarthy hayes 
philosophical problems standpoint artificial intelligence 
meltzer michie editors machine intelligence pages 
edinburgh university press 
nerode kohn nerode kohn 
multiple agent hybrid control architecture grossman editor hybrid systems pages 
springer verlag lecture notes computer science 
pinto reiter pinto reiter 
reasoning time situation calculus 
annals mathematics artificial intelligence special festschrift issue honour jack minker appear 
poole poole 
probabilistic horn abduction bayesian networks 
artificial intelligence 
poole poole 
sensing acting independent choice logic 
working notes aaai spring symposium extending theories actions formal theory practical applications pages ftp ftp cs ubc ca ftp local poole papers actions ps gz 
rosenschein kaelbling rosenschein kaelbling 
situated view representation control 
artificial intelligence 
sandewall sandewall 
combining logic differential equations describing real world systems 
proc 
international conf 
principles knowledge representation reasoning pages toronto 
shanahan shanahan 
representing continuous change event calculus 
proc 
ecai pages 

interval representation problem 
international journal intelligent systems 
zhang mackworth zhang mackworth 
constraint nets semantic model hybrid dynamic systems 
theoretical computer science 
zhang zhang 
foundation design analysis robotic systems 
phd thesis department computer science university british columbia september 
