deforestation functional programs type inference olaf lehrstuhl ur informatik ii rwth aachen germany informatik rwth aachen de 
deforestation optimises functional program transforming create certain intermediate data structures 
short cut deforestation deforestation method single local transformation rule 
return short cut deforestation expects producer consumer intermediate structure certain form 
starting fact short cut deforestation parametricity theorem second order typed calculus show required form list producer derived type inference 
type inference indicates function de nitions need inlined 
limited inlining module boundaries practically feasible develop scheme splitting function de nition worker de nition wrapper de nition 
deforestation need inline small wrapper de nition 
functional programming modularity achieved intermediate data structures 
separately de ned functions glued intermediate data structure produced function consumed 
example function tests element list xs satis es predicate may de ned follows haskell bool bool xs map xs function map applies elements xs yielding list boolean values 
function combines boolean values logical operation 
de ned glueing producer map xs consumer intermediate list 
john hughes points lazy functional languages modularity intermediate data structures practicable :10.1.1.100.8004
considering de nition note eager evaluation intermediate boolean list produced consumed function 
modularity intermediate data structures seldomly languages eager evaluation 
contrast lazy evaluation ensures boolean list produced cell time 
cell immediately consumed garbage reclaimed automatically 
function runs constant space 
furthermore comes value true production list aborted 
termination condition separated loop body 
map false map map false map map true map true see discussion intermediate data structures glue popular lazy functional programming :10.1.1.100.8004:10.1.1.33.8876:10.1.1.26.4391
deforestation 
modular programming style come free 
list cell allocated lled taken apart nally garbage collected 
monolithic de nition ecient modular construct intermediate list 
false xs xs aim deforestation algorithms transform automatically modular functional program uses intermediate data structures glue produce intermediate data structures 
say producer consumer data structure fused 
removing costs intermediate data structure deforestation brings subterms producer consumer previously separated intermediate data structure 
new opportunities optimising transformations arise 
short cut deforestation 
despite extensive literature various deforestation methods implementation real compilers proved dicult 
simple deforestation method called cheap short cut deforestation developed 
fundamental idea short cut deforestation restrict deforestation intermediate lists consumed function foldr 
lists common intermediate data structures functional programs 
higher order function foldr uniformly replaces list occurrences constructor function empty list constructor constant note term xk syntactic sugar xk 
foldr foldr replaces list constructors list produced term runtime short cut deforestation simply replaces list constructors compile time 
na transformation rule foldr replaces list constructors wrong 
consider map 
constructors replaced de nition map part need producer form constructors construct intermediate list explicit replaced easily 
convenient solution producer form abstracted variables mark positions intermediate list constructors 
fusion performed simple rule foldr rule removes intermediate list constructors 
subsequent reduction steps put consumer components places held constructors 
call producer skeleton equal producer constructors result list abstracted 
observe general types di erent types 
transformation type correct producer skeleton polymorphic 
nally formulate short cut fusion follows type type variable 
term type may apply transformation foldr usually producer skeleton form required semantic correctness transformation 
strikingly polymorphic type guarantees correctness 
intuitively construct result type arguments matching types 
formally transformation instance parametricity free theorem 
original short cut deforestation method requires list producer de ned explicitly terms polymorphic producer skeleton 
easily recognise producer skeleton ensure required polymorphic type special function build second order type introduced build forall 
build local quanti cation type variable type build ensures argument build desired polymorphic type 
standard haskell second order types 
compiler needs extended support function build 
build short cut fusion rule written follows foldr build transformation rule easily implemented compiler names cheap short cut deforestation 
idea compiler writer de nes list manipulating functions standard libraries extensively programmers terms build foldr 
type inference identi es list constructors 
originally second order type build con ned deforestation producers de ned terms functions standard library 
today glasgow haskell compiler extended type system permits programmer functions build 
asking programmer supply list producers build form runs contrary aim writing clear concise programs 
simplicity list producer lost de nition function map demonstrates map map xs build foldr xs foldr abstracts common recursion scheme de ning list consumers generally considered modular programming style build enable deforestation 
starting point making build super uous observation correctness short cut fusion rule solely depends polymorphic type producer skeleton 
reduce problem transforming arbitrary list producing term required form type inference problem 
obtain polymorphic producer skeleton producer generate test method replace occurrences constructor variable occurrences constructor variable obtain term type check term polymorphic type type type variable abstracted exactly constructors construct result list producer skeleton 
try di erent replacement replacement gives desired type short cut deforestation takes place 
obviously method prohibitively expensive 
fortunately determine list constructors need replaced pass algorithm infers general principal typing 
call transformation obtains polymorphic producer skeleton arbitrary producer list abstraction 
list abstraction type inference small second order typed functional language explicit type abstraction type application cf 

explicit handling types clearer terms transformed 
additionally language slightly simpli ed version intermediate language inside glasgow haskell compiler 
term produces list type int mapint int int int int int int xs int case xs 
ys 
mapint ys mapint moment consider monomorphic list constructors type int int int type int monomorphic version map type int 
furthermore assume de nition mapint part producer 
lift restrictions step step 
start list abstraction typing producer int intg mapint int int int int int int xs int case xs 
ys 
mapint ys mapint int typing environment assigns types free variables producer 
respect typing environment producer type colon 
replace list constructor respectively occurrence new variable respectively patterns case constructs construct destruct list 
furthermore types term typing environment modi ed 
existing ones far possible replace list type int occurrence new type variable furthermore add int respectively typing environment new type variable variable respectively int int int 
int 
int 
mapint int int 
int int xs case xs :10.1.1.100.8004
ys 
mapint ys mapint typing environment term type variables form valid typing type 
input type inference algorithm 
type inference algorithm replaces new type variables determines type obtain valid typing :10.1.1.100.8004
precisely type inference algorithm determines principal typing general instance input gives valid typing 
note type inference fail typing start valid 
worst case type inference algorithm yields typing original producer 
just try nd general typing 
example type inference algorithm yields valid typing int int int 
int int int int int int int mapint int int 
int int int xs int case xs 
ys 
mapint ys mapint type term type variable list abstraction possible 
typing environment tells construct values type construct result producer 
contrast types normal list constructors 
construct lists internal producer 
normal list constructors type variable variables obtain producer skeleton required type int intg int 
mapint int int 
int int int xs int case xs 
ys 
mapint ys mapint int :10.1.1.100.8004
complete producer written int 
int list abstracted form suitable short cut fusion foldr consumer 
assumed lists ints 
reality lists polymorphic type type :10.1.1.100.8004
typing start looks follows int intg mapint int int int int int int xs int case xs 
int ys 
int mapint ys mapint int int int int want list type int 
replaces list constructor application int respectively int di erent variable respectively continue just described previous section 
type inference naturally replace variables abstracted list constructor applications int respectively int 
obtain producer skeleton required type int intg int 
mapint int int int 
int int xs int case xs 
ys 
mapint ys mapint int int int int :10.1.1.100.8004
complete producer looks follows int 
int int int note contrast list constructors abstracted variables monomorphic type terms consumer foldr monomorphic 
inlining de nitions practise de nition mapint part producer 
producer just mapint impossible list constructors construct result list part term 
may inline de nitions variables mapint part producer 
generally implementations deforestation problems controlling necessary inlining avoid code explosion 
nicely having heuristics inlining typing environment principal typing determine exactly variables de nitions need inlined 
note important just inline right hand side recursive de nition recursive de nition 
consider producer mapint 
start typing int int mapint int int int int mapint int int int int type inference replace type int occurrence new type variable term types variables typing environment 
int int mapint int int 
int 
int 
mapint type inference algorithm gives principal typing int int mapint int int 
int 
int 
mapint type term type variable appears typing environment type mapint 
occurrence signi es de nition mapint needs inlined 
practise producer de ned terms polymorphic function map mapint 
instantiate uses map far possible applying list abstraction algorithm 
de nition map drop abstraction type variables create new de nition function map int int producer replace map int int map int int produced list 
worker wrapper scheme neat algorithm determines exactly functions need inlined inlining causes problems practise 
extensive inlining module boundaries defeat idea separate compilation 
furthermore practise inlining black art full delicate compromises give performance unnecessary code bloat 
best implemented separate optimisation pass 
consequently list abstraction algorithm having perform inlining 
able result list producer inlining list constructors construct result list producer 
called worker wrapper scheme proposed gill short cut deforestation 
split de nition function produces list de nition worker de nition wrapper 
de nition worker obtained original de nition abstracting result list type list constructors 
de nition wrapper calls worker contains list constructors construct result list 
example split de nition function mapint mapint int int int int int int foldr int int int int int int de nitions worker wrapper mapint int :10.1.1.100.8004
int int int 
int 
int int foldr int int mapint int int int int int int int just easily split de nition polymorphic function map map foldr de nitions worker wrapper map :10.1.1.100.8004
foldr map deforestation need inline wrapper :10.1.1.100.8004
consider example deforestation body de nition de ned map bool xs foldr bool bool false bool bool bool bool xs flist abstraction foldr bool bool false 
bool xs bool bool bool subsequent bool bool false xs left standard inliner inlined 
module boundaries de nition large worker may inlined 
uence deforestation 
described type inference algorithm enables automatic transformation nearly arbitrary producer term form required short cut deforestation 
new deforestation algorithm searches terms form foldr transforms producer term form type subsequently applies short cut fusion rule :10.1.1.100.8004
method indicates inlining required permits deforestation module boundaries requiring inlining small wrapper de nitions 
outlined idea type inference deforestation 
algorithms formal descriptions proofs 
shortly detailed presentation approach appear 

henk barendregt 
lambda calculi types 
abramsky gabbay maibaum editors handbook logic computer science volume pages 
oxford university press 

olaf 
type inference builds short cut deforestation 
acm sigplan notices september 
proceedings acm sigplan international conference functional programming icfp 

olaf 
type inference deforestation functional programs 
phd thesis rwth aachen 
appear 

olaf 
type inference short cut deforestation nearly inlining 
proceedings th international workshop implementation functional languages lncs 
springer 
appear 

glasgow haskell compiler 
www haskell org ghc 

andrew gill john launchbury simon peyton jones 
short cut deforestation 
fpca conference functional programming languages computer architecture pages 
acm press 

andrew gill 
cheap deforestation non strict functional languages 
phd thesis glasgow university 
:10.1.1.100.8004
john hughes 
functional programming matters 
computer journal :10.1.1.100.8004

simon marlow 
deforestation higher order functional programs 
phd thesis glasgow university 

simon peyton jones john hughes haskell non strict purely functional language :10.1.1.100.8004
www haskell org february 

simon peyton jones simon marlow 
secrets glasgow haskell compiler inliner 
idl www com idl html 

philip wadler 
theorems free 
th international conference functional programming languages computer architectures pages 
acm press :10.1.1.100.8004

philip wadler 
deforestation transforming programs eliminate trees 
theoretical computer science june :10.1.1.100.8004
