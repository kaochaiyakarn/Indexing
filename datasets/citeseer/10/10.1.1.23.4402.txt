specification verification formal system structurally recursive functions andreas abel department computer science university munich abel informatik uni muenchen de 
type theoretic programming language introduced lambda calculus coproducts products inductive types additionally allows definition recursive functions way common functional programming languages 
formal system checks definition structurally recursive soundness theorem shown system 
functions passing check ensured terminate inputs 
moment non mutual recursive functions considered 
lambda calculi inductive types standard means construct function inductive type recursor 
method drawbacks discussed coq 
intuitive instance obvious code division function half half half half alternative approach investigated recursive definitions pattern matching common nearly functional programming languages 
define total functions satisfy conditions 
patterns exhaustive mutually exclusive 
focus point foetus language introduce sect 
uses case expressions condition fulfilled 
discussion see coq 

definition founded means arguments function value founded computation tree 
ensured give termination ordering function ordering respect arguments recursive call smaller input parameters function 
restrict structural orderings checked automatically allow definition large number total functions directly 
introducing extra wellfounded argument decreased structurally recursive call code function proven total martin lof type theory mar equivalent system 
say expression structurally smaller expression appears computation tree called component relation 
abe implementation termination checker foetus 
checker accepts structurally recursive functions kind described reimplemented part agda coquand coq 
aa semantics foetus language defined types wrt :10.1.1.21.9878
structural ordering values proven 
furthermore function defined semantically structurally recursive terminates input value condition terminates values smaller wrt 
structural ordering value domain 
prove termination terms assuming named functions structurally recursive 
article meant close gap remained aa :10.1.1.21.9878
self contained repeat definitions foetus language operational value semantics far refer presentation 
old definitions laid tables 
new contributions start formalization termination checker form predicate sr syntactically structurally recursive terms 
extends derivation system structural ordering terms 
show ordering terms reflected values evaluation preserves ordering 
second prove functions captured sr predicate total terminate inputs 
establish soundness system formally 
moment exclude mutually recursive functions require sophisticated concepts 
non mutual recursion treat proof beautiful 
specification consists strictly positive inductive definitions proof constructive 
details completely formalized directly implement system 
final theorem closed terms evaluate value apply program extraction 
obtain interpreter lambda calculus inductive types recursive functions termination verified 
related gim enez presents syntactic criterion structural recursion calls guarded destructors gim 
gives proof soundness criterion 
furthermore believe approach concise flexible functions defined 
jouannaud okada jo blanqui bjo deal inductive types area extensible term rewriting systems 
handle mutual recursion approach expressive power extended general schema 
approaches differ considerably notion recursive call smaller argument 
turner tt investigating strong functional programming functional programming languages terminating functions defined 
technically interpretations ensure termination 
count constructors destructors handle wider class functions 
consider approach promising fully formalized verified 
ideas transferred approach 
christoph walther invented reduction checking referred walther recursion ma 
functions examined terminating output function strictly smaller input 
information check termination nested recursive functions just functions decrease input previously defined function recursive call 
system extended reduction checking straightforward way assumptions dependencies judgements see def 

pfenning pp implemented termination reduction checking twelf system ps lf hhp 
coming realm logic programming formal system implements check similar mine 
theirs constructor mine destructor 
justify system cut admissibility proof shown soundness 
comparision discussed main contribution article giving clear straightforward soundness proof system semantics judgements formal system 
notational conventions vectors simplify notation 
family meta expressions en write sequence 
sn denotes set permutations ng 
furthermore denotations type variables ae oe types term variables terms values closures environments atoms containing relation terms rule notation inductive definitions propositions cf 
lemma 
top bar put premises bottom cases read conjunction 
foetus language semantics aa introduced term language foetus semantics :10.1.1.21.9878
briefly repeat definitions main results see tables 
types constructed type variables type constructors sigma finite sum pi finite product 
function space strictly positive inductive type 
types ty finite list type variables oe oe sigma oe oe xn oe precedence pi sigma sigma empty sum pi empty product ty ty closed types contexts gamma oe oe cxt pairwise distinct terms tm oe gamma closed type oe context gamma var gamma cxt gamma tm oe gamma oe weak tm oe gamma gamma tm oe gamma tm oe gamma oe ty tm sigmaoe gamma case tm sigmaoe gamma tm ae gamma oe case oe oe tm ae gamma tup tm oe gamma tm gamma pi tm gamma pi tm oe gamma lam tm gamma oe oe tm oe 
gamma rec tm gamma 
sr fun 
tm 
gamma app tm oe 
gamma tm oe gamma tm gamma fold tm oe oe gamma fold tm oe gamma unfold tm oe gamma unfold tm oe oe gamma syntactic sugar fun pi xn pi tm gamma 
oe oe sr pi xn pi fun oe oe tm 
gamma table 
foetus language recursive terms terms inhabiting closed types terms lambda calculus sums products plus folding unfolding inductive types plus structurally recursive terms see table 
fold unfold establish isomorphism oe oe oe 
rule rec introduces recursive term resp 
named function solves equation place require argument product type simplify handling lexicographic termination orderings 
function body identifier may appear structurally recursive respect parameter property ensured judgement delta sr read dependencies delta function parameter structurally recursive 
example judgement valid tm sr expresses recursive call function admissible function structurally recursive argument call strictly smaller parameter function 
function structurally recursive structurally recursive body assumptions dependencies calls decreasing 
proof rules tm sr sect 

intention defined simultaneously terms 
operational semantics define big step operational semantics relation closures values 
intention values results evaluation process 
closures open terms paired mapping free variables values environment 
closures form value applied values convenient define operational semantics casting values back terms 
table presents operational semantics 
reasons readability leave type context annotations possible 
strategy callby value see rule evaluate recursive terms see rules 
furthermore deterministic imply invert rules 
denote inversion rule gamma 
literature finds notation expressing function smallest fixed point gamma 
notation inspired functional programming language sml 
note element tuples allowed arguments really restriction 
values val oe environments env gamma closures cl val vn fold hx ei ei env gamma phi xn vn val oe psi gamma oe oe cl fht ei gamma cxt tm gamma env gamma ff val oe 
val oe new symbol notation terms oe gamma expresses tm oe gamma oe gamma optional values oe expresses val oe operational semantics oe cl oe theta val oe hx vi ht gamma ei ht gamma wi opin ht ei hin ei ht sigmaoe gamma ei oe ht gamma oe wi ei ht ei ei ht ei hpi ei hx ei hx ei ei ei ht ei hs ei ht ei ht ui hx ei ht ei ui ei ht ei ei fold ht ei fold ei table 
values operational semantics semantics structural ordering values give semantics types foetus captures values values ensure termination 
sense function value evaluates result applied argument 
definition semantics values 
closed type oe ty semantics val oe val oe contains values type oe 
especially arrow types val oe 
val oe val details matter point 
refer interested reader abe construction semantics carried aa predicative construction :10.1.1.21.9878:10.1.1.21.9878
note papers val oe denoted oe 
definition environment 
gamma oe oe env gamma fx xn val oe ng definition strong evaluation 
say closure cl oe evaluates strongly value val oe value 
val oe closures form ht ei additionally require subterm evaluates strongly hs environment shortening extension value refer requirement subterm property 
structural ordering oe val oe theta val refl oe oe rin ae oe ae sigmaoe ae oe ae ae ae oe 
oe oe fold admissible rules transitivity ae ae rin fold lexicographic ordering oe oe val theta val closed types oe permutation sn lex 
oe oe lex oe oe oe oe table 
ordering values table shows definition lexicographic extension oe structural ordering values obtain oe 
aa proved wellfounded :10.1.1.21.9878:10.1.1.21.9878
exploit fact proof terminates input doing noetherian induction 
hypothesis smaller oe hand proof termination formal system structural recursion section introduce foetus termination calculus motivate example 
consider foetus implementation addition ordinal numbers 
define type abbreviations nat ord nat constructors ord addition function fold fold lim fold add ord fun add pi ord ord ord case unfold ord add nat ord lim nat add branch case expression just type annotation stating variable contain empty tuple 
term language define add add structurally recursive function body 
require recursive calls argument structurally smaller input parameter function 
case gives proof obligations 

approach works follows descend function body reach recursive calls way collect dependency information variables 
dependencies generated pass case expression 
call get dependency unfold 
infer require folding step increase structural ordering strictly 
call infer unfold 
justify valid regard functions possibly infinitely branching trees application selection branch 
formalization informally described method consists relations terms 
structural ordering tm 
lexicographic extension oe tm needed ackermann function 
predicate structural recursiveness sr 
structural ordering terms precise definition structural ordering terms give rules allow derive relation terms set dependencies 
right hand side rules 
tm tm delta tm delta case delta delta pi delta delta delta tm delta unfold left hand side rules 
tm tm delta tm delta delta case delta delta delta delta pi delta delta delta delta delta delta tm delta delta unfold delta reflexivity transitivity tm refl delta tm tm transl delta tm delta 
tm tm delta tm tm delta tm delta 
tm tm delta tm tm trans delta delta 
tm tm delta tm table 
structural ordering terms declaration structural ordering 
structural ordering terms tm non strict version tm defined families relations indexed pair types oe ty define tm oe tm oe theta tm tm oe tm oe theta tm purposes readability generally omit indices 
definition dependencies 
set dependencies delta consists relations oe tm 
tm oe tm oe definition derivation structural ordering 
rules table introduce judgement delta 
tm tm read dependencies delta know equal 
right hand rules judgements want derive left hand side rules dependencies backward reading introduced treatment case statements rules see section 
dependencies restricted form tm fresh variable introduced clause case statement 
typically term analyzed case expression form unfold left rules 
tm practice 
see system action give derivations proof obligations add omitting tm tm refl tm transl tm unfold tm refl tm transl tm unfold tm appr unfold rule 
tm needed nested case statements instance curious implementation half function fun half nat nat nat case unfold case unfold nat nat half obligation tm proven follows unfold unfold tm case unfold tm unfold case unfold lexicographic extension handle functions ackermann function need extend calculus lexicographic orderings 
requires just additional rules 
declaration lexicographic ordering 
closed types oe oe oe permutation sn define relation oe tm oe tm oe tm oe tm enhance readability usually omit second index oe 
definition mean term lexicographically smaller term permutation components 
note left hand side tuple syntactically right hand side may term product type 
definition derivation lexicographic ordering 
rules introduce auxiliary judgement delta oe tm jsj case just write delta oe tm read dependencies delta know lexicographically smaller permutation 
lex 
tm delta tm pi delta oe tm lex tm delta tm pi delta oe tm delta oe tm encodes standard lexicographic ordering 
start comparing component tuple tuple non strictly smaller consider component 
terms seen relatively structural recursiveness frame derivation system size relations terms define judgement sr introduced sect 

roughly described function structurally recursive term subterms called recursively smaller arguments see rule 
judgement oe tm 
definition derivation structural recursiveness 
introduce judgement delta sr oe 
oe tm read dependencies delta function parameter structurally recursive permutation rules 
delta sr delta sr gamma delta sr gamma delta sr delta sr delta sr delta tm sr jtj delta sr case delta sr jtj delta sr delta sr delta sr pi delta sr fg xg delta sr delta sr delta sr delta sr delta sr delta oe tm delta sr delta sr delta sr fold delta sr delta sr unfold note remain fixed rules 
furthermore rule recursive terms sr term definition system nested definition functions mutual recursion possible 
definition syntactically structurally recursive 
define recursive term fun syntactically structurally recursive delta sr permutation th 
delta sr example show add definable term foetus system 
expanding syntactic sugar abbreviations omitting type annotations term fun add pi ord case unfold pi fold add fold add prove add tm ord pi ord ord show add sr case identical permutation infer goal obtaining subgoals head term add add sr add sr pi add sr unfold pi side term add tm unfold pi add sr side terms prove reusing derivations structural ordering sect 
substituting pi occurrences 
tm unfold pi tm pi lex 
tm tm unfold pi oe tm tm unfold pi add sr add tm unfold pi add sr add tm unfold pi add sr fold add tm unfold pi tm pi lex 
tm tm unfold pi oe tm fadd yg tm unfold pi add sr add tm unfold pi add sr add tm unfold pi add sr add tm unfold pi add sr fold add soundness structural ordering section show ordering values corresponds structural ordering terms 
accomplish proving evaluation preserves structural ordering 
give interpretation judgement delta tm definition weak strong interpretation structural ordering define propositions environment satisfies weakly relation tm terms satisfies dependencies delta ffl wk tm hs ei ht ei ffl tm hs ei ht ei ffl delta delta ffl strong satisfaction atom form tm carries evidence strongly evaluating weak satisfaction needs proof 
interpret atoms dependencies left hand side strongly concluded atom right hand side weakly 
reason lies architecture sr judgement 
interpreting terms judgment delta sr holds strongly terminating sect 
read definition sr strongly evaluating terms enter dependencies 
lemma weakening 
extending environment destroy satisfaction dependencies 
ffl wk ffl ffl delta ffl delta proof 
definition contexts environments new variable appear terms delta 
theorem 
structural ordering terms lexicographic extension preserved operational semantics 
delta ffl delta ffl wk proof 
induction delta right hand side rules 
tm tm show ffl delta tm ffl wk tm ffl delta ei ht ei assumption ei entails gamma hs ei subterm case definition val 
instance induction hypothesis course environment obtain ffl wk tm leaving subgoals 

ffl delta weakening lemma 
hx 
hs 
gamma hs ht infer goal 
goal hs ei ht ei 
hpi ei ht ei gamma entails hs ei subterm pi ind hyp 
achieve goal 
show hs ei ht ei hsa ei ht ei gamma subterm property hs ei ha ei complete ind hyp 
rule 
analogously gamma left hand side rules 
tm tm goals show form ffl delta delta ffl wk ffl delta delta ffl wk weakening suffices show ffl ffl case extension 
assume ffl case expands propositions hy ei ei 
rule gamma plus subterm property entails ht ei ht 
goals 
ffl tm prove hx 

ffl weakening 
expand goal hy ei hpi ei hy ei ht ei follows gamma subterm property 
expanded goal hy ei hs ei hy ei hs ei gamma subterm property hs ei ha ei follows 
analogously gamma reflexivity transitivity tm refl ffl wk tm follows refl 
tm transl show ffl wk tm ffl tm hy ei ht ei ffl tm obtain hs ei premise transitivity structural ordering values implies tm analogously tm trans analogously lexicographic extension lex 
tm simplified goal ffl wk tm pi ei ht ei oe gamma hs ei hpi ei goal oe follows form lex 
lex tm simplified goal ffl wk tm pi oe ei ht ei oe follows analogously lex 
tm lex 
ut soundness structural recursion transfer syntactic property structurally recursive semantics 
show structurally recursive term 
definition semantically structurally recursive 
say function value val oe 
semantically structurally recursive sr oe 
terminates inputs condition terminates lexicographically smaller inputs oe sr oe 
val oe val oe oe proposition 
sr oe 
val oe 
proof 
domain val oe function values type oe wellfounded lexicographic ordering shown detail abe aa :10.1.1.21.9878:10.1.1.21.9878
wellfounded induction principle establishes equality semantically structurally recursive functions 
ut theorem 
recursive term type oe context gamma initial environment val gamma 
val oe 
proof 
definition exists permutation th 
sr abbreviation proposition goal val oe oe 
prove lemma global assumption oe finish lemma empty delta 
lemma 
delta sr ffl delta hg ei hx ei ht ei proof 
induction delta sr 
hy ei assumption 
show delta sr delta tm sr ffl delta hg ei hx ei ei ind hyp 
entails hs ei 
goal follows second ind hyp 
environment show premises ind hyp 
ffl delta tm follows weakening facts hx hs 

hg 
hx show delta sr ffl delta hg ei hx ei hy ei immediately get hy ei remains show hy ei val 
assume val show hy ei 
follows ind hyp 
ht ffl delta weakening hg hx 
ind hyp 
goal ei delta oe tm ffl delta hg ei hx ei oe hg ei true 
global assumption oe obtain apply theorem premise delta oe tm cases follow directly ind hyp 
operational semantics 
ut corollary 
terms terminate environment oe gamma env gamma val oe ht ei proof 
straightforward induction operational semantics 
critical case fun theorem 
proof carried abe aa :10.1.1.21.9878:10.1.1.21.9878
corollary 
closed terms terminate 
corollary extract interpreter foetus language terminates 
surprise interpreter just applies operational semantics input term 
additionally computes witness goodness result value val eliminated refined program extraction cf 
bs 
formally defined syntactical check sr structurally recursive functions serves frame derivation system size relations terms aa :10.1.1.21.9878
shown parts termination checker sound operational semantics 
expect approach extended mutual recursion see dependent types put restrictions acceptable terms 
mean term typable lambda calculus inductive dependent types pi typable foetus 
just strip dependency run foetus termination checker 
standpoint confirmed fact implementations termination checker pi typing information cf 
pp 
far termination checking foetus limited quicksort proven total method 
capture walther recursive functions ma quicksort define judgements stating function reducing resp 
preserving 
quicksort filtering step preserving 
implementation called reduction checking straightforward simple structural ordering terms 
lexicographic orderings require number modifications class citizens system far 
may appear right hand sides dependencies 
abe aa altenkirch informally described termination checker mutual recursive functions :10.1.1.21.9878
main extension construction call graph mutual recursive functions satisfy goodness condition 
enables construction wellfounded ordering function symbols addition lexicographic ordering arguments serves component termination ordering required run soundness proof 
details progress 
contrast full approach call graphs light weight version mutual recursion descent call straightforward extension proof article 
number colleagues deserve contribution thorsten altenkirch laying foundations discussions definitions judgements semantics brigitte discussions differences formal systems ralph matthes aaron stump anonymous referees helpful comments draft 
aa andreas abel thorsten altenkirch :10.1.1.21.9878
predicative analysis structural recursion 
submitted journal functional programming december 
abe andreas abel 
foetus termination checker simple functional programs 
www informatik uni muenchen de abel foetus 
abe andreas abel :10.1.1.21.9878
semantic analysis structural recursion 
master thesis ludwig maximilians university munich 
www informatik 
de abel publications 
bjo fr ed eric blanqui jean pierre jouannaud okada 
inductive data type systems 
appear theoretical computer science 
bs ulrich berger helmut schwichtenberg 
program development proof transformation 
talk marktoberdorf draft available www mathematik uni muenchen de 
coq thierry coquand 
pattern matching dependent types 
www 
coq coquand 
agda home page 
www cs chalmers se agda 
gim eduardo ez 
codifying guarded definitions recursive schemes 
peter dybjer bengt nordstrom jan smith editors types proofs programs international workshop types sweden june selected papers volume lncs pages 
springer 
hhp robert harper furio honsell gordon plotkin 
framework defining logics 
journal association computing machinery january 
jo jouannaud okada 
data type systems 
theoretical computer science 
ma david mcallester kostas 
walther recursion 
slaney editors th international conference automated deduction new brunswick nj usa july august proceedings volume lecture notes computer science 
springer verlag 
mar martin lof 
intuitionistic type theory 
bibliopolis 
pp brigitte frank pfenning 
termination reduction checking logical framework 
workshop automation proofs mathematical induction cade pittsburgh pa usa june 
ps frank pfenning carsten 
twelf user guide 
technical report carnegie mellon university 
tt turner 
ensuring termination 
submitted proceedings issue journal universal computer science 
