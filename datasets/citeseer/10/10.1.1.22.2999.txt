programming support design patterns compile time reflection shigeru chiba institute information sciences electronics university tsukuba japan mt chiba tsukuba ac jp presents compile time mops provide general framework resolving implementation problems design patterns 
problems come fact programs written design patterns complicated errorprone structure easy understand 
problem resolved syntax extensions extended language constructs simplify description patterns improve readability programs 
approach programmers mop write library implements syntax extensions extended language constructs supporting design pattern 
illustrate approach examples written openjava self extensible version java language compile time mop 
adapter pattern visitor pattern examples 
design patterns gamma useful guidelines writing object oriented programs programs written design patterns complex errorprone structure programs easy understand 
programmers design patterns write annoying code implement patterns concept design pattern orthogonal programming languages smalltalk 
design patterns consist classes single class represent structure programs line explicitly represents design pattern program role design pattern class plays 
number researchers argued problems proposed syntax submitted oopsla workshop reflective programming java vancouver canada oct 
tsukuba ibaraki japan 
phone fax extensions extended language constructs help design pattern users write programs improve readability programs written design patterns bosch ducasse gil lorenz 
claims compile time mops meta object protocols provide general framework implementing syntax extensions extended language constructs 
approach programmers write meta level library implements syntax extensions extended language constructs design pattern 
extensions users library explicitly declare programs design patterns role class design pattern 
furthermore describe trivial behavior objects automatically generated mop system library 
programs simple easy understand 
examine idea written libraries design patterns openjava chiba self extensible version java language gosling kramer class compile time mop succeeding chiba 
rest resolve problems compile time mop described section example adapter pattern 
section example visitor pattern shown 
compile time mop design patterns section show example adapter pattern 
adapter pattern convert interface class interface clients expect 
adapter lets classes couldn incompatible interfaces gamma 
shows structure adapter pattern 
suppose programmer adapt class vector interface stack defined fol client target request adapter request adaptee adaptee adaptee structure adapter pattern lows listing stack java public interface stack boolean isempty enumeration elements object peek void push object object pop listing vector java public class vector boolean isempty enumeration elements object 
void addelement object 
class vector interface stack corresponds adaptee target respectively 
adapter pattern programmers write class correspondent adapter listing java public class implements stack private vector vector boolean isempty return isempty enumeration elements return elements object peek return void push object return addelement object pop 
class extends class vector interface stack 
class subclass class vector single adapter may vector subclasses 
implementation problems case programmers faced problems writing class plays role adapter 
problems 
class written adapter adapter pattern difficult find fact source code 
design pattern 
role class 

programmers add field holds vector object constructor accept 
isempty elements shared class vector class programmers repeatedly write code 

body method peek method invoked vector object value obtained invocation returned 
trivial operation object appears method push 
describing operations boring task errorprone 
problems design patterns fact reported number researchers bosch ducasse 
bosch called problem traceability loss self problem implementation overhead bosch 
solution special annotations view point adapter pattern programmers define method class vector corresponds methods interface stack 
adapter maps methods target methods adaptee 
extended language supporting adapter pattern programmer able directly handle 
implementation extended language follows listing oj public class instantiates adapts vector stack object peek forwards void push object forwards addelement object pop 
adapter pattern programmers 
declare program uses adapter pattern 
declare adapter class target class adaptee class class kramer class vector defined problem resolved 
solution applicable source code class vector modifiable 

specify mapping methods adapter class methods adaptee class things easily described language constructs 
declaration instantiates specifies design pattern 

declaration adapts specifies class adapter adapting class interface 
declaration method signature forwards specifies method forwards method adaptee 

adapter class methods corresponding methods adaptee class 
explicitly defined automatically inserted adapter class 
forward adaptee method name signature 
constructs simplify programs written adapter pattern 
implementation compile time mop openjava language extension shown implemented metaclass 
metaclass written programmers benefit metaclass write programs involving extended language constructs 
definition metaclass follows listing oj public class extends ojclass overrides syntax extensions void init adapts 
forwards 
overrides translation void translate throws adapts ojclass adaptee ojclass forname 
ojclass target ojclass forname 
implicit forwarding signature ojmethod adaptee int length picks method signature ojmethod sign target sign null ojmethod imp forwarder sign addmethod imp forwarder explicit forwarding ojmethod forwarder forwards int forwarder length forwarder 
adds field hold adaptee adaptee 
adds constructor accept adaptee 
adds interface target target metaclass openjava system produces regular java source code equivalent code listing code listing 
example section show example visitor pattern 
visitor pattern represent operation performed elements objet structure 
visitor lets define new operation changing classes elements operates gamma 
shows structure visitor pattern 
client visit visit accept visitor visit visitor visit visit element accept visitor visit visit accept visitor visit structure visitor pattern ordinal implementation suppose programmer implement gui class library visitor pattern 
visitor element represented interface interface listing java public interface void accept listing java public interface void visit container void visit panel void visit label elements accept visitor class elements needs method accept invokes visit object 
definition element class panel listing panel java public class panel extends container implements void accept visit 
class inherits element class container method accept version accept 
method visit superclass wrongly invoked 
writing class implementing interface tedious listing java public class implements void visit container 
void visit panel visit container void visit label 
distinct methods visit class implementing 
example programmer write method panel method simply calls visit superclass container 
extensions extension visitor pattern available programmers classes panel simpler 
programmers write interfaces explicit declaration representing visitor pattern listing oj public interface instantiates accepts void accept listing oj public interface instantiates visits void visit container panel label write method accept anymore class implementing interface 
class panel example rewritten follows listing panel oj public class panel instantiates extends container accepts 
accept implicitly defined 
simplify definition class 
define method visit class panel visit superclass container reused panel 
class written listing oj public class instantiates visits void visit container 
void visit label 
metalevel program openjava extension visitor pattern implemented metaclass listing oj public class extends ojclass void init visits 
accepts 

void translate throws translation interface ojclass 
visits ojclass 
accepts null null translation concrete class ojclass visitor 
visits ojclass element 
accepts visitor null visitor element null element void ojclass 
void ojclass 
translation concrete element void ojclass element visit element addmethod visit 
element translation concrete visitor void ojclass visitor ojclass element visitor visits ojmethod visit visitor int visit length visit null implicit forwarding ojmethod forwarder visit addmethod forwarder visitor metaclass openjava system produces regular java source code equivalent code listing code listing 
implementing design patterns programmers faced problems programs written design patterns tend complicated errorprone structure easy understand 
claims compile time mops provide general framework implementing syntax extensions extended language constructs help design pattern users write programs improve readability programs written design patterns 
illustrated programmers write meta level library design pattern compile time mops 
examples adapter pattern visitor pattern described openjava self extensible version java language compile time mop 
bosch jan bosch language support design patterns tools europe 
bosch jan bosch design patterns language constructs journal object oriented programming sigs publications 
chiba shigeru chiba metaobject protocol proceedings oopsla acm sig plan notices vol pp 
chiba chiba java lang class ecoop workshop reflective object oriented programming systems 
ducasse st phane ducasse message passing abstractions elementary bricks design pattern implementation object oriented technology ecoop workshop reader lncs 
gamma gamma helm johnson vlissides design patterns elements reusable object oriented software addison wesley 
gil lorenz gil lorenz design patterns language design ieee computer vol pp 
gosling gosling joy steele java language specification addison wesley 
kramer doug kramer jdk documentation sun microsystems 
demeyer engel making design patterns explicit face framework adaptive composition environment proceedings esec fse springer verlag pp 

pree automated support software development frameworks proceedings ssr acm sigsoft symposium software reusability pp 
jiri implementing patterns patterns languages program design pp addison wesley 
open java www page www tsukuba ac jp mich openjava index html 
