umiacs tr march cs tr counting solutions presburger formulas william pugh pugh cs umd edu www cs umd edu faculty pugh html institute advanced computer studies dept computer science univ maryland college park md describe methods able count number integer solutions selected free variables presburger formula sum polynomial integer solutions selected free variables presburger formula 
answer symbolically terms symbolic constants remaining free variables presburger formula 
example create presburger formula solutions correspond iterations loop 
counting obtain estimate execution time loop 
complicated applications create presburger formulas solutions correspond distinct memory locations cache lines touched loop flops executed loop array elements need communicated particular point distributed computation 
counting number solutions evaluate computation memory balance computation determine loop load balanced evaluate message traffic allocate message buffers 
supported nsf pyi ccr packard fellowship 
describe methods able count number integer solutions selected free variables presburger formula sum polynomial integer solutions selected free variables presburger formula 
answer symbolically terms symbolic constants remaining free variables presburger formula 
answer symbolically terms symbolic constants free variables presburger formula 
presburger formulas formulas built linear constraints integer variables usual logical connectives existential universal quantifiers 
table gives simple examples traditional symbolic summations sum answer gamma number symbolic math packages mathematica maple able compute symbolic sums 
methods assume summation empty lower bound greater upper bound 
answer give incorrect assumption violated 
example mathematica reports gamma gamma fact answer valid answer 
notation strongly suggests sum performed sum don assume predefined order variables eliminated 
allow arbitrary constraints just upper lower bound variable 
general notation sigmav vm sum values satisfy presburger formula free variables special case sigmav number solutions variables appearing free assumed symbolic constants 
answer returned terms symbolic constants 
answers may need guarded utilize nullary form summation indicate guarded sum 
empty sigma result conditional value true value expression 
example previous summations reported sigmai sigmai sigma sigmai sigma sigmai sigma gamma applications capability number applications analysis transformations scientific programs 
programs affine loop bounds guards subscripts define formulas solutions correspond ffl flops executed loop ffl memory locations touched loop ffl cache lines touched loop ffl array elements need transmitted processor execution loop distributed memory multicomputer 
counting number solutions formulas ffl estimate execution time code segment ffl compare memory bandwidth requirements vs flop counts code segment ffl determine loops flush cache allowing calculate cache rate fst ffl determine parallel loop load balanced iteration perform number flops tf ffl unbalanced loop assign different number iterations processor processor gets total number flops balanced chunk scheduling described hp ffl quantify message traffic ffl allocate space message buffers 
ffl review omega test simplify presburger formulas section 
ffl describe represent nonlinear constraints presburger formulas section 
page ffl describe techniques computing sums starting simple forms summations progressing general sums section 
ffl describe techniques producing simplified constraints disjoint disjunctive normal form 
previously produced simplified constraints overlapping disjunctive normal form 
need explained section techniques described section 
ffl show application techniques number examples compare techniques relation fst tf hp taw section 
omega test omega test pug originally developed check set linear constraints integer solution initially array data dependence testing :10.1.1.36.9420
capabilities uses grown substantially 
section describe various capabilities omega test 
eliminating existentially quantified variable basic operation omega test elimination existentially quantified variable refered shadow casting projection 
example set constraints define example dodecahedron omega test compute constraints define shadow dodecahedron 
mathematically constraints equivalent omega test able remove existentially quantified variables report answer just terms free variables 
rational variables projection convex region gives convex result 
unfortunately apply integer variables 
example solutions 
result complicated 
example solutions gamma numbers inclusive remainder divided 
general omega test produces answer disjunctive normal form union list clauses 
clause may need describe nonconvex region 
methods describing regions stride format omega test produce clauses consist affine constraints free variables stride constraints 
stride constraint cje interpreted evenly divides 
form solution represented projected format alternatively omega test produce clauses consist set linear constraints set auxiliary variables affine mapping variables free variables 
format solution represented ff ff ff gamma representations equivalent simple efficient methods converting 
representation intuitive second representation works better purposes 
disjoint disjunctive normal form normally omega test produce disjoint clauses may assignments free variables satisfy multiple clauses clauses may overlap 
purposes preferable disjoint clauses 
allows compute summation simply adding results summing individual clauses 
set clauses disjoint refer disjoint disjunctive normal form 
clauses guaranteed disjoint denote conjunction opposed 
previous need disjoint clauses 
straightforward naive methods capable converting arbitrary disjunction normal form formula disjoint disjunctive normal form 
cost doing quite high cases 
section discuss methods allow directly generate disjoint disjunctive normal form generating overlapping disjunctive normal form sophisticated methods converting arbitrary disjunctive normal form formula disjoint disjunctive normal form 
disjoint disjunctive normal form may generate clauses require time generate disjunctive normal form 
verifying existence solutions omega test provides direct support checking integer solutions exist set linear constraints 
treating variables existentially quantified eliminating variables produces problem containing single variable problems easy check integer solutions 
omega test incorporates extensions naive application variable elimination 
page removing redundant constraints normal operation omega test eliminate constraint redundant single constraint redundant 
request aggressive techniques eliminate redundant constraints 
fast incomplete tests flag constraint definitely redundant definitely redundant backup complete test 
capability verifying implications simplifying formulas involving negation 
techniques define gist operator defined gist interesting know words guarantee gist try result gist operator simple possible 
formally gist returns subset constraint constraints returned implied constraints constraints result 
verifying implications ability eliminate redundant constraints verify formulas form checking see constraints redundant constraints true 
gist true 
combine capability ability eliminate existentially quantified variables verify complicated formulas 
simplifying formulas involving negation problems involved simplifying formulas containing negated conjuncts gamma gamma ji naively converting formulas disjunctive normal form generally leads explosive growth size formula 
worst case prevented 
pw described methods effective dealing problems cases encounter 
secondly previous techniques negating non convex constraints quasilinear constraints ai discovered incomplete certain pathological cases pw 
pw describe method exact complete cases 
simplifying arbitrary utilizing capabilities described simplify verify arbitrary presburger formulas 
general may prohibitively expensive 
nondeterministic lower bound deterministic upper bound time required verify presburger formula 
able efficiently analyze presburger formulas arise practice 
example current implementation requires milliseconds sun sparc ipx simplify gamma gamma nonlinear constraints generally presburger formulas thought allow linear constraints 
turns number nonlinear constraints supported remaining class presburger formulas 
floors ceilings mods term bx cc appears constraint replace ff cff ff bx cc replaced ff 
term dx ce appears constraint replace fi fi gamma cfi bx cc replaced fi 
term mod appears constraint replace fl cfl fl mod replaced gamma fl 
stride constraints stride constraint cje requires evenly divisible equivalent ff cff 
negated stride constraint cje requires evenly divisible equivalent ff cff ff 
applications applications nonlinear constraints form show analyzing compiling hpf code distributed arrays 
assume dimensional template distributed block cyclic fashion processors page blocks 
means elements mapped processor processor processor processor 
described mapping template index processor number index twodimensional array local data 
mapping described mod mod equivalent computing sums section describe methods computing sums 
computing sum places option computing sum exactly computing upper lower bounds 
performing calculation exactly expensive 
answer symbolic exact answer may complicated harder utilize 
may preferable compute upper lower bound sum 
values far apart may worthwhile compute exact answer 
simple sums fairly standard formulas sums powers integers 
formulas described crc standard mathematical tables bey reviewed tf taw 
example sigmai sigma implementation expect sufficient hard code formulas 
sums guard produced basic sums section concern general problem computing sigmai da ae bb bc known nonnegative integer constants integer expressions equivalently variables 
issues need address lower bounds negative upper lower bounds cases 
equal zero sum simply sigma gamma greater zero handle issues breaking sum pieces sigmai sigmai gamma sigmai gamma sigmai gamma gamma sigmai gamma sigmai gamma sigmai gamma sigmai gammal gammai gamma sigmai gammau gamma gammal gammai sigmai gamma sigmai gamma gamma sigmai gamma gamma sigmai gammau gamma gammal handling rational bounds compute summation involving floor ceiling sigmai options compute symbolic answers compute approximate answers problem break subcases produce exact bounds 
techniques consider example problem sigmai compute symbolic answers simply introduce variable bu uc produce result terms variable 
case answer bn bn problem answer symbolically sum produce symbolic answers upper bound function symbolic constants 
eventual answer involved terms bn gamma may hard analyze 
may better substitute gamma bu uc new variable defined mod find significant terms page answer just looking highest powers example gives gamma mod gamma mod gamma mod gamma mod computing approximate answers calculate kinds approximate answers upper bounds lower bounds best guess answers 
positive integers gamma gamma gamma function non decreasing nonnegative gamma gamma gamma formula sigmai non decreasing function technique compute upper lower bounds rational sum 
choose approximate approximate value example summation lower bound upper bound approximation bn gamma gamma respectively 
gives results lower bound sigma gamma upper bound sigma approximation sigma gamma approximate answer average upper lower bound 
note give answer method approximation 
choice problem 
consider cases uj uj gamma 
cases obviously disjoint generate separate sum 
case upper bound integral 
sigmai sigmai gamma gamma sigmai gamma gamma sigma sigma gamma gamma sigma gamma gamma producing guard rational sums involve floor ceilings may able produce simple exact guard ensure 
technique described problem resolved able produce simple exact guard 
choose guard omega test produce simple approximate guard 
guard upper lower bound depending computing upper lower bound result 
polynomial sums value summing form rewrite polynomial sigmai delta delta delta sigmai sigmai sigmai delta delta delta convex sums consider general form summation sigmav denotes sum values variables satisfy moment require conjunction linear inequalities variables variables representing symbolic constants free variables 
algorithm dealing convex sum sigmav follows 
eliminate redundant constraints page 
pick variable consider 
picking variable try pick variable bounds expressed floors ceilings upper lower bounds possible 

multiple upper bounds replace summation sum new summations th summation upper bounds replaced gamma resulting summation simplify resulting conditions new restrictive constraints allow substantially simplify conditions remove redundant constraints reconsider variable eliminate 

case single upper bound multiple lower bounds handled similarly 

single upper bound single lower bound compute sum sigmav gamma fvg sigmav simplified term sigmav simplify result rewrite rules sigmav sigmav sigmav sigmav sigma sigmav variables remain summed need repeat process 
general sums consider summations conditions arbitrary presburger formula 
omega test described section simplify arbitrary presburger formula union clauses 
cases clauses described conjunction set linear inequalities 
general clause may need represented conjunction linear inequalities set auxiliary existentially quantified variables affine mapping auxiliary variables variables symbolic constants 
issues need deal ffl dealing overlaps clauses ffl dealing clauses represented projection ffl allowing omega test perform approximate simplification overlapping clauses problem solutions solutions clause 
sum clauses independently count solutions 
way handle described fst subtract count elements counted twice sigmav sigmav sigmav gamma sigmav problem quickly gets control clauses summations needed clauses 
alternative put formula disjoint disjunctive normal form clauses mutually exclusive 
provide techniques avoid generating overlapping clauses disjunctive normal form method converts arbitrary formula disjunctive normal form disjoint disjunctive normal form 
techniques described section 
projected sums clause projected form assume constraints form ff ff ff ff vector symbolic constants variables vector variables ff vector wildcards quantified variables clause 
matrix notation utilize linear algebra theory 
form worst case situation need encounter generally symbolic variables variables defined projections 
easily convert arbitrary clause form 
calculate smith normal form sch unimodular matrices integer diagonal matrix smith normal form properties important 
constraints defining rewritten gamma gamma ff substitute fi ff partition gamma fi top bottom portions reflect block structure gives gamma gamma gamma fi fi page gamma gamma fi gamma gamma diagonal constraints rewritten gamma gamma gamma gamma calculate ff terms fi ff gamma gamma gamma gamma fi equations need substitute expression ff 
keep expressions simple show results substitution 
constraints equivalent gamma gamma gamma gamma fi ff ff sigmav equivalent sigma gamma gamma gamma gamma sigma fi ff ff substituted approximate simplification counting solutions interesting computing simple upper lower bounds opposed complicated exact answers allow omega test simplify approximately 
omega test produce answers upper bound lower bound solutions key place approximation occurs performing elimination 
elimination cause omega test return real shadow allow eliminated variable take real values dark shadow conservative bound solution described pug :10.1.1.36.9420:10.1.1.36.9420
disjoint disjunctive normal form describe techniques allow simplify presburger formulas produce disjoint disjunctive normal form 
different techniques ffl summarizing uniformly generated sets number applications need express memory locations touched set array array loop runs 
naively building presburger formula represent memory locations touched loop nm nm result answer overlapping clauses 
building formula better way avoid problem 
ffl disjoint omega test projects away variable may need problem describe result union problems 
practice avoided need prepared 
omega test normally generates may overlapping 
describe way generate guaranteed disjoint 
ffl conversion disjoint disjunctive normal form describe method converting arbitrary formula disjunctive normal form disjoint disjunctive normal form 
summarizing uniformly generated sets computing number memory locations cache lines touched set set loops situation differ constant parts sor example fst elements touched loop gamma gamma gamma gamma gamma gamma gamma recognize uniformly generated set gj offsets gamma gamma set described exactly integer points inside convex hull points 
summarize elements touched iteration loop deltai deltaj gamma deltai deltaj deltai gamma deltaj elements touched entire execution loop deltai deltaj gamma gamma deltai deltaj deltai gamma deltaj standard techniques simplify eliminating deltai deltaj gamma gamma gamma gamma page describing set constant offsets linear constraints cases convert set constant offsets pm set linear constraints 
describe methods 
described ai programming methods 
create new variables set new constraints points summarized stencil summarized gamma gamma 
construct convex hull points check non unit strides points coordinate odd difference coordinates multiple 
hull stride constraints find conservative 
check see exact 
way count number solutions hull stride constraints compare number points 
problem technique depends constraint system able simplify integer programming problem proposition best 
omega test summarize point point specified way convex region plus stride constraints unable produce convex summary point stencil 
approach able summarize sets missed second 
experience techniques practice plan try whichever give better result case 
disjoint eliminating variables fi bz az ff positive integers afi abz bff 
real variable afi abz bff afi bff 
fourier variable elimination eliminates variable combining pairs upper lower bounds adding resulting constraints constraints involve produces set constraints solution exists real value satisfies original set constraints 
pug showed compute dark shadow set constraints set constraints solutions implies existence integer original set constraints satisfied :10.1.1.36.9420:10.1.1.36.9420
course solutions contained dark shadow 
example consider constraints fi fi gamma ff ff gamma fi fourier variable elimination find ff allow fi take non integer values 
dark shadow constraints ff 
fact equation solutions ff ff ff 
pug gave method generating additional sets constraints contain solutions contained dark shadow :10.1.1.36.9420
contain eliminated variable contain equality constraint flat 
equality constraint allows eliminate desired variable exactly 
example previously fi ff fi fi gamma ff ff gamma fi fi ff fi fi gamma ff ff gamma fi fi ff gamma fi gammaff ff gamma fi simplifying produces fl ff fl fl fl ff fl gamma fl fl ff fl fl goal way generate sets constraints possible 
unfortunately current situation solutions contained additional sets constraints overlap solutions dark shadow 
give technique eliminating integer variables produces disjoint subproblems 
contrast give standard algorithm performing elimination produces overlapping subproblems 
new algorithm number subproblems may larger fact disjoint valuable current applications 
example produced fi ff fi gamma ff ff gamma fi fi ff fi gamma ff ff gamma fi fi ff ff fi gamma ff ff gamma fi fi ff ff fi gamma ff ff gamma fi page simplifying produces ff ff clauses simplify false 
disjoint primarily useful projection step 
consider computing set constraints eliminated exactly problem 
say perform disjoint elimination get delta delta delta problem distribute disjoint union destroying disjoint property 
example disjoint disjoint 
fortunately problem severe 
frequently need eliminations 
need elimination postpone elimination 
forced perform multiple eliminations elimination done disjoint techniques described section transform entire formula disjoint disjunctive normal form 
converting arbitrary dnf formulas disjoint dnf formulas formula disjunctive normal form may overlapping conjunctions perform steps 
step check see conjunct subset conjunct pw 
eliminate subset 
step compute connected components conjunctions edge conjunctions overlap 
consider connected component separately steps 
step component pick conjunction extract 
selection criteria 
possible pick conjunction articulation point graph constructed step 
pick conjunction fewest constraints assume formula considered delta delta delta extract transform formula delta delta delta articulation point removal allow break delta delta delta disjoint sections delta delta delta delta delta delta delta delta delta distribute negated term disjoint sections delta delta delta delta delta delta delta delta delta step simplify term delta delta delta replace gist delta delta delta valid gist gist calculate gist delta delta delta gist delta delta delta gist perform disjoint negation delta delta delta disjoint negation delta delta delta distribute disjoint negation delta delta delta reapply techniques described convert disjoint dnf 
related examples nadia taw tf taw describes algorithm summing polynomial polytope 
tf estimate execution time loops evaluate load balance loop 
describes techniques roughly equivalent described sections 
rational bounds computes symbolic answers feasible computes average values 
describe compute upper lower bounds split problem compute exact answers 
significant differences techniques handling convex sums improvement general sums address 
algorithm convex sums page eliminate producing possibly overlapping subproblems false constraints involve lower bound fi bz upper bound az ff afi gamma gamma bff misses afi abz bff afi gamma gamma misses fi bz fi gamma gamma amax max coefficient upper bound amax gamma gamma gamma amax fi bz dark shadow contains integer integer eliminate producing disjoint subproblems false exists constraints ff cz ff gamma need perform parallel false ff cz gamma constraints involve lower bound fi bz upper bound az ff afi gamma gamma bff feasible afi gamma gamma bff misses afi abz bff afi gamma gamma gamma gamma gamma afi bff afi gamma gamma bff simplify check feasibility clause dark shadow contains integer integer algorithms integer variable elimination overlapping disjoint ffl variables summation eliminated predetermined order ffl attempt eliminate redundant constraints 
handles problem empty summations performing initial polyhedral splitting step described taw taw summation empty 
splitting step respects original elimination order may split summation pieces 
example taw gives example polyhedral splitting technique transforms gamma summations computed standard computer symbolic algebra techniques 
techniques follows example sigmai eliminate redundant constraint sigmai sum single upper lower bound sigmai gamma sum single upper lower bound sigmaj gamma gamma upper bounds sigmaj gamma gamma sigmaj gamma gamma gamma sum sigma mn gamma nm sigma gamma nm comparing technique find greater flexibility ability eliminate redundant constraints techniques efficient cases example needed consider terms 
techniques described sections useful contribution 
example mohammad constantine polychronopoulos hp hp describe method volume computation give examples 
example techniques compute sigmai eliminate redundant constraint sigmai sum sigmai gamma sum sigmaj gamma gamma upper bounds sigmaj gamma gamma sigmaj gamma gamma sum sigma gamma page sigma gamma gamman recognize second summation defined points realize defined degree polynomial linear term find gamma 
allows simplify expression sigma gamma sigma gamma polychronopoulos hp hp derive answer min gamma gamma min min gamma min max gamma defined positive 
answer derive gives answers form answer quite different min max expressions introduce 
developed way introducing min max result 
allows avoid splitting summation multiple upper lower bound results tend complicated 
decided general worth generating min max 
example second example hp hp min gammaj easily handled system sigmai ii eliminate redundant constraints sigmai gamma sum sigmaj gamma sum sigma comparison polychronopoulos techniques require steps example steps second example 
polychronopoulos hp hp describe technique detail 
give number rules transforming expressions xy gammax gammay describe decide rule apply 
tf assume summation performed predetermined order attempt eliminate redundant constraints 
comparing techniques theirs find fully defined easy apply number examples example hp harder system analyze 
example ferrante sarkar thrash fst give methods computing number distinct memory locations cache lines accessed loop nest 
information useful evaluating cache effectiveness 
example give calculating number distinct memory locations touched question phrased answered system follows sigmax gamma simplify omega test sigmax sigmax ff ff ff gamma sigmax sigmax ff sigmax example second example fst calculate number memory locations touched successive relaxation sor code techniques described section state solve shown similar fst assume 
calculate number cache lines touched need mapping array elements cache lines 
simple mapping state element array cache line gamma xi xi stands integer division 
mapping generate answer number cache lines touched loop sigmax deltai deltaj deltai gamma xi deltaj gamma deltai deltaj deltai gamma deltaj simplify omega test sigmax perform computations symbolically 
find loop touches sigma gamma distinct memory accesses sigma gamma xi sigma mod gamma assume general mappings cache lines wrap row don know alignment element array cache lines 
page sigmax deltai deltaj deltai deltaj gamma deltai deltaj deltai gamma deltaj simplify omega test sigmax gamma gamma put terms upper lower bounds sigmax gamma gamma upper bounds sigmax gamma gamma sigmax gamma gamma gamma sigmax gamma gamma sigmax sigmax sigmax computation number distinct memory locations touched sor loop distinct cache lines 
method described fst works simple cases ffl handle coupled subscripts iterations spaces ffl originally designed compute symbolic answers adapted ffl computes conservative approximation ffl uses expensive methods handle cache lines touched set comparing methods summarizing uniformly generated example elaborate example require utilize number techniques described 
mention additional techniques elaborated allow simplify result 
sigmai considering odd sigmai sigmai gamma simplify omega test sigmai ff ff ff ff sigmai fi fi gamma fi gamma fi deal projected clauses sigmai ff ff ff sigmai fi fi gamma fi sum ff ff fi fi gamma sum ff fi sigma sigma gamma additional simplification get better result 
guard term identical guard second term excludes 
checking find value clause ignore guard 
safely relax guard clause combine terms sigma gamma mod gamma mod mod mod gamma simplifying gives sigma gamma mod mod simplify recognizing mod mod sigma gamma mod described methods able count number integer solutions selected free variables presburger formula sum polynomial integer solutions selected free variables presburger formula 
answer symbolically terms symbolic constants remaining free variables presburger formula 
ability applications analysis transformation scientific programs 
page techniques described elaborate complicated 
necessitated desire method handle arbitrary presburger formula 
necessary applications counting distinct memory accesses cache line accesses array elements need communicated distributed process 
simpler applications requiring limited capabilities described tf hp simple important observations ffl summations variables presume order perform summation ffl eliminating redundant constraints useful march implemented complete system described 
learn efficient techniques counting solutions performing summations presburger formulas 
wayne kelly dave wonnacott close readings manuscript entire research team wayne kelly maslov evan rosser dave wonnacott implementation 
supported nsf pyi ccr packard fellowship 
info omega project exploring advanced constraint technology analyzing transforming scientific programs execution supercomputers 
topics investigating unified frameworks reordering transformations kp kp advanced forms dependence analysis pw pw techniques dealing polynomial constraints mp 
research implemented publicly available implementations research groups world 
info research project software obtained ffl email omega cs umd edu ffl anonymous ftp ftp cs umd edu pub omega ffl world wide web www cs umd edu projects omega ai francois irigoin 
scanning polyhedra loops 
proc 
rd acm sigplan symposium principles practice parallel programming pages april 
bey william beyer editor 
crc standard mathematical tables 
crc press 
fst ferrante sarkar thrash 
estimating enhancing cache effectiveness 
advances languages compilers parallel processing pages 
mit press 
gj gannon jalby 
strategies cache local memory management global program transformation 
journal parallel distributed computing pages 
hp polychronopoulos 
symbolic analysis basis parallelization optimization scheduling programs 
banerjee editor languages compilers parallel computing 
springerverlag august 
lncs vol 
proceedings sixth annual workshop programming languages compilers parallel computing 
hp polychronopoulos 
symbolic analysis basis parallelization optimization scheduling programs 
technical report csrd univ illinois august 
kp wayne kelly william pugh 
determining schedules performance estimation 
technical report cs tr dept computer science university maryland college park july 
appear parallel processing letters 
kp wayne kelly william pugh 
framework unifying reordering transformations 
technical report cs tr dept computer science university maryland college park april 
mp maslov william pugh 
simplifying polynomial constraints integers dependence analysis precise 
technical report cs tr dept computer science university maryland college park february 
submitted 
page pug william pugh :10.1.1.36.9420
omega test fast practical integer programming algorithm dependence analysis 
communications acm august 
pw william pugh david wonnacott 
going integer programming omega test eliminate false data dependences 
technical report cs tr dept computer science university maryland college park december 
earlier version appeared sigplan pldi conference 
pw david wonnacott 
evaluation exact methods analysis array data dependences 
sixth annual workshop programming languages compilers parallel computing portland august 
pw william pugh david wonnacott 
static analysis upper lower bounds dependences parallelism 
acm transactions programming languages systems 
accepted publication 
sch schrijver 
theory linear integer programming 
john wiley sons chichester great britain 
taw nadia 
parall automatique estimation des dur ees ex ecution allocation de processeurs 
phd thesis universit pierre marie curie april 
taw nadia 
estimation nested loop execution time integer arithmetics convex polyhedra 
proc 
international parallel processing symposium april 
tf nadia paul feautrier 
processor allocation loop scheduling multiprocessor computers 
proc 
international conference supercomputing pages july 
page 
