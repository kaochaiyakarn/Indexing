quasiquotation lisp alan bawden brandeis university bawden cs brandeis edu quasiquotation technology commonly lisp write program generating programs 
review history development technology explain works practice 
subject quasiquotation 
quasiquotation parameterized version ordinary quotation specifying value exactly holes left filled 
quasiquotation template 
quasiquotation appears various lisp dialects including scheme common lisp write syntactic extensions macros program generating programs 
goals 
wish simply introduce reader quasiquotation record history 
second wish draw attention appreciated synergy quasiquotation lisp expression data structures 
word lisp mean primarily lisp dialects common lisp scheme say usually true lisp dialects 
write examples lisp code write scheme write run correctly lisp dialects 
quasiquotation 
looking quasiquotation write program generating programs lisp consider happen programming language 
seeing easily accomplished help clarify truly useful integrated quasiquotation technology look 
quasiquotation suppose writing program generates program 
straightforward way program accomplish task textually construct output program string manipulation 
program probably contain statements look fprintf fprintf procedure convenient way generate desired code specialize required 
fprintf write tell glance fprintf statement generates syntactically legal statement looking sequence calls isn clear 
fprintf achieves central goal quasiquotation assists allowing write expressions look desired output possible 
write want output look modify slightly order parameterize 
fprintf easier write programs generate programs problems technology clear ffl parameters associated values 
count arguments occurrences matches 
large number parameters errors occur 
ffl string substitution underlies technology understanding syntactic structure programming language generated 
result unusual values parameters change meaning resulting code fragment unexpected ways 
consider happens operator precedence rules cause resulting code parsed presumably intended 
problem addressed moving parameter expressions template 
write subst left second problem flat character strings really way represent recursive structures expressions 
probably wind adopting convention inserts extra pairs parenthesis output just sure parses way intended 
identified goals successful implementation quasiquotation ffl quasiquotation enable programmer write wants output look modified slightly order parameterize 
ffl parameter expressions appear inside template positions values inserted 
ffl underlying data structures manipulated quasiquotation rich represent recursively defined structures expressions 
think ways pleasant 
technique employed users preprocessor reason 
shall see achievement goal lisp really shine 
quasiquotation lisp suppose writing lisp program generates lisp program 
highly unnatural lisp program accomplish task working character strings code previous section tokens preprocessor 
natural way lisp program generate lisp code lisp expression data structures lists symbols numbers suppose aim generate lisp expression array size vector set 
array name init val primitive lisp code construct list list list array size list vector set 
array name init val open question code readable code previous section repeated calls calling fprintf 
lisp quasiquotation facility write array size vector set 
array name init val backquote character precedes entire template comma character precedes parameter expression inside template 
comma described meaning unquote turns quotation backquote turns 
clear backquote notation trying express lisp implementation 
underlying technology 
answer expressions identical expressions 
identical sense 

identical 
lisp expression parser traditionally called read expands backquote followed template lisp code constructs desired expression 
write body exactly written list list list list quote body backquote expressions just handy notation writing complicated combinations calls list constructors 
exact expansion backquote expression specified read allowed build code constructs desired result 
possible expansion algorithm described appendix 
backquote notation doesn change fact program generating lisp program works manipulating lisp list structures 
clearly backquote notation achieves goals quasiquotation code closely resembles desired output parameter expressions appear directly values inserted 
third goal quasiquotation technology underlying data structures manipulates appropriate working programming language expressions 
immediately clear achieved goal 
list structure quite stark representation character strings pretty low level 
represent expressions list structure happier manipulating lists quasiquotation technology manipulated objects set data types designed specifically various different syntactic constructs language variables expressions definitions cond clauses 
abandoning character strings low level natural keep moving higher level data structures capture features domain 
unnecessary complexity 
problem strings string substitution didn respect intended recursive structure scheme exact expansion specified expands special expression 
seen programmer take advantage fact way wasn problematic am skeptical utility ignore 
expressions represented strings 
list structure substitution respect recursive structure expressions represented lists haven identified additional problems switching higher level representation solve 
additional data types procedures manipulate certainly introduce additional complexity system 
question complexity pay solving problem making convenient example designed set data types various programming language constructs prevent accidentally quasiquotation construct programs illegal syntax 
additional safety additional complexity worthwhile 
higherlevel representation enable powerful operations programming language fragments simply plugging quasiquotation templates 
additional functionality offset increased complexity 
possibilities ruled years form clearly superior representations quasiquotation appeared 
just don compelling reasons complicate matters moving higher level representation 
goals quasiquotation technology nicely achieved expression quasiquotation 
synergy fact wonderful synergy quasiquotation expressions 
yield technology powerful sum ideas taken separately 
saw section lisp code constructs non trivial expressions directly calling lisp list constructing procedures tends extremely unreadable 
experienced lisp programmers trouble seeing cons cond cons list list eq 
var list quote val expr clauses novice see equivalent quasiquotation cond eq 
var val expr clauses expressions core mccarthy original version lisp 
ability manipulate programs data important part lisp 
quasiquotation working expressions painful 
quasiquotation corrects important inadequacy lisp original expression toolkit 
benefits flow way 
seen character string quasiquotation way recursive data structures expressions 
data represented substitution quasiquotation templates works cleanly 
expressions correct inadequacy string quasiquotation 
quasiquotation expressions compensate weaknesses 
form remarkably effective flexible technology manipulating generating programs 
surprising quasiquotation didn official feature lisp dialect years invention lisp common lisp programmers years 
reader convinced quasiquotation lisp important idea proceed fill rest picture 
important points technology need 
need introduce additional feature called splicing 
second need take look happens nested 
splicing close needing splicing previous example 
recall cond eq 
var val expr clauses value variable clauses presumably list additional cond clauses built cond expression constructing 
suppose knew reason list include clause wanted supply 
write cond eq 
var val expr append clauses calls things append exactly quasiquotation supposed help avoid 
backquote notation suggest able write cond eq 
var val expr clauses unfortunately abuse lisp dot notation rejected lisp parser read 
fortunately common thing want backquote notation allows achieve goal writing cond eq 
var val expr clauses new character prefix comma similar plain comma prefix expression return list values spliced containing list 
expanded code read cons cond cons list list eq 
var list quote val expr append clauses reader finds expansion sympathy 
simple example clear value value normal splicing see 
normal splicing see 
splicing comes handy situations 
look bnf lisp dialect reveal kinds expressions sequence sub part occurs arguments function call variables lambda expression clauses cond expression variable binding pairs expression generating code uses kinds expressions splicing may prove useful 
analog splicing character string quasiquotation 
incidentally argument superiority expression quasiquotation 
example reader may wonder prefix comma period 
wasn chosen 
history section address question 
nesting program generating program generates program generating program 
situation case quasiquotation construct quasiquotation 
nested 
sounds kind highly esoteric construction needed compiler writers point fact fairly ordinary lisp programmers easily find situations need nest 
happens lisp macro facility works writing lisp macros lisp 
programmer starts writing macros matter time notices situation written bunch similar looking macro definitions 
clearly step design macro generate similar looking definitions 
order needs nested 
illustrate point imagine written macro definition define macro catch var expr call current continuation lambda var expr defines catch macro call catch escape loop car escape expanded binding var symbol escape expr list loop car escape executing body macro definition 
example definition body quasiquotation return call current continuation lambda escape loop car escape place original catch expression 
procedures accept single argument auxiliary procedure invoke special way fairly common occurrence 
calls procedures written lambda expression create auxiliary procedure 
may find writing macro similar catch programming languages macro facility different language write macros preprocessor 
macros defined actual lisp dialect am aware isn write lisp macros 
define macro collect var expr call new collector lambda var expr suspect ll writing instances kind macro definition may decide automate process writing macro defining macro define macro def caller abbrev proc define macro abbrev var expr proc lambda var expr previous macro definitions written def caller catch call current continuation def caller collect call new collector definition def caller completely straightforward wasn comma quote comma come 
new primitive notation comma 
notation traditional lisp quote notation way easily derived basic definitions 
arrived definition def caller manually expand quasiquotation notation definition catch define macro catch var expr list call current continuation list lambda list var expr don worry confused nested write def caller way define macro def caller abbrev proc define macro abbrev var expr list proc list lambda list var expr turning calls list back quasiquotation care treat proc expression constant yields original definition 
course lisp programmer comma quote comma time needs 
practice known nested quasiquotation clich 
lisp programmer uses nested quasiquotation knows clich es appear expression intermediate quasiquotation value substituted final result 
value appear expression intermediate quasiquotation value expression substituted final result 
value appear constant intermediate quasiquotation appear unchanged final result 
nested splicing interaction nesting splicing yields additional interesting fruit 
clich es listed previous section things occasionally prove useful 
illustrate possibilities consider just cases value appear expression intermediate quasiquotation value expression spliced final result 
value appear list expressions intermediate quasiquotation 
individual values expressions substituted final result 
intuitively effect causing comma mapped elements value expression 
making nested splicing properly cases difficult 
expander appendix gets right expense expanding code 
history name quasi quotation coined quine 
quine version quasiquotation character string 
explicit marker unquote greek letter implicitly marked replacement 
quine quasiquotation construct expressions mathematical logic just predict experience representing expressions forced adopt various conventions abbreviations involving parentheses 
clearly expressions 
mccarthy developed lisp expressions propose form quasiquotation 
inspired calculus artificial intelligence programming community expended lot effort learning program expressions list structure 
ai programs years developed lisp programming techniques involved expression pattern matching template instantiation ways connected today expression quasiquotation technology 
particular notion splicing described section clearly descended techniques 
years resembles today lisp quasiquotation notation closely notation mcdermott sussman conniver language 
conniver notation written respectively idea basically 
conniver construct seen similar possible comma character eventually came fill current role 
conniver manual credits mdl language inspiring conniver features 
mdl notation data structure construction related sufficiently different unwilling call direct ancestor today 
ll say issue section 
conniver entered lisp programmer toolkit 
mid lisp programmers personal versions wasn built lisp dialect 
personal knowledge history starts started programming lisp machine project mit 
time quasiquotation part lisp machine system 
notation modern notation indicate splicing 
obviously interfere nested quasiquotation didn bother commonly believed nested quasiquotation right 
set nested quasiquotation fail 
employing reasoning process outlined section developed test cases tried 
surprise worked perfectly 
problem simply able nested quasiquotation wanted bug 
knew nested quasiquotation fact wanted start new notation splicing 
suggested notion substitution help wonder lisp tried quasiquotation mixture 
expander time bugs handling nested splicing didn notice 
kind splicing see section 
thought pun 
members group thought confusing 
probably inspired scheme days just indicate splicing decided 
mcdermott altered conniver notation slightly changing form appeared 
far know problems nested splicing didn get worked 
january year guy steele circulated example nested levels deep 
remarked fairly obvious took tries get right 
responded analysis nested splicing observed order get nested splicing correct expansion algorithm appendix required 
correct semantics expansion algorithm quasiquotation observation appears 
started spell quasi quote hyphen 
guess result adoption special form named scheme 
standards common lisp scheme adopted modern notation 
related ideas ideas related quasiquotation think reader interested 
alternate views quotation backquote notation quasiquotation clearly inspired lisp forward quote notation ordinary quotation 
backquote notation abbreviation potentially complex series calls various list constructors forward quote notation abbreviation simple quote expression 
quote 
mccarthy invented quote expressions mechanism representing constants appeared expression language 
smith muller argued suspect mccarthy quote 
worried quote confuses levels representation 
quasiquotation migrated maclisp chosen mean destructive version splicing 
thought pun 
notation adopted common lisp 
replace lisp eval function line calculus notion normalization 
backquote followed expression contains commas indistinguishable front quote authors concerns front quote presumably concerns backquote 
interesting smith lisp muller lisp resemble mdl language expressions notationally distinct constants constants sense implicitly 
expression cdr 

returns deny mdl direct ancestry conniver modern lisp quasiquotation 
mdl conniver wandering dark looking convenient ways construct list structure 
solutions conniver may thought mdl 
light hindsight recognize conniver firmly traditional lisp path mdl stepped path started direction suggested smith muller 
parameterized code language adds backquote operator ordinary way specifying dynamically generated code 
expressions explicitly inspired lisp backquote construct ordinary data structures structures arrays build dynamic code objects 
surprising ordinary data structures representing programs character strings 
inside backquote indicate substitution dynamic code object 
splicing meaningless nest 
particularly interesting difference lisp quasiquotation code variables lexically enclosing code 
dynamic code objects closures 
backquote expression sort cross quasiquotation expression 
similar lamping system parameterization 
data expressions specify parameterized objects sort cross quasiquotation closure 
lamping motivated desire manipulate expressions way quasiquotation allow disconnecting context came 
systems demonstrate lot unexplored territory notion data notion expression 
self generation quasiquotation lisp complete mentioning contribution perennial problem writing lisp expression value 
notation enables elegant solutions problem solution due mike mcmahon personal favorite took lisp community discover synergy quasiquotation expressions 
acknowledgments parts trace lineage back electronic mail conversations drew mcdermott guy steele 
collecting additional information helpful discussions robert muller brian smith gerald jay sussman john lamping glenn burke jonathan bachrach 
olivier danvy thought world needed quasiquotation lisp 
julia lawall provided helpful feedback early drafts 
berman assisted preparation 
charniak riesbeck mcdermott 
artificial intelligence programming 
lawrence erlbaum assoc hillsdale nj edition 
engler hsieh kaashoek 
language fast efficient high level dynamic code generation 
proc 
symposium principles programming languages 
acm jan 
galley pfister 
mdl programming language 
tr mit lcs may 
kelsey clinger rees 
revised report algorithmic language scheme 
higher order symbolic computation 
appears acm sigplan notices september 
lamping 
unified system parameterization programming languages 
proc 
symposium lisp functional programming pages 
acm july 
mccarthy 
lisp programmer manual 
mit press 
mcdermott sussman 
conniver manual 
memo mit ai lab may 
muller 
lisp representation independent dialect lisp reduction semantics 
acm transactions programming languages systems oct 
pitman 
revised maclisp manual 
tr mit lcs may 
quine 
mathematical logic 
harvard university press revised edition 
smith 
reflection semantics lisp 
proc 
symposium principles programming languages pages 
acm jan 
steele jr jan 
electronic mail message 
steele jr common lisp language 
digital press second edition 
steele jr sussman 
revised report scheme dialect lisp 
memo mit ai lab jan 
weinreb moon 
lisp machine manual 
symbolics july 
expansion algorithm appendix contains correct expression quasiquotation expansion algorithm 
assume primitive lisp parser read quasiquotation expanded tagged quasiquotation markup 
primitive parser supply functions tag backquote 
predicate true result reading backquote followed expression 
tag comma 
predicate true result reading comma followed 
tag comma 
predicate true result reading comma followed expression 
tag data function applied object satisfies previous predicates 
return expression followed quasiquotation markup 
main entry point function qq expand applied expression immediately followed backquote character 
outermost backquote tag stripped qq expand called 
define qq expand cond tag comma 
tag data tag comma 
error illegal tag backquote 
qq expand qq expand tag data pair 
append qq expand list car qq expand cdr note embedded encountered qq expand recursively expanded expansion processed encountered 
qq expand list called expand parts quasiquotation occur inside list legal splicing 
similar qq expand qq expand constructs code returns value qq expand list constructs code returns list containing value 
define qq expand list cond tag comma 
list tag data tag comma 
tag data tag backquote 
qq expand list qq expand tag data pair 
list append qq expand list car qq expand cdr code created qq expand qq expand list performs list construction append list 
cons 
important order nested containing splicing properly 
code generated correct inefficient 
real lisp implementation optimization need done 
care taken perform optimizations alter behavior nested splicing 
properly optimizing quasiquotation expander common lisp appendix 
am aware existence correct optimizing quasiquotation expander scheme 
scheme implementations tested implement nested splicing correctly 
