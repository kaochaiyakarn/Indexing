flow sensitive type quali ers je rey foster alex aiken report 
ucb csd november computer science division eecs university california berkeley california flow sensitive type quali ers je rey foster eecs department university california berkeley berkeley ca cs berkeley edu alex aiken november system extending standard type systems ow sensitive type quali ers 
users annotate programs type quali ers inference checks annotations correct 
system type quali ers modeled ow sensitively underlying standard types unchanged allows obtain ecient constraint inference algorithm integrates ow insensitive alias analysis ect inference ideas linear type systems support strong updates 
demonstrate usefulness ow sensitive type quali ers nding number new locking bugs linux kernel 
standard type systems ow insensitive meaning value type 
important properties ow sensitive 
checking properties requires associating di erent facts value di erent program points 
shows extend standard type systems user speci ed ow sensitive type quali ers atomic properties re ne standard types 
system users annotate programs type quali ers inference checks annotations correct 
critical feature approach ow sensitivity restricted type quali ers decorate types underlying standard types unchanged allows obtain ecient type inference algorithm 
type quali ers capture natural class ow sensitive properties ecient inference type quali ers allows apply implementation large code bases user annotations 
example type quali ers consider type file operations les 
systems file operations certain ways le opened reading read opened writing written closed le accessed 
express rules ow sensitive type quali ers 
introduce quali ers open read write readwrite closed 
type open file describes le opened unknown mode type read file respectively write file le open reading respectively writing type readwrite file le open reading writing type closed file closed le 
quali ers capture inherently ow sensitive properties 
example close function takes open file argument changes le state closed file 
quali ers natural subtyping relation shown 
quali er closed incomparable quali ers le may closed open 
quali ers introduce subtyping common framework supports subtyping directly addition set quali ers users de ne partial order quali ers 
research supported part nsf ccr nasa contract 
nag nsf ccr darpa contract 

open read write readwrite closed subtyping relation file quali ers results build advances ow sensitive type systems cwm swm df previous ow insensitive type quali ers ffa 
main contribution practical ow sensitive type inference algorithm contrast type checking systems cwm swm df 
ow sensitive type inference algorithm practical solving constraints lazily 
analysis explicitly forming model store program point prohibitively expensive large code bases 
generating linear size constraint system original program solving portion constraints needed check quali er annotations algorithm able scale large examples 
system designed sound aim prove absence bugs just heuristically nding bugs 
example believe system integrated java sound manner 
shown soundness restrict section key new construct system see technical report fa 
remainder system viewed simpli cation swm believe straightforward prove soundness full type system techniques 
section report experience applications analyzing locking behavior linux kernel analyzing stream library usage application code 
system number new locking bugs including extend multiple functions case multiple les 
system architecture ow sensitive quali er inference algorithm interlocking components 
rst give overview major pieces 
expect programmers interact type system adding quali er annotations reviewing results inference 
seek system supports ecient inference straightforward programmer understand 
type inference system integrates alias analysis ect inference ideas linear type systems 
ow insensitive alias analysis construct model store 
alias analysis infers location result program expression expressions evaluate location may aliased 
ect inference lg calculate set locations expression evaluation 
ects analyzing function calls restrict see 
ect inference done simultaneously alias analysis 
model state program point store mapping locations types 
locations ow insensitive alias analysis allow type quali ers underlying standard types change execution 
represent stores constraint formalism 
store constructors model allocations updates function calls store constraints model branch program point represented store program point represented store compute linearity swm location program point 
informally location linear type system prove corresponds single concrete location execution non linear 
perform strong updates cwz locations linear weak updates locations non linear 
strong update change quali er location type arbitrarily 
weak updates change quali ers 
computing linearities important interesting ow sensitive properties require strong updates 
system described far serious practical weakness type inference may fail location strong update needed may inferred non linear 
address new annotation restrict 
expression introduces new name bound value name fresh location aliases values derived may location may linear may strongly updated location non linear 
ects enforce correctness restrict expressions soundness requires location appear ect ects increase precision analysis 
expression location determine examining ect change value stored analysis simply ow store preceding immediately passing application function called di erent contexts idea fully polymorphic locations 
related discuss threads related type systems data ow analysis tools nding bugs software 
type systems 
type system inspired region alias type checking systems designed lowlevel programs cwm swm wm 
language proposals vault df cyclone gmw adapt similar ideas checking high level programs :10.1.1.152.7398:10.1.1.14.7406
languages type checking require programmers annotate programs types 
contrast propose simpler expressive monomorphic type system designed ecient type inference 
system incorporates ect inference lg wri gain measure polymorphism 
type state system nil sy earliest incorporate ow sensitive type checking 
xu ow sensitive analysis check type safety machine code 
type systems developed java byte code sa incorporate ow sensitivity check initialization allow reuse local variable di erent types 
igarashi kobayashi ik propose general framework resource usage analysis associates trace object specifying valid accesses object checks program satis es trace speci cations :10.1.1.10.1756
provide inference algorithm unclear ecient practice invokes sub step unspeci ed algorithm check trace set valid 
flanagan freund ff type checking system verify java locking behavior :10.1.1.143.5635
java locks acquired released lexical discipline 
model locking linux kernel section allow non lexically scoped lock acquires releases 
subset system consisting alias analysis ect inference seen monomorphic variant region inference tt 
improvements region inference reported afl expensive precise method computing linearities 
data ow analysis 
type approach related data ow analysis asu di ers classical data ow analysis ways 
generate constraints stores types model program 
distinction forward backward analysis information may ow directions constraint resolution depending speci ed quali er partial order 
second explicitly handle pointers heap allocated data aliasing strong weak updates 
third distinction interprocedural intraprocedural analysis system 
strong weak update distinction rst described chase cwz 
techniques allow strong updates proposed data ow analysis programs pointers egh wl 
jagannathan system alias analysis higherorder languages 
linearity computation system corresponds computation similar technique gain polymorphism owing bindings function calls 
bug finding tools 
ast toolkit provides framework posing user speci ed queries syntax trees annotated type information 
ast toolkit successfully uncover bugs wei 
meta level compilation system nding bugs programs 
programmer speci es ow sensitive property nite state automaton 
program analyzed traversing control paths triggering state transitions automata particular actions program statements 
system warns potential errors automaton enters error state 
intraprocedural analysis lock usage linux kernel uncovered local locking bugs 
type system interprocedural locking bugs extended multiple functions case multiple les section 
newer meta level compilation ech includes interprocedural data ow unclear interprocedural data ow analysis handles aliasing 
lclint eva data ow tool checking properties programs 
lclint programmer adds extra annotations program just type quali er system 
lclint performs ow sensitive intraprocedural analysis programmer annotations function calls 
type system describe type system call value lambda calculus extended pointers type quali er annotations 
source language ref assert check variable integer function argument body expression application function argument expression ref allocates memory initializes expression dereferences pointer expression assigns value location points 
introduce quali ers source language adding new forms ffa 
expression assert asserts top level quali er expression check type checks top level quali er type inference algorithm divided steps 
perform initial ow insensitive alias analysis ect inference 
second generate solve store quali er constraints compute linearities 
alias analysis ect inference ow insensitive alias analysis ect inference translation system rewriting source expressions expressions decorated locations types ects 
target language ref assert check int ref target language extends source language syntax ways 
allocation site ref annotated location allocated function annotated type parameter ect calling function 
ects unions intersections ect variables represent unknown set ects ect constants stands read write allocation location 
ow sensitive analysis pointer types written ref maintain separate global store mapping locations types location contains data type type inference requires require 
function types contain ect calling function 
bugs newer version linux kernel examined direct comparison possible bugs purely intraprocedural analysis 
dom var int int ci fresh ref ref ref ref ref fresh ci deref ref ci fresh assign :10.1.1.152.7398
fresh lam fresh app assert assert assert check check check locs type alias ect inference gives rules performing alias analysis ect inference translating source programs target language 
translation system proves judgments meaning type environment expression translates expression type evaluation may ect set locations appearing type locs locs int locs ref locs locs locs locs assume locs empty equated constructed type 
de ne locs locs 
brie discuss rules var int standard :10.1.1.152.7398
lambda calculus variable value value accessing variable ect 
ref allocates fresh location 
add ect allocation ect record type location points 
deref evaluates yields pointer location 
look type location add ect set 
fun ref ref assert qa ref assert write cell assert qc 
check qc source program fun zg ref ref ref assert qa ref assert assert qc 
check qc target program ci ci ci int example alias ect analysis assign writes location 
note type type points equated 
types contain locations forces potentially aliased locations modeled location 
lam de nes function 
annotate function ect function body type parameter 
function types ect variable arrow ect inference easier 
notice creating function ect 
app applies function argument 
ect applying includes ect calling function represents 
notice argument type constrained equal type forces possibly aliased locations location 
assert check translated unchanged target language 
quali ers ow sensitive model rst ow insensitive step algorithm 
hides ects purely local state 
evaluating produces ect location accessed subsequent computation 
intersecting ects ects may visible locs increase precision ect inference turn increases precision ow sensitive type quali er inference 
syntactic rule needs applied function body fa 
shows example program translation 
syntactic sugar constructs encoded language assuming primitive combinator appropriate type 
example constant quali ers discrete partial order quali ers incomparable 
just returns wish check quali er check succeeds model update strong update 
assign distinct locations respectively 
called argument alias analysis requires types match type ref 
notice purely local body rule analysis hides ects ect contains writes parameter type ref 
size input program 
applying rules generates constraint system size suitable representation locs see fa 
resolving type equality constraints usual way uni cation takes time 
inverse ackerman function 
remaining constraints ect constraints form solve constraints demand step algorithm ask queries form answer queries single location time 
int int int ref ref ref fun ng store store compatibility rules stores quali ed types perform ow sensitive analysis check quali er related annotations 
second step algorithm take input program decorated types locations ects inference algorithm 
step treat locations ects rst step constants 
analyze input program extended types shown int ref alloc assign merge filter quali ed types standard types quali ers inserted level 
quali ers quali er variables stand currently unknown quali ers constant quali ers speci ed user 
assume supplied partial order type quali ers 
flow sensitive analysis associates store program point 
contrast step uses global store give types locations 
function types extended describes store function invoked describes store function returns 
location store associated linearity 
linearities unallocated locations linear locations admit strong updates non linear locations admit weak updates 
linearities form lattice 
addition linearities expected 
formally store vector assigning type linearity location computed alias analysis call vector ground store 
ground store write type write lin linearity explicitly associating ground store program point represent stores constraint formalism 
base case model unknown store store variable 
relate stores consecutive program points store constructors see build new stores old stores store constraints generated branches program point represented store program point represented store solution system store constraints mapping store variables ground stores 
solution satis es system store constraints constraint rules 
constraints stores yield constraints linearities types turn yield constraints quali ers stores 
constraint resolution algorithm exploit fact alloc merge filter assign types alloc lin lin lin merge lin lin lin filter lin lin assign lin lin linearities lin stores assign weak updates extending solution constructed stores interested quali er relationships solve little expensive store constraints possible 
ref require locations left right hand sides 
alias analysis enforces property corresponds standard requirement subtyping equality pointer constructor 
emphasize step treat locations constants attempt need unify distinct locations satisfy ref 
fun require ects constrained function types match exactly 
formalizes kinds store constructors showing solution mapping store variables ground stores extended constructed stores 
store alloc store location allocated 
allocating location ect types store increases linearity location 
store merge combines stores ect merge assigns type merge assigns type linearity de nition similar 
store filter assigns types linearities locations types locations unde ned linearities locations 
store assign store location type non linear require equal type corresponds weak update 
flow sensitive constraint generation gives type inference rules system 
system judgments form meaning type environment initial store evaluating yields result type new store write type associated store discuss computation dom var fresh int int fresh ref ref alloc ref ref deref ref assign assign sp fresh :10.1.1.152.7398
lam filter merge app assert assert check check constraint generation rules section 
function sp decorate standard type fresh quali er store variables sp fresh sp int int fresh sp ref ref fresh sp sp sp fresh brie discuss rules var int standard :10.1.1.152.7398
int pick fresh quali er variable annotate type 
ref adds new location store yielding store alloc 
type constrained compatible type deref looks type location current store quali er may appear type quali ers checked check see 
assign produces new store representing assignment type location 
lam type checks function body fresh initial store parameter bound type fresh quali er variables 
app constrains ensure type compatible argument type 
constraint filter ensures current state locations uses captured ect set compatible state expects 
nal store merge joins store function call result store function 
intuitively rule gives low cost polymorphism functions act join points locations 
merge zg filter assign assign qc int assign int alloc int alloc alloc int qa int alloc int alloc alloc qc int store constraints example assert adds quali er annotation program check checks inferred top level quali er compatible expected quali er shows stores store constraints generated example program 
simpli ed graph clarity 
initial store nal store 
undirected edges store constructors directed edge constraint step constraint generation 
store alloc models allocation location initialized type int fresh quali er variable 
ref generates constraint int require type compatible 
model allocation initialization similarly 
construct assign stores represent assignment statements 
give types int int respectively fresh quali er variables 
recursive call construct filter add inclusion constraint 
merge store represents state recursive call returns 
join branches conditional making edges notice cycle due recursion state ow merge turn ow quali er check requires quali er flow sensitive constraint resolution rules generate kinds constraints quali er constraints subtyping constraints store constraints right hand side store constraint store variable 
set type quali er constraints solved time known techniques ffa rm section focus computing solution set store constraints 
analysis precise locations possible non linear 
recall linearities naturally form partial order 
set constructed stores store constraints perform xpoint computation determine lin 
initially assume store location linearity 
exhaustively apply rules rule lin max lin reach xpoint 
rule derived 
implementation compute lin single pass store constraints tarjan strongly connected components algorithm nd cycles store constraint graph 
cycle containing allocation location set linearity stores cycle 
algorithm compute lin principle solve implied typing constraints simple procedure 
store variable initialize map sp sp assigning fresh quali ers type location program point 
replace uses logic 
apply closure rules constraints generated lin stores assign program size worst case naive algorithm requires space time build 
generate necessary type constraints 
cost high small examples 
reduce cost practice advantage observations 
locations ow insensitive 
location appears left hand side assignment type change 
give global type type program point 
imperative languages java function parameters major source locations 
languages parameters values associated memory location initialized subsequently changed 
adding extra store variables trades space time 
compute constructed store recursively reach variable store assignment see 
represent ect constraints compactly linear space deconstructing filter merge may require potentially linear time computation check recover ecient lookups replacing fresh store variable adding constraint 
computing compute requires map lookup 
course space store 
shown avoid cost completely 
apply transformation store merge constructed constraint inference 
store needs location 
assuming contains locations add needed locations lazily 
add location rst time analysis requests constraint 
stores constructed filter merge tend propagation location saving space filter propagate 
extend idea 
quali er variable inference maintains set possible quali er constants valid solutions 
set contains constant quali er uninteresting constrained quali er variables interesting 
type interesting quali er interesting uninteresting 
modify closure rules follows interesting lin assign interesting way location bound uninteresting type need propagate constraint graph 
gives algorithm lazy location propagation 
associate mark assign 
initially mark set indicating location bound uninteresting type 
quali er variable appears associate pair similarly assign stores 
constraint resolution set possible solutions changes call propagate propagate turn store constraint graph 
propagate called marked 
back prop forward prop appropriate constraints store reachable step may add store variable type constraints back prop forward prop generate may trigger subsequent calls propagate 
consider running example 
shows locations quali ers propagate store constraint graph 
dotted edges graph indicate inferred constraints discussed 
clarity omitted alloc edges base types 
type constraints shown directed edges 
example constraint int reduces constraint directed edge adding constraint cause propagation constraint variables 
notice assignment type int cause propagation 
constraint int alloc reduces int reduces constraint trigger propagation 
propagate rst pushes backward filter store 
propagation stops 
push forward graph reach store assign 
int forward propagation assumes strong update 
assign 
int contains interesting type propagated store forward graph 
path propagation stops filter 
path yields constraint notice constraint remains satis able 
constraint triggers propagation step 
time backward propagation reach filter continue 
eventually reach assign 
int add constraint turn triggers propagation assign 
int 
propagation step reaches adds generates constraint determine assign stores linear non linear 
update weak update yields equality constraint indicated double dotted line 
example illustrates kinds propagation 
location interesting propagated graph 
location propagated propagation stops strong update filter rule able prove purely local location hand purely local instances con ated admits weak updates 
restrict mentioned type inference may fail location strong update needed may non linear 
practice major source non linear locations data structures 
example linked list alias analysis distinguish lock lock non linear 
solution problem add new form language 
intuitively declares aliases particular value bound example restrict valid invalid rst assignment valid assignment forbidden restrict 
check restrict type rule integrated rst inference pass ref fresh ci ci 
ref locs restrict restrict restrict propagate case add sp ci marked mark forward prop back prop assign marked assign mark assign forward prop back prop case add sp ci alloc back prop merge back prop back prop filter back prop assign back prop forward prop add sp ci constructed case alloc forward prop merge forward prop forward prop filter forward prop assign forward prop lazy location constraint propagation merge filter assign assign assign constraint propagation bind type fresh location distinguish dereferences dereferences aliases constraint forbids location dereferenced notice dereferences allowed 
require escape scope locs add ect set 
translate restrict target language annotating location bound 
full discussion restrict including soundness proof technical report fa 
restrict locally recover strong updates 
key observation location location di erent 
linearity linearity 
body may able perform strong updates scope restrict ends may need weak update 
example suppose wish type check state change lock deep data structure location lock non linear 
atypical linux kernel code spin lock lock invalid 
non linear loc spin unlock lock assuming contains accesses aliases lock alias lock non linear location modify code type check follows restrict lock lock spin lock lock valid spin unlock lock ow sensitive step inference rule restrict ref alloc 
ref restrict assign restrict rule infer type pointer location 
create new store location allocated initialized 
added type environment evaluate result store store potentially weak update assigning contents 
merge rw filter rw merge lin lin lin filter lin lin rw new de nition allocation read write ects experiments prototype implementation analysis check program properties locking linux kernel device drivers uses stream library 
implementation sound unsafe features type casts variable argument functions ill de ned pointer arithmetic conversions arbitrary integers pointers 
currently attempt track ect features aliasing special case type casting result malloc functions 
combination system enforcing memory safety ccured implementation sound 
implementation allow strong updates locations containing functions 
improves eciency need recompute lin weak updates add constraints stores 
additionally observe allocations ect linearities types reads writes ect types linearities 
implementation improve precision analysis distinguishing read write allocation ects 
formally ects form introduce ects rw read write location allocation location 
modify ref yields ect deref assign yield ect rw 
modify de nition merge filter shown 
rst second case 
third case allocation ects computing linearity location merge store 
intuitively means functions allocate location act join points location respect linearities 
improve precision analysis distinguish read write ects 
linux kernel locking linux kernel includes primitive locking functions extensively device drivers void spin lock spinlock lock void spin unlock spinlock lock quali ers locked unlocked unknown check locking behavior 
subtyping relation locked unlocked 
assign spin lock type ref assign locked spinlock void unlocked spinlock omit function quali er irrelevant 
type spin lock requires lock passed argument unlocked see clause changes locked returning 
signature spin unlock locked unlocked exchanged 
implementation currently lacks parametric polymorphism inline calls spin lock spin unlock 
type signatures check kinds errors deadlocks acquiring lock held thread attempting acquire release lock unknown state 
analyzed device driver modules module includes les single driver 
module meet speci ed kernel interface model main function non deterministically calls possible driver functions registered kernel 
nished reviewing analysis results modules 
far apparently new locking bugs including spanned multiple les 
apparent bugs involve deadlocks function tries acquire lock held function call chain 
example emu module contains deadlock void void emu mute struct emu card card struct patch manager mgr card mgr spin lock mgr lock flags emu set oss vol card void emu set oss vol struct emu card card 
emu set volume gpr card void emu set volume gpr struct emu card card 
struct patch manager mgr card mgr spin lock mgr lock flags 
note detecting error requires interprocedural analysis 
goals understand system fails type check real programs 
categorized type error earlier experiment separately analyze driver les remove quali er locked unlocked incomparable 
experiment les fail type check les locking bugs remaining les type errors 
half type errors due incorrect assumptions eliminated moving module analysis remaining type errors fall main categories 
cases problem alias analysis strong type check program current implementation parametric polymorphism store locations 
plan add feature techniques rf 
common situation multiple aliases location alias code interest type check pattern restrict 
surprisingly larger programs problems spurious aliasing believe polymorphism restrict important large programs 
common class type errors arises locks conditionally acquired released 
case lock acquired predicate true 
lock released tested check lock held 
system path sensitive tool signals type error point path lock acquired joins path lock acquired single le experiments 
examples rewritten little ort pass type system 
opinion usually code clearer safer duplication test invites new bugs program modi ed 
improvements expect dynamically correct programs type check 
propose solution 
quali er represents unknown state 
information constraints automatically insert coercions needed 
execution coercions perform runtime tests verify locks correct state 
approach introduce dynamic type checking situations prove safety statically 
added restrict annotations emu module linux kernel module yielded largest number false positives non linear locations strongly updated 
restrict eliminated false positives 
supports belief restrict right tool dealing necessarily conservative alias analysis 
restrict annotations needed current lack location polymorphism leave accurate assessment burdensome restrict 
open read write readwrite open closed read write readwrite subtyping relation stream library quali ers stream library mentioned stream library interface contains certain sequencing constraints 
example le opened reading read 
special property stream library result fopen tested null fopen may may succeed 
model stream library le states quali er partial order 
partial order extends partial order additional quali ers open read write readwrite quali er stands le opened state checked null 
type signature fclose ref assign closed file int open file type signature fopen mode assign alloc mode file ref closed file mode passed parameter fopen function 
practice mode usually constant string determine correct mode quali er read write readwrite simple syntactic comparison possible mode strings 
determine mode quali er syntactically issue warning mark le open functions read write les require appropriate quali ers le arguments 
example fgetc function reads character stream signature ref int read file quali ers type check code fragment file fopen filename null fgetc file fclose file printf failed open filename call fopen syntactically recognize string determine le opened read 
location corresponding opened le type read file 
treat size preprocessed lines code flow sensitive flow insensitive parsing size preprocessed lines code resource usage module analysis comparison pointer location null kind type case 
analyze true branch starting store assign read file analyze false branch starting store assign closed file 
conditional constraints relate read quali er read true branch 
class stream library usage errors tool detect includes les having opened checked null les opened incompatible mode les accessed closed 
tried tool application programs man sendmail 
primarily interested performance tool complex application see expect nd latent stream library usage bugs mature programs 
nd minor bug sendmail opened log le closed circumstances 
precision eciency algorithm described section carefully designed limit resource usage 
shows time space usage module analysis versus preprocessed lines code linux kernel modules 
experiments done dual processor mhz pentium iii gb memory running redhat 
divide resource usage parsing type checking ow insensitive analysis analysis 
flow insensitive analysis consists alias ect inference ow insensitive quali er inference ffa 
flow sensitive analysis consists constraint generation resolution described sections including linearity computation 
graphs show space overhead ow sensitive analysis relatively small appears scale large modules 
modules space usage ow sensitive analysis space usage ow insensitive analysis 
running time analysis variable absolute running times factor ow insensitive running times 
analysis sendmail preprocessed source lines took seconds mb man preprocessed source lines took seconds mb 
time usage sendmail suggests stream library analysis expensive linux kernel locking analysis 
higher running time sendmail uses stream operations freely typical linux kernel module uses spin locks 
algorithm demand driven demand means computation 
system extending standard type systems ow sensitive type quali ers 
lazy constraint resolution algorithm infer type quali er annotations shown analysis ective practice nding number new locking bugs linux kernel 
afl alexander aiken manuel ahndrich levien 
better static memory management improving region analysis higher order languages 
proceedings acm sigplan conference programming language design implementation la jolla california june pages 
rita william landi 
extended form alias analysis dynamic allocation 
proceedings nd annual acm sigplan sigact symposium principles programming languages pages san francisco california january 
asu alfred aho ravi sethi je rey ullman :10.1.1.152.7398
compilers principles techniques tools 
addison wesley 
cwm karl crary david walker greg morrisett 
typed memory management calculus capabilities 
proceedings th annual acm sigplan sigact symposium principles programming languages san antonio texas january pages 
cwz david chase mark wegman kenneth zadeck 
analysis pointers structures 
proceedings acm sigplan conference programming language design implementation pages white plains new york june 
df robert deline manuel ahndrich :10.1.1.14.7406
enforcing high level protocols low level software 
proceedings acm sigplan conference programming language design implementation pages snowbird utah june 
dawson engler benjamin chelf andy chou seth hallem 
checking system rules programmer written compiler extensions 
fourth symposium operating system design implementation san diego california october 
ech dawson engler david yu chen seth hallem andy chou benjamin chelf 
bugs deviant behavior general approach inferring errors systems code 
proceedings th acm symposium operating systems principles ban canada october 
egh emami rakesh ghiya laurie hendren 
context sensitive interprocedural points analysis presence function pointers 
proceedings acm sigplan conference programming language design implementation pages orlando florida june 
eva david evans 
static detection dynamic memory errors 
proceedings acm sigplan conference programming language design implementation pages philadelphia pennsylvania may 
fa je rey foster alex aiken 
checking programmer speci ed non aliasing 
technical report ucb csd university california berkeley october 
ff cormac flanagan stephen freund :10.1.1.143.5635
type race detection java 
proceedings acm sigplan conference programming language design implementation vancouver canada june pages :10.1.1.152.7398
ffa je rey foster manuel ahndrich alexander aiken 
theory type quali ers 
proceedings acm sigplan conference programming language design implementation pages atlanta georgia may 
manuel ahndrich jakob rehof das 
scalable context sensitive flow analysis instantiation constraints 
proceedings acm sigplan conference programming language design implementation vancouver canada june pages :10.1.1.152.7398
gmw dan grossman greg morrisett wang trevor jim michael hicks james cheney 
cyclone user manual 
technical report department computer science cornell university november 
current version www cs cornell edu projects cyclone 
ik atsushi igarashi naoki kobayashi :10.1.1.10.1756
resource usage analysis 
appear proceedings th annual acm sigplan sigact symposium principles programming languages portland oregon january 
suresh jagannathan peter thiemann stephen weeks andrew wright 
single loving analysis higher order languages 
proceedings th annual acm sigplan sigact symposium principles programming languages san diego california january pages 
lg john lucassen david gi ord 
polymorphic ect systems 
proceedings th annual acm sigplan sigact symposium principles programming languages pages san diego california january 
george necula scott weimer 
ccured type safe retro tting legacy code 
appear proceedings th annual acm sigplan sigact symposium principles programming languages portland oregon january 
robert callahan 
simple comprehensive type system java bytecode subroutines 
proceedings th annual acm sigplan sigact symposium principles programming languages san antonio texas january pages 
rf jakob rehof manuel ahndrich 
type flow analysis polymorphic subtyping 
proceedings th annual acm sigplan sigact symposium principles programming languages pages london united kingdom january 
rm jakob rehof torben 
mogensen 
tractable constraints finite semilattices 
radhia cousot david schmidt editors static analysis third international symposium volume lecture notes computer science pages aachen germany september 
springer verlag :10.1.1.152.7398
sa raymie stata mart abadi 
type system java bytecode subroutines 
proceedings th annual acm sigplan sigact symposium principles programming languages san diego california january pages 
swm frederick smith david walker greg morrisett 
alias types 
gert smolka editor th european symposium programming volume lecture notes computer science pages berlin germany 
springer verlag :10.1.1.152.7398
sy robert strom yemini 
typestate programming language concept enhancing software reliability 
ieee transactions software engineering january 
tt mads tofte jean pierre talpin 
implementation typed call value calculus stack regions :10.1.1.152.7398
proceedings st annual acm sigplan sigact symposium principles programming languages pages portland oregon january 
wei daniel weise 
personal communication 
wl robert wilson monica lam 
ecient context sensitive pointer analysis programs 
proceedings acm sigplan conference programming language design implementation la jolla california june pages 
wm david walker greg morrisett 
alias types recursive data structures 
international workshop types compilation montreal canada september 
wri andrew wright 
typing ect inference 
bernd krieg br editor th european symposium programming volume lecture notes computer science pages rennes france february 
springer verlag :10.1.1.152.7398
xu thomas reps barton miller 
typestate checking machine code 
david sands editor th european symposium programming volume lecture notes computer science pages genova italy 
springer verlag :10.1.1.152.7398

