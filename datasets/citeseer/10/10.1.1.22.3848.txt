coming age software architecture research past decade software architecture research emerged principled study structure software systems especially relations subsystems components 
roots qualitative descriptions useful system organizations software architecture matured encompass broad explorations notations tools analysis techniques 
initially research area interpreted software practice offers concrete guidance complex software design development 
understand evolution prospects software architecture research examining research paradigms establish results 
part paradigms software engineering 
advance fundamental understanding posing research questions kinds applying appropriate research techniques differ type problem yield correspondingly different kinds results require different methods validation 
unfortunately paradigms recognized explicitly carried correctly consistently accepted valid 
retrospective decade plus software architecture research examines maturation software architecture research area tracing types research questions techniques various stages 
see early qualitative results set stage precision formality automation results build time 
generates advice field projections impact 
keywords software architecture research paradigms mary shaw institute software research international carnegie mellon university pittsburgh pa mary shaw cs cmu edu 
software architecture relatively young area software engineering 
assess progress maturity prospects examine growth area backdrop normal growth maturity software engineering paying special attention way design carry research projects 
riddle described natural characteristics maturing software technology 
elaborate model considering institutional progress 
comparing highlights software architecture model assess progress maturity 
maturity model provides framework examining software architecture research detail 
examine various kinds research problems investigate approaches 
provides baseline assessing state software architecture research 
understanding software architecture area context normal progress suggests objectives opportunities 

technologies mature riddle reviewed number software technologies see develop propagate 
typically takes years technology ready 
identify typical phases basic research 
investigate basic ideas concepts put initial structure problem frame critical research questions 
concept formulation 
circulate ideas informally develop research community converge compatible set ideas publish solutions specific subproblems 
development extension 
preliminary technology clarify underlying ideas generalize approach 
internal enhancement exploration 
extend approach domain technology real problems stabilize technology develop training materials show value results 
external enhancement exploration 
similar internal involving broader community people weren developers show substantial evidence value applicability 

develop production quality supported versions technology market technology expand user community riddle timelines software technologies progressed phases 
data types information hiding important precursors software architecture noted transition points formulation information hiding shift basic research concept formation data type languages shift concept formation development extension major publications frequent appearance concept new programming languages clu shift internal exploration propagation data types technologies affirm program verification system shift external exploration 
study ended opportunity note influence data types object oriented programming techniques incorporation objects classes new programming languages 
technologies mature institutional provisions distributing results change 
informal discussions colleagues progress products marketplace 
way see preliminary results phases position papers workshops research conferences 
ideas mature results appear conferences journals larger conferences set tracks featuring technology eventually results appearing justify topical conferences 
books synthesize multiple results help move technology middle phases 
university courses continuing education courses standards indicate 
data types emerged smaller community today somewhat different institutions 
see institutional shifts 
informal group researchers working aspects data types met regularly twice year mid late format resembles today research workshops 
sigplan notices provided forum similar today research workshop proceedings web distribution reports 
parnas led sustained research program began testing information hiding ideas small examples early culminated large scale demonstration applying ideas clean specification avionics mid 
mid strawman requirements ada programming language design clearly appealed ideas data types 
data type ideas incorporated radical revision undergraduate data structures course classroom tested late disseminated textbook 
data type research results enter widespread directly merged inheritance results objectoriented design implementation influencing class package constructs object oriented programming languages 
verification aspects data types slower enter practice 

maturation software architecture software architecture principled study structure software systems especially relations subsystems components 
roots qualitative descriptions useful system organizations software architecture matured encompass broad explorations notations tools analysis techniques 
initially research area interpreted software practice offers concrete guidance complex software design development 
software architecture research overlaps interacts software families component reuse software design specific classes components com product line program analysis 
productive attempt rigid separation areas research certainly contribute 
way see growth field examine rate earlier results serve building blocks subsequent results 
rough estimate provided citation counts papers software architecture title 
sample citations researchindex database virtually cited papers published sharp increases numbers citations papers published papers published 
widely cited dozen entries published 
include books papers dealing architectures particular domains papers presenting surveys models field formalizations architecture description language reverse engineering :10.1.1.135.5430
unsurprisingly generally represent phases development 
imperfect estimate may indicates substantial growth balance exploration specific problems generalization model development 
highlights field development 
chronology linear riddle model suggest different aspects field evolve different rates transitions phases happen instantly publication dates lag actual different amounts 
progress corresponds fairly model 
basic research long complex software systems developed designers described structures box line diagrams informal explanations 
designers recognized stylistic commonalities structures exploited styles ad hoc ways 
structures referred architectures knowledge common styles systematically organized taught 
late people began explore advantages deliberately designed specialized software structures specific problems 
addressed software system structures particular product lines application domains including missile control 
organized informal knowledge common software structures architectural styles variety problem domains 
cataloged existing systems identify common architectural styles pipe filter repository implicit invocation cooperating processes 
complementary lines research led models explaining architectural styles widely cited papers established structure field :10.1.1.135.5430
concept formulation basic models elaborated explored architecture description languages early formalization classification 
took place mid continues new ideas take shape 
architecture description languages explored variety aspects architecture 
languages included aesop exploiting specific properties styles exploring power particular event style darwin design specification dynamic distributed systems meta real time avionics control rapide simulation analysis dynamic behavior expressed posets unicon extensible set connectors styles compilation code wright component interaction 
formalizations developed parallel language development 
integral language darwin rapide wright cases independent formalization style formal analysis inconsistency specific architectural model 
recognition multiple views reconciled architectural analysis helped frame requirements formalism 
early narrative catalogs styles expanded taxonomies styles elements support styles 
common forms cataloged explained patterns 
early book ideas set stage development 
development extension focus unifying refining initial results 
acme architectural interchange language began goal providing framework move information architecture description languages grown integrate design analysis development tools 
refinement taxonomies architectural elements languages continued 
institutions area maturing 
transactions software engineering special issue software architecture 
special roadmap track icse conference included software architecture topics survey 
current icse sessions architectural topics affiliated tutorials related uml clear architectural elements 
standalone conference working ieee ifip conference software architecture held august sponsors conference new ifip working group 
internal enhancement exploration architectural styles commonly informally design guides 
explicit attention aspect design increasing result gaining experience 
formal analyses real system designs done 
example architectural specification higher level architecture distributed simulation able identify inconsistencies implementation saving extensive redesign 
books application research practice set stage external exploration 
external enhancement exploration unifications matured useful outside developer groups 
uml leadership rational integrated number design notations developing method applying systematically 
connection concrete analysis code fleshed notations gained wide audience 
sei architecture tradeoff analysis method supports analysis interaction attributes attributes 
production ready technology standards 
standards particular component families com corba interfaces xml exist reflect component reuse interests architectural interests 
ieee standard attempts codify current best practices insights systems software engineering communities provisions evolution 
current status fair say software architecture phase development extension enhancement exploration 
ideas tools exploited practice technologies mature 
consistent shorter year maturity cycle 
research remains done especially area showing range utility various styles formalisms design techniques tools 
turn detailed discussion research process 

software engineering research paradigms software engineering research motivated problems arise production real world software 
problems complex common identify research setting simpler real problem captures essential aspect 
identify common forms research settings narrative characterization phenomena rigorous analytic models 
researchers repertoire approaches methods yield variety research products including system prototypes procedural techniques models degrees rigor 
research settings software engineering research addresses particular classes problems 
polya distinguished problems find problems prove form techniques obtain solutions 
similarly jackson distinguishes classes software problems develops theory problem frames classify analyze structure problems 
building shaw garlan model progressive codification similar distinctions different types research problems 
technical ideas qualitative descriptions problems practice gradually precise powerful practical formal knowledge grow tandem 
aspect software development comes better understood powerful specification mechanisms viable turn enables powerful technology 
stages codification relies different kind understanding different approaches research 
general classes research setting kinds questions posed examples data types include research setting sample questions examples data types feasibility 
possible accomplish 
characterization method means generalization important characteristics 

exactly mean 
varieties related 
accomplish 
better way accomplish 
automate doing 
true 

selection decide 
possible describe relation components software system 
important information share hide component 
incorporate data types programming language 
formal relation specification data type implementation 
organization choose user interface component system 
examples software architecture include feasibility 
early architecture description languages showed possible specify component interactions compile specification including generation glue code connectors 
characterization 
early models structure field characterized phenomena terms explained :10.1.1.135.5430
method means 
papers investigate architectures particular classes systems finding ways improving ways design develop systems 
generalization 
taxonomies elements styles built generalized early characterizations 
patterns identify conceptual units regularly design 
selection 
decision support choosing system structure 
architecture tradeoff analysis method helps selection supporting analysis interaction attributes 
research approaches methods products software engineering researchers approach problems variety ways 
distinguish tangible results research project 
research product qualitative model research approach method organize report interesting observations world 
create defend generalizations real examples 
structure problem area formulate right questions 
careful analysis system development 
technique invent new ways tasks including procedures implementation techniques 
develop technique choose alternatives system embody result system system development source insight carrier results empirical predictive model analytic model develop predictive models observed data develop structural quantitative symbolic models permit formal analysis examples early architectural models architectural patterns product line domain specific software architectures uml support objectoriented design architecture description languages especially acme hla specification com inconsistency analysis validation techniques results suffice :10.1.1.135.5430
step neglected results validated way show satisfy requirement posed research setting 
depending way solution created validated may confidence correctness adequacy generality 
ideas mature rigor detailed analysis required advance knowledge 
describing result helpful explicit degree precision rigor purports achieve 
brooks proposes recognizing kinds results individual criteria quality findings 
established scientific truths judged truthfulness rigor observations 
reports actual phenomena judged interestingness rules thumb 
generalizations signed author fully supported data judged usefulness freshness criterion 
argue narrower standard require quantitative data experimental results research 
take nuanced position different types results value rigorous results emerge time cumulative evidence building rigorous experiments base informal experience 
words engineers best available information doing consider carefully trust result 
researchers course obligation explain clearly extent results support hypotheses solve problems claim solve provide validation results 
validation entails showing specific product research satisfies idealized problem research setting result helps solve original motivating problem 
papers validate result research setting omitted 
software engineering excellent examples rare inadequate discussion altogether common 
formal research provides verification results sullivan formal analysis inconsistency com specification provides example verification carrying result back original problems 
noted early architecture description languages showed possible specify component interactions compile specification including generation glue code connectors 
extent projects addressed sheer feasibility questions implementation working system constitutes validation 
early models structure field originally supported persuasion :10.1.1.135.5430
time passed models built refined cumulative validation includes experience 
techniques convincingly validating kind software engineering research result technique character validation persuasion technique design example implementation system technique evaluation descriptive model qualitative model empirical quantitative model analysis analytic formal model empirical predictive model experience qualitative descriptive model decision criteria empirical predictive model thought hard believe way system constructed walking example shows idea works prototype system exists code concrete form represented set procedures criteria object rates comparison objects making subjective judgments checklist counting measuring facts consequences rigorous usually symbolic form derivation proof predicted model controlled situation usually statistical analysis evaluate results experience observations result actual practice report form prose narrative comparison systems actual data practice usually statistical analysis brooks observations rules thumb correspond qualitative descriptive models 
kinds inadequate arguments appear entirely software engineering literature 
sets improve current practice proposes new technique implements tool support technique fails collect evidence comparing new technique tool practice purports improve 
second proposes new technique applies toy example claims contribution form particularly unsatisfactory example related practical problem 
selecting research strategy research strategy software engineering problem identifies research setting addresses fundamental issue problem matching approach validation technique 
different approaches appropriate different settings similarly different validation techniques appropriate different types results 
judicious selection compatible settings approaches research products validation techniques critical part designing research project 
example outset serious question achieved simply exhibiting implementation validation 
question improve current practice implementation probably completely unsatisfactory sole evidence 
words look works sufficient proof original question done 
ideas mature practical technologies character open questions changes 
clear articulation issues may significant contribution outset questions technology enters practice may involve formal analysis evaluation effectiveness relative technologies 
essential questions change idealized research settings suitable approaches research products appropriate validation techniques 
offer observations research techniques strategies sense brooks rules thumb 
open refinement usefulness judged guide researchers careful design projects reports results 


see software architecture reaching point growing research laboratories responsibilities maturity 
brings additional responsibility show just ideas promising sufficient grounds continue research effective necessary grounds move practice 
result software architects content simply doing research style past decade 
certainly new ideas explored form attend making existing results robust rigorously understood ready move application 
lesson software engineering 
notwithstanding years existence software engineering widely recognized widely appreciated set research paradigms way parts computer science 
don recognize research strategies establish results 
poor external understanding leads lack appreciation respect 
poor internal understanding leads poor execution especially validation poor appreciation expect project result 
may secondary effects way choose problems 
challenge software engineering think research models carefully learn determine trust put results take effort validate individual research papers long term projects 

acknowledgments appreciate patience colleagues institute software research international carnegie mellon helping ideas especially david garlan students spring course started serious exploration research paradigms software engineering 
appreciate david notkin evening open mike sessions fse conference willingness raise related questions repeatedly 
especially appreciate invitation keynote talk icse presents ideal forum raise issues software engineering community generally software architecture community 

gregory abowd robert allen david garlan 
style understand descriptions software architecture proc 
st acm sigsoft symposium foundations software engineering december gregory abowd robert allen david garlan 
formalizing style understand descriptions software architecture 
acm tr software engineering methodology 
robert allen david garlan 
formalizing architectural connection 
proc th international conference software engineering may pp 

robert allen david garlan james 
formal modeling analysis hla component integration standard 
proc th intl symposium foundations software engineering fse november 
gregory andrews 
paradigms process interaction distributed programs 
acm computing surveys vol march pp 

len bass paul clements rick kazman 
software architecture practice 
addison wesley blinn 
formal real time architecture specification analysis 
th ieee workshop real time operating systems software may 
grady booch 
uml users guide 
addison wesley chicago il 
frederick brooks jr grasping reality illusion interactive graphics serving science 
proc 
acm sigchi human factors computer systems conference may pp 

buschmann meunier rohnert stal pattern oriented software architecture system patterns 
wiley sons chapman mehrotra van zima 
software architecture multidisciplinary applications integrating task data parallelism 
tech 
rep icase nasa langley research center hampton va mar 
software architecture proc 
th int 
conf 
modelling techniques tools computer performance evaluation torino feb 
cremer kearney romano 
software architecture scenario control iowa driving simulator 
proc conference computer generated forces behavioral representation norman delisle david garlan 
formally specifying electronic instruments 
proc 
fifth international workshop software specification design may 
department defense 
strawman requirements higher order programming languages 
frank hans 
programming large versus programming small 
ieee tr software engineering vol 
se june pp 

david garlan 
research direction software architecture 
acm computing surveys vol pp 

david garlan robert allen john 
exploiting style architectural design environments 
proc sigsoft nd acm sigsoft symposium foundations software engineering december pp 

david garlan robert monroe david 
acme architecture description interchange language 
proc cascon november pp 
david garlan perry 
special issue software architecture ieee tr software engineering vol april pp 
david garlan mary shaw 
software architecture 
advances software engineering knowledge engineering volume 
world scientific publishing 
david garlan 
software architecture roadmap 
software engineering proceedings nd international conference software engineering acm press gerhart musser thompson baker bates erickson london taylor 
overview affirm specification verification system 
information processing ed october pp 

mark goodwin marty kushner domain analysis avionics domain architecture generation environment domain specific software architecture 
adage ibm 
hoare 
proofs correctness data representations 
acta informatica vol 
pp 

nord 
applied software architecture 
addison wesley ieee std recommended practice architectural description software intensive systems 
ieee 
michael jackson 
problem frames analyzing structuring software development problems 
addison wesley 
kazman barbacci klein re experience performing architecture tradeoff analysis proc icse may 
kazman clements bass abowd 
classifying architectural elements foundation mechanism matching proc 
compsac international computer software applications conference august pp 


view model software architecture 
ieee software nov 
kumar spafford 
software architecture support misuse intrusion detection 
proc th national information security conference pp 
thomas lane 
studying software architecture design spaces rules 
technical report cmu sei tr esd tr carnegie mellon university november 
leung baumgartner hwang morgan tu 
software architecture workstations supporting multimedia conferencing packet switching networks 
ieee journal selected areas communications vol april pp 
liskov zilles 
programming data types 
sigplan notices april 
liskov zilles 
specification techniques data abstractions 
ieee tr software engineering vol 
se march pp 

liskov clu manual springer verlag 
locke 
software architecture hard real time applications cyclic executives vs fixed priority executives 
journal real time systems vol march pp 

luckham augustin kenny bryan mann 
specification analysis system architecture rapide 
ieee tr software engineering vol april pp 
michael michael zyda david pratt paul barham steven network software architecture large scale virtual environments 
presence vol 

fall 
magee dulay eisenbach kramer 
specifying distributed software architectures 
proc th european software engineering conference esec september medvidovic robbins taylor 
object oriented typing support architectural design style 
proc st working ifip conference software architecture february 
medvidovic taylor 
framework classifying comparing architecture description languages 
proc th european software engineering conference lecture notes computer science pages september 
mehta medvidovic 
taxonomy software connectors 
proc 
international conference software engineering 
le metayer 
software architecture styles graph 
proc th acm sigsoft symposium foundations software engineering november pp 
graham eds domain specific software architecture program technical report cmu sei sr software engineering institute carnegie mellon university 
nec 
researchindex neci scientific literature digital library citeseer nj nec com cs penny nii 
blackboard systems 
ai magazine 
parnas 
criteria decomposing systems modules 
communications acm vol 
december pp 

parnas clements weiss 
modular structure complex systems 
ieee tr software engineering vol 
se march pp 

perry wolf :10.1.1.135.5430
foundations study software architecture 
acm sigsoft software engineering notes pp 
october 
george polya 
solve 
princeton university press reissue edition 
samuel william riddle 
software technology maturation 
proc th international conference software engineering may pp 

mary shaw 
higher level abstractions software systems 
proc 
del su october printed rank xerox invited pp 
revised larger scale systems require higher level abstractions proc 
th int workshop software specification design pittsburgh may pp 
mary shaw paul 
clements 
field guide preliminary classication architectural styles software systems 
compsac international computer software applications conference august pp shaw deline klein ross young 
abstractions software architecture tools support 
ieee tr software engineering vol 
april 
mary shaw david garlan 
characteristics higherlevel languages software architecture 
technical report cmu cs 
appears cmu sei tr esc tr 
mary shaw david garlan 
formulations formalisms software architecture 
jan van leeuwen ed computer science today trends developments lecture notes computer science volume pp 
springer verlag 
mary shaw david garlan 
software architecture perspectives emerging discipline 
prentice hall 
kevin sullivan socha 
analysis conflict interface negotiation aggregation microsoft component object model 
ieee tr software engineering july august 
tichy lukowicz prechelt heinz 
experimental evaluation computer science quantitative study 
systems software vol 
pp 

walter tichy 
computer scientists experiment 
reasons avoid experimentation 
ieee computer vol 
may 
kim walden jean marc 
seamless object oriented software architecture analysis design reliable systems 
prentice hall 
wulf london shaw 
construction verification programs 
ieee tr software engineering vol 
se december pp 

wulf shaw global variables considered harmful sigplan notices vol 
feb pp 
wm 
wulf mary shaw paul hilfinger lawrence fundamental structures computer science addison wesley yeh harris chase 
manipulating recovered software architecture views 
proc international conference software engineering pp 
zelkowitz wallace 
experimental validation software engineering 
information software technology november 
