line construction compact directed acyclic word graphs shinohara takeda arikawa giancarlo dept informatics kyushu university japan fs ine takeda kyushu ac jp dept computer science systems communication university milan italy disco 
compact directed acyclic word graph cdawg space ecient text indexing structure di erent string algorithms especially analysis biological sequences 
new line algorithm construction construction cdawg set strings 
di erent string problems deriving analysis biological sequences solved eciently suitable text indexing structure 
widely known structure kind sux tree built linear time permits eciently nd locate substrings string 
main drawback sux trees additional space required implement structure 
applications sequence analysis pattern discovery biological sequences keeping data possible main memory provide signi cant advantages 
fact led space ecient structures sux arrays sux 
focus attention compact directed acyclic word graph cdawg rst described 
cdawg string seen compaction directed acyclic word graph dawg minimization sux tree derived shown sux trees 
case basic idea merge redundant parts sux tree see fig 

experimental results shown provide signi cant reductions memory space required sux trees applied genomic sequences 
linear time algorithm direct construction cdawg string avoid additional space required preliminary construction results described reached independently kyushu milan groups submitted simultaneously conference merged joint contribution 
fig 

sux tree cdawg string cocoa 
substrings occur pre suxes corresponding nodes merged subtrees rooted nodes 
leaves merged single nal node 
dawg sux tree 
algorithm similar mccreight algorithm sux trees 
new algorithm construction ukkonen algorithm sux trees 
algorithm line processes characters string left right need know string 
furthermore show algorithm build cdawg set strings structure rst described derived compacting dawg set strings 
main drawback approach fact new string added set dawg built scratch 
algorithm allows add new string directly compact structure 
de nitions nonempty nite alphabet set strings 
pre sux substrings factors string jsj denotes length substring suf denote set suxes subset string fx ux xg 
string de ne syntactic congruence associated suf denoted suf suf suf suf occur pre xes suxes words occurrences positions string 
occur string sux 
call classes factors congruence classes relation suf class strings substrings called degenerate class 
longest string non degenerate class factors representative fig 

implicit cdawg cdawg string 
class 
non degenerate class factors suf representative characters ua ub substrings strict class factors suf say substrings strictly congruent belong strict class factors 
ready give formal de nition cdawg 
de nition 
compact directed acyclic word graph cdawg string directed acyclic graph 
distinct nodes marked initial nal 
edges labeled non empty substrings 
labels edges leaving node character 
sux corresponds path graph starting initial node node concatenation edge labels path exactly spells sux 
call node corresponding sux terminal node 
substrings spelled paths starting initial node non terminal node graph belong strict class factors 
cdawg string jsj nodes jsj edges 
de nition strict class factors non terminal nodes outgoing edges 
denote edge graph labeled substring de nitions useful de nition 
implicit cdawg string cdawg nodes outdegree removed edge entering node outdegree merged edge leaving 
implicit cdawg string suxes spelled paths graph starting initial node necessarily node 
example shown fig 

node length length longest substring spelled path initial node edges belonging spanning tree longest paths initial node called solid edges 
words edge solid length length assume label edge implemented pair integers denoting starting points string substring corresponding label node annotated length longest path initial node 
construction cdawg single string alphabet string 
algorithm divided phases building phase implicit cdawg pre detail implicit cdawg constructed starting graph 
phase divided extensions suxes 
extension phase algorithm nds path initial node labeled substring extends adding character path 
phase substring rst put graph followed 
extension phase adds single character initial node 
initial graph initial node nal node connected edge labeled character algorithm sketched follows 
construct graph 


find path labeled 
add character needed 

extension phase path spelling located cdawg updated di erent rules 
current graph path spelling ends update graph character appended label edge entering 
path corresponding continue continues character path ends node create new edge 
create new node path splitting edge point path ends 
create new edge 

path continues case substring current graph implicit graph 
rules guarantee phase correctly constructed cdawg 
fact algorithm check substring strictly congruent encountered conversely fig 

implicit cdawg string left redirection edge phase extension 
node labeled ab created previous extension insertion path labeled ab 
path corresponding middle non solid edge redirected node 
substring removed strict class factors phase paths node correspond strict classes factors vice versa 
sketch algorithm modi ed 
detailed description algorithm implementation 
detecting strictly congruent factors 
substrings belong class pre xes suxes characters occur sux vice versa 
suppose 
assume occurred just substrings put graph previous phase consecutive extensions current extension insert path spelling ends middle edge character edge new node created path new edge 
extension locate graph 
occurred belongs strict class factors middle non solid edge continues case redirect edge labeling part label contained path see fig 

consecutive substrings assigned class possible non solid edges extensions 
case redirect non solid edges reach extension node solid edge 
previously occurred path corresponding ends node followed characters di erent edge solid followed 
case edge labeled leaving node create new edge labeled nal node 
case create new node fig 

cdawg string phase extension 
character non solid edge 
extension path spelling db ended nal node 
removed class associated node cloned node 
edge 
connect nal node edge labeled may non solid edges redirected newly created node 
splitting strict class factors 
conversely substring assigned strict class factors removed class occur sux representative new character added string 
substrings assigned class previous example 
suppose phase insert graph 
case character nd edge entering node non solid representative class 
cases edge entered node previous extension ended 
case inserted previous extension phase belongs class 
detected occurrence preceded sux remove class 
re ect graph clone node new node redirect non solid edge keeping label 
redirected edge solid 
example shown fig 

suxes previously assigned class extensions nd non solid edge entering edges redirected proved suces check edge path ensure class split 
cloning takes place character edge entering nal node 
observations outlined implemented algorithm modifying rules accordingly 
worth mentioning redirection edges newly created node node cloning take place phase 
example shown fig 

fig 

left right cdawg string phase extensions 
character put graph substring ab path spelling middle non solid edge left redirected node center 
extension adds empty string non solid edge 
node cloned node right 
sux links naively locating extension phase take time walking initial node matching characters edges graph 
lead time complexity construction graph 
reduce introducing sux links remarks :10.1.1.10.751
de nition 
node graph di erent initial nal node 
representative class associated sux link denoted node representative longest sux path sux link node implemented pointer 
empty initial node 
sux links de ned initial nal node 
de nition guarantee node graph sux link prove lemma 
node created phase sux link phase 
proof 
extension phase new node created path spelling substring application rule cloning 
case rst node created encountered path corresponding sux possibly edge redirections 
node exists extension locates empty sux initial node 
case suppose node cloned node path spelling 
substring longest sux representative belong class 
set sux link left unde ned suxes ends node 
ut ab fig 

sux link 
node corresponds class node corresponds paths labeled suxes longer extension character added extensions implicitly performed 
phase node graph initial nal sux link created 
suppose algorithm completed extension phase 
sux links speed search remaining suxes 
starting graph walk backwards path corresponding initial node node sux link 
requires traversing edge 
concatenation edge labels path 
initial node move node follow path spelling search starting add extension rules redirecting edge cloning node needed 
notice node di erent paths position reached searching path extensions implicitly performed extension path spelling starting exists suxes graph 
nd path spelling algorithm just matches rst characters edges encountered 
obtain linear time algorithm need just tricks 

extension rule applied substring graph rule apply extensions suxes graph 
rule applied node cloned edges redirected move phase strings inserted graph adjustment needed classes 

new edge created entering nal node extension phase rule apply extension successive phase 
new characters appended edge path associated enter nal node 
new edge created entering nal node label label integers denotes current phase current position string 
implement global variable set phase perform implicitly extensions nal node 
phase starts series applications rules put edge entering nal node rule applied rst time applied extensions 
rst extension rule applied cloning phase rst extension applied edge redirection cloned node 
extensions redirect edges node created 
extensions need performed 
phase extensions apply rule implicitly performed setting counter 
start phase directly extension nd extension rule applied cloning edge redirection 
done starting phase position graph sux redirected cloned node 
took place extension 
rst extension phase look exactly endpoint extension phase implicitly perform extensions 
course phase rule rst applied cloning move phase 
algorithm need know extension currently performing 
starts phase endpoint phase adding starts moving graph sux links adding path 
backward walk ends label path traversed looks path labeled phase ends algorithm applies rst time rule node cloning edge redirection 
nd non solid edge longer check happened previous extension just clone node 
fact representative class met previous extensions stopped phase point reaching current extension 
phase constructed implicit cdawg string order obtain actual cdawg perform additional extension phase extending string dummy symbol belong string alphabet 
anyway increment phase counter avoid appending edges entering nal node 
new node created add edge graph 
nodes created phase outdegree correspond terminal nodes cdawg 
notice path ends edge create new node mark terminal cloning nodes redirection edges previous phases 
path ends node mark node terminal 
additional phase implicit cdawg transformed actual cdawg string example line construction cdawg shown fig 

arguments analogous ukkonen algorithm sux trees prove fig 

left right construction cdawg string phase implicit cdawg string phase abc bc belong strict class factors phase bc removed class representative abc nal structure 
stars indicate position graph reached explicit extension phase 
theorem 
string nite alphabet algorithm implemented sux links implicit extensions builds cdawg time nj space graph implemented transition matrix nj time space adjacency lists 
proof sketch 
operations performed explicit extension creation cloning nodes edge redirections extensions performed implicitly incrementing counter take constant time 
explicit extension performed phase rst explicit extension performed phase 
worst case 
explicit extensions performed algorithm 
extension phase locate endpoint algorithm walks back edge endpoint follows sux link traverses edges checking rst symbol edge 
graph implemented transition matrix traversing edge takes constant time 
takes time 
thing unaccounted number edges traversed 
node graph node depth number nodes path root labeled representative class associated sum node depths counted explicit extensions reduced maximum node depth maximum number edges traversed bounded :10.1.1.10.751
ut cdawg set strings basic idea cdawg set strings fs single string structure 
nodes structure correspond patterns occur pre suxes string set 
fig 

cdawg strings insertion left right 
characters terminations 
edges omitted 
words suf set suxes strings nodes cdawg correspond strict classes factors suf di erence nal nodes string want suxes corresponding nal node result obtained appending di erent termination symbol belonging string alphabet string set 
formally de nition 
cdawg set strings directed acyclic graph node marked initial distinct nodes marked nal 
edges labeled non empty substrings strings 
labels edges leaving node character 
string set suxes spelled patterns starting initial node node paths non nal nodes correspond strict classes factors congruence relation suf cdawg set strings constructed algorithm previous section 
build cdawg string termination symbol nal node notice termination symbol occur resulting structure cdawg need perform additional phase 
string added graph case nal node apply string set 
node cloning edge redirection rules ensure correctness resulting structure 
proved algorithm takes time construct structure implemented transition matrix js structure marginal di erences rst described built reducing dawg 
adding new string set required construction new dawg scratch 
algorithm permits add strings directly compact structure see fig 

give upper bound size structure 
theorem blumer 
cdawg set strings nodes js cdawg space ecient text indexing structure represents substrings string 
new line algorithm construction construction cdawg set strings 
structures computed reduction starting corresponding sux trees approach permits save time space simultaneously built directly 
structure built set strings new strings added directly compact structure 
milan group supported italian ministry university project bioinformatics genomic research 

manber myers 
sux arrays new method line string searches 
siam computing 


sux cactus cross sux tree sux array 
combinatorial pattern matching july 

blumer blumer haussler mcconnell ehrenfeucht 
complete inverted les ecient text retrieval analysis 
journal acm 

blumer blumer haussler ehrenfeucht chen 
smallest automaton recognizing subwords text 
theoretical computer science 

crochemore compact directed acyclic word graphs springer verlag lncs pp 

gus eld algorithms strings trees sequences computer science computational biology cambridge university press new york 

mccreight 
space economical sux tree construction algorithm 
journal acm 

ukkonen 
line construction sux trees 
algorithmica 

shinohara takeda arikawa line construction compact directed acyclic word graphs 
doi technical report kyushu university january 
