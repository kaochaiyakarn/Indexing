building survivable systems integrated approach intrusion detection damage containment bowen chee segal telcordia technologies south street morristown nj dana msg research telcordia com sekar state university new york stony brook ny tushar cs sunysb edu reliance networked information systems support critical infrastructures prompts interest making network information systems survivable continue functioning attack 
build survivable systems attacks detected reacted impact performance functionality 
previous survivable systems research focussed primarily detecting intrusions preventing containing damage due intrusions 
developed new approach combines early attack detection automated reaction damage prevention containment tracing isolation attack origination point 
approach specifying security relevant behaviors patterns sequences observable events process system calls arguments contents network packets 
intercepting actual events runtime comparing specifications attacks detected operations associated deviant events modified thwart attack 
security relevant behaviors known attack signatures approach protect unknown attacks 
time approach produces false positives property critical automating reactions 
host mechanisms attack detection isolation coordinate network routers enhanced active networking technology order trace origin attack isolate attacker 
central approach observation intrusions manifest observable events deviate norm 
extend current state art event intrusion detection developing domain specific language called behavioral monitoring specification language bmsl 
bmsl enables concise specifications event security relevant properties 
properties capture normal behavior programs systems misuse behaviors associated known 
approach compile bmsl specifications efficient detection engines 
efficiency engines opens possibility augmenting real time intrusion detection real time intrusion reaction 
experimenting bmsl contexts considering incoming network packets events considering system calls requested executing processes events 
network packets bmsl specifications packet contents system calls bmsl specifications system calls values system call arguments 
contexts bmsl supports rich set language constructs allow reasoning singular events temporally related event sequences 
approach enables real time reaction capabilities specifying reactions invoked violations detected integrated bmsl 
currently experimenting packet system call interception interception events possible 
instance may develop runtime environment generate event corresponding logging entry system log file syslog 
similarly management information bases mibs accessible simple network management protocol snmp provide important security relevant data monitored bmsl specifications 
architecture intrusion detection response system shown 
event stream packets system calls interceptor component placed stream provides efficient interception raw events 
interceptors deliver raw event streams runtime environment associated stream 
runtime environments demultiplex event streams event streams individual detection engines implement actual intrusion detection reaction specifications 
runtime environments provide common functions facilitate execution detection engines isolate detection engines details specific interfaces data formats 
typically single detection engine monitors defended process detection engine monitors network traffic hosts 
reaction detected intrusions enabled detection engine interposition capabilities 
example system call detection engine interpose reaction program vt fr ry hyy prf 
prf 
ir rp vr vr qx vr 
runtime view system 
pn processes syslog mon system log watcher 
arbitrary functionality place executing intercepted system call kernel functionality 
similarly network packet detection engine alter drop spontaneously generate packets 
prototype implementation interposition capabilities implemented system calls passive interception capability implemented network packets 
interposition wide variety reactions possible 
simplest reactions merely terminate intruder access victim host complicated reactions seek intruder waste intruder resources allowing intruder access placing compromised processes isolated environment cause damage victim 
system call packet interception defenses reactions help protect host damage ultimately computer security requires identification isolation intruder 
experimenting techniques enabled active networking technology trace isolate intruders 
main results bmsl expressive easy robust language capturing behaviors processes hosts patterns sequences events system calls network packets 
robustness achieved restricting expressive power bmsl strong data typing offers enhanced expressive power capture network packet system call arguments types 
detection engines may operate operating system kernel robustness important goal bmsl 
protection known unknown attacks 
intruder main goal gain unauthorized access resources victim host 
unauthorized access difficult gain programs victim host observing security relevant properties 
enforcing security relevant properties protect known unknown intrusions 
efficient enforcement normal behaviors isolation misbehaving programs 
key damage prevention isolation development techniques efficient interception modification system calls network packets 
fast pattern matching algorithms detect deviations normal behavior adherence behavior specified bmsl 
general space required efficient matching bmsl patterns extremely large 
reduce space requirements develop novel runtime model quasi deterministic extended finite state machines trade space requirements matching speed selective fashion achieve detection speeds space utilization 
active networking techniques tracing attacker origin isolation 
effective efficient implementation 
analysis performance approach terms effectiveness efficiency 
experiments consisted house simulations attacks standardized evaluation conducted mit lincoln labs support darpa 
evaluation results indicate approach effective fast low memory requirements 
intended broad overview research results survivable active networks project 
detailed treatment language design compilation techniques 
network monitoring system design implementation evaluation detail 
online versions papers accessed world wide web cs sunysb edu htm 
specification language overview principal goals design bmsl extensibility support multiple event types system calls network packets support data types corresponding event arguments robustness type safety reduce specification errors scope damage may result due errors simplicity control language compiler complexity amenability efficient monitoring keep overheads runtime behavior monitoring low ability specify responses allow automatic initiation reactions prevent contain damage primary mechanism achieving goals development suitable type system language 
goals achieved simple expressive pattern language 
final goal achieved associating security property reaction taken property violated 
describe components 
types bmsl types consist primitive types integers booleans floats event types capture structure events aggregate types capture structure system call arguments network packets 
supports various utility data structures lists arrays tuples 
confine description types unique bmsl 
events events may primitive user defined 
primitive events generated runtime system constitute input detection system 
primitive event declarations form event list declarations specifying types parameters event 
primitive event may correspond system call transmission reception network packet 
possible inject higher level information detection engine building appropriate runtime system provide information 
instance declaration event client server username may denote event generated telnet server completion telnet connection 
user defined events events correspond occurrence potentially complex sequences primitive events 
form event params pat pat event pattern described section 
variables params appear pat 
packet types type systems existing languages sufficiently expressive model network packets 
particular problems arise describing network packet structures compiler runtime system language freedom choose runtime representation representations prespecified part protocol standards complete type network packet determined runtime type checking completed compile time way address problem treat packet sequence bytes 
instance protocol field ethernet header packet may expressed syntax short 
identifying packet fields offsets inherently errorprone naming fields 
lose benefits provided strong type system protection memory access errors misinterpretation contents field integer field accidentally treated short float 
developed new type system capture complex packet structures providing capabilities dynamically identify packet types runtime perform relevant type checks packet fields accessed 
ethernet header may defined bmsl follows ether hdr byte dst eth len ethernet destination byte src eth len source addresses short type protocol carried packet capture nested structure protocol headers employ notion inheritance 
instance ip header defined follows 
ip hdr ether hdr bit version ip version bit header length 
fields skipped unsigned src dst ip addr similarly tcp header inherits data members ip header ethernet header 
simple inheritance powerful flexible satisfy needs 
particular structure describing lower layer protocol data unit pdu typically field identifying higher layer data carried lower layer protocol 
instance field type specifies upper layer protocol ip arp protocol 
capture conditions augment inheritance con straints 
structure ip header constraint information follows 
ip hdr ether hdr type ether ip 
fields need deal fact higher layer data may carried different lower layer protocols 
purpose develop notion disjunctive inheritance follows 
capture fact ip may carried ethernet token ring packet modify constraint associated ip hdr ether hdr type ether ip tr hdr tr type ip disjunctive inheritance asserts derived class inherits properties exactly base classes 
contrasts traditional notions single inheritance derived class inherits properties exactly base class multiple inheritance derived class inherits properties multiple base classes 
viewed alternatively multiple inheritance correspond conjunction constraints disjunctive inheritance corresponds exclusive operation 
class types appropriate describe manipulate data exchanged detection engines interfaces built record types concrete representation may unknown hidden 
instance case system calls argument may pointer resides virtual address space process monitored may accessible detection engine 
reasons introduce concept class types defined keyword class essentially data types 
representation class data completely encapsulated invisible bmsl manipulated operations defined part data type 
sample declaration class corresponds style strings class corresponds argument stat system call shown class string const void string class int const int const int const int const note return type member function class type 
member function changes value object const declaration associated function 
plays important role type checking bmsl patterns described 
patterns security relevant properties programs captured patterns sequences events system calls network packets 
simplest form bmsl pattern captures occurrence single event 
form xn jcond cond boolean valued expression event arguments xn variables may appear earlier pattern 
condition component standard arithmetic comparison logical operations support functions 
support functions allowed pattern correspond read operations modify state monitored process 
example function translates file name canonical form contain symbolic links 
sequencing operators similar regular expressions operate events arguments 
refer pattern language regular expressions events ree indicate relationship 
meaning event patterns sequencing operators best explained definition means event history sequence events observed runtime match pattern event occurrence xn jcond satisfied event history vn cond evaluates true variables xn replaced values event xn jcond matched match xn jcond 
sequencing pat pat satisfied event history form provided satisfies pat satisfies pat alternation pat satisfied event history pat pat satisfied repetition pat satisfied event history 
hn iff satisfies pat realtime constraints pat satisfied event history satisfies pat time interval events equal atomicity nonatomic pat denotes accesses data atomic pat intervening operations processes modify data 
variable occurs multiple times pattern event history satisfies pattern history instantiates occurrences variable value 
instance pattern satisfied event history satisfied 
response actions reaction associated rule launched suffix event history matches reaction component consists sequence statements assignment state variable invocation support function provided runtime system important classes response actions specified 
data aggregation operations identify network attacks necessary aggregate information network packets act basis information 
aggregation needs sensitive received packets older packets 
bmsl supports principal abstractions aggregation decay counters frequently tables 
decay counters characterized time window decay rate 
increments decay counter occurred time window included output counter 
increments occurred past time window weighted exponentially decay function assigns lesser weight events occurred past 
tables hash tables entry decay counter keeps track number times entry accessed past 
table fixed size overflows handled deleting entries lowest counts 
decay counters notion frequently tilted favor entries accessed accessed long time past 
table entries associated functions invoked entry count increases falls threshold entry purged table 
key features decay counter table design uses constant memory counter table entry operations increment decrement counter insert delete entries table take constant time 
data aggregation operation time space efficient 
detailed presentation data aggregation operations reader referred 
event modification operations event modification operations realized set support functions provided runtime system 
event modification capabilities differ different runtime systems 
instance packet runtime system may provide operations drop generate modify packets 
current packet runtime implementation support response operation 
similarly system call knowledge support functions integrated bmsl declared header files included specification 
runtime system provides operations prevent system call executing return fake return value 
accomplished support function fake takes argument corresponds value variable errno set 
interactions multiple rules multiple patterns match time associated reactions matching pattern launched leading problem launched reactions conflict 
solve conflicting reactions problem defining notion conflict operations contained reaction components rules assignments variables invocation support functions provided runtime system stipulating exist patterns conflicting operations sequence system calls match point 
potential conflicts identified automaton construction algorithms developed state automaton corresponds final state patterns potential conflict 
implemented solution currently rely specification writer deal conflicts 
illustrative examples simple examples restrict process making set system calls create rule pattern matches disallowed system calls reaction causes disallowed system calls fail 
instance may wish prevent server program fingerd executing program modifying file permissions creating files directories initiating network connections 
example shows specification 
shorthand notation omitting arguments system call replacing interested values 
fake may restrict files process may access reading writing example rule prevents writes files reads files mentioned defined 
passwd open mode jj mode fake example illustrates sequencing restrictions specifying process open file close file reading writing file 
defining pattern define events denote occurrence events 
occurrence event pattern replaced definition substitution parameter names renaming variables occur right hand side event definition names unique 
fd open exit fd exit fd fd read fd fd fd fd fd close fd 
regular expressions expressive capture balanced parenthesis presence variables ree enables capture close system call matching open 
example illustrates atomic sequence patterns 
popular attack uses race conditions setuid programs follows 
setuid process runs effective user root open system call process succeeds fails base file privilege respect root 
setuid process wishes open file respect permissions real user uses access system call determines real user access file opens file 
attacker exploits time window access open system calls creating symbolic link name file question changing target link access open system calls file inaccessible real user 
prevent race attack ensure file referred access open system calls accessed atomically nonatomic target access open open fake case study specification ftpd starting point developing specification ftpd documentation provided ftpd manual pages 
identified properties wu ftpd examining manual page knowledge unix 
properties captured bmsl 
convert english descriptions directly bmsl specifications usually cross check debug specifications monitoring ftpd typical conditions 
hybrid approach manually inspect system call traces produced ftpd narrow actions behaviors ftpd server may exhibit 
cases attempted sophisticated reaction opting simply terminating ftpd support function named term 
shows partial specification ftpd 
complete specification consists rules event definitions 
explanations rules follows ftpd attempts authenticate client host proceeding user authentication 
precisely identifying sequence system calls correspond client authentication hard involves large number steps may vary installations 
treat marker indicates client host authentication related processing 
similarly treat opening passwd marker user authentication related processing 
rules capture english descriptions stipulating respectively open password file happen invocation system call executed opening password file 
user authentication completed ftpd sets userid user just logged 
remember userid rule 
prior user authentication files names identified set accessed rule 
certain system calls user authentication user authentication rules 
denote pattern matches system calls prior user authentication 
similarly match system calls user authentication 
definitions events omitted order conserve space 
anonymous users userid system call restrict access subtree filesystem rooted ftp rule 
ftpd resets effective userid root order bind socket ftp data port 
userid restored logged user immediately rule 
eliminate possible security loopholes ftpd execute setuid system call change real effective saved userid permanently logged user executing program executed process may able revert effective userid back superuser rule 
addition sure file opened superuser privilege closed execve rule 
typical specifications need comprehensive ftpd comprehensive order better illustrate sorts properties captured language 
specification enforces principle privilege really paying attention known vulnerabilities 
address known ftp vulnerabilities fixed ftp bounce rule race conditions signal handling rules site exec rule 
define useful events 
assume certain events privileged denotes certain privileged system calls programs denotes file open operation create modify file 

close socket bind sa port sa state variable remember uid user logging client host name 

exit fd sa sa host authentication phase precede user authentication 

open passwd term user authentication precede userid changed user 

open passwd term access limited admin related files user login completed 

open term access limited certain system calls user login 

term certain system calls permitted user login completed 

term anonymous user login 

term userid set logged user exec 

setuid execve term resetting userid permitted executing small subset system calls 

setuid term file opened superuser privilege explicitly closed exec close exec flag set 

open exit fl md fd close fd execve fd term site specific ensure ftp execute arbitrary programs 

execve term site specific ftp connect arbitrary hosts services 

connect sa sa sa term 
specification ftpd 
network attacks small ip fragments simple example identify unusual network packets launch attacks 
instance short ip fragments smaller tcp headers bypass packet filtering firewalls 
detect packets net net mask net addr net mask net frag frag offset unsigned int key ip address data size time window sec hi lo thresholds threshold fns rx net addr frag protocol ip tcp tot len functions write records log file 
take argument value key field corresponding table entry action executed 
threshold values example attack detection deterministic attack recognized single packet matching criteria received 
reasons table case opposed directly invoking function generates attack report follows 
able distinguish packets received different source addresses treat separate attacks 
second attacking host may generate large number fragmented packets match criteria 
generating attack messages may generate just messages indicate attack 
teardrop attack teardrop attack involves fragmented ip packets overlap 
pattern captures overlap flagging cases fragment simply duplicated 
frag frag offset frag frag tot len pkt id id event overlapping frag overlaps correspond teardrop attacks pattern simpler permit legitimate fragment overlaps overlapping ip fragments appeared environments ids tested 
rx pkt frag frag frag frag frag frag rx frag rx tx overlapping frag 
pattern matches sequence packets spans period seconds may choose larger smaller time frame begins ends fragments ip packet fragments overlap partially 
specification isolation isolation component integrated seamlessly specification framework detection attacks host processes 
detect attack host delivered network packets quietly drop packets 
detect attack process switch action switch new specification contains bmsl rules isolate process 
new specification contains rules return faked return value especially system calls potentially damage system log activity analysis 
reduce limits resources rogue process consume 
restrict access files 
instance specification exec setuid nice switch changes root calling process decoy file system called changes user id reduces priority process switches new monitoring specification called may specified connect sendto recvfrom sleep fake bind recv sleep fake open read write sleep may rules module ones illustrative 
process operating decoy file system file system operations allowed go 
network operations restricted 
operations slowed sleep cpu resource usage attacked system minimized intruder perceive slow system congested network 
compilation bmsl type checking bmsl designed idea code generated bmsl specifications may run operating system kernel space 
means code generated bmsl bmsl robust guard serious errors invalid memory accesses exceptions contribute failures individual hosts legitimate processes running 
factor hacker planning attack host try survivability components host important components robust 
packet types semantics constraints packet types hold fields corresponding derived type accessed 
particular note compile time know type packet received network interface lowest layer protocol type 
instance packets received ethernet interface header ether hdr know carry arp ip packet 
ensure type safety constraint associated ip hdr checked runtime accessing ip relevant fields 
generally field structure particular type accessed constraints associated base types need checked 
type declarations implementation automatically introduces checks specifications relieving programmer burden check constraints explicitly 
class types mentioned earlier bmsl class types may correspond data resides outside detection engine 
data represented bmsl pointers handles memory space runtime system process monitored 
means class data referenced bmsl may get overwritten invalid events due operations place runtime system monitored process 
happens detection engine knowledge may lead memory access errors unexpected effects specifications due unanticipated changes 
impose restriction class data stored bmsl variables delivery multiple events 
require external functions applied class data assure data changed function 
wanted really store components foreign object bmsl need appropriate accessor functions data obtain components interest store bmsl native types 
compilation pattern matching efficient pattern matching key performance detection engines 
approach pattern matching compiling patterns kind automaton 
equivalent manner analogous compiling regular expressions finite state automata 
call automata extended finite state automata efsa 
efsa simply standard finite state automata fsa augmented fixed number state variables capable storing values bounded size 
transition efsa associated event enabling condition involving event arguments state variables set assignments state variables 
final states efsa may annotated actions system correspond reactions rules 
transition taken associated event occur enabling condition hold 
transition taken assignments associated transition performed 
efsa normally nondeterministic 
notion acceptance nondeterministic efsa similar nfa 
deterministic efsa efsa transitions enabled state efsa 
pattern shown 
equivalent shown 
shown translating result unacceptable increase size automaton 
developed new approach translating quasi deterministic extended finite state automata 
eliminate sources nondeterminism ensuring sizes acceptable 
complete treatment compilation algorithm 
runtime infrastructure system calls bmsl specifications system call defenses translated detection engine linked runtime infrastructure produce executable 
executable single dynamically loadable kernel module called runtime infrastructure provides capabilities mechanisms associating running applications bmsl specifications interception system calls delivery application intercepted system calls associated bmsl specification delivery specification response intercepted system calls application support functions simplify bmsl specification development 
runtime infrastructure imposes constraints bmsl compilation 
bmsl specification bmsl compiler generate source code defining unique class 
generated classes derived default specification class called 
system call bmsl specification needs intercept class implement interception methods having predefined signatures 
basic idea constraints implements default methods interception system calls entry exit 
default methods allow intercepted system calls execute normally 
achieve non default treatment selected intercepted system calls derived classes override method implementations corresponding system calls 
set bmsl specifications conforming runtime infrastructure constraints translation specifications runtime infrastructure basically matter compilation link editing important exception 
exception association applications defensive specifications encoded compile time 
association requires programmer create configuration file comprising multiple entries entry gives command line name application name class associated application name source file defining class 
single application associated specification applications associated single specification 
configuration file translation selects appropriate bmsl specifications link edit populates data structures runtime association applications specifications known 
translation examines bmsl specifications determine subset system calls intercepted meet combined needs uses information minimize runtime overhead avoiding unnecessary system call interception 
primary function infrastructure real time system call interposition 
system call interposition accomplished system call table overwriting 
system call table kernel resident table pointers functions implementing system calls indexed predefined system call numbers 
application requests system call system call number select appropriate function pointer system call table 
loaded copies system call table overwrites system call table system call table entries point interception functions implemented real system call functions 
efficiency table entries system calls bmsl specification requires interception overwritten 
interception functions structure 
interceptor functions start pre system call functionality implemented function called invoke real system call entry system call table copy conclude post system call functionality implemented function called 
functions roughly equivalent consisting finding object associated application requesting system call instantiating object application specification association application system call invoking interception method object 
interception method invoked method implemented particular system call intercepted intercepted system call entry method intercepted system call exit method 
note bmsl specification specify special treatment intercepted system call default treatment implemented invoked 
return values convey bmsl specification decision regarding treatment intercepted system call 
decision normal meaning request system call allowed faked 
pre system call interception faked means system call executed immediate return application supplied results mimic actual system call execution 
post system call interception faked means results system call executed overwritten 
cases decision faked requires bmsl specification supply appropriate results return code population output arguments vary system calls 
secondary function runtime infrastructure provide environment conducive development powerful specifications 
functionality provided support functions implemented infrastructure 
support functions provided common large number specifications reasonably implemented bmsl specifications 
capabilities currently provided implementation support functions mechanism specifications system calls 
infrastructure provides support bmsl specifications system calls contexts backwards application context forwards context 
backward system calls support defenses replace requested system calls system calls forward system calls enable perform operations maintaining log files 
maintenance dynamic file descriptor filename mapping 
mapping file descriptors file names fluid system calls change mapping inheritance file descriptors system calls execve fork clone 
defenses file name implement functionality required maintain file descriptor file name mapping unduly complicate 
functionality consolidated mapping available bmsl specifications simple interface 
unified method handling system call arguments pointers 
bmsl specifications execute kernel space aware differences kernel user memory 
particularly troublesome pointers passed system calls point user memory requires different access mechanisms kernel memory 
mentioned earlier memory access problem handled bmsl encapsulating system call arguments class types 
runtime infrastructure provides implementation class types 
infrastructure converts pointer arguments appropriate class system call interception method invoked 
implementation subroutines commonly available user level standard system libraries 
general subroutines unavailable kernel level 
current approach port subroutines needed basis conversion functions execute kernel level nontrivial 
global isolation active networking emerging active network technology presents appealing defensive capabilities augment host system call interception approach 
variety attacks host approach detect attack react useful manner 
denial service dos attacks fall category host detect swamped meaningless requests may know spoofed source ip address requests originate preserve attack 
hosts respond attack shutting attack services reaction useful accomplishes aims attacker 
emergent active network capabilities useful reaction attacked host inform nearest active network element attack request active network elements find isolate source attack 
defensive strategy host protect elimination attack traffic near source benefits hosts reducing unnecessary traffic 
rudimentary implementation active network defense flooding attacks plan 
implementation allows host attack send plan packet nearest plan enabled router 
packet contains program examines router routing table see ip address responsible flood immediately adjacent router 
ip address disabled router administrative commands plan packet forwarded router neighbors 
eventually plan packets delivered router nearest attacking ip address flood shut point 
believe current research active network technology defense illustrative insufficient 
progress truly powerful active network defenses requires maturity technology currently prototype form 
particular plan supports interception plan packets packets tcp packets 
packets monitored plan programs pass routers contents altered envisioned defenses require 
currently active network defenses limited achieved active packets cause routers re configure administrative interface 
performance results studied effectiveness performance approach experimentally 
effectiveness measured participation intrusion detection evaluation conducted mit lincoln laboratories 
id evaluation network packet monitoring system nms participated evaluation conducted mit lincoln labs 
due lack availability system call data linux evaluation system call monitoring system sms participate evaluation 
focus nms sms complementary 
sms concerned attacks targeted specific processes manifest system call level 
nms concerned low level network attacks exploit errors operating system kernels directed process 
participants evaluation included research groups uc santa barbara columbia university rst groups sri 
baseline system comparable commercial intrusion detection systems included evaluation 
determined systems participating evaluation provided attack 
false score best score category attacks positives evaluation probe dos 
scores attack category 
significantly better detection rates baseline system reducing false positive rates order magnitude 
evaluation organizers set dedicated network conduct variety attacks 
care taken ensure accuracy normal traffic 
network traffic recorded tcpdump format provided participants evaluation 
data provided consisted weeks training data plus weeks test data 
tcpdump files gb length day 
attacks classified categories 
categories related low level network attacks focus nms 
categories probing denial service 
attacks identified rules generally similar examples discussed earlier 
process training debugging system rules tend get bit complicated examples 
times change rules due certain idiosyncrasies artifacts test data 
shows scores assigned system lincoln labs 
scoring scheme assigned fractional credit attack percentage attack containing packets sessions identified ids evaluated 
instance port sweep may occur hundreds thousands packets 
ids able identify subset packets part port sweep 
scoring procedure favorable systems emphasize low false positives 
systems tend err side identifying individual packets attack bearing long substantial number packets attack tagged 
system finished top categories low false positive rates false alarms attack 
false positive rates tens times higher false alarms attack systems perform better 
quite system sport higher detection rates increased false positive rate high levels 
shows scores obtained ids kind attack 
omits higher level probing denial service attacks addressed nms aggregate score shown table improvement 
table shows result different scoring scheme attempts attack number misses score smurf teardrop land ping death ip sweep satan port sweep saint nmap neptune udp loop total 
scores low level network attacks 
week day data file time gb memory size gb data sec mb mon tue wed thu fri mon tue wed thu fri 
performance nms 
identify attack completely missed system 
substantial fraction attack bearing packets say detected system treat attack having detected 
treat attack having missed 
system demonstrated excellent detection capability criteria 
attacks missed due fact tcpdump contained packets arriving network outside assumed contained internal traffic 
explosion number packets expected system part udp loop attack tcpdump data attack missed system 
performance nms emphasis efficiency implementation paid terms performance shown cpu memory usage ids days test data shown 
running mhz pentium ii pc running redhat linux system sustain intrusion average execution time seconds gb number rules 
pattern matching time vs number rules 
detection rate mb second 
measuring cpu time considered time spent intrusion detection system ignored time reading packets tcpdump file 
memory consumption low largely result choice data aggregation operations 
high performance result emphasis aspects insensitivity pattern matcher number rules 
ids currently contains rules pattern matching approach involves checking patterns individually slow 
compiling patterns automaton able identify pattern matches spending essentially constant time packet independent number patterns 
pattern matching time remains independent number rules 
fast implementation data aggregation operations 
described earlier implemented weighted counter table data structures operations amortized cost operation 
result detection time increases linearly slowly number attacks 
note time detection monotonically increase number rules 
fact addition new rule reduce frequency earlier rule matching 
factor lead situation addition rules decreases execution time 
performance sms studied performance system server programs ftpd httpd 
specification ftpd described earlier 
specification httpd shown comparable size complexity ftpd 
results section taken mhz pentium average execution time seconds gb number rules 
intrusion detection time vs number rules 
testcase time time match overhead run ftpd httpd 
system call pattern matching overhead 
ii linux pc mb memory gb eide disk 
measuring runtime overhead separated measurements cost system call interception essentially constant system calls measurements cost system call pattern matching varies complexity individual bmsl specifications 
measurement cost system call interception indicate adds minor overhead applications example ftpd system call interception increases total time spent processing system calls 
test cases system call processing time accounted total ftpd processing time increase system call processing virtually impact user perceived execution time 
timing results summarizes experimental results 
show fact overheads due monitoring imperceptible applications 
runtime data storage requirements fsm small measured 
shows overhead matching system call averaged programs 
graph indicate slight increase matching time system call increase number system calls increase small meaningful increase time number system calls increased 
meaningful talk matching time system call number system calls dat 
matching time system call 
number states pattern size automaton size 
increase automaton size specification 
overhead percentage total runtime done table 
automaton size evaluate increase size automaton number complexity patterns increased plotted automaton size function size patterns 
size measure number ree events operators taken patterns 
event arguments conditions included number states affected presence absence 
ree patterns interest corresponding benchmark programs ftpd httpd 
randomly chosen subsets patterns compiled corresponding size automaton identified 
plotted shown 
worst case automaton size exponential size ree find practice size increases linearly total ree size 
related host detection host techniques aimed protecting individual hosts operate basis information contained audit logs similar sources data 
techniques broadly divided misuse detection anomaly detection specification detection :10.1.1.94.6821:10.1.1.27.304
misuse approaches state transition diagram approach capture signatures intrusions 
uses colored petri nets specify intrusive activity 
language expressive ways ability capture occurrence concurrent sequences actions expressive ways ability capture atomic sequences occurrence event immediately 
intrusion signatures expressed easily captured language compilation techniques applicable approach 
anomaly detection approaches works program behaviors opposed user behaviors 
results improved neural network approach produces accurate anomaly detectors 
approaches deal system call names arguments 
simplifies problem learning normal behaviors processes main focus 
intrusion prevention confinement argument values important distinguish action write log file modify passwd file 
language ree appropriate context 
specification approach achieves accuracy misuse detection addressing deficiencies inability deal unknown intrusions 
proposed 
pattern language context free grammars extended variables formulate intrusion detection problem parsing audit logs respect grammars 
contrast language extension regular languages variables 
context free languages expressive regular languages necessarily true variables added languages 
hand regular language formulation lends readily automaton patternmatching approach implemented efficiently 
network intrusion detection network intrusion detection systems operate inspecting ip lower level packets attempt reconstruct higher level interactions hosts remote users identify anomalous attack behaviors 
attempt identify broad class attacks focusing particularly malicious attacks network servers processes running target system 
employ different approach particular attacks identifiable higher level information left detected sms 
attacks invisible sms manifest level processes left detected handled nms 
nms mainly concerned detecting low level attacks exploit vulnerabilities design implementation host operating systems network protocols 
surveillance probing large number denial service attacks existence fall category low level network attacks 
approach enables simplify detection diverse kinds intrusions 
completely different approach taken intrusion detection techniques data mining employed 
previous works employed statistical expert system techniques detecting anomalous behaviors indicative attacks 
techniques largely complement patternmatching schemes 
particular benefits approach speed specificity reduction false positives 
downside unknown attacks hitherto captured may go undetected 
anomaly detection systems typically better detecting unknown attacks downside include high false positive rates attack indicators need extensive training 
combination approaches envisioned emerald give benefits approaches largely avoiding drawbacks 
related languages network intrusion detection packet filtering special purpose languages network intrusion detection studied earlier 
choices range scripting languages easier write intrusion detection code strongly typed languages bro pattern matching language netstat 
common feature languages imperative programming paradigm language declarative 
language permits easily capture patterns sequences packets opposed languages patterns characterize individual events 
capability data aggregation features provided language contributes conciseness sion specifications 
important distinction approach language designed support efficient implementations pattern matching data aggregation operations 
type system network packets similar packet types developed independently 
notion type refinement similar notion inheritance packets approaches constraints augment traditional notion inheritance 
gives approaches ability model layering protocols 
significant differences 
instance notion disjunctive inheritance captured 
provide general purpose algorithm avoids repetition constraint checking operations repeated inheritance chain rules 
detailed treatment differences 
system call interposition interception system calls followed interposition arbitrary code point proposed researchers way confine applications 
janus system incorporates user level implementation system call interception 
aimed confining helper applications launched web browsers restricted system calls 
approach improves theirs providing powerful language capturing allowable behaviors 
kernel hypervisor approach similar janus approach implemented operating system kernel loadable modules 
comprehensive set system call interposition capabilities developed 
focuses related problem developing languages customized writing interposition code known wrapper code runtime infrastructure installation management 
preceding approaches language easily capture sequencing relationships system calls 
focus pattern techniques intrusion detection 
computational issues efficient matching system call sequences robustness interposition code addressed 
approach building survivable systems 
approach monitoring events system calls network packets comparing patterns characterizing normal abnormal event sequences initiating appropriate responses potentially damaging events intercepted 
responses may preempt intrusion isolate contain damage 
attacks prevented contained approach satisfactorily address intrusions arising due software errors trustworthy programs malicious programs trojan horses untrusted sources 
new vulnerabilities protected existing specifications identified protect appropriate specifications disabling vulnerable software vendor provides patch 
main challenges making approach practical ability perform runtime prevention detection fast included part processing system call process 
proposed solution problem developing appropriate compilation runtime techniques 
implementation results demonstrate overhead intrusion detection low 
key benefit approach supported theory performance experiments detection time insensitive complexity number patterns specification 
cases algorithm takes constant time system call intercepted uses constant amount storage 
advantages mean specification developer focus exclusively conciseness clarity correctness specifications concerned efficiency 
advantages algorithm attractive methods 
focus tools techniques simplify task developing specifications 
anderson lunt javitz valdes generation intrusion detection expert system nides summary sri csl sri international 
berry gonthier synchronous programming reactive systems esterel technical report inria paris 
bishop checking race conditions file access 
computing systems pp 

cert coordination center advisories www cert org advisories index html 
chandra mccann packet types workshop compilers support systems software 
cowan pu maier walpole beattie wagle zhang stackguard automatic adaptive detection prevention buffer overflow attacks th usenix security symposium 
denning intrusion detection model ieee trans 
software engineering feb 
forrest hofmeyr somayaji computer immunology comm 
acm 
fraser badger feldman hardening cots software generic software wrappers ieee symposium security privacy 
petrou rodrigues anderson slic extensibility system commodity operating systems usenix annual technical conference 
graf lippmann cunningham fried kendall webster results darpa offline intrusion detection evaluation ideval ll mit edu results index htm 
guha mukherjee network security reverse engineering tcp code vulnerability analysis proposed solutions proc 
ieee infocom march 
ghosh schatz learning program behavior profiles intrusion detection st usenix workshop intrusion detection network monitoring 
goldberg wagner thomas brewer secure environment untrusted helper applications usenix security symposium 
heberlein network security monitor symposium research security privacy 
hicks moore gunter nettles plan packet language active networks proceedings third international conference functional programming languages pages acm 
hochberg nadir automated system detecting network intrusion misuse computers security may 
jones interposition agents transparently interposing user code system interface th acm symposium operating systems principles december 
ko execution monitoring security critical programs distributed system specification approach ph thesis dept computer science university california davis 
kumar classification detection computer intrusions ph dissertation department computer science purdue university 
lee park stolfo automated intrusion detection nfr methods experiences usenix intrusion detection workshop 
lo levitt olsson mcf malicious code filter computers security vol 
luckham vera event architecture definition language ieee transactions software engineering 
lunt real time intrusion detection expert system ides final report sri csl sri international 
lunt survey intrusion detection techniques computers security june 
mccanne jacobson bsd packet filter new architecture user level packet capture lawrence berkeley laboratory berkeley ca 
mcnaughton yamada regular expressions state graphs automata ire trans 
electronic comput ec 
lu brien kernel secure applications annual computer security application conference december 
mukherjee heberlein levitt network intrusion detection ieee network may june 
osterweil cecil sequencing constraint language automatic static analysis generation ieee transactions software engineering 
paxson bro system detecting network intruders real time usenix security symposium 
porras neumann emerald event monitoring enabled responses anomalous live disturbances national information systems security conference 
porras kemmerer penetration state transition analysis rule intrusion detection approach eighth annual computer security applications conference 
implementing generalized tool network monitoring lisa 
schneider enforceable security policies tr department computer science cornell university ithaca ny 
sekar guang verma highperformance network intrusion detection system acm computer communication security conference 
sekar synthesizing fast intrusion prevention detection systems high level specifications usenix security symposium 
sekar bowen segal preventing intrusions process behavior monitoring usenix intrusion detection workshop 
common intrusion detection framework staniford chen cs ucdavis edu cidf 
vigna kemmerer netstat network intrusion detection approach computer security applications conference 
