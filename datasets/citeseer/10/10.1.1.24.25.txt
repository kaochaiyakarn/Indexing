university maryland cs tr property software engineering measurement lionel briand crim mcgill college avenue quebec canada lionel briand crim ca dip 
di elettronica informazione politecnico di milano piazza leonardo da vinci milano italy polimi victor basili computer science department university maryland college park md basili cs umd edu little theory exists field software system measurement 
concepts complexity coupling cohesion size subject interpretation appear inconsistent definitions literature 
consequence little guidance provided analyst attempting define proper measures specific problems 
controversies literature simply misunderstandings stem fact people talk different measurement concepts label complexity common case 
need define unambiguously important measurement concepts measurement software products 
way doing define precisely mathematical properties characterize concepts regardless specific software artifacts concepts applied 
mathematical framework generate consensus software engineering community provide means better communication researchers better guidelines analysts better evaluation methods commercial static analyzers practitioners 
propose mathematical framework generic specific particular software artifact rigorous precise mathematical concepts 
framework defines important measurement concepts size length complexity cohesion coupling 
intend complete fully objective frameworks proposed different choices 
believe formalisms properties introduce convenient intuitive 
addition reviewed literature subject compared 
framework contributes constructively theoretical ground software measurement 

concepts introduced years define characteristics artifacts produced software process 
instance speaks size complexity software specification design code cohesion coupling software design code 
techniques introduced goal producing software better respect concepts 
example parnas design principles attempt decrease coupling modules increase cohesion modules 
concepts guide choose alternative techniques artifacts 
instance technique may preferred yields artifacts complex artifact may preferred complex 
turn lower complexity believed provide advantages lower maintenance time cost 
shows importance clear unambiguous understanding concepts mean choices objective bases 
supported part nasa umiacs nsf murst cnr 
report available internal report politecnico di milano dipartimento di elettronica informazione 
university maryland cs tr definition relevant concepts classes software characterization measures step quantitative assessment software artifacts techniques needed assess risk find optimal trade offs software quality schedule cost development 
capture concepts quantitative fashion hundreds software measures defined literature 
vast majority measures survive proposal phase manage get accepted academic industrial worlds 
reason fact built clearly defined process defining software measures 
propose bmb process driven clearly identified measurement goals knowledge software process 
crucial activities precise definition relevant concepts necessary lay rigorous framework software engineering measures define meaningful founded software measures 
theoretical soundness measure fact really measures software characteristic supposed measure obvious prerequisite acceptability 
exploratory process looking correlations acceptable scientific validation process accompanied solid theory support 
unfortunately new software measures defined capture elusive concepts complexity cohesion coupling connectivity 
size thought reasonably understood 
impossible assess theoretical soundness newly proposed measures acceptance new measure matter belief 
proposals appeared literature ljs tz years provide desirable properties software measures 
works especially validate existing newly proposed software measures 
surprisingly new measure proposed software complexity measure satisfy set properties checked authors failed conclude measure software complexity measure ck 
concluded measure complexity measure satisfy set properties complexity measures 
provide absolute definition software complexity measure check properties consistent respect measure check properties measure 
situation unacceptable engineering mathematical fields 
instance suppose defines new measure claiming distance measure 
suppose measure fails satisfy triangle inequality characterizing property distance measures 
natural realize distance measure say distance measure satisfy conditions distance measure 
true sets properties proposed far reached wide acceptance considered right set necessary properties complexity 
position odd situation due fact different concepts covered word complexity 
set commonly mentioned software characteristics size complexity ones received widest attention 
majority authors inclined believe measure captures size complexity size concepts related software characteristics grouped unique name complexity 
size considered particular kind complexity measure 
concepts capture different software characteristics clearly separated similarities differences clearly studied impossible reach kind consensus properties characterize concept relevant definition software measures 
goal lay basis discussion subject providing properties partial set measurement concepts relevant definition software measures 
measure properties proposed literature generic sense characterize specific measurement concepts relevant syntactically measures see tz 
want focus properties differentiate measurement concepts size complexity coupling want identify clarify essential properties concepts commonplace software engineering form important classes measures 
researchers able validate new measures checking properties specifically relevant class concept belong size additive 
means properties regarded university maryland cs tr unique set properties possibly defined concept 
want provide theoretically sound convenient solution differentiating set known concepts check analogies conflicts 
possible applications framework guide researchers search new measures help practitioners evaluate adequacy measures provided commercial tools 
believe investigation measures address artifacts produced software process code 
commonly believed early software process phases important ones rest development depends artifacts produce 
oftentimes concepts size complexity cohesion coupling believed relevant respect code relevant artifacts 
properties propose general applicable wide set artifacts 
organized follows 
section introduce basic definitions framework 
section provides set properties characterize formalize intuitively relevant measurement concepts size length complexity cohesion coupling 
discuss relationships differences different concepts 
best known measures examples illustrate points 
section contains comparisons discussions regarding set properties complexity measures defined literature 
directions come section 
basic definitions introducing necessary properties set concepts intend study provide basic definitions related objects study concepts applied size complexity 
systems modules concepts investigate size section complexity section related systems general speak size system complexity system 
introduce new concept length section related systems 
general framework recall want properties independent possible product abstraction system characterized elements relationships 
reduce number possible system representations elements relationships defined needs 
definition representation systems modules system represented pair represents set elements binary relation representing relationships elements 
system system module em rm rm example defined set code statements set control flows statement 
module may code segment subprogram 
elements module connected elements rest system incoming outgoing relationships 
set relationships elements outside module module defined set relationships elements module rest system defined university maryland cs tr introduce inclusion union intersection operations modules definitions empty disjoint modules remainder 
notational convenience denoted extending usual set theoretic notation 
illustrate operations means system represented 
consider modules area filled area filled area filled area filled inclusion 
module said included module notation em rm union 
union modules notation module 
union modules module area filled 
intersection 
intersection modules rm notation module 
empty module 
module denoted empty module 
disjoint modules 
modules said disjoint 
operations modules 
framework modules just subsystems systems theoretically decomposed modules 
definition module particular measure specific context just matter convenience programming environment language constraints 
university maryland cs tr modular systems concepts investigate cohesion section coupling section meaningful systems provided modular decomposition speak cohesion coupling system structured modules 
speak cohesion coupling single module system 
definition representation modular systems tuple ms represents modular system system definition collection modules em set elements ms partitioned sets elements modules 
denote union rm ir 
set intra module relationships 
modules disjoint union equal union equal ir 
set inter module relationships 
example set declarations set ada modules set dependencies set ada modules 
shows modular system ms obtained partitioning set elements system different way 
modular system system 
ir 
ms 
modular system 
noted measures take account modular structure system 
mentioned concepts size complexity defined sections examples modular system ms computes size complexity system considered 
defined concept properties graph theoretic approach allow general precise 
general properties defined restriction applies definition vertices arcs 
known product abstractions fit framework data dependency graphs definition graphs control flow graphs uses graphs component graphs precise defined formalism concepts mathematically defined system module modular system properties section 
university maryland cs tr 
concepts measurement properties noted concepts defined extent subjective 
wish assign intuitive convenient properties 
consider properties necessary sufficient guarantee measures hold useful sense 
hand properties constrain search measures measure definition process rigorous exploratory bmb 
relevant concepts studied size length complexity cohesion coupling 
represent exhaustive list starting point discussion eventually lead standard definition set software engineering community 

size motivation intuitively size recognized important measurement concept 
framework size negative property size expect null system contain elements property size 
modules elements common expect size additive property size 
definition size size system function size characterized properties size size 
property size non negativity size system non negative size size property size null value size system null empty size size ii property size module additivity size system equal sum sizes modules element element size size size size iii instance size system sum sizes modules property size provides means compute size system knowledge size disjoint modules set elements composed different element 
university maryland cs tr size ee size size iv adding elements system decrease size size monotonicity property size size size properties size size follows size system greater sum sizes pair modules element element size size size size vi size system built merging modules greater sum sizes modules due presence common elements lines code operators class methods 
properties size size hold applying admissible transformation ratio scale 
contradiction concept size definition size measures ratio scale 
examples counterexamples size measures measures introduced literature classified size measures properties size size 
code measures loc statements modules procedures halstead length occurrences operators occurrences operands unique operators unique operands 
cases representation program system quite straightforward 
counted entity element relationship elements just sequential relationship 
measures introduced size measures satisfy properties 
instances estimator length volume additive software modules disjoint property size 
measures value obtained disjoint software modules concatenated may sum values obtained module may contain common operators operands 
note context graph just sequence operand operator occurrences 
disjoint code segments disjoint subgraphs 
hand measures meant capture concepts size measures 
instance object oriented suite measures defined ck weighted methods class wmc defined sum complexities methods class 
implicitly program seen directed acyclic graph hierarchy terminal nodes methods nonterminal nodes classes 
classes methods common merged resulting class wmc equal sum wmc original classes property size satisfied 
classes methods common merged wmc resulting class may lower sum wmc original classes formula size vi 
size properties hold straightforward show properties size size true wmc class size measure 
wmc satisfy properties complexity measures see section 
likewise noc number children class response class rfc ck size measures properties 
university maryland cs tr 
length motivation properties size size characterize concept size commonly intended software engineering 
concept size may different interpretations everyday life depending measurement goal 
instance suppose want park car parallel parking space 
size interested maximum distance points car linked segment parallel car motion direction 
properties size size aim defining measure size 
respect physical objects volume weight satisfy properties 
particular case objects unidimensional interested carrying measurements respect dimension concepts coincide 
order differentiate measurement concept size call length 
length non negative property length equal elements system property length 
extreme situations systems composed unrelated elements property allows length non null 
new relationship introduced elements belonging connected component graph representing system length new system greater length original system property length 
idea case new relationship may elements connects closer 
new relationship may reduce maximum distance elements connected component graph may increase 
hand new relationship introduced elements belonging different connected components length new system smaller length original system 
stems fact new relationship creates new connected component maximum distance elements maximum distance elements original connected component property length 
length additive disjoint modules 
length system containing disjoint modules maximum length property length 
definition length length system function length characterized properties length length 
property length non negativity length system non negative length length property length null value length system null empty length length ii property length non increasing monotonicity connected components system module represented connected component graph representing adding relationships elements increase length elements system said belong connected component path non directed graph obtained graph representing removing directions arcs 
university maryland cs tr connected component length length length iii property length non decreasing monotonicity non connected components system modules represented separate connected components graph representing adding relationships elements elements decrease length separate connected components length length length iv property length disjoint modules length system disjoint modules equal maximum lengths length max length length length illustrate properties systems represented 
assume length system composed connected components maximum value lengths property length 
system differs system added relationship represented thick dashed arrow connects elements belonging connected component length system greater length property length iii 
system differs system added relationship represented thick solid arrow connects elements belonging different connected components length system length property length iv 
properties length length hold applying admissible transformation ratio scale 
contradiction concept length definition length measures ratio scale 
examples length measures measures defined system module level length concept 
typical example depth hierarchy 
nesting depth program dit depth inheritance tree hierarchy general case defined ck length measures 

complexity motivation intuitively complexity measurement concept considered extremely relevant system properties 
studied researchers see section comparison framework literature 
framework expect complexity non negative property complexity null property complexity relationships elements system 
argued complexity system university maryland cs tr elements connected need necessarily null element may complexity 
view complexity system property depends relationships elements isolated element property 
complexity element taken isolation may intuitively bring originate relationships subelements 
instance modular system module viewed high level element encapsulating subelements 
want consider system composed high level elements unpack consider relationships considering subelements 
want consider contribution relationships subelements represent system rr 

properties length 
university maryland cs tr complexity sensitive representation conventions respect direction arcs representing system relationships property complexity 
relation represented active passive form 
system relationships elements affected equivalent representation conventions complexity measure insensitive 
complexity system sum complexities collections modules modules share relationships may share elements property complexity 
believe property strongly differentiates complexity system concepts 
intuitively property may explained phenomena 
transitive closure larger graph graph obtained union transitive closures contained 
consequence kind indirect transitive relationships elements considered computation complexity complexity may larger sum modules complexities modules share relationship 
equal 
second merging modules may implicitely generate elements modules 
definition relationships may created blocks merged common system 
consequence properties system complexity decrease set system relationships increased property complexity 
argued case relationships elements system complex system 
instance argued adding relationship elements may understanding system easier clarifies relationship 
certainly true want point assertion related understandability complexity complexity factors contribute understandability 
factors strong influence understandability amount available context information knowledge system 
literature argued inner loop shellsort algorithm taken isolation understandable algorithm role inner loop algorithm fully understood rest algorithm 
shows understandability improves larger amount context information available complexity shellsort algorithm inner loop 
example relationship elements system may added explicitly state relationship implicit uncertain 
adds knowledge system time increases complexity properties 
cases see examples gain context information knowledge may overcome increase complexity result may improve understandability 
stems fact phenomena concurrently affect understandability mean way increase complexity increases understandability 
complexity system disjoint modules sum complexities single modules property complexity 
consistent property complexity property intuitively justified fact transitive closure graph composed disjoint subgraphs equal union transitive closures subgraph taken isolation 
furthermore modules put system merged disjoint module system additional relationships generated elements elements 
properties define complexity limited extent generalization properties authors provided literature see ljs tz software code complexity usually control flow graphs 
generalize may want artifacts software code abstractions control flow graphs 
definition complexity complexity system function complexity characterized properties complexity complexity 
university maryland cs tr property complexity non negativity complexity system non negative complexity complexity property complexity null value complexity system null empty complexity complexity ii property complexity symmetry complexity system depend convention chosen represent relationships elements complexity complexity complexity iii property complexity module monotonicity complexity system sum complexities modules relationships common complexity complexity complexity complexity iv instance complexity system shown smaller sum complexities 
module monotonicity complexity 
property complexity disjoint module additivity complexity system composed disjoint modules equal sum complexities modules complexity complexity complexity complexity university maryland cs tr instance complexity system sum complexities modules consequence properties complexity complexity shown adding relationships elements system decrease complexity complexity complexity complexity vi properties complexity complexity hold applying admissible transformation ratio scale 
contradiction concept complexity definition complexity measures ratio scale 
comprehensive comparisons discussions previous area complexity properties provided section 
examples counterexamples complexity measures proposed data flow complexity measure df 
case systems programs modules program blocks elements variable definitions uses relationships defined definition variable uses 
measure simply defined number definition pairs block program 
property complexity holds 
modules program blocks may common elements definition relationship contained system program number relationships definition relationships equal sum numbers definition relationships module 
property complexity holds 
number definition relationships system composed disjoint modules blocks definition relationship exists equal sum numbers definition relationships module 
df complexity measure definition 
mcc mccabe proposed control flow complexity measure 
control flow graph corresponds unchanged system framework cyclomatic complexity defined number connected components check complexity measure definition 
straightforward show complexity properties hold 
order check property complexity control flow graph non disjoint control flow subgraphs nodes common relationships 
require control flow subgraphs cyclomatic complexity defined control flow graphs graphs composed connected components start node node incoming arcs node node outgoing arcs 
property complexity requires inequality true number connected components respectively 
true 
instance consider 
elements connected component nodes connected component apiece 
inequality true case cyclomatic number complexity measure definition 
shown satisfies complexity properties 
practical perspective especially large systems correction significant impact value measure 
university maryland cs tr 
control flow graph 
henry kafura hk proposed information flow complexity measure 
context elements subprogram variables parameters modules subprograms relationships fan fan 
subprogram sp complexity expressed length fanin 
fan fan fan respectively local defined hk information flows subprograms sp sp subprograms 
local information flows represented relationships parameters variables sp parameters variables subprograms 
subprograms parameters variables system elements subprograms fan fan links relationships 
size measure length hk loc 
justification multiplying length fanin 
fan complexity procedure depends factors complexity procedure code complexity procedure connections environment 
complexity procedure code taken account length complexity subprogram connections environment taken account fan fan complexity system defined sum complexities individual subprograms 
measure defined properties complexity complexity hold 
property complexity hold disjoint modules measured information flow respectively length fan fan length fan fan statement true length fan fan length fan fan length fan fan length length length fan fan fan fan fan fan equality hold exponent fully justified multiplication fan fan 
henry kafura hk information flow measure complexity measure definition 
fan fan taken separate measures exponent complexity measures definition required properties hold 
similar measures referred structural complexity sc defined sc fan subroutine property complexity hold fan squared formula 
metric suite object oriented design proposed ck 
system object oriented design modules classes elements methods instance variables depending measure considered relationships calls methods uses instance variables methods 
measures validated weyuker properties complexity measures implicitely implying complexity measures 
measures defined ck complexity measure properties university maryland cs tr weighted methods class wmc number children class noc size measures see section depth inheritance tree dit length measure see section coupling object classes cbo coupling measure see section response class rfc size coupling measure see sections lack cohesion methods lcom classified framework 
consistent said framework cover possible measurement concepts 
surprising 
ck shown measures satisfy weyuker property weaker form property complexity see section 

cohesion motivation concept cohesion modules modular systems 
assesses tightness related program features grouped systems modules 
assumed better programmer able encapsulate related program features reliable maintainable system 
assumption supported experimental results bmb 
intuitively expect cohesion non negative importantly normalized property cohesion measure independent size modular system module 
internal relationships module modules system expect cohesion null property cohesion module system far know relationship elements evidence encapsulated 
additional internal relationships modules decrease cohesion supposed additional evidence encapsulate system elements property cohesion 
modules showing relationships merged cohesion increase seemingly unrelated elements encapsulated property cohesion 
cohesion see section coupling modules entire modular systems similar sets properties described time brackets alternation symbol 
instance notation phrases denote fact phrase applies module cohesion phrase applies entire system cohesion 
definition cohesion module modular system cohesion module modular system ms modular system ms function cohesion cohesion ms characterized properties cohesion cohesion 

property cohesion non negativity normalization cohesion module modular system ms modular system ms belongs specified interval cohesion max cohesion ms max cohesion normalization allows meaningful comparisons different modules modular systems belong interval 
university maryland cs tr property cohesion null value 
cohesion module modular system ms modular system ms null ir empty rm cohesion ir cohesion ms cohesion ii recall ir set intra module relationships defined definition 
intra module relationship elements module module system cohesion null 
property cohesion monotonicity 
ms ms modular systems set elements exist modules set elements em belonging respectively implies ir ir 
cohesion cohesion cohesion ms cohesion ms cohesion iii adding intra module relationships decrease module modular system cohesion 
instance suppose systems viewed modular systems ms ms ms 
cohesion cohesion cohesion ms cohesion ms 
property cohesion cohesive modules 
ms ms modular systems underlying system 
modules replaced module union relationships exist elements belonging max cohesion cohesion cohesion cohesion ms cohesion ms cohesion iv cohesion module modular system obtained putting unrelated modules greater maximum cohesion original modules cohesion original modular system 
properties cohesion cohesion hold applying admissible transformation ratio scale 
contradiction concept cohesion definition cohesion measures ratio scale 
examples cohesion measures bmb cohesion measures high level design defined validated data type module system program levels 
brevity sake term software part denotes module program 
high level design seen collection modules exports imports constants types variables procedures functions 
widely accepted software engineering principle prescribes module highly cohesive elements tightly related 
bmb focuses investigating high cohesion values related lower error proneness due fact changes required change module confined encapsulated part program 
university maryland cs tr exported feature said interact feature change definitions uses may require change definitions uses 
approach feature exported module element system interactions relationships elements 
module bmb represented module definition 
high level design time interactions features module known features may interact body module visible part 
software part sp cohesion measures sp sp sp respectively neutral pessimistic optimistic ratio cohesive interactions defined software follows sp sp sp sp sp sp sp sp sp sp sp sp maximum number possible intra module interactions features exported module software part sp 
inter module interactions considered cohesive may contribute coupling 
measures satisfy properties cohesion cohesion 
examples cohesion measures bo new functional cohesion measures introduced 
procedure function main program data tokens occurrence definition variable constant taken account 
data slice data token sequence data tokens program influence statement data token appears influenced statement 
sequence data slice ordered lists data tokens order appearance procedure function main program 
data slice exists data tokens may belong data slice called glue tokens 
subset glue tokens may belong data slices called super glue tokens 
functional cohesion measures defined data tokens glue tokens super glue tokens 
approach represented framework follows 
data token element system data slice represented sequence nodes arcs 
resulting graph directed acyclic graph represents module 
bo introduces functional cohesion measures single procedures functions main programs 
procedure function main program measures sfc strong functional cohesion weak functional cohesion introduced sfc gt shown measures satisfy properties cohesion cohesion 
university maryland cs tr 
coupling motivation concept coupling modules modular systems 
intuitively captures amount relationship elements belonging different modules system 
module kinds coupling defined inbound coupling outbound coupling 
captures amount relationships elements outside elements inside amount relationships elements inside elements outside expect coupling non negative property coupling null relationships modules property coupling 
additional relationships created modules expect coupling decrease modules interdependent property coupling 
merging modules decrease coupling may exist relationships inter module relationships may disappeared property coupling property coupling 
follows referring module coupling word coupling denote inbound outbound coupling denote 
definition coupling module modular system coupling module modular system ms modular system ms function coupling coupling ms characterized properties coupling coupling 
property coupling non negativity coupling module modular system modular system ms nonnegative coupling coupling ms coupling property coupling null value coupling module modular system modular system ms null ir empty coupling ir coupling ms coupling ii property coupling monotonicity ms ms modular systems set elements exist modules 
coupling coupling coupling ms coupling ms coupling iii adding inter module relationships decrease coupling 
instance systems viewed modular systems see section coupling coupling cohesion ms cohesion ms 
property coupling merging modules ms ms modular systems university maryland cs tr 
modules replaced module elements relationships union coupling coupling coupling coupling ms coupling ms coupling iv coupling module modular system obtained merging modules greater sum couplings original modules coupling original modular system modules may common inter module relationships 
instance suppose modular system ms obtained modular system ms merging modules module coupling coupling coupling coupling ms coupling ms 
ms 
effect merging modules coupling 
property coupling disjoint module additivity ms ms modular systems underlying system 
modules replaced module union relationships exist elements belonging coupling coupling coupling coupling ms coupling ms coupling coupling module modular system obtained merging unrelated modules equal sum couplings original modules coupling original modular system 
properties coupling coupling hold applying admissible transformations ratio scale 
contradiction concept coupling definition coupling measures ratio scale 
examples counterexamples coupling measures fenton defined ordinal coupling measure pairs subroutines follows university maryland cs tr number corresponding worst coupling type myers ordinal scale number interconnections global variables formal parameters 
case systems programs modules subroutines elements formal parameters global variables 
coupling system defined sum coupling values subroutine pairs properties coupling coupling hold measures label coupling measure 
fenton proposes calculate median pair values system coupling measure 
case property coupling hold median may decrease inter module relationships added 
similarly coupling subroutines merged inter module relationships lost median may increase 
system coupling measure proposed fenton coupling measure definitions 
bmb coupling measures high level design defined validated module data type system program levels 
notion interaction introduced examples section 
import coupling module defined extent depends imported external data declarations 
similarly export coupling defined extent data declarations affect data declarations system 
system level coupling extent modules related 
module import coupling denoted ic number interactions data declarations external data declarations module export coupling denoted ec number interactions data declarations data declarations external shown bmb coupling properties hold measures 
coupling object classes cbo class defined ck number classes coupled 
coupling measure 
properties coupling coupling obviously satisfied 
property coupling satisfied cbo decrease adding relationship features belonging different classes class uses method instance variable belonging class 
property coupling satisfied cbo remain constant decrease classes grouped 
property coupling satisfied 
response class rfc ck size coupling measure time see section 
methods elements calls relationships classes modules 
coupling holds adding outside method calls class increase rfc coupling holds merging classes change rfc value rfc distinguish inside outside method calls 
similarly calls classes methods coupling holds 
result expected rfc result addition terms number methods class size measure number methods called coupling measure 

comparison concept properties want summarize important differences similarities system concepts introduced 
table uses criteria compared concepts size length complexity cohesion coupling 
important recall coupling cohesion defined context modular systems size length complexity defined systems 
second concepts appear null value second column monotonicity third column properties different sets 
behavior measure respect variations sets characterizes nature measure concept captures 
rfc defined ck shows see sections measure may satisfy sets properties associated different concepts 
matter fact similar sets properties associated different concepts contradictory 
third systems disjoint modules size complexity coupling additive properties size complexity coupling 
cohesion length additive 
university maryland cs tr concepts properties null value monotonicity additivity size length complexity system cohesion ir ir system coupling ir ir table comparison concept properties summary shows concepts really different respect basic properties 
appears desirable properties vary measurement concept 

comparison related mainly compare approach approaches defining sets properties software complexity measures studied extensively thoroughly kinds measures 
compare approach axioms introduced fenton melton fm software coupling measures 
mentioned approach generalizes previous properties defining complexity measures 
previous approaches constrained deal software code generality applied artifacts produced software lifecycle software specifications designs 
defined control flow operations sequencing nesting general representation graph 
weyuker weyuker attempts formalize fuzzy concept program complexity 
discussed authors ck ljs tz point comparison investigating topic software complexity 
weyuker properties comparable assume program weyuker system definition program body module system 
program built combining program bodies means sequential conditional iterative constructs plus program output statements seen special program bodies correspondingly system built constituent modules 
weyuker properties sequencing pairs program bodies provide details representation sequencing framework 
sequencing program bodies obtained composition operation 
correspondingly sq modules representing program bodies denote representation 
follows assume eq rq representation composition program bodies contains elements representation program body contains relationships belonging representations program bodies 
words sq modules list properties axioms initial proponents 
weyuker properties referred tian zelkowitz tz tz 
follows notation denote representation program body university maryland cs tr complexity measure coarse 
sq complexity complexity complexity measure coarse 
nonnegative number finitely systems complexity complexity measure fine 
distinct systems sq complexity complexity 
functionality 
correspondence functionality complexity functionally equivalent complexity complexity monotonicity respect composition 
complexity complexity complexity complexity contribution module terms system complexity may depend rest system 
sq complexity complexity complexity complexity sq complexity complexity complexity complexity complexity measure sensitive permutation statements 
formed permuting order statements complexity complexity renaming 
renaming complexity complexity 
module monotonicity 
sq complexity complexity complexity analysis weyuker properties implied properties contradict added set desired 
think properties general syntactically product measures appear useful framework differentiate concepts 
implied properties shown inequality complexity vi sq modules properties implied properties complexity complexity 
show important delicate point context complexity measure definition 
assuming properties false forces complexity measures strongly related control flow exclude composition program bodies may yield additional relationships elements data declarations program bodies 
properties assumed true forces complexity measures sensitive kind additional relationship 
similarly states order statements control flow impact complexity measures 
assuming property false forces complexity measures insensitive ordering statements 
property assumed true forces complexity measures sensitive ordering statements may useful 
university maryland cs tr analyze property better explain relationship complexity understandability 
property renaming affect complexity 
fact renaming program variables absurd misleading names greatly impairs understandability 
shows factors complexity affect understandability external qualities software affected complexity 
properties approach somewhat liberal weyuker 
instance constant null function acceptable complexity measure properties acceptable weyuker properties 
evident usefulness complexity measure questionable 
think properties check measure addresses concept complexity 
set properties possible build measure satisfies practical interest see cs 
rate sensible reason reject set properties associated concept measures defined satisfy properties characterize distance 
measures satisfy set properties assessed regard usefulness 
probably controversial property 
properties complexity complexity imply 
properties imply stronger form property weyuker see sq complexity complexity complexity weyuker rejects basis lead contradictions argues effort needed implement understand composition program body probably twice effort needed 
point complexity factor taken account evaluating effort needed implement understand program proven effort way proportional product complexity 
fenton addition weyuker fenton shows measurement theoretic mathematical grounds chance general measure software complexity control flow complexity specific kind complexity 
totally agree 
means aim defining single complexity measure captures kinds complexity software artifact 
set properties define constraints specific complexity measure facet complexity addresses 
fenton melton fm introduced axioms believe hold coupling measures 
axioms assume coupling measure connectivity system represented module design chart structure chart 
axiom similar monotonicity property coupling 
states difference module design charts extra interconnection coupling higher coupling second axiom basically states system coupling independent number modules system 
module added shows level pairwise coupling existing modules coupling system remains constant 
properties coupling seen measure certain extent dependent number modules system equivalent axiom 
shows sets properties defined extent subjective 
zuse article encyclopaedia software engineering ese pp 
zuse applies measurement theoretic approach complexity measures 
focus conditions satisfied empirical relational systems order provide additive ratio scale measures 
class measures subset ratio scale measures characterized additivity property theorems ese 
set flowgraphs binary operation university maryland cs tr flowgraphs concatenation additive ratio scale complexity measures pair flowgraphs complexity complexity complexity property shows different concept complexity defined zuse respect defined weyuker properties complexity 
belief requiring complexity measures additive important aspects complexity may fully captured complexity measures quite similar size measures 
considering complexity additive means modules put form new system additional dependencies elements modules taken account computation system complexity 
believe questionable assumption product complexity 
tian zelkowitz tian zelkowitz tz provided axioms necessary properties complexity measures classification scheme additional program characteristics identify important measure categories 
approach programs represented means syntax trees parse trees 
translate representation framework assume program represented entire tree system part program represented subtree module 
tz systems identical functionality comparable order relation respect complexity 
tz system comparable module 
tz system module root tree representation far root sq complex sq words small modules system complex system 
tz intuitive complexity order relation exists systems preserved complexity measure weakened form representation condition measurement theory 
tz measures coarse show sufficient variability 
tz tz tz differentiate software characteristics concepts syntactic product measures 
tz derived set properties 
tz captures basic purpose definition measures preserving intuitive order set software artifacts 
additional set properties tz define measure classification system 
determines measure exclusively syntax tree program sensitive renaming sensitive context definition measured program determined entirely performed program operations regardless order organization concatenation programs contribute positively composite program complexity system monotonicity 
properties related properties defined believe characteristic properties distinct system concepts system monotonicity 
differentiate various concepts associated syntactically measures renaming 
ljs attempted define necessary properties software complexity measures control flow graphs 
order properties comparable notation similar introduce weyuker properties 
program university maryland cs tr 
represented control flow graph system definition program segment module 
addition sequencing properties nesting program construct denoted 
program segment said obtained nesting program segment control location program segment denoted program segment conditional branch embedded location way exists control flow path combined code completely skips 
notation refers nesting specific location embedded immaterial 
follows denote programs program segments sx sy denote corresponding systems modules definition 
ljs introduce properties 
considered basic remaining derived 
discuss compatibility basic properties respect properties 
non negativity 
null value 
program contains sequential code referred basic block complexity positivity 
program basic block complexity property contradict properties particular complexity complexity 
additivity sequencing 
complexity complexity complexity property contradict properties complexity complexity equality sign allowed 
requiring complexity additive sequencing take viewpoint similar zuse 
functional independence nesting 
adding basic block system nesting increase complexity complexity complexity monotonicity nesting 
complexity complexity properties compatible properties 
sensitivity nesting 
complexity complexity university maryland cs tr property contradict properties 
properties contradicts properties 
scope properties limited sequencing nesting control flow graphs study control flow complexity 
properties show derived 
functional independence sequencing 
complexity complexity property follows equality second equality complexity complexity complexity complexity symmetry sequencing 
complexity complexity property follows equalities complexity complexity complexity complexity monotonicity sequencing 
complexity complexity complexity complexity complexity complexity property follows complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity complexity monotonicity nesting 
complexity property follows inequality complexity basic block equality second inequality complexity complexity complexity university maryland cs tr 
directions order provide guidelines analyst charge defining product measures propose framework software measurement various software measurement concepts distinguished specific properties defined generic manner 
framework nature somewhat subjective possible alternatives 
practical framework properties capture believe interesting concepts distinguished different sets properties 
example properties guide search new product measures shown bmb 
hope framework help avoid confusion encountered literature properties product measures 
studying measure properties important order provide discipline rigor search new product measures 
relevancy property measure assessed context defined measurement concept attempt verify length measure additive 
framework prevent useless measures defined 
usefulness measure assessed context respect experimental goal environment thorough experimental validation bmb 
framework global answer problems software engineering measurement just necessary components measure validation process bmb 
research include definition specific measurement frameworks particular product abstractions control flow graphs data dependency graphs 
new concepts defined information content information theory sense 
acknowledgments wolfgang yong mi kim bryan oliver carolyn marvin zelkowitz reviewing drafts 
bmb briand basili defining validating high level design metrics cs tr university maryland college park bmb briand basili goal driven definition process product metrics properties university maryland department computer science tech 
rep cs tr umiacs tr 
submitted publication 
bo bieman ott measuring functional cohesion ieee trans 
software eng vol 
pp 
august 
card measuring software design quality prentice hall englewood cliffs new jersey 
ck chidamber kemerer metrics suite object oriented design ieee trans 
software eng vol 
pp 
june 
cs smith weyuker axioms software complexity measures ieee trans 
software eng vol 
pp 
june 
ese encyclopaedia software engineering wiley sons university maryland cs tr fenton software metrics rigorous approach chapman hall 
fenton software measurement necessary scientific basis ieee trans 
software eng vol 
pp 
march 
fm fenton melton deriving structurally software measures syst 
software vol 
pp 

halstead elements software science elsevier north holland 
harrison entropy measure software complexity ieee trans 
software eng vol 
pp 
november 
hk henry kafura software structure metrics information flow ieee trans 
software eng vol 
pp 
september 
ljs lakshmanan sinha properties control flow complexity measures ieee trans 
software eng vol 
pp 
dec 
mcc mccabe complexity measure ieee trans 
software eng vol 
pp 
apr 
melton gustafson bieman baker mathematical perspective software measures research iee software eng 
vol 
pp 

control flow data flow program complexity proc 
ieee compsac nov pp 

parnas criteria decomposing systems modules communications acm vol 
pp 
may 
axiomatic theory software complexity measure computer journal vol pp 

shepperd algebraic models metric validation formal aspects measurement herman eds pp 
lecture notes computer science springer verlag 
tz tian zelkowitz formal program complexity model application syst 
software vol 
pp 

weyuker evaluating software complexity measures ieee trans 
software eng vol 
pp 
sept 
zuse software complexity measures methods 
amsterdam de gruyter 
