exploiting visual languages software engineering dipartimento di matematica ed informatica universit di sa italy chapter illustrate methodologies assessed results achieved area visual languages profitably exploited field software engineering 
discussion start overview common graphical notations support software engineering activities description popular visual environments 
illustrate tools automatic generation visual languages formalisms specification visual languages 
discussion relevant applications described tools conclude chapter 
keywords visual languages visual programming environments graphical user interfaces models 
graphical diagrammatic representations play central role field software engineering 
widely employed support activities software development process specification analysis design petri nets fsas statecharts dataflow diagrams 
graphical notations recognized powerful aids description understanding complex systems traditional textual descriptions inadequate 
able provide models different views complex systems allow software designers devise solutions design systems 
decades efforts devoted field visual languages 
development research area motivated observation human visual system inclined processing graphical information textual making visual information easily understood people regardless individual cultures 
primary goal visual language community exploit icons graphical notations effectively convey information allow multimodal communication interaction humans computers 
studies performed aimed formalize humancomputer interface providing methodologies high level specification syntax semantics set graphical configurations interactive language allows user exploit interface 
field visual languages including types visual notations may occur specific application domains spatial databases education software engineering 
particular widespread computers communication medium people connected world wide web design visual languages allow effective human human communication emergent timely issue 
rapid progress research area caused need structure literature visual languages resulting useful organized bibliographies available line 
chapter illustrate settled methodologies assessed results achieved area visual languages profitably exploited field software engineering 
discussion start overview common graphical notations support software engineering activities 
section concept visual programming languages introduced popular visual environments described 
section concerned formal specification visual languages 
formalisms construction automatic generators visual languages described section interesting applications tools shown section 
graphical formalisms software engineering typical approach problem solving construction kind problem representation gives insight structure problem allows find possible solution 
spatial diagrammatic representations trees tables graphs important tools reasoning everyday situations formal domains 
level abstraction characterizes allows identify structural similarities problems apparently different 
example tree represent taxonomy animal species tennis tournament genealogical tree 
hierarchical structure associated quite different situations 
consequence solution scheme defined context transferred quite straightforwardly 
field software engineering designers graphical notations structured information provide models different views complex systems 
focusing relevant information models profitably achieve deep understanding systems devise solutions design systems 
strength visual representations derives ability construct documents easily understood different individuals allowing effective exchange information people crucial collaborative software development software maintenance 
matter fact software comprehension major issue important activities software development reuse quality control software maintenance 
expensive tasks process software reengineering 
consequence visual formalisms program visualization tools graphical debuggers developed aim supporting people build comprehensive model software systems 
particular proposed tools software reengineering static analysis source code meant provide different views terms graphical representations dataflows call graphs control flows 
sequel recall main features visual formalisms widely software engineering 
dataflow diagrams dataflow diagrams represent simple intuitive graphical notation analysis design show data processed system output derived input sequence functional transformations 
example dataflow diagram shown 
dataflow models integral part structured analysis design methods see 
specify equipment required equipment spec 
supplier database equipment spec 
validate specification find suppliers checked spec 
supplier list get cost estimates choose supplier spec 
supplier estimate delivery note order details blank order form accept delivery equipment place equipment order checked delivery note order notification signed order form check delivered items install equipment accept delivered equipment equipment database 
dataflow diagram illustrates process installing item equipment 
flow graphs installation instructions installation acceptance equipment details flow graphs provide skeletal model independent paths program 
node flow graph represents condition edges show flow control 
support activities 
particular allow identify test cases needed program structural testing 
employed program restructuring allowing application simplification transformation techniques affecting program semantics 
play central role reverse engineering process support program comprehension 
petri nets petri nets popular graphical formalism especially suitable modeling systems concurrency 
represent extension finite state machines see 
petri nets widely model systems events possible events occur concurrently constraints concurrence precedence frequency occurrences 
major specification synchronous processes design hard real time systems employed software requirement specifications 
statecharts 
petri net dining philosophers problem www cs cmu edu afs cs cmu edu academic class www index html 
statecharts successful formalisms employed analysis design stages software process support creation models system development 
represent extension state transition diagrams states part possibly nested 
inter level transitions model behavior system dynamically reacts externally triggered events 
main features statechart transition diagrams decomposition states inter level transitions broadcast mechanism communication concurrent components see 
variations original formalism proposed take account time requirements real time systems describe multimedia applications see 
statechart formalism widely recognized powerful aid describing complex systems plays central role unified modeling language uml statechart associated class specify behavior objects class 
lab term project final test fail class incomplete lab done project done pass lab lab done passed failed 
expansion state concurrent substates shown tiling graphic region state dashed lines divide subregions 
subregion concurrent substate 
subregion may optional name contain nested state diagram disjoint states 
text compartments entire state separated concurrent substates solid line 
models distance cmu edu shared lectures statecharts 
uml uml presently considered standard modeling language specifying visualizing constructing documenting object oriented systems 
set visual diagrammatic languages tailored model distinguished aspects system simplify complex process software design specification business processes 
allows uniform treatment applications process models development 
employed visual languages grouped categories case structural behavioral implementation diagrams 
room room powerful visual language especially conceived modeling real time object oriented systems 
phases development process room uses unique model consisting actors communicate sending messages protocols 
actors may hierarchically decomposed behavior described room charts variant statecharts obtained changing elements accommodate modeling real time aspects eliminating broadcasting 
room modeling constructs incorporated uml standard giving rise extension named uml rt directed developers complex real time systems 

lines denote signal flow represent data types 
context defined boolean input text message character string input step integer display message output 
program fragment selects characters text variable places display variable accordance value step input variable context input variable true 
signal flow lines may branch required transport value places 
www nrc gov nrc cr htm function block diagram iec function blocks international electrotechnical commission international standard iec provides standard tools programming installation maintenance phases software development projects industrial control order generate software code better understandable reusable verifiable maintainable 
function blocks represent graphical languages proposed standard 
function blocks equivalent integrated circuits sense program elements appear blocks connected 
block graphical object performs specific control function see 
function block language exploits structured approach access visualize data useful applications involve large flow information control components 
graphical notations software management order illustrate project schedule 
particular bar charts employed indicate responsible activity scheduled period 
activity network shows interdependencies activities composing project allows estimate minimum time required complete considering longest path network 

visual programming languages widespread personal computers diverse domains different users motivated investigation kinds interactions able simple intuitive approach computer 
widely recognized value icons diagrams graphical notations human computer interaction human human communication decreasing cost hardware technologies graphics software caused development novel approach named visual programming 
visual programming covers wide variety activities extensive icons diagrams convey information allow multimodal communication interaction humans computers 
spite terminology adopted visual programming denote merely specification graphical programs referred ability graphics communication means activity involves human computer interaction 
consequence notable efforts devoted field visual programming languages language usually conceived collection sentences pictorial components suitably arranged dimensions 
visual programming languages allow user communicate system spatially arranging visual objects screen forming called visual sentence 
user point view visual sentence able intuitively evoke meaning system assigns 
benefits come visual programming languages effective modeling human thought processes 
include direct manipulation immediate visual feedback explicit depiction relationships need learn fewer programming concepts 
theoretical research visual languages aims providing basis understand communication process realized means visual languages 
particular main research issues identified 
concerned providing methods allow specify elements language structured form legal sentence syntax infer meaning conveyed legal sentences semantics 
section give overview formal methods proposed specification visual languages 
second issue involves aspects cognitive science requires investigation properties visual languages effective usable identify general guidelines development visual languages 
requires comprehension visual language better communicating particular message specific application domain visual notation effective purely textual notation 
years empirical studies carried cognitive models humans comprehend reason visual notations developed 
done topic 
experimented subclass visual programming languages represented iconic languages 
iconic sentence spatial arrangement icons pictorial representations conceptual entities operations 
icon object dual representation logical part meaning physical part image 
effectiveness iconic languages strongly depends capability icons resemble meaning physical representation 
important issue visual language research construction tools able generate customized visual languages enhance consistency user intention machine interpretation 
peculiar aspect iconic sentences meaning determined positions pictures sentence see 
important class visual languages called diagrammatic languages 
diagrammatic language set diagrams composed graphical objects related dimensions 
diagrammatic languages traditionally adopted variety application domains architectural design software system design software process engineering telecommunication services chemical studies forth 
empirical studies shown success languages comes ability provide models different views complex systems easily understood different people representing excellent medium human human communication 
diagrammatic notations visual programming languages allows programmer directly map diagram representing conceptual solution problem syntax program 
longer necessary transform solution fits syntax textual programming language symbols variables represent subproblems dependencies 

semantics iconic sentences insert line insert string delete string move string new place replace string chang 
initially general purpose visual programming languages developed simply embedding visual environment traditional programming languages pascal lisp 
environments limited potentiality underlying language time resulted little help people unfamiliar programming 
solution came new paradigms specific visual programming allow development advanced general purpose visual programming languages 
examples paradigms rule dataflow controlflow form program demonstration 
controlflow approach closest textual programming languages 
conventional control flow constructs expressed visual representations 
dataflow languages represent main successful subclasses visual programming languages exploit dataflow diagrams visually depict dependencies data processes 
key success languages represented due absence control aspects pure dataflow languages 
feature characterizing form visual languages 
languages focus relationships data considering evaluation sequencing 
rule languages system state set rules change current state state 
idea program demonstration approach exploit sequences user actions infer general program 
visual programming environments widely recognized visual language effectively supported powerful integrated visual environment 
mainly due specific issues visual programming languages 
visual programming language specialized editor needed assists user specification visual programs providing set graphical symbols relationships 
generalpurpose drawing editors force programmers unacceptable task drawing possibly complex shapes representing symbols relationship language fact limiting benefits visual programming 
second issue related lack standard representation visual input expressions analogous ascii format textual languages 
result parser specific input representation associated editor 
visual programming language requires environment editor compiler components integrated 
reason sequel distinguish visual programming language corresponding environment refer indiscriminately 
wide variety visual programming environments available 
visual programming environments hi visual show tell provide iconic framework program composing icons dimensional display screen pre defined rules 
systems diagrammatic systems designed provide programming environment steps software life cycle supported graphical interaction languages 
visual programming language progres developed executable specification language 
rule oriented visual programming language graph rewriting systems 
tightly integrates textual graphical elements consisting eer class diagrams 
language successfully applied specifying rapidly prototyping interactive systems graphical user interfaces reengineering process modeling distributed system analysis tools different purposes defining syntax visual languages generating visual language parsers editors manipulating knowledge representations 
rule visual programming language 
combines visual tactile programming extension objectoriented programming 
agentsheets designed allowing people programming experience build simple simulations 
environment version cocoa introduced similar purpose 
especially conceived allowing children create simulations video games need learn conventional programming language program approach 
forms represents declarative general purpose object oriented visual programming language 
form language uses cells formulas spreadsheets represent data computations 
forms emphasizes data abstraction providing capability organizing cells group called form 
exploits techniques direct manipulation continuous visual feedback order enhance programming process 
controlflow general purpose object oriented visual programming language uses nested series concentric rings visualize programs 
exhibits aspects object oriented programs including objects classes inheritance polymorphism dynamic dispatch 
semantics program entirely described simple graphical rules 
possible visualize program execution walking network pipes branches different directions changing state actions written inside pipes 
example see picture 

picture expresses loop executed 
statement left loop guard 
true statement right loop executed execution continues going loop nested current loop 
arrow reached execution returns loop arrow points 
cube represents dimensional visual programming language aimed virtual reality programming environment 
language uses dataflow approach program construction show tell main ideas 
prograph labview represent widely experimented visual programming languages designed commercial 
prograph generalpurpose visual object oriented language release prograph developed 
integrates concepts classes objects represented icons visual dataflow techniques graphically specifying internal methods class see 

rules prograph primes problem 
pane try candidate inputs second list 
call try candidate pane shows iterated left output supplied left input list recycling middle 
comparison candidate determines terminate loop 
call add determines add candidate list 
function implemented panes 
iterates list known primes predicate prime calling element list indicated 
list exhausted case attaches candidate list known primes 
predicate fails square called case control terminates case initiates second discards candidate 
prime block determines candidate divisible known prime 
check square terminates graph succeeding current list element exceeds upper bound 
terminates failure division produces remainder zero visual languages comparison cs cmu edu wjh papers html 
prograph seen sophisticated application builder visual programming language supported powerful program development environment 
integrated editors interpreter interactive debugger allow developer inspect edit code data program executes accelerating development process 
wide variety applications developed prograph web business applications neural networks tools designing layered protocols user interfaces forth 

block diagram corresponding prime numbers problem stretches input left output primes right 
left side diagram initializes boolean array contain false values minus true values 
loop executed times supplied value ith element false number isn prime box dark grey border executed 
ith element true prime multiples starting twice set false computation innermost box visual languages comparison www cgi cs cmu edu wjh papers html 
labview visual dataflow language commercialized national instruments 
labview usual box line structure dataflow diagrams enriched icons representing constructs conditionals loops sequences see 
provides operators excellent medium construct virtual electronic instrument operating real time 
matter fact accompanying visual programming environment specialized data acquisition analysis considerably suitable application domains 

formal specifications visual languages research visual language syntax specification heavily influenced formal language theory 
main motivation aim exploiting established theoretical background techniques developed string languages setting multidimensional visual languages 
result methods proposed visual language specification grammar years different approaches proposed investigated logic algebraic approaches 
appealing features class iconic visual languages fact established theoretical background derived deep investigation chang early 
agreement formalization kinds icons considered process icons object icons 
express computations subdivided elementary object icons composite object icons 
elementary object icons identify primitive objects language composite object icons identify objects formed combining screen elementary object icons spatial operators hor horizontal composition ver vertical composition overlay con connect 
iconic visual language specified grammar op set nonterminals set terminals denoting icons op set spatial relational operators start symbol set productions right hand side expression involving relational operators 
presently grammar formalisms specification diagrammatic languages considered great interest 
literature offers wide variety formalisms differ aspects 
mainly due fact widely accepted agreement primitive elements visual language 
cases visual sentences basically conceived multiset symbols 
grammar models attributes order handle information spatial layout symbols general reflect graphical interface nature 
attributes integral part parsing input sentence sense production applicable constraints hold attribute values 
positional grammars relational grammars constraint multiset grammars picture layout grammars fall class 
grammar formalisms attributes 
specify relationships symbols multisets higher level abstraction dependent underlying implementation graphical interface 
symbol relation grammars graph grammar models grammars hypergraph grammars layered graph grammars belong class :10.1.1.47.6425
general grammar formalisms diagrammatic language specification extend traditional string grammars rewrite sets multisets symbols sequences specify relationships objects concatenation relationship 
consequence analysis visual programming languages harder due high cost parsing 
strings naturally drive sequential scanning symbols precise scanning order implicit multidimensional structures 
effective grammars specifying visual language syntax requires efficient parsing techniques 
parsing issue visual languages widely investigated literature methods proposed impose restrictions form grammars balancing ability express visual languages efficiency parsing techniques 
close grammar approaches formal specification methods rewriting systems 
particular worth mentioning visual attributed rewriting systems especially conceived specify pictorial computational aspects visual languages order automatically generate control mechanisms interaction 
commercially available visual languages prograph labview complete formal specification benefits derived providing formal specification visual language 
particular context free style grammar formalisms simplify development complex visual languages support incremental approach 
customization modifications due user preferences needs easily performed maintenance debug language 
code report generation effectively realized defining attribute grammar 
translation carried parse tree output syntactic analysis process 
powerful visual environment generators constructed generate visual environment specific language starting syntax semantic specification language 

visual programming environment generators widespread visual programming environments observation development language specific environments cumbersome time consuming activity motivated need general environments offering opportunity programmer defining visual language best fits particular application 
matter fact years effort devoted development tools assist designer specification implementation visual environments 
special focus put implementation systems generate visual environments starting formal specifications visual languages 
sil syntactic interactive learning system visual programming environment supporting definition visual language user interaction formal visual grammar model 
includes general icon interpreter performing syntactic semantic analysis specific visual grammar 
visual language customization issue addressed visual language generator system exploits grammatical inference techniques design adaptive visual languages 
system powerful tool specifying designing interpreting customized iconic languages different applications 
general visual grammar model picture layout grammar considered visual programmer workbench system synthesize customize visual programming environments restricted iconic languages 
years effort spent implementation integrated environments supporting designer specification analysis diagrammatic languages 
supplied specification systems generate integrated environment consisting graphical editor supports user composition diagrammatic sentence syntax semantic analyzer interprets sentence agreement specified language 
capabilities system mainly depend characteristics underlying syntactic framework 
systems grammar models attributes order handle information spatial layout symbols see 
exploit grammar formalisms attributes specify relationships symbols sentence higher level abstraction 
graph grammar principles corresponding rewriting approaches taken basis visual environment generation 
visual language compiler compiler graphical system automatic generation visual programming environments positional grammar model 
appealing feature inherits extends visual field concepts techniques traditional compiler generation tools yacc 
due characteristics positional grammar model represents natural extension context free grammars 
allowed efficient lr parser positional grammars syntax directed scanning input 
despite efficiency parsing algorithm expressive power positional grammars sufficient describe real world complex visual languages 
matter fact notion hybrid hierarchical types specific system useful tool model complex languages statecharts uml visual notations 
shown example visual environment generated 
generated editor control syntactic correctness sentence drawn user 
control committed generated language compiler 
system proposals formalism generate syntax directed editor drives language users editing actions 
consideration strict editing rules imposed editors consequent limitations manipulation visual sentences led metaphor intelligent editing 
metaphor penguin system constraint multiset grammars underlying formalism 
approach application incremental parsing technique sentence construction allowing incorrect intermediate visual sentences providing feedback recognized parts supporting object manipulation 
approach adopted diagen system allows rapid development powerful diagram editors :10.1.1.47.6425
generated editors combine free hand editing syntax directed editing 
analysis module hypergraph transformations grammars verifies structure syntactic correctness diagrams line editing process 
results structural analysis provide syntactic highlighting interactive automatic layout facility 
layout mechanism flexible geometric constraints relies external constraint solving engine 
visual language programming environment generator benefits appealing features underlying symbol relation grammar formalism allows high level abstraction language specification 
possible lexical analyzer able interpret physical layout input visual sentence identify relevant relationships graphical symbols composing sentence 
system provides support rapid prototyping process offering capability automatically generating syntax language inference module 
module extends diagrammatic languages grammatical inference techniques previously experimented system 
capability allows designer focus structural features target language quickly receive feedback customer language prototyping process 
visual annotation button case symbol instances case symbol 
allows generate visual environment hierarchical visual notations uml 
example class object class diagram language visually annotated state diagram language 
shows generated visual programming environment 
user click annotation button highlighted class object needs annotate effect user draw class diagram possibly zoom class define modify state diagram 

applications visual programming environment generators visual programming environment generators proposed valuable aid applications require high level flexibility due continuous modifications 
grammar formalism specification visual language allows incremental specification language achieved adding eliminating syntactic semantic rules 
especially useful support rapid prototyping visual languages allows rapid construction modification prototype agreement customer advice 
interesting applications systems devised construction meta case definition complex diagrammatic interfaces development multimedia applications 
meta case immediate visual environment generators construction visual programming consisting integrated editors compilers debuggers interesting uses systems construction meta case generate supporting phases software development process 
effective diagrammatic notations activity software development process requires availability case tools supporting 
particular analysis design graphical oriented sense support editing manipulation diagrammatic notations allow engineers create suitable models system 
analysis design available supporting commonly structured methods 
organizations wish tailor methods need requirements 
consideration high cost method adaptation motivated construction meta case tools allow easier generation analysis design customized organizational software process 
main difficulty automatic generation derived lack formal syntax semantics specification diagrammatic notations part analysis design methods 
formal specification methods proposed visual language research area profitably aim 
particular visual language generation tools represent core part meta case tools research efforts presently put topic 
graphical user interfaces advent graphical user interfaces means human computer interaction greatly contributed usability computer systems 
interface presents user visual objects representing elements information space directly manipulate having describe action executed 
creation guis represents difficult expensive task 
development modern interfaces requires major part software project resources due costs design implementation debug modification 
years effort devoted development interactive graphical applications effective better address users needs 
effectiveness graphical user interface related capability satisfying user preferences tasks problems determined consistency user intention machine interpretation 
known main difficulties development graphical user interfaces lies achievement clear unambiguous comprehension customer needs 
reason user take part interface design process giving rise user centered approach 
sense prototyping approach represents appropriate development methodology generate customized guis 
success approach strongly affected rapid construction modification prototype agreement customer requirements 
aim user interface management systems uims developed special purpose languages formalisms state transition networks order describe interfaces user interface development easier 
systems major faults 
semantic meaning interactions user interface described conventional programming techniques 
second limited fixed set behaviors allowable generally insufficient tasks required 
uims integrate interface application representation domain 
generated interfaces graphical standard widgets 
pointed effective monitoring maintenance complex systems electric power plants life support systems space stations systems fault diagnosis orbiting satellites require sophisticated graphical interfaces able organize relational information 
purpose interfaces need rely diagrammatic languages suitable graphically representing relationships involved objects 
result application building tools provide starting point building applications generally inadequate complete job 
years observation graphical user interfaces direct manipulation may seen visual languages human computer interaction suggested visual languages methodologies techniques basis construction tools able generate visual interaction systems formal specification visual syntax semantics 
tools meant generalize prototype facilities support building applications richer user interface designs currently possible existing tools 
fact grammar visual environment generators allow designer define target graphical interface providing syntactic semantic specification visual language disregarding visual environment creation automatically performed system 
multimedia applications multimedia application formed collection multimedia objects 
multimedia applications mainly visual objects 
techniques methodologies developed field visual languages profitably development multimedia systems 
matter fact years increasing attention put visual languages customization capabilities allow users introduce new icons edit iconic sentences different meanings dynamic interactive aspects 
languages support dynamic access media letting users customize icons accommodating multimedia objects 
hand visual environment generators simplify development generation control mechanisms multimedia presentations 
standard methodology specifying multimedia applications current methods multimedia development employ graphical notations hypergraphs petri nets extensions uml 
graphical notations effectively realized visual environment generators 
parsing visual notations multimedia development provide means control associated multimedia presentations 

important issues area visual programming languages pointed investigation may strongly impact field software engineering 
scaling problem addressed order visual programming languages suitable handling large real world applications 
visual programming languages labview provide visual abstraction mechanisms turned effective efficient complexity management development large applications 
languages tackle scaling issue adopting object oriented approach inheritance allows sort refinement system modeling 
case prograph object subclass may modify inherited methods superclass arbitrarily 
expect solution scaling issue derive exploitation successful approaches 
relevant issue concerned design characterization cognitively effective visual languages 
efforts put matter done provide methodologies empirical systematic evaluation visual languages 
advances hardware technologies software graphics provide challenges visual language research community 
particular dramatic new capabilities human computer interaction derive extension visual languages interaction languages 

genged generic graphical editor visual languages algebraic graph grammars procs 
ieee symposium visual languages 

minas sch rr taentzer application graph transformation visual languages rozenberg ed handbook graph grammars applications vol 
world scientific 

booch rumbaugh jacobson unified modeling language user guide addison wesley 

bottoni costabile levialdi specifying dialogue control visual interactive systems journal visual languages computing 

software design addison wesley 

burnett www cs orst edu burnett vpl html 

burnett ambler interactive visual data abstraction declarative visual programming language journal visual languages computing 

burnett baker classification system visual programming languages journal visual languages computing september 

chang ksi edu 

chang ed 
visual languages visual programming plenum publishing new york 

chang multimedia software engineering kluwer 

chang tauber yu yu visual language compiler ieee trans 
software engineering 

marriott automatic construction intelligent diagram editors procs 
uist san francisco california pp 


hall zorn programming visual expressions proc 
ieee symposium visual languages 

de lucia automatic generation visual programming ieee computer 

de lucia parsing methodology implementation visual systems ieee trans 
software eng 


supporting hybrid hierarchical visual language definition procs 
ieee symposium visual languages 

tucci automating visual language generation ieee trans 
software eng 

structured analysis system specification yourdon press new york 

satta tucci symbol relation grammars formalism graphical languages information computation 

tucci predictive parser visual languages specified relation grammars procs 
ieee symposium visual languages 

tucci system rapid prototyping visual language environments technical report dip 
di matematica informatica univ 

golin reiss specification visual language syntax procs 
ieee workshop visual languages rome italy october pp 


visual language editing grammar visual structure editor journal visual languages computing pp 


green petre usability analysis visual programming environments cognitive dimensions framework journal visual languages computing 

harel statecharts visual formalism complex systems science computer programming 

helm marriott declarative specification visual languages procs 
ieee workshop visual languages illinois 

visual languages computing survey data flow visual programming languages journal visual languages computing 

hirakawa tanaka ichikawa iconic programming system hi visual ieee trans 
software engineering 

ibrahim unige ch visual vp html 

janssens rozenberg structure node label controlled graph languages information sciences 

kimura choi mack show tell visual programming language visual programming glinert ed ieee computer science press pp 

labview www ni com labview default htm 

larkin simon diagram worth words cognitive science 

marriott constraint multiset grammars procs 
ieee symposium visual languages 

marriott meyer editors visual theory springer verlag 

kimura show tell user manual washington university technical report wucs mar 

minas diagram editing hypergraph parser support procs 
th ieee symposium visual languages capri italy 

hare visualizing program design ieee computer 

myers taxonomies visual programming program visualization journal visual languages computing 

myers creating user interfaces demonstration mit press cambridge ma 

najork kaplan cube language procs 
ieee workshop visual languages kobe japan 

najork kaplan specifying visual languages conditional set rewrite systems procs 
ieee workshop visual languages 

nardi models metaphors visual formalisms user interface design journal visual languages computing 

paulo ferreira de oliveira extended statecharts support hypermedia specification ieee transactions software engineering 

reiss graphical program development program development system sigplan notices 

cherry brand repenning principles scaffold mixed textual iconic user programming languages procs 
ieee symposium visual languages nova canada 

rekers sch rr defining parsing visual languages layered graph grammars journal visual languages computing 

repenning agentsheets applying grid spatial reasoning human computer interaction procs 
ieee workshop visual languages bergen norway 

rubin walker ii golin early experience visual programmer workbench ieee trans 
software engineering 

sauer engels extending uml modeling multimedia applications proc 
ieee symposium visual languages 

sch rr winter visual programming graph rewriting systems procs 
ieee symp 
visual languages 

selic efficient object oriented variation statecharts formalism distributed real time systems ifip conference hardware description languages applications ottawa canada 

selic ward real time object oriented modeling john wiley sons ny 

selic rumbaugh 
uml modeling complex real time systems 
www com technical html 

shu visual programming languages perspective dimensional analysis chang ichikawa editors visual languages plenum publishing new york 

smith cypher spohrer programming agents programming language communication acm 

sommerville software engineering addison wesley 

carver visual programming prograph manning publications prentice hall englewood cliffs 

structure interpretation visual languages visual languages visual programming ed 

chang plenum press new york 

dinesh visual programming environment generator algebraic specifications procs 
ieee symposium visual languages darmstadt germany 

whitley visual programming languages empirical evidence journal visual languages computing 

wittenburg relational grammars theory practice visual language interface process modeling visual language theory springer verlag 
