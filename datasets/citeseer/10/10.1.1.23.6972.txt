notions computability higher types john longley august discuss conceptual problem identifying natural notions computability higher types natural numbers 
argue eclectic approach considers wide range possible approaches defining higher type computability looks regularities 
step programme give extended survey di erent strands research higher type computability date bringing material recursion theory constructive logic computer science 
serves reasonably complete overview literature higher type computability 
sequel papers devoted developing systematic account material reviewed 
elementary recursion theory begins question mean total partial function set natural numbers computable 
known di erent approaches defining notion computable function recursion schemas turing machines lambda calculus markov algorithms flowcharts lead answer class total partial recursive functions 
church thesis proposes identify informal notion ectively computable function precise mathematical notion recursive function 
fact prima facie independent mathematical characterizations yield class functions strongly suggests recursive functions constitute robust mathematically natural class functions 
individual characterizations intuitively appealing formalizations idea computation serious contenders class ectively computable functions known happy accept church thesis time 
ask mean function higher type computable say second order function order functions arguments third order function second order functions arguments 
moment reflection shows choices confront wish formulate definition higher type computability 
example points previously survey article cook coo point view close respects 
domain definition 
want consider partial total computable functions 
want act partial functions type just total functions 
act computable functions type functions wider class 
representation functions 
wish perform computations functions regard functions 
infinite mathematical objects graphs 
oracles black boxes input output behaviour visible 
algorithms programs kind 
kind programs 
protocol computation 
ways interacting functions allow computations 
example insist calls functions performed sequentially allow parallel function calls 
insist terminating computations sense finite objects presumably case seeking genuinely ective notion computability allow infinite computations accordance infinite nature arguments 
extensionality 
want restrict attention computable functions assumed previous points want consider computability possibly non extensional operations higher type 
mean operation 
spirit asking questions demand definitive answers point choices possible 
shall see definitions higher type computability proposed literature exemplify di erent responses issues 
ects choices rapidly climb types example definitions yield di erent classes computable functions type may di cult compare definitions type domains functions may di er 
clear approaches defining higher type computability possible obvious priori approaches sensible approaches lead equivalent notions computability 
short unclear advance higher types really just natural notion computability ordinary recursion theory really natural notions 
planned series articles devoted conceptual problem finding natural notions higher type computability 
previous explored various particular notions computability detail wish take step back look picture view identifying important notions 
main objectives follows word natural appealing intuitive idea shared mathematicians expressed variety ways mathematical landscape homogeneous mathematical objects concepts greater intrinsic importance 
adopt idea holds view mathematical truth 
discover natural notions computability exist higher types collect evidence naturalness 
develop basic recursion theory notions analogous elementary parts ordinary recursion theory 
investigate notions computability related 
provide coherent framework pulling organizing existing knowledge area 
ideas results relevant enterprise known widely scattered literature recursion theory constructive logic computer science previously contributions single subject 
give fairly comprehensive survey date di erent approaches higher type computability raw material project 
sequel papers systematic view material proposing simple general frameworks discussing space possible notions computability showing frameworks reasonably cohesive picture emerge disparate strands 
expand working philosophy little appears priori considerations limited determining natural notions higher type computability definition write involves choices felt arbitrary 
adopt empirical attitude explore range possible definitions see natural notions emerge 
various criteria may determine notions computability count natural instance admit wide range independent characterizations independent better 
arise intuitively appealing concept computation 
occupy special position space possible notions computability 
research years exploring di erent approaches higher type computability feel time opportune bringing material trying sense big picture 
favour eclectic attitude know advance look notions computability cast net wide possible embrace diversity definitions proposed literature 
anticipate outcome project argue computable functionals fact handful natural robust notions higher type computability variety di erent characterizations pleasing intrinsic properties interesting relationships 
possible equally natural notions computable functional awaiting discovery fact attempts defining notion computable functional lead known notions suggests author opinion current picture probably reasonably complete 
non extensional notions computability situation open ended able unify currently known satisfying way 
am grateful organizers logic colloquium giving opportunity material series tutorials providing stimulus write waiting long finish 
people helped fill gaps knowledge area including samson abramsky ulrich berger solomon feferman martin hyland dag normann gordon plotkin stan wainer 
research supported epsrc research gr notions computability general datatypes 
motivations proceeding mention reasons computability higher types potentially interesting 
intrinsic mathematical conceptual interest subject lies intriguing juncture areas mathematical logic computer science potential actual connections areas 
reasons space say relatively little applications rest choosing focus clarifying fundamental notions subject 
constructive logic metamathematics historically applications ideas higher type computability metamathematics constructive systems 
computable objects finite type give interpretations logics realizability interpretations embody kind constructive content 
technical level interpretations obtain consistency independence results conceptual level helpful clarifying various constructive views mathematics classical standpoint 
early discussion possible applications kind appears kreisel kre sections 
area developed troelstra school tro focused realizability related interpretations 
somewhat similar spirit feferman computable objects higher type give interpretations theories finite type fef 
case logical systems classical typically intended reflect semi constructivist viewpoints su ce support mathematical practice 
descriptive set theory logical quantifiers may regarded objects higher type instance existential quantification natural numbers seen noncomputable object 
interest ing relationships computability relative quantifiers logical complexity instance function computable relative certain sense see section 
aspect higher type recursion theory motivations kleene early developed moschovakis sacks see sac 
semantics logic programming languages computer science natural want understand notion computability embodied programming language turns di erent languages embody di erent notions 
finding mathematical characterizations notions tantamount finding matched semantic models programming language argued lp lon help design program logic language 
finite simple types target study important datatypes lazy lists functions arise naturally retracts simple types 
addition understanding higher type computability contribute semantics object oriented programming languages typically support higher order styles programming 
complexity higher types various ideas higher type computability informed definition complexity theoretic notions see coo appears basic definitions higher type complexity open discussion 
order formulate notions feasible computation higher types instance confront choices mentioned 
clear understanding basic notions higher type computability provide starting point attempt elucidating fundamental notions higher type complexity 
current state art described detail 
similar remarks apply notions higher types considered sch nig 
real number computability connection computability reals higher type computability recognized far back lac lac lac manifested context constructive interpretations systems analysis tro 
notions computability reals metric spaces underpin constructive recursive analysis markov school hand see abe bee classical computable analysis see wei 
interest real number computability computer science see esc exact real number computation appears attractive application area higher type programming 
higher types reals associated notions computability considered normann 
computability physics notions computability analysis turn applied questions computability various physical theories 
territory explored book pour el richards particular definition computability immediately clear definition interest 
appreciation mathematically possible notions computability put better position discussing issues computability physics 
overview series series articles intended fairly comprehensive account currently known higher type computability natural numbers 
part historical survey literature higher type computability tracing various strands research contributed understanding 
intended serve various purposes firstly er gentle main ideas subject secondly document genesis ideas thirdly facilitate comparison di erent strands placing side side fourthly provide reasonably complete map bewildering literature subject 
tried include just technical detail mathematical substance intelligible losing broad sweep story 
point view wish advocate strands describe fruitfully seen hindsight contributions single coherent subject remaining papers series attempt systematic exposition subject 
part ii lon try organize known notions computable functional extensional operations higher type relationships 
general framework simple definitions involving finite type structures 
framework simple somewhat crude su ces clarifying existing material 
developing necessary general concepts consider separately various notions total partial computable functional 
total partial settings arguments impossibility church thesis higher types 
discuss ways total partial functionals related combined 
part iii lon consider generally notions computable operation necessarily extensional example notions computability embodied various non functional programming languages 
order articulate notions sophisticated general framework ideas realizability extends refines theory part ii mathematically satisfying manner 
develop general theory survey framework notions computability appear claim naturalness 
naturally material covered part treated di erent perspective parts ii iii 
feel kind overlap justified interests presenting rounded view takes account historical purely logical aspects subject 
historical logical parts series intended complementary sense tends emphasize ideas receive scant attention 
outline glance confirm study higher type computability developed coherent orderly fashion 
result parallel activity research communities set motivations retrospect various strands seen parts coherent subject 
surprising history subject appears somewhat chaotic 
parallel nature subject development particular history di cult describe compromise strictly chronological presentation thematic necessary linear ordering material completely satisfactory expository point view 
adopted course 
section describe chronologically early computability type 
time notions computability higher types point subject ectively split streams years started converge 
main body sections treat main notions higher type computability turn roughly order appearance literature giving separate chronological accounts developments relating 
section discuss di erent notions total computable functional section consider similar number notions partial computable functional 
fortunately scheme total notions appearance partial ones 
turning developments section describe ideas realizability cross cut streams 
section briefly discuss strands research relating non functional notions computable operation higher types 
presuppose knowledge basic recursion theory simply typed lambda calculus basic category theory including cartesian closed categories basic definitions notation basic concepts central entire ubiquitously 
mind types grammar represents type natural numbers represents type functions convenience define pure types inductively define level type inductively level level max level level 
notion type structure 
purposes type structure consist family sets type application operations 
comprehensive definitions relating type structures part ii 
type object mean element level simplicity write place say type structure type structure extensional types extensional type structures objects essentially functions type structures refer objects type functionals 
comprehensive definitions relating type structures part ii discussion relationships alternative definitions 
write set natural numbers including general natural number object category 
set write set 
tacitly identify partial functions total functions write 
set set theoretic total functions 
set partial functions 
rec rec set total recursive functions 
rec rec set partial recursive functions write seq set finite sequences set notation 
display sequences 
suppose seq fixed ective coding finite sequences write 
place 

define 

suppose ective indexing scheme partial recursive functions example ective enumeration turing machines 
write partial recursive function recursive index write place kleene application 
notational conventions connection potentially non denoting expressions means value defined 
means value defined 
means values defined equal 
means defined values equal kleene equality 
means defined equal 
generally boldface letters abbreviations vectors lists variables care exactly elements 
precisely symbol occurs textually abbreviate 

demanded context regarded fresh variable associated early computability types type computability main ideas concerning computability type functions course date back development basic recursion theory godel god church chu turing tur tur kleene kle kle post pos accumulated characterizations class partial recursive functions mentioned 
explicit formulation church thesis appears chu 
tur section turing introduced notion computing machine equipped oracle deciding non computable properties considered means defining type computability relative fixed oracle truly said introduced concept computable type function 
banach mazur functionals early definition class type functionals involving notion computability due banach mazur bm see maz definition total function rec banach mazur total recursive function nn function total recursive 
notice condition says sense carries computable functions computable functions tell compute sense 
reason notion tangential story tell regard genuine candidate notion history higher type computability selective outline 
basic recursion theory peter type primitive recursion kleene uniform recursiveness grzegorczyk rice shapiro myhill shepherdson kreisel shoenfield ective operations godel system kleene kleene kreisel countable continuous functionals kreisel tait 
strong normalization modern type theory cook 
higher type complexity gandy moschovakis normann admissible set theory sacks harrington degrees sections platek monotone partial functionals kleene tait gandy hyland normann berger totality normann plotkin ershov scott continuous partial plotkin sazonov pcf troelstra higher type realizability hyland 
realizability models synthetic domain theory berry curien sequential algorithms abramsky hyland 
game models loader undecidability ehrhard 
strongly stable longley general theory computable functional property computable functionals may possess 
early results showed computable functional senses discussed banach mazur vice versa see fri various relationships conditions functionals studied pe 
material summarized rog 
banach mazur functionals reappear lawvere mul recursive topos provides natural generalization notion higher types 
computations pure functions explicit definition genuine notion type computability far aware peter pet pet chapter 
peter considered schema primitive recursion second degree means defining total functions arguments type sacrificing generality sake clarity basic idea follows functions may construct function 
peter showed certain class transfinite recursions type systematically replaced primitive recursions type ackermann function primitive recursive usual sense defined type primitive recursion 
famous book kle kleene gave schemata defining primitive total partial recursive functions uniformly finite list functions type explicit possibility regarding type functionals 
kleene notion primitive recursion weaker peter peter scheme allows type functions varied course recursive computation kleene definition type functions enter computation simply additional basic functions remain fixed 
kleene definition yields just usual class primitive recursive functions type 
kleene showed partial recursive functionals characterized equivalently computable turing machines oracles op 
cit chapter xiii 
papers grzegorczyk grz grz considered class computable total functionals arguments defined smallest class containing basic functionals closed substitution minimization operations 
fairly easy see directly immediate kleene results see section grzegorczyk notion coincides kleene notion uniform total recursiveness kleene introduced somewhat peripherally notion partial recursiveness uniformly list partial functions kle study detail 
pointed platek pla pp 
kleene particular definition undesirable features turns give rise class parallel computable type functions see section 
noted literature time 
grz grzegorczyk showed definition equivalent herbrand godel style definition terms equational calculus 
grz investigated properties functionals notably continuity property existence certain computable modulus continuity functionals 
relationship computability continuity recurring theme subject 
case grzegorczyk result vein basic intuition simple apply computable type function type function computation interrogate finitely arguments function agreeing finite portion 
continuous respect familiar baire topology 
computations kleene indices approaches type computability mentioned far share feature type arguments simply oracles black boxes 
parallel strand research considered notions type computability type arguments recursive indices say godel numbers turing machines recursive definitions formal language 
recursive index course oracle apply index type argument 
priori able index oracle extra intensional information intuitively look inside black box 
definition allow state main results succinctly definition ective operation sets rec rec partial function partial ective operation exists partial recursive function 
additionally total say total ective operation fact possible combinations total partial function spaces investigated early literature 
theorem rice ric originally phrased terms decidable properties sets essentially says theorem total acting partial total ective operation rec constant 
led theorem rice shapiro ric theorem due myhill shepherdson ms independently usp 
similar result obtained nerode ner 
suppose ective coding graphs finite partial functions natural numbers 
theorem partial acting partial function rec partial ective operation monotone continuous preserves existing lubs chains rec acts ectively finite elements partial recursive function finite 
partial ective operation extends uniquely monotone continuous function main positive result obtained slightly kreisel shoenfield kls kls independently 
formulation somewhat general original version 
theorem total acting total function rec total ective operation restriction uniformly partial recursive function kleene sense domain contains rec follows easily total ective operation rec continuous respect usual baire topology 
proofs theorem may texts rog bee abe odi 
short proof kleene second recursion theorem gandy gan serendipitous ordinary 
theorems provide striking examples connection computability continuity 
results obviously say deeper result grzegorczyk mentioned earlier place restriction recursive indices may manipulated requirement extensionality get answer possible indices type function 
final theorem quartet due friedberg fri shows connection breaks totality partiality mixed theorem partial acting total exists partial ective operation rec continuous restriction kleene partial recursive functional 
theorems proofs covered rog 
remaining natural questions type computability turn negative answers 
example total ective operation rec restriction uniformly total recursive function shown celebrated kleene tree important counterexamples subject 
theorem kleene tree exists binary tree prefix closed set finite sequences primitive recursive primitive recursive function 
contains finite paths arbitrary length konig lemma contains infinite paths 
contains recursive infinite paths 
kleene tree named appearance theorem lii kle examples phenomenon appear lac zc 
may obtain total ective operation extend total recursive function defining 
negative results help complete picture type 
simple example due pour el pe see rog theorem shows failure plausible analogue theorem total functionals acting total functions continuous functional acts ectively suitable basis finite functions eventually constant functions ective operation 
analogue theorem partial functionals acting partial functions fails uniformly partial recursive functions sequentially computable partial ective operations include parallel functions see section distinction explicitly pla 
early results show situation type quite complicated serve illustrate general characteristics subject 
firstly exhibit considerable diversity approaches defining notion computable functional 
secondly show quite di erent approaches lead class functionals providing evidence intrinsic importance class theorem example 
hand seen definitions computability conveniently collapse single notion important role played negative results counterexamples 
seen instances connection computability continuity 
total computable functionals various notions type computability considered possibility trying extend higher types obvious 
peter pet speculated informally possibility develop 
years saw appearance fewer important notions higher type computability represented godel system kleene schemata kleene kreisel countable continuous functionals ective substructure kreisel hereditarily ective operations 
worth noting notions concerned hereditarily total functionals notions computability partial functionals higher types development 
see section 
roughly speaking notions gave rise strand research study higher type computability appears somewhat fragmented onwards 
consider notions turn lines research gave rise 
system related type systems godel system introduced god provides higher type analogue notion primitive recursive computation number syntactic formalisms define restricted classes computable functionals sense computational complexity definable functionals limited 
formalisms fall somewhat outside primary area interest claim defining complete class computable functionals interesting sense close concerns merit attention 
godel system essentially simply typed calculus ground type constants zero successor primitive higher type equipped reduction rules addition usual reduction mn mn sx variable type 
system naturally extends peter notion second order primitive recursion higher types 
consider system standalone syntactic formalism language denoting functionals type structure 
instance full set theoretic type structure closed term system denotes element obvious way 
godel purpose introducing system give interpretation order heyting arithmetic called dialectica interpretation quantifier complexity replaced type complexity objects finite type 
specifically godel gave translation formulae ha formulae language system quantifier free variables may arbitrary finite type 
sake completeness give definition details important purposes definition dialectica translation atomic formulae define 
define yv zw zw yw sz sy shown provable ha terms system provable system intuitionistic logic terms thought embodying constructive content 
godel regarded immediately apparent notion computable function finite type satisfying axioms system proof interpreted 
gives consistency proof heyting arithmetic view translation peano arithmetic 
interest system go original application 
godel gave proof theoretic characterization expressive power system type functions definable precisely functions provably total order heyting peano arithmetic 
grzegorczyk grz gave alternative presentations system definable functionals style combinatory logic modern perspective di erent original presentation 
tait tai dra hin hin san sho proved independently system strongly normalizing system term reduction paths terminate yielding normal form 
remarkable alternative proof gandy gan 
result proofs depend explicitly implicitly transfinite induction shows extensional term model system consisting closed system terms modulo extensional equality type structure properties needed dialectica interpretation 
functional interpretation arithmetic terms system need interpretation system type structure 
idea implicit kreisel kre 
dialectica interpretation inspired kreisel kre spector spe interpretations analysis essentially second order arithmetic similar spirit go system type structures shall discuss 
mathematical results pertaining specifically system include theorems howard see gir annex definable functionals hereditarily definable modulus extensionality functional 
mathematical analysis system terms functors category ordinals promised gir chapter 
questions concern theories system example equivalence relations system terms induced interpretation various type structures 
largest interesting theory shall call clearly instance abbreviates 
zr write abbreviate 
zr 
godel motivated clause implication follows 
identify proposition 
existence computable functions sequence making antecedent true assign sequence making consequent true 
identify proposition 
existence computable functions sequence making consequent false assign sequence making antecedent false 
required godel argument notion computable functional exist 
footnote revised version god suggests mind kreisel hereditarily recursive operations see section 
extensional closed term model system 
argument due kreisel appearing final set exercises bar shows interpretation system induces strictly smaller equivalence relation computer science terms interpretation fully 
loa loader considers system stronger conservative system shows interpretation system usual category pers fully follows interpretation system type structure heo see induces exactly theory discussions system kre tro bar appendix gir annex 
dialectica interpretation described tro gir 
survey research related system section troelstra introductory note godel original god 
kleene observed system interpreted type structures full set theoretic type structure 
reason system interesting point view admits interpretation kind practically type structures shall occasion consider 
provides kind common skeleton type structures general yields ectively enumerable class functions play role analogous primitive recursive functions ordinary recursion theory 
respect particularly distinguished system systems serve purpose 
example weaker analogue primitive recursion typed calculus constants reduction rules mn mp mn sx xp textually abbreviates 
system corresponds exactly expressive power kleene schemata see section restrictive system just kleene notion type primitive recursiveness restrictive peter 
kleene referred elements definable primitive recursive functionals type functions kind exactly primitive recursive functions usual sense see kle 
notation borrowed fef constants called recursion operators called elementary recursion operators 
kleene primitive recursive functionals mentioned tro 
sense provides better common core simple functionals system inasmuch interpreted wider class type structures 
kleene mathematical interest godel system provided point departure strands modern type theory typically considers stronger systems system higher type complexity theory typically considers weaker systems 
significant areas research theoretical computer science 
detailed information modern type theory bar higher type complexity refer reader survey articles irwin royer 
kleene computability kleene serious attempt full blown generalization notion recursive function type levels kleene definition higher type computability schemata kle kle 
approach higher type computability suppose type structure total functionals define class computable partial functions means certain computation schemata 
spirit definition easily grasped allowed perform ective computations involving elements elements function type treated simply simply oracles black boxes 
particular may feed element function type numbers functions computable sense observe numerical results granted access information elements way 
kleene definition embodies ideal computing functions pure extensions represented implemented 
general include non computable objects imagine oracles working magic 
kleene fact concentrated attention computations objects pure type especially significant decision 
historical importance reproduce kleene original definition glory slightly modified notation 
type structure write disjoint union sets pure types 
write coding pure types natural numbers take ective coding finite sequences natural numbers natural numbers 
abbreviate 


write 

definition proceeds introducing system indexing natural numbers encode definitions computable partial functions reminiscent indexing partial recursive functions ordinary recursion theory 
definition kleene computability extensional type structure inductively define partial operation nx kleene definition restricted case kleene adopted peculiar convention order arguments type material version slightly di erent 
called index application means clauses interpret applying typed 
successor function 
constant functions projections composition 
primitive recursion 
permutation arguments 


type application 
higher type application 
defined index invocation 
say kleene computable number called index curious kleene pioneers calculus greater typed calculus formulating notion computability 
definition kleene computability modern spirit part ii 
noted define perfectly class total functionals schema introduces partiality definition 
notice indexing system redesigned natural number indexed function type partial functions arise reasons circularity index function xy 
undefined inductive definition 
kleene generally conceived computations setting infinitely branching trees transfinite depth invoking computes entire graph means auxiliary computations presenting oracle possible conception example imagine magic oracles included ability recognize functions finitary descriptions case auxiliary computations needed 
conception adopts kleene schemata exhibit curious tension ective finitary computational processes calls oracles computational significance kleene definition di cult assess 
kleene motivation distinct strands earlier 
hand certainly seeking appropriate higher type generalization basic notions ordinary recursion theory including possible analogue church thesis higher types 
hand seeking explain theory logical complexity classical predicate logic embodied arithmetic analytic hierarchies kle kle terms computability relative certain higher type objects emphasis quantifiers papers higher type computability 
motivation goes way explaining features kleene definition appear puzzling modern readers restriction computations total functionals specialization type structure constructively class functionals 
kleene developed basic results notion computability analogous ordinary recursion theory example higher type versions normal form theorem kle restricted version recursion theorem kle 
results precise connection logical complexity instance theorem kleene kle total function graph kleene computable relative type object 
kleene followed definition papers kle kle kle kle showing alternative definitions higher type computability turing machines lambda calculus herbrand godel style recursive definitions give rise class computable functionals 
results course closely parallel corresponding results ordinary recursion theory especially deep extensions familiar results definitions essentially idea computation oracles 
results go way establishing robustness kleene class computable functionals 
despite reassuring results kleene notion higher type computability presents strange anomalies 
mention arising curious infinitary side condition 
notorious fact computable partial functionals closed basic substitution operations 
example fact kle kleene system known church calculus consider functions defined undefined 
partial functions kleene computable solve halting problem 
obviously worrying questionable sense defined computable functional allowed plug total computable functional argument 
essentially problem lies failure natural generalization recursion theorem 
evidence notion partial computability pathological instance set semi recursive semi recursive need recursive see pla union semi recursive sets need semi recursive see gri 
way responding problem accept pure notion partial kleene computable functional restrict attention total computable functionals behave respect substitution give rise cartesian closed category 
interesting cases course total kleene computable functions elements case say closed kleene computation may regard kleene definition picking important substructure find compelling point view pursue part ii 
second curious feature kleene definition noted 
set indices define total functionals instance may vary type structure intuitively fewer elements type easier index define total functional type 
case computability unclear priori totality indices absolute property willing accept notion full set theoretic type structure absolute 
words kleene style computations termination dependent controversial principles set theory 
point essentially noted kreisel kre return part ii 
presentations kleene computable functionals gandy gan platek pla 
treatments sought avoid arbitrary features kleene definitions emphasize naturalness notion computability 
gandy gave perspicuous definition involving register machines argued led kleene notion higher type computability restricted attention hereditarily total arguments treated functions pure extensions 
platek gave characterization kleene functionals general framework recursion theory stressed definability functions recursion computability 
particular showed natural theory recursive definability developed type structures hereditarily partial functionals gave rise kleene functionals simple relationships partial total type structures see section 
platek approach inductive definability streamlined moschovakis mos clarified relationship kleene original definition treatment adopted km see fef 
results mentioned pure notion kleene computability appears hold little mathematical interest 
reason study recursion theory concentrated entirely questions relative computability certain kinds non computable object 
say object kleene computable relative write kleene computable partial function say kleene degree 
subject largely lost contact considered genuinely ective notion computability 
somewhat peripheral story told brief account developments order 
recursion normal objects concentrated theory normal functionals normal classes 
write object embodying existential quantification functional type level said normal interested notions computability kleene computability relative normal particular notions computability 
study normal objects associated notions computability turns yield rich beautiful theory 
roughly speaking deemed computable theory computability including type level way see intuitively observe infinitary side condition decidable presence anomalies mentioned earlier pure kleene computability washed setting 
study computability presence recursion theory sac 
note set computable type functions increases strictly 
significance normal objects emerged kleene early properties seriously exploited gandy gan introduced key concepts stage comparison number selection 
informally stage comparison function functionals partial function tells kleene computation trees smaller ordinal depth assuming trees founded 
particular tell computations terminate 
theorem stated type gan proved type mos extended higher types mos theorem stage comparison normal functional level computable level computable 
stage comparison ordinary recursion theory interleaving arguments instance showing normal level union subsets subset decidable complement 
predicate selection function partial functional selects value satisfying 
basic result proved type gan generalized mos mos theorem number selection normal level 
predicate computable function 

follows example class subsets closed uniform indexed unions partial function level computable graph 
basics stage comparison number selection point covered survey article moschovakis km 
selection theorem kind 
appeared gri incorrect proof 
correct proof hm 
theorem selection normal level 
inhabited subset inhabited decidable subset attention devoted study sections defined kleene kle 
object section set likewise section set 
high points theory result due sacks sac sac theorem plus theorem suppose normal object normal object section 
sacks initiated fine grained study sections spirit classical degree theory considered higher type analogues problems degree theory post problem mac sac sac 
study recursively enumerable degrees sac gri 
obtained recursive versions splitting density theorems sla sla 
sections total functionals envelopes partial functionals 
write set partial functions envelope set level semicomputable relative 
moschovakis mos showed analogue plus theorem envelopes fails normal type object envelope envelope normal type object 
result due harrington har section taken include objects types computable little di erence 
theorem plus theorem suppose 
normal object normal object envelope 
regarding elements envelope normal representing predicates natural ask closure properties enjoy 
clear earlier remarks envelope normal type object closed existential quantification type obvious sense 
situation higher types interesting theorem normal level 
envelope closed existential quantification hm existential quantification sm mos gri 
sacks harrington worked definitions recursion normal functionals di ered somewhat kleene equivalences verified low 
proofs results aided streamlined adopting perspective recursion theory isolates essential features domains case computing 
point view worked books mol fen sac 
little activity specifically areas decade ideas recursion normal objects left mark descriptive admissible set theory 
readers interested applications follow mos mos survey article sac papers cited 
hierarchies area investigation search hierarchies functionals computable object 
starting point endeavour fact section consists exactly functions shown kleene kle classified logical complexity means ordinal hierarchy height ck known hierarchy 
kleene kle introduced general idea seeking similar ordinal various sections higher type objects 
tug considered particular normal type object embodying quantifier 

richter ric gave ordinal hierarchies section kleene conjectured class coincide functions refuted shoenfield sho 
pleasing generalization kleene result section arbitrary normal type object independently shoenfield sho hin hin 
versions essentially key point cases set ordinal notations fixed advance generated simultaneously hierarchy 
wainer wai showed somewhat delicate construction yields hierarchy section arbitrary non normal type object 
natural challenge obtain similar hierarchy results sections type objects 
kle kleene outlined construction hierarchy type objects hierarchy studied detail student clarke cla conjectured exhaust type objects computable 
conjecture confirmed moschovakis mos constructed alternative hierarchy exhaust powerful system generating ordinal notations 
objects interest operators defined 
operator ordinary jump operator classical recursion theory equivalent strength 
operator strictly weaker non normal 
recursion studied gan pla ah 
operators higher types considered harrington har har 
hierarchy results covered detail book hin 
total continuous functionals early kleene kreisel computations full set theoretic type structure connections metamathematics classical logic study total continuous functionals motivated interest constructive interpretations 
type structure total continuous functionals obtained time kleene kle called countable functionals kreisel kre called continuous functionals 
definitions complicated obviously natural embodied basic idea finite piece information output functional determined finite amount information input 
kleene definition centres observation continuous type function completely determined function 
exists property 
reversing idea may define partial application operation minimal 
type objects encode type objects 
place easy type objects encode objects arbitrary pure types definition kleene countable functionals pure types define sets notions associate elements follows take declare associate 
say associate function associate take set functions associate 
kleene extended definition pure types arbitrary types means usual type changing techniques 
kreisel definition continuity built defining functionals formal neighbourhoods elements elements 
details little complicated omit slightly simplified version kreisel definition appear part ii 
equivalence definitions mathematically trivial recognized time discovery mentioned original papers see ht 
tait tai gave somewhat cleaner axiomatic treatment continuous functionals spirit kreisel definition 
kleene kreisel identified natural ective substructure rc consisting recursively countable recursively continuous functionals 
kleene terms functionals recursive associate kreisel terms defined recursive functions bases neighbourhoods 
important result density theorem see kre appendix ensures completely determined ect recursive finite elements follows rc extensional type structure right 
kreisel particular interested give constructive interpretations systems intuitionistic second order arithmetic 
idea follows formula apply godel dialectica translation obtain formula quantifier free may finite type 
may consider interpretations arising allowing range various kinds object finite type 
kreisel suggested get interpretation fits informal notion constructive truth range functionals functionals rc 
intuition constructive content embodied ectively operation works arbitrary continuous data free choice sequences 
kreisel considered rival interpretations kind interest independence proofs ranging arbitrary functionals kleene computable ones range hereditarily ective operations 
showed interpretation combined double negation translation give satisfactory counterexample interpretation classical second order arithmetic 
author deems kreisel kre classic field remains worth reading today discussion metamathematical applications higher type functionals 
consider notion kleene computable functional definition 
clear kleene kreisel total kleene computable functional recursively continuous functional intuitively computable kleene extensional sense computable intensional level associates 
type recursively continuous functionals clearly coincide kleene computable functionals kleene computable relative associate raised open problem kre elements rc types kleene computable 
answered negatively tait tai gave counterexample type modulus uniform continuity functional known fan functional embodies constructive content brouwer fan theorem 
existence depends fact classically continuous function uniformly continuous 
define binary take binary binary 
tait showed recursively continuous kleene computable restriction function kleene computable 
published proofs tait result may gh 
distinct notions computability total continuous functionals 
characterizations apart tait interest total continuous functionals appears 
saw wealth new developments kinds results providing characterizations rc illuminating basic character confirming natural status results relating various notions relative definability degree structures characterizations simpler appealing original definitions 
ershov ers ers showed continuous functionals obtained type structure partial continuous functionals extensional collapse construction see theorem 
similar characterization obtained independently scott type structure arising category algebraic lattices see hyl 
pleasing characterization idea sequential continuity 
may simply follows 
notation infinite sequence 
definition sequential continuity type define set relation read converges infinite sequences elements su ciently large set tantamount definition type structure cartesian closed category spaces see kur 
sca considered type structure defined way model bar recursion higher types apparently realizing coincided kleene kreisel continuous functionals 
equivalence shown hyland hyl hyl collected known characterizations clarified relationships 
discovered new characterizations type structure cartesian closed category filter spaces ccc compactly generated hausdor spaces 
published proof fact appeared 
normann gave characterization type structure sense non standard analysis 
bergstra ber ber gave interesting characterization maximal type structure subject basic closure requirements type functions continuous 
intuitively construct type level functions added inducing discontinuous type functions 
gri shown type functional continuous kleene computable relative type function characterization maximal type structure closed kleene computation containing 
stage clear canonical choice full continuous type structure total functionals hyland shown constructions admitted natural gave rise ective substructure rc 
degrees relative computability degrees relative computability focussed notions arising relative kleene computability 
hin gave example irreducible element kleene degree kleene degree type function 
hyland gh gave simpler example phenomenon making kleene tree contained example due gandy type object rc kleene computable relative fan functional 
view result natural ask basis functionals relative functionals rc kleene computable 
closely related question discussed feferman fef give definition rc substructure monotone inductive schemata spirit generalized recursion theory 
fairly easy specify infinite basis rc consisting partial recursively continuous functions type level see ber 
normann gave similar infinite basis consisting total recursively continuous functionals elements rc showed finite subset su ced finite basis consisting kind rc possible 
group results period concerned properties sections continuous type objects 
early results vein obtained gri pointed section closed ordinary jump operator 
bergstra ber showed objects section section improves result mentioned 
results relating ordinal hierarchies sections continuous objects obtained bw nw 
simple beautiful result normann attributes ideas kreisel kre reveals connection continuous functionals classical logical complexity classes subsets normann showed facts sections envelopes flow theorem 
proof theorem appears 
theorem projective hierarchy primitive recursive predicate definable kleene 
ii primitive recursive 
uniform algorithm kleene computable partial functional returns 
mention alternative degree structure obtained considering generous notion relative computability take recursive type functional transforms associate associate known degrees sections envelopes respect summarized hyl 
normann book contains known total continuous functionals 
continuous functionals renewed somewhat owing largely interest computer science community 
modern treatments tended favour versions ershov scott construction domains information systems ber sch 
particular focus search formulations concept totality elements domains 
berger ber shown significance dual notions density totality subsets domains generalized versions density theorem kreisel shoenfield theorem domain theoretic framework 
related approach totality pursued normann 
concerned extending construction associated results domains density totality transfinite types martin lof style dependent types universes ber kn 
bauer birkedal shown material fits smoothly framework scott equilogical spaces see section 
results normann plotkin plo involving mentioned section 
hereditarily ective operations seen notion total computable functional higher type ective submodel rc total continuous functionals computable functionals acting possibly arbitrary continuous data 
ask interesting type structures idea computable functions acting computable data 
ways constructing type structure consider higher type generalizations definition type ective operations recursive indices see definition 
consider ective analogues various definitions building type structure take ective functionals type level 
kinds construction considered kreisel kre 
instance kind construction defined extensional type structure heo closely related non extensional type structure hro 
definition hereditarily ective operations type define partial equivalence relation follows 
heo set equivalence classes 
defined total application operations heo heo heo induced recursive index application total extensional type structure heo definition hereditarily recursive operations type define subset hro follows hro hro hro hro defines total non extensional type structure hro application recursive index application 
names designations heo hro introduced troelstra independently rediscovered structures see tro 
note structure heo independent isomorphism choice enumeration partial recursive functions true hro misleading strictly speaking talk hereditarily recursive operations 
instance second kind construction kreisel proposed recursive analogue construction formal neighbourhoods 
give equivalent definition recursive analogue kleene construction associates definition 
definition hereditarily recursively countable functionals pure types define sets hrc notions associate elements hrc follows take hrc hrc rec declare hrc associate 
say hrc associate hrc associate hrc take hrc set functions hrc associate 
definition hrc may extended arbitrary types usual methods 
name due troelstra 
kreisel noted remarkable fact approaches constructing class computable functionals coincide theorem heo hrc 
type essentially kreisel shoenfield theorem theorem 
generalization higher types noted kre detailed proof 
details appeared tai complete published proof appeared tro 
remarks may helpful clarifying relationship hrc recursive analogue rc recursive submodel 
build rc builds extracts ective elements 
build hrc considers type level ective total functionals set ective objects type 
instance kleene tree lives hrc restriction element rc computable extension proper inclusion rc hrc conversely element hrc corresponding fan functional rc essentially computable functional hrc extended respect inclusion undefined 
canonical mapping rc hrc vice versa 
idea live universe computable total functionals 
part ii formulate prove anti church thesis total functionals ect type structure computable functionals subsumes hrc rc 
shows hereditarily total functions dichotomy computable acting computable computable acting continuous fundamental 
seen recursive analogues kleene kreisel definition yield type structure hrc 
results confirmed impression natural definition admits recursive analogue analogue turns hrc 
equivalences verified hyl 
addition ershov ers ers showed just hereditarily total elements give rise see theorem hereditarily total elements give rise heo 
ershov explicit higher type generalization kreisel shoenfield theorem implicit fact heo hrc operations heo continuous sense neighbourhood structure kreisel ershov definition hrc 
contrasts negative result discovered gandy sequentially continuous sense definition 
ingenious construction counterexample type appears gh 
bezem gave characterization heo extensional collapse hro theorem define partial equivalence relations hro follows fx gy type structure hro constituted partial equivalence classes isomorphic heo 
surprising result decidedly non trivial 
proof essentially goes equivalence hrc defined kleene associates see definition 
descendant kreisel definition heo girard category partial equivalence relations natural numbers gir 
give definition category section simply heo naturally seen finite type structure cartesian closed category 
partial computable functionals picture outlined exhibits various may suggest theory hereditarily partial objects higher type smoother total objects 
intuitively computational paradigm powerful generate total computable functions naturally generate partial ones 
restriction total functionals somewhat artificial exacerbated passes higher types 
striking instance brood di culties associated kleene see section 
tension arising insistence totality discerned incompatibility kleene tree fan functional 
idea partial easier total kle frequently discussed literature see pla gh fef ers 
see section suspicions amply justified notions partial computable functional lead simpler theories enjoy pleasant properties total notions 
accords experience ordinary recursion theory example partial recursive functions recursively enumerable total recursive functions 
say total notions necessarily interest partial ones seen certain total type structures mathematical credentials shall see study partial notions greatly enriches understanding total ones 
important conceptual questions addressed formulating notions hereditarily partial object higher type 
instance type objects partial functions functions treatment thoroughly partial interpret type case type objects instance functions questions kind proliferate pass higher types sight unclear respond 
speculate lurking issues may partly account relatively late development notions partial higher type object 
benefit hindsight see choices significant reasonable choices turn equivalent sense 
discuss issues detail part ii precise statement ect 
purposes historical survey useful introduce rival definitions partial type structure figured development subject definition call name call value call name cbn structure simply extensional type structure sense section 
ii call value cbv structure family sets type partial application operations satisfying extensionality condition terminology taken computer science appear earlier recursion theory literature 
significance terms appreciated considering nature type objects definitions 
cbn structure functions argument fed function natural number name computational process may may evaluate yield natural number 
cbv structure type objects functions demands natural number argument computation value argument take place function called 
shall see part ii cases interest cbn cbv structures equivalent cbn structure may recover corresponding cbv structure vice versa 
regard corresponding cbn cbv structures simply di erent concrete presentations underlying notion computability 
perspective probably available pioneers subject 
section poset write poset obtained adding new element 
partial monotone functionals far aware earliest formulation class hereditarily partial computable functionals finite types due davis dav 
davis putnam realized restriction set theoretic partial functionals needed obtain theory proposed essentially call name structure consistent partial functionals consistent dom notion computable element certain features davis definition closely scott domain theory see section 
consistency condition appears weak really fruitful davis type structure lacking properties higher types 
platek thesis satisfactory notion partial functional introduced studied platek ph thesis pla 
fundamental insight theory obtained restricting attention monotone partial functionals 
essentially considered recursion theory call value structure definition hereditarily monotone functionals type define poset follows take discrete order set monotone functions equipped pointwise order 
application defined 


full total type structure naturally embedded injections take exist say represents clearly represents uncurried form platek term consistent monotone 
structure construed call value structure sense quite coincide natural full monotone call value structure take set monotone functions pure types definitions coincide exactly minor di erence glossed 
platek defined structure relative arbitrary set objects place aims give uniform treatment recursion theory applied domains ordinals transitive sets 
give computational motivation restriction monotone functionals computable partial functional expect increase available information input allow increase output information produced platek main motivation provide setting definitions recursion sense 
recursion equation variables tarski fixed point theorem ensures unique solution satisfying equation may obtained transfinite iteration mentioned earlier platek interested questions definability ective computability transfinite nature computation seen problem 
platek second fundamental insight definitions recursion conveniently expressed means fixed point operators 
specifically type element unique solution 
simpler ways explicitly defining new elements old ones encapsulated elements defined fx gx dx 
stands definition cases 
lead definition recursive definability definition set define set elements recursively definable smallest subset closed application containing elements case monotone type structure usually interested case contains basic computable elements zero successor predecessor su ce 
call element recursively definable recursively definable basic elements 
platek showed definition cast terms schemata spirit kleene important di erence definition computation written schemata meaning gandy pointed fact zero successor su ce platek setting 
theory su er di culties arising infinitary 
recover kleene notion computability follows partial function kleene computable represented recursively definable alternative definition kleene computability platek able obtain clearer proofs kleene results plus new ones recursion theorem holds subject type level restriction see 
equivalence kleene definition non trivial depends di cult substitution theorems kle reflect schemata see discussions pp 

platek draw attention famous parallel function issues raises pp 

suppose stands true natural number stands false consider element por called strong platek defined por true true false 
platek pointed por recursively definable definable herbrand godel style equation calculus arguably computable allow kind non determinism computations regard order evaluation arguments 
shall see dichotomy di erent notions computability major theme 
addition definition recursive definability platek gave characterization terms formal language lambda calculus closely pcf see 
curiously language introduced untyped lambda calculus allowed counterparts pure lambda calculus 
platek calculus featured sophisticated machinery allowing mixture syntax semantics computations constant element admitted definition evaluation relation included rules kind similar kleene 
infinitary character rules means computations transfinite length terms containing constants type level computations finite 
major results pla proved mild conditions theorem element recursively definable definable sense term containing constants corresponding elements 
fg forwards implication easily shown supplying lambda terms corresponding show converse platek proved existence recursively definable defines godel number 
essentially result proof rediscovered lp 
summary platek thesis major achievement shed considerable light kleene earlier computability introduced fundamental ideas explored pcf 
recursively definable elements exactly pcf definable ones sense scott plotkin shows existence programming language finitary notion computation expressing elements 
little charity read results chapter proof adequacy model combinatory pcf 
platek thesis unfortunately generally available detailed published account material appears mol 
kleene years kleene returned study higher type computability published series papers title recursive functionals quantifiers finite types revisited kle kle kle kle kle 
papers kle provides best series 
kleene motivation kle aim generate class functions shall coincide partial functions computable ectively decidable church thesis im apply higher types included partial functions im 
called kleene problem hyland ong ho 
platek kleene sought avoid anomalies original theory developing theory hereditarily partial objects 
platek interested primarily questions definability kleene interested concrete nature computations higher types 
kleene concentrated type levels 
kle introduced collection schemata defining class computable functions group schemata similar spirit earlier di erent details new schema take role 
know happened 
adapt kleene formulation slightly consistency notation definition general recursion briefly 
earlier theory schema rise restricted versions recursion theorem new schema ect building natural formulation recursion directly definition closure derived consequence 
order give interpretation schemata sense apparent circularity kleene gave kle syntactic description computations computation trees labelled formal expressions 
kleene uses term expression formal expression type 
essential di erence computation trees kle kle order evaluate expression defined schemata longer required launch subcomputation compute graph may main computation carrying unevaluated formal expression 
require particular value engage computation 
computation takes syntactic character really computing formal expressions semantic objects denote need matter formal expression denotes semantic object 
general formal expressions kleene computations allowed contain free variables type levels computations proceed relative interpretation free variables semantic objects 
reason successful computation tree expression results numerical value may infinitely branching deep example wish compute free variable expression really need compute numeral successful computation tree closed expression finite object 
kleene definition computations closely operational definition pcf earlier reluctance fuller typed calculus puzzling 
kle papers kleene proceeded develop semantics formal expressions allow give interpretation objects considered stages computation 
ect kleene constructed levels call name type structure consisting termed functionals monotone unique determined basis 
takes certain set monotone functions ordered pointwise 
platek monotonicity reflects computational intuition able obtain output value seeing certain piece input information value ected see 
furthermore kleene restricted attention monotone functionals computed oracle followed strategy protocol certain kind 
kleene gave detailed explicit descriptions possible behaviours oracles types game semantics pcf 
kleene definitions couched terms imagery oracles envelopes containing oracles somewhat lacking clarity mathematical generalization higher types left unclear 
expression kleene ideas facilitated basic ideas terminology domain theory category theory available 
interesting ideas emerged kleene 
instance kleene isolated important feature sequential strategies oracles type oracle computes constant type function able accord produce type object element serve question poses type argument computation hangs 
kleene originally conjectured similar property hold type non constant type oracle able come particular type object serve question posed type argument 
refuted kleene student gave simple counterexample type functional defined 
intuitively question asked argument type function function dependent information emerges dialogue 
example shows possible interactions oracles arguments somewhat subtle kleene envisaged 
subsequent papers kleene able draw description type oracles satisfactory completion 
important feature kleene semantics intensional character oracles acting oracles pure function extensions 
requirement oracles behave extensionally give result di erent oracles function explicitly incorporated definition certain points 
intensional character important aspect computer science semantics higher type computation instance berry curien sequential algorithms model bc game models pcf ajm ho nic 
kleene semantics considered computable objects act computable objects computable understood mean realized oracle 
behaviour oracles required ectively functionals need computable genuinely ective sense 
strikingly need continuous kleene quite deliberate decision allow infinite computation trees allow behaviour oracles depend infinitely information arguments 
regard kleene contrasts sharply computer science tradition modern perspective kleene decision impose tight computationally motivated constraints direction direction continuity stands curiosity 
kie kie developed alternative semantics kleene closer spirit platek full monotone type structure results closely parallel platek instance embeds total settheoretic type structure monotone way respects kleene computability able deduce certain substitution properties total kleene computable functionals 
di erence considers call name monotone type structure platek considers call value appears correlated di erence conceptual status models approaches purely technical point view major di erence 
relevant results obtained ph thesis van vd 
author feels kleene area contributed important ideas clearly expressed fully explored subsequent computer science literature 
useful bucciarelli buc see buc explicit relationships kleene subsequent developments computer science particular explores connections kleene oracles berry curien sequential algorithms see section 
influence kleene ideas computer science tradition discussed ho section 
partial continuous functionals undoubtedly compelling notions higher type computability discovered independently scott sco sco ershov ers ers 
coming somewhat di erent directions authors arrived type structure partial continuous functionals ective substructure partial computable functionals 
scott approach scott seen bringing platek idea monotone partial functionals recursion theory kleene kreisel idea continuity capture finitary nature computations 
leads theory computable functionals arguably simpler better behaved platek kleene kreisel 
scott motivated idea giving mathematical theory meanings computer programs view mathematical functions compute distinct purely symbolic machine oriented account behave lies root modern computer science tradition denotational semantics 
simplest definition partial continuous functionals formulated sco definition partial continuous functionals complete partial order cpo poset element chain 
upper bound 
ii function cpos continuous chain 

iii define call name type structure follows considered cpo usual partial ordering cpo monotone continuous functions simply natural type structure cartesian closed category cpos 
scott showed served model formal language directly inspired platek consisting typed expressions built application combinators constants zero succ pred denoting basic arithmetical operations 
combinator interpreted function assigns fixed point combinator takes role platek corresponding element defined 
scott introduced logic proving simple assertions functions definable conceived way proving semantic properties programs 
language known pcf programming language computable functions associated logic lcf logic computable functions 
class definable elements gives rise possible notion computable function including partial recursive functions type ways analogous notion kleene computable element intrinsic notion computable element exploiting fact cpos domains 
intuitively domain cpo notion finite piece information element element determined set finite pieces information 
definitions introduced scott sco details see standard text domain theory 
definition scott domains subset poset directed non empty exists dcpo poset element directed subset upper bound function dcpos continuous map monotone preserves lubs directed sets 
ii dcpo say consistent write upper bound dcpo consistently complete upper bound upper bound 
iii element dcpo finite directed write set finite elements 
iv dcpo algebraic element directed lub dcpo algebraic algebraic set finite elements countable 
domain consistently complete algebraic dcpo 
scott system ground type truth values integers 
earlier content representing true zero false natural number 
name pcf refer combinatory language described calculus counterpart plo 
possibility variants clear scott sco di erences minor importance purposes 
scott showed cpos domains give ective enumeration 
finite elements way relations call element ective finite pieces information recursively enumerable ective elements closed application constitute substructure easy see definable element ective sense converse true parallel function ective definable 
scott pointed sco genuine choice wish regard function computable evidently kind algorithmic procedure needed compute flavour significantly di erent su ce compute definable elements 
sco sco published time circulated widely manuscript considerable influence 
sco eventually published bohm festschrift 
subsequent papers sco sco sco scott shifted attention domains complete lattices give rise similar theory simpler familiar definition 
despite elegance approach argued takes step away computationally meaningful type structures instance type natural numbers needs represented poset top element construed inconsistent information regarding natural number question 
scott returned original domain theoretic ideas gave concrete presentation terms information systems sco finite elements finite pieces information taken primary 
ershov approach ershov construction quite di erent character arising theory enumerated sets 
theory ers framework studying wide range mathematical structures algorithmic recursion theoretic point view survey see ers 
basic definitions follows definition enumerated sets enumerated set simply set equipped total function called enumeration 
may say code recursive index 
ii morphism function exists recursive function satisfying ers ers ershov introduced category en enumerated sets considered question set morphisms endowed enumeration making category theoretic exponential particular defined certain classes enumerated sets proved theorem exponential exists en belongs omit somewhat technical definitions reproduced section ers 
identity enumeration obvious enumeration follows construct call name call value type structures repeated exponentiation en 
significantly type structure constructed purely computable objects acting computable objects notion continuity involved definition 
ers ershov gave topological presentation structures concept spaces definition topological space partial order defined open set call open non empty set set contains element respect 
ii space space family sets empty set closed binary intersections forms basis topology set 
iii write set elements open 
say ideal downward closed pair elements upper bound space complete canonically isomorphic set ideals ordered inclusion 
ershov showed ect category complete spaces continuous maps cartesian closed call name type structure en coincided substructure ective elements type structure complete space 
natural think higher type generalization myhill shepherdson theorem 
ers section noted passing class computable functionals pleasing recursion theoretic properties remarking fully justified consider class natural generalization precisely extension class partially recursive functions 
far ershov proceeded independently scott connections explicit ers 
hard see domains complete spaces essentially equivalent ershov type structures coincide exactly may say ershov definitions greater topological concepts scott emphasized order theoretic ideas fact authors interplay perspectives 
ers ers ershov obtained relationship kleene kreisel type structure theorem hereditarily total elements define substructure follows fx 
define total equivalence relations follows fx gx 
sets constitute type structure canonically isomorphic sets constitute type structure isomorphic rc 
analogous result ective type structures extensional collapse gives rise heo proved ers 
ershov main results conveniently summarized ers 
discussion relationship partial total type structures appears sections gh 
streamlined presentation main results spaces appears gl applications semantics untyped calculus 
parallel pcf major result obtained independently plotkin plo sazonov saz showed gap notions pcf computability ectivity bridged augmenting pcf operations parallel flavour theorem pcf language pcf extended constants parallel exists extend interpretation pcf interpreting parallel function por defined section exists functional exists defined exists 
elements exactly pcf definable elements pointed fef significant result showed notion computability captured finite collection inductive schemata somewhat spirit kleene 
interestingly kleene considered parallel operations way getting expressive power explicitly interested problem identifying class computable functions higher types 
addition plotkin plo gave operational semantics set symbolic evaluation rules mild variant pcf showing programming language system stand mathematical object right 
type structure characterized fact plotkin considered parallel conditional operator parallel easy show pcf see sto 
isomorphism closed term model pcf modulo observational equivalence 
set evaluation rules pcf spirit 
worth noting result stoughton sto isomorphism unique extensional continuous model pcf parallel 
important structural property obtained plotkin plo theorem scott domain functions ordered pointwise universal domain scott domain continuous maps id say retract 
ective domain maps computable 
follows domain rich contain computable retract contains domains computable retracts 
reconstructed set continuous endofunctions likewise reconstructed monoid computable endofunctions sense important facts understood stage results characterizations forthcoming 
instance people noted ershov category en poor closure properties cartesian closed proposed larger categories remedy 
mul showed en embedded recursive topos preserving existing exponentials type structure suitable object topos coincides close spirit characterization longo moggi lm gives remarkable appearance magically dispensing explicit computability requirement higher types definition fst snd projections associated recursive pairing function type define set set functions follows monotone computable functions fst snd mild variation definition lm relies theorem ensuring existence suitable pairing operations higher types 
inspired characterization longo moggi lm introduced cartesian closed category extending en category generalized numbered sets 
moggi mog clarified relationship category recursive topos 
worth noting passing type structure topos coincide type structures total computable functionals yields generalized banach mazur functionals see mul cf 
section 
tended concentrate category pers en trivially embedded 
brief account category results arising study realizability models section 
pcf sequential computability seen ective elements pcf definable sense persisted notion computability embodied pcf natural interest right 
give suitable set deterministic reduction rules pcf defined spirit mil definition operational semantics pcf inductively define binary relation closed pcf terms type clauses write sugar succ zero im kmn mp np ym ym 
pred zero zero pred zero mn succ succ pred pred write reflexive transitive closure 
term evaluates necessarily unique natural number closed term converges evaluates diverges 
addition closed term seen denoting element fundamental result connecting operational denotational semantics essentially theorem plo theorem adequacy closed term evaluates intuitively computations pcf proceed sequential manner sense single thread computation find disjoint subterms term evaluated parallel 
computer science perspective deterministic uniprocessor programming languages sequential character pcf held interest prototypical programming language theoretical study 
pcf versus surveying main body research relating pcf digress briefly comment relationship kleene 
informally remarked pcf essentially equivalent view idea needs treated great caution issue clearly explained published literature 
restrict attention type structure literal reading kle definition true kleene computable elements exactly pcf definable ones 
di erence saying defined inductive definition ternary relation saying 
fact notion undefinedness objectified element means wish triple explicitly generated inductive procedure 
suppose attempt construct index say fixed point operator invoking appealing kleene second recursion theorem obtain index property specialize constant function conclude strictly speaking assign denotation denotation 
shown kleene computable elements pcf definable element kleene computable strict interpretation 
overcome problem reinterpreting inductive definition set triples recursive definition total function obtained massive simultaneous fixed point 
alternatively recast definition relation 
take generally people mind referring kleene computability true generous notion coincides pcf definability 
questionable interpretation true spirit manifest kleene papers 
remarked earlier schemata introduced kleene capture ideal computing functions pure extensions characteristic behaviour specified object lower type simply return answer diverge 
conscious shift perspective kleene part regard computations acting intensional representations functions formal expressions kle oracles described kle purpose kleene introduced 
strategy required compute functional essential idea object type provide answers specified arguments ask questions unspecified incompletely specified arguments behaving pure extension 
accurate letter spirit say pcf essentially corresponds kleene plus stated explicitly nic 
worth remarking kleene connection hereditarily partial functionals 
hard define weaker languages pcf correspond expressive power strict interpretation instance take godel system extended minimization operator ordinary recursion theory 
related systems considered berger ber preliminary expressivity results obtained 
feel notion computability language philosophically natural deserves study certainly captures intuitively appealing idea purely extensional computation 
say little notion computability part ii 
full abstraction problem plotkin pcf marked break older recursion theory tradition modern computer science tradition 
roughly speaking usually treated formal languages inductive schemata principally ways picking class computable elements predefined mathematical structure tendency computer science take programming languages primary look mathematical structures interpreted 
dichotomy hard fast think exceptions cultural di erence kind clearly discerned literature extent persists day 
techniques operational semantics gave tractable ways giving standalone syntactic definitions programming languages approach feasible 
operational semantics pcf gives rise notion observational equivalence pcf programs 
say pcf terms observationally equivalent write term contexts closed terms type evaluates evaluates natural notion programming point view means safe replace block code code ecting result computation 
natural ask give mathematical characterization observational equivalence pcf languages 
important result milner mil shows pcf terms observationally equivalent intuitively yield functions terms lower type theorem context lemma closed pcf terms closed 
mp 
evaluates np 

idea behaviour pcf terms adequately modelled mathematical functions kind expressed saying pcf purely functional programming language 
follows easily adequacy theorem converse false 
find terms pcf definable elements non definable elements parallel see considered 
suggested give semantic characterization sequential functionals higher types able provide denotational model pcf precisely captured observational equivalence model called fully 
early investigators mind denotational model consisting cpos kind chain completeness essential requirement 
plotkin milner mil showed large class potential cpo models pcf full abstraction holds finite elements pcf definable follows isomorphism order extensional fully cpo model 
full abstraction problem intimately related problem characterizing sequential functionals 
semantic characterizations sequentiality obtained easily order functions definition induction milner definition monotone function sequential constant function 

fx 

sequential 
intuitively sequential stage computation fx 
return answer argument needs evaluated order computation proceed 
essentially ideas kleene definition type oracles see section 
di erent equivalent characterization obtained independently vuillemin 
easily shown finite element sequential pcf definable model pcf included sequential functions order types fully types level 
counterexample due trakhtenbrot tra see saz shows ective sequential element pcf definable happen stage appropriate choice index exists ective way compute 
problem characterizing higher order sequentiality turned di cult focus great deal research ort theoretical computer science 
milner mil mulmuley mul gave constructions fully cpo model referred way operational semantics pcf felt qualify independent mathematical characterization sequentiality 
models pcf constructed berry stable bistable models ber berry curien sequential algorithms model bc cur kahn plotkin notion concrete data structure kp strongly stable model ehr 
detailed survey material recommend ong 
line research gave insight di culty full abstraction problem generated counterexamples illustrating subtlety notion observational equivalence 
describe models detail far pcf concerned main point fully 
sequential algorithms model strongly stable model turned important connection notions computability return 
known constructions fully model felt unsatisfactory natural ask exactly criteria solution full abstraction problem 
js jung stoughton proposed possible criterion restricted finitary pcf fragment pcf generated ground type booleans model construction ective 
words simple type booleans possible ectively compute complete description finite semantic object representing 
criterion rules syntactic constructions milner admits models mentioned fully 
extensional fully model satisfying jung stoughton criterion existed follow observational equivalence finitary pcf decidable 
statement refuted loader loa delicate encoding semi thue problems 
loader result represents important advances understanding pcf closes door large class attempts full abstraction problem shows possible give finitary analysis pcf sequentiality considered purely property functions 
intensional semantics pcf possible approach seek mathematical description algorithms embodied pcf terms functions compute 
approach fact lead models sequential computation albeit intensional nature 
regard models occupying kind middle ground operational denotational semantics traditionally conceived elements model typically computation strategies dynamic operational behaviour inessential details typically operational definition language abstracted 
approach kind successfully carried sazonov saz saz saz explicitly formulated terms scott lcf independent milner plotkin remained little known west brief description appeared ho 
ect sazonov gave model pcf style sequential computation terms turing machines oracles spirit kleene characterization computations kle kle 
turing machine function type communicates argument oracle type feeding description turing machine type 
kleene computations character functionals type represented codes turing machines pure oracles odd 
heart sazonov notion strategy followed turing machine sequentiality enforced requirement machine invokes oracle receive answer continue 
sazonov formalization somewhat complicated dependent explicit codings turing machines approach succeeds capturing notion pcf computability finite types closely anticipates features 
fact argued sazonov accomplished kleene trying achieve papers kle onwards 
somewhat similar approach pursued years gandy student concentrated problem characterizing pcf definable elements approach apparently influenced kle emphasized idea computations dialogues participants 
gandy insights significant influence computer science community unfortunately gandy completed written account ideas exact form remains unclear 
computer science formulation essence pcf sequentiality terms dialogue games attained closely related models pcf obtained simultaneously independently abramsky jagadeesan malacaria ajm hyland ong ho nic 
formal details appear complicated essential ideas easily grasped example 
calculus notation syntactic sugar convenience suppose pcf terms gh 
yh wish evaluate gh 
computation modelled dialogue player follows strategy determined opponent strategy determined moves game questions answers natural numbers matched previous questions fact order moves precisely matches order interactions turing machines oracles sazonov approach 
model ho instance main constraints strategies imposed answer match pending question innocence intuitively participants decide moves purely basis answers received previous questions obtained 
feature model move apart explicitly justified previous move answers justified questions answer questions justified earlier questions open appropriate part game 
game models mentioned yield definability results pcf recursive strategy denotation pcf term 
view main insight ered perspective game semantics idea parity may consistently assigned implicit interactions subterms pcf term 
parity genuinely extra structure game models raw operational definition pcf 
game theoretic analysis deep resolve interesting purely syntactic questions pcf results nature need worked detail 
mention miscellaneous topics conclude survey known pcf computability 
remarkable result sie gives complete characterization pcf definable finite elements types level invariant class logical relations known sequentiality relations 
idea invariance logical relations construct model carried hearn riecke obtained fully model way result depends general facts definability reveals sequentiality 
attention variants pcf 
version considered original call name equally define version pcf call value evaluation strategy naturally interpreted cbv type structures idea essentially appears plo chapter 
third possibility lazy pcf br 
relationships languages investigated sie riecke rie longley lon chapter 
picture emerged languages su ciently denotational perspective regarded embodying notion computability 
explain point view detail part ii 
area interest relationship pcf computability notions total functional considered section 
general idea ask total functionals computed pcf question precise di erent ways 
example seen arises extensional collapse ask elements represented pcf definable elements hard see instance kleene computable elements pcf definable way 
surprising fact fan functional mentioned section pcf definable means clever higher type recursion 
fact appeared berger thesis ber known independently gandy 
conjectured cook coo berger ber proved normann 
theorem pcf definable elements exactly elements rc 
equivalently light theorem pcf definable elements coincide exactly pcf definable ones 
normann proof highly non trivial view highlights subject 
time plotkin plo considered possible notions totality pcf extensional collapse term model pcf investigated di erences various notions 
papers devoted degree theory induced notion relative pcf definability 
element example pcf definable relative pcf definable element corresponding equivalence classes known degrees parallelism 
lattice degrees parallelism introduced sazonov saz 
lattices degrees structure appear extremely complicated 
sazonov mentioned examples distinct degrees relationships instance parallel exists operations represent incomparable degrees 
results similar spirit appear tra 
bucciarelli buc undertook somewhat systematic study degrees parallelism order functions line investigation pursued lic 
degrees parallelism seen representing notions computability intermediate pcf pcf date intermediate notions established independent mathematical interest 
notion sequentiality mid plausible respectable notions partial computable functional embodied pcf pcf typically referred sequential parallel computability 
emerged class computable functionals reasonably seen embodying alternative notion sequential computability generous pcf 
class sense ective counterpart strongly stable functionals introduced bucciarelli ehrhard studied longley lon sequentially realizable sr functionals 
basic idea simple example 
set monotone computable functions consider function defined 
intuitively function computed strategy function feed object computation run terminate yielding value watch closely see looks argument computation fact run 
returns result looking argument return returns result having looked argument return 
perfectly ective intuitively sequential way computing long form sensible ask looks argument 
computation operate kind algorithm intensional representation pure extension result completely determined extension argued section true pcf computations di erence computation manipulates algorithm way admitted pcf 
easy see function definable pcf pointwise order exist pointwise monotone 
may appear puzzling non monotone function considered computable sense 
explanation hinges fact computations operate intensional objects case definitions seen level computable operations monotone 
algorithm computes obtained extending algorithm computes worth noting extensional level functions monotone respect di erent ordering known stable order 
curiously kleene came possibility algorithms described see kle decided rule imposing extrinsic monotonicity requirement 
mathematically natural type structure containing things shall denote appeared literature type structure arising strongly stable model domain theoretic model pcf intended capture certain aspects sequential functionals conceived partly line attack pcf full abstraction problem 
objects model di domains coherence certain cpos equipped class finite subsets designated coherent sets 
morphisms equivalently elements function spaces strongly stable functions continuous functions cpo preserve coherent sets upper bounds coherent sets 
complicated formulate construction model finitary ective desired instance equality finite elements decidable 
ehrhard gave simplified presentation type structure framework ehr slightly analysis relevant structure 
interesting characterization ehrhard ce showed sense arises naturally class infinitary order sequential functions 
functions type evidently reasonable notion sequentiality 
note analogy definition 
definition type define set sr set functions follows set continuous functions sequential milner vuillemin sense 
set functions set functions function fst snd results obvious non elements higher types sequentially computable reasonable sense 
ehrhard showed ehr notion strong stability admits computational interpretation element sense computed berry curien sequential algorithm 
line investigation continued ehr ehrhard showed fact extensional collapse sequential algorithms model 
somewhat simpler characterization vein discovered independently van oosten vo longley lon obtained type structure arising certain combinatory algebra construction hinges fact sequential algorithm computing function represented infinitely branching decision tree coded element likewise sequential algorithm type represented infinite forest trees coded element definition play seq smallest partial function seq play play play 
ii write function 
operations defined play applicative structure 
construction follows standard pattern see section 
define partial equivalence relations example may define application operations induced 
construction especially clear elements computed realized sequential algorithms sense 
fact relationship berry curien sequential algorithms model close relevant objects berry curien category obtained retracts results connecting known characterizations appear lon 
longley explicitly considered ective analogue may constructed standalone type structure substructure argued embodied natural compelling notion sequential computability higher types 
major result lon type universal sense universal see theorem 
closely related fact existence type functional element pcf definable relative define programming language pcf ective operational semantics term model provides alternative characterization 
operation ective sr functionals fact implemented perfectly existing higher order programming languages standard ml see lon 
seen functional mentioned hand parallel function incomparable notions partial computable functional somewhat analogous situation total type structures rc hrc described section 
precise anti church thesis partial computable functionals ect type structure computable functionals subsumes version result lon section slightly stronger version part ii 
type structures contain sense precise part ii 
curiosity worth noting functionals see lon section kind intersection constructed 
points comparison sr functionals 
argued lon section evidence canonical mathematical objects compelling possess wider range prima facie independent characterizations closely related fact appears enjoy better structural properties instance fact finitary version decidable witnessed strongly stable model existence universal type di culty practical point view universal functional high inherent computational complexity see roy notion sequentially computable functional employed higher order programming languages 
type structures realizability models discussion computable functionals surveying ideas study realizability models cross cut topics mentioned 
start standard notion definition partial combinatory algebra pca set equipped partial application operation exist elements 
definition pca leads rich theory computational structure instance show pca encode natural numbers recursive functions representable elements may think pca untyped universe computation sense fruitful point view naturally arising pcas ective nature 
leading example pca kleene model consisting natural numbers kleene application see section interesting examples mentioned 
crucial definition shall consider definition pca partial equivalence relation symmetric transitive binary relation equivalence relation subset write set equivalence classes equivalence class containing exists 
ii pers defined 
morphism element say realizes write category pers morphisms 
easy see cartesian closed category exponentials suggested definition 
fact categories turn extremely rich structure provide common semantic setting type theories constructive logics programming languages 
girard originally introduced category order give semantics system second order polymorphic lambda calculus gir 
identified important subcategory hyland ective topos hyl categorical model higher order logic kleene realizability interpretation arithmetic kle 
generally arises subcategory realizability topos rt refer loosely categories rt close relatives realizability models 
shall concentrate connections programming languages computability 
way thinking definitions advocated mitchell regard pca kind model machine level computation regard category datatypes high level programming language implemented top machine 
case instance accords closely happens inside computer high level datatype consists values ultimately represented machine bit sequences say natural numbers 
machine representations indistinguishable point view high level language think datatype corresponding partial equivalence relation abstracting situation imagine pca kind primitive model computation view morphisms computable realized element category isomorphism canonical datatype natural numbers arising instance curry encoding natural numbers language combinatory logic 
addition particular pcas interest object stands obvious choice obtain type structures repeated exponentiation 
point view seen type structures computable functionals naturally arising notion computability embodied cases genuinely ective pca yield type structures ectively computable functionals sense 
rich supply interesting constructions type structures consider 
fact characterizations type structures considered precisely kind 
regards total type structures instance kreisel definition heo see definition definition type structure 
kleene definition associates definition trivially equivalent type structure category pers kleene second model see kv similarly definition hrc definition corresponds type structure rec 
scott characterization algebraic lattices close definition type structure scott graph model 
certain constructions naturally viewed type structures kinds realizability models 
instance bezem construction extensional collapse hro see theorem corresponds type structure category modified pers natural subcategory modified realizability topos addition possible definitions rc correspond type structures relative realizability models kind considered birkedal abs 
results alluded covered detail part ii 
general programme trying identify total type structures arising various pcas explicitly articulated beeson bee chapter vi cases re giving rise hrc respectively considered 
similar results graph models plotkin models obtained bet 
expect natural pcas solely notion continuous function application give rise type structure recursive analogues give rise hrc 
constructions type structures explicit definition study type structures categories really develop categories came seen objects worthy study 
happened largely rise synthetic domain theory initiated scott early 
idea enterprise look models constructive set theory containing objects serve domains denotational semantics domains simply sets constructive universe hope lead simpler version domain theory classical 
early example provided mccarty mcc showed category ectively information systems essentially equivalent ective scott domains embeds fully model intuitionistic zf set theory kleene realizability model closely related 
rosolini ros hyland hyl researchers sought give axiomatic account synthetic domain theory set conditions model constructive set theory usually topos su ce ensure contains category domains 
realizability models provided leading source motivating examples 
see relevant section fjm brief survey 
important component research theory way talking computable partial functions objects key ideas due rosolini 
dominance small piece extra structure category determines notion predicate 
certain conditions category dominance gives rise lift operation objects analogous lifting classical domain theory 
may identify computable partial functions morphisms example natural choice dominance gives rise object may defined 
morphisms correspond precisely partial recursive functions hoped 
lon longley developed explicitly idea di erent pcas embody di erent notions computability 
longley simpson ls developed version synthetic domain theory applied uniformly wide range realizability models showing pcas gave rise models pcf 
longley considered problem identifying type structures particular models 
result appeared lon chapter theorem type structure defined isomorphic basically reformulation mccarty result setting models 
essentially content ershov result type structure en coincides obvious embedding en preserves existing exponentials 
characterization terms simpler insofar immediate required exponentials exist 
longley drew particular attention coincidence type structure term model pcf constructions seen attempts defining class hereditarily computable partial functionals pure way definitions involve auxiliary concepts continuity di erent spirit think computations place level recursive indices index realizes functional action indices functionals lower type happens extensional 
pcf contrast computations take place higher symbolic level extensionality enforced syntax language 
constructions lead type structure appears author wonderful surprising fact 
shown lon type structure obvious object resp 
re coincided resp 

surprising view close connections scott domains algebraic lattices 
categories re play central role scott colleagues bbs adopt perspective pers essentially equivalent countably spaces equipped equivalence relation 
interesting family pcas term models untyped calculi 
instance set closed untyped terms modulo reasonable theory regarded combinatory algebra 
conjectured implicitly particular phoa pho explicitly large class theories longley lon section obtained partial results outlined possible proof strategy conjecture type structure obvious choice object isomorphic words functionals type structure pcf definable 
evidence conjecture fairly compelling resisted extensive attempts proof author 
proved doubtful result give useful information type structure relevant objects appear intractable 
main interest conjecture conceptual provide example highly non trivial equivalence characterizations turn provide evidence mathematical naturalness type structure 
interesting variant longley phoa conjecture lambda calculus extended certain constants established streicher straightforward result 
semantic example pca give rise constructed abramsky ideas games bracketed strategies 
proof non trivial extent furnishes kind evidence status provided conjecture see 
van oosten longley constructed pca described section type structure described exactly type structure obvious object 
characterization arising theory realizability models led systematic study sr functionals lon 
various attempts generalize construction realizability models untyped typed structures 
seemingly natural way proposed author lon considerable perspective parts ii iii means unifying existing material 
generalization leads new ways constructing type structures cases turn isomorphic type structures mentioned 
appears known natural examples realizability models type structure isomorphic rc hrc type structure natural choice isomorphic recursive analogues 
consistent impression gained material sections wide range approaches defining plausible notions higher type computable functional leads relatively small manageable handful type structures 
interesting know kleene computable functionals strict sense described section sense obtained realizability construction 
non functional notions computability 
far concentrated entirely extensional notions computability notions computable functional 
ask reasonable non extensional notions computable operation higher types 
notions received relatively little attention comparison extensional notions idea intensional operation unclear priori amenable precise mathematical formulation 
briefly survey known relation problem 
seen notions computable functional may naturally embodied extensional type structures substructures thereof 
attempt propose general notions computable operation identified simply type structures extensionality requirement 
typical example structure hro definition 
examples arise non pointed cartesian closed categories object corresponding interpret simple types repeated exponentiation apply global elements functor hom 
view somewhat unsatisfactory concrete instance di erent godel numbering schemes give rise non isomorphic variants hro presumably wish consider variants embodying essentially notion computability 
particular problem may addressed adopting refined point view outlined section may collect examples non extensional type structures embody plausible notions computable operation 
structures non extensional type structures systematically studied troelstra tro exploited metamathematical purposes type structure containing suitable basic operations essentially system serve model higher order arithmetic extensionality axiom 
type structures considered troelstra particular interest point view structure hro hereditarily recursive operations type structure icf intensional continuous functionals 
relevant facts hro described section 
trivial example non extensional computable operation hro element hro operation hro returns kleene index trivial example local modulus continuity operation hro property hro represents extensional operation ff ff fn gn existence recursive operation implicit original proof kreisel theorem kls 
way contrast easily shown extensional local modulus continuity operation computable element heo property 
observations obtain variety consistency independence results theories higher order arithmetic 
type structure icf intensional counterpart defined definition way hro intensional counterpart essentially obtained pca way hro obtained pure types icf may defined follows icf icf icf icf extensional type structures may consider recursive analogue icf recursive substructure 
shown icf contains local modulus continuity operation rc similarly recursive variants see tro 
troelstra considered non extensional type structures certain term models system appealing candidates notions computability 
structures non extensional notions computability considered computer science arise naturally connection typed programming languages containing non functional features exceptions state 
term models programming languages frequently give rise non pointed cccs non extensional type structures 
regard term models defining notions computability extensional case interest lies trying provide semantic characterizations type structures 
number programming languages considered computer science literature large little interest known point view computability confine attention languages alternative characterization implicit notion computability obtained 
intensional notion computability emerged having mathematical credentials embodied language pcf catch studied cartwright curien felleisen cf ccf pcf order callcc pcf os 
languages equivalent sense fully term models closed terms modulo observational equivalence isomorphic finite types 
consider pcf catch representative languages definition pcf catch obtained adding definition pcf constant catch reduction rules mx 
fresh variables evaluation context intuitively proceed reduction knowing catch mx 
fresh variables intuitively complete computation knowing catch informally catch evaluates watches see look arguments computation aborted index argument looked returned 
easy see functional section may implemented pcf catch 
catch operators give rise non functional behaviour instance catch xy 
catch xy 

fact proposed languages turn expressivity pcf catch encouraging significant semantic characterization due cartwright curien felleisen ccf theorem fully term model pcf catch isomorphic type structure arising category ective sequential algorithms ective analogue berry curien model bc 
original definition sequential algorithms model heavy give 
longley showed relevant objects model arise naturally retracts van oosten algebra particular form envelope algebra type structure category coincides exactly type structure theorem 
ideas game semantics developed abramsky successful providing semantic account expressivity number programming languages 
am instance shown imposing imposing bracketing innocence conditions strategies see section obtains square categories games corresponding di erent computational paradigms corresponds functional notion computation model bracketing innocence constraints corresponds pcf 
model innocence bracketing studied detail laird lai lai turns correspond pcf catch precisely fully term model pcf catch algebraic quotient type structure arising model 
models innocence correspond notions computation involving memory state full abstraction result idealized algol respect non innocent bracketed game model obtained 
author alternative constructions non innocent non bracketed model including programming language characterization notion computability 
general appear categories games correlations programming languages provide fruitful source candidates mathematically natural notions non extensional computability expect developments vein 
realizability perspective concentrated non extensional type structures way capture notions computable operation 
slightly subtle perspective making ideas realizability outlined lon lon 
idea realizability interpretation logic say predicate logic simple types realizers drawn computational universe pca type structure kind set realizable sentences gives information kinds operation computable example sentence 


realizable corresponds local moduli continuity computable propose identify notions higher type computability notions realizability logic 
sense allows say intensional operations computable having commit concrete definition computable operation 
perspective advocated developed detail part iii 
point view general leads large class potential notions computability instance untyped pca implicitly embodies notion computable operation higher types 
fortunately theory gives natural way saying structures equivalent point view computability significantly reduces number distinct notions 
notions computability competing attention territory remains explored 
unclear reasonable hope ultimately small collection genuinely natural notions extensional setting practice unlimited range equally reasonable notions 
tried trace various lines research date relevant study computability higher types 
strands research widely scattered di erent areas mathematical logic computer science contention viewed outline coherent subject area may discerned 
central conceptual question concerned notions computability higher types 
approach empirical collect variety di erent attempts defining notion see natural notions emerge 
main concern chart history ideas bear problem 
development ideas naturally haphazard little attempt organize material necessary tell coherent story 
regarding notions computable functional grounds believing emerging picture probably reasonably complete territory fairly thoroughly explored observed section reasonable attempt define class computable functionals lead known notions 
regarding general notions computable operation wealth individual examples known described uniform framework picture far complete unclear notions expect 
having collected reviewed material position attempt systematic treatment 
part ii survey material computable functionals uniform framework presenting important notions computability various characterizations intrinsic properties relationships di erent notions philosophical discussion conceptual issues 
particular include results interpreted showing impossibility church thesis higher type functionals 
part iii develop detail realizability framework mentioned section sketched lon 
framework collect organize known general notions computable operation 
see results recursion theory computer science formulated simply setting 
framework part iii sense subsumes part ii flavour di erent believe perspectives valuable 
remarks bibliography list attempted provide reasonably complete bibliography field higher type computability delineated article 
aims survey provide accessible guide literature subject works listed cited text possible view entire article extended commentary bibliography 
tried include relevant published works ph theses unpublished works important contributions subject 
unpublished technical reports contributions appeared soon published literature usually listed 
abe 
computable analysis 
mcgraw hill new york 
abs birkedal scott 
local realizability toposes modal logic computability 
appear mathematical structures computer science 
ah aczel 
recursion 
fenstad editors generalized recursion theory pages 
northholland 
abramsky honda mccusker 
fully game semantics general 
proc 
th annual symposium logic computer science 
ieee 
ajm abramsky jagadeesan malacaria 
full abstraction pcf 
information computation 
abramsky longley 
combinatory algebras sequential computation 
preparation 
am abramsky mccusker 
game semantics 
schwichtenberg berger editors computational logic proceedings marktoberdorf summer school pages 
springer 
bar barendregt 
lambda calculus syntax semantics 
northholland revised edition 
bar barendregt 
lambda calculi types 
abramsky gabbay maibaum editors handbook logic computer science volume pages 
oxford university press 
bauer birkedal 
continuous functionals dependent types equilogical spaces 
proc 
computer science logic appear 
bbs bauer birkedal scott 
equilogical spaces 
appear theoretical computer science 
bc berry 
curien 
sequential algorithms concrete data structures 
theoretical computer science 
bucciarelli ehrhard 
extensional embedding strongly stable model pcf 
proc 
eighteenth int 
conf 
automata languages programming madrid volume lecture notes computer science pages 
springer 
bucciarelli ehrhard 
sequentiality strong stability 
proc 
th annual symposium logic computer science pages 
ieee 
bucciarelli ehrhard 
theory sequentiality 
theoretical computer science 
bucciarelli ehrhard 
sequentiality extensional framework 
information computation 
bee beeson 
foundations constructive mathematics 
springer 
ber bergstra 
computability continuity finite types 
phd thesis university utrecht 
ber bergstra 
continuous functionals fenstad gandy sacks editors generalized recursion theory ii pages 
north holland 
ber berry 
stable models typed lambda calculi 
proc 
th international colloquium automata languages programming lecture notes computer science pages 
springer 
ber berger 
objekte und der 
phd thesis munich 
ber berger 
total sets objects domain theory 
annals pure applied logic 
ber berger 
continuous functionals dependent transitive types 
technical report ludwig maximilians universitat munchen 
ber berger 
minimisation vs recursion partial continuous functionals 
draft 
bet 
notes partial combinatory algebras 
phd thesis universiteit van amsterdam 
bezem 
isomorphisms heo hro ecf icf journal symbolic logic 
bezem 
strongly functionals finite type model bar recursion containing discontinuous functionals 
journal symbolic logic 
bezem 
equivalence bar theory functionals finite type 
archive mathematical logic 
bezem 
compact functionals finite type 
journal symbolic logic 
bm banach mazur 
sur les fonctions 
ann 
soc 
pol 
de math 
br bloom riecke 
lcf lifted 
proc 
conf 
algebraic methodology software technology 
dept comp 
sci university iowa 
bs berger schwichtenberg 
inverse evaluation functional typed calculus 
proc 
th annual symposium logic computer science pages 
ieee 
buc bucciarelli 
approach sequentiality kleene functions 
proc 
th symp 
mathematical foundations programming semantics new orleans volume lecture notes computer science pages 
springer 
buc bucciarelli 
sequential models pcf contributions approach full abstraction 
phd thesis dipartimento di informatica universita di pisa 
buc bucciarelli 
degrees parallelism continuous type hierarchy 
proc 
th int 
conf 
mathematical foundations programming semantics 
bw bergstra wainer 
real ordinal section continuous functional 
journal symbolic logic 
ccf cartwright 
curien felleisen 
fully semantics observably sequential languages 
information computation 
ce ehrhard 
strong stability higher order sequentiality 
proc 
th annual symposium logic computer science pages 
ieee 
cf cartwright felleisen 
observable sequentiality full abstraction 
proc 
th popl pages 
acm press 
chu church 
unsolvable problem elementary number theory 
american journal mathematics 
cla clarke 
hierarchies predicates finite types 
mem 
amer 
math 
soc 
coo cook 
computability complexity higher type functions 
moschovakis editor proc 
msri workshop logic computer science pages 
springer 
cur 
curien 
categorical combinators sequential algorithms functional programming 
birkhauser second edition 
dav davis 
computability unsolvability 
mcgraw hill 
dav davis 
computable functionals arbitrary finite type 
heyting editor constructivity mathematics proceedings colloquium held amsterdam pages 
north holland 
dra 
computation primitive recursive terms finite type primitive recursive realization 
zap 

sem 
mat 
inst 

ehr ehrhard 
strongly stable model linear logic 
mathematical structures computer science 
ehr ehrhard 
projecting sequential algorithms strongly stable functions 
annals pure applied logic 
ehr ehrhard 
relative pcf definability result strongly stable functions corollaries 
appear information computation 
ers yu ershov 
computable morphisms 
algebra 
ers yu ershov 
la theorie des enumerations 
actes du international des nice pages 
paris 
ers yu ershov 
computable functionals finite type 
algebra 
english translation algebra logic ams 
ers yu ershov 
theory spaces 
algebra 
english translation algebra logic ams 
ers yu ershov 
maximal defined functionals 
algebra 
english translation algebra logic ams 
ers yu ershov 
model theory br 
soviet math 
doklady 
ers yu ershov 
constructions finite 
proceedings fifth international congress logic methodology philosophy science pages 
london ontario 
ers yu ershov 
hereditarily ective operations 
algebra 
english translation algebra logic ams 
ers yu ershov 
model partial continuous functionals 
logic colloquium pages 
north holland 
ers yu ershov 
theory enumerations 
monographs mathematical logic foundations mathematics 
nauka moscow 
ers yu ershov 
theory numberings 
gri editor handbook computability theory pages 
north holland 
esc 
pcf extended real numbers 
theoretical computer science 
fef feferman 
inductive schemata recursively continuous functionals 
logic colloquium pages 
north holland 
fef feferman 
theories finite type related mathematical practice 
barwise editor handbook mathematical logic pages 
northholland 
fen fenstad 
foundation general recursion theory computations versus inductive definability 
fenstad gandy sacks editors generalized recursion theory ii pages 
northholland 
fen fenstad 
general recursion theory 
perspectives mathematical logic 
springer 
fit fitting 
fundamentals generalized recursion theory volume studies logic 
north holland 
fjm fiore jung moggi hearn riecke rosolini stark 
domains denotational semantics history accomplishments open problems 
bulletin european association theoretical computer science 
fri friedberg 
quantifier completeness banach mazur functional uniformly partial recursive 
bull 
acad 

sci 
serie des sciences 
fri friedberg 
un exemple aux 
comptes rendus des de des sciences paris 
gan gandy 
ective operations recursive functionals 
journal symbolic logic 
gan gandy 
computable functionals finite type crossley editor sets models recursion theory pages 
north holland 
part ii appeared 
gan gandy 
general recursive functionals finite type hierarchies functionals 
ann 
fac 
sci 
univ 
gan gandy 
proofs strong normalization 
hindley seldin editors curry essays combinatory logic lambda calculus formalism 
academic press 
gh gandy hyland 
computable recursively countable functions higher type 
logic colloquium pages 
northholland 
gir 
girard 
proof theory logical complexity volume ii 
appear 
gir 
girard 
interpretation elimination des coupures de ordre 
phd thesis paris 
gir 
girard 
proof theory logical complexity volume bibliopolis 
gl giannini longo 
ectively domains lambda calculus models 
information control 
god godel 
uber formal der principia mathematica und systeme fur mathematik und physik 
god godel 
uber eine noch nicht erweiterung des 
dialectica 
english translation god 
god godel 
extension finitary mathematics 
published god 
god kurt godel 
collected works volume ii 
oxford university press 
edited feferman gri 
recursive functions finite higher types 
phd thesis duke university 
gri 
hierarchies objects finite type 
journal symbolic logic 
gri 
selection functions recursive functionals 
notre dame journal formal logic 
gri 
ectively discontinuous type objects 
journal symbolic logic 
gri gri 
recursively enumerable degrees 
phd thesis mit cambridge mass 
grz grzegorczyk 
computable functionals 
fund 
math 
grz grzegorczyk 
definition computable functionals 
fund 
math 
grz grzegorczyk 
recursive objects finite types 
fundamenta mathematicae 
har harrington 
contributions recursion theory higher types 
phd thesis mit cambridge mass 
har harrington 
recursively ordinal 
fenstad editors generalized recursion theory pages 
north holland 
hin 
des primitives de type fini sur les nombres 
ann 
japan assoc 
philos 
sci 
hin 
ad hierarchy schemata recursive function theory 
phd thesis university california berkeley 
hin 
primitive recursive functionals finite type 
science reports tokyo 
hin 
hierarchies ective descriptive set theory 
trans 
amer 
math 
soc 
hin 
degrees continuous functionals 
journal symbolic logic 
hin 
recursion theoretic hierarchies 
perspectives mathematical logic 
springer 
hk harrington 
characterizing spector classes 
journal symbolic logic 
hm harrington macqueen 
selection recursion theory 
journal symbolic logic 
ho hyland 
ong 
full abstraction pcf ii iii 
information computation 
howard 
hereditarily functionals finite type 
troelstra editor metamathematical investigation intuitionistic arithmetic analysis volume lecture notes mathematics pages 
springer 
ht 
note continuous functionals 
annals japan association philosophy science 
hyl hyland 
recursion theory countable functionals 
phd thesis university oxford 
hyl hyland 
intrinsic recursion theory countable continuous functionals 
fenstad gandy sacks editors generalized recursion theory ii pages 
north holland 
hyl hyland 
filter spaces continuous functionals 
ann 
math 
logic 
hyl hyland 
ective topos 
brouwer symposium 
north holland 
hyl hyland 
steps synthetic domain theory 
carboni rosolini editors category theory proceedings como volume lecture notes mathematics pages 
springer 
irwin royer 
characterizations basic feasible functionals part journal functional programming 
irwin royer 
characterizations basic feasible functionals part ii 
draft available ftp ftp cis syr edu users royer 
js jung stoughton 
studying fully model pcf continuous function model 
proc 
int 
conf 
typed lambda calculi applications utrecht number lecture notes computer science pages 
springer 
cartwright felleisen 
spcf model calculus computational power 
proc 
rex workshop semantics concurrency lecture notes computer science pages 
springer 

structure envelopes survey recursion theory higher types 
mit logic seminar notes 
kie 
semantics kleene expressions 
barwise keisler kunen editors kleene symposium pages 
north holland 
kie 
syntax semantics higher type recursion theory 
trans 
amer 
math 
soc 
kle kleene 
general recursive functions natural numbers 
mathematische annalen 
kle kleene 
definability recursiveness 
duke mathematical journal 
kle kleene 
interpretation intuitionistic number theory 
symb 
logic 
kle kleene 
metamathematics 
wolter north holland 
kle kleene 
arithmetical predicates function quantifiers 
trans 
amer 
math 
soc 
kle kleene 
hierarchies number theoretic predicates 
bull 
amer 
math 
soc 
kle kleene 
countable functionals 
heyting editor constructivity mathematics proceedings colloquium held amsterdam pages 
north holland 
kle kleene 
recursive functionals quantifiers finite types trans 
amer 
math 
soc 
kle kleene 
herbrand godel style recursive functionals finite types 
proc 
symp 
pure math 
kle kleene 
lambda definable functionals finite types 
fund 
math 
kle kleene 
turing machine computable functionals finite types logic methodology philosophy science stanford pages 
kle kleene 
turing machine computable functionals finite types ii 
proc 
london math 
soc 
kle kleene 
recursive functionals quantifiers finite types ii 
trans 
amer 
math 
soc 
kle kleene 
formalized recursive functionals formalized realizability 
mem 
amer 
math 
soc 
kle kleene 
recursive functionals quantifiers finite types revisited fenstad gandy sacks editors generalized recursion theory ii pages 
north holland 
kle kleene 
recursive functionals quantifiers finite types revisited ii 
barwise keisler kunen editors kleene symposium pages 
north holland 
kle kleene 
recursive functionals quantifiers finite types revisited iii 
editor patras logic symposium pages 
northholland 
kle kleene 
functions finite types recursive functionals quantifiers finite types revisited iv 
nerode shore editors recursion theory volume proc 
symposia pure mathematics pages 
kle kleene 
recursive functionals quantifiers finite types revisited trans 
amer 
math 
soc 
kls kreisel shoenfield 

compt 
rend 
acad 
sci 
kls kreisel shoenfield 
partial recursive functionals ective operations 
heyting editor constructivity mathematics proceedings colloquium held amsterdam pages 
north holland 
km moschovakis 
recursion higher types 
barwise editor handbook mathematical logic pages 
northholland 
kn normann 
total objects inductively defined types 
archive mathematical logic 
kp kahn plotkin 
concrete domains 
theoretical computer science 
appeared french inria technical report 
kre kreisel 
interpretation analysis means functionals finite type 
heyting editor constructivity mathematics proceedings colloquium held amsterdam pages 
north holland 
kre kreisel 
set theoretic problems suggested notion potential totality 
methods proc 
symp 
foundations mathematics warsaw page 
pergamon 
kur kuratowski 
topologie vol 
warsaw 
kv kleene 
foundations intuitionistic mathematics 
north holland 
lac 
extension de la notion de fonction recursive aux fonctions une ou plusieurs variables comptes rendus acad 
sc 
paris 
lac 
extension de la notion de fonction recursive aux fonctions une ou plusieurs variables ii 
comptes rendus acad 
sc 
paris 
lac 
extension de la notion de fonction recursive aux fonctions une ou plusieurs variables iii 
comptes rendus acad 
sc 
paris 
lac 
sur les sur les fonctions une variable 
comptes rendus acad 
sc 
paris 
lai laird 
full abstraction functional languages control 
proc 
th annual symposium logic computer science pages 
ieee 
lai laird 
semantic analysis control 
phd thesis university edinburgh 
examined march 
lic 
degrees parallelism 
technical report informatik siegen 
lm longo moggi 
cartesian closed categories enumerations ective type structures parts ii 
kahn macqueen plotkin editors semantics data types pages 
springer 
lm longo moggi 
hereditary partial functionals recursion theory higher types 
journal symbolic logic 
loa loader 
finitary pcf decidable 
appear 
loa loader 
equational theories inductive types 
annals pure applied logic 
lon longley 
realizability toposes language semantics 
phd thesis university edinburgh 
available ecs lfcs 
lon longley 
sequentially realizable functionals 
technical report ecs lfcs department computer science university edinburgh 
appear annals pure applied logic 
lon longley 
matching typed untyped realizability 
birkedal van oosten rosolini scott editors proc 
workshop realizability trento 
published electronic notes theoretical computer science elsevier 
available www elsevier nl locate entcs volume html 
lon longley 
unifying typed untyped realizability 
electronic note available www dcs ed ac uk home unifying txt 
lon longley 
functional program functional program 
proc 
th international conference functional programming paris pages 
acm press 
lon longley 
notions computability higher types ii 
pages approx preparation 
draft available www dcs ed ac uk home 
lon longley 
notions computability higher types iii 
pages approx preparation 
draft available www dcs ed ac uk home 
low 
equivalence definitions recursion higher type object 
journal symbolic logic 
lp longley plotkin 
logical full abstraction pcf 
ginzburg editor symposium language logic computation pages 
csli 
ls longley simpson 
uniform approach domain theory realizability models 
mathematical structures computer science 
mac macqueen 
post problem recursion higher types 
phd thesis mit cambridge mass 
maz mazur 
computable analysis 

mcc mccarty 
information systems continuity realizability 
clarke editors logics programs number lecture notes computer science pages 
springer 
mil milner 
fully models typed calculi 
theoretical computer science 
mog moggi 
partial morphisms categories ective objects 
details needed 
mol 
computations higher types volume lecture notes mathematics 
springer 
mos moschovakis 
predicates 
trans 
amer 
math 
soc 
mos moschovakis 
order computability ii 
trans 
amer 
math 
soc 
mos moschovakis 
elementary induction structures 
northholland 
mos moschovakis 
non monotone inductive definability 
fund 
math 
mos moschovakis 
structural characterizations classes relations 
fenstad editors generalized recursion theory pages 
north holland 
mos moschovakis 
basic notions theory induction 
proceedings fifth international congress logic methodology philosophy science 
london ontario 
mos moschovakis 
descriptive set theory 
north holland 
mos moschovakis 
harrington macqueen theorem 
logic year volume lecture notes mathematics pages 
springer 
rohr streicher 
full abstraction universality realisability 
proc 
th annual ieee symposium logic computer science 
ieee 
ms myhill shepherdson 
ective operations partial recursive functions 
zeitschrift fur mathematische logik und grundlagen der mathematik 
mul 
generalized banach mazur functionals topos recursive sets 
pure appl 
algebra 
mul mulmuley 
full abstraction semantic equivalence 
mit press 
ner nerode 
general topology partial recursive functionals 
cornell summ 
inst 
symb 
logic pages 
cornell 
ner nerode 
stone spaces recursion theory 
duke mathematical journal 
nic 
hereditarily sequential functionals 
proc 
rd symposium logical foundations computer science lecture notes computer science pages 
springer 
nig 

hierarchies scott domains 
archive mathematical logic 
normann 
continuous functional hierarchy 
journal symbolic logic 
normann 
set recursion 
fenstad gandy sacks editors generalized recursion theory ii pages 
north holland 
normann 
classification higher type functionals 
jensen mller editors proc 
th scandinavian logic symposium pages 
aalborg university press 
normann 
continuous functionals 
proc 
th international congress logic methodology philosophy science pages 
hanover 
normann 
recursion countable functionals volume lecture notes mathematics 
springer 
normann 
continuous functionals computations recursions degrees 
annals mathematical logic 
normann 
countable functionals projective hierarchy 
journal symbolic logic 
normann 
characterising continuous functionals 
journal symbolic logic 
normann 
kleene spaces 
ferro editor logic colloquium pages 
elsevier 
normann 
closing gap continuous functionals recursion archive mathematical logic 
normann 
continuous functionals finite types reals 
appear 
normann 
continuous functionals 
gri editor handbook computability theory pages 
north holland 
normann 
computability partial continuous functionals 
journal symbolic logic 
normann 
exact real number computations relative hereditarily total functionals 
appear theoretical computer science 
nw normann wainer 
section countable functional 
journal symbolic logic 
odi odifreddi 
classical recursion theory volume studies logic foundations mathematics 
north holland 
second edition 
ong 
ong 
correspondence operational denotational semantics 
abramsky gabbay maibaum editors handbook logic computer science volume pages 
oxford university press 
hearn riecke 
kripke logical relations pcf 
preprint 
os ong stewart 
curry howard foundation functional computation control 
proc 
symposium principles programming languages pages 
acm press 
pe pour el 
comparison computable operators 
zeitschrift fur mathematische logik und grundlagen der mathematik 
pour el richards 
computability analysis physics 
springer 
pet peter 
probleme der theorie der von funktionen 
acta math 
acad 
sci 

pet peter 
funktionen 
verlag budapest 
english translation published recursive functions academic press 
pho 
phoa 
term models domains 
proc 
theoretical aspects computer software sendai 
springer lncs 
pla platek 
foundations recursion theory 
phd thesis stanford university 
pla platek 
countable hierarchy 
gandy yates editors logic colloquium pages 
north holland 
plo plotkin 
lcf considered programming language 
theoretical computer science 
plo plotkin 
universal domain 
journal computer system sciences 
plo plotkin 
domains 
technical report dept comp 
sci university edinburgh 
plo plotkin 
full abstraction totality pcf 
mathematical structures computer science 
pos post 
finite combinatory processes formulation 
journal symbolic logic 
ric rice 
classes recursively enumerable sets decision problems 
trans 
amer 
math 
soc 
ric rice 
completely recursively enumerable classes key arrays 
journal symbolic logic 
ric richter 
constructive transfinite number classes 
bull 
amer 
math 
soc 
rie riecke 
fully translations functional languages 
math 
struct 
comp 
science 
rog rogers 
theory recursive functions ective computability 
mcgraw hill 
ros rosolini 
continuity ectiveness topoi 
phd thesis oxford carnegie mellon 
roy royer 
computational complexity longley functional 
second international workshop implicit computational complexity uc santa barbara 
sac sacks 
recursion objects finite type 
proc 
international congress mathematicians pages 
paris 
sac sacks 
section type object 
fenstad editors generalized recursion theory pages 
north holland 
sac sacks 
re sets higher 
proceedings fifth international congress logic methodology philosophy science 
ontario 
sac sacks 
section type object 
amer 
math 
sac sacks 
post problem recursion finite types 
barwise keisler kunen editors kleene symposium pages 
north holland 
sac sacks 
post problem recursion 
proc 
symp 
pure math 
ams 
sac sacks 
limits recursive 
annals pure applied logic 
sac sacks 
higher recursion theory 
springer 
sac sacks 
recursion 
gri editor handbook computability theory pages 
elsevier 
san 
functionals defined recursion 
notre dame journal formal logic 
san 
recursive functionals volume studies logic foundations mathematics 
north holland 
saz yu 
sazonov 
sequentially computable functionals 
proc 
symp 
mathematical foundations computer science volume lecture notes computer science pages 
springer 
saz yu 
sazonov 
degrees parallelism computations 
mathematical foundations computer science volume lecture notes computer science pages 
springer 
saz yu 
sazonov 
expressibility functions scott lcf language 
algebra 
saz yu 
sazonov 
functionals computable series parallel 

sca 
model higher types 
mathematica 
sch schwichtenberg 
primitive recursion partial continuous functionals 
broy editor informatik und mathematik pages 
springer berlin 
sch schwichtenberg 
density choice total continuous functionals 
odifreddi editor 
georg kreisel pages 
peters wellesley massachusetts 
sco scott 
theory computable functions higher type 
unpublished seminar notes university oxford 
pages november 
sco scott 
outline mathematical theory computation 
proc 
th annual princeton conference information science systems pages 
sco scott 
continuous lattices 
lawvere editor toposes algebraic geometry logic 
springer 
sco scott 
data types lattices 
siam journal computing 
sco scott 
domains denotational semantics 
nielsen schmidt editors proc 
ninth international colloquium automata languages programming aarhus denmark number lecture notes computer science pages 
springer 
sco scott 
type theoretical alternative iswim cuch 
theoretical computer science 
written widely circulated unpublished form 
hansen lindstrom gri 
mathematical theory domains 
number cambridge tracts theoretical computer science 
cambridge university press 
sho shoenfield 
form negation predicate 
dekker editor recursive function theory proceedings fifth symposium pure mathematics pages 
ams 
sho shoenfield 
mathematical logic 
addison wesley reading ma 
sho shoenfield 
hierarchy type object 
trans 
amer 
math 
soc 
sie 
relating full abstraction results di erent programming languages 
proc 
th conference foundations software technology theoretical computer science bangalore 
springer lncs 
sie 
reasoning sequential functions 
fourman johnstone pitts editors applications categories computer science durham volume london mathematical society lecture note series pages 
cambridge university press 
sla 
aspects recursion 
phd thesis harvard university 
sla 
recursively enumerable degrees dense 
proc 
symp 
pure math 
ams 
spe spector 
provably recursive functionals analysis consistency proof analysis means principles formulated current intuitionistic mathematics 
recursive function theory proc 
symp 
pure math 
pages 
ams 
sto stoughton 
parallel operations pcf 
theoretical computer science 
sto stoughton 
parallel pcf unique extensional model 
proc 
th annual symposium logic computer science pages 
ieee 
tai tait 
second order theory functionals higher type 
stanford report foundations analysis stanford university notes 
tai tait 
intensional interpretations functionals finite type journal symbolic logic 
tra trakhtenbrot 
representation sequential parallel functions 
proc 
th symposium mathematical foundations computer science volume lecture notes computer science 
springer 
tro troelstra 
metamathematical investigation intuitionistic arithmetic analysis volume lecture notes mathematics 
springer 
tug 
predicates recursive type object kleene hierarchies 
comment 
math 
univ st paul 
tur turing 
computable numbers application entscheidungsproblem 
proc 
london math 
soc 
series 
correction ibid vol 
pp 

tur turing 
computability definability 
journal symbolic logic 
tur turing 
systems logic ordinals 
proc 
london math 
soc 
series 

algorithmic operators constructive complete separable metric spaces 
dokl 
acad 
nauk 
usp 
enumeration operators 
dokl 
acad 
nauk 
vd 
van 
models simply typed lambda calculi fixed point combinators 
phd thesis catholic university nijmegen 
vo van oosten 
combinatory algebra sequential functionals finite type 
cooper truss editors models computability pages 
cambridge university press 
vuillemin 
correct optimal implementations recursion simple programming language 
proc 
fifth acm symposium theory computing pages 
wai wainer 
hierarchy section type object 
journal symbolic logic 
wai wainer 
hierarchies higher type quantification 
rose shepherdson editors logic colloquium pages 
north holland 
wai wainer 
section non normal type object 
fenstad gandy sacks editors generalized recursion theory ii pages 
north holland 
wei weihrauch 
computable analysis 
texts theoretical computer science 
springer 

properties constructive real numbers constructive functions 
mat 
inst 

translated ams translations 
zc 
singular coverings properties constructive functions connected 
mat 
inst 

translated ams translations 

