automata boundary gates department computing division ics macquarie university australia school mathematics statistics university sydney australia di scienze universit dell walters di scienze universit dell november theory automata boundary designing modelling analysing distributed systems 
notions behaviour design simulation appropriate theory de ned 
problem model checking deadlock detection discussed algorithm state space reduction exhaustive search theory described 
examples application theory course development ideas illustrative examples theory 
shall overview theory automata boundary transition system approach problem designing modelling analyzing distributed systems 
treatment explicitly models boundaries subsystems communicate part larger system 
describe notions comparison simulation automata allow abstractions performed compositional manner 
part completed university sydney 
supported australian research council italian murst italian cnr 
give notion behaviour automata works operations construct systems simulations systems 
observe approach explicitly captures design system element theory describe advantages 
section general automata boundary behaviour operations construct systems subsystems notion design 
section develops example dining philosophers conjunction theory show reader known example treated ideas 
section address problem model checking speci cally focusing deadlock detection 
describe algorithm minimal introspective subsystem algorithm utilises design information system assist reducing search space required exhaustive model checking techniques 
section concludes description behaviour algorithm applied dining philosophers example 
section de ne comparison simulation automata describe sense compositional connection behaviour deadlock detection 
give examples simulations related dining philosophers indicate simulations assist model checking theoretically analyze systems interest 
section give examples theory design simple scheduler message protocol 
section illustrates theory indicates range applicability 
underlying mathematical formalism approach category theory see speci cally cartesian bicategories see :10.1.1.6.4560
stress background category theory required required de nitions results stated terms transition systems occasionally indicate passing key connections 
forms part ongoing research project develop compositional theory distributed systems categorical structures 
overview project breadth interpretation distributed system see :10.1.1.6.4560
material current stems bicategory span graph bicategory shown precise connections algebra transition systems arnold nivat process algebras hoare bicategory shown expressive model place transition nets :10.1.1.6.4560
automata boundary goal section automata boundary model systems composed number communicating parts 
boundaries form integral part theory interactions system environment occur boundaries 
discuss behaviours automaton behaviours appear boundaries automaton 
requirements automata expressed restricting behaviours automaton appear boundaries 
describe operations bind feedback product automata boundary enabling larger systems built combining smaller systems way interacts behaviours 
importantly operations represented pictorially designs allowing give high level views systems 
introduce basic de nitions shall example illustrating concepts de ned 
shall example dining philosophers favoured works distributed systems 
automata boundary nite state automata model transition systems long history see 
automaton consist re exive graph plus data 
re exive graph consists directed graph parallel edges loops allowed speci ed re exive edge vertex graph 
insist automata nite examples nite 
restrict attention nite automata considering model checking 
crucial element theory boundary 
boundaries typed kind synchronization actions occur boundary 
action set mean nite set distinguished element denoted refer elements actions trivial re exive action 
automaton boundary consists data 
re exive graph called state space automaton vertices termed states edges termed motions 

nite set indexing boundaries automaton 

boundary consisting action set labelling motion element trivial re exive 
note state space automaton re exive graph includes states motions automaton provide cohesion states justify terminology space 
mind re exive edges state space idling motions see comments de nition simulation section exploration view 
labelling motions indicates actions boundaries accompany motions require automaton idling idling boundary 
course nontrivial motions motions re exive may idle boundaries 
motions idling boundaries called internal motions 
re ect ability automaton change state re ected interaction environment 
shall occasionally say motion performs action boundary mean labelled speci ed action speci ed boundary 
note boundary consists action set labelling motions shall speak boundary confusion arises 
shall say type boundary mean action set worth noting give action set precisely give re exive graph vertex 
action set may considered automaton trivial state 
explored general theory kind relax restriction allow calculate boundaries possess internal state 
boundary automata dealing automaton typically focus temporarily subfamily boundaries operation performed example gluing boundaries binding see section 
subset set indexing boundaries may write arrow inj picture motions labelled products tupling labelling individual boundaries 
shall typically abbreviate just wish emphasize division particular boundaries 
case shall term left boundary right boundary passage product single object may seen collection bundle wires single cable purposes hierarchical design 
view gives connection automata boundary theory bicategories see :10.1.1.6.4560
passage multiple boundary boundary automata allows natural workable de nition operations automata sacri cing expressive power precision 
pictorial representation automata describing automata typically draw pictures drawing state space automaton edges labelled indicate actions performed motions 
automaton write label xjy indicate motion performs action left boundary action right boundary 
shall omit drawing re exive edges add information picture existence edges crucial allow subautomata bound systems act independently see section 
depict automata boundaries similar manner 
automaton boundaries indexed labels motions tuples entries drawn types corresponding boundary 
philosopher fork case explicit correspondence tuple entries boundaries 
automata dining philosophers example dining philosophers shall automata boundary philosopher fork 
philosopher boundaries left right fork perspective fork likewise boundaries philosophers manipulate fork 
shall action set automata boundary philosopher fork 
action set consists actions philosopher fork jointly perform 
nontrivial action philosopher fork synchronize consists fork picked put 
model action set lock 
philosopher shown gure 
philosopher states corresponding attempting acquire left fork acquire right fork relinquish left fork relinquish right fork 
motions states labelled boundary actions performed motion 
fork shown gure 
fork states corresponding state acquired left boundary state acquired right boundary state 
motions labelled boundary actions perform 
behaviour automata automaton state behaviour initial state sequence motions nite nite appropriate 
behaviour path state space 
write behaviours boundary behaviour re ected boundary 
precisely appearance behaviour mean sequence actions 
say behaviour boundary mean sequence appearance behaviour shall refer reduced appearances behaviours boundaries mean sequences obtained eliding trivial actions appearance behaviour 
crucial note reduced appearance behaviour need actual appearance behaviour nontrivial motions may appear trivial actions boundary 
automaton gives rise relation behaviours boundaries 
behaviour boundary behaviour boundary may say related appearances behaviour boundaries question 
typical specify system requesting speci relation requesting properties relation 
example performing set actions keypad automatic teller machine boundaries required result cash dispensed action performed machine boundary cash dispenser amount deducted user account action performed machine boundary bank account record 
automaton state subautomaton reachable mean automaton states states exists behaviour form say path motions motions motions states boundaries labelling inherited directly shall assign automaton interest initial state speci ed state case speak merely behaviours mean behaviours initial state reachable subautomaton mean subautomaton reachable interpretation time implied treatment behaviour discretized continuous time underlying continuous time discretely approximated xed time interval 
aspect continuity contained motions motion represents atomic transition duration 
distinguish purely discrete time motions atomic processes may di erent durations 
synchronization may viewed real world process takes variable time model instance synchronization behaviour consisting internal motions bracketed atomic synchronizing transitions duration 
behaviour dining philosophers returning dining philosopher example section choose state philosopher gure initial state 
behaviour philosopher consists repeating sequence cycle lock left boundary lock right boundary unlock left boundary unlock right boundary possibly interspersed re exive edges 
reduced appearance boundary simply alternating sequence lock unlock actions 
state initial behaviour fork gure consists sequence lock boundary unlock boundary pairs boundary possibly di ering pair pair possibly interspersed re exive edges 
reduced appearance boundary alternating sequence lock unlock actions 
operations binding feedback product describe operations may construct new automata boundary old 
case diagrammatic view operation considered design expression variable unimplemented automata 
important feature methodology depict operations systems depicting internals systems allowing hierarchical design 
connection operations discussed hoare parallel operation discussed section :10.1.1.6.4560
operation describe ect operation behaviours sense describe behaviours new system terms behaviours automata 
important feature theory operations automata notion behaviour described section 
operation described boundary automata noted section sucient describe automata 
binding rst operation consider binding 
automata common boundary say produce new automaton binding denoted 
state 
pair state state motion 

consists pair motion motion perform action boundary motion 
labelled boundary action performs labelled boundary action performs 
initial states respectively take initial state binding 
binding 
states cartesian product states motions subset cartesian product motions consisting automata synchronize common boundary re exive motions allow move independently provided performing trivial actions common boundary 
binding models automata communicating synchronizing common boundary 
draw diagrams bound systems connecting boundaries automata bound 
draw binding automata follows importantly binding interacts behaviours automata proposition automata boundary 
give behaviour 
precisely give behaviour behaviour appearance feedback automaton bind 
operation called feedback denoted fb form closed systems connecting boundaries 
de ne fb automaton states precisely motions motions performs action factor left boundary factor right boundary 
yields automaton left boundary right boundary labelling inherited obvious manner 
initial state take initial state fed back automaton 
just binding feedback may diagrammatically connecting fed back boundaries behaviours fed back automaton easy calculate proposition automaton boundary 
give behaviour fb precisely give behaviour appearance factor left boundary factor right boundary 
product automata de ne product automaton obvious way form cartesian product states resp 
motions obtain states resp 
motions note boundaries likewise formed cartesian product product automaton boundaries labelling motion obtained labellings initial states respectively take initial state product 
product models combining automata parallel communication 
binding note re exive actions automata allow automata act independently 
diagrammatically products shown follows behaviours product easily characterized proposition automata boundary 
give behaviour precisely give behaviour behaviour structural automata addition operations automata number constant operations structural automata useful constructing systems 
examples note identity action set gure diagonal action set gure 
xjx identity automaton identity automaton boundaries type single state motion action labelled boundary 
re exive motion motion corresponding re exive action name suggests identity automaton identity binding particular identities connect similar boundaries single wire composed system 
diagonal automaton diagonal automaton boundaries type single state motion action labelled boundary 
re exive motion motion corresponding re exive action diagonal automaton useful splitting wire synchronously 
binding philosophers forks binding 
single philosopher single fork shown gure conserved space little abbreviating lock unlock respectively 
initial state bound system state 
points note bound system motions automata synchronized internal motions motions perform trivial actions boundaries 
general synchronizing motions perform trivial actions boundaries synchronized produce internal motion 
states reachable initial state 
considers reachable subautomaton bound system 
model allows true concurrency just interleaving semantics 
motion bound system labelled 
truly concurrent philosopher fork change state simultaneously 
binding 
allows philosopher fork synchronize common boundary locking unlocking 
lj lj jl lj ju jl ju uj uj jl uj ju jl ju binding philosopher fork designs systems design diagrams operations guide intuition operations 
diagrams form precise algebra constructing designs 
stock variables automata boundaries type draw diagram automata connecting boundaries wires operations binding feedback product diagram expression automata evaluated automata values variables 
expression called design 
geometry designs considering designs expressions precise algebra operations section expressions indicate desired order evaluation 
automata say isomorphic bijection states states bijection motions motions respect source target motions labelling motions boundaries 
prove propositions justifying diagrammatic manipulations carry alleviate need diagrams situations 
example easily prove binding associative isomorphism automata 
automata dotted boxes indicate order binding 
symbolically 



isomorphic 
draw diagrams binding systems risk confusion 
course binding operation consider prove propositions relating di erent operations proposition automata boundary symbols automata fb 
isomorphic 
result termed middle interchange law proposition automata boundary symbols automata 


isomorphic 
worth noting geometry designs purely combinatorial geometry wires mechanism denoting connection boundaries curvature crossing wires ect geometry design 
precise combinatorial model designs appropriate mathematical context shall described forthcoming 
systems designs implementation system mean design assignment automaton boundary variable design assignments compatible operations evaluate designs 
instance variable automaton occurring design termed component system 
system associated automaton called composite automaton evaluation system obtained realising operations design assigned automata accordance de nition operations section 
evaluation system may sense seen goal design inasmuch problem design produce automaton speci properties system far important point view analysis 
retaining design nal automaton system allows utilise facts construction system order analyse section shall give algorithm uses design information assist model checking 
ort typically devoted design system real world terms rational theory distributed systems retain designs element precisely represented capable computed 
ultimate external customer deliverable development ort compiled code evaluated automaton development ort expected deliver design maintenance engineers usable analyzable form 
subsystems system subsystem mean subset components system 
subsystem gives rise automaton evaluation shall usually abuse terminology term subsystem evaluation 
binding product states constructed automaton pairs states automata operated 
case feedback states states fed back automaton 
state evaluation system gives rise state automaton associated component 
shall refer states automata associated components local states contrast refer state evaluation system global state system 
subsystem larger system state evaluation system gives rise state subsystem obvious way subsystem states tuples local states components form subsystem 
refer state subsystem arising manner local state subsystem 
similar remarks hold motions behaviours shall terms local motion global motion local behaviour global behaviour corresponding concepts 
dining philosopher systems form composite automaton fbl 
automaton boundaries models ring philosophers intervening forks 
example gure shows design ring philosophers forks 
design assignment automata gures respectively comprise system dining philosophers 
ring philosophers forks linear automata motion automaton boundary said linear action performed th boundary nontrivial automaton said linear motion linear 
linear automaton automaton interacts boundary state 
linear automata boundaries decoupled sense require simultaneity distinct boundaries 
point view linear automata modelling systems interleaving semantics sucient 
note automata linear binding 
product may nonlinear 
example binding philosopher fork linear automaton produces nonlinear automaton gure 
linearizable automata automaton boundary linearizable motion total order nd behaviour vn linear ii nontrivial total order iii nontrivial exists 
denotes set ng 
note condition ii implies distinct perform nontrivial actions boundary existence iii unique 
symbolically linearizable automata nonlinear motion re ned series linear motions desired ordering actions carried simultaneously linear automata observed binding product need linear 
case linearizable 
linearizable automaton linearized considering linear motions 
example linearizing subautomaton gure reachable initial state produces automaton shown gure 
lj jl lj ju uj jl ju linearized reachable binding philosopher fork noted restrict attention solely linear automata operation feedback section suited linear automata motions fed back linear automaton trivial fed back boundaries 
structural components described section linear automata 
atomic motions consider system automaton assigned variable design linear 
global motion system corresponding local motions component system 
say global motion atomic motion local motions nontrivial components 
ii case local motions nontrivial distinct components components boundaries respectively joined wire design nontrivial 
say atomic motions multiple components move nontrivially event synchronizing boundaries joined design 
system comprised linear automata subautomaton composite automaton states atomic motions termed atomic core system 
atomic core restricts attention motions simultaneous 
shall notion discussing model checking deadlock section 
simply point considering complete system atomic core allows sucient motions fully explore system sense state system reachable state reachable atomic motions 
restrict attention atomic core prematurely feedback systems relies nonlocal simultaneity 
shall investigate linearity merely note strengths theory speci requirements envisaged domains interleaving semantics carried additional properties structure basic theory 
precisely done tailor basic theory application speci domain area interesting 
linear automata section including connection process algebras hoare :10.1.1.6.4560
model checking section turn attention problem model checking verifying system certain properties 
property shall examine detail deadlock 
give algorithm nding subspace state space automaton automaton possesses deadlock subspace possesses case dining philosophers subspace quadratically large number philosophers 
result achieved stubborn sets see 
indicate examples algorithm give result 
section shall show leverage algorithm cases abstraction techniques 
remainder section restrict attention nite automata 
deadlock detection state automaton said deadlock state motion source re exive motion 
example composite dining philosophers forks gure evaluated state reachable deadlock 
naively check reachable deadlock automaton examine reachable state determine deadlock state 
example dining philosophers ring philosophers states reachable 
attempt exploit design system simplify search 
motivating case example products automata proposition automata initial states product reachable deadlock reachable deadlock form deadlock deadlock deadlock reachable rst considering motions trivial considering motions trivial content proposition suces check subautomaton states form searching reachable deadlock 
general subautomaton number states bounded opposed states full product de ne strong deadlock analysis automaton initial state subautomaton contains ii deadlock state reachable consider notion weak deadlock analysis second condition replaced weaker condition ii deadlock state reachable contains deadlock reachable content proposition subautomaton states states motions motions states comprises weak deadlock analysis product 
include states deadlock obtain strong deadlock analysis product 
introspective subsystems systems interest decompose products required deadlock analysis provided proposition coupling required order distributed parts system communicate achieve common goal 
systems interest locally decouple sense parts spend entire time communication generally restrict interaction speci parts system speci times 
presenting notion local decoupling appropriate theory mention example dining philosophers 
consider reachable linearized subautomaton binding philosopher fork shown gure 
state motion labelled 
internal motion bound automaton motion behaviour state motion environment automaton ect viability motion 
say philosopher fork locally decoupled rest larger system may part 
restrict search deadlock advantage fact motion independent action rest system 
automaton boundaries state say watching looking boundary state motion nontrivial 
conversely automaton ignoring boundary state motion source performs trivial action boundary example philosopher gure watching left boundary states watching right boundary states 
fork gure watching left boundary states right boundary states proposition automata 
state ignoring state state behaviour 
initial state leads deadlock behaviour rst nontrivial motion trivial proof suppose way contradiction true 
state 
deadlock reachable initial nontrivial motion trivial behaviour 
initial state reaching deadlock 
write wn claim nontrivial motion deadlock state motion source say labelled xjy 
looking state trivial 
extend motion trivial motion reach deadlock state contrary choice minimal nontrivial motion note trivial 
triviality implies action performed boundary trivial 
action performed boundary trivial looking state synchronizes action performed boundary trivial evident wn behaviour 
initial state leads speci ed deadlock rst motion trivial desired contradiction 
system composite automata global state subsystem said introspective component subsystem local state corresponding ignoring boundary connects components subsystem 
proposition consider global state system subsystem introspective deadlocked local state corresponding deadlock system reachable reachable behaviour rst nontrivial motion trivial outside subsystem 
proof algebra designs organize system composite subsystem complement introspective subsystem rest system apply proposition composite evaluation subsystems 
introspective deadlocked subsystem global state composite automata system apply proposition repeatedly produce strong deadlock analysis including motions trivial outside introspective subsystem associated source including states reachable initial state included motions 
minimal introspective subsystem analysis may design introspective subsystems obvious designed system provide ecient checking 
desirable automatically check system absence deadlock exploiting known design system reduce state space explosion associated exhaustive model checking 
idea minimal introspective subsystem analysis guide exploration state space proposition 
precisely construct deadlock analysis system suggested previous section explore state space choosing minimal introspective subsystem state 
discussion system composite automaton global state component system examine automaton assigned component determine boundaries automaton looking local state corresponding information component design system simple matter construct non deadlocked minimal introspective subsystem consider directed graph vertices components edges indicating component represented source looking component represented target ood ll edges vertex nd introspective subsystems 
process determines component minimal introspective subsystem containing component 
global state global deadlock nontrivial motion possible 
component introspective subsystem containing deadlocked 
select smallest subsystems deadlocked local state corresponding explore states motions trivial outside selected minimal introspective subsystem looking deadlock proposition guarantees reachable deadlock reachable motion trivial outside introspective subsystem 
maintaining list visited states ensure algorithm terminates 
event automata assigned variables design linear suces explore states atomic motions see case restricting subautomaton including atomic motions alter reachability states 
minimal introspective subsystem analysis dining philosophers consider system consisting ring philosophers intervening forks 
automata system linear restrict attention atomic motions 
shall walk application minimal introspective subsystem analysis algorithm proposed section system 
initially philosopher looking left boundary fork looking boundaries 
introspective subsystem entire system giving atomic motions explored motion philosopher acquires left fork 
state reached precisely philosopher having obtained left fork 
consider state philosopher acquired left fork 
point see looking right boundary looking left boundary fork looking boundaries 
components form introspective subsystem required 
moments thought shows minimal moments minimal introspective subsystem 
nontrivial atomic motions subsystem acquires fork acquires fork 
case system comprised left fork constitute minimal introspective subsystem philosopher state attempting relinquish left fork left fork state having acquired philosopher right 
single nontrivial atomic motion subsystem relinquish fork 
similar analysis philosopher relinquishes right fork 
system returned initial state marked checked 
case acquiring fork apply similar reasoning competition acquire systems comprise unique minimal introspective subsystem global state consideration 
exploring case successful proceed relinquish left right forks return state competing exploring case successful examine subsystem comprised algorithm continues manner obtaining minimal introspective subsystem comprising philosophers intervening fork stage progressing ways allowing philosopher run completion moving competition fork table 
eventually deadlock philosopher acquired left fork 
evident initial state explore states philosopher moves states bar 
exploration stops philosopher acquires left fork philosopher acquired left fork system deadlocked 
potentially required explore initial state nal deadlock state choice initial motions 
states explored signi cant reduction reachable states system 
result described stubborn sets polynomial number states checked computed :10.1.1.6.4560
noted systems similar dining philosophers algorithm reduce checking polynomial number states 
replacing philosophers system shown gure gure results system algorithm searches exponential number states 
alternative philosopher shown gure may termed nondeterministic philosopher 
case minimal introspective subsystem analysis composite system check branches minimal introspective subsystem consideration moves table 
informally see exponential number states checked signi cantly total number states system 
alternative philosopher ii shown gure may termed double cover philosopher 
case philosopher returns state wishing acquire left fork rst instance local state alternative philosopher alternative philosopher ii searched state basic example 
algorithm arrives distinct states minimal introspective subsystem entire system 
reachable global states form argued algorithm proposed visit 
informally situation exponential number states checked 
worth noting nondeterministic double cover philosophers abstracted philosopher gure sense precise section 
abstraction allows strong deadlock analysis polynomially states check complex systems see section 
section outlined principles model checking deadlock manifested theory simple algorithm reducing state space explosion model checking 
emphasized simplistic algorithm demonstrably behaviour particular system importantly exhibits principle design information retained calculus assist process model checking 
simulation section introduce compositional notion simulation automata close relation simulations bisimulations see :10.1.1.6.4560
indicate simulations facilitate model checking 
comparison automata de ning re exive graph morphisms 
denote re exive graph pair comprising set vertices set edges re exive graph morphism consists functions fe sources targets edges preserved re exive edges 
suppose automata boundary action sets comparison re exive graph morphism preserves actions boundaries 
shall term function comprising action states state map function comprising action motions motion map 
writing automata form boundary automata comparison denoted typically shall just write boundaries understood 
section consider automata equipped initial state comparisons asked preserve initial states 
example philosopher described section gure alternative philosopher depicted gure alternative philosopher ii depicted gure 
unique comparisons comparisons preserve initial vertex 
action sets automata comparisons form known discrete cartesian bicategory see 
recalling de nition complicated algebraic structure consider operations relevant composition binding feedback product comparisons 
composition automata comparisons de ne composite comparison composite state map composite state maps motion map composite motion maps composites usual composite functions 
routine check composite de ned comparison categorical terms composite simply composite category re exive graphs 
fact action sets form category aut 
objects automata form arrows comparisons automata 
binding feedback product describe operations automata described section apply comparisons 
case data operations consists comparisons data suitable corresponding automata operation 
automata automata comparisons de ne binding comparison 


described section state space 
states consisting pairs state state motions consisting pairs motions performing action common boundary 
comparison 
maps state mapping obvious extension motions 
fact respect actions motions boundaries implies 
maps motions 
motions 
routine check de ned comparison 
automata comparison de ne feedback comparison fb fb fb 
state space fb motions perform action boundaries type preserves actions boundaries image motion motion performing action boundaries type comparison restricts comparison fed back automata comparison fb 
automata automata comparisons de ne product comparison product state resp 
motion map product state resp 
motion maps operates state space componentwise 
simulations automaton denote reachable subautomaton note give comparison just give comparison simulation mean comparison satis es lifting property states motions exists nite behaviour vn motion re exive motion ii en say automaton simulates write merely boundaries understood 
light de nition revisit view re exive motions idling motions 
precisely emphasize re exive motions idling level abstraction automaton 
abstracting automata constructing comparisons simulations may cause away internal motions germane analysis task hand 
re exive motions may thought representing motions unimportant level abstraction automaton necessarily strictly idle state process modelled 
proof proposition straightforward 
proposition simulation set reduced appearances 
course proposition considering behaviours initial states 
connection notion simulation notions observational equivalences reader referred :10.1.1.6.4560
comparisons philosophers mentioned examples simulations 
class trivial important simulations provided subautomata reachable initial states 
identity graph morphism provides simulation proposition suppose simulation 
reachable deadlock reachable deadlock proposition indicates simulations may detecting deadlocks automaton try nd simulation signi cantly states quotient look deadlocks deadlocks conclude deadlocks check see states give example process section 
action sets automata simulations form discrete cartesian bicategory 
operations composition binding product feedback comparisons induce operations simulations 
composition simulations automata exists simulation called composite composite formed composing comparisons data provided requisite lifting property easily established rst lifting lifting component lifting case comparisons action sets form category category sim objects automata left boundary right boundary arrows simulations automata 
binding feedback product automata automata simulations de ne simulation 


called binding state 
clear reachable reachable applying yields pair states reachability implies image pair reachable 
de nes state map 
motion map similarly obtained lifting property obtained lifting componentwise 
loss generality lifted paths length extend shorter path prepending re exive motions 
motion lifting re exive image motion 
images nal motion lifting perform common action boundary lifting motion 
comparisons lifted motions agree actions common boundary 
automata simulation shall construct simulation fb fb fb called feedback state fb path initial state consisting motions performing action boundaries type clearly state applying gives similar path see induces comparison required 
case binding lifting property follows property fact motions re exive image clearly perform action boundaries type nal lifted motion agrees application respects actions boundaries 
automata automata simulations de ne product simulation observe product comparisons underlying simulations yields comparison underly lifting performed componentwise extending shorter path prepending re exive motions required 
crucial aspect theory operations designs lift operations simulations 
design parts design simulate simpler systems produce abstractions system 
section shall indicate support model checking concrete example dining philosophers 
simulations dining philosophers indicate simulations may facilitate task model checking 
consider alternative dining philosophers section gures 
noted sizes state spaces systems explored minimal introspective subsystem analysis grow exponentially number philosophers alternative philosophers design usual dining philosopher systems may construct corresponding systems fbl 
fbl 

noted simulations operations section construct simulations fbl 
fbl 
fbl 
fbl 
fbl 
fbl 
apply minimal introspective subsystem analysis standard philosopher system recall explored state space grows quadratically number 
analysis nd unique deadlock fbl 

recall section state corresponds fork state philosopher state 
know deadlocks alternative philosopher systems contained 
easy calculate sets states example state corresponds fork state philosopher state fact deadlock fbl 
fbl 
respectively deadlocks systems 
want analyse dining philosopher system arbitrary 
software tools tool currently speci ed prototyped authors reasonably straightforward construct automaton pair simulations 


compositionality simulations allows deduce simulation fn 
de ne inductively fn 





rst simulation 

fn second simulation words point view observational equivalence checking deadlocks replace composed sequence philosophers forks length simple system case checking dining philosopher system deadlocks rst form simulation fbl fbl 
fbl note automaton fbl unique deadlock easy check vertex fbl 
property corresponding philosopher state fork state allowing conclude deadlock fbl 

examples section shall examples systems composed automata boundary 
model scheduler responsible ensuring certain execution order properties collection concurrent systems 
model processes communicating channel indicate communication protocols may modelled systems automata boundary 
goal section deep insights systems model demonstrate expressive power methodology process design methodology 
scheduling mind system controls execution number processes order meet certain speci cations 
process certain part execution called controlled section interest scheduler 
system example calculus described :10.1.1.6.4560
processes pn boundary communicate scheduler 
shall write action set boundaries process synchronizes indicate entering controlled section synchronizes indicate leaving controlled section 
behaviour process alternate actions boundary 
shall model processes automaton shown gure 
light proposition constructions section analysis perform systems involving deadlock lift corresponding systems complex processes provided processes simulated fact argue property simulated taken de nition kind process interested existence process controlled section simulation says precisely process states kinds mapping mapping transits states actions observable boundary 
design scheduler scheduler processes kind boundaries type scheduler connected processes boundaries boundary reserved control scheduler allowing external agent start scheduler 
shall construct scheduler forces processes controlled sections xed cyclic order 
say wish control processes global behaviour system rst nontrivial local motion process components nontrivial local motion process component 
design shall construct scheduler number smaller automata :10.1.1.6.4560
shall copies automaton called noti er 
noti er starts single process records completion controlled section 
single master automaton responds outside control 
noti ers pass token circle 
receiving token noti er ensures process begins controlled section passes token 
master automaton hands token begins holds token point pass action occurs 
noti er copy automaton boundary type boundaries type gog synchronize 
noti er shown gure edge labelled indicates action left boundary action lower boundary action right boundary state noti er waits go left hand side 
begins process passes go right side 
point waits synchronize go left process allowing process start 
master likewise boundary type boundaries type shown gure labelling convention noti er 
master receives control boundary sends go right waits go left 
receiving go noti er passes ends point passing go right 
scheduler proper constructed composing noti ers master cycle 
resultant automaton boundaries type boundaries arising noti ers connected processes wish control 
remaining boundary arising master connected external control mechanism 
shows design nal composite case 
order analyse system shall close nal boundary binding controlling process automaton form remaining boundary design 
analysis scheduler shall brie indicate analyze scheduler system methodology described 
consider design system shown gure additional controlling process bound remaining boundary 
evaluating binding 
shall draw binding full note simulated automaton shown gure 
binding 
simulated system performs go action boundaries alternately 
image initial state simulation state automaton consider master system 
bound controlling process form resultant system simulated time initial state having image evaluation system gure simulated ring copies initial state having precisely copy local state 
master easy see evaluation system isomorphic automaton states length cyclic strings motions replace substring substring 
consider subautomaton reachable initial state cyclic string containing precisely local state clearly graph theoretic cycle states 
system deadlock free 
keeping track simulations indicated preceding discussion deduce constructed simulation including desired behaviour terms order entering controlled section controlled process 
communication protocols notation section shall introduce abbreviated notation drawing automata allows easier depiction automata states similar 
described notation merely gives compact representation certain automata interest 
authors intend fully explore notation view allowing speci cation automata data types interpretations 
consider automaton pictures graphs additional data 
associated vertex set typically abuse notation denoting referring vertex provided confusion arises 

associated edge subset shall denote subset label jv jy ranges typically implicit indexing set 
design process scheduler automaton simulating 
automaton associated graph follows vertex denoted indicates set states indexed edge labelled jv jy indicates family motions labelled boundary boundary example set messages write boundary obtained adjoining trivial action shows automaton boundaries automaton states nontrivial motions kinds 
lone state state motion labelled target state left boundary right boundary 
state lone state motion labelled left boundary source state right boundary 
automaton simplistic delayed message passer synchronizes left boundary obtain storing internally moving appropriate state synchronizes right boundary pass forgetting process 
considering de nition binding automata note automaton incapable losing messages bound systems synchronize boundary actions represent passing receiving message automaton 
mj mj jm jm message passer automaton channels channel type set messages mean automaton mind action performed left boundary sending message channel time right boundary perform action message emerges 
require properties channel wish model channels may lose modify reorder messages 
discussion message passer note synchronization channel considered tightly coupled interaction channel accepts message boundary 
synchronization occurs message transferred boundary 
fundamentally blocking non blocking modelled having automaton receive messages state 
note accurate model non blocking distinguished synchronize synchronizes locally lower layer processes local communication library distant system 
reconcile tightly coupled nature synchronization binding operation desire model channels lose messages construct channels literally lose messages property channel message enters may emerge 
explicitly modelling part system loses messages provide precise analyses certain protocols lose messages 
channel shown gure 
channel type shall refer capacity channel 
channel empty state input transition results message stored states 
read output transition channel returns empty state 
input messages supplied channel full simply lost 
precisely speaking may consider sequence actions left boundary automaton 
behaviour automaton reduced appearance left boundary sequence reduced mj mj jm jm jm mj channel capacity appearance right boundary subsequence 
exists behaviour reduced appearance right boundary precisely sequence 
protocols protocol type implemented channel type mean pair automata called sender receiver channel type construct channel 

channel usually termed virtual channel provided protocol 
de nitions fact channel real fact built simpler automata 
authors suggest term designed channel distinguish channel 
composite kind shown gure term virtual channel arises thinking dotted line upper diagram direct connection author point view dotted box lower diagram shows designed channel constructed protocol underlying channel 
goal protocol design construct automata way virtual channel better properties underlying channel typically wish show certain properties channel virtual channel 

certain properties 
generally may state problem protocols follows family channels desired channel type requirements behaviours desired virtual channel need construct automata channel 

desired properties selected family note family models sorts channels available level abstraction typically described closure certain operations certain basic channels example channel product capacity channels type 
message capacity channel lose messages ask establish virtual channel solving problem 
solution acknowledge sent messages 
shall channel receiver sender type carry 
shall build virtual channel virtual vs designed channel type channel type note type channel thought product types sense sender receiver automata shown gures respectively 
mj mj jm jm ack sender message protocol easily evaluate binding 
determine behaviour message protocol perfect channel 
wish analyze protocol pair capacity channels running opposite directions channel type channel type design system wish analyze shown gure 
automaton automaton op constructed interchanging boundaries may call op opposite channel interest context product cm op pair mj jm jm www ww ww ggg receiver message protocol cm ca design message protocol capacity channels type respectively running opposite directions 
note design diagram gure need mention opposite explicitly required connections expressed appropriate wires 
goal explain channel constructed meets design goals behaviours identical reduced appearances boundary 
evaluating design gure reachable part shown gure 
clear channel simulated message passer gure map states top row unique state gure map states bottom row corresponding states gure 
proposition section provides desired result 
happens channel type capacity may fact lose messages arbitrarily 
channel modelled automaton similar gure additional transition labelled mj state 
readily evaluate design gure channel place cm correspondingly mj mj jack jm mj jm mj jm jm message protocol capacity channels modi ed channel place ca result automaton gure 
case system deadlocks message lost 
mj mj jack jm mj jm jm mj jm jm message protocol lossy channels repair defect typically uses timeouts retransmission analysis protocols direct interest authors goals current 
observed timeouts modelled theory automata boundary timeout motions sender receiver automata 
directions basic theory automata boundary examples designed elucidate presentation show scope theory described 
important reiterate theory provides algebra constructing systems primitive elements 
crucial aspects theory attempt capture design system precise theoretical element distinct system implementation 
underlying mathematical formalism approach explored interested reader referred :10.1.1.6.4560
done clarifying details mathematics appropriate model example papers preparation authors 
note precise description application bicategory span graph domain asynchronous circuit design :10.1.1.6.4560
proposed algorithm model checking systems deadlock ts comfortably theory illustrates principle incorporation designs element theory bene ts areas 
noted section algorithm simplistic perform understanding applications limitations possible evolution algorithms ideas clearly warranted 
theory supports abstraction automata notions comparison simulation 
algebra construct systems extends algebra including abstraction mechanisms facilitating construction abstractions larger systems 
authors investigating technique indication bene ts approach yields seen section abstractions may conjunction model checking check larger systems compositionality abstractions allows theoretical checking families systems 
addition authors note combinatorial nature theory ideal machine manipulation 
mentioned section authors presently prototyping tools designed facilitate calculation algebra 
hoped tools allow calculation larger models layers multilayer network protocol demonstrate applicability theory re ne ideas current 
abramsky :10.1.1.6.4560
interaction categories 
theory formal methods workshop 
springer verlag 
arnold 
finite transition systems 
prentice hall 
carboni walters 
cartesian bicategories journal pure applied algebra 
cockett 
categories synchrony asynchrony 
electronic notes theoretical computer science electronic 
gates 
extensive distributive categories 
phd thesis university sydney 
gates 
designs free traced symmetric monoidal categories 
preparation 
hoare 
communicating sequential processes 
prentice hall englewood cli nj 
joyal nielsen winskel 
bisimulation open maps 
eighth annual ieee symposium logic computer science pages 

categories bicategories processes 
phd thesis university sydney 
walters :10.1.1.6.4560
bicategories processes 
journal pure applied algebra 
walters :10.1.1.6.4560
representing nets span graph 
proceedings algebraic methodology software technology volume lecture notes computer science pages 
springer verlag 
walters :10.1.1.6.4560
span graph categorical algebra transition systems 
proceedings algebraic methodology software technology volume lecture notes computer science pages 
springer verlag 
walters :10.1.1.6.4560
algebra feedback systems boundary 
del di palermo 

appear 
walters weld :10.1.1.6.4560
categories circuits 
preparation 
lawvere :10.1.1.6.4560
conceptual mathematics 
rst categories 
cambridge university press 
milner :10.1.1.6.4560
calculus communicating systems volume lecture notes computer science 
springer verlag 
milner :10.1.1.6.4560
communication concurrency 
prentice hall new york 
thiagarajan :10.1.1.6.4560
elementary net systems pages 
lecture notes computer science 
springer verlag 
valmari :10.1.1.6.4560
error detection reduced reachability graph generation 
preprint 
valmari 
state art report stubborn sets 
petri net newsletter april 
walters 
data types distributive categories 
bulletin australian mathematical society august 
walters 
categories computer science volume cambridge computer science texts 
cambridge university press 
weld 
categories asynchronous circuits 
phd thesis university sydney 

