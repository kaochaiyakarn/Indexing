comparative study real workload traces synthetic workload models parallel job scheduling virginia lo jens kurt department computer information science university oregon eugene flo jens cs uoregon edu 
basic approaches taken modeling workloads simulation performance evaluation parallel job scheduling algorithms carefully reconstructed trace real supercomputer provide realistic job stream flexible synthetic model attempts capture behavior observed workloads devised 
approaches require accurate statistical observations researcher aware applicability trace experimental goals 
compare number real workload traces synthetic workload models currently evaluate job scheduling allocation strategies 
results indicate choice workload model real workload trace versus synthetic workload models significantly affect relative performance algorithms study scheduling algorithms static processor allocation algorithms 
traces models gave ranking algorithms best worst 
specific workload characteristics significantly affect algorithm performance proportion job sizes degree correlation job size job runtime 
experimental evaluation resource management algorithms workloads differing characteristics may lead discrepant 
simulation performance evaluation parallel job scheduling strategies traditionally carried synthetic workload model generate stream incoming jobs associated job characteristics 
despite acknowledged rigor simulation testing stochastically generated workloads pressing need realistic performance evaluation validate algorithm performance 
massively parallel machines high performance computing grown rapidly numbers maturity user communities 
systems administrators national labs research sponsored nsf mip 
supercomputing center sites collected large amounts workload trace data released evaluation new resource management algorithms 
researchers performance evaluation disposal valid methods conducting simulations real workload traces gathered scientific production runs real supercomputers carefully reconstructed simulation testing 
synthetic workload models probability distributions generate workload data 
refer earliest synthetic workload models naive little knowledge real trace characteristics due fact real traces didn exist 
realistic synthetic models developed model parameters abstracted careful analysis real workload data production machines 
approaches require assumptions accurate statistical observations modeler understands profile targeted real workload 
inaccurate assumptions minor perturbations proposed model may yield workload provides poor evaluation scheduling strategies targeted system 
exists little published literature offers guidance researchers concerning real workload traces synthetic workload models experimentation scheduling algorithms 
aims fill void 
goals determine degree influence workload choice workload characteristics performance possible isolate causes observed differences performance results 
address issues listed propose rules thumb help guide workload traces models simulation testing scheduling algorithms 
real workload traces versus synthetic workload models real traces synthetic workloads 
results simulation types workloads reinforce 
due biases workload traces inadequacies synthetic model 
universality workload traces choice real workload traces different sites know trace 
performance evaluation results discrepant know results valid 
sensitivity scheduling algorithm performance workload characteristics specific workload characteristics bias performance results 
experiments reported compare real workload traces synthetic workload models analytically simulation observing effects performance evaluation classes scheduling allocation strategies 
included scheduling algorithms come served scanup multi level queuing algorithm static allocation strategies fit frame sliding paging 
real traces captured production machines scientific computing research labs supercomputer sites world ibm sp intel paragon cray 
synthetic models include naive models developed downey feitelson careful analyses traces production machines 
conducted distinct experiments real workload traces versus synthetic workload models realistic synthetic workload models versus naive synthetic models comparison real workload traces disjoint time periods site comparison real workload traces sites effects specific workload characteristics power correlation jobsize runtime 
experiments led general observations details discussed section 
choice workload significantly affect relative performance resource management algorithms 
workloads real synthetic sites different time periods site ranked scheduling allocation algorithms order best worst respect response time system utilization 
choice workload yield differences subtle aspects algorithm performance 
critical workload characteristics significantly affect algorithm performance proportion power job sizes degree correlation job size job run time 
experimental evaluation resource management algorithms workloads differing characteristics may lead discrepant 
shall see real traces synthetic models critical aware specific trace characteristics applicability trace researcher experimental goals 
remainder organized follows section gives background study surveys related section discusses real workload traces synthetic workload models describes specific traces models study 
section describe experiments including resource management strategies performance metrics 
section discusses experimental results section gives 
background related project motivated desire improve quality performance evaluation scheduling algorithms help facilitate comparability contradictory results obtained scheduling community 
help develop benchmark suite real workload traces synthetic models resource management community 
focus job oriented resource management distributed memory parallel machines job oriented workloads job consists collection computational tasks run parallel 
job scheduling strategy involves decision queued jobs allocated resources 
job scheduling policies range classic come served algorithm complex multi level queue models implemented scheduling systems load pbs easy 
job allocation strategy selects set processors allocated job jobsize request 
restrict attention static allocation strategies adaptive strategies simply allocate requested number processors 
static allocation strategies fall classes contiguous non contiguous set allocated processors directly connected links interconnection network 
research job scheduling processor allocation thoroughly surveyed area includes reported 
project distinguished previous evaluate experimental method scheduling techniques 
researchers real traces production machines drive simulations include 
time analysis emerging body trace data conducted feitelson downey development realistic synthetic workload models 
feitelson model combines observations different parallel supercomputers evaluation gang scheduling strategies downey model detailed analysis sdsc paragon utilized experiments evaluating adaptive job scheduling algorithms 
synthetic workload models developed downey feitelson experiments discussed detail section 
studies statistically analyzed workload traces production real parallel supercomputers 
feitelson nitzberg analyzed workload intel ipsc located nasa ames providing widely available workload measurements real system 
continued effort analyzing traces intel paragon san diego supercomputer center sdsc comparing workload nasa ipsc 
workload characteristics analyzed studies included general job mix resource usage system utilization multiprogramming level runtime distribution job submission statistics interarrival time distributions 
profiles workloads surprisingly similar 
analyzed evolution workload ibm sp cornell theory center ctc concluding workloads change significant ways time requiring adaptations scheduling mechanisms efficient operation 
studies job scheduling processor allocation algorithms offered insights effects workload characteristics adaptive allocation strategies jobs allocate number processors function number free processors system characteristics job 
algorithms 
special interest study krueger scheduling allocation performance workloads exhibiting negative correlations jobsize runtimes 
shall see explains phenomena observed 
study know focused experimental methodology effect choice workload scheduling performance results chiang 
compare performance scheduling strategies wide range workload parameters conclude discrepancies various studies due differences synthetic workloads performance evaluation 
krueger chiang studied effect real workload traces performance 
workloads workload trace record resource usage data stream parallel sequential jobs submitted run message passing parallel machine 
job arrives executes nodes period time departs system 
resources requested jobs typically include jobsize number requested processors runtime memory requirements devices disks network interfaces software resources 
furthermore job workload associated arrival time indicating submitted scheduler consideration 
real workload traces captured production machines potentially provide high level realism directly performance evaluation experiments 
usage comes number caveats interpretation performance results 
trace product existing scheduling policy biased affected policy 
human factors considered analyzing utilizing workload data human users adapt resource demands system scheduling policies ways reflect actual needs job 
workload traces may discriminate job direct resource needs resources utilized operating system behalf job furthermore traces may distinguish inherent versus contention related resource usage 
synthetic workload models offer convenience manageable experimental medium free idiosyncratic site specific behavior production traces 
advantage potential point criticism tractable synthetic model provides neutral universal experimental environment yield realism pragmatic testing desired researchers 
mathematical modeling smoothes perturbations desirable investigate 
researchers cognizant details surrounding trace consider applicable trace model target system 
need mindful specific experimental goals performance evaluation site administrator supercomputing centers focused pragmatic goal performed academic researcher developing new algorithms machines environments 
real workload traces traces described collected variety machines national labs supercomputing sites united states europe 
type workload sites consisted scientific applications ranging numerical aerodynamic simulations elementary particle physics 
trace data collected batch scheduling agent network queuing system load pbs easy 
traces simulation sanitized remove user specific information preprocessed correct system sporadic missing data reformatted simulator 
cases trace data may manipulated order study specific phenomena selective filtering remove interactive jobs 
briefly summarize machine architecture user environment scheduling policies force site 
experiments traces machines list 
sdsc intel paragon san diego supercomputer center houses node paragon machine 
scheduling policies implemented network queuing system queues jobs power oftwo maximum runtime memory requirements mb vs mb nodes 
static allocation algorithm block non contiguous strategy 
sdsc traces taken month groups 
ctc ibm sp cornell theory center ibm sp machine nodes connected high performance switch 
traces come periods july march scheduling managed ibm july feb easy 
nasa ames ibm sp nasa ames ibm sp machine nodes connected high performance switch 
traces cover years august august 
scheduling policies implemented portable batch system pbs 
cray forschungszentrum node cray 
jobs submitted 
job queues differ maximum power jobsize maximum runtime 
static allocation algorithm contiguous 
traces taken march september 
traces include ipsc nasa ames nas node hypercube eth paragon node mesh cray pittsburgh supercomputing center node torus machine argonne national laboratory node ibm sp node cm node shared butterfly lawrence livermore national laboratory bbn butterfly 
synthetic workload models workload modeling nature required resource management distributed memory parallel machines infancy due prior lack trace data available analysis 
part performance evaluation studies relied naive synthetic models classic probability distributions exponential uniform 
dror feitelson analyzed trace data machines specifically nasa ipsc anl ibm sp sdsc paragon llnl butterfly eth paragon 
goal derive probabilistic models experiments gang scheduling algorithms 
feitelson proposed harmonic distribution model hand tailored model emphasize small job sizes interesting sizes observed machines 
included powers squares multiples full system size requests 
stage hyperexponential distribution model runtimes enforced linear relationship jobsize probability distribution higher mean 
decision observations strong correlation jobsize job runtime nasa ipsc weak correlation anl sp sdsc paragon 
results relating correlation jobsize runtime discussed section 
feitelson modeled user job submission behavior zipf distribution model repeated submissions job job 
note feitelson chose exponential distribution model interarrival times studies workload data shown assumption strongly justified 
allen downey focused analysis machines sdsc paragon ctc sp 
proposed uniform log distribution modeling job lifetimes approximated product runtime number processors 
analysis sdsc trace data observed distribution accurate small large jobs 
downey curve fitting analysis eliminated smallest largest jobs 
model predict queue waiting times verified accuracy model sdsc workload data comparison sdsc ctc workloads noticed uniform log model accurate machines sites specific parameters differ significantly 
downey warned researchers need careful models recommending workload derived system evaluate 
discuss precaution section 
second study machines downey derived uniform log distribution job cluster size call jobsize smoothing observed step function characterized raw trace data 
argued cluster sizes responsible step function reflected power job queues actual cluster size requirements jobs 
distribution additional parameters involving variance job parallelism develop stochastic model simulation known adaptive downey acknowledges results uses sdsc trace derive prediction model evaluate 
strategies 
downey goal analyze performance strategies terms sensitivity specific workload characteristics 
types naive workload models past decade scheduling research include vast majority researchers exponential distributions model interarrival times 
modeled variety probabilistic models including uniform uniform step functions normal geometric exponential runtimes modeled exponential hyperexponential distributions 
experiments experimental method simulator experiments observed performance various resource management algorithms simulation real workload traces compared results simulations algorithms synthetic models 
real workload traces described section 
cases batch jobs removing interactive jobs trace focus batch scheduling 
interactive jobs tend drastically different workload characteristics 
synthetic models experiments feitelson downey naive models 
specific workload information input scheduling allocation algorithms included job arrival time jobsize job runtime 
simulator modeled stream jobs arrive execute period time depart system 
model message passing behavior study 
conducted distinct experiments real workload traces versus synthetic workload models realistic synthetic workload models versus naive synthetic models comparison real workload traces disjoint time periods site comparison real workload traces sites effects specific workload characteristics power correlation jobsize runtime 
experiments simulated mesh topology 
mesh experiments involving real workload traces trace captured machine different architecture 
studies involving synthetic workloads sdsc workloads simulated theta mesh match size sdsc paragon batch partition 
studies involving ctc workload theta mesh match size type allocation strategies studied downey different studied 
downey focused allocation jobs job cluster size number available processors job characteristics 
focus static allocations jobsize fixed request 
topology ctc sp machine 
experiment investigating power theta mesh 
experiments conducted simulation tool developed evaluating job scheduling processor allocation algorithms distributed memory parallel machines 
models variety network topologies current flow control routing technologies 
supports synthetic job streams trace driven simulation 
simulator years university oregon currently number research sites including ministry international trade industry japan eth zurich academic institutions united states 
resource management strategies evaluated performance scheduling algorithms static allocation strategies varying type workload drive simulations 
job scheduling strategy determines queued jobs admitted system execution 
allocation strategy selects subset physical processors allocation job 
restricted attention static allocation strategies number processors assigned job fixed lifetime job 
job scheduling strategies fcfs classic come served scheduling algorithm 
fcfs simple single queue algorithm commonly standard comparison default algorithm 
scanup multi queue job scheduling strategy jobs queued jobsize 
scheduler services queue time smallest largest serving jobs arrived queue selected queue avoiding starvation 
completes serving largest job queue begins smallest 
scanup shown outperform wide range scheduling algorithms 
allocation strategies static allocation strategies classified contiguous non contiguous set allocated processors directly connected communication links interconnection network 
frame sliding searches rectangular block processors sliding window desired size mesh horizontal vertical strides width height requested rectangle 
frame sliding contiguous strategy marginal performance 
fit searches contiguous block processors starting point lower left hand corner mesh 
fit shown best performance contiguous strategies 
paging allocates processors scanning free list processors fixed order allocating job regard contiguity 
paging shown best performance non contiguous allocation strategies model message passing contention study performance class purely non contiguous algorithms 
performance metrics performance measured metrics average processor utilization percentage processors allocated jobs time averaged entire workload 
average response time elapsed time job arrives scheduling completes execution averaged entire workload 
response time includes time spent waiting queues time spent execution 
slowdown ratio average response time average runtime metric normalizes average response time results easily compared workloads 
metric average slowdown 
differences reason chose slowdown ratio discussed 
system load arrival rate system size total number processors 
metric measures offered load relative size system appears independent variable graphs experimental results 
sustainable load system load value average job response times remain reasonable bounds 
measured average response times experiments graphs slowdown ratio dependent variable axis 
alternative metric average slowdown expected value quotient response time divided runtime 
average slowdown heavy tailed distribution large values outlier data points 
outliers turned jobs short runtimes order seconds response time huge order tens hours blocked waiting queue large long running job 
considered order statistics displaying results quantile slowdown ratio suitable 
important realize sustainable load system load value average response time remains reasonable bounds important focal point performance evaluation 
critical point visible knee graphs slowdown ratio system utilization 
critical point time developed superior algorithm called mc contiguous contiguous block exists non contiguous 
plan look relative merits utility various performance metrics 
system load manageable levels increase job response time gradual utilization continues improve 
knee job response time suddenly begins grow rapidly infinity 
token system utilization levels system saturated 
evaluating relative performance resource management strategies focus analysis phenomena observed near saturation point 
table 
ranking scheduling allocation algorithms strategy synthetic models sdsc traces ctc traces nas traces paging scanup paging fcfs ff scanup fs scanup ff fcfs fs fcfs results real workload traces versus synthetic workload models experiments showed choice workload trace affect relative performance selected resource management algorithms 
workloads real synthetic sites different time periods site ranked algorithms order best worst respect slowdown ratio system utilization 
see table 
addition workloads strongly discriminated allocation algorithms non contiguous paging clearly outperforming fit fit clearly outperforming frame sliding 
distinctions scheduling algorithms consistent workloads pronounced scanup usually outperforming come served 
cases rankings inconsistent conducted experiments identify causes differences 
discussed section 
realistic synthetic models versus naive synthetic models table gives probability model values associated parameters synthetic models tested 
models downey feitelson realistic models derived careful analysis real workload traces naive models widely scheduling literature 
downey model job runtimes directly derived uniform log model job table 
models means parameters stochastic workloads model jobsize runtime inter arrivals naive uniform exponential exponential nodes naive exponential exponential exponential nodes downey uniform log uniform log exponential nodes sec 
observed sec 
varied feitelson harmonic stage hyper exponential exponential hand tailored nodes sec 
varied lifetimes 
determined uniform log model accurate runtimes linear regression job runtimes sdsc paragon trace method squares 
maximum runtime limited hours limit trace downey model derived 
model repeated job submissions feitelson 
shown table synthetic models ranked scheduling allocation algorithms order best worst 
interesting note results realistic synthetic models similar results naive models 
true despite fact modeled jobsize job runtime different probability distributions 
example respect system utilization naive models show noncontiguous allocation strategies clearly outperforming contiguous ones choice scheduling algorithm having lesser effect 
seen algorithms cluster groups allocation strategy 
contrast downey feitelson models show scheduling algorithm having pronounced effect performance 
naive models differed downey feitelson realistic synthetic models respect performance increasing system loads 
naive models performance system degrades gradually system loads approach realistic synthetic models slowdown ratios increase rapidly earlier 
discussed section differences attributed differences specific characteristics workload models 
appears choice synthetic model affect ranking scheduling allocation strategies despite fact may different probability distributions models 
choice synthetic model affect subtle aspects algorithm performance 
system load naive uniform job size distribution paging scanup paging fcfs firstfit scanup framesliding scanup firstfit fcfs framesliding fcfs system load naive exponential job size distribution paging scanup paging fcfs firstfit scanup framesliding scanup firstfit fcfs framesliding fcfs system load downey workload model paging scanup paging fcfs firstfit scanup framesliding scanup firstfit fcfs framesliding fcfs system load feitelson workload model paging scanup paging fcfs firstfit scanup framesliding scanup firstfit fcfs framesliding fcfs system load naive uniform job size distribution paging scanup paging fcfs firstfit scanup framesliding scanup firstfit fcfs framesliding fcfs system load naive exponential job size distribution paging scanup paging fcfs firstfit scanup framesliding scanup firstfit fcfs framesliding fcfs system load downey workload model paging scanup paging fcfs firstfit scanup framesliding scanup firstfit fcfs framesliding fcfs system load feitelson workload model paging scanup paging fcfs firstfit scanup framesliding scanup firstfit fcfs framesliding fcfs fig 

synthetic workload models naive naive downey feitelson real workload traces disjoint time periods single site experiment compared performance results sdsc paragon traces quarters 
observed highly consistent results quarters ranking detailed behavior scheduling strategies 
due space limitations show graphs quarter quarter see 
strong consistency performance results especially notable variation workload characteristics quarterly profiles 
table shows variation means jobsize runtime interarrival times system load quarterly workloads 
comparison ctc sp month periods respectively 
results similar sdsc experiments 
especially interesting scheduler changed easy 
conclude workload traces site different time periods consistent evaluation scheduling algorithms workload profile site tend fairly stable time assuming mature production site 
discuss section workload characteristics critical performance 
table 
sdsc workload characteristics quarter quarter mean mean mean mean jobsize runtime interarrival sys load nodes secs secs system load sdsc st quarter paging scanup paging fcfs firstfit scanup framesliding scanup firstfit fcfs framesliding fcfs system load sdsc th quarter paging scanup paging fcfs firstfit scanup framesliding scanup firstfit fcfs framesliding fcfs system load sdsc st quarter paging scanup paging fcfs firstfit scanup framesliding scanup firstfit fcfs framesliding fcfs system load sdsc th quarter paging scanup paging fcfs firstfit scanup framesliding scanup firstfit fcfs framesliding fcfs fig 

sdsc st quarter th quarter comparison real workload traces sites machines goal set experiments compare performance results real workload traces different machines different sites 
workload traces came machines sdsc paragon nasa ames nas ibm sp cornell theory center ibm sp cray see descriptions machine user environment section 
set experiments showed exception ranking selected scheduling allocation algorithms affected specific workload trace 
see table 
exception occurred sdsc paragon fcfs slightly outperformed scanup top ranking algorithm nas ctc workloads scanup best algorithm true synthetic traces 
workloads showed clear discrimination non contiguous allocation algorithms contiguous algorithms degree discrimination varied different workloads 
interesting look performance fcfs algorithm 
contiguous allocation algorithms fit frame sliding fcfs achieved utilization levels best nas ctc machines reached sdsc 
see 
looking profiles workloads table distinct differences areas motivating set experiments 
effects specific workload characteristics effects proportion power 
obvious differences workloads proportion power 
downey model smoothed power step function feitelson emphasized sizes 
production traces proportion high ranging sdsc ipsc hypercube machine 
looked effect power performance evaluation creating synthetic traces jobsize taken exponential distribution forced minimum power oftwo forced power 
traces sets created step function matched initial exponential distribution smoothed 
seen table power dominance increases utilization levels resource management algorithms 
result sustainable load increases increasing dominance power 
interesting phenomenon fact power job mix scheduling strategy allocation strategy determines running experiments 
system load sdsc paging scanup paging fcfs firstfit scanup framesliding scanup firstfit fcfs framesliding fcfs system load nas paging scanup paging fcfs firstfit scanup framesliding scanup firstfit fcfs framesliding fcfs system load ctc paging scanup paging fcfs firstfit scanup framesliding scanup firstfit fcfs framesliding fcfs system load sdsc paging scanup paging fcfs firstfit scanup framesliding scanup firstfit fcfs framesliding fcfs system load nas paging scanup paging fcfs firstfit scanup framesliding scanup firstfit fcfs framesliding fcfs system load ctc paging scanup paging fcfs firstfit scanup framesliding scanup firstfit fcfs framesliding fcfs fig 

sdsc paragon versus nas sp versus ctc sp performance 
scanup outperforms come serve regardless allocation strategy 
result consistent experiments scheduling allocation algorithms hypercube 
table 
effects power system utilization sustainable load 
minimum maximum utilization levels algorithms 
sustainable loads shown worst performing algorithm fs fcfs best performing algorithm paging scanup 
percent min max load load power util 
util 
fs fcfs paging scanup effects degree correlation jobsize runtime 
degree correlation jobsize runtime interest scheduling community reflects certain assumptions model type scheduling algorithms needed 
fixed model notion adaptive scheduling jobs carry implicit assumption jobsize runtime negatively correlated assume processors job quickly finish execution 
independent model presumes jobsize unrelated job runtime zero correlation 
note common assumption large production workloads jobsize runtime positively correlated 
table shows range correlation coefficients relating jobsize job runtime real workloads synthetic models reported 
pearson presumes linear relationship variables compute correlations 
reality relationship necessarily hold 
feitelson noted strong positive correlation nas ipsc trace weaker relationships traces 
test effect correlation performance evaluation sdsc workload base manipulated data achieve correlations see 
experiments show highly positively correlated workloads krueger scanup algorithm best performing strategy studies performed worse fcfs allocation strategies 
explanation lies correlation 
recall scanup uses multi level queues queue associated specific jobsize small large 
strongly positive correlation large long running jobs arrive large jobs queue small short running jobs arrive small jobs queue 
scanup serving large jobs queue smaller sized jobs arrive queues 
large jobs long running smaller queues fill response time smaller jobs increases system load sdsc th quarter correlation paging scanup paging fcfs firstfit scanup framesliding scanup firstfit fcfs framesliding fcfs system load sdsc th quarter correlation paging scanup paging fcfs firstfit scanup framesliding scanup firstfit fcfs framesliding fcfs system load sdsc th quarter correlation paging scanup paging fcfs firstfit scanup framesliding scanup firstfit fcfs framesliding fcfs system load sdsc th quarter correlation paging scanup paging fcfs firstfit scanup framesliding scanup firstfit fcfs framesliding fcfs system load sdsc th quarter correlation paging scanup paging fcfs firstfit scanup framesliding scanup firstfit fcfs framesliding fcfs system load sdsc th quarter correlation paging scanup paging fcfs firstfit scanup framesliding scanup firstfit fcfs framesliding fcfs fig 

effects correlation jobsize runtime table 
trace characteristics runtime jobsize percent trace correlation power coefficient jobs nas ipsc strongly pos 
sdsc paragon ctc sp nas sp feitelson downey naive naive rapidly resulting poor performance 
addition scanup serves large jobs row fragmentation processor space high diminishing utilization 
positively correlated workloads scanup suffers 
looking back krueger performance evaluation experiments scanup see simulated scanup non correlated negatively correlated workload models fixed model 
results complementary krueger show performance algorithms critically dependent correlation 
effect correlation jobsize runtime performance results illustrated examining krueger statement scheduling important allocation 
results confirm krueger concluded negatively correlated workloads 
case scanup best allocation strategies 
non negatively correlated workloads scheduling dominate 
key observation correlation jobsize runtime strong effects performance results 
researchers need take factor consideration choosing designing workloads evaluating algorithm performance 
investigated real workload traces synthetic workload models performance evaluation parallel job scheduling algorithms 
long term goal development guidelines effective traces models scheduling research 
experiments showed choice workload real trace versus synthetic model significantly affect relative performance selected resource management algorithms fcfs scanup scheduling fit frame sliding paging allocation 
workloads ranked algorithms order best worst respect response time slowdown system utilization 
appears choice synthetic model affect ranking scheduling allocation strategies despite fact may different probability distributions models 
choice synthetic model affect subtle aspects algorithm performance 
saw workload traces site different time periods consistent evaluation scheduling algorithms workload profile site tends fairly stable time assuming mature production site 
experiments revealed clear differences performance real workload traces different machines different sites 
investigation causes inconsistent behavior led factors significantly affect performance evaluation results proportion power jobs workload increases system utilization 
result sustainable load increases increasing dominance power 
correlation jobsize runtime strong effects performance results 
scheduling algorithms workload strong positive correlation worse negatively correlated workload vice versa 
taken results show great care taken realistic workload traces synthetic workload models 
naive synthetic workload models useful qualitative performance analysis giving high level evaluation algorithm performance 
realistic synthetic workload models provide detailed performance analysis 
provide convenient experimental medium parameters easily controlled 
critical researcher aware profile workload produced manipulation parameters context experimental goals 
real workload traces provide realistic simulation testbed precautions necessary 
idiosyncrasies trace site may unsuitable algorithm testing site 
addition real traces carefully prepared simulation testing algorithms remove biases affect performance results 
experiments reported open questions answer 
specific areas plan investigate include extension experiments broader range scheduling algorithms 
results hold applied adaptive scheduling 
gang scheduling 
extension experiments see hold evaluating algorithms performance similar selected study 
various workloads differ ability discriminate similar algorithms 
investigation workload characteristics affect performance effect including interactive jobs periodic job submissions patterns day night submissions repeated submissions 
development benchmark suite real workload traces synthetic workload models distribution scheduling community 
standardized suites improve ability scheduling researchers compare experimental results reach solid algorithm performance 
acknowledgments people provided workload traces information regarding traces reagan moore san diego supercomputer center steve cornell theory center james jones nasa ames nas bernd mohr 
guzman university oregon help processing traces 
referees careful reading manuscript insightful comments 
arpaci dusseau vahdat liu anderson patterson 
interaction parallel sequential workloads network workstations 
proceedings sigmetrics 
chiang vernon 
application characteristics limited preemption run completion parallel processor scheduling policies 
proceedings sigmetrics 
chuang 
efficient submesh allocation strategy mesh computer systems 
proceedings ieee international conference distributed computer systems 
intel paragon network queuing system manual 
october 
downey 
parallel workload model implications processor allocation 
proceedings hpdc 
downey 
predicting queue times space sharing parallel computers 
proceedings rd workshop job scheduling strategies parallel processing ipps 
feitelson 
packing schemes gang scheduling 
proceedings nd workshop job scheduling strategies parallel processing ipps 
feitelson 
survey scheduling multiprogrammed parallel systems 
technical report rc ibm research division watson research center yorktown heights ny october 
feitelson nitzberg 
job characteristics production parallel scientific workload nasa ames ipsc 
proceedings st 
workshop job scheduling strategies parallel processing ipps april 
feitelson rudolph editors 
job scheduling strategies parallel processing 
springer lecture notes computer science 

workload evolution cornell theory center ibm sp 
proceedings nd workshop job scheduling strategies parallel processing ipps 
science nas nasa gov software pbs html 
pbs portable batch system 
www llnl gov liv comp 
llnl distributed production control system 
www tc cornell edu papers abdullah jul index html 
extensible argonne scheduler system easy 
jones 
nasa ames nas personal communication 
krueger lai 
job scheduling important processor allocation hypercube computers 
ieee transactions parallel distributed systems may 
lo liu nitzberg 
non contiguous processor allocation algorithms mesh connected multicomputers 
ieee transactions parallel distributed systems july 
lo 
minimizing message passing contention processor allocation 
proceedings th international conference parallel distributed computing systems 
gross 
impacts job mix optimizations space sharing schedulers 
proceedings supercomputing 
wan moore 
batch scheduler intel paragon mpp system non contiguous node allocation algorithm 
proceedings nd workshop job scheduling strategies parallel processing ipps 
lo feitelson nitzberg moore 
comparison workload traces production parallel machines 
proceedings sixth symposium frontiers massively parallel computation 
lo bose 
contiguous non contiguous processor allocation algorithms ary cubes 
proceedings international conference parallel processing 
miller lo 
experimental tool processor allocation scheduling highly parallel systems 
proceedings fifth symposium frontiers massively parallel computation february 
zhu 
efficient processor allocation strategies mesh connected parallel computers 
journal parallel distributed computing 
