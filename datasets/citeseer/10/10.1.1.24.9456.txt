region inference von neumann machines region representation inference lars birkedal carnegie mellon university mads tofte university copenhagen magnus region inference technique implementing programming languages typed call value lambda calculus standard ml 
mathematical runtime model region inference uses stack regions contain unbounded number values 
concerned mapping mathematical model real machines 
done composing region inference region representation inference gradually refines region information till directly implementable conventional von neumann machines 
performance new region ml compiler compared performance standard ml new jersey state art ml compiler 
suggested programming languages typed call value lambda calculus implemented regions memory management 
runtime store consists stack regions 
values including function closures put regions 
region inference refinement milner polymorphic type discipline inferring regions allocated deallocated 
expression directly produces value constant tuple expression lambda abstraction region inference infers region value put 
experiments proto type implementation region inference instrumented interpreter suggested possible achieve economical memory resources garbage collection 
potential benefits region inference done university copenhagen 
current address school computer science carnegie mellon university forbes avenue pittsburgh pa usa email birkedal cs cmu edu 
address department computer science diku university copenhagen dk copenhagen denmark email tofte diku dk 
done university copenhagen 
email dk 

region inference reclaims memory eagerly lead desired reduction space requirements 
region information inferred region inference algorithm useful programmers interested obtaining guarantees maximal storage maximal lifetimes data case embedded systems 
region inference garbage collection done far eliminates hidden time costs memory management operations inserted compiler constant time operations 
important real time programming 
purpose report results ongoing efforts study potential realised 
experience developing new standard ml compiler uses regions memory management propose way map conceptual regions region inference real machines 
techniques 
region inference result significant space savings non trivial programs comparison stateof art system uses garbage collection 
region evaluation ml programs compete speed garbage collection execution state art ml system 
practice high percentage memory allocations take place traditional runtime stack downside said region inference occasionally predict lifetimes sufficient accuracy tail recursive calls tend require special programmer attention 
minor changes programs run regions 
currently building ml compiler explore region inference called ml kit regions built top version ml kit 
purpose describe kit describe solutions key problems tried compile regions 
solutions form additional type analyses refine information gained region inference ways brevity shall refer simply kit 
essential target machine conventional linear address space fixed size words number registers 
operational region semantics treats values regions uniformly values put regions regions potentially unbounded size 
key factor achieving results region inference making careful distinctions different kinds regions represented accessed 
kinds regions fit naturally common machine architectures 
regions holding values type fits naturally register machine word regions needed runtime eliminated 
situation arises regions hold integers booleans example 

regions infer finite maximum size compile time regions conveniently placed runtime stack 
situation applies regions hold tuple closure 

regions possible infer size statically 
region represented linked list fixed size pages 
situation typically arises region contains list tree value recursive datatype 
analysis propose multiplicity inference infers region upper bound times value put region 
boxing analysis eliminates regions described 
storage mode analysis infers value allocation value put top region normal case possible store value bottom overwriting value region may contain 
storage mode analysis involves region aliasing analysis 
storage mode analysis essential handling tail recursion 
multiplicity information representation information physical size inference calculates upper bound physical size region 
key difference different kinds regions sizes way allocated accessed 
plays central role analyses 
term region representation inference analyses starting multiplicity inference physical size inference 
kit machine called kam models risc architecture infinitely registers 
region representation inference compilation kam straightforward 
elsman completed backend kam hp pa risc assembly language proven techniques intraprocedural register allocation graph colouring 
backend generating ansi available 
ml kit currently compiles core ml including recursive datatypes exceptions higher order functions implementation modules consideration 
rest describe new program analyses multiplicity inference kam code generation 
sections consist mainly review previous 
start presenting language region annotated terms 
source language var denumerably infinite set program variables ranged language source expressions defined true false letrec source expressions appear untyped region inference possible expressions typed milner type discipline 
shall program running example letrec letrec fst acc snd acc fst taken liberty extend skeletal language pairs projections fst snd integer constants infix binary operations integers 
parentheses grouping 
expression evaluates pair 

region annotated terms tofte talpin describe type translation source expressions region annotated terms called target terms 
region annotated terms contain type information needed evaluation expressions region annotations 
region annotated expressions source expressions type transformations useful explicitly typed version language 
erase function explicitly typed untyped expressions 
convenient shall untyped explicitly typed version intermediate languages untyped version contains information dynamic semantics language explicitly typed expression contains information translation 
untyped region annotated terms regvar denumerably infinite set region variables ranged ae 
syntactic class denote syntactic class defined empty delta delta delta introduce syntactic classes allocation directives region binders expressions ae ae letregion letrec language expressions untyped language shall gradually refine definitions allocation directives region binders provide information 
briefly review evaluation region annotated terms 
details operational semantics 
expression letregion ae evaluated region allocated bound ae evaluated probably region storing retrieving values reached region deallocated 
annotation form ae indicates value expression preceding annotation put region bound ae 
writing value region adds value referred top region increasing number values held region 
function bound letrec region polymorphic empty list formal region parameters may applied different actual regions different call sites 
expression creates function closure region ae formals bound actual regions write letregion ae letregion ae delta delta delta letregion ae delta delta delta ae ae 
ae ae 
ae abbreviates 
expressions form letregion ae ae 
ae ae ae fae 
ae ae occur free common abbreviate just ae 
ae region annotated expression corresponding source expression section shown 
aiken fahndrich levien developed analysis seeks actual region allocation letregion ae late possible seeks region de allocation early possible 
cases achieve asymptotic memory savings plain region inference allocation done letregion de allocation done result worse analysis 
typed region annotated terms type system section essentially 
system roots effect inference connection concurrency 
region type system assume denumerably infinite set tyvar type variables ranged ff denumerably infinite set effect variables ranged ffl 
effect finite set atomic effects 
atomic effect token form get ae put ae effect variable 
types types places simple letregion ae letrec ae ae ae ae ae ae ae ae ae ae ae letrec ae ae ae ae fst acc snd letregion ae letregion ae ae ae ae ae ae letregion ae ae ae acc ae ae ae ae ae ae ae ae ae letregion ae ae ae ae ae ae letregion ae ae ae ae ae letregion ae ae ae ae fst letregion ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae region annotated expression type schemes oe compound type schemes take form bool ff ffl gamma gamma gamma 
ae oe ff oe ffl oe ff ffl ae object form ffl formally pair ffl function arrow ffl gamma gamma gamma 
called arrow effect 
effect evaluating body function 
finite map map finite domain 
domain range finite map denoted dom rng respectively 
finite maps finite map domain dom dom value dom 
means restriction nn means restricted complement type environment te finite map program variables pairs form oe ae ae 
substitution triple finite map region variables region variables finite map type variables types finite map effect variables arrow effects 
effect carry substitutions simultaneously kinds variables 
compound type scheme ae delta delta ff delta delta deltaff ffl delta delta type say instance written exists substitution fae 
ae 
ae 
ae fff 

ff 
ng fffl 
ffl 
ffl 
ffl mg similarly simple type schemes 
instance list written il triple ae 
ae 
ffl 
ffl generally refer triples form instance lists il range 
instance lists decorate applied non binding occurrences program variables 
type system explicitly typed terms 
allows infer sentences form te 
formally explicitly typed region annotated term term exist te 
te derivation proving te 
type system essentially dropped source expressions added type region effect annotations terms 
region annotated terms te te true ae bool ae fput ae te false ae bool ae fput ae te oe ae oe te il ae te fx 
te ffl ae ffl gamma gamma gamma 
ae fput ae te ffl gamma gamma gamma gamma 
ae te ffflg fget ae te te bool ae te te te fget ae te ae oe ff ffl fv ff ffl fv te te fx 
oe ae te oe ae ae ffl ff fv ff ae ffl fv te te ff 
ae ffl ae ae te ff 
ae te letrec ae te ae fget ae put ae te il ae ae te fv fv te te letregion semantic object frv denotes set region variables occur free ftv denotes set type variables occur free fev denotes set effect variables occur free fv denotes union 
erasure explicitly typed region annotated expression written er untyped region annotated expression obtained erasing type effect information 
show couple defining equations er letregion letregion frv er er letrec ae ffl ff ae letrec ae er er er ae ae ae ae 
ae ae multiplicity inference multiplicity inference concerned inferring region times value put region 
introduce syntactic class multiplicities ranged addition multiplicities defined phi ae vice versa maximum written max product written omega defined similarly 
untyped multiplicity annotated terms modify class region binders ae assume region variable ae bound expression 
define multiplicity ae written mul ae multiplicity occurs binder binds ae ae free 
evaluation multiplicity annotated expressions defined operational semantics region stacks stack regions accept write stack regions accept unbounded number writes 
dynamic semantics region annotated terms second kind region stack 
expression form letregion ae multiplicity upper bound number times value put region bound ae runtime 
allocate region stack unbounded regions stack write regions 
expression letrec 
ae 
multiplicity upper bound times evaluation body puts value ae including calls may functions 
consider delta delta delta 
ae 
delta delta delta possible mul ae mul ae signifying contributes finite number allocations unbounded region 
polymorphic multiplicities sense call delta delta delta 
ae 
delta delta delta need mul ae mul ae 
flexibility important practice regions ascribed multiplicity 
means dynamic region environment map region variables pairs form region name identifying region multiplicity region 
runtime multiplicity region determined letregion expression generates changes regarded region name multiplicity attribute storing value letrec bound ae necessary test runtime see kind store operation performed 
allocation kinds regions done differently unbounded regions allocate new space region write regions write directly knowing space write 
typed multiplicity annotated terms multiplicity effect finite map atomic effects multiplicities range multiplicity effects 
extension total map outside domain denoted multiplicity effects 
sum written phi multiplicity effect domain dom dom values phi phi similarly maximum written max defined max max multiplicity effect multiplicity scalar product omega multiplicity effect domain values omega omega 
semantic objects typed multiplicity annotated terms typed region annotated terms effects replaced multiplicity effects 
shall range semantic objects multiplicities vertical bars jsj 
refer semantic objects obtained replacing multiplicity effect domain effect 
write mean dom 
typing rules multiplicity annotated terms multiplicity annotated terms te te true ae bool ae fput ae 
te ae bool ae fput ae 
te oe ae oe te il ae fg te fx 
phi te ffl ae ffl gamma gamma gamma 
ae fput ae 
te ffl gamma gamma gamma gamma 
ae te phi phi phi fffl 
phi fget ae 
te te bool ae te te te fget ae 
phi phi max te ae oe ff ffl fv ff ffl fv te te fx 
oe ae te oe ae phi ae ffl ff fv ff ae ffl fv te te ff 
ae ffl ae ae te ff 
ae te letrec ae phi te ae fget ae 
put ae 
te il ae ae te fv fv te te letregion nn te te note union effects turned sum multiplicity effects conditional maximum 
substantial change definition means apply substitutions rules rely multiplicity substitution triple map type variables types map region variables region variables map effect variables multiplicity arrow effects ffl 
finite maps extend total maps case mapping effect variable ffl outside domain multiplicity arrow effect ffl fg 
define fput ae 
put ae put ae jg phi fget ae 
get ae get ae jg phi nn phi ffl omega fffl 
phi ffl dom ffl ffl define ffl ffl phi ffl ffl 
define arrow effect type type place 
substitutions applied type schemes renaming bound variables avoid capture necessary 
substitution applied type environment te applying pair oe ae ae range te 
say multiplicity annotated expression te exists te 
te exists 
multiplicity inference problem te te rules multiplicity type environment te te find multiplicity annotated term annotated te satisfies je closed trivial solution multiplicity inference problem choose multiplicities 
object course choose multiplicities small possible 
sc 
thesis contains multiplicity inference algorithm proof correct terminates 
algorithm find minimal multiplicities 
problem substitution maximum commute general max max 
particular lambda bound variable occurs different conditionals unification type multiplicity inference second conditional increase effect conditional int ae ffl fput ae gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma int ae ae 
true ae ae true ae ae effect evaluating having put effects ae sound 
judging experience algorithm usually detecting finite regions see section 
erasure typed multiplicity annotated term gives untyped multiplicity annotated term 
show defining equations er letregion letregion delta delta deltab er fae 
ae frv ae put ae 
er letrec ae letrec 
bk er er ae 
ae ff ffl ffl gamma gamma gamma 
ae put ae 
removal get regions consider declaration form letrec write form ae 
ae mk ae fae 
ae put ae type really need ae putting value region requires region information reading value 
region variables called get regions 
eliminated list region formals provided corresponding actual arguments calls removed 
letregion ae letrec ae ae ae ae ae ae ae ae ae ae letrec ae ae ae ae fst acc snd letregion ae letregion ae ae ae ae ae ae letregion ae ae ae acc ae ae ae ae ae ae ae ae ae letregion ae ae ae ae ae ae letregion ae ae ae ae ae letregion ae ae ae ae fst letregion ae ae ae ae ae ae ae ae ae ae ae ae ae ae multiplicity inference elimination get regions follows aggressive erase operations removes type information get regions 
erasure typed multiplicity annotated ex pression corresponds region annotated example shown 
notice region binders finite multiplicity get region ae removed 
line put write region ae eventually stack allocated closure escapes 
unboxed values plain region inference scheme value represented boxed pointer actual value resides region 
necessary box values natural size bigger register hold 
refer values word sized 
ml kit word sized values conservatively defined precisely integers booleans 
storing value allocates space memory just stores value register 
region runtime 
put operations putting word sized values values put eliminated altogether 
holds multiple put operations region 
storage operation vat ae program type known statically decide appropriate representation boxed unboxed 
relies fact syntactic value 
detecting storage operations ae store word sized values requires simple region flow analysis describe section 
ae formal parameter letrec bound function stores ae stores word sized values ae removed list formal parameters corresponding actuals applications removed 
true multiplicity binder ae finite 
removes region parameters practice 
ml functions take argument multiple arguments represented tuple kit boxed tuple 
simple inefficient 
doubt careful data representation analysis useful regions :10.1.1.47.8461
explored 
modified syntax extend allocation directives ae ignore examples abbreviate ignore dynamic semantics evaluating ignore just results performing allocation region 
constraints denumerably infinite set region type variables ranged introduce region types rt rt 
word ground region types ordered word 
intuitively region type word values stored word sized 
region need finite multiplicity 
top 
stands types word size record types function types 
bottom 
type region variables ae occurs letregion ae letrec ae ae ae ae ae ae letrec ae ae fst acc snd ae acc ae ae ae ae ae ae letregion ae ae ae letregion ae ae fst ae ae ae ae ae ae elimination word typed regions program 
get regions region polymorphic functions region type removed 
type system region types monomorphic region variable assigned ground region type 
analysis assigns region types region binders simple constraint analysis 
constraint takes forms delta wrt delta wr finite set constraints minimal solution respect 
shown solution time linear number constraints set 
constraints generated follows binder ae associated fresh region type variable written ae 
subexpression true ae false ae generate constraint ae delta 
ae generate ae delta 
constraint 
furthermore declared letrec ae 
ae mk ae ae 
ae ae generate constraints ae delta wr ae minimal solution region binder ae assigned region type word removed program reducing number number parameters functions 
furthermore allocation directives ae ae question changed ignore 
formal region parameter removed corresponding actuals course removed 
result removing word regions shown 
notice letregion bound region variables infinite multiplicity ae ae eliminated 
runtime just infinite regions 
storage mode analysis purpose storage mode analysis explained 
operates allocation di binders ae ae ae sat ae ae input expression allocation directives take form output turned sat 
idea transform ae ae program point reached evaluation rest evaluation value stored region ae bound 
storage mode certain region contain live values sat decision storage mode delayed till runtime typically ae letrec bound 
storage mode analysis statically inferred liveness properties 
liveness analysis take temporary values account 
inspired normal form flanagan shall assume input expression storage mode analysis conforms grammar region annotated normal form expressions il il il il il il oe ae letrec ae letregion true false key idea intermediate result computation bound variable 
type information oe normal forms provided region inference 
transformation normal form done linear time affect runtime behaviour expression 
flanagan bindings affect region inference negative way 
enable region polymorphic functions applied contexts allow different degrees region overwriting pass storage mode region runtime 
multiplicity polymorphism section storage mode polymorphism having regions big 
runtime region may accessible region variable passed actual argument region polymorphic function 
called region aliasing 
storage mode analysis take region aliasing account 
propose global higher order region flow analysis 
directed graph built 
node region variable effect variable occurs normalised program 
identify variables nodes 
program letrec bound program variable type scheme delta delta delta delta delta ff delta delta delta delta delta applied occurrence delta delta delta delta delta delta delta delta delta delta edge ae ae ffl ffl similarly bound variables 
effect ffl occurring program edge ffl region effect variable occurs free 
graph arises letregion bound variables leaf nodes region variables lead region variables 
node hni denote set variables reachable starting including 
ae region variable region annotated expression binds ae refers ae 
storage mode analysis depends distinction binder ae ae 
able distinction precise introduce kinds contexts 
local meaning allow going lambda letrec 
local expression context takes form il il oe ae oe ae letrec ae letregion local allocation contexts il 
gamma 
ak il il il letrec ae kinds context global expression context allows single arbitrary subexpression oe ae letrec ae local context say program variable live hole context member set lv defined lv lv il lv lv il lv lv oe ae lv fv fxg lv oe ae lv lv letrec ae lv lv letregion lv fv means set program variables occur free definition extended local allocation contexts follows lv fv lv lv il 
gamma 
ak il lv lv il il ff xg lv lv letrec ae fv ff xg fv ffg lv intuitively variable live hole local context variable scope hole computation context 
lambda abstraction free variables considered live allocation point put closure memory closure allocated 
set live variables just lv storage mode passed indicates region contains values returns 
considered live allocation point runtime space closure allocated closure created actual regions 
similarly case letrec considered live hole space region closure representing allocated closure created 
expression normal form 
simplicity assume free program variables bound program variables distinct region polymorphic function precisely region parameter 
generalisation region parameters straightforward 
program variable occurs ae type annotation binding occurrence takes forms oe depending bound see definition normal forms 
define live region variables written set ae frv ae regvar ffl fev set variables occurring define xg 
allocation context form 
say region variable ae bound non locally written form letregion ae letrec ae ae 
words ae bound non locally incomplete letrec binder ae hole context 
rules possible change occurring ae ae sat ae 
ae lv letregion ae ae letregion ae ae ae lv letregion ae ae letregion ae ae lv letrec ae ae letrec ae sat ae lv letrec ae ae letrec ae ae letregion ae letrec ae ae ae ae ae ae letrec ae sat ae fst acc snd sat ae acc sat ae ae sat ae sat ae sat ae ae letregion ae ae ae letregion ae ae fst ae ae ae ae ae ae storage mode analysis ae bound non locally ae ae brevity shortened ae 
justified fact value point region de allocated resides ae 
essential local context 
sat justified fact ae region may aliased contains value needed rest body conservatively ae bound outside closest surrounding function 
rules implemented tested kit proved correct 
shows result applying storage mode analysis expression 
line notice get ae 
pairs pile ae evaluation application line 
contrast get sat ae line 
line ae passed region actual corresponding ae happens mode infinite region ae hold pair 
physical size inference value allocation ae size value computed statically 
function represented flat closure contains values free variables function 
multiplicity region known 
case multiplicity finite physical size region maximum size values may stored ae region variable ae aliased 
maximum graph computed section 
kit machine kam runtime stack infinite number registers region heap 
operations kam similar appel extended operations allocating deallocating regions allocating memory regions 
region names section represented bit words low order bits storing region size finite infinite storage mode 
kam operations setting testing bits 
region operations implemented runtime system written region unbounded size represented linked list fixed size blocks contiguous memory region heap 
regions finite size implemented runtime stack 
evaluating letregion ae finite physical size variable ae bound current stack pointer increased words 
evaluated stack pointer decreased words 
experimental results purposes experiments assess feasibility region execution comparing time space requirements object programs produced kit time space requirements object programs produced rate ml compiler standard ml new jersey assess importance multiplicity inference storage mode analysis 
benchmarks fall categories small programs designed exhibit extreme behaviour fib reynolds reynolds non trivial programs standard ml new jersey distribution benchmarks life mandelbrot knuth bendix simple largest benchmark simple approx 
lines sml 
smallest benchmarks shown section 
tables separate small benchmarks benchmarks line 
benchmarks executed stand programs ml kit pa risc code generator standard ml new jersey version hp computer 
running times seconds user time measured unix time program 
space maximum resident memory kilobytes measured unix top program 
comparison standard ml new jersey numbers read caution compilers different 
numbers give rough indication feasibility regionbased execution 
shows comparison space usage 
dramatic differences region inference tracing garbage collector 
differences explained section 
shows running times seconds hp pa risc 
numbers unix user time 
relatively poor performance kit simple probably due fact benchmark inten kit nj life mandelbrot knuth bendix simple fib reynolds reynolds comparison space ml kit sml nj version 
numbers kilobytes indicate maximum resident memory 
kit nj life mandelbrot knuth bendix simple fib reynolds reynolds comparison running times seconds sive floating point numbers implemented inefficiently kit 
considering kit compiles programs naively apart regions appears extra cost associated allocating multiple regions overhead runtime region parameters prohibitive practice 
region representation inference summarises static results region representation inference 
benchmarks region variables belong region heap 
word stack heap life mandelbrot knuth bendix simple fib reynolds reynolds program table shows letregion binders region annotated program contains partitioning allocated runtime 
shows distribution allocations stack heap runtime 
cases allocations stack allocations 
remarkably largest programs simple allocations happen stack 
difference number heap allocations reynolds reynolds shows static frequency infinite necessarily indication dynamic behaviour compare 
notice reynolds space leaks kit space leak heap vast majority allocations stack allocations cause space problems 
fits general experience space leaks region inference tend stem isolated spots program 
experience fact built region profiler trace region sizes 
assess importance multiplicity inference benchmarks compiled run version kit multiplicities set infinity analyses left enabled see 
benchmarks multiplicity inference gives speedups allocation region finite multiplicity cheaper allocation region unbounded multiplicity 
inference yield big space savings depends regions exist time 
assess importance storage mode analysis benchmarks compiled run version kit storage modes selected analyses left enabled see 
storage mode analysis enabled runs constant space storage mode analysis memory overflow occurs 
life storage mode analysis ensures generations game alive time 
storage mode analysis generations pile regions 
cases storage mode analysis bring maximal space usage surprising maximal space usage necessarily reached kind iterative computations storage mode analysis intended 
multiplicity inference appears give significant time savings benchmarks 
storage mode analysis erratic serves important purpose iterative computations necessarily dominate space usage 
judging high proportion allocations happen stack kit optimisations move stackable regions registers important 
stack alloca tions heap alloca tions life mandelbrot knuth bendix simple fib reynolds reynolds program table shows allocations objects done total runtime including objects runtime type word partitioning done stack heap 
space time life mandelbrot knuth bendix simple fib reynolds reynolds space time kit multiplicities set 
numbers compared results figures 
space 
time 
life mandelbrot knuth bendix simple fib reynolds reynolds space time kit storage modes set 
numbers compared results figures 
crashes memory overflow 
obvious candidate allow function argument register function result register 
kit quite unnecessarily represents function closure call sites known 
improved lining help 
kit evaluates comparison building tagged tuple passing equality function prelude takes apart tuple calls polymorphic equality function runtime system eventually returns integer compared integer resulting branch store register 
believe improved 
discussion extreme behaviour section analyse small benchmarks designed exhibit extreme behaviour 
reynolds datatype tree lf br tree tree fun mktree lf mktree val mktree br fun search lf false search br true search fn 
orelse orelse search fn 
orelse val search fn 
false mktree program reynolds obtained replacing search function reynolds fun member false member rest orelse member rest fun search lf false search br member true search orelse search irrespective region inference garbage collection running time exponential argument mktree 
example 
reynolds polymorphic recursion region inference separates lifetimes fn 
orelse 
reynolds put region region inference distinguish list tail 
region inference space consumption linear running time reynolds logarithmic running time reynolds 
garbage collection logarithmic cases 
fun fun cycle cycle val fn 
hd val cycle fn 
region inference ensures list produced discarded immediately closure fn 
hd produced note function access fact closure contain dangling pointer 
garbage collected systems allow dangling pointers space usage theta arguments cycle respectively 
region inference space usage just 
val val maxint val zero fun iszero true iszero false fun sub maxint fun loop iszero loop sub fun loop loop output stdout output stdout loop maxint maxint integers unboxed storage mode analysis integer pairs fill memory 
series region analyses mapping stack regions real machines 
analyses devised solve needs evident practical experiments 
combination analyses works practice shown examples suggest useful provide garbage collection supplement region inference handle cases various static analyses cope 
cases exist reasons 
noteworthy benchmarks tried sml nj test suite run relatively garbage collection optimisations expects find mature compiler 
wish martin elsman niels kit levien finding mistakes earlier versions storage mode analysis greg morrisett advice code generation 
funded danish national research council form ph author dart second author 
alexander aiken manuel fahndrich levien 
better static memory management improving regionbased analysis higher order languages 
proc 
acm sigplan conference programming languages implementation pldi pages la jolla ca june 
acm press 
andrew appel 
compiling continuations 
cambridge university press 
andrew appel david macqueen 
standard ml compiler 
gilles kahn editor functional programming languages computer architecture 
acm springer verlag sept 
lars birkedal nick rothwell mads tofte david turner 
ml kit version 
technical report diku report department computer science university copenhagen dk copenhagen 
damas milner 
principal type schemes functional programs 
proc 
th annual acm symp 
principles programming languages pages jan 
martin elsman niels 
optimizing backend ml kit stack regions 
student project department computer science university copenhagen diku july 
cormac flanagan amr sabry bruce duba matthias felleisen 
essence compiling continuations 
proc 
acm sigplan conference programming language design implementation pldi june 
fritz henglein jesper jrgensen 
formally optimal boxing 
conference record popl st acm sigplan sigact symposium principles programming languages pages 
acm press january 
jouvelot gifford 
algebraic reconstruction types effects 
proceedings th acm symposium principles programming languages popl 
xavier leroy 
unboxed objects polymorphic typing 
conference record nineteenth annual acm sigplan sigact symposium principles programming languages popl pages 
acm press january 
lucassen 
types effects integration functional imperative programming 
phd thesis mit laboratory computer science 
mit lcs tr 
lucassen gifford 
polymorphic effect systems 
proceedings acm conference principles programming languages 
milner 
theory type polymorphism programming 
computer system sciences 
hanne riis nielson flemming nielson 
higherorder concurrent programs finite communication topology 
conference record popl st acm sigplan sigact symposium principles programming languages pages 
acm press january 
zhong shao 
compiling standard ml efficient execution modern machines 
phd thesis princeton university 
available research report cs tr 
jean pierre talpin pierre jouvelot 
polymorphic type region effect inference 
journal functional programming 
mads tofte jean pierre talpin 
implementing call value lambda calculus stack regions 
proceedings st acm sigplan sigact symposium principles programming languages pages 
acm press january 
magnus 
multiplicity inference 
master thesis dept computer science univ copenhagen september 
