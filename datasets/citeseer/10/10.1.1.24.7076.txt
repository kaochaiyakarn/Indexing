universal algebra type theory computer science institute university nijmegen cs kun nl 
development universal algebra inside type theory formalized proof assistant coq 
de ne notion signature algebra signature 
setoids types endowed arbitrary equivalence relation carriers algebras 
way possible de ne quotient algebra congruence 
standard constructions algebras de ned basic properties proved formally 
overcome problem de ning term algebras uniform way types trees generalize 
implementation gives tools de ne new algebraic structures manipulate prove properties 
development mathematical theories inside type theory presents technical problems dicult translate informal mathematical proof formalized 
trying carry translation soon realizes notions considered non problematic obvious informal level need delicate formal analysis 
additional needed just de ne mathematical structures study basic tools manipulate 
diculty rendering exactly expressed intuitive terms non trivial task translating type theory originally intended expressed inside form set theory example zf 
presents development tools generic algebraic reasoning completely formalized coq proof development system see 
want enable users tools easily de ne algebraic structures manipulate objects reason way far ordinary mathematical practice 
stemmed original project formal veri cation computer algebra algorithms type theory 
realized de nition common mathematical structures ring eld tools manipulate essential success enterprise 
decided develop universal algebra general tool de ne algebraic structures 
previous algebra type theory done paul jackson proof system nuprl see peter aczel galois theory see huet sa bi category theory see 
large class algebraic structures developed coq lo pottier 
aim level approach derivation propositions algebraic objects see 
approach statements objects lifted syntactic level manipulated operators 
example simpli cation expressions automatic equational reasoning 
method douglas howe construct partial syntactic model type theory nuprl inside nuprl program tactics inside system see 
application re ection mechanism algebra developed samuel coq simpli cation ring expressions see 
need parameterize construction syntactic level type signatures posed additional problem 
general type construction similar martin employed purpose 
study computational content algebras particularly interesting 
investigate extent algebraic objects automatically manipulated inside proof checker 
done certi ed versions algorithms borrowed computer algebra done th ery coquand persson buchberger algorithm 
les implementation available internet site www cs kun nl universal algebra html 
type theory coq 
completely formalized inside coq equally easily formalized proof systems type theory lego alf 
coq extended calculus constructions see formalized weaker system 
pure type system expressive 
see endowed inductive types see martin type theory universes see 
assume universes types sets propositions set prop syntax coq belong higher universe type coq 
product type written coq notation write coq possible de ne record types eld depend values preceding elds 
notation records 
record name type constructor field 
field element record type form constructor field field field 
projections field name field name field field 
field name field field field field coq record type shorthand notation inductive type constructor 
system facility represented nested types 
algebraic structures type theory 
start considering simple algebraic structure implementation type theory 
standard mathematical de nition group 
de nition 
group quadruple hg set binary operation element unary operation immediate translation type theory employ record type 
record group group elements setoid operation elements elements elements unit elements inverse elements elements setoid set endowed equivalence relation see section 
didn specify group axioms satis ed 
usually done enlarging record contain proofs axioms 
record group group elements setoid operation elements elements elements unit elements inverse elements elements associativity elements operation operation operation operation elements operation unit elements operation inverse unit declare speci group example group integers sum operation specify elds integer group group plus proofs axioms 
useful develop universal algebra 
algebraic structure speci ed way proceed give standard de nitions subgroup product groups quotient group congruence relation homomorphism groups prove standard results 
way algebraic structures speci ed theorems proved see lo pottier 
de nitions basic properties algebraic structure having general formulation save duplicating times 
main reason interesting develop universal algebra 
aim internalize generalization previous construction general notion algebraic structure inside type theory 
setoids need setoids informal de nition setoid 
rst step implementation universal algebra type theory exible translation intuitive notion set 
interpreting sets types rise problems structure types rigid allow formation subtypes quotient types 
need de ne subalgebras quotient algebras led consider suitable solution 
version extensional type theory notions subtype quotient type implemented example nuprl system see version intensional type theory implemented coq 
model extensional type theory inside intensional type theory constructed martin hofmann see 
variant model implemented huet sa bi pottier 
elements type build constructors elements type said equal convertible 
type de ned predicate type subtyping rede ning equality quotienting 
allow liberal equality de ning setoid pair formed set equivalence relation 
quotient setoid just changing equivalence relation 
obtained quotienting types ha setoid predicate closed de ne determined ha ha explicitly equivalence relations de nitions setoids predicates setoids relations setoids setoids functions required invariant equality 
formal de nition setoid 
de nition 
record setoid setoid el eq el el proof equiv eq equiv eq proposition stating eq equivalence relation set el 
identify setoid carrier set el 
coq identi cation realized implicit coercions see 
similar implicit coercions identify algebraic structure carrier 
said el simple notation place eq coq operator de ned write general methodology op set operator notation op corresponding setoid operator 
want stress setoid equality holds setoids may elements di erent equalities write properties constructions setoids 
mentioned careful dealing constructions setoids 
example predicates relations functions invariant equality 
de nition 
predicate carrier setoid el said de ned respect 

type setoid predicates record type record setoid predicate setoid predicate sp pred sp proof defined sp pred defined sp pred property 
de nition 
relation carrier setoid el 
el said de ned respect 

type setoid relations record type record setoid relation setoid relation sr rel sr proof relation defined sr rel declaring implicit coercions setoid predicates relations regular predicates relations setoid predicate shorthand notation sp pred setoid relation shorthand notation sr rel mentioned informal discussion de ned setoid predicate giving suitable equivalence relation type 
de nition 
setoid setoid predicate 
separated setoid carrier equality relation ha ha easier de nition quotient setoid equivalence setoid relation 
substitute relation place original equality 
de nition 
setoid eq setoid relation sr rel eq equivalence relation el 
quotient setoid eq setoid carrier set el equality relation eq 
notice notion quotient setoid di erent notion quotient set set theory elements eq equivalence classes set theory exactly elements de nition 
setoids 
product setoid carrier set el el equality relation hx hy de nition 
setoids 
setoid functions setoid carrier set type functions carriers de ned respect setoid equalities record setoid function function fun proof fun defined function fun defined function proposition 
function extensional equality relation 
similar way de ne constructions setoids de ne operators see source les complete list 
signatures algebras development setoids previous section notion sets translate universal algebra type theory 
guide chapter universal algebra meinke tucker handbook logic computer science 
di er consider just nite signatures implemented lists require carrier sets non empty 
second divergence justi ed di erence rst order predicate logic logic usually employed reason algebraic structures assumes universe discourse non empty type theory assumption reason empty structures see section 
de nition signature 
de ning notion sorted signature 
signature speci cation carrier sets called sorts operations algebra number sorts list operation symbols fm functions speci ed giving type saying arguments function sorts argument belongs sort result application operation belongs 
sort identi ed element nite set coq implementation represented finite elements represented 

example suppose want de ne structure bool true false eqi model natural numbers booleans test function equality boolean values 
want nat bool setoid nat true false bool nat nat eq nat nat bool case index sort nat index sort bool types constants functions arguments result nat argument nat result nat true arguments result bool false arguments result bool eq arguments nat result bool de nition 
xed natural number 
sort function type pair args list elements sort indicating type arguments function res element sort indicating type result 
type theory de ne type function types function type list sort sort de nition 
signature pair hn fsi fs fm list function types 
represent type theory record type record signature signature sorts num function types list function type sorts num signature natural numbers booleans de ned signature 
de nition algebra 
signature want de ne notion algebra 
de ne structure need interpret sorts setoids function types setoid functions 
suppose hn interpretation sorts family setoids sorts interpretation setoid 
assume sorts sorts interpretation de ne interpretation fn ways de ning type function depending arguments 
suppose ri function type 
sorts interpretation kfk applicable directly arguments kfk sorts 
means kfk curried type sorts 
sorts sorts type may de ned general construction de ne types curried functions arity types arguments parameters 
done function curry type setoid nat setoid setoid setoid natural number setoid family setoids de ning type arguments setoid type result curry type setoid 
previous example type kfk may de ned curry type setoid sorts sorts representation dicult reasoning abstractly functions want prove general properties functions depend arity 
situation better see function having just argument containing 
giving arguments tuples functions indexed nite type 
choose second option 
represent arguments object type sorts 
interpretation function type sorts 
sorts completely correct 
sorts setoids interpretation functions preserve setoid equality 
aim formulating condition rst type arguments sorts setoid stating elements args args equal extensionally equal 
de nition 
setoid 
ff setoid setoid carrier equality relation args ff setoid args args args interpret function type list function types 
de nition 
ri function type 
function type interpretation sorts ff setoid sorts sorts list function types interpreted operator function list interpretation sorts list function type setoid carrier function list interpretation sorts type interpretation sorts need take consideration equality relation de ned 
way functions represented algebra 
want curried form apply conversion operator fun arg curry setoid 
curry type setoid inverse conversion performed operator curry fun arg 
eventually type algebras de ned de nition 
type algebras signature record type record algebra algebra sorts sorts interpretation sorts num functions function list interpretation sorts num sorts function types type arguments corresponding th function signature algebra indicated fun arg arguments 
hn fm algebra indicate interpretation ith function symbol functions nm example de ne algebra signature considered interpreting sorts setoids natural numbers booleans cases equivalence relation trivially leibniz equality 
suppose de ned nat bool setoid nat bool nat nat eq nat nat bool give interpretation sorts srt sorts interpretation srt nat srt bool functions fun function list interpretation srt function types sigma fun curry fun arg fun curry fun arg fun curry fun arg fun curry fun arg eq fun curry fun arg de ne algebra nat bool alg algebra srt fun algebra term algebras informal de nition term algebras 
class algebras special interest term algebras 
sorts algebra terms freely generated function symbols signature 
example signature de ned expressions terms rst sort true false eq terms second 
general signature hn fm algebra terms carriers elements form nm type ri belong term sorts ak respectively resulting term sort similarly de ne algebra open terms expressions terms variables appear 
start family sets variables construct terms application function symbols 
problem uniform de nition 
type theory easily modeled inductively de ned types constructors correspond functions signature 
example sorts terms previous signature mutually inductive types nat term symb nat term symb nat term nat term bool term symb bool term symb bool term eq symb nat term nat term bool term signature single sorted simple inductive de nition gives type terms sorted mutually inductive de nitions 
way de ne types sorts speci signature possible de ne parametrically 
de ne term algebras second order function erm algebra signature algebra associates corresponding term algebra signature 
order need mutually inductive de nitions number sorts constructors type constructors parametric 
general form inductive de nition available current implementations type theory coq look di erent solution 
discussion possible solutions 
problem general regards de nition families inductive types element family correct inductive type family de ned 
general case family set operators indexed set 
want de ne family inductive types minimal xed point corresponding operator want family minimal xed point 
type theory possible de ne minimal xed point set operator set operator strictly positive expression occurs right arrows 
may happen concrete element closed term set operator strictly positive reduces strictly positive operator hold open terms variable satisfy strict positivity condition 
possibilities overcome diculty 
thorough analysis subject argument 
adopt solution represents inductive type type trees 
solution 
types type theoretic implementation notion orderings founded trees 
introduced martin see chapter 
suppose want de ne type trees nodes trees labeled elements type node labeled element branches stemming node labeled elements set node branches elements 
type constructor parameters type family types de ne new element type specify label root element branch element corresponding subtree done giving function 

formally de ne calculus inductive constructions see inductive type constructor sup 


inductive de nition automatically get principles recursion induction associated de nition 
nite get trans nite induction 
construction de ne term algebras single sorted signatures representing term syntax tree 
choose set function symbols signature just nm number functions arity number arguments function symbol example take signature describing structure sort constant unary operation binary operation 
indicate functions constant unary operation binary operation 
type terms represented type cases term represented tree formally element sup cases sup cases sup cases sup cases sup cases sup cases sup cases course practical uses de ne syntactic tools spare user pain writing terms 
general tree types 
deal multi sorted signatures need generalize construction 
general trees type constructor similar introduced kent petersson dan see chapter 
multi sorted case de ne just type terms types number sorts 
types mutually inductive 
de ne family general consider case want de ne family tree types indexed type elements indexes sorts 
regards functions arity take account sort argument comes sort result belongs 
type indexes functions 
associate set indexing arguments 
specify type arguments associate sort index sort corresponding argument need function furthermore specify sort result application function belongs need function context de ne inductive family types general tree constructor write gt general tree tree gt 
gt case signature hn fm nm arity nm family types terms erm general tree 
problem 
problem arises general trees constructor de ne term algebras equality 
term tree de ned giving constructor function erm 
possible functions erm extensionally equal 
intensionally equal convertible 
case trees tree tree intensionally distinct 
want terms obtained applying function equal arguments equal 
algebras required setoids just sets solve problem de ning inductive equivalence relation types terms captures extensionality inductive tree eq erm 
erm tree eq intro erm tree eq 
tree eq tree tree prove tree eq equivalence relation ree 
unfortunately proof transitivity 
problem formulated generalized way 
inductive family types generic element types family generally possible prove inversion result stating form element application constructors corresponding type 
proved rst time hofmann streicher case equality types see 
just took transitive closure relation 
functions 
constructed interpretation sorts signature setoids terms syntax trees 
interpret functions 
dicult way de ned function interpretation 
functions associated elements type nm element function tree erm 
erm straightforward prove preserves setoid equality right type interpretation function symbol call functions interpretation family setoid functions 
obtain algebra terms erm algebra signature algebra erm algebra algebra erm functions interpretation expressions algebras 
de ned algebras elements closed terms constructed function symbols signature 
important algebras open terms expressions free variables appear 
modify de nition term algebras allowing set variables alongside functions 
construction syntax trees leaves may consist variable occurrences 
assume sort countably nite number variables set variables ar variable pair hs ni determines sorts belongs says th variable sort 
variables treated constants function symbols zero arity 
de nition term algebra modify set constructors nm ar family giving types subtrees way inr empty set variable inl 
rest de nition remains 
may actual set variables family family sets variables 
closed terms particular case obtained previous case obtained congruences quotients subalgebras homomorphisms congruences quotients 
signature algebra call congruence family equivalence relations sorts consistent operations algebra apply operations arguments relation obtain results relation 
condition rendered type theory de nition 
hn fm signature nm algebra 
family relations sorts sorts setoid relation satis es substitutivity condition substitutivity nm args args fun arg arguments args args 
args args type congruences algebra record type record congruence congruence cong relation setoid relation cong equiv equiv cong relation cong subst substitutivity cong relation congruence form congruence rel eqv sbs rel family setoid relations sorts eqv proof element family equivalence relation sbs proof family satis es substitutivity condition 
congruence algebra construct quotient algebra 
classic universal algebra done sorts sets equivalence classes respect congruence 
type theory said quotients setoids quotient exactly carriers replace equality relation 
substitutivity condition guarantees obtain algebra 
lemma 
signature algebra congruence 
consider family setoids obtained replacing sorts functions de ned 
de ne quotient algebra 
subalgebras 
de nition subalgebra spirit de nition quotient algebras 
de nition 
algebra setoid predicate sorts family predicates sorts say closed functions nm args fun arg arguments args 
args de nition 
subalgebra aj algebra sorts sorts jp functions restrictions functions notice restrictions functions sorts jp de ned closed function application 
proof fact gives proof args allows construction typed element type carrier 
homomorphisms 
signature signature algebras want de ne notion homomorphism informally homomorphism family functions 
families sorts respectively commutes interpretation functions 
means function types elements algebra belonging sorts prescribed types arguments suppressing index indicates curried version interpretation function type algebra formally rst require family setoid functions requirement commute functions signature take account way interpreted function symbols 
nm function index corresponding function type 
assume argument function fun arg arguments 
remember function assign element args sorts 
applying argument obtain argument function args fun arg arguments 
homomorphism require function index equality holds 
call property homomorphism 
de ne type homomorphisms record record homomorphism homomorphism hom function hom proof homomorphism requiring setoid functions injective surjective bijective get respectively notions monomorphism epimorphism isomorphism 
call endomorphisms automorphisms homomorphisms isomorphisms algebra 
term evaluation 
important homomorphism term algebra erm algebra algebra homomorphism unique interpretation terms determined interpretation functions 
term evaluation de ned induction tree structure terms way term evaluation args args args term evaluation args suppressed sort indexes 
proving term evaluation setoid function preserves equality terms commutes operations obtain homomorphism term ev homomorphism 
similarly de ne evaluation expressions containing free variables 
case function expression evaluation takes additional argument ass assignment assigning value right sort variable assignment ar 
extra argument evaluate variables construct homomorphism expression ev homomorphism expressions algebra 
kernel homomorphism 
associated homomorphism algebra homomorphism congruence called kernel 
de nition 
kernel homomorphism family relations ker rel relation ker rel lemma 
ker rel congruence kernel indicated standard notation take quotient consider natural homomorphism classic universal algebra homomorphism associates element equivalence class implementation carriers natural homomorphism just identity 
verify homomorphism preserves setoid equality commutes operation signature 
lemma 
algebra congruence family identity functions sorts homomorphism 
case homomorphism indicated nat homomorphism theorem 
developed fundamental notions universal algebra type theory constructed operators manipulate prove standard basic results 
theorem homomorphism theorem 
algebras epimorphism 
exists isomorphism ker quot iso isomorphism ker quot iso nat equality extensional functional equality 
research implemented type theory proof development system coq formalization fundamental notions results universal algebras 
implementation allows specify rst order algebraic structure operators construct free algebras signature 
de ned constructions subalgebras product algebras quotient algebras proved basic properties 
main points employ special type theoretic constructions setoids carriers algebras order able de ne quotient algebras represent free algebras 
implementation intended serve purposes 
practical point view provides set tools type theory development mathematical structures easier 
theoretical point view investigates type theory foundation mathematics 
important line research intend pursue equational reasoning 
steps direction de nition equational classes algebras equations represented pairs open terms proof birkho soundness theorem 
give tools automatically prove formulas generic algebra lifting syntactic level expressions 

peter aczel 
notes formalisation constructive galois theory 
draft report 

barendregt 
lambda calculi types 
abramsky dov gabbay maibaum editors handbook logic computer science volume 
oxford university press 

bruno barras samuel cristina cornes el courant yann david daniel de jean christophe atre eduardo gim enez hugo herbelin erard huet henri ere mu murthy catherine parent patrick christine paulin mohring sa bi werner 
coq proof assistant manual 
version 
barthe barendregt 
level approach lean proof checking 
berardi coppo editors types proofs programs types volume lncs pages 
springer 

samuel 
re ection build ecient certi ed decision procedures 
mart abadi ito editors theoretical aspects computer software 
third international symposium tacs volume lncs pages 
springer 

constable implementing mathematics nuprl proof development system 
prentice hall 

thierry coquand christine paulin 
inductively de ned types 
editor proceedings volume lecture notes computer science 
springer verlag 

thierry coquand henrik persson 
integrated development algebra type theory 
types workshop 

eduardo gim enez 
tutorial recursive types coq 
technical report unit de recherche inria rocquencourt 

martin hofmann 
elimination extensionality martin type theory 
barendregt nipkow editors types proofs programs 
international workshop types pages 
springer verlag 

martin hofmann thomas streicher 
groupoid model refutes uniqueness identity proofs 
proceedings ninth annual ieee symposium logic computer science pages 
ieee computer society press 

douglas howe 
computational metatheory nuprl 
lusk overbeek editors th international conference automated deduction volume lncs pages 
springer verlag 

erard huet sa bi 
constructive category theory 
honor robin milner 
cambridge university press 

paul jackson 
exploring algebra constructive type theory 
th international conference automated deduction cade volume lecture notes arti cial intelligence pages 
springer verlag 

zhaohui luo 
computation reasoning type theory computer science volume international series monographs computer science 
oxford university press 

martin 
constructive mathematics computer programming 
logic methodology philosophy science vi pages 
north holland 

martin 
intuitionistic type theory 
bibliopolis 
notes giovanni sambin series lectures padua june 

meinke tucker 
universal algebra 
abramsky dov gabbay maibaum editors handbook logic computer science volume 
oxford university press 

bengt nordstr om kent petersson jan smith 
programming type theory 
clarendon press 

kent petersson dan 
set constructor inductive sets type theory 
proceedings conference category theory computer science manchester volume lecture notes computer science 
springer verlag 

sa bi 
typing algorithm type theory inheritance 
popl th acm sigplan sigact symposium principles programming languages pages 
association computing machinery 


properties typing systems 
phd thesis computer science institute university nijmegen 

laurent th ery 
proving computing certi ed version buchberger algorithm 
technical report inria 
