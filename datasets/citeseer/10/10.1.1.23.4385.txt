parameter passing lambda calculus erik crank matthias felleisen department computer science rice university houston tx choice parameter passing technique important decision design high level programming language 
clarify semantic aspects decision develop analyze compare modifications calculus common parameter passing techniques call value call name combined pass worth respectively 
specifically parameter passing technique provide 
program rewriting semantics language side effects class procedures respective parameter passing technique 
equational theory derived rewriting semantics uniform manner 
formal analysis correspondence calculus semantics 
strong normalization theorem imperative fragment theory applicable 
comparison various systems reveals algol call name satisfies known fi rule original calculus cost complicated axioms imperative part theory 
simplest appealing axiom system appears call value pass worth language cells class values 
authors supported part nsf darpa 
instituto de universidad de la oriental del uruguay generously provided facilities preparing final version 
appeared th popl january orlando fl parameter passing lambda calculi choice parameter passing technique important element design high level programming language 
wide variety techniques modern languages call value call name pass suggests lack consensus advantages disadvantages various techniques 
analyze common techniques studying comparing equational theories 
plotkin consider equational theories analysis parameter passing techniques 
starting folklore church calculus captures essence call name functional language developed variant calculus calculus formalize notion call value simple framework comparable calculus 
importantly examples call name call value analyze formal relationship programming languages calculi 
calculus calculus satisfy general correspondence conditions respect appropriate semantics calculi sufficiently strong evaluate program answer sound sense equality terms calculus implies interchangeability program contexts 
felleisen friedman hieb extended plotkin call value programming languages imperative constructs assignments jumps 
result shows functional constructs imperative constructs simple rewriting semantics conservative extensions calculus reasoning fc csg calculi 
extension plotkin imperative languages important enables consider spectrum conventional parameter passing techniques 
specifically addition imperative constructs design options alternative parameter passing techniques interesting 
functional setting observ able differences call value call name versions program termination behavior versions program produce different results imperative languages 
presence assignments possible distinguish parameter passing techniques bind parameters values bind parameters values 
observations classify techniques respective evaluation binding strategies 
evaluation strategy determines evaluate procedure arguments binding strategy determines part argument bind formal parameters 
prevailing evaluation strategies eager evaluation call value evaluates argument procedure call binding parameter delayed evaluation call name evaluate argument value parameter needed 
binding strategies consider pass worth binds parameter value worth argument pass binds parameter variable value 
third strategy pass value result properties pass worth pass 
analyze parameter passing techniques produced various combinations evaluation binding strategies 
included discussion cell language construct provides alternative pass binding technique 
technique develop rewriting semantics calculus higher order programming language uses technique 
calculi satisfy variants plotkin correspondence criteria 
addition imperative fragments satisfy strong normalization theorems decidable 
section describes detail steps analysis definition operational semantics derivation equational calculus formal analysis correspondence semantics calculus 
section examines parameter passing techniques methods outlined section 
discuss related compare different techniques sections 
delayed evaluation strategies consider call text call need 
call text evaluates procedure arguments delaying evaluation forever 
muller analyzed problems deriving equational theories presence call text 
call optimization call name functional language produces different answers call name presence side effects 
extended version contains brief discussion call need :10.1.1.23.4385
operational semantics calculi analysis parameter passing main steps 
define operational semantics language particular parameter passing technique 
derive equational calculus directly semantics analyze correspondence calculus semantics 
section describes steps detail 
definition language operational semantics definition language consists parts specification syntax operational semantics 
provide parameter passing techniques 
core languages consists constants variables abstractions applications calculus ee languages extend constructs side effects describe sections 
barendregt conventions assume definitions theorems bound variables distinct free variables expressions identify expressions differ renaming bound variables :10.1.1.120.7560
expression denotes expression resulting substitution free occurrences variable expression set free variables expression denoted fv 
expression free variables closed 
need notion context definitions 
context term hole place subexpression expression produced replacing hole context expression operational semantics language partial function eval programs answers 
program closed expression answer syntactic class expressions programs 
eval function machine 
state space machine set programs evaluation step machine corresponds rewriting entire program transitive closure transformation function defines semantics eval iff characterization simple 
clarity omit added complications described section 
program answer evaluation step machine begins partitioning program evaluation context redex 
evaluation context special kind context specifies evaluation order subexpressions compound expression 
intuitively hole evaluation context points subexpression evaluated 
redex expression determines transformation function rewrites program 
redex rewriting rule specifies transform program contains redex hole evaluation context new program 
union rewriting rules defines machine transformation function 
vary evaluation binding strategies user defined procedures assume primitives fixed interpretation 
specifically assume primitives strict accept proper values 
set values values consists constants abstractions 
avoid overspecification constants consts require existence partial function ffi functional constants closed values closed values 
restrict ffi functional constants distinguish intensional aspects abstractions 
ffi defined abstraction exists context value abstractions ffi 
restriction functional constants reasonable context programming languages 
essentially prohibits language primitive functions examine text procedure bodies 
restriction permits functions distinguish constants procedures predicates int 
proc 
build larger values composed procedures arrays lists procedures 
observational equality calculi implementation language generally provides programmer evaluation function programmer observe behavior expressions part program 
fact induces natural notion equivalence arbitrary phrases programming language 
intuitively terms observationally equivalent interchangeable programs affecting observable behavior programs 
programs observable behavior diverge converge evaluates basic constant evaluates constant 
definition 
observational equality terms observationally equivalent contexts historical reasons authors call relation operational equivalence 
avoid confusion term observational relation observable characteristics independent operational semantics 
programs 
eval defined iff eval defined 
eval basic constant iff eval constant 
proving observational equivalence terms difficult task 
proof show program contexts terms interchangeable affecting program behavior 
reason programming language research attempts construct theories proving observational equivalences axiomatic fashion 
theories referred calculi analogy calculus 
sections attempt derive equational theory operational semantics parameter passing technique 
straightforward attempt transformation steps programs equational axioms arbitrary terms 
definition 
natural calculus relation congruence relation generated transformation function extended arbitrary expressions axioms compatible reflexive symmetric transitive specific theory th write th axioms rules 
symmetry axiom write gamma 
refer relation reduction 
analysis calculi semantics observational equivalence relation calculus natural ask relates 
plotkin gave criteria correspondence calculus semantics 
calculus capable evaluating programs 
particular semantics defines meaning program provably equivalent calculus 
similarly calculus proves program equivalent answer meaning program defined semantics 
second calculus sound respect observational equivalence relation terms equal calculus observationally equivalent respect eval definition 
correspondence theory th corresponds semantics eval th corr eval conditions hold 
th adequate eval th 
th answer eval defined 

th sound respect th implies secondary question calculus decidable 
calculi decidable cases imperative fragment languages decidable subtheory 
cases show strongly normalizing notion reduction corresponds subtheory 
write sn notion reduction strongly normalizing 
equational theories techniques call value pass worth common programming languages ml pascal scheme employ call value pass parameter passing technique 
languages procedure application evaluates argument expression binding formal parameter value argument 
section call byvalue pass worth language assignment derive calculus reasoning language show corresponds semantics 
language calculus variations felleisen hieb 
call value term language idealized scheme extends new expressions 
assignment statement set 
assigns variable value expression result assignment expression value assigned variable 
second ae expression similar block algol letrec expression scheme 
contains sequence variable value pairs sub expression 
ae expression establishes mutually recursive bindings variables associated values returns value sub expression 
term language part 
basic differences language language felleisen hieb 
assignment statement set 
sigma capability 
sigma capability powerful programming construct languages implement weaker constructs set 
expression 
second scheme variables assignable may occur variable position set 
expression 
calculus variables language expressions values 
addition adopting barendregt conventions free bound variables identify ae lists differ ordering pairs permutations put differently treat ae lists sets pairs circumstances finite functions 
accordingly refer ae list ae set standard set operations sets 
set assigned variables expression denoted av set free variables occur variable position set 
expression 
semantics semantics call value pass worth language partial function eval vw programs answers answer value ae expression body value 
discussed previous section program rewriting function partitions program evaluation context redex transforms new program 
callby value evaluation context specifies eager evaluation strategy set 
call value pass worth language redexes expressions fv set 
ae machine rewrites program produces answer removes unneeded ae bindings applying garbage collection reductions answer 
technically garbage collection notion reduction gc union relations ae gamma 
ae fv ae dom ae gamma 
easy verify notion reduction gc strongly normalizing church rosser 
expressions unique gc normal form furthermore gc nf answer answer 
variables values calculus addition assignment statement language requires assignable variables values 
felleisen conservatively extend calculus enlarging set variables set assignable variables :10.1.1.23.4385
original variables calculus values additional assignable variables 
property highly context sensitive possibly difficult determine programmer abandon distinction 
syntax vars consts set 
ae ffl ae expressions values ae lists answers evaluation contexts ev ev ev set 
ev transformation function ae ev fv vw ae ev ffi ffi defined 
ffi ae ev vw ae ev av ae ev vw ae ev aef av fi oe ae ev vw ae ev dv ae ev set 
vw ae ev oe ae ev ae vw ae ev ae semantics eval vw ae vw ae gc normal form ae fig 
call value pass worth language program transformation function vw semantics eval vw call value pass worth language defined second part 
rules ffi fi provide call byvalue semantics specify effects imperative constructs 
calculus derive equational theory call value pass worth language generating equivalence relation vw compatible closure program transformation function notion reduction gc 
write vw calculus corresponds semantics eval vw theorem corr eval vw 
proof 
adequacy follows fact vw gc subsets vw soundness derive notion reduction vw vw gc 
reduction satisfies church rosser curry feys standardization lemmas imply soundness calculus 
proof adaptation proofs calculi plotkin felleisen :10.1.1.23.4385
details refer reader extended report :10.1.1.23.4385
examine question decidable subsets calculus 
case imperative subtheory ae theory transition relations deal procedure applications decidable 
specifically notion reduction consisting relations strongly normalizing 
new result hold imperative fragment calculus 
motivated completeness theorem non recursive fragment order lisp mason talcott 
theorem ffi modification relation ffi follows gamma 
ffi ffi consts ffi ffi oe ae gc 
sn 
proof 
proof uses size argument 
define potential function expressions gamma 
theta lexicographical ordering gamma 
naive approaches defining size function fail certain reductions increase size term number redexes term 
example reduction increases size term number redexes subexpression replicated aef gamma 
aef function counts number redexes term takes account potential redexes may introduced reductions 
details extended report :10.1.1.23.4385
call value pass pascal fortran languages allow pass procedure parameters addition pass parameters 
generally languages require actual argument pass parameter variable 
procedure application binds parameter variable evaluation procedure body assignments formal parameter equivalent assignments actual argument 
semantics generalizes pass allows arbitrary expressions arguments procedures 
argument variable transformation function evaluates argument variable procedure call 
argument evaluate variable meaning program undefined 
semantics term language pass semantics interpret pass procedure 
changes pass worth program transformation function necessary obtain transformation function semantics ffl variable occurs argument abstraction transition function substitutes argument variable bound variable body abstraction ae ae fi ffl transition function dereference variable occurs argument lambda abstraction ae ae pass transformation function vr union new rules previously defined rules vr ffi fi oe ae semantic function eval vr observational equivalence relation vr defined usual way 
calculus difference value parameter passing systems natural derivation calculus semantics specified section results unsound theory 
specifically variable dereference relation unsound axiom respect observational equivalence relation 
case variable occurs empty context adding restriction solves problem ae ae axiom replacing derivation calculus proceeds usual constructing appropriate equivalence relation modified transformation function notion reduction gc 
soundness problem encountered rule calculus exactly correspond semantics plotkin criteria 
condition reduction relation restricts ability calculus evaluate programs calculus evaluate programs expression step away answer program transformation function 
observation prove weak correspondence theorem 
theorem calculus weakly corresponds call value pass semantics eval vr 
particular 
adequate eval vr ffl ffl ae ae 
eval vr defined 

sound respect vr implies vr imperative fragment pass calculus ae procedure call reduction fi strongly normalizing full language 
theorem ffi oe ae gc 
sn fi sn 
call value result programming languages ada algol specify parameter passing technique known callby value result copy copy 
technique uses eager evaluation strategy similar pass worth pass binding techniques 
pass arguments procedures variables 
pass procedure applications bind formal parameter value argument variable 
evaluation procedure body argument variable receives value formal parameter 
alternative formulating weak correspondence relationship redefine semantics correspond calculus 
particular treat expression ae answer semantics calculus satisfies correspondence criteria 
existing programming languages notion call value pass semantics 
technically term call value pass value result name consistent terminology 
popular name call value result simplicity 
semantics sequential nature call value result protocol requires specification sequence statement ei appropriate extension evaluation contexts ei expression abbreviates ii semantics sequence expression straightforward left sub expression evaluated followed right ae hv ei ae seq procedure application requires steps 
application binds procedure parameter value argument 
second evaluation continues procedure body 
third value bound parameter copied back argument 
result application value obtained evaluation procedure body 
sequence expression specify series events ae 
fi ae aef set 
set 
set 
ri variable new variable holds return value procedure 
value arbitrary initial value 
complete rewriting function relies previously defined rules cc ffi fi oe ae seq usual transitive closure cc notion reduction gc determine eval cc calculus equational calculus call value result language closely resembles calculus callby value pass language 
problems encountered dereference axiom previous section occur call value result calculus 
axiom solves problem 
call value result calculus weakly corresponds semantics way callby value pass calculus 
theorem vr eval cc imperative fragment calculus extends imperative fragment call value pass calculus seq reduction 
addition strong normalization theorem notion reduction holds seq 
call name pass revised report algol informally defined semantics call name parameter passing copy rule 
intention implement church fi relation original calculus parameter passing technique new language 
copying argument parameter occurrence thought computational equivalent function evaluation ordinary mathematics 
hidden motive may desire perceive algol extension calculus language equational theory 
requirements copy rule imply pass semantics 
formal parameter assigned procedure argument evaluate variable 
assignments parameter assignments variable argument effects argument visible context procedure application 
semantics term language call name pass language differs ways 
exploit freedom delayed evaluation strategy ae expressions bind variables arbitrary expressions ffl second copy rule substitutes expressions free variables language permit expressions occur position variables allowed 
particular extend syntax allow expressions variable position set 
expressions set 
replaces set 
definition term language 
rest representing call name pass procedure 
call name evaluation contexts specify delayed evaluation strategy 
context specifies evaluation procedure arguments prior procedure call evaluation context delayed evaluation strategy 
hand application functional constants remains strict 
definitions evaluation contexts program transformation function 

relations names relations introduced callby value language differences due change definition evaluation contexts 
relations name share reduction schema 
textual context disambiguate uses names 

transformation function uses fi rule defining behavior procedure applications 
en en en set 
en set 
en ae en fv nr ae en ffi ffi ae en nr ae en fi ae en nr ae en en set 
dn ae en set 
nr ae en oe ae en ae nr ae en ae fig 
call name pass semantics restriction dn rule necessary disallow dereference variable occurs variable position assignment 
semantics eval nr determined transitive closure nr gc previous sections 
calculus derivation calculus semantics follows course call value pass language natural approach results unsound system 
dereferencing rule causes problem 
adding appropriate condition dereference rule solves problem ae gamma 
ae dn en set 
en derive calculus constructing appropriate equivalence relation modified transformation function dn replaces dn call name pass call byvalue pass languages similarities 
require modified dereference rule prohibit variable dereference certain positions 
similarly direct derivation calculus semantics results unsound system 
surprisingly calculus calculus weakly corresponds semantics 
weak correspondence weaker call value language 
reason calculus perform variable dereference empty context kind dereference call value language return value answer callby name language 
result calculus evaluate programs expressions just transformation step answer calculus requires arbitrary number transformation steps derivation 
changing semantics fix problem theorem calculus weakly corresponds call name pass semantics eval nr particular 
weakly adequate eval nr exists ae ae xn ae xn ae xm eval nr defined 
sound respect nr implies nr ae sets may recursive imperative subtheory ae decidable full language example infinite reduction sequences ae diverging program aef hand ae strongly normalizing subset ranges ae sets values 
theorem notion reduction ffi oe ae gc strongly normalizing subset ranges ae sets restricted values 
intended designers algol calculus conservative extension calculus 
theorem rj proof 
clearly proof proof 
hand proof may axioms case church rosser property ensures equivalent expressions reduce third expression 
reductions fi ffi axioms calculus expressions time thunks valid answers 
existing languages strict top level 
syntax isb boxes ae box 
unbox 
ffl expressions values ae lists semantics ae fv bx ae ffi ffi defined 
ffi ae bx ae ae box bx ae aef box ae unbox bx ae db ae 
bx ae oe ae ae bx ae ae fig 
cell language call value pass worth cells values motivation pass technique need affect argument variables 
accomplish pass passing technique binds formal parameter argument variable assignments parameter assignments argument 
languages ml scheme pass new class values pointers cells boxes achieve similar result 
cell language object refers value 
dereference expression returns value cell refers assignment expression changes value 
cell occurs argument procedure application binds formal parameter cell cell value 
way assignment formal parameter visible context procedure application pass 
cell concept proper parameter passing technique consider relation pass worth parameter passing 
semantics abandon assignment favor cell assignment expression 
variables longer assignable treat values 
term language extends language calculus ae expression set cells expressions creating assigning dereferencing cells 
adopting chez scheme terminology primitives box unbox perform operations part contains specification term language usual abstractions ae expressions binding expressions binds variables ae binds cells 
notion free cells analogous free variables 
evaluation contexts transformation function defined 
usual transitive closure transformation function garbage collection reductions define semantics eval bx notion reduction gc slightly different setting uses notion free cells free variables determine unneeded items ae sets 
calculus derive calculus reasoning cells directly semantics generating equivalence relation transformation function garbage collection reduction previous sections 
resulting theory corresponds semantics eval bx theorem corr eval bx furthermore imperative fragment calculus ae decidable theorem ffi oe ae gc 
sn 
calculus conservative extension calculus 
equivalence proofs calculus hold calculus 
theorem bj cell interesting relation pass worth pass languages 
connection pass worth language apparent cell language employs callby value pass worth parameter passing box assignments similar variable assignments fact possible show equivalent formal sense programming language expressiveness 
pass language connection clear formal expressibility results 
cells pass worth language provide ability assignments formal arguments cells case original motivation 
reason cells values passed arguments variables values dereferenced occur arguments pass worth semantics 
semantics provides alternative passes variables allow dereferencing variables occur arguments 
cells callby value pass worth language provide options simple language 
related equational systems motivated plotkin studied equational reasoning systems call name call value functional languages felleisen developed calculi call value imperative languages :10.1.1.23.4385
demers donahue give equational logic reasoning higher order language uses call value parameter passing memory objects similar cells 
equational theory contains dozen axioms formal results 
mason talcott conditional deduction system observational equivalences lisp expressions side effects language similar imperative fragment cell language 
logic complete recursion free order fragment lisp side effects 
area denotational semantics authors denotational descriptions different parameter passing techniques 
descriptions specify precise set theoretic interpretations parameter passing provide intuitive simple set equations axiomatic theories 
number researchers studied parameter passing context hoare axiomatic semantics 
systems generally order subsets pascal number restrictions procedure calls aliasing 
cartwright oppen overcome aliasing restriction allow procedures arguments 
olderog eliminates restrictions procedures hoare calculi explicitly require operational specifications procedure calls copy rule 
common parameter passing techniques program rewriting semantics derived corresponding calculus 
calculi pass value languages simply equational theories rewriting semantics calculi pass languages weaker 
cases rewriting rule dereferencing variables sound respect observational equivalence 
result correspondence calculi semantics weaker pass languages pass value languages 
calculi sound calculi pass weak serve substitute evaluator 
underlying reduction systems calculi church rosser standard reduction property 
imperative fragments calculi strongly normalizing decidable 
table summarizes results 
correspondence column refers closely calculus corresponds semantics 
necessary modifications familiar fi axiom shown beta axiom heading 
param arg columns show restrictions formal parameter argument procedure applications 
entry non assign indicates rule applies applications formal parameter assigned procedure body 
column indicates fragments strongly normalizing 
comparison calculi reveals aspects relative semantic complexity techniques 
study verifies folklore algol call name pass parameter passing technique satisfies full fi axiom reveals comes expense weak correspondence relationship strange restrictions axioms imperative fragment language 
call value pass copyin copy share problems 
remaining combinations call value pass worth boxes better characteristics 
calculus equational closure reduction semantics 
strong correspondence semantics calculus 
axioms simple complicated restrictions 
calculus conservative extension functional core language 
properties call value boxes reasoning programs language attractive choice 
evaluation binding beta axiom decidable strategy strategy param arg fragment call value worth exact fi non assign value ae weak fi variable ae fi value result weak fi ae seq call name weak fi restricted ae call value cells exact fi value ae table summary 
amr sabry rebecca comments early draft 

barendregt lambda calculus syntax semantics 
revised edition 
studies logic foundations mathematics 
north holland amsterdam 

cartwright oppen 
logic aliasing 
acta inf 


church calculi lambda conversion 
princeton university press princeton 

crank parameter passing lambdacalculus 
master thesis rice university august 

demers donahue 
making variables equational theory russell 
proc 
th acm symposium principles programming languages 

donahue complementary definitions programming language semantics 
lecture notes computer science springer verlag heidelberg 

dybvig scheme programming language prentice hall englewood cliffs new jersey 

felleisen expressive power programming languages 
proc 
european symposium programming 
neil jones ed 
lecture notes computer science 
springer verlag berlin 

felleisen friedman 
syntactic theory sequential state 
theor 
comput 
sci 

preliminary version proc 
th acm symposium principles programming languages 

felleisen hieb 
revised report syntactic theories sequential control state 
technical report rice university june 

gordon denotational description programming languages springer verlag new york 

gries levin 
assignment procedure call proof rules 
acm trans 
program 
lang 
syst 


hoare axiomatic basis computer programming 
commun 
acm 

hoare procedures parameters axiomatic approach 
symposium semantics algorithmic languages ed 
lecture notes mathematics 
springer verlag berlin 

landin programming languages 
commun 
acm 

mason talcott 
sound complete axiomatization operational equivalence programs memory 
proc 
symposium logic computer science 
extended version appear theor 
comput 
sci 

muller operational semantics equational logic eval 
unpublished manuscript 
harvard university 

naur 
ed 
revised report algorithmic language algol 
comm 
acm 

olderog sound complete hoare calculi copy rules 
acta inf 


plotkin call name call value calculus 
theor 
comput 
sci 


rees clinger eds 
revised report algorithmic language scheme 
sigplan notices 

schmidt denotational semantics methodology language development 
allyn bacon newton mass 

department defense 
programming language ada manual lecture notes computer science springer verlag 

wirth hoare 
contribution development algol 
commun 
acm 

