cycle therapy prescription fold unfold regular trees turbak wellesley college cs wellesley edu wells heriot watt university www hw ac uk cyclic data structures tricky create manipulate declarative programming languages 
declarative setting natural way view cyclic structures denoting regular trees trees may infinite finite number distinct subtrees 
shows implement unfold anamorphism operator eager lazy languages create cyclic structures result regular tree opposed merely infinite lazy structures 
usual fold catamorphism operator strict combining function infinite tree yields undefined result 
alternative defines show implement cycfold operator useful semantics strict function cyclic structures representing regular trees 
introduces data type cycamores simplify cyclic structures representing regular trees eager lazy languages 
cycamores sml haskell 

cycles tricky manipulate cyclic structures collections linked nodes containing paths nodes back ubiquitous computer science 
structures tend tricky create process deallocate 
ease tasks performed depends great deal programming paradigm particular programming language partially supported nsf cise ccr ess 
partially supported nsf ccr 
partially supported sun 
partially supported nsf ccr 
partially supported epsrc gr gr 
employed 
motivate illustrate points sequence simple examples 
example 
consider haskell function putstr show alts putstr show alts alts alts function creates conceptually infinite list alternating zeroes ones named alts displays nth th elements list indexing 
haskell lazy recursive definition alts defined resulting infinite list implemented particularly ciently just list nodes second node tail node tail second 
standard haskell implementations invoking requires constant space independent magnitude input 
example 
function trickier express eager language scheme sml 
approach simulate laziness haskell typically new lazy list data type implemented mechanism delaying forcing computations 
conceptual run time overheads simulation sml problematic recursive binding construct val rec requires bound expression manifest function abstraction 
constraints ectively dictate recursively defined lazy lists sml represented thunks parameterless functions datatype withtype unit fun case xs xs raise fail empty list fun val rec alts fn fn alts print int tostring alts print int tostring alts unfortunately total number list nodes created call representation proportional magnitude argument example 
mutable cells possible implement cyclic lists sml constant num scheme lenient letrec construct allows lazy lists represented pairs delayed second components 
constant number nodes accessible point computation 
ber nodes shown 
datatype withtype ref fun ref xs xs ref raise fail empty list fun val alts ref val alts ref alts print int tostring alts print int tostring alts key step assignment tie knot cycle 
note elegance defining alts recursively single declaration lost approach 
example 
haskell laziness facilitates implementing alts cyclic list laziness insu cient tying cyclic knots 
consider defining alts haskell list generating unfold function unfold bool unfold unfold putstr show alts putstr show alts alts unfold false id mod knots tied representing alts requires list nodes resident memory point invocation :10.1.1.42.1735
fact compact representation alts possible way guarantees compact representation 
example 
final motivating example consider problem finding set integers cyclic list 
case alts examples set 
intuitively set viewed result accumulating node values cyclic list kind folding process 
set calculated classical foldl foldr operations sml haskell ectively require processing infinite number nodes unwinding alts 
calculating set values arbitrary cyclic list involves traversing list determining list starts repeat computation terminate 
done examining node values requires knowing list node encountered previously encountered 
determining list nodes identical pointer equal operation supported scheme sml haskell 
problem collecting elements alts unsolvable examples 
sml supports testing pointer equality cells problem solvable representation cyclic lists example 
testing set membership equal fact subscripts alts twice important argument 
alts production consumption list nodes alts take place lock step coroutining fashion requiring constant number list nodes accessible point time 
presence second subscript alts implies list nodes comprising alts reclaimed early 
ghc compiler haskell provides experimental non standard memo function purpose 
ity predicate takes time linear size set 
operations ordering predicates hashing functions necessary cient membership tests 
reason omit node equality declarative language reduce set valid program transformations 
instance haskell support lisp eq operator list nodes reduction longer meaning preserving 
eq evaluate true eq evaluate false independently allocated copies list need pointer equal hash consing 
examples highlight problems involving cyclic data structures 
naively generating conceptually cyclic structure operations unfold lead unbounded representation bounded representations exist 

naively accumulating result cyclic structure operations foldr diverge returning result interest 

presence lack various programming language features laziness side ects recursive bindings node equality greatly influences easily cyclic structures manipulated 
contributions develop theoretical foundation manipulating regular trees mathematical entities correspond typical cyclic structures 
foundation address problems motivated 
define unfold function generating potentially infinite trees simple condition guaranteeing resulting tree regular 
practice condition justifies memoization input domain construct bounded representations regular trees 

specify meaning fold function accumulating results potentially infinite trees 
introduce novel variant fold call cycfold produce useful results regular trees strict combining function usual fold function yield undefined result case 
practice cycfold calculated bounded representations regular trees iterative fixed point process 
suitable arguments cycfold results obtained finite representative regular tree cycfold expose details particular finite representative cycfold invoked 

introduce cycamores data type regular trees largely insensitive features programming language embedded 
modulo details threading state certain involving eagerness laziness cycamores including unfold cycfold operations implemented equally eager language lazy language 
demonstrate presenting implementations cycamores sml haskell 
related vast literature programming fold unfold operators variety data structures include 
terminology di ers widely literature 
terminology fold unfold informal names bananas lenses symbols write results fold unfold called respectively catamorphisms anamorphisms terms call howard iteration gen loosely correspond fold unfold howard authors type theory uses names fold unfold type level operations role 
especially important avoid confusion terminology unfold transform fold program transformation methodology involves unfolding recursive definition performing local simplifications re folding new recursive definition :10.1.1.19.4684
memoization ectively manipulate cyclic structures new 
goes far back hughes lazy memo functions 
contribution dimension developing theoretical justification memoization regular trees observing memoization essential building cyclic structures unfold laziness noting cyclic structures ectively generated unfold sibling fold explaining pitfalls avoided tradeo doing 
approach folding regular trees contrasts approaches fegaras sheard accumulate results term representing graph produce di erent results di erent representatives 
notion distinguishing di erent forms fold cyclic structures independently explored unpublished graph catamorphisms gibbons 
gibbons presents haskell definitions folding functions graphs correspond fold cycfold respectively see sections detailed comments comparing functions 
gibbons consider expressing graph folds eager language develop theory folding functions 
theory fold builds classical results fixed point theory denotational semantics 
fixed point iteration performed cycfold similar performed traditional compiler data flow analysis see nice summary area 

theory unfold fold regular trees mathematical denitions numbers sets binary relations posets cpos usual natural numbers 
range added natural numbers set 
binary relation transitive imply antisymmetric imply reflexive set object upper bound resp 
lower bound set transitive binary relation resp 
furthermore transitive antisymmetric binary relation upper resp 
lower bound set upper bound resp 
greatest lower bound resp 
upper resp 
lower bound transitive antisymmetric binary relation set expression resp 
denotes upper resp 
greatest lower bound exists undefined 
upper resp 
greatest lower bound called join resp 
meet 
binary relation partial order set reflexive transitive antisymmetric 
poset pair carrier set partial order restriction binary relation set 
poset notation resp 
stand resp 

poset bottom element defined 
case symbol usually denote poset non empty subset chain totally ordered 
poset complete partial order cpo defined chain cpo pointed cpo bottom 
product sets defined usual 
binary relations product relation 
product posets 
sets define function space 
poset extension functions type relation poset 
posets function monotone implies cpos function continuous chain cpos define space continuous functions cont continuous define cpo continuous functions cont cont 
lifting set written set symbol stand fresh object sets function dom 
lifting poset written poset defined implies implies 
sequences sequence set function 
set sequences sequence length taken 
set finite sequences 
poset extension partial order partial order 
sequence extension 

xn denote sequence 
particular empty sequence 
sequence begins continues 
rest appropriate implicit coercion maps element length sequence 
example implicit coercion notation stands stands sets map function type defined map map 
labelled trees range set positions 
nonempty set labels function possibly infinite labelled tree satisfies conditions 

tree node 


tree node position node appropriate parent position 


children node numbered consecutively starting 
condition essential things convenient 
tree set labelled trees range labelled trees 
tree finitely branching dom exists dom 
tree finite dom finite 
tree finite height written dom 
tree position 
tree dom qualifies tree called subtree set subtrees subtrees tree 
tree regular subtrees finite 
label sequence tree labelled trees 
denote tree 
label children observe function bijection tree tree 
inverse 

presentation section avoids handling practical issues faced programming languages extra complexity orthogonal main issues addresses 
presentation extended handle issues 

necessary labels arities node labeled required arity children 
generally labels may sorts label produces tree sort expects subtrees sorts 
generally sorts may parameterized 
features needed implement typing restrictions trees imposed datatype definitions haskell sml 

lazy implementations datatypes haskell possible partially defined trees attempts explore certain branches diverge 
type tree admit partially defined trees finite infinite 
presentations unfold fold simplified result 

mathematical presentation allows infinitely branching trees 
mathematical results section di cult results applicable finitely branching case 
due practical di culties implementing infinitely branching trees eager programming languages sml implementation describe di er infinitely branching trees presentation section 
example 
trees label set positions generated regular expression empty string concatenation alternation kleene closure labels rules tree subtrees positions regular expression 
positions subtrees 
diagrams look unfold unfold function treated treatment simpler 
non empty sets unfold function type tree defined unfold predicate defined map definitions mathematically admit possibility yield kind undefined value exactly function satisfying 
definition unfold written parts separate predicate order clearer symmetry definition fold 

attempt implement definition unfold eager language easily result implementation di erent function 
type eager language implicitly lifted element indicating undefined result practice implemented simply diverging easy implementation evaluates arguments strict arguments evaluates result 
sml implementations unfold described problem case result irregular infinite tree pragmatic issues led decide suspensions lazy implementation 
sml implementations take advantage lemma order faithfully implement semantics unfold cases result regular tree 
faithful implementation unfold lazy language quite easy 
haskell implementation described faithful approach tying cycles regular trees 
inspecting subtree right subtree haskell unfold fails represent finite graph diverge 
example 
tree example generated follows unfold example 
tree example generated follows unfold interesting issues arise implementing unfold various settings discussed sections 
theoretical point wish 
sets function dependencies deps set containing satisfying closure condition lemma 
sets function deps finite unfold regular tree 
example 
converse lemma hold 
unfold regular tree mean deps finite illustrated alternative definition example unfold clear deps finite regular 
fold usual definition fold function trees 
section alternative definition useful behavior certain situations 
non empty set tree labels res pointed cpo intended type results folding functions trees 
arg cpo res 
cpo arg cont res carrier range 
fun pointed cpo tree cont res range 
fold function type defined fold min predicate defined map define map clear true exactly functions fix points 
checked continuous function fun fun fix point fun cont fun pointed cpo 
fold defined 
order fold computable computable su cient interpret bottom res divergence 
example 
example illustrates reason definition fold needs pointed cpo 
bool true false usual booleans range bool 
bool 
res undef bottom added going partial order tree 
define function follows 
undef undef tree rule functions satisfying true false true false undef false true false true undef undef note bottom fold taken type bool functions satisfying pair ordered way decide answers fold fold 
example 
example illustrates function satisfying useful definition fold needs bottom res interpreted divergence 
define function labels compute set labels tree follows labels subtrees 
label labels function ought definable fold 
attempt follows labels labels fold labels res gives correct mathematical result labels labels 
unfortunately computable 
additional bottom needed represent divergence 
define res function labels wrong type needs type definition labels fixed fold follows 
undef element added going definitions labels 
undef undef labels fold labels function labels defined hard check labels labels finite height 
labels undef labels infinite height tree general phenomenon function strict labels function fold yield infinite height trees 
cycfold discussion examples leads question possible define fold computable way returns non trivial results infinite height trees strict 
development alternative fold purpose purpose rest section 
new function cycfold introduced cycfold coincide fold finite trees infinite regular trees cycfold may able find interesting result 
cyc part name refers fact implementations cycfold take advantage cycles representations regular trees 
defining cycfold auxiliary notions needed 
res arg fun definition fold section 
range 
main di erence required res fact result lifting pointed cpo user user user res user undef bottom added going user user bottom user di erence combining functions required yield undef undef argument values 
arg cont res allowed undef 
undef allowed allowed 
allowed range allowed binary relation finite tree 
tree 

user undef undef label map children transitive reflexive closure undef undef tree 
lemma 

undef 


undef tree undef 
predicate subtrees map foundation prepared define cycfold 
assumptions indicated cycfold function type allowed defined follows cycfold undef undef 
cycfold function di ers fold way cycfold picks particular 
starting undef iteratively improving fold recompute values number trees old values subtrees 
approach computable undef usual interpretation divergence implementation discussed rest 
example 
labels labels defined example 
poset user user user required cycfold just 
checked labels allowed labels cycfold labels defined 
checked labels labels regular tree 
example example labels desired result 

cycamores sml investigate practical aspects theory developed previous section implemented notions unfold fold cycfold regular trees eager language sml lazy language haskell 
simplify presentation introduce new data type cyclic trees call cycamore 
discussing interface implementation ectively data type di erent settings helps highlight essential di erences implementations hiding inconsequential details 
helps explore space possible interfaces implementations 
cycamores serve pedagogical role intended proposal elegant cient implementation regular trees 
facilitate comparison languages design decisions sense language cumbersome 
believe cycamores reasonable starting point implementing regular tree manipulations language implementations ectively specialized particular languages 
section presenting interface cycamores sml illustrating interface various examples 
section discuss issues interface 
section discuss interface implementation issues context haskell 
sml interface cycamores presents sml signature cycamores 
conceptually value type cycamore potentially cyclic rose tree tree node components label type necessarily finite list children subtrees type cycamore 
new cycamore nodes constructed view 
example 
finite tree shown built expression type string cycamore val infinite trees constructed directly constructed unfold takes arguments memoization key generating function seed unfolding process starts 
shall see section tying structural knots cycamores achieved source domain elements memoization key argument specifies done 
signature type denotes memoization key type 
typical implementation memoization key ordering function elements type hashing function maps element type integer 
signature assumed memoization keys created applying comparison function type order order standard sml data type elements equal greater 
generating function plays role section 
takes element source type returns pair ds label target type ds list immediate dependencies elements source type 
source value unfold returns cycamore label children cycamores resulting recursively processing ds 
fact cycamores type means sml haskell pattern matching facilities manipulating cycamores somewhat cumbersome 
problem addressed sort view mechanism 
signature cycamore sig type cycamore type val cycamore list cycamore val view cycamore cycamore list val unfold key function list generating function seed cycamore resulting cycamore val cycamore cycamore cycamore val memoization key cycamore cycamore function fix cycamore resulting fixed point val fold list combining function cycamore source cycamore result val cycfold bottom bool geq list combining function cycamore source cycamore result val order val val cycamore sml signature cycamores 
example 
infinite tree example constructed function psi implements function example fun psi psi val unfold int compare psi consequence lemma unfold function guaranteed terminate return cycamore finite number nodes transitive closure immediate dependencies original seed yields finite set equality elements set determined comparison function serves memoization key 
case transitive closure immediate dependencies yields unbounded set unfold terminate sml 
example 
translation sml example expression diverges evaluation unfold int compare fn function handy computing fixed points cycamores 
takes single function argument type cycamore cycamore returns cycamore fixed point function 
example 
way creating infinite tree example follows val fn result defined long value argument body guarded 
condition violated semantics unspecified 
example 
value expressions unspecified fn fn val view second expression parameter guarded alias value guarded 
function third way create cycles cycamores 
memoization key unfold function type cycamore cycamore returns function cycamore fixed point additionally calls parameter body memoized domain allowing cycamore knots tied 
name intended convey intuition semantics similar memo fix fix usual fix point operator memo usual notion function returning memoized version 
example 
function constructs regular binary cycamore nodes values arguments version fibonacci function 
version base cases replaced subtraction modulo arguments range resulting cycamore regular 
fun int compare fn fn mod mod previous example contrived easily expressed unfold 
cases immediate dependencies source value apparent easier unfold 
function similar spirit memo function glasgow haskell compiler ghc implicit memoization function hughes lazy memo functions 
type 
function di ers ways form rely recursive binding construct language embedded purpose support knot tying cycamores output type constrained cycamore type 
point ectively circumvents sml restriction recursive bindings 
instance attempt express ghc memo function sml illegal sml example fun val rec memo fn mod mod declaration legal sml expression memo 
manifest abstraction 
fold function implements standard notion folding possibly infinite trees section 
sml eager language argument fold combining function necessarily strict fold diverge cycamore represents infinite tree 
fold return value finite trees 
example 
function counts nodes finite cycamore fun fold fn fn ns list foldr op ns example returns tree defined example 
diverges stands infinite tree 
cycfold function implements alternative notion folding regular trees developed section 
takes arguments bottom element target type prime fixed point process comparator determines target type element greater equal combining function node combines label node type results accumulating list children produce element target type source cycamore accumulation takes place 
result returned cycfold final value fixed point process accumulated root node source cycamore 
alternative design return table specifying final values nodes cycamore 
example 
labels function translation sml function example see example 
takes label comparison function type order cycamore type cycamore returns set labels cycamore 
fun labels compare val emptyset set empty compare cycfold emptyset fn set fn lab fn sets set add list foldr set union emptyset sets lab assume set empty compare creates set uses compare test element equality set set add set union respectively subset testing insertion union operators sets 
example labels string compare returns set 
example cyclic lists extended example involving cycamores consider examples involving infinite lists similar 
gives operations values type potentially cyclic lists elements type 
constructed cons head hd tail tl operations 
match construct serves poor man pattern matcher 
function uses fix create infinitely repeating elements 
memoization key function seed value constructs conceptually infinite list ith element 
set finite result regular tree represented finite cycamore 
example upto returns infinite repeating integers 
note diverge practice run memory infinite 
function maps function 
uses special memoization key exported cycamore module allows cycamore nodes memoized 
existence means cycamores created unfold datatype nil cons type cycamore fun nil fun cons cons fun match cycl case view cycl nil cons hd tl hd tl fun hd cycl match cycl fn raise fail head empty fn hd hd fun tl cycl match cycl fn raise fail tail empty fn tl tl fun xs fn fun ys cons ys xs fun unfold fn cons val int compare fun upto fn mod fun unfold fn cons hd tl fun xs ys unfold fn cons hd hd tl tl xs ys implemented sml cycamores 
source domain creating new cycamores functions 
closure property extremely important practice 
function zips infinite 
lists length length returns list length common multiple function uses function construct memoization key pair memoization keys components 
manipulation memoization keys means details comparisons cycamore nodes ectively remain hidden 
direct way client cycamore module compare cycamore nodes pointer equality 
helps prevent small changes order creation cycamores changing meaning program prevents clients determining cycamore particular finite representation regular tree denotes 
course notions sense context purely functional subset sml unfold cycfold functions perform assignments raise exceptions potentially explore internal representation cycamore 

implementing cycamores sml simple implementation consider straightforward implementation cycamores sml discuss alternative strategies 
simple representation cycamore type datatype cycamore list withtype cycamore int option ref representation cycamore mutable cell contains pair unique uid optional tree node pairs label children 
cell enables tying knots cycamores 
sml cells compared pointer equality arranged total order argument hash function directly keys memoization table ine cient 
problem solved node uids support memoization comparison nodes 
node uids implemented terms global counter bumped time invoked val ref fun 
fun ref uid uid fun lbl kids ref lbl kids part knot tying process representing cycamore node initialized pair uid 
examine contents node leads socalled black hole error common haskell implementations 
fun view val case valu kids valu kids raise fail black hole workhorse tying knots cycamores fun cycamore cycamore val new fun cyc src case find src result result val trg ref val bind src trg val trg 
cyc src yield black hole returns trg 
trg cyc implementation assumes existence module stateful operations creating new memo table new inserting key value binding memo table bind looking value associated key find 
cycamore knots tied binding source value src trg fresh cell containing black hole token setting cell result calling note implementation memoization table shared di erent calls returned cyc function 
alternative strategy allocate new table call cyc 
strategy enhances opportunities sharing doing increase space complexity 
fix unfold implemented terms show fun fix cycamore cycamore fn equal fn fn fun unfold cycamore list cycamore list fun cyc src val deps src map cyc deps fold function straightforward recursive fun cycfold bottom geq bool list cyc cycamore fun eq geq andalso geq fun get case tbl find raise fail cycfold invariant failed val tbl empty fun cyc tbl case tbl find tbl cyc tbl val kids view cyc val tbl tbl insert tbl cyc bottom list foldl tbl kids val cyc fun tbl val flag ref false fun node prev val lbl kids view node val curr lbl list map get tbl kids val changed eq prev curr val flag flag orelse changed geq curr prev raise fail cheating cycfold curr tbl tbl flag fun fixedpoint tbl val tbl changed tbl changed fixedpoint tbl tbl val fixedpoint get cyc sml implementation cycfold 
lation rose tree fun fold list cyc cycamore val label kids view cyc label map fold kids cycfold function see simple ine cient implementation fixed point iteration 
time step fixed point iteration process builds table mapping cycamore node result accumulated node iteration process starts table nodes map bottom value stops change table detected iteration 
process similar fixed point iteration data flow analysis node functions take multiple arguments merging information multiple inputs 
dataflow analysis iteration guaranteed terminate target domain finite lattice combination function monotonic 
conditions hold cycfold may diverge 
comparison function argument geq cycfold purposes determine fixed point iteration eq check combination function monotone partial order result 
purpose strictly necessary practically helpful debugging catching combining function cheats producing new result lower incomparable previous 
purpose desired equality predicate su cient 
purpose desired cient approach taken gibbons haskell implementation function 
modulo di erences implementation language table representation means testing termination implementation ectively cycfold 
memoization keys just comparison functions type order fun cmp cmp fun int compare fun cmp cmp case cmp equal cmp exporting implementation type data type 
exporting type cycamore permits argument unfold prohibits directly compare cycamore nodes 
uid information encapsulated manner leak rest program 
function just example library memoization key combinators exported 
combinators black box inflexible 
example essential implementing section 
alternative implementations experimented implementation strategies simple 
strategy saves space time cells points knots need tied 
data type declaration implementation indirect nodes direct nodes datatype cycamore direct node int uid node value cycamore list children indirect node indirect cycamore option ref invariant implementation indirect node contains direct node 
implemented cycamores top system cyclic hash consing 
cyclic hash consing regular tree guaranteed represented unique finite representation minimal number nodes 
implementation cyclic hash consing developed considine wells improvement proposed 
intriguing feature implementation necessary hide node equality uniqueness cycamore nodes representing regular trees implies node equality tree equality 
node equality checking implemented fast check system exposed cycamore interface implementation 
implementation cycfold independent representation details cycamore nodes depends view ability index table cycamore nodes permitted inside outside cycamore implementation 
experimented cumbersome supply separate equality predicate simulating calls comparator 
cycfold cient terms reducing number invocations combining function fixed point iteration 
strategy builds specialized updating function tables initial walk cycamore graph repeatedly executes function starting initial table change detected 
strategy schedules updates combining function individual nodes heuristics involving changes children values update 
experiments strategies preliminary early report compare naive strategy 

cycamores haskell implementing cycamores haskell evidence cycamores reasonable abstraction cyclic data discuss implementing cycamores haskell 
implementation uses haskell laziness tie knots cycamores 
tricky part exercise threading state global uid counter memoization tables purely functional computation 
simple data type declaration data cycamore integer uid value cycamore subtrees instance eq cycamore instance ord cycamore compare compare sml haskell support user visible pointer equality heap allocated values cycamore nodes maintain uids memoization comparison 
haskell eq ord type classes obviates need pass memoization keys explicitly unfold 
haskell idiom convenient unfortunately allows uid information leak making possible small changes order creation cycamores ect results 
leave plugging leak 
haskell implementations core cycamore functions 
view trivial 
call needs update global uid counter threaded computation 
handle threading memoization tables introduce cycle monad 
cycle monad implemented terms state transformer monad st uses state variable type integer maintain value uid counter 
state transformer monad runst similar function requires rank polymorphic type order type checking guarantee encapsulation state 
function see extracts uid counter monad updates part creating new node 
note type signature haskell necessarily di erent sml expose threading state type 
type cycle cycamore appear times introduce abbreviation type cycamore cycle cycamore function computes fixed point cycamore monadic state 
implemented view cycamore cycamore view val kids val kids cycamore cycle cycamore val kids uid uid return uid val kids cycamore cycamore cycamore unc unfold ord cycamore unfold gen seed cyc seed cyc mt src probe case probe just result return result label deps gen src trg src trg mt deps trg return trg ord cycamore cycamore cycamore start cyc start cyc mt src probe case probe just result return result trg src trg mt line yield black hole returns lifted trg trg return trg fold combining function cycamore source cycamore result fold cyc label map fold kids label kids view cyc cycfold bottom combining function cycamore source cycamore result cycfold bot cyc get cyc get case tbl search just error cycfold invariant failed fixedpoint cyc tbl empty cyc tbl case tbl search cyc tbl just tbl foldr tbl insert cyc bot tbl kids kids view cyc fixedpoint fp fp fp tbl cyc val val label map get kids label kids view cyc case val val just gt val just eq val error cheating cycfold cycamore operations haskell 
newtype cycle unc integer st instance monad cycle return cycle return cycle cycle cycle unc forall cycle runst unc cycle monad 
type tbl map cycamore cycle tbl empty ord key table cycle cycamore result key mt return tbl search key ord key cycamore value table cycle result key val mt mt tbl insert key val memoization table interface haskell 
terms fixed point function st monad 
implementation unfold require memoization tables 
assuming existence tbl module implementing finite tables implemented state variables cycle monad see 
order tie cyclic knot unfold combination laziness 
idioms computing recursive values context monad explored 
sml implementation haskell implementation share memo tables di erent invocations unfold creates fresh memo table invocation 
definition modified greater sharing signature change 
particular cycamore need cycle cycamore 
similar comments hold 
implementations fold cycfold orthogonal issue threading state implemented sml 
haskell implementation cycfold take explicit comparator argument takes implicit type class models partial orders class eq ordering function returns just ord ord ordering eq lt gt values values incomparable partial order 
example 
haskell lazy fold return values cycamores denote infinite trees 
cyc cyc fix cyc fact cyc fold node denoting infinite linear chain factorial generating function 
result cyc fold factorial function 
implementation fold calculates node time node encountered walk cycamore ine cient cycamore denotes infinite regular tree 
alternative results table haskell laziness big help purpose 
approach taken gibbons implementation 
gibbons notes equivalent composition fold function rose trees function unwinds graphs trees 
example deterministic finite automata illustrate cycamores haskell context implementing deterministic finite automata dfa operations 
stress laziness essential example just implemented straightforwardly sml implementation cycamores 
suppose dfa represented list states type dfa state data state int state number bool accepting state 
char int transitions state instance eq state instance ord state compare compare state identifying number boolean indicating accepting state list character state number pairs indicating transitions state 
character appear list assumed transition taken distinguished non accepting dump state 
example sample dfa dfa true true false dfa state character transition function returns state results transition transition dump state trans dfa state char state trans dfa ts just find ts just find dfa dfa represented cycamore node label type data sl int state number bool accepting state 
char transition labels paired children deriving show eq type cyc cycamore function converts list cycamore representations dfas 
dfa finite list states unfold construct finite cycamore encoding possibly cyclic transition graph automaton 
dfa cyc cycle dfa cyc unfold state ts chars map fst ts sl chars map trans dfa state chars head dfa strings function returns set strings length equal number accepted automaton represented cycamore 
cycfold collect strings accepted node fixed point iteration starts empty set 
strings cyc cycfold set empty sl accept chars sets set filter str length str foldr set union set empty map set set set map set accept set insert set set zip chars sets example evaluating haskell expression strings dfa yields set aac ab aba abab abac ac acb acc 
theory unfolding folding regular trees introduced abstractions simplifying creation manipulation finite data structures represent infinite regular trees 
demonstrated abstractions implemented eager lazy languages 
case particular details language add complexity implementation 
case sml need explicitly pass memoization keys cumbersome restriction recursive bindings su 
haskell threading state global uid counter memoization tables computation awkward 
cycamores easier integrated smoothly particular languages 
noted lack pattern matching cycamores unwieldy 
having encode information list elements node labels awkward 
problematic lack typing 
currently designed space untyped cycamore nodes checks labels number children dynamic 
hope address problems 
acknowledgments je rey considine implementation cyclic hash consing allyn helping debug early version 
acknowledge helpful support colleagues church project 

abelson sussman sussman 
structure interpretation computer programs nd ed 
mit press 
bird de moor 
algebra programming 
prentice hall 
burstall darlington 
transformational system developing recursive programs 
acm jan 
launchbury 
recursive monadic bindings 
proc 
int conf 
functional programming pp 

acm press 
fegaras sheard 
revisiting catamorphisms datatypes embedded functions programs outer space 
conf 
rec 
popl rd acm symp 
princ 
prog 
langs pp 

acm 
gibbons 
graph folds 
working cbb ifip wg 
web comlab ox ac uk jeremy gibbons wg meeting graphs lhs jan 
gibbons jones :10.1.1.42.1735
appreciated unfold 
icfp pp 

howard 
inductive coinductive pointed types 
proc 
int conf 
functional programming pp 

acm press 
hughes 
lazy memo functions 
ifip int conf 
funct 
program 
comput 
arch vol 
lncs nancy france 
springer verlag 
hutton 
fold unfold program semantics 
icfp pp 

hutton 
tutorial universality expressiveness fold 
funct 
programming july 
proc 
int conf 
functional programming 
acm press 
launchbury peyton jones 
lazy functional state threads 
proc 
acm sigplan conf 
prog 
lang 
design impl pp 


data structures program transformation 
sci 
comput 
programming oct 

improving representation infinite trees deal sets trees 
programming languages systems th european symp 
programming vol 
lncs pp 

springer verlag 
meijer fokkinga paterson 
functional programming bananas lenses envelopes barbed wire 
fpca conf 
funct 
program 
lang 
comput 
arch vol 
lncs pp 
cambridge ma 

springer verlag 
nielson nielson hankin 
principles program analysis 
springer 
paulson 
ml working programmer nd ed 
cambridge university press 
schmidt 
denotational semantics 
allyn bacon 
wadler 
views way pattern matching cohabit data abstraction 
conf 
rec 
th ann 
acm symp 
princ 
prog 
langs pp 


graph catamorphisms 
talk ifip working group th meeting 
web comlab ox ac uk jeremy gibbons wg meeting minutes html jan 
