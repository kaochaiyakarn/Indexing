synthesizing distributed transition systems global specifications castellani madhavan mukund thiagarajan inria sophia antipolis route des lucioles sophia antipolis cedex france 
mail castellani sophia inria fr mathematical institute road india 
mail smi ernet 
study problem synthesizing distributed implementations global specifications 
particular characterize global transition system implemented synchronized product local transition systems 
extends number previous studies area tended strong assumptions specification terms determinacy terms information concerning concurrency 
examine difficult problem correctness implementation relation specification stated terms bisimulation isomorphism 
important step show synthesis problem solved setting implementation required deterministic 
designing distributed systems challenging task 
interactions processes introduce subtle errors system behaviour may pass undetected rigorous testing 
fruitful approach years specify behaviour system global manner automatically synthesize distributed implementation specification 
question identifying sequential specification implementation terms desired distributed architecture raised context petri nets 
ehrenfeucht rozenberg er introduced concept regions describe associate places nets states transition system 
nrt nielsen rozenberg thiagarajan regions characterize class transition systems arise elementary net systems 
subsequently authors extended characterization larger classes nets sample literature see bd wn 
focus product transition systems networks transition systems coordinate synchronizing common actions arn 
model sponsored project 
supported part brics basic research computer science centre danish national research foundation aarhus university denmark 
comes natural notion component induced notions concurrency causality 
understood theory linear time setting thi 
model basis system descriptions number model checking tools kur hol 
establish main sets results 
characterize arbitrary transition system isomorphic product transition system specified distribution actions 
characterization effective finite state specifications synthesize finite state implementation 
show obtain implementations concurrency specified terms independence relation sense mazurkiewicz trace theory maz 
realizability relationships product transition systems terms natural preorder distribution actions agents 
result subsumes morin mor synthesizing product systems deterministic specifications 
second result deals situation global specifications behaviourally equivalent necessarily isomorphic product systems 
notion behavioural equivalence strong bisimulation mil 
synthesis problem implement global transition system ts product transition system ts ts ts bisimilar 
show solve problem implementation deterministic 
notice specification may nondeterministic 
distributed systems implemented hardware digital controllers deterministic determinacy assumption natural 
solving synthesis problem modulo bisimulation general case implementation may nondeterministic appears hard 
problem expressing global transition system product component transition systems modulo bisimilarity investigated context process algebras mol mm 
gm groote moller examine decomposition techniques verification parallel systems 
results established context transition systems generated process algebra expressions 
generalizing results arbitrary unstructured finite state systems appears hard 
organized follows 
section formally introduce product transition systems formulate synthesis problem 
section characterize class transition systems isomorphic product transition systems 
subsequent section extends results context distributed implementation described independence relation 
show deterministic systems admit canonical minimal implementations 
section second main result characterizing class transition systems bisimilar deterministic product systems 
synthesis problem product transition systems labelled transition systems provide general framework modelling computing systems 
labelled transition system defined follows 
definition 
sigma finite nonempty set actions 
labelled transition system sigma structure ts set states initial state theta sigma theta transition relation 
abbreviate transition sequence form gamma 
delta delta delta gamma 
delta delta deltaa gamma 
transition system ts encounter assume state reachable initial state exists transition sequence delta delta deltaa gamma 
large class distributed systems fruitfully modelled networks local transition systems moves globally synchronized common actions 
formalize notion distributed alphabet 
definition 
distributed alphabet sigma distribution sigma tuple nonempty sets sigma sigma sigma ik sigma sigma action sigma locations set loc sigma fi sigma sigma clear context write just loc denote loc sigma 
consider distributions differ order components 
henceforth natural number denotes set kg 
definition 
sigma sigma distribution sigma ts transition system sigma product ts delta delta delta ts transition system ts sigma ik sigma 
theta delta delta delta theta theta sigma theta defined inductively ffl ffl sigma denote th component loc ts transition gamma 
gamma 
loc loc 
abbreviate product ts delta delta delta ts ts synthesis problem synthesis problem formulated follows 
ts transition system sigma sigma sigma sigma distribution sigma exist sigma implementation ts tuple transition systems hts ts ts transition system sigma product ts isomorphic ts 
example 
sigma hfa cg fb cgi distribution fa cg 
transition system sigma implementable expressions style process algebra write product bc 
similarly second transition system may implemented ac bc 
hand system right sigma implementable 
intuitively argument follows 
implementable components alphabets fa cg fb cg enabled initial state components 
occur actions occurred 
possible component second component 
transitions components product exhibit combinations giving rise system centre 
formalize argument proved results section 
characterization implementable systems characterize sigma implementable systems 
section specified assume sigma sigma sigma sigma sigma basic idea label state system tuple local states corresponding global state product system labelling function satisfies consistency conditions 
formulate labelling function terms local equivalence relations states original system states original system equivalent interpretation global states assigned labelling function agree th component 
technique similar developed independently morin restrictive class deterministic transition system specifications mor 
theorem 
transition system ts sigma implementable respect distribution sigma sigma sigma exists equivalence relation theta conditions satisfied gamma 
sigma 
ii 
iii sigma loc exist gamma 
choice exists gamma 
loc proof 
suppose ts sigma implementation ts 
exhibit equivalence relations fj conditions iii satisfied 
assume loss generality ts just isomorphic ts fact equal ts ts 
theta delta delta delta theta 
define theta follows iff 
ts product transition system clear conditions ii satisfied 
establish condition iii fix sigma suppose loc transition gamma 
clearly loc gamma 
implies gamma 

definition ts product transition system implies gamma 
loc 
suppose equivalence relations fj theta satisfy conditions iii 
def fs qg 
define transition system ts sigma follows qg gamma 
iff sigma exists gamma 
wish show ts isomorphic ts ts 
claim required isomorphism function 
show defined induction length shortest path omit details 
establish bijection 
clearly condition ii implies injective 
argue reachable steps 
proceed induction ffl basis 
ffl induction step reachable gamma steps 
consider move 
induction hypothesis exists 
implies gamma 
loc 
loc exist gamma 
condition iii choice exists gamma 
loc 
want show 
loc know suppose loc 
case gamma 
implies condition 
follows easy argue isomorphism omit details 
effective synthesis procedure observe theorem yields effective synthesis procedure finitestate specifications exponential size original transition system number components distributed alphabet 
number ways partitioning finite state space equivalence relations bounded exhaustively check choice see meets criteria iii statement theorem 
synthesis independence relations way enriching labelled transition system information concurrency equip underlying alphabet independence relation intuitively relation specifies pairs actions system executed independent 
definition 
independence relation sigma symmetric irreflexive relation sigma theta sigma distribution sigma sigma sigma induces natural independence relation sigma sigma actions independent performed nonoverlapping sets locations system 
formally sigma sigma loc loc 
example shows different distributions may yield independence relation 
example 
sigma fa dg distributions sigma hfa dg fb sigma hfa dg fb cg fb sigma hfa cg fa dg fb cg fb dg fc give rise independence relation independence relation standard distribution inducing components maximal cliques dependency relation sigma theta sigma gamma example standard distribution denoted sigma henceforth denote standard distribution sigma synthesis problem respect independence relation phrase synthesis problem terms independence relations follows 
transition system ts nonempty independence relation sigma exist implementation ts sigma implementation ts sigma induces 
show transition system admits sigma implementation admits sigma sigma implementation 
synthesis problem respect independence relations reduces synthesis problem standard distributions 
showing system implementation distribution sigma implementation coarser distribution gamma obtained merging components sigma possibly adding new ones 
definition 
sigma sigma sigma gamma gamma gamma distributions sigma sigma gamma exists sigma gamma sigma gamma say sigma finer gamma gamma coarser sigma simple observation 
proposition 
sigma gamma gamma sigma note preorder general 
fact sigma gamma means maximal elements sigma included gamma denote relation 
sigma gamma just means sigma gamma maximal elements general guarantee identical 
restricted distributions redundancies preorder 
definition 
distribution sigma sigma sigma sigma said simple implies sigma sigma proposition 
sigma gamma simple distributions sigma sigma gamma sigma gamma independence relation sigma associated standard distribution sigma simple distribution coarsest distribution inducing spectrum define finest distribution inducing follows definition 
independence relation sigma sigma theta sigma gammai distribution delta sigma defined delta ffx yg yg xg proposition 
independence relation sigma distribution delta finest simple distribution sigma induces finer distribution faithfully implemented coarser distribution 
lemma 
sigma sigma sigma gamma gamma gamma distributions sigma sigma gamma product transition system ts sigma exists isomorphic product transition system ts gamma proof 
denote index sigma gamma define ts follows 
range fq sigma range gamma fi set ts ts delta delta delta ts 
straightforward verify ts isomorphic ts omit details 
corollary 
ts transition system sigma sigma gamma distributions sigma sigma gamma ts sigma implementable gamma implementable 
independence relation sigma observed sigma coarsest distribution sigma induced independence relation coupling preceding corollary settle synthesis problem respect independence relations 
corollary 
ts transition system sigma sigma distribution sigma inducing independence relation ts sigma implementable sigma implementable 
ts implementable sigma implementable 
converse lemma true sigma gamma may case ts gamma implementable sigma implementable 
details full cmt 
canonical implementations determinacy system may sigma implementation fixed distribution sigma instance system implementations respect distributed alphabet sigma hfa dg fb ca cb 
question naturally arises exists unique minimal maximal family equivalence relations fj states theorem go 
say family fj minimal respectively maximal family fj respect ts sigma implementable respectively 
turns deterministic systems find unique minimal implementations 
transition system ts deterministic gamma 
gamma 
imply theorem 
suppose ts deterministic sigma implementable 
exists unique minimal family equivalence relations states respect ts sigma implementable 
proof 
suppose fj fj families represent sigma implementations ts 
fb intersection family definition suffices show fb represents sigma implementation ts 
definition relations fb obvious conditions ii theorem satisfied 
suppose sigma loc gamma 
means loc condition iii exists gamma 
loc 
similarly exists gamma 
loc 
ts deterministic loc 
result leads conjecture synthesis problem deterministic systems expensive computationally synthesis problem general case suffices look unique minimal family equivalence relations describe implementation 
conclude section observing deterministic system may maximal family sigma implementable 
instance system left distinct maximal implementations respect distribution hfa cg fb cgi fix cx cb ca fix cy components language equivalent 
synthesis modulo bisimulation course specifying system may accidentally destroy inherent product structure 
may happen example optimize design eliminate redundant states 
situations able reconstruct product transition system reduced specification 
synthesized system general isomorphic specification need criterion ensuring systems behaviourally equivalent 
strong bisimulation mil purpose 
general synthesizing behaviourally equivalent product implementation reduced specification appears hard problem 
section show solve problem reduced specifications implemented deterministic product transition systems global transition system generated implementation deterministic 
notice specification may nondeterministic 
distributed systems implemented hardware digital controllers deterministic characterization yields synthesis result large class useful systems 
recalling definition bisimulation 
definition 
bisimulation pair transition systems ts ts relation theta gamma 
exists gamma 
gamma 
exists gamma 
synthesis problem modulo bisimilarity synthesis problem modulo bisimilarity formulated follows 
ts transition system sigma sigma sigma sigma distribution sigma exist product system ts sigma ts bisimilar ts 
settle question deterministic implementations need consider product languages 
languages ts transition system sigma language ts set ts sigma consisting labels runs ts 
words ts fw gamma 
qg 
notice ts prefix closed contains empty word 
ts regular ts finite 
rest section assume transition systems encounter finite 
product languages sigma sigma sigma sigma distribution sigma sigma sigma denote projection sigma obtained erasing letters belong sigma language product language sigma language sigma fw sigma deterministic transition systems bisimilarity coincides language equivalence 
show extend result get simple characterization transition systems bisimilar deterministic product transition systems 
recall basic definition 
bisimulation quotient ts transition system ts largest bisimulation relation ts 
relation ts defines equivalence relation denote ts equivalence class containing bisimulation quotient ts transition system ts ts qg 
exist gamma 
main result section 
theorem 
ts transition system sigma sigma distribution sigma system ts bisimilar deterministic product transition system sigma iff ts satisfies conditions 
bisimulation quotient ts ts deterministic 
language ts product language sigma prove theorem recall basic connection product languages product systems thi 
lemma 
ts fw sigma ts need useful fact product language product projections thi 
lemma 
sigma sigma sigma sigma distribution sigma fw sigma lg 
product language iff fw sigma notice lemma yields effective procedure checking finitestate transition system accepts product language distribution sigma sigma construct finite state system ts ts sigma verify ts ts 
state proof elementary facts bisimulations 
lemma 
ts deterministic transition system 
ts ts deterministic 
ii ts ts deterministic transition systems sigma ts ts ts bisimilar ts 
iii ts ts bisimilar transition systems 
ts ts ts ts isomorphic 
ts ts 
prove parts theorem 
lemma 
suppose transition system ts bisimilar deterministic product transition system 
ts ts deterministic ts product language 
proof 
ts ts deterministic product transition system ts bisimilar ts 
lemma iii ts ts 
ts product language follows ts product language 
check ts ts deterministic observe ts ts deterministic lemma 
part iii lemma ts ts isomorphic ts ts ts ts deterministic 
lemma 
ts transition system sigma sigma distribution sigma ts ts deterministic ts product language sigma ts bisimilar deterministic product transition system sigma proof 
sigma sigma sigma fw sigma ts know regular prefix closed language contains empty word 
construct minimal deterministic finite state automaton recognizing contains empty word consider restricted transition relation 
theta sigma theta 
easy verify transition system ts deterministic transition system ts consider product ts ts lemma tell ts fw sigma lemma follows ts ts 
claim ts bisimilar ts 
consider quotient ts ts ts ts ts deterministic ts ts ts ts 
lemma ii case ts ts bisimilar ts 
transitivity ts bisimilar ts 
standard automata theory derive result theorem 
corollary 
finite state transition system ts distributed alphabet sigma effectively decide ts bisimilar deterministic product system sigma synthesis problem modulo bisimilarity appears quite bit difficult product implementation permitted nondeterministic 
characterization class systems bisimilar nondeterministic product systems cmt 
characterization phrased terms structure execution tree obtained unfolding specification 
unfortunately execution tree may infinite characterization effective initial specification finite state 
difficulty lies bounding number transitions product implementation collapse bisimulation single transition specification 
arn arnold finite transition systems semantics communicating sytems prentice hall 
bd badouel ph 
darondeau theory regions 
lectures petri nets basic models lncs 
cmt castellani mukund thiagarajan characterizing decomposable transition systems internal report mathematical institute 
er ehrenfeucht rozenberg partial structures part ii state spaces concurrent systems acta inf 

gm groote moller verification parallel systems decomposition proc 
concur lncs 
hol holzmann model checker spin ieee trans 
software engineering 
kur kurshan computer aided verification coordinating processes automata theoretic approach princeton university press 
maz mazurkiewicz basic notions trace theory de bakker de roever rozenberg eds linear time branching time partial order logics models concurrency lncs 
mil milner communication concurrency prentice hall london 
mol moller axioms concurrency ph thesis university edinburgh 
mm moller milner unique decomposition processes theor 
comput 
sci 

mor morin decompositions asynchronous systems proc 
concur lncs 
mukund petri nets step transition systems int 

comput 
sci 

nrt nielsen rozenberg thiagarajan elementary transition systems theor 
comput 
sci 

thi thiagarajan trace consistent subset ptl proc 
concur lncs 
wn winskel nielsen models concurrency abramsky gabbay maibaum eds handbook logic computer science vol oxford 
