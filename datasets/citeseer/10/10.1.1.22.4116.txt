simos machine simulator study complex computer systems mendel rosenblum edouard bugnion scott devine stephen herrod computer systems laboratory stanford university simos environment studying hardware software computer systems 
simos simulates hardware computer system detail boot commercial operating system run realistic workloads top 
identifies challenges machine simulators simos overcome order effectively analyze large complex workloads handling long workload execution times collecting data effectively 
study long running workloads simos includes multiple interchangeable simulation models hardware component 
selecting appropriate combination simulation models user explicitly control tradeoff simulation speed simulation detail 
handle large amount low level data generated hardware simulation models simos contains flexible annotation event classification mechanisms map data back concepts meaningful user 
simos extensively study new computer hardware designs analyze application performance study operating systems 
include case studies demonstrate low level machine simulator simos study large complex workloads 
categories subject descriptors computer systems organization performance systems hardware memory structures performance analysis design aids additional key words phrases computer architecture computer simulation computer system performance analysis operating systems 
simos machine simulation environment designed study large complex computer systems 
simos differs simulation tools simulates complete hardware computer system 
contrast environments simulate portions hardware 
result simulate portions system software 
simos developed part stanford flash project funded arpa dabt 
mendel rosenblum partially supported nsf young investigator award 
bugnion steve herrod supported part nsf graduate fellowships awards 
steve herrod currently holds intel foundation graduate fellowship 
authors addresses computer systems laboratory stanford university stanford ca www flash stanford edu simos mail mendel bugnion devine herrod cs stanford edu permission digital hard copy part personal classroom granted fee provided copies distributed profit commercial advantage copyright notice title publication date appear notice copying permission acm copy republish post servers redistribute lists requires prior specific permission fee 
acm acm transactions modeling computer simulation vol 
january pages 
simos machine simulator simos simulates computer hardware sufficient speed detail run existing system software application programs 
example current version simos simulates hardware multiprocessor computer systems detail boot run study silicon graphics irix operating system application runs parallel compilation commercial relational database systems 
simulating machines hardware level allowed simos wide range studies 
computer architects evaluate impact new hardware designs performance complex workloads modifying configuration timing model simulated hardware components 
operating system programmers develop software environment provides interface target hardware advantage system visibility repeatability offered simulation environment 
application programmers simos gain insight dynamic execution behavior complex workloads 
user collect detailed performance analysis metrics instruction execution memory system stall interprocessor communication time 
machine simulation established technique traditionally limited small system configurations 
simos enables study complex workloads addressing particularly difficult challenges 
challenge achieve simulation speed needed execute long running workloads 
sufficient speed machine simulators produce voluminous performance data 
second challenge effectively organize raw data ways meaningful user 
address challenge simos includes high speed machine emulation techniques accurate machine simulation techniques 
emulation techniques binary translation simos execute workloads times slower underlying hardware 
allows user position workload interesting execution state switching detailed model collect statistics 
example emulation boot operating system run database server reaches steady execution state 
simos dynamically switch emulation simulation techniques allowing user study portions long running workloads detail 
address second challenge simos includes novel mechanisms mapping data collected hardware models back concepts meaningful user 
just hardware computer system little knowledge process user transaction executing hardware simulation models simos unable attribute execution behavior back concepts 
simos uses flexible mechanism called annotations build knowledge state software executed 
annotations user defined scripts executed hardware events particular interest occur 
scripts nonintrusive access entire state machine control classification simulation statistics 
example annotation put context switching routine operating system allows user determine acm transactions modeling computer simulation vol 
january 
rosenblum currently scheduled process separate execution behavior different processes workload 
article describes solution challenges 
overview simos section 
section describes interchangeable hardware simulation models simulate complex workloads 
section describes data collection classification system 
section describe experiences simos case studies 
section discuss related techniques studying complex systems 
conclude section 
simos environment simos project started attempt build software simulation environment capable studying execution behavior operating systems 
simos features follow directly goal 
study behavior operating system simos designed complete machine simulator hardware machine simulated detail run actual operating system application workloads 
furthermore large complex nature operating systems required simos include multiple interchangeable simulation models hardware component dynamically selected time simulation 
rest section brief overview features simos 
readers interested implementation details refer previous papers simos rosenblum embra witchel rosenblum thorough discussion simulation techniques 
interchangeable simulation models complete machine simulation discussed section introduced rosenblum 
describes detail implementation simos original approach high speed emulation direct execution 
embra simos current approach high speed emulation binary translation described detail witchel rosenblum 
complete machine simulation despite name simos model operating system application software models hardware components target machine 
shown simos contains software simulation hardware components modern computer systems processors memory management units mmu caches memory systems devices scsi disks ethernets hardware clocks consoles 
simos currently simulates hardware mips multiprocessors detail boot run essentially unmodified version commercial operating system silicon graphics irix 
order run operating system application programs simos simulate hardware functionality visible software 
example simulation model cpu capable simulating acm transactions modeling computer simulation vol 
january 
fig 

simos environment 
simos machine simulator execution mips cpu instructions including privileged instructions 
provide virtual address physical address translations done memory management unit mmu 
mips architecture means implementing associative lookup translation lookaside buffer tlb including raising relevant exceptions translation fails 
simos models behavior devices responding uncached accesses cpu interrupting cpu request completed performing direct memory access dma 
devices useful emulation requires communication host devices 
example scsi disk simulator reads writes blocks file host machine file system making possible transfer large amounts data simulated machine creating appropriate disk image file 
similarly console network devices connected real terminals networks allow user interactively configure workloads run simulator 
complete machine simulation approach differs approach generally simulation systems studying application programs 
application level simulators designed run operating system need simulate portion hardware interface visible user level programs 
example mmu visible application programs modeled application level simulators 
complete machine simulators perform mmu lookup instruction 
requires additional complete machine simulators advantages described section 
interchangeable simulation models additional needed complete machine simulation simos includes set interchangeable simulation models hardware component system 
models self contained software implementation device functional behavior 
models implement behavior hardware components sufficient detail correctly run operating system application programs acm transactions modeling computer simulation vol 
january 
rosenblum models differ greatly timing accuracy interleaving multiprocessor execution statistics collected simulation speed 
furthermore user dynamically select model hardware component time simulation 
model supports ability transfer state models hardware component 
example different mips cpu models transfer contents register file translation lookaside buffer 
show section ability switch models different simulation speed detail critical studying large complex workloads 
complete machine simulation system model components computer system 
components play determining factor speed simulation 
processors memory hierarchy account bulk simulation costs 
rest section summarize implementation techniques simos model critical components 
high speed machine emulation models 
support high speed emulation mips processor memory system simos includes embra witchel rosenblum 
embra uses dynamic binary translation approach pioneered shade system cmelik keppel 
dynamic binary translators translate blocks instructions code sequences implement effects original instructions simulated machine state 
translated code executed directly host hardware 
sophisticated caching translations optimizations results executing workloads slowdown factor 
orders magnitude faster conventional simulation techniques 
embra extends techniques shade support complete machine simulation 
extensions include modeling effects unit mmu privileged instructions trap architecture machine 
approach embra handle extensions additional code incorporated translations 
example embra generates code implements associative lookup done mmu memory 
embra extends techniques shade efficiently simulate multiprocessors 
speed second advantage dynamic binary translation flexibility customize translations accurate modeling machine 
example embra augment emitted translations check instruction data accesses hit simulated cache 
result simos generate estimates instruction execution memory stall time workload slowdown factor 
detailed machine simulation models 
embra self generated self modifying code allows simulate high speeds techniques easily extended build detailed accurate models 
build models conventional software acm transactions modeling computer simulation vol 
january 
simos machine simulator engineering techniques value clean defined interfaces ease programming simulation speed 
simos contains interfaces supporting different processor memory system device models 
simos contains accurate models different processor pipelines 
called mipsy simple pipeline blocking caches mips 
second called mxs bennett flynn superscalar dynamically scheduled pipeline nonblocking caches mips 
models vary greatly speed detail 
example mxs order magnitude slower mipsy significantly complex pipeline 
mipsy mxs drive arbitrarily accurate memory system models 
simos currently supports memory system models bus memory system uniform memory access time simple cache coherent nonuniform memory architecture cc numa memory system cycle accurate simulation stanford flash memory system 
device simulation simos includes detailed timing models common devices scsi disks interconnection networks ethernet 
example simos includes validated timing model hp scsi disk kotz 

simos simulate complex workloads complete machine simulation simos appear odds goal studying large complex workloads 
simulating hardware level means simos significant amount study complex workload 
experience complete machine simulation simplify study complex workloads 
furthermore exploiting speed detail tradeoff interchangeable hardware models simos run workloads excessively long simulation time 
rest section describe features simos support study complex workloads 
benefits complete machine simulation complete machine simulation resource intensive advantages ease flexibility visibility studying complex workloads 
simos provides interface target hardware run essentially unmodified version commercial operating system 
operating system turn run exact applications run target system 
setting workload straightforward 
simply boot operating system top simos copy files needed workload simulated system start execution workload 
contrast application level simulators generally study complex workloads need emulate significant fraction operating acm transactions modeling computer simulation vol 
january 
rosenblum system functionality simply run workload 
emulation task complex complete machine simulation approach 
example simos study complex multiprogrammed workloads parallel compilation client server transaction processing database 
able simply copy necessary programs data files existing machine runs workloads 
changes application software simulator required 
simos flexible configured model entire distributed systems 
example studied file servers simulating time machine running file server software client machines local area network connecting 
possible study entire distributed system realistic request patterns generated clients 
certainly limits far approach scale able simulate tens machines able study hundreds machines 
software simulation number additional advantages simos 
software simulation models significantly easier change real hardware machine 
possible study effects changes hardware 
secondly simulating entire machine low level provides simos excellent visibility system behavior 
sees events occur system including cache misses exceptions system calls regardless part system caused events 
exploiting speed detail tradeoff simos complete machine simulation tends consume large amounts resources 
furthermore complex workloads tend run long periods time 
fast simulation technology required study workloads 
example study commercial data processing workload described section required execution tens billions simulated instructions boot operating system start database server client programs 
executing instructions simulator level detail needed study taken weeks simulation time reach interesting execution state 
simos addresses problem exploiting inherent tradeoff simulation speed simulation detail 
simos interchangeable simulation models chooses different tradeoff simulation speed detail 
combination models particular emulation mode rough characterization mode accurate mode 
emulation mode 
indicated positioning complex workload usually requires simulating large amounts uninteresting execution booting operating system reading data disk initializing workload 
furthermore issues memory fragmentation file system buffer caches large effect workload execution 
effects freshly booted operating system acm transactions modeling computer simulation vol 
january 
simos machine simulator appear prolonged system 
realistic studies require executing past cold start effects steady state representative real system 
position workload simos configured run workload fast possible 
refer configuration emulation mode implementation shares common emulation techniques simulation techniques 
requirement correctly execute workload statistics workload execution required 
emulation mode uses embra configured model hardware components system necessary correctly execute workload 
attempt keep accurate timing model hardware features invisible software cache hierarchy processor pipelines 
devices disks configured instantaneously satisfy requests avoiding time required simulate execution operating system idle loop 
enable high speed emulation multiprocessors embra run multiple parallel processes process simulates disjoint set processors 
embra highly effective additional processors achieving linear superlinear speedups simulation witchel rosenblum 
embra able optimization emulation mode require separate simulated processors notions time closely synchronized 
parallel embra scheduler host multiprocessor impact interleaving simulated processors 
final machine state guaranteed set possibilities feasible timing assumptions code execution 
note simulation deterministic different simulation executions result different final machine states 
practice operating system application software execute correctly independently actual interleaving instructions executed 
result reached machine states temporally inaccurate functionally plausible starting point accurate simulation models 
early versions simos contained emulation mode direct execution operating system applications rosenblum 
direct execution frequently position workloads removed favor binary translation approach 
specifically binary translation amenable cross platform support direct execution mode 
rough characterization mode 
speed emulation mode useful positioning setup workloads lack timing model unsuitable uses 
gain insight workload behavior simos supports rough characterization mode maintains high simulation speed provides timing estimates approximate behavior machine 
example rough characterization mode includes timing models track instruction execution acm transactions modeling computer simulation vol 
january 
rosenblum memory stall device behavior times slower emulation mode 
rough characterization mode commonly ways 
perform high level characterization workload order determine order bottlenecks 
example determine workload paging bound disk suffering large amounts memory system stall 
simulation speed rough characterization speed similar emulation mode examine workload relatively long periods simulated time 
second common rough characterization determine interesting parts workload studied greater detail accurate simulators 
rough characterization provides information determine interesting points focus detailed modes 
example rough characterization mode bugnion 
benchmark programs study required far execution time run entire program accurate simulation modes 
rough characterization mode run program completion 
observed benchmarks study regular execution behavior 
allowed study limited representative execution windows 
having rough characterization entire benchmark gave confidence selected window workload studied accurate mode representative benchmark 
rough characterization mode uses embra configured model simple cpu pipeline large unified instruction data cache second level cache mips 
memory system models fixed delay cache devices realistic timing model 
example scsi disk models seek rotation transfer times 
mode gives estimates instruction memory system behavior behavior workload 
accurate mode 
accurate simulation mode tries model hardware configuration accurately possible 
detail configurations lead simulation speeds slow workload positioning 
goal accurate mode collect detailed statistics workload execution behavior 
essentially results reported studies simos generated accurate mode 
mode mipsy mxs processor models study performance simple processor pipeline dynamically scheduled processor 
complexity dynamically scheduled processor models mxs simulate order instructions second run current machines 
slow simulation speed takes long time simulation warm state cache hierarchy 
generally mipsy acm transactions modeling computer simulation vol 
january 
simos machine simulator order magnitude faster warm caches switching mxs 
simos includes detailed gate level models hardware components flash machine 
unfortunately models detailed simulation speed limited simulated cycles second 
slowdowns simulating single transaction database workload infeasible 
study workloads random sampling techniques switch different levels detail 
allows statistical analysis estimate behavior detailed models execution workload 
sampling switch mipsy mxs processor models 
example architectural studies sampled executed cycles mxs running remainder faster mipsy wilson 

data collection mechanisms low level machine simulators simos great advantage see events happen simulated system 
events include execution instructions mmu exceptions cache misses cpu pipeline stalls 
accurate simulation models simos heavily instrumented collect event counts timing information describing simulated machine execution behavior 
unfortunately studying complex systems collecting data presents problems 
data generated low hardware level high rate 
low hardware level data collected problematic user needs assign costs higher level concepts processes transactions known hardware 
example tracking memory stalls physical memory address useful mapping physical address back virtual address process studied known 
memory stalls recorded virtual address difficult determine process correspond multiprogrammed workload 
mapping events higher level concepts important studying behavior hardware 
example cycles instruction cpi processor useful metric computer architects instructions factored executed operating system idle loop 
classification events simos complicated high rate data generated 
classification recording mechanism efficient performance simulation suffer 
address challenges simos data classification mechanisms need customized structure workload studied exact classification desired 
tcl scripting language interpreter ousterhout embedded simos accomplishes simple flexible way 
users simos write tcl scripts interact closely acm transactions modeling computer simulation vol 
january 
rosenblum fig 

data collection simos 
hardware simulation models control data recording classification 
scripts probe state simulated machine classification decisions state workload 
scripting language allows users customize data collection having modify simulator 
rest section describe data recording classification mechanism simos 
illustrates architecture mechanisms 
hardware events recorded different buckets 
trigger annotation scripts control bucket selector points 
example events recorded occurred user kernel idle mode 
detail tables classify events instruction data addresses cause 
event filter generates additional set events characterize memory system behavior 
tcl language extended concept annotations tcl scripts allow simulator efficiently track state workloads 
annotations described section 
allow highly efficient recording data simos supports selectors detail tables described section 
section presents event filter mechanism simos 
annotations annotations key mapping low level events higher level concepts 
annotations tcl scripts user attach specific hardware events 
event occurs annotation attached associated tcl code executed 
annotations run effect execution simulated system 
annotations access entire state simulated machine including registers tlbs devices caches memories 
furthermore annotations acm transactions modeling computer simulation vol 
january 
simos machine simulator access symbol table kernel applications running simulator allowing symbolic procedures data 
annotations user simos build higher level knowledge workload execution simulator 
example reading data structures simulated machine operating system kernel annotation discover process id currently running process 
information annotation classify data process id examples simulated hardware events annotations set include execution reaching particular program counter address 
type annotation invoked processor executes instruction particular virtual address 
address kernel address space context particular user application 
simos access symbol information executable program counter values specified symbolically 
referencing particular data address 
annotations similar debugger set virtual addresses 
invoked memory location specified range read written 
program counter annotations data structure annotations specified symbols application studied 
data address annotations useful debugging data corruption problems 
occurrence exception interrupt 
annotations set types traps interrupts 
example annotations system call exception order classify behavior operating system system services provides 
execution particular opcode 
annotations may set particular opcodes classes opcodes 
example mips architecture rfe return exception exception return instruction executed return exception 
annotations set instructions allow simos efficiently track processor kernel user mode 
reaching particular cycle count 
annotations triggered specified number simulation cycles typically periodically output statistics 
annotations may trigger events correspond higher level concepts 
mechanism define annotation types triggered software events 
example annotation operating system context switching code triggers context switch event may interest user studying application program 
user determine process active having directly instrument operating system gather information 
annotations efficiently implemented emulation mode 
embra program counter annotations implemented generating custom translations annotated program counter addresses invoke acm transactions modeling computer simulation vol 
january 
rosenblum fig 

process tracking tcl script 
tcl interpreter 
program counter addresses annotations set call tcl interpreter overhead annotations 
shows example annotations build higher level knowledge operating system simulator 
state machine driven program counter annotations set addresses kernel text 
script raises level abstraction system events include operating system events 
client modules install annotations process process 
symbol tcl command added simos symbolically accesses data structures simulated machine 
variable operating system gives access process table entry current process 
group program counter annotations kernel context switching code track currently scheduled process cpu 
annotations set process management system calls context switching code kernel idle loop 
tcl array maintains current process id pid process name processor 
process tracking module generate performance data directly modules attribute events specific processes 
developed large set annotations build knowledge state irix 
includes scheduling synchronization virtual memory system call behavior 
annotations clearly dependent acm transactions modeling computer simulation vol 
january 
simos machine simulator target operating system 
simos remains free operating system dependency 
porting operating system simos mips architecture requires rewriting portions tcl scripts 
event classification place annotations hardware event count tcl frequency events occur faster simulators simos slow 
avoid spending time tcl interpreter annotations control frequent events recorded having events invoke annotations 
shown hardware events processed event classifier selector detail table recorded data collection buckets 
selector mechanism tcl scripts control set predefined buckets record events 
annotation set selector point particular bucket subsequent events bucket 
model buckets correspond different phases workload annotations set events signal start new phase 
detail tables selectors target bucket computed address event 
address current value program counter address memory access 
detail tables allow events classified code data caused 
shows selector mechanism separate execution workload basic modes correspond execution user level kernel kernel synchronization routines kernel idle loop 
left side shows tcl source implement processor tracking functionality 
script implements state machine processor 
state machine shown top right 
state machine controls setting selector shown bottom right 
source code simplified include annotations define synchronization 
annotations placed exceptions return exception opcode start idle function kernel synchronization routines direct statistics bucket corresponding current mode 
event classification mechanisms simos lend efficient implementation 
accessing counter associated event requires simple pointer dereference 
common case tcl interpreter invoked 
annotations need placed events change selector point new bucket 
practice occurs infrequently 
detail tables implemented similarly bucket determined automatically function address event 
acm transactions modeling computer simulation vol 
january 
rosenblum fig 

processor mode tracking 
event filters event classification mechanisms simos control recording hardware events frequently sufficient know event occurred cause event needed 
example memory stall caused cache misses shared memory multiprocessor 
knowing code data structure suffered cache misses necessarily tell programmer cache misses necessary avoided 
address problem simos provides mechanism installing filters hardware event stream provide additional information events 
illustrates state machine example filter classifying cache misses suffered memory location 
simos instantiates state machine cache line processor 
point time line processor cache 
bold lines represent cache misses 
dotted lines represent transitions occur line removed processor cache cache line invalidated 
misses classified cold replacement invalidation misses 
particular memory block particular processor classified cold replacement misses occur result limited capacity associativity cache 
replacement misses consist conflict capacity misses 
invalidation misses result cache coherency protocols indication interprocessor communication 
filter conjunction detail tables associate memory stalls particular pieces code data structures valuable parallel application developers 
cold misses typically acm transactions modeling computer simulation vol 
january 
fig 

cache classification 
simos machine simulator unavoidable replacement misses eliminated restructuring data structures eliminate conflict misses due limited associativity cache 
excess invalidation misses may indicate better control interprocessor communication needed 
help programmers simos supports second filter classifies cache misses true false sharing types defined dubois 
misses classified true sharing data communicated processors 
false sharing typically occurs different processors read write different portions particular cache line 
false sharing byproduct cache coherence protocol occurs cache line invalidated cache actual data communication takes place application 
state machine simos tracks cache misses data 

experience simos simos contexts including investigation new architectural designs wilson development hive operating system chapin rosenblum various performance studies operating systems rosenblum verghese applications bugnion 
section presents case studies illustrate different features simos utilized 
case study operating system characterization simos characterize irix operating system predict impact architectural trends performance rosenblum 
simos critical component study reasons 
required realistic workloads stressed operating system significant ways toy applications microbenchmarks drive operating system realistically provide accurate picture operating system performance 
second irix operating sys acm transactions modeling computer simulation vol 
january 
rosenblum fig 

processor mode breakdown 
tem large complex multithreaded 
needed flexible data characterization mechanism help sense wealth information generated 
fact data collection mechanisms simos developed study 
third goal study analyze behavior operating system machines appear years 
flexibility complete machine simulation allowed model hardware platforms available 
stress operating system realistic ways picked workloads traditionally run workstations shared memory multiprocessors commercial database workload program development workload engineering simulation workload 
configured simos simulate machine mb ram processors 
step preparing workloads position fast emulation mode 
included booting operating system running initialization phases applications 
ensured system run long get past cold start effects due operating system boot 
workloads initialized interesting point simos checkpointing facility transfer entire machine state simulation models set files 
checkpoint contained software visible machine state including contents physical memory registers state devices 
single checkpoint restored multiple different hardware configurations characterization modes 
restored checkpoints ran completion rough characterization mode employing annotations shown 
gave temporal characterization workload allowed pinpoint interesting sections 
shows examples rough characterization results workloads 
shows execution profile program development workload left engineering workload right running cpu multiprocessor 
execution time processor broken kernel synchronization user idle modes 
user kernel modes graph acm transactions modeling computer simulation vol 
january 
fig 

timing decomposition 
simos machine simulator separates time spent executing instructions time stalled memory system 
breakdown averaged processors determined millisecond time step 
accurate simulation modes configured model generation hardware collect relevant statistics 
checkpoints crucial process able replay exact workload different hardware models 
allowed fair comparison operating system performance machines typical appear 
annotation mechanism simos allowed analyze execution kernel different ways 
way particularly interesting classify kernel execution time service kernel providing user level processes 
services include various system calls virtual memory fault processing exceptions interrupt processing 
key advantage decomposition allowed compare performance service workloads architectures 
services share subroutines common execution paths impossible decomposition solely program counter addresses 
generating decomposition required extensive annotations selectors 
insufficient simply put annotations entry exit kernel 
interrupt processing services nested services 
furthermore certain services example waiting operation complete 
solution set annotations operating system code track service currently executing 
set annotations exceptions synchronization routines scheduler idle loop 
functions annotations tracked interrupts processes flexibility tcl arrange buckets tree structure shown 
complete breakdown workload execution easily obtained timing mechanism provided simos 
acm transactions modeling computer simulation vol 
january 
rosenblum example system currently performing synchronization action fork system call 
selector attribute current events particular node tree differentiating execution synchronization routines acting behalf fork acting behalf clock interrupt 
time box useful feature 
extra state tree allows track latency service including effects context switches occur execution 
tree structure enabled discriminate various kernel services decompose service components synchronization time spent 
collecting data tree form possible defer analysis data postprocessing phases 
example tree possible compute fraction time spent fork system call waiting kernel synchronization 
possible compute total kernel synchronization time summing sync buckets 
order point selector right bucket tree annotations set maintain notion current service processor 
handle case nested services current service kept stack 
service starts annotation pushes new service stack current service 
service ends annotation removes stack 
process point execution service annotations maintain separate stack process 
result current state system represented array stacks execution behavior workload represented tree buckets 
breakdown kernel services important study allowed compare performance services different workloads number processors generations hardware 
example observed differences performance improvements different services architectural trends 
observed operating system services multiprocessor workloads consumed time uniprocessor counterparts 
type decomposition easily extended include aspect kernel performance 
fact type decomposition useful developed general mechanism separate execution workload including application programs different phases 
experiences shown form user defined decomposition useful simple procedural breakdown offered conventional profilers 
case study suif parallelizing compiler simos study automatically parallelized applications generated suif research parallelizing compiler wilson 
approached suif group achieving performance expected applications unable identify source performance problems tools available acm transactions modeling computer simulation vol 
january 
simos machine simulator 
simos able discover sources problems suggest performance improvements 
implementing performance improvements suggested ran suif generated applications high multiprocessor measured highest spec fp ratio reported date bugnion 
simos supports irix workload preparation simple 
compiled suif applications silicon graphics workstation copied executables input files simulated multiprocessor disk 
modifications applications required 
employed simos emulation mode quickly boot operating system position workload 
process including boot irix took minutes simulation time 
avoid excessive simulation time due long execution times spec fp benchmarks order couple minutes today fastest machines rough characterization mode pinpoint portions execution representative workload 
ran portions accurate models 
simos able identify performance problems suggest solutions 
regular structure suif generated applications easy annotate 
suif generates sections parallel code interleaved sections sequential setup code 
annotations set parallel sections sequential sections synchronization routines 
coupled selectors annotations separated useful execution compiler added administration synchronization overheads 
annotations allowed quantify different sources overhead barrier synchronization load imbalance 
able determine fine granularity parallelism exploited suif compiler resulting large overheads due barrier synchronization parallel section 
optimized barrier code compiler run time system significantly improving performance applications 
true sharing false sharing cache classification filter described section study application communication patterns 
classification striking behavior nasa benchmarks 
simos reported cache misses primary matrix computation due false sharing 
modifying compiler align shared data structures cache line boundaries able completely eliminate false sharing 
simos cache statistics generated rough characterization mode indicated conflict misses problem applications spec fp benchmark 
annotations placed cache misses able collect information physical addresses frequently lines 
information determined page mapping policy operating system led inefficient utilization cache parallel execution 
led develop new algorithm significantly improve performance compiler acm transactions modeling computer simulation vol 
january 
rosenblum parallelized applications 
ability simos precisely locate quantify cache misses instrumental development algorithm 
complete information regarding study see bugnion 

related section compare simos tools studying computer systems 
specifically focus relevant features simos including complete machine simulation study complex workloads exploitation high speed simulation technology flexible event classification mechanisms 
simulation widely study computer systems simulators include effects operating system execution 
operating system usually ignored treated having important impact particular study 
example tools deal virtual addresses avoiding difficulties address translation 
charge fixed cost system calls include timing cache pollution effects 
techniques studying complete machines simos approach complete machine simulator study complex multiprogrammed workloads differs tools 
tools typically instrumentation system collect trace behavior processed extract useful information 
involves running workload interest system modified record trace 
trace generated software systems atom eustace srivastava borg lebeck wood chen perl sites pixie smith proteus brewer paradyn miller goldschmidt hardware monitor done dash chapin torrellas bach 
popularity instrumentation approaches attests wide applicability relative ease implementation 
challenges facing simos instrumentation approaches 
example instrumentation generally fast workload positioned instrumentation turned 
instrumentation works long periods execution limited events need collected trace 
simos number advantages instrumentation approach including complete event coverage 
care taken instrumentation avoid missing important events 
example binaries fully instrumented execute correctly see cmelik keppel brewer goldschmidt miller veenstra 
acm transactions modeling computer simulation vol 
january 
simos machine simulator generate complete event stream 
furthermore bus monitors events collected hardware monitor visible 
similarly intrusiveness problem instrumentation systems 
software instrumentation requires rewriting existing applications resulting application larger longer running original form 
result events generated may match occurs application execution 
hardware instrumentation typically intrusive factor generates excessive data manipulated workload execution 
interesting techniques study systems include ecc bits main memory track cache misses done wisconsin wind tunnel reinhardt interrupt profiling prof silicon graphics chip counters chen 
techniques provide way study details workload running system lack flexibility complete system simulation 
high speed simulation simos approach high speed instruction set simulation study system behavior number different projects 
example statically generates application examine behavior multicomputer 
shade cmelik keppel magnusson werner special compilation code caching techniques run optimized instruction set simulation directly host platform 
systems share advantages software simulation full event coverage model complete hardware machine study operating systems multiprogrammed workloads 
addition simulation studies technology applied domain cross platform software emulation insignia software sun microsystems 
flexible event classification mapping low level machine events back higher level concepts problem faced practically tools studying systems 
instrumentation systems capture events interest include information workload order map events cause 
example chapin monitor capture reached memory bus 
operating system altered output uncached recorded necessary information workload 
martonosi martonosi support classification cache misses occur execution application map misses back data structures caused 
event classification occur concurrently event generation 
acm transactions modeling computer simulation vol 
january 
rosenblum example tango lite goldschmidt mint veenstra include cache models categorize memory events arrive provide timing feedback event generator 
particularly interesting example interaction event generation processing paradyn miller 
execution application paradyn recognizes troublesome sections code directs event generation mechanism code annotator produce detailed events processing 
result simulator generates events needed reducing simulation time 
recognizes differing levels detail may implemented run time code generation gathering amount detail desired user 
simos event classification mechanisms borrow approaches 
incorporate cache classification exploit speed detail tradeoff way similar paradyn 
simos employs dynamic post run event classification 
event interest sent real time separate event processing component 
user observe workload behavior occurs dynamically adjusting event collection desired 
addition core event counts periodically saved log file allow examining aspects workload execution requiring entire simulation re executed 
events appropriately classified data effectively user 
simos event classification mechanisms quite mature visualization tools refined performance analysis tools reed 
address deficiency major area simos research concentrate interfaces visual metaphors effective presentation processed event information 

combining increasing power today computers advances high speed machine simulation shown entire computer systems effectively studied low level machine simulators 
simos successfully wide range researchers computer architects studying processor pipeline micro architecture programmers building transaction processing database systems 
flexibility system visibility simos particularly useful operating system researchers 
key features simos critical studying complex systems 
key feature explicit speed detail tradeoff offered interchangeable simulation models 
enabled simos speed position complex workloads accuracy study detail 
points speed detail tradeoff curve particular interest 
emulation mode focuses simulation speed position workloads detailed study 
rough characterization mode provides estimates workload performance relatively high speeds 
acm transactions modeling computer simulation vol 
january 
accurate mode collection detailed simulation models generate final performance data 
second key feature simos ability flexibly map low level machine events generated simulator abstractions meaningful user 
accomplish simos uses tcl scripting language extended annotations selectors detail tables 
user download tcl scripts simos control simulator data collected data classified 
ultimately value tool simos measured studies enables 
measure simos successful 
simos freely available source form research community number academic industrial research efforts 
acknowledgments authors rest stanford flash os group contributions simos users developers 
witchel embra original developer contribution simos lasted longer stay group 
simos machine simulator 
fast accurate multicomputer simulation 
proceedings acm sigmetrics conference measurement modeling computer systems may 
bennett flynn 
performance factors superscalar processors 
tech 
rep csl tr stanford university 
borg kessler wall 
long address traces risc machines generation analysis 
tech 
rep dec western research laboratory 
brewer dellarocas weil 
proteus high performance parallel architecture simulator 
tech 
rep mit lcs tr mit 
bugnion anderson mowry rosenblum lam 
page coloring multiprocessors 
proceedings seventh international conference architectural support programming languages operating systems oct 
metcalfe nottingham visual tools unlock peak performance 
web site www cray com public product info sw pe html 
chapin herrod rosenblum gupta 
memory system performance unix cc numa multiprocessors 
proceedings joint international conference measurement modeling computer systems sigmetrics performance may 
chapin rosenblum devine lahiri gupta 
hive fault containment shared memory multiprocessors 
proceedings fifteenth acm symposium operating systems principles dec 
chen 

execution driven simulator studying parallel systems 
ph thesis university illinois urbana champaign 
chen endo chan mazieres dias smith 
measured performance personal computer operating systems 
proceedings fifteenth acm symposium operating systems principles dec 
cmelik keppel 
shade fast instruction set simulator execution profiling 
proceedings acm sigmetrics conference measurement modeling computer systems 
acm transactions modeling computer simulation vol 
january 
rosenblum dubois 
detection elimination useless misses multiprocessors 
proceedings twentieth international symposium computer architecture may 
eustace srivastava 
atom flexible interface building high performance program analysis tools 
proceedings winter usenix technical conference unix advanced computing systems jan 
goldschmidt 
simulation multiprocessors accuracy performance 
ph thesis stanford university 
archibald ripley flanagan nelson 
bach hardware monitor tracing microprocessor systems 



insignia software 
product information 
web site www insignia com 
miller 
mapping performance data high level data views parallel program performance 
proceedings international conference supercomputing may 
kotz toh radhakrishnan 
detailed simulation hp disk drive 
tech 
rep pcs tr dartmouth college 
heinrich simoni gharachorloo chapin baxter horowitz gupta rosenblum hennessy 
stanford flash multiprocessor 
proceedings st international symposium computer architecture april 
lebeck wood 
active memory new abstraction memory system simulation 
proceedings acm sigmetrics conference measurement modeling computer systems 
magnusson werner 
efficient memory simulation 
proceedings th annual simulation symposium april 
martonosi gupta anderson 
analyzing memory system bottlenecks programs 
proceedings acm sigmetrics conference measurement modeling computer systems june 
martonosi heinrich 
integrating performance monitoring communication parallel computers 
proceedings acm sigmetrics conference measurement modeling computer systems may 
miller callaghan hollingsworth 
paradyn parallel performance measurement tools 
ieee computer nov 
hammond 
evaluation design alternatives multiprocessor microprocessor 
proceedings rd international symposium computer architecture may 
hammond 
case single chip multiprocessor 
proceedings seventh international symposium architectural support programming languages operating systems oct 
ousterhout 
tcl tk toolkit 
addison wesley reading ma 
perl sites 
studies windows nt performance dynamic execution traces 
proceedings second symposium operating system design implementation 
reed noe shields 
overview pablo performance analysis environment 
tech 
rep university illinois urbana champaign 
reinhardt hill larus lebeck lewis wood 
wisconsin wind tunnel virtual prototyping parallel computers 
proceedings acm sigmetrics conference measurement modeling computer systems may 
rosenblum bugnion herrod witchel gupta 
impact architectural trends operating system performance 
proceedings fifteenth acm symposium operating systems principles 
acm transactions modeling computer simulation vol 
january 
simos machine simulator rosenblum chapin devine lahiri gupta 
hive fault containment shared memory multiprocessors 
proceedings fifteenth acm symposium operating systems principles dec 
rosenblum herrod witchel gupta 
complete computer simulation simos approach 
ieee parallel distrib 
technol winter 
silicon graphics 
gprof 
irix man page 
smith 
tracing pixie 
tech 
rep csl tr stanford university 
sun microsystems 
product overview 
web site www sun com solaris products 
torrellas gupta hennessy 
characterizing cache performance synchronization behavior multiprocessor operating system 
proceedings fifth international conference architectural support programming languages operating systems oct 
veenstra 
mint tutorial user manual 
tech 
rep may university rochester 
verghese devine gupta rosenblum 
operating system support improving data locality cc numa computer servers 
proceedings seventh international conference architectural support programming languages operating systems oct 
wilson olukotun rosenblum 
increasing cache port efficiency dynamic superscalar microprocessors 
proceedings rd international symposium computer architecture june 
wilson french wilson amarasinghe anderson tjiang liao tseng hall lam hennessy 
suif infrastructure research parallelizing optimizing compilers 
acm sigplan 
dec 
witchel rosenblum 
embra fast flexible machine simulation 
proceedings acm sigmetrics conference measurement modeling computer systems may 
received june revised september october accepted november acm transactions modeling computer simulation vol 
january 
