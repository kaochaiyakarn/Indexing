originally published proceedings th usenix conference object oriented technologies systems coots santa fe new mexico april comera com extensible remoting architecture yi min wang microsoft research lee new york university information usenix association contact 
phone 
fax 
email office usenix org 
www url www usenix org comera com extensible remoting architecture distributed object system remoting architecture refers infrastructure allows client programs invoke methods remote server objects transparent way 
study strength limitations current remoting architecture com component object model propose new architecture called comera com extensible remoting architecture enhance extensibility flexibility 
describe application scenarios implementations demonstrate power remoting architecture 

distributed object systems dcom brown corba corba java rmi wollrath increasingly popular 
essence provide infrastructure supporting remote object activation remote method invocation client transparent way 
client program obtains pointer remote object invokes methods pointer object resides client address space 
infrastructure takes care low level issues packing data standard format heterogeneous environments marshaling unmarshaling maintaining communication endpoints message sending receiving dispatching method invocation target object 
term remoting architecture com refer entire infrastructure connects clients server objects 
general distributed object system specify remoting architecture structured 
treated black box far user applications concerned 
black box approach advantage allowing vendors put best performance optimization techniques 
disadvantage architectures usually extensible 
result low level system properties load balancing fault tolerance yi min wang microsoft research lee new york university desirable need tightly integrated infrastructure maffeis provided interception mechanisms outside infrastructure narasimhan 
propose extensible remoting architecture demonstrate facilitates incorporation low level system properties infrastructure allows customized flexible way 
com remoting architecture com brown starting point reasons 
built extensibility 
supporting mechanism called custom marshaling com allows server object bypass standard remoting architecture construct custom requiring source code modifications 
second 
com remoting architecture provides basis building distributed component applications distributed component application 
specifically remoting architecture constructed run time instantiating connecting various dynamic components custom architecture reuse binary components standard 
point limitations current com remoting architecture propose truly extensible architecture called comera 
approach custom marshaling implement comera comera implement low level system properties 
application categories demonstrate flexibility provided comera configurable multi connection channels allow clients single pointer transparently talk multiple server objects performance fault tolerance transport replacement allows applications run dcom transport wrapping protocol specific client server programs com objects plugging comera client transparent object failover migration allows client existing pointer reach object moved machine 
organized follows 
section gives background com describes current com remoting architecture 
section discusses limitations current architecture presents new com era architecture specifies interactions components 
section describes application categories 
section surveys related section summarizes 

component object model 
overview com com interface named collection operations methods represent functionality 
object class class named concrete implementation interfaces 
object instance object instantiation object class 
object server executable exe dynamic link library dll responsible creating hosting object instances 
client process invokes method object 
shows client holding pointer interfaces object 
interface object represents different view object identified bit globally unique identifier guid called interface id iid 
object server contains multiple object instances different classes identified guid called class id 
com objects usually created class factories com objects standard interfaces creating com objects 
com specifies binary standard objects clients follow ensure dynamic interoperability 
specifically com interface follow standard memory layout virtual function table rogerson box 
allows com applications reuse binary code run time client server relationship contrast common notion source code reuse compile time 
addition com interface inherit interface consists call navigating interfaces object calls release counting 

remoting architecture shows current com remoting architecture 
initial mechanism client con server shown 
object activation call binding call specifying particular persistent data lookup naming service 
server object created export interface pointer com run time ask object supports interface 
interface supported com starts standard marshaling process chung standard invoked marshal interface pointer pack sufficient information object shipped client client remote pointer transparent way 
standard loads creates interface stub requested iid 
interface stub com object knows input parameters marshal output parameters method calls interface identified particular iid 
standard gives pointer created interface stub stub manager gets back interface pointer id ipid 
stub manager charge dispatching client call target interface stub ipid tagged call 
standard packs ipid communication endpoint information rpc string binding information standard gives com run time 
com run time information obtained client side activates standard hands 
standard creates standard object proxy serves proxy method calls remote object 
requested interface object proxy loads creates appropriate interface proxy aggregates rogerson exposes interface interface proxy object proxy interface 
object proxy loads creates standard rpc channel object uses information initialize channel 
channel object communication endpoint information reach server 
tags call associated ipid properly dispatched reaches server 
com run time returns client interface pointer 
pointer points object proxy points interface proxy aggregated object proxy 
standard remoting architecture established client calls obtained pointer 
call enters proxy gets appropriately marshaled network data representation ndr format dce sent channel object server endpoint dispatched stub manager gets interface stub delivered server object 
entire process sequence local remote function calls reply done simply returning function calls reversing marshaling procedure 
object declare wants implement custom marshaling supporting interface 
case standard remoting architecture created 
object specifies acts custom responsible constructing custom specifying custom activated client side receive 
custom create act custom proxy application specific processing uses application specific communication mechanism interact server 

extensible remoting architecture 
extensibility issues current com remoting architecture custom marshaling provides basis extensibility com remoting architecture 
applications achieve stronger low level system properties plugging custom remoting architecture having modify source code standard 
applications want rebuild entire remoting architecture want reuse existing architecture possible replace parts specific 
example applications need replace interface proxies stubs marshaling unmarshaling applications need replace client side architecture need modify server side architecture 
examples described section illustrate different requirements 
discussion motivates concept remoting architecture 
addition providing infrastructure higher level applications remoting architecture benefits software reuse realized lower level 
shows current com remoting architecture partially proxies channels stubs com components server endpoints stub managers 
limitation hard replace transport control ipid assignment call dispatching 
second limitation result intimacy object proxy channel object 
interact com interfaces intimacy hard replace replacing 
specifically standard rpc channel object published hard custom proxy connect standard channel 
object proxy creates connects standard channel hard reuse object proxy replacing channel object 
illustrates strength weakness current com remoting architecture terms extensibility 
basically architecture extensible upper layer interfaces client server applications 
applying custom marshaling layer usually called semi custom marshaling handler marshaling essentially builds custom marshaling top standard marshaling 
arbitrary number components connected arbitrary way inserted server object interface stubs part interface pointer marshaling process 
extensibility useful parameter tracing logging input value checking similarly arbitrary components inserted client proxies part interface pointer unmarshaling process 
ideal place data caching logic example 
contrast current com remoting architecture limited flexibility applications require extensibility lower layers 
example fault tolerance mechanisms need get access call parameters marshaled format efficient logging replication 
currently require rebuilding entire remoting architecture 

comera architecture propose new architecture called comera com extensible remoting architecture address issues 
approach custom marshaling rebuild standard remoting architecture redesign parts enhance extensibility 
shows comera architecture 
original interface proxies stubs packaged binary com objects comera reuse requiring new idl compiler recompilation 
comera improves current com remoting architecture aspects comera stub manager com object offers advantages 
applications replace stub manager custom control ipid assignment call dispatching 
second comera interacts stub manager specified com interface replacing stub manager require replaced 
comera endpoint com object 
replaced enable pre dispatching message processing message logging decryption 
provides communication endpoint information specified com interface custom endpoint object com era 
comera extends interface include method call class allows server object specify custom channel 
comera object proxy receives standard custom creates channel object specified initializes specified com interface 
comera rpc channel object specified custom proxy reuse standard channel 

applications section describe application categories illustrate benefits comera remoting architecture 
configurable channels enable dynamic transparent fault tolerance support notion quality fault tolerance 
transport replacement facilitates lowlevel manipulation marshaled data stream 
ability restore server side communication dispatching state possible implement transparent object failover migration 

configurable multi connection channels generic mechanism transparent fault tolerance client side infrastructure connect multiple equivalent servers 
infrastructure mask server failures retrying server fails sending request multiple servers simultaneously 
implemented current remoting architecture semi custom marshaling follows 
server object routine packs multiple standard corresponding multiple equivalent objects custom custom proxy extracts standard pair object proxy standard channel connecting objects 
clearly efficient object proxy aggregated interface proxies unnecessarily duplicated 
marshaling unmarshaling routines may unnecessarily executed multiple times 
shows comera allows fault tolerance mechanism implemented natural efficient way 
addition packing multiple standard custom server object specifies configurable multi connection channel object 
connections multiple objects encapsulated inside custom channel custom proxy 
allows marshaled data stream shared reduce time memory overhead 
architecture provide configurable timeouts currently supported com 
implemented system architecture shown support quality fault tolerance 
server object dynamically determines level fault tolerance provided client client connects object client login account 
base level client standard remoting architecture fault tolerance established 
determined level chosen server objects transmitted client side initialize channel specified server 
level client normally connects primary object switch backup object primary server fails call times 
level client call sent multiple objects response delivered client 
approach masks failures improves response time 
system sup ports dynamic code downloading dll code channel object downloaded client part custom marshaling stream 
custom activated extract code register registry channel object instantiated 
feature allows service provider try different plans requiring clients install new software 

transport replacement specification brown dcom runs top rpc 
turn rpc run top different transports 
example windows nt microsoft rpc configured run tcp udp netbios ipx simply changing registry setting nelson 
addition flexibility applications may wish replace standard rpc channel altogether number reasons 
example running dcom may necessary passing certain firewalls 
organizations may need run dcom proprietary transports order interoperate existing legacy systems 
applications may require encrypted channels additional security 
applications may want replace unicast channels multicast channels efficiency 
transport replacement course accomplished current com architecture custom marshaling generally require rebuilding entire remoting architecture 
illustrates new channel plugged comera modifying upper layer architecture 
custom endpoint object wraps transport specific server code com interface 
hosts server side communication endpoint supplies binding information 
custom channel object wraps client code com interfaces initialization binding information actual communication 
transports exist form protocol stacks completely wrapped inside com objects 
may require channel object connect client side daemon connected server side daemon turn connected endpoint object 

object migration object migration generic mechanism load balancing fault tolerance 
goal move object machine allowing existing clients connect 
hand remoting architecture facilitates implementing object migration transparent way providing natural hiding place migration logic 
hand abstraction provides applications may hide low level details transparent object migration difficult 
specifically object instance uniquely identified rpc string binding containing ip address port number ipid 
current com remoting architecture hides assignment port numbers applications difficult migrate object maintaining port number ipid existing client side channels reach migrated object 
current architecture transparent object migration implemented semi custom marshaling follows 
custom proxy containing migration logic inserted client object proxy 
migration occurs custom proxy gets notified special callback interface detects call times 
queries migration manager process maintains mapping pre migration migrated object 
custom proxy gets back new creates new pair object proxy channel object connect migrated object discards original pair 
comera architecture facilitates transparent object migration ways 
similar discussions section object migration involve channel objects object proxies 
pushing migration logic proxy level channel level comera allows custom channel simply update rpc binding connect migrated object object activation deactivation overhead 
second particularly useful implementing transparent object failover special case object migration migrated machine ip address original 
shows com era supports transparent failover requiring custom objects migration logic client side 
failover ip address provided commercial clustering software 
failover endpoint object checkpoints restores rpc string bindings 
failover stub manager checkpoints restores ipid assignments 
rpc layer built reconnection capability existing connection broken client able automatically reach failed object ip port number ipid reconnection 

related corba specify standard remoting architecture 
result incorporating stronger system properties fault tolerance corba systems usually done exploiting extensibility remoting architecture 
approaches taken narasimhan 
maffeis orbix isis landis build mechanisms object replication consistency management orb 
eternal system narasimhan intercepts iiop related system calls unix proc interface maps routines supported reliable multicast group communication system 
contrast application transparent approach third approach provide fault tolerance corba compliant object group service felber 
com currently supports channel hook mechanism allow piggybacking band data considered simple form extensibility 
supporting interface sender fill additional data transmitted body extensions brown dcom message receiver retrieve body extension unique id iona orbix allows filters inserted different places get access marshaled call parameters return parameters iona 
similar capabilities implemented comera component insertion replacement 
newly announced com runtime services promise provide general extensibility mechanism called interceptors 
interceptors interpret special class attributes receive events related object creation deletion method invocation automatically enable appropriate services 
runtime system hunt provides similar instrumentation capabilities inter component communication analysis serves basis optimal distribution component applications network 
compared com interceptors comera intercept object creation calls architecture component insertion replacement flexible 
legion grimshaw software project aims providing flexible support wide area computing 
top design objectives extensible core consisting replaceable components customizing mechanisms policies 
emphasis transparent fault tolerance migration replication similar comera 
main difference legion targets highperformance parallel computing comera places emphasis client server systems 
globe project proposed architecture distributed shared objects 
local object consists subobjects control object handling local concurrency control semantics object providing actual semantics shared object replication object responsible state consistency management communication object handles low level communication 
comera support architecture implementing control semantics objects custom proxy replication communication objects custom channel 

summary proposed comera extensible remoting architecture com 
architecture com objects comera low level distributed objects infrastructure dynamic flexible reusable applications supports 
application categories examples demonstrate advantages new architecture 
multi connection channels category implemented quality fault tolerance subsystem top comera support dynamic determination fault tolerance levels dynamic code downloading custom proxies channels 
transport replacement category successfully plugged commercial reliable multicast protocol implementation comera 
programming wizard provided simplify tasks channel endpoint object wrapping 
object migration category implemented transparent failover subsystem com objects top ip failover 
includes building active replication shared objects comera 
authors express li li cornell contributions initial imple mentation comera emerald chung chung yih wang huang lucent technologies valuable discussions software architects engineers dcom mailing list positive feedback architecture 
box box essential com addison wesley 
brown brown distributed component object model protocol dcom www microsoft com dcom spec txt 
chappell chappell understanding activex ole redmond washington microsoft press 
chung chung huang yajnik liang shih wang wang dcom corba side side step step layer layer report vol 
pp 
jan 
com component object model specification www microsoft com title htm 
corba common object request broker architecture specification revision july www omg org corba htm 
dce dce remote procedure call specification open group www rdg org public pubs catalog htm 
felber felber guerraoui designing corba group communication service proc 
th symp 
reliable distributed systems pp 
oct 
grimshaw grimshaw wulf legion proc 
seventh acm sigops european workshop sep 
van steen tanenbaum architecture wide area distributed system proc 
seventh acm sigops european workshop sep 
hunt hunt scott efficient instrumentation inter component communi cation analysis tech report dept computer science university rochester feb 
iona orbix programming guide iona technologies www iona com 
object oriented software development simple com runtime services microsoft systems journal vol 
pp 
nov 
landis landis maffeis building reliable distributed systems corba theory practice object systems john wiley sons new york 
maffeis maffeis adding group communication fault tolerance corba proc 
usenix conf 
object oriented technologies june 
narasimhan narasimhan moser melliar smith interception approach reliable distributed corba objects proc 
rd conf 
object oriented technologies systems june 
narasimhan narasimhan moser melliar smith exploiting internet inter orb protocol interface provide corba fault tolerance proc 
rd conf 
object oriented technologies systems june 
nelson michael nelson distributed com firewalls www wam umd edu dcom ht 
rogerson rogerson inside com redmond washington microsoft press 
corba integrating diverse applications distributed heterogeneous environments ieee communications vol 
feb 
www iona com ieee ps clustering solutions windows nt windows nt magazine pp 
june 
wollrath wollrath waldo distributed object model java system usenix journal computing systems vol 
pp fall 

com server classes objects interfaces client 

limitations current com remoting architecture 

comera architecture 

configurable multi connection channel comera 
inserted replaced components indicated black boxes 

transport replacement replacing channel endpoint objects 

client transparent object failover comera 
