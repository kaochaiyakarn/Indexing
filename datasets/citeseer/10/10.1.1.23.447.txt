analyzing software requirements errors safety critical embedded systems analyzes root causes safety related software errors safety critical embedded systems 
results show software errors identi ed potentially hazardous system tend produced di erent error mechanisms non software errors 
safety related software errors shown arise commonly discrepancies documented requirements speci cations requirements needed correct functioning system misunderstandings software interface rest system 
uses results identify methods requirements errors prevented 
goal reduce safety related software errors enhance safety complex embedded systems 
examines software errors uncovered integration system testing spacecraft voyager galileo 
software error de ned software related discrepancy computed observed measured value condition true speci ed theoretically correct value condition 
software errors documented time discovery form describing problem failure 
form recorded subsequent analysis corrective actions taken 
part standard procedure correcting reported software error failure ect author mailing address dept computer science iowa state university ames ia 
appeared re proceedings ieee international symposium requirements engineering jan san diego ca 
research described carried jet propulsion laboratory california institute technology contract nasa 
lutz jet propulsion laboratory california institute technology pasadena ca classi ed negligible signi cant catastrophic 
classi ed signi cant catastrophic investigated systems safety analyst representing potential safety hazards 
study software errors voyager software errors galileo documented having potentially signi cant catastrophic ects classi ed safety related 
software safety critical monitors controls components involved hazardous system behavior 
software execute system context contributing unacceptable risk 
spacecraft involves embedded software distributed di erent ight computers 
voyager roughly lines source code galileo 
embedded software software runs computer system integral larger system primary purpose computational 
software spacecraft highly interactive terms degree message passing system components need respond real time monitoring hardware environment complex timing issues parts system 
software development teams spacecraft involved multiple teams working period years 
purpose identify extent ways cause ect relationships safety related software errors di er cause ect relationships non safety related software errors 
particular analysis shows errors identifying understanding functional interface requirements frequently lead safety related software errors 
distinction identify methods common causes safety related software errors targeted development 
goal improve system safety understanding possible removing prevalent sources safety related software errors 
ii 
methodology study described characterizes root causes safety related software errors discovered integration system testing 
software error cause ect relationships ers appropriate framework classifying software errors 
extended account additional complexities operative large safety critical embedded systems evolving requirements driven hardware environmental issues 
classi cation scheme analyzes points path software error backwards sources 
approach allows classi cation documented software error called program fault earlier human error root cause misunderstanding interface speci cation process aws contribute likelihood error occurrence inadequate communication systems engineering software development teams 
classi cation scheme leads backwards time evident software error analysis root cause usually communication error error recognizing deploying requirements analysis software development process 
comparing common error mechanisms software errors identi ed potentially hazardous software errors prevalent root causes safety related errors isolated 
classi cation sources error applied determine countermeasures may prevent similar error occurrences safety critical embedded systems 
uses classi cation scheme assemble error pro le safety related software errors identify development methods sources error controlled 
iii 
analysis safety related software errors overview classi cation scheme overview classi cation scheme follows adjusted needs safety critical embedded software 
see additional details errors categorized 
ongoing multi project investigation address issue repeatability di erent analysts classify error way 
program faults documented software errors internal faults syntax interface faults interactions system components transfer data control functional faults operating faults omission unnecessary operations conditional faults incorrect condition limit values behavioral faults incorrect behavior conforming requirements human errors root causes coding editing errors 
communication errors team misunderstanding interface speci cations 
communication errors teams misunderstanding interface speci cations team speci cations 
errors recognizing requirements misunderstanding speci cations problem domain 
errors deploying requirements problems implementing translating requirements design process flaws flaws control system complexity inadequacies communication development methods inadequate code inspection testing methods 
inadequate interface speci cations inadequate communication developers 
inadequate interface speci cations inadequate communication developers 
requirements identi ed understood incomplete documentation 
requirements identi ed understood inadequate design clearly attribution key human error akey process aw error cause ect relationship 
identi cation factors allows characterization safety related software errors way relates features development process system development safety consequences features 
similarly association software error human error unrealistic sense failure predict details system behavior error allows useful association human factors misunderstanding requirements underlying physical realities safety related consequences 
program faults safety related software errors account total software errors voyager total software errors galileo discovered integration system testing 
reader referred tables containing error data 
internal faults coding errors internal software module uncovered integration system testing 
examination software errors operations shows internal errors 
appears coding errors detected corrected system testing begins 
discussed 
high level detail safety related related software errors display similar proportions interface functional faults 
functional faults operating conditional behavioral discrepancies functional requirements common kind software error 
behavioral faults account half functional faults spacecraft voyager galileo 
voyager fully half safety related functional faults attributable behavioral faults software behaving incorrectly 
galileo slightly greater percentage due operating faults nearly required omitted operation software behavioral faults 
omitted operation involves failure perform adequate reasonableness checks data input module 
frequently results error recovery routine called inappropriately 
conditional faults nearly erroneous value condition limit tend safety related spacecraft total 
erroneous values delay timers involve risk spacecraft causing inappropriate triggering error recovery response failing trigger needed response 
association conditional faults safety related software errors emphasizes importance specifying correct values data control decisions safety critical embedded software 
analysis identi es interface faults incorrect interactions system components timing transfer data control signi cant problem safety related program faults voyager galileo 
sect 
iv describes high incidence interface faults complex embedded systems contrasts low incidence interface faults earlier studies simpler standalone software 
relationships program faults root causes second step cause ect analysis trace backwards time human factors involved program faults discovered integration system testing 
interface faults major human factors communication errors development team communication errors development team teams 
case distinction misunderstanding hardware interface speci cations misunderstanding interface speci cations software components 
communication errors development teams teams leading cause interface faults voyager galileo 
safety related interface faults associated overwhelmingly communication errors development team software developers systems engineers communication errors team 
signi cant di erences distribution fault causes safety related non safety related interface faults appear 
primary cause interface faults misunderstood hardware interface speci cations voyager galileo 
examples faults caused wrong assumptions initial state relays unexpected heartbeat timing patterns particular operating mode 
hand root causes non safety related interface faults distributed evenly misunderstood hardware specications misunderstood software speci cations 
pro le safety related interface faults assembled emphasizes importance understanding software set embedded components larger system 
primary cause safety related functional faults errors recognizing understanding requirements voyager galileo 
conditional faults example caused errors recognizing requirements 
hand non safety related functional faults caused errors deploying implementing requirements 
summary di culties requirements key root cause safety related software errors persisted integration system testing 
relationships root causes process flaws tracing backwards program faults sources features system development process identi ed facilitate enable occurrence errors 
discrepancies di culty problem means solve may permit hazardous software errors occur 
third step error analysis associates pair process aws program fault 
rst element pair identi es process aw inadequacy control system complexity requirements discovered system testing 
second element ofthe pair identi es associated process aw development methods imprecise speci cation methods 
elements process aw pair closely related 
frequently seen sect 
solution aw provide solution related aw 
safety related interface faults common complexity control aw interfaces adequately identi ed understood voyager galileo 
common safety related aw communication development methods voyager hardware behavior documented 
galileo common safety related aws lack communication teams interface speci cations known documented 
anomalous hardware behavior signi cant factor safety related non safety related interface faults 
associated interface design system testing indication unstable software product 
signi cant variations process aws cause errors spacecraft 
interface design testing involved safety critical interface faults voyager galileo 
voyager set related hardware problems generated nearly half safety related interface faults 
hand problem interface speci cations known documented common galileo 
due increased complexity galileo interfaces 
functional faults requirements identi ed requirements understood common complexity control aws 
safety related functional faults non safety related functional faults caused requirements identi ed 
regard aws communication development methods missing requirements involved nearly half safety related errors involve recognizing requirements 
inadequate design common aw leading errors deploying requirements voyager 
galileo incomplete documentation requirements important factor errors non safety related errors 
imprecise speci cations twice associated functional faults non safety related functional faults 
similarly unknown undocumented wrong requirements greater cause non safety related errors 
results suggest sources software errors lie farther back development process inadequate requirements sources non safety related errors commonly involve inadequacies design phase 
iv 
comparison results previous software errors causes studied extensively current di ers prior investigations ways software chosen analyze studies embedded complex system 
consequence role interface speci cations controlling software hazards underestimated 
current studies analyzed fairly simple systems familiar wellunderstood application domains 
consequently software errors occurred system testing studies leading gap knowledge regarding sources persistent hazardous errors 
studies assume requirements speci cation correct 
spacecraft large complex systems requirements evolve system behavior problem domain evolve 
similarly studies assume requirements xed time systems testing begins 
leads underestimation impact unknown requirements scope schedule stages software development process 
distinction causes safety critical non safety critical software errors adequately investigated 
orts enhance system safety speci cally targeting causes safety related errors distinguished causes errors take advantage distinct error mechanisms described sect 

brief description scope results related compared results safety critical embedded computer systems 
categorized errors software rmware products controlling measuring instruments software products instrument measurement programs 
errors interface functional faults similar results reported 
key human error spacecraft involved communication teams key human error study involved communication development team 
process aw identi ed lack methods record known interfaces describe known functions 
embedded software spacecraft aw failure identify understand requirements 
ostrand weyuker categorized errors development testing editor system 
errors system testing re ecting simplicity stability interfaces requirements 
errors function testing 
half errors caused omissions con rming ndings study omissions major cause software errors 
ho mann categorized errors development small programs single programmer 
signi cant interfaces hardware little system testing 
frequent class errors coding clerical design errors 
common design errors extreme conditions neglected forgotten cases steps loop control errors common functional faults spacecraft 
ndings con rm common experience early insertion late discovery software errors maximizes time ort correction takes 
errors inserted requirements design phases take longer nd correct inserted phases tend involve complex software structures 
errors discovered testing phase take longer correct tend complicated di cult isolate 
consistent results indicating severe errors take longer discover severe errors system level testing 
furthermore ect pronounced complex measured lines code software 
done endres direct endres backtracked error type technical organizational causes led type error 
studied system testing operating system software interaction hardware source concern 
endres noted di culty precisely specifying functional demands systems programmer seen ect dynamic behavior system 
better tools needed attack problem holds true eighteen years published study 
errors endres analyzed errors understanding communicating problem choice solution errors implementing solution remaining coding errors 
results consistent nding software system interfaces displays higher percentage software errors involving understanding requirements system implications alternative solutions 
eckhardt study software redundancy analyzed errors independent versions software component inertial navigation system 
inadequate understanding speci cations underlying coordinate system major contributor program faults causing coincident failures 
looking types errors caused safety problems large real time control system concluded design complexity inherent system requires hidden interfaces allow errors non critical software ect safety critical software 
consistent selby basili results analyzed software errors updating library tool 
errors documented trouble reports categorized wrong missing 
subsystems highly interactive subsystems proportionately errors interactive subsystems 
leveson listed set common assumptions false control systems resulting software errors 
assumptions software speci cation correct possible predict realistically software execution environment existence transients possible anticipate specify correctly software behavior possible circumstances 
assumptions tend true simple systems software errors analyzed date false spacecraft large embedded systems 
studies software errors simple systems assist understanding internal errors functional errors help understanding causes software errors tend heavily involve interfaces recognition complex requirements 
similarly standard measures internal complexity modules limited usefulness anticipating software errors system testing internal complexity module complexity module connection environment yields persistent safety related errors seen embedded systems 
recommendations results sect 
iii indicate safety related software errors tend produced di erent error mechanisms non safety related software errors 
means system safety directly enhanced targeting causes safety related errors 
speci cally recommendations emerge analysis safety related errors complex embedded systems 

focus interfaces system analyzing problem domain interfaces major source safety related software errors 
traditional goal requirements analysis phase speci cation software external interface user 
de nition inadequate software deeply embedded larger systems spacecraft advanced aircraft air tra control units manufacturing process control facilities 
systems software physically logically distributed various hardware components system 
specifying external behavior software transformation software inputs software outputs sense interfaces system inputs environmental conditions power transients software inputs monitor data speci ed 
similarly specifying interfaces especially timing dependency relationships software outputs star identi cation system outputs closing shutter star scanner necessary 
system development issues timing realtime activities interrupt handling frequency sensor data hardware capabilities limitations storage capacity power transients noise characteristics communication links bu er interface formats expected operating environment temperature pressure radiation need re ected software requirements speci cations frequently sources safety critical software interface errors 
timing particularly di cult source software interface faults timing issues integral functional correctness safety critical embedded systems 
timing dependencies long input data valid making control decisions included software interface speci cations 
analytical models simulations understand system interfaces particularly useful complex embedded systems 

identify safety critical hazards early requirements analysis 
hazards constraints possible designs factors contemplated tradeo safety tends encourage software simplicity increased functionality tends encourage software complexity 
ofthe safety related software errors reported sect 
iii involve data objects processes targeted special attention hazard detection techniques described 
early detection safety critical objects increased attention software operations involving safety related software errors involving 

formal speci cation techniques addition natural language software requirements speci cations 
lack precision incomplete requirements led safety related software errors seen 
detail needed cover circumstances envisioned component failures timing con straint violations expired data document environmental assumptions close sun instrument point assumptions parts system maximum transfer rate consequences race conditions cycle slippage 
capability describe dynamic events timing process interactions distinct computers decentralized supervisory functions considered formal method 

promote informal communication teams 
safety related software errors resulted individual team misunderstanding requirement knowing fact system member development team knew 
goal able modularize responsibility project communication system development 
tracking safety hazards system example clearly best done team boundaries 

requirements evolve communicate changes development test teams 
important requirements changes design testing di cult number size teams length development process large embedded system simpler systems 
analyzing safety related software errors evident determination needs know change incorrectly 
frequently changes appear involve team system component ecting teams components date result incompatible changes distinct units 
need faster distribution changes update stored accessible 
case tools er possible solution di culty change increasing 
prevalence safety related software errors involving misunderstood missing requirements points inadequacy consistency checks requirements code means demonstrating system correctness 
code implements incorrect requirements incorrect fails provide needed system behavior 
similarly generating test cases misunderstood missing requirements test system correctness 
traceability requirements automatic test generation speci cations ers partial validation complex embedded systems 
alternative validation testing methods described er greater coverage 

include requirements defensive design 
safety related software errors involve inadequate software responses extreme conditions extreme values 
anomalous hardware behavior unanticipated states events order obsolete data causes safety related software errors spacecraft 
run time safety checks validity data watchdog timers delay timers software lters software imposed initialization conditions additional exception handling assertion checking combat safety critical software errors involving conditional omission faults 
requirements error handling ow protection signal saturation limits heartbeat pulse frequency maximum event duration system behavior unexpected conditions added traced design 
safety related functional faults involve error recovery routines invoked inappropriately erroneous limit values bad data 
backward analysis critical failures possible causes ers check defensive requirements design 
requirements speci cations account worst case scenarios models predict range possible allowable values simulations discover unexpected interactions system testing contribute system defense hazards 
summary large embedded systems spacecraft study software requirements change software development process system testing 
largely due unanticipated behavior dynamic changes operating environment complex software hardware software software interactions systems developed 
controlling requirement changes scope cost development di cult changes prompted improved understanding software necessary interfaces physical components spacecraft embedded 
complex timing issues hardware idiosyncrasies prompt changes requirements design solutions 
analysis cause ect relationships safety related software errors pinpoints aspects system complexity merit additional attention 
speci cally results shown conditional faults condition limit values highly correlated safety related software errors 
operating faults especially omission run time reasonableness checks data highly correlated safety related software errors 
unknown undocumented erroneous requirements frequently associated safety related software errors 
hardware software interfaces frequent trouble spot lack communication teams 
results indicate need better methods confront real world issues developing safety critical embedded software complex distributed system 
directed incorporating knowledge distinct error mechanisms produce safety related software errors requirements analysis validation processes 
needed specifying results predict precisely features combinations factors safety critical embedded system cause time consuming hazardous software errors 
case study isolation safety critical software proc th annual conf computer assurance 
nist ieee pp 

davis software requirements analysis speci cation 
englewood cli prentice hall 
eckhardt experimental evaluation software redundancy strategy improving reliability ieee trans software eng july pp 

endres analysis errors causes systems programs ieee trans software eng se june pp 

gray thayer requirements aerospace software engineering collection concepts 
ed 
anderson dorfman 
washington aiaa pp 

ansi ieee standard glossary software engineering terminology 
newyork ieee 
ja software requirements analysis real time process control systems ieee trans software eng march pp 

integrated approach software engineering 
new york springer verlag 
knight testing aerospace software engineering collection concepts 
ed 
anderson dorfman 
washington aiaa pp 

leveson safety aerospace software engineering collection concepts 
ed 
anderson dorfman 
washington aiaa pp 

leveson software safety computer systems commun acm vol 
feb pp 

leveson harvey analyzing software safety ieee transactions software engineering se sept pp 

software systems safety program phase report internal document jet propulsion laboratory april 
lutz analyzing software requirements errors safety critical embedded systems tr dept comp 
sci iowa state university 
lutz wong detecting unsafe error recovery schedules ieee trans software eng aug pp 

case history analysis software error cause ect relationships ieee trans software eng aug pp 

neumann computer related risk year weak links correlated events proc th annual conf computer assurance 
nist ieee pp 

error discovery rate severity category time repair software failures jpl flight projects internal document jet propulsion laboratory 
ostrand weyuker collecting categorizing software error data industrial environment journal systems software pp 

proc berkeley workshop temporal real time speci cation 
eds ladkin vogt 
berkeley ca international computer science institute tr 

ho mann experiment software error data collection analysis ieee trans software eng se may pp 

selby basili analyzing error prone system structure ieee trans software eng pp 

wing speci er formal methods computer vol 
sept pp 

