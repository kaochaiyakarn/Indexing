efficient adaptive simplification massive meshes growing availability massive polygonal models inability existing visualization tools data created pressing need memory efficient methods capable simplifying large meshes 
method performing adaptive simplification polygonal meshes large fit core 
algorithm performs passes input mesh 
pass model quantized uniform grid surface information accumulated form quadrics dual quadrics 
sampling construct bsp tree partitioning planes determined dual quadrics 
final pass original vertices clustered bsp tree yielding adaptive approximation original mesh 
bsp tree describes natural simplification hierarchy making possible generate progressive transmission construct detail representations 
way algorithm provides features associated expensive edge contraction methods maintaining greater computational efficiency 
addition performing adaptive simplification algorithm exhibits output sensitive memory requirements allows fine control size simplified mesh 
keywords surface simplification massive meshes quadric error metric recursive partitioning core simplification advances dimensional model acquisition tertiary storage technology resulted wide availability massive geometric data sets 
digital michelangelo project stanford university produced finely detailed polygonal meshes containing triangles 
scientific domain visible human project generated data sets voxels doe asci project goal visualizing multi gigabyte iso surface datasets 
models poses serious challenges visualization 
current workstation technology completely incapable rendering real time 
case polygonal meshes applying simplification algorithm reasonable approach 
unfortunately traditional simplification algorithms memory processing time requirements far high handle massive data 
relatively process face models meshes hundreds millions faces far capacity 
algorithms require random access mesh data easily adapted efficiently meshes exceeding size main memory 
result algorithms perform poorly applied meshes need simplification 
date department computer science university illinois urbana il 
shaffer cs uiuc edu garland cs uiuc edu eric shaffer michael garland university illinois urbana champaign uniform clustering successfully applied truly massive models 
approximations generated method display artifacts related regularity sampling grid 
order efficiently large data believe algorithm obey key constraints 
magnitude input data exceed memory capacity critical size core data structures independent input size 
expensive operations simplification performed data held core 
input data kept core access limited small number linear scans order maintain efficiency 
adhering principles designed memory efficient algorithm adaptive simplification massive polygonal meshes 
maintains computational efficiency close uniform clustering method yield higher quality approximations 
algorithm thought step process begins quantizing input mesh uniform grid 
grid accumulate surface information form quadrics dual quadrics characterize local shape surface 
second step geometric information build data structure effectively partitions vertices model 
original mesh simplified partition information 
employing effective vertex partitioning method critical performance algorithm quality simplified mesh 
inspired simp method brodsky watson developed spatial clustering technique bsp trees 
choice appealing properties 
simplification proceeds coarse fine level allowing efficiently generate coarse approximations large meshes 
bsp structure adaptive planes chosen heuristics local geometry mesh 
natural hierarchy provided bsp tree particularly suited applications progressive transmission constructing level detail hierarchies 
simp shares characteristics operate meshes small fit core 
employing quantization phase new heuristics constructing bsp tree algorithm capable simplifying models orders magnitude larger suitable simp 
primary contribution described novel algorithm efficient adaptive simplification massive meshes 
simplification algorithm memory efficient consuming memory proportion size output mesh 
time efficient yielding running times competitive uniform simplification 
linear scans input data algorithm scale handle massive datasets 
algorithm knowledge methods able perform adaptive surface simplification massive mesh 
may method able efficiently 
previous polygonal simplification area active research close decade 
optimal approximation surface known np hard research focused developing heuristic methods 
fundamental principle underlying methods partitioning vertex set mesh disjoint clusters unifying vertices cluster 
process vertex unification cause faces mesh degenerate edges points 
result polygonal surface approximation fewer vertices faces 
simplification methods generally differentiated construct partition vertex set 
common approaches application iterative edge contraction 
iterative edge contraction arguably popular heuristic framework 
techniques operation select pair vertices iteration replace single vertex removing triangles degenerate 
process effectively partitions original vertex set vertex approximation represents set vertices contracted 
edge selection generally accomplished greedy strategy cost edge contraction related error induces approximation 
quadric error metric introduced garland heckbert proven yield results practice 
unfortunately edge contraction algorithms suited massive meshes 
typically employ priority queue possible contractions resulting memory consumption proportional size original mesh 
clearly untenable extremely large models 
obstacle overcome core data structures order contraction operations exhibit little locality meaning contraction expensive 
large number contractions required satisfactorily simplify massive model cost computation prohibitive 
resorting core data structures authors bernardini hoppe prince particular proposed methods mesh segmented piece fits main memory 
pieces simplified core boundary edges preserved segments 
process iterated new boundary edges chosen time 
solution conceptually appealing segmenting operations expensive making approach attractive large meshes 
el chiang describe somewhat similar method core refinement 
initial simplification accomplished core priority queue combination segmentation 
result core structure supports rendering large meshes levels detail 
authors achieve interactive frame rates large models preprocessing time significant 
popular simplification framework suited large models spatial clustering 
methods spatially partition vertex set clusters unify vertices cluster 
rossignac borrel developed earliest clustering algorithms 
method partitions vertex set cells defined rectilinear grid 
representative vertex synthesized cell 
triangles original mesh mapped new vertices faces degenerate points lines discarded simplifying model 
low tan proposed adaptive variant technique called floating cell clustering ranks vertices model importance iterates vertex set 
iteration cell user specified size centered important vertex vertices falling cell merged 
hierarchical dynamic simplification system luebke constructs vertex tree essentially hierarchy vertex clusters provide view dependent simplification runtime 
lindstrom extended rossignac borrel algorithm models big held core formatting input mesh polygon soup 
reading model disk single linear scan vertices clustered degenerate faces discarded 
quadric error metric position representative vertices resulting higher quality output original rossignac borrel method 
uniform clustering offers great efficiency cases uniformity grid causes undesirable artifacts approximation 
feature input model smaller grid cell retained uniform clustering 
large flat regions tessellated vertices output mesh distributed evenly due structure inherent grid 
ideally prefer simplify smaller polygons areas fine features larger polygons 
simp algorithm brodsky watson employs adaptive vertex clustering technique achieve 
simp builds spatial decomposition recursively splitting cells curvature model determine splitting planes 
step cell exhibiting greatest amount area weighted curvature split 
process continues essentially proceeding coarse finer approximations desired resolution obtained 
algorithm efficient edge contraction methods easily processing large meshes 
computing area weighted normal variation finding splitting plane cell require examination mesh faces contained cell 
keeping model external memory necessity massive data sets result operations prohibitively expensive 
rusinkiewicz levoy describe core multiresolution rendering system built point rendering mesh simplification 
uses bounding sphere hierarchy define external memory representation large meshes 
rendering accomplished generating splats sphere cut hierarchy 
system works quite applications having actual surface simplified mesh advantageous 
existing rendering systems geared polygonal data readily mesh representation 
hubbard showed bounding sphere hierarchies octrees generally fit surfaces provide accurate time critical collision detection 
expect bounding boxes construct hierarchy suffer problem 
interesting consider vertex clustering method build adaptive bounding volume hierarchy suitable rendering engine 
quadric quantization initial step algorithm perform quadric quantization input mesh 
process begins computing dense partition space accumulating quadrics cells partition 
chosen implement partition lindstrom uniform grid 
benefit approach possible build grid original mesh knowing bounding box 
touching original data little possible essential maintaining efficiency working large data sets 
algorithm relies quadric dual quadric error metrics introduced garland heckbert encode information geometry model memory efficient manner 
coefficients required store quadric additive properties quadrics enable information accumulate grid cell increasing size data 
quadric metric primal quadric metric effectively measures sum squared distances vertex set planes 
consider face mesh defines plane satisfies equation nv unit normal 
squared distance vertex plane represented quadric vertices original vertices time nn dn av compute sum squared distances set planes need single quadric sum quadrics defined individual planes 
addition utility error metric quadric matrix encodes information curvature associated set planes 
matrix sample covariance matrix set normals mean 
eigenvalues matrix ordered smallest largest corresponding eigenvectors direction minimum normal variation maximum normal variation average normal 
smooth surface directions minimum maximum normal variation approximate directions minimum maximum curvature 
dual quadric metric just quadric metric encodes distance point set planes dual quadric measures distance plane set points 
set vertices vk define dual quadric pi di ei fi vi pi din ei dn fid set vertices vi summing dual quadrics vertices di ei fi allows express covariance matrix set formulation neglects eet vertices time vertices time progressive approximations produced algorithm 
averaging factor typically computing covariance matrix eigenvectors relative scale eigenvalues unchanged 
eigenvector corresponding smallest eigenvalue fact normal squares best plane vi 
eigenvector associated largest eigenvalue direction vi exhibits spread 
quantizing mesh vertices time quadric quantization generated straight forward manner 
simply scan file describing input mesh hash vertices mesh table describing uniform spatial decomposition 
constructing uniform grid assume bounding box model known 
modest requirement model acquisition methods provide information case trivial compute bounding box performing extra linear scan mesh 
vertex mesh generates dual quadric added containing grid cell 
keeping standard assumption faces described triangles face generate quadric added cells associated vertices face 
current implementation input mesh described indexed face set held file disk accessed memory mapped managed operating system 
need look vertices corresponding face indices problematic face set described locality 
situation vertex information repeatedly read disk thrashing occur 
lindstrom method able guarantee locality expense increased disk space representing model unindexed polygon soup 
prevents algorithm adopting similar strategy models worked far exhibited locality generating polygon soup representation unnecessary 
simplification algorithm quadric quantization model algorithm builds adaptive data structure describing spatial partition cluster vertices model 
working original mesh virtually impossible efficiently rely quadric information gathered quantization step 
algorithm described lindstrom uses grid directly produce simplified version model size grid determining size simplified mesh 
algorithm grid employed intermediate approximation original mesh 
approximation generate adaptive spatial partition 
increasing size uniform grid increases quality approximation resulting spatial partition directly affect size simplified mesh 
noted number vertices simplified mesh bounded number occupied cells uniform grid 
chose implement spatial partition constructing bsp tree 
inspired simp system brodsky watson approach appealing characteristics 
describes natural simplification hierarchy cut tree describes valid simplification 
generation hierarchy feature lacking spatial partitioning methods generally provided computationally expensive simplification methods edge contraction 
hierarchy defined bsp tree enables applications progressive transmission easy construct continuous levels detail 
interior node tree describes vertex split single vertex vertices 
action represented interior node linked children 
implemented information provided tree perform vertex split contraction operations view dependent refinement system 
generating level detail hierarchy difficult uniform clustering size simplified mesh related grid resolution difficult control exact fashion 
bsp tree offers exact control size output mesh leaf generates single vertex simply split leaves desired number vertices reached 
shows set progressively coarser approximations generated algorithm 
bsp tree construction quantization generate representative point occupied cell quantization grid 
placement point chosen minimize primal quadric error 
points inserted bsp tree 
point carries set associated data including quadric dual quadric grid cell represents 
bsp tree initially single node containing representative points 
keep priority queue containing leaves bsp tree keyed primal quadric error leaf 
leaf contain representative points primal quadric leaf simply sum primal quadrics associated points 
similarly dual quadric leaf sum dual quadrics associated representative points 
construction tree proceeds follows desired number leaves created 
choose leaf largest quadric error 
create split plane dual quadric 
divide leaf enqueue new leaves leaf tree correspond vertex simplified model 
splitting leaf largest error algorithm introduces vertices detail areas poorly represented single vertex 
adaptivity results process seen showing spatial partitions surface model 
sphere positioned center vertex cluster generated bsp tree size sphere related diameter cluster 
notice clusters smaller numerous areas high detail 
method determining splitting planes bsp tree similar technique gottschalk lin manocha build obb tree bounding volumes 
rely mainly point set covariance obb tree computation involves sampling convex hull point set 
algorithm uses dual quadric associated leaf determine splitting adaptive vertex clustering polygonal mesh plane 
bsp tree leaf effectively specifies space defined series half space intersections 
dual quadric able approximate directions vertex positions original mesh exhibit minimum maximum spread 
determined leaf split eigenvectors eigenvalues point set covariance matrix associated leaf extracted 
piece mesh space corresponding leaf exhibits coherent point spread look rectangular patch 
consider split patch single plane obtain approximation reasonable choose plane cutting perpendicular direction greatest point spread 
edge connecting cells resulting split run direction maximum point spread essentially line approximate patch 
event patch exhibit coherent point spread possible multiple surface sheets contained space associated leaf 
case choose normal splitting plane direction minimum point spread 
done hopes keeping separate sheets collapsing 
heuristics implemented examining eigenvalues point set covariance matrix 
ratio largest smallest significant magnitude variation clearly greater direction maximum spread patch coherent 
case normal splitting plane direction maximum spread 
ratio eigenvalues surface information considered incoherent normal splitting plane chosen direction minimum point spread 
case position plane passes mean vertex position extracted dual quadric 
simplification tree constructed execute second scan original model 
face model distribute quadric leaves bsp tree containing vertices face 
vertex mapped leaf bsp tree walking tree testing vertex plane path 
vertices fail map different leaves face degenerates discarded 
scan complete representative vertex position computed leaf associated quadric 
simplified mesh consists vertex positions non degenerate faces 
second scan model required vertex clusters quadrics associated leaf gener grid dimensions memory mb error time sec table simplification performance stanford buddha model function grid resolution 
model simplified vertices 
ated second pass certainly differ computed construction bsp tree 
construction phase algorithm operates representative points generated cells quantization grid 
representative point associated quadric dual quadric computed vertices fall particular grid cell 
leaf split construction quadrics added new leaf nodes resulting split 
leaf node chosen relationship representative point splitting plane 
unfortunately vertices generated quadrics necessarily lie side plane 
cases splitting plane bisect grid cell vertices fall sides splitting plane 
re clustering original vertices generating new quadrics removes inaccuracy 
memory efficiency vast majority memory occurs construction quantization grid bsp tree 
size structures essentially function size simplified model algorithm maintains memory efficiency faced large input 
resolution quantization grid equal desired number vertices simplified model 
relatively cells grid occupied resolution need higher remains unrelated size original mesh 
implementing grid hash table helps limit excess memory allocation required generate particular number representative points 
increasing resolution grid holding number vertices simplified model fixed decreases approximation error 
effect illustrated table 
model vertices faces simplified vertices 
increase grid size results greater memory hash table bsp tree representative points held tree 
fold increase size grid dimension yields percent reduction error 
amount memory bsp tree directly related size quality resulting approximation 
vertex simplified mesh corresponds leaf tree 
total number nodes tree leaves 
current implementation node memory footprint bytes 
addition occupied cell quantization grid uses bytes storage 
size quantization grid related desired quality approximation user defined difficult derive formula theoretical memory usage 
comparing method lindstrom say times memory required algorithm 
generating approximations number vertices algorithm quantization grid larger grid employed uniform clustering order generate better quality approximation 
addition grid cells store twice quadric information 
grid tree resolution determined desired quality size simplified mesh memory consumption algorithm remains completely independent input size 
adjusting quantization grid allows affect error approximation changing approximation size 
uniform clustering changing grid size changes size simplified mesh lacks feature 
discussion method inspired simp system brodsky watson key differences 
significantly employing initial quantization step algorithm able operate meshes large fit core simp confined operating meshes small fit memory 
algorithms differ construct adaptive spatial subdivision simplify input mesh 
determination leaf tree split uses different metric construction splitting planes 
simp splits cell face normals exhibit variation choose split leaf largest primal quadric error 
constructing splitting planes simp need gather normal midpoint information face cluster 
performs topology check guarantee disconnected components cell fact separated splitting plane 
bsp tree relies eigenvectors dual quadric corresponding directions minimum maximum point spread generate plane 
point set covariance manner allows construct plane requiring access geometry topology original surface prohibitively expensive 
chose point distribution information reasons efficiency believe situations approach preferable constructing splitting planes curvature information contained primal quadric 
consider planar surface high frequency perturbations running 
pattern normal variation unclear bumps point set covariance matrix allow approximation surface form squares best fit plane 
simplification process encountering ambiguous pattern normal variation assured 
split planes computed regard faces mesh making coherent pattern curvature discernible 
quadric quantization construct spatial partition allows algorithm large meshes emphasize large tessellated meshes intended domain method 
intend algorithm replacement traditional simplification methods polygonal models small fit core best handled algorithms 
general caveat spatially clustering methods tend produce approximations altered topology 
generating closing small holes creating self intersections common occurrences manifold surfaces approximated surface 
approximation intended visualization artifacts tend significant considered intended application sensitive changes 
results evaluate performance algorithm implemented uniform clustering method described lindstrom 
note implementation differs quadric metric originally formulated garland heckbert described 
implement singular value decomposition step robust inversion quadric matrices suggests 
neglecting details little impact comparative evaluation vertices avg 
error time sec model input output adaptive uniform adaptive uniform buddha buddha dragon dragon matthew lucy table comparison uniform adaptive clustering 
due input size limitations error tool error information unavailable st matthew lucy models 
implementations impacted lack 
adaptive clustering algorithm prohibit implementation features 
order evaluate error approximation created tool samples original simplified models vertices computes distance surfaces points 
error metric similar employed hoppe tool metro 
tool begins computing distance vertex original mesh simplified mesh 
second pass computes distance vertex simplified mesh back original mesh 
average distances taken average error 
table summarizes results experiments run standard linux pc mhz processor mb memory scsi disk 
general adaptive algorithm produced better quality approximations 
case coarse approximations dragon buddha models error reduced percent 
finer resolutions mirror behavior error reduction percent cases 
time required simplify adaptively varied times required uniform clustering 
corresponds expectations adaptive method effectively simplifies mesh twice uniform method 
size quantization grid adaptive simplification process larger grid uniform clustering factor dimension 
shows error distributed buddha model simplified vertices uniform adaptive clustering 
increasing error denoted color progression blue green yellow red 
color scales images 
appears uniform clustering generally introduced error regions high curvature nose flower 
exhibiting error highly curved areas adaptive clustering greater difficulty generating approximation planar surfaces witnessed error seen base model 
lucy saint matthew models large estimate surface error manner applied buddha dragon 
visual comparison results shown 
highlight differences images result aggressive simplification order magnitude shown 
shows simplified versions lucy produced uniform clustering adaptive method 
uniform clustering version displays artifacts wings spiking adaptive version 
spikes related cell enclosing nearly parallel sheets surface case quadric vertex placement yield vertex position outside cell 
version uniform clustering proposed lindstrom implements clamping scheme deal situations 
significant difference approximations occurs detail face statue 
resolution uniform clustering removed mouth nose head started sink neck 
adaptive clustering able better able alter size distribution polygons approximation 
result face retained distinct features particularly eyes neck 
portions statues adaptive version produced better approximation torch uniform clustering displayed better ability handling sharp border base 
case saint matthew approximations shown regularity uniform grid seen approximation 
lines checkerboard pattern visible chin cheeks 
approximation generated adaptive method exhibit artifact 
features nose sharper adaptive version 
cases lack boundary constraints caused mesh eaten away border 
obvious images adaptive simplification method greater propensity join spatially separated sections mesh uniform clustering 
lucy approximations example adaptive simplification joins raised arm wing uniform clustering rarely 
clearer example behavior seen coarsest approximation shown 
cell size uniform grid clamping usually limits far representative vertex drift original vertices cell 
adaptive spatial partition offers bound effect price paid adaptivity 
variable cell size allows polygons areas high detail fewer polygons planar regions implies poor choice splitting plane result representative vertex moving far original mesh 
hope avoid artifact designing complex rules placement splitting planes 
described adaptive surface simplification algorithm capable efficiently producing high quality approximations massive polygonal models 
experiments demonstrated approximations generated algorithm display artifacts associated imposition artificial grid 
result quality approximations exceed quality approximations produced uniform clustering 
execution time remains competitive uniform clustering 
key algorithm step process quadric quantization partition construction simplification 
process yields simplification hierarchy making possible create level detail representation generate progressive transmission resorting computationally expensive edge contraction algorithm 
see opportunities research 
quality simplified models enhanced prevent unnecessary joining elements mesh 
believe accomplished judicious choice splitting planes requiring additional information accumulated quantization phase 
second simplification hierarchy implicit bsp tree produced algorithm leveraged provide progressive transmission file format describing surface multi resolution model 
marc levoy people working digital michelangelo project making models available 
pankaj agarwal subhash suri 
surface approximation geometric partitions 
proc 
th acm siam sympos 
discrete algorithms pages 
available duke cs tech report ftp ftp cs duke edu dist techreport ps 
bernardini rushmeier taubin 
case study scanning michelangelo 
acm siggraph course notes course 
acm sig graph august 
dmitry brodsky benjamin watson 
model simplification refinement 
proceedings graphics interface pages may 
cignoni scopigno 
comparison mesh simplification algorithms 
computers graphics 
cignoni scopigno 
metro measuring error simplified surfaces 
computer graphics forum june 
vcg iei pi cnr metro html 
el yi jen chiang 
external memory simplification 
computer graphics forum pages august 
michael garland 
multiresolution modeling survey opportunities 
state art report pages 
eurographics september 
www uiuc edu garland papers html 
michael garland 
quadric polygonal surface simplification 
phd thesis carnegie mellon university cs dept 
tech 
rept 
cmu cs 
www uiuc edu garland research thesis html 
michael garland paul heckbert 
surface simplification quadric error metrics 
siggraph proc pages august 
www uiuc edu garland research quadrics html 
michael garland andrew paul heckbert 
hierarchical face clustering polygonal surfaces 
proceedings acm symposium interactive graphics pages 
gottschalk lin manocha 
obbtree hierarchical structure rapid interference detection 
proceedings siggraph pages 
hugues hoppe 
progressive meshes 
siggraph proc pages august 
research 
microsoft com hoppe 
hugues hoppe 
smooth view dependent level detail control application terrain rendering 
ieee visualization conference proceedings pages oct 
philip hubbard 
approximating polyhedra spheres time critical collision detection 
acm trans 
graphics 
marc levoy kari pulli brian curless rusinkiewicz david koller lucas pereira matt sean anderson james davis jeremy ginsberg jonathan shade duane 
digital michelangelo project scanning large statues 
proceedings siggraph pages july 
peter lindstrom 
core simplification large polygonal models 
proceedings siggraph pages july 
peter lindstrom claudio silva 
memory insensitive technique large model simplification 
ieee visualization october 
peter lindstrom greg turk 
fast memory efficient polygonal simplification 
ieee visualization conference proceedings pages oct 
kok lim low seng tan 
model simplification vertex clustering 
symposium interactive graphics 
acm siggraph 
www nus 
sg 
david luebke carl 
view dependent simplification arbitrary polygonal environments 
siggraph proc pages august 
chris prince 
progressive meshes large models arbitrary topology 
master thesis university washington 
jarek rossignac paul borrel 
multi resolution approximations rendering complex scenes 
kunii editors modeling computer graphics methods applications pages 
rusinkiewicz marc levoy 
multiresolution point rendering system large meshes 
proceedings siggraph pages july 
hanan samet 
design analysis spatial data structures 
addison wesley reading ma 
uniform clustering adaptive clustering error distribution buddha model 
original uniform clustering adaptive clustering face st matthew simplified vertices vertices 
original uniform adaptive uniform adaptive lucy statue simplified vertices 
