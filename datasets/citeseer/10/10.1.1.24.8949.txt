similarity retrieval top relational databases rgen schumacher ralph bergmann tec gmbh kaiserslautern germany schumacher com center learning systems applications lsa university kaiserslautern postfach kaiserslautern germany bergmann informatik uni kl de presents approach realize case retrieval engine top relational database 
nutshell core idea approximate similarity retrieval sql queries 
approach avoids duplicating case data compiling index structures ideal huge cases bases subject changes 
approach fully implemented part commercial cbr toolbox experimental evaluation demonstrates impressive retrieval behaviour 
case reasoning cbr important technique realizing intelligent product recommendation agents electronic commerce applications 
core applications product database describes specific features available product 
applying cbr product database treated case base product record database interpreted case case base 
retrieval phase cbr cycle product cases retrieved similarity query describes product requirements important customer 
retrieved products customer may customized applying adaptation techniques cbr 
core problem developing commerce applications enable case recommendation agent get efficient date access product database 
typical application scenario follows products stored existing relational database independent recommendation agent 
database maintained supplier products services related products 
number products database huge 
rapid continuous changes product database particular products individual items cars unavailable sold 
representation products quite simple typically list attribute values 
link product database case retrieval component different architectural variants possible 
retrieval inside database 
purely technical point view ideal approach integrate similarity retrieval function database 
enable efficient data access ensure date consistent view data 
ideal scenario database able automatically process similarity query formulated standardized query format enabling flexible representation similarity measures 
research literature databases interesting results indexing structures similarity retrieval 
unfortunately techniques introduced commercially available standard databases 
exists standardized language similarity query formulation widely accepted database community 
due large number different databases different vendors possibly hold product data currently feasible realize case retrieval inside database near 
retrieval top database 
pragmatic point view integration retrieval function database feasible moment second architectural variant applied medium term solution 
variant means realize similarity retrieval top database 
retrieval engine separate module interfaces database get access product data 
different variants possible 
bulk loading products retrieval engine approach replicates product database inside retrieval engine 
shortcomings approach required storage space doubled necessary update duplicated case base time product database updated 
major consistency problems arise 
constructing storing index structure similarity retrieval retrieval engine problem duplicating product data avoided consistency problem remains 
approximating similarity retrieval sql queries third option mac fac approach 
proposed query sequence sql queries constructed fetch cases database detailed similarity assessment 
approach avoids consistency problem relies date data 
challenge develop approach maintains efficiency 
remainder analyze detail problem approximating similarity retrieval sql queries presents new retrieval algorithm generalizes results 
approach implemented java retrieval service tec framework time workshop 
give experimental results performance measurements section 
foundations assume cases queries represented lists attribute value pairs 
allowed range type ti attribute ai defined subset natural real numbers finite set symbolic values 
value attribute case element type special value undefined ai ti undefined 
cases easily represented table relational database attribute corresponds column table row table completely describes single case 
attribute undefined corresponding value database table null 
relation case structure database tables called mapping 
identify attributes table columns denote columns ai 
cases relatively easy compute similarity query case attribute define local similarity measure describes similarity different attribute values 
numerical attributes monotonous function distance values symbolic attribute defined table containing similarity values 
assume local similarity query attribute undefined expresses don care semantic case attribute undefined expresses penalty case lacks feature user asked 
global similarity objects calculated accumulating local similarities attribute 
assume weighted average local similarities computed considerations apply similar approaches 
query object query contain additional information retrieval contain user weights attribute express attributes important customer second customer specify filters define hard constraints attribute values case 
contains number cases retrieve number consider query weights filters assume attribute types numeric totally ordered 
view case base dimensional euclidean space object represented point attributes defined 
similar cases lie kind hyper rhombus centered query point size rhombus determined similar retrieved cases see 
view way sql query form greater distance smaller similarity values similarity rhombus sql rectangle max min min 
volumes covered queries select ai mini ai maxi 
aim aim maxim ai aim attributes query undefined get hyper rectangle see 
goal rectangular sql queries retrieve cases inside similarity rhombus database 
query relaxation step step step retrieval rings included rhombus 
retrieval rings sql rectangles solution construct series rectangular rings query point shown 
step retrieval starts query point max cases ring retrieved long cases needed determine retrieval result 
process called query relaxation 
cases read database ordered similarity query similar cases returned 
technique described algorithm shown 
algorithm input object query integer output list object result step query result query step query merge result step step 
basic retrieval algorithm function query result implement suitable criterion decide retrieval finished 
criterion retrieval yield complete result list cases case base similar query result list 
similarity rhombus covered sql queries defined similar object lying exactly borders rectangle see 
similar case result list similar query object know find similar cases relaxing query 
practice criterion easily mean huge part case base searched object corners sql rectangle similar query attributes query 
applications completeness search important 
alternative criterion retrieval results 
tests shown sufficient yield result sure sql queries cover significantly cases 
speed relaxation crucial performance retrieval relax query fast risk retrieve cases database imported search engine evaluated 
cost main memory ordering cases take note algorithm time algorithm user examine intermediate result trigger step result sufficient 
long 
relaxation slow lot sql queries 
may optimal memory evaluation slowed overhead involved database query 
database runs machine search engine create lot network traffic 
want retrieve necessary cases database queries 
considerations view space cases dimensional hyper cube volume edges cube length 
distance values type defined simi simi local similarity measure type 
assume cases distributed equally space 
goal consideration find parameters step query relaxation step cases retrieved database build acceptable query result 
introduce parameter nmax maximum number cases want read database single step 
clearly function similar cases included number cases write function nmax 
generate bounds database query determine volume query cover order result nmax cases 
sql query volume computed query object qn select bounds speed relaxation equal attributes get qij qij call minimal global similarity cases covered rectangle similar query 
assumed cases distributed equally describe volume case vc number cases case base leads vc nmax nmax way minimum global similarity relaxation step sim depends number defined attributes query requested size result set number cases database 
construct sql query local similarity measures invertible possible determine set qj xj tj qj xj set contains attributes values local similarity query greater minimum global similarity 
attribute type totally ordered similarity measure monotonous respect distance values express set interval qj maxj 
forms set easily construct sql query clause query step denote cs 
steps compute sim way linear growth query volume way sim change slowly higher mean new cases covered query 
prevent ensure eventually cases case base reached set sims 
modify sql queries step complete rectangle current ring read database 
done excluding rectangle step query select attributes table cs cs advanced features earlier stated similarity case query computed weighted average local similarities attributes 
additionally query define user weights modify predefined weights attributes filters exclude cases certain attribute values 
significantly changes form similarity rhombus taken account constructing database queries 

effect filter filter just cuts part solution space shown 
general effect rhombus quite complex practical applications special filter type filter 
specifies result cases certain attribute value greater oder smaller defined query 
kind filter easy consider cuts exactly half similarity rhombus 
easily exclude filtered cases sql query read cases valid solutions 
consequence get half number cases wanted read 
compensate double query volume attribute constrained filter 
high weight 
effect weights low weight consider weights denote complete weight attribute aj wj default weight 
different weights different attributes change form similarity rhombus shown attribute higher weight matched closely lower weight 
change form sql rectangle similar way 
goal similarity case corner rectangle minimum global similarity 
done computing attribute aj minimum local similarity leads equation wj wj problem concerns underspecified queries 
queries exact matches database 
naive approach load cases database selected query leads huge amounts data read database 
avoid implemented import database way nmax cases imported database result set 
necessary import cases result set read remaining cases query having perform new database query 
course general result certainly incomplete occurs cases exact matches serious problem 
benchmarks want describe tests give impression retrieval performance technique 
aware systematic evaluation necessary achieve significant results 
software tests implements features described section 
chose special settings retrieval stopped cases evaluated retrieval incomplete 
measure error caused criterion 
function nmax chose definition nmax max nmin nmin log nr min motivated idea small want read relatively cases database order ensure best cases bigger completeness result important performance 
results settings nr min nmin 
benchmark compared database retrieval conventional linear retrieval cases main memory query computes similarity cases sorts similarity 
linear retrieval database retrieval engines implemented java compiled native code ibm 
tcp ip servers queries send network 
queries results written xml 
timings include sending queries receiving results 
jdbc databases test microsoft access jdbc odbc bridge included jdk microsoft sql server evaluation version jdbc type driver net software 
computers tests standard pcs running microsoft windows nt 
problem testing database containing cars vw golf model 
named problem golf crisis 
test case base containing cases having textual symbolic numeric attributes 
represent minute travels offered imaginary travel agency 
sample query defines numeric symbolic attributes weights filters results requested 
table sums result consecutive retrieval commands 
sql server running computer test 
average time ms linear retrieval db retrieval db retrieval access sql server tests show linear retrieval takes roughly twice long db retrieval access times long db retrieval sql server 
quite surprising expected case number small db retrieval having number cases retrieval volume relatively big easily happen cases loaded database 
case db retrieval faster linear retrieval 
results prove potential retrieval technique 
second test interesting number cases database cars described symbolic numeric attributes 
time stored data sql server comparison linear retrieval possible simply possible load cases linear retrieval engine 
measure influence network traffic overhead querying remote database test retrieval engine running host database 
transferring query result client retrieval engine imposed network traffic relatively small amounts data 
table shows results different queries repeated times 
queries requested result cases 
db retrieval remote db retrieval engine db server running db server query ms query ms query ms queries standard queries 
query defines symbolic numeric attributes filter specified 
query defines symbolic numeric attributes numeric attributes filter 
different times due different densities cases query cases query volume longer takes loading cases calculation similarities 
query golf crisis query mentioned defines attribute model vw golf 
thousands cases exact matches query restricted 
timings show influences performance retrieval engine badly 
shows network traffic overhead growing extremely case lot data send network small retrieval result 
see possibility solve problem inside retrieval engine 
solution need help client warn customers enter attributes query take quite long 
hand retrieval time little second bad number cases 
discussion want give short discussions benefits shortcomings approach 
recognize advantages efficient retrieval benchmarks indicate retrieval performance expected huge case bases 
consistency problem query answered cases database having rebuild index structures loading cases retrieval engine 
cases available immediately stored database 
technique optimal applications case bases change 
independence database system standard sql database implementation technique 
database specific programming done inside outside database 
existing databases tables required form directly retrieval 
apply database view provide data suitable form usually changed database schema 
hand limitations worked 
retrieval technique far limited attribute value representation 
extensions representing structured cases necessary 
step direction support set valued attributes 
relational databases represented relations table defining row case includes values set 
attributes complex probably involves separate query set values attribute 
second current model idealistic assumption uniform distribution cases representation space 
assumption violated efficiency retrieval decrease cases retrieved database sql queries created 
expect problem avoided incorporating introspective learning approach estimates density case base different regions 
detailed systematic experimental evaluation necessary compare technique retrieval approaches 
includes evaluation error retrieval performance different criteria different relaxation patterns 
planned features finished time workshop 
time able report lessons learned commercial application retrieval engine 
authors wish staff tec valuable comments development database retrieval engine 
funding research partially provided commission european communities esprit contract ep websell project intelligent sales assistants world wide web 
partners websell tec prime contractor germany ims ireland iwt gmbh ag switzerland trinity college dublin ireland university kaiserslautern germany 

berchtold ertl keim 
kriegel seidl 
fast nearest neighbor search high dimensional space 
proc 
th int 
conf 
data engineering icde pages 

berchtold keim 
kriegel 
tree index structure high dimensional data 
proc 
nd int 
conf 
large data bases pages 

bergmann breen ker wess 
developing industrial case reasoning applications methodology 
lecture notes artificial intelligence state art survey lnai 
springer verlag 

roth berghofer 
architectures integration cbr systems databases commerce 
th german workshop case reasoning 

kitano shibata 
retrieving cases relational databases strike wide case systems 
proceedings th international joint conference artificial intelligence ijcai 

schmitt bergmann 
applying case reasoning technology product selection customization electronic commerce environments 
th bled electronic commerce conference 

seidl 
kriegel 
optimal multi step nearest neighbor search 
proc 
acm sigmod int 
conf 
management data pages 

wilke 
knowledge management intelligent sales support electronic commerce 

infix verlag 

wilke lenz wess 
intelligent sales support cbr 
lenz bartsch sp rl 
burkhard wess editors case reasoning technology foundations applications pages 
springer verlag 
