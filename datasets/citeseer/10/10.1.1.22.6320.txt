answer set programming plan generation vladimir lifschitz university texas austin tx usa vl cs utexas edu idea answer set programming represent computational problem logic program answer sets correspond solutions answer set solver smodels dlv nd answer set program 
applications method planning related line research frame problem started invention formal nonmonotonic reasoning 
kautz selman proposed approach problem plan generation reducing problem nding satisfying interpretation set propositional formulas 
method known satis ability planning planners 
discuss related idea due subrahmanian zaniolo reducing planning problem problem nding answer set stable model logic program 
advantage answer set programming approach planning representation properties actions easier logic programs axiomatizations classical logic view nonmonotonic character negation failure 
best known answer set solvers systems computing answer sets available today smodels dlv results computational experiments smodels planning reported 
see www research att com kautz blackbox latest system kind created inventors satis ability planning 
www tcs hut fi software smodels www dbai tuwien ac proj dlv earlier reports applications answer set programming planning discussed perspective research frame problem nonmonotonic reasoning done ai 
speci cally relate line started invention default logic nonmonotonic formalism turned particularly closely related logic programming 
publication yale shooting scenario widely believed solution frame problem outlined inadequate 
alternatives proposed 
turned approach completely satisfactory rest default theory set correctly 
fact general discussed section 
see descriptions actions style basis planning answer set solvers 
section review concept answer set de ned relation default logic :10.1.1.24.6050
describe computational possibilities answer set solvers section illustrate answer set programming method applying graphtheoretic search problem section 
section turn answer set solvers plan generation 
section describes relation research actions planning 
answer sets logic programs set propositional symbols called atoms 
literal expression form atom 
call symbol classical negation distinguish symbol negation failure 
rule element expression form literal 
rule ordered pair head body head body nite sets rule elements 
rule constraint head disjunctive cardinality head greater 
head fl body fl lm lm write lm lm drop body rule empty 
program set rules 
de nitions di er traditional description syntax logic programs ways 
rules propositional atoms assumed formed predicate symbols constants variables 
input le answer set solver usually contain schematic rules variables schematic rule treated abbreviation set rules obtained grounding 
result grounding propositional object just set clauses input satis ability solver 
hand ways general rules traditional logic programs 
may contain classical negation symbol traditional logic programs kind negation negation failure 
head may contain rule elements empty traditionally head rule single atom 
negation failure symbol allowed occur head rule body traditional logic programming 
see additional expressivity syntactic features useful 
de nition answer set notion answer set de ned rst programs contain negation failure rule program 
program consistent set literals 
say closed rule head body say answer set minimal sets closed relative set inclusion 
instance program answer sets fp rg fqg add constraint get program answer set rst sets 
hand add rule get program answer set fp rg 
extend de nition answer set programs negation failure take arbitrary program consistent set literals 
reduct relative set rules lm rules contains literals contain lm program negation failure 
say answer set answer set consider instance program fp rg 
reduct relative set consists rules answer set reduct answer set 
easy check program answer sets 
example illustrates original motivation de nition answer set providing declarative semantics negation failure implemented existing prolog systems 
program prolog system respond query query say query belongs answer set 
sense role answer sets similar role concept completion provides alternative explanation behavior prolog entailed program completion 
comparison default logic program head rule single literal lm lm transform propositional default theory sense turning rule default 
lm lm simple correspondence answer sets extensions default theory dt answer set deductive closure consistent extension dt conversely consistent extension dt deductive closure answer set 
instance default theory corresponding program extension default theory deductive closure program answer set fp rg 
correspondence rule negation failure represented default justi cations say inference rule 
fact rule empty body corresponds default prerequisites justi cations axiom 
normal default counterpart rule logic programs de ned general defaults rules may elements head elements may include negation failure 
hand defaults general may contain arbitrary propositional formulas just literals conjunctions literals 
connection interesting note technical issues related yale shooting controversy ects actions described axioms loaded alive result shoot inference rules loaded alive result shoot formulation better choice 
language logic programs written alive result shoot loaded formula hand correspond rule sense logic programming 
paradoxically limitations language logic programs play positive role case eliminating bad representational choices available properties actions described default logic 
generating eliminating answer sets perspective answer set programming kinds rules play special role generate multiple answer sets eliminate answer sets program 
way write program answer sets disjunctive rules atoms program consists rules form answer sets 
instance program answer sets fp qg fp qg qg qg observed rule equivalently replaced program nondisjunctive rules notation default logic rules written alternatively program answer sets formed rules form literal 
rule answer sets flg 
program consists rules form answer sets subsets set literals occurring rules 
instance answer sets program subsets fp qg 
rules eliminate undesirable answer sets constraints rules empty head 
saw section appending constraint program eliminates answer sets 
ect adding constraint program monotonic collection answer sets extended program part collection answer sets original program 
precisely say set literals violates constraint lm lm lm lm program obtained program adding constraint 
set literals answer set answer violate constraint 
instance second answer sets program violates constraint rst doesn accordingly adding constraint eliminates second program answer sets 
see rules kinds generate answer sets eliminate consider translation propositional theories logic programs 
set clauses program consisting rules atoms occurring constraints clauses 

denote literal complementary 
answer sets correspondence truth assignments satisfying truth assignment represented set literals assigns value true 
answer set solvers system dlv computes answer sets nite programs negation failure heads rules rule program 
instance input le return answer sets program 
input le return answer set program 
system smodels requires additionally input program contain disjunctive rules 
limitation mitigated circumstances 
input language smodels allows express exclusive disjunctive rule disjunctive rule body accompanied constraints body combination represented 
body second smodels allows represent important disjunctive combination head rule enclosing braces list rules form body conveniently represented smodels input le line body instance rules written simply 
dlv smodels allow user specify large programs compact fashion rules schematic variables abbreviations 
systems employ sophisticated grounding algorithms fast simplify program process grounding 
generate vertex 
define joined edge 
joined edge 
test joined vertex vertex 
display hide 
show 
search large clique 
answer set programming idea answer set programming represent computational problem program answer sets correspond solutions answer set solver nd solution 
example show method nd large clique subset vertices graph vertices joined edge cardinality constant shows smodels input le nd large clique determine exist 
le supposed accompanied le describes graph speci es value shown 
possible values variables restricted domain predicates vertex edge 
case graph described predicate vertex holds numerals const 
vertex 
edge 
edge 
edge 
edge 
edge 
edge 
edge 
edge 
test clique program 
predicate edge holds pairs vertices 
accordingly expression vertex set atoms vertex meaning expression understood abbreviation set rules form discussed section 
answer sets set rules arbitrary sets formed atoms 
symbol rule restricts answer sets cardinality instance cardinality construct available smodels 
allows user bound number atoms certain form included answer set 
lower bound placed left expression braces example upper bound placed right 
main parts program labeled generate test 
de nes large collection answer sets potential solutions 
consists constraints weed answer sets correspond solutions 
discussed potential solution subset vertices cardinality constraints eliminate subsets cliques 
similar generating eliminating rules section 
part labeled define contains de nition auxiliary predicate joined 
part labeled display tells smodels elements answer set included output instructs system hide literals encode clique 
case problem shown part answer set displayed smodels discussion example terms generating set potential solutions testing elements illustrates declarative meaning program understood description happening operation answer set solver 
system smodels process program shown producing answer sets generate part checking satisfy constraints test part just reasonable satis ability solver search model set clauses generating possible truth assignments checking clauses satis ed 
search procedures employed systems smodels dlv sophisticated search strategies somewhat similar ecient satis ability solvers 
answer set programming applications practically important computational problems 
problems planning 
planning example code figures allows smodels solve planning problems blocks world 
imagine blocks moved robot grippers blocks moved simultaneously 
robot unable move block block moved time 
usual blocks world planning assume block moved blocks top 
domain predicates example time block location location block table 
constant upper bound lengths plans considered 
nd shortest plan minimize feature smodels discussed 
generate section de nes potential solution arbitrary set move actions executed prior number actions executed time exceed number grippers 
rules labeled define describe sequence states corresponding execution potential plan 
sequence states represented complete set literals 
define rules specify positive literals describing initial positions blocks 
rst define rules specify positive literals describing po time 
location block 
location table 
generate move block location grippers time define effect moving block move block location time inertia location block time uniqueness location block location location time 
planning blocks world part 
test blocks top block block block time 
block moved clear move block block location time block moved block moved move move block block location time display hide 
show move 
planning blocks world part const grippers 
const 
block 
initial state goal define 
table 

table 

table 
test 

table 


table 
test planning program 
sitions blocks time terms positions time uniqueness location rule speci es negative literals included answer set terms positive literals answer set 
note second define rule smodels representation normal default consistent assume time block location time location see section 
default interesting compare solution frame problem proposed reiter section 
take relation tuple arguments expression turn di erence defaults rst describes change terms passage time terms state transitions 
consider constraints labeled test 
role rst constraint prohibit indirectly actions create physically impossible con gurations blocks moving blocks block constraints express robot limitations mentioned section 
adding constraints program eliminates answer sets corresponding sequences actions executable initial state 
extend program adding test section eliminate addition sequences actions lead goal state 
answer sets program correspondence solutions planning problem 
display section instructs smodels hide literals move 
part answer set displayed smodels list actions included plan stable model move table move table move move move move true duration discussion description blocks world domain figures sophisticated ways shooting example dicult formalize 
version blocks world includes concurrent execution actions 
second ects moving block described indirectly 
shooting domain ects actions speci ed explicitly told action load ects uent loaded action shoot ects uent alive 
description blocks world di erent 
block located top block moved table action ects uents table true false 
rst ects described explicitly rst define rule description second ect indirect uniqueness location rule allows conclude block top block anymore fact block table 
rami cation problem problem describing indirect ects actions addressed classical action representation formalisms strips adl 
executability actions described example indirectly 
discussed impossibility moving blocks block implicit description blocks world executing action created con guration blocks prohibited constraints 
strips adl executability action described explicitly listing action preconditions 
usual description blocks world asserts instance moving block top executable target location clear 
description applicable blocks moved simultaneously initial state shown block moved block block moved time 
fortunately answer set approach describing actions adopted specifying action preconditions explicitly unnecessary 
usefulness indirect descriptions action domains applications ai demonstrated report modelling reaction control system rcs space shuttle 
system consists fuel tanks tanks helium tanks maneuvering jets pipes valves components 
behavior rcs ected ipping switches 
action direct ect trivial changing position switch causes switch new position 
postulate asserting valve functional stuck closed switch controlling open closed position valve open closed 
facts tell certain conditions ipping switch indirectly ects corresponding valve 
furthermore helium talk correct pressure open path propulsion tank paths leak propulsion tank correct pressure 
postulate conclude certain conditions ipping switch ects pressure propulsion tank 
multi level approach describing ects actions leads structured easy understand formal description operation rcs 
answer set programming approach handles multi leveled descriptions quite easily 
relation action languages satis ability planning representing properties actions formulated terms high level action languages :10.1.1.34.7448
descriptions actions languages concise logic programming representations 
example counterparts rst define rules language move causes inertial design language system causal logic proposed 
large class action descriptions equivalent translation logic programming notation de ned 
possibility translation illustrates expressive power action representation method 
noted answer set programming approach planning related satis ability planning 
fact formal connection methods 
program classical negation positive order consistent tight answer sets characterized collection propositional formulas formulas obtained applying completion process program 
translations language described happen produce tight programs 
describing planning problem program translating program propositional logic nally invoking satis ability solver nd plan form satis ability planning viewed answer set programming answer set solvers 
essentially planning performed causal calculator 
answer set programming solutions combinatorial search problem represented answer sets 
plan generation domains involve actions indirect ects promising application area programming method 
systems smodels dlv allow solve nontrivial planning problems absence domain speci control information 
larger problems information necessity 
possibility encoding domain speci control knowledge answer set solver crucial progress area just possibility control knowledge propositional solvers crucial progress satis ability planning 
topic 
useful comments preliminary versions provided maurice bruynooghe marc denecker erdem gan paolo michael gelfond lee nicola leone victor marek norman mccain ilkka niemel przymusinski law truszczy nski hudson turner 
partially supported national science foundation iis 
erdem vladimir lifschitz 
fages theorem answer set programming 
proc 
nmr 
nicole bidoit christine froidevaux 
minimalism subsumes default logic circumscription 
proc 
lics pages 
www cs utexas edu users tag cc arxiv org abs cs ai keith clark 
negation failure 
gallaire jack minker editors logic data bases pages 
plenum press new york 
yannis dimopoulos bernhard nebel koehler 
encoding planning problems non monotonic logic programs 
sam steel rachid alami editors proc 
european conf 
planning pages 
springer verlag 
erdem vladimir lifschitz 
transformations logic programs related causality planning 
logic programming nonmonotonic reasoning proc 
fifth int conf 
lecture notes arti cial intelligence pages 
fran cois fages 
consistency clark completion existence stable models 
journal methods logic computer science 
richard fikes nils nilsson 
strips new approach application theorem proving problem solving 
arti cial intelligence 
michael gelfond 
autoepistemic logic formalization commonsense reasoning 
michael johan de kleer matthew ginsberg erik sandewall editors non monotonic reasoning nd int workshop lecture notes arti cial intelligence pages 
springer verlag 
michael gelfond vladimir lifschitz 
stable model semantics logic programming 
robert kowalski kenneth bowen editors logic programming proc 
fifth int conf 
symp pages 
michael gelfond vladimir lifschitz 
logic programs classical negation 
david warren peter szeredi editors logic programming proc 
seventh int conf pages 
michael gelfond vladimir lifschitz 
representing action change logic programs 
journal logic programming 
michael gelfond vladimir lifschitz 
action languages 
electronic transactions ai 
enrico giunchiglia vladimir lifschitz 
action language causal explanation preliminary report 
proc 
aaai pages 
aaai press 
steve hanks drew mcdermott 
nonmonotonic logic temporal projection 
arti cial intelligence 
brian 
simple causal minimizations temporal persistence projection 
proc 
aaai pages 

logic programs stable model semantics solve deadlock reachability problems safe petri nets 
proc 
fifth int conference tools algorithms construction analysis systems pages 
yi cheng huang bart selman henry kautz 
control knowledge planning bene ts tradeo proc 
aaai pages 
henry kautz 
logic persistence 
proc 
aaai pages 
henry kautz bart selman 
planning satis ability 
proc 
ecai pages 
vladimir lifschitz 
pointwise circumscription preliminary report 
proc 
aaai pages 
vladimir lifschitz 
formal theories action preliminary report 
proc 
ijcai pages 
vladimir lifschitz 
action languages answer sets planning 
logic programming paradigm year perspective pages 
springer verlag 
vladimir lifschitz 
answer set planning 
proc 
iclp pages 
www ep liu se ea cis vladimir lifschitz hudson turner 
representing transition systems logic programs 
logic programming non monotonic reasoning proc 
fifth int conf 
lecture notes arti cial intelligence pages 
vladimir lifschitz thomas woo 
answer sets general nonmonotonic reasoning preliminary report 
bernhard nebel charles rich william swartout editors proc 
third int conf 
principles knowledge representation reasoning pages 
victor marek law truszczy nski 
stable semantics logic programs default theories 
proc 
north american conf 
logic programming pages 
victor marek law truszczy nski 
stable models alternative logic programming paradigm 
logic programming paradigm year perspective pages 
springer verlag 
norman mccain hudson turner 
causal theories action change 
proc 
aaai pages 
paul morris 
anomalous extension problem default reasoning 
arti cial intelligence 
ilkka niemel logic programs stable model semantics constraint programming paradigm 
annals mathematics arti cial intelligence 
ilkka niemel patrik simons timo soininen 
extending stable model semantics 
journal 
edwin pednault 
adl exploring middle ground strips situation calculus 
ronald brachman hector levesque raymond reiter editors proc 
int conf 
principles knowledge representation reasoning pages 
raymond reiter 
logic default reasoning 
arti cial intelligence 
yoav shoham 
chronological ignorance time nonmonotonicity necessity causal theories 
proc 
aaai pages 
timo soininen ilkka niemel developing declarative rule language applications product con guration 
gopal gupta editor proc 
int workshop practical aspects declarative languages lecture notes computer science pages 
springer verlag 
subrahmanian carlo zaniolo 
relating stable models ai planning domains 
proc 
iclp 
hudson turner 
representing actions logic programs default theories situation calculus approach 
journal logic programming 
richard watson 
application action theory space shuttle 
gopal gupta editor proc 
int workshop practical aspects declarative languages lecture notes computer science pages 
springer verlag 

