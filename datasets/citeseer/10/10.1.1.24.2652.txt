weaknesses key scheduling algorithm rc scott adi shamir cisco systems west drive san jose ca cisco com computer science department weizmann institute rehovot israel 
wisdom weizmann ac il 
weaknesses key scheduling algorithm rc describe cryptanalytic signi cance 
identify large number weak keys knowledge small number key bits su ces determine state output bits non negligible probability 
weak keys construct new rc mount related key attacks practical complexities 
show rc completely insecure common mode operation widely deployed wired equivalent privacy protocol wep part standard xed secret key concatenated known iv modi ers order encrypt di erent messages 
new passive ciphertext attack mode recover arbitrarily long key negligible amount time grows linearly size bit iv modi ers 
rc widely stream cipher software applications 
designed ron rivest kept trade secret leaked 
rc secret internal state possible bits words indices 
practical applications rc huge state log 
bits 
analyze key scheduling algorithm ksa derives initial state variable size key describe signi cant weaknesses process 
rst weakness existence large classes weak keys small part secret key determines large number bits initial permutation ksa output 
addition pseudo random generation algorithm translates patterns initial permutation patterns pre output stream rc undesirable property weak keys initial outputs ected number key bits 
weak keys length divisible non trivial power rest number words word contains bits 
rc uses key words xing bits particular pattern determines qn bits initial permutation probability half determines various pre xes output stream various probabilities depending length 
second weakness related key vulnerability applies part key ksa exposed attacker 
consists observation secret part key numerous di erent exposed values attacker rederive secret part analyzing initial word relatively little 
concatenation long term secret part attacker visible part commonly mode rc particular wep wired equivalent privacy protocol protects wireless networks 
new attack mode practical key size modi er size including bit recommended original wep bit recommended revised version wep 
organized way section describe rc previous results security 
section consider slightly modi ed variant key scheduling algorithm called ksa prove particular pattern small number key bits su ces completely determine large number state bits 
show weakness ksa denote invariance weakness exists weaker form original ksa 
section show high probability patterns initial states associated weak keys propagate rst outputs small key bits determine large number bits output stream 
section describe cryptanalytic applications invariance weakness including new type distinguisher 
sections describe second weakness denote iv weakness show common method rc vulnerable practical attack due weakness 
section show weaknesses separately related key attack 
appendices examine iv weakness attack real system appendix invariance weakness construct ciphertext distinguisher prove rc low sampling resistance appendices derive secret key early permutation state appendix 
rc security description rc rc consists parts described key scheduling algorithm ksa turns random key typical size bits initial permutation output generation part uses permutation generate pseudo random output sequence 
initializes indices loops simple operations increment counter increment pseudo randomly exchange values pointed output value pointed note entry swapped possibly consecutive rounds permutation evolves fairly rapidly output generation process 
ksa consists loops similar round operation 
initializes identity permutation applies round operation times stepping updating adding word key cyclic order 
call round ksa step 
ksa initialization scrambling mod swap initialization generation loop swap output fig 

key scheduling algorithm pseudo random generation algorithm previous attacks rc due huge ective key rc attacking infeasible best known attack part requires time exceeds 
practical results related deal construction 
described fm distinguish rc outputs random strings data 
better distinguisher requires data described shamir ms 
distinguisher mount partial attack broadcast applications 
fact initialization rc simple stimulated considerable research mechanism rc 
particular roos discovered class weak keys reduces ective size bits wallach showed gw large keys size close words rc vulnerable related key attack 
analysis security kmp gol mt 
rest additions carried modulo invariance weakness due space limitations prove invariance weakness simpli ed variant ksa denote ksa describe 
di erence ksa updates loop ksa updates loop 
formulating proving existence weakness ksa describe modi cations required apply analysis real ksa 
ksa repeat times mod swap ksa repeat times mod swap ksa rewritten way clari es relation ksa de nitions fig 

ksa vs ksa de nition index integer 
permutation said conserve index permutation said index denote permutation indices round ksa st jt respectively 
denote number indices permutation conserves ib 
sake simplicity write ib st 
de nition conserving ib conserving ib 
de nition integers words key 
called exact key index tk mod mod 
msb called exact key 
notice condition hold necessary su cient 
weakness theorem integers def suppose exact key words 
permutation ksa conserving 
getting proof prove auxiliary lemma lemma jt mod 
proof operation ect swapping operation 
jt equivalent mod st conserves jt st conserved jt 
number indices conserves remains 
ut proof theorem prove induction turns ib st jt mod 
particular implies output permutation conserving 
rst round claim trivial identity permutation conserving suppose jt st conserving 
jt jt st mod jt mod applying lemma get st conserving 
ut ksa transforms special patterns key corresponding patterns initial permutation 
fraction determined permutation bits proportional fraction xed key bits 
example applying result rc key bits completely determine permutation bits 
adjustments ksa small di erence ksa ksa see essential ksa applied exact key preserve equivalence mod ofi rst round 
analyzing execution exact key gives structure described section preserved cyclic words invariance weakness adjusted real ksa proper modi cations formulated theorem theorem integers def suppose exact key words 
pr ksa conserving probability rest key bits 
due space limitations formal proof theorem detailed case analysis appear full version 
explain intuition theorem concentrating di erences theorems deal ksa ksa respectively 
rst round deviations ksa execution occur 
rst non equivalence expected cause non equivalent entries swapped rounds delicate structure preserved ksa execution 
second deviation indices 
cancel ij discrepancy forcing 
case discrepancy causes improper value added repairing non equivalence second round 
point indices aberration dragged execution resulting permutation 
corrupted entries interfere updates pseudo random reach update reaches send region ect values probability lucky event ampli ed fact corrupted entries touched termination ksa due distance current location recall msb far gives opportunities reach 
probability ofn pseudo random reach arbitrary value bounded extensive experimentation indicates probability close half 
key output correlation section analyze propagation weak key patterns generated outputs 
prove claim deals highly biased behavior weakened variant applied conserving permutation 
argue pre output original highly correlated pre variant initial permutation implies existence biases distribution weak keys 
claim rc variant rc swap operations 
def ab conserving permutation 
output sequence generated applying rc constant 
xt def xt mod sequence swap operation permutation change remains conserving generation process 
notice values pointed swap swap rounds particular ect values rounds 
known mod initial indices mod round operation output values simulated mod independently consequently output sequence mod constant deeper analysis implies periodic period exempli ed 

fig 

rounds rc applied conserving permutation st word nd word th word th word fig 

stage bits exposed related key attack recall step changes locations expect pre output stream generated rc permutation highly correlated stream generated slightly modi ed rc particular stream generated rc conserving permutation expected highly correlated constant substream claim 
correlation demonstrated function 
pr xt mod special exact keys empirically estimated di erent 
example special exact key completely determines output bits lsb rst outputs probability special exact key completely determines output bits lsb rst outputs probability demonstrated strong probabilistic correlation bits secret key bits output stream large class weak keys 
section describe correlation rc 
cryptanalytic applications invariance weakness distinguishing rc streams randomness ms shamir described signi cant statistical bias second output word rc 
bias construct cient algorithm distinguishes rc outputs truly random sequences analyzing word di erent outputs streams 
extremely cient distinguisher easily avoided discarding rst words output stream 
discarded best known distinguisher requires output words see fm 
new observation yields signi cantly better distinguisher typical key sizes 
new distinguisher fact signi cant fraction keys signi cant number initial output words contain easily recognizable pattern 
bias attened keys chosen uniform distribution completely disappear construct cient distinguisher rst words output sequence discarded 
notice probability special exact key transformed conserving permutation depend key length see theorem 
number predetermined bits linear consequently size bias number required outputs depends 
specify quantity data required reliable distinguisher di erent key sizes 
particular bit keys new distinguisher requires data previously best number output words 
important notice speci ed output patterns extend dozen output words quality distinguisher una ected discarding rst words 
example discarding rst words causes data required distinguisher grow factor depending 
important observation biases lsb distribution combined natural way biased distribution lsb english texts cient distinguisher rc streams randomness ciphertext attack attacker know actual english plaintext encrypted 
type discussed appendix rc low sampling resistance shamir wagner de ned bsw new security measure stream ciphers denoted sampling resistance 
strong correlation classes rc keys corresponding output patterns prove rc relatively low sampling resistance improves ciency time memory data tradeo attacks 
details appendix rc key setup word output section consider related key attacks attacker access values bits certain words key 
particular consider case key ksa secret key concatenated attacker visible value refer initialization vector iv 
show secret key numerous di erent initialization vectors attacker obtain rst word rc output corresponding initialization vector reconstruct secret key minimal ort 
amount ort number initialization vectors required depends order concatenation size iv value secret key 
observation especially interesting mode operation commercially deployed encryption systems rei rst word plaintexts easily guessed constant date sender identity attack practical ciphertext mode attack 
weakness extend secure socket layer protocol browsers 
terms keystream output attack rst word output secret key iv 
simplify model output 
rst output word depends speci permutation elements shown gure showing state permutation immediately ksa 
words shown value labeled output rst word 
addition key setup reaches stage greater equal si si si si model remaining swaps key setup random probability greater elements referenced values participate swaps case value output rst word 
probability values participate swap set ectively random value output value ectively random 
refer situation resolved condition 
attack involves examining messages speci iv values point ksa resolved condition value gives information secret key 
observe su ciently iv values actual value occurs 
details known iv attack iv precedes secret key consider case iv prepended secret key 
circumstance assuming word iv secret key attempt derive information particular word secret key searching iv values rst steps si si si si high likelihood probability model intermediate swaps random resolved condition step probable output value si ji si ji si words know value ji si rst word output predict value ji si denotes location permutation st value appears 
prediction accurate time ectively random time 
collecting su ciently values di erent ivs reconstruct 
simplest scenario word chosen ivs attack works follows suppose know rst words secret key initially want know word 
examine series ivs form approximately di erent values rst step advanced swapped resulting key setup state shown top array combined iv secret key ksa bottom array portion permutation positions variables indicated 
step advanced advance computed happens 
swapped resulting structure step advanced implies distinct iv assigns di erent value point iv acts di erently approximating randomness assumption 
attacker knows value compute exact behavior key setup reaches step point knows value ja exact values permutation sa 
value sa sa disturbed attacker discards iv 
sa swap done resulting structure ia scenario rst published wagner wag attacker knows permutation sa value ja 
addition knows value sa knows location sa value ja able compute 
note ia swept past sa sa sa sa resolved condition exists probability examining value rst word rc output iv attacker obtain correct value 
examining approximately ivs con guration attacker rederive probability success greater 
iterating process secret key attacker rederive words secret key chosen word ivs 
thing note attack works ivs speci form 
word iv steps leaves si si si si su ce attack 
addition attacker able simulate rst steps key setup able determine ivs property 
examining ivs property extend known iv attack excessive number ivs 
probabilities nd word expected number ivs needed obtain ivs proper form 
iv follows secret key case iv appended secret key need take di erent approach 
previous analysis attacked individual key words 
iv follows secret key select ivs give state permutation early phase key setup immediately secret key rst time 
swaps occurred point reasonably straight forward reconstruct swaps permutation state obtain secret key see appendix method 
illustrate attack simplest case suppose word secret key anda word iv 
suppose secret key weak sense immediately steps ksa sa sa low probability event depends secret key 
secret key attacker assume value ja sa examine ivs rst word ja sa 
ivs value ja preselected value swapped sa aa 
assuming sa resolved condition established probability sa rst word output 
examining ivs second word di erent values observe output number times derive value sa probability 
selecting possible values directly observe state sa permutation rederive secret key 
denote result key recovery 
sa similar analysis appear apply 
assuming sa sa ja swap sa sa distinct ivs particular value ja particular probabilities particular iv outputs value independently distributed 
ect causes reading permutation state noisy values see rst word far analysis expected values see far 
entries sa reliably recovered 
simulations assuming word secret key shown average words sa permutation state successfully reconstructed including average words sa sa immediately give ectively key words 
information key reduced brute forced 
denote result key reduction 
word iv types weak secret keys 
example consider secret key sa sa assuming ja examine iv rst word value new value ja sa sa swapped leaving state steps sa sa sa sa ja ia assuming sa high probability examine ivs second word sa arbitrary swap value sa sa 
assuming isn resolved condition set number values third iv word deduce value sa arbitrary giving permutation steps 
number types weak keys attacker take advantage summarized 
weak secret key listed especially interesting technique exposes weakness di erent weak secret keys listed 
immediately steps state sa sa sa initial iv word causes sa sa leaving state ia sa sa sa inquire value sx const examine numerous ivs second third words set value ja ksa continue steps points element sx 
point haven gone great number steps knew value high probability jx const const constant term depends state permutation sa 
true sx sx const elements disturbed happens high probability resolved condition achieved rst output word biased sx const 
addition value const independent ofy value easily determined allowing attacker observe values sx class weak keys requires far known ivs exploit occurs relatively frequently 
word iv general approach previous analysis recover virtually secret keys su cient ivs 
assume ja sa sa sa sa assumption search ivs steps sets sa sa note value ja save value value value output rst word particular iv 
nontrivial probability value word sx constant term depends secret key value value independent iv collect numerous possible values sx various values rst reconstruct reconstruct sx related key attacks rc section discuss related key attacks weaknesses discussed previously 
model attacker black box randomly chosen rc key inside output button input tape jkj words 
step attacker press output button get output word write tape causes black box restart output generation process new key de ned purpose attacker nd key information 
approach generalizes obvious way longer ivs 
note sa limits size search required 
ia related key attack invariance weakness words power 
consists stages stage th bit key word exposed predicate takes input rc blackbox parameter stage number decides key box special exact 
purpose achieved randomly sampling key bits irrelevant exactness key estimating expected length patterned output 
special exact key expected length signi cantly longer random output works time 
procedure expand takes input rc blackbox parameter stage number assumes key box special exact special exact 
method doing enumerating possibilities th bits possibilities invoking decide key box special exact 
expand works slightly di erent way lsb determines complete forcing msb 
exact key consequently calculate output produced key replace simple comparison 
time complexity stage total time required attack 
typical rc key bytes complexity exhaustive search completely impractical complexity new attack 
related key attack known iv weakness section known iv weaknesses develop cient related key attack 
attack consists stages rst stages gain information rst words secret key third stage iterate key expose word key successively 
stages attack follows step step attempts nd values reveal value 
procedure select random values random value write tape vectors initial words distinct random values vector press output button 
modi ed key output rst word biased value happens 
selected values rst word outputs biased const const const const 
detectable examining value const attacker reconstruct value 
expect try random values nding pair appropriate 
fact fully revealed rst stage see step step attempts nd values 
procedure write tape vectors initial words values recovered previous step distinct random values vector press output button 
particular initial sequence assures output biased 
recovered computed 
step step iteratively recovers individual words key 
operates running subprocedure assumes recovered want learn value 
procedure write vectors property known values sa aand sa vectors procedure shown rederive 
total time required attack step step step rc key time complexity essentially independent key length 
comparing attacks attacks able completely reconstruct randomly chosen rc key number chosen keys amount signi cantly brute force extremely short rc keys 
rst attack scales upwards key grows longer time complexity second attack independent length cross point 
due second word weakness implementations rc discard pre output stream case second attack di cult apply output word depends permutation elements immediately ksa elements occur resolved condition hold 
hand rst attack extends probability output words patterned drops modestly number discarded words increases 
discussion section describes interesting weakness rc results simplicity key scheduling algorithm 
recommend weakness discarding rst words generated stream 
rounds element ofs swapped permutation index expected independent initialization process 
section describes weakness rc common mode operation attacker visible iv concatenated xed secret key 
itis easy rst attack works key lengths 
extend attack simple types combination operators xor iv xed key essentially complexity 
recommend weakness avoiding mode operation secure hash form key ksa iv secret key 
applying attack wep cryptosystems wired equivalent privacy wep protocol designed provide privacy packet wireless networks standard see 
encrypts secret key packet byte iv iv followed secret key rc key 
transmits iv rc encrypted payload 
results section show examining ciphertext packets reconstruct secret key wep cryptosystem 
note attempted attack actual wep connection claim wep vulnerable attack 
assume attacker able retrieve rst byte rc output packet analysis done section recover key byte attacker needs know previous key bytes search ivs sets permutation sb sb ivs attacker rederive key byte reasonable probability success 
number packets required obtain number ivs depends exact ivs sender uses 
standard specify implementation generate ivs common practice counter generate 
analysis ivs generated endian counter ivs generated counter little endian order rst byte iv increments fastest attacker search ivs form 
collect di erent values derive secret key little 
requires approximately packets 
payload format attacker typically know rst byte plaintext payload able derive rst byte rc output 
analysis ivs generated endian counter ivs generated counter big endian order byte iv increments fastest attacker search ivs form 
requires approximately packets collect requisite ivs assuming counter starts zero 
counter doesn start zero attacker alternative strategy available 
assume rst bytes secret key search ivs set permutation equation 
attacker assumes rst bytes secret key initial iv byte approximately settings remaining bytes set permutation required rederive particular key byte 
approximately packets additional factor rederive key 
common practice industry extend length wep secret key speci ed bit 
attacks recover key byte individually complexity attack grows linearly exponentially key length extremely long key immune attack 
ciphertext invariance weakness section mentioned literature rc stream ciphers assume knowledge plaintext order isolate xored key stream 
practice information attacker typically statistical knowledge plaintext contains english text 
combining non random behaviors plaintext key stream possible cases xoring biased streams result totally random stream stream biased positions stream biased odd positions 
prove plaintexts english texts easy construct ciphertext distinguisher biases 
intuition construction biases described section distribution lsb consequently combined non random distribution lsb english texts 
major biases distribution lsb english texts combined biases key stream words various ways 
theorem show combine distribution rst lsb rc output stream rst order statistics english texts theorem ciphertext generated key ascii representation plaintexts distributed rst order purpose theorem demonstrate approach ignore fact distribution rst characters english sentence di ers distribution mid text characters 
statistics english texts 
probability random key special exact 
distinguished random stream analyzing output words 
example rc byte keys implies reliable ciphertext distinguisher works data 
proof theorem observation lsb random english text character zero probability 
formal proof omitted due space limitations 
important note theorem statistical information isavailable key stream plaintext distributions consequently represent best possible attack 
sampling resistance rc time memory data tradeo attacks stream ciphers paradigm 
attacker keeps database state output pairs sorted output lookups subsequence output stream database 
su ciently long database sequence located output attacker conclude actual state stored sequence predict rest stream 
drawback approach large database stored hard disk random access time times slower computational step 
improve attack keep disk states guaranteed produce outputs rare easy recognizable property starting pre 
case output sequences property searched database expected time expected number disk probes signi cantly reduced 
general producing pair state output rare property costs producing random pair 
random states required nd single pair probability random output property 
ciently enumerate states produce outputs number sampled states decreases dramatically method applied signi cant additional cost preprocessing stage 
sampling resistance stream cipher provides lower bound ciency enumeration 
attack applied rc ways ksa parts 
attack generation part constructs database pairs rc state output substring analyzes substrings single output stream 
database construction simple easy enumerate states produce outputs constant pre enumeration useless due huge ective key part bits attack completely impractical 
promising approach ksa part bits vulnerable tradeo attacks 
case pairs database secret key pre output stream attack requires pre xes large number streams single long stream 
correlation described section provides cient sampling keys produce output pre xes patterned type speci ed constant mod 
example consider problem sampling keys transformed ksa streams rst words xed mod 
property random streams probability expected number disk probes actual attack reduced factor 
stream ciphers high sampling resistance lter increase preprocessing time factor sample random keys order nd single key 
rc due invariance weakness preprocessing time increases factor quarter exact special keys produce streams 
consequently preprocessing stage accelerated factor summarize section proved rc relatively low sampling resistance greatly improves ciency tradeo attacks ksa 
deriving secret key early permutation state values sa sa method nd values result permutation sa branch values sa running remaining part algorithm values 
swap verify fs fsa sa number times algorithm perform iteration bounded sa typically quite small algorithm typically cient 
algorithm better lower bound run time values sa sa 
bsw shamir wagner 
real time cryptanalysis pc 
fse fast software encryption 
fm 
statistical analysis alleged rc keystream generator 
fse fast software encryption 
gol 
linear statistical weakness alleged rc keystream generator 
eurocrypt advances cryptology proceedings eurocrypt 
gw wallach 
related key cryptanalysis rc 
june 
kmp knudsen meier preneel 
analysis methods alleged rc 
asiacrypt advances cryptology asiacrypt international conference theory application cryptology 
lncs springer verlag 
wireless lan medium access control mac physical layer phy speci cations 
ieee standard edition 
ieee computer society 
ms shamir 
practical attack broadcast rc 
fse fast software encryption 
mt 
cryptanalysis rc ciphers 
sac annual international workshop selected areas cryptography 
lncs 
rei arnold reinhold 
home page 

roos 
class weak keys rc stream cipher 
september 
wag wagner 
re weak keys rc 
september 
posted sci crypt archived www cs berkeley edu daw posts rc weak keys 
data prc fig 

data required reliable distinguisher di erent key sizes number predetermined bits number determined output bits probability key bits determine output bits taken iv length probability expected ivs required fig 

various prepended iv known secret key pre lengths probability random iv give information secret key word expected number ivs required derive secret key word 
condition iv settings second third probability result sa sa swap swap cycle key recovery sa sa swap cycle swap key reduction sa sa swap cycle cycle key recovery sa sa cycle swap cycle key recovery sa sa cycle cycle swap key reduction sa swap swap cycle key recovery sa swap swap cycle key recovery sa cycle swap swap key reduction sa sa swap cycle swap key reduction sa sa swap swap cycle key recovery sa sa swap cycle cycle key reduction fig 

weak secret keys word post ivs 
listed conditions sa permutation distinguish iv properties attacker searches reveal probability class weak key occur anda word secret key result attack weak key 
fig 

graph demonstrates probabilities special keys exact msb rc produce streams long patterned pre xes size patterned prefix log probability patterned prefix size 
