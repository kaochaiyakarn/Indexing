substitute linear logic philip wadler university glasgow december surprisingly fit syntax linear logic style abramsky semantics style seely 
notably substitution lemma valid isomorphic canonical way 
alternative syntax proposed striking parallels moggi language monads 
old syntax terms look identity vice versa new syntax eliminates awkwardness 
purposes show linear logic substitute propose 
part presents standard syntax semantics linear logic notes resulting difficulties 
linear logic girard gir 
syntax lambda terms footsteps abramsky abr rules associated course type weakening contraction dereliction promotion represented separate term form 
semantics category theory footsteps seely see weakening contraction modelled comonoid dereliction promotion modelled comonad 
surprisingly combine syntax abramsky semantics seely various problems arise 
thing term looks denotes identity term look denotes identity 
substitution lemma hold 
substitution lemma essential guarantees meaning 
fortunately simple fix 
necessary sufficient condition substitution lemma holds isomorphic canonical way 
explains occurrence similar restrictions hearn filinski fil 
author address department computing science university glasgow qq scotland 
electronic mail wadler dcs glasgow ac uk 
phone 
fax 
second part considers alternate syntaxes linear logic 
simpler alternative syntax weakening contraction syntax just exchange need indicate rules explicitly term form 
alternate syntax dereliction promotion 
new syntax striking parallels moggi language monads mog 
roughly speaking monads moggi comonads girard constructs exactly dual moggi language requires monad tensorial strength girard language requires comonad maps product tensor product 
new syntax better match semantics term looks semantics identity semantics identity 
similar syntax arisen areas program transformation method due wadler wad model graph reduction due peyton jones ps 
suggests new possible applications linear logic pursuing 
background organisation 
syntactic approach abramsky long history including predecessors lafont laf holmstrom hol successors chirimar riecke cgr 
categorical approach seely long history notable successor filinski fil reconciles approach operational intuition 
linear logic applied control updates functional language guzm hudak gh wadler wad wad imperative language hearn 
remainder organised follows 
section gives syntax semantics fragment intuitionistic linear logic containing course function types 
section describes substitution lemma gives necessary sufficient condition validity 
section gives alternate syntax weakening contraction 
section gives alternate syntax dereliction promotion analogous moggi syntax monads 

andrew pitts observed may syntax comonads analogous moggi syntax monads lively public discussion lms meeting category theory computer science held durham july 
surprising linear logic mentioned discussion retrospect appears key comparing monad comonad approaches 
comments am grateful samson abramsky andrzej filinski yves lafont eugenio moggi peter hearn robert seely 
intuitionistic linear logic section presents fragment intuitionistic linear logic simplicity contains course function types 
logic 
deal id id gamma 
exchange gamma delta gamma delta gamma omega omega omega delta gamma 
gamma omega omega omega delta gamma omega omega omega delta gamma 
weakening delta gamma gamma delta delta gamma 
gamma gamma 
gamma omega delta id omega gamma gamma 
gamma omega id omega discard gamma gamma gamma gamma gamma gamma 
gamma omega gamma gamma 
contraction delta gamma gamma delta delta gamma 
gamma omega omega gamma 
gamma omega delta id omega gamma gamma 
gamma omega id omega duplicate gamma gamma gamma gamma gamma gamma gamma 
gamma omega omega gamma 
dereliction delta gamma gamma delta delta gamma 
gamma omega gamma 
gamma omega delta id omega gamma gamma 
gamma omega id omega counit gamma gamma gamma gamma gamma 
gamma omega gamma 
promotion gamma gamma gamma gamma 
gamma kleisli gamma gamma gamma gamma 
gammaffi elimination gamma gammaffi delta gamma delta gamma gamma 
gammaffi delta gamma 
gamma omega delta omega gamma gamma 
gammaffi omega apply gamma gamma 
gammaffi gamma gamma gammaffi gamma omega gamma 
gamma curry gamma gamma gamma gamma 
gammaffi intuitionistic linear logic syntax typing judgements appears left categorical semantics appears right 
syntax 
inference rules expressed types terms assumptions judgements 
type forms type variable course type gammaffi function type 
range type variables range types 
term forms individual variable weakening contraction dereliction promotion gammaffi elimination gammaffi 
range individual variables range terms 
assumption form distinct individual variables 
gamma delta range assumptions 
write gamma assumption form judgement form gamma gives rules identifiers id exchange course type weakening contraction dereliction promotion function type gammaffi elimination 
weakening discards variable course type contraction duplicates dereliction uses elimination rules 
promotion raises term course type rule 
semantics 
categorical model intuitionistic linear logic specified data 

closed symmetric monoidal category unit object tensor omega internal hom gammaffi transpose gamma omega curry gamma 
gammaffi counit apply gammaffi omega 
comonad kleisli operator kleisli counit counit 
finite products terminal product theta natural isomorphisms omega theta 
induces comonoid structure object natural discard gamma gamma gamma 
terminal gamma gamma gamma gamma gamma 
duplicate gamma gamma gamma gamma 
omega diagonal gamma gamma gamma gamma gamma 
theta omega terminal unique map terminal diagonal theta diagonal map 
definition derived seely see 
usually seely definition thought extending barr notion autonomous category bar need object deal negation 
categorical model obtained associating type variable object inducing map types objects 
write type corresponding object 
context gamma possesses corresponding object gamma omega delta delta delta omega empty context corresponds object judgement gamma corresponds arrow gamma right hand sides assigns semantics derivation judgement 
tricky rule promotion depends fact context gamma corresponds isomorphic objects omega delta delta delta omega theta delta delta delta theta reading left necessary match form semantics reading right necessary apply kleisli operator 
context empty isomorphism applies 
coherence 
judgement may derivation verify possible derivations judgement assign semantics 
property called coherence importance noted breazu tannen coquand gunter scedrov 
case derivations judgement differ exchange rule uses rules encoded term fact omega symmetric monoidal sufficient guarantee coherence 
lambda calculus 
standard encoding due girard gir usual lambda calculus linear language gammaffi variable replaced variable occurrence variable argument application promoted 
fresh variable introduced occurrence variable original expression serves purpose act placeholder dereliction 
mapping induces standard semantics calculus comonad 
instance category cpos may take lifting omega smash product gammaffi strict functions 
dereliction read evaluation promotion read building closure 
semantics observed independent connection linear logic asperti curien 
examples 
examples typing judgements corresponding semantics kleisli id gamma gamma gamma gamma gamma 
counit gamma gamma gamma 
kleisli id gamma gamma gamma gamma gamma 
counit gamma gamma gamma 
counit gamma gamma gamma 
kleisli id gamma gamma gamma gamma gamma 
kleisli counit gamma gamma gamma gamma gamma gamma gamma 
semantics terms necessarily identity case term 
disturbing term looks ought identity term 
substitution cut rule logic computing seen cut rule having played 
cut elimination logic corresponds central notion reduction computation 
way formulate cut rule natural deduction introducing new term syntax delta gamma gamma delta delta gamma 
gamma omega gamma 
gamma omega delta id omega gamma gamma 
gamma omega gamma 
order gamma delta sensible composition contain free variables common may contain variables course type contracted 
corresponding cut elimination expect replaced term results substituting occurrence justified gamma omega delta gamma gamma gamma gamma 
gamma omega delta id omega gamma gamma gamma 
omega delta gamma 
write arrows give semantics terms respectively 
called substitution lemma 
think abbreviation term semantics 
substitution lemma equivalent fi rule lambda calculus 
say substitution lemma applicable hypotheses valid delta gamma gamma delta case 
counter example gammaffi gammaffi gammaffi gammaffi hypotheses valid 
promotion apply assumption list line form gamma gamma inapplicable instances substitution lemma arise substituting promotion term free variables course types 
substitution lemma apply logic restricted gamma gamma gamma gamma interesting question consider restrictions guarantee property 
time restrict simpler question validity applicable instances substitution 
surprise restricted applicable instances substitution lemma hold 
terms respectively semantics kleisli counit gamma gamma gamma gamma gamma gamma gamma 
counit gamma gamma gamma 
kleisli id gamma gamma gamma gamma gamma 
equal morphism left guaranteed identity right 
semantics terms simplified eliminating various trivial isomorphisms omega problem holds regardless 
shows necessary counit kleisli id id substitution lemma hold isomorphic 
widely models linear logic coherence spaces violate condition 
condition necessary sufficient 
proposition 
counit kleisli id id kleisli kleisli conversely 
proof kleisli kleisli counit kleisli id kleisli id kleisli counit kleisli id kleisli converse take counit id counit kleisli id id arrow rewritten form kleisli counit kleisli category isomorphic full subcategory 
proposition 
assuming counit kleisli id id substitution lemma valid applicable formed id omega 
proof induction derivation gamma cases straightforward 
consider interesting case delta gamma gamma delta assumption judgement form delta order formed 
id omega semantics promotion id omega kleisli previous proposition kleisli id omega induction hypothesis kleisli semantics promotion required 
cut rule syntax place instance done abramsky abr hearn 
presentation sensible substitution lemma applies 
appears abramsky operational semantics verify substitution lemma contains statement effect 
hearn filinski fil take isomorphic don note required substitution valid 
encoding lambda calculus linear logic discussed section better behaved regard substitution 
substitution lemma applicable types assumption list course types valid function arguments result promotion 
weakening contraction section proposes alternative syntax weakening contraction syntax 
replace syntactic construct syntactic weakening gamma gamma gamma gamma 
gamma omega id omega discard gamma gamma gamma gamma gamma gamma 
gamma omega gamma gamma 
contraction gamma gamma gamma omega omega gamma 
gamma omega id omega duplicate gamma gamma gamma gamma gamma gamma gamma 
gamma omega omega gamma 
dereliction gamma gamma hei gamma gamma 
gamma gamma 
counit gamma gamma gamma 
promotion delta gamma gamma delta delta gamma 
gamma omega gamma 
gamma omega delta id omega kleisli gamma gamma gamma gamma gamma gamma gamma 
gamma omega gamma 
alternative structural rules construct 
new rules shown 
shows new rules promotion dereliction discussed section 
coherence 
necessary confirm new system coherent 
guaranteed fact discard duplicate form comonoid 
distinct terms old syntax written new syntax semantics duplicate id omega discard left id left omega canonical isomorphism 
similarly distinct terms old syntax written new syntax semantics duplicate duplicate omega id assoc duplicate id omega duplicate assoc omega omega omega omega canonical isomorphism 
example 
old syntax combinators defined writing new syntax simply writes promotion section proposes alternative syntax dereliction promotion 
old system dereliction binding form new system promotion binding form 
new rules shown 
new syntax hai new syntax promotion observe syntax 
new syntax may defined terms old follows hai conversely old syntax may defined terms new hai syntax verifies identities similar described moggi mog hx hai middle equation sides equal substitution lemma holds 
equation may appear free syntax subject problems described section admits solution counit kleisli id id substitution lemma valid applicable 
lambda calculus 
new syntax standard encoding calculus linear logic hx fresh variable introduced application original expression 
previous encoding variable serves useful purpose 
consider 
old encoding yields applying substitution yields may duplicate subexpression new encoding yields applying substitution yields duplicate new encoding captures operational intuition graph reduction loss sharing 
examples 
examples section rendered follows 
kleisli id gamma gamma gamma gamma gamma 
hyi counit gamma gamma gamma 
hyi kleisli id gamma gamma gamma gamma gamma 
counit gamma gamma gamma 
hyi counit gamma gamma gamma 
kleisli id gamma gamma gamma gamma gamma 
hyi kleisli counit gamma gamma gamma gamma gamma gamma gamma 
recall identity general identity substitution lemma holds 
old syntax looked identity function 
new syntax better match semantics look identities laws looks identity believe substitution lemma 
girard standard encoding lambda calculus linear logic takes lambda calculus term old syntax new syntax 
fi reduction may cause term duplicated problem arises 
new syntax captures important aspect sharing 
feature central similar syntax peyton jones discussed 
applications 
interest new syntax practice construct similar way 
program transformation wadler wad form indicate term subject transformation similarity types course types noted wad 
compiling functional languages peyton jones ps form indicate bound closure representing similarity promotion construction closures noted lafont holmstrom abramsky 
suggests exciting possible applications linear logic 
early results positive 
joint hughes launchbury peyton jones wadler compilation model ps suggests type reconstruction variant linear logic discover places closures need overwritten 
pursuing areas application 
abr abramsky computational interpretations linear logic 
preprint imperial col london 
bar barr autonomous categories 
lecture notes mathematics springer verlag 
breazu tannen coquand gunter scedrov inheritance explicit coercion 
information 
earlier version appeared symposium logic computer science ieee press asilomar california june 
cgr chirimar gunter riecke 
linear ml 
preprint department computer information science university pennsylvania 
fil filinski linear continuations 
symposium principles programming languages acm press albuquerque new mexico january 
gir 
girard linear logic 
theoretical computer science 
gh guzm hudak single threaded polymorphic lambda calculus 
symposium logic computer science ieee press philadelphia pa june 
hol holmstrom linear functional language 
draft chalmers university technology 
laf lafont linear machine 
theoretical computer science 
mog moggi computational lambda calculus monads 
th ieee symposium logic computer science asilomar california june 
longer version available technical report university edinburgh 
hearn linear logic interference control 
conference category theory computer science paris september 
lncs springer verlag 
ps peyton jones spineless tagless machine 
th acm conference functional programming languages computer architecture london september 
see seely linear logic autonomous categories cofree coalgebras 
categories computer science logic june 
ams contemporary mathematics 
wad wadler deforestation transforming programs eliminate trees 
theoretical computer science 
special issue selected papers nd european symposium programming 
wad wadler linear types change world 
ifip tc working conference programming concepts methods sea israel april 
published broy jones editors programming concepts methods north holland 
wad wadler linear logic 
conference partial evaluation semantics program manipulation pepm acm press new haven connecticut june 

