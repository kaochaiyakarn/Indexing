decidable classes inductive theorems urgen giesl deepak kapur informatik ii rwth aachen 
aachen germany giesl informatik rwth aachen de computer science dept university new mexico albuquerque nm usa kapur cs unm edu 
kapur subramaniam de ned syntactical classes equations inductive validity decidable 
validity checked user interaction allows integration restricted form induction fully automated reasoning tools model checkers 
results restricted equations 
extends classes conjectures considered larger class arbitrary quanti er free formulas conjectures containing negation conjunction disjunction 
drawback conventional inductive theorem provers may waste huge amounts time proof attempts fail due incompleteness automated induction proving techniques 
provers usually require massive manual intervention order perform successful induction proofs form guidance variable perform induction induction scheme intermediate lemmas needed proof go 
main reasons induction integrated fully automated reasoning systems model checkers popular application areas hardware protocol veri cation static type analyses byte code veri cation proof carrying codes 
push button systems combination decision procedures theories presburger arithmetic propositional satis ability data structures including bit vectors arrays lists 
extending tools capability perform induction proofs desirable induction frequently needed reason structured parameterized circuits bit adders multipliers timing behavior circuits feedback loops code loops recursion 
reason kapur subramaniam proposed approach integrating induction schemes suggested terminating function de nitions decision procedures gave syntactical characterization class equations inductive validity decidable decision procedures cover set method mechanizing induction 
equations induction proofs accomplished user interaction fail supported deutsche forschungsgemeinschaft gi national science foundation nos 
ccr cda 
conjecture valid 
section give simple characterization extends class decidable equations 
subsequently extend approach arbitrary quanti er free formulas de ne classes formulas inductive validity decidable 
crucial concept characterization called correctness predicates 
quanti er free conjecture correctness predicate tuple constructor ground terms truth implies truth cf 

technique automatically generating correctness predicates section 
truth correctness predicate sucient necessary truth corresponding conjecture 
section examine equations correctness predicate exact truth sucient necessary truth 
develop characterization recognize subclass equations automatically 
section show exact correctness predicates allows extend decidable classes inductive theorems equations arbitrary quanti er free formulas 
results useful conventional inductive theorem provers exact correctness predicates simplify proof conjectures double inductive provers fail 
focuses constructor systems decidable theory quanti er free formulas free constructors believe approach extends decidable theories quanti er free theory presburger arithmetic systems terms decidable theory equations inductive validity decidable term rewrite systems trss programming language 
trs root symbols left hand sides called de ned function symbols constructors 
consider constructor systems css trss left hand sides contain de ned symbols root position results generalize general theory systems called systems decidable theory arguments de ned symbols terms restrict convergent suciently complete css ground term exists unique constructor ground term 
term containing variables constructors called constructor term constructor term variables constructor ground term 
induction proofs concept cover sets 
cover set nite set pairs fhs ft gi hs ft nm gig tuples terms 
complete tuple constructor ground terms substitution cover set induces relation tuples constructor ground terms exists pair hs ft gi called founded founded 
generalized ground convergent systems 
founded exists nite sequence quanti er free formula inductively valid valid short denoted ind holds initial model equations variables 
example consider cs half half half half function de nition suggests cover set half fh hs hs 
prove conjecture induction cover set induction variable obtain base formulas step formula 
called induction hypothesis called induction 
proving conjecture containing term yn successful heuristic choice suitable induction relation perform induction cover set induction variables yn cf 

kapur subramaniam characterized classes equations inductive validity decidable decision procedure consists induction proof attempt particular cover set 
observation induction formula built cover set contains terms underlying decidable theory validity original conjecture decided 
def 
thm 
apply general systems due lack space focus decidable quanti er free theory free constructors 
abbreviates contains variables de nition provability 
convergent cs complete founded cover set 
equation provable constructor term hs ft gi tuples constructor terms exists constructor term context 
example extend cs half rules double double double 
equation double half half provable 
required term constructor term 
obtain double half double half double half double half provability decidable def 
characterizes decidable class conjectures 
checking provability directly sucient conditions provability 
obtain theorem 
theorem decidability inductive validity equations 
convergent cs complete founded cover set intuitively ind means constructor ground terms follows equations axioms state di erent constructor ground terms equal 
provable equation 
inductive validity decidable attempting induction proof 
proof 
decision procedure works constructing formulas hs ft gi equations contain constructor terms validity decidable 
turns valid equations valid 
direction notice implies induction formula validity follows noetherian induction 
direction note validity implies validity 
ut double half half provable decision procedure determine validity 
check validity equations equations contain constructor terms validity decidable 
obviously equation valid terms equation syntactically identical 
valid second equation valid conjecture double half valid 
aim extend result thm 
general formulas just equations provided equations formulas provable 
example consider formulas double half true double 
equations appearing formulas valid unsatis able consequently need characterize subset instantiations variables equations true 
extension need notion correctness predicates 
correctness predicates technique automatically generates algorithms called correctness predicates equations 
tuple constructor ground terms truth implies valid 
de nition correctness predicates similar de nitions form quite restricted interested ensuring validity correctness predicates decidable exact correctness predicates generated completely characterize domain values conjecture holds 
seen proof conjecture double half attempted induction cover set half conjecture reduced equation true 
case obtain equation false 
step case prove induction hypothesis double half implies induction double half 
shown section double half evaluates double half 
due induction hypothesis replace subterm double half obtain equation true 
provided induction hypothesis valid induction valid 
gives rise rules correctness predicate double half double half true double half false double half double half note way synthesized algorithm 
reader pay particular attention rule stronger rule gotten analysis double half true double half want generate unconditional rewrite rules de nition correctness predicates synthesize complete de nition form 
result correctness predicate generated may exact provides sucient condition conjecture valid 
general prove provable equation cover set pair hs ft gi check equation valid cf 
equation proof thm 

order obtain correctness predicates simple ones demand equations valid instantiations 
ensures right hand sides rules correctness predicates form true false recursive calls correctness predicates 
de nition radical equations 
convergent suciently complete cs fhs ft gi hs ft nm gig complete founded cover set 
equation radical provable equation constructor term context ind ind note constructor terms decidable provable equation radical 
reason check equation constructor terms valid unsatis able 
obviously equation unsatis able terms uni able 
instance equation double half radical half terms equations identical uni able 
ease presentation restrict cover sets induction hypothesis induction step case 
consider cover sets pairs hs ft gi 
de nition correctness predicates easily generalized case multiple induction hypotheses 
fact correctness predicates de ned arbitrary obtain de nition correctness predicates 
de nition correctness predicate 
def 
radical correctness predicate de ned rules true ind false ind ind false ind thm 
proves correctness predicate represents sucient necessary condition soundness corresponding equation 
theorem correctness predicates sucient necessary 
def 

correctness predicate contain rules de ning ind true 
general ind true 
proof 
tuple constructor ground terms ind true 
prove ind induction due completeness cover set exists hs ft gi substitution provable due ind 
ind ind 
ind ind true 
induction hypothesis yields ind 
validity ind 
consider equation half induction cover set half base cases resulting conjecture unsatis able step case induction half evaluated half 
applying induction hypothesis half yields unsatis able 
equation half radical half obtain rules half false half false half false 
half false half holds 
ut fact correctness predicate yields true equation holds arguments smaller induction relation induced cover set 
reason correctness predicate half returns false arguments conjecture true false smaller arguments 
equations provable radical required 
requirements necessary order generate exact correctness predicates arbitrary conjectures validity decidable 
conjectures exact correctness predicate section characterize equations correctness predicate exact true ind 
exactness ensured def 
rule induction equivalent 
seen sect 
returns true true smaller induction relation induced cover set 
exact implies validity arguments describes exact set instantiations valid induction implies induction hypotheses 
consider proof conjecture double half induction cover set half step case obtain induction double half induction hypothesis double half conjecture desired property ind double half double half see note rst base case left hand side double half evaluates smaller equal right hand side terms compared subterm relation example 
similarly second base case left hand side evaluates smaller equal right hand side 
step case left hand side induction evaluated double half evaluated induction contains induction hypothesis underlined terms terms sides induction hypothesis 
observation forms basis rippling technique 
going induction hypothesis induction sides equation grow context 
words induction base cases left hand side great right hand side left hand side grows right hand side 
reaches instantiation double half longer true reason double half smaller double half grows fast number half double half true 
induction hypothesis double half false induction double half false formulated contraposition property 
observation leads general criterion 
provable equations hs ft gi constructor ground contexts example double half term rst pair cover set half second pair 
third pair double half evaluated double half obtain 

grows context grows context going induction hypothesis induction 
aim ensure longer equal instantiation equal arguments greater induction relation induced cover set 
sucient requirement contexts added big contexts added compare contexts arbitrary ordering constructor terms relation transitive irre exive 
require monotonic implies constructors stable substitutions implies 
demand usual denotes union syntactic equality 
note may established technique generation founded orderings subterm ordering recursive path ordering rpo cf 
synthesize suitable ordering satisfying constraints 
irre exive necessarily founded ordering results reversal founded ordering ordering rpo 
example need founded monotonic stable ordering ordering easily standard techniques automated termination proofs 
example constraints satis ed subterm ordering 
automatically determine double half conjecture correctness predicate exact 
double half true numbers shown conjecture false odd ones 
general equation cover set conditions satis ed ordering say maintains cover set underlying cs reason relation maintained going induction hypothesis induction 
established decidable classes founded orderings area term rewrite systems immediately obtains syntactical sucient condition maintenance orderings easily checked automatically 
de nition maintenance orderings 
convergent suciently complete cs fhs ft gi hs ft nm gig complete founded cover set 
provable constructor ground contexts monotonic ordering constructor terms stable substitutions 
say maintains cover set lemma proves equations maintain ordering induction implies induction hypothesis 
lemma equations reverse induction formulas hold 
def 
maintain ind 
proof 
rst show constructor ground terms proof done induction due completeness pair hs ft gi 
induction hypothesis monotonicity stability 
furthermore proved 
prove lemma 
substitute variables constructor ground terms ind 
assume ind 
normal forms di erent assumption fact implies 
monotonic stable contradicts ind irre exivity 
ut prove maintains ordering exact 
theorem equations correctness predicate exact 
def 
equation radical maintains ordering correctness predicate contain rules de ning ind true 
proof 
due thm 
prove ind true constructor ground term tuples induction ind 
completeness exists hs ft gi substitution 
rule general version theorem proved conjecture radical necessary induction scheme cover set induction hypothesis subgoal 
true rule false generated ind 
implies ind true 
lemma truth implies ind 
ind induction hypothesis 
rule obtain ind true 
ut consider counterexample thm 

trying prove half obtain 
step case left hand side half evaluates half 
exist ordering imply imply contradicts transitivity irre exivity 
half maintain ordering half correctness predicate exact shown thm 

analysis exactness correctness predicates useful xing faulty conjectures objective correctness predicates introduced 
exact correctness predicate precisely characterizes instantiations faulty conjecture true faulty conjecture strongest theorem possible 
conjectures inductive validity decidable extend thm 
equations arbitrary quanti er free formulas 
require equations occurring radical maintain ordering cover set thm 
correctness predicates sound exact 
example half radical maintains subterm ordering half obtain correctness predicate half true half true half false rule due fact instantiated left hand side half evaluates half replacement subterm half induction hypothesis yields equation unsatis able 
correctness predicate generate replacing result true false result false true right hand sides form replaced 
example yields half false half false half true di erent equations conjecture may proved di erent cover sets cover sets combined single cover set generate single induction scheme merging instantiation cf 

necessary di erent equations maintain monotonic ordering 
see instance example di erent orderings conjecture 
correctness predicate sound exact conjecture half 
stated exact correctness predicates generated equations equations validity decided induction schemes multiple induction hypotheses 
inductive validity larger class literals equations negated equations decided arbitrary founded complete cover sets requirement 
restrictions radical equations induction schemes involving induction step subgoal needed decidability conjunctions disjunctions conjectures discussed 
straightforward idea obtain rules follows rule false obtain rule false 
rules true obtain true 
rule true obtain rule 
example illustrates simplistic construction 
recall rules double half obtain correctness predicate formula double half half 
false false correctness predicate exact false true numbers greater 
worse resulting correctness predicate negated conjecture sound true false odd numbers 
problem construction case rule leads recursive call form true 
rule may lose exactness correctness predicate false 
avoid problem construct called basic correctness predicates denoted recursive pairs hs ft gi recursive rules rule result false 
fortunately radical maintains ordering easily obtain basic correctness predicate simply extending cover set appropriate way 
purpose restrict cover sets recursive pairs hs ft gi hs ft gi terms unify renaming variables 
words arguments induction hypothesis unify arguments induction 
cover set half fh hs hs trivially satis es condition recursive pair 
motivation restriction chains ensures 
change value occur value corresponds base case 
aim extend cover set base case 
chains rule recursive pairs hs idea extension cover sets simply unify terms induction hypotheses variable renamed terms left components pairs respective mgu 
pair hs ft gi replaced new non recursive pairs hs instantiated recursive pair hs ft gi 
half obtain half fh hs hs hs hs fs gig de nition extending cover sets 
fhs ft gi hs ft nm gig cover set exist substitutions variable renaming 
extended cover set de ned follows fhs fhs mgu variable renaming fhs ft gi mgu variable renaming obviously complete founded extension complete founded 
equation radical maintains ordering radical maintains ordering extension case construct basic correctness predicate extension results true false nonrecursive cases rule recursive pairs hs ft gi 
example obtain half true double half true half true double half false half false double half true half false double half false half half double half double half basic correctness predicates conjunctions constructed result false conjuncts yields false true conjuncts yield true 
conjuncts recursive call basic correctness predicate conjunction recursive call 
formula double half half half false false half false false half true true half true false half half de nition basic correctness predicates 
convergent suf ciently complete cs complete founded cover set hs ft gi di erent pairs hs ft gi hs ft gi exist substitution variable renaming 
quanti er free formula equations radical maintain ordering fhs ft gi hs ft nm gig extension constructor ground context basic correctness predicate de ned rules analogous rules formulas containing true ind false ind true rule false false rule true rule true true true false false false main theorem shows inductive validity arbitrary quanti er free conjectures decidable equations radical maintain ordering decision procedure works constructing basic correctness predicate checking yields true 
reason soundness approach basic correctness predicates sound exact 
theorem decidability inductive validity arbitrary conjectures def 

inductive validity decidable checking non recursive rules right hand side true basic correctness predicate 
proof 
show sound exact ind true contains rules de ning induction structure 
equation tuple constructor ground terms 
prove ind true induction complete founded obviously extension complete founded 
due completeness exists hs ft gi substitution 
claim follows 
ind lemma ind maintains ordering 
induction hypothesis yields ind true ind true 
ind 
show implies ind 
induction hypothesis yield ind false ind false 
note hs ft gi de nition extensions 
requirement arguments induction hypotheses may unify arguments induction de nition extensions 
ind ind 
assume ind 
imply ind ind 
ind instance ind ind contradiction prerequisite ind 
ind 
assume ind instance maintains ordering implies ind lemma 
prerequisite implies ind yield ind 
equivalent ind contradiction assumption 
formulas equations claim immediately follows outer induction hypothesis 
ut note conditions thm 
maintenance orderings checked automatically orderings area term rewrite systems amenable automation 
set conjectures satisfying conditions forms class inductive validity decidable 
decide inductive validity simply constructs rules basic correctness predicate done automatically checks rule form false 
formula double rst checks formula belongs class inductive validity decidable 
purpose examines conjecture contains subterm pairwise disjoint variables algorithm checks equations conjecture radical maintain ordering induction variables 
example equations double radical 
equation double maintains ordering maintains subterm ordering 
inductive validity conjecture decidable 
decision procedure constructs basic correctness predicate double true double true double double checks non recursive rules double true right hand side obviously case 
formula valid 
note way decide inductive validity conjectures hard problems inductive theorem provers 
fact virtually existing inductive provers fail verifying double 
problem pointed 
reason induction double evaluated double way apply induction hypothesis double proof induction step case succeed 
hand decision procedure validity conjectures shown inductive theorem prover 
class conjectures inductive validity decidable simple decision procedure 
allows integration inductive reasoning fully automated tools model checkers compilers 
extended results larger class equations subsequently extended approach arbitrary quanti er free conjectures 
main idea build correctness predicates equations occurring conjecture gave criterion checking correctness predicates really describe exact set objects equation valid 
showed construct basic correctness predicates non atomic formulas checking de ning rules inductive validity formulas easily decided 
focused integrating induction schemes decision procedure quanti er free theory free constructors obtain extension decision procedure quanti er free formulas proofs may require induction 
kapur subramaniam discussed approach integrating induction schemes decidable quanti er free theories including presburger arithmetic gave decision procedure inductive validity large class equations involving function symbols decidable quanti er free theory 
intend generalize techniques developed constructor systems systems including presburger arithmetic 

baader nipkow term rewriting cambridge univ pr 

boyer moore computational logic academic press 

bundy stevens van harmelen ireland smaill rippling heuristic guiding inductive proofs arti cial intelligence 

dershowitz termination rewriting symb 
comp 

predicate synthesis formal speci cations proc 
ecai 

kapur subramaniam new uses linear arithmetic automated theorem proving induction journal automated reasoning 

kapur subramaniam extending decision procedures induction schemes proc 
cade lnai pages 

patching faulty conjectures proc 
cade lnai 

steinbach simpli cation orderings history results fundamenta informaticae 

zhang kapur krishnamoorthy induction principle equational speci cations proc 
cade lncs 

