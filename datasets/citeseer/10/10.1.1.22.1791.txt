tdl hardware assembly description language number tdl daniel cs uni sb de february contents related resource section declaration register sets 
declaration functional units 
declaration memories 
declaration caches 
declaration generic user de ned resources 
declaration attributes 
extensions domains prede ned attributes 
de nition aliases registers register sets 
de nition aliases resources 
preprocessing 
de nition resource classes 
instruction set section speci cation semantics 
declaration assembly operation 
example 
register transfer language 
canonical functions 
type inference 
detailed grammar register transfer language 
example 
de ning operation classes instruction formats 
de nition non terminals 
constraints section contents assembly section declaration assembly directives 
declaration non terminals directives 
tdl speci cation adsp chapter tdl target description language descriptive language speci cation hardware resources assembly language target processor 
application areas tdl assembly postpass optimizations analyses consider target speci properties machine independent way 
properties hardware resources uence analysis optimization process known 
furthermore instructions processor recognized ects operation known 
tdl speci cation composed parts speci ation hardware resources description instruction set constraint section assembly section 
resource section hardware component uence analyses optimizations introduced 
behavior assembly representation resources speci ed dedicated attributes 
resource aliasing facilities introducing user de ned virtual resources di erent levels supported 
instruction set section contains de nition instruction set form attribute grammar 
operation represented rule grammar repeatedly occurring instruction parts addressing modes described dedicated rules 
exible attribute mechanism allows identi cation important operation properties considered analyses optimizations 
includes assembly representation instruction set source destination operands timing information see sec 
way important informations accessed directly having interprete detailed speci cation operation semantics 
detailed semantics operations speci ed extended register transfer language 
rtl language tdl allows semantical analysis machine operations elementary type checking performed 
important design consideration concept abstraction di erent abstraction levels supported functional abstraction 
description le applications requiring di erent levels detail semantical speci cation 
constraint section composed set constraints respected preserve correctness code transformations 
way complex interactions di erent operations described 
example restricted parallelism chapter 
alu multiplier operations adsp 
parallel execution possible operand located dedicated register group 
operations feasible executed parallel 
assembly section deals assembly macros instruction delimiters instruction delimiter assembly comments directives tdl description checked semantical consistency properties hardware resources operations speci ed dedicated attributes 
attribute associated set hardware resources dedicated domain 
holds prede ned additional user de ned attributes assigning incorrect value attribute attribute speci hardware resource associated attribute produces error 
semantical checks prevent example aliases non existing resources exceeding register set sizes 
machine description ansi les generated 
generated functions initialize data structures containing target dependent information speci ed tdl 
les compiled linked target application 
second parser assembly language automatically generated 
parser transforms input program generic control ow graph implemented perl 
way portability ensured rapid prototyping supported easy write simple parsers subsets language hand 
documentation lexical conventions keywords written typewriter font non terminals italics 
keywords case insensitive 
spelling user de ned resources attributes attribute values 
chapter related hardware description languages variety di erent target applications architectural synthesis hardware simulation code generation analyses 
consequence large number hardware description languages developed 
area processor modelling simulating vhdl verilog widely code generation known approaches isps mimola nml 
developments lisa aiming generating cycle accurate simulators architectures complex pipelines isdl intended generating set tools assemblers simulators code generators 
approach expression language 
important problem provide di erent levels abstraction speci cation reason great number description languages adapted di erent target applications 
languages basis assembly code analyses transformations major modi cations 
case target description capture properties hardware de nition assembly language 
existing language area developed framework 
basic structure tdl similar mainly uenced isdl 
basic design philosophy system provide user environment allows implement tools analyses transformations low level code 
description target machine assembly language parser generated transforms input program generic control ow graph 
user ered object oriented interface access manipulate data structures representing cfg 
description language allows user introduce kind resources 
exibility restricted small prede ned set attributes specify properties resources machine speci cation 
possible introduce additional user de ned attributes speci cation hardware properties 
similarly instructions speci ed de ning assembly representation resource access sequence semantics 
additional attributes specify properties relevant analyses transformations 
detailed operation semantics speci ed chapter 
related coarse classi cation control ow operations speci cation jump target possible 
set target applications built top restricted analyses need additional informations provided user externally machine description proper 
mechanism specify explicit constraints modelling complex interactions operations operations allocation decisions see sec 

important drawback lack semantical checks machine description le 
possible parsing machine speci cation inform user errors inconsistencies description le 
possible refer resources declared de ne instructions assign oating point values integer register exceed register le sizes consequences erroneous speci cations show processing assembly input programs 
instruction speci cation mechanism completely compositional 
order shorten description cpp preprocessor directives purely textual replacement semantical information 
instruction optional guard di erent operation de nitions provided di erences operation behavior expressed 
lisp description syntax exhaustive cpp preprocessor directives ect readability speci cation human reader 
isdl designed support wide range tools code generators disassemblers instruction set simulators 
hand language powerful needed assembly analyses transformations 
hand provide exibility essential applications 
information speci ed isdl generate assembler disassembler binary coding instruction declared instruction set description prerequisite scope tdl 
internal handling assemblers disassemblers allows isdl simplifying assumptions structure assemble language 
possible specify assembly directives syntax assembly comments instruction delimiters isdl 
set resource types supported isdl restricted possibility introducing additional user de ned resource types 
current version isdl pipeline modelling focus mainly vliw architectures complex pipelines attribute mechanism isdl building analysers top isdl speci cation dicult 
information represented speci cation semantics operations analysers potentially interprete complete semantical speci cation operation 
nml machine description formalism retargetable compiler chess 
instruction set modelled attribute grammar terminal grammar corresponds valid instruction 
addition instruction set grammar nml description contain declarations storage objects data types constants macros 
resource declarations possible storage objects declarations functional units caches supported introducing tdl simpli ed pipeline model assumed 
ongoing modelling complex pipelines including order execution 
additional user de ned resource types 
description basis program analyses informations provided static cache analysis 
speci cation instruction set nml attributes action semantics description syntax assembly representation image binary representation prede ned 
order gather informations source destination operands semantics description analysed introducing additional attributes operand description redundancies introduced 
attributes declared implicitly nml specifying domain feasible attribute values 
way possible check feasibility attribute settings semantical analysis machine description 
nml constraint mechanism model complex dependences operations provided 
nml designed postpass optimizations analyses speci cation syntax assembly comments directives instruction delimiters supported 
primary application area tdl assembly postpass optimizations analyses generation simulators supported 
potential derive code selector generator speci cations tdl description 
variety application areas primarily supported functional abstraction mechanism speci cation operation semantics 
important property tdl modularity base csdl language families developed university virginia valid tdl description consist resource section way pure hardware description language 
resource section sections tdl description optional tdl 
serious diculty description formalism application originally designed interface application 
worst case description language parser completely reprogrammed 
interfacing problem addressed tdl generating ansi code represents information speci ed tdl description 
routines completely independent target application integrating tdl description tdl parser application easily possible 
www cs virginia edu zephyr csdl overview html chapter 
related chapter resource section rst part speci cation covers description hardware resources target processor 
formalism provides pre de ned resource types prede ned attributes carry syntactical semantical information 
user add new values prede ned attributes introduce new attributes associated domains 
correctness checks 
assignment value attribute checked value contained domain attribute 
user de ned attributes explicitly speci ed 
speci cation includes set possible values resources described attribute 
resource section introduced keyword resources section 
sections declarations resource section described detail 
declaration register sets register genname genname name starting letter followed sequence alphanumeric characters 
de ned register set exact spelling case genname 
sequence characters enclosed double quotes 
function format string similar format strings string contains directive means directive replaced integer constant 
way naming individual registers described implicitly 
assembly representation element register speci ed set generated implicitly directive index register register le 
note default naming overridden directive introducing resource alias see 
intval intval intval chapter 
resource section empty containing register created 
integer brackets intval assumed size register le 
containing elements created 
indexing starts 
size intval type usage key attrib renaming value attribute size describes register 
attribute type describes datatype register 
possible values signed unsigned float fract storage 
width type optionally speci ed signed unsigned storage float case oating point values denotes size mantissa size exponent 
types identical types feasible rtl language specifying semantics operations 
type speci ed default type storage assumed denotes storage location unspeci ed type 
size explicitly type size register default width 
additional types de ned see sec 

register hardwired xed value value attribute value 
register contents hexadecimal notation 
bit size constant number bits represent constant identical bit size register 
attribute usage describes semantical register introduced 
possible values index index register offset set register sp stack pointer fp frame pointer pc program counter accu accumulator register 
additional values associated usage see sec 
register renaming performed code optimizations 
cases register renaming allowed renaming 
default case register renaming performed renaming speci ed 
attribute requires detailed explanation 
code optimization framework integrated instruction scheduling register assignment performed 
consider register set subdivided smaller register groups di erent behaviour respect parallelization properties 
operation read input program operand lies register register le mapped resource nodes register groups register le 
required model consequences assigning operand register certain 
declaration functional units register group 
subgroups declared resource classes consisting appropriate element registers 
behavior di erent groups di erent complete register le containing original operand sucient correct modelling 
comma separated list components form genname 
referenced resources may register les single registers subset registers register le resource classes introduced register resources 
de ned 
value ect register renaming allowed current register set 
attributes order 
apart attributes type size attributes optional 
addition prede ned attributes user additional attributes describe attributes form key value pairs 
attributes declared see 
example register size type signed usage index attributes register le parts register le individual registers register le changed explicitly de nition register 
declaration 
genname genname generic name register le ected change 
syntactically de ned 
meaning slightly di erent 
range delimiter attributes transferred complete register le 
form attributes changed ath component register register le 
form element registers indices range ected attribute de nition 

declaration functional units genname key value key value assembler template omitted functional resource named assembler language 
intval indicates instances functional unit exist 
replication level speci ed assumed exactly instance 
chapter 
resource section examples alu shifter declaration memories memory genname intval intval intval specify range memory cells contained declared memory 
range information size memory 
giving value feasible cause memory consisting cell declared 
complete range speci cation bit memory declared 
exible syntax supports memories embedded larger address space 
type align intval access intval key value type describes type memory declared 
possible values data denoting data memory instr denoting program memory mixed declares memory store instructions data 
additional types de ned see 
align describes alignment memory bits 
access describes access width memory bits 
apart prede ned attributes type align access user de ne additional attributes attributes form key value pairs 
attributes declared see 
attributes order type align access speci ed 
example memory pm pm type mixed align access declaration caches cache genname 
declaration generic user defined resources type size intval assoc intval intval key value type memory declarations meaning 
size gives number cache lines 
line size cache absolute size cache calculated 
assoc gives associativity cache 
speci es cache bytes 
additional attributes speci ed user form key value pairs 
user de ned attributes declared 
attributes order type size assoc de ned 
example cache assoc size type instr declaration generic user de ned resources genname genname usual 
usual 
key attrib key attrib sequence key value pairs describe generic resource 
attributes declared 
example res key value key value declaration attributes genname associated genname name attribute declaration resources 
value value value int float intval intval intval int denotes integer type 
float denotes oating point type 
chapter 
resource section intval concrete integer value 
concrete real value 
string enclosed 
intval intval interval real numbers 
register memory cache operation genname 
genname refers user de ned resource type 
attributes de ned operation appears instruction set section dedicated resource type introduced operations instructions operation 
user annotations form attribute value pairs resource type annotation declare attributes user annotations 
example replacement lru associated cache extensions domains prede ned attributes type register usage register type memory mode operation guard operation shown declaration attributes 
de nition aliases registers register sets general idea introduce alternative name certain register les parts register les 
way di erent logical views physical register set speci ed 
aliases di er original resource respect attributes 
attributes di er original resource explicitly nition attributes taken original resource 
alias 
definition aliases registers register sets de nition occur de nition aliased resource 
register le declared alias previously declared register le alias relationship registered element register 
depending type alias mapping element register corresponds element registers part element register genname introduced alias 
assembly representation alias 
genname resource aliased 
syntactically declaration register sets 
form alias refers exclusively element register register le genname addressed index complete range speci ed alias refers element registers range range alias alias register le 
mapping intval intval alias register introduces registers composed registers original register le parts original registers 
cases mapping indicates registers old resource correspond register new resource alias 
mapping register alias corresponds successive registers original resource 
mapping successive registers alias correspond register original resource 
intval equal 
corresponds 
contrast sec empty additional attribute numbering 
feasible attribute values numbering auto detailed meaning explained 
frequent application register aliases modelling register les element registers composed element registers previously declared register le 
example double registers composed integer registers 
assembler representation alias register generated automatically default element registers numbered increasing order 
consider example ireg mapping type double double register corresponds integer registers double register corresponds integer registers chapter 
resource section naming scheme individual registers complicated 
example texas instruments ti 
processor general purpose registers grouped form long register 
assembly representation long registers corresponds concatenation assembly representation comprised general purpose registers 
consequence assembly representation speci cation individual register placeholder 
cases correct numbering enforced help additional attribute numbering take values auto 
value indicates numbers assembly representation register appear increasing order 
similarly specify decreasing order 
default value auto covers cases placeholder needed 
register declarations long registers ti reads follows ireg mapping type double numbering assembly representation element registers register le long register composed general purpose registers de nition aliases resources special case register aliasing dedicated names individual bits register additionally alias relationships declared functional units memories caches user introduced resources 
replication level functional units modi ed alias de nition 
alias introduced exactly instance functional index identify correct instance syntax 
similar register alias mechanism alias relationships registered aliases original resources 
examples alu mdm dm size 
preprocessing preprocessing machine description parsed fed cpp preprocessor 
order shorten machine description define mechanism known 
similarly include directive distribute machine description les 
de nition resource classes resources grouped description instruction set target processor 
resource groups aliases just kind abbreviation set di erent resources 
genname genname denotes generic name refer resource class 
denotes set resources elements de ned group 
resources contained set de ned de nition 
example ireg chapter 
resource section chapter instruction set section section instruction set target processor described assembly representation 
instruction set form attribute grammar operation de nition considered rule grammar 
operation parts addressing modes operands described individual rules 
operations input le parsed rules properties operations derived attribute de nitions associated rule 
separated attribute sets rst set identify operands instruction important general informations operation execution 
examples dst attribute describe primary destination operation base attribute describe base value indirect memory attributes play important role speci cation semantics operation see 

attribute set describe assignment ilp resources integer linear programming model reservation table information needed pipeline modelling 
third attribute set deals timing information attribute set considered single attribute explicitly specifying detailed semantical behavior operations means register transfer language 
subsection gives short summary basic concepts semantics speci cation syntax instruction set de nition detail 
subsection introduces register transfer language tdl 
speci cation semantics describing operation semantics description formalism depends intended 
purpose semantical speci cation generate hardware simulators powerful method give semantics 
way semantical speci cation base code analyses optimizations 
important design goal semantics description formalism tdl achieve high degree exibility 
bit level behavior known target application feasible describe part operation semantics chapter 
instruction set section really needed 
hand bit level exactness required exhaustive description possible 
common practice specify semantics operation register transfer language rtl 
tdl extended rtl language syntax adapted language 
similar rtl languages nml isdl 
restricting language pure register transfer operations lead long semantical speci cations higher order operations loops function calls introduced 
semantics operation de ned sequence statements basic entities tdl version rtl 
possible rtl statements assignments conditional expressions loops function calls 
rtl statement describes change state target architecture source destination operands constants refer storage resources processor 
type operands referring storage resources bit sequence appropriate length 
resource rtl speci cation declared resource section 
rtl expressions include logical arithmetic operations accesses individual registers register les individual memory cells 
possible access single bits storage resource 
order allow concise semantics speci cation useful temporary storage resources exist real hardware simplify description semantics 
mechanism declare virtual storage resources consist sequence bits speci ed length 
feasible constants integer values decimal hexadecimal binary format oating point numbers 
attribute mechanism introduced plays important role distinguishing di erent levels semantical detail 
dealing data dependences known operation change value condition register 
bits changed necessarily interesting level 
hand analysis performed deals conditional instructions exact behavior essential 
standard passes calculate data dependences construct control ow graph refer components machine state described explicitly attributes operations 
user de ned sophisticated analyses requiring detail access complete semantical speci cation rtl language interprete behavior 
course standard analyses performed detailed description needed omitted 
isdl similar distinction di erentiating semantics proper called side ects operation 
instructions quite complex behavior behavior speci ed means rtl expressions lengthen description considerably 
function call mechanism required modularize speci cation semantics operations 
concept functions rtl slightly di erent functions programming languages 
behavior hardware resources modelled need scoping advanced parameter passing mechanisms 
arguments passed functions thought bit sequences evaluated modi ed functions 
function calling mechanism plays important role generating rtl descriptions apart role 
declaration assembly operation description allows interprete sequence rtl statements di erent levels abstraction 
primary application area tdl speci cations postpass analyses optimizations automatic generation simulators high level code generators supported 
applications di ers required level detail rtl description 
bit level behaviour function body interest target application possible consider function black box 
generating simulator described architecture function body considered full detail 
set prede ned functions sext sign extension considered atomic switch functions possible introduce user de ned canonical functions 
current version tdl canonical functions treated black boxes function body 
order allow automatic consistency check rtl description canonical function explicitly declared 
done providing prototype specifying number type arguments type return value 
semantics implicit function call target applications responsible correct interpretation 
course program execution simulated rtl description function body de ned explicitly 
included version tdl 
declaration assembly operation description instruction set begins keyword section 
syntax instruction declaration follows genname semantics genname generic name instruction de ned 
name instruction referenced sections hardware description 
name consist letter followed possibly empty list alphanumeric characters 
symbol format string de nes assembly representation instruction 
symbol symbol 
treated character expressed format symbol 
integer decimal notation integer hexadecimal notation double string 
directive ip refers non terminal named ip 
non terminal viewed function sets attribute values returns assembly representation matched partial string 
example usage consider format string dm 
help attributes user specify directives substituted chapter 
instruction set section assembly representation hardware resources 
attribute speci cation dst ireg ireg declared register le assembly representation interpreted follows rst directive corresponds assembly representation resource type ireg 
match occur 
known resource destination operation 
attribute speci cation reads dst string dm match 
format string describes bit integer expected instruction position immediate value 
attributes related syntactical appearance operation speci ed 
attributes de ned represent semantical information standard passes construct control ow graph data control dependence graphs 
dst base offset mode guard src src src target counter genname attribute de nition 
explicitly prohibits code movement actual operation 
dst primary destination operation 
dst secondary destination operation 
base base address address calculations 
offset set address calculations 
mode operation mode prede ned values post denoting post modify memory access pre denoting pre modify memory access 
modes base register assumed modi ed 
additional values de ned user 
guard attributes indicates execution operation depends special conditions determined dynamically actual state machine 
possible values true false 
src src src src src resources read operation 
target denote jump targets 
counter attribute associated counter loop instructions refers location loop counter register 
genname refers user de ned attribute introduced associated operation 

declaration assembly operation genname genname intval digit genname represents resource de ned resources section 
possible specify dedicated element register register set operand instruction 
index register enclosing register le brackets 
set prede ned values contains value post attribute mode 
user specify additional values directive 
sequence means corresponding value depends actual instruction instance reading instruction assembly le corresponds rst placeholder assembly representation 
speci ed resource types corresponding argument lie 
extension omitted 
directive refers non terminal argument type return type non terminal see 
argument defaults data type corresponds format string corresponding argument appears string denotes integer oat 
datatype instructions interprete arguments containing dedicated data types 
speci ed keyword feasible types summarized sec 
execution model tdl di resource types operation assigned rst resource executes operation second resource write back result 
specifying execution resource modelled number available instances resource type exceeded 
similarly specifying write back resource assured maximum number results written result bus cycle exceeded 
resource types execute current operation enumerates alternative resource types write back resource current operation 
speci cation write back bus necessary architectures empty 
cation cation genname timing latency digit slots digit digit timing behaviour operation may depend resource executed timing information speci ed resource 
order matter timing informations speci ed default value assumed 
chapter 
instruction set section resources coordinating write back results enumerated 
typically result bus declared 
cases bus contention result write backs prevented modelling executing resources adsp entry empty 
semantics see subsections example example assumed non terminal de ned sets guard attribute introduces temporary storage location cond 
part operation de nition speci cation semantics operation see 
dst ireg src ireg src ireg alu latency slots alu latency slots latency cond dst src src register transfer language rtl description semantics consists sequence statements 
di erent types statements assignments conditional statements loops switch statements declarations virtual temporary storage location function calls 
assignment change state machine value expression right hand side assigned storage resource denoted left hand side 
left hand side complete memory register le individual memory cell individual register register le 
possible access bit storage resources separately 
order cope individual operation instances operand attributes dst base offset src 
basic data type rtl expressions bit sequences length 
keyword storage denotes storage location actual context associated concrete arithmetic data type 
contents storage location evaluated context rtl speci cation resulting value depends numeric representation 
cases numeric representation evaluate storage location depends special conditions mode settings 
contents xed point register interpreted signed integer complement representation unsigned integer fractional 
floating point formats di er number bits dedicated mantissa exponent 
required format 
register transfer language known evaluation performed semantics de ned 
tdl description checked semantical consistency 
checked arguments rtl operations correct data type correct bit width 
mean rtl strongly typed represent obstacle describing machine semantics 
arithmetic data type required type storage simply represents sequence bit values 
data types feasible tdl signed denotes bit signed integer complement representation 
unsigned denotes bit unsigned integer 
float denotes ieee oating point value bit mantissa bit exponent 
fract denotes fractional values 
storage denotes storage location length unspeci ed type 
data types storage dedicated evaluation functions prede ned ensure argument evaluated correct format 
di er normal functions describe functionality hardware components see 
evaluation functions explicit semantical description contents storage location constant evaluated associated dedicated physical hardware component 
functions set prede ned functions explained detail 
function prototype similarly required tdl speci cation introducing canonical functions 
di erence contrast prototype speci cation mechanism tdl arguments functions named chapter 
type argument matter keyword 
subsumes data types mentioned signed unsigned float fract storage 
meaning similar meaning storage 
keyword storage describe storage location unknown unspeci ed data type denotes set possible data types including storage 
ect evaluation cases contents storage location interpreted element arithmetic data type 
functions expect arguments speci ed type type explicitly function prototype 
introducing formal parameter type storage signed unsigned size speci ed 
case size argument matter 
arguments bit sequences passed functions length known correct evaluation possible 
function calls typechecked respect number arguments data types bit widths 
evaluation functions chapter 
instruction set section signed signed contents interpreted complement value length bit width storage resource larger signi cant bits considered 
second parameter omitted entire storage resource considered full length 
unsigned signed contents interpreted unsigned value length bit width storage resource larger signi cant bits considered 
second parameter omitted entire storage resource considered full length 
float signed signed contents interpreted oating point value bit mantissa bit exponent 
fract signed signed contents interpreted fractional xed point values concrete representation determined 
example contents integer register evaluated complement number bit status register set interpreted unsigned value 
signed 
unsigned control structures switch behave way corresponding operations 
temporary virtual storage resources introduced invariably associated indicated data type 
bit sizes enclosed brackets statement signed iterator introduces temporary storage location name iterator hold bit complement values 
due structure instruction set section attribute grammar complete rtl description operation instance depend parts instruction described non terminals 
semantical description operation part contained rtl sequence main part operation 
semantical description non terminal contains declaration temporary storage location main part speci cation necessary temporary storage location declared main part rtl description keyword external 
set prede ned functions naming convention functions named leading 
additional user de ned functions declared see 

rtl expressions de ned follows constants 
include integer constants decimal notation 
constants represent bit complement values 
special evaluation functions unsigned representation formats forced 

register transfer language binary hexadecimal values 
evaluation constants needed default interpreted unsigned values 
evaluation functions interpreted numbers di erent format 
constant xff interpreted complement representation achieved writing signed xff 
detailed description evaluation functions chapter 
oating point values 
default interpreted bit ieee oating point numbers evaluation function float oating point representation forced 
prede ned constants represent unary operators rtl language 
di erent bit constants denote oating point rounding mode round ieee mode rounding 
round ieee mode rounding 
round nearest ieee mode rounding nearest 
round zero ieee mode rounding zero 
storage 
include complete memories register les individual memory cells individual registers register le 
possible access bit storage resources separately 
done appending position desired bit enclosed storage resource appears expression contents location evaluated type data contained known 
appears left hand side assignment storage area denoted 
field names 
feasible values names attributes appear rst attribute set operation description 
dst src src src src src base offset counter node type guard target additional user de ned attributes attribute names values associated resource type operation see sec 

user introduce additional attributes de ne set feasible values attribute possible refer attributes semantical description 
set operations performed user de ned attributes values restricted comparison operations allowed 
reason attributes associated storage resources need perform assignments attributes rtl description 
operation semantics may depend value attributes 
restriction holds user provided extensions prede ned attributes guard mode type 
binary arithmetic expressions operators feasible chapter 
instruction set section logical conjunction disjunction operators 
operands bit unsigned values return type bit unsigned value 
bitwise xor 
bit width operands match return type results synthesising types operands see 

equality inequality test operators operators operands type operands compared bitwise 
result type unsigned 
operators oating point numbers oating point exceptions registered 
exceptions modelled dedicated oating point comparison operators feq 
arithmetic comparison operators 
arguments functions numerical type type signed unsigned float 
types operand di er automatic type conversion performed 
result bit unsigned value 
operators oating point numbers oating point exceptions registered 
exceptions modelled dedicated oating point comparison operators feq 
right left shift 
right operand unsigned integer value gives number bit positions left operand shifted 
type return value type rst operand 
usual arithmetic operations 
operands numerical values combination numerical types feasible 
operators overloaded clear format operands 
format operands depends instruction speci ed extension attribute declaration see src ireg signed 
format operands depends runtime conditions special mode settings operation format explicit evaluation conversion functions see 
operators operands di erent types 
automatic conversions take place signed unsigned signed signed xed point operands bit width result maximum bit widths operands 
oating point values sizes mantissa exponent return value correspond maximum mantissa resp 
operand operands 
bit width available destination resource short exact result truncated default 
desirable modelling explicitly speci ed rtl code dedicated 

register transfer language unary arithmetic expressions logical complement 
operand bit unsigned value return type 
bitwise complement 
operand type return type type allowed 
unary minus 
conditions hold binary arithmetic operators 
calls prede ned user de ned functions 
di erence consists function naming names user de ned functions strings enclosed 
prede ned function sign extension function sext example user de ned function name user defined fun 
parameter list enclosed round brackets local parameters separated commas 
notation type return value precedes function name 
cases virtual storage resource returned contents assigned resources manipulated left right hand assignments 
functions produce results denoted keyword void taken actual parameter function omitted keyword nil 
helpful prede ned functions ag settings necessary target architecture 
void include function takes generic name non terminal single argument 
instruction set de nition non terminals may carry partial semantical information form rtl statements 
rtl sequence complete operation constructed rtl statements non terminal introduced place rtl sequence operation statement include located 
default rtl statements non terminals inserted operation rtl sequence order occurrence 
void exec storage argument program counter executes instruction address contained pc 
pc incremented automatically allow explicit assignments program counter jumps 
storage msb signed extracts signi cant bits storage resource big endian notation returns bit sequence storage lsb signed extracts signi cant bits storage resource big endian notation returns bit sequence subsequent changes returned bit sequence change state storage resource passed rst argument 
chapter 
instruction set section storage signed signed extracts bit sequence nth mth bit returns storage conc concatenates bit sequences contained arguments 
result bit sequence length sum lengths arguments 
signed sext signed signed performs sign extension value bits 
return value storage resource containing complement number signed signed signed performs zero extension value bits 
return value storage resource containing complement number iadd unsigned unsigned storage function adds contents interpreted complement numbers unsigned values 
feasible data types operands storage signed unsigned unspeci ed type storage feasible parameters function determine uniquely arguments function interpreted 
error reported storage location passed argument previously speci ed location oating point value 
result type determined table 
saturation performed case positive negative ow largest positive smallest negative number bit width returned 
bit width result maximum bit widths ow occurs bit set 
isub unsigned unsigned storage function subtracts contents interpreted complement numbers unsigned values 
saturation performed case positive negative ow largest positive smallest negative number bit width returned 
result complement number bit width maximum bit widths 
ow occurs bit set 
feasible data types operands storage signed unsigned result type determined table 
unsigned unsigned unsigned storage function adds contents carry bit interpreted complement numbers unsigned values 
saturation performed case positive negative ow largest positive smallest negative number bit width returned 
bit width result maximum bit 
register transfer language widths ow occurs bit set 
feasible data types operands storage signed unsigned result type determined table 
unsigned unsigned unsigned storage function subtracts contents borrow bit interpreted complement numbers unsigned values 
saturation performed case positive negative ow largest positive smallest negative number bit width returned 
bit width result maximum bit widths ow occurs bit set 
feasible data types operands storage signed unsigned result type determined table 
signed signed unsigned unsigned calculates absolute value complement number saturation performed case positive negative ow largest positive smallest negative number bit width returned 
result bit width 
ow occurs bit set 
unsigned unsigned signed wo storage function multiplies contents indicate interpreted unsigned complement numbers value causes complement evaluation 
ow occurs bit set 
feasible data types operands storage signed unsigned result type determined table 
value wo gives bit width result 
idiv unsigned unsigned signed wo storage function divides contents indicate interpreted unsigned complement numbers value causes complement evaluation 
ow occurs bit set 
feasible data types operands storage signed unsigned result type determined table 
value wo gives bit width result 
unsigned unsigned signed wo storage function calculates remainder integer division indicate interpreted unsigned complement numbers value causes complement evaluation 
ow occurs bit set 
feasible data types operands chapter 
instruction set section storage signed unsigned result type determined table 
value wo gives bit width result 
fadd signed ms signed storage storage ieeeexp function adds feasible data types operands float storage resources interpreted oating point values ms bit mantissa bit exponent 
type float ms error reported 
parameter denotes rounding mode rounding modes page 
result ms format 
bit sequence ieeeexp register ieee oating point exceptions follows ieeeexp standard ieee divide zero ag 
ieeeexp inx standard ieee inexact ag 
ieeeexp unf standard ieee ow ag 
ieeeexp ov standard ieee ow ag 
ieeeexp inv standard ieee invalid ag 
ieeeexp ifz input ushed zero 
ieeeexp ofz output ushed zero 
result type determined table 
signed ms signed storage storage ieeeexp function subtracts feasible data types operands float storage resources interpreted oating point values ms bit mantissa bit exponent 
type float ms error reported 
parameter denotes rounding mode rounding modes page 
result ms format 
bit sequence ieeeexp register ieee oating point exceptions follows ieeeexp standard ieee divide zero ag 
ieeeexp inx standard ieee inexact ag 
ieeeexp unf standard ieee ow ag 
ieeeexp ov standard ieee ow ag 
ieeeexp inv standard ieee invalid ag 
ieeeexp ifz input ushed zero 
ieeeexp ofz output ushed zero 
result type determined table 
fabs signed ms signed storage storage ieeeexp 
register transfer language function calculates absolute value storage resource feasible data types operand float storage resources interpreted oating point value ms bit mantissa bit exponent 
type float ms error reported 
parameter denotes rounding mode rounding modes page 
result ms format 
bit sequence ieeeexp register ieee oating point exceptions follows ieeeexp standard ieee divide zero ag 
ieeeexp inx standard ieee inexact ag 
ieeeexp unf standard ieee ow ag 
ieeeexp ov standard ieee ow ag 
ieeeexp inv standard ieee invalid ag 
ieeeexp ifz input ushed zero 
ieeeexp ofz output ushed zero 
result type determined table 
fmul signed ms signed storage storage ieeeexp function multiplies feasible data types operands float storage resources interpreted oating point values ms bit mantissa bit exponent 
type float ms error reported 
parameter denotes rounding mode rounding modes page 
result ms format 
bit sequence ieeeexp register ieee oating point exceptions follows ieeeexp standard ieee divide zero ag 
ieeeexp inx standard ieee inexact ag 
ieeeexp unf standard ieee ow ag 
ieeeexp ov standard ieee ow ag 
ieeeexp inv standard ieee invalid ag 
ieeeexp ifz input ushed zero 
ieeeexp ofz output ushed zero 
result type determined table 
signed ms signed storage storage ieeeexp function divides feasible data types operands float storage resources interpreted oating point values ms bit mantissa bit exponent 
type float ms error reported 
parameter denotes rounding mode rounding modes page chapter 
instruction set section 
result ms format 
bit sequence ieeeexp register ieee oating point exceptions follows ieeeexp standard ieee divide zero ag 
ieeeexp inx standard ieee inexact ag 
ieeeexp unf standard ieee ow ag 
ieeeexp ov standard ieee ow ag 
ieeeexp inv standard ieee invalid ag 
ieeeexp ifz input ushed zero 
ieeeexp ofz output ushed zero 
result type determined table 
signed ms signed signed ms signed storage storage ieeeexp function rounds oating point value contained ms bit mantissa bit exponent oating point value ms bit mantissa bit exponent 
feasible data type operand float type float ms error reported 
parameter denotes rounding mode rounding modes page 
bit sequence ieeeexp register ieee oating point exceptions follows ieeeexp standard ieee divide zero ag 
ieeeexp inx standard ieee inexact ag 
ieeeexp unf standard ieee ow ag 
ieeeexp ov standard ieee ow ag 
ieeeexp inv standard ieee invalid ag 
ieeeexp ifz input ushed zero 
ieeeexp ofz output ushed zero 
result type determined table 
signed ms signed storage storage ieeeexp function checks greater arguments oating point values ms bit mantissa bit exponent 
result type unsigned 
type float ms error reported 
parameter denotes rounding mode rounding modes page 
bit sequence ieeeexp register ieee oating point exceptions follows ieeeexp standard ieee divide zero ag 
ieeeexp inx standard ieee inexact ag 
ieeeexp unf standard ieee ow ag 
ieeeexp ov standard ieee ow ag 

register transfer language ieeeexp inv standard ieee invalid ag 
ieeeexp ifz input ushed zero 
ieeeexp ofz output ushed zero 
flt signed ms signed storage storage ieeeexp function checks smaller arguments oating point values ms bit mantissa bit exponent 
result type unsigned 
type float ms error reported 
parameter denotes rounding mode rounding modes page 
bit sequence ieeeexp register ieee oating point exceptions follows ieeeexp standard ieee divide zero ag 
ieeeexp inx standard ieee inexact ag 
ieeeexp unf standard ieee ow ag 
ieeeexp ov standard ieee ow ag 
ieeeexp inv standard ieee invalid ag 
ieeeexp ifz input ushed zero 
ieeeexp ofz output ushed zero 
feq signed ms signed storage storage ieeeexp function checks equal arguments oating point values ms bit mantissa bit exponent 
result type unsigned 
type float ms error reported 
parameter denotes rounding mode rounding modes page 
bit sequence ieeeexp register ieee oating point exceptions follows ieeeexp standard ieee divide zero ag 
ieeeexp inx standard ieee inexact ag 
ieeeexp unf standard ieee ow ag 
ieeeexp ov standard ieee ow ag 
ieeeexp inv standard ieee invalid ag 
ieeeexp ifz input ushed zero 
ieeeexp ofz output ushed zero 
signed ms signed storage storage ieeeexp function checks equal arguments oating point values ms bit mantissa bit exponent 
result type unsigned 
type float ms error reported 
parameter denotes rounding mode rounding modes page 
bit sequence ieeeexp register ieee oating point exceptions follows chapter 
instruction set section ieeeexp standard ieee divide zero ag 
ieeeexp inx standard ieee inexact ag 
ieeeexp unf standard ieee ow ag 
ieeeexp ov standard ieee ow ag 
ieeeexp inv standard ieee invalid ag 
ieeeexp ifz input ushed zero 
ieeeexp ofz output ushed zero 
signed ms signed storage storage ieeeexp function checks greater equal arguments oating point values ms bit mantissa bit exponent 
result type unsigned 
type float ms error reported 
parameter denotes rounding mode rounding modes page 
bit sequence ieeeexp register ieee oating point exceptions follows ieeeexp standard ieee divide zero ag 
ieeeexp inx standard ieee inexact ag 
ieeeexp unf standard ieee ow ag 
ieeeexp ov standard ieee ow ag 
ieeeexp inv standard ieee invalid ag 
ieeeexp ifz input ushed zero 
ieeeexp ofz output ushed zero 
signed ms signed storage storage ieeeexp function checks smaller equal arguments oating point values ms bit mantissa bit exponent 
result type unsigned 
type float ms error reported 
parameter denotes rounding mode rounding modes page 
bit sequence ieeeexp register ieee oating point exceptions follows ieeeexp standard ieee divide zero ag 
ieeeexp inx standard ieee inexact ag 
ieeeexp unf standard ieee ow ag 
ieeeexp ov standard ieee ow ag 
ieeeexp inv standard ieee invalid ag 
ieeeexp ifz input ushed zero 
ieeeexp ofz output ushed zero 
storage lsh signed performs logical shift value positions 
greater right shift performed left shift 

register transfer language signed ash signed signed performs arithmetic shift value positions value interpreted complement number 
greater right shift performed left shift 
storage rot signed rotates contents storage positions 
greater rotate right performed left rotate 
signed cvu unsigned signed converts unsigned bit complement value 
signed ms signed storage storage ieeeexp function converts oating point number ms bit mantissa bit exponent 
treated complement value unsigned value 
parameter denotes rounding mode rounding modes page 
bit sequence ieeeexp register ieee oating point exceptions follows ieeeexp standard ieee divide zero ag 
ieeeexp inx standard ieee inexact ag 
ieeeexp unf standard ieee ow ag 
ieeeexp ov standard ieee ow ag 
ieeeexp inv standard ieee invalid ag 
ieeeexp ifz input ushed zero 
ieeeexp ofz output ushed zero 
signed ms signed storage storage ieeeexp function converts oating point number ms bit mantissa bit exponent complement value unsigned value 
parameter rs denotes bit width result type parameter denotes rounding mode 
rounding modes page 
bit sequence ieeeexp register ieee oating point exceptions follows ieeeexp standard ieee divide zero ag 
ieeeexp inx standard ieee inexact ag 
ieeeexp unf standard ieee ow ag 
ieeeexp ov standard ieee ow ag 
ieeeexp inv standard ieee invalid ag 
ieeeexp ifz input ushed zero 
ieeeexp ofz output ushed zero 
chapter 
instruction set section canonical functions user de ned canonical functions introduced function prototype prototype type checking speci cation semantics operations 
syntax de ned follows name void resp 
types result resp 
formal parameters 
feasible types introduced 
name string enclosed denoting name canonical function 
example float float precedence operators exactly de ned language 
type inference operands operations functions di erent types type resulting value determined table 
type variables unsigned unsigned float numerical constant 
special attention paid dealing constants 
constant storage location type constant automatically converted type propagated destination location result type 
operand operand result storage storage float float signed unsigned signed float float float max table 
detailed grammar register transfer language intconst string fa varname fa fa 
register transfer language empty stat stat stat asgn asgn expr expr expr stat expr stat expr switch expr external dtype varname dtype varname string expr expr expr expr expr expr expr expr expr expr expr expr expr expr expr expr expr expr expr expr expr expr expr expr expr expr expr expr expr expr expr expr expr expr expr expr intconst nil case intconst default identifier identifier expr dst dst base offset counter src src src src src target identifier round round round nearest round zero true false identifier expr expr empty dtype signed unsigned float storage fract empty chapter 
instruction set section include exec ahs cvu fabs fadd float fmul fract flt feq iadd idiv isub lsb lsh msb rot sext signed unsigned conc example dst dm base offset dst src src dst int cond cond src src cond de ning operation classes instruction formats tdl provides means declare special operation classes containing operations share common properties grouped 
useful declaring constraints hold certain group operations 
syntax operation class declaration reads follows genname 
list operations de ned 
execution model underlying tdl speci cation instruction target processor composed 
analysis purposes bit size instruction known 
assembly languages order contained operations important 
concept instruction formats introduced 
instruction format describes operations grouped form vliw instruction 
operation appear certain position instruction format mapped appropriate operation class class appears appropriate order instruction format declaration 
instruction format declared follows genname width intval width describes bit size instruction format de ned 
list operation classes describing operations assigned instruction 
order operations matter 

definition non terminals list operation classes describing operations assigned instruction 
order operations important rst operations belonging rst operation class may appear second class examples ifo says instruction format ifo consists operation operation order 
ifo says instruction format ifo consists operation operation operation rst 
de nition non terminals genname nition non terminals instruction set section 
di erent operations share common components non terminals provide kind abstraction components explicitly declared instruction 
terminology attribute grammars non terminals represent rules specify operation parts 
syntax non terminal de nition de ned follows 
nition de nition non terminal consists sequence alternatives alternative associated optional action 
combination literal characters directives enclosed double quotes 
directives refer resources non terminals strings numbers 
characters special meaning 
indicated describe syntactical alternatives text possibly empty sequence text speci ed 
pure characters preceded 
action speci ed non terminal describes syntactic appearance relevant consequences semantics operation timing behavior 
properties operations de ned speci ed non terminal de nition meaning see sec 

denotes possibly empty list timing speci cations 
describes parts operation semantics depend operation part associated non terminal 
inserted rtl description superior operation position rtl sequence speci ed include function 
chapter 
instruction set section example flag eq guard true unsigned cond cond flag guard false chapter constraints section section allows speci cation constraints required correctly model parallelization restrictions operations scheduling allocation decisions 
similar constraint mechanism exists isdl constraints formulated lexical structure assembly operations 
tdl constraints refer explicitly declared operation properties resources 
way information previous sections reused constraint part elementary semantical checks help prevent errors constraint speci cation 
constraint consists premise rule 
premise condition statically evaluated speci es condition rule hold 
tdl runtime environment generates function table constraint individual function generated element table 
functions rst check precondition satis ed write integer linear programming constraints equivalent rule part speci ed constraint 
versions subroutines additionally generated incorporated graph scheduling algorithm list scheduling 
constraint section introduced optional keyword constraints section followed constraint speci cation 
constraints necessary target architecture keyword constraints section omitted 
individual constraint declaration form 
rst occurrence denotes premise part constraint second rule part constraint parts underly syntax 
semantical checks assure premise part constraint statically evaluated case error reported 
constraints prevent illegal combinations operations instruction scheduling prevent illegal combinations resource allocation decisions 
premise part constraint local variables operations declared bound appropriate operation classes 
variables represent symbolic names rule part constraint specify desired restrictions 
adsp memory banks chapter 
constraints section program resp 
data memory 
accesses program memory data memory executed certain operation combinations combinations illegal operations parallel execution possible 
program data memory declared parallel resources illegal operation combinations constraints generated prohibit parallel execution 
restriction formulated tdl follows op op op op detailed grammar constraint expressions 
disjunction constraint expressions 
operation lowest priority 
conjunction constraint expressions 
priority higher priority 
identi er fieldref fieldref denotes name attribute associated operation 
identi er refers symbolic name operation variable implicitly declared expression premise part constraint previous occurrence identi er current constraint 
rule part identi er bound operation class premise constraint 
case error reported 
list generic names resources introduced resource section 
identi er expression premise part constraint mapping operations operation classes statically known 
means precondition current constraint identi er refers operation contained 
list contains generic names operations operation classes 
rst occurrence identi er premise part current constraint introduced symbolic name operation variable rule part constraint 
identi er intval identi er operation identi er scheduled exactly intval cycles identi er 
expression rule part constraint execution time operations dynamic property 
identi er intval identi er operation identi er scheduled intval cycles identi er 
expression rule part constraint execution time operations dynamic property 
expressions denote usual tests equality inequality arithmetic comparisons 
declared resource numerical constant generic name prede ned user de ned attribute resp 
attribute value 
arithmetic comparison operators numerical operands 
case error reported 
identi er identi er operation identi er scheduled cycle operation identi er 
constraint expression negated 
provides nested constraint expressions 
elaborate example complete constraint section adsp constraints section parallelization restrictions op op op op op op op op op op op op op op op op op op op op chapter 
constraints section constraints multifunctional operations op op op op op src op src op src op src op op op op op src op src op src op src constraints multifunctional operations meaning operation class executed cycle operation class operands reside special register groups 
operands restricted certain register groups 
chapter assembly section assembly section characteristics assembly language directly related instruction set target processor speci ed 
includes notation assembly comments directives operation instruction delimiters comma separate operations instruction semicolons separate di erent instructions 
possible introduce delimiters enclose user annotations source le 
comma separated non empty list strings 
string represents character sequence denoting start line comment 
comment string string string string gives character sequence denoting start general comment comprise lines corresponding character sequence denoting 
string declares character sequence separate orthogonal operations contained instruction 
string declares character sequence separates di erent instructions 
string declares character sequence encloses user annotation 
user annotations consist comma separated list attribute value pairs attributes especially introduced statement 
examples chapter 
assembly section comment declaration assembly directives declaration assembly directives similar declaration instruction set target processor 
special type non terminals construct complex directives similar non terminals instruction set section 
directives expected assembly languages prede ned directive types prede ned attributes 
due great diversity assembly languages focus user de ned directives user de ned attributes specify directives 
genname attrib value attrib value prede ned attributes type addition prede ned values user declare additional values 
denotes directive declaring memory segment 
denotes directive declaring memory segment 
denotes directive declaring global variable 
denotes directive declaring external variable 
denotes variable initialization 
denotes directive specifying array initialization 
literal indicate text directive written modi cation semantical information extracted 
example line directives lose meaning anyway reordering 
name attribute specify segment variable names take arbitrary string values 
memory segment directives specify memory resource declared resource section containing segment 
size array initializations indicate size array value integer 

declaration non terminals directives init speci es concrete value variable initializations 
arrays complete initialization sequence passed string 
feasible values integers 
opnd opnd necessary refer previously declared resources de nition assembly directive 
attributes introduced interpretation left user feasible values numeric alphanumeric constant previously declared resources 
additional attributes set form key value pairs 
declaration non terminals directives declaration non terminals speci cation directives di ers declaration operation non terminals 
reason non terminals specify attribute setting operations directives depend part assembly representation operation directive 
attributes associated operations di erent attributes associated directives mechanism introduced 
genname nition similar operation non terminals non terminals assembly section provide abstraction mechanism common directive parts components explicitly declared directive 
terminology attribute grammars non terminals represent rules specify directive parts 
syntax non terminal de nition de ned follows 
nition de nition non terminal consists sequence alternatives alternative associated optional action 
combination literal characters directives enclosed double quotes 
directives refer resources nonterminals strings numbers 
characters special meaning 
indicated describe syntactical alternatives text possibly empty sequence text speci ed 
pure characters preceded 
additionally escape sequences introduced 
includes rst placeholders non terminals nested non terminal introduced followed generic name non terminal chapter 
assembly section closing brace 
dealing assembly directives cases contents ignored 
supported escape sequence character brackets consumed 
attribute list contain attributes introduced sec 
examples segment type name type gcc compiled type literal global type extern type appendix tdl speci cation adsp chapter tdl speci analog device adsp 
reasons space parts omitted constructs represented example 
reason resources operations appear de nition course feasible true application 
resources section alu integer registers register ireg size type signed renaming true ireg ireg ireg ireg ireg index registers register size type signed usage index usage fp usage sp modify registers register size type signed usage offset length registers register size type signed appendix tdl specification adsp base registers register size type signed floating point registers aliases integer registers ireg mapping type float registers accumulators register df size type signed usage accu size register db size type signed usage accu size mrf mrf mapping size mrb mrb mapping size control flow registers register size type signed register size type signed register spc pc usage pc size type signed register size type signed register size type signed register size type signed register size type signed register size type signed register size type signed register mode mode size type signed register mode mode size type signed register size type signed register size type signed register size type signed register size type signed register size type signed register ustat ustat size type signed register ustat ustat size type signed data memory memory dm dm type data align access memory pm pm type mixed align access cache assoc size type instr standard resource ilp modelling standard std ctrl ctrl ireg mode mode ustat ustat exec count int associated annotation section mode operation ssi sui ssf suf si ui sf uf flag eq guard true unsigned cond cond lt guard true unsigned cond mode cond cond flag guard false db ctrl slots la ci db la ctrl slots db ci ctrl slots db ctrl slots db ctrl slots lr db lr ctrl slots appendix tdl specification adsp imm target signed target signed imm base signed base signed imm offset signed offset signed imm target signed target signed imm base signed base signed imm offset signed offset signed imm src signed src signed imm src signed src signed imm src signed src signed imm src signed src signed se mode ex mode mod si mode si ui mode ui sf mode sf uf mode uf mod ssi mode ssi sui mode sui mode mode ssf mode ssf suf mode suf mode mode mode mode mode mode void signed storage void repeat unsigned storage dm dst dm base signed offset signed src mode post dm latency slots external unsigned cond cond base base offset dm base src dm dst base signed offset signed src dm mode post dm latency slots external unsigned cond cond base base offset dst dm base dst src dm latency slots external unsigned cond cond dst src modify modify dst signed src signed src signed dm latency slots external unsigned cond cond dst src src modify jump imm mode type jmp ctrl latency external unsigned cond cond spc signed target jump pc imm mode type jmp ctrl latency external unsigned cond cond spc spc signed target call base offset appendix tdl specification adsp mode type call ctrl latency include external unsigned cond cond spc spc sext base offset rts rts mode type ret ctrl latency spc imm lce counter signed type loop ctrl latency slots counter target rts rti dm imm dst dm src dm latency slots dm signed base src dm imm dst src dm dm latency slots dst dm signed base dst ireg src ireg src ireg standard latency slots dst iadd src src mode dst dst dst ireg src ireg src ireg standard latency slots dst isub src src mode dst dst dst ireg src ireg src ireg standard latency slots dst src src dst signed dst min dst ireg src ireg src ireg standard latency slots src dst dst mod dst ireg src ireg src ireg mul latency slots unsigned unsigned mode ssi mode sui mode mode dst src src sat mod dst ireg src mrf mul latency slots dst sat src shift dst ireg src ireg src ireg standard latency slots dst lsh src src dst src shift dst ireg src ireg src ireg standard latency slots dst ash src src dst src appendix tdl specification adsp width width width width assembly section comment segment type name type gcc compiled type literal global type extern type value value value var value type name init var type name size init bibliography analog devices 
adsp user manual 
mario barbacci 
instruction set processor speci cations isps notation applications 
ieee transactions computers january 
francois andr 
functional speci cation retargetable system assembly language transformation optimization 
rev beta 
inria june 
david robert henry susan eggers 
marion system retargetable instruction scheduling 
proceedings acm sigplan conference programming language design implementation pages june 
christopher nelson john paul shen 
performance evaluation power pc microarchitecture 
acm transactions 
van 
describing instruction set processors nml 
proceedings european design test conference pages 
ieee 
ferdinand 
cache behavior prediction real time systems 
phd thesis saarland university september 
george 
isdl instruction set description language version 
technical report mit rle april 
ganesh khare dutt nicolau 
expression language architecture exploration compiler simulator retargetability 
proceedings date march 
van ki goossens 
chess retargetable code generation embedded dsp processors 
peter marwedel gert goossens editors code generation embedded processors chapter pages 
kluwer boston london 
schaefer 
vhdl hardware description design 
kluwer academic publishers th edition 
bibliography nowak 
graph retargetable microcode compilation mimola design system 
th annual workshop microprogramming pages 
stefan andreas ho mann heinrich meyr 
lisa machine description language cycle accurate models programmable dsp architectures 
proceedings dac 
published 
donald thomas philip 
verilog hardware description language 
kluwer academic publishers nd edition 
index ash conc exec fabs fadd feq flt float fmul fract iadd idiv include isub lsb lsh msb rot sext signed cvu unsigned abstraction functional access accu addressing mode addressing modes alias de nition aliasing resource align analyses annotation annotation architectural synthesis assembler assembly comments directives macro representation section assembly language assembly languages assembly representation assignment assoc associated attribute mechanism index attribute grammar attributes base bit level behavior cache cache check semantical code analyses generation generator optimization transformation comment consistency check semantical constant constants constraint constraints section counter data type data type fractional detail level disassembler dst dst exponent expression conditional rtl external false eld name xed point float oating point fp fract function body call canonical evaluation prototype switch function call generativity guard guard hardware simulation ieee exceptions index index instance functional unit instruction coding conditional delimiter format index scheduling set set section instruction scheduling int integer signed unsigned integer linear programming interface latency loop mantissa mapping memory memory memory mode modularity non terminal offset offset operation class control ow operation operation combination illegal ow parameter passing parser pc pipeline portability postpass analyses optimization precedence premise preprocessor programming integer linear rapid prototyping register assignment le renaming set register register transfer language renaming replication level representation numeric reservation table resource aliasing class section storage user de ned virtual resource section rounding mode rtl assignment description expression function operations statements index rule scoping section assembly constraints instruction set resource semantical analysis check consistency detail semantics shift arithmetic logical side ects signed simulation simulator size slots sp storage location resource temporary storage switch function target temporary storage resource storage location timing true type inference width type type checking unsigned usage user de ned attribute value vliw void 
