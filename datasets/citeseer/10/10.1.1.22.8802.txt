maude formal meta tool clavel dur eker meseguer 
stehr department philosophy university spain sri international menlo park ca usa 
different perspectives complex software system analyzed multiplicity formalisms unavoidable 
poses important technical challenges rigorously meet need interrelate formalisms reduce duplication effort tool specification building formalisms 
challenges answered adequate formal meta tools specification formal inference system generate efficient inference engine specification formalisms translation generate actual translator 
similarly module composition operations logic independent require costly implementation efforts formalism provided logics general module algebra generator meta tools 
foundations meta tools kind metatheory general logics 
actual design implementation appropriate logical frameworks having efficient implementations 
explains reflective logical framework rewriting logic conjunction efficient reflective implementation maude language design formal meta tools described 
feasibility ideas techniques demonstrated number substantial experiments new formal tools new translations formalisms efficient practice generated 
formal methods software specification verification tend monolithic sense approach formal system specification language formalize desired system properties 
reason formal systems tools autistic lack meta tools methods necessary relating formalisms supporting tools 
consequence difficult integrate rigorous way different formal descriptions reason descriptions 
situation unsatisfactory presents biggest obstacles supported darpa nasa contract nas office naval research contract national science foundation ccr 
formal methods software engineering complexity large software systems fact life single perspective single formalization level abstraction suffices represent system reason behavior 
expression formal interoperability denote capacity move mathematically rigorous way different formalizations system rigorously integrated manner different tools supporting formalizations :10.1.1.44.8474
transforming problems formalism lacking tools equivalent problems formalism formal interoperability save time effort tool development 
libraries theories specifications way amortized formalisms avoiding duplication effort 
similarly rigorous meta methods tools making easy solve different parts complex problem different formal tools integrate subproblem solutions solution 
considerations suggest fruitful investigate develop new formal meta tools tools easily rigorously develop formal tools high level abstraction tools rigorously interoperate existing tools 
specifically useful formal tool generators formal description inference system generate inference engine sufficiently efficient practice tool 
formal translation generators formal descriptions formalisms translation generate actual translator translate specifications interoperate tools formalisms 
module algebra generators formalism appropriate metalogical properties extend language basic specifications richer algebra specification combining operations including specification hierarchies parameterized specifications specification transformations 
metatheory supporting meta tools come 
tools mathematically rigorous thing obviously needed mathematical metatheory logics translations logics 
investigating theory general logics purpose 
theory proof theoretic model theoretic facets logics translations includes theory institutions modeltheoretic component related similar metatheories see survey 
meta tools need metatheory 
run need executable metatheory 
provided adequate logical framework logic properties metalogic logics naturally represented addition executable performance 
implementation framework logic serve basis developing meta tools 
reports results experiments maude language formal meta tool senses described 
maude reflective language rewriting logic essentially contains obj language equational sublanguage 
rewriting logic extends equational logic properties logical framework logics semantic formalisms naturally represented 
important property rewriting logic framework reflective 
reflection efficiently supported maude implementation high performance maude key feature making possible maude meta tool 
rest organized follows 
section explains detail sense rewriting logic reflective logical framework basic principles methods underlying rewriting logic implementation formal meta tool 
section describes key features maude allowing meta tool 
experience building formal tools maude described section report formal tool generator formal translation generator uses beginnings module algebra generator capability 
finish concluding remarks research directions 
reflective logical framework formal meta tool rely support precise axiomatization different logics 
formal distinguishes tool implementations conventional languages say java implementation suitable formal axiomatization tool implemented 
leads need metatheory logics necessary foundation design formal meta tools 
theory general logics proposed provides axiomatic framework formalize proof theory model theory logic provides adequate notions mapping logics logic translations 
theory contains goguen burstall theory institutions model theoretic component 
theory general logics allows define space logics category objects different logics morphisms different mappings translating logic 
axiomatize translation phi logic logic morphism phi gamma 
category logics 
logical framework logic wide class logics mapped maps logics psi gamma 
called representation maps particularly properties conservativity number logics particularly higher order logics typed lambda calculi proposed logical frameworks including edinburgh logical framework lf generic theorem provers isabelle prolog elf basin constable metalogical frameworks 
approaches feferman logical framework fs matthews smaill basin earlier obj generic theorem prover goguen stevens order 
course placed context related experiments carried different frameworks prototype formal systems discussion see survey 
rewriting logic reflection researchers see investigated suitability rewriting logic logical framework properties purpose 
important practical advantage called representational distance theory original logic rewriting logic representation psi practically zero 
original syntax rules inference faithfully mirrored rewrite theory psi 
rewrite theory omega equational theory omega signature operations omega equations collection labeled rewrite rules form gamma 
logically rules mean derive formula formula logical reading rewrite rule inference rule 
syntax omega equational axioms rewrite theory entirely user definable rewriting logic represent direct natural way formulas finitary logic elements algebraic data type defined suitable equational theory omega 
furthermore structural axioms satisfied formulas example associativity commutativity conjunction operator set formulas sequent naturally axiomatized equations equational theory 
inference rule logic naturally axiomatized rewrite rule applied modulo equations side conditions inference rule corresponding rewrite rule conditional 
rewriting logic simple meta rules deduction allowing mirror deduction finitary logic rewriting inference 
earlier narciso mart oliet shown general method representing logics rewriting logic framework allows map logics conservative translation sentence theorem sentence theorem original logic 
conservative maps said adequate faithful 
natural direct representations logics including general method representing quantifiers 
properties additional key property making rewriting logic remarkably useful metalogic reflection 
rewriting logic reflective precise sense finitely rewrite theory finitely rewrite theory including equivalence gamma 
ht ti gamma 
ht terms representing data elements respective types theory term 
representable achieve reflective tower arbitrary number levels reflection gamma 
ht ti gamma 
ht hu ht tii gamma 
hu ht ii key advantage having reflective logical framework logic rewriting logic represent said reify logic computable way maps form 
extending universal theory equational data type definitions data type theories theory logic interest 
map form reified equationally defined function phi theory gamma 
theory similarly representation map form rewriting logic reified function psi theory gamma 
theory maps phi psi computable metatheorem bergstra tucker possible define functions phi psi means corresponding finite sets church rosser terminating equations 
functions effectively defined executed rewriting logic 
formal meta tool techniques systematically exploit properties reflective implementation rewriting logic meta tool 
formal tool generator uses supported defining representation maps psi conservative 
conjunction reflective implementation rewriting logic reify representation maps functions form psi give systematic way executing logic representing theory data element theory rewrite theory psi 
executing rewrite theory fact executing representation experience maps psi essentially identity maps preserving original structure formulas mirroring inference rule corresponding rewrite rule 
user easily follow understand rewriting logic execution theory represented 
execute representation theory general inference process may highly nondeterministic may guided called strategies 
status strategies logical extra logical 
strategies representable framework logic 
rewriting logic reflection saves day strategies logical status computed rewrite theories metalevel 
reflective tower level rewrite theory execution control 
furthermore great freedom creating different internal strategy languages extend rewriting logic universal theory allow flexible logical specification strategies 
formal translator generator uses course supported formally specifying algebraic data types theory theory logics question translation function phi 
module algebra generator uses supported defining parameterized algebraic data type say logic having metalogical properties extends data type theory theories algebra theory composition operations theory 
section explains reflective metalanguage features maude meta tool uses kind possible section summarizes practical meta tool experience maude 
maude metalanguage features maude reflective language modules theories rewriting logic 
general maude modules called system modules 
rewrite theory omega system module essentially form mod endm expressed syntax quite close corresponding mathematical notation corresponding rewrite theory 
equations equational theory omega underlying rewrite theory omega union set equational axioms introduced attributes certain operators signature omega example conjunction operator declared associative commutative keywords assoc comm set equations assumed terminating modulo axioms maude supports rewriting modulo different combinations equational attributes operators declared associative commutative identity idempotent 
maude contains sublanguage functional modules form fmod omega endfm equational theory omega satisfying conditions mentioned 
system module mod endm specifies initial model rewrite theory similarly functional module fmod omega endfm specifies initial algebra equational theory omega 
see detailed description maude syntax quite similar obj 
module meta level naive implementation reflection expensive time memory 
implementation provide efficient ways performing reflective computations 
maude achieved predefined meta level module key functionality universal theory rewriting logic efficiently implemented 
particular meta level sorts term module representations term module rewrite theory sorts term module respectively 
universal theory implements built fashion meta level support reflective tower arbitrary number levels reflection 
summarize key functionality provided meta level maude terms reified elements data type term terms maude modules reified terms data type module modules process reducing term normal form reified function meta reduce process applying rule system module subject term reified function meta apply process rewriting term system module maude default strategy reified function meta rewrite parsing pretty printing term module reified corresponding metalevel functions meta parse meta pretty print 
representing terms 
terms reified elements data type term terms signature subsort qid term subsort term termlist op fg qid qid 
term op qid termlist 
term op termlist termlist 
termlist assoc declaration making sort qid quoted identifiers subsort term represent variables term corresponding quoted identifiers 
variable represented 
operator representing constants pairs argument constant quoted form second argument sort constant quoted form 
example constant module nat discussed represented nat 
operator corresponds recursive construction terms subterms argument top operator quoted form second argument list subterms list concatenation denoted example term sort nat module nat nat nat 
representing modules 
functional system modules syntax similar original user syntax 
main differences terms equations membership axioms see membership axioms rules explained sets identifiers declarations sorts represented sets quoted identifiers built associative commutative operator motivate general syntax representing modules illustrate simple example module nat natural numbers zero successor commutative addition operator 
fmod nat sorts zero nat subsort zero nat op 
zero op nat 
nat op nat nat 
nat comm vars nat eq eq endfm syntax top level operator representing functional modules follows 
sorts module subsort module op qid 
representation nat nat meta level term fmod nat nil sorts zero nat subsort zero nat op nil 
zero op nat 
nat op nat nat 
nat comm var nat var nat eq nat eq endfm nat list imported submodules membership axioms fields filled nil import list set membership axioms 
similarly zero successor operators attributes set attributes 
note just case terms terms sort module yielding term sort term iterated arbitrary number times 
fact necessary metalevel computation operate higher levels 
example inductive theorem prover described section modules terms sort module inference rules induction terms sort term strategies control application inductive inference rules 
advanced applications meta level module possible 
firstly strategies tactics guide application rewrite rules theory defined rewrite rules strategy languages maude modules extending meta level basic forms rewriting supported functions meta apply meta reduce extended arbitrarily complex rewrite strategies defined declarative way logic 
secondly explained section extensible module algebra module composition transformation operations constructed defining new functions data type module data types extending 
thirdly explained section uses maude metalanguage implement languages including formal specification languages formal tools naturally easily supported 
additional metalanguage features suppose want build theorem prover logic executable formal specification language 
representing logic theorem prover specification language question rewriting logic means representation map psi gamma 
reflection explained section internalize map equationally defined function psi maude accomplished module meta level sort module 
reify representation map psi defining data type representing theories logic specifying psi equationally defined function psi gamma 
module module extending meta level 
functions meta reduce meta apply meta rewrite complex strategies functions execute maude psi theory words way execute maude 
need 
build usable formal tool need build environment including execution aspect just described parsing pretty printing input output 
considered formal translator generator uses maude observed entirely similar needs need get specifications different logics originating going different tools maude appropriate parsing pretty printing input output functions 
maude additional metalanguage features supported follows syntax definition accomplished defining data type maude done flexible user definable mixfix syntax mirror concrete syntax existing tool supporting particularities lexical level accommodated user definable bubble sorts tailor adequate notions token identifier language question see 
parsing pretty printing accomplished meta parse meta pretty print functions meta level conjunction bubble sorts defined input output theory definitions commands execution accomplished predefined module loop mode provides generic read eval print loop see 
section describe experience meta level metalanguage features maude meta tool build formal tools 
maude formal meta tool section summarizes experience maude formal meta tool 
specifically report formal tool generator uses inductive theorem prover church rosser checker membership equational logic proof assistant open calculus constructions formal translator generator uses specification language environment building uses beginnings module algebra generator 
inductive theorem prover reflective features maude meta level module built inductive theorem prover equational logic specifications prove inductive properties cafeobj specifications functional modules maude 
specifications dealing equational theories having initial algebra semantics 
theory want prove inductive properties object level 
rules inference induction naturally expressed rewrite theory example inference rules constants lemma rule reduces universally quantified goals variables ground goals variables declared constants fx xn fop 
delta delta delta op 
xn sort constants occur expression rewrite rule maude rewrites current set goals modulo associativity commutativity follows rl xs xs xs function xs adds new constant appropriate sort theory variable xs 
dashes rule notationally convenient maude comment convention 
note rewrite theory uses data structure uses representation theory defined metalevel 
proving inductive theorem corresponds applying rules strategy 
strategies rewrite theory belong metalevel theory metalevel need levels clearly distinguish levels design entirely modular example change strategy change whatsoever inference rules illustrated picture describing modular architecture theorem prover 
meta metalevel metalevel object level object theory induction inference rules inductive proof strategy tool uses levels reflection associative commutative rewriting expresses inference rules high level abstraction 
efficient implementation maude reach rewrites second mhz pentium ii applications resulting implementation tool competitive performance practice interactive mode typically fast response times 
furthermore tool building experience positive terms quickly able develop tool easily extend maintain 
currently extending theorem prover extending logic equational rewriting logic inference rules support powerful reasoning methods including metalogical reasoning 
church rosser checker built church rosser checker tool analyzes equational specifications check satisfy church rosser property 
tool analyze order sorted equational specifications cafeobj maude 
tool outputs collection proof obligations modify specification prove 
church rosser checker reflective design similar inductive theorem prover somewhat simpler 
module want check church rosser object level 
inference system checking church rosser property uses data structure rewrite theory metalevel 
checking process described purely functional way need case additional strategy layer meta metalevel levels suffice 
maude built support unification matching 
implemented order sorted unification algorithm rewrite rules unification real workhorse tool course inefficient 
spite inefficiency reflection making heavy associative commutative rewriting npcomplete tool competitive performance 
example generates long list proof obligations substantial example number hierarchy natural rational numbers rewrites seconds running mhz pentium ii 
currently extending tool ways 
firstly unification performed maude built way 
greatly improve performance enhance general capabilities maude formal meta tool 
secondly church rosser checking support knuth bendix completion membership equational logic specifications coherence completion rewrite theories 
formal interoperability experiments general methods explained section maude logical bus interoperate systematic rigorous way different formalisms associated tools 
goal twofold 
firstly mappings relating different formalisms formalized metalogic rigorously defined possible subject formal metalogical analysis verify correctness 
secondly formal definition mapping logics executable carry translation interoperate practice different formal tools 
precisely defining mappings maude possible 
maps logics relate logics interest 
particular target logic rewriting logic execute maude translated theories 
cases goal may relate different formalisms may tools 
describe formal interoperability experiments carried cooperation colleagues illustrate different uses just discussed combined uses 
hol nuprl hol theorem proving system rich library theories save lot effort having specify scratch commonly encountered theories 
potentially useful resource hol theorem proving systems logics 
howe defined map logics mapping hol logic logic nuprl implemented mapping possible translation hol theories nuprl theories 
way practical goal relating systems making hol libraries available nuprl achieved 
translation carried conventional means form suitable metalogical analysis 
studying mapping kind help howe constable stehr meseguer formally specified maude 
result executable formal specification mapping translates hol theories nuprl theories 
large hol libraries translated nuprl way 
order verify correctness translation investigated parallel version mapping categorical framework general logics 
stehr meseguer proved strong correctness result mapping mapping entailment systems hol classical variant nuprl 
result proof theoretic nature complementary semantical argument 
role direct justification translator result suggests interesting new direction extending mapping entailment systems mapping proof calculi mean practice theorems translated proofs 

illustration naturalness flexibility rewriting logic logical framework represent logics mart oliet meseguer defined simple mappings linear logic rewriting logic propositional fragment firstorder linear logic 
addition explained fact rewriting logic reflective methods discussed section mappings specified executed maude endowing linear logic executable environment 
ideas clavel mart oliet specified maude mapping propositional linear logic rewriting logic 
wright csp 
architectural description languages adls useful early phases software design maintenance evolution 
furthermore architectural descriptions subjected formal analysis design flaws inconsistencies detected quite early design process 
wright language adl attractive feature having formal semantics csp 
meseguer talcott developed maude prototype executable environment wright mappings 
mapping gives executable formal specification csp semantics wright associates wright architectural description csp process 
second mapping gives executable rewriting logic semantics csp 
composition mappings provides prototype executable environment wright conjunction appropriate rewrite strategies animate wright architectural descriptions submit descriptions different forms formal analysis 
pts 
pure type systems pts generalize cube contains important systems simply typed higherorder polymorphic lambda calculi system close logical framework lf combination calculus constructions cc 
pts systems considered key importance generality simplicity ideal basis representing higher order logics directly propositions types interpretation logical framework 
show definition pts systems formalized membership equational logic 
noteworthy representational distance informal mathematical presentation pts systems identification ff equivalent terms membership equational logic specification pts systems close zero 
contrast higher order representation lf isabelle order inductive approach closer mathematical practice adequacy representation require complex metalogical justifications 
greater power explain higher order calculi terms order system simple semantics 
defined uniform pure type systems upts concrete variant pts systems treatment names uniform notion names cinni new order calculus names substitutions 
upts systems solve problem closure ff conversion elegant way 
membership equational logic specification upts systems contains equational substitution calculus directly formalizes informal presentation 
furthermore meta operational aspects upts systems type checking type inference formalized rewriting logic 
purpose inference system upts system specified rewrite theory 
result formalization executable specification upts systems correct specification obvious way 
proof assistant open calculus constructions rewriting logic favors specifications 
flexible computation system conditional rewriting modulo equations uses liberal notion inductive definitions 
pts systems particular cc provide higher order dependent types fixed notion computation fi reduction 
unsatisfying situation addressed addition inductive definitions algebraic extensions style data type systems 
idea overcoming limitations combination membership equational logic calculus constructions suggested long term goal 
close gap different paradigms equational logic higher order type theory currently investigating open calculus constructions occ equational variant calculus constructions open computational system flexible universe hierarchy 
maude ideas cinni upts systems mentioned developed experimental proof assistant occ additional features definitions meta variables 
maude extremely useful explore potential occ early stage design 
addition formal executable specification occ exploits reflective capabilities maude yielding orders magnitude speedups lego coq evaluation functional expressions 
implementing formal specification languages efforts required building adequate tools formal specification languages considerable 
efforts particularly intense languages executable execution engine developed 
methods described practice develop tools environments formal specification languages including executable ones endow languages powerful module algebra specification combining operations 
applied methods design implementation maude 
basic parts language supporting module hierarchies functional system modules predefined modules implemented giving rise sublanguage called core maude 
extended special syntax object oriented specifications rich module algebra parameterized modules module composition clear obj style giving rise full maude language 
full maude formally specified core maude 
formal specification lines fact implementation available maude web page maude csl sri com 
experience regard encouraging respects 
firstly quickly able develop full maude 
secondly easy maintain modify extend new features new module operations 
thirdly competitive performance carry complex module composition module transformation operations interaction full maude quite reasonable 
reflective methods described underly development full maude general 
equally develop high performance executable environments formal specification languages effort greater flexibility maintainability extensibility required conventional implementations 
example denker millen specified maude common authentication specification language cil intermediate language cil translator plan translate cil maude execute specifications 
similarly braga mosses maude develop executable environment structural operational semantics action semantics meseguer montanari defined mapping tile logic rewriting logic basis executing tile logic specifications maude 
quite interesting explore maude implementations specification languages generation cafeobj casl 
furthermore plan generalize module algebra developed maude module algebra generator endow specification languages powerful extensible algebras combining transforming specifications 
explained section done defining module algebra parameterized algebraic data type 
module algebra maude provided full maude specification regarded particular instance generic construction case underlying logic rewriting logic 
argued different perspectives complex software system analyzed multiplicity formalisms unavoidable 
argued technical challenges posed need interrelate formalisms require advances formal interoperability meta tool design metatheory general logics appropriate logical frameworks having efficient implementations 
explained reflective logical framework rewriting logic conjunction efficient reflective implementation maude design formal meta tools rigorously support formal interoperability 
feasibility ideas techniques demonstrated number substantial experiments new formal tools new translations formalisms efficient practice generated 
remains ahead advance ideas 
maude publicly available web january 
documented supports formal meta tool uses described 
currently working version 
new version plan enhance formal meta tool features maude 
specifically plan increase maude flexibility tailoring lexical level language enhance input output capabilities means built objects provide efficient built support unification modulo different equational theories support efficient search space rewrite paths extend expressiveness maude meta level module 
plan develop module algebra generator generalizing current module algebra full maude parameterized algebraic data type 
development maude theorem proving tools important allow carrying proofs metalogical properties formalisms translations represented maude 
experience maude formal meta tool needed 
hope release maude positive experience gained help gain broader experience 
acknowledgments stuart allen robert constable douglas howe help understanding hol nuprl translation uri carolyn talcott wright csp translation denker jon millen cil translation braga peter mosses building executable environments sos action semantics roberto ugo montanari translation tile logic rewriting logic important experiments discussed 
fellow maude team members denker patrick lincoln narciso mart oliet jos quesada contributions theory practice maude carolyn talcott discussions extensive joint formal interoperability 
grateful david basin narciso mart oliet referees constructive criticism 

allen garlan 
formal basis architectural connection 
acm trans 
soft 
eng 
meth july 

avron honsell mason pollack 
typed lambda calculus implement formal systems machine 
journal automated reasoning december 

barendregt 
lambda calculi types 
abramsky gabbay maibaum editors background computational structures volume handbook logic computer science 
oxford clarendon press 

basin constable 
metalogical frameworks 
huet plotkin editors logical environments pages 
cambridge university press 

bergstra tucker 
characterization computable data types means finite equational specification method 
de bakker van leeuwen editors automata languages programming seventh colloquium pages 
springer verlag 
lncs volume 

blanqui jouannaud okada 
calculus algebraic constructions 
proc 
rta rewriting techniques applications lecture notes computer science 
springer verlag 


jouannaud meseguer 
specification proof membership equational logic 
appear theoretical computer science maude csl sri com 

meseguer montanari 
internal strategies rewriting implementation tile systems 
proc 
nd intl 
workshop rewriting logic applications entcs north holland 

meseguer montanari 
process term tile logic 
technical report sri csl sri international july 

burstall goguen 
semantics clear specification language 
bjorner editor proceedings copenhagen winter school software specification pages 
springer lncs 

cerioli meseguer 
may borrow logic 
transporting logical structure maps 
theoretical computer science 

clavel 
reflection general logics rewriting logic applications maude language 
ph thesis university 

clavel dur eker lincoln mart oliet meseguer quesada 
maude specification programming rewriting logic 
sri international january maude csl sri com 

clavel dur eker meseguer 
building equational proving tools reflection rewriting logic 
proc 
cafeobj symposium japan 
cafeobj project april 
maude csl sri com 

clavel eker lincoln meseguer 
principles maude 
meseguer editor proc 
intl 
workshop rewriting logic applications volume electronic notes theoretical computer science 
elsevier 
www elsevier nl cas tree store tcs free pc volume htm 

clavel meseguer 
axiomatizing reflective logics languages 
kiczales editor proceedings reflection san francisco california april pages 
jerry cs uiuc edu reflection 

clavel meseguer 
reflection strategies rewriting logic 
meseguer editor proc 
intl 
workshop rewriting logic applications volume electronic notes theoretical computer science 
elsevier 
www elsevier nl cas tree store tcs free pc volume htm 

cofi task group semantics 
casl cofi algebraic specification language version semantics 
www brics dk projects cofi july 

constable 
implementing mathematics nuprl proof development system 
prentice hall 

coquand huet 
calculus constructions 
information computation 

denker millen 
intermediate language 
heintze clarke editors proc 
workshop formal methods security protocols july trento italy 
www cs bell labs com nch program 
html 

dur 
reflective module algebra applications maude language 
ph thesis university malaga 

dur meseguer 
extensible module algebra maude 
proc 
nd intl 
workshop rewriting logic applications entcs north holland 

feferman 
finitary inductively logics 
ferro editors logic colloquium pages 
north holland 

felty miller 
encoding dependent type calculus logic programming language 
stickel editor proc 
th 
int 
conf 
automated deduction kaiserslautern germany july volume lncs pages 
springer verlag 

futatsugi diaconescu 
cafeobj report 
amast series computing vol 
world scientific 

gardner 
representing logics type theory 
phd thesis technical report cst department computer science university edinburgh 

geuvers 
logics type systems 
phd thesis university nijmegen 


girard 
linear logic 
theoretical computer science 

goguen burstall 
institutions model theory specification programming 
journal acm 

goguen meseguer 
order sorted algebra equational deduction multiple inheritance overloading exceptions partial operations 
theoretical computer science 

goguen winkler meseguer futatsugi 
jouannaud 
introducing obj 
technical report sri csl sri international computer science laboratory 
appear goguen malcolm editors applications algebraic specification obj academic press 

goguen stevens 
obj meta logical framework equational logic 
philosophical transactions royal society series 

gordon 
hol theorem proving environment 
cambridge university press 

harper honsell plotkin 
framework defining logics 
journal association computing machinery 

hoare 
communicating sequential processes 
prentice hall 

howe 
semantical foundations embedding hol nuprl 
wirsing nivat editors algebraic methodology software technology volume lecture notes computer science pages berlin 
springerverlag 

huet paulin mohring coq proof manual version coq project 
technical report inria 
pauillac inria fr coq 

jouannaud 
membership equational logic calculus inductive constructions rewrite logic 
nd workshop rewrite logic applications 

luo 
computation reasoning type theory computer science 
international series monographs computer science 
oxford university press 

luo pollack 
lego proof development system user manual 
lfcs technical report ecs lfcs university edinburgh 


implementation alf proof editor martin lof monomorphic type theory explicit substitutions 
phd thesis university goteborg dept computer science 

mart oliet meseguer 
rewriting logic logical semantic framework 
technical report sri csl sri international computer science laboratory august 
appear gabbay ed handbook philosophical logic kluwer academic publishers 

mart oliet meseguer 
general logics logical frameworks 
gabbay editor logical system pages 
oxford university press 

mart oliet meseguer 
rewriting logic logical semantic framework 
meseguer editor proc 
intl 
workshop rewriting logic applications volume electronic notes theoretical computer science 
elsevier 
www elsevier nl cas tree store tcs free pc volume htm 

matthews smaill basin 
experience fs framework theory 
huet plotkin editors logical environments pages 
cambridge university press 

meseguer 
general logics 

editor logic colloquium pages 
north holland 

meseguer 
conditional rewriting logic unified model concurrency 
theoretical computer science 

meseguer 
formal interoperability 
proceedings conference mathematics artificial intelligence fort florida january 
rutgers edu proceedings html 

meseguer 
membership algebra semantic framework equational specification 
parisi presicce ed proc 
wadt springer lncs 

meseguer 
research directions rewriting logic 
berger schwichtenberg editors computational logic nato advanced study institute marktoberdorf germany july august 
springer verlag 

meseguer mart oliet 
data types logical frameworks 
astesiano reggio tarlecki editors trends data type specification santa margherita italy may june pages 
springer lncs 

mosses 
action semantics 
cambridge university press 

nadathur miller 
overview prolog 
bowen kowalski editors fifth int 
joint conf 
symp 
logic programming pages 
mit press 

paulin mohring 
inductive definitions system coq rules properties 
bezem groote editors typed lambda calculi applications international conference typed lambda calculi applications tlca volume lecture notes computer science 
springer 

paulson 
isabelle volume lecture notes computer science 
springer verlag 

pfenning 
elf language logic definition verified metaprogramming 
proc 
fourth annual ieee symp 
logic computer science pages asilomar california june 

pollack 
closure alpha conversion 
barendregt nipkow editors types proofs programs international workshop types nijmegen may selected papers volume lecture notes computer science pages 
springer verlag 


theory formal systems volume annals mathematics studies 
princeton university press 


stehr 
cinni new calculus explicit substitutions application pure type systems 
manuscript sri international csl menlo park ca usa 


stehr meseguer 
pure type systems rewriting logic meta logical meta operational views 
submitted publication 


rewriting effective model concurrency 
editors parle proc 
sixth int 
conf 
parallel architectures languages europe athens greece july volume lncs pages 
springer verlag 
