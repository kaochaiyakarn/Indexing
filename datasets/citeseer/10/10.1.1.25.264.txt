application machine learning tool validation air traffic control domain theory west school computing mathematics university hd dh uk 
emails west hud ac uk hud ac uk describe project impress utilised machine learning tool validation air traffic control domain theory 
project novel techniques devised automated revision general clause form theories training examples 
technique involves focusing parts theory involve ordinal sorts applying geometrical revision operators repair faulty component parts 
method illustrated experimental results obtained project 

validation requirements theories large complex systems particularly involving elements poses problem difficult solve 
particularly case theory updated lifetime require revalidation 
safety critical software projects frequently necessitate precise mathematical models requirements domains constructed 
validation maintenance realistic domain theories time consuming expensive process role support tools vital 
useful techniques validation test animated form requirements involves creating tool translate requirements theory prototype executable set test scripts 
animated version appropriate test scripts available easy pinpoint subsequently correct causes bugs subsequently provide correct refinement eliminates 
view precise requirements theory imperfect theory requirements domain needs undergo refinement remove bugs reflect changes domain formulate problem theory refinement tr branch machine learning ml 
field referred theory patching theory revision early example mis system described 
tr concerned classified set tests revise existing theory 
testset usually acquired domain experts provide input animation theory form tests training examples required behaviours 
tr systems typically consist animation testing component apply theory training examples component identify potentially faulty parts theory results applying theory examples component uses tr operators generalise specialise parts theory order accurately classify examples 
theory refinement techniques extensively applications problems scaling underlying ai algorithms 
presents case study development application tr tool validation maintenance formal specification real application 
validation problem involved uncovering repairing bugs requirements theory called conflict prediction specification cps 
represents air traffic control separation standards operating methods airspace information atlantic oceanic area customised form logic called msl 
cps initially engineered set conventional validation tools built including animated msl translation prolog syntax 
project developed tr tool integrated conventional validation environment 
tool embodies novel theory refinement algorithms dealing size expressiveness prob lems typically encountered automating refinement large theory 
process developing tr tool tool bugs uncovered removed cps significantly reduce error rate tests cps animated form 
notably tool useful automated maintenance induce new parts theory batches training examples embodied changes practice 

cps tools environment reported carried project called impress 
aim project develop machine learning tools evaluate application validation requirements domain theories written customised sorted order logic msl 
drive research air traffic control application domain theory captured previous project called 
theory called cps represents aircraft separation criteria conflict prediction procedures relating airspace north east atlantic written msl 
cps tools environment aids automation validation maintenance process 
impress supported uk national air traffic services nats additional objective identify document errors refinements carried cps certain milestones project updates cps delivered nats 
air traffic airspace eastern north atlantic controlled air traffic control centres shannon ireland scotland 
responsibility air traffic control officers ensure air traffic airspace separated accordance minima laid international civil aviation organisation 
central air traffic control task processes conflict prediction detection potential separation violations aircraft flight profiles conflict resolution planning new conflict free flight profiles 
flight profile detailed planned specification aircraft flight consists sequence roughly straight line segments 
segment defined pair dimensional points mach number speed aircraft attain occupying segment 
different profiles adhere separation standards vertically laterally separated 
controllers tool assistance available tasks form flight data processing system maintains detailed information controlled airspace cps created contribute requirements specification decision support system air traffic controllers 
previous project established formal requirements specification control aircraft flying eastern half north atlantic 
requirements written msl held tools environment formal requirements engineering environment free supporting validation key ways full grammatical checking inspection domain experts formal reasoning properties automatic generation prototype test harness batch testing graphical interface animation 
tests take form flight plans conflict violation separated required standard 
aim formalise complete requirements separation standards respect specific task predicting explaining separation violations conflicts aircraft flight profiles way requirements rigorously validated maintained 

utilisation theory refinement validation cps explained previous section impress project utilised tools environment initial specification cps inherited 
cps consisted axioms msl functions free tool included processes parsing theoretical form tf formal specification identifying syntactic errors prototyping execution form ef specification automatically generated logic programming language prolog batches expert derived test cases compare expected actual results 
raw test data translated msl free environment prolog 
viewing specification non technical form validation form vf specification generated air traffic control experts visual inspection reasoning internal consistency reduced minimal set specification axioms shown consistent animation air traffic control experts tested model custom built interface integrated execution form prototype 
unfortunately experience diverse forms validation essential insufficient far uncovering bugs fixing bugs concerned example tests may succeed wrong reasons tests fail expert decision variance prototype decision difficult identify faulty incomplete requirements 
examining relevant ml techniques produced critical review related research prototype tools conducted small feasibility study involving theory revision tool forte 
study concluded theory revision refinement methods forte useful validation size expressive nature various problems 
order forte cope function symbols theory requires flattening transformation equivalent theory function symbols 
flattening replaces functors predicates case meant functors representing types replaced predicates 
discovered resulting theory lengthened typing predicates 
forte run subset cps set instances 
revision flattened theory resulted improvement accuracy removal typing predicates 
reason reasons ease tool integration decided construct ml tools house 
heart theory refinement learning algorithm initial theory interpreted structured description concept 
theory expressed form logic programme prolog 
may split refinable theory fixed background theory additionally parts may temporarily shielded revision 
example contain easily validated basic definitions facts deemed true domain experts 
algorithm inputs evidence form set training examples example labelled positive negative instance algorithm generates refinement classifies example set correctly 
test classification blame assignment test batches supplied nats batch test data represents historic data cleared aircraft profiles describing flight plans atlantic calendar day 
raw historical test data translated msl prolog input test harness series data sets set representing characteristics mutually cleared flight profiles passing oceanic airspace 
assumes order input profiles reflects order cleared air traffic control officers 
test harness executes definition main relation called conflict relation repeatedly systematically checking pairs profiles profiles oceanic conflict classification theory positive negative positive true false positive negative expert tp fn classification negative false true positive negative fp tn table 
terminology classification tests 
profile compared number chronologically previous profiles cleared 
profiles clear day worth data slightly runs main relation generated 
relation succeeds executed prolog interpreter segments conflict case deemed conflict test result positive 
relation fails separated required standard cps test result negative 
mismatches expected result result returned drive refinement processes particular theory refinement 
testing process biased fact obtain virtually limitless negative examples main conflict relation records actual flight profiles atlantic 
hand obtain handful positive examples specially constructed air traffic experts 
classification test results table positive negative test results compared positive negative classification nats experts 
owing bias described misclassified tests conflict relation cps turned false positive concern chiefly design algorithm identify erroneous clauses allow call conflict predicate succeed proof negative example 
central development ml tools meta interpreter techniques re execute training examples classified fp fn tn tp 
meta interpreter build proof trees failure traces order pinpoint suspect clauses assigning blame involved erroneous proofs clauses failed trace produced proof 
consists set prolog clauses roughly clause represents cps axiom 
order store information clauses convenient efficient manner provided automatically generated identity number information revisable status revisable revised 
information stored prolog structure 
tree generator derived standard meta interpreter extended overcome problem negated literals 
tree generator takes input expression expr outputs proof tree ptree tree clause ids involved proof expr 
problem translation process msl prolog resulted negated expressions exp bodies clauses 
case case cps exp fully instantiated free variables exp existentially quantified 
avoids problems floundering result existence expressions xe 
form negation termed constructive full discussion topic see 
meta interpreter written generate proof trees explicitly represent negative rules general logic programs 
explicit representation negative clauses achieved unfolding negative literals transforming de morgan laws 
extension clark notion completion general logic program 
suppose predicate defined statements form gamma conjunction literals 
completed definition disjunction 
variables original clause 
input expressions tree generator expanded conjunction xp 

adopted convention clause id proof tree denoted id gamman proof tree example provided 
order determine candidate clause revision blame assignment process inputs theory false positive examples fp outputs list rp clauses revision points descending order 
rp clause identification number associated potential potential clause number proof trees occurs 
multiple occurrences clause single proof ignored 
clause number potential occurs proof trees 
ordinal composite revision operators assume blame process described section defines list clauses ordered potential 
necessary find execute promising refinement clauses output updated theory 
general naive approach common point basic long sep segments aircraft conflict aircraft conflict lateral longitudinal conflict minimum vertical sep feet vertical conflict basic min long minutes minutes 
example proof tree includes negative literals designing algorithm implement step syntactic refinement operators described 
standard tr operators limited scope case forte problems functors superficial effect 
simply deleting literals clauses example lead improved theory theory undergone validation mechanism 
improvement accuracy sense reduction incorrectly classified examples expense accuracy sense previous validations 
design effective tr algorithm technical specification cps analyse sources error particular errors left syntax checking batch testing hand validation 
light analysis design effective tr operators type theory 
sort msl specification characterised totally ordered depending set binary transitive ordering relations defined sort 
initial validation cps errors related operators occurring sorts complex ordering relations 
call sorts unordered nominal ordered ordinal 
examples nominal sorts cps aircraft airspace segment profile 
examples ordinal sorts flight level time latitude primitive order relations example west 
dichotomy clause domain product sorts theta theta theta theta theta dm ordinal sort nominal sort 
example clause providing conditions aircraft minimum separation feet flight levels segments 
domain sorts flight level theta segment theta flight level theta segment fl fl fl fl 
example clause paraphrased minimum vertical separation value feet required flight levels segments ft segments subject oceanic separation criteria subsonic flight level ft supersonic flight level ft fl flight level constructor cps 
current version cps grammar defined primitive order relations cps explicit occurrences 
number complexity ordinal operators likelihood errors involving decided focus tr algorithm revision clauses containing defining 
nominal components left fixed 
clauses involving limiting values form constant 
see example 
encoded correctly initially expert sources may need changed cope changing requirements 
assume factor components clause tuples satisfying conditions clause defined dimensional region corresponds domain applicability clause 
inductive reasoning follows suppose region applicability ordinal variable clause interval values associated fp training examples maximum minimum values overlapping part interval removed done ordinal variables order accomplish specialise clause follows ordinal occurrences body logical expression replaced revised body note presence true positive instances minimum maximum ordinal variable may restricted revision result false positive examples 
generalisation explained similar manner order fn instances succeed components added region 
calculate region analogous manner 
generalisation currently independent specialisation 
new requirements vertical separation aircraft provided opportunity testing revision operators described previously 
new criteria involved new conditions flight level intervals aircraft minimum separations feet feet 
see example old criteria feet 
new criteria collectively called reduced vertical separation minima 
version cps current version time reflect date 
obtain classified tests ran batch approximately separated profile pairs taken post aircraft profile data 
runs simulations positive clearance decisions taken air traffic control officers flight profiles april th 
output set fp consisting false positives 
input ordinal refinement algorithm included fp set tp true positives pairs profiles judged conflict judged conflict 
new clause partial trace clauses involving limits revising rule old accuracy fl variable marker fl fl fl fl fl variable marker fl fl fl fl 
rest deleted unaltered accuracy latest revision example revision example constructed altered intervals flight levels effect inducing ft separation rule longer valid aircraft flying ft ft interval flying subsonic speed 
region supersonic speeds unaltered 
fact corresponds exactly flight level range criteria operation 
attempt revise rules spurious reflecting limited data range change 
experiment alternative concept experiment originally reported shows application ordinal tr algorithm alternative concept main conflict predicate 
profiles th january obtained fps runs conflict predicate 
experiment focused revision space longitudinal separation criterion concept selected studying output blame assignment fps generalised explanation output individual fps 
see example proof tree 
longitudinal separation values minutes cps contains formalised criteria 
new training instances generated proof trees proof traces longitudinal separation value minutes assigned aircraft flying subsonic speed 
training instances included fn tp concept basic min longitudinal sep val mins required segment segment 
set tp generated re running day worth instances identifying pairs profiles vertical conflict gave longitudinal separation minutes conflict air traffic experts lowering possibility noisy data 
fns concept derived directly false positives conflict predicate 
tr algorithm ordinal operator replacement returned new theory clauses altered 
training instances true positive false negative remained 
significantly clauses clause revised defining predicate common pt profile tracks diverging aircraft reported identified incorrect reading atc manual time conflict probe wrongly represented 
revision change ordinal operators subsequently help create version cps important point result clause id recorded set rp negatively 
see 
blame assignment sensitive clauses occurring negative part tree uncovered faulty clause 

results approximately distinct tests processed overwhelming majority execution conflict relation negative examples 
results tests maintain cps course project resulting current version cps 
course project rate fps testing decreased factor tests 
question arose project problem noisy data similarly know blame lies cps error recorded execution answer lies validation environment integrated set diverse tools 
example tr tool proposes new axiom tools validate 
development machine learning tool bugs spotted relate cps 
bug caused fault animation process faulty cps axiom identified investigation generalised proof trees produced part tr tool 
inspection proof tree misclassified instance suspect longitudinal separation clauses revealed selector function val segment returning float value animated prolog interpreter 
consequence comparison form 
occurring clause corresponding axiom executed 
second bug concerned batch tests 
set fp results input graphical flight simulation program multi media platform 
display profiles conflict area simulate planned aircraft flights 
particular tool helped spot batch noisy data 
inspection apparent false positive training examples display clearly showed flight profiles fact conflict tests clearly true positives 
normally nats supplied batches data resulting day worth separation decisions oceanic airspace 
case supplied error set flight test data output simulator program correctly embody separation standards 
systems produced implemented compiled versions prolog run unix pc platforms 
funded directly nats impress funded epsrc subse quently impress judged significant contribution knowledge epsrc peer evaluation process 

comparison related far aware apply machine learning tools requirements domain theory related occurs field knowledge refinement 
areas adopt strategies overcome complexity pitfalls surrounding tr theoretical results suggest polynomial algorithm exists perform global optimisation hill climbing algorithms 
refinement techniques kind incremental fashion main effort directed automated analysis batch proof trees successful predicates case unsuccessful predicates analysis failure traces 
example test cases time refine kbs contrast focusing procedure uses multiple examples form statistical blame assignment 
interactive environment knowledge acquisition large security rule base 
tool utilises learning algorithms concert inference engine graphical user interface 
experience consistent ml tools context diverse tools environment 
wrobel classification review ordinal tr algorithm exhibits order multiple clause multiple predicate learning includes negation failure literals 
contrast theories posed sets horn clauses 
utilise blame algorithm takes account negative trees accurate negation automatically shielded 
similar manner developed system revise firstorder function free theories containing errors scope negation 
finds set single literal assumptions prove incorrectly classified example 
succeeding failing goals proof example candidates 
assumptions graded number examples cover depth assumption 
identification grading candidate assumptions compared blame assignment 
attempts repair clause uses assumption positively negatively 
contrast cps utilises functions fundamental way indicated section intractability problems searches faulty clauses focus ordinal clauses 
cps contains significant numerical components machine learning domains containing significant numerical components previously accomplished neural networks 
problems encoding numeric properties logic programming context 
solution utilisation background knowledge 
authors explain progol exploits fact background knowledge restrictions placed ilp framework 
progol utilises background predicates implement statistical numerical analysis procedures order induce order theories scientific problems 
background knowledge available progol includes example simple arithmetic inequalities regression models numerical differentiation 
non trivial case studies experimental results input constraints variables explain input data obtained 
similarities background knowledge encoding equations 
main difference number variables underlying model 
experiments prolog utilise input ordinal variables cps domain utilises ordinal variables aircraft 
detailed section comprise flight levels speeds positions separation criteria includes non ordinal variables type aircraft aircraft meets certain nautical standards 
solution problem numeric literals logic programming context constraint logic programming 
constraint logic programming frame subsumes logic programming frame 
shown discriminant induction problem transformed constraint satisfaction problem solvable constraint logic programming 
approach pursued algorithm num generates numeric literals 
usage declarations meta predicates restrict form numeric literals 
example particular numeric literal restricted inequality linear relationship 
early stages clear scale deal real world examples cps 
project succeeded applying ml techniques particular theory refinement area validation formal requirements models 
design implementation testing integrated tools making automated validation environment accomplished techniques incorporating novel forms blame assignment theory revision 
tr tool succeeded revising theory take account new rule eliminate error longitudinal separation criteria 
main research contributions project shown feasibility advantages integrating machine learning techniques validation environment formally specified requirements theory demonstrates formal set requirements captured largely automated integrated diverse set validation procedures essential ensure maintain accuracy theory 
reported opens possibilities research 
include development specialised tr operators requirements theories 
tr operators reported affect structure theory open question extended 
immediate concentrate development validation environment creation generic tool requirements theories stated customised form msl 
anthony frisch 
generating numerical literals refinement 
lavrac dzeroski editors inductive logic programming proceedings th international workshop ilp volume lnai pages 
springer verlag 
apt bol 
logic programming negation survey 
journal logic programming 
sleeman 
improving efficiency knowledge base refinement 
saitta editor proceedings thirteenth international conference machine learning icml bari italy july pages july 
clark 
negation failure 
logic data bases pages 
plenum press 
greiner 
complexity theory revision 
proceedings th international joint conference artificial intelligence 
morgan kaufmann 
lloyd 
foundations logic programming 
springer verlag berlin second extended edition edition 

maps multimedia aircraft profile simulation 
master thesis school computing mathematics university uk 

conflict prediction specification version 
technical report impress school computing mathematics university uk 
west 
case study theory revision requirements validation 
machine learning proceedings th international conference shavlik ed morgan kaufmann publishers pages 
taylor jones 
requirements capture method air traffic control application 
software practice experience 
mukherjee 
computer aided validation formal specifications 
software engineering journal july 
opitz shavlik 
connectionist theory refinement genetically searching space network topologies 
journal artificial intelligence research 
palmer craw 
role test cases automated knowledge refinement 
es sixteenth annual technical conference british computer society specialist group expert systems pages cambridge england 
richards mooney 
automated refinement order horn clause domain theories 
machine learning may 
rouveirol 
flattening saturation representation changes generalisation 
machine learning 
sebag rouveirol 
constraint inductive logic programming 
de raedt editor proceedings th international workshop inductive logic programming pages 
ios press 
shapiro 
algorithmic program debugging 
mit press cambridge ma 
sommer morik andre 
online machine learning knowledge acquisition case study 
knowledge acquisition 
srinivasan camacho 
numerical reasoning ilp system capable lazy evaluation customised search 
journal logic programming 
west 
software development approaches animation specifications prolog 
software engineering journal july 

handling negation order theory revision 
bergadano de raedt matwin muggleton editors proceedings ijcai workshop inductive logic programming pages 
morgan kauffman 
wrobel 
order theory revision 
de raedt editor proceedings th international workshop inductive logic programming pages 
ios press 
