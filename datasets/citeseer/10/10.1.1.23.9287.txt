proceedings international conference parallel distributed processing techniques applications pdpta las vegas nv usa june dynamic dependencies application service management alexander keller gautam kar ibm research division watson research center box yorktown heights ny usa mail ibm com addresses role dependency analysis distributed management 
introduces concept dependency lifetime traces flow dependency information design installation runtime stages service 
categories models functional structural represent information flows design runtime stages 
describes dependency information stages retrieved evaluated management applications presents architecture integrate existing network management platforms 
keywords dependency analysis application service management root cause analysis impact analysis problem determination identification dependencies increasingly important today networked environments applications services rely variety supporting services outsourced service provider 
failures occurring lower service layers affect quality service services offered customers 
service dependencies explicit today systems making task problem determination particularly difficult 
solving problem requires determination computation dependencies services applications 
deal questions important characteristics dependencies 
words managed entity service resource depends managed entity termed dependent antecedent properties dependency need recorded 
classify dependencies efficiently root cause impact analysis fault management 
notion dependencies applied various levels granularity example threads running application may dependent operational output stored procedure database management system may dependent lock administrator consider situations big difference application management focusing application behavior observable outside application debugging focusing internal behavior application 
consider dependencies type exist different managed objects components visible outside application 
structured follows section analyses requirements application dependency models focusing typical service provider scenarios 
gives overview related area identifies deficiencies existing standards specifications 
section classifies dependencies criteria identified research 
methodology determining computing dependencies resulting architecture sections 
section concludes presents issues research 
requirements analysis scenario deals managing outsourced services typically offered internet application service providers asp isp 
depicted outsourcing services implies layered service provider hierarchies 
layer service accessed service access point sap 
sap delimits boundary different organizational domains place service level agreements slas defined observed 
usually done layer monitoring set specific parameters exposed provider 
dependencies different services explicit domain boundaries terms slas regarded inter domain dependencies 
second scenario deals regular maintenance tasks done fly role user service provider ip provider network provider service system appl 
services mail dns www ip service atm service example ibm watson research watson services ibm global services global network customer provider customer provider customer provider dependencies outsourced services dependency chain affect services customers email servers get updated new release operating system network devices exchanged upgraded new firmware version cases crucial network server administrators determine advance specifically services users affected maintenance 
known availability management 
scenario allows identify type dependencies dependencies occur different systems inter system 
scenarios allow derive requirements characteristics dependency information 
dependencies different services layered furthermore dependency graph directed acyclic statement reflects authors experience ip networked services dns nfs dfs nis cases mutual dependencies occur systems pathological example mutual dependency dns server mounts filesystem dns configuration stored nfs remote system 
authors belief configuration technically possible reflects flaws system design leads unstable system bootstrapping non deterministic avoided 
dependency checking application discovers cyclic dependencies issue warning administrator 

dependency visible customer provider domain boundary explicit means slas follows number observable dependencies finite 

dependency models allow top traversal dependency chains 

dependencies different systems perceived dependencies client server parts service 
possible client service issues requests server provides different service 
suitable dependency models addition top navigation allow bottom traversal dependency chains 

number dependencies involved systems computed may large 
engineering viewpoint undesirable impossible store complete instantiated dependency model single place 
traditional mechanisms network management platforms keeping instantiated network map platform database applied dependencies due number dynamics involved dependencies 
facts prohibitive follow network management approach deployment application service middleware dependency models 
propose distribute storage computation dependencies systems involved management process 
engineering response item section presents approach tackle problem 
built definition different kinds dependency models functional model defines generic service database service name service web application service dependencies establishes principal constraints second model bound 
structural model containing detailed descriptions software components realize services db udb bind websphere advanced edition 
provides details installed software extends amount information provided functional model 
related distributed software administration specification addresses mechanisms software distribution deployment installation defining commands software definition file format attributes 
identifies kinds relationships prerequisite 
noted deal instantiated applications services represent means determining dependencies components runtime 
common information model cim dependencies perceived specific kind association modeled classes allowing inheritance 
dependencies specified different cim schemas core schema defines dependency types terms classes deal dependencies saps services products provide generic means associating context 
thetype dependency attribute describes service antecedent completed started started order service function 
related notion prerequisites 
system schema refines root dependency order deal job destinations host systems file systems 
application schema defines dependency types describe association service sap implementations respectively 
distributed application performance schema relates definition metrics logical element instantiated unit 
schemas common dependencies derived single base class cim dependency defined core schema inheritance hierarchy flat 
fair say specification addresses dependency problem general specifications allows determination dependencies runtime cim dependencies specified installation phase software product 
models provide support soon application gets instantiated moves installed state running state 
main reason absence satisfactory application management solutions comprehensive application management demands large amount management information posing additional development effort application developers 
example application management specification ams provides open standard defining management information needed distributed applications 
ams identifies set management information common different kinds applications means specifying application description files application developer needs provide appropriate instrumentation 
classification dependencies dependencies come different flavors varied characteristics dealing systematic way facilitated classifying groups similar properties 
approach consists defining coordinate system key characteristics dependency 
space locality domain far antecedent dependent sharing memory space sharing node sharing subnet located domain 
referred inter domain vs intra domain intra system vs inter system dependency 
component type antecedent component piece hardware system software package service logical entity file system queue session 
distinction important different types components tend behave differently fail differently 
argue component type activity see relate immediately computation dependencies deal component 
experience shown information recorded order facilitate problem determination troubleshooting 
important take type activity component account software hardware fail different ways require different approaches correct problem 
information valuable configuration management 
component activity antecedent active piece hardware software directly explicitly queried passive file queried instrumented 
active components offer management instrumentation distinction important performance fault management active component instrumented queried directly 
hand passive component instrumented intermediary acting behalf 
dependency strength strongly dependent component depends antecedent resource 
may useful consider dependencies mandatory turns strength metric deal intermittent temporary dependencies 
dependency formalization degree formalization dependency degree determined automatically 
example dependency may directly available system information repositories odm aix rpm linux machine readable format high degree formalization dependency may exist notebook system administrator low degree formalization 
dimension important serves metric helps evaluate expensive difficult acquire identify represent track dependency lifetime component 
example formal dependencies known configuration files applications networked services client part domain name system resolver configured file conf file contains domain name client system information regarding dns servers domains queried order 
possible compute runtime dependencies name service 
detailed configuration parameters www server httpd conf access conf srm conf files allow forecast runtime behavior web server 
dependency criticality dependency satisfied terms availability resource service component depends 
dependency criticality take values prerequisite 
important note dependency moves time axis meaning semantics values change prerequisites components services needed component installation time components resources installed component installed runtime services run complete encountering error component service start 
typical example need obtain valid software license license server word processor started 
components services needed parallel component installation time service installed configured conjunction service 
runtime service running component service runs 
components services installation time order component installed services mentioned installed runtime order service run listed run 
apart characteristics important consider additional aspects determine behavior dependencies fit multidimensional representation time dependencies may usually change point component lifetime 
may disappear need disk space install component gone installation complete 
may change example need temporary disk space may gone eventually decrease installation running phase application 
dependencies may come inter domain intra domain inter system intra system intra package optional mandatory hardware dependency logical entity strength software component type space locality domain low passive active dependency criticality prerequisite high component activity dependency formalization multidimensional space dependencies need remote components matters application runs prevent installation succeeding 
example ibm websphere may depend availability certain amount disk space installation time dependency may disappear application lifecycle moves installation 
example dependency dns appears installation complete possibly past configuration stage 
dependency lifecycle useful distinguish functional structural dependencies 
usually dependency moves time axis instantiated accumulating details evolving functional structural 
functional dependency association entities typically captured design time says component requires services 
structural dependency contains detailed description typically captured deployment installation time 
differentiate dependencies crossing local host boundary relate components host 
classification dependencies deals respective layers components related dependency question 
dependent component may layer usually inter system forexample database client application depends database server 
antecedent component located lower layer speak intra system dependencies web browser depends tcp service 
important know dependency obtained reasons evaluate cost obtaining vs benefit offers evaluate accuracy information obtained 
dependency information provided component computed 
best source information component developer knows services product requires offer 
examples dependencies obtained application explicitly lists dependencies information acquired environment system repository configuration installation files 
dependencies provided application developer delivered part documentation included component package file machine readable format suitable immediate acquisition management applications 
tivoli ams example system 
cost obtaining dependencies relatively low accuracy high 
today unusual case majority applications management enabled 
approach second alternative sources dependency information system wide repositories software package dependencies maintained operating system 
information complemented evaluating content configuration files observing signals raised operating system 
additional advantage dependencies particular software environment determined 
dependency analysis analysis previous section pointed major requirement automated management distributed application services record dependencies lower layer services resources 
considering fact majority application services run unix windows nt systems worth analyzing degree information regarding applications services contained operating systems 
underlying idea follows possible obtain reasonable amount information sources need application specific instrumentation greatly reduced 
approach recognizes fact system administrators successfully deploy applications services having access detailed applicationspecific management instrumentation 
windowsnt systems unix implementations ibm aix linux built repositories keep track installed software packages versions 
aix object data manager odm windows registry linux red hat package manager rpm examples system wide configuration repositories 
concentrate odm 
verified applicability approach repositories 
usually repositories serve basis software installation tools windows systems aix systems management interface tool smit 
regarded knowledge bases contain important information respect compatibility services applications 
fact specific software package system package installed successfully implies service implemented package depends service implemented 
words specific software package software packages listed installation prerequisites infer dependency relationship valid instantiated counterparts services applications 
simple example serve illustrate system repository indicates specific web server distinct tcp ip implementation prerequisite essentially means 
functional generic relationship model service categories www tcp ip established 
model describes services terms functionality provide services depend 
fact www service depends availability tcp ip service implies functional dependency relationship services www tcp ip defined means description prerequisites list enforced installation routine 

structural specific management information available 
appropriate algorithm automated problem determination malfunctioning www service check operational states specific web server underlying tcp ip stack 
possible dependency relationships majority networked services explicitly listed system repository 
discovering enumerating dependency relationships applications lower layer services networked environment difficult problem 
static dynamic aspect dependencies identified application install time discovered runtime 
functional dependency model describe static dependencies application service categories 
structural part cap tures dynamic information related concrete service implementations 
take look configuration information software packages represented odm 
entry successfully state installed tcp ip client component bos net tcp server part operation system networking software bos net aix indicates package version replaces renames previously installed package obj version 
lpp name bos net tcp server update name bos net state ver rel mod fix ptf prereq prereq bos rte prereq bos net tcp client description tcp ip server supersedes obj additional information applied fixes patches descriptions template 
particularly important part data structure entry prereq prerequisites mandates software packages system component successfully installed 
sections describe information purposes 
software package installed aix required list properties machine readable format assume dependencies cover comprehensive set software packages 
analysis shown system repositories odm represent rich source application service management information regarding configuration installed applications determining dependency relationships applications services 
note large amount information obtained specific instrumentation components 
requirement application components described service description template developed content provided large degree today system information repositories 
dependency architecture section briefly illustrate role dependencies management services typical term lpp template stands licensed program product denotes service component 
www dns firewall service management stations application service agents filtered events network management platform api discovery services event services topology services communication services application dependency analysis application service dependencies resource list resource broker status events analysis process query relevant register service agent components architecture application analysis data resource directory isp environment 
architecture depicted shelf network management platforms mid level managers provide basis architecture offer services event reception forwarding resource discovery functions topology services 
assume offline analysis approach section database static dependencies constructed 
collected data describes application service lower level application network layer services components 
application service agent focal point managing individual service offering 
implementation viewpoint application operating top network management platform 
instance service provider different service offerings dns web content hosting shared firewall design yields service management agents responsible offering 
agent receives event notifications platform api updates view service maintains 
view best represented multilevel resource tree elements level dependent availability status elements lower level 
way service view represent graphically service management stations service manager observe status service typical drill operations troubleshooting 
functional dependencies yield generic service model structural part provides detailed information involved components 
functional model stored management platform service management agent maintains structural view individual customer 
leads high degree distribution main reason scalability approach outage resource rapidly correlated complaints received customer 
initialization service agent obtains configuration file generated application dependency analysis phase establish functional model 
resource broker serves main access resource directory 
entities resource broker application service agent mid level manager 
part initialization procedure application service agent sends list resources contained service view 
resource broker searches resource directory associates list set responsible monitoring resources 
communicates relevant order register service agents 
registration lists direct events pertaining resources monitoring control 
main function resource directory maintain list resources monitored particular 
responds queries resource broker provides persistent storage records 
describe information flow takes place order produce status views application service offerings 
application service agent charge particular application service sends request resource broker order determine status resources service depends 
provides resource broker list containing resource identifiers resources service requires 
dependency list generated application dependency analysis phase 
resource broker queries directory resource list obtains list responsible monitoring set resources list 
obtaining list resource broker contacts sending application service agent id associated resource list set resources particular responsible 
point resource related event generated monitoring resource knows application service agent events forwarded 
efficiency reasons events filtered event services management platform 
depending agent ids attached events platform forwards responsible application service agent turn uses information event update status information service view 
advantages approach allows incremental low cost staged deployment 
isps start offering simple connectivity services evolve application service providers 
typically start deploying standard platform network operations management systems 
approach systems augmented incrementally dependency information management services allowing isps preserve leverage investments initially deployed operational systems 
outlook key requirement application service management highlighted identification computation representation dependency information 
dependencies come different flavors varied characteristics dealing systematic way facilitated classifying groups similar properties 
developed classification helps identify various aspects dependencies 
approach identifying computing dependencies pragmatic static dependency analysis yields information entities system peer entities service 
provided description components application service management architecture information flows 
identification dependencies prerequisite deployment troubleshooting services capture fault management knowledge contained fault documentation systems 
authors currently engaged research modeling implementing management services optimizing traversal dependency structures 
application management specification 
version tivoli systems november 
common information model cim version 
specification distributed management task force june 
howard marshall 
making distributed applications manageable instrumentation 
journal systems software 

object instrumentation distributed applications management 
proceedings ifip ieee international conference distributed platforms dresden germany 
ifip chapman hall 
verma 
supporting service level agreements ip networks 
macmillan technical publishing 
systems management distributed software administration 
cae specification open group january 
