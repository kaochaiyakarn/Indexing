data compression database performance goetz graefe leonard shapiro university colorado portland state university boulder portland appeared previously fewer performance results proc 
acm ieee cs symp 
applied computing kansas city mo april 
data compression widely data management save storage space network bandwidth 
report outline performance improvements achieved exploiting data compression query processing 
novel idea leave data compressed state long possible uncompress data absolutely necessary 
show query processing algorithms manipulate compressed data just decompressed data processing compressed data speed query processing factor larger compression factor 

data compression effective means saving storage space network bandwidth 
large number compression schemes devised character encoding detection repetitive strings compression schemes achieve data reduction rates bits character english text compression factors 
compression schemes successful network bandwidth advantageous effects data compression performance database systems obvious effects disk space bandwidth throughput 
believe benefits compression database systems observed exploited performance 
database performance strongly depends amount available memory buffers space query processing algorithms 
logical try available memory effectively possible words keep manipulate data memory compressed form 
requires course query processing algorithms operate compressed data 
report introduce techniques allow just demonstrate effect database performance 
section briefly indicate related 
section identify techniques allow database processing algorithms manipulate compressed data 
section contains preliminary performance analysis simple join query commonly relational database systems 
offer section 

related number researchers considered text compression schemes letter frequency pioneered huffman 
research considered schemes string matching comprehensive surveys compression methods schemes 
focussed fast implementation algorithms parallel algorithms vlsi implementations 
researchers inv effect compression database systems performance 
considered disk time space savings fixed length minimum bit compression 
points records fit page records shorter allowing effective clustering records 
toyama ura improved compression scheme relating order compressed uncompressed values 
eggers shoshani explored searching retrieving compressed data efficiently 
goyal considered text compression methods allow search selection compressed data 
cormack discusses compression entire records fields ims database management system 
researchers inv compression access schemes scientific databases constants zeroes considered special operation compressed data matrix transposition 
indices database systems prefix postfix truncation save space increase fan nodes starburst 
actual compression methods typically database management systems 
particular performance effects data compression frequently database operations relational join duplicate elimination set intersection considered date 

database processing compressed data section outline compression exploited database systems standard query processing algorithms adapted compressed data 
divided discussion sections performance buffering transaction processing query processing 
compression rates achieved dataset depend course attribute types value distributions 
example difficult compress binary floating point numbers relatively easy compress english text factor 
require data english text require compression achieved 
text attributes tend largest fields database files suspect expecting compression factor realistic database files 
optimal performance obtained judicious decisions attributes compress compression method employ 
obviously compression reduce amount disk space required data set 
number ramifications performance 
reduced data space fits smaller physical disk area seek distances seek times reduced 
second data fit disk page track cylinder allowing intelligent clustering related objects physically near locations 
third unused disk space disk shadowing increase reliability availability performance 
fourth compressed data transferred faster disk 
words data compression effective means increase disk bandwidth increasing physical transfer rates increasing information density transferred data relieve bottleneck high performance database management systems 
fifth distributed database systems client server situations compressed data transferred faster network uncompressed data 
uncompressed data require network time separate compression step 
retaining data compressed form buffer allows records remain buffer increasing buffer hit rate reducing number os 
points general 
apply entire storage hierarchy tape disk controller caches local remote main memories cpu caches 
storage space levels efficiently bandwidth saved moving data hierarchy moving data laterally memories caches achieving higher hit rate level 
reducing amount bus traffic shared memory systems allow higher degrees parallelism bus saturation 
transaction processing probably main effects compression 
buffer hit rate increase records fit buffer space 
second log devices decrease log records shorter 
systems employ log compression saving log records committed transactions archiving log devices inexpensive storage media tapes 
addition methods propose inexpensive technique reduce log traffic earlier process log record written disk 
database contains compressed values trivial include compressed values log 
words compressing database values reduces size log records traffic log devices 
compressing database values improves performance primary database log 
conceivable savings logging justify overhead compressing database values entered database 
query processing require fixed compression scheme attribute 
scheme fixed attribute allow comparisons database values compressed predicate constants 
fixed domain attribute allow comparing compressed values different sources 
rule dynamic compression schemes sight 
adjusting encoding frequently character done dynamic compression decompression transmission streams compression encoding adjusted database reorganization 
suitable statistics gathered unloading database new encoding starting database reloaded 
fact separating statistics gathering dynamic compression schemes unloading compression data reloading eliminates start adjustment period dynamic compression schemes effectively 
parameters compression scheme reloading part meta data catalogs 
form compression encode small sets large values 
basically idea introduced viewpoint compression database design normalization 
example storing long string valued color attribute record large parts table customary encode colors small integer sav encoding separate relation join large table relatively small encoding table queries require string valued output color attribute 
encoding tables typically small order kilobytes efficient hash algorithms join outperform naive methods nested loops join sort merge join 
long run hope encodings administered automatically indices today database management systems recommended automated physical database design tuning software appropriate 
query processing compression exploited far improved performance 
exact match comparisons performed compressed data 
consider query retrieve record social security number 
constant selection predicate compressed way social security number data file comparisons performed de compressing attribute values data file 
note exact match index lookups possible compressed data consistent compression scheme 
second projection duplicate elimination done decompressing data 
assume fixed encodings attributes entire records equal uncompressed records equal compressed images 
algorithms duplicate elimination aggregation grouping principally situation aggregation little complex grouping attribute remain compressed attribute arithmetic performed typically decompressed 
third join attributes attributes need decompressed joins 
joins equality joins keys foreign keys put normalized decomposed objects back 
keys foreign keys domain require compression schemes fixed domain join compressed key values give results join normal decompressed key values 
unusual perform merge join order compressed values possible produce correct results 
arguments join hold semi join outer join union intersection difference 
standard example aggregation sum salaries department 
department called grouping attribute 
far hav demonstrated reading writing compressed data disk faster necessary decompress data frequent database operations 
consider additional advantages processing compressed data focus joins 
materializing join output records faster records shorter copying required 
copying significant portion cpu bus activity database systems particularly important reduce copying shared memory single bus systems 
second join inputs larger memory records fit memory 
hybrid hash join instance fraction file retained hash table joined larger 
sorting merge join number records memory number records run larger leading fewer runs possibly fewer merge levels 
third interestingly skew problem 
goal compression represent information bits possible 
bit output compression scheme close maximal information content bit columns seen entire file skewed 
furthermore bit columns correlated 
compressed key values create hash value distribution guaranteed uniform optimal hashing memory partitioning overflow files multiple processors parallel join algorithms 
summarize section uses data compression database management systems ignored date 
compression improves performance hit rates buffering level storage hierarchy exploited database query processing change implemented algorithms 
outlined number performance effects data compression section quantify effects example query 

performance purpose performance comparison consider costs hybrid hash join pages memory relations require uncompressed pages pages half compressed 
simplicity ignore fragmentation assume uniform hash value distributions 
consider cost uncompressed data 
cost reading stored data os 
building hash table pages remain memory pages written build overflow files 
probing input records equivalent pages joined immediately resident hash table pages written overflow files 
pairs overflow files joined requiring os read 
entire cost os permanent files os temporary files total os 
consider joining compressed input relations 
reading initial compressed data requires os 
build phase pages remain memory pages written overflow file 
probe phase records equivalent pages joined immediately pages written disk 
joining overflow files requires os 
entire cost os permanent files os temporary files total os 
total costs differ factor 
costs permanent files differ factor expected compression ratio costs temporary files differ factor 
factor easily expected improved utilization memory records remain hash table build phase significantly reduces number records written overflow files 
compression reduces number size records written temporary files resulting reduction costs temporary files factor 
compression scheme little effective factor reduction overflow files avoided entirely compressed data leaving permanent data 
total costs differed factor os 
shows effect compression factor hybrid hash join performance relations numbers curve indicate exact cost compression factors marked bottom axis 
graph divided regions 
compression factors build input larger memory hash table overflow occurs reduction compression compression factor similar example 
compression factors overflow occurs compression reduces permanent files 
encouraging observe graph moderate compression factors reduce total cost significantly 
additional cost incurred decompressing output data performance gain compressed permanent temporary data disk memory far costs decompression 
total count compression factor 
effect compression hybrid hash join performance 
total count marked compression factor 
effect compression memory size hybrid hash join performance 
shows effect compression hybrid join performance variety memory sizes 
bottom curve memory size pages reflects situation overflow 
curve pages memory steep gradient compression factor 
point hash table fits memory curves pages coincide 
pages memory curve joins curves overflow compression factor 
smaller memory sizes hash table fit memory considered spectrum compression factors 
performance gain compression factor memory sizes 
pages memory curves close written overflow files 
memory limited system allocate operators may able run overflow memory maximal efficiency best compression scheme possible 
shows speedup previous 
bottom curve pages memory represents linear speedup 
curves indicate super linear speedup 
curve pages obvious knee compression factor visible previous 
pages memory knee located compression factor edge graph curve indicates speedup factor slightly 
considering speedup achieved compression factor imperative investigate effect compression database query processing algorithms performance 
shows performance larger input relations 
previous figures ev en small amount compression improves performance significantly 
er small memory sizes compared build input effect fitting compressed records uncompressed records memory strong medium size relations 
gain performance equal compression factor steepest decline total count marked compression factor speedup 
speedup hybrid hash join compression 
marked compression factor 
effect compression large hybrid hash join performance 
small compression factors 
larger memory sizes pages build input size small multiple memory see effect steep gradient small compression factors knee compression factor equals quotient build input size memory size 
effects observed single hybrid hash join observed complex queries sort merge join 
omit analysis refer comparisons sort merge join hybrid hash join 

summary hav outlined set fairly simple techniques achieve database performance improvements data compression 
key ideas compress attributes individually employ compression scheme attributes domain perform data manipulations decompressing data 
techniques reduce space requirements disk performance measured records time permanent temporary data reduce requirements memory reducing number buffer faults resulting data compression conjunction algorithms large spaces modest compression result significant performance gains 
furthermore techniques processing compressed data easy implement 
simple performance comparison seen data sets larger memory performance gains larger compression factor obtained larger fraction data retained workspace allocated query processing operator 
compression factor observed performance gains factor 
research partially supported oregon advanced computing institute nsf awards iri iri iri 
space time savings large data base compression dynamic restructuring proc 
ieee august 
bell witten cleary modelling text compression acm computing surveys december 
bitton gray disk shadowing proc 
int conf 
large data bases los angeles ca august 
boral dewitt database machines idea time passed 
critique database machines proc 
int workshop database machines munich 
reprinted hurson miller parallel architectures database systems ieee computer society press washington 
hashing methods relational algebra operations proc 
int conf 
large data bases singapore august 
cormack data compression database system comm 
acm december 
dewitt katz olken shapiro stonebraker wood implementation techniques main memory database systems proc 
acm sigmod conf boston ma june 
eggers shoshani efficient access compressed data proc 
int conf 
large data bases montreal canada october 
eggers olken shoshani compression technique large statistical data bases proc 
int conf 
large data bases cannes france september 
nearly optimal huffman technique microcomputer environment inf 
sys 

gallager variations theme huffman ieee trans 
inf 
theory 
gonzalez smith storer parallel algorithms data compression acm april 
goyal coding methods text string search compressed databases inf 
sys 

graefe tuning parallel database algorithm shared memory multiprocessor software practice experience july 
haas chang lohman lapis lindsay pirahesh carey shekita starburst mid flight dust clears ieee trans 
knowledge data eng 
march 
huffman method construction minimum redundancy codes proc 
ire 
knuth dynamic huffman coding algorithms 
hirschberg data compression acm computing surveys september 
li rotem wong new compression method fast searching large data bases proc 
int conf 
large data bases brighton england august 
lynch application data compression large bibliographic data base proc 
int conf 
large data bases cannes france september 
olken rotem rearranging data maximize efficiency compression computer system sciences 
rodeh pratt linear algorithm data compression string matching acm january 
ruth data compression business files datamation september 
schneider dewitt performance evaluation parallel join algorithms shared multiprocessor environment proc 
acm sigmod conf portland may june 
practitioner guide data base compression inf 
sys 

shapiro join processing database systems large main memories acm trans 
database sys 
september 
storer data compression methods theory comp 
sci 
press new york ny 
ura fixed length preserving code field level data file compression proc 
ieee int conf 
data eng los angeles ca april 
welch technique high performance data compression ieee computer june 
williams dynamic historic predictive compression inf 
sys 

wong li transposition algorithms large compressed data proc 
int conf 
large data bases kyoto japan august 
ziv lempel universal algorithm sequential data compression ieee trans 
inf 
theory may 
ziv lempel compression individual sequences variable rate coding ieee trans 
inf 
theory september 

