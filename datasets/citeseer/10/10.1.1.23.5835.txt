evolution matrix recovering software evolution software visualization techniques major problems software evolution coping complexity stems huge amount data considered 
current approaches deal problem aim reduction complexity filtering relevant information 
propose approach combination software visualization software metrics successfully applied field software reverse engineering 
approach discuss simple effective way visualize evolution software systems helps recover evolution object oriented software systems 
keywords software visualization software metrics reverse engineering 
major problems software evolution coping complexity stems huge amount data considered 
technique reduce complexity software visualization visual display allows human brain study multiple aspects complex problems parallel phrased picture conveys words 
useful approach dealing large amounts complex data software metrics 
metrics help assess complexity software discover artifacts unusual measurement values context large classes subsystems 
combination approaches obtain evolution matrix 
allows quick understanding evolution object oriented system system class level 
stress approach depend particular language underlying metamodel language independent 
results obtained smalltalk case studies 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
copyright acm xxxxx xx xx xx 
michele lanza software composition group university bern switzerland lanza iam unibe ch full structured follows section evolution matrix categorization classes visualization evolution matrix 
apply discuss approach section case studies 
discuss shortly codecrawler moose tools generate evolution matrix 
conclude discussing benefits limits approach related giving outlook 

evolution matrix view section evolution matrix 
discuss visualization technique show example matrix 
examine characteristics evolution matrix 
section introduce categorization classes visualization evolution matrix 
visualizing classes metrics dimensional boxes represent classes width height boxes reflect metric measurements classes see 
approach 
evolution matrix discussed visualize classes metrics number methods nom width number instance variables niv height tool choose metrics 
width metric class height metric graphical representation classes metrics 
characteristics evolution matrix evolution matrix displays evolution classes software system 
column matrix represents version software row represents different versions class 
columns sorted alphabetically 
see schematic evolution matrix 
evolution matrix allows statements evolution object oriented system granularity levels discuss system level class level 
class class class class 
version version version version time schematic display evolution matrix 
characteristics system level see schematically system level able recover information regarding evolution system size system 
number classes column number classes particular version software 
height column indicator system size terms classes 
addition removal classes 
classes added system certain point time easily detected added bottom column version 
removed classes easily detected absence leave empty space matrix version 
growth stagnation phases evolution 
shape evolution matrix indicator evolution system 
growth phase indicated increase height matrix stagnation phase classes added height matrix stay 
version system major leap evolution growth phase stagnation phase time versions removed classes version characteristics evolution matrix 
characteristics class level visualize class different metrics 
decided number methods number variables 
visualize different versions class effectively see class grows shrinks stays version 
figures colors denote changes version version black growing classes light gray shrinking classes white classes stay 
categorization classes evolution matrix categorization classes evolution matrix visualization different versions class 
categorization stems experiences obtained applying approach case studies 
large part vocabulary taken domain astronomy 
names domain convey extremely described types evolution 
vocabulary utmost importance complex context situations evolution class communicated person efficient way 
idea comes domain patterns 
case studies encountered ways class evolve lifetime 
list prominent types 
note categories introduced mutually exclusive class behave pulsar certain part life white dwarf rest life 
pulsar 
pulsar class grows shrinks repeatedly lifetime see 
growth phases due additions functionality shrinking phases probably due refactorings class 
note refactoring may class grow example long method broken shorter methods 
pulsar classes seen hotspots system new version system changes pulsar class performed 
time visualization pulsar class 
supernova 
class suddenly explodes size 
reasons explosive growth may vary common cases major refactorings system caused massive shift functionality class 
data holder classes mainly define attributes values accessed 
due simple structure classes easy class grow rapidly 
called sleeper classes 
class defined long time ago waiting filled functionality 
moment comes developers may certain functionality introduced short time 
supernova classes examined closer accelerated growth rate may sign design introduce new bugs system 
time visualization supernova class 
white dwarf 
white dwarf class certain size due varying reasons lost functionality defined classes system real meaning 
see schematic display white dwarf class 
white dwarf classes examined signs dead code may obsolete removed 
time visualization white dwarf class 
red giant 
red giant class seen permanent god class versions keeps large 
god classes tend implement functionality quite difficult refactor example split class refactoring 

class change versions software system belongs 
list reasons may lead class evolution matrix 
dead code 
class may obsolete certain point time removed varying reasons 
design 
classes implementation simple structure resistant changes affecting system 
class belongs subsystem performed 

class short lifetime exists version system 
classes may created try idea dropped 
persistent 
persistent class lifespan system 
part original design 
persistent classes examined may represent cases dead code developer remove able explain purpose class 

case studies section case studies evolution visualized evolution matrix view 
shortly introduce case study show discuss evolution matrix 
average sized application written visualworks smalltalk developer little year part diploma 
taken versions software case study 
discussion 
see evolution matrix 
see version left small number classes survived version persistent classes 
see major leaps long phase stagnation 
note second leap fact case massive class renaming classes removed previous version appear added classes version 
version classes 
classes rarely change size class annotated renamed pulsar class sight central classes system 
written visualworks smalltalk 
taken versions application case study 
discussion 
see evolution matrix 
see apart stagnation phase constant growth system major growth phases 
note growth phase due massive renaming classes 
pulsar classes strike eye evolution matrix sherlock 
considerable size 
see original classes persistent system renewed nearly completely 

codecrawler moose codecrawler tool generate views 
codecrawler supports reverse engineering combination metrics software visualization 
power flexibility simplicity scalability repeatedly proven large scale industrial case studies 
codecrawler implemented top moose 
moose language independent reengineering environment written smalltalk 
famix metamodel provides language independent representation object oriented sources contains required information reengineering tasks performed tools 
language independent need legacy systems written different implementation languages 
extensible know advance information needed tools reengineering problems tools need language specific information allow language plug ins extend model language specific features 
allow tool plugins extend model tool specific information 
simplified view famix metamodel 
simplified view famix metamodel comprises main object oriented concepts class method attribute inheritance plus necessary associations invocation access see 
moose context evolution allows models loaded time 
load models different versions software get sequence snapshots evolution software 
technique base evolution matrix visualization 

evolution matrix novel way visualize evolution classes object oriented software systems 
evolution matrix greatly reduce amount data deal analyzing evolution software simple visualization approach 
visualizations obtained introduced categorization classes personal evolution 
applied evolution matrix case studies verify usefulness approach 
limits approach approach limited ways effectiveness depends number available versions software better amount changes version approach aims differences versions case versions distant terms changes details get lost 
major aspect classes object oriented programming capability inherit class seldom exists embedded context inheritance hierarchy 
aspect goes lost current evolution matrix visualization 
approach immune name changes 
class renamed certain point time treated class removed new class added 
software visualization techniques deal issue scalability 
case evolution matrix approach worked systems nearly classes 
larger systems large matrix mainly general statements system evolution precise statements particular classes 
related various approaches understand software evolution proposed literature graphical representations software long accepted comprehension aids 
holt pak visualization tool called elucidate architectural changes different versions system 
built tool called exploring evolution successive versions jdk 
intent provide tool detecting possible problem areas developers wish port java tools versions jdk 
claudio riva presents similarities visualizes versions software subsystem level colors 
obtained colored displays evolution system 
approach differs actual software artifacts information software releases 
implies verify correctness informations 
approach allows enrich display metrics information able access version software artifacts 
munro analyzing calling structure source code 
transformed calling structures graph dominance relations indicate call dependencies functions 
dominance trees derived call directed 
dominance trees show complexity relationships functions potential ripple effects change propagation 
gall jazayeri examined structure large telecommunication switching system size releases 
analysis information stored database product releases underlying code available considered 
investigated measuring size components growth change rates 
aim find conspicuous changes gathered size metrics identify candidate subsystems restructuring reengineering 
second effort system focused identifying logical coupling subsystems way potential structural shortcomings identified examined 
publications tools tackle problem software evolution software visualization higher abstraction levels systems subsystems provide visualization classes categorization classes 
plan apply evolution matrix approach large industrial case studies evaluate usefulness scalability 
major problems foresee availability versions industrial system 
plan extend enrich evolution matrix increase usability 
time classes treated standalone objects 
think relationships classes especially inheritance increase usefulness 
metrics remains explored 
preliminary uses difference metrics yielded interesting results plan explore direction 
tackle problem scalability introduce grouping techniques reduce number displayed entities 
plan examine large systems visualizing higher level constructs subsystems applications classes 
acknowledgments 
st phane ducasse comments drafts 

munro 
initial approach measuring characterizing software evolution 
proceedings wcre pages 
ieee computer society 
demeyer ducasse lanza 
hybrid reverse engineering platform combining metrics program visualization 
blaha rugaber editors proceedings wcre th working conference reverse engineering 
ieee oct 
demeyer tichelaar steyaert 
famix information exchange model 
technical report university berne aug 
ducasse lanza 
methodology understanding object oriented systems 
technique science informatique 
appear techniques sciences edition 
ducasse lanza tichelaar 
moose extensible language independent environment reengineering object oriented systems 
proceedings second international symposium constructing software engineering tools coset june 
fowler beck brant opdyke roberts 
refactoring improving design existing code 
addison wesley 
gamma helm johnson vlissides 
design patterns 
addison wesley reading ma 
gall jazayeri 
detection logical coupling product release history 
icsm proceedings international conference software maintenance pages 
ieee computer society 
gall jazayeri 
software evolution observations product release history 
icsm proceedings international conference software maintenance pages 
ieee computer society 
holt 
visualizing software evolution large 
proceedings wcre pages 
ieee computer society 
jazayeri gall riva 
visualizing software release histories color third dimension 
icsm proceedings international conference software maintenance 
ieee computer society 

scenario approach refactoring duplicated code object oriented systems 
diploma thesis university bern june 
lanza 
combining metrics graphs object oriented reverse engineering 
diploma thesis university bern oct 
kerr kontogiannis 
change adaptive maintenance detection java software systems 
proceedings wcre pages 
ieee computer society 
isbn 

object oriented design heuristics 
addison wesley 
riva 
visualizing software release histories color third dimension 
master thesis politecnico di milano milan 
steiger 
recovering evolution object oriented software systems flexible query engine 
diploma thesis university bern june 
