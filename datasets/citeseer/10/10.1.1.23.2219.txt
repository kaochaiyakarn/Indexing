computing stable partial stable models extended disjunctive logic programs carolina ruiz jack minker institute advanced computer studies department computer science university maryland 
college park md cs umd edu prz przymusinski introduced partial valued stable model semantics extends valued stable model semantics defined originally gelfond lifschitz gl 
describe procedure compute collection partial stable models extended disjunctive logic program 
procedure consists transforming extended disjunctive logic program constrained disjunctive program free negation default set valued minimal models corresponds set partial stable models original program 
partial valued stable model semantics defined przymusinski prz valued semantics class extended disjunctive logic programs edlps 
class programs consists disjunctive logic programs may contain kinds negations negation default explicit negation 
definition semantics extends valued stable model semantics gelfond lifschitz gl valued disjunctive case 
original definitions valued valued stable model semantics constructive 
give criteria check model program partial stable 
procedures compute valued stable model semantics disjunctive logic programs described flms 
purpose provide procedure constructs collection valued stable models edlp 
prove procedure support provided air force office scientific research number national science foundation numbers iri iri 
correct introduce new characterization partial stable model semantics terms supported valued models edlps 
notion supported valued models introduced fages fag class definite normal programs 
extend notion edlps valued case 
stated fages supported models supported models loop free finite justifications 
show notions partial stability valued equivalent 
result generalizes fages valued disjunctive framework 
prove characterization introduce fixpoint operator computes minimal respect truth ordering valued models edlp free negation default 
worth noticing propositional case problem constructing collection partial stable models edlp tractable 
consequence fact skeptical reasoning semantics determining literal true partial stable model program pi complete see 
construction collection partial stable models edlp follows translated new constrained edlp called free negation default syntax captures supported semantics sense contains clauses stating explicitly support atom true false unknown 
furthermore constraints appearing clauses guarantee supports 
subsequently minimal valued models computed 
models translated language precisely supported partial stable models organized follows section presents background partial stable model semantics needed sections 
section provides characterization partial stable models supported valued models fixpoint operator computes minimal respect truth ordering valued models edlps free negation default 
section concerned computation valued stable models edlp 
introduce transformation called transformation edlp computes constrained edlp prove correspondence minimal valued models valued supported models consequently valued stable models original program 
algorithm compute minimal valued models section 
section draw 
background classical logic assumes truth value sentence true false 
valued semantics allow additional possibility truth value statement unknown 
section precise edlp define notions valued interpretation valued model edlp 
describe alternative orderings truth values study orderings assuming np 
valued interpretations induce 
set valued stable models edlp defined 
definition extended disjunctive logic programs 
denote order language 

extended disjunctive clause clause form literals atoms explicitly negated atoms language negation default operator 

extended disjunctive logic program edlp set extended disjunctive clauses 
follows abbreviate extended disjunctive clause form edlp equivalent set ground instances consider propositional edlps language just set propositional symbols 
require contain special propositions intended denote true false unknown respectively 
minker ruiz give techniques obtain semantics edlp term semantics corresponding edlp free explicit negation 
loss generality consider sequel programs free explicit negation 
mind say edlp positive free negation default 
definition ordering truth values 
consider orderings truth values 
truth ordering 
truth values false unknown true 

knowledge ordering 
truth values unknown false unknown true 
graphically gamma gamma unknown false true propositional language valued interpretation valued truth assignment propositions commonly represented partial function name partial interpretation ftrue falseg truth value proposition belong domain taken unknown 
concise way writing partial function pair hi gamma gamma consist propositions mapped true false respectively 
remaining propositions mapped unknown 
definition valued interpretations 
edlp written propositional language 
valued interpretation pair hi gamma gamma disjoint subsets gamma gamma 
proposition true false gamma unknown 
truth values complex sentences respect computed kleene truth tables abbreviated true false unknown respectively 
truth value sentence respect interpretation denoted 

denotes gamma gamma set propositions unknown orderings truth values valued interpretations ordered ways 
definition orderings valued interpretations 
edlp 
valued interpretations hi gamma hj gamma possible ways ordering 
truth ordering valued interpretations iff 
knowledge ordering valued interpretations iff equivalent definitions orderings appear frequently literature see prz iff gamma gamma iff gamma gamma usual model edlp interpretation satisfies clauses program 
definition valued minimal models 
edlp 

valued interpretation valued model clause vm vm 

said oe minimal respectively oe minimal valued model valued model oe respectively oe 
semantics edlp captured subcollection set models 
particular valued stable model semantics edlp set valued stable models defined 
definition valued partial stable model prz 
edlp valued model 
gelfond lifschitz transformation respect edlp free negation default obtained replacing clause negated default premises true respectively unknown respectively false proposition respectively respectively 

valued partial stable model oe minimal model edlp przymusinski proved relationships collections partial stable models stable stable models stable founded model wfs proposition prz 
edlp valued model 
stable oe minimal valued model 
stable stable 

normal logic program wfs stable 
addition oe minimal partial stable models stable notice notion partial stability defined truth ordering oe henceforth consider ordering 
characterization partial stable models edlps section prove new characterization partial stable model semantics terms supported valued models edlps 
stated notion supported valued models introduce fages fag class normal logic programs 
section summarize relevant definitions fag extend notion edlps valued case 
show notions partial stability valued equivalent 
proof characterization existence fixpoint operator computes oe minimal valued models positive edlp 
introduce operator section 
computing minimal partial models positive edlps define fixpoint operator tp computes valued oe minimal models edlp free negation default worth noticing fitting immediate consequence operator fit valued case computes oe minimal models different operator needed compute respect truth ordering oe definition oe 

set interpretations called canonical interpretations oe incomparable distinct oe oe 
consider partially ordered set oe defined ffl dom collection sets canonical interpretations language ffl order oe interpretations extended dom follows canonical sets interpretations dom iff exists set interpretations define min subset containing just oe minimal valued interpretations notice min canonical set interpretations 
straightforward check oe lower semi lattice bottom element gamma ft top element hl gamma ff ug greatest lower bound glb collection canonical sets interpretations glb min 
definition tp operator 
edlp free negation default clause denote body interpretation define operator tp set interpretations tp min fhi fa gamma gamma fa gi kg true min fhi gamma gamma fa gi kg unknown fig false lemma 
arbitrary fixed clause 
tp monotonic argument 
words interpretations tp tp 
proof 
form note interpretation fig tp 
interpretations need show tp tp tp tp case true 
implies true tp form hj fa gamma gamma fa gi kg 
hi fa gamma gamma fa gi case unknown 
implies true unknown 
tp 
true hj fa gamma gamma fa gi unknown hj gamma gamma fa gi kg 
cases hi gamma gamma fa gi case false 
implies tp 
cases tp tp definition tp operator 
edlp free negation default fc cng set clauses operator tp oe defined follows canonical set interpretations consider sequence canonical sets interpretations hi defined inductively min tp tp proposition 
tp monotonic oe proof 
dom show implies min tp min tp clause assume min tp 
tp hypothesis lemma tp tp tp tp min tp lemma 
edlp valued model canonical set interpretations 
clause fmg min tp fmg 
proof 
assume fmg case true vm true models hi fa gamma gamma fa gi case unknown vm true unknown 
head vm unknown hi gamma gamma fa gi case false cases tp 
min tp operator tp monotonic lower semi lattice oe fixed point semi lattice 
furthermore fixed point tp 
result shows fixed point consists set oe minimal valued models theorem 
tp 
canonical set oe minimal valued models proof 
construction tp 
satisfies clauses valued model valued model simple induction lemma shows tp 
exists valued model tp 
implies oe minimal valued model tp 
words tp 
contains oe minimal valued models tp 
canonical set interpretations tp contain model tp 
contains precisely oe minimal valued models example 
consider positive edlp tp 
tp fi tp fi dg ff tp fi dg ff tp 
tp tp fi dg ff agi dg ff tp fi tp fi tp fi tp fi tp 
tp tp 
oe minimal valued models shown theorem tp 
set oe minimal valued models fixed point tp independent ordering clauses program 
point positive edlp proposition appear tp 
consists set minimal valued models case fixed point tp coincides fixed point minker rajasekar fixpoint operator 
supported valued models start section briefly surveying definition valued supported models fages fag characterization valued stable model semantics 
introduce extended definition characterization disjunctive valued case 
definition supported valued interpretations fag 
herbrand interpretation supported valued interpretation normal logic program iff exists strict founded partial ordering ground instance clause satisfying conditions 
mg 
true 
theorem fag 
normal logic program herbrand interpretation stable model iff supported model condition guarantees support true 
condition guarantees support loop free justifications true depend fact true 
extend conditions disjunctive clauses 
definition supported valued interpretations 
herbrand valued interpretation supported valued interpretation edlp iff exists strict founded partial ordering ground instance clause satisfying conditions 
mg 
case true true case unknown false 
cases summarized 
valued supported models edlp exactly valued stable models program theorem shows 
proof result fact valued stable model oe minimal valued model constructed fixpoint operator defined section iterations provide founded order theorem 
valued interpretation valued stable model iff supported valued model proof 
cn gamma list clauses valued stable model oe minimal valued model rebuilt fixpoint operator ff smallest ordinal ff 
fixed point 
mn 
mn 
ff gamma ffn ff 
trace construction sequence interpretations converges tp modn denotes modulo function 
trace exists due lemma 
element say rank denoted rank respect trace smallest integer vm vm notice rank element greater 
strict founded partial ordering iff rank rank rank rank order supported order see suppose rank 
definition clause consequently clause vm vm case vm true vm true implies mg 
furthermore selected way vm true hm gamma fag gamma model contradicting oe minimality case vm unknown implies mg 
furthermore selected way vm false hm gamma model contradicting oe minimality supported valued model supported model model model need show oe minimal model assume oe minimal model oe minimal model oe smallest element respect founded order vn oe vm 
supported clause 
mg 
case vm true vm true 
mg truth values vn vm true oe vn vm true vn vm model contradicting choice case vm unknown vm false 
mg vn vm unknown oe vn false 
vn unknown model contradiction 
oe minimal model computing partial stable models edlps section concerned computation valued stable models edlp 
introduce transformation called transformation edlp computes new edlp free negation default set minimal valued models corresponds valued stable models original program 
algorithm compute minimal valued models edlp free negation default section 
transformation edlp transformation performs case analysis construct potential justifications supports proposition true false unknown 
justifications written constrained clauses collected form positive edlp called constraints ensure justifications loop free 
written richer language obtained adding new propositional symbols ua na propositional symbol intuitively understood true ua unknown na false 
definition extended language 
propositional language 
extended propositional language fa ua lg 
introduce operators applied sentence language produce sets possible justifications expanded language sentence true false unknown respectively 
words sentence true resp 
false resp 
unknown supporting sentences resp 
resp 
holds 
follows inductively define operators 
definition operators normal literals 
operators defined follows fag fag disjunction propositions true propositions true false propositions false unknown propositions unknown remaining ones unknown false 
codify possibilities unknown tuples contain 
tuple seen stating false unknown 
unknown 
express formally language definition 
definition operators disjunctions 
arbitrary disjunction propositions 
operators defined follows fa fna na ffl fh kg 
ffl ae notice empty disjunction previous definition fg ffg ftg 
follow similar process define truth value conjunction normal literals true true false 
false false true 
unknown truth values greater equal unknown unknown true unknown 
codify possibilities unknown tuples contain 
tuple seen stating true corresponding entries tuple equal unknown equal symbol separate elements set 

entry unknown 
definition formalizes language definition operators conjunctions 

operators defined follows fb nc fnb ng ae empty conjunction ftg fg ffg previous definition 
concentrate determining clause support proposition respect model clause 
assume wellfounded partial order arbitrary fixed proposition ah support respect cases holds 

vm true vm vm true mg 

vm unknown vm vm unknown mg 

vm false vm vm happens vm true vm false values unknown 
cases explicitly coded operators definition 
set constraints fa mg respect clause understood requiring clause support true unknown proofs true unknown rely proof say set constraints satisfied partial order required simultaneously 
definition calls existence partial order set true unknown propositions model add constraints clauses supporting false 
definition operators 
clause ffl set constraints fa mg ffl operators clause defined follows constraints 
constraints 
constraints 
operators sets stand usual operators cartesian product union respectively 
preserve flavor logic programming syntax 
example 
possible supports possible truth values listed fb ncg fa bg fnb cg constraints ub nc uc ub uc state justification true true false simultaneously 
supports false false true 
remaining possibilities support unknown 
apply case analysis construct possible justifications proposition respect program consider set clauses defining set clauses containing heads 
respect supported valued model true clauses supports true false clauses definition support false unknown clauses supports true supports unknown 
cases hold clause ua na satisfied supported model 
worth noticing proposition defined appear head clause support true unknown taken false 
definition transformation 
edlp 

definition consist set clauses 

transformation definition denoted set clauses na ua na shorthand set clauses 
ae 
transformation obtained applying transformation proposition language number clauses general exponential number clauses possible supports truth value proposition considered 
noted transformation requires proposition assumes truth value 
may case say ua true clearly undesirable impose set denial rules models eliminate possibilities 
definition denial rules icp 
disjunctive logic program icp denote set denial rules icp ua na ua na gamma ft gg interpretation subset satisfying denial rules icp gamma denote respectively positive negative uncertain parts fa ig gamma fa na ig fa ua ig 
denote valued interpretation hi gamma associated collection contains sets constraints appear clauses supporting ua respect illustration see example fc clause ua constraints trueg 
fc say satisfies constraints defines partial order precise notion minimal valued models definition valued models 

valued model subset satisfying clauses program constraints 
valued models say iff gamma gamma valued interpretation transformed valued interpretation defining fua fna gamma set minimal valued models denoted icp closely related set valued stable models examples show 
example 
fb cg 
uc nc nb ub nb nc nb nc na ua ub uc ub uc ua na ub nb uc nc icp ux nx ux nx fa cgg minimal valued models icp fm fa ncg fa nb cgg fc gg fc gg 
clearly respectively satisfy constraints empty set constraints defines partial order set 
correspond partial stable models stable bg hfa cg 
example 
fa ag 
fa bg ua ub fa bg na nb fb ag ub ua fb ag nb na na uc ua nc ua na ub nb uc nc icp ux nx ux nx fa cgg minimal models fa ncg fc fa bg fb agg fua ub fc fa bg fb ag gg fna nb cg fc gg 
notice sets constraints unsatisfiable fa ag partial order 
icp nb cgg corresponds unique valued stable founded model fa 
correspondence minimal models constrained logic program valued supported partial stable models theorem shows 
theorem 
edlp valued interpretation valued supported model iff icp proof 
assume icp case clause true vm true vm true satisfies constraints fa mg 
clause clause true 
ua na belong contradicting assumption satisfies icp case ua exists number clauses definition conjunction true na belong 
clause true means vm unknown vm false satisfies constraints fa mg 
supported model assume supported model show model valued model satisfies clauses form ua na satisfies denial rules icp definition consist set clauses 

transformation definition set clauses na 
ua na ua na notice support true unknown false model na 
prove statement consider cases corresponding possible truth values respect clear cases clause satisfied case true clearly models 
supported model clause satisfies conditions 
mg 

vm true vm true 
vm true consequently vm vm false models 
case unknown clearly models 
notice clause definition vm true vm true 
true order model rg vm true vm true models 
unknown supported model clause satisfying conditions 
mg 

vm unknown vm false 
vm true implies vm false models 
case false clearly models 
false model vm vm implies models vm false models 
model remains shown minimal model suppose way contradiction icp smaller straightforward check valued model oe yields contradiction oe minimal valued model due proposition assumption supported partial stable model corollary 
valued interpretation valued stable model iff icp proof 
follows immediately theorems 

repeat 




satisfies icp 
ua na 
fi fag 
fig 

min 
icp fm satisfies constraints algorithm compute icp computing minimal valued models section give algorithm construct minimal models show check models satisfy constraints program 
start noticing contains types clauses horn clauses disjunctive facts 
denote subsets containing respectively horn clauses disjunctive facts approach compute minimal valued models start empty interpretation apply immediate consequence operator fixpoint reached 
satisfies clauses done 
select clause ua na satisfied split interpretations fag 
interpretation apply immediate consequence operator respect find revised fixed point tested determine models done repeat process interpretations obtained satisfy disjunction point process interpretation inconsistent set denial rules icp reached interpretation thrown away 
process check resulting interpretations satisfy set constraints 
provides algorithm compute icp immediate consequence operator defined horn programs 
detail instruction show set constraints associated interpretation computed simultaneously iterations fixpoint operator 

repeat 


clause constraints true 
fxg 
form ua 
fc 

point instruction implemented terms search particular graph 
easy see set constraints form defines partial order directed graph hv cgi acyclic 
checking graph acyclic done time lj jcj see ahu 
illustrate algorithm works different edlps 
example 
fa ag 
nb ua ub na na ub ua nb ua na ub nb icp ux nx ux nx fa start empty interpretation fg 
horn part facts empty set fixed point obtained select satisfied form interpretations shown level tree 
find fixpoint fag respect obtain nb second level tree 
interpretation fa satisfies clauses done obtain ub respectively 
fua fna bg satisfy clauses notice interpretations satisfy denial rules icp oe incomparable oe minimal 
satisfies associated set constraints fc gg fc gg fc gg 
icp ffa fua fna 
nb na 
xxxxxxxxx ua ub minimal valued models example 
corresponding valued stable models program 
corresponds founded model example 
fa fa cg fa bg ua uc nb fa cg ua nc ub fa bg ua uc ub fa cg na nc nb fb ag ub ua fb ag nb na ua na ub nb uc nc icp ux nx ux nx fa cgg immediate consequence operator applied produces model fa cg 
set constraints associated fc ffa ffb agg gg 
satisfies set constraints fa ag partial order fa cg 
icp ffa cgg stable hfa cg algorithm constructs minimal model worst case runs exponential time size global improvement process computing partial stable models partition connected components notion semi stratification described flms apply transformation algorithm just component program 
xxxxxxxxxxx xxxxx uw nw ns ns nt nt nw nw nw computation minimal valued models example 
local speed algorithm achieved selecting instruction clause maximizes number clauses usable application fixpoint operator section showing algorithm works program partial stable models 
example 
fw sg 
cw nt cw uw ut cw nw nw wjt uw ns wjt ns ut nt uw nw ns ut nt icp ux nx ux nx fw shows interpretation obtained computation minimal valued models inconsistent respect denial rules icp icp fg consequently stable fg 
provided effective procedure computes partial stable models edlp 
shown correspondence partial stable models edlp minimal models constrained edlp free negation default equivalently supported models edlp free negation default 
strictly speaking implies negation default interpretation partial stable model semantic increase expressive power constrained positive programs 
observation applicable total stable model founded semantics semantics easily derived set partial stable models program 
presence negation default operator useful sense allows write concise programs independent number truth values considered 
procedure compute valued stable models edlp case analysis 
implementation procedure completed expect experiment 
believe approach adapted compute valued valued stable models fit program 
plan investigate topics 
ahu aho hopcroft ullman 
data structures algorithms 
addison wesley 
bell nerode ng subrahmanian 
implementing stable model semantics linear programming 
proceedings international workshop logic programming non monotonic reasoning june 
eiter gottlob 
complexity aspects various semantics disjunctive databases 
proceedings twelfth acm sigart sigmod sigart symposium principles database systems pods pages 
acm press may 
fag fages 
new fixpoint semantics general logic programs compared founded stable model semantics 
new generation computing 
fit fitting 
kripke kleene semantics logic programs 
journal logic programming december 
fit fitting 
family stable models 
journal logic programming 
flms fern andez lobo minker subrahmanian 
disjunctive lp integrity constrains stable model semantics 
annals mathematics artificial intelligence 
gl gelfond lifschitz 
stable model semantics logic programming 
kowalski bowen editors proceedings fifth inter national conference symposium logic programming pages seattle wa usa aug 
mit press 
inoue hasegawa 
embedding negation failure model generation theorem prover 
kapur editor proceedings eleventh international conference automated deduction pages saratoga springs ny usa june 
springer verlag 
minker rajasekar 
fixpoint semantics disjunctive logic programs 
journal logic programming july 
minker ruiz 
extended disjunctive logic programs 
komorowski ra editors proceedings seventh international symposium methodologies intelligent systems pages 
lecture notes ai 
springer verlag june 
invited 
minker ruiz 
semantics disjunctive logic programs explicit default negation 
fundamenta informaticae 
anniversary issue edited 
prz przymusinski 
stable semantics disjunctive programs 
new generation computing 

