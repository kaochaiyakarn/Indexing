software component verification tool gary gareth lee john morris kris parker centre intelligent information processing systems department electrical electronic engineering university western australia wa australia gareth morris ee edu au peng lam school engineering murdoch university murdoch wa australia peng eng murdoch edu au component software engineering depends reliable robust components may omit unit test phase wholly partially development cycle 
describes tool allows component developer design run verification tests 
developing components library necessary provide multiple mechanisms identifying capturing tests overcome limitations single mechanism 
specified test specifications test results stored xml documents providing standard portable form storing retrieving updating test histories 
module component test bench test pattern verifier designed general lightweight portable packaged component test specifications 
allows component user verify component compliance specifications target environment 

component software engineering cbse emerging methodology software development aims compose applications plug play software components custom built commercial shelf cots framework 
paradigm increasingly important owing maturity underlying technologies support building components developing applications sets components 
changes business organisational context applications developed driving cbse forward 
component infrastructure technologies omg corba microsoft component object model com distributed com dcom sun javabeans enterprise javabeans matured somewhat standardised 
technologies provide communication coordination required construct applications components 
developments business organisational context promoting cbse include shift style architecture applications away centralised mainframe applications distributed applications remotely accessible variety client machines need business maintain stability technology supporting core business internal structure face rapid development technology areas organisations invested significant resources existing applications prefer reuse existing investment developing new applications quickly reliably 
cbse differs conventional reuse components number ways 
components required plug play capabilities 
second components hide implementation details interfaces separated implementations 
lastly order promote interoperability components usually designed pre defined architecture 
cbse process phases component development component integration 
component enterprise software process model application development consists sequential stages analysis component acquisition component oriented design component composition integration test system test 
note absence unit testing phase methodology 
corner stone cbse approach benefit pre existing assumed reliable components 
permits faster construction complex systems better reliable outcomes 
developers access source code components black boxes limited identifying faults 
hand development components follows conventional approach includes unit testing objective tool described 
integration error prone process necessary consider unavailability complete correct behavioural specifications components high level volatility components mismatch components various reasons 
specifications provided cots components may complete correct 
addition commercial components upgraded may lead cases upgrades required capability retain old bugs introduce new ones 
major contribution process coupling components test certificates enabling rapid verification components required capabilities upgrades affected correct functions 
define test descriptor xml simple portable document standard permits test specifications read interpreted wide variety platforms 
tool describe contains test pattern verifier light weight general portable module run stand package 
packaged component test specification enabling component user confirm correct functioning component target environment 
organisations considering developing large industrial systems high reliability availability requirements components 
reported case ensure signalling systems developing rail transport industry operate fail safe manner formal methods design 
approach deal issues mentioned ensure reliable system silver bullet 
despite reported successes formal methods widely industry number reasons 
needs standards tools 
wileden suggested significant investment formal methods tools required industrial applications just significant investment compiler technology resulted widespread take high level languages industry 
approach involves testing components new environment developers users confident expected behaviour performance 
approach generally feasible may incur significant cost 
important alternative method completely formal methods visual modelling language uml firstly capture component requirements design component classes interfaces meet requirements 
provides advantages development components isolated packages code verified test procedure developed coding 
firstly requirements specification defined cases drive development test cases secondly provision requirements design model component provides developer complete representation components capabilities limitations 
allows easier integration larger design models component 
cbse effectively employed context understood methods designing assembling maintaining component systems 
issues raised subject current research 
common theme seen various component workshops research projects need component development tools techniques help developers evaluate experiment components 
component test bench described addresses testing tools provides means developers generate tests place users verify components function correctly target environment developers users run regression tests components updated 
provides mixture techniques manual computer assisted automatic generation tests 
allows techniques symbolic execution see section powerful cases difficult apply appropriate 
avoids need write code test harnesses provides generic test harness test pattern verifier module developers specify tests stored standard xml documents run test pattern verifier 
xml test specification java test pattern verifier ensure high degree portability compared systems special purpose scripting languages action word method provide lightweight verifier packaged small components 
integrating test generation manual semi automatic automated test execution enables specification create basic test cases allows analysis written code identify tests 

outline section define types components handle 
section defines key concept test operation sequence calls single test 
section describes test specification developed initial regression testing section 
section discusses instrumented run time system core software component 
section describes symbolic execution sub system output guides selection necessary tests 
key area management regression testing described section 
section discusses experience date 

scope definition component intentionally broad covers spectrum pure dataflow functions components capabilities associated term 
long clearly defined interface component test specification may assembled 
handles situations component may multiple implementations java perform functions logically identical 
allows implementation supply multiple interfaces user happen specification detail changes backward compatibility needed existing software need changed 
different interfaces provide subsets views component full capabilities appropriate particular application domain 

test operations 
definition requires test specification prepared describes implementations component interfaces provided implementation test sets appropriate interface 
test specifications stored xml files portable structured documents may easily read processed systems 
key element test set test operation sequence steps necessary carry test 
test operations normally target method component 
general isn possible test method isolation test operation sequence method calls 
contrast frankl define sequences messages sent pairs objects bring equivalent states restrict calls methods component test 
full definition test descriptor available 
lang java java lang ansi general test add tests delete tests 

structure test descriptor 
ellipses diagram indicate sections omitted clarity 
see detail element 
similarly details element shown 
typical example shown figures 
xml standard test specification aim provide standard interchange format test specifications hitherto test specifications usually taken form scripts specific single tool 
developers cbse approaches need able verify reliability component target environment standard interchange format test specifications needed 
xml provides tool third party sax parser parse test specification users generally available xml editors processors read interpret modify test data sets 
example component tested red black tree 
constructor accepts list items stored tree 
construct list helper class simple utility class designed assist testing holds list integers intlist 
intlist constructors accepts string parses extract list integers 
test operation starts invocation intlist constructor passed string element test descriptor cf 

list constructed passed constructor 
red black tree checking internal structure object produced practical involve constructing tree manually time consuming error prone process 
easier add method class integrity checks rules red black tree see cormen returns true tree required properties 
approach depends correctness integrity method seen weak integrity method relatively simple write approach really checking consistency integrity method code tester methods returning expected results 
check items added tree call method verify value able return true case cf 
figures 
example shows general methods needed test operation construct objects needed test target method verify correct operation target method 
reported binder sequence method calls predecessor tests sequence create structure test deletion methods 
avoid multiple repetitions sequences test operation may contain element specifies test operation run predecessor 
enables common predecessor test operations specified times subsequent testing 
test operations labelled version specification generated 
provides test descriptors design documentation 
expected results generated linked actual implementation marked implementation version number 
xml test descriptor files provides portability allows component users gain information component specification reading test descriptor files directly suitable xml tools understand structure document walk tests 
test descriptor files updated test results runs cf 
may regression testing providing means highlighting differences function original updated version component 
structured nature xml documents suitable capturing source test list target rbtree save true target rbtree save true 
detail element xml test descriptor file 
see document structure 
test procedures test results test scripts unique syntax employed tools 

hierarchies tests convenience management test operations test sets may organised test groups 
particularly useful running regression tests 
programmer changes say addition function lookup table database may quickly choose test group consisting test operations exercise add method test run 
rapidly provide strong indication changes affected correctness identify problem 
test groups related change identify problems programmer able reasonable presumption changes correct run full test set needed changed component lower priority background time convenient long processing runs night 
important consideration large components full verification runs may involve thousands millions test operations affected change complete set run ensure unexpected side effects introduced intlist integrity true true 
dataflow representation test operation 
data flow top bottom constants bars inputs constants expected results checked stored 
note example normal dataflow firing rule methods integrity fire soon data available order 
change 

definition test operations tests vary structure style complexity input style suit 
allow test operations defined number ways 
xml descriptors written directly text editor 
xml editor schema guide data entry 
conventional gui input boxes element 
dataflow visual editor see 
program fragment subset java see written text editor 
addition symbolic execution system see section generate suggest test cases 
intlist list new intlist rbtree new list boolean valid rbtree integrity expect valid true boolean rbtree expect true 
text representation test 
syntax subset java expect function assert triggers checking storage result element regression testing 
test operations define context test creating set objects constitute environment target method runs 
example environment created contains variables names list rbtree valid 
dataflow diagram system assigns names arc 
test operation results results expected test operations may derived various ways result part specification directly derivable independent calculation result computed java virtual machine running program 
test inputs derived various ways part specification calls specific test developer performs informal formal equivalence class analysis specification code symbolic execution suggests set inputs value arg suggested 
leads classification expected results method calls test operations 
specified strongest user input considered part specification equivalent uml case 
strong accept input symbolic execution result computed user marked correct independently verified result conforms specification 
weak accept input symbolic execution result computed user marked acceptable presumably skipped long detailed calculation verify conformation specification 
pending input symbolic execution result computed checked assumed correct 
intermediate needed subsequent method call checked 
unknown input symbolic execution result computed note system allows incremental development allows testers symbolic executor generate test operation data store running test operations may take considerable time ideally deferred 
strong accept specified essentially equivalent retain distinction identify original source test 

instrumented run time system test operation defined run ways 
internal instrumented run time system 
standard virtual machines java compiling executing java execution environment designed specifically testing software components 
capabilities able precisely profile execution methods 
conventional profilers operate periodically sampling program counter 
gives statistical sample statements executed precise set 
testing systems create statement coverage metrics need know absolute certainty specific statement visited path followed particular test case 
able support different execution models 
traditional vms provide literal execution allow actual values propagate dataflow paths 
analyse operation certain algorithms appropriate execute symbolically allowing algebraic values propagate 
capabilities described section 
currently built java languages planned 
able test additional execution conditions 
including extra instructions execution sequence impossible conventional vm monitor certain aspects program behaviour 
instance automatic test pattern generation mechanisms need able obtain values functional form conditions control flow execution 
instrumentation capability allows collect information implementation test execution 
able track data flow execution 
dataflow analysis performed statically 
polymorphism features object oriented languages impossible reliably ascertain dataflow method boundaries event handlers commonly cause problem 
anonymous inner classes java applications means possible determine dataflow execution 
able provide tester feedback execution 
system needs able operate symbolic debugger providing single step capabilities allowing user monitor value specific variables operation 
provides direct feedback tester showing failing tests execute 
particularly useful testing boundary conditions 
light requirements decided implement java source interpreter 
approach followed create source parser interpreter 
clearly affects performance bypasses compiled bytecodes altogether 
assumes compiler application run equivalent parser faithfully translate source byte codes 
basing byte codes rejected compilation process java frequently acts obfuscate original structure program source execution allows directly analyse structure program original lexical expression 
interpreter system implemented java option calling underlying vm point efficiently run methods belong trusted classes java standard apis trusted 
performance lost methods component currently test 
running interpreter java vm ensures behaviour authentic interpreted operations passed underlying vm ensure behave correctly 

symbolic execution choice necessary test cases difficult timeconsuming task moderately complex components number cases quite daunting 
symbolic execution useful role play automatic test pattern generation combined path generation algorithm definition criteria 
received little attention difficulties symbolic execution code number widely languages 
java strict regulation way pointers alleviates difficulties suggests symbolic execution revisited 
symbolic execution allows direct creation equivalence classes test patterns analysis conditional structure code 
path followed particular method symbolic executor produce algebraic description equivalence class 
allow creation exemplars inclusion test set 

symbolic execution currently symbolic execution works single methods java classes target method test operation vm generate environment target method run 
user specifies path indicating branch true false choice taken 
loop terminations considered single branches loop executed times sequence take branch back start loop times exit loop entered 
example shows simple method single loop tester entered exec 
path box direct symbolic executor iterate loop times 
output symbolic execution expression defining equivalence class inputs method 
user select set values inputs expression allow system choose 
initially test operation involving set inputs marked pending 
user enters expected result set marked specified status input initially 
method run output produced tester rejects result entirely running method chosen inputs produced result clearly wrong result initially marked weak accept 
tester may upgrade result strong accept having confirmed result fact match specification 
time writing testers explicitly enter paths planned add automatic generation paths 
screen 
main window shows structure test descriptor file user select part structure adding new elements editing existing ones removing elements 
element editor knows structure tree allowed attributes child elements selected element appear right editing 
point user selected test operation test set run literally coverage statistics requested 
run selected chosen level tree batch processing style running test operations test group test set interface implementation 
run runs tests component suggesting user chose wait instant result 
ria paths coverage heuristics 
number technical weaknesses identified symbolic execution 
significant inability methods certain types array indexing 
difficulty dealing adts amenable traditional algebraic manipulation prominent example string type 
methods overcoming weaknesses making symbolic execution widely applicable discovered published 

symbolic execution coverage 
tester selected test method class 
left window containing method source coverage counts may seen indicating statements method executed 
condition field generated symbolic execution shows condition input run loop times indicated flags entered exec 
path box 
tester include test arg set producing result 

literal execution symbolic execution necessarily slow 
literal execution mode desired check collect results 
java uses standard virtual machine efficient execution 
test specification parsed reflection api locate methods appearing test operation invoke collect results 
simple test program emitted compiled run 
results collected log files converted elements add test descriptor 

regression testing key function testing tool management regression testing 
runs test augments xml test descriptor file elements see date true true 
element test descriptor 
section added test descriptor test run augmented new test results available 
see document structure 
contain actual results derived running test operations 
part test descriptor contains number elements sub structure similar main test descriptor part results possible interface separate elements turn contain elements element marked version implementation obtained date successful tests date output unsuccessful tests 
provides complete history results various versions component linked version numbers dates source code control system 
efficiency tester may specify maximum number errors captured prevent specification files loaded large amounts essentially useless information cases component contains gross errors 
discrepancies expected classed specified results highlighted tests run 
automatically generated tests weak accept strong accept pending qualifiers results obtained previous test runs compared current run discrepancies highlighted 
cases corrected component may generated correct result previous version contained undetected error 
advised type discrepancy tester uncovered problem requires investigation normally expect result checked upgraded strong accept status 

discussion generate test specifications components available component server 
clients able download package containing component compiled code optionally source xml test specification 
package includes module runs tests compares output expected output output previous runs 
clients downloading components able immediately determine component performs specification target environment running test specification 
able test specification gain additional detailed information actual functions component xml document read directly case large documents number freely available xml editors structure selecting portions interest 

cbse going deliver promised benefits components reliable 
implies developers able produce verified reliable components users able confirm claimed reliability quickly easily 
component test bench addresses needs provides developer tool allows multiple ways specify tests captures test specifications portable readable way 
captures test results source result derived directly specification automatically generated regression testing rapidly carried problems may lain dormant time highlighted developer attention 
providing history performance linked software version numbers provides equivalent source code control system monitors result changes code changes 
observed wide variety style testing required different components 
added concept test operation enables rich variety test environments created standard way 
cater diverse range component testing requirements prescribed number different ways generating test specification enabling developer choose style suits component test personal preference 
allowing predecessor test operations significant contribution testing productivity saving repetitive 
furthermore xml standard document format rapidly gaining acceptance variety environments test specifications create possibility portable test specifications easily interpreted executed verifier tools verifier 
critical environments developers expected trust unknown components test specifications important component equally portable 
system allows test specification lightweight portable tool test pattern verifier module run tests packaged component 
users able rapidly confirm component runs target environment exactly required updates received conform required specification 
enables gain expected benefits cbse trust building blocks system constructing 
naturally single standard test specification custom test programs developer need download tool time small component imported existing tool read specification may saving considerable time testing tool familiar 
plan extend current number ways providing closer integration visual modelling tools internal representation source code identify definition paths provide automation test selection process 

acknowledgments supported software engineering australia western australia software engineering quality centres program department communications information technology arts 

new age software development component software engineering changes way software development 
proceedings th international conference software engineering pages 
ieee computer society press acm press 
binder 
testing object oriented systems models patterns tools 
addison wesley 
box 
essential com 
addison wesley 
brown 
current state cbse 
ieee software sept oct 
lee morris hope parr 
component software white part ii 
technical aspects 
software engineering australia wa ee edu 
au research scl white pdf 

testing action words chapter 
software test automation effective test execution tools 
addison wesley 
cormen leiserson rivest 
algorithms 
mit press 

symbolic execution testing 
information software technology feb 

frankl 
astoot approach testing object oriented programs 
acm transactions software engineering methodology apr 
ferguson korel 
chaining approach software test data generation 
ieee transactions software engineering methodology jan 
graham 
software test automation effective test execution tools 
addison wesley 
garlan allen 
architectural mismatch hard build systems existing parts 
proceedings th international conference software engineering pages 
ieee computer society press acm press 
hinchey bowen 
formalize formalize 
ieee computer apr 
editor invitation formal methods pages 
icse 
ensuring successful cots development 
icse cots workshop summary iit nrc ca projects cots html 

sax simple api xml 
www com sax 
navy 
virginia class submarine program 
www navy mil ships html 
yu johnson 
safety critical system built cots 
ieee computer nov 
weyuker 
selecting software test data data flow information 
ieee transactions software engineering apr 
siegel 
corba fundamentals programming 
john wiley 
software component laboratory 
component test bench documents 
ee edu au research scl docs html 
software component laboratory 
source reliable components 
www sea net 
au 
thomas 
enterprise javabeans server component model java white 
www javasoft 
com products ejb dec 
gentleman dean 
cots software integration state art 
nrc technical reports software engineering group jan 
weyuker 
testing component software cautionary tale 
ieee software sep 
wileden 
programming languages software engineering past 
acm computing surveys es dec 
