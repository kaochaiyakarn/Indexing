efficient demultiplexing incoming tcp packets tr paul mckenney ken dove sequent computer systems sw koll parkway beaverton transport protocol segment arrives receiving system receiving system determine application receive protocol segment 
decision typically looking protocol control block pcb segment information segment header 
pcb lookup form demultiplexing typically expensive operations handling inbound protocol segments fel 
protocol optimizations transmission control protocol tcp jac assume large component tcp traffic bulk data transfers result packet trains jr 
packet trains prevalent high likelihood tcp segment en route application uses pcb previous tcp segment 
environments simple pcb cache bsd systems yields high cache hit rates 
classes applications form packet trains applications perform pcb cache 
examples applications quite common area heads data entry line transaction processing oltp systems 
oltp systems heavy computer communications networks large rates characterized large numbers connections low connection packet rates small packets 
combination results low incidence packet trains 
uses simple analytic approach examine different pcb lookup schemes perform oltp traffic 
scheme shown order magnitude better oltp traffic cache approach maintaining performance packet train traffic 
transmission control protocol tcp pos protocol control block pcb contains state information endpoint connection 
tcp demultiplexing pcb lookup algorithm find pcb corresponding connection tcp packet 
algorithm mapping packet source destination internet protocol ip addresses tcp ports proper pcb 
addresses ports total bits simple indexing schemes feasible complex schemes 
simple pcb management approach uses simple linear linked list pcbs 
approach initial bsd system 
sequent initial tcp implementation bsd simple linked list 
sequent began designing parallel implementation tcp second generation operating system gar 
explicit goal effort support thousands concurrent users connected local area networks 
effort resulted things algorithm described section 
time van jacobson conducting research aimed increasing tcp single stream performance 
result research bsd reno release augmented linked list single line cache referencing pcb 
simple optimization proven effective environments quickly incorporated sequent algorithm greatly improved handling bulk data transfers 
transaction processing council published tpc online transaction processing benchmark gra common database software platform vendors 
benchmark important development provides precise realistic definition important application requires large numbers connections 
particular tpc benchmark allows objective comparisons effects different protocols algorithms 
glance definition tpc simulation analyze 
article shows simple analytic expressions give approximations cost pcb lookup imposed tpc benchmark 
analysis tpc shows benchmark causes bsd algorithm perform poorly 
similar analysis predicts algorithm suggested jon crowcroft cro proposed craig partridge stephen pink pp achieve significantly higher performance tpc algorithm sequent dov achieves additional order magnitude improvement tpc maintaining performance situations 
increase performance implications greatly reduces need add protocol mechanisms connection ids eliminate need search pcbs 
section gives overview communications behavior tpc benchmark section analyzes behavior algorithms section presents 
tpc benchmark tpc benchmark simulates banking system customers randomly generated deposits withdrawals bank branches 
benchmark contains scaling rules protect trivial benchmark results issued rules require example size various elements database increase increasing transaction rate 
important rule communications standpoint number users represented benchmark times transaction rate 
specifically tpc tps benchmark run simulated users 
tpc rules quite strict users simulated particular network load faithfully represent real users 
simulated user repeatedly 
enters transaction 
algorithm independently put forward gary delp 

waits response 
time steps called response time 
response time transactions greater seconds order benchmark valid 

waits randomly selected period time returning step 
time called think time 
think time selected truncated negative exponential distribution mean seconds maximum value times mean value 
purpose think time simulate real life delay human data entry personnel 
average time required user enter transaction seconds consistent rule transaction rate times users 
analysis preceeding description tpc allows calculate hit rates penalties pcb lookup algorithms 
sections assume optimal communications media 
transaction requires packets query transport level query response transport level response 
model think time true truncated negative exponential distribution 
truncation occurs values times mean negligible effects results 
particular values neglected average sum total think time 
assume user issue transactions spaced arbitrarily closely 
reality user may issue new transaction received response previous transaction 
typical tpc runs fewer users waiting response time shall see differences algorithms far exceeds amount 
assumption crucial omitting require analysis carry state determine time users waiting responses consequently unable enter new transactions 
resulting state space user system truly enormous low memory costs enjoy 
delayed acknowledgments eliminate need second packet effect results database server packet received client 
merit expected number pcbs searched 
especially appropriate large numbers connections pcbs fit contemporary chip caches 
memory speeds bandwidths expected continue increasing slowly cpu speeds hj sc moving pcbs main memory chip cache continue primary bottleneck 
number pcbs examined surrogate time required find right pcb 
negative exponential distribution memoryless users equally enter transaction 
memoryless property discussed length text stochastic modelling example operations research lieberman hl 
memoryless means result trial independent past history 
example physical process results distribution memoryless property rolling fair die counting number rolls appears 
sections analyze average cost bsd algorithm move front algorithm proposed jon crowcroft sender receiver algorithm proposed craig partridge stephen pink algorithm sequent tcp ip product combinations algorithms 
bsd bsd searches simple linear list pcbs cache containing pcb 
shows schematic list just arrival packet connections corresponding pcb head cache bsd pcb list hit rate pcb cache tpc tps benchmark 
average cost linear search scanning pcbs 
average number pcbs examined just hit cache additional probability hit just probability gamma bsd gamma process result geometric distribution 
time required see single particular face fair die infinite number sides rolled infinitely quickly exponentially distributed 
approaching large equation yields average cost linear scan pcbs tpc tps benchmark 
exactly cost places cache clearly providing little help 
data contained pcbs fit chip data caches microprocessor aware scan involve traffic chip cache 
systems scan require accesses real memory 
overhead motivates different algorithm 
expect small chance packets representing transaction entry transport level response form packet train proper pcb cached arrived 
right 
small chance probability theta gamma relatively fast millisecond response time tpc tps benchmark 
keep mind response time includes full database lookup processing commit logging transaction relatively small communications overhead includes round trip time client machine 
average cost transaction level pcbs 
bsd algorithm served common situations mog appears safe say designed high online transaction processing needs mind 
move front list jon crowcroft proposed maintaining linear list move front heuristic pcb moved front linear list 
gives schematic list just arrival packet connection gives schematic list just arrival 
note pcb pulled front list 
head crowcroft pcb list arrival heuristic consequences slight increase number pcbs searched tcp packet representing entry new transaction substantial decrease number pcbs searched transport level probability user offer transaction deliver transport level response millisecond interval probability users remote 
head crowcroft pcb list arrival tcp packet representing response 
decrease results significant reduction overhead compared bsd algorithm 
typically users entered transaction user call jon thinktime interval 
users pcbs precede jon list 
analytically probability user having entered transaction interval time gamma user average transaction rate transactions second 
expression just cumulative distribution function exponential distribution 
expected number users total users jon enter transaction time gamma gamma gamma gamma delta gamma gammai factor gives number users preceding jon binomial factor gives number different groups users formed gamma users jon gamma gamma delta probability users precede jon gamma gammai probability rest users follow jon 
multiplying summing results weighted average averaged rest factors comprise weight gives expected number users precede jon 
shows plot equation users 
probability jon think time interval width dt centered time approximately ae dt approximation gets better dt gets smaller 
expression just distribution function exponential distribution ignore dt 
think time transport level response jon transaction jon current transaction greater response time situation shown 
packet arrives interval cause pcb user jon placed head chain 
packet arrival may caused directly arrival new number users entering transactions time transactions user seconds tpc users oe oe jon response ack jon current txn user txn user response ack oe ro think time greater response time transaction user indirectly arrival new transaction user 
indirect arrival illustrated lower line user transaction arrives interval corresponding response sent time denoted interval ro provoking transport layer direct indirect case user pcb precede jon current transaction arrives 
expected number pcbs line ahead jon 
probability think time interval width dt surrounding corresponding weight weighted average yielding expected number pcbs preceding jon just 
hand think time transport level response jon transaction jon current transaction response time situation shown 
packet arrives interval cause pcb user jon placed head chain 
packet arrival may caused directly arrival new transaction user indirectly arrival new transaction user tr 
indirect arrival illustrated lower line user transaction arrives interval tr correspond oe oe oe tr jon response ack jon current txn user txn user response ack oe ro think time response time ing response sent time denoted interval ro provoking transport layer direct indirect case user pcb precede jon current transaction arrives 
expected number users line ahead jon resulting weight 
integrating combined expression zero infinity gives expected number pcbs preceding jon transaction entry arrives exponentially distributed think time see equation page 
result tps benchmark pcbs corresponding response times seconds respectively note seconds maximum allowable average response time tpc benchmark 
performance somewhat worse bsd algorithm pcbs 
note tpc worst case think times deterministic exactly seconds crowcroft algorithm look pcbs transaction entry 
example system behavior central server polling clients seen point sale terminal applications 
crowcroft algorithm better response time interval shown schematically 
transactions arriving interval ac oe oe jon txn jon response ack response time interval number pcbs preceding jon arrives 
length pcb search pcbs response times seconds respectively 
performance crowcroft algorithm average performance initial transaction entry transport level response see equation page 
solving numerically users gives average search lengths pcbs response times seconds respectively 
search lengths represent significant improvement search length resulting bsd algorithm 
sent received cache craig partridge stephen pink proposed modifying bsd algorithm caches pcb corresponding packet sent packet received 
modification motivated mogul mog showed network traffic exhibits significant locality 
gives schematic pcb list packet sent connection received connection 
head sent rcvd sent received cache modification results significant change number pcbs searched tcp packet representing entry new transaction crowcroft algorithm gives substantial decrease number pcbs searched tcp packet representing response 
decrease results significant reduction overhead compared bsd algorithm tpc benchmarks relatively small number users 
analysis assumes receive cache examined send cache 
hit rate function think time response time network round trip time analysis derives number pcbs searched cases reception transaction reception transaction reception transport level 
average number pcbs searched packet reception note counts mutually exclusive events simply added causing nested average operation 
ae gamma gamma gamma gamma gamma delta gamma gamma gammai dt ae gamma gamma gamma gammaa gammaa gamma gammai dt crowcroft gamma gamma gamma gamma gamma ar delta gamma ar gamma gammai ae gamma gamma gamma gamma gamma delta gamma gamma gammai dt ae gamma gamma gamma gammaa gammaa gamma gammai dt case suppose user call stephen entering transactions user call craig trying enter transactions flush pcb corresponding stephen connection cache drive hit ratio zero 
illustrates way craig accomplish 
time stephen enters transaction response craig transaction flushed stephen pcb send receive caches 
stephen txn rsp nxt txn pq pq pq server craig txn rsp pq pq craig time transaction packet arrives server stephen response packet transmitted stephen packet arrived 
case craig transport level flush stephen pcb send cache 
transport level craig response arrive stephen transaction 
flush stephen pcb receive side forcing full craig timed transaction arrive server transport level stephen response arrived transaction completely flush stephen pcb cache 
short craig transaction arrives server time interval length arrival stephen transactions craig succeed flushing stephen pcb caches 
probability craig doing tpc benchmark just gamma gammaa probability gamma users stephen gammaa gamma stephen cache survives pcb need examined sides cache hold stephen pcb 
pcbs searched cached pcbs pcbs chain average 
expected number pcbs searched value think time shown equation 
gammaa gamma gamma gammaa gamma noted section probability tpc think time interval size dt centered value ae dt integrating quantity ae gammaa gamma gamma gammaa gamma dt multiplied equation interval interest gives expected number pcbs searched see equation page 
integrating simplifying yields gammaa gamma gammaa gamma equation may strange number pcbs searched decreases increasing response time round trip delay 
reason constrained greater case 
exponential distribution means larger values occur overwhelms increased rate caused large values case stephen think time greater response time plus round trip delay pcb cache survive intervening transaction 
shows happen receive side cache live stephen transaction arrives 
stephen txn rsp nxt txn pq pq pq server craig txn rsp pq pq order fully flush stephen pcb cache craig cause packet arrive server interval duration arrival transport level stephen response arrival stephen transaction 
craig arrange having transaction arrive interval interval duration begins time units interval 
probability craig doing tpc benchmark just gamma gamma probability gamma users stephen gamma gamma receive side cache examined penalties exactly case 
expression combined tpc think time integrated interval interest see equation page 
equation may integrated simplified shown equation 
gamma gammaa gamma gamma gamma gammaa gamma response time round trip delay number users increase number pcbs searched approaches 
words stress cache increases performance converges uncached linked list plus overhead imposed cache 
case suppose craig trying flush stephen pcb cache transport level stephen response search full pcb list 
way craig accomplish illustrated 
craig timed transaction response packet flush stephen pcb send side cache craig transaction packet flushed stephen pcb receive side cache 
craig time transaction arrive interval length transmission stephen response packet reception corresponding transport level 
craig windows duration enter transaction 
probability normal tpc user hitting windows gamma ad assuming send side cache examined processing acknowledgment hit penalties identical cases 
examining receive side cache sense tcp data packets examining send side cache sense tcp packets 
ae gamma gamma gamma gamma gamma dt stephen txn rsp pq pq server craig txn rsp pq pq transport level assumed constant integration required expected number pcbs searched simply gamma gamma ad gamma increase expression approaches expected 
decreases zero decreases expression approaches just number accesses required check send side cache 
result substituting expressions equation simplifying yields result shown equation shown page 
expression approaches just increases expected 
solving numerically users roundtrip delays milliseconds gives average search lengths pcbs respectively 
algorithm extremely insensitive value large values short round trip delays significantly better bsd algorithm roughly order crowcroft algorithm 
sequent sequent algorithm maintains simple linear list hash chains containing cache containing pcb hash chain 
shows schematic data struc similar approach suggested tcp ip mailing list lance vis 
ture just arrival packets connections bn 
note hash chain empty cache points 
head cache head cache head bn cache sequent pcb list hit rate pcb cache number hash chains 
rate comes just installation default hash chains running tpc tps benchmark 
worst case cost linear search scanning pcbs installation default number hash chains 
average number pcbs examined just hit cache additional probability hit just probability gamma tempting assume gamma delta gamma bsd approaching large decreased number pcbs serviced cache greatly increases probability packets arriving server transaction response time interval 
probability packets arrive response time interval shown gamma ar gamma seconds transaction tpc benchmark response time interval number tpc users number hash gamma gamma gammaa gamma gamma gamma gamma ad gamma chains 
probability user benchmark millisecond response time hash chains 
decreasing number users response time increasing number hash chains greatly increase probability 
example number hash chains increased probability increases 
compare quite favorably theta gamma probability single chain bsd algorithm 
packets arrive response time interval single cached pcb need examined 
pcbs examined average 
transport level acknowledgment packet search gamma ar gamma gamma gamma ar gamma pcbs average 
assuming negligible loss rates half packets expected number pcbs search mean equations shown equation page 
equation yields average cost linear scan pcbs tpc tps benchmark hash chains millisecond response time 
contrast equation predicts little error 
error gets larger smaller numbers users smaller response times larger numbers hash chains exceeding hash chains substituted previous example 
equation predicts order magnitude improvement bsd algorithm crowcroft proposed algorithm partridge pink proposed algorithm amenable sizes current chip data caches 
course system administrator may increase value order get better performance expense small increase memory hash chain headers 
hit ratios percent typical tpc run ratios high observed 
runs done old versions database software sent times packets transaction necessary 
fact extra packets arrived simultaneously hit rate high 
number pcbs searched transaction large software exhibiting poor hit ratios due efficient network resources 
focusing strictly hit ratio common pitfall 
hit ratio part story just example penalty dominates hit ratio 
comparison plots cost pcb search number tpc users 
lines labelled mtf mtf mtf show performance crowcroft move front algorithm response time seconds respectively 
line labelled sr shows performance partridge pink send receive cache roundtrip time millisecond 
crowcroft move front expected length tcp pcb search number tpc tcp connections bsd sr mtf mtf mtf sequent comparison tcp demultiplexing algorithms algorithm significantly better stock bsd algorithm improves response time decreases 
partridge pink send receive cache algorithm significantly better stock bsd algorithm small numbers users see approaches bsd algorithm performance large numbers users 
behavior due fact send receive cache relies packet trains rarely occur large tpc benchmarks 
sequent algorithm roughly order magnitude better algorithms 
added cost sequent algorithm bsd memory required hash chain headers computation hash function 
memory decreasing rapidly price efficient hash functions protocol addresses known jai mck 
imagine combining move front hash chains 
better results obtained simply increasing number hash chains 
example number hash chains example increased average number pcbs searched drops 
improvement compares favorably best gamma gamma ar gamma gamma expected length tcp pcb search number tpc tcp connections bsd sr sr mtf mtf mtf sequent comparison tcp demultiplexing algorithms detail case factor improvement obtained adding move front 
relatively small number hash chains reduce pcb lookup overhead insignificant fraction packet reception overheads little motivation combine moveto front 
addition reduction pcb searching reduces need add connection ids tcp tp xtp 
protocols allow communicating hosts negotiate value pair small integers called connection ids data packet header 
connection ids typically directly index array pcbs completely eliminating need search 
cheaper search provided hashing eliminates motivation connection ids hosts significant packet processing required tpc analytic approximations available describe behavior various tcp demultiplexing algorithms tpc style traffic 
approximations show heads data entry applications benchmarks result poor performance bsd tcp demultiplexing note number users usually sharply limited factors memory size swap space disk bandwidth 
system really support infinite number users argument valid 
gorithm 
significant improvement obtained jon crowcroft move front modification algorithm craig partridge stephen pink sender receiver scheme order magnitude improvements result application hashing techniques sequent tcp product 
approximations qualitatively confirmed benchmarks 
sequent algorithm greatly reduces need add new features protocol connection ids eliminate need search pcbs 
fact far clear improvement win widespread acceptance combined significant new capabilities 
example features allowing applications specify bandwidth delay requirements may necessary multimedia applications 
cro jon crowcroft 
re inefficient demultiplexing tcp ip 
message id ucl cs uucp tcp ip list december 
dov ken dove 
high capacity tcp ip parallel streams 
conference proceedings london june 
fel david 
multiplexing issues communication system design 
sigcomm symposium pages philadelphia pa september 
gar arun garg 
parallel streams 
usenix conference proceedings berkeley ca february 
gra jim gray 
benchmark handbook database transaction processing systems 
morgan kaufmann 
hj john hennessy norman jouppi 
computer technology architecture evolving interaction 
ieee computer pages september 
hl frederick gerald lieberman 
operations research 

jac van jacobson 
congestion avoidance control 
sigcomm pages august 
jai raj jain 
comparison hashing schemes address lookup computer networks 
technical report dec tr digital equipment february 
jr raj jain shawn 
packet trains measurements new model computer network traffic 
ieee journal selected areas communications sac september 
mck paul mckenney 
stochastic fairness queuing 
internetworking theory experience 
mog jeffrey mogul 
network locality scale processes 
proceeding sigcomm zurich september 
pos postel 
transmission control protocol 
technical report rfc network information center sri international september 
pp craig partridge stephen pink 
faster udp 
swedish institute computer science report august 
sc harold stone john cocke 
computer architecture 
ieee computer pages september 
vis lance 
re inefficient demultiplexing tcp ip 
message id visser convex convex com list december 
