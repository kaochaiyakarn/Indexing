composition patterns approach designing reusable aspects clarke department computer science trinity college dublin republic ireland 
clarke cs tcd requirements distribution tracing impact multiple classes system 
cross cutting requirements aspects 
support necessity scattered multiple classes 
look individual class may show support cross cutting requirements tangled core responsibilities class 
scattering tangling object oriented software difficult understand extend reuse 
design important activity software lifecycle documented benefits benefits reduced cross cutting requirements 
presents means mitigate problems separating design cross cutting requirements composition patterns 
composition patterns require extensions uml combination model composing separate overlapping designs uml templates 
demonstrates composition patterns map programming model provides solution separation cross cutting requirements code aspect oriented programming 
mapping serves illustrate separation aspects may maintained software lifecycle 
software design important activity software lifecycle benefits documented 
include early assessment technical feasibility correctness completeness requirements management complexity enhanced comprehension greater opportunities reuse improved evolvability 
practice object oriented design models useful lifetime software systems benefits suggest 
described structural mismatch requirements specifications objectoriented software specifications cause reduction proceedings icse robert walker department computer science university british columbia main mall vancouver bc canada 
walker cs ubc ca expected benefits design 
single requirement distribution synchronisation may impact number classes system support scattered multiple classes 
requirements described cross cutting requirements aspects 
hand single class system may show support multiple requirements tangled core responsibilities class 
scattering tangling negative impact development lifecycle comprehensibility traceability evolvability reusability points view 
subject oriented design model removes structural mismatch decomposition capabilities support separation design requirement different design models called design subjects 
decomposition manner removes requirement scattering tangling properties software design removing negative impact 
corresponding composition capabilities supported subject oriented design model 
primary contribution specification means capture reusable patterns cross cutting behaviour design level composition patterns 
composition pattern design model specifies design cross cutting requirement independently design may potentially cross cut design may re may required 
composition patterns combination subject oriented model decomposing composing separate potentially overlapping designs uml templates 
section motivates need composition patterns 
composition patterns model described section section providing examples known cross cutting behaviours designed truly reusable 
secondary contribution programming model supports cross cutting behaviour aspect oriented programming supported design level composition patterns 
support serves illustrate separation aspects may maintained software lifecycle 
suggested mappings constructs particular aspect oriented programming language aspectj illustrated section 
sections related respectively 
motivation motivate need composition patterns simple example requiring operations traced run time 
tracing particularly pervasive requirement potentially impacts operation class system 
means separate design potential scattering tangling system enormous 
simplified design tracing operation class contained fig 
uml 
trace string string collab foo foo foo name foo trace basic foo behaviour goes foo name fig 
pervasive trace design structural design perspective design elements supporting tracing may separated class trace class requiring trace behaviour may depend 
design trace behaviour operations separation possible maintain 
interaction diagram see foo operation class invoked immediately calls operation class trace parameter denoting name entered method foo 
likewise foo operation finished return calls operation class trace 
operations requiring trace behaviour need designed analogously 
design number difficulties 
new operation requiring trace behaviour specify interaction model indicating tedious errorprone process 
secondly changing eliminating trace behaviour design requires changes operation interaction models 
reuse design different system straightforward 
structurally trace class may simply copied trace behaviour re defined interaction specification operation traced 
composition patterns mitigate problems supporting separate design reusable cross cutting requirements 
composition pattern supports design cross cutting requirement independently design may potentially cross cut specification design may re may required pattern composition 
composition patterns model composition patterns introduced depth discussion part subject oriented design model 
combination design model decomposing composing separate potentially overlapping designs uml templates 
subject oriented design model supports separate design models independent views called design subjects denoted subject stereotype uml package 
design subjects may specify cross cutting behaviour composed design subjects subject oriented design model parameterising design subject providing mechanism binding parameters model elements design subjects specify composition cross cutting behaviour base designs reusable way 
specifying templates uml defines template parameterised model element directly design model 
may basis generate model elements binding dependency relationship 
binding relationship defines arguments replace template parameters template model element 
uml orders template parameters dotted box template class 
composition pattern design subject potentially multiple pattern classes classes placeholders replaced real class elements representation template parameters pattern classes combined single box placed subject box 
box template parameters grouped class class grouped brackets 
subject trace trace string string 

fig 
specifying templates trace composition pattern fig 
illustrates composition pattern pattern class denoting class may supplemented trace behaviour 
template parameter defined pattern class called represents operation requiring tracing behaviour 
standard class called trace included design 
design tracing behaviour contained trace composition pattern model pattern class template operation required 
specifying cross cutting behaviour cross cutting behaviour essentially supplements merges behaviour cuts 
subject oriented design model supports merging operations allowing designer identify operations different design subjects correspond merged 
means execution corresponding operations results execution corresponding operations 
achieved model generation interaction model realizing composed operation delegating corresponding renamed input operations 
semantics utilized specification patterns cross cutting behaviour 
designer may explicitly refer input composed operations separately 
designer defines input operation template parameter refers actual replacing operation pre pending underscore template name 
generated output operation referenced name pre underscore 
subject trace collab 
trace name 
name fig 
specifying patterns cross cutting behaviour parameter usage op case replacing operation parameters 
op 
replacing operation may signature 
op type 
replacing operation may signature pattern needs type object execution 
table parameter scope specified composition pattern fig 
pattern class execution operation replaces 
template output subject result execution execution replacing operation execution execution replacing operation 
parameter specification 
indicates operation signature may replace template 
parameter possibilities defined table 
trace composition pattern subject effectively specifies merging trace behaviour operation replacing 
composition binding specification subject oriented design model defines composition relationship support specification different subjects may integrated composed output uml defines binding relationship template specifications elements replace templates 
uml restricts binding template parameters instantiation 
composition patterns model combines notions extending standard composition relationships bind attachment defines potentially multiple elements replace templates composition pattern 
ordering parameters bind attachment matches ordering templates pattern template box 
individual parameter surrounded brackets indicates set elements potential size replace corresponding template parameter 
subject trace bind subject foo fig 
specifying binding composition fig 
classes replacements pattern class operation denoted class example just supplemented pattern behaviour specified 
specific elements classes replace templates may explicitly named 
composition output illustrated fig 
composition relationship bind attachment may specify multiple replacements pattern classes template operations classes 
multiple replacements specified pattern class pattern class properties added replacement classes output subject 
example fig 
class class properties 
multiple replacements specified operations operation supplemented behaviour defined pattern subject 
non elements added result scope 
example non pattern classes added result 
class trace non pattern class defined trace composition pattern see fig 
appears output subject 
trace subject traces string string collab foo foo foo foo foo name foo foo name trace fig 
output composition trace subject pair operations defined referenced pattern class template parameter class composition applies merge operation semantics 
operation substituting template operation replaced suitably renamed substituting operation new interaction defined 
operation delegation semantics realized new collaboration specified composition pattern 
implications composition relating design model demonstrated example discussed 
example merging generalizations may result multiple inheritance composed subject single inheritance input subjects 
multiple inheritance supported uml eliminated process flattening process automated composition 
composition design subjects occur design phase design composition tool example useful purposes checking semantics composed subject correctness composition relationships 
implementation may composed design ideally composition delayed implementation phase design subject implemented separately composed 
discuss means delaying composition process implementation phase section 
aspects patterns examples look examples known aspects designed composition patterns 
examples illustrate cross cutting requirements may designed independently base design making aspect design truly reusable 
aspects illustrated synchronisation observer pattern 
library base design base design aspect examples applied small library design see fig 

library books copies located room shelf 
book manager handles maintenance association books locations 
book manager maintains date view lending status book copies 
subject library copies bookcopy borrow return book name author isbn getname bookmanager location add book remove book search book bookcopy bookcopy bookcopy fig 
base library design example synchronisation aspect cross cutting requirement book manager handle requests manage books locations concurrently 
aspect example described supports book manager handling read requests concurrently temporarily blocking write requests 
individual write requests block services 
pattern specification synchronisation concurrent processes common requirement useful design behaviour library example 
fig 
illustrates achieved 
synchronize composition pattern pattern class representing class requiring synchronisation behaviour 
subject synchronize collab read 
wait read 
collab write 
pattern class template parameters defined called read 
write represent reading writing operations 
example illustrates non template elements may specified pattern class define inherent cross cutting behaviour 
elements merged unchanged composed class 
synchronisation behaviour introduces number elements structural behavioural synchronised classes 
structural properties activereaders maintain counts number read write requests currently process write number 
interaction patterns define required behaviour reading writing 
read pattern ensures currently writing process complete prior processing read request 
write pattern ensures currently reading writing processes complete prior processing write request 
designer represents actual replacing read write operations prepended template parameter name read 
write generated operations realized interactions read 
write 
way replacing operation executed context synchronisation required behaviour clearly defined interactions 
pattern binding specifying compose library base design subject synchronize composition pattern simple matter defining composition relationship denoting class es supplemented synchronisation behaviour read write operations synchronised 
case library bookmanager class replaces pattern class output add remove operations defined write operations search operation defined read see fig 

wait write 
fig 
synchronisation aspect design subject synchronize write read activereaders int int concurrent concurrent wait concurrent write 
write 
read 
read 
write read subject library bind bookmanager add remove search fig 
composing synchronize library composition output pattern specification binding previously illustrated designer define truly reusable aspects patterns specify composed base designs 
composition process utilizing uml template semantics produces design illustrated fig 
bookmanager synchronising behaviour 
note object names interactions renamed appropriate 
example observer aspect second example observer pattern synchronisation example describes pattern collaborative behaviour object subject observers 
example illustrates non pattern classes may composition pattern 
pattern specification observer composition pattern pattern classes defined 
subject defined pattern class representing class objects changes state interest objects observer defined pattern class representing class objects interested subject change state see fig 

subject observer subject remove add bookmanager add wait library add search search bookmanager subject astatechange observer update start subject subject subject object object astatechange 
astatechange 
notify observers collab astatechange subjects vector subject action subject notify astatechange notify update observer post observers subject observers sent update event observer update start subject 
start subject 
subject 
subject 
fig 
observer aspect design wait interaction fig 
illustrates example specifying behaviour cross cuts templates subject template parameter astatechange 
supplemented behaviour relating notifying observers changes state 
achieved referring actual replacing operation prepended astatechange 
library search bookmanager activereaders int int fig 
library design synchronize bookcopy bookcopy add book library add book remove book library remove book search book library search book concurrent concurrent wait concurrent book name author isbn getname location copies bookcopy borrow return example operation template parameter require delegating semantics 
update operation observers simply called pattern supplemented 
defined template replacing observer classes may specify operation performs task 
pattern supports addition removal observers subject list start subject 
subject 
template parameters replaced operations denoting start respectively observer interest subject 
space reasons interactions illustrated illustrate additional interesting properties composition pattern model 
pattern binding synchronize pattern specifying composition library observer pattern done specifying composition relationship defining class es acting subject class es acting observer 
example see fig 
bookcopy bookmanager respectively 
subject observer subject astatechange observer update start subject subject subject library bind bookcopy meta false bookmanager fig 
composing observer library additional point interest binding meta properties design subject elements may queried assess element eligibility join set replacing elements 
uml operation metaclass defines properties operations coding languages example addition signature designer may specify operation query operation 
composition patterns model supports discrimination replacing operations basis design element properties 
example astatechange template parameter replaced operations bookcopy defined non query operations affect change state may interest observer 
keyword meta set parameter specification denotes uml queried operations false replace astatechange purposes observer composition output output composing observer library illustrated fig 
shows bookcopy demonstrating subject behaviour operations borrow return initiating notification observers state changing operations 
bookmanager observer defined operation called notification purposes 
shown 

initiate bookcopy adding removing bookmanager list observers 
map aspectj previous section illustrated output resulting integration composition patterns base design models 
course output demonstrates tangling properties aspects designed avoid 
composition design level useful validate subject collab return collab borrow borrow bookcopy action bookcopy notify library borrow bookmanager notify post observers bookcopy observers sent event vector design composition pattern impact base design possible maintain separation code phase appropriate implementation model 
conceptually subject oriented design evolved subject oriented programming 
efforts development tool support multi dimensional separation concerns evolved subject oriented programming currently centred hyper 
precise mappings constructs composition patterns constructs hyper done expected relatively straightforward 
demonstration independence composition patterns design model particular programming model section looks mapping composition pattern concepts aspect oriented programming paradigm 
conceptual level composition pattern design aspect oriented programming goals 
composition patterns provide means separating designing reusable cross cutting behaviour aspectoriented programming provides means separating programming reusable cross cutting behaviour 
section introduces possibilities mapping composition pattern constructs current aspect oriented programming constructs 
research development technology support aspect oriented programming paradigm currently centred aspectj synchronisation example assess composition patterns map aspectj programming constructs 
aspectj programming elements aspectj aspect oriented extension java supports programming cross cutting code aspects separate aspect programs 
described aspectj adds kinds program elements java 
aspect pointcut piece advice 
observers bookcopy object object borrow library borrow return library return notify bookmanager fig 
library design observer subjects copies bookcopy library bookcopy bookcopy library bookcopy add book remove book search book book name author isbn getname location element aspectj composition patterns aspect aspect cross cutting type welldefined interface may instantiated reasoned compile time 
keyword aspect pointcut execution program part execution scope points cross cutting behaviour required 
points join points 
pointcut cross cutting set join points 
keyword pointcut advice piece advice code executes pointcut execution scope 
keywords programming element attribute constructor method added type may add extend type structure 
keyword composition pattern subject design equivalent aspect 
operation template parameters may defined referenced interaction specifications denoting join points cross cutting behaviour 
templates may replaced actual operations multiple times equivalent pointcuts 
interaction diagram cross cutting behaviour may specified execute template operation called 
behaviour equivalent advice code 
design elements template elements may defined composition patterns 
may classes attributes operations relationships equivalent 
table mapping aspectj program elements composition pattern elements table describes elements maps corresponding design elements composition patterns 
synchronize aspectj synchronize composition pattern fig 
composition specification library subject fig 
provides information required structure aspect program 
composition pattern class defined pattern class replaced concrete design class 
composition relationship binding specification indicates bookmanager replaces pattern non pattern elements defined introduced bookmanager relating write operations discussed space reasons 
public aspect synchronize bookmanager int int activereaders private void private void protected synchronized void protected synchronized void wait composition pattern name may aspect declaration 
operation template parameter defined synchronize write may seen pointcut replacing classes 
composition relationship synchronize library indicates bookmanager operations add book remove book replace write 
regards advice code interaction sequence diagrams specified synchronize composition pattern indicate advice operations called relative template operations 
directly translate constructs aspectj advice element 
information maps programming elements aspects public aspect synchronize pointcut write bookmanager instanceof receptions void book void book bookmanager write bookmanager write example illustrates possibilities mapping composition pattern constructs aspectj programming elements 
advantages fold 
design perspective mapping composition pattern constructs constructs programming environment ensure clear separation cross cutting behaviour maintained programming phase making design changes easier incorporate code 
secondly programming perspective existence design approach supports separation cross cutting behaviour design phase relevant kind programming lending standard benefits software design approach 
related conceptually subject oriented design composition patterns model evolved programming 
different subjects may designed programmed support separate requirements functional conceptually overlapping cross cutting requirements 
subsequent composition separated subjects specified composition relationships defined composition rules subject oriented programming 
composition patterns reusing cross cutting behaviour subject oriented design typically requires detailed specification multiple composition relationships instance reuse tedious error prone process simple 
perspective cross cutting requirements illustrated subject oriented design composition patterns model closely relates aspect oriented programming model 
approaches flexible separation concerns programming level space precludes inclusion 
interesting approaches start aspect oriented programming paradigm attempt extrapolate ideas extensions uml 
general approaches evolving 
hand approaches extending uml stereotypes specific particular aspects synchronisation command pattern 
approaches constructs required particular aspect stereotyped weaver automated composition tool determine elements match appropriate aspect construct 
examples behavioural details synchronisation command pattern explicitly designed uml onus appears weaver provide aspect behaviour 
general approaches attempt generalised way support aspect oriented programming uml 
example new called aspect created stereotypes defined advice behaviour 
operations requiring advice behaviour constrained advice stereotypes 
composition patterns model distinguishes general approaches generic approach designing re usable cross cutting behaviour manner independent particular programming environment 
approaches emphasise flexible separation concerns exists standard object oriented design catalysis 
role modelling large systems described multiple different role models may synthesised create derived models 
similar merge integration subject oriented design 
catalysis supports decomposition software designs vertical horizontal lines providing ability separate functional technical kinds concerns 
approaches provide advances separation capabilities object oriented design addresses specification composition patterns cross cutting behaviour 
focus field collaboration design separation roles classes may play different collaborations different modules 
example modularisation roles collaborations supported mixins described utilising template class role collaboration complete classes composed placing mixins hierarchy 
extended overcome problems scalability grouping sets roles collaboration 
main drawbacks approaches relative composition patterns model 
classes mixed simply adding mixins class hierarchy individual methods part reason tool support needed aspect oriented programming 
secondly mixins interdependent needs tangle dependencies embedding details dependencies mixin typically explicit calls super methods constraint information 
situation prior knowledge changes unknown dependencies require error prone modifications pre existing mixins 
result mixin designed cleanly independently composition patterns allow 
need advanced separation concerns development lifecycle described motivated agent product line component development commerce 
development process proposed draws high level analysis design separation techniques corresponding supporting implementation techniques 
composition patterns provide solution designing cross cutting features re usable way considered inclusion development process 
software design important activity development lifecycle benefits realized 
scattering tangling cross cutting behaviour elements causes problems comprehensibility traceability evolvability reusability 
attempts address problem programming domain problem addressed effectively earlier stages lifecycle 
presents approach addressing problem design stage composition patterns 
composition patterns combination merge integration subject oriented design uml templates 
examples illustrate flexible reusable nature composition patterns design approach cross cutting behaviour 
illustrates separation aspects composition design models may specified 
impact possible composition design stage demonstrated 
illustrates separation may maintained programming phase mapping composition patterns model constructs aspectj constructs 
ideas evolved subject oriented programming ease concepts mapped aspect oriented programming constructs cross cutting behaviour illustrates closely tied particular programming paradigm 
insulated changes programming environment constructs 
addition extensions uml minimal possible standard uml constructs templates 
composition patterns intuitive uml designers 
tool support essential successful usage primary foci inclusion support composition patterns design tool 
automation mapping programming environments aspectj useful 
don batory anonymous reviewers comments early drafts 

clarke 
composing design models extension uml 
proc 
international conference uml pp 


clarke 
composition object oriented software design models 
phd thesis dublin city university january 

clarke harrison ossher tarr 
subject oriented design improved alignment requirements design code 
proc 
oopsla pp 


cook daniels 
designing object systems object oriented modelling 
prentice hall 

souza wills 
objects components frameworks uml 
catalysis approach 
addison wesley 

gamma helm johnson vlissides 
design patterns 
elements reusable object oriented software 
addison wesley 

griss 
implementing product line features composing component aspects 
proc 
international software product line conference pp 


harrison ossher 
subject oriented programming critique pure objects 
proc 
oopsla pp 


nchez 
introducing separation aspects design time 
proc 
aspects dimensions concerns workshop ecoop 

ho quel plouzeau 
aspect oriented design uml 
proc 
multi dimensional separation concerns workshop icse pp 


kiczales lamping mendhekar maeda lopes loingtier irwin 
aspect oriented programming 
proc 
ecoop pp 


lopes kiczales 
language framework distributed programming 
technical report spl 
xerox parc 
www parc 
xerox com csl projects aop 

omg 
unified modeling language specification 
version june 

ossher kaplan katz harrison kruskal 
specifying subject oriented composition 
theory practice object systems 

wold 
working objects 
software engineering method 
manning publications 

smaragdakis batory 
implementing layered designs mixin layers 
proc 
ecoop pp 


suzuki yamamoto 
extending uml aspects aspect support design phase 
proc 
aspect oriented programming workshop ecoop 

tarr ossher 
hyper user installation manual 
www research ibm com hyperspace 

notkin 
role components implement collaboration designs 
proc 
oopsla pp 


walker 
eliminating cycles composed class hierarchies 
technical report tr dept computer science univ british columbia 

xerox 
aspectj design notes 
www aspectj org 
