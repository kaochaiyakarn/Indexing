performance public key enabled kerberos authentication large networks alan pec solutions pec com proposals public various stages secret key kerberos network authentication protocol 
computational requirements public key cryptography higher secret key cryptography substitution public key encryption algorithms secret key algorithms impacts performance 
uses closed class switching queuing models demonstrate quantitative performance differences pkcross pktapp proposals public key enabling kerberos 
analysis shows pktapp efficient authenticating single server pkcross outperforms simpler protocol remote servers remote realm 
heuristic guide high level protocol combines methods authentication improve performance 

kerberos mature reliable secure network authentication protocol 
kerberos secret key encryption technology 
native network authentication protocol microsoft windows operating system may candidate general purpose authentication protocol large user communities internet 
proposals developed add public key cryptography various stages kerberos protocol large user communities public key infrastructures 
computational requirements public key cryptography higher secret key cryptography 
result substitution public key encryption algorithms secret key algorithms impacts performance 
daniel george mason university cs gmu edu examines performance impacts pkcross pktapp proposals substitute public key cryptography client server authentication kdc kdc key distribution center inter realm authentication kerberos 
context analysis large network application hosts participating authentication process 
section provides background information kerberos proposals public key enable kerberos 
section describes performance modeling techniques analyze pkcross pktapp section analyzes performance implications 
sections describe related analysis suggest areas research 

kerberos public key variants basic operation kerberos kerberos network authentication scheme early needham schroeder 
popular kerberos standards exist version version 
considers current version variations 
kerberos divides world realms single primary key distribution center back applications servers user workstations 
single realm corresponds community interest single security policy 
detailed descriptions kerberos protocol operation exist repeated 
briefly client alice engages authentication obtain access application server bob 
alice obtain ticket granting ticket tgt centralized ticket granting service tgs offered kdc 
uses tgt obtain service ticket bob 
presents service ticket bob authenticates demonstrating knowledge secret session key securely passed kdc 
truly large enterprise may consist realms alice may wish gain access application server remote realm 
support cross realm authentication alice kdc remote kdc direct indirect trust relationship kerberos version requires direct trust relationship 
trust relationship implemented sharing symmetric keys 
trust relationship exists alice may gain access remote server requesting ticket remote realm kdc local kdc 
receive ticket data structure encrypted kdc pair shared symmetric key remote tgs 
presents ticket remote kdc receive service ticket application server remote realm 
motivation add public key cryptography kerberos kerberos offers significant benefits network authentication protocol 
message formats defined session keys included encrypted portion message 
result kerberos servers need store session keys maintain security association client 
kerberos stateless state represented kerberos tickets 
extremely valuable standpoint scalability 
second benefit client user alice required provide password 
kerberos request messages contain authenticators encryption performed alice workstation 
result kerberos implements single sign mechanism 
potential limitation kerberos scalability reliance symmetric key encryption 
shared secrets established maintained user kdc application server kdc remote 
public key cryptography shifts key management kdc certification authority ca 
public key cryptography eliminates need establish large number shared secrets symmetric keys servers users 
scaling merits public key versus secret key systems definitively proven current proposals suggest adding public key cryptography kerberos changing key management model 
proposals add public key encryption kerberos internet drafts exist alternatives public key cryptography initial authentication kerberos public key cryptography cross realm authentication kerberos pkcross public key utilizing tickets application servers pktapp 
core specification 
pkcross pktapp variations message types data structures apply public key cryptography different kerberos authentication steps 

internet draft specifies considerable message content added initial kerberos version exchanges replace user secret key authentication public key authentication 
illustrates flow protocol 
client send public key certificate chain certificates specification establish trust user kdc relay user public key 
client send authenticating data structure signed client private key 
information included kerberos pre authentication fields defined specification support extensions protocol 
kdc verifies client identity verifying digital signature 
kdc replies client chain certificates kdc public key kdc digital signature session key encrypted client public key 
client confirm kdc identity verifying digital signature 
mandatory variations allow substitution certificate serial number certificate chain assuming kdc trusted copy user certificate diffie hellman establish session key 
drafts included interesting options storing user private key kdc allowing user generate session key 
allowing user generate session key reduce load kdc potentially change scaling characteristics 
fun ction initial tgt request kd public keys au client kdc ticket application server secret key encryption te re mote application serve secret key encryption pkcross 
addresses issue managing secret keys large number clients address issue key management large number realms 
logical extension public key encryption multiple realm kdc kdc 
subject pkcross internet draft specification 
illustrates possible flow pkcross authentication 
pkcross picks multiple realm authentication point client obtained tgt 
client may may authenticated local kdc shows secret key tgt request 
assume client requested access server remote realm 
local kdc initiates pkcross transaction appropriate remote kdc 
minor variations kdc kdc authentication performed protocol 
variation remote kdc responsible generating special symmetric key uses pkcross requests 
local kdc skip client alice req rep tgs req tgs rep local kdc ap req ap rep standard kerberos version message contains pa pk req field including standard kerberos version message contains pa pk rep field including 
transaction flow server bob explicit exchange remote kdc currently active valid tgt sealed special symmetric key 
client possesses remote tgt may request additional service tickets remote realm involving local kdc 
pktapp 
kerberos kdc issues tgs remote kdc server tickets realm 
authentication transactions transit kdc performance bottleneck 
secondary included system typically backups event primary kdc failure 
pktapp internet draft seeks eliminate potential bottleneck reduce communications traffic implementing authentication exchange directly client application server 
variation originally introduced publickey kerberos distributed authentication 
pktapp proposes implement specified message definitions exchanges 
ation fun ction initial se ke gt re que st kdc equ est ticket te gs pub lic key en kd cs stab session key equ est ticket te ap plication serve ll key en te re ote ap plication serve se key en client alice pktapp efficient protocol traditional kerberos message exchange perspective 
client may deal directly application server 
illustrates pktapp authentication message exchange 
req message message submitted client contains client certificate chain identity service ticket requested 
server response rep message contains server certificate chain session key encrypted server private key 
authentication client requests application service ticket kerberos version request 
entire authentication process reduced total message pairs 
public key extensions explicit requirement pre knowledge identity client kdc 
need pre establish shared secrets store user record kerberos database 
basis trust entities certificate chain 
protocols substitute public key infrastructure management mechanism lieu sharing secret keys 
additional processing requirements performance price paid time public key calculation substituted symmetric key calculation 
req rep tgs req tgs rep local kdc tgs req tgs rep req rep ap req ap rep 
pkcross transaction flow rem ote kdc standard kerberos version message includes pa pk req field standard kerberos version message includes pa pk rep pre authentication field server ob additionally public key messages larger corresponding kerberos version messages fragment draft recommends tcp underlying transport protocol 
udp significantly lower overhead protocol commonly secret key kerberos implementations 
closed queuing networks analyze protocol performance application server communications networks client workstations finite resources process workload kerberos authentication transactions executing 
way quantitatively analyze performance alternative public kerberos variants closed queuing networks represent system resource queuing discipline stochastic service distribution 
presents topology realm kerberos closed queuing network model 
customers circulate servers closed network sequentially wait service consume processing resources proceed service station 
lan wan ation fun ction service requ est app lica tio serve pu keys re au th nt nd serve 
topology realm kerberos closed queuing network model client alice req rep te ap plication ap req service ap rep 
pktapp transaction flow server bob standard kerberos version message includes pa pk req field standard kerberos version message includes pa pk rep pre authentication field local kdc remote kdc remote application server remote application server topology envisioned anticipates local kdc may connected client local area network lan remote kdc application server may connected wide area network wan 
mathematical solution queuing network produces metrics queuing station system metrics average number customers average delay time customer throughput 
metrics compare performance alternative kerberos proposals 
brute force mathematical solution closed queuing network obtained enumerating possible states possible combinations customers server solving simultaneous set equations representing balanced probability flow state 
called global balance solution 
practical number customers servers state space extremely large global balance equations impractical solve 
closed queuing network meets certain set criteria primarily concerning independence servers customers closed queuing network represented product form solution 
product form solution probability system state nk representing number customers servers proportional product marginal probabilities pi ni server ni customers 
product form queuing network solved efficiently large numbers servers customers 
typical problem solution approach practicality assumptions required achieve product form 
example difficult assume analyzing authentication protocols customers come served resource average service times 
public key encryption applied specific points protocol 
message undergoing public key encryption require processor service time message undergoing secret key encryption 
impractical assume messages arriving server experience average service time 
way dilemma assume server performing encryption follows processor sharing queuing scheme assume messages undergoing public key encryption different class messages undergoing secret key encryption implement class switching model transaction switch class requires different types encryption correspondingly different service times 
construction closed set customer classes forms independent markov chain product form solution maintained 
authentication performance problems large networks context analysis authentication large multi realm network 
consider example illustration 
intelligent software agent representing law enforcement official collecting information investigation 
agent visits line town halls virtual offices nationwide search evidence investigative intelligence 
agent show accepted electronic credentials 
source level credentials agent access records tightly controlled reasons confidentiality security 
agent may requested pay information electronic currency 
infrastructure support type electronic investigation require scalable robust authentication protocols 
intelligent agent probably transiting multiple security realms course cyber investigation 
pktapp pkcross candidates authentication protocol 
quick analysis conclude pktapp better performance characteristics agent authenticate directly application server message pairs 
agent may interested authenticating servers single realm case visit cyber town hall police station office 
agent uses pkcross expensive public key authentication required local kdc remote kdc 
provision tgt remote tgs secret key encryption calculations required 
application server realm ratio efficient pkcross protocol 
specific performance question explore circumstance efficient authenticate central kdc individual applications servers 

methodology analysis pktapp pkcross start implementations protocols 
unfortunately sources pkcross pktapp 
consequently began analysis building skeleton implementations protocols 
objective skeleton design consume computing resources similar actual implementations protocol resulting communications encryption message processing avoid complexities implementing real protocols 
example excluded error processing optional kerberos features skeleton 
implementation included detail servers clients servers shared resources 
developed skeletons standard rsa library public key encryption karn des library symmetric key encryption 
implemented application servers microsoft windows nt clients microsoft windows 
operating system specific extensions programs 
presents software architecture 
pkcross transaction client process steps standard kerberos authentication message sequence request service application server remote realm 
client workstation process udp datagrams client workstation process pkcross skeleton implementation udp datagrams eq rep thread local kdc kdc process rem ote kdc kdc process tg req ep thread tg eq rep thread kdc process pk eq ep thread application server app server process ap req rep thread pktapp skeleton implementation tcp connection udp datagrams application server app server pro ce ss pk req rep thread app server pro ce ss ap req rep thread th read na mes req rep initial eros tio re que sts nd re plies tg req rep les ros re que sts pk req ep ha pu key eros requ ests rep lies ap req rep eros app lica tio se 
pk enabled kerberos skeleton software architecture tcp connection primary purpose skeleton software client issue requests quickly confirm validity response timestamp transaction report response time statistics 
client side processing simplified focus shared resources application servers 
client process loop transactions purpose reporting average response time statistics 
single process runs local kdc accept client requests udp datagrams cross authenticate remote kdc 
processes run remote kdc waits standard kerberos requests arriving udp datagrams opens tcp listening socket waits transactions 
kdc application server processes multi threaded receive message dispatch thread process respond request 
final step transaction client authenticates application server ticket received remote kdc 
pktapp transaction client process role interacts server processes 
conducts exchange tcp connection multi threaded process obtains service ticket 
client completes authentication sending udp datagram kerberos version ap req message multi threaded process running physical server 
availability measurable skeleton versions pkcross pktapp followed step approach answer questions posed section concerning public key enabled kerberos variants 
establish test bed measure kerberos service times 
illustrates multi domain kerberos test mbps ethernet remote realm local realm application server remote kdc local kdc 
multiple realm kerberos test bed bed 
instrumented code ip layer packet monitor software monitors capture service times message sizes cross domain authentication transaction 
test bed uses simple lowlevel pcs clients servers connects mbps ethernet lan 
servers microsoft windows nt operating system clients microsoft windows operating system 

develop closed queuing network model kerberos authentication 
constructed queuing model similar topology illustrated represent operation kerberos version public key extensions 
queuing model uses class switching formulation service times varied step protocol 

calibrate queuing model test bed 
ran automated authentication scripts client workstation generate load servers 
measured transaction throughput response times levels workload submission 
entered similar workload profiles queuing model calibrate model test bed 
step demonstrated predictive accuracy queuing model 

execute model different numbers realms servers 
executed model varying numbers realms servers realm observe effects throughput response time 

analyze sensitivity changes service time network delay 
situations favoring pktapp pkcross performance depend capacity resources support protocols primarily server speed network delay 
varied parameters model order understand dependencies 
client workstations 
analysis model calibration flow pkcross pktapp transactions follows message exchanges illustrated figures 
baseline transactions constructed application host remote realm 
environment study large multi realm network assumed client certificates authentication parties store certificate serial numbers local copies certificates 
assumed remote server validate certificates chain corresponding certificate signed local ca certificate signed remote ca 
assumptions applied authentication local kdc remote kdc 
configured client application server implementations perform encryption operations bit rsa keys standard des 
table summarizes encryption operations performed 
number public private key operations authentication single application server identical 
pkcross requires secret key operations 
model predictive accuracy pkcross pktapp transactions shown figures respectively 
graphs demonstrate calibration model observed test bed results 
predicted response times throughputs percent measured results 
pkcross pktapp performance predictions calibrated model investigate performance increased number application servers 
number application servers increases number visits corresponding servers transaction increases 
pktapp transaction include additional set public key authentication calculations additional application server 
pkcross transaction public key authentication local remote realm regardless number application servers remote realm 
presents comparative performance transaction response time plotted function throughput pkcross pktapp protocols number application servers increased 
transactions pkcross represent authentication sixteen application servers remote realm 
transactions pktapp represent authentication servers remote realm 
expect uses similar example offered paragraph require authentication servers single realm 
transaction rates protocols increased response time unstable grew rapidly 
pkcross transaction bottleneck remote kdc processor processes running monitoring udp traffic listening transactions tcp connections handled half public key calculations kdc kdc exchange 
table 
summary encryption operation performed pkcross pktapp authentication transactions authentication 
private key 
public key 
secret key transaction pkcross operations operations operations client local kdc remote kdc application server totals pktapp client application server totals re sponse tim se cs re response sponse time tim secs se throughput throughput trans sec se cs 
calibration results pkcross transaction throughput throughput trans sec tra ns se 
calibration results pktapp transaction measured predicted meas 
rsp 
pred 
rsp 
re response sponse tim time se secs cs 
pp servers 
comparative pkcross pktapp performance bottleneck similar workload local kdc 
application server underutilized conducted final user authentication secret key encryption 
pkcross remain saturation point regardless number remote realm application servers participating authentication 
indifference pkcross protocol number servers remote realm clear 
analysis demonstrates pktapp significantly better performance choice single remote server pkcross significantly stable greater servers remote realm 
model accounts application server workload generated 
general application server carry additional processing workload 
added workload model pkcross look favorable 
sensitivity resource capacity pp servers call number servers realm favoring pkcross performance pktapp cross cross may vary server network capacity 
test bed constructed servers high performance network mbps local area network better performance typical internet connection 
crossover line pkcross servers throughput throughput trans sec tra ns se 
pp server repeated model variations studied section range server network performance 
increased performance application servers service times reduced orders magnitude 
result studied range processor performance varied spec cint rating low intel pentium processor high server 
network performance ranged lan speeds network throughput bytes second characterize slow internet links 
results fast processor slow network model documented 
analysis indicates performance benefits pkcross application servers accessed remote realm hold increased processor capacity reduced network throughput 
appear increased network delay favor pktapp pkcross includes message exchanges 
increased network delay result separation pkcross response time curves application server 
pktapp sends large messages carrying certification chains application server observe cross result 
re sponse tim se cs 

comparative pkcross pktapp performance increased server capacity decreased network throughput 
related pp servers servers pp servers developers security protocols encryption algorithms long recognized importance performance 
cases researchers applied complexity analysis evaluate algorithm performance measurement techniques analyze system performance 
protocol performance increasingly important topic security algorithms commonly production computing networking environments 
early examined impact security protocols network throughput seeking determine encryption calculations put damper rapidly increasing data rates 
identifies communications performance impacts basic security services authentication access control confidentiality integrity non repudiation 
begins exploration impacts constructing simple queuing model secure communications 
kerberos standard network authentication protocol open software foundation distributed computing environment dce analyzed context 
dce security services benchmarked analyzed 
performance characteristics kerberos loosely measured pilot applications results 
pkcross servers crossover line throughput throughput trans sec tra ns se 
pp server predominant role public key cryptography electronic commerce motivated performance studies 
peris look ways reduce impact private key encryption step transport layer security tls protocol 
almeida analytical modeling assess tradeoff performance security ecommerce applications protocols tls payment services set 
lambert performs high level benchmark supported analysis performance improvements anticipated elliptic curve cryptography commerce transactions 
previous authors analyzed publickey enabled kerberos benefit pkcross skeleton implementations 
result analysis contained speculative observations 

summary demonstrated validated analytical queuing models quantitative performance differences proposals public key enable kerberos pkcross pktapp 
analysis shows range server network capacity studied pkcross outperforms simpler protocol pktapp authenticating application server remote realm 
finding guide high level protocol combines pktapp pkcross improve performance 
high level protocol require application server provide support pktapp traditional kerberos 
require client know priori number servers authenticated realm 
requirement onerous 
application server support pktapp traditional kerberos known ports 
pktapp listening tcp socket 
kerberos awaiting udp datagrams 
client process searching information large number servers hit list process server 
allow client pktapp pkcross number servers realm 
type scenario fits criminal investigation example offered section 
analysis shown figures provides small range variation server network capacity 
development comprehensive heuristic selecting pkcross pktapp remains 
model evaluate performance larger variety encryption algorithms including comparison baseline secret kerberos aes version kerberos elliptic curve version public key enabled kerberos 
addition analysis conducted consider performance implications practical aspects key management pki crl distribution review 
shown class switching queuing formulation effective way quantitatively analyze performance protocols combine secret public key cryptography 
application analysis technique broader range protocols topic research 

needham schroeder encryption authentication large networks computers 
communications acm 
december 
kohl kerberos network authentication service neuman editor 
www ietf org rfc rfc txt number 
kaufman perlman network security private communication public world 
englewood cliffs new jersey ptr prentice hall 
schneier applied cryptography 
second ed 
new york john wiley sons 
broom survey secure multi domain distributed architectures queensland university technology faculty information technology 
rsa understanding public key infrastructure pki rsa security tung public key cryptography initial authentication kerberos january expiration www ietf org internet drafts draft kerberos pk init txt 
tung public key cryptography cross realm authentication kerberos www internic net internet drafts draft ietf pk cross txt 
public key utilizing tickets application servers pktapp www ietf org internet drafts draft ietf cat tapp txt 

chuang 
distributed authentication kerberos public key cryptography 
symposium network distributed system security 

san diego california ieee computer society press 
balbo computational algorithms closed queuing networks 
computer science library ed 
denning 
new york elsevier north holland gross harris fundamentals queuing theory 
third ed 
new york john wiley sons 
baskett open closed mixed networks queues different classes customers 
acm 

almeida capacity planning performance modeling 
englewood cliffs new jersey prentice hall johnson north american cryptography archives october accessed cryptography org cgi bin cgi 
karn index source des karn october accessed www org source des karn 
standard spec cpu benchmarks july www spec org osg cpu 
almeida capacity planning web performance 
prentice hall fast implementations pentium www esat kuleuven ac fast html 
schneier performance characteristics aes submission 
efficiency testing ansi implementations round candidate algorithms advanced encryption standard computer security division information technology laboratory national institute standards technology 
blaze high bandwidth encryption low bandwidth smartcards 
lecture notes computer science 
number 
security versus performance requirements data communications systems 

distributed computing environment www camb org dce 
dce authentication security services www org publications catalog htm 
performance study dce cell directory service implications application tool programmers 
lecture notes computer science 

stallings kerberos keeps enterprise secure data communications 


peris saha 
transport layer security really cost 
ieee infocom 

almeida scaling business technologies models performance capacity planning 
prentice hall 
lambert elliptic curve cryptography delivers high performance security commerce 
computer security journal 
xiv 

performance issues large distributed system security 
computer measurement group 

anaheim ca 
