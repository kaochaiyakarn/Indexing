line execution cc golog plans henrik gerhard lakemeyer department computer science aachen university technology aachen germany cs rwth aachen de previously plan language cc golog introduced purpose specifying event driven behavior typically robot controllers 
far cc golog usable projecting outcome plan unclear execute plans line robot 
provide execution model addition show interleave execution new kind time bounded projection 
way demonstrate typical robot control architecture high level controller communicates low level processes messages directly modelled cc golog 
rm rm actual trajectory approximation consider robot engaged delivery task move room room see 
modern robot architecture xavier simmons rhino burgard controller issue message low level navigation process telling new destination rm navigation process move robot desired location making intermediate goal points outside doorways nodes robustness 
executing plans intelligent robot controller able reason actions consider example better charge batteries continue delivery involve projecting outcome delivery task checking batteries power 
projection valuable designer robot controllers find program development executable satisfy certain goals execution 
lakemeyer proposed projection mechanism extension golog levesque featuring model time continuous change ability wait conditions arriving rm true 
tasks modelled quite naturally cc golog far remains unclear execute cc golog plan program plan program interchangeably 
get sense problem consider actions initiating moving just outside room waiting arrive 
cc golog actions effect setting location robot continuous linear function time approximate robot trajectory advance time point goal location reached respectively 
fine purpose projection called line execution de giacomo levesque effects simply inappropriate actual line execution 
robot control passage time actual trajectory follows function quite different idealized approximation see curved vs straight dotted line 
needed frequent sensor readings telling robot current time location models time passes robot moves 
waiting action simply reduce test goal reached 
minor complication actions part model low level process navigation need ignored execution action activates process 
projection cc golog far limited complete program starting initial state project fly execution similar search operator de giacomo levesque reasons efficiency go allow restricted projection program searches temporally limited horizon 
instance robot middle delivery near docking station want enable find coming activities allow operate minutes decide charge batteries 
show done 
show robot control architec ture high level controller communicates lowlevel processes messages modelled directly 
main advantage clear separation actions high level controller low level processes 
discuss changes necessary cc golog program line execution projection 
show time bounded projection mechanism defined interleaved execution 
rest organized follows 
section briefly review cc golog situation calculus cc golog 
describe model robot control architecture give example model low level navigation process 
sections discuss changes needed allow line execution cc golog programs line execution projection interleaved 
brief summary discussion related 
preliminaries situation calculus semantics cc golog extension situation calculus mccarthy go briefly basic situation calculus terms language sorts ordinary objects actions situations special constant denote initial situation situation actions occurred distinguished binary function symbol denotes successor situation resulting performing action relations truth values vary situation situation called relational fluents denoted predicate symbols situation term argument similarly functions varying situations called functional fluents denoted analogously special predicate poss state action executable situation language formulate theories describe world changes result available actions 
possibility basic action theory form levesque axioms describing initial situation action precondition axioms primitive action characterizing poss 
successor state axioms fluent stating conditions holds function holds situation take place called effect axioms provide solution frame problem 
domain closure unique name axioms actions 
foundational domain independent axioms 
consider extending basic situation calculus time continuous change lakemeyer note extensions intended purpose projections 
section discuss necessary changes allow line executions 
adding new sorts real time 
similar pinto reiter pinto reiter simplicity reals axiomatized assume standard interpretations usual operations ordering relations 
sort time ranges reals 
introduce special unary functional fluent start connecting situations time 
intuition start denotes time situation begins 
defer formal definition start discussion passage time 
pinto continuous change modelled idea fluent position robot takes value function time 
example situation robot starts moving dimensional location characterized somewhat idealized fashion linear function time starting actual position moving destination 
call functional fluents values continuous functions continuous fluents 
order represent value continuous fluents add language sort function elements meant functions time 
assume finitely function symbols type function require domain closure unique names axioms just case primitive actions 
furthermore needs specify values functions particular time done help special binary function val 
axiom illustrates val values constant functions special kind linear functions defined 
val const hx yi val linear hx const evaluates tuple hx yi linear linear function intended approximate movement robot dimensional space ignore details representing tuples reals logic 
motivated fact execution plans time passes merely high level controller waiting fluent start changes value result special primitive action waitfor 
intuition follows 
normally action happens immediately starting time situation doing starting time exception waitfor action occurs starting time resulting situation advanced earliest time true 
arguments waitfor restricted called forms special formulas involving continuous fluents situation argument suppressed see lakemeyer details example 
form denotes continuous fluent evaluated situation time example val 
axiom defines time point start true ltp start start waitfor action possible iff time point poss waitfor ltp successor state axiom start captures intuition starting time situation changes result waitfor case advances earliest time holds 
oss start waitfor ltp waitfor start 
example illustrate definitions model robot location changes result primitive actions 
simplicity ignore robot orientation represent position continuous fluent robotloc evaluates tuple reals 
types actions affect location robot startgo hx yi initiates moving robot position hx yi endgo stops movement robot 
assume startgo possible destination differs robot current location 
obtain successor state axiom robotloc 
oss robotloc start val robotloc hx yi startgo hx linear endgo const startgo endgo robotloc normalizing factor needed order ensure total dimensional velocity exceed 
variables refer coordinates robot 
startgo hx robotloc value linear starting current position moving hx endgo const hx yi 
startgo endgo action robotloc remains unchanged 
cc golog turn cc golog offers constructs sequences iteration procedures define complex actions 
addition parallel actions introduced conventional interleaving semantics 
primitive action waitfor wait condition true 
test action sequence conditional loop prioritized execution ends proc procedure definition cc golog possible specify event driven behavior quite naturally 
example program specifies robot travel room say hallway enters hallway way 
prg waitfor say hallway send reg reached send action indicates robot assigns room number register leads activation navigation process head room blocks execution register reached signals navigation process completed successfully 
details architecture section 
semantics cc golog specified similar congolog giacomo main ingredients predicate rans defines single steps simplicity model robot traveling speed realistic model consider different velocities 
concurrency defined omitted 
computation predicate inal 
inal specifies configurations final meaning computation considered completed 
case roughly remaining program nil primitive action test action executed 
leave details reasons space 
intuitively predicate rans associates program situation new situation results executing primitive action new program represents remains having performed action 
space reasons list axioms rans 
rans poss nil rans nil false rans nil rans seq inal rans rans seq rans inal rans rans start start rans rans start start transition primitive action requires possible current situation leaving nil done 
execution policy means action programs performed actions executed earlier preferred 
execute action time policy takes precedence 
final situation reachable finite number transitions starting situation identified situation resulting possible execution trace program starting situation captured predicate defined terms rans transitive closure rans rans inal rans ellipsis stands universal closure conjunction formulas rans program proving executable initial situation amounts proving consists axioms cc golog basic action theory situation calculus 
robot control architecture indicated modern robot architectures xavier simmons rhino burgard high level controller directly operate robot physical sensors effectors 
stands situation calculus formula situation arguments suppressed 
denote formula obtained restoring situation variable fluents appearing 
note rans requires reification formulas programs logical language 
see giacomo done 
activates deactivates specialized processes navigation process refer low level processes 
job high level controller combine activation deactivation routines way fulfill goal 
turns cc golog allows logical reconstruction type architecture fairly natural way 
architecture illustrated 
reg reg reached controller high level low level processes world reply send robot control architecture communication low level processes high level plan achieved special fluent reg 
high level interpreter affect value reg means special action send id val assigns reg id value val 
intuition order activate low level process high level controller executes send action 
example execution send tell navigation process start moving room 
hand low level processes provide high level controller information means exogenous action reply id val 
example order inform high level controller reached destination low level process cause exogenous reply reached action 
successor state axiom specifies reg affected send reply 
oss reg id val send id val reply id val reg id val send reply modeling low level processes cc golog procedures describe complex low level processes navigation process model low level processes cc golog procedures 
faithful characterization low level processes terms cc golog procedures project effect activation processes corresponding cc golog models 
stress procedures meant executed represent model effects corresponding low level process 
example consider low level navigation process 
activated send action assigns reg value tells process travel room process causes robot move destination reached informs high level controller arrival means reply reached action 
model behavior cc golog procedure 
functions inside 
maps room name location near exit room inside location function value name room robot write abbreviation startgo waitfor near loop true 
similar lakemeyer probabilistic programming language model processes uncertain outcome 
loop reg hallway reg inside reg endgo reply reached reg initially navigation process blocked reg assigned room name different robot 
executes sequence startgo actions approximating trajectory destination room polyline edge near door robot travel see 
projection describe project cc golog plan account cc golog model low level processes 
situation ll model model low level processes cc golog program 
projection identified situation results concurrent simulation ll starting proj ll model ll model 
ax cc set foundational axioms section domain closure unique names axioms functions axioms required form axioms defining val precondition axiom waitfor axioms stating robot room appropriate descriptions environment definition terms coordinates map 
ax cc project plan prg section 
write shorthand 
ax cc roj prg send startgo waitfor near startgo waitfor say hallway waitfor near startgo waitfor near endgo reply reached projected execution trace includes startgo waitfor near action node approximating trajectory stand coordinates corresponding nodes 
additionally includes say hallway executed immediately hallway reached assumed happen just leaving near 
execution trace ends reply reached completes navigation task 
line execution cc golog plans projections understood way assessing program executable principle 
resulting execution trace intended input execution mechanism robot reasons 
actions startgo serve model navigation process meant executed high level controller 
actions belong high level controller waitfor interpreted differently line execution 
example navigation process low level process simply 
relevant low level processes ll model amount concurrent execution individual cc golog models 
projection waitfor advances time point condition satisfied idealized model world piece wise linear trajectories actual execution waitfor intuitively treated simply test condition certain location matched sensor readings reflecting actual state affairs 
order see sensor readings obtained briefly look actual robots rhino system deal 
find tight update loop low level system high level controller 
update loop periodically provides high level controller update low level processes estimate continuous properties batteries voltage level robot position typically times second 
period time subsequent updates small practical purposes latest update regarded providing correct current time accurate values continuous fluents current time 
solution represent updates means new exogenous action treat waitfor simply special tests line execution 
intuitively effect set value continuous fluents latest estimates low level processes 
actual arguments depend continuous fluents updated 
example scenario arguments refer current position robot current voltage level current time 
get sense effect consider new version successor state axiom robotloc section suitable line execution projection 
simplicity assumed actions startgo endgo occur projection part model low level navigation process 
oss robotloc start val robotloc hx yi startgo hx linear endgo const const startgo endgo robotloc note simply assigns constant function const reflects idea line execution linear approximation trajectory plays role actual values hx 
updating value continuous fluents prime importance causes time better internal clock advance execution 
need modify successor state axiom fluent start 
order account fact time advances differently projections line execution need explicitly distinguish modes operation 
purpose introduce special fluent online change truth value special actions respectively 
specifying ssa online easy left 
ssa start oss start online waitfor ltp online start online waitfor online 
words start assigned time point waitfor condition true line execution time value returned line execution remains 
equivalently write separate successor state axioms line line case idea guarded successor state axioms proposed giacomo levesque enhance readability modularity axioms pursue idea space reasons 
precondition axiom ensures starting time legal action sequences monotonically nondecreasing oss start waitfor instruction treated special kind test line execution succeeds immediately iff condition true actual situation 
ensure intended behavior modify definition rans primitive actions rans poss nil online waitfor online waitfor start nil difference projection line execution actual execution high level controller executes send action interpreter check signals activation low level process side effect activate actual low level process necessary 
line execution situations result line execution plan special structure 
basically sequence robot actions defined possible transitions similar execution traces defined rans arbitrary number exogenous actions robot actions 
formally situations result execution program situation characterized predicate rans exo rans exo ellipsis stands universal closure conjunction formulas rans reply note differs original rans section conjunct expresses arbitrary number exogenous actions may occur ordinary transition 
example consider possible line execution trace prg 
prg action send results activation navigation process assume provide high level controller actions sec 
execution trace results situation exec stand appropriate coordinates path robot left rd argument voltage level 
exec send say hallway reply reached 
hard see exec legal line execution trace introductory cc golog program prg provided coordinates hp satisfy hp near destination 
note waitfor longer occurs action sequence merely test 
ax similar ax cc new definitions section concerning rans start robotloc 
ax online 
rans exo prg exec inal exec interleaving projection line execution de giacomo levesque suggest useful interleave line execution projection 
model time take idea step define projection line execution possibility explicitly put time bound projection 
projection non initial situations projection execution far considered projection cc golog initial situation 
see things non initial situation consider example scenario projection model navigation process 
suppose situation illustrated resulting line execution prg 
controller begins execution activating navigation process send low level process provides high level controller sequence indicated black dots 
controller situation send 
consider value continuous fluent robotloc defined 
robotloc const 
infer remains prg differs initial plan send executed 
rans exo prg waitfor say hallway reg reached 
updated value robotloc correctly project remaining plan cause robot directly travel destination 
note forces switch projection mode 
rans exo prg proj startgo waitfor say hallway waitfor near startgo waitfor near endgo reply reached reason projections non initial situations example scenario fairly straightforward remember state actual navigation process 
precisely position cc golog model navigation process yields appropriate approximation remaining trajectory robot illustrated projection 
low level processes mobile robots property processes needs keep track internal state execution dealt way similar details outside scope 
projection tests order allow time bounded lookahead define predicate proj true roughly holds time projected execution plan situation ll model refer appropriate model low level processes 
proj start rans ll model rans start inal switch projection mode 
disjunct involving inal covers case projected plan ends time proj test conditions cc golog plan check possible behavior lead certain conditions deliberate different possible subplans 
addition lookahead limited certain amount time useful order quick decisions 
possible application test illustrated program check battery level going drop seconds robot comes close battery docking station 
proj implementation definition cc golog requires second order logic easy implement prolog interpreter just case original congolog 
order deal constraints implied waitfor instruction subtle differences second order axiomatization congolog prolog implementation discussed giacomo projection ecrc common logic programming system eclipse built constraint solver library similar reiter reiter 
line execution cc golog plans implemented prototype runtime system couples interpreter execution system burgard link prolog implementation execution system high level interface hli provides uniform prolog interface low level processes monitoring component provides status update state execution activated modules 
particular runtime system handles high level send actions mapped commands low level processes periodically generates actions reflecting status updates low level processes 
summary discussion summary extended cc golog suitable projections plans line execution 
doing incorporated model robot architecture typically modern mobile robots 
showed interleave line execution form time bounded projection 
mentioned idea modeling projection line execution explored de giacomo levesque authors consider time idea low level processes interact highlevel controller complex ways 
importantly distinction effects fluents projection line execution distinction feel necessary comes modeling essential features mobile robots location time 
lesperance ng extended de giacomo levesque ideas direction bears 
propose projection needs consider simulated environment example produces exogenous actions inform high level controller destination reached 
notion simulated environment remains fairly simple able model temporally extended processes distinguish effects fluents projection line execution 
feel proposal addresses shortcomings brings logic robot controllers step closer real world robotics 
examples involving navigation tasks single robot chosen mainly simplicity may convincing logicbased robot controllers built projection mechanisms beneficial necessary especially run time 
believe advantages projections apparent robots engage complex tasks 
consider example multi robot delivery scenario user request letter delivered robots 
order determine robot deliver letter robot projection determine cost arise carry job task assigned robot minimal cost estimate 
fly projection important robots need coordinate activities 
suppose robots agree meet certain time 
probably want carry duties possible 
tasks may interruptible arbitrary times robot advised check current task completed heading meeting point 
form projection necessary 
plan investigate multi robot scenarios 
burgard burgard cremers fox lakemeyer schulz steiner thrun 
experiences interactive museum tour guide robot 
artificial intelligence 
de giacomo levesque de giacomo levesque 
incremental interpreter high level programs sensing 
levesque pirri editors logical foundations cognitive agents pages 
springer 
giacomo levesque de giacomo levesque 
projection regression sensors 
proc 
ijcai 
giacomo de giacomo yves lesperance hector levesque 
congolog concurrent programming language situation calculus 
artificial intelligence 
lakemeyer lakemeyer 
cc golog realistic logic robot controllers 
aaai 
lakemeyer lakemeyer 
turning high level plans robot programs uncertain domains 
ecai 

probabilistic projection belief update framework 
second international cognitive robotics workshop 
burgard lakemeyer 
bridging gap logic golog real robot 
proceedings st german conference artificial intelligence ki 
lesperance ng lesperance 
ng 
integrating planning reactive high level robot programs 
second international cognitive robotics workshop 
levesque hector levesque raymond reiter yves fangzhen lin richard scherl 
golog logic programming language dynamic domains 
journal logic programming 
levesque hector levesque pirri ray reiter 
foundations situation calculus 
linkoping electronic articles computer information science 
url www ep liu se ea cis 
mccarthy mccarthy 
situations actions causal laws 
technical report stanford university 
reprinted semantic information processing ed mit press 
pinto javier pinto 
integrating discrete continuous change logical framework 
computational intelligence 
reiter ray reiter 
natural actions concurrency continuous time situation calculus 
proc 
kr pages 
reiter reiter 
sequential temporal golog 
proc 
kr 
simmons simmons goodwin haigh koenig sullivan veloso 
xavier experience layered robot architecture 
acm sigart bulletin intelligence 
