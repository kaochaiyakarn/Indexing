providing real time support linux kernel yu chung wang jay lin department electrical computer engineering university california irvine ca klin ece uci edu search powerful open real time operating systems continues 
years active rigorous research real time system issues realtime community looking answer simple common question real time operating system 
question asked people interested eager adopt wonderful results numerous real time projects 
day little consensus answer question 
generally agreed commercial embedded os products right support designed run primitive processors minimum memory power 
provide sophisticated schedulers flexible resource management 
hand current general purpose os windows unix designed support real time tasks specific timing constraints meet 
projects products tried enhance general purpose os give real time tasks better support 
problem projects os created incompatible original os 
working real time kernel project increasingly popular linux kernel 
important reasons choose linux foundation project large user population 
linux popular os short time creation 
users linux way avoid dos products users attracted linux capability flexibility 
open source policy linux allows grow constantly robust efficient due large number enthusiastic users implementors attracted 
decide join grass root effort linux powerful expanding domain general purpose computing realtime embedded applications 
research partially supported uc micro geospatial 
scheduling support project called red linux real time embedded linux 
issues making linux essentially unix real time os 
projects pursued goal 
efforts rtlinux implements small real time kernel underneath outside linux kernel 
strictly speaking linux kernel version rt linux designed scratch support real time tasks 
provides connection linux real time fifo queue realtime tasks run rt linux linux interference 
approach similar real time subsystem products windows nt rtx intercept realtime requests real time tasks devices 
real time linux project kurt uses different kernel modes control scheduling system resources real time processes 
kernel normal mode real time support runs normal linux kernel 
focused realtime mode real time processes scheduled 
kurt mixed real time mode real time non real time processes served 
kurt provides limited scheduling support works best processes scheduled cyclic schedule files 
rtlinux kurt rely heavily correct timing behaviors program codes designed application programmers 
mode done correctly handshaking real time non real time processes may system may break 
approach add new real time capabilities linux kernel keep existing linux capability 
way kernel rtlinux project studies kernel support general real time applications mixed real time nonreal time threads different qos parameters various real time schedulers 
real time processes scheduled real time constraints 
non real time processes executed running slower machine bandwidth real time processes 
research issues scheduling support provided red linux 
past decade scheduling algorithms proposed imple real time applications real time communication network 
roughly classified major paradigms priority driven scheduling scheduling share driven scheduling 
priority driven scheduling concept fixed dynamic task priority parameter os scheduler decide task thread executed 
time driven scheduling hand uses current time look usually predefined schedule task executed 
paradigm assigns task fixed resource share evenly allocates execution time resource task share value 
scheduling paradigms different merit different applications 
usually considered distinct incompatible paradigms 
real time applications chooses paradigm design application codes paradigm 
codes executed rtos hopefully support paradigm 
intend support scheduling paradigms red linux 
rtos projects red linux needs support priority driven scheduling real time scheduling algorithms scheduling 
support time driven scheduling time driven scheduling existing real time applications time driven scheduling algorithms developed 
believe share driven scheduling necessary real time applications communication network due capability provide task bandwidth isolation 
support different applications may need different scheduling paradigms 
believe rtos supporting need extensions order facilitate important real time applications 
general scheduling framework general scheduling framework red linux 
issues discussed scheduling attributes framework actual scheduler components scheduling decisions 
designed general unified scheduling framework allows popular scheduling paradigms supported 
building paradigm separate independent scheduling server binding application framework identifies orthogonal scheduling attributes pri start time finish time budget uses fundamental set scheduling attributes 
adjusting attribute values relative evaluation order attributes possible implement existing scheduling algorithms framework 
different scheduling paradigms integrated scheduling framework simple consistent way 
may study various combinations basic scheduling attributes design new scheduling algorithms 
scheduling attributes model smallest schedulable unit called job 
job executed 
systems periodic activities call job stream periodic task 
aperiodic tasks consist small jobs 
framework scheduling attributes defined job 
priority job priority defines importance job relative jobs system 
may assigned scheduler deriving task attributes task period rate monotonic scheduling 

start time start time defines job executed 
job executed start time 

finish time finish time job deadline job finish time job finished stopped 

budget budget represents amount execution time resources job may execution 
start time finish time combined specify execution interval job execution 
budget specifies total resource 
priority specifies relative importance jobs job executed eligible higher priority job 
attributes constraints 
timing attributes main decision factor scheduler needs select job executed 
adopt combination objective function different weights assigned attribute 
scheduler components implement framework divided traditional kernel scheduler scheduling components red linux 
schedule allocator 
allocator responsibility set scheduling attributes associated real time job current scheduling policy 
component schedule dispatcher inspects current scheduling attribute values jobs chooses job ready queue dispatches execute 
way allocator sets attributes dispatcher chooses job reflects current scheduling policy 
framework allocator defines policy dispatcher provides mechanism 
responsibility os kernel provide flexible mechanism schedule allocator time driven scheduler priority driven scheduler share driven scheduler deadline priority start time task task task attribute combinations new schedulers job priority start time time budget schedule dispatcher fig 
general scheduling framework define policy 
hand real time application programmer define scheduling policy desirable application 
addition assigning attribute values allocator determines relative evaluation order scheduling attributes job multiple scheduling attributes 
allocator chooses attributes primary attribute secondary attribute dispatcher follow specific scheduling scheme 
example priority attribute designated primary attribute dispatcher priority driven scheduler 
finish time attribute primary dispatcher acts earliest deadline scheduler 
general scheduling framework able accommodate existing scheduling disciplines 
system developers may choose different scheduling disciplines specific application needs 
dispatcher may switch different scheduling disciplines run time 
kernel blocking delay useful os designed support embedded applications provide short task dispatch time high resolution timer 
red linux new components added linux micro timer integrated scheduler software interrupt emulation 
red linux ported micro timer software interrupt emulation mechanisms rt linux 
software interrupt emulation solve problem multiple interrupt occurrences 
hardware interrupt occurs system simply records event event table immediately returns control cpu back os looking interrupt service table executing corresponding service routine 
avoid overhead saving context hardware interrupt service handler save registers interrupt emulation routines 
making red linux completely reentrant kernel take big effort achieve small kernel preemption delay breaking execution kernel service routines smaller code blocks 
done inserting preemption points kernel codes cut long routine small blocks 
executing small block kernel thread checks pending real time job waiting run 
high priority real time jobs waiting run context switch enforced 
responsibility kernel thread sure context switching safe 
kernel thread carefully designed assume system variables corrupted context 
different reentrant kernel approach opens back door execution kernel codes reduce blocking time real time jobs 
worst case kernel preemption delay decided code block maximum execution time 
implemented prototype red linux 
measured performance running time driven scheduler 
data reported collected machine mb memory 
study table 
response time real time jobs workload time driven scheduler micro timer preemption points maximum maximum maximum behaviors real time tasks different system loads 
experiment measure performance realtime tasks running various competing processes 
measure response time values various combinations user tasks including real time periodic tasks non real time task uses cpu execute infinite loop non real time task reads disk blocks repeatedly 
real time periodic tasks defined follows period ms ms execution time period ms ms execution time 
tasks designed integer calculations display results screen 
measure response time real time job ready execution starts 
scheduler produce time driven schedule 
performance data shown table 
see table linux kernel time driven scheduler provide short response time 
main factors clock resolution non preemptive kernel execution 
including micro timer response time reduced millisecond scale microsecond scale 
maximum delay large due undesirable delays caused non preemptive kernel executions 
maximum response time inserting preemption points time 
summary summarize novel features red linux ffl provides general scheduling framework support different real time scheduling paradigms operating system 
modeling different algorithms framework easily implement application specific schedulers 
ffl separates scheduler allocator dispatcher 
dispatcher implements basic scheduling attributes allocator manages system resources meet timing constraints real time jobs 
ffl provides short kernel preemption delay fast interrupt handling capability 
information red linux please visit homepage linux ece uci edu red linux 
introducing real time unix 
linux journal feb 
chih wen jay lin 
line schedulers tasks time driven approach 
proc 
th euromicro workshop real time systems berlin germany june 
jones rosu 
rosu 
cpu reservation time constraints efficient predictable scheduling independent activities 
proc 
th acm symposium operating systems principles october pp 

kenny lin 
building real time systems flex language 
ieee computer may 
liu layland 
scheduling algorithms multiprogramming hard real time environment 
journal acm mercer savage tokuda 
processor capacity reserves operating system support multimedia applications ieee conf 
multimedia computing systems pp 
may 
srinivasan firm real time system implementation commercial shelf hardware free software 
proc 
ieee real time technology application symposium pages june 
stoica abdel jeffay baruah gehrke plaxton 
proportional share resource allocation algorithm real time time shared systems 
proc 
ieee real time systems symposium december pp 
wang lin 
enhancing real time capability linux kernel 
proc 
th hiroshima japan oct 
