ieee transactions software engineering vol 
july aetg system approach testing combinatorial design david cohen member ieee computer society siddhartha dalal member ieee michael fredman gardner patton describes new approach testing uses combinatorial designs generate tests cover pairwise triple way combinations system test parameters 
parameters determine system test scenarios 
examples system configuration parameters user inputs external events 
implemented new method aetg system 
aetg system uses new combinatorial algorithms generate test sets cover valid way parameter combinations 
size aetg test set grows logarithmically number test parameters 
allows testers define test models dozens parameters 
aetg system variety applications unit system interoperability testing 
generated high level test plans detailed test cases 
applications greatly reduced cost test plan development 
index terms testing combinatorial designs experimental designs orthogonal arrays 
important expensive part software development process 
research aimed reducing cost 
describes new approach testing uses combinatorial designs generate efficient test sets 
implemented method bellcore aetg system bellcore clients unit system interoperability testing 
new approach tester identifies parameters define space possible test scenarios 
example parameters test adding records data base system describe records added transaction 
tester uses combinatorial designs create test plan covers pair wise triple combinations test parameters 
motivation fold 
systems troublesome faults caused interaction test parameters 
test plan ideally cover interactions 
second number tests required cover way parameter combinations fixed grows logarithmically number parameters 
testers define test models dozens parameters require small number test cases 
gives testers freedom define models cohen ida center computing sciences science dr md 
mail super org 
dalal patton bellcore south st morristown nj 
mail sid gcp bellcore com 
fredman department computer science rutgers university campus hill center new brunswick nj 
mail fredman cs rutgers edu 
please address product inquiries aetg system dalal bellcore south st morristown nj 
aetg system covered united states patent 
manuscript received aug revised feb 
recommended acceptance hamlet 
information obtaining reprints article please send mail tse computer org ieeecs log number 
ieee detail capture semantics system test accurately 
don worry refining model adding test parameter cause number tests explode 
models parameters common 
experiments test effectiveness aetg tests 
experiment faults previously tested modules releases bellcore system system measured code coverage aetg tests unix commands modules system pair wise aetg test sets gave code coverage examples 
aetg system variety applications 
describes sample applications 
designed high level test plan telephone service software 
created detailed test cases atm network performance monitoring system 
designing test plans systems hand usually require months 
aetg system reduced time weeks 
reports aetg system 
section motivates basic paradigm example 
section proves number tests required combinatorial design approach grows logarithmically number test parameters 
section gives heuristic algorithm generate tests 
section gives overview aetg input language 
sections describe experiments concerning effectiveness sample applications 
section concerns related 
basic combinatorial design paradigm consider problem testing telephone switch ability place telephone calls 
table shows parameters define simple test model 
call type parameter tells type call 
values local long distance ieee transactions software engineering vol 
july international 
billing parameter says pays call 
values caller bill caller collect 
access parameter tells calling party phone connected switch 
options considered simple model loop isdn line pbx trunk 
final parameter status tells call successful failed calling party phone busy call blocked phone network 
different combination parameter values determines different test scenario parameters values table defines total different scenarios 
suppose argument sake tests individual test expensive 
alternative select default value parameter vary parameter test parameter values covered 
table shows resulting test set 
tests required exhaustively testing possible parameter combinations 
covers individual parameter values covers possible pair wise interactions test parameters 
test plan shown table test cases default test plan table covers pair wise combination parameter values 
test plan constructed known combinatorial design projective plane 
calls test plan complete successfully plan reflect system normal operational profile 
applications significant number faults caused parameter interactions occur atypical realistic situations 
comprehensive test cover interactions 
combinatorial design method covers efficiently testers feel test plan reflect operational profile combinatorial design method complement tests derived operational profile 
suppose test model parameters values say 
possible parameter combinations 
default method configuration requires test cases covers possible pair wise parameter combinations 
table shows tests cover pair wise parameter combinations 
general default testing parameters values requires tests covers pair wise parameter combinations pairwise testing requires log tests covers pairwise combinations 
example exhaustive testing requires tests default testing tests 
pair wise testing requires tests 
section show number test cases required test pair wise way parameter combinations grows logarithmically number parameters 
logarithmic growth way interaction testing show number tests way coverage fixed grows logarithmically number pa rameters 
ease notation state proof pairwise coverage 
logarithmic growth follows 
table parameters placing telephone call table default test cases placing phone call table pair wise test cases placing phone call table fifteen test cases parameters values cohen aetg system approach testing combinatorial design theorem 
system parameters values suppose test cases chosen number uncovered pairs test case covers new pairs 
proof 
consider set test case pair covered 
parameters test case covers pairs 
test case appears different pairs parameter values pair appears different test cases 
consider subset test case selected test cases pair covered selected test cases 
prove theorem counting cardinality different ways 
pair covered test case contains selected test cases 
appears different test cases different test cases number uncovered pairs cardinality card unselected test case mt number new pairs covered mt selected test cases 
appears mt times 
card largest mt prove theorem show total number possible test cases inequality card proved theorem showing step generating test set test case covers remaining pairs 
consider greedy algorithm step chooses test case covers uncovered pairs 
number pairs start 
fields values greedy algorithm test cases chosen number remaining pairs log log pairs covered 
approximation log get greedy algorithm covers pairs log log log 
shows number test cases required greedy algorithm grows logarithmically quadratically rner vaccaro shown large values number test cases satisfies log results nonconstructive linear growth true moderate values heuristic algorithm proof logarithmic growth greedy algorithm assumes stage possible find test case covers maximum number uncovered pairs 
possible test cases computationally possible find optimal test case 
outline random greedy algorithm developed 
simplicity notation state algorithm pairwise coverage 
assume system test parameters ith parameter li different values 
assume selected test cases 
select generating different candidate test cases choosing covers new pairs 
candidate test case selected greedy algorithm choose parameter value parameter value appears greatest number uncovered pairs 
choose random order remaining parameters 
order parameters fk 
assume values selected parameters fj 
selected value fi called vi 
choose value vj fj follows 
possible value fj find number new pairs set pairs fj fi vi 
vj values appeared greatest number new pairs 
note step parameter value considered inclusion candidate test case 
choosing value parameter fj possible values compared values chosen parameters fj 
experiments algorithm 
set generated candidate test cases new test case number generated test cases grew logarithmically number parameters parameters number values 
increasing dramatically reduce number generated tests 
candidate test cases depend random order selected step different random seed produce different test set 
useful optimization generate different test sets different random seeds choose best 
reduces number generated tests percent 
deterministic construction alternative random algorithm generate fewer test cases 
aetg input language basic constructs aetg input language fields relations 
fields system test parameters ieee transactions software engineering vol 
july relations define relationships test parameters 
define relation tester specifies fields contains set valid invalid values field 
test generated valid values valid test test generated valid invalid values invalid test 
invalid tests usually abort completion error condition 
table shows relations refine test model table section 
relations relation relation fields call type billing access status 
relation defines different test scenarios relation defines different test scenarios 
international isn valid value call type relation isn valid value billing relation set test scenarios defined table constraint pair call type international billing valid international calls numbers 
table relations placing call constraint tester specifies degree test relation 
tester specifies pair wise testing aetg system generates tests cover valid pair wise combinations values relation fields 
means fields values test value value 
tester specifies way testing aetg system generate test set covers way parameter combinations relation 
aetg system generates tests set relations combining tests individual relations 
algorithm combining tests insures combined test set relations projection test fields relation set test relation 
relations common fields combined tests relations simply concatenations tests individual relation 
aetg system generates invalid test invalid value specified field relation 
value invalid value context relation 
value invalid field relation may valid value field relation 
avoid having invalid value mask aetg system uses invalid value test case 
creates test invalid value valid test relation substituting invalid value place field valid value test 
tester guarantee inclusion favorite test cases specifying seed tests partial seed tests relation 
seed tests included generated test set modification 
partial seed tests seed test cases fields assigned values 
aetg system completes partial test cases filling values missing fields 
constraints constraints expressed multiple relations shown table may efficient express explicitly tests 
test relation specifies set test cases valid relation 
table shows relation explicit constraint 
relation relation fields relations table 
explicit constraint test case call type international billing allowed independent values access status fields table wild card 
relation defines set possible test scenarios relations aetg inputs identical 
relations incompatible values call type field tests generated relation valid tests 
relation requires tests pairwise coverage union test sets tests 
relation requires tests shown table 
table definition relation table test cases relation relations require tests relation impose stringent test requirements 
relation specifies pair access isdn status busy covered context call type local long distance relation specifies pair covered context call type international 
conse cohen aetg system approach testing combinatorial design quently pair covered twice union test sets relations context 
pair covered test set relation 
relation specifies set pairs covered context pairs 
example tester may care pair access isdn status busy covered contexts 
case alternative semantics regard relation specifying set pairs context 
specifications equivalent table test plan specification 
simple test generation algorithm generate tests relation account pairs relation 
algorithm generate minimal test set 
example consider covering relation relation 
relation require test cases relation require test cases pair call type international billing caller pair call type international billing collect 
combined test set test cases 
shown table 
doubt testers prefer rule ignore context provided relation 
testers different relations define different semantic situations 
example may relation define requirements test line interface card line protocol ethernet protocol atm 
tester want insure flow control worked environments 
fields aetg relation finite number values user interface translate higher level constraints tests 
hierarchy hierarchical testing system natural degrees interaction fields 
fields important tester may want test interactions intensively interactions rest system 
option relations 
contains fields tested pair wise combinations contains important fields tested high degree interaction 
wasteful 
better solution subrelation 
subrelation relation part relation 
tester put important fields subrelation give high degree interaction testing 
tester subrelation inside relations tested lower degree interaction 
generating tests aetg system generate tests cover subrelation specified degree interaction tests partial seed test cases generating tests containing relation 
experiments experiments check effectiveness aetg test sets 
experiment tested user interface modules releases bellcore system 
measured code coverage aetg test sets 
experiment aetg system tested modules releases bellcore system system tested modules release second 
modules designed validate user input internal consistency 
validation module usually lines code 
experiment testers created aetg input module detailed development requirements 
modules tested experiment problems caused defects code defects requirement documents 
table shows results 
column labeled code shows number code defects column labeled requirements shows number requirement defects 
requirements defects code defects 
requirements defects introduced system engineers take high level user oriented requirements write detailed development requirements 
process requires great deal effort knowledge faults introduced 
faults corrected code development process 
finding documenting important detailed development requirements maintenance 
measured code coverage aetg test sets 
coverage tool measure block decision uses uses metrics aetg tests generated unix commands validation modules system pair wise aetg test sets gave percent block coverage application domains 
example set pair wise aetg tests gave percent block coverage unix sort command 
compared pair wise testing random input testing pair wise testing gave better coverage 
modules system code coverage didn increase increased pair wise testing testing valid input combinations 
table results module 
unix coverage experiments discussed detail 
coverage experiments done nortel burr young 
aetg pairwise test sets gave coverage variety situations 
course easy construct examples unique combination test parameters trigger fault 
growing evidence real world systems large number faults triggered parameter combinations 
area merits study 
table defects releases system table code coverage results module ieee transactions software engineering vol 
july overview applications aetg system generate high level test plans detailed test cases 
section gives example illustrate type application 
applications discussed 
high level test planning example aetg system designed test plan telephone switch software implementing service 
table shows relation test calls reaching switch trunk switch 
fields specify trunk type high level protocol signaling protocol 
fields specify attributes caller phone line 
field says caller phone number ani known switch 
constraints specify certain trunk types isdn signaling 
table defines possible valid test scenarios scenarios constraint 
pair wise testing required tests 
test scenario takes hours run going tests means considerable cost savings 
aetg input complete software additional relations required tests total 
table service testing calls arriving trunks test case generation example aetg system generated detailed test cases atm network monitoring system 
generated tests releases 
creating aetg input release took week modifying second took hour 
system monitors signal number corrupted atm cells exceeds specified threshold specified unit time 
system commands turn monitors set thresholds time units display statistics 
test system tester gives configuration commands uses corrupt atm transmission facilities 
tester checks system displays correct statistics 
aetg input relation modeled configuration commands 
input release fields fields values values values 
gives total different combinations 
input second release fields fields val ues values values 
gives total different combinations 
aetg system generated pair wise tests release pair wise tests second 
second release combinations pair wise coverage required fewer tests 
illustrates logarithmic growth properties aetg method 
second release fields values fields values required fewer tests fewer fields values 
example illustrates distinction aetg approach forms input testing 
system screen interface aetg fields modeled system commands user interface 
distinction discussed greater detail 
related methods combinatorial design paradigm black box approach testing generates tests model system expected functionality 
test model created system functional requirements detailed development specifications 
combinatorial design approach differs black box methods basic test requirement coverage valid way test parameters combinations tester defined values method related approach random input testing partition testing see duran ntafos hamlet taylor 
aetg approach differs random testing allowing tester define complex relationships test parameters 
tester aetg constructs relations constraints hierarchy focus testing 
aetg test plans far random 
closely related heller orthogonal arrays generate pair wise test sets 
orthogonal arrays combinatorial designs design statistical experiments 
statistical experimentation balance requirement pair covered number times 
aetg approach requires pair covered 
specify times pair covered 
orthogonal array balance requirement severe logarithmic growth number test parameters 
example orthogonal array parameters values require test cases 
unbalanced pair wise test set requires tests 
construction uses combinatorial argument due renyi 
applications large number parameters values 
applications balance requirement causes number test cases generated orthogonal arrays grow unacceptably large 
example practical test application described section balanced test set 
problem balanced test sets incorporation constraints specify combinations values invalid occur test case 
efficiently modify balanced test set prevent pair occurring insuring pairs occur number times 
contrast easy cohen aetg system approach testing combinatorial design incorporate constraints heuristic algorithm section 
throw away candidate test cases violate constraint avoid generating selecting parameter value violate constraint 
eliminating balance requirement reduced number required test cases logarithmic growth number parameters 
allowed easy specification constraints 
properties allow testers test models parameters 
test models parameters common 
testers free add detail model defining new test parameters 
closest aetg system cats system developed sherwood 
cats generates test sets give way coverage set relations 
aetg notions explicit constraints hierarchy 
uses multiple relations express constraints 
shown multiple relations explicit constraints may require tests necessary 
done comparison study aetg algorithms verses cats algorithms published data suggest aetg algorithms generate fewer test cases cats 
example sherwood reports cats generated tests pair wise coverage fields values 
aetg algorithms generate tests example 
summary aetg system uses new combinatorial design algorithms generate test sets efficiently cover pairwise way combinations system test parameters 
examples parameters system configuration parameters parameters define environment inputs internal events 
basic aetg test requirement pair wise way combination parameter values covered 
orthogonal array approach aetg method require combination covered number times 
allowing unbalanced test sets greatly reduces number tests required check specified level interactions 
example balanced test set system binary fields requires tests unbalanced test set requires 
general number tests required aetg method grows logarithmically number test parameters 
example checking pair wise combinations fields values requires tests potential test combinations 
consequently cost adding detail form additional parameters logarithmic 
contrast models finite state model new feature adds multiplicative factor number tests 
testers aetg constructs focus testing 
aetg constructs relations constraints hierarchy allow testers express knowledge system test 
aetg test cases far random 
experiments code coverage aetg test sets gave significantly better coverage randomly generated tests 
aetg system variety applications unit system interoperability testing 
generated high level test plans detailed test cases 
testers base aetg input detailed development requirements system high level functional requirements user manual 
experience new approach indicates widely applicable generates efficient test sets quality 
acknowledgments authors george david carmen kirk burroughs jain robert erickson bellcore goel kevin burr william young steve yu nortel developing new aetg applications 
jesse code coverage experiments 
isaac adam jon support 
robust testing pmx technical vol 
pp 
mar 
burr young test acceleration automatic efficient testcase generation nortel technical report may 
burroughs jain erickson improved quality protocol testing techniques experimental design proc 
ieee int conf 
comm 
pp 

cohen dalal patton automatic efficient tests generator proc 
fifth int symp 
software reliability eng pp 
ieee 
cohen dalal patton combinatorial design approach automatic test generation ieee software vol 
pp 
sept 
cohen dalal patton aetg system fifth int conf 
software testing analysis review software quality eng fla 
cohen fredman new techniques designing qualitatively independent systems combinatorial designs appear 
dalal patton automatic efficient test generator aetg test generation system screen testing protocol verification feature interactions testing internal bellcore technical memorandum 
duran ntafos evaluation random testing ieee tran 
software eng vol 
pp 
july 
ehrlich mallows applying design experiments software testing proc 
th int conf 
software eng ieee 
rner vaccaro capacities graphs combinatorics vol 
pp 

hall jr combinatorial theory 
new york wiley interscience 
hamlet taylor partition testing inspire confidence ieee trans 
software eng vol 
pp 
dec 
heller design experiment structures generate software test cases th int conf 
testing computer software pp 
june 
horgan london data flow coverage testing tool proc 
ieee assessment quality software development tools pp 
ieee 
mallows covering designs random environments festschrift john tukey appear 
orthogonal latin squares application experimental design compiler testing comm 
acm vol 
pp 
oct 
quality eng 
robust design 
englewood cliffs prentice hall 
sherwood effective testing factor combinations third int conf 
software testing analysis review software quality eng fla 
ieee transactions software engineering vol 
july sloane covering arrays intersecting codes combinatorial designs vol 
pp 

taguchi system experimental design 
quality resources 
translation tokyo 
west protocol validation principles applications computer networks isdn systems vol 
pp 
may 
wong horgan london mathur effect test set minimization fault detection effectiveness proc 
th int conf 
software eng pp 
ieee 
david cohen received ba degree harvard university phd degree mathematics mit 
member research staff ida center computing sciences maryland research computer science support nsa 
worked bellcore bell telephone labs research software engineering telecommunications patents 
cohen held postdoctoral fellowships institute advanced study princeton new jersey german alexander von humboldt foundation 
cohen member acm ieee computer society 
siddhartha dalal received mba phd degrees university rochester started industrial research career bell labs math research center 
chief scientist director information technologies internet applications laboratory bellcore 
leading research bellcore combinatorial designs aetg system leads research projects software engineering risk analysis mathematics statistics 
received american statistical association award outstanding application challenger disaster behalf national research council committee 
member national academy sciences panel produced nrc report software engineering 
fellow american statistical association associate editor journal american statistical association 
michael fredman received bs degree mathematics california institute technology phd degree computer science stanford university 
currently professor department computer science rutgers university previously professor mathematics professor computer science university california san diego 
fredman research interests mainly concern algorithms data structures 
member editorial board siam journal computing member acm 
gardner patton received ba degree physics brown university ms industrial engineering new jersey institute technology 
senior scientist software engineering statistical research group bellcore 
joining bell laboratories worked developing software missile guidance systems telephone applications operating systems 
years managed group testing telephone inventory system containing lines code 
currently interested test measurement automatic test generation client server testing intranet testing 
member acm 
