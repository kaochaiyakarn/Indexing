matthew moskewicz department eecs uc berkeley chaff engineering efficient sat solver princeton edu conor madigan department eecs mit mit edu boolean satisfiability probably studied combinatorial optimization search problems 
significant effort devoted trying provide practical solutions problem problem instances encountered range applications electronic design automation eda artificial intelligence ai 
study culminated development sat packages proprietary public domain grasp sato find significant research industry 
existing complete solvers variants davis putnam dp search algorithm 
describe development new complete solver chaff achieves significant performance gains careful engineering aspects search especially particularly efficient implementation boolean constraint propagation bcp novel low overhead decision strategy 
chaff able obtain orders magnitude performance improvement difficult sat benchmarks comparison solvers dp including grasp sato 
categories subject descriptors computer aided engineering computer aided design 
general terms algorithms verification 
keywords boolean satisfiability design verification 

boolean satisfiability sat problem consists determining satisfying variable assignment boolean function determining exists 
sat central np complete problems 
addition sat lies core practical application domains including eda automatic test generation logic synthesis ai automatic theorem proving 
result subject practical sat solvers received considerable research attention numerous solver algorithms proposed implemented 
ying zhao zhang sharad malik department electrical engineering princeton university sharad ee princeton edu publicly available sat solvers grasp posit sato rel sat walksat developed employing combination main strategies davis putnam dp backtrack search heuristic local search 
heuristic local search techniques guaranteed complete guaranteed find satisfying assignment exists prove unsatisfiability result complete sat solvers including exclusively dp search algorithm 
problem specification solvers operate problems specified conjunctive normal form cnf 
form consists logical clauses consist logical literals 
literal comprises fundamental logical unit problem merely instance variable complement 
complement represented 
boolean functions described cnf format 
advantage cnf form satisfied sat individual clause sat 
basic davis putnam backtrack search start quick review basic davis putnam backtrack search 
described pseudo code fragment true decide unassigned vars return bcp return satisfiable bool decision tried ways null return false flip value mark tried ways undo invalidated implications return true operation decide select variable currently assigned give value 
variable assignment referred decision 
new decision record decision pushed decision stack 
function return false unassigned variables remain true 
operation bcp carries boolean constraint propagation bcp identify variable assignments required current variable state satisfy recall clause sat sat 
clause consists literals value unassigned literal unassigned literal take value sat 
clauses state said unit rule referred unit clause rule 
necessary variable assignment associated giving unassigned literal value referred implication 
general bcp consists identification unit clauses creation associated implications 
pseudo code bcp carries bcp transitively implications case returns true conflict produced case returns false 
conflict occurs implications setting variable produced 
time decision variable state exists represented decision stack 
implication generated new decision directly triggered decision predicated entire prior variable state 
associating implication triggering decision dependency compactly recorded form integer tag referred decision level dl 
basic dp search dl equivalent height decision stack time implication generated 
explain note invalidate implications generated decision level simply flipping value decision assignment 
deal conflict just undo implications flip value decision assignment allow bcp proceed normal 
values tried decision backtrack decision stack encounter decision tried ways proceed manner described 
clearly backtracking decision stack invalidate implications decision levels equal greater decision level backtracked 
decision tried ways indicates satisfiable 
far focused structure basic dp search algorithm 
sections describe features specific chaff 

optimized bcp practice sat problems major greater cases solvers run time spent bcp process 
efficient bcp engine key sat solver 
restate semantics bcp operation formula set assignments dls deduce necessary assignments dls continue process transitively adding necessary assignments initial set 
necessary assignments determined exclusively repeated applications unit clause rule 
necessary assignments deduced conflict identified 
purposes discussion say clause implied iif literals assigned zero 
implement bcp efficiently wish find way quickly visit clauses newly implied single addition set assignments 
intuitive way simply look clause database clauses contain literal current assignment sets 
effect keep counter clause value literals clause modify counter time literal clause set 
clause literals really reason need visit literals set zero 
visit number zero literals counter goes 
approximation goal pick literals assigned clause watch time 
guarantee literals assigned literals clause assigned zero clause implied 
need visit clause watched literals assigned zero 
visit clause conditions hold clause implied literals assigned zero including currently watched literal 
means non watched literal assigned zero 
choose literal replace just assigned zero 
maintain property watched literals assigned 
clause implied 
follow procedure visiting implied clause usually generate new implication clause sat 
take note implied variable watched literal definition clause literal assigned zero watched literals assigned zero 
invariant state clause newly implied watched literals assigned 
key benefit literal watching scheme time backtracking need modify watched literals clause database 
variable done constant time 
reassigning variable assigned unassigned tend faster time assigned 
true variable may watched small subset clauses previously watched 
significantly reduces total number memory accesses exacerbated high data cache rate main bottleneck sat implementations 
illustrates technique 
shows watched literals single clause change series assignments 
note initial choice watched literals arbitrary purposes example exact details sequence assignments generated irrelevant 
sato bcp schemes similarities sense watches literals called head tail literals authors detect unit clauses conflicts 
algorithm different sato require fixed direction motion watched literals sato head literal move tail literal vice versa 
sato complexity assignment 

variable state independent decaying sum decision heuristic decision assignment consists determination new variable state selected time decide called 
lack clear statistical evidence supporting decision strategy difficult determine decision strategy bad 
explain briefly review common strategies 
comprehensive review effect decision strategies sat solver performance see silva 
simplest possible strategy simply select decision randomly unassigned variables approach commonly denoted rand 
extreme employ heuristic involving maximization moderately complex function current variable state clause database bohm heuristics 
popular strategies falls middle spectrum dynamic largest individual sum heuristic selects literal appears frequently unresolved clauses 
variations strategy possible 
slightly sophisticated heuristics jw os je ts developed reader referred full description methods 
clearly strategies available important understand best evaluate 
consider instance number decisions performed solver processing problem 
statistic feel metric analyzing decision strategies ought mean smarter decisions reasoning goes scant literature subject 
decisions yield equal number bcp operations result shorter sequence decisions may lead bcp operations longer sequence decisions question number decisions really tell 
argument applies statistics involving conflicts 
furthermore important recognize decision strategies computational overhead result best decision strategy combination available computation statistics slowest overhead significant 
really want know strategy fastest regardless computation statistics 
clear answer exists literature appear solid strategy 
rand performs problems described 
developing solver implemented tested strategies outlined design considerably better strategy range problems tested solver 
strategy termed variable state independent decaying sum described follows variable polarity counter initialized 
clause added database counter associated literal clause incremented 
unassigned variable polarity highest counter chosen decision 
ties broken randomly default configurable periodically counters divided constant 
order choose variable highest counter value quickly decision time list unassigned variables sorted counter value maintained bcp conflict analysis stl set current implementation 
strategy viewed attempting satisfy conflict clauses particularly attempting satisfy conflict clauses 
difficult problems generate conflicts conflict clauses conflict clauses dominate problem terms literal count approach distinguishes primarily low pass filtering statistics indicated step favors information generated conflict clauses 
believe valuable conflict clauses primarily drive search process difficult problems 
decision strategy viewed directly coupling driving force decision process 
course key property strategy independent variable state insofar choose unassigned variable low overhead statistics updated conflict correspondingly new conflict clause 
decision related computation accounts run time difficult instances 
conflict analysis runtime remaining time spent bcp 
ultimately employing strategy dramatically order magnitude improved performance difficult problems hurting performance simpler problems viewed true metric success 

features chaff employs conflict resolution scheme philosophically similar grasp employing type conflict analysis conflict clause addition 
differences authors believe dramatically enhanced simplicity elegance implementation due space limitations delve subject 
clause deletion solvers chaff supports deletion added conflict clauses avoid memory explosion 
method doing chaff differs somewhat standard method briefly describe 
essentially chaff uses scheduled lazy clause deletion 
clause added examined determine point clause deleted 
metric relevance typically literals clause unassigned time clause marked deleted 
actual memory associated deleted clauses recovered infrequent monolithic database compaction step 
restarts chaff employs feature referred restarts 
restarts general consist halt solution process restart analysis information gained previous analysis included new 
implemented chaff restart consists clearing state variables including decisions proceeding normal 
result relevant clauses added clause database time prior restart restart 
reason solver simply repeat previous analysis restart 
addition add certain amount transient randomness decision procedure aid selection new search path 
randomness typically small lasts decisions 
course frequency restarts characteristics transient randomness configurable final implementation 
noted restarts impact completeness algorithm 
clauses kept algorithm complete completeness maintained increasing relevance parameter slowly time 
grasp uses similar strategy maintain completeness extending restart period restart chaff default generally improves performance 
note chaff restarts differ employed instance grasp affect current decision statistics 
mainly intended provide chance change early decisions view current problem state including added clauses current search path 
default settings chaff may restart sense thousands times hard instance sat unsat similar results achieved restarts completely disabled 

experimental results smaller examples relatively inconsequential run times chaff comparable solver 
larger examples solvers struggle give chaff dominates completing orders magnitude time best public domain solvers 
chaff run compared solvers benchmark formulas 
obviously impossible provide complete results individual benchmark 
summary results class benchmarks 
comparisons done grasp sato 
grasp provides range parameters individually tuned 
different recommended sets parameters grasp grasp 
sato default settings restricts size added clauses literals opposed default 
chaff default cherry smj configuration cases dimacs instances required single parameter change decision strategy 
experiments done cpu mhz ultrasparc ii solaris machine gb main memory 
memory usage typically mb depending run time instance 
table provides summary results dimacs benchmark suite 
row set individual benchmarks grouped category 
grasp options resulted benchmarks aborting secs sufficient sato chaff complete instances 
examples complete chaff comparable superiority hole par classes difficult ones 
dimacs benchmarks considered easy variety solvers excel various subsets 
note dimacs benchmarks large sat instance sets par set solvers considered performs benchmark classes 
set experiments done cmu benchmark suite 
consists hard problems satisfiable unsatisfiable arising verification microprocessors detailed description benchmarks chaff performance see 
chaff begins show clearly 
sss chaff order magnitude faster complete examples secs 
grasp sato abort hard unsat instances set known take grasp sato significantly longer complete sat instances 
results randomized restart techniques newest version grasp reported subset examples 
unable reproduce results due unavailability necessary configuration profiles grasp see 
comparing experiments reported results shows superiority chaff generous margin differences testing environments 
sss chaff completed benchmarks sato grasp 
sss sat sato aborted instances decided running instances lack hope limited compute cycles 
grasp competitive set 
chaff completed secs sec limit instance 
unsat grasp sato complete easy example aborted 
chaff completed 
vliw sat sato grasp aborted instances tried 
chaff finished seconds total 
benchmarks incomplete solvers considered find solutions time comparable chaff harder unsatisfiable instances benchmarks solver authors able run chaff performance prohibited running harder problems 
information released run grasp locally reproduce results results revisited results indicate chaff full orders magnitude faster hard unsat instances order magnitude faster satisfiable instances 

describes new sat solver chaff shown order magnitude cases orders magnitude faster existing public domain sat solvers difficult problems eda domain 
speedup result sophisticated learning strategies pruning search space efficient engineering key steps involved basic search algorithm 
specifically speedup derived highly optimized bcp algorithm decision strategy highly optimized speed focused added clauses 

marques silva randomization learning solve hard real world instances satisfiability proceedings th international conference principles practice constraint programming cp september 
bayardo schrag csp look back techniques solve real world sat instances proc 
th nat 
conf 
artificial intelligence aaai aaai press mit press pp 

biere cimatti clarke zhu symbolic model checking bdds tools algorithms analysis construction systems tacas number lncs 
springer verlag 
www cs cmu edu bmc html dimacs benchmarks available ftp dimacs rutgers edu pub challenge sat benchmarks freeman improvements propositional satisfiability search algorithms ph dissertation department conflict backtrack 
implication literal value unassigned literal value literal value computer information science university pennsylvania may 
kunz reasoning boolean networks kluwer academic publishers 
marques silva impact branching heuristics propositional satisfiability algorithms proceedings th portuguese conference artificial intelligence september 
marques silva sakallah grasp search algorithm propositional satisfiability ieee transactions computers vol 

mcallester selman kautz evidence invariants local search proceedings aaai mit press pp 

stephan brayton sangiovanni combinational test generation satisfiability ieee transactions computer aided design integrated circuits systems vol 

unsat unsat vliw sat sss sat superscalar suite superscalar suite available www ece cmu edu bryant effective boolean satisfiability procedures formal verification superscalar vliw microprocessors proceedings design automation conference 
zhang sato efficient propositional prover proceedings international conference automated deduction pages july 
bcp watched literals times seconds 
total number instances set number instances aborted 
number follows instances set attempted due frequency aborts 
time total user time search including aborted instances sato run set 
grasp run set 
chaff run set 
solvers run options marked 
shown result whichever set options better set 
grasp options rt dr grasp options rt sato options sato options default chaff options cherry smj config chaff options cherry smj config plus table grasp sato chaff time time time ii ii ii aim aim par ssa dubois hole par abort timeout sets 
table grasp sato chaff time time time sss sss sss sat unsat vliw sat abort timeout sets ed sets 
