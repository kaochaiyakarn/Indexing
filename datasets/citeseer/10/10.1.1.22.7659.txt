inductive datatypes hol lessons learned formal logic engineering stefan berghofer markus wenzel technische universitat munchen institut fur informatik munchen germany www tum de www tum de 
isabelle hol acquired new versions definitional packages inductive datatypes primitive recursive functions 
contrast predecessors implementations isabelle hol datatypes may mutually indirect recursive infinitely branching 
support inverted datatype definitions characterizing existing types inductive ones 
constructions fully definitional established hol tradition 
stepping back logical details see typical example called formal logic engineering 
observe building realistic theorem proving environments involves issues pure logic 
theorem proving systems higher order logics hol coq pvs isabelle reached reasonable level maturity support non trivial applications :10.1.1.17.3839
arbitrary example consider isabelle bali extensive formalization substantial parts java type system operational semantics undertaken isabelle hol 
current state art final word theorem proving technology 
experience sizable projects isabelle bali shows quite lot requirements partially met existing systems 
focusing actual core system ignoring issues user interfaces theorem provers layers concepts varying logical status considered 
includes purely syntactic tools parser pretty printer macros type checking type inference basic deductive tools higher order unification matching proof procedures simple automatic ones search utilities just name 
seen wider perspective actual underlying logic set theory type theory element larger picture 
consequently making theorem proving system success involves pure logic rating 
big difference able express certain concepts principle logic vs offering customers scalable mechanisms doing system 
advanced definitional mechanisms particularly important aspect realistic formal logic environment 
working pure logic sufficient principle actual applications demand extensive libraries derived concepts general mechanisms introducing certain kinds mathematical objects 
typical example inductive sets types recursive function definitions 
folklore theorem proving similar programming slightly difficult 
apparently holds corresponding development tools severe gap sophistication 
example consider standard interactive theorem proving technology related incremental compilers languages ml haskell 
apparently theorem provers primitive inaccessible wider audience advanced programming language compilers 
particular definitional mechanisms fact resembling theory compiler quite closely advanced users expect 
obvious way amend argue transfer general concepts methodologies established disciplines software systems engineering theorem proving systems eventually resulting called formal logic engineering 
getting back firm grounds main focus discuss new versions advanced definitional mechanisms isabelle hol acquired inductive coinductive definitions sets usual knaster tarski construction cf 
inductive datatypes primitive recursive functions 
primary efforts went datatype primrec mechanisms achieving considerably powerful system available 
particular datatypes may involve mutual indirect recursion arbitrary branching existing types 
furthermore datatype definitions may inverted sense existing types natural numbers may characterized inductive 
new packages designed cooperation subsystems isabelle hol mind recdef general founded functions record single inheritance extensible records 
applications emerge 
hierarchy current isabelle hol definitional packages illustrated 
note typedef refer hol primitives axiomatic type classes 
typedef coinductive inductive datatype recdef record primrec arbitrary infinite branching supported isabelle 
basic mode operation advanced definitional package datatype follows simple description desired result theory user system automatically generates sizable amount characteristic theorems derived notions underneath 
different approaches stemming different logical traditions achieved exactly 
approaches roughly characterized follows 
axiomatic resulting properties generated syntactically introduced theory axioms 
inherent underlying logic extended order support desired objects direct way 
definitional existing logic granted new objects represented terms existing concepts desired properties derived definitions system 
approaches known advantages disadvantages 
example definitional way certainly hard demanding quite lot special purpose theorem proving package implementation 
hand possible achieve high quality resulting system purely logical sense meaning wrong axioms asserted wider sense theorem proving system technology general 
rest structured follows 
section presents examples illustrating user level view isabelle hol new datatype primrec packages 
section briefly reviews formal logic preliminaries relevant hol basics simple definitions inductive sets 
section describes detail class admissible datatype specifications observing fundamental limitations classical set theory 
section techniques constructing mutually indirectly recursive infinitely branching datatypes hol including principles induction recursion 
section discusses issues integrating purely logical achievements scalable working environment 
examples toy example formalize aspects simple functional programming language consisting arithmetic boolean expressions formalized types ff aexp ff bexp parameter ff program variables 
datatype ff aexp ff bexp ff aexp ff aexp sum ff aexp ff aexp var ff num nat ff bexp ff aexp ff aexp ff bexp ff bexp specification emits quite lot material current theory context injective functions sum ff aexp ff aexp ff aexp datatype constructors 
valid expression programming language denoted typed constructor term 
functions inductive types typically defined primitive recursion 
define evaluation functions arithmetic boolean expressions depending environment ff nat 
consts evala ff nat ff aexp nat evalb ff nat ff bexp bool primrec evala evalb evala evala evala sum evala evala evala var evala num evalb evala evala evalb evalb evalb similarly may define substitution functions expressions 
mapping ff ff aexp parameter lifted canonically aexp bexp 
consts ff ff aexp ff aexp ff aexp ff ff aexp ff bexp ff bexp primrec sum sum var num num relationship substitution evaluation expressed lemma evala evala evala evalb evalb evala prove theorem straightforward reasoning involving mutual structural induction expressed rule delta delta delta delta delta delta slightly advanced example consider type ff fi fl tree arbitrarily branching nesting appropriate function type 
datatype ff fi fl tree atom ff branch fi fl 
ff fi fl tree ff stands leaf values fi branch values fl subtree indexes 
important note fl may type including infinite nat need datatype 
induction rule ff fi fl tree atom branch note may assume predicate holds values subtrees order show branch 
induction rule isabelle hol automatically proves existence combinator tree rec primitive recursion tree rec ff ffi 
fi 
fl 
ff fi fl tree 
fl ffi ffi 
ff fi fl tree ffi tree rec atom tree rec branch tree rec ffi case branch function tree rec recursively applied function values subtrees 
example primitive recursive function type tree consider function member checks tree contains atom expressed tree rec 
isabelle hol primrec package provides accessible interface primrec member atom member branch member formal logic preliminaries logic choice 
question subtle 
comes real applications large system developed years choice left underlying logic 
changing foundations world may bad idea cares existing base libraries applications 
hol stemming church simple theory types proven robust base years 
simplistic respects hol proved capable sophisticated constructions weaknesses 
example due simple types hol admits interesting concepts intra logical overloading object oriented features 
constructions inductive types require plain simply typed set theory 
isabelle hol simply typed set theory syntax hol simply typed calculus 
types variables ff applications including function types right associative infix 
terms typed constants variables applications abstractions terms typed standard rules 
theories consist signature types constants axioms 
theory induces set derivable theorems depending fixed set deduction rules state obvious facts classical set theory 
starting minimalistic basis theory concepts developed definitionally 
isabelle hol provides standard notions classical set theory 
sets type ff set infix refers image reverse image inv inverts function lfp gfp greatest fixpoints powerset lattice 
sum type ff fi constructors inl inr 
operations standard mathematical notation 
simple definitions hol methodology dictates definitional theory extension mechanisms may 
hol provides primitive mechanisms constant definitions type definitions definitional packages built top 
ffl constant definition may add new constant signature introduce axiom form provided occur tv tv fv fv ffl type definition rep term type set describing non empty set rep require tv rep fff ff may add type ff ff constants abs 
ff ff rep ff ff omega psi ff phi omega psi ff phi omega psi ff phi oe abs rep rep ff ff signature introduce axioms abs rep rep inverse rep rep abs abs inverse rep rep rep type definitions slightly peculiar feature hol 
idea represent new types subsets existing ones 
axioms state bijection isomorphism set rep new type ff ff justified standard set theoretic semantics hol 
inductive definitions inductive definition specifies set closed certain rules generally closed sets 
essentially inductively defined set fixpoint lfp certain monotone function lfp fx xg 
knaster tarski theorem states lfp fixpoint lfp lfp lfp lfp lfp set elements satisfying certain predicate 
rules embody induction principle set lfp second stronger rule easily derived monotone 
see determine suitable function set rules 
defining mutually inductive sets sn builds sum extracts sets help inverse image operator suitable injection 
datatype specifications general form general datatype specification isabelle hol form datatype ff ff delta delta delta ff ff tn kn kn kn kn ff type variables constructors distinct admissible types containing type variables ff ff type occurring specification admissible iff ff ff ff ff inductively defined rules ffl non recursive occurrences gamma non recursive contain newly defined type constructors ffl recursive occurrences fg gamma ffl nested recursion involving function types gamma gamma oe oe non recursive ffl nested recursion involving existing datatypes ng gamma theta fi fi delta delta delta ng gamma theta fi fi gamma type constructor existing datatype specified datatype fi fi delta delta delta fi fi important note admissibility relation defined hol extra logical concept 
attempting construct datatype ml function datatype package checks user input respects rules described 
point check ensure correctness construction provide high level error messages 
non emptiness hol admit empty types 
new datatypes ff ff guaranteed non empty iff constructor property argument types form ff ff datatype ff ff non empty 
nested occurrences newly defined datatypes obviously newly defined datatypes ff ff constructor recursive arguments base case ensure new types non empty 
nested occurrences datatype non empty having base case 
example ff list non empty datatype datatype list non empty 
just described non emptiness datatypes checked ml function invoking actual hol typedef primitive accept empty types place report low level error 
limitations set theoretic datatypes constructing datatypes set theory known limitations wrt 
nesting full function space 
reflected definition admissible types 
cases relate nested indirect occurrences newly defined types ff ff type expression form ff ff may type constructor existing datatype type constructor full function space 
case newly defined types may occur argument type constructor occurrences strictly positive 
drop restriction datatype constructed cf 

recall classical set theory ffl injection type fi 
cantor theorem fi element ffl injection fi 
ff fi injection 
ff ffl injection ff 
ff fi fi element ff 
ff bool injection injection bool 
fi 
datatypes constructors form datatype bool bool bool bool bool constructed injections ffi ffi type bool 
contradiction cantor theorem 
particular inductive types set theory admit weakly positive occurrences nested function spaces 
nesting datatypes exposes subtle point instantiating non recursive occurrences function types datatype ff fi ff bool fi list legal specification datatype fl fl fl yield injection ffi fl bool 
fl datatype fl fl fl legal 
recall notion admissible datatype specifications extra logical reflecting way nesting handled construction see 
contrast nested datatypes logic unexpected effect non recursive function spaces excluded 
choice internalizing vs externalizing occurs designing logical systems 
fact important aspect formal logic engineering get arrangement concepts different layers done right 
notions deep vs shallow embedding seen special case principle 
constructing datatypes hol discuss construction class inductive types 
new types defined hol semantically exhibiting suitable representing set 
starting universe closed wrt 
certain injective operations cut representing sets datatypes inductively knaster tarski cf 

having obtained free inductive types construct derived concepts particular primitive recursion 
universes representing recursive types describe type ff fi dtree trees variant universe formalized paulson extended support arbitrary branching 
type dtree provides operations leaf ff 
ff fi dtree embedding non recursive occurrences types ff fi dtree 
ff fi dtree modeling distinct constructors pair ff fi dtree 
ff fi dtree 
ff fi dtree modeling constructors multiple arguments lim fi 
ff fi dtree 
ff fi dtree embedding function types infinitary products operations injective pair pair lim lim furthermore modeling trees hol set theory tree essentially set nodes 
node value accessed unique path 
path modeled function certain depth index type nat returns branching label nat 
shows finite tree representation 
gamma gamma gamma gamma gamma gamma gamma branching label indicates path 
sequel allow node value type bool type ff 
branching labels admit elements type nat type fi 
define type abbreviations ff fi node nat 
fi nat theta ff bool ff fi dtree ff fi node set component node represents path second component represents value 
define operations push fi nat 
ff fi node 
ff fi node push case suc fst snd pair ff fi dtree 
ff fi dtree 
ff fi dtree pair push inr push inr function push adds new head element path node push function pair joins trees adding distinct elements paths nodes respectively forming union resulting sets nodes 
furthermore define functions leaf tag constructing atomic trees depth leaf ff 
ff fi dtree tag bool 
ff fi dtree leaf inr inl tag inr inr basic set theoretic reasoning shows pair leaf tag injective 
define turn injective distinct 
ff fi dtree 
ff fi dtree ff fi dtree 
ff fi dtree pair tag false pair tag true functions infinitary products embedded lim follows lim fi 
ff fi dtree 
ff fi dtree lim fz push inl delta delta delta delta delta delta delta delta prefix added path nodes union resulting sets formed 
note elements ff fi dtree trees nodes infinite depth represent proper elements datatypes 
junk elements excluded inductively defining representing set datatype 
constructing example datatype simple example describe construction type ff list specified datatype ff list nil cons ff ff list 
representing set datatype ff list represented set list rep ff unit dtree set 
ff type occurring non recursively specification list argument dtree just ff 
types occur non recursively argument sum types 
nested recursion involving function types second argument dtree just dummy type unit 
define list rep inductively nil rep list rep ys list rep cons rep ys list rep nil rep dummy cons rep ys pair leaf ys constructors invoking type definition mechanism described introduces abstraction representation functions abs list ff unit dtree ff list rep list ff list 
ff unit dtree axioms rep list inverse abs list inverse rep list functions define constructors nil cons nil abs list nil rep cons xs abs list cons rep rep list xs freeness prove nil cons distinct cons injective nil cons xs cons xs cons xs xs xs isomorphism ff list list rep easily follows fact distinct consequence injectivity pair 
structural induction ff list induction rule form nil xs xs cons xs xs list ind proved induction rule nil rep ys ys ys list rep cons rep ys ys list rep ys list rep ind representing set list rep derived inductive definition package rules described 
prove list ind show xs deduced assumptions nil xs xs cons xs derivation cons abs list ys abs list cons rep rep list abs list ys ys abs list ys ys list rep abs list cons rep ys rep list xs list rep abs list rep list xs xs starting goal xs axioms rep list inverse rep list introducing local assumption rep list xs list rep unfolding xs abs list rep list xs 
list rep ind applied ys instantiated ffi abs list rep list xs respectively 
yields new subgoals nil rep case cons rep case 
consider cons rep case axiom abs list inverse local assumption ys list rep unfold ys rep list abs list ys 
applying definition cons fold abs list cons rep rep list abs list ys cons abs list ys 
obviously cons abs list ys follows local assumption abs list ys assumption xs xs cons xs 
principle inductive types fully determined freeness structural induction 
applications demand additional derived concepts course case analysis size functions primitive recursion 
primitive recursion function lists primitive recursive iff expressed suitable instantiation recursion combinator list rec fi 
ff ff list fi fi ff list fi list rec nil list rec cons xs xs list rec xs pointed elegant way constructing function list rec build graph list rel inductive definition define list rec terms list rel hilbert choice operator nil list rel xs list rel cons xs xs list rel list rec xs xs list rel derive characteristic equations list rec show list rel represent total function list xs unique xs list rel proof structural induction xs mutual recursion mutually recursive datatypes ff aexp ff bexp introduced treated quite similarly 
representing sets aexp rep bexp rep type ff unit dtree set graphs aexp rel bexp rel primitive recursion combinators defined mutual induction 
example rules constructor aexp rep aexp rep pair bexp rep aexp rel aexp rel bexp rel nested recursion datatype ff fi term typical example nested indirect recursion datatype ff fi term var ff app fi ff fi term list pointed datatype specifications nested recursion conceptually unfolded equivalent mutual datatype specifications nesting 
follow extra logical approach avoiding complications internalized nesting 
unfolding specification yield datatype ff fi term var ff app fi ff fi term list ff fi term list nil cons ff fi term ff fi term list bad idea introduce type ff fi term list constructors nil cons prevent reusing common list lemmas proofs terms 
prove representing set ff fi term list isomorphic type ff fi term list 
representing set inductively define sets term rep term list rep type ff fi unit dtree set rules leaf inl term rep ts term list rep pair leaf inr ts term rep dummy term list rep term rep ts term list rep pair ts term list rep types occurring non recursively datatype specification ff fi argument dtree ff fi 
defining representation function invoking type definition mechanism term introduces functions abs term ff fi unit dtree 
ff fi term rep term ff fi term 
ff fi unit dtree abstracting elements term rep obtaining representation elements ff fi term 
get representation list terms define rep term list ff fi term list 
ff fi unit dtree rep term list nil dummy rep term list cons ts pair rep term rep term list ts determining representation nil trivial 
get representation cons ts need representations ts 
obtained function rep term introduced obtained recursive call rep term list 
obviously rep term list primitive recursive defined combinator list rec rep term list list rec dummy ts pair rep term abs term list inv rep term list key observation abs term list rep term list properties abs term list rep term list xs xs ys term list rep rep term list abs term list ys ys rep term list xs term list rep 
ff fi term list term list rep isomorphic proved structural induction list induction rep term list 
looking hol type definition mechanism notice properties exactly form axioms introduced actual newly defined types 
proofs case mutual recursion nesting simplifies matters considerably 
constructors define constructors term var abs term leaf inl app ts abs term pair leaf inr rep term list ts infinitely branching types show construct infinitely branching types ff fi fl tree cf 

representing set tree rep type ff fi fl dtree set 
types ff fi occur non recursively specification argument dtree sum ff fi types 
branching type type occurring left fl 
fl second argument dtree 
define tree rep inductively rules leaf inl tree rep funs tree rep pair leaf inr lim tree rep premise funs tree rep means function values represent trees 
monotone function funs defined funs fi set 
ff fi set funs fg range sg constructors define constructors tree atom abs tree leaf inl branch abs tree pair leaf inr lim rep tree ffi definition atom straightforward 
form branch element subtrees denoted determine representation subtrees composing rep tree represent resulting function lim 
structural induction induction rule type tree shown derived corresponding induction rule representing set tree rep instantiating ffi abs tree rep tree respectively leaf inl funs tree rep fx xg pair leaf inr lim tree rep unfold fold proof technique seen extended functions funs tree rep rep tree ffi abs tree ffi 
primitive recursion define tree rec combinator constructing graph tree rel inductively atom tree rel compose tree rel branch tree rel monotone function compose second rule defined compose ff fi 
fi theta fl set 
ff fl set compose ff rg set compose consists functions obtained composing function relation may necessarily represent total function compose empty contain function 
unique tree rel unique compose tree rel 
key property prove tree rel represents total function 
complex function types construction described slightly general 
assume want define datatype datatype specification contains function types oe delta delta delta oe representing set rep type oe theta delta delta delta theta oe delta delta delta oe theta delta delta delta theta oe mn dtree set representation function oe delta delta delta oe lim sum case dummy dummy gamma times rep ffi uncurry ffi delta delta delta ffi uncurry gamma times dummy dummy gammai times uncurry ff fi fl ff theta fi fl sum case ff fi delta delta delta 
ff fi ff delta delta delta ff fi injective uncurry uncurry iff sum case fn sum case iff fn gn building working environment inverting datatype definitions hierarchy definitional packages illustrated dependency auxiliary theories construction conflict 
example basic types nat ff fi ff theta fi universe underlying datatypes 
characterized inductive types built manually datatype available stage 
course keep isabelle hol standard library free accidental arrangements due bootstrap problems hol logic 
note types actual datatypes offering standard repertoire derived concepts induction recursion pattern matching cases resulting system conceptually simpler special cases 
furthermore proper datatypes may indirect recursion 
users certainly expect able nest types ff fi ff theta fi 
propose inverted datatype definitions answer problem 
type freeness induction theorems rep datatype mechanism figures set constructors rest standard datatype constructions automatically 
avoid cycles theory package dependencies clean way 
note mechanism internally unwinding indirect recursion reconsider term list vs term list 
purely logical point view probably approach bootstrap issues differently 
example provides careful development theory underlying datatype construction reducing requirements bare minimum avoiding natural numbers 
interestingly actual implementation fully follow scheme natural numbers 
cooperation definitional packages depicted isabelle hol packages built top 
example record constructs extensible records defining separate non recursive datatype record field 
packages recdef refer certain information datatypes involved wellfounded recursion size functions 
see provisions order support cooperation definitional packages properly 
particular means store auxiliary information theories 
packages datatype associate sufficient source level information type set constructors induction rule primrec combinator 
get robust scalable system trying weed primitive logical declarations emitted package 
isabelle support appropriate theory data concept 
extra logical information associated logical objects may offer users uniform view certain general principles 
example proof induction case analysis may applied actual tactic figured internally 
note deriving definitional mechanisms record datatype operations inherited 
case analysis record fields plain datatypes 
related discussed isabelle hol new definitional packages inductive types primitive recursive functions see different levels concept 
logical level reviewed set theoretic construction mutual nested arbitrarily branching types primitive recursion combinators 
starting schematic universe trees similar extended support infinitely branching cut representing sets inductive types usual knaster tarski fixed point approach 
stepping back pure logic bit discussed issues considered important achieve scalable robust working environment 
certainly constitute systematic discipline engineering argue important line follow order provide theorem proving systems successful larger scale 
slightly different focus discusses approaches proof engineering 
importance advanced definitional mechanisms applications observed years ago 
melham pioneers hol datatype interestingly admitting arbitrary ml values stored mechanism type safe ml see 
package nesting extended gunter general branching 
paulson establishes knaster tarski primary principle underlying inductive types implementation isabelle zf set theory supports infinite branching 
volker proposes version datatypes isabelle hol nested recursion internalized logic resulting unexpected restrictions non recursive occurrences function spaces 
harrison undertakes careful logical development mutual datatypes cardinality reasoning aiming reduce auxiliary theory requirements minimum 
implementation hol light acquired nesting 
isabelle hol packages datatype primrec carefully designed support superset functionality respect purely logical virtues integration scalable system 
intended story stage 
follow knaster tarski duality quite naturally long simple cases considered 
nesting mixing datatypes useful way difficult 
proposes way doing unclear informal categorical reasoning transferred formal set theory hol zf 
non freely generated types useful available nesting 
typical applications refer type contains finitary environment 
currently usually approximated nesting ff theta fi list 
actual combination definitional packages important step sophisticated standards established functional language compiler technology example 
achieved decent cooperation packages built top significant gap arbitrary combination mutual nested separate packages 
current haskell compilers example module read theory may consist arbitrary declarations classes types functions may referred mutually recursive 
obviously theorem prover technology need time reach level account compilation means actual theorem proving provided definitional packages 
barendregt 
quest correctness 
images smc research pages 
stichting mathematisch centrum amsterdam 
berghofer 
isabelle hol german 
master thesis technische universitat munchen 
church 
formulation simple theory types 
journal symbolic logic pages 
cornes courant 
huet mu 
coq proof assistant user guide version 
inria rocquencourt lyon 
gordon melham editors 
hol theorem proving environment higher order logic 
cambridge university press 
gunter 
sml style datatype declarations hol 
gordon editors higher order logic theorem proving applications volume ifip transactions pages 
north holland press 
gunter 
broader class trees recursive type definitions hol 
joyce seger editors higher order logic theorem proving applications volume lncs pages 
springer 
harrison 
inductive definitions automation application 
schubert alves foss editors higher order logic theorem proving applications proceedings th international workshop volume lncs pages aspen grove utah 
springer 
harrison 
hol done right 
unpublished draft 
jacobs 
proof principles datatypes iterated recursion 
moggi rosolini editors category theory computer science volume lncs pages 
springer 
wenzel 
locales sectioning concept isabelle 
technical report university cambridge computer laboratory october 
melham 
automating recursive type definitions higher order logic 
birtwistle subrahmanyam editors current trends hardware verification automated theorem proving pages 
springer 
wenzel 
object oriented verification record subtyping higher order logic 
grundy editors theorem proving higher order logics volume lncs 
springer 
nipkow von oheimb 
java ight type safe definitely 
proc 
th acm symp 
principles programming languages 
acm press new york 
owre rajan rushby shankar srivas :10.1.1.17.3839
pvs combining specification proof checking model checking 
alur henzinger editors computer aided verification volume lncs 
springer 
owre shankar 
datatypes pvs 
technical report csl computer science laboratory sri international 
paulson 
fixedpoint approach implementing inductive definitions 
bundy editor proceedings th international conference automated deduction volume lnai pages nancy france 
springer 
paulson 
isabelle generic theorem prover volume lncs 
springer 
paulson 
mechanizing coinduction corecursion higher order logic 
journal logic computation 
pfenning paulin mohring 
inductively defined types calculus constructions 
proceedings mathematical foundations programming semantics volume lncs 
springer 
slind 
function definition higher order logic 
wright grundy harrison editors th international conference theorem proving higher order logics tphols volume lncs 
springer 
slind 
derivation induction schemes higher order logic 
th international conference theorem proving higher order logics tphols volume lncs 
springer 
volker 
representation datatypes isabelle hol 
paulson editor isabelle users workshop 
wenzel 
type classes overloading higher order logic 
th international conference theorem proving higher order logics tphols volume lncs 
springer 

