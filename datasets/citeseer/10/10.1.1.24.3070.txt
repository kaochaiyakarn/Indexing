semantics program dependence robert cartwright matthias felleisen department computer science rice university houston tx revision appeared sigplan optimizing parallelizing compilers procedural languages rely various forms program dependence graphs pdgs express essential control data dependences atomic program operations 
provide semantic justification practice deriving different forms program dependence graph output pdg def order pdg semantic definitions non strict generalizations denotational semantics programming language 
process demonstrate output pdg def order pdg minor technical modifications conventional data flow programs 
addition show semantics def order pdg dominates semantics output pdg semantics dominate preserve semantics sequential execution 
program dependence graphs optimizing parallelizing compilers procedural languages rely intermediate graph representations express essential control data dependences atomic program operations 
prominent examples literature control flow graph call graph def chain data dependence graph extended data flow graph 
ferrante ottenstein warren proposed comprehensive graph representation called program dependence graph pdg suitable scalar optimization vectorization general parallelization 
subsequently horwitz prins reps revised pdg representation basis integrating program revisions 
refer original pdg output pdg revised form def order pdg 
program dependence graph represents partial ordering statements predicates program followed preserve semantics original program 
expresses informal non sequential semantics compiler writers assign programs 
widespread pdg representation basis program authors partially supported nsf darpa 
compilation optimization raises interesting questions semantic properties analysis process 
ffl program dependence graph representation natural interpretation data flow programming language 
ffl appropriate denotational operational semantics language 
ffl translation textual representation dependence graph representation preserve program semantics 
ffl semantics pdgs justify common optimizing transformations 
ffl semantic characterization program dependence provide insight better program optimization techniques 
step formal theory program dependence horwitz prins reps proved def order pdg representation adequate programs program dependence graphs meaning 
attempt provide semantic justification program optimization process dependence analysis 
conjunction companion tackles questions preceding list presents results 
output pdg def order pdg representations program minor technical modifications conventional data flow programs derived denotational semantics original program 

derivation yields denotational semantics program dependence graphs explains significance data flow control flow information 

semantics output pdg closer semantics sequential execution semantics def order pdg 
precisely semantics def order pdg dominates semantics output pdg dominate semantics original programming language 
remainder consists sections 
section defines syntax conventional semantics simple procedural programming language describes output pdg def order pdg representations language 
section analyze semantics language perspective program optimization introduce non strict lazy generalizations semantics expose parallelism 
fourth section contains principal technical results 
semantically interpreting concepts control data dependence derive denotational definition control data demand generated program expressions 
perform staging analysis demand semantics produces natural decomposition meaning function components construction algorithm builds program dependence trees ii meaning function interprets trees 
section describe build pdgs program dependence trees 
final section presents directions research potential applications semantic characterization program dependence 
semantic domains val unspecified oe store ide gamma 
val semantics exp gamma 
store gamma 
val unspecified strict stmt gamma 
store gamma 
store strict oe oe oe strict oe strict strict oe strict oe oe gamma 
strict oe strict oe strict fix woe oe gamma 
strict oe oe denotational semantics programming language program dependence typical programming language optimizing parallelizing compilers simple core consisting assignment statements sequencing constructs loop constructs branching facilities 
purpose discussion focus attention simple statement oriented programming language syntax ranges statements ranges set identifiers ide range set expressions exp sake generality set expressions exp left unspecified assume expressions may refer identifiers ide 
functions refs delta defs delta map programs expressions sets identifiers occur expressions left hand sides assignment statements respectively 
definition denotational semantics meaning function denoted symbol strict syntactic domain exp unspecified definition parameterized domain val denotations expression meaning function mapping expressions denotations 
restriction impose assumption domain val flat contains domain bool fg subset 
semantic domain programs constructed domain values domain functions mapping stores stores store gamma 
store store oe mathematical representation machine memory maps identifiers values ide gamma 
val input identifier undefined value store function oe undefined 
infix notation oe represents functional update store oe strict arguments 
updated store oe identical oe oe value variable assuming oe defined 
strict update function delta delta delta store gamma 
ide gamma 
val gamma 
store defined rules oe oe oe ae oe cases 
ffl ffi fi fl ffl ffi fi fl ffl ffi fi fl ffl ffi fi fl ffl ffi fi fl hj output gamma gamma gamma gamma psi phi phi phi phi phi pdg program program dependence graph consists set nodes representing atomic computations set edges representing dependences 
atomic computations assignment flat domain partially ordered set ordinary data values augmented undefined value bottom 
denoting divergent computation 
ordering relation relation element approximates undefined value approximates element 
function strict argument iff undefined 
inputs undefined 
statements predicate expressions 
set edges contains data dependence edges control dependence edges 
dependence edge nodes indicates computation target node depends computation source node 
program node uses variable data dependence definition iff path flow chart representation program contain intervening definition predicate precedes node iff paths program contain paths contain controls precedes path contain intervening predicate precedes program node control dependence predicate iff controls form control dependence called output dependence respected programs execute accord conventional sequential semantics 
definition variable output dependence preceding definition variable iff path contain intervening definition relaxation output dependence accurately transitive closure output dependence called def order dependence ignores output dependences definitions node depends 
definition variable def order dependence preceding definition variable iff path sources data dependence edges program node 
illustration pdg representation consider program df translation dependence graph form produces pdg 
data flow edges assignment node demanding value predicate node controls second assignment control edge assignment control edge 
output def order edge depending graph representation assignment nodes specifies order evaluation assignments 
truth value labeled edges def order edges denote control dependences 
representation loops similar statements introduces cyclic dependences requires classification data dependences loop dependent loop independent 
informal semantics underlying dependence graph representation extended data flow model computation 
assignment node graph computes new identifier value predicate node determines boolean value selection elimination computation nodes 
incoming data dependence edges node specify input values node computation outgoing data edges indicate nodes depend result node 
control dependences task ordering selecting eliminating computations 
crucial property data flow model computation absence centralized store store oriented operations 
notion overwriting values locations 
assignment node directly passes generated binding successor nodes graph 
rigorous formulation data flow semantics pdgs reveals disturbing feature conventional pdg representation sequencing information provided output def order dependences transmitted data flow edges nodes discriminate multiple definitions identifier 
overcome problem formal semantic definition augment flow data values produced executed assignments predicates 
different ways generalize dataflow execution model 
program execution generalized include dynamically deleting nodes edges 
way sequencing information indicated output def order edges transmitted nodes need 
second program execution extended node graph executed dummy tokens denoting undefined value produced definitions executed original sequential program 
presents extended dataflow semantics pdgs transmits information deleting graph nodes edges program execution 
non strict semantics denotational semantics reflects behavior sequential implementation assignment statement alters contents memory cell 
effect sequence statements compound effect evaluating components left right 
statement selects appropriate branch evaluation 
loop composes effects repeated evaluations body statement guard evaluates sequentiality program execution reflected denotational semantics strictness store update function delta delta delta semantic function strict statement encountered sequential execution program diverges input store oe function strict applied oe yields completely undefined store store regardless statements follow precede example straight line program df diverges evaluation diverges values affect value may variable subsequent computations 
similarly program df true diverges defined value may variable demanded subsequent computations 
perspective program optimization semantics sequential execution restrictive 
program assignment superfluous value demanded second assignment superfluous 
similarly program loop superfluous value demanded 
fortunately easy modify denotational definition assignment evaluated affect visible contents program store 
trick additional semantic domains ffi update store gamma 
ide gamma 
val gamma 
store delta mask finset ide gamma 
store gamma 
store gamma 
store gamma 
store semantics update gamma 
mask gamma 
stmt gamma 
store gamma 
store ffi delta ffi oe oe ffi delta delta defs defs oe ffi delta ffi delta oe ffi delta delta defs defs oe oe gamma 
ffi delta oe ffi delta oe ffi delta ix woe oe gamma 
ffi delta oe oe generalized denotational semantics decouple effects disjoint update operations interfere standard semantics non termination 
simplest way decouple disjoint update operations replace strict store update operation delta delta delta lazy alternative delta delta delta non strict third argument 
lazy update operation defined rules oe oe oe interpretation assignment statement affects specified cell store 
modification permits statements executed parallel inhibits parallel execution program contain loops evaluation loop produces undefined state demanded variables updated loop 
program simple example phenomenon 
program diverges lazy interpretation update operation demanded variable 
general approach decoupling effects disjoint updates modify denotational definition interpret statements masked store transformers complete store transformers 
meaning statement transformer entire input store oe transformer slice store consisting variables defined variables defs 
remainder input store unaffected executing interpretation program demand strict update operation conventional semantics variable computes value terminates loop computing converge 
masked semantics differs standard semantics follows 
mask store transformations performed statements program replace right hand side equation strict ff semantic definition application ff oe gamma 
oe oe effect different store updates masked semantics interacts subtle way definition storage update operation 
masking effects divergent assignment statements definition store behave lazy fashion store update operation strict 
fact laziness store update operation effect laziness stores constructed masked semantics detail 
update operation demands old value updated variable value variable remain undefined undefined regardless effect subsequent assignment statements 
contrast update operation demand old value divergent assignment undone subsequent assignment statement 
note choice update operation strict third argument depends solely update oe strict oe 
masked semantics reveals parallelism combined lazy update operation delta delta delta 
effect masked lazy combination achieved lazy update operation delta delta delta delta delta delta defined rule oe oe 
oe operational perspective difference behavior delta delta delta update operations masked semantics delta delta delta forces update operations particular variable performed exactly order sequential execution 
easy verify lazy update operation dominates weakly lazy operation dominate strict update operation delta delta delta delta delta delta delta delta delta remainder lazy update delta delta delta preference weakly lazy update delta delta delta delta delta delta simpler definition 
function dominates function iff computation terminates computation terminate yield answer 
semantic generalizations strict interested different masked generalizations semantic function strict uses lazy update delta delta delta uses strict update delta delta delta 
easiest way new semantic definitions prove really generalizations original semantics write semantic definition parameterized respect storage update operation ffi masking operation delta 
new definitions original semantic definition strict simply different instances parameterized definition 
contains complete definition obtain original semantic function strict non strict variants simple instantiations strict delta delta delta lack df delta delta delta lazy df delta delta delta oe gamma 
oe oe gamma 
oe note modify store transformers preserve meaning variables outside easy prove equation strict delta delta delta fixed point induction recursive definition masking operation obviously approximates continuous function parameters ffi delta approximation relations delta delta delta delta delta delta update functions imply approximation relations semantic functions strict lack lazy differences semantics best illustrated example 
df loop expression loop diverges input stores oe 
different meaning semantic definition strict oe 
store lack oe oe gamma 
lazy oe store transformer preserves meaning variable oe oe oe short lazy semantics ignores undefined values produced results irrelevant subcomputations semantics ignores undefined values corresponding irrelevant variables 
consequently interpret non strict generalizations semantics formalizations different perspectives assumptions optimizing compiler 
section show perspectives influenced design program dependence representations 
update gamma 
mask gamma 
stmt gamma 
ide gamma 
store gamma 
val ffi delta ffi oe oe lazy delta delta delta gamma 
oe oe lack delta delta delta gamma 
oe oe gamma 
oe oe ffi delta delta defs defs ioe ffi delta ffi delta joe ffi delta delta defs defs ioe oe gamma 
ffi delta ioe ffi delta ioe ffi delta ix ioe oe gamma 
wi ffi delta oe oe generalized demand semantics semantic approach dependence motivation translating programs dependence graph representations conviction functional representation computation exposes potential parallelism hidden sequential store oriented evaluation model associated conventional program text warren private communication 
hand goal denotational semantics define functional meaning programs explains operational behavior avoids machine specific details 
preceding observation suggests denotational semantics closely related dependence analysis 
reason decided investigate hypothesis program dependence graphs form parallel intermediate code derived demand oriented denotational semantics just compilers machine code derived conventional denotational semantics 
section presents results inquiry 
subsection show simple reformulation denotational definition exposes data demands expressions revealing data dependences statements 
subsection addresses issue control dependence 
introduce explicit parameter modeling control predicates path root program current statement 
third subsection contains staging analysis demand semantics 
resulting separation semantic function produces algorithm constructing dependence trees meaning function trees 
final subsection addresses issue generate program dependence graphs dependence trees 
data dependence primary goal dependence analysis eliminate notion centralized store illuminate data flow subcomputations program 
achieve goal answer questions 
subcomputations required determine value identifier point program 

computed value remainder program 
semantic function instantiations poorly suited answering questions presume store oriented model computation 
eliminate reliance central store transform semantic function function extracts value designated identifier entire store program 
naive way write new semantic function apply result identifier 
approach merely hide central store eliminate 
know name designated identifier program executed know initial store insight gained research deriving compilers denotational semantics suggests rearrange order arguments identifier argument precedes initial store argument 
apply transformed semantic function identifiers appear program expressions part static analysis process akin compilation 
want rewrite semantic function update gamma 
mask gamma 
stmt gamma 
store gamma 
ide gamma 
val semantic function update gamma 
mask gamma 
stmt gamma 
ide gamma 
store gamma 
val mathematically equivalent ffi ffi ffi delta oe complete definition 
instantiated different update functions produce different closely related semantic functions strict delta delta delta lack delta delta delta lazy delta delta delta closer examination non strict versions reveals simplify definition assignment clauses 
definitions move equality test identifier forward update operation 
lazy update analysis produces assignment clause lazy ioe oe oe ioe gamma 
oe oe definition delta delta delta gamma 
oe oe update analysis yields slightly different result lack gamma 
oe oe gamma 
oe oe transformations show possible identify final assignments identifier statically analyzing denotational meaning program provided update functions non strict 
form analysis weak identify data dependences program 
identifier semantic functions lazy lack identify final assignment identifier wait computation input store 
store clear determine denotation right hand side assignment statement 
point recall second question subsection determine value needed 
semantic function produce final value identifier provide data values evaluating righthand sides final assignments syntactic function refs delta determines finite set identifiers referenced expression restrict data demand expression values identifiers set refs demanding entire store 
words right hand side final assignment generates demand values finite set identifiers 
definition tells propagate demand 
input store oe final assignment built recursive application function application oe demanded identifiers reveals final assignments identifiers preceding computation 
process repeated identify data dependences program 
fact perform staging analysis section generate structural form program dependence graph similar pdgs 
form pdg expresses data dependences expressions compound statements expressions assignments 
analyze data dependence level atomic assignments predicates need analyze control information 
control dependence second component program dependence analysis determination control dependences assignments predicates 
definition semantic function code handling motivated operational interpretation evaluating predicate function selects appropriate branch determines value demanded identifier computed branch 
mathematical perspective function determines values branches selects relevant 
value generated non selected branch bottom 
val predicates typically enforce conditions prevent execution erroneous irrelevant computations 
observation suggests strategy reformulating revised semantic function produces value non selected branches simply merge results alternative statements 
obvious choice merge operation upper bound operation flat domain returns defined value applied defined value bottom 
unfortunately operation defined entire domain val upper bound non bottom values exist 
situation occur programs need extend val domain cast upper bound operation continuous function entire domain 
accomplish task attaching top element domain val elements 
resulting domain val forms complete lattice upper bound operation continuous function 
added benefit extension creates framework define semantics program dependence graphs images programs 
incorporate val revised denotational definition modify definition domains store bool depend val 
domains store ide gamma 
val bool bool domains store bool 
extended domain values val respect explicit control parameter represents accumulated boolean value predicates control path root program current statement 
parameter passes information atomic assignments indicating reachable computation 
case pass computed values sites assignments predicates demand 
case pass default value 
values final assignments identifier program component merged produce demanded answer final assignments reachable 
extra control information transmit data values directly definition sites assignments sites assignments predicates 
control parameter directly corresponds control information passed control dependence edges pdg 
abstraction respect control parameter yields new function modified semantic domains val val oe store ide gamma 
val semantics update gamma 
mask gamma 
stmt gamma 
ide gamma 
bool gamma 
store gamma 
val ffi delta gamma 
ffi oe oe lazy delta delta delta ioe gamma 
gamma 
oe oe lack delta delta delta ioe gamma 
oe gamma 
oe oe ffi delta delta defs defs ioe ffi delta ffi delta joe ffi delta delta defs defs ioe defs defs gamma 
oe oe gamma oe defs gamma 
gamma 
oe ffi delta oe defs gamma 
gamma gamma 
oe ffi delta gamma oe ffi delta fix oe defs gamma 
oe oe gamma oe wi ffi delta oe gamma gamma 
oe demand control semantics type update gamma 
stmt gamma 
ide gamma 
bool gamma 
store gamma 
val complete definition including instantiations non strict updates delta delta delta delta delta delta appears 
clause defining meaning assignments ffi delta ioe gamma 
ffi oe oe update operation ffi instantiated delta delta delta delta delta delta unfold definition update operation reveal control dependences data dependences statements expressions 
satisfies conditions ffi delta ioe ffi delta ffi delta 
update gamma 
mask gamma 
stmt gamma 
ide gamma 
store gamma 
bool gamma 
ide gamma 
store gamma 
val gamma 
store gamma 
val ffi delta oe gamma 
ffi oe lazy delta delta delta ifl gamma 
oe oe gamma 
oe lack delta delta delta ifl gamma 
oe oe oe gamma 
oe ffi delta delta defs defs ifl ffi delta ffi delta jfl ffi delta delta defs defs ifl defs defs gamma 
fli oe oe gamma oe oe defs gamma 
oe oe gamma 
oe ffi delta defs gamma 
oe gamma oe gamma 
oe ffi delta gamma ffi delta ix ifl defs gamma 
fli oe gamma oe oe gamma oe gamma 
wi ffi delta fl staged semantics program dependence trees produced denotational semantics identifies essential data control dependences computing value identifier perform staging analysis extract code representation programs 
staging analysis decomposes denotational definition static meaning function constructs intermediate representation program interpreter executes intermediate code 
critical preliminary step staging analysis transform definition meaning function phrases possible independent program input 
static meaning function construct concrete representations results applying phrases program text 
case staging analysis determine parameters semantic function depend initial store 
construct new semantic function abstracts affected parameters respect initial store passes initial store final argument 
specification domain update gamma 
mask gamma 
stmt gamma 
ide gamma 
bool gamma 
store gamma 
val semantic clauses clear arbitrary point evaluation control parameter store parameter depend initial store 
observation suggests function type update gamma 
mask gamma 
stmt gamma 
ide gamma 
store gamma 
bool gamma 
store gamma 
store gamma 
store gamma 
val formulation treats program text preceding current statement function store store noted earlier meaning current statement depend entire input store values selected variables 
re apply trick eliminate central store move identifier argument answer store produced case preceding program text argument list yielding type update gamma 
mask gamma 
stmt gamma 
ide gamma 
store gamma 
bool gamma 
ide gamma 
store gamma 
val gamma 
store gamma 
val writing new semantic function preserve semantics function initial control parameter initial store parameters abstracted initial store initial store argument ffi delta oe ioe oe oe ffi delta invariant straightforward rewrite clauses match types new semantic domain 
result staging analysis appears 
definition shows possible determine decisions conventional program execution independent initial store initial store really needed 
importantly evaluation program function rely central store stores involved local stores assignment statement predicate expression 
making assumptions expression language construct graph representations expressions eliminate local stores 
semantic domains oe code table ide gamma ffi code finite table code data node exp omega code table omega control node data node oe code data node phi data node omega data node phi code data node control node true phi data node phi data node control node true ht oe hf oe generating dependence trees update gamma 
mask gamma 
stmt gamma 
ide gamma 
control node gamma 
code table gamma 
code lazy ifl gamma 
flj refs fli lack ifl gamma 
flj refs fli fli ffi delta delta defs defs ifl ffi delta ffi delta jfl ffi delta delta defs defs ifl defs defs gamma 
fli ht flj refs gamma hf flj refs defs gamma 
hhi fli ii ffi delta fl defs gamma 
hhi fli gamma ii ffi delta gamma fl ffi delta fix ifl defs gamma 
fli ht flj refs gamma hf flj refs hi fli gamma ii ffi wi ffi delta fl interpreting dependence trees code gamma 
store gamma 
val oe oe oe hc oe oe oe oe oe gamma 
oe control node gamma 
store gamma 
bool true oe ht oe oe fhj oei hf oe oe fhj oei dependence tree semantics step staging analysis decomposition functions static meaning function interpreter 
apply required arguments initial store returns function maps initial store value 
function exactly type machine code maps initial stores answers 
devise concrete representation code decompose compiler function constructs code interpreter function determines meaning code 
separation semantic function functions simple process governed invariant delta delta delta true hi fg fgi oe delta delta delta oe ioe oe oe accomplish separation construct concrete representation time returns function maps initial store value 
example delta delta delta returns function oe oe gamma 
assignment clause parameters definition expression control parameter intermediate function fl maps identifiers code trees computing respective values 
code representation function triple flj refs rest function information 
clauses derived similar way 
semantic function reconstructs denotations code produced finite set formation operation denoted braces deltag definition strict 
consequently code expression evaluated data dependences control dependences satisfied 
defines concrete code representation functions definitions rely standard domain constructions operators explained appendix 
assignment statement produces data node consisting uninterpreted righthand side expression finite set dependence trees indexed identifiers control node 
control node atomic code true represents initial predicate data node tagged value expression field tagged data node text controlling predicate tag indicates boolean value predicate produce satisfy control dependence 
statement generates pair data nodes arm statement 
loop produces infinite sequence data nodes computes exactly iterations loop 
trees generate lazy semantics semantics respectively essentially infinite corresponding def order pdgs output pdgs 
difference lazy code trees infinite def order pdgs presence valve nodes code trees def order edges 
minor differences code trees def order pdgs defined horwitz version pdg designed support program integration program optimization 
consequently include nodes corresponding dead code dead code may live subsequent integration steps 
addition omit loop carried def order edges apparently unnecessary program integration 
similarly difference code trees infinite output pdgs presence valve nodes code trees addition output dependence edges 
valve nodes produced code generator fl discovers definition final assignment demanded identifier loop arm statement 
valve controls flow value produced preceding definition demanding site 
new definition identifier executed valve blocks flow value preceding definition 
mentioned discussion semantic function valve nodes ensure non bottom value transmitted consuming node 
semantic perspective def order output edges included conventional pdg representations insufficient 
form edge passes precedence information multiple definitions identifier consuming nodes discrimination 
conventional def order output pdg consuming node may receive different values identifier determine correct access global information status associated output def order dependences 
ffl ffi fi fl ffl ffi fi fl ffl ffi fi fl ffl ffi fi fl ffl ffi fi fl gamma gamma gamma gamma psi gamma gamma gamma gamma psi ffl ffi fi fl ffl ffi fi fl ffl ffi fi fl gamma gamma gamma gamma psi ffl ffi fi fl ffl ffi fi fl ffl ffi fi fl gamma gamma gamma gamma psi gamma gamma gamma gamma psi semantic pdg program illustrates difference code trees unwound def order pdgs simple program conventional pdg 
received value assignment second assignment provide value node tell accept value final wait value transmitted second data flow edge decision depends evaluation def order output edge second assignment completely node valve nodes solves problem 
new valve node control predicate causes second assignment node valve node send value val defined value reaches node 
result evaluation node longer depends non associated pieces graph 
collapsing trees graphs collapse tree graph partition nodes tree finite set equivalence classes construct graph determined merging nodes equivalence class 
equivalence relation defined equating tree nodes correspond assignment statement predicate program 
valve nodes equated controlling predicate program text preceding definition truth label tor edge controlling predicate node 
loop free programs unwinding collapsed graph identical original code tree nodes equivalence class tree exactly predecessors subtrees see 
programs loops collapsed graph contain information reconstruct original code tree 
problem distinguish loop carried data dependence edges loop independent edges 
overcome problem appropriately labeling edges involving loop nodes details tree reconstruction process complex lie scope 
simple example include variant lazy pdg simple program df result appears 
edges bar represent loop carried data dependence edges control data dependences 
directions research semantic analysis instructive narrow serve practical framework expressing justifying program optimizations 
satisfy goal expand programming language include fundamental operations included real programming languages composite data structures arrays pointers records procedures general control structures 
conjunction effort intend develop equational calculus reasoning pdgs 
machinery possible construct optimization laboratory enables compiler writers specify optimizing transformations concise formal notation generate experimental optimizing compilers specifications prove correctness incorporated optimizations 
ffl ffi fi fl theta theta theta theta theta thetafl ffl ffi fi fl ffl ffi fi fl ffl ffi fi fl fflfi gamma gamma gamma gamma gamma ffl ffi fi fl ffifl ffl ffi fi fl ffifl ffl ffi fi fl gamma gamma gamma gamma gamma gamma gamma gamma psi pi oe gamma gamma gamma gamma psi phi phi phi phi phi phi phi phi hj semantic pdg program 
gratefully acknowledge discussions joe warren thomas reps susan horwitz 

aho sethi ullman 
compilers principles techniques tools 
addison wesley reading mass 

ferrante ottenstein 
program form data dependency predicate regions 
proc 
th acm symposium principles programming languages 

ferrante ottenstein warren 
program dependence graph optimization 
acm trans 
program 
lang 
syst 


horwitz prins reps adequacy program dependence graphs representing programs 
proc 
th acm symposium principles programming languages 

horwitz prins reps integrating non interfering versions programs 
proc 
th acm symposium principles programming languages 

scherlis 
compilers staging transformations 
proc 
th acm symposium principles programming languages 

kuck kuhn padua wolfe 
dependence graphs compiler optimizations 
proc 
th acm symposium principles programming languages 

ottenstein intermediate program form cyclic data dependence graph 
technical report department computer science michigan tech 
university 

schmidt denotational semantics methodology language development 
allyn bacon newton mass 

rewriting semantics program dependence graphs 
proc 
th acm symposium principles programming languages 
wand loops combinator compilers 
proc 
th symposium principles programming languages 

wand semantics directed machine architecture 
proc 
th symposium principles programming languages 

wand deriving target code representation continuation semantics 
acm trans 
program 
lang 
syst 


warren hierarchical basis reordering transformations 
proc 
th acm symposium principles programming languages 

wolfe optimizing supercompilers supercomputers 
ph 
dissertation university illinois 
appendix definitions semantic functions rely domain constructors omega product phi sum infinite sequences gamma ffi finite functions associated functions delta deltai ffi constructing pairs infinite sequences respectively 
domain operators omega phi defined equations omega gg phi gg gg 
ag omega values tags construction composite objects objects distinct regardless value including 
binary function delta deltai theta gamma 
omega constructs elements omega follows ha bi 
expression abbreviates ii similarly expression abbreviates iii infix operator ffi theta gamma 
defined ffi ha ht ii domain gamma ffi set finite subsets omega correspond functions implies frequently interpret elements gamma ffi functions gamma 

