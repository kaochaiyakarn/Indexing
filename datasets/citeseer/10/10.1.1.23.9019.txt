design evaluation mimaze multi player game internet laurent gautier christophe diot inria sophia antipolis www inria fr describes design implementation evaluation mimaze distributed multiplayer game internet 
focusses transmission control mechanisms possible play real time multiplayer game internet 
major contribution designed implemented completely distributed communication architecture ip multicast 
major elements mimaze architecture multicast communication system rtp udp ip distributed synchronization mechanisms guarantee consistency game regardless network delay 
provides early evaluation game mbone elements monitoring compare efficiency applications 
missing mechanisms discussed 
keywords distributed architecture interactive applications synchronization experimental system group communication transmission control internet 
article describes design evaluation multi player distributed game internet 
mimaze distributed serverless game uses unreliable communication system mimaze transmission control rtp udp ip multicast :10.1.1.165.7150
multi player games representative new generation interactive multimedia applications includes distributed interactive simulations dis digital battle fields air traffic control atc 
distributed architecture application design synchronization mechanism cope different transmission delays participants 
synchronization mechanism called bucket synchronization analyzed document 
minimum functionality required play distributed application internet 
chosen follow dis rules 
particular require action issued game displayed participant ms 
move technical content define notions object state 
game objects 
avatars objects terrain object 
objects common behavior considered single object 
example avatar shots avatar bullet remains part avatar hits target avatar 
exact description game objects position displacement nature called game state 
architecture distributed participant computes view game state 
article structured follows 
section describes mimaze 
start description game functional architecture 
give detailed description bucket synchronization algorithm 
section describe analyze early performance measurements realized mbone 
monitoring tool re synchronize distributed traces briefly described 
performance results give opportunity discuss enhancements necessary mimaze real time interactive scalable 
conclude discussion mimaze design evaluation steps extension game realistic interactive environment 
description mimaze characteristics distributed games similar dis applications 
main difference case mimaze application cpu requirement low 
reason choosing simple game choosing complex game difficult analyze game traffic parameters 
dis characteristics apply mimaze interaction delay action issued participant reach participants ms 
network delay ms received action encoded application data unit adu late application 
large number participants 
idea large group interactive application decided single group mimaze initial experiments tell upper limit single group size 
interactive data short tens bytes frequent necessarily periodic 
differ multimedia data audio video 
game object transmit local state worst case articulated parts complex objects represent small amount information bytes 
high level dynamicity group structure topology 
participants join leave session dynamically 
context ip multicast model particularly convenient 
information continuous 
cases behavior avatar time evolution behavior time example displacement avatar trajectory bullet 
consequently decided unreliable communication support rtp udp 
mimaze design characteristics mimaze evolution 
bi dimensional pacman game player representation view game see screen shot 
avatars pacman evolve labyrinth try kill 
participant having representation vision domain global view game top shows location players 

mimaze screen shot mimaze distributed architecture mimaze knowledge game fully distributed architecture multipoint communication support server new entity joins session learn session group address download maze 
fully distributed architectures advantages compared server architectures robustness 
distributed architecture failure participants effect participants 
participant independent locally necessary information compute state game time 
architecture serverless simple application provider deploy game 
quality observed participant relies network capacities participant equipment 
scalability 
identified different factors limit scalability centralized architectures data converge server 
server consequently natural bottleneck 
maximum cpu load reached game state computation frequency slows order continue serve participants collect participants data 
interactivity lost server architecture amount data transferred network generally bigger global state usually bigger sum participants data distributed architecture game state carried network 
sense distributed architectures scalable centralized architectures 
minimum delays 
centralized architecture information takes time delivered distributed architecture 
information leaves participant location reach server game state computed 
state forwarded participants displayed 
distributed architecture action crosses network reach final destinations 
centralized architectures advantages 
participants game share game state global consistency 
server introduces natural synchronization players display game state time 
important feature centralized architectures allows game companies money 

mimaze architecture main advantage centralized architectures presence server cheating difficult 
totally distributed architecture entity decisions authority identify potential cheaters 
centralized architecture information flows server authenticate exactness global state 
consequently deployment distributed architectures require specific distributed mechanisms deal honesty participants 

applies distributed architectures 
computational resources saturate larger group size single centralized server 
game server compute global state player player player player sends adus display global state session group address game domain distribution joining new participant tcp rtp udp object characteristics dis standard defines numerous types information packetized managed application 
dis standard application level ieee standard designed applications experts 
optimized network transmission 
worse unrealistic protocol internet 
dis packets called pdu protocol data units apply distributed games 
pdus defined dis standard 
frequently es pdu entity state pdu carries state information describing game objects 
specific pdu type defined exceptions collisions fire detonation logistics control 
mimaze packets called adu application data units slightly different defined dis standard 
network optimization reasons packet type called object state adu os adu format described 
object state adu parts header payload 
flexible network transmission information field mimaze adus encoded descriptor packet payload 
generic structure descriptor type information size information information 

mimaze adu format os adu equivalent dis es pdu 
object uses os adus periodically describe behavior position speed 
exception information shooting collisions sent part object state adu 
os adus transmitted unreliable protocol frequency transmission provides natural redundancy impact adu losses reception 
main difference dis mimaze bullets remain part avatar shot 
characteristic comes game modifying required complete re design game 
consider important issue release mimaze group management point view clear articulated parts independent 
mimaze size adu bytes including bytes mimaze rtp udp ip 
important parameter game consistency analysis 
related related pieces particular interest amaze considered mimaze ancestor 
designed cheriton played lan amaze uses point point communication support 
mimaze amaze distributed architecture 
states managed differently game amaze transmits game state network maintains replicated copies game state 
amaze uses dead reckoning state extrapolation 
ip udp rtp header bytes payload descriptor descriptor descriptor type size information color collision displacement position separation articulated parts bytes 
le monde second world french game commercialized satellite tv provider 
game cd rom stores maps paris 
participants create avatar circulate paris meet avatars communicate 
game real time distributed 
participant connected game server tcp ip connection 
interesting see commercial success game participants connect session 
spline virtual distributed interactive world animation spoken interaction 
spline distributed architecture dis standard 
effort spline done flow synchronization 
communication architecture internet protocol suit multicast emulated server 
bucket synchronization mechanism mimaze participant computing local view global state synchronization introduced allow adus issued time processed participant see 
synchronization mechanism sure adus processed evaluate global state game time issued participants interval time ideally interval close mimaze time divided fixed length sampling periods bucket associated sampling period 
adus received player issued senders sampling period stored bucket corresponding interval 
participant deliver updated global state computes adus available current bucket 
example synchronization local adu issued processed adu issued location received state processing interval 
bucket synchronization allows information received delayed bucket processed order synchronized adu issued participant 

bucket synchronization mechanism aspect synchronization participants display game state time 
display frequency high equal images second implement specific mechanism perform synchronization 
mechanism needed application having sharper time constraints mimaze applications unable process buckets frequently 
synchronization delay synchronization delay computed adu reception determine bucket adu content stored 
mimaze synchronization delay equal ms minus time participant remote participant buckets state computed synchronization delay transmission delay network delay 
words adu issued absolute time rendered receiver interval containing absolute time ms 
network delay ms adu discarded bucket mechanism close playout buffer mechanism reduce network jitter effects packet audio information 
bucket frequency bucket frequency defines rate new game state computed displayed 
bucket frequency chosen carefully 
human vision continuous frequency images second chosen compute buckets second 
bucket frequency receiver parameter influenced network parameters 
reason reduce frequency local cpu congestion 
global clock mechanism bucket synchronization mechanism uses global clock mechanism evaluate delay participating entities 
clock accurate ms precision required continuous 
implementation ntp 
case ntp available ntp algorithm evaluation round trip time 
difficulties ntp levels ntp servers stratum difficult maintain synchronization participants level servers involved 
lower stratum mechanisms sufficient 
ntp encodes clock information bits rtp uses bit clock 
mimaze manipulates clock representations 
ntp provide clock signal participant compute offset participant 
current implementation order increase precision ntp stratum ntp ntp mechanisms compute clock offsets 
performance evaluation section organized subparts 
description experimental settings 
monitoring tool designed re synchronize distributed traces briefly 
define distributed game metrics analyzed 
evaluation section begins providing analysis behavior mimaze experimental session mbone 
networks game parameters analyzed 
conclude section discussion mimaze efficiency consistency 
experimental environment performed evaluation mimaze mbone players located various places france 
architecture experiment multicast tree 
delay values averaged measured network delays 
computers participating experiment sun sparc ultra dec alphas pcs 
note network delay average smaller ms 
monitoring experiment participants play mimaze participant collects trace composed network level data received adu collect senders identity emission time stamp reception time stamp sequence number 

dead reckoning deliver late adus 
application level data information contained adus sent received time stamped collected trace file 
data allow reconstruct state game computed participant 
synchronization data round trip times clock offsets respect participant 
data synchronize traces 
main difficulty benchmark computation trace re synchronization 
result system distributed absolute clock game session participant computes offsets participant 
re synchronize traces apply square algorithm clock offset measured compute approximation real offset 
offset approximation value resynchronization 

mbone architecture evaluation re synchronization method valid measured offsets far offset 
consequently ntp synchronization loose able resynchronize traces 
reason benchmarks obtained time intervals possible re synchronize clocks 
distributed game metrics problem define objective criteria multi player games evaluation 
criteria reflect far distributed game behavior behavior occured game played network delay network loss 
important functions evaluate game behavior scalability 
number participants high dynamic 
quality game influenced number participants 
complexity game worst number participants 
interaction 
control algorithms provided distributed game hide network delay separate participants 
maintaining interaction participants means view game location dependent network delay 
consistency 
distributed application participant computes application view global state 
game consistent view participants session 
define state state obtained network delays participants computed line participant emission trace 
parameters influence previous functions different kinds network parameters game parameters 
analyze 
important identify appear benchmark discussion 
inria fr inria fr eurecom eurecom fr eurecom fr fr atm fr atlas ibp fr polytechnique fr mbone fr laas fr hugo tom pif tac ms ms ms ms network parameters network parameters help understand behavior application network loss function number participants underlying network 
network delay delay pair participants measured application application user user 
game parameters identified game parameters game state defined 
game consistent participants see game state time 
number participants 
distributed architecture traffic carried network 
frequency participant sends adus 
defined participant independently depending local performance network parameters 
game speed game display frequency 
usual game speed times second corresponds bucket frequency 
experiments reduced times second tolerable effect game 
synchronization delay ds 
defined earlier synchronization delay time added received adu delay appropriate bucket 
ds network delay 
performance analysis informal analysis experience distributed game internet useful informally describe players perceived game network delay note network delays average ms number participants negative impact quality game 
previous experiments original game limited participants 
number participants reached experiment change consistency interaction perception 
displacement avatars labyrinth smooth regular participant locations 
behavior participant independent 
due distributed nature architecture unexpected behaviors occurred evaluation session participant disconnection due cpu load network failure trace memory saturation synchronization loss ntp re synchronization failure 
failure annoyed victim problem effects participants 
game designed remove immediately participant display failure detected players continue play inconvenience 
game sensitive host computer activity 
mimaze installed user space computer 
consequently de scheduled run higher priority tasks 
waiting time long ms synchronization lost game information synchronization algorithm discards packets re 
important recall game architecture totally distributed server uses multicast rtp udp ip transmission totally unreliable error recovery mechanism dead reckoning mechanism recover lost late adus 
zed 
visible consequence different participants different scoring information scores computed locally incremented participant synchronized 
bucket algorithm efficient case potential collision avatars close visible effect collision situation participant avatar unable kill close avatar 
network parameters investigate delay distribution losses 
delay distribution clock mimaze uses sender transmission time receiver arrival time os adus compute network delay couple participants 
consequently game entity maintains clock offset information session participant 
delay information coherent network delay variation adus large clock offset computed time stamps interpolated previous offset values 
interpolation new stable network delays observed 
accuracy delays computed mimaze synchronization accuracy lays accuracy delay strongly correlated accuracy clock offsets efficiency ntp 
experiment ntp stratum computers ntp stratum 
shows delay distribution measured hugo mbone experiment 
chosen distribution curves delay vs time difficult analyze 

network delay distribution observed mimaze mbone 
observe delay distribution quite large 
calculation mean standard deviation gives accurate information measure 
ms ms 
mean close average delay measured experiments ms shown 
standard deviation large 
ntp stratum synchronized global clock network gps reduce standard deviation ms 
losses analyze losses due network 
adu discarded re synchronized considered lost analyze losses due late adus section 
left shows percentage os adus lost second period time mbone 
figures right gives loss distribution distribution delay ms distribution delays delay ms percentage adus lost bucket interval 
mean loss rate mbone nationwide 
distribution loss shows loss buckets 
losses visible effect game performance adu emission frequency high compared loss rate human perception 
try analyze discussion section correlation loss emission frequency game consistency 
noticed loss rate significantly increase case mbone congestion see section 

percentage left distribution right lost adus mbone 
scalability able study scalability depth evaluation mimaze 
due reduced number participants 
possible causes reduce scalability mbone bandwidth limited bit second size os adu approximately bytes mimaze saturate mbone participants participant transmits bit second 
computation global takes approximately ms number participants 
ms buckets gives plenty type compute global state cpu congestion problem experiments participants 
consequently decided results independently number participants percentage adus 
bucket synchronization efficiency evaluate efficiency synchronization mechanism analyze percentage adus re synchronized 
gives percentage os adus re synchronized bucket algorithm reached destination hugo ms 
lost corrupted appear analyzed section 
type observations 
analysis late adus distribution right shows un synchronized late adus occur buckets buckets late adu 
result coherent average delay standard deviation observed 
maximum 
due delay evaluation inaccuracy goes explained adu received participant bucket 
phenomenon effect game mimaze keeps information compute global state 
time lost actions percentage percentage actions distribution lost actions percentage adus losses percentage buckets time previous section 
reduction delay standard deviation significant influence proportion late adus see section 

percentage left distribution right un synchronized adus mbone 
consistency chosen different metrics analyze consistency game 
measured number new adus entity compute local evaluation global state 
current game setting new adu participant available bucket time bucket processed 
new adu missing replaced adu received participant 
shows global game state computed new adus 
game state computed new adus cases 
standard deviation high ms 

percentage left distribution right re synchronized adus mbone 
noticed approximately buckets computed new adu right 
high bucket frequency human perception game participants see resulting inconsistencies 
second metric compares global state computed participant state computed monitoring tool visualized line vertical axis 
perfect scenario server architecture states line 
obviously case mimaze 
shows position global state computed hugo state participants 
vertical axis corresponds drift function time unsynchronized actions percentage percentage actions distribution unsynchronized actions percentage late adus time percentage buckets percentage late adus time synchronized actions percentage percentage actions distribution synchronized actions percentage adus delivered time percentage buckets percentage adus delivered calculated follows true true 
true distance real position avatar state position computed participant orientation avatar degrees 

comparison state global state observed hugo unit vertical axis consequently correspond degree error avatar orientation unit distance error distance unit corresponds ms constant speed move 
distance units error correspond units drift function distance units error correspond units drift function 
word units correspond orientation error single avatar avatars having distance unit error ms 
despite results observed previous metric indicated buckets computed new adus see right hugo computed correct state drift buckets 
correlation average percentage delivered adus buckets compute state experimentation needed confirm observation credible experimental conditions 
state drift units buckets units buckets 
units correspond approximately error ms distance units participants 
considered important error case human interaction 
major observation global state diverge entity systematically comme back state computed wrong state 
discussion important problem render real timeliness consistency game participants network delay participants current game network setting shown human controlled application need reliable transmission game consistent time 
improvement game consistency significantly increase 
network synchronization results obtained relatively loose global clock synchronization ntp stratum 
expect reduce standard deviation delays ms time average drift state player position drift distribution average drift state player state drift time percentage buckets state drift improve significantly consistency game ntp stratum synchronized global clock network gps 
reduction standard deviation direct influence average number un synchronized adus 
consider settings mean delay ms standard deviation ms 
assuming normally distributed network delays approximately delays shorter ms longer ms 
mean delay equal ms adus discarded 
standard deviation limited ms late adu experimental conditions percent late adus ms average network delay 
limiting standard deviation ms significantly improve mimaze performance 
adu transmission frequency bucket frequency bucket frequency independent adu transmission frequency chosen considering local parameters global state computing time bucket processed anytime new game state displayed real time properties application 
slowing bucket frequency help maintain real time properties game long global state computing time interval time buckets 
hand reducing frequency adu transmission significant impact mimaze consistency 
example division frequency transmission adu ms reduce number new adus available buckets 
network characteristics expect buckets computed new adu average percentage adu bucket 
modifying adu frequency entity modifies level redundancy information sends entities 
high frequency impact losses increase network traffic 
low frequency reduce consistency network traffic 
consequently adu emission frequency chosen depending loss rate due network late adus cpu congestion 
addition dead reckoning dead reckoning dr mandatory distributed interactive application mimaze 
dr improve efficiency game various aspects lost adus replaced dead reckoned data computed adu received participant 
mimaze approximately adus replaced dr re synchronization case network delays higher ms 
adus received late ms network delay dead reckoned fill bucket processed 
current implementation adus simply discarded 
reduce adu transmission frequency 
dr help reduce network load depending application characteristics network situation 
drawback increase cpu load receiving entities 
give approximate evaluation game consistency considering dr permitted deliver adu 
dr buckets computed new adus 
trajectory avatar change dead reckoned information corresponds real position avatar participants see state 
trajectory change dead reckoned information wrong game consistency improved 
considering direction changes happen time high case human interaction inconsistency happen buckets 
main contribution show multicast communication architecture simple synchronization mechanism bucket mechanism fully distributed interactive application properly internet 
shown reliable transmission mandatory case human interaction 
shown mimaze consistency significantly improved simple mechanisms 
able analyze scalability experimentation mimaze 
due mimaze adus short mimaze cpu requirements small number participants limited 
simple calculations shown major problem soon adu size global state computing time increase point view mimaze relatively unrealistic bytes close minimum size rtp udp ip headers 
knowledge mimaze multi player game designed totally distributed architecture serverless 
major contribution prove efficiency distributed architectures 
today popular architecture distributed systems client server 
shown distributed approach provides level performance potential scalability better real time properties 
new release mimaze designed 
main features new implementation provide error recovery dead reckoning 
expect dr received adus increase reliability making possible deliver lost late adus 
resolve collision source anticipation 
implement new adu type called exception adu new adu structure optimized network transmission control 
improvement group management kept studies 
need experiments modelling understand manage efficiently groups application perspective order minimize cost related group management 
group management major feature interactive application scalability consistency 
keep extension mimaze synchronized vrml objects video scenes mpeg audio need higher clock resolution 
ieee standard distributed interactive simulation application protocols ieee std 
ieee computer society 

ieee standard distributed interactive simulation communication services profiles ieee std 
ieee computer society 

garth smith 
scenarios appropriate protocols distributed interactive simulation 
working internet draft txt 
march 

limitations internet protocol suite distributed simulation large multicast environment 
working internet draft lsma limitations txt march 

bolot vega garcia control mechanisms packet audio internet proceedings ieee infocom san fransisco pp 
april mills network time protocol version specification implementation analysis rfc march 
cox van kampen ripley 
time synchronization experiments 
proceedings th dis workshop dis 
spring 

kiel 
unter unix am beispiel des www tu de student 
schulzrinne casner frederick jacobson :10.1.1.165.7150
rtp transport protocol realtime applications rfc january 
kurose towsley schulzrinne adaptive playout mechanisms packetized audio applications wide area networks proceedings infocom toronto canada pp 
april 
eriksson 
mbone multicast backbone 
communication acm 
vol 

pp 

august 

distributed operating system logical design 
wesley publishing 

gautier diot 
mimaze game internet 
inria research report 
inria sophia antipolis france 
september 
cheriton 
amaze multiplayer computer game 
ieee software 
may 
interactive 
le monde 
www com 

deering 
host extensions ip multicasting 
rfc 

august 
anderson brogan casey mckeown waters 
diamond park spline virtual reality system animation spoken interaction runtime modifiability 
merl report tr 

waters anderson 
locales beacons efficient precise support large scale multiuser virtual environments 
ieee virtual reality annual international symposium 
santa clara ca 
march 
waters 
time synchronization spline 
merl report tr 
april 
