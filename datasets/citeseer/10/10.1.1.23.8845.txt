expressive power simply typed polymorphic lambda calculi gerd hillebrand fakultat fur informatik universitat karlsruhe karlsruhe germany ira uka de paris kanellakis computer science department brown university providence ri functional framework descriptive computational complexity regular firstorder ptime pspace exptime expspace elementary sets syntactic characterizations 
framework typed lambda terms represent inputs outputs programs 
lambda calculi describing computational complexity classes simply polymorphically typed functionalities fixed order 
consist order atomic constants order equality constants variables application abstraction 
increasing functionality order languages corresponds increasing computational complexity alternation 
exact correspondence established semantic evaluation languages fixed order primary technical contribution 
motivation simply typed calculus church typed calculus tlc syntax semantics essential part functional programming languages ml miranda haskell key feature languages polymorphism :10.1.1.54.5171
tlc polymorphism referred core ml 
constants functionality order equality constants order part functional languages eq 
scheme 
tlc core ml constants equality tlc core ml respectively 
functionality order basic parameter languages done visiting university pennsylvania doe de fg er 
common practice involves programming low order functionalities 
essential roles important understand expressive power tlc core ml fixed order fragments 
related functional languages standard approach tlc expressibility considers computations church numerals see 
results characterizing expressive power tlc church numerals 
inputs outputs church numerals typed int int type constant order schwichtenberg statman shown expressible functions type int int int equivalently int delta delta delta int int exactly extended polynomials 
functions generated operations addition multiplication conditional 
schwichtenberg statman theorem exemplifies language uniform typed inputs convention input fixed simple type 
convention literature standard 
code relational algebra finite structure inputs tlc order 
inputs church numerals complex types int exponentiation predecessor expressed 
statman quoted showed equality ordering subtraction expressible tlc typing church numerals 
exponentiation examples illustrate program uniform typed inputs convention 
program fixed simple type inputs typed uniformly program 
input different types considered input different programs 
convention code fixpoint logic tlc order higher order logic tlc fact conventions possible 
permissive type outputs fixed simple types bool provide typing restrictions inputs requiring boolean outputs 
nonuniform typed inputs convention statman theorem deciding equivalence normal forms simply typed terms elementary recursive expressibility result 
proof uses meyer theorem complexity higher order type theory 
simple proof see 
convention possible inputs finite structures containing equality predicate domain structure 
possible interpret statman meyer theorems expressibility elementary sets tlc code ptime tlc order 
simple types limit language uniform program uniform nonuniform expressibility 
provided motivation examining expressive typed calculi girard reynolds secondorder calculus polymorphism type quantification milner ml polymorphism monomorphic fixpoints 
survey see 
consensus programmers simply typed data structures limit flexibility polymorphic ones quite flexible 
flexibility hard quantify expressibility 
technical development program uniformity consequences language uniform expressibility polymorphism 
analysis highlights role constants equality ml expressive power limited polymorphism fixpoints 
input typing conventions type reconstruction language uniformity program uniformity naturally correspond church curry views tlc 
church view lambda term comes simple type 
curry view lambda terms come simple types reconstructed needed 
studying expressibility assumes program fixed size simple polymorphic type reconstruction trivially constant time 
terms program size fixed order polymorphic reconstruction np hard see journal version corrects mistaken polynomial claim proceedings version 
related descriptive computational complexity knowledge assumed computational complexity classes regular order ptime np pspace exptime exptime ptime exptime exptime exptime doubly exponential time expspace elementary concept alternation survey see 
logical framework firstorder higher order fixpoint formulas finite structures principal vehicle research descriptive computational complexity finite model theory 
starting fagin characterization np existential second order formulas finite structures computational complexity classes logical descriptions 
example characterized fixpoint formulas finite structures 
order sets characterized order formulas finite structures 
sets practically important class relational database queries 
higherorder formulas extensively applied design languages complex object databases see survey functional perspectives 
functional formalisms examined context descriptive computational complexity 
early number interesting functional characterizations directly related tlc 
characterization related tlc derived leivant marion 
simply typed lambda calculus augmented pairing operator bottom tier consisting free algebra words associated constructor destructor discriminator functions 
addition leivant marion obtain various calculi characterize research program initiated pursued answer natural question functional analogue logical framework order higher order fixpoint formulas finite structures 
completes research program 
new contributions explained detail related 
important open questions remained answered understanding expressive power arbitrary functionality orders understanding expressive power constants equality 
terms comparison contribution related descriptive computational complexity higher order logic express various exponential time space classes see 
exact characterizations economical basic primitives 
similarities approaches 
approaches add primitives tlc encode principal difference tlc equality constants appear order weaker bottom tier 
resulting language lambda terms functional order higher 
purer functional characterization comes technical problem 
increased order evaluation terms fi reduction may require exponential time ptime computation expressed 
devise alternate evaluation mechanism terminates polynomial time 
addressing technical issue generalized orders subject 
answer semantics tlc semantic evaluation appropriate constants equality 
semantic evaluation vs reduction evaluation proving expressibility results fixed order language directions 
lower bound expressibility function computational complexity class expressible 
functional languages direction greatly simplified mairson proof technique list iteration allows easy coding analogous proofs predicate logic 
second direction upper bound expressibility functions computational complexity class expressible 
predicate logic direction usually immediate consequence predicate logic semantics fixpoint formulas direction corresponds statement herbrand universe finite polynomial input size 
functional languages examined analogous argument nontrivial order primitives freely combined languages 
primitives functionality order low encode required sets relations high exponentially duplicate members tuples 
semantic evaluation addresses duplicate elimination potential complications 
functional programming languages evaluation usually reduction strategy 
expressing ptime function program necessarily imply evaluated reduction strategy polynomial time input size jxj semantic evaluator guarantees reduction 
expressing ptime function contrasted efficiently embedding language reduction evaluation efficient 
embedding fixed increase functionality order 
contributions overview contribution completion functional framework descriptive computational complexity 
basic definitions section 
expressibility various languages measured capabilities set recognizers 
number technical contributions 
section equality constants possible give language uniform characterization boolean functions program uniform characterization regular languages 
expressibility lower bounds list iteration upper bounds semantic evaluation 

section equality constants functional framework input output conventions proposed 
inputs order higher terms encoding ordered finite structures outputs booleans 
minimum possible order language uniform characterization firstorder queries tlc analogous schwichtenberg statman language uniform characterization extended polynomials order tlc 
orders generalize program uniform characterizations ptime order tlc pspace order tlc program uniform characterizations exptime order tlc expspace order tlc gives full picture hyperexponential time space complexity classes tlc completes research program started 
proofs involve semantic evaluation technique main technical contribution 
simpler version initially developed journal version 
argument generalized orders technique schwichtenberg 
section framework developed tlc program uniform convention applied core ml language uniform convention 
final section discussion modifications framework characterize np see 
definitions tlc tlc syntax tlc types grammar ranges set type variables fae oe type constant example ae type ae oe ae 
ae ae 
ff fi fl denote types 
omit outermost parentheses write ff fi fl ff 
fi fl 
syntax tlc terms expressions grammar ee ranges set expression variables fx expressions typed outlined 
denote expressions 
omit outermost parentheses write efg ef typability expressions defined inference rules gamma function expression variables types gamma fx ffg function gamma identical gamma gamma ff var gamma fx ffg ff abs gamma fx ffg fi gamma ff fi app gamma ff fi gamma ff gamma ef fi call term typed equivalently term tlc ff type gamma ff derivable rules gamma ff 
explicitly typed term typed term derivation type write terms succinctly providing type annotations free bound variables operational semantics tlc defined alpha beta reduction 
see definitions reduction substitution 
tlc obtained enriching tlc type constant different countably infinite set fo expression constants type expression constant eq type type inference rules tlc tlc augmented axioms eq reduction rules tlc obtained enriching operational semantics tlc follows 
pair constants add tlc rules reduction rule known rule eq ae terms tlc tlc normal form reduced beta delta reduction 
see reduction notions tlc reduction 
properties hold tlc 
church rosser strong normalization reductions lead normal form terminate 
principal type property simply typed term principal type type types obtained substitution types type variables 
semantic properties tlc refer 
core ml core ml brevity define polymorphism simple type syntax see extra inference rule 
syntax core ml tlc tlc augmented new term construct call term typed gamma ff derivable inference rules var abs app gamma ff 
gamma ff gamma fi gamma fi operational semantics tlc tlc addition treated core ml core ml properties tlc tlc church rosser flexibility typing tlc tlc 
example core ml xx tlc 
functionality order order type measures higher order functionality term type defined order ff ff type variable type constant order ff max order fi order fl ff arrow type fi fl 
refer order explicitly typed term order type 
order redex ff occurring explicitly typed term order ff 
definitions properties hold fragments tlc tlc core ml core ml order terms bounded fixed fragments inference rules types restricted order 
model theory model theory tlc standard cf 

models finite full type frames base type binary domain tlc case base type varying finite domains ae depending query consideration 
tlc constants interpreted natural way eq 
notation denotes value closed explicitly typed tlc tlc term model consideration assume type contain type variables 
list iteration briefly review basic technique list iteration works 
technique key lower bound proofs quite powerful see 
fe set terms type ff ff fi fi fi gamma term type ff fi fi fi fi 
called list iterator encoding list variables list constructors cons nil 
example consider standard encoding boolean logic true false type bool exclusive function written xor bool bool 
parity function written parity bool bool bool bool bool xor false 
intuitively parity applied list iterator evaluation visualized initializing accumulator false looping backwards elements list setting accumulator exclusive previous value current list element stage 
inputs outputs languages output program fixed simple type bool programs inputs assumed closed terms free variables 
follows program applied input returns normal forms true false section dealing pure tlc inputs booleans encoded true false lists booleans encoded list iterators true false 
iterators typed possible ways bool ff ff ff ff type ff 
abbreviated ff exact nature ff matter section dealing tlc inputs encodings ordered finite structures 
ordered finite structure arity km consists finite set called domain relations arity km linear ordering convenience assume subset set tlc constants 
encode linearly ordered domain fo list iterator ary relation list iterator delta delta delta tuple appears exactly order tuples lexicographical determined order contains tuples principal type delta delta delta oe oe oe oe oe arbitrary type variable 
order type independent arity abbreviate type oe instances type obtained substituting type ff oe abbreviated ff exact nature ff matter program uniformity reg tli characterizing regular languages tlc complexity classes order tlc adopt program uniform typing convention program term fixed output type bool different program terms may type input encodings differently 
define languages reg tli follows reg set closed tlc terms explicitly typed type form bool tli set closed tlc terms explicitly typed type form ff ff delta delta delta ff km bool ff ff ff order language uniformity bool tli program uniform convention contrasted language uniform convention program terms type inputs way 
convention 
characterizing boolean functions tlc order queries ordered finite structures tlc characterizations ml define languages bool tli follows bool set closed tlc terms explicitly typed bool delta delta delta bool bool tli set closed tlc terms explicitly typed delta delta delta bool 
define analogous languages mli ml ml terms tlc tlc terms 
differ important aspect tlc tlc counterparts polymorphism turns program uniformity language uniformity 
shown milner polymorphic notation included keep presentation short 
expressive power tlc expressibility result pure typed calculus simple characterization boolean functions 
theorem functions expressible terms bool exactly boolean functions 
proof closed tlc term type bool bool delta delta delta bool bool reduces arguments supplied closed normal form type bool true false defines boolean function 
conversely boolean function translated tlc term writing boolean formula translating formula tlc connectives bool bool bool bool bool theorem remains valid allow liberal typings form bool ff bool ff delta delta delta bool ff bool bool ff ff ff ff ff arbitrary type 
closed tlc term type closed tlc term type bool bool delta delta delta bool bool computes boolean function 
defined bool bool ff ff fi fi chosen type boolean function circuit formula tlc term computing size linear size circuit 
done abstraction simulate shared subexpressions expression occurs multiple times expression replace occurrence variable write original interestingly simple characterization regular languages alphabet sigma obvious modifications finite alphabet 
encode word list iterator bm gamma bm false true 
encoding closed tlc term type bool defines boolean function words sigma 
theorem functions expressible terms reg exactly characteristic functions regular languages alphabet 
proof regular language term recognizing constructed follows 
construct deterministic finite automaton recognizing reversal set bit strings fb lg regular 
fs set states starting state fsm accepting states 
states enters state reading bit respectively 
encode state projection function xn type delta delta delta simulate run reversal string list iteration list representation keep current state accumulator update iteration proceeds bit result iteration encodes state reading reversal return true false depending state accepting 
complete term bool bool xn fn uu gammam conversely closed tlc term type ff bool type ff may assume ff contain type variables set bit strings encodings accepted construct finite automaton recognizing consider semantics tlc full type frame cf 
base domain 
state space finite function space ff initial state bool ff ff ff 
bit string transition labeled transition labeled 
state accepting iff true 
easy see deterministic true true true reading bit string state 
accepts true qw reduces true 
proof shows term reg simplest possible type bool simulated dfa states 
states form transitions associated may deleted automaton 
remaining states indistinguishable sense definable function type bool tell apart 
careful case analysis shows fact states distinguishable correspond empty string strings containing strings containing strings containing strings containing respectively 
follows language recognized term type bool union basic languages 
particular language recognized uniform family unbounded fan circuits 
expressive power tlc section generalize results provide characterizations tlc exptime expspace complexity classes 
keeping earlier papers consider computations ordered finite structures encoded tlc described section 
equivalently considered computations bit strings encoded lists position value pairs position field contains unique constant bit value true false 
theorem finite structure input output convention described section tli expresses language uniformly exactly order queries ordered finite structures tli tli express program uniformly exptime expspace queries ordered finite structures respectively 
cases tli tli tli proven queries producing relations booleans output 
boolean query easily modified produce relation representing true nonempty false empty relation apply current boolean query setting 
rest section devoted proving cases tli 
lower bounds expressibility briefly sketch exptime expspace computations simulated tlc technique adaptation builds encodings order ptime queries 
simulate arbitrary exptime expspace query ordered finite structure suffices iterate order query hyperexponential hyperexponential number times structure size hyperexponential size pick describing transition function results previous section show position component essential wants go regular languages 
turing machine computing describing tape hyperexponential length encoding cells 
crucial steps coding iteration 
construction church numeral crank hyperexponential hyperexponential size serve iterate query required number times 
done computing length input relation church numeral computing suitable product lengths exponentiating product times 
exponentiation requires input relation typed order type order principal type 
second step construction domain model theory tlc 
fo domain ff type delta delta delta bool number occurrences chosen depending exact complexity ff ff gamma ff gamma ff domain ff full type frame base domains note jd hyperexponential jdj 
may ordered natural way ordering possible write tlc terms equal ff ff bool lessthan ff ff bool min ff max ff succ ff ff coding equality ordering minimal maximal elements successor function respectively 
code quantifier operator exists ff bool bool closed term ff bool exists true iff exists value ff true 
operator essentially uses term crank constructed build large disjunction min succ min succ succ min 
write lifting operators transform input relations defined relations coding operators complicated extent restrictions monomorphic type system tlc see type laundering technique illustration difficulties 
associated predicates constructed turing machine computing original query coded expressing transition function order query domain crank iterate 
values passed stage iteration predicates require order types represented order input relations increased additional levels order imposed construction crank 
total order input relations simulation exptime expspace corresponding tlc terms members tli tli respectively 
upper bounds expressibility goal section prove second half theorem theorem queries expressed query terms tli tli evaluated exptime expspace respectively 
easy see bounds obtained purely syntactic evaluation mechanism fij reduction tlc terms order may normal forms hyper exponential size 
semantic evaluation technique 
due presence constants fo dealing infinite base domain precompute semantics query term 
input compute semantics query term input model finite set constants appearing query term input 
tli query term 
assume explicit type contain type variables 
legal input encoding finite structure arities ones stipulated type set constants occurring compute full type frame base domains eq result true false values different elements bool result tell outcome query 
computation store value closed expression ff table containing graph 
ff fi delta delta delta fi fl fl fl stored fi fl expressions order size table hyperexponential size going define family evaluation procedures eval 
closed explicitly typed tlc term eval computes evaluators differ reduction strategy 
roughly speaking eval uses call value redexes order call name fi reduction redexes higher order 
eval uses pure fi reduction requires deep recursion little storage intermediate results higher order evaluators shallow recursion larger intermediate results 
turns best tradeoff obtained half large maximum orders subterms leads time space bounds theorem 
simplify presentation adopt conventions term bound variables distinct free variables terms fully expanded sense subterm non zero order abstraction occurs left part application achieved suitable expansion 
allow values part terms precisely introduce type ff value ff constant ff identify conventions closed explicitly typed tlc term take forms en value ff xn ff fn ff xn ff 
cases eval defined follows 
eval en apply eval eval en eval ff xn ff fn eval xn gn eval order ff order ff eval ff xn ff vn ff eval apply denotes function application type frame 
represent functions tables apply amounts table lookup 
lemma closed tlc term eval yields graph 
proof straightforward induction structure depth recursion tree generated call eval including initial call depth syntax tree technique schwichtenberg obtain bound terms 
lemma tlc term free variables fy closed tlc terms type type order ae substitution oe substitution max il 
ae oe proof sketch evaluation ae oe subterm en encountered 
case oe contain subterm en 
evaluating arguments en evaluator oe compute value subterm simple table lookup evaluator ae evaluate copy arguments 
recursion tree ae may tall recursion trees oe stacked top 
note condition order essential eval call name recursion tree en deeper 
lemma closed 
dk gamma 
proof sketch recursion trees eval eval differ places redex order evaluated 
case eval uses call value eval uses call name 
previous lemma may double depth recursion tree 
may redexes path recursion tree eval exponential 
lemma closed maximum order redex 
proof sketch redexes order eval perform fi reductions 
follows argument recursive call eval strictly smaller depth parent call 
lemma tli query term legal input term obtained contracting redexes order polynomial jdj 
furthermore computed exponential time 
proof analysis structure lemma tli query term legal input defined 
eval produce exptime eval produce expspace 
proof sketch observe eval evaluation produces correct result 
second redexes order gamma bounded polynomial jdj 
follows dm gamma gamma hyperexponential jdj 
consider time space consumed node recursion tree eval 
easy see eval invokes terms order largest values manipulate order 
values stored represented tables size hyperexponential jdj 
time space consumed node bounded size values number children node 
follows odd recursion tree gamma gamma gamma hyperexponential depth fanout total number nodes hyperexponential 
node consumes hyperexponential time total computation carried exptime 
similarly recursion tree gamma gamma hyperexponential depth node consuming hyperexponential space total computation carried expspace 
complete algorithm evaluating tli queries follows compute set constants appearing input query term determine compute defined compute eval 
ptime pspace bounds proven tli tli queries establishes theorem 
expressive power core ml core ml theory polymorphism explained quantified type variables simple types rule section 
approaches essentially equivalent 
shown quantified type variable notation program uniform expressibility results language uniform expressibility results mli assume terms represented dags substitution implemented constant time operation maintaining environments 
theorem expresses language uniformly exactly regular languages 
mli mli express language uniformly exactly exptime expspace queries ordered finite structures respectively 
discussion functional framework descriptive computational complexity syntactic characterizations regular order ptime pspace exptime expspace elementary sets 
characterizations highlight symmetries time space theory alternation 
ptime vs pspace question question expressibility order vs order 
framework include syntactic characterization np 
surprising deterministic nature computations modeled lambda calculi 
syntactic classes characterized closed complement similar np characterization 
simple conventional way capture np 
add primitive lambda calculus coin primitive converts booleans 
coins part input list iterators 
pursued approach result violating church rosser preserving termination 
personal 
paris kanellakis died plane crash december days finished 
privilege enjoying guidance friendship ph studies collaboration 
sadness warm remembrance dedicate memory 
abiteboul hillebrand 
space usage functional query languages 
proceedings th international conference database theory pp 

springer lncs 
abiteboul hull vianu 
foundations databases 
addison wesley 
barendregt 
lambda calculus syntax semantics 
north holland revised edition 
cook 
new characterization polytime functions 
proceedings th acm symposium theory computing pp 

acm press 
buneman naqvi breazu tannen wong 
principles programming complex objects collection types 
theoretical computer science pp 

chandra harel 
structure complexity relational queries 
computer system sciences pp 

church 
calculi lambda conversion 
princeton university press 

intrinsic computational difficulty functions 
bar hillel editor international conference logic methodology philosophy science pp 

north holland 
codd 
relational completeness database sublanguages 
editor database systems pp 

prentice hall 
fagin 
generalized order spectra polynomial time recognizable sets 
siam ams proceedings pp 

fortune leivant donnell 
expressiveness simple second order type structures 
acm pp 


girard 
interpr etation fonctionelle elimination des coupures de ordre 
th ese de doctorat etat universit de paris vii 

girard scedrov scott 
bounded linear logic modular approach polynomial time computability 
theoretical computer science pp 

gradel gurevich 
tailoring recursion complexity 
proceedings st international colloquium automata languages programming pp 

springer lncs 
grumbach vianu 
tractable query languages complex object databases 
proceedings th acm symposium principles database systems pp 

acm press 
gunter 
semantics programming languages 
mit press 
gurevich 
algebras feasible functions 
proceedings th ieee conference foundations computer science pp 

ieee press 
harper milner tofte 
definition standard ml 
mit press 
hillebrand 
finite model theory simply typed lambda calculus 
ph thesis brown university 
hillebrand kanellakis 
functional database query languages typed lambda calculi fixed order 
proceedings th acm symposium principles database systems pp 

acm press 
hillebrand kanellakis mairson 
database query languages embedded typed lambda calculus 
proceedings th ieee conference logic computer science pp 

ieee press 
hull su 
expressive power database queries intermediate types 
computer system sciences pp 

immerman 
relational queries computable polynomial time 
information computation pp 

immerman stemple 
expressiveness family finite set languages 
proceedings th acm symposium principles database systems pp 

acm press 
kfoury tiuryn urzyczyn 
hierarchy finitely typed functional programs 
proceedings nd ieee conference logic computer science pp 

ieee press 
kuper vardi 
complexity queries logical data model 
theoretical computer science pp 

leivant 
marion 
lambda calculus characterizations poly time 
fundamenta informaticae pp 

mairson 
simple proof theorem statman 
theoretical computer science pp 

mairson 
quantifier elimination parametric polymorphism programming languages 
functional programming pp 

meyer 
inherent computational complexity theories ordered sets 
proceedings international congress mathematicians pp 

milner 
theory type polymorphism programming 
computer system sciences pp 

mitchell 
type systems programming languages 
handbook theoretical computer science volume pp 

elsevier 
papadimitriou 
computational complexity 
addison wesley 
reynolds 
theory type structure 
proceedings paris colloquium programming pp 

springer lncs 
schwichtenberg 
funktionen im mit typen 
archiv fur mathematische logik und pp 

schwichtenberg 
upper bound reduction sequences typed calculus 
archive mathematical logic pp 

statman 
typed calculus elementary recursive 
theoretical computer science pp 

statman 
completeness invariance definability 
symbolic logic pp 

statman 
equality functionals revisited 
harvey friedman research foundations mathematics pp 

north holland 
vardi 
complexity relational query languages 
proceedings th acm symposium theory computing pp 

acm press 
