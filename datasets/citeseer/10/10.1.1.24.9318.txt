implicit calculus constructions extending pure type systems intersection type binder subtyping alexandre inria rocquencourt projet logical bp le chesnay cedex france alexandre inria fr 
introduce new type system implicit calculus constructions curry style variant calculus constructions extend adding intersection type binder called implicit dependent product 
usual approach type assignment systems implicit product place universe hierarchy 
study syntactical properties calculus subject reduction property show implicit product induces rich subtyping relation type system natural way 
illustrate speci cities calculus impredicative encodings calculus constructions show translation implicit calculus helps re ect computational meaning underlying terms accurate way 
decades proofs programs paradigm curry howard isomorphism successfully understanding computational meaning intuitionistic proofs implementing proof assistant tools type theory 
earlier martin inspired russel whitehead principia large scale rich formalisms proposed enhance expressiveness type theory 
formalisms theory pure type systems pts plays important role attempts give unifying framework jungle formalisms enters rst time eld type theory 
modern proof assistants curry howard isomorphism alf coq lego nuprl implement formalism belongs family 
despite pts formalisms practical theoretical drawbacks due inherent verbosity terms tends called generalized type systems 
fact true core language proof assistants implement features go strict framework pts primitive inductive data type declarations recursive function de nitions 
abstraction application especially type arguments 
especially true compared ml style languages 
practical point view writing polymorphic functional programs may dicult programmer instantiate explicitly polymorphic function appropriate type arguments applying real arguments 
reasons write extra annotations pts 
rst reason general syntactic distinction types terms type abstraction type application particular case abstraction application 
reason type annotations decidability type checking may lost provided considered pts expressive case system example 
theoretical point view verbosity pts terms tends hide real computational contents proof terms lot noise induced type abstractions applications 
simple example leibniz equality de ned calculus constructions eq set prop set prop de nition prove re exivity equality term set prop set eq computational meaning proof simply identity function 
understand point simply remove type annotations abstractions play role real process computation write set eq term clearly shows rst arguments type checking purposes fourth really involved computation process 
notice second abstraction type constructor abstraction 
solutions proposed problem theoretical practical sides 
proof assistants coq lego implement kind implicit arguments avoid user nuisance writing redundant applications system automatically infer 
common practical approach 
generally implementations dealing implicit arguments distinction kinds products abstractions applications ones called explicit explanation distinction prop set see paragraph 
called implicit 
explicit implicit constructions semantically di er proof checking system distinguishes allowing user omit arguments implicit applications implicit arguments provided system may infer 
arguments reconstructed typechecking process silently kept internal representation terms may needed conversion test algorithm 
major advantage method keep semantics original calculus modulo coloring syntax implicit arguments implicit user system 
user may confused fact system keeps implicit arguments back especially dependent types printed identically internally identical due hidden implicit arguments 
calculus really implicit arguments 
toda studied possibility dropping implicit arguments internal representation terms calculus constructions calculus constructions explicit implicit constructors 
idea ensure uniqueness reconstruction implicit arguments conversion drop implicit arguments internal representation terms conversion test implicit terms terms implicit arguments erased give result done corresponding reconstructed explicit terms 
achieve goal propose restriction syntax implicit terms order ensure decidability uniqueness conversion reconstruction implicit arguments 
restriction bee drastic forbids implicit abstraction order avoid dynamic type checking reduction 
theoretical approach type assignment systems theoretical side curry style formalisms proposed implicit counterparts usual pure type systems curry style system 
giannini proposed uniform description curry style variants systems cube call type assignment systems tas opposed pure type systems 
follows idea purely computational point view polymorphic terms systems cube depend type arguments called structural polymorphism 
consequence show possible de ne erasing function barendregt cube cube tas precisely erases type dependencies proof terms mapping pts style proof terms ordinary pure terms 
major di erence approaches described implicit dependent product determined syntax strati cation terms 
words dependent product tas implicit formed rule polymorphism cases explicit product 
notice tas framework erasing function erase polymorphic applications erases polymorphic abstractions type annotations proof term abstractions 
interesting mention theoretical approach tas raises problem practical approach hagiya toda erasing function erases information identify terms convertible originally isomorphism explicit formalism implicit lost 
framework tas problem arises systems cube involving dependent types 
implicit pure type systems main limitation approach type assignments systems restrict implicit dependent product polymorphism 
want generalize approach pts necessary impredicative natural equip implicit product binder denoted 
making syntactic distinction allow choice kind dependent product explicit implicit disconnected strati cation 
interesting feature approach tends identify terms considered convertible calculus 
see section identi cations help understand computational meaning terms 
feature high theoretical cost completely changes underlying semantics 
concentrate study case implicit calculus constructions 
approach general extended pts 
particular syntactic results section generalized call implicit pure type systems 
implicit calculus constructions syntax pure syntactical point view implicit calculus constructions icc shortly implicit calculus curry style variant calculus construction universes ecc distinction forms dependent products explicit product denoted implicit product denoted formally term implicit calculus see gure variable sort explicit product terms implicit product terms abstraction term application terms 
set sorts implicit calculus de ned fprop ftype prop set denote impredicative sorts type usual predicative universe hierarchy extended calculus constructions 
notice follow convention calculus inductive constructions making distinction impredicative sorts convenient distinguish sort propositional types prop sort impredicative data types set sorts completely isomorphic typing rules 
sorts set prop type terms contexts 
fig 

syntax implicit calculus constructions usual consider terms conversion 
denote fv set free variables term mfx ng term build substituting term free occurrence term notice product binders bind free occurrences variable occurrences denote non dependent explicit product fv 
convention holds non dependent explicit product corresponding notation non dependent implicit product 
follow usual writing conventions calculus associating type arrows right multiple applications left factorizing consecutive abstractions 
declaration ordered pair denoted variable term 
typing context shortly context simply nite ordered list declarations denoted xn tn 
concatenation contexts 
denoted 
declaration belongs context contexts note contexts ordered pre ordering denoted means 
context 
see paragraphs discussion meaning implicit product str typing rule 
inclusion ordering denoted means declaration belonging belongs xn tn context set declared variables set de ned dv fx xn extend notations fv mfx ng contexts setting fv fv 
fv tn fx ng fx ng xn ng notation making sense dv 
shall notation 
xn tn context 
xn tn term reduction rules untyped calculus notions reduction de ned mfx ng fv need reduction rule assumed theory pure type systems explained paragraphs denote notion reduction reduction rule de ne step reduction denoted contextual closure reduction denoted re exive transitive closure convertibility equivalence denoted re exive symmetric transitive closure proposition church rosser 
reduction 
notice strict framework pure type systems reduction satisfy church rosser property due presence type annotation abstraction 
problem arise implicit calculus curry style abstraction 
point importance implicit calculus strong requirement reduction rule shall see paragraph 
untyped calculus sequence reductions decomposed sequence reductions followed sequence reductions 
consequence lemma lemma reduction delaying 
terms exists term typing rules introducing typing rules de ne sets axiom rule set axiom de ned axiom prop type set type type type typing sorts set rule de ned rule prop prop sg set set sg type type type typing products 
note set typing explicit products implicit products 
need de ne ordering relation sorts called cumulative order 
ordering relation denoted de ned prop prop set set prop type set type type type typing rules implicit calculus involve judgments judgment denoted says context formed judgment denoted says context term type 
validity judgments de ned mutual induction rules gure 
rules var sort lam app conv cum usual rules ecc extra rule implicit product shares premises side condition rule explicit product 
di erence ecc implicit calculus convertibility rule conv identi es types convertibility 
rules gen inst respectively elimination rules implicit product types 
contrast rules lam app rules gen inst associated constructors 
rule gen involves side condition ensuring variable type generalized appear free term purpose rule called ext extensionality enforce subject reduction property implicit calculus 
rule derived rules reasons derived curry style system included icc 
rule desirable gives smoother properties subtyping relation contravariant covariant subtyping rules products 
see lemma paragraph 
rules formed contexts wf dv wf rules typed terms var axiom sort rule rule lam ng app fv gen ng inst conv cum fv ext fv fv str fig 

typing rules implicit calculus constructions meaning non dependent implicit product 
presence rule called str strengthening may surprising corresponding rule admissible extended calculus constructions generally functional pts 
implicit calculus case due presence non dependent implicit product 
main consequence rule str reason introducing lemma non dependent implicit product 
context terms fv formed type term equivalence words non dependent implicit product inhabitants type obtained removing dummy quanti cation rule str result hold type empty context paragraph discuss possible problems rule pose respect logical consistency calculus 
typing properties subject reduction subject reduction implicit calculus surprisingly hard prove due presence rule ext premise involves term structurally larger term 
trick lemma order isolate rule ext 
proof subject reduction follows scheme described step 
prove subject reduction property 
result quite obvious rule ext rule conv identi es convertible terms 
step 
isolate rule ext de ne notion direct derivation restricts usual notion derivation forbidding rule ext parts corresponding currently typed term parts destructuring context 
corresponding restricted judgment denoted step 
restriction prove inversion lemmas subject reduction property direct judgments 
step 
show valid judgment exists expansion term fact direct judgments enjoy subject reduction lemma extend subject reduction property unrestricted form judgment subtyping interesting aspects implicit calculus constructions rich subtyping relation induced implicit product 
subtyping relation denoted de ned directly typing judgment macro fresh variable de nition prove context subtyping formed types satis es expected sub rule lemma subtyping 
rules admissible sub product formation acts contravariant way domain part covariant way codomain part lemma subtyping products 
rules admissible notice rule proven admissible rule ext 
fact main motivation introducing rule ext proven equivalent rule 
notion subtyping de ne notion typing equivalence denoted simply symmetric closure subtyping judgment prove equivalences lemma 
rules admissible notice premises imply mutual dependency quanti cations fv fv 
partial consistency results implicit calculus ways encoding falsity 
rst way usual way calculus constructions represent falsity type prop called explicit falsity 
implicit calculus encode falsity prop called implicit falsity 
calculus constructions proof explicit falsity function takes proposition argument returns proof proposition 
contrary proof implicit falsity proof proposition implicit falsity intersection propositional types 
provably equivalent prop prop 
prop prop 
prop notice proof quite general 
means explicit product inhabitants corresponding implicit product 
proposition 
empty context proof implicit falsity weak head normal form 
consequence relative consistency result proposition 
implicit calculus constructions strongly normalizing logically consistent 
unfortunately strong normalization implicit calculus open problem 
proven large fragment implicit calculus logically consistent see section 
fragment precisely implicit calculus rule str called restricted implicit calculus 
may fear rule str jeopardize logical consistency calculus 
example fact strengthening rule allows remove dummy implicit quanti cation implies proof false false proof false false denotes 
remember explicit implicit products symmetric explicit abstraction calculus implicit form implicit equivalent identity function provide trivial inhabitant false false 
arguments proof indicate str rule jeopardize consistency calculus 
rst proposition holds calculus relies open normalization problem 
fact prove strong normalization implicit calculus depend presence rule str proposition 
restricted implicit calculus strongly normalizing full implicit calculus strongly normalizing 
impredicative encodings section shall illustrate expressiveness implicit calculus constructions comparing impredicative encodings lists dependent lists vectors studying relationships respect subtyping 
implicit calculus lists encoded follows list set set set 
nil set list xf cons set list list notice polymorphic constructors nil cons exactly usual constructors untyped lists pure calculus 
fact result speci implicit calculus example encoded way curry style equivalent system 
cube tas implicit quanti cation precisely impredicative products 
framework necessary give extra argument cons operation build list cons true cons false cons true nil list bool traditional encoding lists calculus constructions list written cons bool true cons bool false cons bool true nil bool list bool explicitly instantiating type constructors construction step 
implicit calculus anyway constructor lists covariance property respect subtyping relation proposition covariance type lists 
context terms type set list list fact situation far interesting consider type dependent lists call vectors 
type vectors type lists depends size list 
implicit calculus type vectors encoded follows vect set nat set nat set 
nat nat de ned usual encoding church integers curry style system notice encoding done cube tas innermost quanti cation nat introduces implicitly dependent type 
news come fact need de ne new nil new cons vectors 
straightforward check nil cons de ned building lists types nil set vect cons set nat vect vect words lists xed length vectors share constructors take back list booleans assign accurate type cons true cons false cons true nil vect bool calculus constructions sharing constructors possible lists dependent lists de ne new pair constructors nil cons write term cons bool true cons bool false cons bool true nil bool vect bool real computational contents completely hidden type size arguments constructors nil cons implicit calculus derive type vectors size subtype type lists proposition 
context terms set nat derive subtyping judgment vect list give illustration expressive power implicit calculus constructions go back world propositions studying case leibniz equality 
implicit calculus natural impredicative encoding equality eq set prop prop encoding re exivity equality simply proven identity function set eq proof transitivity composition operator set eq eq eq notice type variable explicitely de nition equality corresponding dependency explicit type set prop 
proof checking systems type argument easily inferred usually treated implicit 
example shows typing information really drop syntax little typing information automatically inferred practice 
semantics building model implicit calculus constructions fascinating challenge especially rich subtyping relation 
main diculty caused interpretation curry style abstraction imply traditional typing ambiguity strati cation ambiguity identity type prop types type 
proposed model restricted implicit calculus implicit calculus rule str 
model untyped domain theoretical interpretation terms large coherence space containing types ground values 
corresponding interpretation nice properties allows interpret terms ill typed ones independently possible types 
interpretation proved logical consistency restricted implicit calculus 
strong normalization topic focus prove implicit calculus strongly normalizing 
reasonable think ideas introduced helpful building strong normalization model implicit calculus 
technically construction achieved adding normalization information actual model altenkirch sets 
achieving goal rst need modify model way types inhabited want interpret terms contexts 
decidability type checking decidability type checking implicit calculus open problem 
strongly conjecture type checking undecidable contains curry style system fact inclusion curry style system implicit calculus minor point implicit product allows hide implicit calculus far typing information type assignment systems 
reason implicit calculus poor candidate proof assistant system 
fruitful study ad hoc restrictions implicit calculus preserving decidability type checking order test real proof checking environments 
extending approach pts approach described suited extended pure type systems 
general framework implicit pure type systems possible increase generality making distinction sets rule rule typing explicit implicit products respectively proofs results exposed section including subject reduction property rely fact implicit calculus explicit implicit products share formation rules 

altenkirch 
constructions inductive types strong normalization 
phd thesis university edinburgh 

henk barendregt 
generalized type systems 
technical report university nijmegen department informatics may 

barras cornes courant atre gim enez herbelin huet mu murthy parent paulin sa bi werner 
coq proof assistant manual version 
technical report inria august 

geuvers nederhof 
modular proof strong normalization calculus constructions 
journal functional programming volume pages 

giannini ronchi della rocca 
type inference results problems 
fundamenta volume pages 

hagiya toda 
implicit arguments 
technical report department information science faculty science university tokyo 

paul jackson 
nuprl proof development system version manual user guide 
technical report cornell university 

leivant 
polymorphic type inference 
proceedings th acm symposium principles programming languages pages 

luo 
computation reasoning type theory computer science 
oxford university press 

zhaohui luo randy pollack 
lego proof development system user manual 
technical report lfcs 

lena magnusson 
alf interactive proof editor 
engberg kim larsen peter mosses editors proceedings th nordic workshop programming theory aarhus denmark october number ns notes series page department computer science university aarhus december 
brics 
vi 

alexandre 
arguments dans le calcul des constructions etude un la curry 
master thesis universit denis paris 

alexandre 
model impredicative type systems universes intersection types subtyping 
proceedings th annual ieee symposium logic computer science lics 

pollack 
implicit syntax 
erard huet gordon plotkin editors proceedings workshop logical frameworks antibes may 

sa bi 
alg constructive en th eorie des types en pour la mod la application la th eorie des cat egories 
phd thesis universit paris vi 

van bakel ronchi della rocca urzyczyn 
comparing cubes 
nerode yu 
editors proceedings lfcs 
third international symposium logical foundations computer science st petersburg russia volume lecture notes computer science pages 
springer verlag 

wells 
typability type checking system equivalent undecidable 
annals pure applied logic volume pages 

werner 
une th eorie des constructions 
phd thesis universit paris vii 
