mimaze multi player game internet emmanuel laurent gautier christophe diot inria sophia antipolis 
sophia inria fr 
www inria fr mimaze 
describes design implementation evaluation mimaze distributed multiplayer game internet 
major contribution provide experimental results new type application 
original fully distributed communication architecture designed mimaze 
uses multicast communication system rtp udp ip distributed synchronization mechanisms guarantee consistency game regardless heterogeneous network delay 
provides evaluation results mbone 
experimental evaluation shows major problem real time interaction scalability 

article describes design evaluation simple shared virtual world internet 
mimaze distributed serverless game uses unreliable communication system mimaze transmission control rtp udp ip multicast 
multiplayer games representative new generation distributed interactive applications dias includes distributed interactive simulation dis applications shared virtual worlds air traffic control atc cooperative tools home interactive applications 
applications expected represent major share internet traffic years 
designed game simple rules 
graphics sounds video give mimaze credible complexity term rendering data transmission 
architecture distributed participant computes view game design synchronization mechanism cope different transmission delays participants 
synchronization mechanism called bucket synchronization analyzed document 
minimum functionality required play distributed application internet 
mechanism recover lost late information 
chosen follow dis rules 
particular require action issued participant displayed participants ms 
article structured follows 
section describes mimaze 
start description game functional architecture 
describe vrml graphics display 
conclude section description communication infrastructure 
section analyze performance measurements 
mimaze resource requirement analyzed including cpu load network bandwidth realized mbone 
scalability problem identified 
performance results give opportunity discuss enhancements necessary increase scalability distributed interactive applications 

description mimaze characteristics mimaze similar dis applications shared virtual worlds 
mimaze different world simple simple objects 
reason choosing simple game choosing complex game difficult analyze game traffic parameters 
virtual worlds characteristics apply mimaze real time interaction players large number participants graphics video audio streams high level dynamicity group structure topology 
mimaze design characteristics mimaze inspired 
pacman game server architecture 
avatars move maze try kill 
mimaze players representation view game 
mimaze architecture totally distributed state game computed participant server compute game state 
addition distributed architecture mimaze extended game mpeg video audio 
extension mimaze considered representative data complexity point view distributed interactive virtual environment 
display realized virtual reality modeling language vrml see left 
mimaze runs sgi plug netscape communicator 
external authoring interface eai vrml browser instantiate move remove dynamically avatars vrml scene 
operations done java applet embedded html page 
mimaze knowledge game fully distributed architecture multipoint communication support server new entity joins session 
multicast distributed architectures number advantages interactive multi participant games including robustness failure entity effect scalability distributed architecture easily allows natural partitioning game computation number players increases 
discussion advantages disadvantages distributed architecture scope covered detail 
simply note distributed game server computes unique global state middle 
entity computes local view global state game information received entities 
locally computed view displayed local participant 
key challenge provide timely consistent display possible 
consistency requirement implies participant computes local view games state distributed synchronization technique needed ensure participants compute game states similar possible time technique discussed section 
entities recover lost overly delayed information 
mimaze architecture favors real time interaction cost game consistency 
words mimaze communication architecture prefers display slightly inaccurate avatar positions delayed exact positions 
vrml display player player rtp udp player mimaze screen shot left system architecture middle display architecture chosen vrml file format describing mimaze virtual world provide interoperability virtual worlds included releases game 
user chooses set different external views maze internal view viewpoint eyes user avatar left 
mpeg scenes mapped walls maze participants need click wall start associated movie 
mpeg scenes currently played locally carried network 
mimaze display major modules java applet vrml browser provide user navigation interface right 
java applet uses eai external authoring interface interface game application including communication infrastructure vrml browser 
tcp player game server tcp vrml eai java applet application multicast communication internet udp display interface mimaze game communication system written 
interface designed send kinds informations display java applet right participants join leave information sent tcp reliable avatar positions orientations sent udp unreliable 
note java applet manages video audio streams 
java applet developed multi threaded java applet right receive avatar positions orientations udp socket ii receive join leave information tcp socket iii select navigation type user outside maze avatar iv provide access vrml nodes eai modify scene 
designed specific scheduling algorithm maximize real time quality application 
mimaze vrml browser rendering engine application 
frame rate dependent browser graphic card 
eai allows java applet vrml browser interact asynchronously 
sockets mimaze application applet provides optimal application vrml scene interaction time vrml scene updated positions maintains real time quality game 
event propagation decided receive events vrml browser keyboard events managed application level 
approach applet sends events vrml nodes wait information coming vrml browser 
time player shoots bullet motion synchronized detonation sound 
synchronization achieved specific script node vrml scene 
player shoots java applet sends boolean event node 
vrml time event generated field value time stamp delivered recipient vrml node 
soon script node receives event routes timestamp starttime field associated node 
communication architecture network parameters influence game consistency packet loss rate variable delays 
consequently elements mimaze communication architecture 
distributed synchronization compensates delivery delay dead reckoning compensates missing late packets 
mechanisms described details 
help understanding mimaze communication infrastructure explained participant sends periodically full description position direction speed angular speed packet called adu application data unit 
description compute game global state 
distributed synchronization network delays different pair participants internet synchronization introduced allow adus issued time processed participant 
aspect synchronization participants display game state time 
mimaze time divided fixed length sampling periods bucket associated sampling period 
adus received player issued senders sampling period stored receiver bucket corresponding interval 
participant deliver updated global state computes adus available current bucket 
synchronization delay computed adu reception determine bucket adu content stored 
mimaze synchronization delay equal ms minus network delay 
words adu issued absolute time rendered receiver interval containing absolute time ms 
network delay ms adu stored past bucket 
bucket mechanism close playout buffer mechanism reduce network jitter effects packet audio information 
bucket frequency defines rate new game state computed displayed see section 
human vision perceives continuous motion frequency images second chosen compute buckets second 
bucket frequency receiver parameter influenced network parameters 
reason reduce frequency excessive cpu load 
bucket synchronization mechanism uses global clock mechanism evaluate delay participating entities 
clock accurate ms precision required continuous 
implementation ntp synchronize clocks 
dead reckoning dr deliver complete view game bucket algorithm requires adu participant available bucket 
adu missing different reasons lost network late 
dr replace missing adus 
missing adu state computation algorithm goes back previous buckets looking adu received missing avatar 
adu dead reckoned evaluate position avatar probably current time 
accuracy evaluation depends dr algorithm possible dr algorithms available age adu game characteristics 
related amaze considered mimaze ancestor 
amaze designed played lan point point communication 
mimaze amaze distributed architecture manage states differently 
amaze transmits game state network maintains replicated copies game state 
distributed games internet real market private companies 
microsoft bt intel projects distributed games approach companies historically engineer network order maximize quality game design specific mechanism increase application robustness network 

performance evaluation section analyze scalability game impact number participants performance game 
successively observe scalability limits local resource standpoint cpu load network standpoint network congestion 
cpu scalability dias cpu main tasks computation global state data coming participants see description communication architecture 
mimaze display participants needed saturate cpu due transmission control mechanisms partially global state computation 
rendering global state including audio video graphics 
rendering module consists steps 
applet obtains game global state description application 
uses eai update scene vrml browser 
vrml browser performs rendering task asynchronous done partially graphic adapter 
experiments display show complexity global state computation negligible compared rendering 
game state computation short order preserve real time properties game 
consequently cpu load comes rendering 
left shows evaluation scalability rendering module 
observe time needed display single global state grows linearly number objects display increases 
right reveals number participants impossible display games states continuously player 
note high level language vrml eai access vrml browser contribute explain mimaze poor performance 
adding cpu resources improve game performance resolve scalability problem 
internet experiments performance metric chosen express mimaze consistency drift distance 
computes distance real position avatar computed network delay position displayed remote participants 
perfect situation distance zero 

performances evaluated pc pentium pro mhz windows nt diamond fire open gl pro 
measured scalability mimaze locally non loaded ethernet 
situation network losses insignificant 
left shows case 
left mean network delay mean loss rate mean game consistency standard deviation game consistency shown varying numbers participants 
time ms frame rendering module number participants mimaze cpu scalability network delay mean consistency remain quite stable participants network loss rate dramatically increases 
behavior due bandwidth mimaze approximately kbits second participant high frequency short adus periodically synchronously sent ethernet increasing number collisions network 
participants network loss rate reaches consequences losses consistency standard deviation dramatic exponential growth 
considering scalability limits local area network decided experiments internet precisely mbone multicast backbone overlay internet 
gives snap shot behavior mimaze participants mbone 
scalability local area network left consistency observed mbone right right contains plots 
upper graph shows drift distance site actual avatar position remote site estimate position function time 
lower graph right plots number consecutive packet losses consecutive adus received important observation context loss rate small drift generally small 
best case drift estimate remote avatar position exactly correct 
occurs intervals time seconds 
note bursts consecutive losses dr algorithm succeeds estimating remote avatar position limited error specifically error units cases 
avatar units wide moving speed units ms units drift sensitive player affect behavior game session 
state drift consecutive lost packets frame rate number participants time loss drift versus time time 
knowledge mimaze multi player game designed distributed architecture serverless 
mimaze opens door new generation interactive applications internet 
major contribution demonstrate efficiency distributed architectures multicast communication 
identified scalability major problem dias 
despite fact experiments scalability limited rendering believe rendering key issue rapid progress computer horsepower graphic cards increases everyday rendering performance 
game state computation time kept small compared display frequency 
design principle comes design real time interactive applications 
dias applications applications strong potential create network 
compared cpu network bandwidth scarce shared expensive resource 
overcome problem scalability identified approaches mimaze player need receive information players especially far away possible interaction 
dividing maze cells assigning cell multicast group significantly reduce amount useless packets pending network 
problem ip multicast model needs improved participant sub grouping deployed internet 
object encoding particular mpeg streaming expected increase scalability 
hierarchical object encoding provided mpeg allow efficiently transmit data flows consideration network dynamics 
encoding techniques defined collaboration network research community multimedia research community 
noticed technique increases network cpu scalability reducing number objects processed displayed minimum required application standpoint 
second approach minimize amount data transmitted network limited influence cpu scalability 

ieee standard distributed interactive simulation application protocols 
ieee std 

ieee standard distributed interactive simulation communication services profiles 
ieee std 
garth smith 
scenarios appropriate protocols distributed interactive simulation 
working internet draft draft ietf lsma scenarios txt 
march 

limitations internet protocol suite distributed simulation large multicast environment 
working internet draft draft ietf lsma limitations txt march 
mills 
network time protocol version specification implementation analysis rfc march 

kiel 
unter unix am beispiel des 
www tu de student 
schulzrinne casner frederick jacobson 
rtp transport protocol real time applications 
rfc january 
kurose towsley schulzrinne adaptive playout mechanisms packetized audio applications wide area networks 
proceedings infocom toronto canada pp 
april 
gautier diot 
design evaluation mimaze multiplayer game internet 
ieee multimedia system conference 
austin 
june july 
cheriton 
amaze multiplayer computer game 
ieee software 
may 
deering 
host extensions ip multicasting 
rfc 

august 
waters 
time synchronization spline 
merl report tr 
april 
iso iec 
virtual reality modeling language specification vrml 
www vrml org specifications vrml 
cosmo player vrml browser 
com 

