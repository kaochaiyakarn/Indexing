improving ocial speci cation java bytecode veri cation alessandro coglio kestrel institute avenue palo alto ca www kestrel edu coglio kestrel edu bytecode veri cation main mechanism enforce type safety java virtual machine 
java security type safety inadequacies ambiguities ocial speci cation bytecode veri cation lead incorrect implementations security broken 
analyzes speci cation proposes concrete improvements 
goal increase understanding assurance usability java platform 
bytecode veri cation main mechanism enforce type safety java virtual machine jvm purpose establish certain type safety properties satis ed bytecode run 
interpreter just time compiler omit checks properties resulting better performance 
java security type safety gon correct implementation bytecode veri cation paramount importance security implementation jvm 
holes bytecode veri cation constitute potential points attack exploitable malicious programs applets remote sites internet 
ocial speci cation jvm ly includes description bytecode veri cation written informal english prose 
speci cation clear contain inadequacies ambiguities 
presence particularly problematic security critical features bytecode veri cation erroneous interpretation lead erroneous implementation 
exposes analyzes inadequacies ambiguities ocial speci cation bytecode veri cation section 
proposes concrete improvements section 
concluding remarks section 
brevity ocial jvm speci cation denoted js 
individual chapters sub sections denoted appending number js 
knowledge js assumed 
mechanisms complement bytecode veri cation resolution class loading residual run time checks array indices 
goal eld improve understanding assurance usability java platform 
analysis js describes format valid class les 
class veri cation process checking byte sequence constitutes valid class le 
class veri cation described js consisting passes 
passes charge checking format class le excluding byte subsequences constitute methods code 
boundaries subsequences identi ed passes pass responsibility verify encodes valid code individual method 
pass consists checks performed resolution symbolic classes elds methods correct may take place execution pass considered logically part class veri cation 
bytecode veri cation pass 
part class veri cation 
fact interesting delicate part rest class veri cation relatively straightforward major diculties 
bytecode veri cation described js js 
js presents constraints byte sequence satisfy order represent valid method code 
divided static structural constraints 
js explains quite algorithmic way constraints checked 
descriptions analyzed 
static constraints js presents static constraints byte sequence satisfy order represent sequence correct bytecode instructions correct opcodes operands 
instructions operands covered list constraints js requirements quite straightforward 
requirement place 
states new instructions create instance interface class 
true context restrictions new operand 
new class name class resolved order determine interface class non class 
constraints js checked operand 
evidence requirement place gathered observations 
rst speci cation new instruction js states exception thrown resolved class interface 
means check done run time 
second observation instructions classes elds methods operands require checks similar 
example getfield instruction requires resolved eld static 
requirement run time check speci cation getfield js static constraint js 
holds instructions 
structural constraints static constraints constitute straightforward part bytecode veri cation 
hand structural constraints js constitute interesting part goal verify certain type safety properties satis ed code executed 
structural constraints apply instruction sequences 
assume static constraints satis ed 
remarks structural constraints follow 
terminology terms static structural applied constraints js js respectively sound little confusing misleading 
kinds constraints meant checked statically executing code case prior executing code 
adjective static rst kind constraints ideal 
stretch interpret structural constraints requirements satis ed run time checked statically veri cation time 
static constraints satis ed run time 
point structural constraints referring run time versus veri cation time revisited section 
undecidability structural constraints express facts hold certain instructions executed 
example getfield executed top operand stack contain object class subclass speci ed instruction operand 
establishing kind properties taken literally undecidable 
known program analysis conservative approximations algorithmically computed 
certainly structural constraints meant checked approximately 
supports view structural constraints stated apply run time veri cation time mentioned section 
structural constraints context format valid class les js 
appropriate provide constraints computed public de nition valid class les 
discussed detail section 
redundancy rst constraint list states instruction executed appropriate number type values operand stack local variables 
notion appropriate determined speci cation instruction js 
example getfield requires top operand stack contain instance class speci ed instruction operand 
turns requirement getfield stated explicitly separate structural constraint list 
clearly redundant derived rst 
constraint list states instruction pop values operand stack contains stack ow occur 
simple consequence rst constraint instruction requires presence certain number values operand stack values popped 
matter fact argued rst constraint list redundant 
speci cation instructions js includes types values instruction expects nd operand stack local variables 
explained js task bytecode veri cation ensure expectations met 
rst constraint list stated really say new 
lack explanation motivation structural constraints type safety 
constraints list appear directly related type safety explicit motivation js 
example constraint stating uninitialized object operand stack local variables backward branch taken 
states uninitialized object local variable code protected exception handler 
examples constraints related subroutines subroutines called recursively instruction jsr may returned single ret return address returned example constraint requiring instruction executed di erent execution paths operand stack size prior execution instruction 
explanation constraints derived js 
discussed section 
contradiction structural constraints contradict 
rst says elds uninitialized object accessed object initialized rst 
second says code constructor store values elds object initialized strictly speaking uninitialized 
possibly place structural constraint states invokespecial instruction instance initialization method method current class method superclass current class 
checking method belongs superclass current class requires resolving method class 
line reasoning constraint new discussed section argued property checked run time veri cation time 
structural constraint requires method return instruction ireturn match method return type 
simple check involve type analysis static constraint course type analysis required check operand stack value right type instruction executed 
implied rst structural constraint list instruction executed appropriate number js 
structural constraint execution falls bottom instruction sequence 
simple check involve type analysis 
basically instruction sequence transfer control non existent directly indirectly static constraints js ensure operand control transfer instruction branches points instruction code outside middle instruction 
reasons requirement execution fall code static constraint js 
heterogeneity nal structural constraints listed js somewhat heterogeneous 
state properties hold certain instructions executed 
state requirements relating possible executions example instruction jsr returned single ret 
heterogeneity necessarily bad 
certainly contrasts homogeneity static constraints instruction opcodes operands veri cation algorithm js sketches algorithm bytecode veri cation 
rst part js essentially explains check static constraints quite straightforward 
mildly interesting point explanation includes checking execution fall code 
supports view requirement static constraint argued section 
second part js explains check decidable approximation structural constraints means data ow analysis 
description followed js js clari cations concerning treatment certain instructions 
remarks descriptions follow 
merging operand stack types type information operand stack consists sequence types modeling size contents operand stack 
algorithmic description data ow analysis js prescribes type information operand stack merged sizes 
possibility cog certainly sensible strategy simpli es analysis 
case provides explanation structural constraints mentioned section operand stack size execution paths 
structural constraint sense forward data ow analysis algorithm 
somewhat challenges view structural constraints just undecidable requirements hold run time opposed describing computable approximation 
type values 
indirect case applies jsr control transfered instruction returning called subroutine 
exception requirement new discussed section 
means undecidable requirements decidable approximations mixed js 
types algorithmic description data ow analysis talks types assigned operand stack positions local variables propagated control ow paths merged fails explicit types just names names plus class loaders class loaders runtime objects way algorithm know identities loaders load classes 
contrast general principle stated points js classes may loaded lazily required execution 
reasonable interpretation types algorithm names 
turns lack clarity origin type safety bugs cg th 
interface types rst edition js prescribes result merging types rst common superclass 
works ne classes rst common interfaces may unique multiple inheritance 
second edition js statement changed just say result merging types rst common superclass 
java lang object considered superclass interface result merging interfaces java lang object 
requires special treatment java lang object target invokeinterface instruction 
java lang object may derive merging interface types bytecode veri cation allow invokeinterface operate 
bytecode produced java compilers rejected 
normally invokeinterface allowed operate class implements interface referenced invokeinterface java lang object 
order maintain type safety run time check necessary invokeinterface instruction executed 
observations apply treatment interface types 
rst particularly clean 
second js clear implications approach run time checks necessary invokeinterface 
object initialization bytecode veri cation ensure objects initialized 
order data ow analysis algorithm special type newly created uninitialized object 
special type changed regular class type constructor invoked 
copies object stored operand stack local variables invoking constructor occurrences special type changed 
stated js class interface jvm identi ed fully quali ed name plus de ning loader 
object class created object initialized object class created 
algorithm distinguish types rst object types second object 
solution prescribed js index new instruction position code part special type uninitialized objects 
way di erent objects created di erent instructions di erent types assigned 
potential source trouble new instruction part loop 
possible go loop initializing object algorithm distinguish objects created di erent iterations loop 
avoid problem js prescribes algorithm sure type uninitialized object exists operand stack local variables backward branch taken 
analogous reasons prescribes type uninitialized object exists local variable instructions protected exception handler provides explanation structural constraints mentioned section absence uninitialized objects backward branches taken code protected exception handlers 
discussion section applies forward algorithm somewhat mix undecidable constraints decidable approximations 
main point restrictions types uninitialized objects completely unnecessary 
described detail formally proved cog 
intuitively reason 
consider example data ow analysis computes type assignments instructions loop 
starting rst instruction method type uninitialized object introduced new instruction 
type copied 
backward branch taken instruction preceding object creation instruction types assigned branch instruction merged target branch 
include type uninitialized object type disappears result merging 
new instruction reached copy type uninitialized object introduced rst iteration confusion arise 
subroutines subroutines constitute aspect bytecode veri cation 
reason order perform accurate type inference ow control determined subroutines taken account 
subroutines may textually delimited may exited implicitly branching throwing exceptions ret 
accurate type inference means type inference correct allow type safety broken excessively approximate 
hand simple minded treatments subroutines ensure correctness reject programs produced compilers 
hand elaborate treatments accept compiled programs raise risk type restrictions operand stack stack emptied exception thrown thrown exception pushed stack 
safety broken properties implications treatments fully understood 
detailed discussion issues cog includes thorough analysis treatment subroutines described js js motivations 
replicating analysis inappropriately long reader referred cog 
nutshell main points 
js approach verify bytecode subroutines sketched 
structural constraints js refer subroutines considered provide information approach 
description omits important details merge lists jsr targets associated instructions prescribed js converging control ow paths 
aspects approach keeping track modi ed variables means bit vectors explicitly motivated js 
aspects approach prohibiting recursive subroutine calls explicitly motivated 
turns reason unexplained restrictions guarantee type safety 
turn unnecessary purpose 
addition approach ends rejecting bytecode produced compilers 
example java sdk solaris bytecode veri cation rejects code produced compiler see cog details 
incompleteness description failure clarify indicated restrictions serve guarantee type safety open potential incorrect interpretation leading implementations type safety broken 
addition complexity approach translates complexity implementation requires ort susceptible bugs attacks 
rejection bytecode produced compilers undesirable discussed section 
improvements opinion main ways ocial speci cation bytecode veri cation improved 
scope bytecode veri cation clari ed 
second precise characterization 
scope goal bytecode veri cation statically establish certain type safety properties hold run time 
way interpreter just time compiler omit checks properties resulting better performance 
exact type safety properties bytecode veri cation establish determined speci cation bytecode instructions js 
speci cation includes statements top stack contain value type int 
explained js meaning execution engine expects expressed requirements hold task class veri cation sure hold exceptions statement speci cations instructions js checks intended performed run time 
example instruction 
requirements ensured resolution process 
example method symbolically referenced method invocation instruction exist indicated argument return types accessible class method invocation instruction requirements ensured checking static constraints method code js 
example index local variable operand instruction range local variables method 
remaining requirements type analysis portion bytecode veri cation 
example top operand stack contain value type int certain instructions executed 
complications requirements ensured type analysis 
complications solutions discussed 
disambiguation types discussed section js fails clarify bytecode veri cation names names plus loaders 
reasonable interpretation advantage allowing class loading bytecode veri cation uses names 
correct long intended disambiguation class names accompanied mechanisms enforce disambiguation method consistent method objects exchanged 
consider example 
method argument type class name intended disambiguation class identi ed name plus loader 
suppose method calls passing object type 
disambiguated class case type safety broken 
rst edition js issues mentioned 
type safety bugs related issues earlier implementations jvm sar 
bugs corrected loading constraints lb described js 
loading constraints ensure classes exchanging objects methods elds agree actual classes objects names 
loading constraints external bytecode veri cation 
part class loading mechanisms complement bytecode veri cation enforce type safety resolution residual run time checks 
formal evidence bytecode veri cation names leave loading constraints task avoiding ambiguities classes name 
merging types js prescribes result merging class names name rst common superclass 
requires resolving actual classes speci cation says type object store assignment compatible component type array 
speci cation states run time exception thrown case 
despite clear task bytecode veri cation ensure property 
applies instructions run time check 
traversing ancestry nd rst common superclass 
immediate drawback approach premature class loading 
serious drawback type safety broken cg 
turns possible avoid premature loading assigning nite sets names just names local variables operand stack positions gol qia 
merging fcg fdg yields fc dg 
prevents type safety broken cg 
sets names provides cleaner treatment interfaces 
interface names treated exactly class names merging set union multiple inheritance interfaces constitute problem need java lang object result merging 
special treatment java lang object necessary run time checks performed invokeinterface executed 
subtype relation occasionally bytecode veri cation type target method invocation instruction operand speci es class interface membership method invoked 
existence method checked resolution bytecode veri cation ensure subtype js prescribes names resolved order check desired subtype relation holds 
results premature loading 
better approach generate subtype constraint form gol cg 
subtype constraints checked classes loaded 
analogous treatment loading constraints introduced lb 
fact kinds constraints integrated class loading mechanisms formal arguments provided type safety guaranteed 
protected fields methods subtle neglected point bytecode veri cation related protected elds methods 
speci cations instructions access elds methods include requirement referenced eld method protected declared current class code performs eld method access superclasses class object eld method accessed current class subclass 
requirement derives analogous requirement stated speci cation java programming language 
principle protected elds methods object accessed outside package code responsible implement object 
requirement checked bytecode veri cation 
additional run time checks needed 
explicitly mentioned js js derived js 
fact name denotes class interface determined resolving name 
instance method argument type denote class interface 
straightforward solution resolve eld method see protected declared current class superclass case check class type assigned operand stack position question current class subtype 
avoid premature loading check replaced generation subtype constraints 
subtype constraint satis ed eld method protected declared current class superclass 
need hold wrong require hold 
solution generate conditional subtype constraint condition contains information eld method cog cog 
conditional subtype constraints integrated unconditional ones checked lazily classes loaded elds methods resolved 
characterization summary discussion type safety properties bytecode veri cation guarantee derived speci cation instructions js 
addition bytecode veri cation purely functional component jvm 
activated passing byte sequence input purported method code accompanied context information method signature 
returned answer failure success 
case subtype constraints conditional unconditional generated 
bytecode veri cation needs load class 
rectangular space represents possible code byte sequences larger solid line oval delimits code acceptable bytecode veri cation 
consists byte sequences satisfying requirements rst represent sequences formed instructions second instruction sequence satisfy type safety properties derived js 
sequences formed instructions rst requirement essentially amounts satisfaction static constraints js 
static constraints give precise computable characterization byte sequences represent sequences valid instructions 
derived speci cation instructions js may useful collect place js currently js 
opinion necessary desired improvements removing constraint new discussed section adding constraints return instructions execution falling code discussed section 
arguments section term static constraints replaced formedness constraints 
type safety properties second requirement acceptable code type safety properties guaranteed run time stated precisely 
essentially depend semantics bytecode instructions 
unfortunately undecidable instruction sequence satis es characterization 
bytecode veri cation decidable approximation characterization indicated mid size dashed line oval oval delimits accepted code 
compiled code acceptable code accepted code code characterizing bytecode veri cation desideratum code produced correct compilers accepted bytecode veri cation 
disappointing successfully compiling java program jvm rejected resulting class les 
compiled code produced compilers delimited smaller dotted line oval 
containment relationship ovals indicated gure 
point view choice accepted code oval ne long contained acceptable code oval contains compiled code oval 
failure containment cause type rejection compiled code 
acceptable code characterized precisely speci cation instructions compiled code depends compilers implemented 
current compilers common compilation strategies compilers new strategies generate better code 
compiled code oval moving target suitable universal characterization 
best approach give precise characterization accepted code 
implementors jvm write bytecode veri cation algorithms exactly recognize speci ed subset 
speci cation accepted code contract developers compilers jvm long compiler produces code falls inside subset code accepted bytecode veri cation 
de nition accepted code subset embody optimal trade criteria 
rst criterion bytecode veri cation simple ecient possible 
second criterion accept code possible 
rst limit compilers reject code current compilers second implementations susceptible errors attacks exploiting errors 
considerations necessary desired improvements js opinion 
notion structural constraints puri ed forward computable approximation operand stack size section uninitialized objects section subroutines section 
redundant constraints eliminated 
contradiction regarding constructor store values elds uninitialized object resolved disallowing simpli es veri cation cog cog 
arguments section term structural constraints replaced typing constraints 
way constraints express type safety properties acceptable code satisfy 
note properties homogeneous sense see discussion section 
derived js may useful collect place js currently js 
important algorithmic description js complete precise 
pointed algorithm approximation undecidable constraints 
improved treatments object initialization section merging types section subtype relation section protected members section incorporated 
solution problem mentioned section compiled bytecode rejected treatment subroutines cog solution incorporated 
formal description ful lls criteria cog 
clear bytecode veri cation cooperates type safety mechanisms jvm 
issues include class names bytecode veri cation disambiguation classes generation subtype constraints opposed loading classes 
topic java bytecode veri cation attracted interest researchers 
result large number publications subject cg cl fc fc fm fm fm fre gol ht jon kn nip pus pv qia qia req rr sa ssb 
works greatly contributed clari cation key issues bytecode veri cation including pointing inadequacies js proposing improvements 
knowledge currently provide comprehensive analysis ocial speci cation bytecode veri cation comprehensive plan improvement 
details analysis improvements subroutines covered papers explicitly referred 
need desire improve js particular description class veri cation ideally point constituting formal speci cation explicitly stated appendix js 
contributes goal 
cg alessandro coglio allen goldberg 
type safety jvm problems java sdk proposed solutions 
concurrency practice experience 
appear 
alessandro coglio allen goldberg qian 
provably correct implementation jvm bytecode veri er 
proc 
oopsla workshop formal underpinnings java october 
cl jean louis 
formal speci cation java bytecode semantics method 
proc 
st ecoop workshop formal techniques java programs june 
cog alessandro coglio 
java bytecode subroutines ed 
technical report kestrel institute 
forthcoming www kestrel edu java 
cog alessandro coglio 
java bytecode veri cation complete formalization 
technical report kestrel institute 
forthcoming www kestrel edu java 
cog alessandro coglio 
java bytecode veri cation complete formalization 
technical report kestrel institute 
forthcoming www kestrel edu java 
drew dean edward felten dan wallach 
java security hotjava netscape 
proc 
ieee symposium security privacy pages may 
fc philip fong robert cameron 
proof linking modular veri cation mobile programs presence lazy dynamic linking 
acm transactions software engineering methodology october 
fc philip fong robert cameron 
proof linking distributed veri cation java class les presence multiple 
proc 
st java virtual machine research technology symposium jvm pages 
usenix 
fm stephen freund john mitchell 
formal framework java bytecode language veri er 
proc 
th acm conference objectoriented programming systems languages applications oopsla volume number acm sigplan notices pages october 
fm stephen freund john mitchell 
type system java bytecode subroutines exceptions 
technical note stan cs tn computer science department stanford university august 
fm stephen freund john mitchell 
type system object initialization java bytecode language 
acm transactions programming languages systems toplas november 
fre stephen freund 
costs bene ts java bytecode subroutines 
proc 
oopsla workshop formal underpinnings java october 
james gosling bill joy guy steele gilad bracha 
java tm language speci cation 
addison wesley second edition 
gol allen goldberg 
speci cation java loading bytecode veri cation 
proc 
th acm conference computer communications security ccs pages november 
gon li gong 
inside java tm platform security 
addison wesley 
ht hagiya 
new method data ow analysis java virtual machine subroutines 
proc 
th static analysis symposium sas volume lecture notes computer science pages 
springer september 
jon mark jones 
functions java bytecode 
proc 
oopsla workshop formal underpinnings java october 
kn klein tobias nipkow 
veri ed lightweight bytecode veri cation 
proc 
nd ecoop workshop formal techniques java programs june 
lb sheng liang gilad bracha 
dynamic class loading java tm virtual machine 
proc 
th acm conference object oriented programming systems languages applications oopsla volume number acm sigplan notices pages october 
ly tim lindholm frank yellin 
java tm virtual machine speci cation 
addison wesley second edition 
nip tobias nipkow 
veri ed bytecode veri ers 
proc 
th conference foundations software science computation structures fossacs volume lecture notes computer science pages 
springer april 
flemming nielson hanne riis nielson chris hankin 
principles program analysis 
springer 
robert callahan 
simple comprehensive type system java bytecode subroutines 
proc 
th acm symposium principles programming languages popl pages january 
pus 
proving soundness java bytecode veri er speci cation isabelle hol 
proc 
th conference tools algorithms construction analysis systems tacas volume lecture notes computer science pages march 
pv joachim posegga harald vogt 
java bytecode veri cation model checking 
proc 
oopsla workshop formal underpinnings java october 
qian allen goldberg alessandro coglio 
formal speci cation java class loading 
proc 
th acm conference object oriented programming systems languages applications oopsla volume number acm sigplan notices pages october 
long version available www kestrel edu java 
qia qian 
formal speci cation java tm virtual machine instructions objects methods subroutines 
jim alves foss editor formal syntax semantics java tm volume lecture notes computer science pages 
springer 
qia qian 
standard xpoint iteration java bytecode veri cation 
acm transactions programming languages systems toplas july 
req antoine 
model ensuring soundness large subset java card virtual machine 
proc 
th ercim workshop formal methods industrial critical systems pages april 
rr eva rose er rose 
lightweight bytecode veri cation 
proc 
oopsla workshop formal underpinnings java october 
sa raymie stata mart abadi 
type system java bytecode subroutines 
acm transactions programming languages systems toplas january 
sar vijay saraswat 
java type safe 
technical report research 
available www research att com vj bug html 
ssb robert st ark joachim schmid egon 
java tm java tm virtual machine de nition veri cation validation 
springer 
th hagiya 
careful analysis type spoo ng 
proc 
java informations tage jit pages 
springer september 
phillip 
compositional account java virtual machine 
proc 
th acm symposium principles programming languages popl pages january 

