updating xml igor tatarinov zachary ives alon halevy daniel weld alon cs washington edu department computer science engineering university washington seattle wa xml developed past years role expanded original domain semantics preserving markup language online documents de facto format interchanging data heterogeneous systems 
data sources export xml views data systems directly import query views 
result great interest languages systems expressing queries xml data xml stored repository generated view data storage format 
clearly order fully evolve xml universal data representation sharing format allow users specify updates xml documents develop techniques process eciently 
update capabilities important modifying xml documents propagating changes xml views expressing transmitting changes documents 
begins proposing set basic update operations ordered unordered xml data 
describe extensions proposed standard xml query language xquery incorporate update operations 
consider alternative methods implementing update operations xml data mapped relational database 
describe experimental evaluation alternative techniques implementing extensions 

past years tremendous surge interest xml universal representation data 
part stimulated growth web commerce xml instantly emerged de facto standard information interchange 
nearly vendor data management tools added support exporting viewing cases importing xml formatted data 
tools querying integrating xml largely infancy emerge 
xml document repositories software ag available xml publishing capabilities added latest relational database systems oracle ibm microsoft 
ultimately expected relational database engines provide standardized integrated support querying publishing xml views databases 
allow sharing data xml repositories traditional relational databases single uni ed permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
acm sigmod may santa barbara california usa copyright acm 
model xml views xml query language 
world wide web consortium process developing standard xml query language called xquery 
database research community hard addressing challenges providing xml views relational databases systems silkroute :10.1.1.33.2168
step making xml full featured data exchange format support queries updates xml content 
possible modify content xml documents express updates xml views back original data 
ability encapsulate update operation necessary expressing incremental changes deltas content important continuous queries xml document mirroring caching replication 
propose set constructs expressing updates ordered unordered xml data model map constructs syntax xquery language describe implementation techniques relational database system 
particular contributions propose set primitive operations modifying structure content xml document 
update extensions world wide web consortium proposed xquery standard query language 
provide algorithms implementing xml update capabilities xml repository relational database system describe techniques applied problem updating relational databases xml views 
frequently updated data tends reside relational systems feel important studied techniques updating complex xml structure mapped relational system 
provide analysis performance di erent update strategies number workloads document structures 
structured follows 
description related section 
section provide overview xml data model describe set primitive operations updating ordered unordered xml data 
section describes operations added xquery language 
section reviews key concepts mapping xml relational databases section presents implementation strategies 
evaluate techniques section directions section 
related topic updating xml data received little attention far xml community primarily focused development query languages xml ql xquery semantics 
xml repository xml systems support updates expresses simple insertions deletions extension xpath language 
lorel query language stanford lore semistructured database system supports simple insertions deletions nodes lore data graph :10.1.1.45.8397
extensions lorel migrated query language xml data model update features ported process :10.1.1.22.605
objectoriented systems support updates tend programming language set operations assignments object insertions deletions collection types 
language extensions allow insertions deletions assignments multiple levels hierarchy order support updates complex structure including derived xml schema types 
problem storing xml relational database systems extensively studied problem extracting xml view relational tables addressed :10.1.1.28.8006:10.1.1.137.5340:10.1.1.33.2168
techniques leverage works supplementing access support relations implementation focuses problem supporting updates 
problem updating hierarchical data stored multiple tables new having arisen context object relational systems believe rst address sql level storage xml data 

xml update fundamentals numerous xml query languages proposed document database communities 
chosen focus emerging xquery standard attempts combine best features leading xml query languages expected sql xml 
section basic data model update operations language independent way order carefully de ne semantics 
section maps basic set operations xquery language 
data model xquery uses world wide web consortium xml query data model views xml document node labeled tree 
simpli ed version model purposes illustration 
shows example xml document illustrates tree structured representation 
draw tree left right depth rst traversal describes order xml content document 
note representation model attributes uniformly including special meaning idrefs 
attributes unordered respect important note idrefs attribute ordered list 
xquery idref attributes explicitly dereferenced path expressions operator 
discussion need refer di erent kinds xml content 
term object refer component xml attribute pair name string value 
idrefs named ordered list ids 
simplicity presentation assume idref idrefs types equivalent idref singleton list 
element tuple name set attributes set list child elements pcdata 
pcdata scalar content string value exists element 
update operations describe set update operations xml documents 
goal provide uniform clean semantics updating simply scalar leaf node values lorel complex structured irregular types particular complex xml schema types derived subtypes 
distinguish idref types attribute content idrefs encode structural information opposed data values may appear ordered idrefs lists 
style xquery assume presence path expression matching operation binds variables objects input xml document returns tuples selected objects 
bindings target sequence operations assumed implicit speci cation 
update operations take set parameters content name 
update sequence primitive operations types delete child child member target object removed 
valid types child include pcdata attribute idref idrefs list element 
child idrefs single entry removed remainder idrefs preserved 
rename child name child non pcdata member target object new name 
note rename individual idref idrefs rename operation rename entire idrefs 
insert content inserts new content pcdata element attribute target 
attempt insert attribute name existing attribute fails 
attempt insert name existing idrefs adds extra entry idrefs 
ordered execution model non attribute insertions de ned occur new content appended 
ref content de ned ordered execution ref child element target pcdata content element pcdata inserted directly ref target list children 
ref entry idrefs content id inserted directly ahead ref idrefs 
ref content de ned analogously 
replace child content atomic replace operation equivalent child content followed delete child ordered model insert content delete child unordered execution 
ucla bio lab los angeles seattle bio lab seattle usa philadelphia usa category spectral biologist smith spectral 
smith jones sample xml document representing biology labs publications db lab lab biologist name location name location seattle bio lab lastname smith city country seattle usa city country philadelphia usa id managers smith id lab id smith title auto 
id smith source lab biologist smith category spectral university id ucla lab name seattle bio lab city los 
id managers smith jones lab biologist lastname jones id jones data model representation 
sub update predicates starting target element invokes new pattern matching operation input returning bindings ltered predicates 
valid combination bindings recursively invokes update operation 
allows express updates multiple levels complex xml structure 
full update operation may consist suboperations execute sequence 
add additional restrictions semantics operations order prevent ill de ned semantics 
bindings sub update operations input updates take place 
likewise content evaluated target sequence updates executed 
binding deleted operations sequence content 

xquery extensions updates basic set operations section express xml updates logically step take operations map xquery language syntax 
describing general form update extensions elaborate speci operations 
basic form updates extend xquery update structure updates 
update clause sequence sub operations semantics logical update ops speci ed binding xpath expr binding xpath expr predicate de ned ebnf update binding delete child rename child name insert content child replace child content binding xpath predicate nested clause allows specify xpath expression matched binding set predicates may restrict bindings 
nested update operation may performed bindings outer scope clause 
multiple speci ed performed consecutively iteration variable bindings semantics described previous section 
language extensions detail previous section assumption xpath expressions suciently expressive select xml objects wishes manipulate 
certainly true elements xquery de ne select attribute value individual idref idrefs list 
introduce conventions binding attributes idrefs 
speci cally assume variable bound attribute tag attr represents attribute simply value document 
modify attribute updating object expression value get string content 
bind variable speci idref idrefs introduce function ref label target bound variable 
example binds document follows document bio xml ref lab examine basic operations individually providing xquery example case 
deletion deletion ways simplest operation simply requires binding parent child 
query illustrates operation select element update remove category attribute biologist smith title subelement 
document bio xml cat category bio ref biologist smith ti title update delete cat delete bio delete ti example deleting attribute idref subelement deleting subelement node typically remove content 
may deleted subelements 
xquery allows dangling data results support semantics delete operation allowed 
insertion insertion introduce constructor new attributes inserted 
illustrate example inserts age attribute firstname subelement biologist smith entry bio document bio xml db biologist id smith update bio insert new attribute age insert new ref ucla insert new ref insert jeff example inserting attribute subelement unordered execution model child elements biologist entry appear arbitrary order result update 
ordered model successive inserted list firstname subelement appear existing subelements 
specify positional insertion case adding street name element lab adding jones rst managers lab document bio xml db lab id lab name ref managers smith update lab insert jones insert oak example inserting subelement relative existing content note new ref constructor necessary insertion relative idrefs binding 
replacement replacing item ect inserting new item deleting convenient able express single atomic operation 
simple example replaces lab manager name lab document bio xml db lab name lab name mgr lab ref managers update lab replace name fancy lab replace mgr new attribute managers jones example replacing elements attributes note wildcard character ref function match 
binding replaced label manager replaced managers 
combining operations nested updates nested clause enables express updates multiple levels xml document selecting desired nodes level 
illustrate example updates university ucla adding labs attribute number labs creating new lab modifying existing document bio xml db university id ucla lab name lab index update insert new attribute labs insert ucla secondary lab lab lab name ci city update replace ucla primary lab delete ci example multi level nested update outermost update operation works university tag nested pattern match performed inside operation lab modi ed 
see output document 

storing xml relations xml repository systems built object oriented hierarchical databases commonly constructed relational database system middleware layer translates queries xml query language sql queries database :10.1.1.28.8006:10.1.1.137.5340
similar source xml data xml mediator placed existing relational database :10.1.1.33.2168
mediator takes user provided mapping generates hierarchical xml view existing relational tables xml queries view translated sql 
key di erence xml repository relational core xml view manager relational database case relational schema relationships tables ucla secondary lab ucla primary lab 
category spectral biologist smith 
results multi level update university labs example automatically generated xml input relations provided view de nition xml mapping 
result query translation algorithms somewhat di erent 
types systems techniques translation hierarchical xml queries generated sql queries transforming relational output xml 
likewise basic xml update techniques applied repository mediator contexts 
xml relational techniques cover wide portion xml query spectrum selected domain implementing xquery extensions 
section review summarize basic techniques representing xml relational tables converting relational query results back xml 
number alternatives executing xquery update extensions relational tables 
rst issue mapping xml set relations correspondence relation portion xml document hierarchy 
xml mediator provided xml view de nition xml repository system determine mapping 
mapping tables established means converting tabular output xml determined 
queries multiple tables sped access support relations indexing technique object oriented databases 
examine topics turn 
mapping xml relations methods proposed mapping xml documents relations :10.1.1.28.8006:10.1.1.137.5340
authors describe edge attribute approaches 
element attribute stored tuple single edge relation create similar binary table tag attribute name document 
main drawback approaches cause excessive fragmentation xml elements multiple tuples relations traversing xml structure outputting xml content requires joins expensive 
edge approach advantage techniques works input documents dtds 
shared inlining method exploits dtd better cluster parent child elements 
informally method tries store child elements attributes tuple parents reducing number joins required 
dtd provides information necessary determine inlining possible 
example inlining dtd example customer database 
method dtd simpli ed version tpc web benchmark schema 
dtd child elements appear exactly occurrence parents customer name 
elements inlined attributes parent elements tuples customer table contain attribute name 
conversely subelements relationships parents inlined stored separate tables 
shared inlining create relations example customer order orderline 
addition corresponding pcdata attributes relation id attribute 
attributes link tuples corresponding parent child element pairs stored xml document 
experimented storage schemes 
rest focus inlining approach exibility storage schemes yield di erent results insights 
consider issue document order discussion 
xml results outer unions xml structure stored multiple tables number possible ways returning results 
approach open series nested cursors table require modi cation underlying rdbms 
approach create wide tuple containing possible attributes xml subtree joining constituent relational tables returning results produces large amounts redundant data 
alternate approach essentially simulates nested cursor approach di erent levels xml hierarchy di erent relational tables returned results returned separate tuples stream 
tuples comes di erent table schema create wide tuple possible attributes pad table tuples nulls customer subquery select id name address city address state null null null null null customer name john order subquery select null null null id status null null null order orderline subquery select null null null null id qty orderline ol ol select union select union select order outer union query example ts wide tuple 
technique rst proposed called outer union method 
simplify job reconstructing xml document client output tuples sorted child element data comes parent data child elements di erent parents intermixed 
consider simple xquery expression retrieves data customers named john document xml customer name john return example returning customer john xquery separately joining relations customer order orderline outer union approach produce query employs ibm db clause reusable subexpressions 
note child tuples include key attributes content parents appropriate association parent child maintained 
facilitates order sort tuple stream child elements follow parents 
clause xquery expression contains conditions elements values conditions tested rst base subquery clause branches outer union remove tuples 
point query evaluate regular path expressions described 
readability simpli cation omitting required nulls match attribute types 
access support relations path expression evaluation access support relations ective method speeding evaluation path expressions objectoriented semi structured databases 
asr indexes speci path contains attribute object path 
principle extends naturally xml mapping described object path tuple table particular depth element hierarchy 
tuple xml element id corresponding object id traditional asr 
asr tuple encodes path xml element descendants 
xml queries generally expressed downwards speci ed node xml tree certain children may may exist semistructured data left complete extension nulls allowed bottom tree 
see speed path expression evaluation suppose customer xml document extended part information stored separate parts table consider query returns names customers ordered item built part document xml customer order orderline item part number name return example customers ordering items part query evaluated joins select part tuples number join item order customer relations retrieve corresponding customer names 
asr contains paths root element leaf part elements query evaluated joins rst part asr relations joined result joined customer obtain customer names 
queries sped indexing various tables asr required ids 
clearly especially ective long paths 
short paths customer order orderline joining asr faster joining intermediate relation asr compact contain data values 

updating stored xml challenges translating xml updates sql go translating queries 
clearly generate ecient sql update statements ideally case xml queries translate xml update single sql command issuing multiple separate sql statements incurs overhead prevents rdbms performing large scale optimizations 
unfortunately sql update statement modify single relation issue multiple queries update xml document levels hierarchy 
example xml insert new item customer data sample xml database may easily require sql insert statements modify customer order orderline relations 
certain approaches insertion may require statements examine number alternatives detail 
diculty creation maintenance element id parent id foreign key relationship encodes xml structure 
xml subtree copied location tuples replicated new ids connectivity 
subtle issues considered ensure correctness translation 
consider example query selects customer orders ready contain order line tires 
status selected orders set suspended comment added tire order line 
document xml order status ready orderline tire update insert suspended orderline tire update insert recalled example suspending orders tires xquery suppose xml update statement translated sql updates update order orderline base relations 
clearly rst update executed second second update apply tuples status relevant orders changed suspended 
pair updates second statement executed rst 
example illustrates potential performance problem second update performs joins selection operations rst 
section methods avoiding redundant 
issue address validation operations dtd 
section number algorithms assume valid operation performed 
xml deletion techniques certain simple deletion operations may involve removal item single table generally occurs deletion xml element inlined parent ancestor 
major expense operation lies query nds speci element actual operation performed simple sql update sets element attribute null 
possible caveat arises non leaf element children inlined parent deleted non leaf element data value set children null results ambiguity non leaf element deleted exists empty content 
case add ag specifying non leaf element absent 
operation greater interest deletion subtree stored multiple relations case tuples removed subsidiary tables target deletion 
remainder section describe possible translations complex xml delete sql 
example delete statement deletes customer data customers name john 
document xml customer name john update delete example deleting customers named john xquery trigger delete sql triggers natural mechanism initiating successive deletes subsidiary tuples single delete 
triggers supported commercial today event initiated rules attached speci relations 
relation updated trigger red sql code executed 
triggers red individually ected tuple entire delete statement 
triggers greatly simplify implementation multilevel delete operation need 
relation child relations de ne post delete trigger red parent tuple deleted 
body trigger contains sql code delete relevant tuples child relations 
delete element mapped relation needs delete element root tuple 
example delete johns query translated simple sql statement delete customer name john relevant order orderline tuples automatically deleted triggers set creation relational schema 
single sql statement needs issued entire delete operation handled inside rdbms expect trigger deletes ecient 
tuple vs statement triggers 
mentioned triggers red tuple statement basis 
accordingly ways propagate deletes xml tree 
tuple trigger deleted tuple accessible id trigger delete tuples child relations link tuple attribute 
turn cause triggers child relations red 
contrast statement trigger red relevant tuples deleted relation 
propagate delete necessary delete orphaned tuples child relations 
cascading delete dbms support triggers possible simulate ect statement triggers rst deleting relevant tuples parent relations deleting orphaned tuples children 
soon delete operation remove tuples 
note apply method schema recursive 
delete customer element john statements executed sequence delete customer name john delete order select id customer delete orderline select id order intuitively cascading delete method similar performance characteristics statement trigger method slightly overhead requires sql statements 
discussed section case 
asr delete access support relations improve query response time discussed section speed deletions 
speci cally internal tuple id element deleted known ids descendants obtained asr 
single join deleted tuple asr yields ids child tuples delete point 
perform delete mark asr tuple containing deleted object 
child table delete tuples ids match deleted row asr 
update asr re ect current state data 
expect asr method perform trigger delete methods larger number sql statements needs executed extra overhead updating asr 
xml insertion techniques deletions divide insertions simple complex hierarchical operations 
simple insertions element inserted completely inlined performed single sql update operation 
want generate warning attempt insert item may occur dtd initially query table ensure tuple wish update null values appropriate attributes 
complex insertion contains xml subtree requires updates tuples multiple tables 
operation may insert literal content copy data existing xml document may impose correlation destination source data 
insertion data existing document challenging provide example 
suppose want copy customer elements describing di erent document appropriate dtd source document xml customer address state ca target document ca customers xml update target insert source example inserting customers xquery particularly challenging aspects executing insertion 
rst minimizing number sql insertions updates required 
second di cult problem lies generating new ids duplicate data maintaining structure 
insertion operation copy semantics simply link existing tuples ids unique document simply copy tuples 
solution id assignment problem provide id mapping function similar skolem function xml ql particular source destination id return unique new id perfect hash 
unfortunately rdbms provides capability perform operation maintain sort mapping state 
prefer avoid overhead method sections discuss approaches complex insert operation id mapping function 
tuple insert tuple insertion method begins querying source subtree sorted outer union method reading tuple time 
source element tuple new unique id parent elements shared tuples course share new id mapping structure maintained execution 
sorted outer union tuple partitioned back components matching underlying tables inserted 
memory requirements method low bounded size outer union tuple 
large penalty terms number sql insert statements required generated table tuple 
advantage tuple method allocates tuple ids gaps table asr methods described 
table insert logical way reduce number statements required tuple insert remap source tuples single operation insert remapped tuples en masse underlying table 
operation simply require bu ering source data memory worst case data temporary table required 
table insert method temporary table area assume database bu er manager keep results memory possible 
order quickly remap ids large number tuples employ heuristic 
nd minimum maximum tuple id values respectively source tree temporary table know upper bound number ids 
systemwide available id counter nextid add set nextid id temporary table advance nextid 
moderately sized subtrees table insert method perform better tuple approach executes single sql insertion data relation 
asr insert main reason temporary table insert method described nd source subtree data ids 
primary role access support relations surprising enhance insert performance 
creating temporary table asr insertion operation scan asr child tuple ids compute remapping set described table inserts 
asr retrieve replicate source tuple data 
asr insert uses marking scheme similar asr delete approach described previously identify asr paths source requires sql update statements mark unmark asr add new paths asr inserted data update source table 
higher number operations insert require excess duplication data require join intensive generation outer union results 
update operations leverage basic algorithms querying inserting deleting form remaining operations 
space constraints section brie highlight algorithms potential optimizations 
replace operation removes existing subtree adds new place 
clearly implemented deletion followed insertion 
note possible replace tree value subtrees 
cases special case operation performed new subtree linked new parent remainder old subtree deleted 
rename operation logically changes element attribute name content relational mapping involves moving data attribute table 
simulated insertion copy subtree new place followed deletion original 
process greatly optimized observations rename ects outermost level subtree top level table needs updating renaming involves movement creation data new ids need generated 
unique aspect update extensions nested update expressions 
order prevent interaction di erent levels language semantics de ne bindings prior updates 
simpli es mapping sql 
approach implementing multilevel update follows 
perform sorted outer union query potentially making asr compute various source target bindings update statement including sub operations 
sequentially execute sub operations appropriate bindings 

experimental results order determine update methods best conditions ran comprehensive series experiments 
space limits preclude presentation results section reports highlights 
code written java translated update queries sql jdbc communicate ibm db udb 
avoid network delays processing done computer mhz pentium iii gb main memory running windows 
interested primarily optimal performance relational database xml updates experiments focused case data memory 
order ensure consistency experiment consisted set runs results rst run discarded 
graph point represents average time runs variance small show con dence intervals 
avoid reloading database run commit transactions 
run experiments commits notice signi cant increase running time 
db commercial databases commits transactions eciently log ush operation performed commit time 
workloads test data compared update methods bulk random workloads 
bulk workload update operation applied subtree element synthetic input document 
bulk delete leave root element deleting 
simulate random workload applied update operation randomly chosen subtrees 
clearly performance ecient update operation random workload depend signi cantly size input document 
described sets test data experiments 
rst set data synthesized document structure xed 
second set data synthetic document structure randomized 
third set experiments real life data dblp bibliography database 
fixed synthetic data rst step compared performance update methods set relatively simple synthetic documents 
test document generated parameters scaling factor speci es number subelements subtrees root level 
intuitively scaling factor denotes length xml document 
depth determines number levels subtree ects complexity synthetic xml document 
fanout speci es number child nodes subelements internal nodes subtree measure document complexity 
space possible parameter combinations huge explored space alternately holding parameter constant varying values summarized table 
simulate content element synthetic xml documents contains data subelements character string integer 
randomized synthetic data set experiments input document subtrees xed structure necessitates changes document parameters 
scaling factor measures number subtrees root level 
depth speci es maximum depth subtree actual depth subtree random number minimum depth maximum depth 
similarly fanout node random number speci ed maximum fanout 
real life data order verify results augmented synthetic data conference publications portion dblp bibliography 
data organized xml document upper elements correspond conferences 
conference element publication subelements contain author citation subelements data 
size resulting document mb produced database tuples 
effect access support relations evaluation pure query evaluation focus study ect query update performance experiment xed param variable params max data size data size growth xed fanout fanout sf tuples mb linear depth sf xed depth depth sf tuples mb linear fanout sf xed scaling factor sf sf tuples mb exponential depth table parameter values evaluated synthetic data started testing ectiveness evaluation 
surprisingly improve performance documents small fanout 
example synthetic document fanout query containing path expression length ran times slower asr 
path length increased conventional method data relation joins performance asr method joins 
path expressions longer help 
believe asr implementation failed improve path expression performance reasons 
dbms expose internal row identi ers serve physical addresses 
physical row ids rely generated tuple ids link data relations resort index joins physical 
second larger asr relation quickly large contains tuple full path xml tree 
result ecient perform multi way join original data relations join path start relations asr 
third cases appears dbms optimizer poor choices exacerbated rst issues 
performance delete methods experiment compares methods performing deletes tuple trigger statement trigger cascading delete asr delete 
general delete methods performed best 
expected cascading delete method performed trigger delete simulates application level inside dbms 
di erence performance methods negligible omit cascading delete graphs 
figures compare performance delete methods bulk random workloads 
show data case fanout xed depth set 
note running time bulk workload frequently random workload sql statement issued bulk delete sql statements necessary random workload deleted subtree 
bulk workload statement triggers perform noticeably better tuple triggers 
entire contents relations deleted executing deletes equivalently relation basis cient doing tuple basis 
random workload tuple triggers perform better statement triggers 
importantly tuple triggers performance degrade data set increases tuple line virtually appropriate varying amount deleted content 
statement triggers hand slow signi cantly document size scaling factor increased 
quick review trigger mechanism section yields explanation phenomenon 
tuple parent relation deleted tuple trigger uses id deleted tuple look newly orphaned tuples child relations 
number lookups equals number deleted tuples 
size document directly impact tuple triggers 
statement trigger hand gets invoked relevant tuples parent relation deleted 
trigger deletes orphan tuples child relations tuples parent tuple 
delete operation involves scan entire child relations indexes id attribute time required increases size data 
figures show running times delete methods documents scaling factor xed fanout equal 
linear growth independent variable depth results exponentially larger documents logarithmic axis 
bulk workload methods clearly outperform asr approach 
tuple trigger method performs best random workload 
statement trigger delete slow involves full index scan relation involved 
results randomized synthetic data similar shown omitted 
tuple delete clear winner random workloads performed slightly statement trigger delete bulk workloads 
dblp results shown table 
experiments query deletes publications appeared year 
tuple trigger delete method performed better methods 
statement trigger cascading delete methods perform dblp data bushy small portion document deleted discussed methods perform random workloads 
inserts measure insert performance sought simulate query copies complex xml elements single document 
ect simple query replicates random workload bulk workload subtrees root element 
results experiments shown figures 
clearly table method outperforms methods bulk inserts 
random inserts amount copied data small tuple method preferable overhead methods 
tuples need copied source elements deeper tuple method perform table method performs better 
explained large number sql operations source tuple tuple method execute 
copying data di erent document dtd similar 
operation method tuple trigger stm trigger cascade asr table tuple delete running time insert running time table experimental results dblp data 
scaling factor asr stm trigger tuple trigger delete performance bulk workload xed fanout depth 
scaling factor asr stm trigger tuple trigger delete performance random workload xed fanout depth 
depth asr stm trigger tuple trigger delete performance bulk workload xed scaling factor fanout 
depth asr stm trigger tuple trigger delete performance random workload xed scaling factor fanout 
depth tuple table asr insert performance bulk workload xed scaling factor fanout 
depth tuple table asr insert performance random workload xed scaling factor fanout 
update operations explained section update operations generally implemented sequences inserts deletes queries 
separately show performance di erent strategies operations best implementations fastest delete method tuple trigger delete fastest insert method table insert 

xml data management community focused issues related querying xml clear problem expressing updates xml data prominent near 
xml update language provides general purpose way express changes data represented xml data stored xml repository relational database xml view 
proposed set primitive xml update operations composed express modi cations multiple levels xml document re ecting hierarchical structure xml query languages incorporated operations set language extensions xquery 
furthermore taken language extensions implemented widely researched means storing data xml relational database 
compared numerous approaches implementing core operations insert delete determined best 
part tuple trigger deletes dominated methods table insert method fastest 
feel fairly comprehensive study xml updates potential areas 
topic typechecking updates important plan investigate possible directly techniques developed queries 
update language implementation able eciently provide deterministic result particular xml update target reachable path expression target terms xml repository implementation extend relational techniques support preservation order xml document 
query repository traditionally done storing element child index position results sorted original order 
updates insert new content existing data encounter problem pushing position old data forward accommodate insertion 
nal assessment updates xml document expressed concise natural way support ordering 
shown set basic constructs eciently implemented relational database number challenges encountered query xml storage manager 
dan suciu helpful suggestions regarding update extensions jayant madhavan anonymous reviewers insightful comments 
halevy supported sloan fellowship nsf iis iis gifts microsoft research nec ntt 
weld supported nsf dl oce naval research 
ives supported ibm research fellowship 
abiteboul quass mchugh widom :10.1.1.45.8397
lorel query language semistructured data 
proceedings international journal digital libraries volume pages april 
carey florescu ives lu shanmugasundaram shekita subramanian 
publishing object relational data xml 
acm sigmod webdb workshop 
chamberlin florescu robie simeon 
xquery query language xml 
technical report world wide web consortium february 
available wwww org tr xquery 
chen dewitt tian wang 
niagaracq scalable continuous query system internet databases 
sigmod 
clark derose 
xml path language xpath recommendation 
www org tr rec xpath november 
deutsch fernandez florescu levy suciu 
query language xml 
eighth international world wide web conference 
deutsch fernandez suciu 
storing semistructured data stored 
sigmod pages 
fernandez robie 
xml query data model working draft may 
technical report world wide web consortium may 
available www org tr wd query datamodel 
fernandez :10.1.1.33.2168
tan suciu 
silkroute trading relations xml 
ninth international world wide web conference november 
florescu 
performance evaluation alternative mapping schemes storing xml data relational database 
technical report inria march 
goldman mchugh widom :10.1.1.22.605
semistructured data xml migrating lore data model query language 
acm sigmod webdb workshop pages 
kemper moerkotte 
access support object bases 
sigmod pages 
pirahesh lindsay 
sql xnf processing composite objects abstractions relational data 
proceedings ninth international conference data engineering april vienna austria pages 
shanmugasundaram gang tufte zhang dewitt naughton 
relational databases querying xml documents limitations opportunities 
vldb pages 
shanmugasundaram shekita barr carey lindsay pirahesh 
eciently publishing relational data xml documents 
vldb 
information server electronic business 
www com 
updating xml data 
user guide chapter 
xml application development environment 
www odi com main htm 
xml schema part structures 
www org tr wd xmlschema december 
working draft 
