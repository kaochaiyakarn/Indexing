umiacs tr december cs tr going integer programming omega test eliminate false data dependences william pugh david wonnacott pugh cs umd edu cs umd edu institute advanced computer studies dept computer science dept computer science univ maryland college park md array data dependence analysis methods currently generate false dependences prevent useful program transformations 
false dependences arise questions asked conservative approximations questions really asking 
unfortunately questions really asking go integer programming require decision procedures subclass presburger formulas 
describe extend omega test answer queries allow eliminate false data dependences 
implemented techniques described believe suitable production compilers 
supported nsf pyi ccr packard fellowship 
revised version originally appeared acm sigplan pldi conference studies cp suggest array data dependence testing analysis methods currently generate false dependences prevent useful program transformations 
part false dependences generated conservative nature algorithms banerjee inequalities kpk may 
false dependences arise questions ask dependence analysis algorithms conservative approximations questions really asking methods currently unable address complicated questions asking 
example flow dependence array access array access iff ffl executed iteration vector ffl executed iteration vector ffl writes location read ffl executed ffl write location read execution 
array data dependence algorithms ignore criterion explicitly implicitly 
ignoring criterion change total order imposed dependences cause flow dependences contaminated output dependences storage dependences 
techniques privatization renaming array expansion eliminate storage related dependences 
methods applied appear affect flow dependences program 
flow dependences represent ordering constraints represent flow information 
order effective caches distributed memories compiler accurate information flow information program 
similarly dependence testing algorithms handle assertions relationships variables array appear subscripts loop bounds 
useful system able incorporate assertions relationships able generate useful dialog user relationships hold 
unfortunately questions really asking go integer programming require decision procedures larger subclass presburger formulas kk coo 
presburger formulas built applying order logical connectives equality inequality constraints sums integer variables integer constants 
primitives handle multiplication integer constants treat subtraction treating gamma 
presburger formulas decidable fastest known decision procedures handle full class take worst case time coo opp 
original omega test pug described efficient ways answer usual questions asked dependence analysis 
show omega test extended answer questions subclass presburger arithmetic 
show phrase subclass questions allow obtain precise information data dependences section gives techniques distinguish dependences merely artifacts re memory describe flow values program 
section show produce information effects values symbolic constants dependences 
describe experiences implementation methods described convince techniques suitable production compilers 
code demonstrating disagreement dependence distance definition dependence abstractions dependence differences distances directions generally need know information data dependence just existence 
things need know include ffl dependence carried loop 

ffl dependence prevent loop interchange 
loop interchange change loop carries dependence 
way characterize data dependence difference values shared loop variables 
call dependence difference 
term dependence distance generally authors refer thing term dependence distance widely accepted definition unnormalized loops 
different definitions issues discussed pug 
example depending ask told dependence distance code gamma gamma gamma told incorrectly dependence exists 
single unique dependence difference array pair 
case need appropriately summarize dependence differences 
way summarizing possible signs dependence differences 
example dependence differences deltai deltaj deltaj summarized dependence differences deltai deltaj deltai summarized summarizing dependence differences example falsely suggest signs possible 
summary signs dependence difference closely related direction vectors direction vector signs normalized sign step loop 
techniques dependence testing sequential programs facilitate parallelization 
ensure data dependence points forward time requiring outermost nonzero dependence difference sign step loop 
creates minor problem constraint formulated conjunction set linear constraints dependence differences create single set constraints solutions just dependence differences point forward time 
methods described pug produce summary possible dependence differences dependence account requirement dependences point forward time 
summary information filtered describe dependences point forward time 
summary information form exact dependence difference constant possible signs dependence difference constant 
filtering summarization may split dependence 
example dependence dependence differences deltai deltaj deltai summarized dependence differences 
point onward considered distinct data dependences array holds 
dependence 


different flow dependences identical dependence differences difference summaries constrain dependence differences appropriately creating linear constraints describing dependences 
consensus starting build dependence difference distance completely adequate data dependence abstraction wol 
particular flow dependences dependence differences completely different techniques needed parallelize loops 
dependence difference distance sufficient check legality loop fusion interchange imperfectly nested loops 
researchers suggested exact dependence abstractions describe exactly pairs iterations involved dependence pug fea mal limit discussion dependence difference abstractions 
extending omega test omega test pug integer programming algorithm fourier motzkin variable elimination 
basic operation supported omega test projection 
intuitively projection set constraints shadow set constraints 
formally set linear equalities inequalities set variables projecting constraints variables ae produces set constraints variables integer solutions original problem 
example projecting bg gives 
notation represent projection problem set variables xn notation represent projection problem variables omega test determines set constraints integer solutions projection eliminate variables constraints involve single variable point easy check integer solutions 
applications projection 
example define set constraints array pair includes variables possible dependence difference common loop project set constraints variables dependence difference 
projected system efficiently determine dependence differences 
omega test checks integer solutions real solutions unable produce single set constraints computing 
omega test forced produce set problems problem called call dark shadow call real shadow real shadow may include solutions real integer solutions variables eliminated 
practice projection rarely contains points doesn contain points small 
checking see solutions check 
tests fail required examine checking integer solutions choose variable eliminate avoid possible 
omega test works fourier motzkin variable elimination de eliminates variable linear programming problem 
intuitively fourier motzkin variable elimination finds gamma dimensional shadow cast dimensional object 
consider constraints lower bound fi bz upper bound az ff positive integers 
combine constraints get afi abz bff 
shadow pair constraints afi bff 
fourier motzkin variable elimination calculates shadow set constraints combining constraints involve variable eliminated result combination lower upper bound variable eliminated 
real shadow conservative approximation integer shadow set constraints 
pug extended fourier motzkin variable elimination integer programming method 
afi bff may integer solution afi abz bff 
afi gamma gamma bff know integer solution exist 
dark shadow pair constraints described pug 
dark shadow pessimistic approximation integer shadow set constraints 
note dark shadow real shadow identical identical integer shadow 
cases real shadow contains integer points dark shadow 
case determining existence integer solutions original set constraints requires special case techniques described pug needed practice 
determining validity certain presburger formulas assume propositions represented conjunction linear equalities inequalities 
determine truthfulness predicates tautology 
trivial check conjunction 
satisfiable 
check techniques described section pug 
tautology 
efficiently answered techniques described pug efficiently answered practice techniques described section 
projection transformation offered omega test allows handle existential qualifiers 
combine abilities standard transformation predicate calculus determine validity certain presburger formulas 
attempted formally capture subclass presburger formulas answer efficiently 
examples presburger formulas answer efficiently true iff tautology 
true iff tautology 
easily determine 
true iff tautology 
conjunctions linear equalities inequalities computing checking tautology intuitively define gist new information contained know formally gist conjunction containing minimal subset constraints gist 
note gist true 
satisfiable compute gist follows gist true return true constraint satisfiable return gist true return gist true newc constraint replaced newc 
satisfiable gist true 
unfortunately algorithm requires satisfiability tests takes non trivial amount time 
handle problem checking number special cases listed order increasing difficulty check ffl equation check see implied single constraint redundant gist 
ffl check see variable upper bound know upper bounds gist 
similar check lower bounds 
ffl exist constraint inner product normals positive gist 
ffl equation implied constraints redundant gist 
note equation determined redundant gist equation may infer equations redundant 
fast checks completely determine gist 
usually greatly simplify problem utilize naive algorithm 
checking implications noted earlier determine tautology checking gist true 
performing implication tests algorithms short circuit computation gist soon sure gist true 
combining projection gist computation case need compute problems form gist 
perform computation performing projections independently computing 
efficient solution 
combine single set constraints tagging equations red equations black 
project away variables eliminate obviously redundant equations go 
projection black equations considered black red red equations just red 
combining red black inequality produces red inequality 
eliminating red equality substitution perform substitution red equations 
black equations involve variable eliminated convert equality pair inequalities convert 
projected away compute gist red equations respect black equations 
related authors explored methods integer programming methods decide subclasses presburger formulas ble sho jm 
ble sho handle nested alternating quantifiers 
described jm handle constraints form variables constant 
limitations prevent techniques types dependence analysis problems need analyze 
handling array kills say memory dependence accesses executions reads writes variable accesses refer storage location 
traditional array data dependence tests definition dependence 
say value dependence refer location writes memory location accesses value location access reaches second access 
traditional scalar data dependence tests definition dependence 
value dependence accesses location memory dependence say dependence dead killed intervening write 
refer value dependences live dependences dead 
section give techniques computing value dependences arrays 
research area focused value flow dependences techniques applied output anti dependences flow dependences 
note transitive closure dependences unaffected choice memory dependence testing 
value dependence memory dependence 
memorybased dependence equivalent chain value dependences 
dependence live value dependence access intervening writes output dependences consecutive intervening writes value dependence writes second access 
program transformations simply re arrange order execution array accesses preserve transitive closure flow output anti dependences 
memory dependence tests sufficient check legality transformations 
need information value flow dependences test legality storage dependence breaking transformations variable expansion privatization renaming 
value flow dependences represent flow information program preserved transformation preserve program semantics 
hand output anti dependences dead flow dependences occur memory location holds different values execution program 
eliminate dependences mapping different values distinct memory locations variable renaming expansion privatization long preserve flow information program value flow dependences 
techniques eliminate dead anti output dependences little semantic importance useful interactive environments reduce amount useless information displayed user 
kinds analysis perform killing dependence read write read write killed write iff array elements accessed overwritten access 
covering write covers read write iff overwrites elements array accessed accesses 
case dependence access precedes killed terminating write terminates read write iff overwrites elements accessed case dependences read write killed refinement dependence write read write possible executions kill dependences earlier executions similarly dependence read write write executions may kill dependences executions say refers specific array program iteration vector represents specific set values loop variables loop nest 
set iteration vectors executed iteration loop variables values specified sub refer array subscripts equal 
executed sym set symbolic constants loop invariant scalar variables notation 
example killed flow dep 

example covering killed dep unrefined flow dependence refined flow dependence example refinement dependence refined subset dependence differences iff dependence difference killed dependence difference subsections give formulae perform types analysis 
notation adapted zc shown 
formulae need enforce constraint access precedes 
may convex set constraints perform test dependence difference summary obtained conventional data dependence analysis 
killing dependences dependence read write read write killed write iff elements accessed overwritten access 
case sym sub sub example write kills flow write read sub sub write able verify kill sub sub asserted user able verify kill 
multiple dependence difference summaries test independently see killed 
multiple dependence summaries perform test combination summary summary 
test detect cases dependence summary killed combination summaries 
working generalizing tests handle case kills comb group writes bn kill dependence 
see pw details 
covering dependences write covers read write iff location accessed previously written case need examine dependences accesses precede writes kill dependence 
covers iff sym sub example read covered write gamma sub gamma gamma gamma level dependence carried determines array accesses killed cover 
example dependence write read loop independent kill dependence write read 
dependence cover carried loop writes come covering writes 
note traditional dependence tests able determine dependence loop independent 
terminating dependences write terminates read write iff location accessed subsequently overwritten terminates need examine dependences accesses follow writes terminates iff sym sub example read terminated write 
refining dependence differences directions iterations read write receive dependence write receive dependence execution dependence difference say dependence refined source example shows loop flow dependence refined source 
due space limitations unable discuss equations analyze refinement pw 
quick tests check avoid performing general tests described doing quick tests 
example dependence kill dependence output dependence possible sum dependence difference equal dependence difference similarly possibility refining dependence write refining self output dependence non zero dependence difference loop level refined 
exists loop dependence difference dependence cover iteration loop check coverage 
note cover executed time fail detect cover forced kill covered dependencies dependence 
trying kill dependence covering dependence dependence closer dependence know dependence killed having perform general test 
dependence closer subset dependences differences kill subset dependence differences testing order order investigation dependences number loops containing accesses examining pairs greatest shared loop depth 
soon find dependence test determine covers destination terminates source perform special form refinement determine loop carries dependence refine leading possible 
ordering lets avoid doing dependence testing access pairs 
skip test dependence accesses share fewer loops access covered terminated dependences differences outer loops accesses covered dependences terminated dependences 
example read covered level write terminated level write 
testing order ensures find cover terminator test dependence read write 
skip test entirely flow dependence write killed cover write killed terminator 
note loops enclosing example read write simply knowing cover sufficient grounds skip dependence test 
completed basic dependence testing cover termination testing try eliminate dependences quick kill tests described 
apply complete kill test dependences killed quick test refine remaining dependences 
related analyzing false array flow data dependences caused output dependences basic approaches ffl extend pair wise methods typically array data dependence recognize array kills bra rib fea mal mal 
ffl extend scalar dataflow methods recording array sections killed defined gs ros li 
approaches merits 
example approach believe corrects limitations flaws earlier approach 
extending pair wise methods brandes bra describes methods factoring transitive dependences determine direct dependences similar computations refinement killing covering 
methods apply dependence differences coupled loop non rectangular 
describes rib techniques refine dependence distances 
discusses perfectly nested loops problems theorem refined dependence distance constant iff example terminology dependence distance constant 
error rib include gamma ffi int rib include ffi int 
theorem holds iterations near loop 
uses slightly different definition constant dependence distance 
definition states dependence constant distance iff iteration vectors flow dependence iff gamma definition dependence constant distance iff iteration vectors flow dependence implies gamma definition useful context deriving vlsi designs definition appropriate standard compiler optimizations 
paul feautrier described detailed form analysis array fea 
methods designed produce exact information read array element determines precise statement iteration wrote value 
methods expensive theta expensive programs special static control structure defined fea 
maydan amarasinghe lam mal mal provide efficient way generating information produced feautrier technique specific conditions 
evidence show specific conditions frequently satisfied real programs 
voe voe done similar feautrier 
example example 
example 
example bb example extending scalar data flow methods ros extended standard scalar data flow analysis techniques data access descriptors bk keep track approximation set array elements defined modified killed statement 
determines levels carry dependence doesn calculate dependence difference 
approach unable handle example 
data access descriptors means techniques approximate situations methods exact 
possible modify tests integer programming constraints define sets array elements involve significant described ros omega test represent array regions omega test directly form union sets constraints 
techniques fully implemented 
thomas gross peter steenkiste describe gs methods similar 
gross steenkiste thorough 
implemented approach obtained experience 
li li presents technique determining array privatizable 
technique computing approximations sets array elements defined body loop 
calculate dependence difference unable handle example 
symbolic dependence analysis data dependence may exist certain variables take particular values 
example flow dependence carried inner loop iff gamma techniques described pug determine equivalent allow user add assertions disprove dependence 
assertions easily incorporated dependence tests 
unfortunately approach doesn practice 
dependences conditions produced boring ffl conditions false loop carries dependence executes iteration doesn execute example false outer loop zero iterations 
ffl conditions inferred assertions program 
methods described section determine interesting conditions dependence exist 
technically conditions symbolic variables true order dependence interesting 
minimum include ffl inferred analysis program ffl user assertions ffl fact loop carries dependence multiple iterations 
additional things included fact source destination dependence execute inferred fact array bounds 
conditions symbolic variables true order dependence exist 
compute gist interesting conditions true order dependence exist 
dependences linear algebra routines nas routine exist conditionally loops symbolic bounds don execute certain conditions 
dependences deleted adding interesting assertions loop independent output anti dependences line line exist 
guide user attempts eliminate dependences symbolically testing dependences advance determine symbolic elimination possible 
compute conditions dependence exist condition simply true mark dependence show user conditions dependence eliminated 
expressions scalar loop invariant variables appear subscript loop bound 
case add different symbolic variable appearance expression 
expression parameterized set symbolic variables introduce additional symbolic variables parameters 
methods described ask user queries relations symbolic variables 
example check output dependence assuming leads output dependence dependence difference summary 
take set constraints determining dependence constraints enforce dependence difference add variables index array subscripts index array values 
set ae oe phi psi determine gist qs qs prompt ask user case happens 
user answers rule output dependence add assertion 
checking flow dependence produce query case happens 
answering question directly user may choose tell specifically properties array 
example user tell array strictly increasing permutation array 
advantage natural user possibly supplying information answer 
applying techniques handle wide range situations 
techniques apply directly situations array values appear loop bounds example 
handle non linear terms example array indexed non constant variables 
words term treated array actual term substituted conducting dialogue user 
adding additional algorithms perform non linear induction variable recognition recognize summations appropriate linear constraints summations techniques allow handle example program lcd handled compiler tested lcd 
related methods incorporating assertions invariant scalar variables dependence analysis algorithms producing queries ask user part compiler folklore time see hp discussion 
previous addressed ask concise questions information known 
kathryn mckinley mck describes handle index arrays dependence analysis 
enumerates typical cases discusses handled 
general purpose method handle cases array values loop bounds complicated subscripts index arrays 
special purpose methods may prove useful efficiency viewpoint dealing typical common cases 
goal describe general method possible fall back 
availability implementation omega test freely available anonymous ftp ftp cs umd edu directory pub omega 
directory contains stand implementation omega test papers describing omega test implementation michael wolfe tiny tool wol augmented omega test described 
shown omega test extended utilized answer wide range questions previous analysis methods address 
primary questions considered ffl array kills ffl handling assertions generating dialog values scalar variables ffl handling assertions generating dialog array values non linear expressions 
previous methods handle special cases problems considered describes general methods 
previous approaches problems widely implemented 
advantage power omega test able add advanced data dependence analysis capabilities relatively modest implementation investment 
hope approach lead widespread incorporation capabilities compilers interactive analysis tools 
supported nsf ccr packard fellowship 
borkar wayne kelly help obtaining experimental results comments 
special michael wolfe making tiny program freely available 
bk ken kennedy 
technique summarizing data access parallelism enhancing transformations 
acm sigplan conference programming language design implementation pages 
ble bledsoe 
new method proving certain presburger formulas 
advance papers th int 
joint conference artif 
intell georgia 
bra thomas brandes 
importance direct dependences automatic parallelism 
proc international conference supercomputing pages july 
coo cooper 
theorem proving arithmetic multiplication 
meltzer michie editors machine intelligence pages 
american elsevier new york 
cp cheng 
evaluation automatic interactive parallel programming tools 
supercomputing pages november 
de dantzig 
fourier motzkin elimination dual 
journal combinatorial theory 
fea paul feautrier 
dataflow analysis array scalar 
international journal parallel programming february 
gs thomas gross peter steenkiste 
structured dataflow analysis arrays optimizing compiler 
software practice experience february 
hall kennedy mcintosh mckinley roth 
experiences editor interactive parallel programming tool 
principles practice parallel programming april 
hp polychronopoulos 
symbolic dependence analysis high performance parallelizing compilers 
advances languages compilers parallel processing august 
jm jahanian ka lau mok 
graph theoretic approach timing analysis implementation 
ieee transactions computers august 
kk kreisel 
elements mathematical logic 
north holland pub 

kpk david kong 
perfect accuracy approximate subscript analysis test 
proc 
international conference supercomputing pages november 
lcd david levine david callahan jack dongarra 
comparative study automatic vectorizing compilers 
technical report mcs argonne national laboratory april 
li li 
array privatization parallel execution loops 
proc 
international conference supercomputing pages july 
mal dror maydan saman amarasinghe monica lam 
data dependence data flow analysis arrays 
th workshop languages compilers parallel computing yale university tech 
report yaleu dcs rr pages august 
mal dror maydan saman amarasinghe monica lam 
array data flow analysis array privatization 
acm conf 
principles programming languages january 
may dror maydan 
accurate analysis array 
phd thesis computer systems laboratory stanford september 
mck kathryn mckinley 
dependence analysis arrays subscripted index arrays 
technical report rice comp tr dept computer science rice university december 
opp oppen 
pn upper bound complexity presburger arithmetic 
journal computer system sciences july 
pug william pugh 
uniform techniques loop optimization 
international conference supercomputing pages cologne germany june 
pug william pugh 
omega test fast practical integer programming algorithm dependence analysis 
communications acm august 
pug william pugh 
definitions dependence distance 
letters programming languages systems september 
pw william pugh david wonnacott 
eliminating false data dependences omega test 
sigplan conference programming language design implementation pages san francisco california june 
pw william pugh david wonnacott 
static analysis upper lower bounds dependences parallelism 
acm transactions programming languages systems 
accepted publication 
rib hudson 
obtaining dependence vectors nested loop computations 
proc international conference parallel processing pages ii ii august 
ros carl 
incremental dependence analysis 
phd thesis dept computer science rice university march 
sho robert shostak 
sup inf method proving presburger formulas 
journal acm october 
shen li yew 
student array subscripts data dependences 
proc international conference parallel processing august 
voe valentin 
mathematical foundations parallel computing 
world scientific publishers 
world scientific series computer science vol 

voe vladimir 
theory practice parallelism detection sequential programs 
programming computer software may 
wol michael wolfe 
experiences data dependence abstractions 
proc 
international conference supercomputing pages june 
wol michael wolfe 
tiny loop restructuring research tool 
proc international conference parallel processing pages ii ii 
zc hans zima barbara chapman 
supercompilers parallel vector computers 
acm press 

