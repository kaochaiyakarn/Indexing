parallel simulation stochastic agent environment interaction model vincent st ephane fran cois charpillet loria umr bp es nancy cedex france phone fax loria fr rue edouard belin metz france stephane fr article address modeling simulation situated agents unreliability sensors ectors 
propose model simulation agent environment interaction integrates uncertainties errors agent sensors ectors 
model built stochastic modeling interaction 
illustrate application model case simulating set mobile autonomous robots evolving structured environment inside building 
built simulator designed executed parallel computers describe parallel implementation major results simulation point view parallel performances 
multi agent models agent ones gaining interest simulating complex systems social ones biological ones ecological ones simulating naturally distributed systems 
mas multi agent system consists set autonomous agents evolving virtual real environment world laws interact 
agent inter relations governed organization 
agent models subset multi agent models restricted local interactions members population 
article address modeling simulation situated agents means agents placed environment partially perceive locally act 
aim design simulation model agent environment interactions allowing build faithful simulators view simulators enable roughly obtain results real systems 
done dealing unreliability agent sensors ectors modeling agent environment interactions 
simulators allow build various applications multi agent planning learning real virtual environments 
dangerous expensive experiences simulator nding results dealing real system experimentations 
propose simulation model agent environment interactions integrates uncertainties errors due agent sensors ectors 
model relies stochastic modeling interactions agent environment 
deals system dynamics simultaneity agent actions 
illustrate application model case simulating set mobile autonomous robots evolving structured environment indoor environment 
order take advantage inherent parallelism multi agent models provided simulation need lot computer time resource conceived implemented parallel execution simulator 
parallelism decrease problem complexity divides execution time fraction number processors 
section bibliographic study multi agent models tools related simulation 
describe details stochastic agent environment interaction model simulator 
section presents application model parallel implementation designed simulator major results 
conclude 
related describe multi agent models tools related simulation key ideas underlined modeling agent environment relationships simulation execution principle 
uences reaction model proposed deals agent environment interaction modeling 
points importance separation agent environment roles making clear distinction uences produced agents behavior reaction environment 
allows deal complex interactions situated agents actions simultaneity 
idea joined derive propositions actions model 
takes account chain reaction rise form simultaneity agent propositions uences 
models emphasized importance environment multiagent system proposed soccer robots simulations separation agent action environment reaction 
multi agent simulator proposed soccer robots uses implicit coordination agents environment 
simulation testbeds proposed studying agent design dynamic environment separating agent environment roles 
state tileworld rst introduced nasa tileworld proposed mice proposed 
unfortunately multi agent models simulators unable express explicitly ector sensor errors uncertainties 
explains diculties keep results obtained simulation dealing real system experimentations 
uences reaction model model integrate agent sensors ectors unreliability clear distinction agent action environment reaction 
works deal partially uncertainties 
example multi agent simulator proposed soccer robots deals sensor uncertainties reasoning past observations 
proposed markovian agent interaction model called interrap predict agent performance problem resolution prediction model agent behaviors markovian model represent agent transitions world states 
mmdp model proposed multi agent planning learning coordination markov decision processes set world states system transition state represented markov chain depending joint agent actions 
rst model deals sensor uncertainties models deal ector errors uncertainties 
addition proposed performance prediction planning aim simulation purposes 
execution principle simulations related implementation action performances environment update state 
question arises simultaneous actions authorized 
works focused simulation time models parallel execution models 
concerning time models major types discrete time constant step simulation goes cycles discrete event simulation goes event 
example discrete event simulators 
example swarm simulation system proposed build hierarchical multi agent simulators discrete event time models 
hierarchical simulators agent composed set agents managed clock called swarm 
parallel execution models proposed multi agent simulations 
simulator proposed multi agent massively parallel simulates parallel evolution mobile agents environment agent process 
environment designed model explore decentralized systems thousands perform actions parallel 
swarm simulator parallel execution swarms entities 
parallel multi agent systems proposed simulation purposes dealing parallel multi agent production system ps 
ps represents agent broken parallel agents overloaded real time constraints combined load 
parallel performance results systems communicated 
assess adequacy parallel execution models inherent parallelism mas 
decided study implement ecient parallel mechanism simulation situated agents designing agent environment interaction model allowing deal agent sensors ectors unreliability 
interaction simulation model background model interaction agents environment inspired uences reaction model 
mentioned section model clear distinction uences produced agents behavior reaction environment 
help model unreliability agent ectors dealing environment reaction level 
markovian model taken partially observable markov decision processes pomdps model uncertainties errors agent ectors 
pomdp model originating operations research literature describe planning tasks decision maker complete information current state results undertaken actions accurate 
pomdp extension mdp markov decision process 
consists set states state may represent state environment set actions performed environment probabilistic transition function provided state action destination state gives transition occurrence probability nally reward function associating value state 
transition function models action uncertainties errors action guaranteed succeed 
pomdp states partially observable observations determine certainty environment state 
reason set observations probabilistic observation function introduced 
observation represents agent perceive environment 
observation function represents perception system agent 
function probabilistic order represent errors uncertainties may occur agent perceives environment 
environment model environment represents physical environment system model 
consists set states contains set situated objects object occupies state 
distinguish inert objects wall active ones perform actions environment door agent 
environment evolution ruled world laws 
specify consequences agent object uences environment 
distinguish law types laws maintain system coherence impose actions performance restriction conditions hold agent decisions robot go wall laws handle simultaneous uences describe undertake uences tried performed simultaneously 
aspect agents generate time con uences 
indicates solve con ict execute di erent agent uences 
agent model decided limit agent behavior speci order allow user design implement various behaviors 
simulator agent testbed test validation di erent agents multiagent behaviors direct communications 
simulator provides user perception action utilities implement desired agents behavior 
agent environment interaction modeling perception modeling situated agents perceive environment sensors provide numerical measures agents extract symbolic information call observations euclidean distances agent observation 
object designated observation function types agent sensors 
initial numerical measures uncertain 
reason di erent objects may designated observation express sensor uncertainties 
initial measures erroneous noise sensor distortion 
addition errors may occur observation recognition process distance computing 
confusion matrix observations provided express sensor errors 
words agent sensor type de ne set observations allowing identify di erent system objects 
observation determine probability distribution set observations confused 
example gure label assigned object object identify agent 
agent may confuse object environment tries recognize 
example perceive object type probability object type probability 
way construct confusion matrix di erent observations system simulate 
set observations confusion matrix learned real system example 
take account measured distance uncertainties divide agent perception distance classes attribute real measured distance class order approximate 
confusion matrix distance classes provided express occurrence errors sensors distance computing phase levels 
example gure real distance agent object attributed distance class confused class pd probability pd 
pd 
corresponding confusion matrix learned real system 
action modeling agent equipped ectors act environment 
call transition reaction environment chosen agent action 
transition gives environment state occupied agent 
transition depends agent type action current state neighborhood world laws 
transition may vary due ector errors imprecision function presence obstacles agent 
type agent action perform set transitions probability distribution expressing occurrence probabilities provided 
example gure possible transitions ft rans rans hg agent action called action 
rans transition occurrence probability 
actions transition sets corresponding distribution probabilities learned real system 
dealing con agent actions designer system simulate provide policy detection resolution con icts agent actions 
policy indicate agent action set possible transitions case con ict 
set transitions composed available absence con ict rise presence con ict 
probability distribution hole set transitions agent action updated presence absence con ict allowing denying occurrence transition see section example 
simulation principle observation distance transition probability distributions learned real system model 
distributions obtained instantiate agent environment interaction model gure 
space model previously mentioned agent environment interaction model inspired pomdp model 
agent occupies state transits state certain probability 
consequently restricted discrete environment model consisting set states 
time model agents evolution deterministic state agent may transit ones probability distribution 
predict agent trajectory absence obstacles 
reason determine advance possible con ict times agents 
accentuated presence signi cant number agents environment 
decided discrete synchronous time model simulator constant step 
simulation execution simulation consists making system evolve time cycles 
cycle agents perceive environment simultaneously 
agent chose action uence goal 
choice result decision function designer 
simultaneously active objects generate decisions 
environment analyses di erent decisions order detect con ones solves con icts transforms actions updating di erent properties state occupations probability distributions 
represents environment transition 
main loop steps rst step agents perceive environment generate uences active objects just generate uences 
second environment reacts decisions 
describe principle stochastic simulation conceived 
step perceptions execution agent perceives environment 
set sensors observation distance class confused correct ones chosen randomly choices probability distributions correct observation distance class 
gure perception part correct observation distance class randomly chosen 
observations distances obtained agent generates decisions goal 
active objects generate uences randomly introducing kind dynamics environment 
step needs computation time tm number agents active objects time needed choose observation distance generate agent uence generate active object action independent 
notice depends complexity agent decision model treated 
second step actions execution simulator collects actions proposals determines set agents active objects having con actions solves chosen policy depending problem 
step needs computation time cd cs cd time needed detect con ict cs solve average percentage detected con icts cd cs independent 
simulator execute actions follows agent action execution consists choosing randomly transition may result action probability distribution 
gure action part transition rans randomly chosen transitions ft rans 
rans hg agent action 
action active object simply executed world laws 
action execution simulator applies world laws update di erent state occupations new transition sets agent actions observations corresponding probability distributions 
done order maintain system coherence 
computation time required step eu function returning number states ected agent presence function agent perception distance eu variable time needed environment transitions observations updating independent second phase time consuming especially con icts agents con icts include agents 
requested time simulation cycle equal tot cd cs eu complete simulation total computing time simul nb cyc tot nb cyc number simulation cycles 
see simul set tests constant number cycles type application order suppose parameters constants number agents number active objects 
application order test evaluate stochastic interaction model decided design implementation mobile robots simulator 
choice development applications framework test evaluate di erent agent multi agent interaction mechanisms coordination cooperation 

application consists simulating motions set robots structured environment meet real buildings 
shows example system con guration want simulate 
gure robots placed corridors limited di erent walls 
see corridors inert objects dark grey active mobile objects slight grey 
environment description environment state represents rectangular surface called box 
robot occupies contiguous set boxes movements restricted box time 
enable reduce inconvenient discrete space time models detecting con icts agents simulation simple space models agent occupies box cell 
sensor ector models nomad robot training corpus 
robot environment interaction model symbolic observation door obstacle 
associated object robot system 
classes distance near near far 
confusion matrix observations distance classes simulation established 
robot set basic actions go box ahead turn degrees right turn degrees left 
action determined corresponding transitions set probability distribution training corpus carried real robot moving laboratory 
illustrate principle detail go box ahead action implementation 
absence obstacles robot transitions possible gure left part transitions obstacles action failure 
robot remains place robot goes box ahead successfully robot slips goes boxes ahead robot badly oriented goes box ahead slightly shifting left robot badly oriented goes box ahead slightly shifting right 
transition occurrence probability 
transitions set changes obstacle appearances robot 
obstacle inert object active robot con ict con icts agents reduced spatial ones application 
example gure right part transitions presence obstacles transition inhibited front obstacle 
transition appeared meaning robot goes box ahead front collision communicated robot observation 
enumerated possible transitions ft developed algorithm computing occurrence probabilities fp presence obstacles positions robot 
system discretization imposes de ne speed terms period movement 
means agent active object generate action cycles movement period equals follows di erence speed fast slow robots objects established delaying actions slowest robots objects 
implementation section presents argues parallel implementation conceived run simulator multiprocessor machine 
parallel computer nowadays parallel machines mimd multiple instructions multiple data architecture market processors mips 
mimd architectures exist 
previously great kinds mimd architectures shared memory ones distributed memory ones 
shared memory machines multiprocessors limited processors processor communications shared memory fast machines support parallel programming paradigms 
possible implement task communications memory sharing message passing simulated memory copies 
task communication shared memory machines usually runs faster implemented memory sharing 
distributed memory machines multi computers unlimited number processors machines thousands processors communicating inter processor network 
tasks situated di erent processors communicate network usual parallel programming paradigm message passing 
high speed inter processor networks exist task communications distributed memory machines remain slower shared memory machines 
years ago new kind architectures appeared distributed shared memory dsm 
supports great number processors hundreds processors global shared memory space shared memory architecture 
physically distributed memory plus support hardware hides distribution supplies virtual global address space 
parallel machines support eciently shared memory programming paradigms 
implemented simulator dsm parallel computers sgi origin machine cch centre charles hermite see cch loria fr processors bytes main memory 
ported simulator classical shared memory machine sgi ecole sup erieure see www fr processors bytes main memory 
rst large parallel computer powerful expensive second small cheaper 
machine interesting rst easily accessible small research teams second runs windows nt wanted test portability parallel agent simulator di erent operating systems 
parallel programming language kinds tools languages exist implement parallel programs 
sequential languages parallel extensions fortran mpi thread library allow implement parallel algorithms 
second compiler directives systems allow parallelize sequential code adding directive lines source code openmp 
tools apply eciently regular algorithms 
third exists tools automatic parallelization 
mainly limited loop nests independent computations 
rst kind general purpose tool explicit parallel paradigm leading large development times third implicit paradigm restrictive tool applicable number algorithms 
order limit development time overhead try choose adapted parallel paradigm problem 
experience shows multi agent systems run irregular computations di erent agents di erent computations time simulation step situated agents act environment regularly dispatched environment update operations depend local agent actions environment update computations regular agent con icts appear con ict solving agent actions depend nature con ict di er con ict 
general purpose tools explicit parallel paradigms implement parallel multi agent systems kinds tools apply irregular computations 
development time going increase lot explicit parallel programming obvious 
decided develop speci parallel programming tools adapted multi agent algorithms mimd modern architectures 
parcel family language attempt reach goal 
parcel library developed allows create cells kind ultra light processes communicate shared memory message passing cyclic operating mechanism adapted execution model simulations 
parcel thread systems easily portable architecture supporting shared memory paradigm 
available sgi origin irix system sgi windows nt system parallel machines 
parallel implementation parallelization strategies situated multi agent systems exist spatial parallelization agent parallelization ones 
introduce solutions order experimentation lead complex ecient adequate parallelization 
spatial parallelization successfully adopted strategy previous situated multi agent system parallelization 
environment updating time consuming part problem agent con ict solving simple 
partitioned environment grid processors processor manages square area environment agents situated area 
updating operations eciently parallelized small parallelism overhead appeared agent moving con ict solving frontier areas 
simple ecient parallelization 
situated agent system discussed spends execution time agent perception action routines ne con ict solving 
spatial parallelization lead load unbalanced parallelization number agents area computations 
lead high parallelism overhead con ict appears agents situated part frontier agents want reach place 
processors need lot unplanned communications synchronizations order agree nely solve con ict especially perception distances agents important 
agent parallelization considering simultaneity agent actions agent computation time consuming part program natural assimilate agent process sharing environment data structure 
traditional solution adopted parallel implementations multi agent simulators 
approach meets obstacles particularly simultaneity con actions solved parallel 
fact agents con actions treated sequentially inducing loss time process synchronizations 
granularity problem appears agent computations process 
processors support lot small processes waste time process scheduling 
con ict approach idea principle basically agent represents task con ict set agents merged greater task order treated processor 
consequently strategy avoids con ict solving overhead due numerous processes communications 
number tasks sizes vary execution possibly leading load processors tasks remain small real processes 
complete parallelization strategy dynamic load balancing mechanism pool algorithm gure 
previous tasks implemented simple data structures stored shared stock pool processed worker processes able treat task 
worker process processor order processors avoiding process scheduling time 
process catches task pool treats continues task remains 
worker process treats tasks lot computations 
parallelization granularity adapted mimd parallel computers 
concurrent accesses shared pool data structure remains possible loss time optimized implementations exist limit problem 
adapted optimized pool algorithm special case creating double pool mechanism 
double pool mechanism created pools managed worker processes way described gure 
cycle starts rst pool containing system agents active objects representing basic task 
worker picks task pool checks active provide action cycle speed action period 
active task agent worker carry perception decision action phase agent 
active object worker just generate action randomly 
worker inserts agent active object generated action second pool task 
inserting task worker veri es con ict task second pool 
con ict detected con tasks merged greater task order processed worker save system coherence 
rst pool tasks processed workers synchronized barrier passing second pool tasks processing 
worker picks task second pool solves con icts task components attributing di erent priorities 
executes actions components sequentially decreasing order priority carries transition agent active object 
updates di erent transition observation probability distributions ected transition 
second pool tasks treated workers synchronized barrier passing cycle 
experiments discussion case study applied developed simulator application family environment stands corridors loria laboratory 
robot represented agent 
inert objects walls active objects represent human beings objects moved doors opened closed periodically randomly 
associated object corresponding symbolic observation determined robot sonar sensors predetermined confusion matrix simulator 
implemented rst agent behavior consisting obstacles avoidance wandering corridors principle basic behavior nomad robot 
experiments constructed simulator aims experiments verify easiness genericity chosen family application simulator adequacy eciency parallel execution model situated agent simulations validity stochastic interaction model 
simulation parameters vary verify previously stated properties 
rst type specify simulator line command number cycles number workers system con guration le name 
second type included con guration le environment size number robots speeds objects 
parameters necessitating source code re compilation insertion new sensor type corresponding confusion matrix 
tests number processors varying sixteen parallel performance evaluation 
experiments environments di erent con gurations sizes varying boxes various number agents doors mobile objects 
environments corresponds rst oor laboratory virtual 
varied number boxes occupied robot 
modeled type sensors representing robot camera introduced corresponding confusion matrix simulator modi ed agent behavior integrate new observations decision level tests 
order study impact stochastic interaction model simulation results tests environments di erent con gurations 
con guration types tests rst type agent sensors ectors totally reliable just change confusion matrices probability distributions simulator second type reliable agent sensors unreliable ectors third reverse case agent sensors supposed unreliable ectors reliable fourth case general agent sensors ectors unreliable 
results mentioned tests noticed ease simulator especially development graphic java interface allowing specify con gure di erent systems di erent environment sizes various number agents properties speed inert active objects 
interface dedicated previously speci ed application family extended generic 
generates con guration le text format simulator 
ease simulator pointed successful execution di erent parallel machines sequential great modi cations need high skill user parallel domain execute simulator 
means parallelism introduce diculty simulator 
genericity simulator veri ed successful execution variation size set boxes occupied agent 
fact case probability distributions agent transitions observations updated correctly source code modi cation just concerning number occupied boxes agent 
veri ed genericity simulator mentioned previously modeling camera perception system 
modi cations source code written language concerning observations confusion matrix agent behavior simulations successful 
source code modi cation dicult necessitated time 
simulation results developed graphic interface java simulator order visualize analyze qualitatively execution results 
interface generates execution statistics allowing quantitative results 
help user debug adjust agent behaviors 
noticed agent sensors ectors unreliable agent trajectories linear gure just slightly nomad robot implemented exactly real robot behavior unfortunately order 
noticed unreliability agent sensors ectors negative impact simulation results especially sensors type tests 
fact noticed collisions agents due errors uncertainties sensors greater induced ectors unreliability 
measured number cycles needed agent fro motion corridor 
time needed greater time half agent ectors sensors unreliable agent sensors unreliable 
veri ed agent behavior designing obvious due sensors ectors unreliability deal order elaborate sophisticated agent behaviors classical simulators perceptions actions supposed reliable deterministic agent behavior designing simple 
parallel performances tests environments boxes containing robots mobile objects doors walls inert objects 
number workers equal number processors launched simulation cycles 
measured execution time includes computing time simulation cycles input output operation time mainly time save results disk 
execution time include initialization phase didn parallelized 
initialization phase represents total execution time cycles simulation 
gure summarizes obtained results machine 
parallel machine xed limited number processors mathematic complexity remains unchanged number agents number mobile objects simulation time decreases number processors simul eciency parallelization number processors 
table represents speed parallelization eciency sgi origin 
speed equal ratio division execution time processor processors 
eciency ideal ideal speed obtain processors equal eciency fraction ideal speed obtain certain parallelization 
notice execution time decreases speed increases slowly eciency falls quickly 
obtained rst parallel implementation speed greater processors 
tests sgi machine low cost machine equivalent results obtained processors table 
enables optimistic versions optimizations remain possible think obtain better parallel performances implement complex behaviors agents run parallel 
fact need computer time resource better speed con icts engage agents simulation times 
simulator contribution simulator propose local modeling agent environment interaction 
fact build simulator model type agent unreliability type sensors determining di erent observations perceive distance classes confusion matrices 
model unreliability type ectors determining set transitions may result action corresponding probability distribution set 
probability distributions learned real system training agent generic place environment 
construct global environment deduce probability distributions interaction agent place environment applying speci world laws learned probabilities see section example 
build real virtual environment order di erent kinds experiments dangerous expensive time consuming 
di erent agent multi agent purposes applications planning learning 
experiments dangerous erroneous policies software bugs damage system 
expensive high cost material 
time consuming need di erent control functions time consuming interest simulation results 
proposed stochastic model interaction situated agents deals agent sensor ector uncertainties errors 
model inspired partially observable markov decision processes 
model build simulator set mobile robots structured environment 
addition parallel implementation simulator pool mechanism ultra light processes library 
currently simulator operational parallel machines satisfactory simulation results parallel performances 
operational sequential machine restriction 
signaled ease aim developed graphic interfaces specifying system con gurations viewing validating simulation executions 
studying design implementation multi agent learning algorithm simulator 
think obtain quite results remain valid modulo tiny modi cations passing real system experimentations 
hope build agent multi agent applications simulator corresponding existing systems reality compare results obtain real system testing order assess validity stochastic interaction model 
propose develop di erent robot applications robots di erent tasks achieve integrate errors uncertainties decision level 
help study impact model coordination cooperation methods situated environments 
propose improvement interaction model agent agent interaction modeling communication order provide complete multi agent model 
gottlieb 
highly parallel computing 
benjamin cummings publishing 
charpillet mari 
place learning recognition hidden markov models 
proceedings ieee international conference intelligent robots systems pages 
boutilier 
planning learning coordination multiagent decision processes 
tark theoretical aspects rationality knowledge 
bryson lowe stein 
hypothesis testing complex agents 
workshop performance metrics intelligent systems nist 
canal 
environnement en cha ne 
le cas des syst emes multi agents situ es 
actes des journ ees intelligence arti syst emes multi agents france 
french 
cassandra kaelbling littman 
acting optimally partially observable stochastic domains 
aaai proceedings twelfth national conference arti cial intelligence seattle wa 
gross editors 
individual models approaches ecology populations communities ecosystems 
chapman hall 
durfee montgomery 
mice flexible testbed intelligent coordination experiments 
proceedings ninth workshop distributed ai pages rosario washington sept 
ferber 
uller 
uences reaction model situated multiagent systems 
icmas proceedings second international conference multi agent systems japan 

perrier demazeau 
multi agent architecture integrating heterogeneous models dynamical processes representation time 
mabs proceedings international workshop multiagent systems agent simulation volume lnai lecture notes arti cial intelligence paris france 
gerhard weiss editor 
multiagent systems modern approach distributed arti cial intelligence 
mit press cambridge ma 

modelling social systems complex social simulation meta model 
journal arti cial societies social simulation 
www soc surrey ac uk html 
ishida 
parallel distributed multi agent production systems 
icmas proceedings international conference multi agent systems california 
epstein axtell 
growing arti cial societies 
mit press cambridge ma 
kitano asada kuniyoshi noda osawa 
robocup robot world cup initiative 
johnson hayes roth editors proceedings st international conference autonomous agents pages new york feb 
acm press 

uller 
methodology design evaluate collective behaviours robots 
proceedings st international workshop collective robotics cwr volume lnai berlin 
lester 
art parallel programming 
prentice hall 

mod simulation de environnement dans les syst emes application aux robots 
th ese de doctorat de universit paris vi institut blaise pascal 
minar burkhart langton 
swarm simulation system toolkit building multi agent simulations 

santa fe institute working 
www santafe edu projects swarm overview ps 
angelo ferrari 
implicit coordination multi agent system behavior approach 
robocup papers icra 
uller 
design intelligent agents layered approach volume lnai lecture notes arti cial intelligence 
springer 
philips bresina 
nasa tileworld manual 
technical report tr fia nasa ames research center code fia mo ett field ca 
technical report 
pollack ringuette 
introducing tileworld experimentally evaluating agent 
proceedings ninth national conference arti cial intelligence pages boston ma 
distributed shared memory concepts systems 
ieee parallel distributed technology 
resnick 
termites trac jams explorations massively parallel 
mit press 
reynolds 
individual models 

sony computer entertainment america 
research development group 
www red com cwr ibm html 
smallwood sondik 
optimal control partially observable markov processes nite horizon 
operations research 
stone veloso 
cmunited simulator team 
robocup robot soccer world cup lnai lecture notes arti cial intelligence 
charpillet 
parcel parallel programming language concurrent cells multiple clocks 
proceedings international conference software engineering applied networking parallel distributed computing france 
werner dyer 
massively parallel simulation environment evolving distributed forms intelligent behavior 
massively parallel arti cial intelligence 
mit press 
nb 
processors execution time speed eciency table parallelization performances sgi origin number processors eciency sgi origin eciency sgi table comparison sgi origin sgi results 
interaction model environment model distance 
type agent object agent decision distance observation perception phase charpillet trans trans interaction model environment model action trans type agent agent decision trans transition action phase trans charpillet trans transition distance observation interaction model environment model object agent decision decision action perception agent action trans trans trans 
distance trans charpillet robot wall inert object active object charpillet transitions presence obstacles transitions obstacles charpillet worker task processor pool charpillet active agents mobile objects cycle determination 
actions generation 
conflicts detection tasks merging 
worker task processor conflicts resolution priorities actions execution transitions observations updating pool pool charpillet charpillet execution time number processors sgi origin charpillet agent environment interaction model perception phase 
agent environment interaction model action phase 
simulation principle agent environment interaction 
example simulated systems robots situated corridors determined placed walls 
inert objects dark grey active objects slight grey provided 
go box ahead action transitions 
pool mechanism 
parallel simulation pools 
simulation view showing agents trajectories cycles trajectory width equal agent 
execution time decreases number processors 
