notions computation determine monads gordon plotkin john power division informatics university edinburgh king buildings edinburgh eh jz scotland 
give semantics notions computation called computational ects means operations equations 
show generate monads primary interest model computational ects striking omission continuations monad demonstrating di erent character computationally true 
focus semantics global local state showing operations equations primitive yields mathematical relationship reflects computational relationship 
eugenio moggi introduced idea giving unified category theoretic semantics called notions computation call computational ects :10.1.1.41.840:10.1.1.26.2787
modelled computational ect kleisli category appropriate strong monad base category finite products 
perspective computational ects determine monads identified monads 
regard computational ect realised operators monad generated equational theory operators 
examples computational ects nondeterminism probabilistic nondeterminism side ects exceptions interactive input output continuations 
moggi unified approach modelling proved useful especially functional programming precise mathematical basis compare contrast various ects 
instance continuations computationally di erent character computational ects partly inherently non local phenomena allowing program go outside usual scope partly basis building compilers opposed instance nondeterminism 
example computationally global state step local state 
seek mathematical description features various monads reflects comparisons contrasts corresponding computational phenomena 
immediate observation monad continuations rank see definition monads supported epsrc gr british council 
mentioned computational ects 
theorem ect ranks monads derivable algebraic operations equations precise sense 
consideration operations equations provide basis describe features computational ects regard positive algebraic operations equations precise sense theorem yielding continuations monad reflects di ering computational nature 
operations essential giving programming language lines moggi computational calculus instance fpc fragments ml 
precise definition operation mentioned theorem consistent computationally natural operations associated monads instance considers nondeterministic binary choice operator modelling nondeterminism considers probabilistic binary choice operator probabilistic nondeterminism considers lookup update operations modelling global state adds block operation model local state operations raise exceptions read write operations associated interactive input output 
analysis operations regarded operations associated monad appears unified formulation operational semantics 
examples notably associated nondeterminism known exceptions interactive input output easy global local state required considerable thought 
technical detail devoted precise statement situation state 
point eugenio moggi suggesting monad global state may derived computationally natural operations equations peter hearn showing monad local state explaining significance 
relationship global local state delicate 
characterise global state terms ordinary infinitary operations equations new features emerge characterising local state 
arities allowed just sets second block operation contrast lookup update inherently linear symmetric monoidal closed structure cartesian closed structure 
fundamentally ways generate monad algebraic operations equations equivalent 
associated kleisli construction monad associated category algebras 
amounts equations give normal form word generated operations amounts giving left adjoint forgetful functor category algebras generated operations equations 
relationship approaches relationship generic ects algebraic operations give generic ect tm equivalent giving ary operations 
formulate results terms algebras 
having progress describing computational ects terms operations equations natural consider combinations plan address issue shortly 
organised follows 
section give general explanation notions signature operations equations give fairly routine examples 
section give careful explanation monad global state generated operations lookup update subject computationally natural equations 
section extend definitions section see addition block subject reasonable additional equations generates monad local state 
central point gives precise mathematics reflects computational relationship global local state 
operations equations finitary signature usual universal algebraic sense speak algebra category finite products consists object map ar ar arity 
speak derived operations usual equations derived operations 
henceforth assume fixed leading examples set cpo presheaf categories set functor categories form cpo small category worlds cf 
finitary signature equations derived operations notion algebra notion evident definition homomorphism algebras generates category alg forgetful functor alg small coproducts left adjoint inducing monad uf category alg isomorphic category alg algebras monad considerably simplified version assumes closedness version su cient 
illuminating view terms models lawvere theory category set cf 
special holds equally infinitary operations providing correspondingly infinitary products examples 
routine verify induced monad natural strength associated induced universal property products 
straightforward examples follows 
example 
monad exceptions set induced nullary operations equations 
operations model raising exceptions model handle operation 
distinction consistent fact raising exceptions precise sense algebraic handling exceptions 
consider algebraic operations induce various monads non algebraic operations handle di erent character 
example 
monad tx oy interactive input output induced operations read write equations 
uses infinitary operations 
programming language contains finitary operations may generate infinite data instance fed oracle producing infinite stream output may model phenomena infinitary operations 
holds classes resumptions 
consider nondeterminism 
order explain properly need sophisticated notions signature operations equations observe crude version fits setting 
example 
category cpo 
category algebras convex power domain partiality category semi lattices structures associative commutative idempotent binary operation 
similar facts true upper lower power domains requires additional equational axiom setting 
order outline complete modelling nondeterminism terms operations equations developed digress briefly give idea applies 
simpler examples algebraic structure cpo instance structure required give element cpo 
follows category cpo cpo element maps preserving element form alg monad rank cpo 
application general theory shows category alg canonical enrichment fact unique coherent cpo 
additional algebraic structure cpo generate corresponding additional algebraic structure cpo arity cpo lifts arity lc cpo induces lifting algebraic structure 
algebra consists algebra element 
category alg monad cpo generated algebraic structure element isomorphic category alg monad cpo generated 
monad coproduct category monads cpo monad generated monad morphism general situation accounting partiality combined algebraic structure 
situation nondeterminism slightly stronger 
monad sl semilattices cpo monad partiality distributive law sl provides monad structure sl isomorphic monad sl isomorphic coproduct sl category monads cpo 
phenomenon reflects special features category cpo monad general operations algebraic structure cpo form satisfy equation distributive law exists necessarily uniquely 
example 
probabilistic power domain treated algebraically number equivalent ways described probabilistic choice operators considered 
studied category cpo dcpo fit framework 
natural way separate axioms partiality done nondeterminism 
global state section show side ects monad model global state generated infinitary operations lookup update subject computationally natural equations 
finite set regarded set locations countable set regarded set values 
instance may taken set natural numbers 
defines set states language set functions locations values 
countable set 
assume category countable products coproducts 
consider monad means product copies object means coproduct copies monad allows model global state map kleisli category equivalent giving map allowing change state 
general formulation monad terms tensors cotensors see kelly book 
general formulation may useful treated merely set cpo cpo element 
seek express category alg category algebras computationally natural category order give result define category gs description category algebras evident evident forgetful functor gs left adjoint follows alg isomorphic alg 
operations consist lookup operation form update operation form lv indexed family elements lookup operation takes location loc finds value current state computation computes element determined value 
element location loc value update operation updates state insisting loc take value allows computation run 
take care give result category axiomatic structure just set expect general result required modelling combination side ects computational ects 
definition 
category countable products finite set countable set define category gs follows object gs consists object lookup map update map lv subject commutativity classes diagrams 
interaction diagrams follows lv ll diagonal terminal maps lower unlabelled isomorphism matches outer ll ll unlabelled isomorphisms match outer similarly cf lv lv lv lv lv lv unlabelled isomorphism matches outside similarly lv lv lv suppressing isomorphisms 
commutation diagrams follows signifies swap maps denotes set ordered pairs distinct elements unlabelled maps canonical map lv lv lv lv lv lv lv lv lv lv signifies swap map unlabelled maps canonical map lv lv lv lv lv lv unlabelled maps canonical map 
rest structure gs category evident instance map map subject commutativity commutativity constitutes formal definition category algebras 
set equally write equations equations terms generated lookup update functions applied generic elements appropriate sets 
generally category countable products routinely give equational language equations infinitary terms language correspond commutative diagrams category 
commutative diagrams definition gs expressed equationally axioms involving infinitary expressions respectively 
loc loc 
loc loc vv loc vv 
loc loc loc 
loc loc loc 
loc loc vv loc loc vv loc loc 
loc loc loc loc loc loc 
loc loc loc loc loc loc proposition 
object gs diagram commutes 
proof 
applications axiom application second axiom 
proposition 
countable coproducts object object maps lv determined composition function loc updates replacing value loc determined composition function loc lookups loc determine value projection satisfy commutative diagrams required give object gs 
definitions proposition correspond equations loc loc loc loc 
theorem 
forgetful functor gs exhibits gs monadic monad proof 
show left adjoint functor algebra structure proposition unit adjunction canonical map algebra natural number un denote canonical map induced applications denote canonical map induced applications arbitrary map recalling define composite unlabelled maps evident structural maps 
need prove commutativity showing composed show algebra map final show algebra map map equals unit axiom observe commutation axioms generalise allow replaced um arbitrary natural numbers unit axiom follows induction size generalised versions commutation axioms interaction axiom 
see proof commutativity considering case precisely element proof easy third fourth interaction axioms proposition 
proof arbitrary essentially requires generalised commutation axioms 
commutativity straightforward requires second interaction diagram generalised versions commutation diagram 
final commutativity follows routine calculation just naturality 
left adjoint follows routinely beck monadicity theorem monadic 
local state consider local state see models seen terms operations equations extending global state principled fashion 
order need natural statement models local state 
follow studied 
model local state terms category axiomatically structure done global state restrict attention particular presheaf category 
results may generalise functor categories axiomatically structure 
category finite sets injections 
equivalent category natural numbers monomorphisms 
note finite coproducts particular sum natural numbers act binary coproduct 
initial object duality op terminal object 
yoneda embedding embeds op presheaf category set cartesian closed locally finitely presentable category allowing general theory operations equations 
finite products set pointwise closed structure functors set set set natural transformations observe terminal object set constant functor exactly yoneda embedding preserves limits 
additional symmetric monoidal closed structure set convenient 
convolution monoidal structure 
notation closed structure closed structure corresponding convolution monoidal product set particular yoneda lemma 
functor canonical strength respect cartesian closed structure set 
shall combination symmetric monoidal closed structures 
takes little thought fit combination exactly formalism established part general theory 
category set suitable category model local state 
category set category finite sets functions suitable wishes add ignore new state alter exponent category regarded category worlds 
modelling local global state longer model state set index world defined 
set values state modelled functor op set sn note object set 
substantial di culty studied global state set object 
observe functor composite inclusion op set op set op set 
monad local state tx sm xm sn denotes coend complicated form colimit 
construction simplified version levy thesis 
behaviour injective maps follows decompose sum note sp sn covariance map sm xm sn sn sn sm xm evaluates sn maps th component coend th component second isomorphism functoriality monad routinely strengths respect symmetric monoidal closed structures 
denote inclusion set notation represents locations overload notation letting set denote constant functor representing values 
mere set set indexed world need refined notions signature operations equations order allow arities global state 
note definition previous section extends may seen functor set sends finite set set ordered pairs distinct elements 
leave precise general definitions signature operations equations implicit proceed analogy global state defining category ls set form alg extended notions 
relationship modelling global local state clear 
fit extended notions arity particular combination linearity suggests delicate analysis probably mere suggests 
observe set constant functor shall notation definition 
define category ls set follows object ls set consists object set lookup map update map lv block map subject commutativity interaction diagrams commutativity diagrams 
interaction diagrams consist interaction diagrams global state lv horizontal unlabelled map canonical distributivity law product fact unit tensor product terminal object horizontal unlabelled map determined diagram 
commutation diagrams global state lv lv lv lv lv express equations syntactically 
loc loc loc loc 
loc loc loc 
loc loc loc loc loc loc loc loc 
loc loc loc loc loc loc 
loc loc loc loc loc loc order prove free algebra monad local state need put algebra structure tx arbitrary set 
simplest express theory terms generic elements 
give maps lookup tv update block tl understanding tx tx defined composition lookup kleisli category kl similarly update block 
defined follows sn sn defined sn sn defined block sm sn defined block 
proposition 
object set object tx maps defined satisfy commutative diagrams required give object ls set 
theorem 
forgetful functor ls set set exhibits ls set monadic set monad 
proof 
proof essentially theorem 
key construction mapf algebra extends algebra map composite tf tx ta th component structural map am am map mv am am applications um map am th component composite applications varies map applications structural map 
new interaction axioms prove respects 
anderson power representable approach finite nondeterminism theoret 
comput 
sci vol 
pp 


benton hughes moggi monads ects summer school 

heckmann probabilistic domains proc 
caap lncs vol 
pp 
berlin springer verlag 

hennessy plotkin full abstraction simple parallel programming language proc 
mfcs ed 
lncs vol 
pp 
berlin springer verlag 

jones probabilistic non determinism ph thesis university edinburgh report ecs lfcs 

jones plotkin probabilistic powerdomain evaluations proc 
lics pp 
washington ieee press 

kelly basic concepts enriched category theory cambridge cambridge university press 

kelly power adjunctions coequalizers presentations finitary enriched monads pure appl 
algebra vol 
pp 


levy call push value subsuming paradigm proc 
tlca ed 

girard lncs vol 
pp 
berlin springer verlag 

moggi computational lambda calculus monads proc 
lics pp 
washington ieee press 

moggi view programming languages university edinburgh report ecs lfcs 

moggi notions computation monads inf 
comp vol 
pp 


hearn tennent algol languages progress theoretical computer science boston birkhauser 

plotkin powerdomain construction siam comput 
vol 
pp 


plotkin domains www dcs ed ac uk home gdp 

plotkin power adequacy algebraic ects proc 
fossacs eds 
honsell miculan lncs vol 
pp 
berlin springerverlag 

plotkin power semantics algebraic operations extended proc 
mfps xvii eds 
brookes mislove entcs vol 
amsterdam elsevier 

power enriched lawvere theories theory applications categories pp 

