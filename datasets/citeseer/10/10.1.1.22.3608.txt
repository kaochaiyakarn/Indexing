proc 
acm conf 
oo programming systems languages applications oopsla acm copyright 
regression test selection java software mary jean harrold harrold cc gatech edu alessandro cc gatech edu james jones cc gatech edu cc gatech edu regression testing applied modified software provide confidence changed parts behave intended unchanged parts adversely affected modifications 
reduce cost regression testing test cases selected test suite test original version software process called regression test selection 
safe selection algorithm selects test case test suite may reveal fault modified software 
safe regression test selection techniques help reduce time required perform regression testing select portion test suite testing guarantee faults revealed subset revealed running entire test suite 
presents safe regression test selection technique suitable representation handles features java language 
safe regression test selection techniques technique handles incomplete programs 
technique safely applied common case java software uses external libraries components analysis external code required technique select test cases software 
describes retest regression test selection system implements technique set empirical studies demonstrate regression test selection algorithm effective reducing size test suite 
keywords regression testing testing test selection software evolution software maintenance authors affiliated college computing georgia institute technology atlanta ga affiliated systems ft lauderdale fl 
li cc gatech edu ashish ashish com sinha sinha cc gatech edu liang cc gatech edu alexander spoon lex cc gatech edu 
regression testing process validating modified software provide confidence changed parts software behave intended unchanged parts software adversely affected modifications 
regression testing expensive researchers proposed techniques reduce cost 
approach reduces cost regression testing reusing test suite test original version software 
rerunning test cases test suite may require excessive time 
improvement reuse existing test suite apply selection technique select appropriate subset test suite run 
subset small significant savings time achieved 
date number regression test selection techniques developed testing procedural languages testing object oriented languages :10.1.1.52.6170:10.1.1.53.353
testing professionals reluctant omit test suite test case expose fault modified software 
safe regression test selection technique certain assumptions selects test case original test suite expose faults modified program 
date safe selection techniques developed :10.1.1.52.6170:10.1.1.53.353
techniques representation original modified versions software select subset test suite regression testing 
empirical evaluation techniques indicates algorithms effective reducing size test suite maintaining safety 
studies show factors structure code location changes granularity test suite frequency testing affect reduction test suite size achieved techniques 
regression test selection techniques particularly effective environments changed software tested frequently 
example consider environment nightly builds software performed test suite run newly built version software 
case regression test selection select subset test suite testing new version software 
main benefit approach cases small subset test suite selected reduces time required perform testing 
example consider development environment includes regression test selection component 
case developers modify software regression test selector select subset test suite testing 
approach developers frequently test software changes help locate errors early development 
techniques effective cost test cases high 
example regression testing avionics software 
case reduction test case may save thousands dollars testing resources 
object oriented languages available time safe regression test selection algorithms handle features object oriented software developed 
approaches limited scope imprecise test selection 
rothermel harrold algorithm developed subset applied software written java 
algorithm handle features commonly object oriented languages particular handle programs contain exception handling constructs 
furthermore algorithm applied complete programs classes attached drivers 
classes interact classes called classes fully analyzed algorithm 
algorithm applied applications call external components libraries code external components analyzed applications 
treatment polymorphism algorithm imprecise selection test cases 
algorithm select test cases need rerun modified software 
white abdullah approach handle certain object oriented features exception handling 
approach assumes information classes undergone specification code changes available 
information relationships changed classes classes approach identifies classes may affected changes classes need retested 
white abdullah approach selects test cases class level select test cases necessary 
presents safe regression test selection technique java efficiently handles features java language polymorphism dynamic binding exception handling 
technique adaptation rothermel harrold graph traversal algorithm uses control flow representation original modified versions software select test cases rerun 
new graph representation efficiently represents java language features graph traversal algorithm safely selects test cases original test suite may reveal faults modified software 
previous approaches technique applied common commercial software written java 
novel feature technique representation models certain conditions effects unanalyzed parts software libraries 
technique safe regression test selection applications requiring complete analysis libraries 
java programs frequent li awt technique ability select test cases applications requiring analysis library may provide significant savings regression testing 
technique provides new way handle polymorphism result selection smaller safe subset test suite 
describes regression test selection system retest set empirical studies performed system 
retest includes profiler determine coverage information program module compares program versions identifies parts code affected modification module combines information modules select regression test cases 
retest performed empirical studies set java subjects 
studies show subjects considered algorithm provide significant reduction size test suite suggest technique scales larger software systems 
studies indicate granularity code entities selection edges methods result considerable differences sizes test suites selected technique 
section discuss regression test selection general give details rothermel harrold regression test selection algorithm illustrate example 
section discuss algorithm including details assumptions safety 
section discuss regression test selection system retest section results empirical studies evaluate technique 
section related compare 
section summarize results discuss 

background software testing activity executing program sample inputs selected input space try reveal failures program 
underlying idea hypothesis test case designed inability reveal failures increases confidence tested code 
perform testing necessary select set input data determine expected behavior data respect model check results execution expected behavior 
test case consists input data provided corresponding expected output 
test suite set test cases test run execution respect test suite test case test run consists steps initialization environment execution input specified checking output execution respect expected output 
assess adequacy test suite measure level coverage achieved test run 
functional coverage measured coverage usually computed structural entities entities code 
common examples entities considered structural coverage statements branches conditions 
coverage measured percentage 
example statement coverage defined percentage statements covered test run respect total number executable statements 
coverage information obtained ways 
method produces procedure avg entry procedure avg 
int count 
int count 
fread 
fread 
eof 

return error 
count 
count endif 
fread 
eof 

print bad input 
return error 
count endif 
fread endwhile endwhile 
avg count 
return avg 
avg count 
return avg exit example program avg control flow graph left modified version avg control flow graph right 
instrumented version instrumented version executed test case records entities program statements branches executed alternative method obtaining coverage information modifies runtime environment executed environment gathers information entities covered 
modified version test suite test regression testing information testing available testing attempting reuse testing problems arise 
test cases test regression test selection problem 
second new test cases developed test parts new functionality test suite augmentation problem 
problems important concentrate regression test selection problem 
regression test selection techniques attempt reduce cost regression testing selecting subset test program test suite program program execute record coverage coverage matrix identify entities dangerous dangerous entities select tests general system regression test selection 
number safe regression test selection techniques vary precision efficiency :10.1.1.52.6170:10.1.1.53.353
view techniques family entry regression test selection techniques information program source code select illustrates general regression test selection system 
system program executed test suite addition results execution pass fail information system records coverage information entities executed test case types entities recorded depend specific regression test selection technique 
test cases run coverage information compiled coverage matrix associates entities executes 
addition computing coverage information techniques compare identify set dangerous entities 
define execution input entity program entity input causing cover may behave differently due differences technique ensures test case cover dangerous entity behave way expose new faults safe select test cases coverage matrix indicates coverage dangerous entity 
rothermel harrold example describe regression test selection technique uses control flow graph cfg represent procedure uses edges cfgs potential dangerous entities 
dangerous entities selected traversing parallel cfgs cfgs targets labeled cfg edges differ edge added entity dangerous term affected change may appropriate term dangerous entity consistent terminology 
control flow graph nodes represent program statements edges represent flow control statements 
exit set dangerous entities 
illustrate consider shows example program avg control flow graph left modified version avg control flow graph right 
avg avg statement inserted statement deleted 
algorithm begins traversal entry nodes avg avg traverses paths programs traversing labeled edges difference target nodes edges detected 
algorithm considers node avg node avg finds targets edges label differ adds edge set dangerous entities 
algorithm stops traversal path test case traverses dangerous entities reached edge dominated edge necessarily traverse edge selected 
algorithm considers labeled edges node avg node avg algorithm considers node avg node avg discovers targets edges differ adds edge set dangerous entities stops traversal path 
subsequent traversals find additional dangerous edges 
example nodes labeled declaration nodes 
algorithm declaration nodes model variable declarations explicitly nodes contain information declarations 
doing algorithm identify changes involve declarations variables appear cfg 
example declaration variable count avg changed int long algorithm find difference declaration nodes add edge entry set dangerous entities 
dangerous edges identified component regression test selection system uses dangerous entities coverage matrix select test cases add continuing example suppose test suite shown table avg 
table test suite program avg 
test case input expected output empty file error program executes edge covered test case test suite recorded 
example test cases cover edge entry test cases cover edge test cases cover edge 
table shows edge coverage matrix test suite program avg 
table edge coverage matrix test suite table program avg 
edge test case entry exit exit edge ei dominates edge ej path program ej goes ei 
edge coverage matrix set dangerous entities computed regression test selection algorithm final step test selection performed simply indexing matrix dangerous entities returning corresponding test cases 
example dangerous edges 
test cases need rerun 

regression test selection java regression test selection technique java control flow 
technique described section technique performs main steps 
constructs graph represent control flow type information set classes analysis 
traverses graph identify dangerous edges 
coverage matrix obtained instrumentation selects test suite original program test cases exercise dangerous edges identified previous step 
efficiency technique avoids analyzing instrumenting code components libraries program modified 
consider program tested divided parts part analyze consider external analyze 
convenience rest refer set classes analyzed instrumented regression test selection system internal classes analyzed instrumented system external classes 
analogously refer method internal class internal method method external class external method 
rest section details regression test selection technique java describe assumptions technique safe illustrate representation model java programs traversal algorithm discuss alternative approaches java program instrumentation allow gathering coverage information required regression test selection technique 
assumptions safe inefficient conservative technique rely assumptions code test execution environment test cases test suite original program 
bible rothermel call set assumptions regression bias 
reflection 
technique assumes reflection applied internal class component internal class 
reflection allows programmatic access information fields methods constructors loaded classes reflected fields methods constructors operate underlying counterparts objects security restriction 
consider methods inspect information specific class methods java lang class asa form reflection 
statement uses information obtained reflection internal class members behavior statement may affected kinds changes occurring class members 
cases identification points code affected change may require sophisticated expensive analysis reflection constructs code 
statement external class uses reflection inspect information internal class external class analyzed identify code affected change internal class 
independent external classes 
technique assumes external classes compiled internal classes external classes load internal class explicitly invoking class loader class name parameter 
words assume external code knowledge internal classes 
assumption guarantees external classes interact internal classes set predefined virtual methods 
assumption reduces types interactions internal external classes consider 
practice assumption holds cases external classes library classes developed independent prior development applications 
deterministic test runs 
technique assumes test case covers set statements produces output time run unmodified program 
assumption guarantees coverage information contained coverage matrix obtained running original program test cases depend specific test run execution test case traverse affected parts code yields results original modified programs 
assumption representation internal classes correct correctly models language constructs addressed effects information coverage matrix safely exclude test cases traverse modifications 
possible threat assumption change execution environment 
execution environment changes test run original program test run modified program outcome test case may change test execution traverse parts code affected modification 
technique applicable tester ensure elements operating system java virtual machine java compiler external classes databases network resources possibly interacting program fixed 
requirement overly restrictive common requirement testing general guarantees case failure problem reproduced 
possible threat assumption presence nondeterministic behavior 
assumption holds sequential programs contain thread execution multithreaded programs interaction threads affect coverage outputs ftp server multiple threads just clones created handle multiple clients 
assumption hold general programs contain multiple threads execution 
technique applicable programs special execution environments guarantee deterministic order instructions different threads executed 
threat previous requirement testing general unduly restrictive 
representation java software adequately handle java language constructs representation simple cfgs section inadequate 
cfg suitable representing control flow single procedure accommodate interprocedural control flow control flow procedure boundaries features java language inheritance polymorphism dynamic binding exception handling 
define representation general represent software written object oriented languages tailored java 
convenience refer representation java graph 
java graph jig accommodates java language features graph traversal algorithm find dangerous entities comparing original modified programs 
jig extends cfg handle kinds java features variable object type information internal external methods interprocedural interactions calls internal external methods internal methods interprocedural interactions calls internal methods external methods exception handling 
discuss jig represents characteristics constructs java 
show representation suitable modeling complete partial programs classes clusters components general accounts possible effects missing parts system 
variable object types 
graph traversal algorithm described section uses representation contains declaration nodes represent declarations program 
change global declaration edge entry node corresponding declaration node marked dangerous causing test cases test suite selected 
achieve better precision representation associate type variable primitive type name variable augmenting name type information 
example variable type double identified double representation 
method representing scalar variables essentially pushes change variable type location variable referenced gives precise test selection declaration node 
graph traversal algorithm described models classes class hierarchies explicitly 
representation explicitly representing class hierarchies encode hierarchy information point instantiation point code new invoked globally qualified class name 
class name class contains entire inheritance chain root inheritance tree class java lang object actual type 
interfaces implemented class efficiency globally qualified class name exclude external classes interfaces 
externally defined public static method foo public method class extends bar class extends foo public void void bar return foo cfg edge call edge path edge return exit foo exit exit representing internal method calls foo uses globally qualified names 
class implements interface names interfaces inserted globally qualified name alphabetical order 
example class package foo extends class package implements interface package bar globally qualified name java lang object bar foo foo globally qualified class names technique identify changes class hierarchies 
method representing class hierarchies pushes changes class hierarchies locations affected classes instantiated 
technique precise accounting changes 
internal external methods 
jig contains cfg internal method set classes analysis 
cfg differs described section ways 
call site expanded call return node 
second path edge call return node represents path called method 
graph left illustrates representation 
node labeled represents call node connected return node path edge 
internal class external class bar foo return exit exit externally defined public static method foo public method foo class extends bar public void class extends foo exit public void return void bar foo 
cfg edge return exit call edge path edge exit exit representing internal method calls foo uses modified example internal method call representation 
exit cfg edge path edge example internal method representation left external method representation right 
jig contains collapsed cfg external method called internal method 
usually source code external classes available available want analyze 
assume external classes change need represent analyze code 
collapsed cfg consists method entry node method exit node path edge method entry node method exit node 
path edge summarizes paths method 
graph right illustrates representation 
interprocedural interactions internal method calls 
jig represents call site pair call return nodes connected path edge 
call node connected entry node called method call edge 
call virtual call node outgoing call edge 
illustrate consider shows classes external method bar corresponding jig 
class extends class overriding method class extends class overrides method example method bar invokes static method foo dynamic binding call site foo static method 
call node node outgoing call edge connected entry node method foo 
call virtual call node connected entry node method bound call 
call edge call node entry node method labeled type receiver instance causes bound call 
example call method bar virtual call 
depending dynamic type static type call bound different methods type call bound ifp type call bound consequently call node outgoing call edges labeled connected entry node third edge labeled connected entry node exit externally defined public method foo public method bar class extends public void foo class extends public void bar default cfg edge call edge entry foo 
ecn foo foo exit entry bar exit bar representing external method calls default represent virtual method calls correctly compute virtual call site set methods call may bound 
information computed various type inferencing algorithms points analysis algorithms 
precision computation determines efficiency representation 
technique class hierarchy analysis resolve virtual calls 
representation algorithm identify traversing constructed original modified programs internal method calls may affected program change 
shows modification class adds new method statement 
change affects method invoked statement type comparing outgoing edges call node associated statement jig outgoing edges call node associated statement jig algorithm identifies target edge labeled changed 
algorithm identifies edge dangerous 
interprocedural interactions external method calls 
potential subtle interactions internal classes external classes may lead different behavior program consequence apparently harmless changes internal classes 
case incomplete programs consider possible effects unanalyzed parts system 
particular unforeseen interactions internal classes external classes may caused calls external methods internal methods 
handle situation explicitly represent summarized form potential calls internal methods external methods 
provides example representation 
external code represented node labeled ecn external code node 
internal class accessible external classes classes example jig contains outgoing edge ecn node 
edges labeled name class represents terminates class entry node 
class entry node internal class represents entry point internal code object type externally defined public method foo public method bar class extends public void foo public void bar class extends default cfg edge example external method call representation 
entry bar foo foo call edge exit exit representing external method calls modified 
ecn entry foo bar bar default connected entry method invoked external methods objects type internal methods invoked external code methods override external method 
create class entry node class overrides external methods class inherits method overriding external method 
example class overrides bar inherits foo turn overrides foo create class entry node connect foo bar invoked objects type external code polymorphism dynamic binding 
addition class entry node create outgoing default call edge labeled see connect default node 
default node class represents methods invoked object type externally defined 
representation lets correctly handle modifications involve addition removal internal methods override external methods representation algorithm identify traversing constructed original modified programs external method calls may affected program change 
shows modification classes deletes bar adds new bar change may affect external call methods receiver type comparing outgoing edges node labeled entry graph outgoing edges node labeled entry graph algorithm identifies target edge labeled bar changed 
algorithm identifies edge dangerous 
exception handling 
jig uses approach similar described model exception handling constructs java code 
jig explicitly represents try block catch blocks stated section assume external code knowledge internal methods call internal methods polymorphism dynamic binding 
class extends exception static void bar string class extends exception class extends class extends public static void foo try bar catch throws exception int integer valueof throw new throw new cfg edge class extends class extends public static void foo try bar catch 


bar bar foo try exception caught call edge path edge exception catch throwable 

foo try exception valueof return 
caught exception bar throwable return return 



exit cfg edge 
exit call edge 
exit exit foo bar representations path edge exit modified version foo representation block try statement 
shows example jig method contains constructs 
try statement create try node cfg method contains statement node labeled try example 
represent try block try statement cfg 
cfg edge try node entry cfg try block 
create catch node cfg represent catch block try statement 
catch node labeled type exception declared corresponding catch block 
cfg edge labeled caught connects catch node entry catch cfg 
path edge labeled exception connects try node catch node catch block try statement 
path edge represents control paths entry node try block exception propagated try statement 
example path edge graph represents control paths traverse statement reach statement throw statement integer valueof causes integer valueof propagate exception 
path edge labeled exception connects catch node catch block bi catch node catch block bi follows bi 
path edge represents control paths entry node try block exception raised propagated try statement handled catch blocks precede bi try statement 
create node cfg represent block try statement 
cfg edge connects example exception handling representation 
node entry cfg 
cfg represents try block catch block cfg edge connects exit node cfg node 
exit cfg block connected statement follows try statement 
exceptions caught catch block try statement create copy node cfg block 
path edge labeled exception connects catch node catch block node 
try statement enclosed try statement method cfg edge connects exit duplicated cfg exceptional exit node 
exceptional exit node models effect uncaught exception causing exit method 
block try statement enclosed try statement method path edge labeled exception connects catch node catch block try statement exceptional exit node 
representation algorithm identify changes exception handling code traversing constructed original modified programs 
shows modified version foo delete statements change type exception handled statement 
comparing outgoing edges try node graph outgoing edges try node graph algorithm discovers target edge labeled exception changed 
algorithm identifies edge dangerous 
procedure compare input node jig original program node jig modified program global output set dangerous edges compare 
mark visited 
foreach edge leaving 
match 
null continue 




elseif marked visited 
compare 
endif 
endfor 
foreach edge leaving matched edge leaving 

endfor compare compare procedure 
traversal algorithm algorithm traverses identifies dangerous edges similar algorithm traverses cfg procedure 
algorithm starts traversal invoking compare entry node method main ecn node entry nodes methods called static 
compare accepts inputs jig constructed original program jig constructed modified program traverses adds dangerous edges finds compare marks visited line avoid comparing subsequent iteration 
compare examines outgoing edge calls match find outgoing edge matches label line 
match looks outgoing edge label match finds edge returns edge 
match looks edge label 
match finds edge returns edge 
returns null 
compare finds edge matches compares target target lines 
equivalent compare adds set line 
marked visited compare invokes traverse graph line 
way determine equivalence nodes examine lexicographic equivalence text associated nodes 
nodes represent program statements examine lexicographic equivalence program statements associated nodes nodes exit nodes represent program statements examine lexicographic equivalence labels associated nodes 
compare finishes processing outgoing edges java compiler creates class containing initializers static fields special method called static contains initializations executed class initialized 
searches outgoing edges matched outgoing edge line 
edges appear paths deleted compare adds edges set line 
instrumentation test selection jig program instrument modify execution environment record edges covered test case task gathering coverage discussed section 
coverage information lets selection technique select test cases cover dangerous edges identified traversal algorithm 
edges path edges exception handling represent actual control flow statement instrument program execution environment find test cases cover edges 
recording coverage information edge expensive may want record coverage information coarser grained entities methods classes modules 
dangerous edges mapped set entities coverage information recorded coverage matrix 
general need adaptor takes set dangerous edges traversal algorithm maps set dangerous entities coverage information recorded coverage matrix 
adaptor designed instrumenter needs know entities coverage information recorded 
get better trade precision efficiency instrumenter needs know entities interest adaptor 
discuss possible approach building adaptor instrumenter case instrumentation edge method level 
edge level instrumentation techniques record internal methods cfg edges covered execution program determine virtual call edges covered execution require instrumenter record receiver type virtual method call internal methods 
jig edges representing calls external methods see path edges representing control paths exceptions raised see need mapped actual cfg edges nodes instrumenter record test cases cover edges 
edge representing method call external method receiver instance internal class target entry method adaptor maps corresponding entry node 
target default node created nodes labeled default adaptor maps new instance statements internal classes create instances record coverage information exception handling require instrumenter insert catch block try statement catch re throw exceptions caught previous catch blocks 
path edge represents control paths exception raised 
target catch node catch block mapped entry entry catch blocks program test suite program program execute record coverage jvm control flow graph identify dangerous entities events control flow graph appear try statement 
mapped entry catch block added instrumenter 
method level instrumentation techniques record internal methods covered execution program 
instrumentation technique adaptor maps dangerous edge jig method call edge target entry node internal method adaptor maps target entry node external method adaptor maps method contains source edge represents call external methods target default node nodes labeled default created internal class adaptor maps constructors including default constructor instrumentation coarser level granularity efficient instrumentation finer level granularity 
particular method level instrumentation efficient edge level instrumentation 
coverage matrix computed method level instrumentation smaller computed edge level instrumentation 
coverage matrix computed method level instrumentation test selection algorithm may select test cases coverage matrix computed edge level instrumentation 
practice viable solution hybrid instrumentation approach example records coverage information internal methods records coverage information statements exception handling rarely covered method contains statements executed 
hybrid approaches may yield trade precision efficiency 

regression test selection sys tem investigate empirically regression test selection technique implemented regression test selection system named retest specialization general regression test selection system shown 
retest consists main components component named profiler gathers dynamic information static analysis component named profiler dangerous edges coverage matrix adaptor regression test selection system retest 
dangerous method calls entries instantiation sites test selection component named 
retest consists component adaptor adapts output produced type coverage information gathered profiler 
presents system architecture retest 
profiler component retest uses java virtual machine profiler interface jvmpi gather coverage information run test case due restrictions jvmpi current profiler record information execution individual statements class instantiation method entries method calls 
profiler record information exception throws catches 
profiler uses hybrid instrumentation approach records class instantiation method calls method entries 
virtual method call profiler records receiver type determine method invoked 
module implements analysis algorithm described section java architecture bytecode analysis construct necessary information 
output list dangerous edges cfg edges call edges 
adaptor module treats cfg edges call edges differently 
adaptor maps dangerous cfg edge method entry target class instantiation method call 
case adaptor maps node representing class instantiation call node respectively 
adaptor maps call edge mi represents call internal method mi external method entry 
adaptor maps call edge entry mi represents call external method instance dynamically bound internal method mi entry 
adaptor maps call edge entry default represent call external method instance dynamically bound external method instantiation sites current implementation retest precise technique described 
imprecision occurs profiler record information individual statement 
change table software subjects empirical studies 
subject description methods versions test cases method coverage siena internet event notification system jedit text editor web applications testing tool regexp regular expression library occurs statements traversed small fraction test cases cover method retest select test cases necessary 
example exception handler catches infrequently raised exceptions changed test case going method contains handler selected exception raised majority test cases 
plan investigate techniques enhance profiler java virtual machine debug interface jvmpi 
allows detailed examination programs run reduce imprecision described 
investigate possibility instrumenting bytecode tool bit bytecode instrumenting tool soot java optimization framework byte code engineering library gather cfg edge coverage information 
approach may able improve precision test selection 

empirical evaluation evaluate approach regression test selection retest perform empirical studies 
section describes software subjects empirical studies performed 
software subjects study utilized software subjects siena jedit regexp 
software subject consists original version modified versions 
vn set test cases test table shows subjects subject lists number methods original program number versions size test suite percentage methods covered test suite 
subject studies java implementation siena server 
siena scalable internet event notification architecture internet scale event notification middleware distributed event applications deployed wide area networks 
obtained successive versions system authors test suite test software 
added test cases test suite increase coverage method level resulting test suite contains test cases provide method coverage system 
second subject studies jedit java text editor 
jedit versatile customizable text editor provides advanced text editing features syntax highlighting regular expression search see www cs colorado edu bit 
see www sable mcgill ca soot 
see sourceforge net 
copyright apache software foundation 
replace multiple macro recording 
obtained successive development releases software version pre version pre changes releases created versions software 
original version software contains methods 
developed test suite exercise various features text editor test suite consists test cases provides method coverage 
third subject studies apache 
java desktop application designed load test functional behavior measure performance originally designed testing web applications expanded test applications 
obtained successive releases system code repository modifications releases created versions software 
created test cases considering combinations features available user interface system test cases provide method coverage system 
final subject studies regexp gnu library parsing regular expressions 
jedit obtained successive releases built separate versions differences releases created versions software 
drivers test cases provided library 
test suite contains test cases exercise methods library 
studies evaluate technique performed studies section presents results studies 
siena compared version previous versions jedit regexp compared version original version 
study test suite reduction 
goal study determine reduction number test cases achieved regression test selection technique 
subject program version retest shown select test cases regression testing 
shows results software subjects 
subject shows percentage test cases selected version subject 
data illustrate reduction number selected test cases varies widely subjects 
example siena technique selected test cases version test cases remaining versions 
similarly jedit technique selected fewer test cases versions test cases versions 
extremely low number test cases selected versions version pct 
test cases selected siena jedit regexp siena version jedit depends fact versions changes minor involving methods methods encountered test cases 
test reduction illustrated similar results studies evaluated regression techniques procedural software 
data reveal trends may peculiar object oriented paradigm experimentation bigger diverse set subjects help determine trends exist 
success code regression test selection techniques depends magnitude changes modified software turn depends frequency regression testing location changes characteristics software 
example modification startup code software causes test case selected 
example characteristics certain classes software language parsers test cases exercise significant percentage code software software modifications cause majority test cases selected 
cases code regression test selection techniques may fail provide benefit terms reduced regression test suites 
study test selection granularity 
goal second study determine additional reduction size selected test suite achieved selecting dangerous edges dangerous methods 
results study guide development profilers 
perform study select dangerous edges data flow analysis considers method determines dangerous edge reached paths entry point dangerous edge reached paths test cases enter selected edge level version retest 
case development profiler recording information edge level requires significant effort results study help decide effort worthwhile regression test selection 
software subjects regression test selection results software subjects 
reduction test suite achieved considering changes edge level changes method level 
exists path dangerous edge reached assuming test suite covers edges test case edge level version retest select 
case additional reduction test suite achieved considering regression test selection edge level 
total number dangerous methods subjects methods dangerous edges reached paths entry respective methods 
cases performing test selection finer granularity edge level reduce size test suite selected 
previous empirical studies examined procedural software edge level selection differ method level selection 
pct 
test cases selected method level edge level siena modified version percentage test cases selected siena method level edge level test selections 
wanted determine accuracy estimates edge level test selection 
siena manually determined test cases selected edge level version 
graph shows results study 
versions siena test suite selected method level version edge level version selected number test cases 
versions differed graph shows significant difference size reduction 
cases running test cases particularly expensive additional overhead selection required edge level version may justified 

related researchers considered problem regression test selection procedural software 
number regression test selection algorithms fit general system shown related 
ball presents edge optimal regression test selection algorithm certain conditions provides precision rothermel harrold algorithm 
algorithm identifies dangerous edges 
ball presents additional algorithms control flow precise edge algorithms greater computation cost 
frankl regression test selection algorithm text differencing 
algorithm maintains association basic blocks test cases compares source files identify modified program statements 
think algorithm selecting dangerous blocks code program 
algorithm performs comparison unix diff utility statements control flow may select test cases control flow algorithms lesser computation cost 
chen rosenblum vo regression test selection algorithm detects modified code entities dangerous code entities defined functions non executable components storage locations 
technique selects test cases associated changed entities 
technique entities coarser grained statement control flow techniques may select test cases techniques lesser computation cost 
researchers developed regression test selection techniques object oriented software 
discussed techniques rothermel harrold technique white abdullah firewall technique 
compared techniques approach approach precise applied java programs handles exception handling constructs applied incomplete programs provides new method handling polymorphism 
techniques developed reduce effort required test subclasses 
techniques information associated parent class design test suites derived classes 
techniques address problem regression testing modified classes 
kung hsia technique selecting regression test cases class testing 
technique concept firewalls defined originally leung white procedural software extended object oriented software 
technique kung hsia 
called ord technique constructs object relation diagram ord describes static relationships classes 
represented relationships include inheritance aggregation composite objects association existence data dependence control dependence message passing relationships classes 
ord technique instruments code report classes exercised test cases 
firewall class defined set classes directly transitively dependent virtue inheritance aggregation association described ord 
class modified ord technique selects test cases determined instrumentation exercise classes firewall ord technique technique similar select test cases associated set code components association test cases code components determined dynamically instrumentation 
primary difference techniques granularity consider components 
ord technique selects test cases associated classes firewall performs analysis classes methods attach test cases entities finer granularity 
test cases necessarily execute changed code code accesses changed data objects 
similarly class may determined ord technique dependent message passing class modified test cases associated selected 
test cases necessarily exercised code involving interactions cases ord technique selects test cases omitted retesting ill effects test cases technique select 
technique precise ord technique 

safe selection algorithm handles java language features applied certain conditions partial programs precise existing approaches object oriented software 
regression test selection system java called retest implements technique 
retest performed empirical studies evaluate effectiveness technique 
empirical studies indicate technique effective reducing size test suite reduction varies subjects versions 
results consistent results reported programs subject programs show trends peculiar java software 
additional studies required identify trends 
studies indicate regression test selection finer granularity may provide reductions test suite size 
additional evaluation required determine granularity test selection provides best trade offs precision efficiency 
include investigating viable alternatives instrumenting different levels gathering additional subjects performing empirical studies evaluate effectiveness technique 
perform studies determine efficiency technique practice 

acknowledgments supported part georgia tech boeing aerospace national science foundation awards ccr ccr eia state georgia mission 
partially supported esprit project ep italian dell universit della ricerca scientifica tecnologica murst framework project 
antonio carzaniga david rosenblum alexander wolf provided siena system versions 
anonymous reviewers provided comments suggestions helped improve presentation 

aristotle research group georgia institute technology 
java architecture bytecode analysis 

bacon sweeney 
fast static analysis virtual function calls 
proceedings th annual conference object oriented programming systems languages applications pages oct 
ball 
limit control flow analysis regression test selection 
acm int symp 
softw 
testing analysis pages mar 
bible rothermel 
unifying framework supporting analysis development safe regression test selection techniques 
technical report oregon state university dec 
bible rothermel rosenblum 
comparative study coarse fine grained safe regression test selection 
acm transactions software engineering methodology apr 
carzaniga rosenblum wolf 
design evaluation wide area event notification service 
acm transactions computer systems aug 

testing object oriented software systems 
proceedings computer science conference pages 
chen rosenblum vo 
testtube system selective regression testing 
proceedings th international conference software engineering pages may 
cooper lee zorn 
package rapidly building java execution profilers 
technical report university colorado 
dean grove chambers 
optimizations object oriented programs static class analysis 
european conference object oriented programming pages 

object oriented unit testing 
hewlett packard journal apr 
graves harrold 
kim porter rothermel 
empirical study regression test selection techniques 
proceedings international conference software engineering pages apr 
harrold mcgregor fitzpatrick 
incremental testing object oriented class inheritance structures 
proceedings th international conference software engineering pages may 
hsia li kung 
hsu li chen 
technique selective revalidation oo software 
software maintenance research practice 

kim porter rothermel 
empirical study regression test application frequency 
proceedings nd international conference software engineering pages jun 
kung gao hsia chen 
firewall regression testing software maintenance object oriented systems 
journal object oriented programming 
kung gao hsia chen im 
song 
developing object oriented software testing maintenance environment 
communications acm oct 
kung gao hsia wen ch en 
regression testing object oriented programs 
journal systems software jan 
kung gao hsia wen 
change impact identification object oriented software maintenance 
proceedings international conference software maintenance pages sep 
leung white 
study integration testing software regression integration level 
proceedings conference software maintenance pages nov 
leung white 
insights testing regression testing global variables 
journal software maintenance research practice dec 
leung white 
cost model compare regression test strategies 
proceedings conference software maintenance pages oct 
liang harrold 
extending evaluating flow insensitive context insensitive points analyses java 
proceedings acm workshop program analyses software tools engineering jun 
mcdowell helmbold 
debugging concurrent programs 
acm computing surveys dec 
sun microsystems 
java virtual machine debug interface 
java sun com products jdk docs guide 
sun microsystems 
java virtual machine profiler interface 
java sun com products jdk docs guide jvmpi jvmpi html 
sun microsystems 
java platform api specification 
java sun com se docs api 
sun microsystems 
java foundation class window toolkit 
java sun com products jdk awt 
rothermel harrold 
safe efficient re test selection technique 
acm transactions software engineering methodology apr 
rothermel harrold 
empirical studies safe regression test selection technique 
ieee transactions software engineering jun 
rothermel harrold 
regression test selection software 
journal software testing verification reliability jun 
gregg rothermel mary jean harrold 
analyzing regression test selection techniques 
ieee transactions software engineering aug 
sinha harrold 
analysis testing programs exception handling constructs 
ieee transactions software engineering pages sep 
tip palsberg 
scalable propagation call graph construction algorithms 
proceedings conference object oriented programming systems languages applications pages oct 
frankl 
pythia regression test selection tool text differencing 
international conference reliability quality safety software intensive systems may 
white abdullah 
firewall approach regression testing object oriented software 
proceedings th annual software quality week may 
white leung 
firewall concept control flow data flow regression integration testing 
proceedings conference software maintenance pages nov 
