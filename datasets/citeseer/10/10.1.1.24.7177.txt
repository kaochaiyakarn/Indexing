researchers continue create new languages hope developing semantic web lack consensus standard 
authors describe prot tool ontology development knowledge acquisition adapted editing models different semantic web languages 
creating semantic web contents prot noy michael sintek stefan decker monica crub zy ray fergerson mark musen stanford university process tiny fraction information available web turn machines help processing analyzing contents 
current technology machines understand interpret meaning infor mation natural language form web information represented today 
need semantic web express information precise machine interpretable form software agents processing set data share understanding terms describing data mean 
consequently seen explosion number semantic web languages developed 
researchers developers haven reached consensus language suitable features language syntax appropriate see languages emerge 
need develop tools experiment new languages compare expressiveness features change language specifications select suitable language specific task 
article describe prot graphical tool ontology editing knowledge acquisition adapt enable conceptual modeling new evolving semantic web languages 
prot lets think domain models conceptual level having know syntax language ultimately web 
concentrate concepts relationships domain facts need express 
example developing ontology wines food appropriate wine food combinations focus bordeaux lamb markup tags correct syntax 
naturally designing new tool specifically new language better adapting existing tool 
offer reasons adapting existing tool stage single language emerged winner 
experiment emerging languages committing enormous amounts resources creating tools custom tailored languages decide languages suitable 
second prot provides considerable functionality new tool need replicate modeling user interface levels 
third different customizations tool edit ontologies different languages gives translation models languages free translating model language easy selecting save item menu 
semantic web languages ai researchers ontologies long time express formally shared understanding information 
ontology explicit specification concepts domain relations provides formal vocabulary information exchange 
specific instances concepts defined ontologies instance data paired ontologies constitute basis semantic web 
experiments prototype semantic web members different communities different backgrounds goals mind created multitude languages representing ontologies instance data web see table 
typically semantic web language describing ontologies instance data contains hierarchical description ieee ieee intelligent systems important concepts domain classes 
individuals domain instances classes properties slots class describe various features attributes concept 
logical statements describe relations concepts 
example consider ontology describing wines food appropriate wine food combinations 
classes describing domain wine different types food 
properties wine class include wine flavor body sugar level produced 
notions semantic web languages existing today including shoe topic maps xol rdf rdfs daml oil 
shoe simple html ontology extensions language developed university maryland introduces primitives define ontology instance data web pages 
classes called categories shoe 
categories constitute simple hierarchy slots binary relations 
shoe allows relations instances instances data number arguments just binary relations 
horn clauses express intensional definitions shoe 
table 
selection semantic web languages 
language description url xol xml ontology exchange language www ai sri com xol topic maps iso standard describing knowledge structures www org shoe simple html ontology extensions www cs umd edu projects plus shoe rdf resource description framework www org rdf rdfs rdf schema daml oil darpa agent markup language ontology inference layer www daml org hytime community developed topic maps iso standard iso iec 
topic maps aim annotate documents conceptual information 
topics correspond classes ontology languages linked documents 
topics instances topic types topics related associations 
associations correspond closely slots ontology languages 
associations belong association types topics 
topic maps specialized primitive representing instances 
instance topic type act topic type 
bioinformatics community designed xol exchange ontologies field bioinformatics 
evolved general language interchange ontology instance data 
interchange language xol includes primitives knowledge representation systems object databases relational databases 
provides means define classes class hierarchy slots facets instances 
rdf resource description framework provides graph data model consisting nodes edges 
nodes correspond objects resources edges properties objects 
labels nodes edges uniform resource identifiers uris 
rdf define primitives creating ontologies 
basis ontology definition languages rdfs daml oil 
rdf schema defines primitives creating ontologies 
shows example graph representing ontology wines rdfs 
rdfs classes concepts constitute hierarchy multiple inheritance 
example class wine subclass class drink 
classes typically instances example specific red wine instance red wine class resource instance class example port instance red wine dessert wine classes 
resources properties associated example wine flavor 
properties describe attributes resource relation resource resource 
rdfs defines property domain resources subjects property property range resources objects rdf type drink rdfs domain maker rdf type rdf property rdfs subclassof rdf type rdfs subclassof wine rdfs subclassof rdfs subclassof rdfs domain rdfs subclassof grape white wine dessert wine rdf type red wine rdf type rdf type rose wine rdf type rdf type rdf type rdfs range rdfs range wine grape rdfs class 
rdf schema graph representing wine ontology 
march april computer org intelligent rdf type class property 
example property maker may class wine domain class range 
daml oil darpa agent markup language ontology inference layer takes different approach defining classes instances 
addition defining classes instances declaratively daml oil description logics languages create intensional class definitions boolean expressions specify necessary necessary sufficient conditions class membership 
languages rely inference engines classifiers compute class hierarchy determine class membership instances properties classes instances 
example define class bordeaux wines class wines produced bordeaux region daml oil specify global properties classes slots 
example say location slot transitive located bordeaux region bordeaux region located france france 
describe daml oil detail 
see discussion semantic web languages representing ontologies instance data features common 
time significant differences stemming different design goals languages 
adapting prot editor languages build similarities custom tailor tool account individual differences 
prot years experts domains medicine manufacturing prot domain modeling 
show adapt prot new world semantic web reusing user interface internal representation framework changes enable conceptual modeling new semantic web languages 
prot highly customizable adaptation editor new language faster creating new editor scratch 
features customization possible tabs representing different views knowledge base configuration information slot definition facets 
snapshot ontology representing wines 
tree left represents class hierarchy 
form right shows definition wine class 
extensible knowledge model 
redefine declaratively representational primitives system uses 
customizable output file format 
implement prot components translate prot internal representation text representation formal language 
customizable user interface 
replace prot user interface components displaying acquiring data new components fit new language better 
extensible architecture enables integration applications 
connect prot directly external semantic modules specific reasoning engines operating models new language 
prot knowledge model prot representational primitives elements knowledge model similar semantic web languages described earlier 
prot classes instances computer org intelligent ieee intelligent systems classes slots representing attributes classes instances facets expressing additional information slots 
shows example definition class part ontology describing wines food desirable wine food combinations 
tree left represents class hierarchy 
class pauillac wines instance subclass class doc wines 
words pauillac wine doc wine 
class doc wines turn subclass red bordeaux wines 
form right represents definition selected class wine 
name class documentation list possible constraints definitions slots instances class 
instances class wine slots describing flavor body sugar level produced wine 
form displays instance class pauillac representing ch rothschild pauillac fields display slot values instance 
know ch rothschild pauillac full body strong flavor properties 
class definition forms right hand side instance definition forms knowledge acquisition forms prot 
fields knowledge acquisition forms correspond slot values define classes instances filling slot values fields 
prot generates knowledge acquisition forms automatically types slots restrictions values 
prot user interface consists tabs editing different elements knowledge base custom tailoring layout forms forms figures 
classes tab defines classes slots instances tab acquires specific instances 
forms tab allows change layout contents knowledge acquisition forms 
customize prot features described fit specific domain task changing declaratively standard class slot definitions changing content layout knowledge acquisition forms developing plug ins prot application programming interface 
look customize prot see flexibility create prot editors new semantic web languages 
changing notion classes slots definition wine class standard class definition prot class name documentation list slots 
need add attributes class definition change class looks change default definition class system 
instance want add list best type wine hierarchy 
list property class pauillac wines property specific instances class ch rothschild pauillac 
list best class inherited subclasses best producing red bordeaux necessarily best doc pauillac may overlap 
list part class definition way documentation part class definition 
prot metaclass architecture lets just 
metaclasses templates classes way classes templates instances 
define metaclasses effectively change definition class way define new class 
default prot template standard metaclass defines fields see 
extend declaratively standard definition class new fields type defining new metaclass simply part knowledge base 
shows definition red bordeaux class includes additional field list best bordeaux 
similarly define new user defined templates new slots 
slot definitions system fields addition ones prot simply define new templates describe new fields 
custom tailoring slot widgets value acquisition look behavior fields knowledge acquisition forms figures depend types values fields take 
field string value class name simple text window 
field contains list complex values list box buttons add remove values create new values 
fields called slot widgets 
display values appropriately help ensure values correct slot definitions ontology 
example maker wine instance class 
slot widget maker slot lets set value instance 
developers extend prot implementing slot widgets tailored acquire verify particular kinds values 
suppose wanted precise sugar level wine mark scale simply choosing values dry sweet dry 

instance class pauillac representing ch rothschild pauillac 
wine full body strong flavor moderate level properties 
march april computer org intelligent store value number sugar slot 
slot widget select value slider enter number see 
customize knowledge acquisition forms choose layout fields form slot widgets different fields 
slot widgets choose usually affect contents knowledge base look feel tool suitable particular domain language 
slot widgets help ensure internal consistency knowledge base checking example integer value enter allowed maximum minimum slot 
back plug generate right output develop domain model prot need think specific file format prot save 
think domain conceptual level create classes slots facets instances graphical user interface 
prot saves resulting domain models file format 
developers change file format way plug slot widgets 
back plug ins developers substitute prot text file format file format 
example suppose wanted xml publish wine ontology domain models create prot 
need create xml back substitutes files prot format files xml 
back creates mapping memory representation prot knowledge base file output required format 
back enables import files format prot 
new file format status prot native file format users choose format files 
field new template 
class definition uses nonstandard template 
added best slot standard class definition template 
editing semantic web languages prot armed arsenal tools prot quickly easily look involved creating prot editor new semantic web language 
prot rdfs editor developed laboratory example ideas new language 
start creating prot editor new language determining differences knowledge models languages knowledge model prot knowledge model underlying language choice 
decide available tools metaclasses custom user interface components custom back reconcile differences hide user 
practice overlap knowledge models underlying semantic web languages available today large 
models different terminology computer org intelligent ieee intelligent systems notion example slots prot properties rdfs 
structure concepts underlying semantics restrictions similar 
compare knowledge models identify categories concepts see 
concepts exactly languages possibly different names 
usually classes inheritance instances slots properties classes instances slot restrictions fall category 

concepts expressed differently languages 
example prot associates slots classes attaching slot class 
rdfs defines essentially relationship defining domain property 

concepts language choice equivalent prot 
example rdfs allows instance type prot instance unique direct type 

concepts prot supports language choice 
example prot allows slot modeling user interface back prot concepts identical semantically prot concepts directly map directly model required language allowed class values range property rdfs limited single class 
naturally express features language fall category directly prot 
deal differences categories defining appropriate metaclasses resolving remaining changes back 
hide differences user custom tailored slot widgets 
slider widget numeric values 
changing slot widget 
slider simple field acquire numeric values sugar level 
new language concepts encoded native prot concepts native prot concepts custom labels slot widgets hide differences map model prot model required language concepts equivalent native prot metaclasses encode information custom slot widgets facilitate knowledge entry map model prot model required language 
comparing knowledge models prot new semantic web language 
second item list concepts direct equivalent prot mapped native prot concepts deserves special discussion 
consider domains properties rdfs rdfs domain 
domain specifies class property 
example domain flavor property wine class 
prot slots similar properties rdfs 
attaching slot class prot specifies slot class 
example flavor slot concepts prot equivalent language knowledge acquisition forms disable features define means storing information language format march april computer org intelligent attached wine class 
ways encode rdfs domain information prot rdfs editor 
add domain slot template slots 
field domain appear form slot fill 
second simply native prot notion slot attachment translate attachments slots classes domains properties back 
second solution lets prot user interface directly hides features specific language store information 
find extremely beneficial adopt paradigm native prot features possible resorting additional definitions metaclasses absolutely necessary 
approach maximally facilitates exchange domain models different languages edit edit prot 
new languages emerge experiment knowledge models underlying languages undoubtedly overlap 
encoding possible native prot structures leaving part translation prot model language back maximize amount information preserve simply loading knowledge base language supported prot saving language 
parts table 
creating prot rdfs editor 
category concepts rdfs concepts rdfs concepts rdfs concepts prot nearly identical encoded prot concepts native prot concepts equivalent native prot equivalent rdfs modeling rdfs class standard class explicit rdfs domain rdfs class default cardinality inverse slot rdfs subclassof rdfs range properties rdfs metaclass rdf property default value facets subclass domain encoded slot attachment default add properties multiple allowed classes rdf type instance rdfs range encoded allowed class rdfs rdfs seealso slot rdf property instance typed slots core slots add standard slot rdfs constraintproperty rdfs subpropertyof rdfs constraintresource core classes multiple types rdfs resource thing rdf comment instance documentation user custom labels class plug uri slot widget disable default value interface slots forms validating uri type slots 
inverse slot widgets example properties slot forms 
comment back map prot concepts translate slot attachments import create new class write extra facet information directly rdfs concepts rdfs domain subclass multiple prot specific properties properties allowed types 
properties 
slot classes rdfs range multiple allowed classes create new class rdfs range value 
import reverse 
models part overlap maximizing amount information gets ported models different languages free 
having generated groups concepts comparing knowledge models see reconcile differences 
modeling changing default definitions classes slots modeling level 
user interface developing specialized user interface components 
back implementing new back translate domain model prot domain model language choice 
look levels works development prot rdfs editor example see table summary entire process 
modeling level start determining concepts language choice identical prot concepts represented native prot concepts 
native prot means model group concepts elements directly expressed language 
define new templates class slot definitions necessary 
consider example attributes rdfs seealso rdfs associated class property rdfs 
rdfs seealso property specifies resource containing information subject resource rdfs property indicates resource defining subject resource 
values properties resources uris pointing resources 
add fields prot class slot form knowledge base 
add fields define new metaclass serve template rdfs classes 
metaclass fact equivalent rdfs class rdfs class 
shows definition rdfs class new template slots appear class form uses template 
user interface level creating prot editor new language change behavior look feel forms reflect terminology features language 
change labels forms simplest type customization 
example easily replace prot template slots label class definition rdfs properties label give form rdfs look 
elements easily configure manipulating forms include field visible computer org intelligent ieee intelligent systems additional slots defining specific properties 
template definition classes rdfs 
class rdfs class inherits slots standard class template slots top list properties ones defined rdfs 
user buttons fields position size fields slot widgets field 
perform configuration entirely prot forms tab programming code 
develop slot widget plug ins allow editing verification elements unique language 
example uri widget prot rdf editor validate user entered correct uri take user corresponding web page 
disabling fields slots form prevents user exercising prot features particular semantic web language support 
example disable field entering default slot values prot rdfs editor rdfs support default values 
back level differences prot language resolve modeling user interface levels need reconcile module saves internal prot repre sentation required output file format back plug 
back plug 
saves prot knowledge base file format conforms syntax language choice 
maps elements prot knowledge base direct equivalent language appropriate set elements language 
imports domain models language developed editing prot 
usually developers define language new syntax quickly implement parser allows developers read write files language syntax 
new languages extensions xml rdf existing xml rdf parsers take care syntactic part adapting new language 
rdfs back deal number issues resolve modeling level user interface 
resolved issues unnecessarily complicated editor user 
example instances prot single class rdfs direct instances classes example direct types 
rdfs model general problem saving prot knowledge base rdfs 
import rdfs instance data prot deal instances direct types 
suppose class red wines class dessert wines 
port instance classes rdfs 
import rdfs instance data prot back create new class subclass classes example denoting concept dessert red wines port instance instance new class 
record original classes port additional slots newly created class shown 
saving back rdfs back extract information slot preserving original model 
march april computer org intelligent user defined back status back ends including ones part core prot system storage format prot knowledge bases 
important goal back plug ensure create knowledge base prot save back plug load preserved information 
find way store elements prot supports language choice 
semantic web languages flexible easily store information 
example rdfs simply add new prot specific properties slots record default values rdfs 
properties meaning rdfs agent read knowledge core classes 
definition red meat course class prot oil editor 
addition standard fields shown oil specific fields subclassof specifying complex class expressions 
slots oil specific slot widget display expressions 
tree left contains auxiliary core classes defined oil 
base back prot default values preserved 
creating new tabs include semantic modules addition creating prot editor new semantic web language developers plug applications knowledge base editing environment 
addition standard tabs constitute prot user interface figures developers create tab plug ins way plug new slot widgets 
tabs include arbitrary applications benefit live connection knowledge base 
applications integral part knowledge base editing environment 
consider wine example 
having created knowledge base wines food appropriate combinations want build application produces wine suggestions meal course restaurant 
application actively data knowledge base implement reasoning mechanism analyze suggestions 
implement wine selection application tab plug 
practical terms tab plug separate application developer userinterface space developer connect query update current prot knowledge base 
realm semantic web tab include applications help acquire annotate knowledge base 
applications enable direct annotation html pages semantic elements computer org intelligent ieee intelligent systems provide connection external reasoning inference resources acquire semantic data automatically text graphical view set interrelated resources 
prot edit daml oil daml oil semantic web language heavily inspired research description logics dl allows types concept definitions ontologies prot rdfs 
dl inspired languages usually include features addition ones traditional frame languages specify necessary sufficient conditions class membership 
example wine produced bordeaux region bordeaux wine 
arbitrary boolean expressions class slot definitions specify superclasses class domain range slot 
example red meat course contain red meat contain food food containing 
specify global slot properties 
example location transitive property ch rothschild bordeaux region bordeaux region france ch rothschild france 
define global axioms express additional properties classes 
example say classification class wines subclasses red white ros wines disjoint instance wine class belongs subclasses 
adapted prot oil editor 
oil language precursor daml oil 
doing followed steps described creating prot rdfs editor 
addition integrated external services oil ontologies prot 
integrating daml oil require nearly identical steps 
modeling level introduce new class slot templates specify complex class slot definitions 
result class template example acquires new fields see 
type specify class definition contains necessary necessary sufficient conditions class membership 
specify complex expressions slot restrictions 
subclassof specify complex expressions describing position class class hierarchy 
integrate oil prot names rdfs serialization syntax standard oil plain ascii version 
see www ontoknowledge org oil various syntaxes versions 
just rdfs native prot mechanisms modeling oil ontologies possible 
new class simply subclass existing classes hierarchy prot notion subclasses placing new class belongs hierarchy 
superclass definition requires boolean expressions prot allow subclassof field see template 
prot understand semantics field represent additional superclass information declaratively pass classifier simply save oil 
field need complex expressions need specify existential slot constraints prot allows definition value type constraints slots values slot instances class 
oil allows existential slot constraints addition constraints value slot come class value come class 
build complex expressions declaratively creating instances core auxiliary classes 
see core classes tree 
example specify subclass meal course red meat course define course contain red meat contain food food containing prot support semantics oil encode additional information declaratively 
prot ignore information able pass classifier encode oil oil agent understand 
user interface level apart changing labels rearranging fields forms oil property templates created new slot widget allow easier editing nested expressions ones representing food food containing 
widget augments standard prot widget selecting creating values instance valued slots display nested expressions practical form 
extension simple effective slot widget include full context sensitive validating expression editor 
back level describe oil back produces rdfs output oil 
build largely existing rdfs back 
defining class slot names structure auxiliary core classes oil editor mainly adhered rdfs specification oil 
result just rdfs back described earlier gives output close identical rdfs oil output need 
create oil back started existing rdfs back 
adapted add parts definitions specified native prot means complex class expressions 
oil back encodes concepts prot oil global cardinality restrictions slots example defining additional statements prot namespace 
oil agent understand statements ignore prot able extract necessary information 
semantic web languages infancy come different versions alternative approach developing specific back ends versions 
create general rdf back prot declarative easily adaptable rdf transformation language generating desired outputs 
research groups currently investigating back corresponding rdf transformation query language 
accessing external services tab plug dl languages oil daml oil traditionally rely inference component classifier find march april computer org intelligent right position class class hierarchy determine class definitions unsatisfiable instances 
crucial connection dl classifier part environment editing oil daml oil ontologies 
having created set definitions invoke classifier determine evolving class hierarchy looks 
see effects changes class definitions evolving hierarchy 
immediately check logical expressions defining class contradict making class unsatisfiable 
order create full fledged prot oil editor need connect prot inference component results user 
implemented connection prot tab plug 
shows oil tab action 
initially class hierarchy various subclasses siblings 
addition specify oyster course value food slot oil tab plugin 
tab plug classification oil ontologies 
right see hierarchy meal courses classification 
middle pane shows interactions fact classifier 
hierarchy right classifier computed 
course meal course food 
oil tab connect dl classifier fact rearrange class hierarchy class definitions 
resulting hierarchy oyster course class example correctly classified subclass course class 
advent semantic web current network online resources expanding set static documents designed mainly human consumption new web dynamic documents services devices software agents able understand 
developers create different representation languages embrace heterogeneous nature resources 
languages describe specific domains knowledge model capabilities services devices 
languages different emphasis scope expressive power 
prot provides full fledged support knowledge modeling acquisition 
developers custom tailor prot quickly easily editor new semantic web language 
prot editor enables modeling conceptual level allows developers think terms concepts relations domain modeling terms syntax final output 
adapting prot edit new semantic web language creating new editor scratch text editor create ontologies new language obtain graphical conceptual level ontology editor knowledge acquisition tool 
get new editor experiment new language investing resources 
prot interchange module translate models semantic web languages new language vice versa 
experience takes days computer org intelligent ieee intelligent systems adapt prot new semantic web language lot time required create sophisticated software scratch 
able create editors language oil takes knowledge modeling approach different frame approach prot originally designed 
extensible flexible knowledge model open plug architecture prot constitute basis developing suite conceptual level editors semantic web languages 
acknowledgments information prot project please visit protege stanford edu 
fasttrack systems darpa daml program supported 

berners lee fischetti weaving web original design ultimate destiny world wide web inventor harper san francisco 

brickley guha resource description framework rdf schema specification world wide web consortium proposed recommendation www 
org tr cr rdf schema current mar 

hendler mcguinness darpa agent markup language ieee intelligent systems vol 
jan feb pp 


noy fergerson musen knowledge model prot combining interoperability flexibility proc 
knowledge engineering knowledge management th int conf 
ekaw lecture notes artificial intelligence springer verlag berlin pp 

musen component support building knowledge acquisition systems proc 
conf 
intelligent information processing iip int federation information processing world computer congress wcc beijing china smi web stanford edu pubs smi abstracts smi html current mar 

horrocks fact system proc 
automated reasoning analytic tableaux related methods int conf 
tableaux lecture notes artificial intelligence springer verlag berlin pp 

noy research scientist stanford medical informatics laboratory stanford university 
interests include ontology development evaluation semantic integration ontologies making accessible experts science domains 
bs applied mathematics moscow state university russia ma computer science boston university phd computer science northeastern university boston 
contact stanford medical informatics campus dr stanford univ stanford ca noy smi stanford edu 
michael sintek research scientist german research center artificial intelligence 
currently project leader project rdf framework building distributed organizational memories developed 
computer science economics university kaiserslautern 
contact german research center artificial intelligence dfki gmbh knowledge management group postfach kaiserslautern germany sintek dfki uni kl de 
stefan decker postdoctoral fellow department computer science stanford university works semantic web infrastructure darpa daml program 
research interests include knowledge representation database systems web information integration ontology articulation merging 
phd computer science university karlsruhe germany worked ontologybased access information 
contact stanford university gates hall room stanford ca stefan db stanford edu 
monica crub zy postdoctoral researcher stanford medical informatics laboratory stanford university 
research focuses modeling integration libraries problem solving methods prot knowledge system development framework 
graduated cole polytechnique france general engineering computer science 
phd computer science institut national de recherche en informatique automatique sophia antipolis france 
contact stanford medical informatics campus drive stanford university stanford ca smi stanford edu 
ray fergerson programmer stanford medical informatics laboratory stanford university 
bs physics colorado school mines phd experimental nuclear physics university texas austin 
contact stanford medical informatics campus drive stanford university stanford ca fergerson smi 
stanford edu 
mark musen biography appears guest editors page 
march april computer org intelligent 
