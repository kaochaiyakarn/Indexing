domain specific language design requires feature descriptions arie van deursen paul klint cwi box gb amsterdam netherlands www cwi nl arie domain specific language dsl provides notation tailored application domain relevant concepts features domain 
dsl means describe generate members family programs domain 
prerequisite design dsl detailed analysis structuring application domain 
graphical feature diagrams proposed organize dependencies features indicate ones common family members ones vary 
study feature diagrams details relationship domain specific languages 
propose feature description language fdl textual language describe features 
explore automated manipulation feature descriptions normalization expansion disjunctive normal form variability computation constraint satisfaction 
feature descriptions directly mapped uml diagrams turn java code generation 
value fdl assessed case study expressiveness feature descriptions area documentation generators 
acm computing classification system 
keywords phrases domain engineering tool support software product lines uml constraints 
note appear journal computing information technology 
note carried cwi project sen domain specific languages sponsored 
domain specific language dsl programming language executable specification language offers appropriate notations abstractions expressive power focused usually restricted particular problem domain 
dsl generate members family systems application domain 
designed dsl thorough understanding underlying application domain giving exactly expressive power generate required family members easily 
potential advantages dsls include reduced time market reduced maintenance costs higher portability reliability testability prerequisite design dsl detailed analysis structuring application domain 
guidelines acquiring understanding provided research area domain analysis investigates ways modeling domains 
domain analyst person examines needs requirements collection systems similar 
neighbors emphasizes done person built systems different customers problem area 
domain analyst systems analyst goal support development families related systems just kind productions 
domain analysis originates software reuse research constructing domainspecific reusable libraries frameworks languages product lines 
domain analysis methodologies exists odm organization domain modeling feature oriented domain analysis domain specific software architectures best known 
important result domain analysis feature model chapter 
feature model covers commonalities variabilities software family members dependencies variable features 
feature model documents feature rationales stakeholders constraints example features may exclude binding sites priorities 
key element feature model feature diagram graphical notation describing dependencies variable features see example 
feature diagrams topic 
feature diagrams originate method 
concisely describe possible configurations called instances software system focusing features may differ configurations 
czarnecki book generative programming includes account feature diagrams van discuss role feature diagrams software product lines 
purpose get better understanding feature diagrams potential supporting dsl design 
particular address concerns see section related notation feature diagram superficially described explained way examples 
formalize notion feature diagram providing dsl feature definitions called fdl suite formally defined operations manipulating fdl expressions tool support feature diagrams infancy 
construct prototype fdl tools discuss various ideas advancing 
feature diagrams hardly practice difficult find actual examples feature diagrams concrete projects 
attempt address providing additional case study fdl 
unclear proceed feature diagram exists 
address discuss done fdl description mapped uml class diagram get version configuration interface 
plan follows 
section introduce graphical notation feature diagrams textual feature description language fdl able express issues related domain engineering analysis discussed program transformation wiki www 
program transformation org 
car carbody pullstrailer transmission engine horsepower automatic manual electric gasoline feature diagram simple car lowpower expressed graphical feature diagram 
introduce section feature diagram algebra allows normalization feature diagrams 
addition introduce notion satisfaction enables answer question feature diagram list user requirements feature diagram contain software configurations satisfy user requirements 
way feature diagram actively queried initial investments construction start pay 
implementation issues addressed section 
show feature diagrams mapped uml java classes 
section perform case study describe variability existing commercial product documentation generation modeled fdl 
section complete 
feature diagrams graphical notation feature diagrams shows feature diagram simple car inspired 
diagram states car consists carbody transmission engine 
features mandatory indicated closed dot top feature 
feature car 
optional indicated open dot 
carbody atomic features subdivided features 
sequel call features defined terms features composite features 
convention names atomic features start lower case letter names composite features start upper case letter 
note atomic composite features called features respectively subconcepts 
may 
open triangle joining lines transmission sub features indicates exclusive choice may selected 
may run 
closed triangle joining lines indicates non exclusive choice may selected 
car carbody transmission engine horsepower pullstrailer 
transmission automatic manual engine electric gasoline horsepower lowpower feature diagram simple car fdl may 
open triangle joining lines sub features indicate exclusive choice 
instance feature diagram consists actual choice atomic features matching requirements imposed diagram 
instance corresponds product configuration system family 
simple case analysis learns number possible car instances carbody transmission engine horsepower pullstrailer 
textual notation feature diagrams feature diagrams yield nice pictures describe system features 
enable email communication discussion creation automatic tools processing feature diagrams textual representation preferable 
textual representation contain information contained graphical diagram suited automatic processing 
proposal primarily intended email communication feature diagrams 
show represent graphical notation textual form 
may contain constraints shown example postpone description section 
fdl definition consists number feature definitions feature name followed feature expression 
feature expression consist atomic feature composite feature named feature definition appears optional feature feature expression followed mandatory features list feature expressions enclosed alternative features list feature expressions enclosed non exclusive selection features list feature expressions enclosed default feature value default followed atomic feature remaining features form indicating set completely specified 
structure formally described complete grammar fdl 
written sdf 
layout conventions white space comments fdl defined shown 
called features 
module fdl imports layout exports sorts featurelist constraint lexical syntax za za context free syntax constraint featurelist featurelist featurelist featurelist default 
constraint constraint requires excludes include exclude grammar feature definition language variable type feature diagram algebra fs ft constraint cs constraint variables fdl rules 
textual representation feature diagrams start developing rules operate feature diagrams 
result feature diagram algebra 
overview feature algebra rules feature diagram algebra consists sets rules normalization rules section purpose slightly simplify feature expression eliminating duplicate features degenerate cases various constructors 
variability rules section serve count number possibilities feature diagram 
expansion rules section expand normalized feature expression disjunctive normal form 
satisfaction rules section feature expression disjunctive normal form constraints determine disjuncts satisfy constraints 
satisfaction rules rules really interested allow formulation constraints inherent feature diagram system constraints constraints imposed user user constraints 
satisfaction rules enable query feature diagram solutions satisfy system user constraints 
relation fdl definition feature expressions recall fdl definition consists number feature definitions define composite feature associating feature expression feature name 
feature expression names composite features may occur 
perspective feature diagram algebra convenient manipulate single feature expression 
assume composite feature default defined fdl description feature interest rules operate feature expression corresponding feature interest 
simplify presentation assume names composite features feature interest replaced recursively definition fdl definition 
simple variable substitution process explain 
variable conventions presentation rules conventions variables shown may followed digits 
observe represents comma separated lists zero feature expressions ft represents comma separated lists feature expressions 
rules prototyped asf sdf meta environment 
detailed knowledge asf sdf specification formalism necessary understanding sections 
equations fs fs fs fs fs fs fs fs fs fs fs fs 

fs ft fs fs ft fs fs ft fs fs ft fs fs fs fs fs 
fs ft fs fs ft fs fs fs fs fs 
default carbody automatic manual electric gasoline lowpower pullstrailer 
normalization rules normalization rules normalized feature expression car normalization rules shown 
informal explanation rules follows combines mandatory optional features list 
removes duplicates list 
joins duplicate 
normalize special cases 
flattened 
normalize special cases 
ofs flattened 
transforms aone containing optional feature 
normalize special cases 
ofs flattened 
transforms amore containing optional feature 
eliminates annotation 
normalized feature expression car shown 
variability rules important purpose feature diagrams describe variability software system interesting count possibilities 
normalized feature diagram variability rules shown define variability construct 
equations var var var var ft var var ft var var var ft var var ft var var var ft var var var ft var var rules computing variability variability atomic feature variability option adds variability argument 
variability product variabilities arguments 
variability sum variabilities arguments 
variability fn slightly complex amounts computing case var fi corresponding switching feature disallowing empty configuration 
assuming var var ft variability ft equals representing cases combination 
written format avoids recalculation executing laws rewrite rules 
variability case formulated equivalent manner var fn var var var fn variability feature expression car 
variability clearly grows exponentially appreciated calculating variability feature expression documentation generator discuss section 
case variability 
expansion rules step expand normalized feature expression disjunctive normal form defined follows am outermost operator disjunctive normal form 
arguments atomic features arguments 
resulting representation essentially list possible configurations 
expansion rules shown amount eliminating ofs ofs occur nested translates containing optional feature expression cases feature 
translates containing aone cases alternative alternative removed 
translates containing amore cases alternative alternative 
expansion feature expression car shown 
expected variability computed previous section contains alternatives 
equations fs ft fs ft fs ft ft fs ft ft fs fs ft fs fs fs fs ft fs fs ft fs fs fs fs ft fs fs ft fs satisfaction rules expansion rules position explain constraints feature diagrams 
defined constraint forms requires 
excludes 
include 
exclude 
kinds constraints called diagram constraints express fixed inherent dependencies features diagram 
kinds constraints called user constraints express user requirements regarding presence absence feature 
user constraints may vary subsequent uses feature diagram 
purpose constraints limit variability feature diagram 
achieved introducing notion satisfaction determines disjunct feature expression disjunctive normal form satisfies constraints 
satisfaction rules shown 
typically check disjunct applicable constraint constraint satisfied 
binary constraints excludes handled respectively 
typically disjunctive normal form fs fs constraints common appropriate check performed constraint absent 
similar fashion handle unary respectively excludes 
introduce constraints car example pullstrailer requires unreasonable don want ruin engine include pullstrailer user requirement 
reduce disjunctive normal form car get result shown 
observe original possibilities reduced just 
carbody automatic electric lowpower pullstrailer carbody automatic electric gasoline lowpower pullstrailer carbody automatic gasoline lowpower pullstrailer carbody automatic electric pullstrailer carbody automatic electric gasoline pullstrailer carbody automatic gasoline pullstrailer carbody automatic electric pullstrailer carbody automatic electric gasoline pullstrailer carbody automatic gasoline pullstrailer carbody manual electric lowpower pullstrailer carbody manual electric gasoline lowpower pullstrailer carbody manual gasoline lowpower pullstrailer carbody manual electric pullstrailer carbody manual electric gasoline pullstrailer carbody manual gasoline pullstrailer carbody manual electric pullstrailer carbody manual electric gasoline pullstrailer carbody manual gasoline pullstrailer carbody automatic electric lowpower carbody automatic electric gasoline lowpower carbody automatic gasoline lowpower carbody automatic electric carbody automatic electric gasoline carbody automatic gasoline carbody automatic electric carbody automatic electric gasoline carbody automatic gasoline carbody manual electric lowpower carbody manual electric gasoline lowpower carbody manual gasoline lowpower carbody manual electric carbody manual electric gasoline carbody manual gasoline carbody manual electric carbody manual electric gasoline carbody manual gasoline disjunctive normal form car disjuncts equations element fs element fs true sat fs fs cs excludes cs false element fs element fs false sat fs fs cs excludes cs sat fs fs cs cs element fs element fs false sat fs fs cs requires cs false element fs element fs true sat fs fs cs requires cs sat fs fs cs cs element ft true sat ft cs include cs sat ft cs cs element ft false sat ft cs include cs false element ft true sat ft cs exclude cs false element ft false sat ft cs exclude cs sat ft cs cs default sat ft cs true satisfaction rules carbody automatic electric pullstrailer carbody automatic electric gasoline pullstrailer carbody automatic gasoline pullstrailer carbody manual electric pullstrailer carbody manual electric gasoline pullstrailer carbody manual gasoline pullstrailer reduced feature expression car car transmission automatic car pullstrailer false car engine electric gasoline car instance specified java property file implementing feature diagrams feature diagram describes possible system configurations 
arrive working system configurations implemented 
section analyze feature diagrams implemented object oriented models 
focus uml java implementation targets 
observe resulting uml describes configuration interface family systems product line 
actual implementation underlying framework involve classes dealing features common software products opposed variable 
question represent actual configurations feature diagram instances 
recall configuration just set features selected diagram 
suggests simple property list example available java property files suffices indicate features switched 
example instance car having automatic transmission trailer electric gasoline engine java property file 
names properties derived diagram constitute path root selected feature 
practice published feature diagrams fact flat property names sufficiently simple 
example feature diagram describing ways different window managers move windows covered essentially flat list elementary features likewise feature diagrams depth larger 
depth larger normalize feature diagrams seen previous section disjunctive normal form depth 
methods implementing features need aware configuration chosen 
simplest approach methods perform explicit check property values adapt behavior accordingly 
disadvantage amounts including case statements various places generally considered bad object oriented programming style 
involved approach turn features classes possible inheritance order specialize methods particular feature instances 
amounts deriving uml class diagram feature diagram 
done systematic way car example 
diagram observations feature corresponds class 
associations classes tagged indicating sort feature dependency stereotype originate 
mandatory dependency car carbody mapped aggregation classes 
optional dependency car pullstrailer corresponds association cardinality 
lists engine transmission horsepower results classes engine transmission specific subclasses alternatives 
dependency transmission horsepower results association car dependency engine car results association multiplicity equal cardinality number features case 
carbody engine mandatory car transmission automatic manual optional lowpower uml class diagram car features pulls horsepower pullstrailer example includes fdl features approach corresponds systematic translation fdl uml class diagrams 
mapping discussion czarnecki provide section 
discuss implementations involving static dynamic parameterizations mixins parameterized inheritance multiple inheritance 
provide intuitive diagram 
compared options discuss approach simple systematic independent availability parameterization mechanism 
result translating fdl uml represented xmi xml meta data information exchange format 
xmi documents imported uml modeling tools rational argo uml turn diagrams generate example java classes 
addition fdl specification generate configuration editor 
editor user interface panel product builder select features include 
result editing session input generated configuration classes 
consists concrete property file executable code creating appropriate configuration objects 
logical step create domain specific language fdl definition 
particularly useful natural language expressing feature instantiations exist product instances read manipulated put revision control 
observe operators fdl definition close operators example bnf sdf corresponds alternative productions optional productions list construct 
fdl definition easily basis grammar language building systems underlying application domain 
docgen case study background section explore feature diagrams purpose designing configuration dsl docgen commercial documentation generator software systems 
instantiated various languages including cobol sql jcl various proprietary languages 
docgen operates populating repository series facts derived legacy sources 
facts derive web documentation systems analyzed 
documentation includes textual summaries overviews various forms control flow graphs architectural information 
information available different levels abstraction connected hyper links 
docgen customers different wishes regarding languages analyzed specific set analyses performed way collected information retrieved 
docgen software product line providing set reusable assets suited express efficiently implement different customized documentation generation systems 
construction docgen characterized evolutionary design docgen developed principles extreme programming 
docgen started research prototype described 
prototype implemented reusable framework just produced documentation desired particular customer 
commercial interest applications docgen grew variation points introduced evolving docgen system suitable deriving different documentation generation systems 
docgen object oriented application framework written java relational database repository 
provides range core classes analysis presentation purposes 
order instantiate family members package specific customer created containing specializations core classes needed including methods called docgen factory producing actual docgen instantiation 
number customer configurations growing time rethink way docgen product instantiations created sort variability docgen product line offer 
section explore fdl help organize variable features docgen 
seehttp xml org xmi html 
docgen analysis presentation analysis 


presentation localization interaction 
localization default english dutch interaction crawled default dynamic 



configurable features docgen docgen features selection variable features docgen constraints shown figures 
features listed describe variation points current version docgen 
goals constructing fdl specification features search alternative ways organize variable features order optimize configuration docgen family members 
features listed focus just configuration specified dependency 
features show docgen analysis influenced 
data model specified indicates relations docgen data model populated 
java implementation follows uml diagram suggested section amore results association series classes inheriting relation class 
second optional list provided 
specializations implemented ways 
just simple parameter settings encoded java property files 
correspond specialized methods performing certain analyses features indicate customer specific classes need included 
features affect way facts contained repository docgen users 
obvious features need case amounts choosing english dutch 
implemented web browsers localization scheme making feature user determine point session 
feature determines moment html pages generated 
interaction page created user requests page 
advantage pages date information repository interactive browsing possible 
crawled mode pages generated stored example cd rom 
advantage webserver needed inspect data easily easily viewed disconnected laptop 
see feature puts constraints presentation features 
feature indicates contents root page derived documentation 
list standard blocks reused implemented association subclasses block class 
necessary particular customer specific subclass blocks created specified 
similar configuration contents main page documenting individual source files 
mandatory block 
contents user guide vary depends features included 
feature description indicates consists series help sections constitute user guide available integrated pdf file section relevant pages 
docgen feature constraints lists constraints restricting number valid docgen configurations features listed 
dependencies tables data model 
words selection valid 
example table uses foreign key table providing key primary key available 
shows dependency 
second pages depend analyses conducted 
example order show activation modules call relation modules extracted 
likewise contents user guide depends pages user 
documentation include statistics mccabe index fan fan user guide include section explaining meaning metrics certain features conflict 
particular user interactively add annotations pages stored repository 
dependencies tables repository requires constraints presentation blocks sections analysis 
requires requires requires requires constraints presentation blocks sections contents user guide 
requires requires requires mutually exclusive features crawled excludes crawled excludes constraints variable docgen features 
possible dynamic version done set 
concluding remarks related tried get better understanding nature feature diagrams originating domain analysis methodology 
textual representation feature diagrams 
similar representation provided primarily inspired need exchange feature diagrams internet 
notion normalized feature diagrams discussed czarnecki section 
provide rewrite rules visual representation 
focus elimination optional features occurring aone context corresponds andn mapping feature diagrams uml discussed czarnecki section 
number advanced alternatives focus simple systematic approach mapping feature diagrams class diagrams 
feature diagram case studies published making difficult assess true benefits feature diagrams 
collected feature diagram find published literature translated fdl 
docgen case study aims helping fill gap 
textual format fdl easier exchange feature diagrams web sites 
specifications provide directly executable asf sdf basis tool support feature diagrams 
original method contains prolog tools checking feature diagrams 
unable discover precise functionality 
domain analysis engineering focuses development refinement process lead set reusable assets components products construct family related applications 
process solve knowledge acquisition management problem knowledge sources domain experts documentation source code market surveys pricing strategies create structured view domain 
main goals build domain vocabulary identify features identify variation points ultimately construct feature diagrams capture information 
tool support provides blackboard architecture accomplish tasks 
examples systems sherlock holmes dare cots feature 
survey kind systems 
emphasis tools domain engineering process sense seen complementary systems mentioned 
results results areas 
formalized notion feature diagram 
feature diagram algebra benefits basis tool development 
rules directly executed asf sdf meta environment yielding prototype tools experimented 
mediate options provided software applications expressed feature diagram requirements user 
typically user indicates check list features wants certainly want 
disjunctive normal form feature diagram apply satisfaction rules obtain reduced feature expression contains zero satisfactory disjuncts 
disjuncts form alternatives offering user 
disjunct may enriched additional information total costs planning constraints 
second shown feature diagrams directly mapped uml diagrams turn java code generation 
completely formalize stage process strongly believe large degree automation achieved 
third case study fdl analyzing variation points documentation generator docgen 
design domain specific languages requires detailed analysis domain interest 
operational view feature descriptions powerful tool support domain analysis 
step direction feature diagrams designing domain specific languages describing product families 
major obstacle feature diagrams question create 
usually flat list atomic features known software family application area easy find concepts introduce hierarchical structure list 
possible approach cluster analysis concept analysis find concepts example find objects legacy procedural code 
current simple constraints 
experience shows sufficient describe realistic systems conceivable expressive constraints may lead concise feature diagrams 
examples extensions add booleans expressions include include 
associate numeric values atomic features horsepower 
add relational operator horsepower 
limitation feature diagrams contain information relevant binding time features 
instance cross cutting features error reporting transaction logging major impact actual classes implement feature diagram 
practical importance explore feature diagrams extended information needed fully automatically generate implementation 
information contain mapping feature names existing code implements feature 
docgen case study important include class files packages statically concluded needed 
currently investigating usage software packages package bundles influence code packaging features static binding time 
naive approach computing satisfaction constraints feature diagram 
size disjunctive normal form grows exponentially soon infeasible compute check constraints 
envisage known techniques model checking ordered binary decision diagrams possible avoid computing disjunctive normal form check constraints directly 
note strike balance efficient satisfaction techniques extension expressive power constraints outlined 
summarize lot needed turn feature diagrams widely applicable technique 
longer term perspective feature analysis manipulation environment develop product family feature diagram simultaneously 
feature diagram really gets dual purpose helps structure code base independent features implemented independent components packages customer explore possibilities product family selection suits needs acceptable costs 
gratefully acknowledge comments drafts krzysztof czarnecki leon moonen joost visser editors ralf mmel anonymous referees 
beck 
extreme programming explained 
embrace change 
addison wesley 
feature model diagrams text html 
www boost org feature model diagrams htm 
van den brand van deursen heering de jong de jonge kuipers klint moonen olivier visser visser 
asf sdf meta environment component language development environment 
wilhelm editor compiler construction cc volume lecture notes computer science pages 
springer verlag 
bryant 
symbolic boolean manipulation ordered binary decision diagrams 
acm computing surveys september 
czarnecki eisenecker 
generative programming 
addison wesley 
van deursen heering klint editors 
language prototyping algebraic specification approach volume amast series computing 
world scientific publishing 
van deursen klint 
little languages little maintenance 
journal software maintenance 
van deursen klint visser 
domain specific languages annotated bibliography 
acm sigplan notices june 
line program transformation org 
van deursen kuipers 
building documentation generators 
proceedings international conference software maintenance pages 
ieee computer society 
van deursen kuipers 
identifying objects cluster concept analysis 
st international conference software engineering icse pages 
acm 
automatic documentation generation white 
software improvement group www 
software com pdf pdf 
eisenecker blinn czarnecki 
feature modeling software system families german 
pages september 
www de 
fowler 
refactoring improving design existing code 
addison wesley 
frakes prieto diaz fox 
dare cots domain analysis support tool 
proceedings th international conference computer science society 
ieee computer society 
griss alessandro 
integrating feature modeling 
proceedings fifth international conference software reuse pages 
ieee computer society 
van bosch 
notion variability software product lines 
proceedings nd working ieee ifip conference software architecture pages 
ieee computer society 
heering hendriks klint rekers 
syntax definition formalism sdf manual 
sigplan notices 
de jonge 
source tree composition 
technical report cwi 
kang cohen hess novak peterson 
feature oriented domain analysis feasibility study 
technical report cmu sei tr software engineering institute carnegie mellon university 
klint 
meta environment generating programming environments 
acm transactions software engineering methodology april 
meyer 
object oriented software construction 
prentice hall second edition 
neighbors 
approach constructing software reusable components 
ieee transactions software engineering se september 
simos levine 
organization domain modelling odm guidebook version 
technical report stars vc technologies 
eberlein yip luc tan 
design holmes tool domain analysis engineering 
ieee pacific rim conference communications computers signal processing 
yip liu 
analysis essential requirements domain analysis tool 
icse workshop software product lines economics architectures implications 
taylor tracz 
software development domain specific software architectures 
acm sigsoft software engineering notes 
visser 
syntax definition language prototyping 
phd thesis university amsterdam 

