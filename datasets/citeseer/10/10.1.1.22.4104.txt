interpretive debugging optimised code john gough jeff kim traditional debuggers imperative languages relied operation information extracted time modules program compiled 
discuss alternative model needed information extracted modified version compiler debugging process 
potential advantages approach include ability debug programs compiled debug options including globally optimised 
ability mix interpreted optimised compiled code allows arbitrary program animation insertion arbitrary program assertions specified compilation debugging process 
overview introduce concept principle allows capabilities debuggers conventional imperative languages significantly extended 
concepts basis project started report design data preliminary stage implementation ideas 
particular interested extending capabilities conventional debuggers imperative languages pascal modula ada object oriented extensions 
restrict conventional uniprocessor multi pipeline machine architectures 
section review history program debugging discuss ways capabilities current debuggers fall short ideal 
section give overview capabilities generation language independent debuggers currently development 
discuss internal mechanisms debuggers authors programming languages systems group plas queensland university technology alternative proposals experimented 
section introduce conceptual basis extended capabilities discuss implementation ideas 
describe current level implementation prototype discuss progress project 
draw interim 
debugging history computer programs need examined determine cause apparent errors gain better understanding structure control flow 
examination called debugging usual objective location removal program errors bugs 
need arises development phase software life cycle subsequent software maintenance 
estimated annual information systems budgets spent maintenance tool enhances efficiency process important practical value 
earliest days computing realised machine provide assistance process 
possibly earliest journal article call debugging necessity articulated 
contains concept post mortem debugging analysing memory contents program abortion single stepping stepping program instruction time animate effects insertion breakpoints halting program execution specified points examine machine state 
concepts contemporary debuggers 
movement computer scientists declare debugging politically incorrect claiming software designs correctness proofs mathematical derivation formal specifications removed need extremities 
calm claims shows formal methods assist production programs reduced errors eliminate need tool assisted debugging 
shapiro award winning dissertation states case program proven correct respect formal description intended behaviour observation suggests effort program verification succeeds solve problem debugging specifications 
debugging difficult noted debugging difficult 
evidence difficult involves analytical intuitive processes 
hard tools available general inadequate 
realised essentially invention modern high level programming languages debugging carried semantic terms original source program 
goal proves elusive 
extent problems encountered conventional tools attributed programming model support 
program viewed mechanical artifact examined failure instance run step time stopped particular state 
model facilitates purely analytical approach debugging 
problems debugging parallel programs extreme addressed project 
address different problems debugging languages lisp prolog concerned imperative procedural languages modula ada object oriented relatives oberon proposed ada 
model debugging informal model debugging process 
model suggests debuggers support certain kinds interactive reasoning existent programs allow post facto testing hypotheses 
believe debugging typically proceeds alternation activities 
program examination second hypothesis testing 
activity program examined attempt understand phenomenon involved 
may require examination program source input output behaviour 
may require examination internal state program interesting points execution 
purpose activity assist formulation hypotheses regarding reason perceived behaviour 
second activity testing hypothesis formed previous stage program examination 
successful testing hypothesis lead refined focus examination activity formulation refined hypothesis 
rejected hypotheses refine focus examination serve partition space possible causes 
model suggests debuggers provide facilities ffl examine internal state programs interrupted states execution abnormal termination ffl animate execution interesting parts programs behaviour checked user understanding source program semantics ffl allow testing arbitrary assertions specified debugging session ffl allow selective replacement program parts alternative code specified debugging session examine level current debuggers support kind interaction 
compiler optimisations unfortunate fact compiler optimisations place obstacles path debuggers 
optimisations place insurmountable obstacles path conventional debuggers 
particular optimisations data gough machine registers memory eliminate move code procedures cause particular problems 
machines performance penalty performing called local optimisations great compilers permit completely version program created 
furthermore clear situation difficult immediate 
order exploit capabilities new generation multi pipeline architectures gross code motion occur stages compilation 
code moved result dataflow analysis attempt extend basic block length 
current research instruction scheduling suggests scheduling treat entities larger basic block allowing instructions move control flow graph arbitrary fashion 
valiant done allowing conventional debuggers find variables registers warn user misleading values reconstruct logical values data separate existence optimised program 
production compilers severely restrict possible optimisations performed debugging capability specified compile time 
inability conventional debuggers deal optimised programs severe handicap 
certainly customary sensible perform testing early software development process 
programs meet performance criteria prior release necessitates optimisations 
need testing debugging continuing part software life cycle especially critical ongoing maintenance released production code 
current debugging optimised programs focussed extensions hennessy seminal 
interpretive interface various investigators pointed advantages interpretive execution programs interactive debugging 
interpretive approach facilitates stepping piece code provides interactive entry additional code compute additional information user correct recognised error 
particular interpretive approach allows debugging commands language program debugged 
unfortunately interpretive approaches restricted languages customarily implemented interpretation environments operate slowly advantages interpretive execution obtained systems incremental compilation 
language neutrality current debuggers rely information symbol file interpret data assist users languages data types builtin time design file format 
example dbx supports scalars arrays pointers structs unions 
currently debuggers supplied major workstation vendors enhanced support language 
exercise demonstrates problem enhancements typically deal idioms single implementation provide help users similar object oriented languages 
believe approach placing additional information executable file enhancing debugger interpret new information fundamentally flawed despite appropriateness single language environments 
particularly interested problems debugging programs written object oriented languages 
provide problems current debuggers languages hidden mappings programmer specified names unique names address space link editor 
believe debuggers able conveniently programs involve language 
particular symbolic expressions user specifies expressed syntax source source language semantics 
compiler interesting approach language neutral debugging demonstrated prototype form sigplan symposium mid 
authors worked direct execution project university maryland early 
debugging capabilities systems high point misguided concept 
gough authors introduced idea arranging language neutrality assistance modified version compiler debug time 
compiler surely understands source language debugging commands expressed language source code 
compilers communicate debugger process modified version postscript language 
attempt allow interpretive execution program debugged 
furthermore executable programs able debugged optimised 
fact programs needed compiled additional marker instructions leading slower execution normally case 
overview current debuggers interested multi language platform independent debugging discuss state art debuggers address challenge 
widely debuggers imperative language programs workstation unix machines dbx gnu equivalent gdb sdb 
tools roughly similar capabilities limitations 
debuggers rely presence information executable file program allow variables located memory space executing program 
general capability required debugging time information needs written file compile time 
setting appropriate compile options produce additional information invariably requires foregoing compiler optimisations 
reasons 
firstly program ensure variables written memory able examined debugger 
secondly program stepped line line code different lines interleaved hoisted loops common subexpression elimination left undone 
unix trademark unix system laboratories 
dbx source text file symbol table image program user conventional debugger dwarf format unix international organisation developed executable file format specifies debugging information source language independent form 
format specification debugging information called dwarf attached executable files standard elf format 
specification remove current limitations debuggers defines set attributes sufficiently rich allow symbolic debugging common languages 
dwarf provides attributes specify location information variables program question 
location information simple name location pairs may description addressing expression executed find location variable 
expressions instructions stack machine conventional capabilities 
expected full functionality debuggers dwarf provide interpreter address expression language 
dwarf provides variables may located means location lists 
lists allow variables different locations different stages execution 
lists consist tables tuples instruction counter bounds location expressions 
location lists principle allow things variables written memory live different machine registers different times program execution 
may expected debuggers dwarf cooperation compiler able find values variables presence high levels optimisation 
order execution instructions optimised gough programs line number markers deceptive program animation problematical 
note level debugging information desired specified compile time ability test assertions limited simple value bounds 
particular noted execution compound assertions specified debug time impossible proposed model propose structure debugging environment text dcode debugger interpreter source text compiler modified image program user debugger compiler language independent debugger communicates user windows 
debugger connected program test initially suspended state core dump image faulting program 
command requires information regarding particular module program test modified version compiler responsible code invoked 
compiler access original source code module 
debugger communicates alternately program test compiler 
debugger process contains usual trap handlers symbol table mechanisms conventional debuggers 
contains interpreter language independent intermediate representation dcode compilers 
important see interpreter somewhat unusual situation 
interpreter data structures exist address space debugger 
data example consider trying test complex assertion assert tree anticipated compile time 
interpreter refers exist separate address space program test 
important issues performance need determined approach 
debugger may expected provide facilities conventional debuggers mechanisms 
particular early implementation efforts elf executables debugging information specified dwarf format 
current research directed innovative aspects system duplication facilities current systems deliver 
new capabilities describe way new architecture achieves functionality section 
step step execution command requires step step execution particular procedure compiler creates intermediate code procedure 
debugger places trap point program image entry point optimised code procedure 
execution reaches intended procedure trap handler invokes interpreter execution interpreted code dynamically substituted optimised procedure 
bulk code unchanged program run substantially original speed procedure interest reached 
execution specified procedure may examined level detail required 
note querying values non local variables execution limited conventional debugging information available executable file 
substitution alternate procedures procedure accessible entry point may substituted new procedure specified debugging 
compiler generates intermediate code new procedure passes back debugger 
entry point original trap inserted trap handler invokes dcode interpreter intermediate form gough new procedure data 
oe break return epilog prolog bar foo entry bar foo text exit bar 
foo ure foo module bar dcode endp entry proc foo source text object text inserted break traps dcode arbitrary assertions breakpoints described mechanism arbitrary computable functions may specified debugging time attached program test breakpoint assertions 
breakpoint reached trap handler cause interpreter compute specified function 
execution resume original program function signalled failure predicate 
breakpoint assertions may compute functions accessible part program state 
small limitation relies conventional debugger information information readily available procedure calls programs 
furthermore access non local objects mandatory part program controlling part state may replaced version accessible state described section 
higher level debugging difficult special debug code useful find particular problem 
lead edit compile execute cycles 
typically problem fixed code added debugging discarded 
simple effective technique allow programmer create debugging code debugger environment 
debugger provide mechanism indexing code linking project 
believe time project techniques build suite debugging functions shared programmers involved project providing higher level abstraction 
effect functions point provide ability debug semantics application 
observations method compilers mixed cases consider 
compiler invoked debugger produced particular part program currently interest 
alternatively need consider consequences trying debug programs produced compilers language 
debugger modified version compiler produced original executable advantages 
compiler originally requested produce detailed location information variables done fact debugging time 
true request location particular program variable may return variable available high levels optimisation invoked 
find variables available 
particular case nested procedures safety accesses variables enclosing procedures able determined 
case programs produced compilers additional difficulties 
lowest level may difficulties locating variables listed symbol table 
variables known linker symbol table may difficulties reproducing somewhat arbitrary mapping source code name linker name original compiler 
preliminary investigation shows functionality may able retrieved case 
case noted gough may circumvent problems interpreting sufficiently large portions original program 
limitations approach approach outlined quite solve problems caused possible optimisations eliminate difficulties caused optimisations local common subexpression elimination global common subexpression elimination value tracking constant folding instruction scheduling induction variable substitution loop unrolling dead variable elimination code motion loops loop fusion code motion single procedure 
simple solution problem debugging inlined procedures interpretive execution enclosing procedure 
believe fundamental limitation annoyance 
debugger attempt place breakpoint assertions procedures interpreting procedure 
possible state optimised computation corresponds logical state expected source code 
heavily optimised procedures may mean just entry point 
furthermore expressions may refer variables values known locations 
include procedure parameters subset non local variables dynamically enclosing procedures 
believe existing techniques may lessen impact limitation evaluation hypothesis important research outcome project 
debuggers difficulty assisting debugging programs rely false assumptions regarding semantics programming language 
example languages define order evaluation parameters procedure calls 
compiler writers argue force intolerable inefficiency code generators risc machines 
case programs rely undefined behaviour result execution may vary optimization level compilation 
particular compilers order parameter evaluation determined front interpreted compiled code 
interpreter general unaware reordering factors expression code generator apply lessen register 
note method address needs compiler writers wish debug code 
substituting correctly executing interpreted procedure incorrectly executing optimised version procedure may confirm optimiser faulty directly assist diagnosing fault 
relation previously published closely related research aware performed rice university reported chase hood 
researchers recognised possibility mixing compilation interpretation discuss advantages hybrid scheme 
differs project ways 
focus computationally intensive fortran programs possibility substituting exact real arithmetic approximate arithmetic compiled code 
involve compiler debugging process kept library pre compiled syntax trees database 
consider issues involved multi language debugging 
non standard ups debugger available net provides limited capability interpret additional language code inserted existing procedures 
tool motivated concerns project address language neutrality issue entirely new procedures 
current status existing technology project substantially previous language implementation research qut plas team 
architecture compiler projects qut described 
tive code compilers form basis project consist front ends attributed syntax trees tree walking automata stack machine intermediate form called dcode 
currently front ends modula oberon languages back ends mips sparc intel 
prototype version lcc ansi compiler front produces dcode 
essentially compiler technology prototype frontend motorola code generator 
separate projects create version modula oberon compilers digital equipment alpha architecture ibm power series rs 
compilers running prototype form 
existing compiler front ends produce interpretive code isolated procedures relatively minor modifications able perform incremental compilation required aims 
wish test general applicability technique attempting equivalent modifications front produced different technology 
doing lcc portable front ansi important aims able produce intermediate code specified procedures modified procedures minimal delay 
note current compilers produce intermediate code modern workstations speeds lines source code minute 
demonstrated possibility directly interpreting dcode widely available free ware version gardens point modula gpm pc 
progress far experimented prototypes facilities existing debuggers dbx 
allow programmers specify procedures displaying complex structured values format abstractions source program 
interesting advance current capabilities feature requires display function specified program creation time 
prefer display function automatically produced modifiable necessary debugging time 
object oriented language oberon experimented automatic production method defined class 
relatively simple modification overcomes disadvantages listed 
inapplicable non object oriented languages example need programmer intervention determine semantically meaningful way displaying variant record 
currently investigating alternative mechanisms accessing address space program test 
ptrace system call proc pseudo filesystem 
implementation target independent version dcode interpreter proceeding 
proof concept implementation running time writing expect functionality demonstrated early 
believe concepts described represent significant extension state art multi language debugging conventional imperative languages 
particular claim new capabilities ffl debugging fully optimised source code debugging capability specified time compilation ffl ability user add arbitrary breakpoint assertions programs test evaluate assertions core dump images ffl language neutrality allowing data structures displayed expressions entered idioms particular source language ffl interpretive execution selected portions source code program examination including immediate testing modified code brooks hansen simmons new approach debugging optimized code proceedings sigplan conference programming language design implementation san francisco july 
gough chase hood selective interpretation technique debugging computationally intensive programs acm sigplan symposium interpreters interpretive techniques sigplan notices vol 
coutant doc practical approach source level debugging globally optimized code proceedings sigplan conference programming language design implementation 
poole mixed code approach computer journal vol 
dearle brown safe browsing strongly typed persistent environment computer journal vol 
ferrante high level language debugging compiler proceedings acm sigsoft sigplan symposium high level debugging acm sigplan notices vol 
fraser hanson interface ansi software practice experience vol sep 
fraser henry proebsting burg fast optimal instruction selection tree parsing tech rep university wisconsin 
gill diagnosis mistakes programmes proceedings royal society series vol 
gough cifuentes kolb experiment mixed compilation interpretation proceedings hobart 
gough portable modula front gp qut technical report university tubingen report wsi 
gough hardware name mapping direct execution block structured languages proceedings international workshop high level language computer architecture florida dec contained 
gramlich wayne debugging methodology session summary proceedings acm sigsoft sigplan symposium highlevel debugging acm 
hennessy symbolic debugging optimised code acm trans programming languages systems toplas vol 
holzle chambers ungar debugging optimized code dynamic deoptimization proceedings sigplan conference programming language design implementation san francisco july 
killian processes files proc 
usenix association conference pps 
hanson retargetable debugger proceedings sigplan conference programming language design implementation san fransisco july 
russell ups debugger software program 
university kent canterbury 
satterthwaite debugging tools high level languages software practice experience vol pp 
interactive debug requirements proceedings acm sigsoft sigplan symposium high level debugging acm 
shapiro algorithmic program debugging mit press 
unix international programming languages sig dwarf debugging information format version draft draft 
unix international october 
wall srivastava note hennessy symbolic debugging optimised code toplas vol 
zellweger interactive highlevel language debugger control flow optimised programs proceedings acm sigsoft sigplan symposium high level debugging acm 
gough 
