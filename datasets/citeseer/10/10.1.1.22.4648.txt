efficient context sensitive pointer analysis programs robert wilson monica lam computer systems laboratory stanford university ca suif stanford edu cs stanford edu proposes efficient technique contextsensitive pointer analysis applicable real programs 
efficiency summarize effects procedures partial transfer functions 
partial transfer function ptf describes behavior procedure assuming certain alias relationships hold called 
reuse ptf calling contexts long aliases inputs procedure 
empirical results demonstrate technique successful single ptf procedure usually sufficient obtain completely context sensitive results 
programs features type casts pointer arithmetic circumvent high level type system algorithm low level representation memory locations safely handles features implemented algorithm suif compiler system show runs efficiently set benchmarks 
pointer analysis promises significant benefits optimizing parallelizing compilers despite progress advanced research stage 
problems remain solved practical tool 
analysis efficient sacrificing accuracy results 
second pointer analysis algorithms handle real programs 
analysis provides correct results behaved input programs widely 
developed pointer analysis algorithm addresses issues 
goal analysis identify potential values pointers statement program 
represent information points functions 
consider heap research supported part arpa contract dabt nsf young investigator award intel foundation graduate fellowship 
proceedings acm sigplan conference design implementation la jolla ca june pp 

copyright fl acm allocated data structures global stack variables attempt analyze relationships individual elements recursive data structures 
interprocedural analysis crucial accurately identifying pointer values 
conservative estimates possible analyzing procedure isolation 
straightforward approach combine procedures single control flow graph adding edges calls returns 
iterative data flow analysis graph relatively simple suffers problem unrealizable paths 
values propagate call site callee procedure back different call site 
algorithms attempt avoid unrealizable paths tagging pointer information abstractions calling contexts 
algorithms inappropriately combine information different contexts 
emami proposed context sensitive algorithm completely procedure calling contexts :10.1.1.25.6013
prevents values propagating unrealizable paths guarantees analysis procedure calling context completely independent contexts 
procedure may behave quite differently context due aliases inputs context sensitive analysis keeps behaviors separate 
calling context practical small programs 
larger programs exponential cost quickly prohibitive 
interval analysis successfully analyze side effects scalar array variables fortran programs approach combines context sensitivity efficiency 
technique summarizes effects procedure transfer function 
call site procedure invoked computes effects procedure applying transfer function specific input parameters call site 
provides context sensitivity call site 
interval analysis relies able concisely summarize effects procedures 
unfortunately pointer analysis amenable succinct summarization 
effects procedure may depend heavily aliases hold called 
evaluation transfer function summarizes pointer assignments procedure may simpler running iterative algorithm original procedure 
propose new technique completely contextsensitive sacrifice efficiency 
approach insight procedures typically called aliases inputs 
necessary completely summarize procedure potential aliases occur program 
idea generate incomplete transfer functions cover input conditions exist program 
incomplete transfer functions simple partial transfer functions ptfs applicable calling contexts exhibit certain alias relationships 
developed efficient technique isolates set relevant aliases ptf definition 
analysis embraces inelegant features language hard analyze commonly 
safely handles arbitrary type casts unions pointer arithmetic 
assumes pointers may stored memory locations regardless types declared locations 
standard library functions may change values pointers provide analysis summary potential pointer assignments library function 
implemented algorithm suif compiler system measured analysis times set benchmark programs 
empirical results show technique successful needs generate ptf procedure program 
organized follows 
introduce major concepts approach give outline algorithm section 
describe representation memory locations pointer values section 
section explain intraprocedural portion algorithm 
section describes compute effects procedure calls 
discuss related section experimental results section 
major concepts section describes major concepts design pointer analysis algorithm 
introduce general approach partial transfer functions efficient means provide context sensitivity 
describe specific design partial transfer functions algorithm 
provide complete outline algorithm 
partial transfer functions provide insight define transfer functions pointer analysis consider informal summary simple procedure target points target initially pointed 
int int main test test example program case point locations target points target initially pointed 
case ii definitely point exactly location target retains original value 
case iii may point locations targets definitely target may retain original value point target pointed initially 
example illustrates important points 
aliases inputs procedure determine behavior 
particular set aliases summarizing procedure relatively easy 
second simple statement procedure complete summary fairly complex 
computing full summary procedure cycles recursive data structures prohibitively expensive 
main idea algorithm need summarize procedure possible aliases inputs 
need find summaries apply specific alias patterns occur program 
simple example case applies calls alias pattern totally different parameters 
case ii applies call 
necessary consider case iii particular program 
basic approach comparison traditional interval analysis illustrated 
traditional approach define complete transfer function maps entire input domain procedure corresponding outputs 
develop set partial transfer functions ptfs applicable subset input domain 
shown domains partial functions disjoint union domains necessarily cover possible transfer function procedure partial transfer functions inputs 
potential inputs occur practice need ptfs inputs occur 
means complexity ptfs taken lower full transfer function 
design ptfs trade complexity individual ptfs applicability 
making ptf complicated increase size input domain fewer ptfs need computed 
complete transfer function covers possible inputs trade 
extreme point input space separate ptf 
ptfs reused inputs exactly values context created 
initial values specify input domain ptf 
analysis encounters call procedure input values reuse final values recorded ptf 
technique commonly known memoization 
specific input values alias patterns determine behavior procedure symbolic names called extended parameters input values 
extended parameter represents locations reached input pointer procedure 
object represented extended parameter 
similar invisible variables defined emami :10.1.1.25.6013:10.1.1.25.6013
procedure extended parameter represent location initially pointed represents call call 
calls inputs aliased create new extended parameter location accessed 
call hand point location create extended parameter represent common location 
pointer global passed procedure treat extended parameter 
necessarily want know specific value pointer 
example call parameter represents global variable 
directly parameter able reuse ptf call 
extended parameters represent global variables referenced pointers extended parameters represent global variables referenced directly 
global referenced directly pointer input procedure extended parameter takes care alias 
important create extended parameters relevant procedure 
aliases involving parameters referenced prevent reusing ptfs 
solution create extended parameters lazily 
create extended parameters referenced 
contrast emami create invisible variables input pointers potentially accessed 
require unnecessary overhead create parameters referenced limits opportunities reuse 
extended parameters play important roles 
extended parameters part name space procedure 
procedure distinct name space consists extended parameters local variables heap storage allocated procedure children 
derive parameter mapping call site map caller name space callee vice versa 

initial points function ptf specifies input domain 
aliases inputs ptf main part input domain specification 
definition extended parameters initial pointsto function succinctly captures information 
alias call example initial points function records point extended parameter shown 
similarly totally disjoint points relationships reflect lack aliases calls 
initial values final values parameterized ptf calls initial values final values parameterized ptf call 
final points function procedure exit summarizes pointer assignments 
initial points function relatively easy derive points function procedure exit 
figures show final points functions produced corresponding inputs 
analysis operates parameterized name space final points function summarizes procedure parametrically 
parameter mapping particular call site allows translate summary back caller name space 
aliases input domain ptf defined values function pointers passed calls procedure 
function pointer values affect ptf summary determine code executed 
ptf design choice trade complexity ptfs sizes input domains 
explored scheme uses separate extended parameter access path 
design increases reuse considerable cost complexity multiple extended parameters may refer location 
furthermore requires additional analysis potentially infinite access paths finite set 
experience scheme suggests complexity unnecessary analysis 
algorithm outline just create extended parameters lazily create ptfs needed 
way compute unnecessary summaries 
iterative dataflow approach find potential pointer values main procedure 
iterative analysis encounters call procedure new input aliases recursively analyzes procedure current context produce new ptf 
stack keep track current calling contexts 
update initial points functions parameter mappings lazily iterative analysis 
analyzing procedure initial points function empty parameter mapping records actual values formal parameters 
need know initial value input pointer recorded add entry initial points function 
check aliases need look initial values calling context 
pointer referenced calling context add entry caller initial points function 
process continues recursively call graph pointer values known 
initial values aliased existing parameters create new extended parameter represent values record parameter mapping 
section describes situations initial values aliased existing parameters 
iterative analysis encounters procedure call needs find effects call points function 
call pointer passed input ptfs call stack add potential values pointer specifications input domains ptfs 
potential callee procedure check ptfs apply 
involves building parameter mapping comparing input aliases recorded ptf 
input aliases function pointer values match parameter mapping translate final pointer values recorded ptf back current context 
inputs match existing ptfs procedure produce new ptf 
pointer representations programs commonly access memory type casts features override high level types algorithm low level representation memory 
allows handle problematic features straightforward manner 
types identify locations may contain pointers assume memory location potentially hold pointer 
refer locations block memory positions field names 
define new abstraction location set specify block memory set positions block 
part low level representation provides results comparable high level types 
conservative approach may occasionally lead accurate results 
price willing pay order guarantee safe results input programs divide memory blocks contiguous storage positions relative undefined 
block memory may kinds local variable locally allocated heap block extended parameter 
global variables treated extended parameters 
special local variable represents return value procedure 
note heap blocks allocated procedure callees heap blocks passed calling context considered extended parameters 
distinguish heap blocks allocation contexts grouping blocks allocated context 
minimal context information simply statement creates block 
including call graph edges new blocks returned eliminating duplicate edges recursive cycles provide better precision programs 
scheme starting point programs produces far heap blocks 
currently investigating techniques merge heap blocks elements recursive data structure accordance goal distinguish complete data structures place restrictions inputs 
example currently assume pointers written files read dereferenced 
offset stride members location set 
limit allocation contexts include static allocation sites 
sufficient provide precision programs analyzed far 
location sets goal regard aggregates distinguish different fields structure different elements array 
array structures fields locations partitioned sets containing field data containing field data 
pointer analysis combined data dependence tests distinguish different array elements 
represent positions block storage location sets 
location set triple base name block memory offset block stride 
represents set locations ff zg block shown graphically 
offsets strides measured bytes 
expression location set scalar scalar struct struct array array array array array array struct struct table location set examples offset array element size table shows location sets represent various expressions 
field structure identified offset structure 
array stride unused set zero 
array element stride equal element size 
elements array structures field information captured offset 
provide array bounds checking array nested structure access field structure bounds array indices 
bounds rare non standard believe important handle conservatively 
treat array nested structure completely overlaps entire structure 
actual values parameters subsuming existing parameters implies offset stride 
enforce computing offset modulo stride stride non zero 
position location block entirely unknown set location set stride 
means location set includes locations block 
may occur due pointer arithmetic 
recognize simple pointer increments commonly address array elements determine location set strides attempt evaluate complex pointer arithmetic 
memory address input arithmetic expression add result location set base object stride set 
conservatively approximates results arithmetic expression 
positions blocks relative undefined need worry pointer arithmetic moving pointer different block 
summary location set representation advantages 
problems related type casts unions irrelevant high level types 
easy especially dealing pointer arithmetic 
extended parameters discussed section object represented extended parameter 
adding entry function find values pointer calling context 
parameter mapping shows existing parameter includes values reuse old parameter creating new 
simplicity efficiency initial points entry points single extended parameter 
cases initial values aliased parameter create new extended parameter subsumes aliased parameters replace subsumed parameters 
likewise initial values aliased existing parameter include new values subsume aliased parameter new 
illustrates 
parameter created represent targets dereferenced discover targets include value represented value 
create new parameter replaces old parameter scheme reduces number extended parameters loss precision 
acceptable trade purposes subsuming parameters essential algorithm easily actual values parameters negative offsets structures omitted 
aliases involving fields structures bit complicated 
updating initial points function find pointer field existing parameter easily record fact 
encounter pointer field pointer enclosing structure create extended parameter represent field pointer point existing parameter 
fortunately location sets solve problem nicely 
simply allow location set offsets negative shown 
emami solves problem creating parameters structures parameters create parameters referenced 
points functions domains ranges points functions expressed terms location sets 
statement program points function maps location sets containing pointers locations may reached pointers 
points function mapping location sets sets location sets 
important analysis know locations may contain pointers 
high level types points functions contain entries pointers referenced record separately block memory location sets may hold pointers 
information analysis conservatively evaluate assignment potential pointer assignment 
affect precision results eventually analysis finds values may pointers removes spurious results analysis inefficient 
variety optimizations important know location definitely holds certain pointer value 
pointer analysis information enable strong updates assignments overwrite previous contents destinations 
kept track possible definite points values separately unnecessary purposes :10.1.1.25.6013
need information point pointer dereferenced 
assume input legal location dereferenced contain valid pointer 
points functions record valid pointers possibly contained location possibility safe assume value dereferenced 
get benefits definite pointer values overhead tracking separately 
analyzing procedure iterative data flow analysis find points functions procedure 
section discuss process analyzing procedures call statements 
proc pr ptf ptf iteratively analyze procedure changed false foreach nd pr flowgraph predecessors nd evaluated continue nd meet nd ptf nd assign nd ptf nd call nd ptf changed intraprocedural algorithm shows data flow algorithm 
simply iterate nodes procedure flow graph points values change 
visit nodes reverse postorder important know input values evaluating node 
strategy simpler worklist algorithm handles unstructured control flow extra effort 
strong updates strong updates assignments overwrite previous contents destinations important factor precision pointer analysis 
know assignment definitely occur assigns unique location conservatively assume location potentially retains old values 
strong updates node transfer functions non monotonic introduce constraints order flow graph nodes evaluated order guarantee algorithm terminates 
specifically evaluate node immediate predecessors evaluated evaluate assignment destination locations known 
take advantage extended parameters increase opportunities strong updates 
strong update possible destination assignment single location set representing unique location 
location set unique stride base represents unique block memory 
key recognize extended parameter representing initial value unique pointer unique block pointer possible values calling context 
pointer contain possibilities time extended parameter unique block scope procedure 
location points extended parameter actual values parameter single unique location mark parameter unique 
greatly improves ability perform strong updates 
heap block represents storage allocated particular context assume locally allocated heap blocks unique 
hand local variables correspond directly real memory locations unique blocks 
sparse representation analysis interprocedural needs keep entire input program memory gone considerable effort storage space efficiently 
analyze heap data global stack variables possible memory locations included points functions 
fortunately information stored points functions sparse 
pointers typically possible values record possibilities linked lists bit vectors 
points functions usually change adjacent program points incorporate sparse representation described chase 
scheme records points values change node 
sparse points function representation looking values pointer requires searching back assignment location 
current node search back dominating flow graph nodes reach procedure entry searching assignment formal extended parameter compute value initial points function parameter recorded described section 
may add new extended parameters ptfs call stack 
search assignments dominating nodes meet node contain ssa oe functions identify values assigned 
insert oe functions dynamically new locations assigned 
pseudo code handling meet node shown 
oe function look points values predecessor node combine results get new points values 
evaluating dereferences location sets may overlap location set may refer memory location 
values assigned location set observed overlapping locations 
pointer dereferenced building skeleton trees just keep lists assignments sorted bottom traversal dominator tree 
nd ptf ptf iterate phi functions foreach dst nd combine values predecessor foreach pred nd preds look points values lookup ptf dst pred null add points entry assign ptf dst nd evaluating meet nodes iterate overlapping locations look current points function values assigned 
location dereferenced unique location values assigned overlapping locations may overwritten strong update 
case find position strong update lookup function look assignments overlapping locations prior point 
summarizes part algorithm 
nd ptf ptf result null unique find strong update ptf nd find locations containing pointers locs base foreach loc locs loc overlaps find values assigned loc node nd result lookup ptf loc nd return result evaluating dereferences evaluating assignments assignment node flow graph specifies source destination expressions size value assigned 
building flow graph intermediate representation program automatically convert assignments points form 
variable right hand side assignment refers contents variable add extra dereference expression right hand side 
source destination expressions may involve pointer arithmetic 
simple increments included strides location sets 
simply keep list constant location sets dereference subexpressions arithmetic expressions 
process evaluating assignment begins finding locations identified source destination expressions 
evaluate expression iterate constant location sets dereference subexpressions 
constant locations require computation 
dereference expressions may include number nested dereferences evaluate level time 
destination location update points function include values potential source locations 
shows process case size assignment word 
nd ptf ptf nd nd ptf nd nd ptf foreach dst include old values strong update dst unique lookup ptf dst nd null assign ptf dst nd evaluating assignments aggregate assignment multiple words assigned pointer fields sources copied destinations 
source location contains pointer value offset range copied add pointer value corresponding offset destination location 
interprocedural algorithm describe algorithm handles procedure calls 
evaluate effects call points function need find ptf applies calling context 
reuse existing ptf create new 
outlines part algorithm 
calls pointers step evaluating procedure calls determine target procedures 
calls target constant trivial step target may specified function pointer 
fortunately calls pointers nd ptf ptf find record function pointers values targets nd ptf foreach proc pr targets map nd pr map ptf pr map pr nd ptf push pr map pr pop handle recursive call get ptf add new aliases func ptf values map nd ptf exit node reached return defer evaluation nd map nd ptf evaluating procedure calls relatively easy handle pointer analysis points functions record possible pointer values 
function pointer values may expressed terms extended parameters 
situation need know specific values represented extended parameters 
extended parameter included potential target call check parameter mappings call graph find values represents 
function pointer values part input domain specifications ptfs flag extended parameters function pointers record values ptfs 
testing ptf applies input domain ptf specified initial pointsto function values parameters call targets 
test ptf applies check things current context ptf created 
check initial points function entries time order created 
compare values parameters call targets 
point match give go ptf 
basic steps process shown 
process comparing initial points function build parameter mapping 
ptf matches mapping apply ptf current context 
entry initial points function find actual values corresponding pointer current context add results parameter mapping 
map proc pr nd ptf ptf ptf home null check existing ptfs foreach ptf pr map nd ptf inputs new pointer locations true return remove extended parameters map check original context home nd ptf home true home home map nd ptf return home reuse original ptf return pr finding applicable ptf just ptf created operation may create new initial points entries ptfs call stack 
aliases function pointer values ptf match need extend ptf new locations contain pointers 
described section record location sets block memory may contain pointers 
allowing ignore operations involve pointers analysis efficient 
input location contains pointer current calling context ptf created results ptf may complete 
happens procedure extend ptf 
note resulting ptf applicable calling contexts original input domain assuming locations may contain pointers matter efficiency 
existing ptfs applicable need procedure 
general create empty ptf revisit procedure compute summary 
simple approach may waste lot storage 
iterative analysis procedure may evaluate call node times different input values iteration 
create new ptf set inputs lot ptfs apply intermediate results iteration 
solution record calling context ptf created 
existing ptfs match created current context earlier iteration update ptf creating new 
applying ptf find applicable ptf parameter mapping ptf current context translate summary procedure back calling context 
procedure call pointer potential value combine possible summaries perform strong updates applying 
pointsto function procedure exit summarizes effects entire procedure simply translate points entry add result points function call site 
local variables exist calling context remove translating points entries 
recursive calls iterative approach handling recursive calls 
calls pointers identify recursive cycles analysis proceeds 
keep stack record calling contexts detect recursive calls searching back see call target stack 
creating new ptf recursive call just summary ptf call stack 
iteration summary may empty wemay need defer evaluation recursive call 
long path terminates recursion approximate summary eventually provided 
iteration continues reaches fixpoint 
ptf entry recursive cycle approximation multiple calling contexts 
combine aliases function pointer values recursive call site recorded ptf 
may change input domain ptf longer matches original non recursive calling context 
avoid problem record separate input domains recursive ptfs 
specifies original input domain call outside recursive cycle combines inputs recursive calls 
related distinctive features algorithm conservative approach handling features language 
previous simplifying assumptions rule things pointer arithmetic type casting union types bounds array variable argument lists 
analysis points representation similar described emami :10.1.1.25.6013:10.1.1.25.6013
alias pairs 
choi show alias pairs compactly represented transitive reduction strategy 
compact form alias pairs different points representation 
differences precision full alias pairs points functions clearly superior 
points function compact representation works analyzing programs 
scheme naming heap objects taken directly choi limiting arbitrary limit imposed length pointer chains recursive data structures 
limiting provide information algorithm intended distinguish elements recursive data structures 
problem addressed number 
symbolic names represent values pointers passed procedure suggested landi ryder :10.1.1.152.183
non visible variables represent storage outside scope procedure 
emami invisible variables purpose 
extended parameters essentially invisible variables choose subsume parameters initial points entry contains single extended parameter 
similar analysis developed emami algorithm invocation graph separate node procedure calling context 
size invocation graph exponential depth call graph implying algorithm exponential 
algorithm exponential worst case calling context different aliases performs real input programs aliases usually 
expect precision results comparable theirs may differences 
conservative occasionally causes propagate pointer values locations 
price pay get safe results inputs 
subsuming aliased parameters gives precision improve efficiency 
hand results may better extended parameters increase number strong updates 
emami mentioned idea memoization scheme similar algorithm 
algorithm extends design important ways 
parameterize global variables increase opportunities reusing ptfs different contexts 
second keep track pointers referenced procedure 
avoid overhead creating updating irrelevant parameters prevent differing aliases irrelevant parameters limiting reuse 
experimental results implemented algorithm part suif stanford university intermediate format compiler system 
suif flexible infrastructure compiler research 
includes full ansi front able evaluate analysis large realistic application programs 
suif system includes components benefit points information 
just begun take advantage 
illustrate potential report preliminary results points information parallelize numeric programs 
preliminary results number benchmarks including spec benchmark suites 
floating point programs specfp alvinn ear written include 
specint integer programs results compress eqntott 
specint benchmarks contain setjmp longjmp calls asynchronous signal handlers 
eventually plan support setjmp longjmp calls conservative fashion know practical way analyze programs asynchronous signal handlers simple cases signal handlers exit programs 
analyzed unix utilities grep diff number benchmarks landi ryder :10.1.1.152.183
proce analysis avg 
benchmark lines seconds ptfs allroots alvinn grep diff lex compress loader football compiler assembler eqntott ear simulator table benchmark analysis measurements focus making pointer analysis efficient primarily concerned times required analyze various benchmarks 
table shows benchmark programs sorted size 
columns list number source lines number procedures encountered analysis 
third column shows analysis times seconds algorithm running decstation 
times include overhead reading procedures input files building flow graphs computing dominance frontiers 
include time required write results suif output files 
pointer analysis clearly fast practical programs 
cases seconds required analysis 
amount time vary significantly depending size input program characteristics program 
example quite bit larger eqntott ear easier analyze 
general floating point applications easy targets pointer analysis 
complex programs require somewhat analysis time 
analysis times measured statistics evaluate ptfs 
results encouraging 
column table shows average number ptfs procedure 
averages close 
situations procedure ptf due differences offsets strides initial points functions 
combining ptfs situations improve efficiency small loss context sensitivity 
compiler program interesting case examine detail 
program small compiler uses recursive descent parser 
procedure calls lot recursive 
factors cause invocation graph described emami blow nodes 
program procedures 
larger applications exponential size invocation graph completely unreasonable handle 
fortunately results show unnecessary invocation graph node 
points useful different compiler passes crucial parallelization 
pointer analysis show static analysis parallelize loops numerical programs 
current suif uses points determine formal parameters aliased 
detects parallel loops generates spmd single program multiple data code multiprocessors 
standard analyses recognizing loop level parallelism constant propagation induction variable recognition data dependence analysis 
includes passes specific parallelizing programs rewriting loops loops possible rewriting pointer increments array index calculations 
parallelization compiler generates output file contains calls run time library 
percent avg 
time speedups program parallel loop proc 
proc 
alvinn ms ear ms table measurements parallelized programs ran alvinn ear 
instrumented run time system measure sequential execution time spent parallelized portions code 
measurement shown percentage column table 
measured sequential time spent invocation parallelized loop determine granularity parallelism 
averages times shown second column table 
programs compiler managed parallelize major loops 
ran generated code processors sgi 
speedups shown table 
parallelized alvinn achieves speedups 
ear program performs reasonably processors speed processors 
surprising little computation parallelized loop parallelized program suffers lot false sharing 
shown pointer analysis loop multiprocessors 
pointer information generate parallel code superscalar vliw processors alvinn ear perform 
fully context sensitive pointer analysis algorithm shown efficient set programs 
algorithm simple intuition aliases inputs procedure calling contexts 
difficult summarize behavior procedure inputs find partial transfer functions input aliases encountered program 
allows analyze procedure reuse results contexts 
algorithm exponential worst case far performs 
long procedures called alias patterns algorithm continue avoid exponential behavior 
safe reaching limit number ptfs procedure easily generalize ptfs creating new ones 
analysis handle features language 
conservative assumptions necessary ensure results safe 
may occasionally lose precision due conservative assumptions believe important handle kinds code real programs strictly conform ansi standard 
success far encouraging step experiment large real world applications 
preliminary evaluation suggests approach may scale larger inputs procedures require ptf 
need pointer analysis compiler optimizations determine results obtained sufficiently precise 
done believe major step making pointer analysis practical 
wish bill landi generously giving benchmark programs erik ruf providing measurements programs 
reviewers gave helpful comments suggestions 
jennifer anderson shih wei liao chris wilson rest suif group suif 
chase wegman zadeck 
analysis pointers structures 
proceedings acm sigplan conference programming language design implementation pages june 

choi burke carini 
efficient interprocedural computation aliases side effects 
proceedings th annual acm symposium principles programming languages pages jan 
cytron ferrante rosen wegman zadeck 
efficient method computing static single assignment form 
proceedings th annual acm symposium principles programming languages pages jan 
deutsch 
interprocedural may alias analysis pointers limiting 
proceedings acm sigplan conference programming language design implementation pages june 
emami 
practical interprocedural alias analysis optimizing parallelizing compiler 
master thesis school computer science mcgill university aug 
emami ghiya hendren :10.1.1.25.6013
contextsensitive interprocedural points analysis presence function pointers 
proceedings acm sigplan conference programming language design implementation pages june 
hall amarasinghe murphy lam 
interprocedural analysis parallelization preliminary results 
technical report csl tr computer systems lab stanford university stanford ca apr 
harrison iii 
interprocedural analysis automatic parallelization scheme programs 
lisp symbolic computation oct 
hendren nicolau 
parallelizing programs recursive data structures 
ieee transactions parallel distributed systems jan 
irigoin jouvelot 
semantical interprocedural parallelization overview pips project 
proceedings acm international conference supercomputing pages june 
jones muchnick 
flow analysis optimization lisp structures 
muchnick jones editors program flow analysis theory applications pages 
prentice hall 
landi ryder :10.1.1.152.183
safe approximate algorithm interprocedural pointer aliasing 
proceedings acm sigplan conference programming language design implementation pages june 
larus hilfinger 
detecting conflicts structure accesses 
proceedings acm sigplan conference programming language design implementation pages june 
marlowe landi ryder choi burke carini 
pointer induced aliasing clarification 
acm sigplan notices sept 
ruf 
personal communication oct 
wilson suif infrastructure research parallelizing optimizing compilers 
acm sigplan notices dec 

