automating ui generation model composition kurt spencer rugaber computer science engineering dept college computing michigan state university georgia institute technology east lansing michigan atlanta georgia copyright ieee 
published th conference automated software engineering ase october honolulu hawaii 
personal material permitted 
permission reprint republish material advertising promotional purposes creating new collective works resale redistribution servers lists reuse copyrighted component works obtained ieee 
contact lane po box piscataway nj usa 
automated user interface generation environments criticized failure deliver rich powerful interactive applications :10.1.1.17.5641
specify powerful systems designers require multiple specialized modeling notations 
model composition problem concerned automatically deriving powerful correct efficient user interfaces multiple models specified different notations 
solutions balance advantages separating code generation specialized code generators deep model specific knowledge correctness efficiency obstacles result separation 
correct efficient solution maximizes advantage separation run time composition mechanisms 
building user interfaces uis time consuming costly 
systems graphical uis guis nearly source code lines development time attributed ui 
guis usually built fixed set modules composed regular ways 
gui construction natural target automation 
tools successful supporting presentation aspect gui functionality provide limited support specifying behavior interaction ui underlying application functionality 
model approach interactive system development addresses deficiency decomposing ui design construction separate models declaratively specified 
specified automated tools integrate models generate efficient system 
model composition problem need efficiently implement automatically integrate interactive software separate declarative models 
introduces model composition problem presents solution 
model declarative specification single coherent aspect user interface appearance interfaces interacts underlying application functionality 
focusing attention single aspect user interface model expressed notation 
property systems developed model approach easier develop maintain systems produced approaches 
mastermind project concerned automatic generation user interfaces kinds models presentation models represent appearance user interfaces terms widgets widgets behave application models represent parts functions data applications accessible user interface dialogue models represent user interactions ordered affect presentation application 
dialogue model acts glue presentation application models expressing constraints sequencing behavior models 
model specific compilers generate modules code model resulting modules composed 
distinguishing characteristic ui toolkit runtime synchronization model model model dialogue application presentation presentation dialogue application module module module model code generation mastermind model specific code generators independently 
composing code generated multiple models difficult 
model design represents aspects system neutral respect 
inevitably functionality described model overlaps dependent functionality described 
button example specified presentation model behavior button influences behavior models pressing button causes widgets enabled disabled 
effects described dialogue model 
effect pressing button cause application method invoked 
effects described application model 
code generated multiple models cooperate redundancies dependencies difficult resolve 
resolving automatically means behavior different models unified mechanism unification implemented efficiently 
model composition problem concerned automatically deriving powerful correct efficient separate presentation dialogue application models 
fold solution 
formalize models concurrent agents synchronize common events 
second synthesis efficient implementing run time dialogue engine actively synchronizes behavior code generated presentation application models 
results approach examples give evidence show scales 
background issues comprise problem influences solution 
model approaches user interface generation models specified diverse incompatible notations 
characteristic complicates model composition composition mechanisms model may exist 
prior user interface architectures suggests communicating agents structure user interface code 
formal models communicating agents provide called conjunction useful composing partial specifications system 
contribution extension conjunction operator run time composition mechanism 
model generation model approach interactive system development bases system analysis design implementation common repository models 
conventional software engineering designers construct artifacts meaning relevance diverge delivered code model approach designers build models critical system attributes analyze refine synthesize models running systems 
model ui generation works premise development support environments may built declarative models system 
developers paradigm build interfaces specifying models describe desired interface writing program exhibits behavior 
characteristic model approaches restricting focus model single attribute system modeling notations specialized highly declarative 
mastermind presentation model example combines concepts terminology graphic design mechanisms composing complex presentations functional constraints 
dialogue models state event constructs describe user computer conversation 
example notations include statecharts petri nets variety composition mechanisms include state hierarchy concurrency communication :10.1.1.20.6336
mastermind application model combines concepts terminology object oriented design techniques mechanisms composing complex behavior method invocation 
examples illustrate composition mechanisms model may exist model 
clear intra model mechanisms sufficient inter model composition subject 
model composition problem restated need unify behavior multiple models violating rules intra model composition generating efficient code 
multi agent user interface architectures approach model composition prior multi agent user interface architectures provide design heuristics structuring interactive system 
architectures describe interactive systems collections independent communicating agents independent computational units identity behavior 
general frameworks model mvc presentation pac define specific agent roles provide guidance agents connected 
roles prescribed pac framework closely resemble mastermind models 
pac presentation agent maintains state display accepts input user abstraction agent maintains representation underlying application state controller agent ensures presentation abstraction remain synchronized 
mastermind presentation application dialogue models descriptions roles played presentation abstraction controller agents 
mastermind models describe pac agents chose mastermind models compose manner pac agents compose 
specifically presentation application models define actions ordered temporal constraints dialogue model 
ideas formal built prior formal definitions agent composition 
formal models agents pac framework provides heuristic definitions user interface agent roles connections 
generate code models need formal definition agents agent composition 
process algebras lotos formal notations describe concurrent communicating agents 
process algebras particularly useful describing user interface agent composition 
process entity internal structure discovered observing actions participates 
lotos notation specify processes 
lotos process algebra uses temporal operators specify permissible orderings dependences actions 
lotos process performs actions interacts concurrently executing processes 
actions built atomic units called events 
set events process may participate called alphabet denoted ff 
event alphabet processes processes participate actions synchronize processes synchronize event simultaneously participate actions event 
synchronization action offer values observed actions participating event 
complex processes may built combining sub processes ordering operator process sequential composition sub processes conjoining sub processes run independently synchronize set named events 
lotos synchronizing events specified alongside conjunction operator process definition 
brevity conjunction operator naming event set 
abbreviated lotos notation conjunction written alexander uses conjunction compose separately defined application presentation agents 
abowd uses agent separation illuminate usability properties interactive systems 
approaches rely conjunction compose agents defined separately influence 
fact conjunction general operator composing partial specifications system 
idea partial specification imposes constraints variables case agents events mentioned partial specifications 
specifications conjoined common variables satisfy constraint 
define behavior system generated mastermind models behavior consistent conjunction constraints imposed dialogue presentation application models 
results extend conjunction specification tool mechanism composing run time modules 
summary issues addressed solve problem solution generate rich dynamic behavior correctness module composition demonstrated generated modules cooperate efficiently 
mas rich expressive power achieved special purpose modeling notations 
remainder addresses generation correct implementations maximal efficiency preserving expressive power mastermind models 
design requirements recall class model code generator synthesizes run time modules models class 
modules generated detailed knowledge models 
run time modules cooperate prescribed conjunction models generated 
section detailed specification relationship model composition associated modules cooperate run time 
notation subject automatic generation composition run time modules design time models 
module unit code generated single model 
third class construct lotos process define composition correctness 
formal correctness arguments refer types constructs distinguish different fonts 
mas models written sans serif font presentation dialogue application 
lotos processes written capital italic letters respectively 
run time modules written german letters respectively 
briefly define process algebra notation 
suppose behavior agent described lotos process agent perform action synchronizing event denoted behavior point defined process 
systems study deterministic means unique 
processes constructed conjunction sub processes structure preserved synchronization 
ff event observed process observed conjunction processes 
observation important define omega observer function 
need represent architectural embedding equationally 
case refer entire run time system module composed notation 
inter model composition model code generators construct run time module design time model 
code generation strategy model specific reflecting specialization models particular aspect system 
run time modules cooperate cooperative behavior violate constraints imposed models 
inherent distinction behavior limited confines model behavior affects affected models 
inter model composition concerned managing behavior 
behavior highly model specific influences affected behavior specified models 
presentation model example objects implemented graphical primitives amulet toolkit attribute relations implemented declarative formulas run time eagerly propagate attribute changes dependent attributes 
long changes attributes trigger behavior dialogue application models aspects ignored considering model composition 
application model object specifications compiled classes assumption designer extend subclasses provide implementations methods 
long details designer extensions trigger behavior dialogue presentation models behavior may ignored defining model composition 
module entities compose model specific policy 
presentation model example objects compose part aggregation attributes compose formula evaluation dependent attributes 
application model objects compose combination subclassing aggregation polymorphism 
considering models compose details intra model composition abstracted away 
models impose temporal sequencing constraints occurrence inter model actions models contribute values computed entire system 
constraints contributions captured form reason model composition 
chose map inter model behavior semantic domain common models 
domain described lotos notation specifies temporal constraints actions data values 
assume lotos processes derived text model specification 
designers may example need designate actions interest models 
lotos processes capture behavior models composition express essential constraining behavior 
example demonstrate example inter model behavior expressed lotos process 
dialogue model considered print save widget similar user interfaces drawing tools web browsers word processors 
widgets allow user print document printer file disk call option printing option saving 
options specific printing print orientation portrait vs landscape saving file save typically enabled disabled depending user choice task 
ordering dependencies reflected dialogue model widget 
inter model behavior dialogue model described lotos process 
process print save go cancel layout kbd lpr write filename string doc doctype port bool exit go lpr write layout kbd 
cancel exit process go lpr write layout kbd exit layout go lpr layout 
save go lpr write layout kbd endproc process go lpr write layout kbd exit edit go write kbd 
print go lpr write layout kbd endproc process layout go lpr layout exit layout port layout go lpr layout go lpr port doc exit endproc process edit go write kbd exit kbd filename edit go write kbd go write doc file exit endproc endproc print save dialogue process 
process synchronize events follow square brackets 
example events print save go cancel layout kbd line define points synchronizing presentation events lpr write line define points synchronizing underlying application 
parameters filename line store name default printer user selected filename respectively 
parameter doc line represents document printed saved parameter port line represents print orientation portrait true landscape false 
separate presentation model defines buttons labeled send printer save file print cancel pressed offer events print save go cancel respectively 
presentation model contains pair radio buttons specify orientation 
buttons display graphics page portrait landscape mode selected offer event port value true choice portrait orientation false landscape orientation 
text entry box user type file name 
user edits name text box responds offering kbd event parameterized contents string typed far 
note actual keys pressed returned editing functionality best handled text widget consider inter model behavior 
separate application model defines procedures issuing print request saving file disk 
procedures responsive events lpr write respectively 
actions synchronize events offer number values including printer name filename filename 
temporal structure dialogue presentation application model composition behavior specification line 
behavior behavior process defined lines caveat may disabled terminated time observation cancel event 
process represents interactions application invocations happen order send document printer 
functionality expressed sub process layout defined lines 
behaves layout normal case disabled save event observed 
recall save event offered user alternates send printer button save file button presentation model 
process defined lines likewise behaves process edit defined lines normal case disabled event print observed 
note mutually disabling means user switch back forth printing saving times likes hitting go button 
models modules processes processes useful understanding relationship models modules 
relationship complex describe single model models composition 
formalize correctness conditions mastermind dialogue model 
similar formalization exists mastermind models 
shows relationship dialogue models members set dialogue run time modules generated dialogue models members set inter model behavior dialogue models members set process 
relationships sets defined functions map members set dialogue ad gamma gamma gamma gamma 
process cd tr omega gamma gamma gamma gamma 
dialogue compiler correctness 

function cd dialogue maps dialogue models run time implementation modules 
think cd description dialogue model compiler 
function ad dialogue process maps dialogue models lotos processes describing inter model behavior 
think ad interpretation dialogue model 
function omega maps run time implementation modules kind event traces observable behavior 
think omega observer run time behavior 
function tr process maps lotos process set possible action traces observed process 
sets functions related commutative diagram 
externally observable model behavior mapped lotos process ad set traces module externally observable actions recorded omega say dialogue model dialogue consistent module cd trace oe omega gamma cd set tr sequences tr omega gamma cd 
inter model behavioral interpretation agrees exactly observable behavior run time module generated commutativity diagram requires property dialogue model expressible set dialogue 
model synthesis correctness relationship models modules extended specify correctness module composition 
functions ad map models lotos processes 
processes compose conjunction 
run time module combinator combines modules single module actions observable omega function 
shows constraints behavior entities 
presentation dialogue application omega gamma cd tr ad module composition correctness 
presentation dialogue application 
code generated models correct observable behavior oe oe legal trace conjunction models vice versa 
equation defines conditions necessary correct module composition assuming model specific interpretation actions 
serves specification design requirements 
section implementation satisfies requirements 
design turn design run time synchronization module model specific compilers 
correctness conditions impose constraints designs 
fortunately constraints require model specific knowledge graphical concepts presentation model data layout application model 
allows design generic infra structure inter model cooperation assume design crafting model specific code generation strategies 
design refines notions action synchronization form basis inter module communication run time objects implement constraints 
run time control concern designing system implementation software control 
control implemented ways 
procedural systems example control synonymous location code concurrent systems control distributed managed multiple objects concurrently 
user interface software generally implements event driven sequential control scheme single thread provides facade concurrency dispatching small callback routines input device activity sensed 
interest providing single style control systems adopt eventdriven sequential implementation 
choice software control implementation influences design actions synchronization 
actions presentation module correspond input device behavior mouse keyboard events 
events invoke callback procedures implement synchronization callback 
means temporal structure inter model behavior implemented way legal actions enabled illegal actions disabled action synchronization new actions enabled disabled 
model represent temporal structure functionality provided models abstracted context independent actions implemented method callbacks 
design temporal structure dialogue model represents synchronization needs entire program 
natural treat dialogue module arbiter system control 
architecture dialogue module reactive component computes enabled disabled status actions response action synchronizations modules collections code invoked actions synchronize 
run time action causes dialogue module compute state system 
state actions embedded modules enabled disabled activated appropriate 
action synchronization dialogue module computes set enabled actions function observed actions 
actions thought entities enabled disabled activated omniscient dialogue agent interpretation said actions structured occur action activated 
action objects run time entities encapsulate status enabled disabled observable actions activation procedures specialized model specific code generators implement desired functionality 
shows design omt object model 
class action design declares operation enable supplied subclass 
omt denotes subclassing triangle point connected superclass lines emanating subclasses 
mastermind event data bool enable enabled true return true bool enable enabled true return false eager external void observe data data void set data input output data get synchronizes action void disable void activate ordered offers bool enable enabled bool object model synchronization mechanism 
generated code presentation model actions associated presentation module interaction objects application model actions associated invocation methods objects application module 
presentation model action offered graphical object associated action enabled ready accept user activity 
graphical object detects activity signals rest system action synchronization occurring 
action application model offered method application module invoked 
object model distinguishes interpretations action enabling subclassing action external eager 
synchronization requirements eager action met action enabled external actions require enabled observing activity generated external entity mouse 
activity posted issuing observe message 
class action synchronizes association class event 
objects class event represent process events multiple actions synchronize 
event objects encapsulate unique name synchronization requirements actions multiple models 
object class action action model object class event distinct event 
lotos actions accompanied value inputs outputs 
designed class action aggregate zero objects parameterized class 
omt denotes aggregation diamond operator 
zero objects class parts object class action 
parameter data names data type parameterizes class 
parameterized class denoted box dashed box upper right corner define local attributes operations signatures vary parameter 
subclasses input output parameter value specialize set get operations 
operations supplied model specific code generators know supply receive values model specific contexts 
lotos actions syntax action input output input variable type output expr information code generator action event name value offers inputs outputs name type variable store input expression compute output 
information sufficiently denotes action object framework 
run time execution event objects internalize synchronization requirements multiple actions issue activate get set messages action objects callbacks 
event objects contain pointer action objects synchronize vice versa 
action object enabled dialogue module return value true false recorded corresponding event object synchronization requirements tabulated 
return value false indicates action external case event object records action enabled waits external confirmation action chosen user 
synchronization requirements met event issues appropriate activate get set operations instructs dialogue module compute state 
process described greater detail 
results status evaluated solution model composition problem respect power correctness efficiency 
power able express user interfaces case studies modeling notations 
tested quality user interfaces specific examples print save widget described airspace runway executive supports air traffic controller atc 
demonstrates ability generate common highly reusable tasks standard graphical user interfaces 
demonstrates ability support complex task direct manipulation interface 
atc example power approach 
flight numbers keyed text entry box airplane graphic augmented flight number appears airspace 
planes come airspace controller keys flight number box 
controller decides change position plane dragging airplane graphic new location canvas 
soon presses holds mouse button feedback object shaped airplane appears follows mouse new location 
mouse released plane icon moves newly selected location 
presentation model atc example quite rich 
specifies airplane graphics uniformly placed lanes specifies feedback objects give users information operation 
real deployment location flights probably change response asynchronous application signals special hardware monitors 
deployment signals connected external actions fit framework change 
details case study print save dialogue see 
correctness addition able generate manage powerful user interfaces composition modules correct 
aspects approach require justification grounds 
design runtime action synchronization 
addresses theoretical issues involved 
practice design quite robust 
second synthesis runtime dialogue component member set dialogue model 
mentioned earlier mas dialogue model notation thought syntactic sugaring subset full lotos 
implemented prototype dialogue model code generator correctness validated 
efficiency measured efficiency empirically applying prototype code generator atc example 
generated dialogue modules connected hand coded presentation application modules 
examples tried observed time delays interactions 
quantified results instrumenting source code measure computation resources wall clock time 
maximum time taken interaction seconds 
compares de facto hci benchmark response time seconds 
believe heavyweight middle ware solutions implementing synchronization object request brokers competitive results 
currently completing new industrial strength dialogue code generator 
new code generator incorporating state space reduction technology improve interaction time prototype function depth dialogue expression constant time interaction 
working adapting presentation model code generator described infra structure 
generating code specialized modeling notation easy 
integrating code generated multiple models difficult 
integration complicated mere linking compiled object modules 
models declarative assume entities named model behavior elaborated model 
designers want treat presentation temporal context effect separately aspect isolation expressed highly specialized language clear required express aspects 
interactive systems composition conjunction essential separating complex specifications manageable pieces 
unfortunately programming languages java provide conjunction operator 
operator difficult implement correctly efficiently fact try implement 
casting model composition formal framework includes conjunction able express correct solution refine correct solution efficient design 
key difference approach middle ware solutions implement object composition general event registry callback 
results contribute body automated software engineering research ways 
framework practical solution helps automate engineering interactive systems 
second formal methods identify design constraints subsequent refinement constraints object oriented design may serve model researchers trying deal model composition context code generation 
formality approach allowed minimize design constraints key arriving powerful correct efficient solution 
abowd 
formal aspects human computer interaction 
phd thesis university oxford 
alexander 
structuring dialogues csp 
harrison thimbleby editors formal methods human computer interaction 
cambridge university press 
bass coutaz 
developing software user interface 
sei series software engineering 
addisonwesley 
brinksma 
iso specification language lotos 
computer network isdn systems 
browne declarative descriptions model user interfaces mastermind 
paterno editors formal methods human computer interaction 
springer verlag 
castells szekely 
declarative models presentation 
iui international conference intelligent user interfaces pages 
coutaz 
pac object oriented model dialog design 
human computer interaction interact pages 
harel :10.1.1.20.6336
visual formalisms 
communications acm 
krasner pope 
cookbook model view controller user interface paradigm smalltalk 
journal object oriented programming 
myers amulet environment new models effective user interface software development 
ieee transactions software engineering 
myers rosson 
survey user interface programming 
sigchi human factors computing systems may 
neches knowledgeable development environments shared design models 
intelligent interfaces workshop pages 
bastide 
validating interactive system design verification formal task system models 
working conference engineering human computer interaction 
puerta 
mecano project comprehensive integrated support model user interface development 
computer aided design user interfaces 
rumbaugh object oriented modeling design 
prentice hall 

automatic generation interactive systems declarative models 
phd thesis georgia institute technology 
szekely declarative models user interface construction tools mastermind approach 
bass unger editors engineering human computer interaction 
chapman hall 
pedro szekely ping luo robert neches :10.1.1.17.5641
interface builders model interface tools 
bridges worlds human factors computing systems interchi 
zave jackson 
conjunction composition 
acm transactions software engineering methodology 
