object ownership dynamic alias protection james noble object technology group microsoft research institute macquarie university sydney australia kjx mri mq edu au david clarke john potter practical object technology theory engineering research group school computer science engineering unsw sydney australia 
csee unsw edu au potter cse unsw edu au object oriented programs allow arbitrary aliases objects 
objects encapsulation boundaries aliases programs hard understand especially hard debug 
propose explicit run time notion object ownership control aliases objects dynamically typed languages 
dynamically checking object ownership program runs ensures program maintains encapsulation topology intended programmer 
aliasing endemic object oriented programs class prototype 
objects identity uniformly referred essentially object dependencies objects program arbitrary 
particularly important undermine programmer attempts build encapsulated aggregate objects objects outside aggregate object hold aliases objects inside aggregate breaking encapsulation aggregate object 
object oriented languages include kind protection names object slots internal sub object stored private slot name protection insufficient protect objects error oversight programmer write public method returns value private slot 
number proposals address problem classical object oriented languages 
including islands balloons provide full alias encapsulation statically restrict programs aliases may cross aggregate object encapsulation boundary 
unfortunately full alias encapsulation forbids objects inside aggregate referring objects outside preventing object contained different collections 
developing model flexible alias protection separates objects inside aggregate categories aggregate representation accessible outside aggregate aggregate arguments may accessible outside provided treated immutable similar distinction aggregation association object oriented design methodologies :10.1.1.23.2115
flexible alias protection defines invariants system behaviour ffl representation exposure aggregate object mutable representation objects accessible aggregate object interface 
ffl argument dependence aggregate depend arguments mutable state 
ffl role confusion aggregate return object role passed aggregate role 
flexible alias protection model object ownership 
object part representation aggregate object owned object visible outside formally object owner articulation point dominator path root system object 
result object deleted garbage collected representation objects owns deleted 
notion object ownership quite general example uml object related association arguments aggregation representation similar ownership relation objects identified object oriented programs 
example illustrates structure object representing university course 
course object represented list students list represented links students list object arguments 
course object articulation point objects list object articulation point links 
course list link link link student student student 
aggregate course object flexible alias protection requires program manipulating course structure maintains invariants representation exposure argument dependence role confusion 
example representation exposure means link objects may accessed outside containing list list articulation point link objects similarly students accessible wider system outside course object 
argument dependence means list object depend mutable state contained student objects 
example list required sorted order student names student changing name render list unsorted quite possibly break methods inside list object depend list sorted binary search sorted list merge 
role confusion means list treat link objects student objects vice versa type example student class inherited link class 
dynamic alias protection existing models flexible alias protection classical classes static typing 
propose explicit run time model flexible alias protection directly object ownership suitable dynamically typed language self 
aims prototype programming compared class programming objects self sufficient object able understood isolated component system enclosing system part 
example prototype languages allow individual object define structure behaviour external class 
necessary groups similar objects created cloning shallow copying prototype object 
inheritance instantiation classes require special programming language support special clone operation objects prototypes object cloned created ab initio structurally independent object system 
aim self sufficiency little surprising prototype languages addressed problems caused aliasing 
object representation exposed depends argument objects object understood isolation enclosing context really self sufficient 
dynamic alias protection scheme aims extend idea self sufficiency address aliasing structured follows 
ownership object established stored special owner field object object class stored special type class field 
ownership information check validity message send 
dynamic alias protection runtime checks objects owner fields exactly way dynamic type checking runtime checks objects type fields 
object ownership propose adding owner object program 
owner field simply stores object owner holds object program 
object owner may set explicitly created may left free represent object owner may initialised special value proto object prototype 
object distinguished root system self lobby 
owner fields system constrained form forest trees rooted lobby free proto objects owner field pointing direction root tree 
intuitively objects making aggregate representation owned aggregate 
shows ownership structure course example 
course object owner list object list owner links links reachable links 
similarly course object owner student objects students reachable course list links 
course list link link link student student student 
ownership structure course object object pathnames object ownership modeled giving pathnames objects similar pathnames file system pathnames necessarily uniquely name objects 
object conventionally local name name type class object pathname concatenation owners local names local name 
lobby implicitly start path simple paths mean lobby 
path refers object owned object turn owned object lobby 
simplify presentation assume object uniquely named pathname 
objects pathnames unique object local names unique owners practical system arranged simply objects underlying identifiers memory pointers local names 
continue course example main course object pathname course list pathname course list students pathnames course course links inside list course list link course list link 
ownership containment pathnames concept object ownership clearer object owner pathname object element object local name removed 
object owns object part representation pathname pathname extended local name owns owner assuming didn know ownership structure shown deduce object pathnames course list owner course list link course list link direct prefix pathnames 
pathnames illuminate object containment 
containment transitive closure object ownership object contained object containing object contained objects owner owner owner 
terms pathnames object contained object container object pathname prefix contained object pathnames 
contains prefix example list contains links owns course contains list students owns course contains links contained list course owns lobby contains 
alias protection rules dynamic alias protection uses object ownership enforce invariants flexible alias protection 
aliasing problems occur internal state aggregate object changed alias going interface object 
aggregate state changed outside representation exposure aggregate depends mutable state external object argument dependence 
object ownership forbid accesses imposing rules system representation rule arguments rule 
representation rule avoid representation exposure prevent object receiving message crosses object outside example link objects may accessed list course 
enforce representation rule message sends system disallows messages break encapsulation 
representation rule states sender object send message receiver object receiver owner contains sender 
rep owner contains effect rule message sends proceed originate parts system contained receiver owner 
call set objects receiver object extent 
extent rep way think messages may go number levels containment hierarchy lobby go level get implementation 
going level mean message penetrate object encapsulation boundary 
message sends meet rule raise dynamic representation rule check exception terminating message send way message fails dynamic type test raises understand error smalltalk dynamic cast raises class cast exception java 
argument rule representation rule prevents representation exposure address argument dependence 
argument dependencies occur object depends information lying outside contain 
basic representation rule rep preceding section distinguish messages sent object arguments messages sent object representation 
representation rule message may pass sender argument object outside argument object modified independently sender 
argument dependence occur message passed object sent object doesn contain 
message sent object contained receiver cause argument dependence contains combining rule basic representation rule rep produces revised representation rule rep prevents argument dependence representation exposure rep owns owner contains contains owns 
unfortunately revised rep rule restrictive allows object send message direct representation 
prevents message sends objects arguments messages sent arguments cause argument dependence 
argument dependence arise information change flows object outside object depends mutable state arguments 
reason introduce argument rule permit sending messages arguments messages cause argument dependence 
argument rule requires messages sent object arguments fit categories 
messages sent arguments ffl access mutable state ffl return information sender 
call messages access mutable state immutable messages messages return information sender way messages 
necessary term mutable messages describe normal messages may access mutable state return information sender 
argument rule applies primary representation rule rep applies revised rule rep arg owner contains owns dynamic alias protection system messages covered rep arg rules alias protection exception raised 
example list send mutable messages links course send mutable messages students 
list links send mutable messages students list depend arguments send immutable way messages 
asymmetry representation argument rules important 
representation rule defined terms direct ownership argument rule defined terms transitive containment 
protect integrity internal implementation objects representation rule containment object representation able exposed message send go arbitrarily deep object representation course sending message link expose list representation 
immutable messages operationally immutable messages naively implemented flag keeps track mutable sends versus immutable sends 
mutable messages may access mutable state read write objects variables immutable send attempts access mutable state runtime mutable state exception raised 
message send mutable default thread begins executing immutable message messages thread immutable original immutable message returns 
order rule practical programming language needs able express idempotent computations easily 
example language incorporate purely functional constant expressions single assignment slots objects cecil 
way messages way message send information may flow back receiver sender message 
means way messages may return results methods called messages return results results delivered message sender 
channels information flow back receiver disabled particular receiver raises exception processing message exception communicated back sender 
advantage way messages read write mutable state receiver allow information flow objects arguments 
example assuming windows gui library owned lobby object send way message update display window 
observer pattern typically uses kind design 
role confusion role confusion represented type parameterisation static alias protection systems :10.1.1.23.2115
problem static systems containers record ownership types objects contain ownership checked dynamically objects removed containers 
dynamic alias protection object records ownership owner field ownership violations detected dynamic rules including result role confusion static system 
discussion dynamic alias protection object ownership interact language features particular creating new aggregate objects cloning prototype corruption problem 
discuss variety possible extensions dynamic alias protection 
clone existing clone primitives shallow copying object deep recursively copying object objects refers ideally duplicating copied object 
clones produces useful copy aggregate object shallow clone copies top level object deep clone copy aggregate plus argument objects belong inside aggregate aggregate refers assuming deep clone attempt clone object system 
object ownership guide actions clone primitive cloning aggregate object representation cloning aggregate arguments 
cloning objects owned transitively object cloned keeping necessarily external objects intact 
shallow clone deep clone operationally ownership clone operation take account issues 
clone reaches candidate object cloned traverse candidate object owner field see owned possibly transitively object cloned 
candidate object part cloned object representation representation object transitively part cloned object cloned argument object cloned 
second clone operation aware structure objects cloning graph tree take care clone object typically maintaining map object clone 
owner fields new aggregate object initialised mirror original aggregate owner field new aggregate set free 
shows result cloning list inside course 
list representation links cloned new list shares argument students original list 
contrast shows result cloning course entire course replicated including constituent list links students ownership structure 
prototype corruption object ownership addresses prototype corruption problem 
problem arises prototype modified program typically prototype cloned prototype clone prototype directly incorporated running program 
set prototype owner field special value proto marks object prototype 
value proto representing object owns root system lobby 
prototypes owned objects system arguments rule prevents corrupted objects 
unfortunately cloning object requires access object mutable state strict interpretation mutability rule prevent prototypes cloned 
mutability rule relaxed object owner proto objects may cloned accessed 
prototypes owned root system extent system 
considering calling sheep clone dolly 
course list link link link student student student list link link link 
cloning list course list link link link student student student course list link link link student student student 
cloning course sibling rule considering number extensions ownership scheme 
representation rule limits collaboration subsidiary objects implementing aggregate object owned aggregate access mutable state fact access mutable state double dispatch object 
example mutable state link objects accessed list object owns link object change link object 
core problem kind auxiliary objects represent abstractions right implement abstractions 
auxiliary objects representation rule weakened auxiliary objects access mutable state auxiliary objects provided owned object 
call sibling rule auxiliary objects owned parent object 
sibling owner owner containment representation rule prevents mutable state object representation accessed outside object avoids problems representation exposure 
interesting technically representation rule prevent representation exposure object may keep object belonging object representation 
representation rule ensure messages sent exposing exposure practical effect 
sense representation argument rules control aliasing apply message sends pointers 
prevent causing problems programmers 
forms dynamic typing means practice errors detected long situation caused passed 
part representation handed object error detected object sends exposed representation object message 
key point objects may legitimately refer object objects send object message object owner objects transitively owned owner object extent defined basic representation rule 
ensures object owner articulation point path object 
rule enforces condition points extent rule checks non self send message sent receiver extent argument passed message message returns sender extent message return value 
operationally rule checked inspecting owner field arguments return value non self message send comparing chain owner fields starting message receiver arguments sender results lobby 
owner argument result receiver sender owner chain 
exporting sibling rule cover cases 
external iterator example may need access internal representation object iterating 
iterator auxiliary object auxiliary objects access representations directly send messages 
problem addressed allowing objects export objects granting exported objects access representation allowing send messages objects 
example export operation iterator placed aggregate object access control list 
mutability rules extended objects considered owned object owner field exported objects object access control list 
related number prototype languages included support object ownership basic inheritance 
amulet garnet allow objects parts slots object cloned parts cloned 
built objects composition hierarchies paths access internal components aggregate objects similar schemes suggested smalltalk 
object ownership proposed eiffel annotating fields private hold representation objects protected hold objects belonging representation owner object 
similarly dee language informally marks variables show refer inside outside aggregate 
aliasing control mechanisms object oriented languages implicitly introduce notion object ownership 
example island bridge class balloon type effectively owns objects contained scope island balloon respectively 
interesting compare dynamic alias protection scheme static flexible alias protection scheme 
flexible alias protection dynamic alias protection aim provide guarantees programs aliasing behaviour totally different mechanisms provide guarantees 
schemes illustrate classic trade offs compile time run time checking flexible alias protection uses annotations static types called modes checked compile time dynamic alias protection uses annotations objects owner fields checked run time 
static scheme restrictive example forbids containers objects heterogeneous ownership impose execution overhead dynamic scheme 
explicit rule role confusion rule required dynamic scheme object knows owner passing object aggregate change object ownership 
related date dynamic static alias protection schemes rely uniqueness forbid mutable message sends certain objects permitted number constrained 
great advantage prototype languages support independent objects 
objects classical object oriented languages objects dependencies objects accessing objects inter object 
described proposed dynamic model alias protection prototype languages explicit notion object ownership 
object extra owner field field maintain restrictions messages objects receive 
controlling effects aliasing dynamic alias protection objects prototype languages self sufficient programs easier understand debug 
anonymous reviewers comments 
supported microsoft australia pty 
earlier version discussed oopsla workshop thinking prototypes 
ole agesen lars bak craig chambers bay wei chang urs holzle john maloney randall smith david ungar mario wolczko 
self programmer manual 
sun microsystems stanford university edition 
paulo almeida 
types controlling sharing state data types 
ecoop proceedings june 
blake cook 
including part hierarchies object oriented languages implementation smalltalk 
ecoop proceedings pages 
springer verlag 
gunther 
object oriented programming prototypes 
springer verlag new york 
alan borning 
programming language aspects constraint oriented simulation laboratory 
acm transactions programming languages systems october 
campbell ritchie 
sheep cloned nuclear transfer cell line 
nature march 
craig chambers 
cecil language rationale 
technical report department computer science engineering university washington 
david clarke john potter james noble 
ownership types flexible alias protection 
oopsla proceedings 
david clarke ryan john potter james noble 
object ownership order 
mri technical report submitted publication 
david detlefs rustan leino greg nelson 
rep exposure 
technical report src research report dec systems research center july 
martin fowler kendall scott 
uml distilled applying standard object modeling language 
addisonwesley 
erich gamma richard helm ralph johnson john vlissides 
design patterns 
addison wesley 
peter patrice 
copying sharing aliasing 
proceedings colloquium object orientation data bases software engineering montreal quebec may 
john hogg 
islands aliasing protection object oriented languages 
oopsla proceedings november 
john hogg doug lea alan wills dennis richard holt 
geneva convention treatment object aliasing 
oops messenger april 
stuart kent ian 
encapsulation aggregation 
tools pacific 
minsky 
alias free pointers 
ecoop proceedings july 
myers guise dannenberg vander zanden marchal 
garnet comprehensive support graphical highly interactive user interfaces 
ieee computer 
brad myers rich mcdaniel rob miller alan patrick andrew ellen andy alex 
amulet environment new models effective user interface software development 
technical report cmu human computer interaction institute carnegie mellon university 
james noble taivalsaari ivan moore editors 
prototype programming concepts languages applications 
springer verlag 
james noble jan vitek john potter 
flexible alias protection 
ecoop proceedings 
john potter james noble david clarke 
ins outs objects 
australian software engineering conference 

working objects software engineering method 
manning publications 
taivalsaari 
critical view inheritance reusability object oriented programming 
phd thesis university 
