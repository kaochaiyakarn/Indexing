providing smoother quality layered video stream srihari raja ewa zhi li zhang university minnesota minneapolis cs umn edu years popular internet applications web audio video playback stored video streamed server client demand 
rigid playback deadlines coupled constraints resources network bandwidth client buffer video delivery challenging task 
resources limited way may possible deliver full quality video 
situation desirable minimize degradation video quality operating resource constraints 
layered encoding proposed provide finer control video quality video signal split layers subset layers chosen resource constraints met 
trivial task select layers better consistent quality playback ensured network conditions constantly varying 
address layer selection problem layered video delivery show smoother quality video playback provided utilizing client buffer prefetching 
define smoothness criteria design metrics measuring develop line algorithms maximize smoothness case network bandwidth varying known priori 
describe adaptive algorithm providing smoothed layered video delivery doesn assume knowledge bandwidth availability 
results experiments measuring comparing performance schemes 
conclude brief discussion 
ii 
smoothness criteria quality metrics problems assessing performance video delivery scheme lack metric captures user perception video quality 
general higher amount detail played video better quality 
generally agreed visually pleasing watch video consistent albeit lower quality highly varying quality 
metric capture amount detail frame uniformity frames 
consider example sequences layers video stream shown 
top streams consume amount network resources bottom streams 
sequences right smoother ones left 
case degradation quality gradual smoother sequence 
second case smoother sequence fewer changes quality 
smoothness criteria captured metric giving higher smoothing refers perceived video quality bandwidth 
frames frames frames frames fig 

illustration smoothness criteria weight lower layers longer runs continuous frames layer 
propose family metrics attempt measure smoothness perceived quality layered video 
represent smoothness video stream vector form ml total number layers measure associated layer metrics video streams compared lexicographic ordering corresponding vectors 
stream smoothness measure considered better stream words stream higher measure lower layer considered smoother 
metric family computes differently 
consider metrics 
metric measures mean length run layer minimum run 
metric measures expected run length layer words metric gives run length layer expected seen arbitrary frame layer 
metrics computed follows nk minfn total number runs layer lengths runs 
values normalized length video sequence value 
table lists smoothness sequence measured metrics 
assumed length video frames 
run refers sequence consecutive frames shown layer 
top left top right bottom left bottom right consider example bottom left sequence 
total number runs respectively layers 
layers average run length minimum run length length video 
normalized measures 
layer runs length respectively 
average run length corresponding measure 
similarly minimum run length measure 
expected run length layer corresponding measure 
seen relative smoothness sequences reflected metrics table 
metrics easy understand measure different statistic runs 
fail take account absence runs 
example sequence runs layer dropping runs longest run generate new sequence larger values 
new sequence may necessarily perceptually better original sequence 
order address need consider absence frames run 
metric captures notion sum runs length individual run account 
proceed formulate layer selection problem video delivery develop algorithms choose layers smoothness resulting sequence maximized measured metrics 
iii 
problem formulation objective layer selection scheme optimize perceived video quality measured metrics described earlier resource constraints 
formulating problem consider discrete time model frame level 
time slot represents unit time playing back video frame 
simplicity exposition assume startup delay slot server starts video transmission time slot ahead time client starts playback 
words server starts transmission time client starts displaying frame time 
ignore network delay 
table summarizes notation introduce section 
consider video stream frames layers 
size th layer th frame denoted denote network bandwidth client buffer capacity time slot layer sn layer sequence 
dn un refer client table notation length video frames number layers video size th layer th frame buffer occupancy layer slot buffer constraint slot layer bandwidth constraint slot layer layer sequence optimal feasible layer sequence transmission schedule sequence cumulative data sent server amount data sent server slot underflow curve sequence cumulative data consumed client overflow curve sequence maximum cumulative data received client buffer underflow curve respect client buffer overflow curve respect server transmission schedule associated schedule transmits layers frames included layer frame transmitted amount video data transmitted time slot schedule denoted 
server transmission schedule said feasible respect rate constraint violated buffer constraint violated playback constraints violated 
rate buffer constraints denote collection feasible layer sequences fls 
optimal layer selection problem stated follows find feasible sequence maximizes associated metric quality formally find sequence fls quality fls iv 
optimal layer selection section discuss potential approaches designing optimal layer selection algorithms maximizing metrics defined earlier 
simplifying assumptions problem setting 
describe generic layer selection procedure uses metric specific procedure selecting frames layer 
frame selection procedures metrics 
assume layer video cbr frames layer size 
enables maximize metric layer isolation 
simplicity exposition assume layers equal bit rate loss generality units scaled optimizing metrics account absence runs need add additional constraint transmission schedule conserving min note algorithms described hinge assumption 
procedure 
initialization 


procedure fig 

generic optimal layer selection procedure frames unsmoothed frames layers maximizing average run frames maximizing minimum run frames layers maximizing expected run fig 

optimal layer sequences buffer buffer size frame layer buffer bandwidth values integers 
generic optimal layer selection procedure shown described follows 
consider layer lower higher starting layer 
select optimal subset measured metric frames layer treating layer video 
metric specific procedure place perform selection frames layer 
optimal selection satisfy resource constraints residual bandwidth residual buffer available considering layers 
preferable metrics select lower layer frames frames equal size optimal selection frames layer resulting layer sequence optimal 
shows example unsmoothed sequence corresponding smoothed sequences result applying algorithms 
maximum available buffer assumed 
unsmoothed sequence runs smoothed sequences runs longer runs 
run lengths different case optimize respective metrics 
subsections explain algorithms detail 
maximizing average run length average run length sequence maximized minimizing number runs keeping sum runs high possible 
propose algorithm achieves delaying start run late possible stretching far possible 
intuitively new run initiated buffer accumulated adequately terminated buffer drained completely 
shows details algorithm operating layer consists scans length 
procedure 
initialization 

update buffer 
buffer overflow 

select phase 
buffer underflow 

discard phase 

continue phase 
note frame status 

initialization 

buffered 

select frame 
residual buffer limit 
bandwidth 

residual bandwidth 
buffer needed 

adjust buffer 
residual bandwidth 
procedure fig 

algorithm maximizing average run length video forward direction lines backward direction lines 
forward scan viewed step identifies run minimal number runs 
backward scan essentially extends run front time maximizing residual buffer available higher layers 
algorithm forward scan switches select phase frames selected line discard phase frames discarded line 
starts empty buffer discard phase line 
slot buffer occupancy updated line bandwidth constraint violated 
enters select phase buffer full consuming frame line switches discard phase buffer empty consuming frame line 
buffer occupancy stays bounds phase continued lines 
current frame selected discarded current phase line 
forward scan possible accumulated buffer completely drained 
furthermore run buffer may filled early rendered unusable higher layers 
backward scan addresses concerns accumulating buffer late possible needed 
keeps track buffer requirement frame selected frames 
buffer required frame initialized line 
current frame selected current buffer occupancy buffer requirement lines 
residual buffer available layer set subtracting buffer required layer total amount available line 
bandwidth available slot satisfy buffer requirements layer residual bandwidth available layer buffer requirement slot adjusted accordingly lines 
filling buffer closer consumed larger buffer full buffer empty frame drops rate constraint buffer constraint buffer state time sequence discard phase select phase frame plays buffer fig 

illustration sequence residual buffer available higher layers longer runs possible layer 
shows algorithm operation layer example unsmoothed sequence generating smoothed sequence 
top curve represents rate constraint corresponding residual bandwidth available layer unsmoothed sequence 
bottom curve gives buffer constraint essentially rate constraint shifted buffer size example 
assumed data transmitted slot added buffer slot 
middle curve consumption curve corresponding frames selected procedure 
crossover consumption curve buffer constraint curve implies buffer overflow consumption rate constraint curves means buffer underflow 
algorithm described earlier starts discard phase continues dropping frames till th frame enters select phase 
dropped frame caused buffer overflow 
select phase continues selecting frames point forced switch discard phase lest buffer underflow 
selects run frames overflow point backward scan 
illustrate operation algorithm example 
consider layered video clip length frames layers 
assume client buffer units video 
suppose curve represents available bandwidth frame slot 
bandwidth transmit layer residual bandwidth processing layer marked differently 
available bandwidth slot greater layer delivered completely buffer prefetching 
shows buffer occupancy frame slot computed forward scan layer 
slot uses units bandwidth available building buffer layer 
slot buffer full bandwidth available initiates run starts selecting frames 
run terminated slot continued due lack bandwidth buffer size limitation 
scan buffer available bandwidth layer layer layer available bandwidth layer buffer occupancy forward scan layer buffer occupancy backward scan layer selected frames layer available bandwidth layer buffer occupancy forward scan layer buffer occupancy backward scan layer selected frames layer fig 

illustration operation algorithm filled additional bandwidth available kept full possible 
improvements possible sequence generated forward scan 
length run may extended front forward scan buffer built earlier necessary 
example run layer started slot slot 
second larger residual buffer available higher layers buffering frames layer needed 
layer requires units buffer slot built slot building early slot 
increase residual buffer layer 
precisely done backward scan 
buffer occupancy selected layer sequence backward scan layer shown figures respectively 
bandwidth utilized layer residual bandwidth layer shown 
figures give buffer occupancy forward scan backward scan respectively layer 
run layer extended front backward scan 
seen making larger amount residual buffer available layer run continued longer period 
backward scan layer layer shorter runs length single run length 
final resulting layer sequence algorithm shown 
quite obvious description illustration algorithm ensures buffer bandwidth constraint violated slot 
selects feasible subset frames 
furthermore forward scan run started buffer full ended buffer empty length run run guaranteed buffer size 
backward scan attempts extend length run 
easily shown algorithm minimizes number runs maximizes average run length 
maximizing minimum run length algorithm described yields minimum number runs length run size buffer 
variation relative lengths runs 
way maximize minimum run length reduce variance runs 
words pull minimum run length sequence growing shorter runs shrinking longer neighboring runs 
sequence possible grow run buffer empty point 
run longer selecting chunk frames just run discarding equal number frames previous run 
extent growth limited obviously maximum buffer buffer accumulation pattern right run 
noted sequence higher minimum number runs may largest minimum run length possible find sequence minimum run length lesser number runs 
starting sequence find sequence lengths run increasing number runs 
algorithm applies algorithm unsmoothed sequence generate sequence minimum number runs 
considers pair consecutive runs order tries bring lengths close possible 
lets say lengths limit length run grown 
continue pair 
select min number frames run discard number frames run accordingly adjust counter done just iteration 
procedure somewhat similar bubble sort 
proceeds iteration change runs previous iteration 
procedure terminates 
shows resulting sequence simple case unsmoothed sequence corresponding sequence 
applying procedure minimum run length layer increased unsmoothed sequence sequence sequence 
heuristic algorithm works maximizing minimum run length investigation needed develop provably optimal algorithm 
maximizing expected run length quite clear longer runs sequence higher expected run length order maximize expected run length need run long possible 
furthermore extension longer run contributes expected run length shorter run 
reasonable heuristic approach maximizing expected run length start sequence longer sequences longer shortening shorter runs 
algorithm applies algorithm 
considers pair consecutive runs order tries grow longer run 
length consecutive runs limit length run grown 
continue pair 
select number frames run discard number frames run case terminates just scan runs 
shows sequence maximum expected run length corresponding unsmoothed 
adaptive layer selection algorithms discussed far assume bandwidth availability entire duration video known priori 
insights gained algorithms section develop adaptive scheme layer selection assumes knowledge bandwidth availability 
assume presence bandwidth estimator gives precise current bandwidth frame slot 
key questions needs addressed layer selection scheme smoother quality layers frames layer prefetched initiate run layer position run 
line algorithm addresses issues advantage complete knowledge bandwidth availability 
aid forward scan backward scan layer prefetches frames layers lower higher late possible needed 
availability bandwidth known decision layer frame transmit online fashion 
case possible precisely compute buffer needed layer prefetch just time 
adaptive algorithm predict buffer requirements layer tide potential bandwidth position runs layer accumulate sufficient cushion displayed 
adaptive algorithm attempts estimate bandwidth availability past history 
associates target buffer cushion layer adjusts value dynamically bandwidth availability 
target buffer cushion layer corresponds number frames layer need prefetched order continue run layer current bandwidth conditions 
amount cushion small dips available bandwidth cause discontinuity run layer 
may result inefficient buffer help cushion layers 
case line algorithm forward scan ensures prefetched amount backward scan ensures 
absence knowledge bandwidth availability key task adaptive algorithm estimate minimum amount buffer cushion sufficient layer 
run layer sustained average available bandwidth greater amount buffer available layer sufficient cushion variations bandwidth 
possible estimate buffer requirements uninterrupted run layer keeping track available bandwidth goes long stays monitoring fluctuations available bandwidth identify critical layer highest layer subscribed may sufficient buffer available cushion bandwidth fluctuations 
critical layer ideally protect runs lower layers bandwidth extend run layer long possible 
may initiate run layer sustained certain minimum period 
simple adaptive algorithm addresses issues indirect way adjusts target buffer cushion layer tracking buffer usage 
adaptive algorithm dynamically adds layers allocates buffer buffer built drained 
target buffer cushion layer increased current target cushion inadequate avoid discontinuity run due bandwidth drought period 
decreased current target buffer cushion filled remained certain observation window period 
shows procedure adjusting cushion slot refer algorithm described previous section line algorithm 

procedure adjust cushion 


decrease target cushion 



increase target cushion 

procedure fig 

cushion adjustment time 
procedure add layer 





procedure fig 

procedure add new layer target buffer cushion active layers decreased buffer full certain duration lines 
reasons doing 
buffer full sustained period indicates bandwidth certainly sufficient accommodate layers lower layers protected cushion 
second implies buffer scarce need efficiently prefetching conservatively lower layers 
target buffer cushion active layer increased current target cushion filled earlier cushion update time gets drained threshold lines 
way react advance onset drought period conservatively increasing target cushion drained completely 
adaptive algorithm starts new run higher layer sufficient cushion lower layers sufficient bandwidth accommodate layer 
procedure determine add new layer start run 
new run layer initiated target buffer cushion filled layers long term bandwidth sufficient accommodate layer line 
long term mean bandwidth measured exponential averaging current past bandwidth values 
target buffer cushion ensured large layer lines 
higher layers need cushion sustain run lower layers 
new run positioned frame distance away current frame slot line 
intended allow sufficient time cushion buffer filled new layer gets played back client 
new layer critical layer line 
adaptive scheme determines layer transmitted target buffer cushion current buffer cushion values layer 
corresponding procedure 
frame layer transmitted current prefetched amount layer greater corresponding target buffer cushion value line 

procedure xmit 



return 
bmin 

bmin 
bmin 

procedure fig 

procedure determine layer transmission words lowest layer cushion target chosen transmission 
active layers target built layer may added procedure described 
additional bandwidth available filling target active layers layer additional cushion target buffer cushion chosen transmission lines 
words extra bandwidth shared fairly active layers 
vi 
experimental results conducted simulations study performance offline adaptive algorithms described 
mentioned section iv assume video cbr linearly spaced layers size frames scaled unit 
correspondingly client buffer network bandwidth scaled integers 
video consists layers 
length sequence frames 
playback rate set frames sec video lasts period secs 
bandwidth varied mean bandwidth frame slots slots slots 
faster time scale variation mean values modeled markov chain 
resulting bandwidth curve experiments shown 
study performance line adaptive schemes bandwidth conditions varying amount client buffer 
configurable parameters adaptive scheme set follows 
target cushion increase decrease factors set respectively 
words target cushion doubled current target decreased quarter 
threshold trigger cushion increase set current buffer layer drains half target buffer target cushion increased 
observation window period set target cushion values decreased buffer full secs 
values set adaptive scheme conservative protecting lower layers maintaining higher 
compares number layers selected corresponding smoothness achieved line adaptive schemes 
output line scheme small client buffer shown 
expect relatively unsmoothed stream similar generated greedy layer selection scheme adds new layer bandwidth available 
clearly sequence frequent transitions layer levels undesirable 
figures show layer selection line adaptive schemes respectively client buffer 
reasonable expect buffer client accommodate secs layer video 
large buffer line algorithm yields considerably smoother sequence 
adaptive scheme generates smoother sequence line scheme significantly better result greedy selection scheme 
buffer increased size accommodate secs layers video schemes produce smoother sequences shown figures 
particular output line algorithm smooth 
complete knowledge utilizes buffer efficient manner 
output adaptive scheme resembles line algorithm terms layer subscription level smooth fluctuation critical layer 
increased buffer improve output sequence adaptive scheme 
particular segment smoother displays layers 
worth noting sequence appear smoother fluctuations critical layer avoided 
example consider segment frame slots 
improved selecting layer run sustained certain minimum duration 
currently adaptive scheme attempts fill cushion layer start run attempt avoid potentially short runs 
need improve algorithm estimate length run initiate short lived 
line algorithm exhibits similar behavior doesn explicitly avoid short runs 
example frame slot layer chosen briefly 
contribute quality viewing discarding run sequence smoother 
behavior attributed conserving nature line algorithm available bandwidth utilized higher layers selected momentarily buffer full 
algorithm needs modified avoid shorter runs resorting conserving 
need alter metric discount runs shorter certain length 
describe operation adaptive scheme bandwidth curve shown 
adaptive scheme aware bandwidth availability dynamically adjust target buffer cushion layer past history variability available bandwidth 
cushion adaptation process illustrated 
shows target buffer cushion adjusted time layers 
gives ideal amount buffer required layers computed line algorithm 
shows actual buffer occupied layers adaptive scheme 
shows total buffer occupied layers 
contrasting figures see bandwidth varying bandwidth frames line buffer frames line buffer frames adaptive buffer frames line buffer frames adaptive buffer fig 

comparison smoothness achieved line adaptive schemes time offline layer offline layer adaptive layer adaptive layer target buffer cushion time layer layers layers buffer occupancy fig 

illustration cushion adaptation process times adaptive scheme changes target buffer cushion values 
example frame slot actual buffer occupied layer frames half target cushion 
response adaptive scheme doubles target cushion layer similarly layer target cushion doubled 
actual buffer stayed full frame slots causing target cushion layers decreased 
seen target buffer cushion values adaptive scheme trend ideal buffer corresponding layers 
adaptive scheme conservative reactive 
measured average run length expected run length metrics relative smoothness sequences resulting algorithms 
shows performance schemes measured metrics various buffer settings 
average run lengths layers shown expected run lengths 
observed metrics layer algorithms approach unity small buffer sizes 
line algorithm metrics layer approach unity moderate buffer sizes 
hand metrics layer adaptive scheme increase point buffer increases certain buffer size 
discontinuity frame run layer persists large buffer sizes evident 
discontinuity artifact adaptive scheme 
adaptive schemes reacts advance onset congestion may able build sufficient cushion tide sudden prolonged dip available bandwidth 
attempt buffer bandwidth effectively adaptive scheme chooses conservative prefetching may build larger cushion larger available buffer 
fully explain decrease metrics increased buffer sizes requires investigation 
effect larger buffers pronounced higher layers selection limited lack bandwidth lack buffer space 
evident metrics improve faster line scheme reflecting efficient buffer 
seen metrics capture relative smoothness sequences generated line algorithm score higher corresponding sequences adaptive algorithm 
graphs metrics appear quite similar 
indicates conserving algorithm maximizes average run length come close maximizing expected run length metric 
vii 
related problem layer selection delivering layered video received lot attention 
earliest works area proposes receiver driven layered multicast rlm protocol transmitting layered video heterogeneous receivers 
number layers subscribed receiver dynamically varied perceived loss rate join experiments 
studies shown receiver driven schemes rlm exhibit significant instability 
proposals addressing problem inside network assigning higher priority lower layers providing priority dropping routers case congestion 
approaches introduce additional complexity core routers 
available bandwidth modeled stochastic process optimal allocation bandwidth base enhancement layers studied 
assumed client buffer unlimited 
relevant reported 
assume tcp friendly congestion control employed available bandwidth curve sawtooth shape 
address problem buffer allocation layers efficiently absorbing short term fluctuations bandwidth 
quite similar spirit theirs approach quite different 
focus designing metrics capture smoothness criteria developing algorithms maximize metrics 
client buffer offline layer offline layer offline layer adaptive layer adaptive layer adaptive layer average run length client buffer offline layer offline layer offline layer adaptive layer adaptive layer adaptive layer expected run length fig 

performance line adaptive schemes viii 
addressed issue layer selection maximizing perceived video quality resource constraints 
defined smoothness criteria designed metrics measuring smoothness 
developed optimal offline algorithm find sequence maximum average run length network conditions known priori 
heuristic algorithms maximizing minimum expected run lengths respectively 
described simple adaptive algorithm providing smoothed layered video delivery doesn assume knowledge bandwidth availability 
conducted simulations study performance schemes shown small client buffer possible provide significantly smoother quality video playback 
simplifying assumptions preliminary providing smoother quality layered video stream 
specifically adaptive layer selection scheme assume presence bandwidth estimator gives precise current bandwidth frame slot 
amount error estimation available bandwidth 
lead packet losses 
packet losses handled retransmissions 
frames prefetched sufficient time error recovery retransmissions 
trade retransmission lost packets prefetching new frames investigated 
schemes provide smoother video favoring longer runs layer 
need enhanced video streams avoiding short runs 
similarly metric needs refined discount short runs 
real experiments need conducted ascertain relative merit proposed metrics effectiveness proposed algorithms 
schemes layered cbr video streams need extended vbr video streams 
bajaj breslau uniform versus priority dropping layered video proc 
acm sigcomm sep 

feng rexford comparison bandwidth smoothing techniques delivery compressed prerecorded video proc 
ieee infocom kobe japan apr 
gopalakrishnan stability fairness issues layered multicast proc 
nossdav jun 
gopalakrishnan wen simple loss differentiation approach layered multicast proc 
ieee infocom tel aviv israel mar 
mccanne jacobson vetterli receiver driven layered multicast proc 
acm sigcomm oct 
rejaie handley estrin rap rate congestion control mechanism realtime streams internet proc 
ieee infocom mar 
rejaie estrin handley quality adaptation congestion controlled video playback internet proc 
acm sigcomm cambridge sep 
ross optimal streaming layered video proc 
ieee infocom tel aviv israel mar 

zhang aggarwal tsang efficient selective frame discard algorithms stored video delivery resource constrained networks proc 
ieee infocom new york mar 
