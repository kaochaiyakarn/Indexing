lisp shown programmable syntax macro system acts adjunct compiler gives programmer important powerful abstraction facilities provided language 
simple token substitution macros provided cpp preprocessor syntax macros operate syntax trees asts 
programmable syntax macro systems developed syntactically rich languages rich concrete syntax requires manual construction syntactically valid program fragments tedious di cult error prone process 
languages writing program writing macros source complexity 
research solves problems having macro language minimal extension programming language introducing explicit code template operators macro language type system guarantee macro de nition time macros macro functions produce syntactically valid program fragments 
code template operators language context sensitive requires changes parser 
parser perform type analysis order parse macro de nitions parse user code invokes macros 
macros meta programming construct transforms programs programs 
macro languages world second oldest programming language having invented immediately symbolic assembly language 
macro languages provided abstraction facilities assembly language lacked procedure call return advanced control statements data structuring facilities 
additional programming abstraction provided macro system advantage incurring runtime penalty incur compile time penalty 
years macro languages retain programmable syntax macros daniel weise roger crew microsoft research laboratory important providing abstraction facilities language lacks 
example powerful syntax macro facility seamlessly extend provide exception handling simple object system atomic resource allocation deallocation new control statements 
syntax macros syntax macros operate parsing 
actual parameters syntax trees asts discovered parser 
macros produce asts replace code macro invocation downstream compiler operations 
syntax macros declare type ast return 
information parser ensure macro invocations occur return type expected 
example syntax macros return statements occur statements allowed grammar 
syntax macros independently introduced middle 
proposed actual parameters macro invocations parser syntactic type macros return result part macro de nition 
phd thesis cleaned problems syntax macros making leap transformations trees token streams 
macro system substitution macro bodies asts leaves formal parameters replaced invocation time actual parameters 
term syntax macro refers term 
campbell proposed extension extended programmability ad hoc fashion 
implementation reported campbell extension 
major advantages syntax macros syntactic safety encapsulation syntactic abstraction 
syntactic safety guarantees macro user see syntax error introduced macro 
transformations speci ed terms syntactic constituents parser isolates type system base language guarantee construction syntactically valid program fragments users see syntax errors terms code write 
encapsulation refers non interference syntactic constituents 
token macro system substitution yield syntactically valid program produces wrong result unintended interference 
example consider macro formal parameters body includes expression ifa bound respectively token macro system expansion contains string parse intended 
cpp macro writers encouraged parentheses liberally avoid known problem 
syntactic framework interference impossible substitution performed tree level 
macro writer need aware unintended con ict 
syntactic abstraction refers ability add new elements existing syntactic domains introduce new concrete syntax new elements 
syntax macro system literally adds existing syntactic domains 
macro system allows construction new syntactic domains 
programmable syntax macros macro systems di er power transformational engine 
weakest macro system template systems powerful macro systems sport complete programming language 
programmable syntax macro system allows macro writer act compiler writer 
viewed portable mechanism extending compiler 
syntax macro system extended semantic macro system access program static semantic information 
problem constructing powerful simple programmable syntax macro facility syntactically rich languages remained open 
fundamental problems solved delivering programmable syntax macro system language macro language extended version base language guarantee syntactic correctness macro produced code provide convenience simplicity substitution model needed 
research solves problems making macro language extension base language type system ensure syntactic correctness macros macro functions de ned introducing code template operators achieve ect substitution needed macro writer 
presence code template operators language context sensitive requires changes parser 
parser perform type analysis parse macro de nitions parse user code invokes macros 
parser fully re entrant 
example type code written programmable macro meta programming system lacks code templates code substitution facilities consider simple macro abstracts away resource allocation deallocation 
suppose window system required certain painting operations bracketed statements allocate deallocate painting resource examples windows api 
macros idiomatic code fragment hdc ps stmt 
stmtn hdc ps capture idiom macro called painting appear painting stmt 
stmtn straightforward meta programming system function producing code statement stmt 
stmtn stmt type speci er ast statement type stmt paint function stmt return create compound statement create declaration list create statement list create function call create id create argument list create id hdc create address create id ps create function call create id create argument list create id hdc create address create id ps style code plagues meta programming systems 
example meta programming system heavily uses style coding 
solved problem concisely generating syntactically valid program fragments programmable system adding explicit template operators macro language provide convenience substitution semantics 
template operators automatically construct style code code template 
example template operator backquote function written stmt paint function stmt return hdc ps hdc ps means substitute value general pre operator causes evaluation expression pre xes restricted just substitution identi ers 
code template mechanism modeled lisp 
designed implemented programmable macro system attributes programmability macro basis character token syntax semantic full programming language gpm assembler ms maddox lisp scheme repetition conditional bliss repetition hygienic macros substitution pre ansi cpp ansi cpp dimensional categorization macro systems 
macro system ms meta syntactic macro system 
character macros operate character level 
transform streams characters streams characters 
count pre ansi cpp character 
token macros operate tokenized representation program 
operate conjunction tokenizer 
token macro systems simple implement 
assembler macro languages known cpp token 
semantic macros extension syntax macros access decisions semantic information maintained static semantic analyzer 
semantic macros powerful method extending language 

fully programmable macro language plus extended type system plus additional primitive functions 

macros manipulate syntax trees 

rich pattern language speci es concrete syntax syntactic types actual parameters macro invocations 

macros declare syntactic types return 

full type checking macro processing guarantees syntactically valid transformations 

code templates supported backquote forms 

non local transformations possible powerful tool 
sections 
macro language section 
section discuss implementation issues language 
fourth section presents uses examples programmable syntax macros 
section provides implementation status related research directions research 
macro language macro language extended ast types operations asts 
call part program de nes macros macro variables meta program 
metaprogram fully run 
exists runtime possibly part debugging information 
meta programming constructs regular programs invoke macros located separate les mixed le done cpp 
macro language adds new top level declarations grammar meta declarations nitions 
top level declarations keywords syntax respectively declare elements meta program de ne macro transformations 
syntactic descriptions follow conventions 
non terminals original language appear italic type 
non terminals extensions appear boldface type 
concrete tokens appear typewriter type 
alternatives production listed separate lines 
meta notation alternative repetition represented dots indicate previous item may appear times 
macro languages add meta tokens 
syntactic clauses meant augment syntax rules 
reader assume syntax clauses part syntactic de nition macro language 
rules replace add base set rules 
top level declaration declaration function de nition meta declaration macro de nition meta declaration declaration macro de nition syntax macro header compound statement macro header ast speci er declarator pattern macro de nitions parts header body compound statement 
header speci es syntactic type ast returned invocations macro name macro macro pattern invocation 
pointer function meaningful context 
macro pattern speci es concrete syntax required ast types actual parameters 
macro pattern guides parser discovers invocation macro 
compound statement macro body value returns result macro invocation 
pattern pattern element pattern element token pspec identi er pspec ast speci er pspec list token pspec list separator pspec list token pspec list separator pspec optional element token pspec optional preamble element pattern tuple pattern parser parse macro invocations requires detecting repetition presence optional element require token lookahead 
report error speci cation pattern repetition uniquely determined token lookahead 
token pspec clause pattern token indicates optional pspec token invocation pspec 
optional elements constructing statements loops accept example optional step clauses 
example macro headers provide syntax ast speci er 
ast type language type language asts primitives id stmt decl exp num type spec 
type speci er ast speci er ast speci er decl stmt id exp num type spec combining types asts tuples lists 
overload syntax declaring tuples lists structure declarations de ne tuples array declarations de ne lists 
example declaration id id list de nes id list list identi ers 
macro pattern associated type repetition patterns produce lists patterns produce tuples 
operators arrays structs overloaded operate lists tuples 
example id list equivalent lisp instruction car id list id list corresponds cdr 
illegal take address scalar structured ast value 
additional primitive functions macro language includes primitive functions asts 
functions creating new identi ers gensym concat ids id id 
additional functions add conceptual novelty macro system 
prede ned member names extracting components asts stmt declarations declaration type spec 
willing add pattern matching binding mechanisms functional languages 
pattern matching add clarity macro language currently believe extra syntactic mechanism provided macros 
macro language syntactic extensions possible 
excursion principle presence anonymous functions 
experiment macro language includes anonymous functions may passed downwards 
anonymous functions written declaration list expression 
functions return value computed expression needing return statement 
macros perform list manipulations anonymous functions useful 
research indicate anonymous functions remain special element macro language 
example macro headers example consider macro implements painting abstraction shown earlier example 
syntax speci er says actual parameter macro expected statement 
buzz tokens 
macro de nition syntax stmt painting stmt body return hdc ps body hdc ps example macro header consider macro mimics enum automatically provides functions reading writing elements enumerated type 
invocation macro new enum color red blue green header macro syntax decl new enum id name id ids macro new enum returns list declarations 
macro pattern id matches repetitions identi ers separated commas 
macro parser nd repetition informative error message returned user 
pattern contains concrete syntax comma separator appear ast list identi ers returned parser bound ids 
trailing semicolon part syntax macro syntax new enum consistent syntax top level declarations macro returns list top level declarations single declaration 
returns list declarations needs return enum declaration function declarations reading elements new type writing elements new type 
template operators akey innovation research incorporation lisp backquote operator explicitly declaring code templates syntactically rich language 
cpp style macro body macro template substitution happens token matches formal parameter defined keyword 
research body macro compound statement 
explicit code template mechanism explicit substitution operator achieve substitution macro semantics 
backquote character code templates dollar sign operator 
backquote operator pre operator token class unary expressions 
unary expression post expression expression backquote exp expression backquote stmt expression backquote decl expression backquote pattern expression backquote operator returns ast 
ast may placeholders embedded 
rst token backquote determines syntactic type ast backquote return 
open brace signi es statement follows open parenthesis signi es expression open bracket signi es top level declaration 
general form backquote accepts pattern determines ast parse 
backquote exp expression expression backquote stmt expression statement backquote decl expression top level declaration backquote pattern expression pspec template speci ed syntax rst backquote forms convenient shorthand notation expressions statements declarations speci ed general backquote form exp expression 
dollar sign introduces new syntactic domain placeholder 
dollar sign precedes identi er expression 
placeholders may appear backquote expressions 
placeholder signi es argument results placed code ast constructed backquote operator 
placeholder identi er expression primitive syntactic classes extended include placeholders valid alternatives 
example placeholders stand statements expressions declarations identi ers 
backquote expressions evaluated macro expansion placeholders expand ast expected type 
example placeholders stand statements expand statement asts 
ensured static type checker backquote parsed 
nested backquote causes special problems 
code creates analysed rst level expansion occurs checking occur nested backquote expressions parsed 
macros macro functions produce asts 
importantly code templates produce asts placeholders return asts 
macro system di ers macro writer may ignore issues concrete syntax specifying code macro produce 
distinction arises manipulating lists items contain concrete separators irrelevant syntax 
example separator character declaration comma character 
suppose macro writer list identi ers say red blue green bound meta variable ids wishes produce top level declaration enum color red blue green concrete syntax declaration includes separator commas 
macro writer need aware concrete syntax simply write template enum color ids macro systems allow repetition list handling bliss macro system set special case rules ensuring correct separators appear produced code 
syntax macro system explicitly constructs asts concrete code extraneous concerns vanish 
macro writer need aware syntax macro system 
think making macro writer aware syntax fair price pay simplifying transformational language 
parser macros template operators grammar context sensitive 
presence placeholders templates force parser employ semantic analysis type analysis checking determines type ast returned placeholder evaluated 
ast type information guides parsing templates 
presence macro invocations require parse time semantic analysis correct parsing code contains macro invocations checking macros type appear allowed 
parser hand written recursive descent parser declaration statement levels bottom precedence parser expression level 
parsing macro headers macro keyword encountered parser interprets macro pattern guide parse invocation 
speci er indicates tokens required syntactic constituents macro invocation 
process relatively small part compiling program 
process accelerated routine compiled parse routine macro pattern 
specialized routine associated macro keyword called needed 
parsing code templates backquote ast denoted code template uniquely determined information available macro de nition time 
depend information available macro invoked 
restriction allows macro expansion implemented ciently 
presence placeholders templates force parser employ semantic analysis containing backquote placeholder expression 
point parse parser may faced optional constructs alternative constructs 
normally parser uses concrete tokens identi ers punctuation thread maze possible parses 
tokens templates won supplied macro invoked 
example consider source code template int context declaration expected 
possible parses depending ast type bound shown 
example parses dependent ast type returned placeholder expressions consider di culties parsing compound statements explicit markers separate declarations statements 
example code template int ph ph return di erent parses depending types ph ph 
help parser disambiguate potential parses careful design token stream parser reads 
introduce new type token call placeholder token 
discovering token tokenizer routines parser parse placeholder expression semantic context entry containing backquote expression performs ast type analysis expression determine type ast return run wraps expression type placeholder token 
di erent routines parser perform lookahead token stream see ast parse represented token 
example routine parse statement nds placeholder token head token stream type stmt routine returns placeholder token result parse 
doesn nd token operates normally 
ast type analysis performed semantic analyser germane 
knows declared types meta variables globals parameters macros meta functions types returned primitive operations asts 
uses information determine type returned placeholder expression 
parsing macro invocations parser encounters macro keyword parses invocation macro pattern packages macro actual parameters expansion uses declared type macro decide parse 
principle macro invocations allowed appear placeholders allowed 
system currently allows macro invocations declarations statements expressions expected 
statement expression statement null statement ast type parse init declarator int yi init declarator int declarator int declarator ii identi er int declarator declarator yi ii di erent parse trees source code template int depending ast type metavariable node tree children written name child 
list elements tree written parentheses 
ph ph parse decl decl hc list int ph ph list hr hid xiii ii decl stmt hc list int ph list ph hr hid xiii ii stmt stmt hc list int list ph ph hr hid xiii ii stmt decl syntactically illegal program parses code template fint ph ph return conciseness abbreviated compound statement return statement statement stmt identi er id expression exp declaration decl 
placeholder macro invocation primary expression name literal expression placeholder macro invocation declaration declaration speci ers initialized declarator list placeholder macro invocation macro invocation macro keyword syntax speci ed macro template dealing context sensitivity context free language 
due typedef parse program fragment depends context fragment appears 
example fragment foo parsed declaration foo type speci er typedef fragment parsed expression statement 
existence syntactic macro introduces context sensitivity 
parser forced parse program fragments independently context fragments appear 
aren completely happy approach examining alternatives 
fragments appear backquote expressions inside macro bodies actual parameters macro invocations 
design choice limits expressiveness macros leads non intuitive results 
macros produce typedefs macro de ned typedefs parameterized typedef ed names carefully 
name parsed normal identi er type speci er 
design choice prevents macro setting context actual arguments parsed 
example consider looping macro wants special keyword exit meaning actual arguments 
clean solution looping macro set special exit macro ect parsing actuals 
looping macro arguments parsed knowledge invoking macro template 
exit macro global invocations know occur arguments looping macro 
get problem add linguistic constructs macro language allow macro set parsing context arguments 
macro expansion macro language extended ast datatypes new primitive functions macro expansion simply matter running program parsed arguments macro invocation 
ease debugging macros depends quality debugger provided programming environment 
implementation uses embedded interpreter subset language execute meta code 
chose solution simplicity 
macros perform fairly simple routine actions speed tremendous importance interpretive approach su ces 
alternative approach fully compiled routines require parser able dynamically link compiled functions 
certainly possible approach executing macros scope research 
production system opt fully compiled approach interpreted approach 
uses macros programmable syntax macro system ers advantages 
provides framework special purpose preprocessors built 
software projects especially database eld extend language incorporate domain speci data types statements 
rst task projects write preprocessor task trivial suitable macro facility available 
second macros form basis extremely low overhead virtual machine 
literature papers propose powerful macro languages solve software portability problem 
common system programming language solve portability problems hardware architecture level divergence os api unix svr bsd sunos mac os dos nt new di cult portability problems 
solutions problem implement common virtual machine interpreter incurs large performance penalty implement common virtual machine series macros programmable macro language problems low overhead 
new control constructs specialized looping constructs domain dependent control constructs easily implemented programmable syntax macro system 
specialized control constructs raise programming level 
example resource allocation deallocation common idiom form grab resource resource release resource 
painting macro displayed earlier structure 
simple macro capture allocate deallocate idiom 
examples macros written 
space restrictions focus done macros actual mechanisms macro de nitions 
simpler macros implemented cpp cleanly abstractly safely syntax macros 
dynamic binding dynamic binding important applications 
important applications dynamic binding declaration exception handlers facto dynamically bound entities 
macros er simple clean mechanism declaring dynamic binding 
example macro de nes new statement type modi es integer variable executes code unmodi es variable 
syntax stmt dynamic bind type spec type id name exp init stmt body id newname gensym return type newname name name init body name newname invocation macro appear names trademarks respective owners 
dynamic bind int print class structure gym class semantic macro system full access static semantic analyzer base language type name available macro system 
case macro user wouldn need declare type name 
exception handling implement exception handling system syntax macros 
simple system catch tags identi ers 
exception system complex writing complex macros example macros powerful exception system 
exception system needs items 
method establishing handler 

method invoking handler 

method carefully unwinding stack invented new statements throw catch unwind protect syntax stmt throw exp value simple expression value return exception ptr null error handler value longjmp exception ptr value return int value value exception ptr null error handler value longjmp exception ptr value syntax stmt catch exp tag stmt handler stmt body return int old exception ptr exception ptr int jmp buf int result result jmp buf result exception ptr jmp buf body exception ptr old exception ptr result tag handler throw result syntax stmt unwind protect stmt body stmt cleanup return int old exception ptr exception ptr int jmp buf int result jmp buf result exception ptr jmp buf body exception ptr old exception ptr cleanup result throw result note examples ignore problem variable capture caused new names match names substituted code 
problem solved having function gensym create names appear user code extra needlessly complicated examples 
brie discuss inadvertent name capture section 
catch statement establishes handler called name execution body 
execution throw statement executed throws name execution body exits handler run place 
exception system termination semantics 
unwind protect statement ensures clean executed throw statement throws execution body 
throw occurs execution body clean executed 
throw occur execution body terminated clean run throw continues unwinding reaches name matches 
macro unwind protect important part exception handling system writing interactive programs user may asynchronously abort computation 
show macros action 
error types division zero file closed unix int foo int int int catch division zero printf lose division zero frob unwind protect start running running return macro unwind protect especially important maintaining allocate deallocate invariant discussed earlier 
consider painting macro 
unwind protect ensure deallocation painting structure syntax stmt painting stmt body return hdc ps unwind protect body hdc ps user painting macro need aware behavior just part abstraction 
readers writers enumerated types provide routines reading writing elements user de ned types 
syntax macros automatically provide routines 
example consider reader writer enumerated types 
macro de ned ect enum write extra code shown 
fruit apple banana kiwi expands enum fruit apple banana kiwi wehave addressed issue meta level namespaces 
arti ce name logical enum avoid name clashes 
better method explicit notion macro package extends language language allow code templates declare identi ers employ refer language language 
name macro enum enum refer language extended language de ned 
problem independent standard name capture problems addressed hygienic macro systems 
void print fruit int arg switch arg case apple printf apple case banana printf banana case kiwi printf kiwi int read fruit char getline strcmp apple return apple strcmp banana return banana strcmp kiwi return kiwi macro function map applies function parameter element second parameter return new list syntax decl id name id ids return list enum name ids print name arg switch arg map id id case id printf id ids read name char getline map id id strcmp id return id ids generalizations example quite useful 
persistence code rpc code dialog boxes automatically created data declared 
problem automatically constructing routine code addressed meta programming literature 
example presents meta program automatically constructing reading writing functions pascal enumerated types 
system didn code templates code doing bulky unwieldy 
code templates achieve similar ect far code far readable 
code rearrangement frequently code appear place program conceptually simpler distribute code program 
example programs object oriented large dispatch routines common 
code perspicuous datatype says relates dispatch information large dispatch routine 
conversely frequently code spread program better placed routines 
gui force programmer responses di erent events state system code 
perspicuous write code place distributed code 
example show construction dispatch table non object oriented language 
dispatch procedure reside place nal code write code distributed fashion 
achieve ect writing macros accumulate code fragments macro glue emit full blown window procedure 
concrete dispatch procedure ll discuss main window processing loop windows application 
ll macros writing distributed code collected large dispatch routine just macro headers syntax decl new window proc id proc name default id default proc name syntax stmt window proc dispatch id proc name id message name stmt body syntax stmt emit window proc id proc name macro new window proc establishes new window procedure name proc name 
default procedure called procedure doesn handle message default proc name 
procedure collect code fragments created repeated calls window proc dispatch 
macro window proc dispatch takes name window procedure name message statement 
associates message name statement window procedure 
macro emit window proc causes appear place program window procedure accumulated window proc dispatches named window procedure 
simple example program new window proc default window proc dispatch wm destroy window proc dispatch wm create null emit window proc produces program int unit message switch message default return message break case wm create null break case wm destroy break return null macros global meta variable communicate 
macro de nitions declaring metavariable holds methods di erent window procedures de ned macros 
struct proc id name method table mtp procs struct proc proc list null space prevents presenting full macro de nitions 
macro new window proc adds empty method table proc list macro window proc dispatch adds method method table proc list macro emit window proc produces function contents method table window procedure produced 
related research system currently undergoing revision 
macro example macros shown worked previous implementation 
re implementation complete conduct large scale experiments macro system 
systems mentioned current new macro systems syntactically rich languages 
todd jonker working hygienic macro technology syntactically rich languages 
william maddox berkeley investigating extensions master thesis give macros semantic abilities 
samples announced token macro system 
general macro processor programmed understand lexical conventions di erent languages ada tex 
lisp community hygienic macros syntactic abstractions proposed making macros easier cleaner write 
macro systems automatically avoid unanticipated capture free variables 
early hygienic macro system substitution support repetition 
research hygienic macro systems complete programming power 
feel hygienic macro systems important considering methods making system hygienic referentially transparent 
sense research brought lisp macro technology 
research required take 
goal implementation semantic macros extension syntax macros macro processor static semantic analysis type checking 
semantic macros new important powers 
operation runtime types returned expressions manipulate 
allow things form object oriented dispatch compile time 
simplify invention new binding forms need access runtime type values manipulating 
second macro writer relevant type checking macro wait type errors downstream type checking 
macros completely self contained ensure programmers wouldn having track type errors code didn write case syntax macros 
shown programmable macro system simple powerful 
major contribution explicit code template operators ast datatypes existing language powerful macro system language 
approach language long parser modi ed perform type checking parse 
important advantage approach new macro language special syntax operators statements functions historically done 
authors bjarne steensgaard read commented drafts anonymous referees 
ansi standard ansi ny 
cameron software reuse metaprogramming systems proceedings fifth annual paci northwest software quality conference pp 
campbell compiler de nition facility syntactic macro computer journal pp 
de nitional facilities higher level programming languages pp 
proc 
afips fall joint computer conference harbison steele manual third edition prentice hall hieb dybvig bruggeman syntactic abstraction scheme university indiana computer science technical report pages june revised july 
jonker todd personal communication kohlbecker eugene friedman daniel felleisen matthias duba bruce hygienic macro expansion proceedings acm conference lisp functional programming pp 
acm press ny syntax macros extended translation cacm pp 
maddox william semantically sensitive report 
ucb csd master thesis pages university california berkeley 
samples electronic announcement comp compilers newsgroup steele common lisp language digital press 
strachey general purpose computer journal pp 
extensions dans une ll university grenoble th ese pour le grade de de eme cycle bliss programmer manual cmu department computer science 
