catching bugs web program invariants cormac flanagan matthew flatt shriram krishnamurthi stephanie weirich matthias felleisen department computer science rice university houston texas cormac cs rice edu mrspidey user friendly interactive static debugger scheme 
static debugger supplements standard debugger analyzing program pinpointing program operations may cause run time errors dereferencing null pointer applying non functions 
program analysis mrspidey computes value set descriptions term program constructs value flow graph connecting set descriptions 
set descriptions mrspidey identify highlight potentially erroneous program operations cause programmer explore selectively exposing portions value flow graph 
reliable program mis apply program operations 
addition operates numbers strings 
concatenation works strings numbers 
avoid abuse program operations languages impose restrictive type system forbids syntactic formation certain faulty program phrases 
type systems coarse solve general problem includes array indexing outside proper bounds division zero dereferencing null pointers jumping non function pointers 
problems capabilities standard type systems different languages deal run time errors different ways 
unsafe languages ignore problem leave programmer insert checks appropriate 
result programs notoriously prone crashes 
contrast safe languages authors supported part nsf ccr cda 
sml scheme equip program operations appropriate run time checks 
checks guarantee program operations immediately raise error signal returning random bit patterns 
solution ensures programs don return random results unsatisfactory errors signaled run time 
needed static analysis tool assists programmer verifying preconditions program operations 
kind tool static debugger 
advances proof technology brought static debugging reach 
methods interpretation control flow analysis set analysis establish invariants sets values variables expressions may assume 
array index expression assume values outside appropriate range array bound check superfluous indexing error signaled expression 
value set function variable contains closures function application need checked succeed 
past research static debuggers mainly focused synthesis invariants 
presentation particular explanation invariants neglected 
believe synthesizing invariants 
programmer able inspect invariants browse underlying proof 
set invariant contains unexpected element programmer determine element results flaw program approximations introduced proof system 
developed static debugger scheme called mrspidey allows programmer browse program invariants derivations 
selected set analysis underlying proof technology mrspidey reasons 
analysis produces accurate program invariants scheme languages presence complex control flow data flow patterns 
second set analysis intuitive 
interprets program operations naive set theoretic operations sets run time values propagates sets values program data flow paths manner easily understood programmer 
third appropriately annotating set analysis algorithm provide supporting explanation form value flow graph invariant produced analysis 
mrspidey part typical program development cycle integrated drscheme program development environment 
demand mrspidey marks program editor distorting lexical syntactic structure 
mark ups visibly identify program operations provably safe 
associated hyper links provide ffl value set invariant expression variable ffl graphical explanation invariant 
programmer browse information improve understanding program execution behavior 
rest proceeds follows 
section outlines information computed mrspidey 
user interface presents information programmer described third section fourth section presents results preliminary experiment evaluating usefulness mrspidey 
technical details involved implementation covered fifth section sixth section describes related 
seventh section presents research directions 
set analysis mrspidey underlying set analysis algorithm handles fundamental constructs scheme including conditionals assignable variables mutable structures class continuations 
section outline information produced analysis terms simple functional subset scheme 
full presentation set analysis realistic language refer interested reader related report 
source language sample language simplified calculus language see 
language includes primitives cons car cdr list manipulation serve illustrate treatment primitive operations number basic constants 
semantics source language formulated variant calculus 
term language labeled assume labels program distinct 
clarity labels occasionally omitted 
set analysis set analysis computes information sets values program variables terms may assume program define cons car cdr value cons const num fnil num vars fx label source language execution 
sets values typically infinite set analysis uses finite number program dependent values 
value corresponds particular constructor expression analyzed program represents set run time values created constructor expression 
set values analysis program cons cons pg pg fc pg value cons represents set values cons may returned expression cons possible value term similarly value represents set closures may created expression 
set values contains constants occurring program 
set analysis produces finite table called store maps variables labels sets values vars label gamma 
store valid conservatively approximates sets values variables terms assume execution 
deriving stores mrspidey employs stage algorithm derive valid store program 
derives constraints syntax directed manner program text 
constraints conservatively approximate notations denotes power set constructor gamma 
denotes total function denotes term occurs program dataflow relationships analyzed program 
second determines minimal accurate store satisfying constraints 
store valid store analyzed program 
illustrate syntax directed derivation constraints kinds sentences ffl cons evaluation term produces result cons values terms respectively 
results represented value cons analyzer adds constraint cons global set program constraints ensures represents possible results cons expression 
ffl suppose value set function expression includes function 
variable may bound result argument expression addition result function body returned result application expression 
adding constraint ranges set labels analyzer captures potential flow values 
constraints remaining classes terms constructed analogous manner 
solving derived constraints produce valid store straightforward 
sample analysis consider toy program define sum tree number 
tree tree sum car tree sum cdr tree sum cons cons nil program defines function sum computes sum leaves binary numeric tree 
tree leaf represented number interior node containing sub trees represented pair 
sum applied ill formed tree cons cons nil 
executed program tree delta delta delta sum tree num cons sum nil cons cons sum simplified constraints sum raises error primitive operation car applied inappropriate argument nil 
complete list set constraints program quite long simplified versions set constraints affect position represents potential arguments car see 
constraints model flow argument values formal parameter application sites function sum 
constraint models behavior operation car 
constraints arise syntactic values program 
constraint captures notion possible values tree part conditional expression include numbers number 
predicate 
solve constraints derive implied invariants tree cons tree cons cons tree cons tree cons nil nil tree nil invariants relating implied set constraints 
cons cons information provides warning set arguments operation car may include inappropriate value nil 
identifying potential run time errors inspecting set invariants arguments program operation mrspidey identify program operations may cause run time errors flag inspection programmer 
example program sum value set position contains value nil evaluation car tree may raise run time error 
inspection value flow graph explains nil may appear moment mrspidey checks uses scheme primitives function position applications parameter lists functions potential arity conflicts extensions discussed 
value flow information deriving store analyzed program set analysis algorithm constructs flow graph subset relations 
flow graph models values flow program execution provides intuitive explanation value set invariant produced analysis 
illustrate idea considering value nil flows program sum execution expression nil simply returns value nil element pair created cons nil pair result value expression tree value nil extracted car tree value bound formal parameter tree function call sum car tree gets returned result expression tree flow values modeled subset invariants produced set analysis 
specific invariants describe flow value nil program constructor expression nil expression tree nil tree tree num user interface mrspidey program invariant browser fit seamlessly programmer pattern 
provide programmer useful information natural easily accessible manner minimum disruption program development cycle 
reasons integrated mrspidey drscheme scheme programming environment 
mrspidey uses program mark ups characterize program run time behavior easily accessible manner 
mark ups simple font color changes affect lexical syntactic structure program 
represent information program behavior 
clicking tokens phrases programmer information visible 
identifying potential run time errors program operations may signal run time errors execution natural starting point static debugging process 
mrspidey identifies potentially erroneous operations highlighting font color changes 
primitive operation may applied inappropriate arguments raising run time error highlighted red underlined monochrome screens 
run time argument check required potentially faulty operations 
primitive operations raise errors shown green 
operations require run time checks 
function may applied incorrect number arguments highlighted displaying lambda keyword red underlined application expression function subexpression may return non closure highlighted displaying enclosing parentheses red underlined contains examples kinds potential errors 
mrspidey presents summary information describing number type potential run time errors top level definition hyperlink definition 
hyperlinks programmer directly access potentially erroneous expressions 
presenting value set information mrspidey provides inferred value set invariant variable term program 
value set representation stores verbose difficult read mrspidey uses set description language sdl describe sets sdl cons rec ff ff ff ff fff fi fl expression denotes union sets values described recursive set description expression rec ff ff identifying potential run time errors binds set description variables ff ff bindings visible meaning recursive set description expression set values described ff bound transformation store expressions described subsection 
mrspidey computes closed set description expression variable term program store produced set analysis 
relates program variable set description expression hyperlink variable 
relates compound term program set description expression hyperlink opening parenthesis term 
clicking hyperlink causes box containing corresponding set description expression inserted right phrase buffer 
shows set description expression displayed clicking variable tree 
value flow browser constraint derivation phase set analysis mrspidey constructs value flow graph subset relations 
value flow graph models flow values various points program 
edge graph arrow overlaid program text 
large numbers arrows clutter program text arrows demand driven fashion 
inspect incoming edges program term programmer clicks value set invariant term 
shows incoming edges parameter tree 
hyperlinks associated head tail arrow provide fast means navigating textually distinct semantically related parts program especially useful larger programs 
clicking arrow moves focus editor buffer term arrow causes value set invariant term displayed 
facilities programmer encounters surprising value set invariant proceed iterative fashion expose portions value flow graph influence invariant 
expedite iterative process mrspidey provides ancestor facility automatically exposes portions value flow graph influence particular invariant providing programmer complete explanation invariant 
cases number arrows value set information value source information ancestor facility excessive 
programmer typically interested particular class values mrspidey incorporates filter facility allows programmer restrict displayed edges affect flow certain kinds values 
facility extremely useful quickly understanding primitive operation may applied inappropriate argument values 
sample debugging session illustrate effectiveness mrspidey static program debugger describe tool identify eliminate potential run time error program sum 
mrspidey invoked primitive operation car highlighted indicating operation may raise run time error 
inspecting value set operation argument tree see shows set includes inappropriate argument nil 
ancestor filter facilities view erroneous value flows program see 
displayed information obvious error caused application sum ill formed tree cons cons nil 
space restrictions force triv flow nil ial program initial experiences indicate static debugging process scales large programs 
experimental results evaluated effectiveness mrspidey explanatory mode experiment 
constructed system called mrspidey textual resembles ml style type checker wright cartwright soft :10.1.1.25.4251
mrspidey textual produces annotated version source program identifies program operations require run time checks 
additional commands programmer may inquire value sets global local definitions mismatch expected arguments inferred value sets program operations 
participating group consisted students undergraduate course programming languages 
students introduced basics types type safety 
students working knowledge scheme previously static debugger 
minute lecture analysis minute tutorial systems 
participants split groups people comparable skill separated homework assignments 
test program participants group mrspidey graphical group mrspidey textual groups alternating analysis tools programs 
participants allowed execute programs 
participants minutes programs 
programs excerpts ranging pages length larger projects 
excerpt contained bug possibly additional run time checks inserted due approximate nature analysis 
participants asked classify cause run time check ffl program error ffl weakness proof system 
case participants asked fix program second case asked explain check raise error run time 
observed progress participants interaction tools 
participants typically facilities mrspidey 
graphical version students ancestor filter facilities display portions flowgraph explaining derivation certain value set invariants 
mentioned ability track origin values especially focus attention selected classes values particularly useful understanding eliminating checks errors 
observations suggest graphical user interface provides easier access results analysis textual interface 
users mrspidey textual typically different sources information source program annotated code console window 
users mrspidey graphical avoid context switch ing information sources combined single window 
user mrspidey textual tried reconstruct exactly information provided mrspidey graphical 
student began annotating printed copy test program value set descriptions arrows describing portions value flow graph 
productivity measurements inconclusive due believe overly artificial experimental setup 
intend continue observations rest semester report expanded version 
implementation mrspidey mrspidey component drscheme comprehensive scheme development environment 
drscheme consists components 
core component mred syntax interface 
subsections describe components details provide pointers relevant technical reports 
macro expansion useful interface mrspidey results program analysis terms original source program 
environment requires front processing source text correlate internal representation programs source location 
scheme correlation task complicated powerful macro systems typical implementations macros permit arbitrary rearrangements syntax 
mrspidey exploits front 
tool kit generating language front ends suitable interactive environments 
includes hygienic high level macro system relates expression macro expanded code source location 
mrspidey exploits information associate value set invariants expressions source program portions value flow graph arrows relating terms program text 
converting store expressions mrspidey computes set description expression term store representation follows views set environment grammar root non terminal uses standard algorithm simplify grammar 
second eliminates unnecessary non terminals grammar replacing non terminals right hand side appropriate production rules 
resulting grammar contains single nonterminal expresses grammar non recursive set description expression 
expresses grammar recursive set description expression remaining non terminals variables 
identifying potential run time errors scheme contains large number primitive procedures 
mrspidey represents set appropriate arguments primitive procedure regular tree grammar rtg 
value set argument expression represented rtg deciding primitive correctly reduces inclusion question 
general question pspace complete specific application decided time linear size argument rtg rtg expected arguments deterministic small 
graphical engine mrspidey graphical component implemented mred scheme engine constructing graphical user interfaces 
core engine am object system portable graphics library 
library defines high level gui elements windows buttons menus embedded scheme special primitive classes 
mred graphical class library includes powerful extensible text editor class 
editor class mrspidey display analyzed programs including boxes containing value set information arrows describing value flow graph 
value set boxes easily embedded program text editor buffer contain buffers part text 
arrows flow information part editor standard built functionality easy extend editor class arrow drawing capabilities components graphical library 
mred object system provides robust integration scheme implementation underlying graphical class library 
integration library object system easily understood gui programmers 
object system provides important tool designing managing components graphical interface 
implementation mrspidey exploits object system absorb enhancements editor easily drscheme environment 
applications developed mred including mrspidey drscheme fully portable major windowing systems windows microsoft windows macos 
mred portability object system rich class library enabled mrspidey implementors focus interesting parts application 
related number interactive analysis tools static debugging systems developed programming languages 
address different concerns provide explanation derived invariants 
static debugger subset pascal 
mrspidey associates run time invariants numeric ranges statements program 
provide explanation invariants difficult programmer decide unexpected invariant caused weakness proof system flaw program 
addition existing system processes order language bourdoncle explains extend analysis section 
environments built parallel programming languages expose dependencies allowing programmer tune programs minimize dependencies 
particular mrspidey similarities editors 
mrspidey editors provide information varying levels granularity retain source correlation transformations depict dependencies graphically 
mrspidey editors process language extremely simple control data flow facilities need provide supporting explanation derived dependencies 
summary mrspidey interactive static debugging tool supports production reliable software 
identifies program operations may signal errors execution describes sets erroneous argument values may cause errors 
previous systems provides explanation erroneous values flow program 
graphical user interface presents information programmer natural intuitive manner 
experimental results support belief information facilitates static program debugging 
mrspidey functions interactive optimization tool 
mrspidey programmer tune program value set invariants accurately characterize execution behavior enabling numerous program optimizations depend invariants including variant check elimination synchronization optimization partial evaluation closure analysis dead code elimination constant folding 
investigate potential implemented variant check elimination part mrspidey 
preliminary results indicate resulting tool production efficient programs 
intend investigate area depth 
adapted set analysis underlying proof technology mrspidey 
set analysis extended produce accurate information numeric ranges 
information useful eliminating array bounds checks array data dependence analysis 
program analyses produce information similar set analysis provide alternative cost accuracy tradeoffs adapted mrspidey 
availability drscheme including mrspidey available www cs rice edu scheme packages drscheme 
acknowledgments cartwright bruce duba discussions concerning philosophy soft typing nevin heintze hints implementation set analysis 
gratefully acknowledge students comp programming languages course rice university participation experiment 
aiken wimmers lakshman soft typing conditional types 
proceedings acm sigplan conference principles programming languages pp 

bourdoncle debugging higherorder imperative languages 
proceedings acm sigplan conference programming language design implementation june pp 

clinger rees 
eds 
revised report algorithmic language scheme 
acm lisp pointers july 
cooper hall hood kennedy torczon warren parallel programming environment 
proceedings ieee february 
cousot cousot interpretation unified lattice model static analyses programs construction approximation fixpoints 
proceedings acm sigplan conference principles programming languages pp 

flanagan felleisen set analysis full scheme soft typing 
rice university computer science tr 
flanagan felleisen semantics program optimizations 
proceedings acm sigplan conference principles programming languages pp 

flatt mred engine portable graphical user interfaces 
rice university computer science tr rice university 
tree automata 
akad budapest 
heintze set analysis arithmetic 
tech 
rep cmu cs carnegie mellon university december 
heintze set analysis ml programs 
proceedings acm conference lisp functional programming pp 

henglein dynamic typing syntax proof theory 
science computer programming pp 

kennedy tseng warren editor new interactive parallel programming tool 
proceedings supercomputing 
jagannathan weeks unified treatment flow analysis higher order languages 
nd acm symposium principles programming languages pp 

jagannathan wright effective flow analysis avoiding run time checks 
proc 
nd international static analysis symposium lncs september springerverlag pp 

preliminary version appears part technical report daimi pb aarhus university may 
kennedy tseng interactive parallel programming editor 
ieee transactions parallel distributed systems july 
kernighan ritchie programming language 
prentice hall 
krishnamurthi programming environment builder 
rice university computer science tr rice university 
heintze danvy ml partial evaluation set analysis 
tech 
rep cmu cs carnegie mellon university 
miller koski lee murthy natarajan fuzz revisited re examination reliability unix utilities services 
computer science department university wisconsin 
milner tofte harper definition standard ml 
mit press cambridge massachusetts london england 
plotkin call name call value calculus 
theoretical comput 
sci 

shao appel space efficient closure representations 
proceedings acm symposium lisp functional programming pp 

gannon programmable programming environment 
advances languages compilers parallel computing 
mit press august 
shivers control flow analysis higherorder languages taming lambda 
phd thesis carnegie mellon university 
stefanescu zhou equational framework flow analysis higher order functional programs 
proceedings acm conference lisp functional programming pp 

wolfe tiny loop restructuring research tool 
international conference parallel processing august 
wright cartwright practical soft type system scheme :10.1.1.25.4251
proceedings acm conference lisp functional programming pp 

