experimental study basic communication protocols ad hoc mobile networks ioannis paul spirakis christos computer technology institute box patras greece cti gr department computer engineering informatics university patras patras greece gr 
investigate basic communication protocols ad hoc mobile networks 
follow semi compulsory approach small part mobile users support moves predetermined way intermediate pool receiving delivering messages 
approach new semi compulsory protocol called runners members perform concurrent continuous random walks exchange information senders meet 
conduct comparative experimental study runners protocol existing semi compulsory protocol called snake members move coordinated way remain pairwise adjacent 
experimental evaluation carried new generic framework developed implement protocols mobile computing 
experiments showed protocols small support required ecient communication runners protocol outperforms snake protocol types inputs considered 
mobile computing introduced past years new computing environment 
mobile computing constrained poor resources highly dynamic variable connectivity volatile energy sources design stable ecient mobile information systems greatly complicated 
basic models proposed mobile computing 
earlier commonly model xed backbone model assumes existing infrastructure support stations centralized network management provided order ensure ecient communication 
model ad hoc model assumes mobile hosts form networks participation xed infrastructure 
ad hoc mobile network collection mobile hosts wireless network interfaces forming temporary network aid established infrastructure centralized administration 
ad hoc network hosts want communicate may wireless transmission range communicate hosts participating ad hoc network willing forward packets 
usual scenario motivates ad hoc mobile model case rapid deployment mobile hosts unknown terrain underlying xed infrastructure impossible expensive create infrastructure established temporarily unavailable destroyed 
basic communication problem ad hoc mobile networks send information sender designated receiver note ad hoc mobile networks dynamic nature partially supported ist programme eu contract 
ist human potential programme eu contracts 
ct amore ct greek project 
sense local connections temporary may change users move 
movement rate user vary certain hosts order execute location oriented tasks take measurements 
environment executing distributed protocol certain complications communication hosts may highly non trivial task 
common way establish communication form paths intermediate nodes hosts assumed link nodes corresponding hosts lie transmission radius directly communicate 
approach exploiting pairwise communications common ad hoc mobile networks cover relatively small space temporary network small diameter respect transmission range dense thousands wireless nodes 
locations occupied hosts broadcasting eciently accomplished 
wider area ad hoc networks broadcasting impractical distant peers reached broadcast users occupy intervening locations suciently long communication path dicult establish 
path established single link failures happening small number users part communication path move way longer transmission range path invalid 
note path established way may long case connecting nearby nodes 
di erent approach solve basic communication problem take advantage mobile hosts natural movement exchanging information mobile hosts meet incidentally 
users network meet spread geographical area ooding network suce 
evident users spread remote areas move areas way information reach protocol takes care situations 
way alleviate problems force mobile users move speci scheme order meet protocol demands 
approach idea forcing small subset mobile users called support network move needs protocol 
protocols called semi compulsory protocols 
rst semi compulsory protocol basic communication problem 
uses snake sequence support stations remain pairwise adjacent move way determined snake head 
head moves executing random walk area covered network 
shall refer protocol snake protocol 
snake protocol theoretically analyzed interesting properties random walks meeting times 
rst implementation protocol developed experimentally evaluated emphasis con rm theoretical analysis 
experiments theoretical analysis indicated small support needed ecient communication 
rstly new semi compulsory protocol basic communication problem studied 
new protocol idea members move runners move independently sweeping area covered network 
runners meet exchange information senders encountered 
shall refer protocol runners protocol 
new protocol turns robust snake protocol 
resilient fault faulty member resilient faults second contribution comparative experimental study snake runners protocols new generic framework developed implement protocols mobile computing 
implementation redesigned fundamental classes functionality order provide generic framework allows implementation mobile protocol 
framework implemented runners protocol re implemented snake protocol 
implementations leda platform 
extended experimental setup include pragmatic test inputs regarding motion graphs graphs model topology motion hosts 
test inputs included random structured graphs 
conducting experimental study interested providing measures communication times especially average message delay message delivery rate support utilization total number messages contained members support 
experiments showed protocols small support required ecient communication ii runners protocol outperforms snake protocol types inputs considered 
precisely runners protocol achieve better average message delay test inputs considered case random graphs small support size 
new protocol achieves higher delivery rate messages right snake protocol requires period time delivery rate stabilizes value smaller runners 
runners protocol smaller requirements size local memory member support 
previous similar approach compulsory protocol introduced sense users forced perform concurrent independent random walks area covered network 
model similar 
protocol forces mobile users slightly deviate short period time prede ned deterministic routes order propagate messages 
protocol compulsory host works deterministic host routes 
adler scheideler previous dealt static transmission graphs situation positions mobile hosts environment change 
authors pointed static graphs provide starting point dynamic case 
consider dynamic case mobile hosts move arbitrarily sense extend 
model space motions graph theoretic model introduced maps movement mobile users dimensional space called motion graph precise de nition shortly 
jv environment stations move threedimensional space possible obstacles abstracted graph neglecting detailed geometric characteristics motion 
rst assume mobile host transmission range represented sphere tr having mobile host center 
means host inside tr receive message broadcasted host 
approximate sphere cube tc volume tc tc tr 
size tc chosen way volume tc maximum integral value preserves tc tr mobile host inside tc broadcasts message message received host tc 
mobile hosts moving space quantized cubes volume tc 
motion graph corresponds quantization constructed way 
vertex representing cube volume tc 
vertices connected edge corresponding cubes adjacent 
volume space clearly tc consequently rough approximation ratio tr 
description implemented protocols start de nitions description protocols 
subset mobile hosts ad hoc mobile network motion determined network protocol called support part indicates way members move communicate called support management subprotocol addition may wish way hosts move communicate tolerate failures hosts 
case protocol called robust 
protocol called reliable allows sender noti ed delivery information receiver 
assume motions mobile users members arbitrary independent motion support exclude case users deliberately trying avoid 
pragmatic assumption usually followed application protocols 
assume message exchange nodes communication distance takes negligible time messages short packets wireless transmission fast 
assume users support perform independent concurrent random walks 
snake protocol main idea protocol proposed follows 
set phase ad hoc network prede ned number hosts nodes support 
members support perform leader election run imposes initial communication cost 
elected leader denoted ms ordinate support topology movement 
additionally leader assigns local names rest support members ms ms ms nodes support move coordinated way remaining pairwise adjacent forming list nodes sweep time entire motion graph 
motion accomplished distributed way support motion subprotocol essentially motion subprotocol enforces support move snake head elected leader ms doing random walk motion graph nodes ms executing simple protocol move ms 
node support communication range sender underlying sensor subprotocol noti es sender may send message 
messages stored node support synchronization subprotocol receiver comes communication range node support receiver noti ed message waiting message forwarded receiver 
duplicate copies message removed members support 
protocol support plays role moving backbone subnetwork xed structure guaranteed motion subprotocol communication routed 
analysis shows average message delay communication time snake protocol bounded formula motion graph second eigenvalue number vertices motion graph details snake protocol 
proved see snake protocol reliable partially robust resilient fault 
runners protocol di erent approach implement allow member move snake fashion perform independent random walk motion graph members viewed runners running words maintaining times pairwise adjacency members hosts sweep area moving independently 
communication routed support 
runners meet exchange information senders encountered new synchronization subprotocol snake case underlying sensor sub protocol noti es sender may send message 
user comes communication range node support message designated receiver waiting messages forwarded receiver 
expect size support number runners ect performance ecient way snake approach 
expectation stems fact host meet parallel accelerating spread information messages delivered 
member support needs store undelivered messages maintain list receipts originating senders 
simplicity assume generic storage scheme undelivered messages members set list receipts stored set reality unique id message sender id needed stored runners meet site motion graph synchronization subprotocol activated 
subprotocol imposes runners meet site sets synchronized 
way message delivered runner removed set rest runners encountered similarly delivery receipts discarded set rest runners 
synchronization subprotocol partially phase commit algorithm works follows 
members residing site vertex ms ms resp 
denote resp 
set runner ms algorithm assumes underlying sensor sub protocol informs hosts runner lowest id runner ms consists rounds 
round ms ms residing vertex send runner ms runner ms collects sets combines compute new sets 
round runner ms broadcasts decision support member hosts 
hosts received broadcast apply rules ms join values received 
host receives message round participated round accepts value received message participated round 
simple algorithm guarantees mobile hosts remain connected able exchange messages continuous rounds manage synchronize furthermore event new host arrives disconnects round execution protocol ected 
case runner ms fails broadcast round internal failure left site protocol simply re executed remaining runners 
algorithm described er mechanism remove message receipts eventually memory hosts exhausted 
simple approach solve problem construct sender ordered list message ids contained ordered sequence ids gaps messages delivered part list identify maximum id rst gap remove message receipts smaller id simple approach experiments showed ectively reduced memory usage 
described support management subprotocol clearly reliable 
robust resilient faults achieved redundancy runners meet create copies messages transit 
worst case copies message 
note messages may re transmitted case copy exists fault occurs 
implementation experimental results implementation details implementations follow closely support motion subprotocols described 
implemented classes advanced data types leda 
class installed environment allows read graphs les perform network simulation number rounds xed number mobile users certain communication mobility behaviours 
execution simulation environment stores results les measurements represented graphical way 
extend previous implementation redesigned fundamental classes functionality order provide generic framework implementation mobile protocol 
implementation ad hoc mobile networks new base class called mobile host 
class extended implement class mh user models user network acts sender receiver mh snake mh runner classes implement support management subprotocols respectively 
previous implementation class called transmission medium realize exchange messages mobile hosts 
new implementation class replaced called environment class handles message exchange movement mobile hosts follow various motion patterns 
worth noting implement synchronization subprotocol ect behaviour protocol helped avoiding complicate implementation 
order provide fair comparison di erent support management subprotocols snakes runners implemented subprotocol snake protocol counted extra delay imposed synchronization mobile support hosts 
experimental setup number experiments carried modeling di erent possible situations regarding geographical area covered ad hoc mobile network 
considered kinds inputs unstructured random structured ones 
kind input corresponds di erent type motion graph 
started graph families considered random graphs grid graphs bipartite multi stage graphs 
extended experimental setup considering grid graphs level motion graphs close pragmatic situations 
considered values range di erent values support size 
motion graph constructed injected users mobile hosts random positions generated transaction message exchanges packet randomly picking di erent destinations 
experiment carried proceeds lockstep rounds called simulation rounds measure simulation time rounds 
mobile host considered identical computing communication capability 
simulation round moves adjacent vertex motion graph performs computation 
move local computation determined snake runners protocol 
move random probability host generates new message new message generated roughly rounds picking random destination host 
selection value assumption mobile users execute real time application requires continuous exchange messages 
choice experiment takes thousands rounds order get acceptable average message delay 
experiment total messages transmitted 
carried experiment messages delivered designated receivers 
test inputs follows 
random graphs 
class graphs natural starting point order experiment areas obstacles 
model obtained sampling edges complete graph nodes independently probability log marginally connectivity threshold test cases included random graphs di erent values 
grid graphs 
class graphs simplest model motion consider mobile hosts move plane surface 
di erent grid graphs di erent values grid graphs 
evaluate performance protocols space considered grid graphs model motion hosts space 
di erent graphs di erent values 
bipartite multi stage graphs 
bipartite multi stage graph graph consisting number stages levels 
stage contains vertices edges vertices consecutive stages 
edges chosen randomly probability possible edges stages 
type graphs interesting model movements hosts pass certain places regions di erent second eigenvalue grid graphs second eigenvalue lies grid graphs 
experiments considered log stages choose log threshold value bipartite connectivity connectivity pair stages 
test cases included multi stage graphs stages number vertices di erent values 
level motion graphs 
motivated fact mobile users usually travel favourite routes going home back usually comprise small portion area covered network urban highways ring roads metro lines congested areas high volume user trac city centers airport hubs tourist attractions considered level motion graph family re ect situation family similarities level graphs considered completely di erent problems settings 
denote distance vertices length shortest path joining 
level graph consists subgraphs motion graph representing congested areas interconnected small number paths representing favourite routes 
subgraph de ned randomly selecting vertex declare vertices vertices constant denoting diameter congested area 
number subgraphs de ned 
paths representing favourite routes speci ed follows temporarily replace nd shortest paths nally select edges belong shortest paths 
paths constant arbitrarily select nd minimum spanning tree spans edges selected ones 
majority hosts forced move subgraphs congested areas paths connecting subgraphs favourite routes 
constructed number di erent data sets tuning various parameters diameter congested areas number selected vertices number subgraphs representing congested areas 
note message generated destination chosen random users network sender receiver pairs xed 
experimental results measured total delay messages exchanged pairs sender receiver users 
message generated calculated delay terms simulation rounds message nally transmitted receiver 
measurements experimentally evaluate performance di erent support management subprotocols 
reported experiments di erent test inputs considered illustrated figures 
graphics included results instances input graph smaller larger value similar results hold values 
curve gures characterized name px refers protocol snake runners digit number denoting value curves reported snake protocol con rm theoretical analysis 
average message delay drops quickly small threshold value stabilizes independent value observation applies test inputs considered 
note behaviour snake protocol similar reported count extra delay time imposed synchronization subprotocol regarding runners protocol rstly observe curve follows pattern snake protocol 
unfortunately don theoretical analysis new protocol see behaves expected experimental evidence suspect obeys similar tighter bound snake protocol 
second observation performance runners protocol slightly better snake protocol random graphs case random graphs small support size see top left bipartite multi stage graphs middle left substantially better structured cases grid level graphs cf 
top right middle right 
partly explained fact structured graphs smaller second eigenvalue bipartite multi stage random graphs 
small value eigenvalue average message delay dependent hidden constant asymptotic analysis snake protocol see section apparently larger corresponding constant runners protocol 
interesting observation concerns case level graphs results look similar grid graphs 
interestingly case users perform random walks grid case motion getting restricted arbitrary performance characteristics protocols remain unchanged 
may conclude case structured inputs assumption having users performing continuous random walks motion graph ect performance 
believe challenging incorporate sophisticated mechanisms support management subprotocols order take advantage user behaviour patterns 
contrast experiments carried consider utilization support protocol total number multiple message copies stored support structure time message delivery rate 
bottom left total number message copies generated protocol shown rst rounds simulation bipartite multi stage graph similar results hold test inputs sizes 
observe snake protocol generates initially copies runners 
simulation goes rate generating redundant messages snake protocol increases faster runners 
partially justi ed considering average message delay 
case snake message delay worse runners implies take longer meet sender 
addition message copies remain longer period support structure snake designated receiver encountered 
snake protocol generates copies messages received simulation goes total number redundant copies increases messages pending 
observation implies runners protocol utilizes eciently available resources far memory limitations concerned 
way evaluate performance protocols consider message delivery rate 
bottom right delivery rate messages percentages projected simulation time rounds grid graph similar results hold test inputs sizes 
snake protocol slower delivering messages runners protocol reason explained regarding utilization 
simulation time increases protocols nally reach high levels delivery rates 
clear runners reach high levels faster compared snake 
provides explanation regarding total number message copies stored support members snake protocol 
recall support synchronization subprotocol need time generate copies message delivery rate snake initially low total number message copies low 
rate increases time generate message copies increase total number message copies stored support structure 
closing remarks new protocol basic communication problem ad hoc mobile network provided comparative experimental study new protocol runners new implementation existing snake 
experiments showed new protocol outperforms previous test inputs considered 
directions 
obvious analyze theoretically runners protocol 
enforce speci motion pattern support moving spanning subgraph motion graph doing random walks 

adler scheideler 
ecient communication strategies ad hoc wireless networks 
proc 
th annual symposium parallel algorithms architectures spaa 

spirakis 
analysis experimental evaluation innovative ecient routing approach ad hoc mobile networks 
proc 
th annual workshop algorithmic engineering 

spirakis 
ecient routing protocol hierarchical ad hoc mobile networks 
proc 
st international workshop parallel distributed computing issues wireless networks mobile computing satellite workshop ipdps 

spirakis 
self organizing ad hoc mobile networks problem communication 
appear short proc 
th annual symposium principles distributed computing podc 

haas pearlman 
performance new routing protocol recon gurable wireless networks 
proc 
icc 

spirakis tan 
fundamental control algorithms mobile networks 
proc 
th annual symposium parallel algorithms architectures spaa 

holland vaidya 
analysis tcp performance mobile ad hoc networks 
proc 
th annual acm ieee international conference mobile computing mobicom 

imielinski korth 
mobile computing 
kluwer academic publishers 

iyer karger rahul thorup 
experimental study poly logarithmic fully dynamic connectivity algorithms 
proc 
nd workshop algorithm engineering experiments pp 


li rus 
sending messages mobile users disconnected ad hoc wireless networks 
proc 
th annual acm ieee international conference mobile computing mobicom 

mehlhorn 
leda platform combinatorial geometric computing 
cambridge university press 

lynch 
distributed algorithms 
morgan kaufmann publishers 

park corson 
temporally ordered routing algorithms tora version functional speci cation 
ietf internet draft draft ietf manet tora spec txt oct 

perkins royer 
ad hoc demand distance vector aodv routing 
ietf internet draft draft ietf manet aodv txt 
average message delay random graphs support size average message delay grid graphs support size simulation time rounds average message delay bipartite multistage graphs support size simulation time rounds average message delay level graphs support size simulation time rounds total message copies support simulation time rounds mem mem delivery rate support simulation time rounds percentage support runners fig 

average message delay various motion graphs top middle rows total number message copies bottom left delivery rate messages bottom right 
