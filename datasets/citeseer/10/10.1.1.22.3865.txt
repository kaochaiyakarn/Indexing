capacitated center problem samir khuller dept computer science umiacs university maryland college park md yoram dept computer science university maryland college park md capacitated center problem fundamental facility location problem asked locate facilities graph assign vertices facilities minimize maximum distance vertex facility assigned 
facility may assigned vertices 
problem known np hard 
give polynomial time approximation algorithms different versions problem achieve approximation factors 
study generalizations problem 

basic center problem fundamental facility location problem defined follows edge weighted graph find subset size vertex close vertex formally objective function defined follows min max min distance function 
example may wish install fire stations minimize maximum distance response time location closest fire station 
problem known np hard 
approximation algorithm factor ae minimization problem polynomial time algorithm guarantees solution cost ae times optimal solution 
preliminary version appear proceedings fourth annual european symposium algorithms esa 
research supported nsf research initiation award ccr nsf career award ccr 
email addr samir cs umd edu research supported nsf career award ccr 
email addr yoram cs umd edu approximation algorithms basic center problem studied known optimal 
schemes natural methods obtaining approximation factor 
approximation algorithms known interesting generalizations basic center problem 
generalizations include cases node associated cost placing center limiting number centers limited budget 
generalizations include cases vertices weights consider weighted distance node closest center 
interesting generalization call capacitated center problem studied bar ilan peleg 
input specifies upper bound number centers maximum load output set centers assignment vertices centers 
vertices may assigned single center 
constraints wish minimize maximum distance vertex assigned center oe 
min max oe oe oe bar ilan peleg gave polynomial time approximation algorithm problem approximation factor 
various applications capacitated centers mentioned 
slightly different problem radius fixed minimize number centers shows sloan digital sky survey project 

results section discuss simplification problem node may appear multiple times center put node 
refer problem capacitated multi center problem 
introducing new ideas basic approach proposed able give polynomial time algorithm achieves approximation factor 
section show solve problem allowed center vertex 
high level structure algorithm assignment centers vertices done extremely carefully 
problem referred capacitated center problem 
version problem obtain approximation factor 
worth noting fact prove solution times optimal solution allowed put multiple centers single vertex 
clearly indicates room improvement better lower bound optimal possible center may placed vertex 
algorithm easily extended general case vertex demand multiple centers may satisfy demand 
total demand assigned center exceed method obtain approximation factor version costs 
vertex cost placing center working fixed budget 
section study variants problem 
solution denote solution centers load assigns node center distance radius optimal solution 
obtain cl solution capacitated multi center problem cl solution capacitated center problem 
algorithm capacitated multi centers give high level description algorithm 
may assume simplicity complete graph edge weights satisfy triangle inequality 
replace edge shortest path corresponding pair vertices 
high level description algorithm uses threshold method introduced edmonds fulkerson center problem hochbaum shmoys 
sort edge weights nondecreasing order 
sorted list edges threshold graph subgraph obtained including edges weight 
run algorithm solution obtained 
hochbaum shmoys suggest binary search speed computation 
running time factor appear get best solution practice run algorithm take best solution 
iteration subgraph view unweighted graph 
unweighted graph refer distance nodes refer number edges shortest path 
iteration find solution number centers 
number centers exceeds prove solution cost 
number centers show maximum distance vertex assigned center 
gives approximation factor 
find maximal independent set 
graph obtained adding edges nodes common neighbor 
technique introduced hochbaum shmoys extensively solve center problems 
refer node maximal independent set monarch 
algorithm constructs tree monarchs assign vertices centers 
key differences algorithm 
specific procedure find maximal independent set opposed selecting arbitrary maximal independent set 

deal monarchs uniformly dealing light heavy monarchs separately 
terms explained shortly 
monarch empire consists subset vertices immediate neighborhood monarch monarch added maximal independent set vertices currently belong empire added monarch empire 
algorithm constructs tree monarchs monarchs selected 
tree property edge tree corresponds monarchs distance exactly 
monarch tries collect domain size subset vertices close monarch assigned 
doing monarch may grab vertices available empire 
process complete may unassigned vertices 
tree monarchs assign new centers handle unassigned vertices 
nodes left unassigned particular empire may assigned parent monarch 
eventually put additional centers monarch vertices recall center may located single vertex 
capacitated centers 
sort edges non decreasing weight order 
fe unmark vertices 
exit 
proc 
successful true number vertices connected component successful false connected component 

reassign 
total centers successful false return successful proc tries assign centers connected component 
component dealt separately 
done optimal solution maximum radius center optimal solution assigned vertices belong different connected components lower bound number centers component nc number vertices number allowed centers smaller nc solution 
assigns monarchs nodes independent set bfs manner 
put vertex independent set mark unmarked nodes distance pick new vertex add independent set pick unmarked vertex adjacent marked vertex 
describing algorithm terms example show execution 
separate nodes monarch empire level level nodes 
level nodes adjacent monarch level nodes distance monarch 
define level level nodes respectively empire 
empire 

pick arbitrary vertex set fvg 
nil 
unmarked nodes remove unmarked node monarch mark 
unmarked add mark unmarked add mark unmarked set add proc discussing pertinent properties show execution simple example fig 

algorithm starts vertex monarch 
vertex added level empire vertices added 
currently contains vertices 
vertex chosen monarch vertices added 
vertices added 
contains vertices 
vertex chosen marked 
vertices added vertex added 
contains vertices 
vertex chosen vertices added respectively 
algorithm stops unmarked vertices important properties monarchs produced algorithm 
important properties 
distance monarchs 

distance monarch root parent monarch tree exactly 

distance monarch vertex empire 

monarch root edge level vertex parent monarch empire 
level vertex neighbor monarch 
generally vertex neighbor monarch corollary property 
procedure tries assign domain size monarch 
objective assign vertices domain possible subject constraints 

vertex may assigned monarch domain distance monarch 

monarch may include domain vertex empire vertex empire belongs domain 
way implement procedure finding min cost maximum flow appropriate bipartite graph 
flow problem simple structure types costs edges 

set monarchs distance construct bipartite graph 
add vertices add edges mg set capacities 
cost edge empire 
cost edges 
compute min cost maximum integral flow monarch set domain fv receives unit flow domain define oe proc definition light monarch domain size heavy monarch unassigned vertices empire 
full monarch heavy light 
lemma heavy monarch vertex domain belongs empire 
proof 
assume vertex domain empire 
vertex empire assigned domain 
change flow function send unit flow produces max flow lower cost contradiction 
heavy monarch vertices belong domain algorithm halts successfully 
kl number light monarchs 
nl number vertices belonging domains light monarchs total number vertices 
theorem number centers required kl gamma nl le 
proof simpler proof 
lemmas established 
repeat completeness 
set monarchs defined 
repeat definition 
set light monarchs 
iteratively add monarch contains vertex domain assigned monarch gamma fm mj gamma oe largest set obtained process 
set remaining monarchs 
lemma set contain heavy monarchs 
proof 
suppose heavy monarch added iteration transfer node center gamma sequence transfers eventually reach center gamma nodes domain absorb extra node 
corresponds higher flow heavy monarch absorb unassigned node contradiction 
lemma consider center optimal solution covers monarch center assigned nodes domains monarchs proof 
assume contradiction center optimal solution covers belong domain distance perform sequence transfers eventually reaching center gamma nodes domain absorb extra node resulting higher flow contradiction 
belongs domain monarch distance distance case required lemma 
proof 
theorem monarch covered distinct center optimal solution centers optimal solution cover nodes number vertices domains monarchs need je gamman centers 
kl je gammak deltal gamman je gamma kl delta nl get kl gamman prove upper bound number centers 
describe procedure reassign 
reassign 
set monarchs monarch set unassigned fmg domain 
tree monarchs nodes set passed 
empty remove leaf node ffl allocate new centers monarch assign nodes 
node define oe assign ffl remaining nodes monarch node define oe freeing ffl nodes domain 
add freed nodes passed 
delete proc practice pass parent monarch nodes closest 
theorem vertex assigned center distance 
kl gamma nl le centers 
proof 
centers possibly light monarchs cover nodes construction 
size domain light monarch decrease 
total number centers kl gamma nl le 
node covered node receives flow parent original monarch 
case distance center covers 
case passed nodes covered monarch parent passed 
distance node center covers original monarch parent monarch 

algorithm centers consider version required pick distinct vertices centers 
high level approach previous case need pick centers carefully 
able show algorithm obtains approximation factor 
obtaining factor previous approach easy 
main difficulty lies allocating centers cover vertices left unassigned 
introduce new notation 
nodes monarch empire called subjects 
level subject monarch brought node distance monarch 
define link monarch root placed unique level subject parent monarch 
node called spouse monarch fig 

note monarch unique spouse node spouse monarch property 
need careful allocating new centers cover unassigned nodes 
require node allocated center monarchs sufficient available nodes allocate centers nodes passed 
ensure enforce rule 
monarch may allocate centers types 
nodes empire 
nodes distance may empire long monarch allocate spouse center 
define tree height corresponding monarch root monarch leaves tree level subjects spouse monarch 
leaf link parent leaf 
nodes children tree 
fig 
show monarch level subjects spouse monarch example 
leaf show link 
notice link may monarch empire 
observe nodes spouse monarch may belong trees 
specify monarch may assign center vertex tree spouse 
ensures vertex assigned centers different monarchs 
tree assigning vertices passed monarch nodes passed monarch monarch covered nodes spouse monarch link link link link link link example illustrate links spouses 
link monarch empire example illustrate tree monarch spouse link link spouse sibling monarch link link link sibling monarch spouse link monarch monarch allocate centers nodes passed 
may allocate centers vertices assigned center 
specify case new center cover covers vertices 
vertex allocated center assigned center covers gamma vertices 
algorithm section differs section selection new centers cover vertices left unassigned 
give high level description new selection scheme new reassign procedure implements scheme 
high level description repeatedly select leaf monarch tree monarchs allocate centers cover nodes empire nodes passed children monarchs 
monarch currently consideration 
child monarch assume passes excess nodes empire leaf node labelled number excess nodes monarch passing nodes passed assigned centers placed nodes 
important things note 
process monarch centers currently placed nodes 
monarch responsible allocating centers nodes passed children monarchs 
monarch responsible free nodes empire 
free nodes distance may belong trees monarchs may centers placed case assume assigned centers 
vertex distance monarch domain center placed tree belongs remains domain change assignment 
monarch assigns nodes passed children monarchs place full centers 
nodes left gamma assigned assigned monarch displacing vertices domain unassigned 
stage may free nodes empire nodes part domain nodes displaced domain 
note nodes part domain center ones displaced domain centers placed may belong trees may chosen centers 
gamma get assigned empire passed parent monarch 
choose centers set nodes belonged domain 
doing may assign displaced nodes 
remaining unassigned vertices including displaced nodes passed parent monarch 
describe detail passed vertices handled 
group leaves placing leaves group iff link link 
process groups turn processing group common link group exists 
assign passed nodes centers processing groups order 
process leaf node group follows start adding vertices passed leaf node list called pending 
pending vertices create center assign vertices 
things careful create center vertex free assign vertex center 
center going assigned vertices different groups move center level leaf node link node 
centers chosen group assigned vertices groups assign center leaf nodes group 
ensure nodes centers placed process monarchs reverse order placed note node belongs empire monarch placed placed empire 
process center placed assigned case free 
eventually process guaranteed free center placed 
group proceed nodes carried group picked monarch possibly replacing nodes assigned replaced nodes passed allocated center monarch 
note monarch light nodes passed grab nodes safe allocate centers 
example describing pseudo code discuss example fig 
detail 
process leaves left right 
leaf labeled number vertices passed corresponding child monarch 
assume 
process pending size centers allocated 
process pending size 
allocate full center 
free assign assign gamma vertices pending size pending 
processing add vertices pending 
process leaves group set observe vertices passed nodes group going share center vertices passed nodes group promote center level 
process add vertices pending size 
process adding vertices pending 
allocate full center allocate center current value 
currently unassigned assign assign gamma vertices pending 
size pending 
process add vertices pending 
allocate full center create center assigned assign vertices pending 
leaves vertices pending assigned monarch possibly displacing assigned vertices 
reassign 
unassigned vertex centers example illustrate assignment centers tree 
set monarchs monarch set unassigned fmg domain 
monarch pending ordered list initially 
tree monarchs nodes define group containing comes 
leaf nodes set passed 
nodes fvg iff unassigned 
nodes process reverse order insertion set null 
children children append passed pending 
null set allocate center assign 
assign gamma nodes pending remove pending 
set null 
set null 
null allocate center assign 
remove nodes pending assign set displaced gamma assign nodes pending possibly displacing nodes domain 
displaced ffl 
allocate new centers nodes unassigned 
assign nodes assigning nodes unassigned 
add ffl remaining nodes passed 
delete proc lemma node allocated center 
proof 
node may allocated center monarch monarch tree belongs 
monarch allocates center case unassigned means currently allocated center 
allocates center processed monarch allocated center 
belongs trees different monarchs case monarchs say 
allocate center 
lemma monarch sufficient available nodes tree allocate centers nodes passed 
proof 
monarch passes gamma nodes parent 
monarch children monarchs case child monarch unique spouse 
addition spouses level nodes available allocate centers 
lemma node assigned center 
proof 
nodes passed monarch assigned centers fmg 
unassigned nodes empire assigned center passed 
gamma nodes displaced domain allocated center empire passed parent 
theorem vertex assigned center distance 
mose kl gamma nl le centers 
proof 
centers possibly light monarchs cover nodes construction 
size domain light monarch decrease 
total number centers kl gamma nl le 
node passed covered monarch receives flow node monarch empire 
case distance center covers case distance center covers 
node passed monarch monarch covered link link link link monarch distance bounds follows monarchs centers added reassign opt centers example show factor tight 
case distance case case case case case fig 
give example showing factor tight algorithm 
edges example edges example monarchs pass nodes respectively parent monarch passes monarch passes algorithm assigns passed nodes center places leaving distance center 
vertex absorbs remaining nodes empire 
clear opt covers nodes distance 
running time bottleneck running time algorithm flow computation 
binary search capacitated centers algorithm computes log maximum flows 

capacitated centers costs capacitated center problem costs generalization capacitated center problem cost function defined vertices objective pick set centers total cost radius minimized 
note equivalent weighted capacitated center problem 
cost distinguish weights defined example 
formally cost function add constraint statement capacitated center problem 
bar ilan peleg gave polynomial time approximation algorithm problem approximation factor 
technique involves finding minimum cost perfect matching bipartite graph generalizes finding ae solution ae approximation algorithm capacitated centers problem 
yields approximation algorithm approximation factor combined algorithm capacitated centers 

remarks possible improve quality approximation willing allow slack number centers maximum load 
solution denote solution centers load assigns node center distance radius optimal solution 
algorithms obtain solution capacitated multi center problem solution capacitated center problem 
capacitated multi center problem obtain cl solution example gives solution 
achieve solution problem allocating unassigned extra centers empire 
tha algorithm works follows 
modify reassign overload centers allocate extra centers 
specifically unassigned ffl 
ffl allocate additional centers monarch centers cover nodes unassigned 
clearly center monarch cover nodes case 
ffl allocate additional centers monarch cover nodes unassigned 
may cause centers allocate new lightly loaded centers 
show centers 
theorem algorithm gives cl solution sets defined 
set monarchs extra center allocated cover ffl nodes 
number centers optimal solution cover nodes respectively 
clearly extra centers allocated monarchs sl sf denote sets nodes domains monarchs respectively 
number full centers allocated algorithm cover nodes sf lemma number centers allocated algorithm jx proof 
additional centers algorithm cover nodes sl algorithm uses je jx centers 
monarchs form independent set optimal solution je centers cover nodes sl je implying lemma 
lemma lower bound jx proof 
lemma centers optimal solution cover nodes sl cover nodes sl optimal solution uses js centers cover nodes sf lightly loaded centers allocated algorithm cover nodes sf cover nodes follows fl jx jl js js jx proof 
theorem lemma number centers algorithm jx jx gamma jx jx gamma jx jx jx lemma optimal solution overuse centers capacitated center problem approach gives cl solution 
results lund yannakakis feige imply polynomial time gamma ffl approximation algorithm possible np dtime imply constant factor approximation algorithm set cover 
robert useful discussions 
esa referee helpful comments 
bar ilan peleg allocate network centers algorithms 
cormen leiserson rivest algorithms mit press 
dyer frieze simple heuristic center problem operations research letters vol 
edmonds fulkerson bottleneck extrema journal combinatorial theory vol 
feder greene optimal algorithms approximate clustering proc 
th acm symposium theory computing pages 
feige threshold ln approximating set cover proc 
th acm symposium theory computing pages 
gonzalez clustering minimize maximum inter cluster distance theoretical computer science vol 
garey johnson computers intractability guide theory np completeness freeman san francisco 
hochbaum shmoys best possible heuristic center problem mathematics operations research vol 
hochbaum shmoys unified approach approximation algorithms bottleneck problems journal acm vol 
hsu nemhauser easy hard bottleneck location problems discrete applied mathematics vol 
lund yannakakis hardness approximating minimization problems journal acm vol 
young data collection sloan digital sky survey network flow heuristic proc 
th annual acm siam symposium discrete algorithms pages 
morgan levin optimal program data locations computer networks communications acm vol 
murthy kam approximation algorithm file allocation problem computer networks proc 
nd acm symposium principles database systems pages 
heuristic center problem graphs discrete applied mathematics vol swain bergman location emergency service facilities operations research vol 

