dependent types express modular structure david macqueen bell laboratories murray hill new jersey related typed languages modular programming data abstraction proposed including pebble sol ml modules 
review compare basic type theoretic ideas languages evaluate meet pragmatic requirements programming large 
october dependent types express modular structure david macqueen bell laboratories murray hill new jersey writing large program poses difficult problems organization 
modern programming languages problems addressed special linguistic constructs variously known modules packages clusters provide partitioning programs manageable components securely combining components form complete programs 
general purpose components able take life separately compiled stored libraries generic reusable program units 
usually modularity constructs support form information hiding data types 
programming large concerned constructs impose structure large programs contrast programming small deals detailed implementation algorithms terms data structures control constructs 
goal examine proposed linguistic notions respect meet pragmatic requirements programming large 
originally linguistic constructs supporting modularity introduced matter pragmatic language engineering response widely perceived need 
underlying notions analyzed terms type systems incorporating second order concepts 
term secondorder sense second order logic admits quantification predicate variables pra 
similarly type systems question introduce variables ranging types allow various forms abstraction quantification 
historically type systems fundamental insights proof theory particularly formulas types notion evolved curry feys cf howard de bruijn deb scott sco 
notion provided basis martin lo formalizations constructive logic intuitionistic type theory itt utilized girard gir introduced form second order typed lambda calculus tool proof theoretic 
formulas types notion developed de bruijn automath system martin lo itt central programming logics pl cv nu prl developed constable coworkers cz bc 
programming language area reynolds rey independently invented language similar girard version come called second order lambda calculus 
extended form language called sol mitchell plotkin mp give explanation data types 
programming languages ml gmw mil russell bdd hoo dd represent distinctly different ways realizing polymorphism abstraction respect types 
ml basically restricted form second order lambda calculus russell employs general notion dependent types martin lo general product sum defined 
pebble language burstall lampson bl bur provides dependent types somewhat purer form 
huet coquand calculus constructions variant typed lambda calculus general product dependent type 
provides form type types called context characterizes structure second order types making possible respect types respect families types type constructors 
calculus constructions explicit attempt combine logic programming language system 
appears th annual acm symposium principles programming languages january st petersburg florida 
languages russell pebble distinguished having reflexive type systems meaning type types member 
martin lo initial version itt reflexive sense abandoned version favor ramified system hierarchy type universes girard paradox gir showed reflexive system inconsistent constructive logic 
terms programming languages paradox implies existence divergent expressions clear serious pathologies follow see meyer reinhold proceedings 
types simply values belonging type type reflexive type systems tend obscure distinction types values meant describe turn tends complicate task type checking 
hand possible construct reasonable semantic models reflexive type systems mcc car 
remaining languages distinguish implicitly individual types universe types belong type variables range 
second order lambda calculus sol calculus constructions despite contexts impredicative meaning type universe closed type constructions involve quantifiers ranging 
reflexive type systems russell pebble impredicative stronger sense type variables take type universe types value 
contrast versions itt constable logics ramified systems quantification abstraction type universe level produces element higher level predicative 
purpose set mathematical nuances various languages look pragmatic issues arise attempt languages vehicles programming large 
discussing consequences sol type system modular programming 
briefly sketch ramified stratified system dependent types derive small language called dl generalized desugared version extended ml language mac :10.1.1.104.171
final section uses dl illustrate stylistic differences ml pebble 

shortcomings sol existential types sol language mp provides existential types form type variable type expression possibly containing free occurrences values types introduced expressions form rep expression type 
values intended model data types called data algebras mp packages cw term structure agree terminology mac adopting sections :10.1.1.117.695
type component called witness representation type structure 
access components structure provided expression form abstype typed assuming restriction appear free type variable appearing free mentioned mp impredicative nature sol existential types ordinary types just int bool structures values just ordinary values 
implies standard value manipulating constructs conditionals functional abstraction bertrand russell introduced ramified type theory word ramified logic mean stratified sequence levels normally infinite ascending sequence levels 
roughly speaking definition set said impredicative set contains members defined entire set 
apply equally structures 
parametric module just ordinary function type example 
tradeoff simplicity 
consider carefully consequences restrictions abstype expression 
structure constructed say rep type essentially forgotten 
may locally open structure abstype absolutely connection bound type variable original representation type connection witness type names obtained different openings structure 
example types agree body abstype abstype 
effect form identity representation type hidden allowed assume unique witness type associated structure witness type opaque hypothetical 
strong restriction access abstraction goes common practice language design normally means referring type definite type scope definition 
price paid able treat type structure ordinary value type 
see cm terms virtual witness witness transparent witness describe possible treatments witness type existential structure 
hierarchies structures 
consequences sol treatment witness type clearer consider building abstractions terms abstractions 
consider definition structure representing geometric point abstraction 
real real coord real coord real point rep point real real real real 
coord lp real real 
st coord lp real real 
snd suppose want define rectangle abstraction uses 
open define rectangle structure close rectangle structure respect point type 
rect 
point interp mk rect rect ft rect rect rect abstype point rep rect point rep point point point point interp mk rect tl point br point 
br tl ft lr point point 
st lr point point 
snd doubly open get new virtual point type unrelated existing type 
incorporate interpretation point type rect structure point interp provide means create elements type turn allows create rectangles 
suppose define circle abstraction structure want allow interactions abstractions creating unit circle centered top left hand corner rectangle 
requires rectangle structure circle structure operations relating defined scope single opening structure 
general anticipate abstractions point structure possibly interact terms points define single abstype expression 
appears building collection interrelated abstractions lower level abstraction wider scope opened 
traditional disadvantages block structured languages low level facilities widest visibility 
details see examples cardelli wegner tutorial cw :10.1.1.117.695
interpreting known types 
notion providing operations interpret type apply types 
useful impose additional structure type hiding identity type 
instance want temporarily view int bool ordered set special ordering 
define structure follows ordset le bool rep ordset int bool elseif related potentially useful mapping take ordset structure corresponding lexicographic ordering lists ordset ordset lo ordset abstype rep ordset list fix null true 
sol typing rules way create elements ordering operation applied 
fact structure type ordset inability express values type course means useless 
access witness types structures mappings quite useful 
various ways working problems sol 
instance delay avoid entirely creation closed structures deal separately types interpreting operations 
rewritten type list bool 
preferred solution abandon restrictive sol rule view structures inherently open transparent 
suggested type rules itt provide access witness interpretation components existential general sum structure 
intuitively scope local declaration abstype consider simply abbreviation local name witness type course appear types free variables entire expression local significance meaning witness type may abstraction achieved means real simulated functional abstraction respect structure variable see mac merely uncurried form approach data abstraction originally proposed reynolds rey :10.1.1.104.171
structures transparent clear carry particular type interpretation fact reasonable think structures interpreted types kind value 
consequently abandon impredicative level system sol move ramified system quantified types objects level level occupied ordinary monomorphic types structures polymorphic functions 

language ramified dependent types 
dependent types basic forms dependent types call general product general sum 
general product written px naively interpreted ordinary cartesian product family sets xa indexed xa aa denotes type functions map element aa functions result type depends argument specifying dependence 
elements px introduced lambda abstraction eliminated function application 
degenerate case constant function defined expression containing free general product reduces ordinary function space general sum written sx intuitively just disjoint union family xa xa aa bb elements general sum form pairs element called witness index determines type second element 
elements general sum constructed primitive injection function inj pa 
sx analyzed primitive projection functions witness sx pp sx witness note existence projection functions corresponding roughly martin lo operation general sum open construct contrast existential type sol categorical sum see mp 
degenerate case independent general sum isomorphic ordinary binary cartesian product ab 
sections take liberty saying simply product sum mean general product general sum 

small large types stratified type system working basically simplified version type system described cz 
fact infinitely levels mentioned 
bottom hierarchy small types contained level type universe type small types generated customary primitive types int bool closing order general products sums type lx type including degenerate forms constructions recursion 
general product types called indexed products cartesian products dependent function spaces 
notations include cz bl formulas types isomorphism 
closed version general sum analogous sol existential type derived general product pra open version itt appears independent primitive notion 
general sums called indexed sums disjoint unions dependent products unfortunate clash general product terminology 
notations include bl formulas types isomorphism 
simpler forms type language admit variables ranging values constant functions de type serves type small types small type 
resides level universe large types type turn large type belonging universe type 
type universes cumulative type contains small types 
type contains large types generated type second order products sums 
instance order products sums viewed operations large type type 
type type type degenerate form analogous type type 
note elements large type type considered level objects belong basic type universe type existential universal types sol correspond large types type type type type elements large types respectively order polymorphic functions structures open analogues sol existential structures call simply structures danger confusion 
elements large types polymorphic functions structures level objects level small types 
means polymorphic functions structures manipulated ordinary values level objects 
fact think structures generalized form small type 
level general sum operation associated primitive operations general polymorphic types type 
type type type inj type type 
type corresponding types witness left exercises 
basic structure expression rep translates inj type lt type type abbreviate inj polymorphic parameters type lt clear context 
note generality may create structures structures types witnesses polymorphic functions witnesses won pursue possibility 
exploit generality language described section 
rules type checking system conventional consisting appropriate generalizations usual elimination rules level additional rules deal conversion definitional equality 

simple pebble language describe fairly simple language intended isolate useful subset ramified type system sketched previous section 
call language dl just name 
dl resembles pebble having explicit dependent types ramified nature closer spirit ml module facilities mac 

circumstances order general product sum reduce degenerate forms px lx 

small types base type language dl simplified version ml 
simplicity omit recursive types add labeled product express types value environments 
type expressions represented metavariable texp syntax texp bool int real tvar texp texp texp 
id texp witness svar tvar ranges type variables svar structure variables 
write abbreviation witness svar 
actual small types dl correspond closed variable free type expressions class denoted simply type short type 

signatures class signatures obtained starting type closing respect operator 
gives class types characterizing union small types abstraction free structures contain second order lambda abstractions 
operator directly give little grammar signatures covers cases interest sig type svar sig texp svar sig sig short typically texp forming body signature labeled product type specifying collection named functions values 
note sig type forms structure variable type variable structure variables subsume type variables 
note signature structure variable appear component type subexpression 
appear directly type subexpression witness formed nested application witness denoting small type 

structures dl term structure somewhat broader sense match notion signature 
dl structures may small types nested structures 
case signatures substitute syntax inj primitive full generality 
syntax structure expressions naturally follows signatures viz 
sexp svar texp inj sexp exp inj sexp sexp svar ranges structure variables exp ranges ordinary value expressions 
specify exp say includes labeled tuples called bindings pebble expressing elements labeled products expressions form svar formed nested application witness denoting value type depending signature svar 

functors allow second order lambda abstraction structure expressions respect structure variables form functions structures structures 
mac call abstractions functors 
allow nested abstractions yielding curried functors 
type functor general product call functor signature 
syntax functor signatures functor expressions msig svar sig sig svar sig msig mexp svar sig sexp svar sig mexp represents syntax structure expressions extended encompass functor applications adding sexp mexp sexp restrictions embodied structure functor syntax amount saying structures witness svar proper small type svar restricted range structures type witnesses 
functors components functors functors arguments 
words functors restricted essentially order mappings structures 
restrictions partly reflection certain tentative principles programming parametric modules partly attempt simplify implementation language 
experience parametric modules functors implementation help refine ideas restrictions full type theory pragmatically justified 

dependence abstraction signature closure section considers interactions occur structures functors defined terms 
interactions abstraction hierarchical chains definitions particularly involving sharing particularly subtle interesting 
definition new structure frequently refer existing ones setting various forms dependency new structure older structures mentioned definition known antecedents 
instance suppose cpoint short existing structure signature point define new rectangle structure terms cpoint follows point type mk rect rect ft rect rect cpoint inj cpoint cpoint tl br 
tl br 
dependence cpoint explicitly indicated fact name cpoint appears free signature 
cases overt dependency significant dependent structure usually requires access referenced structures auxiliaries 
instance manipulation rectangles entail manipulation associated points cpoint 
cases dependency structure antecedents may tacit overt structure defined terms structure expression str appear signature generally occurs purely internal purposes implementation relevant structures structure overtly depends referred signature called supporting structures briefly support 
overt dependency str sig sig ways making self sufficient relative effect closing signature sig respect method respect turning functor la sig str pa sig sig signature closure sig respect alternative incorporate witness component structure body yielding closure sig signature inj str sx sig sig note closure longer structure 
order get usable structure apply structure expression recreating original situation overt dependency sig 
hand truly self contained far concerned usable stands incorporates necessary supporting structure 
ml called substructure consider happens chain dependencies str sig str sig str sig wish respect supporting structures 
different ways full abstraction respect supporting structures mkc la sig lb sig str pa sig pb sig sig abstraction respect residual dependence fixed mkc lb sig str pb sig sig abstraction respect la sig str pa sig sig mkc la sig str pa sig sig suppose close respect obtaining inj str sig sx sig sig abstracting respect gives mkc lb sig inj str pb sig sig close respect respect get mkc lb sig inj str pb sig sig sig sb sig sig 
rules type equality insure structures sig mkc relation argument result mkc manifest signature 
note closed form support coalesced single structure easier fully respect support 
levels supporting structures efficiency abstraction significant advantage 
hand impossible respect leaving fixed component final example illustrates interplay sharing abstraction 
suppose structures related follows str sig str sig str sig str sig depends depend fully respect support la sig lb sig lc sig str pa sig pb sig pc sig sig hand close respect respect support get inj str sig sx sig sig inj str sig sx sig sig lb sig lc sig str pb sig pc sig sig sharing type new added 
way support definition probably depends fact share support think rectangles circles points example 
sharing directly expressed signature case special sharing constraint added signature 
styles modular programming illustrated 
favored pebble expresses dependencies allowing structure names appear signatures structures tends directly individually supporting structure 
style representative modules ml 
involves forming closures capture dependencies coalesce support structures level 
fact ml module language goes far require signatures closed argument result signatures functors 
factors involved indirectly support strict closure rule 
particular ml generative declarations datatypes exceptions fact structures contain state necessary maintain fairly rigid relations structures 
addition closed structures appear appropriate units separate compilation persistent storage 

main thrust ramified type system general dependent type constructs effective tool analysis design programming language type systems particularly oriented programming large 
explored design choices raised proposed languages pebble sol standard ml modules 
important questions remain answered 
instance need precise characterizations relative strengths predicative vs impredicative type systems reflexive vs irreflexive systems 
desirable representation independence result analogous mitchell mit stratified system 
appears basic polymorphic type system ml mil fact ramified system system described second order lambda calculus viewed natural generalization 
bc bates constable proofs programs acm trans 
programming languages systems january pp 
bdd boehm demers donahue informal description russell technical report tr computer science dept cornell univ october 
bl burstall lampson kernel language data types modules semantics data types kahn macqueen plotkin eds lncs vol springer verlag berlin 
bur burstall programming modules typed functional programming int conf 
th generation computing systems tokyo nov 
car cardelli impredicative typed calculus unpublished manuscript 
cf curry feys combinatory logic north holland 
ch coquand huet calculus constructions information control appear 
cm cardelli macqueen persistence type abstraction proceedings workshop data types persistence aug appear 
cw cardelli wegner understanding types data abstraction polymorphism technical report :10.1.1.117.695
cs brown university august 
cz constable type theory pl cv acm trans 
programming languages systems january pp 

deb de bruijn survey project automath curry essays combinatory logic lambda calculus formalism academic press pp 

dd donahue demers data types values acm trans 
programming languages systems july pp 

gir 
girard une extension de interpretation de go del analyse son application elimination des coupures dans analyse la theorie des types second scandinavian logic symposium fenstad ed north holland pp 

hoo hook understanding russell attempt semantics data types kahn macqueen plotkin eds lncs vol springer verlag pp 

howard formulas types notion construction curry essays combinatory logic lambda calculus formalism academic press pp 

written mac macqueen modules standard ml revised polymorphism newsletter ii oct 
mcc mccracken investigation programming language polymorphic type structure ph thesis computer information science syracuse univ june 
martin lo theory types unpublished manuscript october 
martin lo intuitionistic theory types predicative part logic colloquium rose shepherdson eds north holland pp 

martin lo constructive mathematics computer programming logic methodology philosophy science vi north holland amsterdam pp 

meyer reinhold type type th annual acm popl symposium st petersburg january 
mil milner theory type polymorphism programming jcss dec pp 

mit mitchell representation independence data abstraction th annual acm popl symposium st petersburg january 
mp mitchell plotkin types existential types th acm symp 
principles programming languages new orleans jan pp 

rey reynolds theory type structure colloquium sur la programmation lecture notes computer science vol 
springer verlag berlin pp 

sco scott constructive validity symposium automatic demonstration lecture notes math vol springer verlag pp 

