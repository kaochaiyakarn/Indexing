mobility computation ferreira cs tcd department computer science trinity college dublin dublin ireland telephone fax br federal university dcc de barros salvador ba brazil telephone fax mobile agents internet brought new ideas computer science years 
example moment conceiving idea moving computation place ectively general notion computation transcends mathematics meets phys ical world 
requires non mathematical discussions theoretical foundations computer science 
article provide di erent semantics computation formalized model simpli cation 
model forms mobility thesis internet entails philosophy essential subject theory foundations practice computing science 
easy perceive characteristics era era transcends life time comparisons realistic books teach 
internet grown quickly 
global infrastructure technologies satellite television mobile phones portable computers changed humans behavior planet psychologically smaller 
circumstance led new terms regarding mobility computation programming languages networks terms deserve care regarding appropriateness corresponding uses 
article interchangeably terms computer science computing science meaning science usual careful consider humans compute 
di erences human thought machine computation indispensable philosophical concern 
questions arise conceptually interest theory com puter science 
example consider mobile agents travel space velocity 
rst traveling inde nitely 
second running simple algorithm met rst halts 
regard second agent running nite computation 
adopt point view computation physical concept space answer 
mobility introduce new elements theory computing science 
strong opinion computing science community academic theoretical done short period time 
certain philosophical perspective observe mobility primitive computation provide broader formal semantics computation proof meaning general introducing novel mode mobility broadcasting media radio television nally mention factors real world faults delays network connections relevant general physical notion computation 
formal semantics alternatively write rules space time logic 
argue physical philosophical factors part broader notion 
theory computation strong connection philosophy claim extends connections logic philosophy 
prove logically claim simply discuss matter presenting number examples expect arguments convincing 
concerning physical factors introduce simple formal semantics computation includes time space demonstrate mathematics logics de ne going call mathematical computation going computation reasoning capture broader notion computation accord somewhat informal semantics 
concerning philosophical factors enter subjective informal psychological world real world transcending mathematical logical language traditional computer science texts 
think notion computation con ned single concept diversity concept computation depends de ned underlying machine machines share common properties 
case important point machines gradually complex 
global computer instance general machine atop internet services includes notion code mobility 
approaches hippo project 
hand computer provides general notion comparison notions de ned church turing consider mobility primitive 
hand geographical distribution introduces factors de nition computer neglected computability 
computer operations constraints computer capability global computer provide operations depends ethics common sense laws world discussed chapters 
factors belong real world ideal world mathematics 
example state country establish law prevent unsolicited mail say messages advertisement contain string subjects 
subjective parts situation laws mail apply receiver sender sender receiver situation controversial 
holds mobile agent systems typically spread di erent cultures 
hand global computers establish computed 
hand laws behavior depend time space factors 
hypothetical example suppose country law adopts policy software open public administration 
global computer guarantee privacy mobile agents 
country impose constraint coming code 
discussion controversial 
article formulae informal discussions particular conceptual hopefully convincing ones signi cant attempting achieve goal 
term theory referred logical theory informal meaning 
section somewhat ontological 
discuss terminologies notions related agents mobility 
section conceptual 
introduce view mobility detached concepts discuss relationships related concepts 
section discusses notions distribution centralization 
section introduces intuitive notion computation 
section provide notion computation broader conventional notions modeled turing machines ectively computable functions parallel computation 
higher level notion physical psychological philosophical factors mathematics 
see computing science table legs studies 
way extend conventional operational semantics adding space time mobility de ning deeply states 
section discuss practical issues respect global environments borrowing key words philosophy 
section concludes article 
agents term agent ai distributed systems ds communities di erent meanings di erent levels 
addition term agent english spelling meaning term italian spanish portuguese agent french 
languages agent normally mean person acts behalf person people person causes happen 
words agent come ago latin old simply mean act 
meaning possible problem verb apply software assume action physical 
case meanings may help understand agent terminology 
elds computer science ds ai noted term agent lacks clear standard de nition 
interesting question really necessary clear standard top de nition problem disappear naturally 
di erent communities word english di erent meanings case technologies elds things common 
perspective ought explore investigate combination 
latin times societies developed term agent sophisticated 
nowadays travel agents represent passengers transactions airlines 
agents able act users behalf autonomy permission intelligence desirable requirements holds humans software 
stress little reason terminology agents com robots agents act physically environment mobile referred mobile agents meaning di erent researchers distributed systems community 
addition compensate researchers ai commonly concept software agent di er forms agency 
hand mobile agent technology initially developed solve minimize technical problems particular environment performance regarded important internet shared resource 
transactions usually need messages partners case holds ought performed remotely local communication mobile agent agent 
requires new programming languages concepts constructs designed considering agent migration priority 
hand mobility language concepts naturally linked 
adaptability skills mobility primitive 
anyway programming language design active eld research code mobility contributed years 
example person moves changes focus perception needs kind language sees new people objects interacts language learns 
learning process decide move 
exactly mobile agents 
natural important component involved intelligence 
believe terminologies agents ds ai di erent apply di erent levels easily complement 
programming languages support integration 
mobility related concepts section conceptual discussion foundations mobility 
survey related programming languages analyses classi cations respect issues certainly 
important contributions 
mobile computation informally mean application computation mobile code applications 
longer distance stronger argument mobile code systems 
apart solving important practical problems consequences applications electronic commerce conceived code mobility cpu loan rental kind application impossible done line model computation provide code mobility 
mobile agents typically come cpu cpus parallel 
simple example decisive proof code mobility broader meaning computation 
facing simply new technology general notion computation 
notion probably lead important results theoretical computing science mobile agent technology 
code mobility new idea 
conceptually observe mobility basic concept computer science part models computation 
example turing machine de nition head moves tape result current state transition function 
petri net control moves way similar nite state machine deterministic 
furthermore von neumann machine sequential computer provides mobility levels variable assignment move copy 
application rule calculus move sense 
digital analogical circuits move bits electrons 
order generalize bit moves part computer may conceived simplest form code mobility source content destination 
models computation provide form simple mobility code mobility primitive general notion computation 
broader model fact easily able mobile agent technology simulate turing machine head token petri net example generality 
logical paradoxes regarding time space motion 
famous certainly zeno paradoxes 
logic basis computer science code mobility particularly intriguing area 
concepts nowadays researchers code mobility community distributed systems group conferences distributed systems call papers mobile agent technologies 
important issue mobile agent systems distributed systems 
think carefully answer de 
research mobile code technology includes research programming languages design implementation languages programmers aware resources contrasts philosophy distributed systems traditional sense 
returning primary conceptual level terms centralization distribution related oppose complement 
prefer distributed computing technical reasons eciency robustness security concept centralization necessary computing 
human body metaphor human system consists heart spread body blood 
know movement blood heart represents centralization opposite move represents distribution 
natural example centralization distribution help necessary 
mobility third important component represented movement blood directions 
mobile code systems distributed systems related 
likewise mobility distribution concepts live easily 
concepts exist di erent levels abstraction 
distributed mobile code systems support 
install mobile code system atop distributed system provided suitable view resources locations application programmers alternatively implement distributed system code mobility 
concept centralization mobile code systems 
example concept centralization applies level programming 
case central component programming language provides standards imposes constraints system 
likewise agents move central place speci interpreter communicate locally 
independence centralization distribution possibility implementing mobility general concept candidate primitive model computation 
pair concepts individuality collective relevant global computers 
physically person individually unique 
collective level people naturally common features eyes ears mouth re nements characteristics depend groups due family factors example 
accordingly individual personality share collective standards instance commonly felt marilyn monroe beautiful 
psychological standards vary place time change slowly quickly 
culture fashion examples collective standards 
family psychological characteristics including due education example psychological characteristics shared groups 
rules behaved conduct exemplify group collective common sense normally conscious conduct 
jung studied deeply called collective unconscious theory accord philosophical perspective 
adopts architecture agent system analogy psychological hierarchy agents view interpreter implementation interpreters equal compatible mas virtual machine corresponds collective unconscious agent corresponds conscious part 
turns psychological model including unconscious simulated computers providing model human computing 
exceptions probably intuition emotion provide software human behavior 
emotion intuition computed philosophical issue computing science 
computers pass turing test 
open question 
scope ai neural networks mobility brain 
neural network tends represent learned perception intuition neural network knowledge spread globe wishes 
observe traditional logical model closer western way thinking neural networks opposite model closer eastern 
case stress applications technology mobile agents implement mobility mobility essential property networks 
regarding computation mobile computation exists modality mobility mobile computing 
modality comes wireless networks portable computers subject somewhat close robotics sense 
forms orthogonal means application ect directly 
fact mobile computing practical concept 
contributes notion computation 
surprise including humans computation philosophy computing science 
example general consider mobile agent move craft movement part general notion computation 
fact programs need physical machines run example humans part computation 
intuitive notion computation traditionally models computation turing machines church calculus post production systems kleene recursion schemes odel equational de nability shepherdson sturgis register machines programming language ow charts 
example line cpu loans agents come host identi cation negotiation cpu possibly resources depending agreement 
cost expensive agents move host 
practical concerns computation depends presence computational entity acting locally example exists computation impossible performed form interpreted code mobility 
example di erence local computation frequent remote accesses comparison strong mobility having transported agent virtual machine connection interrupted time computation may ected fault 
traditional models computation extensionality intensional concerned time space part notion model going 
background programming languages model extension programming language 
conceptual issues computational entity 
mean code interpretation 
sense code data discussion computation leads philosophy 
term executable code depending adopted meaning di erent views computer science 
code mobility introduces philosophical view computer science 
cardelli informally de nes global computation points related issues multiple global computers interact effectively 
says main characteristic global computation geographical distribution 
term global refers planet 
keep term global computer article prefer term global computing global computation practical nature internet structure speci characteristics instance computation theoretical concept alan touring church kurt odel mathematicians 
hand propose notion computation general global computing 
shift object commonly referred computation math computation accommodate mobility primitive computation mobility focus attention 
opinion complex intelligent characteristic computation mobility operations 
parallel computation theoretical concept modeled calculus 
article author shows channel transmitted process instance major step foundations mobility computation 
technologically parallel computing linked super computation powerful machines code mobility implement parallel computation local area network wide area network fact code mobility technologically new 
parallel computation simply computation parallel 
ambient calculus captures notion code mobility calculus calculus describes parallel processes 
calculi seal calculus extension calculus details associated mobility resources uncertainty due physical media 
hand seal calculus somewhat practical calculi sense dependent current structures internet 
notion mobile process new term mobile computation due cardelli important contributions authors 
interesting feature model computation strong mobility transcend term rewriting systems 
comparison calculus primitives pre xes primitive moves remaining symbols surrounding contexts current place place current context 
example rule moving agent composed parallel processes place place jq jq rule applied instance context free grammar 
practical level consider places local resources agents locally order agents move matter 
instance context able think terms general sense church rosser property variables computation curry howard isomorphism 
dealing model computation general purely mathematical 
comparison classical intuitionistic logics linear logic current states easily model actions material resources model parallel processing mobility want consider details concerning physical nature computation 
instance stands attempt perform action instant corresponds statement moves agent place timeout operation predicate stands performance action predicate stands discharge action linear negation tensor product linear conjunction dual 
requires actions dual linear conjunction linear disjunction requires actions 
di erence hand ensures operands choice exactly case result remote operations including de ned 
hand operator ensures availability actions 
ensures availability actions giving choice choice formulae 
linear implication equivalent 
di ers classical implication antecedent continues valid occurrence antecedent longer valid 
updates current state replacing occurrence provided occurrence current state 
meaning rule follows attempt move attempt time entails attempt discharged due timeout move performed choice discharge move 
notice due linearity attempt discharged rule repeated applied 
pair modal operators 
course dual 

parallel computation general notion comparison recursive functions 
linear operator instance captures notion parallel operands 
looking generality notion computation includes parallel computation mobility physical nature computation 
comparison ambient calculus instance consider timeouts connections 
observe issues related computation limited planet 
example mobile agent migrate spacecraft continue computation matter 
agents travel planet matter distance 
identify term refer model includes code mobility 
suggest computation real world stress physical psychological nature computation 
larger distances time intervals mobility fundamental characteristics model comparison computation local single hardware 
computation real world notion theoretical global computing physical properties time space limited planet internets 
characteristic global computing availability resources distributed requires programmers aware locality resources replaces ancient law distributed systems 
characteristic global computing interaction users machines problems security privacy typical global computing 
computation real world global computing entail mobility 
mobile code systems implement computations real world may implement locally necessarily global environment 
start considering mobile computation specialization computation see ontological paradox traditional notion computation moment conceiving idea moving computation observe ectively general notion computation transcends mathematics meets physical world 
totally compatible odel incompleteness theorem 
broader sense computation entails philosophical issues 
objects real world far perfect mathematical objects 
words code mobility changes de nition computation 
term real philosophy concerning realism 
opposite term ideal philosophy concerning 
computation real world consider real world includes material world ideal mathematical world 
physical psychological worlds example part reality 
example discovered 
sky 
wondering planet named second war think best name resuming smell time 
anyway powerful emerge collective unconscious involved planet humanity 
example saw uni cation country years ago 
changes sudden death 
intriguing questions computing science probably face years global public computers concepts real ideal uni ed 
interesting question compute conscious 
consider phenomena broad notion 
evidence machine intelligence di erent human intelligence 
case dare answer questions study psychology deeply 
consider humans unconscious job computing human behavior computers dramatically harder 
give idea 
give examples view 
rst observe sensitive pleasure conceptually mechanism nature preserve individual species 
individual level beautiful meal feed need 
collective level sexual pleasure person pregnant 
second example psychologist carl jung unconscious projected things people deal daily lives collective 
projection view individuals unconscious personal collective ole projection aware individuals source standard interactions world possibly standard deserving change 
extend view interactions machine computation de ned part unconscious 
consequence humanity part de nition computation philosophy gives indispensable foundation computing science 
projection mechanism psyche advise individual concerning perceive 
sense projections normally pathological ole projection somewhat similar physical pain advises individual sick treated 
physical symptoms play ole acting collective level especially disease contagious 
red things peppers nature catches attention chance beautiful red owers play ole example attractive produce fruit 
case red color catches attention simple evidence current idea mutation cause evolution kingdom mutation explain evidence collective oles 
example pleasant help collective 
amazing examples 
regarding pieces evidence collective unconscious sense psychological mechanism protect individual species 
cognitive science wants implement cognitive processes software nd di erent philosophical positions concerning nature psyche complex 
establish computation nd question exist computation perceived humans 
depends philosophical position 
term real adopt computation real world regards human central component 
include observer de nition answer question previous paragraph 
case previous question provide foundations theoretical computer science mathematics physics philosophy 
relationship mathematics computer science certainly strong relationship mathematics physics 
example reduction steps computation version calculus syntactic sugar calculus beautiful 
steps computation described purely objects moment reading actual computation carried psychologically context time place 
problems try connections mathematics social sciences having collected pieces evidence statistics 
face important question experimental research appropriate examples provide convincing 
issue existential cases answer subjective 
notion computation probably general notions see computation de nition def sequential concept computation extra philosophical component turn de ned product time space possible psychological component place time traditional physical dimensions respect observer modern physics accord philosophy view time representation articles instance interval temporal logic commonly applied ai planning systems elds time represented real values time passes moment normally increases 
branches lines represent futures 
approaches useful applications including system speci cation express natural sub languages particular cases modality 
adopt form representing time making ow 
de ne nite set temporal moments contrast de nition simplify rules adopting euclidean cartesian distances considering gravitational forces change notion time space objects move velocity close velocity light 
book euclidean non euclidean geometries see 
ow relational operators real numbers state temporal relations 
notice representation time consider difference velocity object observer close velocity light case computation real world 
longer distance signi cant modern physics formalism simpli cation notion general depends factors appear semantics gravity bodies 
operators time instants refer daily life temporal concepts refers happens 
apart order operations interval relationship indexes 
time variable holds necessarily equal obviously de ned operators apply represent time somewhat subjective exible way dimensions 
choose spiral represent view time orthogonal projections spiral plane forms circle 
time cyclical notion measurement time terms angle 
point view time ow wave perceive niteness want get straight line project wave uniformly dimension 
subjectivity exibility concerning additional circle associate angles routine 
angle fraction hour example 
representation angle fraction year example 
di erent spirals represents view 
way include observer notion time 
time variable represented single real number easily converted tuple 
article need representing looking subjective component 
representation left suggestion applications 
de ne computation de ning set operations machine 
states real world subsection time space continuum identi ed cantor dedekind construction 
intention discuss philosophical view current article choose example having mind proposal ancient view known 
anyway subjective view needed supporting explanations subsection 
model supports idea computing may support idea computing possible minor changes 
parallel example philosophy basis foundation computer science subsection regarding agents certainly travel china culturally exposed ancient wisdom 
india instance country asia agents exposed di erent cultural background 
general computer science modern western culture mobile agents global environment making think meaning computation 
furthermore hand complexity theory states computers 
hand ethics branch philosophy asserts computers complementary approaches 
computation real state simply refer state address space program 
behaviors including actions unique due time space 
behavior part state perceived externally internal state contains perception external world 
state set contain behavior internal state turn contain locations characteristics physical world speci time humanity computers world accessible agent 
sense mismatch real states machine set behaviors 
uncountable countable 
way observe human behavior nature di erent machine computation performed algorithm step step 
human experience continuous time space tend perceive time space structure real numbers mathematical models computation traditionally integer values 
analogy drawn relationship ching book change old eastern probably similar view 
ching pictorially composed lines 
lines move yin yang move yang yin 
ching binary system 
hand pair concepts yin yang pictorially shown inside tao circle way gradually granularity moved 
fact symbol appears national ags china notion time individual year old child year corresponds experience half life 
time pass quicker 
countries fact important issue global computation philosophy foundation 
furthermore picture suggests ching simpli cation view reality 
likewise somewhat similar point view digital computers useful improved human computation concept limited set integers di erent points view 
certainly suggests potential discoveries niteness tape turing machine model represents potential nite countable set 
concrete example want conceive circumference cartesian plan sucient equation denotes radius calculate coordinates convince points exist nite points 
niteness tape turing machine model suggests potential consider proposing model natural easier conceive 
humans reason develop science psychology mathematics ways mathematical world pure exact precise clean tidy structured comparison psychological world dreams unconscious instance 
example kind issue input output purely functional languages solved monads 
di erent opinions issue concerning mathematical real worlds strong piece evidence computation philosophical notion 
entails philosophy theoretical basis computation computer science 
best mathematics 
somewhat similar practical problem traditional logics real world closed world assumption despite usefulness predicate de nitions match open world internet 
closed world 
dicult conceive prolog distributed implementation platform 
adding third truth value able permit de nitions predicates open closed world shall need timeouts 
rough comparison piece music played piano played violin 
piano notes form discrete intervals impossible play sound notes instance 
regarding violin intervals notes continuous nite range notes 
similarly digital computers represent real numbers precise granularity 
match reality shall need compute novel idea 
case discussion de ning notion computation broad capture mobile agents see nite computation discrete interval time sequence states ft chosen instants accord focus simply add notions time space state 
de ne computation need de ne machine 
machine virtual machine supports mobile agents virtual machine subset pascal plus ability move code data state computation accord de nitions 
firstly de ne state tuple composed internal state external state behavior place instant 
def set possible states 
article de ne sets propositions 
de ne empty state def obvious properties denotes common exclusive 
condition predicate de ne properties follow def condition state means part internal state 
similarly predicates sets def accordingly def def def functions sets def def take liberty denote state non computation 
notice notion apologize abuse notation set symbols corresponding meanings dependent context 
article closely related collapse refer virtual state 
state tuple hr ti corresponding virtual state time mentioned consider informally possibility continuous states respect time space de ne simpli ed version computation computation real world sequence states select accord focus attention mentioned 
set machine states 
de ne case non re exive anti symmetric relation boolean indicate existence subsequent states associated computation 
de ne terms properties follows church rosser property 
particular case holds 
de ne transitive relation follows def exclusive de ned holds 
important properties follow 
practical view computation 
unique respect 
informally call relation computation real world 
intention place computation performed instants external world longer 
point view computations performed di erent times 
simpli cation human thought example corresponds individual death 
dicult want mathematically establish computing starts nishes case 
establish human computing start born nish die nite 
think terms collective computing nishes due human communication 
empty state case term rewriting system rules transitive relation symmetric re exive time passes backwards joining properties obtain follows relation implies measure uncertainty due unpredictable nature physical world 
computation starts probability success gradually increases exponentially time 
de ne di erent relations distinguish mobility remote operations operations formal consideration detail relevant 
add probability denoted states sucient general model 
alternatively de ne follows def represents assertion probability mn mn mn def mn relation indicates states coexist independently 
linear de ning operator style def hr hr set computations set states 
de ne function boolean informing second operand state produced computation rst operand 
formally def function may included uence behavior computations interaction computations 
program running twice produces di erent computations di erent behaviors 
signi cant properties def computation property unique object wrt nal state 
property 
de ne set programs set mobile agents mobile processes potential computation behavior 
semantics subsection attempt formalize simpli ed version previous notion computation informally introduced section 
semantical rules tuples adopt brackets bb cc mean meaning 
program object language computation de nitions apply scope stated contrary 
avoid exhaustive consider variables separate scopes rule names meanings variables de ned explicitly global rules 
isomorphic stand set boolean values sets carriers algebra going de ne 
write explicitly want stress relationships coordinates time individually semantical rules 
apart notation rules linear rst order predicate logic rules 
linear logic expresses actions predicate logic expresses statements regarded true false 
regarded resource mainly hold time predicate expression hold 
states predicate expressions change time passes 
write logical expressions operational expressions 
model de nitions common dimensional space universe 
cartesian coordinates refer points space 
def nite countable set possible agents def fa written language agent input queue point space contains nite set obj def fa stands real number value uu stands unknown kind vacuum fa 
de ne algebra def ha ar loc uu par 






ic th signature ar set variables internal obj fy loc set internal locations set states 
ar def hfa ar loc consisted usually de ned mathematics plus functions locate ar loc lookup loc update 
loc value del queue ins queue physical move intuitively maps variable location results content location particular state 
updates memory parameters location value provided state results value corresponding point space time gives rst element input queue state operation removes rst element queue inserts value element queue post functions coordinate results new corresponding coordinate due possible physical movement 
def semantical rules clear simplify little notation shall assume occurrences functions uniform consider physical shifts tiny intervals di erent velocities 
case state independence index occurrences theses operators example rule occurrences 
additionally initial state agent 
level abstraction require capture computation regard meaning de ning operations terms sequence microcode 
alternatives 
choice divide rules levels 
concerns object computation usual call object rules 
concerns application object rules 
applies interaction mobility operations 
divide rules levels avoid self rules paradoxes 
state tuple hr ti virtual state time cartesian coordinates locality 
notation mean variable contains value virtual state adopt ambient state refer particular state time place ambient states important stress mobility virtual states 
simply states virtual state placed ambient place time premise notation mobility related operations simply write denote situation rules 
semantical rules de nition def hr represented 
logic 
states happen time parallel 
case denote agents computation parallel hr ti hr ti jc hr ti hr ti 
parallel computation presents behaviors parallel 
notice computation interfere 
model computation extension language 
model observe statement de nable de ned endwhile de ning similar loops change simplify job 
formulating model terms set operations 
important see operations necessarily correspond suitability programming languages permit proactive move de ning model 
coordinates instance normally provided language level coordinates model provide somewhat suitable notion space 
geographical notion example able consider high computation way consider operations form somewhat minimal set primitives computing 
presenting exhaustively minimal set consider mathematical computation exploited avoid reproducing literature provides minimal imperative language typically statement 
formalize operational semantics complement theirs give local primitives 
working objects real constants 
space initialization 
create statement creates copy computation place 
arithmetical operators relational operators assignment statement 
statement 
strong mobility statement 
represented 
communication view throw statements remote communication read write local communication 
die primitive 
physical mobility operators post xed functions de ned algebra 
variables range address space ar def fv shall symbol denote variable 
statement build case statements expressions turn build min max logical operators 
write initial axiom initial eval relation scc eval hu 
ti 
time accessing variable place time notice signature de ned ar loc function variable locates storage 
agent create agent executing create statement 
new agent clone executes scratch coordinate 
semantics statement follows 
hr icc exec hr ti hr 
ti time interpreting create statement 
de ned globally velocity light rule 
time spent install agent destination transmission completed 
recast previous rule follows logic 


create exec 


purpose simpli cation visibility allow slight abuse notation writing temporal subscript operations part temporal expression appearing subscript formula instance 
appears 
valid spatial relations subscript 
clear meaning 
semantics corresponding timeout situation follows hr icc exec hr platonic extensional external point view complete realistic version logic explicitly stated observation conditions exists 

create exec 
die primitive statement language execution statement program computation goes inactive state represented empty set 
statement regard interested computation interested language hr icc exec logic 

die exec 
strong mobility source destination ambient states time current state hr operational semantics statement moves computation position established timeout follows bb hr icc exec hr ti internal point view logic 



exec 



latency 
time interval due code size time interpreting instruction 
simplify semantics timeout operation follows bb hr icc exec hr write logic follows 



exec 
semantics operation bba scc eval hu bba hs icc eval hv bba scc eval hu ii logic 
eval 
hu si 
eval 
hv si 
eval 
hu si state time evaluating operation machine operands 
uu permits operators underlying machine lazy rule bba scc eval bba scc eval ii space time logic 
eval 
si 
eval 
si pair rules replace operator 
notice assuming operands side ects evaluations move computation mobility exist due physical movement 
assignment statement bba scc eval hu scc exec 
alternatively logic 
eval 
hu si 


exec 
def hr interpretation time evaluating expression time assigning value variable 
local expressions statements similar 
semantics statement follows bbb hr icc eval hv bbc hr icc exec hr hr icc exec hr ti hr icc exec hr ti ic ic time executing statement time time evaluating boolean expression bbb ha icc eval ha icc exec ha rules statement logic follows 
eval 
hv 
exec 

exec 

exec 

eval 

exec 
agents coordinate communicate locally 
provide local communication agent input queue part state 
brie de ned algebra signature 
loc updates queue value type state location loc 
removes rst element agent queue receiving state producing 
informs rst element agent queue removing pair contains value new state 
ar loc function variable locates storage 
concerned delays faults hr uu hr hr icc exec hr ti 
par par stands partner system variable informs sender id par time interpretation read statement composed parts interval time obtaining indicates interval time receiving 
alternative rule logic follows 
uu 


par 
read exec 
queue empty results uu modi cation state queue hr uu hr icc exec hr ti 
uu logic 
uu 

uu 
read exec 
signature inserts value queue opposite operation write sends real number stored variable denoted semantics bba hr eval hu channel hr icc exec hr ti hr ti ia alternatively logic follows 
eval 

ia 
write channel exec 

state computation time id computation corresponds par sender id read statement 
write statement writes receiver queue value order 
stated corresponding rules read statement obtains elements order 
code mobility local communication additional facility mobile agents remote communication agents 
de ne remote communication formally rst need establish rules visible agents agent visible agent di erent point agent 
case attempt access value results uu visible agents 
case say local agents 
visible model see content point agents execute statement view semantics logic 



view eval 
hu alternatively 
hr ti hr icc eval hu 



time interpreting view statement 
remote attempt see value local agents rule hr hr icc eval value accessible uu provided 
alternatively rule recast logic follows 



view eval 
local access permitted time fa id agent currently computing 
semantics follows hr fc 
hr icc eval hu 
alternatively space time logic 


fc 

view eval 

hu semantics timeout situation view request follows rule hr icc eval logic 

view eval 
constrained accord expression 
model provide form communication agents throw real number place space timeout operation takes time completed described 
place occupies point value uu thrown part programming languages constructs introduced 
operational semantics throw instruction follows bba hr icc eval hv hr ti hr icc exec hr ti ti 
th th time interpreting throw instruction 
alternatively rule logic internal point view 
eval 
hv 



throw exec 

case agent agent throws number place ect 
fa non empty set agents bba hr icc eval hv hr fa hr icc exec hr ti fa ti logic rule follows 
eval 
hv 


fa 
throw exec 

fa timeout condition statement throw rule hr hr icc exec hr ti ti logic rule follows 





throw exec 

notice real numbers contain codi cation nite mobile agent 
means throw statement able model model 
formalize sequence statements bbc hr icc exec hr bbc hr icc exec hr ti bbc hr icc exec hr ti equivalently logic 
exec 

exec 

exec 
add meta language expression semantics attempt perform remote operation view throw time rule view throw skip performing operation time rule view throw 
alternative linear logic rules state condition notice de morgan law written rst linear rules states remote attempt repeated time run 
second linear rule states time run operation longer attempts 
linear logic expressive captures action 
need formalize notion sooner better 
time variables action type performed rule states action performed soon possible 
spite generality model section shall example demands done notion computation 
shall complement current model operation novel computer science semantics described just example 
agents may chess section going introduce evolutionary model code mobility 
quotation due discussion section considers possible collective ole mutations 
mutation merely individual random 
example playing chess model solve combinatorial problems general 
tell story ought assume computers sold built radio receptor people encouraged 
assumption practical concern 
discussion practical potential situation sucient provide novel notion computation 
central module cm ability play chess normal chess machine strategies heuristics main task time management 
game normally divided phases opening middle game endgame phases di erent approaches 
opening example cm choose moves accessing data base 
approach longer applies cm computes 
environment subject faults far better provide reasonable move time wait 
anyway cm machine parallel 
user move cm generates mobile agent carries current board position 
media broadcasts agent 
computers radio frequency receptive including massively parallel computers receive agent 
agent arrives computer generates randomly new sequence moves computes locally move 
mobile agent obtains potentially best local move usual 
nd practical problem number agents huge practical migrate cm machine 
way select mas best moves solution media caused problem time cm generates broadcasts mobile agent ama select call agents reached minimum acceptable score probably greater cm 
ama carries cm current best move current best score estimated minimum acceptable score 
ma reached acceptable score moves back cm selects best move mas outputs resulting move 
case ama continues running remotely noti ed ma move exchanging oles 
hand ma reached acceptable score ama dies 
ma best move equal cm best move ma stores result corresponding score tries randomly di erent sequence move achieve better score 
ma best move di erent cm best move continues exploiting moves normally 
mas reached acceptable score mas go cm machine time depending cm time management decide move send ama minimum acceptable score rest cm newest best score minimum acceptable score previously sent move 
cm decides send ama carry newest cm best move corresponding score minimum acceptable score 
cm continues computation better move 
arrival ama computational environment substitutes previous ama 
cm decides move sends ama communicate new position mas continue running adapting new condition 
way remote mas compute opponent turn play 
condition previously established time mobile agent regarded old naturally dies 
crucial aspect statement new proactive move broadcasting publicly address speci cation destination 
condition continuation agent accepted destination establish predicate receptive states destination receptive computation 
way rec indicates surrounding ambient receptive state establish broadcast operation include model 
operation require operand syntax 
semantics follows rec hr icc exec hr hr ti version logic 

rec 


exec 

nally additional rule rare case receptions rec hr icc exec hr version logic 

rec 
exec 



hold time interpreting statement 
notice operation asynchronous 
way move interface example centralization 
idea attempts illustrate power combination mobile agents radio broadcasting parallel computation provide evolutionary model 
sequence moves generated randomly provides mutation respect pre eciency concerns need providing destination address opposed internet important issues example sperm cells female animal mobile agents compete best solution leads designers questions ethics 
agents allowed 
open question 
ethics mobile agents internet may complicated agents transcend boundaries countries 
distinguish agent virus 
question 
entertaining application exempli es model computing solve problems include possibility combinatorial explosion 
provide interesting algorithm nd mobile agent network 
radio mobile agents easy alternative solve problem 
issue mobile agent system prevent agents multiplying uncontrolled manner 
reasonable cost overhead burden operation 
practical solutions problem important technology guarantees total security host receives mobile agent mobile code system support operations see network public 
similar problem access www hosts parallel software components desirable person point view cause trac jams performed programs 
clear open door philosophy theoretical computer science 
section demonstrate holds applications computation 
computing real world typical examples mobile code languages telescript strong mobility java obliq weak mobility regarding current stage technologies support code mobility 
comparison paradigms code mobility common criticism mobile agent paradigm mobile agents keep connection radio stand multicast media display visible agents suce 
migration 
criticism may appropriate depending philosophical point view metaphor model eventually system implemented 
example understand key concept agents distributed systems communication connection implementation issue 
connection matter abstraction 
models agents keep connections respect move communicating appropriate happens programming layer abstraction provided programming language 
agents sent communicating die example 
criticism seen problem humans keep connections 
dangling pointers due strong mobility example level normal situation problem happen call person moment 
matter mobile phone want try leave message dial number 
decisions application level mobile agent system level 
regarding communication language agent system responsible providing general suitable features programming agents suitability depends programming model 
follow metaphorically modern world composed objects individuals airplanes airports places providers realize model technically simple conceive agents strong mobility open philosophical questions deserve careful consideration designing system launching commercially 
need solve problems world propose system 
laws established global system laws ought public declarative xed 
public environment nature models evolutionary computing individual mutations simulated ought linked human approach kinds people di erent cultural religious philosophical backgrounds 
leads ethics politics philosophy 
observe industrial revolution positive concepts liberty equality re ect underlies collective consciousness gradually taken planet possibly long time 
nowadays insert coins ee machine choose want pick preferred ee receive change 
individuality keyword computer science programs systems adaptable personal 
applications mobile agents personalize clients servers 
individuality generality key concepts technology machines usually produce copies product standard 
programs deal concepts convenience 
characteristics studied human sciences religion produces consequences software development particular public network internet 
designer believes thinks individual inheritance brought human beings previous lives 
philosophies eastern form 
individuality maintained life 
soul seen intelligent entity individuality manifested life 
case individual brain produces intelligent behavior 
anyway everybody source human intelligence individual humans interact travels abroad perceive country identity 
mobile agent system internet ought take account di erent people cultures communicate easily knowledge human beings important 
designers establish laws suggests diversity global systems 
believe systems establish fairer laws attract users 
think model provides de nition agent establishing rules picked daily lives easier implement 
main technical diculty implement eciently programming language system strong mobility security suitable ai features inference engine needs control ecient reasoning process interruption user program 
inferences trigger imperative execution turn contain statement described previous section 
impose constraints system eciency problem dicult move computation imperative programs virtual machines interprets simple instructions 
hand ai techniques easier provide agent model inspired human beings providing programmer suitable way representing knowledge real world 
uncertainty reasoning lack information examples 
global system public laws limited laws users preferably laws constrain agents behaviors adopting policy 
way agent laws constrain human laws 
public system international problem laws normally di erent di erent countries developer job complex 
design global computer similar create world 
interactions computer real world complex subjective factors enter computer science 
model imposes constraints programming languages 
constraints solved adoption special value uu mean absence value problem domain 
constraint solved adoption declarative uncertainty representation humans usually subjective judgment feelings 
uncertainty represent con dence particular public piece information subjective feature 
programmers declare particular data reliable remaining technical faults example 
uncertainty rules represented internally antecedent contributes validate hypothesis 
simple general model computation de ning machine small set operations complements traditional notion computation 
operational semantics operations 
model provides strong mobility introduced sample application known operations mobility 
introduced statement performed current models computation 
written operational semantics included model 
call paradigm wave mobility kind wave square wave digital signals 
forms wave mobility near 
due internet computers broader sense local machines 
global environments people di erent parts planet di erent background 
hand philosophy important component foundations computer science 
mathematics may branch philosophy conclude computer science entails philosophy 
opens door change scienti methods analogies metaphors 
kinds computer science analytical mathematical side synthetic philosophical side 
deductions proofs 
synthetic side requires forms inference 
article informally stressed analogy inductive reasoning 
formally de ned computation creation mobility communication internal evolution discussed reproduction death 
abramsky gabbay maibaum editors 
handbook logic computer science volume 
oxford university press 
baader nipkow 
term rewriting 
cambridge university press 
putnam editors 
philosophy mathematics 
prentice hall 
bettini jajodia wang 
time granularities databases data mining temporal reasoning 
springer verlag 
bic fukuda 
distributed computing autonomous objects 
ieee computer aug 
cardelli 
language distributed scope 
computing systems 
available digital systems research center research report 
cardelli 
global computation 
acm computing surveys 
cardelli 
mobile computation 
mobile object systems programmable internet pages 
springer verlag apr 
lecture notes computer science 
cardelli gordon 
foundations software science computational structures volume chapter mobile ambients pages 
springer 
chess harrison 
mobile agents idea 
update 
mobile object systems programmable internet pages 
springer verlag apr 
lecture notes computer science 
church 
mathematical logic 
princeton mathematical series 
princeton university press 
tenth printing princeton landmarks mathematics physics series 
connor sibson 
paradigms global computation overview hippo project 
proceedings computer society international conference computer languages chicago 
ieee 
copeland editor 
logic reality essays legacy arthur prior 
oxford university press 
cugola ghezzi picco vigna 
analyzing mobile code languages 
mobile object systems programmable internet pages 
springer verlag apr 
lecture notes computer science 

georg cantor mathematics philosophy 
harvard university press 
davis 
computability unsolvability 
information processing computers 
mcgraw hill book 
durbin 
modern algebra 
john wiley sons fourth edition 
epstein 
predicate logic 
oxford university press 
ferreira 
chiron framework mobile agent systems 
th international conference system research informatics cybernetics symposium mobile agent applications 
international institute advanced studies systems research cybernetics 

ferreira 
uu programming languages 
acm sigplan notices august 
ferreira 
language features global computers 
computer languages 
currently review process 
fields 
machines thought legacy alan turing volume mind association series chapter computational description 
oxford university press 
fuggetta picco vigna 
understanding code mobility 
ieee transactions software engineering may 
gelfond lifschitz 
logic programs classical negation 
proceedings th international conference logic programming pages cambridge ma 
mit press 
george editor 
mathematics mind 
oxford university press 

lafont regnier editors 
advances linear logic 
cambridge university press 

taylor lafont 
proofs types 
cambridge university press 
gordon 
functional programming input output 
distinguished dissertations computer science 
cambridge university press 
gosling joy steele 
java language speci cation 
addison wesley publishing 
greenberg 
euclidean non euclidean geometries development history 
freeman third edition 
gunter 
semantics programming languages structures techniques 
foundations computing series 
mit press 
hart editor 
philosophy mathematics 
oxford readings philosophy 
oxford university press 

geometry 
undergraduate texts mathematics 
springer verlag 

type safe execution mobile agents anonymous networks 
secure internet programming security issues mobile distributed objects proceedings workshop internet programming languages number lecture notes computer science 
springer verlag berlin germany 
huhns singh editors 
readings agents 
morgan kaufmann san francisco california 
hurst cunningham 
mobile agents smart messages 
proceedings st international workshop mobile agents berlin germany apr 
jung man symbols 
doubleday 
kant 
logic 
merrill indianapolis 
translated robert hartman wolfgang schwarz 
lee 
foundations behavioral research 
harcourt college publishers fourth edition 

programming language semantics 
international thomson computer press 
kleene 
mathematics 
van nostrand 

physical universe 
mcgraw hill companies eighth edition 
langford editor 
internet ethics 
macmillan press printed bound great britain antony rowe 
lewis papadimitriou 
elements theory computation 
prentice hall second edition september 
luo 
computation reasoning type theory computer science volume international series monographs computer science edited gabbay hopcroft plotkin schwartz scott vuillemin galil 
oxford science publications 
meinke tucker 
handbook logic computer science volume mathematical structures chapter universal algebra pages 
oxford university press 
milner parrow walker 
calculus mobile processes 
part ii 
information computation 
mitchell 
foundations programming languages 
foundations computing 
mit press 
nielson nielson 
semantics applications formal 
john wiley sons 
reiter 
logic data bases chapter close world data bases pages 
plenum press new york 
rodriguez anger 
logic reality essays legacy arthur prior chapter prior temporal legacy computer science pages 
oxford university press 

international congress logic methodology philosophy science th hannover logic methodology philosophy science volume studies logic foundations mathematics chapter foundations philosophy physical sciences probability classical quantum physics pages 
polish scienti publishers north holland publishing 

paradoxes 
cambridge university press second edition 
sewell pierce 
location independent communication mobile agents level architecture 
internet programming languages number lecture notes computer science pages 
springer verlag 
sipser 
theory computation 
pws publishing 
kurtz 
formal syntax semantics programming languages laboratory approach 
addison wesley publishing 
taylor 
models computation formal languages 
oxford university press 

mobility management roaming mobile agents 
mobile wireless communi cations networks number lecture notes computer science pages 
springer verlag berlin heidelberg 
tucker zucker 
handbook logic computer science volume logic algebraic methods chapter computable functions semicomputable sets sorted algebras pages 
oxford university press 
vitek castagna 
seal framework secure mobile computation 
internet programming languages number lecture notes computer science pages 
springer verlag 
waldo wollrath kendall 
note distributed computing 
mobile object systems programmable internet pages 
springer verlag apr 
lecture notes computer science 
published sun microsystems technical report tr 
white 
telescript technology foundation electronic marketplace 
general magic 
winskel 
formal semantics programming languages 
mit press fourth edition 
winskel 
formal semantics programming languages 
foundations computing 
mit press 

recursive function logic 
academic press 

