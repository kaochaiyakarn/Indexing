profiling tracing dynamic library usage interposition timothy curry internet tim curry sun com sun microsystems garcia ave mountain view ca run time resolution library functions provides rich powerful opportunity collect workload profiles function parameter trace information source special compilation special linking 
accomplished having linker resolve library functions special wrapper functions collect statistics calling real library function leaving application real library unaltered 
set dynamic libraries quite large including interesting libraries libc library operating system interface graphics database network interface 
coupling ability simultaneously trace multiple processes multiple processors covering client server processes yields tremendous feedback 
amount detailed information gathered useful stages project lifecycle including design development tuning sustaining hardware libraries applications 
contrasts extended view interposition profiling tracing interposing techniques 
followed description sample output tools developed view discussion obstacles encountered developing tools discussion anticipated unanticipated ways tools applied 

motivation tools described created analyze performance graphics applications 
application writers seldom access graphics library source profiled versions graphics libraries 
library hardware provider seldom access application source data files 
goal get useful performance data special requests placed application libraries 
information typically available 
traditional profile tools tell times line drawing function called don tell percentage lines write versus read modify write operations average length width angle lines line styles 
envision similar questions database percentages read versus write transactions access patterns sequential random additional information significantly improves ability perform detailed analysis informed decisions 
graphics libraries remain group primary interest tools generic dynamic library applied internally externally profile trace generally interpose non graphics libraries 
additionally data collected proven useful performance analysis 

terminology detailed discussions dynamic linking reader refer 
techniques described presume applications profiled traced decision dynamically linked libraries run time linker loader provides means perform interposition 
system release svr unix versions solaris provide means identical interface 
technology years easily commonly operating systems 
brief description terms quickly resolve various operating system terminology issues 
dynamic library consists set variables functions compiled linked assumption shared multi ple processes simultaneously redundantly copied application 
sharing dynamic libraries called shared libraries shared objects 
compiler linker flags assure program sections data sections cleanly separated program sections reentrant reusable 
compile link application leave dynamic library symbols variable function addresses unresolved run time time execution complicates loader program initiates application linking resolution symbols completed execution compile link time 
process placing new different library function application library function called interposing 
specifically avoid placing constraint interposing function accept parameters real function return appropriate value back application 
real function may may called new side effects may may occur due interposing function 

profiling tracing techniques developed set tools umbrella name sli pronounced acronym shared library 
sli contains programs utilities enable application library developers monitor analyze calls shared library functions 
sli intended augment replace analysis tools tcov gprof analyzer 
section provides overview technique contrasts techniques 

overview sli technique distinguishes sli traditional analysis tools collects information infor dynamically linked user application sli version shared library actual shared library mation collects 
loader waits execution application resolve shared library functions called application 
sli loader resolve addresses wrapper library function collects information wrapper calls real library function wrapper 
advantages arise technique accurate trace call sequences logged 
parameter values available logged altered real function call 
real function replaced desired 
subset library functions profiled functions library 
nesting levels libraries controlled 
different levels profiling enabled disabled application running 
multiple processes multiple library statistics logged single multiple locations 
profiling available application library source requiring specially compiled linked objects 
requirement application dynamically linked shared libraries interest 
advantages tools tools altered produce similar results sli pulls easily maintainable dynamically controllable customizable package remains independent application library sources 

comparison techniques trace command bsd unix truss command svr unix demonstrate desirable features 
commands run application attach active process providing trace system calls application showing parameter values return values summary count system calls total time spent 
truss allows restrictions calls reported 
special flags required application compiled 
exception attaching active process interposition dynamic libraries allows features applied user level libraries 
additionally tools allow programmatic interactive control data collection multiple process data collection single file process separate files custom postprocessing reports 
libraries graphics database libraries updates pass library parameter return value capturing sufficient record replay application run 
positive ramifications project lifecycle discussed section 
system call interposition significantly expand operating system functionality transparently provide number new services applications 
cola projects examples expanding file system functionality system call interposition 
interposition agents toolkit presents number clever examples system call interposition utilities provides environment easily create new utilities 
trace truss interposition agents implemented operating system trap mechanism system calls 
trap mechanism allows dynamically statically linked applications benefit utilities allows attaching active process 
trap mechanism incurs heavier overhead available user level library functions 
inversely interposing dynamic libraries statically linked applications selected prior application execution introduces overhead allows libraries interposed 
interestingly results tools utilities independent interposing technique informed decisions selection technique 
unfortunately tools profiling tracing require source code application libraries compiled linked options different release executable 
change executable skew results significantly 
prof command unix variants gprof common profile report generators unix environment 
special compilation flags cause code added function maintain counts 
application run interrupted regular intervals information currently active function collected 
information counts function entries written file application completion 
technique extremely low overhead lacks detailed accuracy limited functions specially compiled allows single application data file 
interposing dynamic libraries overcomes restrictions library functions functions application 
time interval library calls monitored giving measure application time versus library time detailed profile application functions collected 
possible add calls toolkit library directly application library source object defeats concept interposition avoid altering application source code linking 
onerous potentially skewed results special compilation requirement source code specially compiled unlinked object files 
operating system vendors provide multiple versions library optimized dynamic version optimized static version profile static version internally may debug dynamic static versions 
application writer compiles links appropriately 
debuggers adb dbx sdb require source files exploit full power 
special interposing functions generally require relinking application new versions functions 
extremely common see alternate versions libc memory allocation routines malloc free 
precedence linking allows interposition occur compile link time run time 
linkers resolve come serve basis 
application linked libraries containing functions name functions library scanned 
compilation link time order libraries listed link command specify precedence 
run time number environment variables alter order list libraries scanned 
see section choice technique 
tools purify quantify sentinel may alter code contained application libraries link new functions previously included application 
relinking requires new version replace function original library 
default behavior tool wrapper call actual function application maintaining precise timing measurement accuracy results function call 
requirement wrapper call real routine 
linker tricks employ totally replace real function augment new functionality 
call real function output additional data hardware simulation streams 
granularity library tracing technique limited function level 
profilers tcov quantify track hot spots source code functions 
theoretical treatment hot spot profiling tracing source code see 
consider function level granularity quite sufficient needs especially combined parameter return value tracing 
lack access source code considered part constraints 

sli toolset tools provided varying levels expertise 
primary customer interested li group utilizes interposing libraries built report generators written 
second tier user needs different information providing default modifies interposing library source postprocessing report generators needs 
third tier users want interpose entirely new library create interposing library scratch 
sli includes collection source binaries awk perl scripts assist serve examples help level user 

sli data collection data optionally collected locations 
cumulative information kept shared memory 
cumulative information includes count function invocations time spent function time spent function plus descendants may invoked 
second data written standard standard error stdout stderr providing trace parameter information similar output truss customized output 
third trace data collected disk including process id pid library function nesting level time elapsed call library time call took time sli added overhead parameter values interesting data 
multiple libraries multiple applications write file process create file 
data collection controlled programmatically terminal command line interface graphical user interface gui 
consider desirable able control data collection scripts requiring window system running experience shown user base uses gui ignoring methods 
skewed sampling primary customers graphics library users 
data control includes clearing cumulative information starting stopping stderr output starting collection disk appending existing data truncating file starting new 
additionally data reduction controlled reduce disk overhead library flags controlled alter wrapper functionality fly inner library nesting call tracing controlled application calls function library library function turn calls function library user want capture inner library call see directly invoked application 
snapshot gui controls data collection 
command lists dynamic libraries program 
list generated compile link time path locate libraries altered run time 
example output xterm program terminal emulator program windows environment xterm usr lib usr lib usr lib usr lib usr lib libc usr lib libc libraries subset functions wrapped data collecting interposing functions 
furthermore xterm client application possible simultaneously profile server process correlate interactions client server 
wrapper functions invoked ld preload environment variable loader 
example shows output xterm changed environment variable 
ld preload api export ld preload xterm api api usr lib usr lib usr lib usr lib usr lib libc usr lib libc note versions listed wrapper version system version 
added api name interposing versions 
version contains application programmer interface api functions monitor functions application programmer access 
second version includes functions contained source 
third version interesting group contains functions graphics context parameter 
symbol included wrapper library resolved symbol haven included resolved normal path 
additional library contains sli wrapper support functions 

sli reports default reports provided cumulative data data written disk 
data collection generic interesting reports collected data library specific 
data collected necessary write custom postprocessing script sed awk perl glean interesting information 
provide postprocessor filters graphics libraries serve examples 
shows graph cumulative information collected start xterm character typed 
note calls calls 
function called doesn necessarily consume time demonstrated 
times displayed microseconds 
tells took slightly seconds get xterm started 
frequently called function top consumers total time 
graph updated regular intervals program running monitoring changes execution 
graph collecting calls active applications addition single xterm 
sorts provided default 
time function took plus interposed descendants invoked illuminating overhead just function 
second may want find call frequency time specific function sort name simplifies finding function 
cumulative information processed print option 
default destination postscript preview program command direct output file printer filter program 
generally list interesting functions falls fast threshold set functions reported 
format ascii allowing postprocessing custom filter programs 
data collected disk kept binary form attempt reduce size files 
program called sli interp provided convert data ascii 
postprocessing program take ascii stream generate interesting reports shows sample output sli interp 
column provides feedback nesting information 
function calls nested information associated function kept line starting vertical bar 
function calls traced function open brace denotes entry function close brace denotes exit function 
dashed field means information provided function exits provided function entry 
example starts application making call inquire 
inquire function turn libc calls 
see calloc libc calls malloc 
pid column traces process call 
library column shows library function column shows function library 
nest shows detailed scope functions called 
appl shows time passed application call library 
elapsed shows time logfile version sli log file version pid library function nest appl elapsed sli data api inquire libc api malloc libc api strcpy libc api getenv libc api libc api malloc libc api memset libc api strlen libc api libc api read libc api calloc libc api malloc libc api libc api ioctl libc api libc api mmap libc api mmap libc api libc api libc api close libc api libc api strlen libc api strcpy libc api libc api api object set function blocks calls prims segments multi simple pol polygon triangle strip quadrilateral stroke text annotation text totals markers lines chars triangles calls context post calls context new frame calls object get timing appl func sli time sli time appl func time appl time func time spent function call 
sli column shows time overhead sli introduced collect information 
data optionally contains parameter interesting data values function invoked 
fields optionally omitted data collection order front data reduction 
user knows process profiled library traced user select save fields binary file 
sli interp program knows handle reduced data files 
library specific produce useful reports sli interp output 
example report summary graphics primitives application run application merged multiple primitives single library call breaks percentages time spent application versus library versus overhead introduced sli 
example entire run took just minutes appl func sli time seconds 
time spent application time spent rendering graphics 
overhead introduced sli represented total time seconds 
fairly obvious shared memory data produces lowest overhead obvious binary data collected disk faster formatted ascii output sent stderr 
sli memory maps file accesses memory leaving system write back disk necessary 
contrast formatted print statement output scrolling terminal reason different overheads clear 

interposing library source second third tier users want go default reports libraries group provided 
implies need alter interposing libraries provide create new interposing libraries 
provide source interposing library created provide tools automate process creating new interposing library 
steps creating new interposing library taken little minutes library long weeks particularly difficult library default output format just wasn wanted report users 
average customers able get useful interposing library half day effort 
step create call prototype file 
file consists function declarations functions traced 
generation file generally quite easy 
application programmer interface library declarations header file 
lint library declarations serve source 
program source available ansi program quickly easily generates prototype file 
primary method 
turns quite difficult generate interposing libraries libc provides special challenges 
discussed detail obstacles section 
libc quite common operating systems small example calloc follow interposing library 
prototype file contain void calloc size num size size allow single line comments preprocessor directives placed prototype file 
passed directly prototype file generated code 
prototype file processed awk script generates files 
file translation file tracks total number functions library length longest function name translation table numeric assignment ascii name function 
information static library generated aids dynamic allocation arrays data collection phase profiling 
number name mapping allows compact information written data file binary 
second file awk script source interposing library 
call working wrapper template 
term working generated code compile useful right away add term template truly interesting detailed data collection generally requires customization generated code 
knowing name size parameters useful contextually understanding contents complex structure interesting generally requires human intervention customization 
generated code calloc prototype void calloc size num size size static char func name calloc typedef void real func type size num size size static real func type real func void return value int save sli active sli active sli declare sli active real func real func real func type sli resolve func name return real func num size sli mark sli mark sli enter sli active sli lib info sli lib info sli find info sli lib info tra ctl sli tra fprintf sli stdout calloc num size num size real func real func real func type sli resolve func name sli prolog sli send sli enter sli eop sli active sli mark sli mark func enter return value real func num size sli mark sli mark func exit sli active sli send sli exit sli eop sli epilog sli active save sli active sli mark sli mark sli exit return return value example serves illustrate points 
foremost strong typing followed return types parameter types 
different compilers different rules data type sizes calling conventions parameter promotion rules 
template careful cast types 
template ansi compiler 
awk script knows generate output minor variations 
function name placed variable function symbolically referenced sli declare sli prolog sli epilog macros 
macros null default provide means functions common code added ease 
see constants template 
constants name mapping values generated translation file 
libc calloc libc 
function libc added code typically templates 
initial check global variable sli active hook avoid recursing libc interposing code say want trap libc calls application functions tracing don want trap libc calls tracing software uses 
global variable lacks elegance provided quick solution trace libc functions 
better solution required support multiple threads 
sli mark function track time durations overhead sli introduced duration real function called 
sli mark calls 
entry wrapper second just real function called third immediately return real function fourth exit wrapper 
non libc wrappers sli mark executable statement 
time function called library initial time overhead incurred 
sli lib info shared memory page multiprocessing locking run time interactive control profile trace functionality 
likewise time wrapper function called find pointer real function 
pointer saved overhead encountered function 
tra ctl structure member contains current value trace stderr option 
data collection complete control customizing user 
shared memory data collection collection file handled support library sli send function 
variable list parameters sent stored data field binary file 
automated contextual knowledge associated functions 
instance parameters just printed hex value 
parameter complex structure requiring human intervention know information structure interesting format printed 
similarly inappropriate simply save parameter values trace file causing tremendous growth size 
appropriate save parameters default allow human intervention decide information important save format 

obstacles encountered number issues get way implementing interposing library 
fortunately nearly solved require fairly detailed system knowledge 

finding real function potentially difficult arbitrary operating system 
solaris operating system provides simple interface accomplish 
dlsym function find address symbol dynamically linked library 
solaris provides special parameter dlsym called indicates find address symbol list libraries 
takes 
standard svr earlier versions solaris dlsym available support 
solution followed traverse linker structures locate list libraries 
dlopen library list loop list dlsym looking real function 
difficult somewhat documented considered normal supported user interface 
concerns approach 
careful find symbol get caught recursive loop 
sake efficiency want loop libraries find function library keep handle subsequent symbols library 
uncommon compilers slightly alter names functions source object file 
usually takes form underscore character placed front back name 
dlsym function properly handles underscore programmer 
language adds considerably information including class parameter type information object file function name 
presents problem specifying name real function dlsym 
compilers preprocess code compiler collect name code 
compilers compile directly object files may need nm command determine names 

number interesting problems arise attempting interpose 
just mentioned finding real function name schemes hurdle 
generating list function prototypes complex interposing programmer interface straightforward finding functions library quite difficult 
proper profile trace library needs know overhead comes 
scanning source insufficient may generate lot functions programmer 
examples generated functions constructors destructors copy operators function templates virtual functions 
solution appears query library object files functions reverse back function prototype declarations 
missing critical information default parameter values full type information class member function declarations compiler created functions 
time remains challenge partially solved 

interposing libc support library written uses functions libc 
furthermore libraries interpose written libc 
decided add libc list supported libraries recursive looping problems 
cola project uses ld preload interpose system calls reports similar looping problem 
solution required steps 
interposing version libc checks global variable know called interposing sli internal function application regular library function 
calls real function directly collecting statistics 
noted section global variable prove problem want support multiple threads 
global variable fixed making thread specific variable 
second routine find real function libc clean 
say couldn libc function precisely resolve libc functions directly real libc library 

ld preload side effects ld preload care 
side effect environment variable interposing functions loaded commands issued 
may collecting data processes expected 
interposing functions symbols expected resolved libraries application commands included libraries leaving symbols unresolved causing command execution failure 
overcome linking interposing library library interposes 

scoping issues functions library available application programmer declared global 
possible library may internal support routines uses expose application programmer 
function declared static interposed 
generate multiple versions interposing libraries target library 
consists exclusively functions available application programmer interface api second non static routines source third containing specifically interesting subset functions 
global variable problem considered carefully 
functions library may share access global variable 
scope global variable interposing functions interested variable raises issues 
variable global entire library application problem exists 
variable shared functions source file global library application may accessible 
similarly encountered compiler discrepancies inner library calls 
functions foo bar contained source file compiled object file foo calls bar linkers improperly resolve bar foo link time run time prevents interposition 
bug encountered generally overcome compiler linker command line options 

parameter handling reasonable believe function library independent compiler generated reality problems parameter promotion variable parameter list handling particularly difficult problems isolate resolve 
hard fast rule apply compiler interposing function real library 
compilers different parameter promotion rules ansi standard compilers 
interposing function properly pass parameters real function properly pass return value back application interposing function useless 
variable parameter list functions especially interesting problem solve generically responsibility called routine determine information read stack 
interposing function responsibility pass correct amount information real function 
solved ways 
automatically generated interposing functions contain variable argument lists line assembly routines inserted copy entire frame calling routine stack real function 
potentially copy information generating unnecessary overhead guarantees real function receives 
solution customize interposing routine know parse stack pass correct amount information 
adds overhead stack parsed copied insures necessary amount information copied 

multiple processes processors threads network implications data collection interpretation straightforward process collecting data multiple process data collection valuable ignore 
example setting ld preload include graphics libraries starting window system allows capture frame buffer activity application 
data collection points plus central control area maintain atomic transactions updates 
multiple processes multiple processors single system handled fairly easily atomic read modify write semaphore shared memory 
multiple threads process multiple processors adds complications 
process id may mixed library function entry exit flows 
thread identification needs included process id sort data flow maintain nesting stacks 
multiple processes running separate machines network difficult synchronize starting tackle problem 
semaphore locking adds potential deadlocks 
lock ready update shared information immediately free lock 
problem application profiled killed 
solution request lock time clear lock reporting data may corrupted 

timer overhead resolution timer major difference usefulness profiler 
initially gettimeofday libc function overhead regular system call took order milliseconds wanted resolution order nanoseconds 
solaris wrote device driver provide direct user reads system clock 
solaris new function provided 
gave microsecond clock resolution improving accuracy considerably 

application tools tools proven quite successful quickly isolating performance bottlenecks graphics libraries provided expected feedback application writer library writer 
unanticipated amount information gather information applied 
tools place adding new libraries trivial single exception libc 
case time request new interposing library time ready minutes 
general surprised takes days overcome difficulties creating new interposing library 
originally anticipated looking libraries 
ease adding new libraries led quick proliferation new libraries demand spread graphics libraries 
sun customers shown tool assist graphics performance taken initiative create interposing wrappers libraries 
application developer uses default reports postprocessing reports able better library 
hardware library developers get feedback actual usage patterns library 
information applied ways 
library builder sort functions provide cleaner paging 
application regression tests show primitives attributes aren candidates eventual removal 
analysis benchmarks demonstrations actual application usage emphasize functions critical attributes parameter values functions time consuming functions deserve attention possible hardware acceleration 
ability capture calls parameters potential simple playback 
application records session encounters bug bug reproduces playback odds pretty bug really library bad parameter values passed library application 
way vendor support bug reporting reproduce analyze bug having acquire application data instructions 
additionally playback program wrapper need call real library translator 
translator emit simulation traces allowing developing hardware test different schemes real application data patterns 
translator emit calls alternate new version library testing robustness performance new library application ported 
furthermore playback considerably faster original application computations leading function calls 
means bug tracing quicker easier 
additionally having source playback program original application means special purify applied run recompiling linking playback program application source 
wrappers compiled debug flags debugger provide functionality library functions wouldn normally access 
example conditional breakpoints contextual parameter values obtain callback stack system call 

dynamic library interposition extremely successful 
able exploit detailed information different useful ways different libraries 
value tracing parameters addition functions underestimated 
initially developing tools nontrivial tools place development teams able informed decisions real workloads fewer guesses 
generated approximately interposing libraries sun supplied libraries third party libraries 
dozen applications sli primary analysis tool significantly improved performance 
playback test pre release hardware software improved release quality hardware simulation trace files currently generated projects progress 
acknowledgments recognition go doug dave phillips users major shapers directions development contributors playback symbol resolution early timer code 
rob rod evans quick fixes knowledge dumps strange linker magic encountered 
timothy foley front line primary sli lots support patience credited dean stanton 
additionally brian herzog ralph nichols matt perez jon cooke mike roger day foresight take long term view support tool development despite difficulty front demonstrating difference tools bottom line 
system application binary interface unix press prentice hall isbn 
sunos linker libraries manual sunsoft part november 
lee dang weeks shared libraries sunos summer conference proceedings phoenix usenix association 
unix user manual guide berkeley software distribution march 
sunos manual sunsoft mountain view ca part march 
system interface definition third edition 
sunos manual sunsoft mountain view ca part october 
sentinel debugging environment virtual technologies va info vti com 
purify user guide pure software sunnyvale ca 
info pure com 
mountain view ca part october 
kernighan brian dennis ritchie programming language prentice hall 
isbn 
arnold ken john peyton user guide ansi addison wesley publishing 
isbn 
huang chin manual 
uucp chin huang com 
ball thomas james larus optimally profiling tracing programs acm 
wall larry randal schwartz programming perl reilly associates 
jones michael interposition agents transparently interposing user code system interface proceedings th acm symposium operating systems principles 
asheville nc december 
eduardo balachander krishnamurthy cola customized overlaying winter usenix conference proceedings january 
fowler glenn huang david korn herman rao user level replicated file system summer usenix conference proceedings june 
tim curry senior staff engineer sun microsystems 
currently working technology development group sun designing portable workstation hardware 
sun primarily windows graphics software 
tim ph computer science university central florida 
