usenix association proceedings th usenix security symposium denver colorado usa august advanced computing systems association usenix association rights reserved information usenix association phone fax email office usenix org www www usenix org rights individual papers remain author author employer 
permission granted noncommercial reproduction educational research purposes 
copyright notice included reproduced 
usenix acknowledges trademarks 
yin zhang department computer science cornell university ithaca ny cs cornell edu backdoors installed attackers compromised system ease subsequent return system 
consider problem identifying large class backdoors providing interactive access non standard ports passively monitoring site internet access link 
develop general algorithm detecting interactive traffic packet size timing characteristics set protocol specific algorithms look signatures distinctive particular protocols 
evaluate algorithms large internet access traces find perform quite 
addition algorithms amenable prefiltering stateless packet filter yields major performance increase little loss accuracy 
success algorithms tempered discovery large sites users routinely access fact benign backdoors servers running nonstandard ports hide mundane administrative reasons 
backdoor detection requires significant policy component separating allowable backdoor access surreptitious access 
backdoor mechanism introduced computer system facilitate unauthorized access system 
backdoors installed accessing variety services particular interest network security ones provide interactive access 
installed attackers compromised system ease subsequent return system 
lawrence berkeley national laboratory 
detecting backdoors vern paxson center internet research icsi international computer science institute berkeley ca vern aciri org network monitoring perspective backdoors frequently run protocols telnet pr rlogin ka ssh 
example non interactive backdoor unauthorized smtp server po say facilitate relaying email spam somewhat ftp pr backdoor provide access illicit content software napster server na run violation site policy 
backdoors design difficult detect 
common scheme masking presence run server standard service telnet port known port associated service known port associated different service 
examine problem detecting backdoors particularly interactive ones inspecting network traffic intrusion detection system ids presume large volume legitimate traffic distinguished illegitimate traffic 
knowledge problem previously addressed literature 
general approach develop set algorithms detecting different types interactive traffic 
algorithms applied traffic stream detect interactive traffic nonstandard service port form backdoor 
rest organized follows 
discuss design considerations examine tradeoffs different approaches 
develop general algorithm detecting interactive traffic timing characteristics number protocol specific algorithms 
evaluate algorithms traces internet traffic 
summarize 
design space basic principle backdoor detection find distinctive features indicative activity interest general interactive access specific protocol ssh 
powerful feature distinguishing genuine instances activity false alarms better 
candidates features include specific contents data stream size transmission rate packets stream timing structure 
potentially powerful detecting interactive traffic studies internet traffic interarrivals user keystrokes striking distribution pf pareto infinite variance 
possibility combination features prove greater distinctive power feature 
turn discussion various tradeoffs arise considering develop detection algorithms 
open vs evasive attackers general network intrusion detection difficult attacker actively attempts evade detection monitor pn pa 
difficulty comes ability attackers exploit ambiguities traffic stream 
monitoring perspective heuristics open attackers completely fail face actively evasive attacker 
ideally detection algorithms develop course resistant evasive attackers ensuring robustness exceedingly difficult proceed assumption utility raising bar detection algorithm defeated sufficiently aggressive attacker 
note attacker fully controls remote local host particular patient able deploy arbitrary software sorts covert channels possible gl backdoor detection essentially hopeless 
attempt address problem detecting covert channels 
see ra discussion experiences running nfs email tunneling ip packets messages delivered smtp 
propose algorithms solutions merely ongoing arms race attackers intrusion detection 
form arms race anticipate particularly developers napster na gnutella gn corresponding detection algorithm 
napster history sites attempting control users attempting circumvent restrictions algorithm gives sites new tool detecting surreptitious napster 
passive vs active monitoring tradeoff allow monitor perform passive monitoring actively inject traffic network 
passive monitoring advantage disturb normal operation network 
hand active monitor augment backdoor detection trying connect suspected backdoors order probe server listening port determine service 
doing principle tip attacker presence monitor discovery backdoor 
confine monitors passive monitoring 
content vs timing natural approach detecting connections command shell servers monitor keystrokes looking common shell commands 
content approach drawbacks scanning byte incoming packet expensive especially reassemble tcp streams defeat sort characterized pa 
intruder overload monitor generating large amount legitimate traffic 
command shells allow user define aliases editing characters easily defeat approach monitor performs alias editing expansion commands required bottleneck analysis 
note problem arise inadvertently attacker matter course uses aliases redefines editing sequences deliberately attacker attempting evade detection 
case may amenable heuristic analysis 
intruder easily evade monitor encrypting content application level encryption method directly encrypted protocols ssh 
contrast timing algorithms completely unperturbed encryption 
timing information distorted due clock skew propagation delays loss packetization variations 
making timing algorithm robust noise challenging 
filtering important factor success real time backdoor detection filtering 
traffic discarded packet basis due patterns tcp ip headers better greatly reduce processing load monitor 
see subsequent sections filtering highly effective winnowing large traffic stream just packets interest 
clearly tradeoff reduced system load lost information 
monitor detects suspicious activity filtered stream filtering removed sufficient accompanying context quite difficult determine activity attack 
addition existence filtering criteria easier attackers evade detection manipulating traffic longer matches filtering criteria 
example evasion filtering packet size see telnet client modified send large number telnet options keystroke line input 
addition reliance filtering significantly magnify problem chaff attackers generating bogus traffic matches filtering criteria order overwhelm monitor analysis load generate huge number false positives order mask true attack 
possible filtering criteria backdoor detection packet size 
keystroke packets quite small 
entire lines input transferred line mode bo packet payloads tend smaller bulk transfer protocols 
filtering packets capture small packets monitor significantly reduce packet capture load 
directionality 
general interactive connec tion telnet initiated client server attacker sets sort callback mechanism 
possible filter connections directionality inbound vs outbound 
monitoring internet access link interested detecting backdoors local site limit monitoring just inbound connections significantly reduce packet capture load example filtering outbound web surfing connections 
note cold start problem monitor starts running needs analyze existing traffic stream 
case generally determine traffic initiated inbound outbound accordingly filter 
packet contents 
interested identi fying specific interactive protocols possible filter incoming packets patterns specific protocol 
example ssh discussed 
accuracy intrusion detection general face problem false positives non backdoor connections erroneously flagged backdoors false negatives backdoor connections monitor fails detect 
detection algorithm unusable impossible tedious examine alerts manually attackers exploit evade monitor 
course false positive rate false negative rate low possible 
particularly algorithms traffic characteristics sharp signatures frequently choose tradeoffs 
responsiveness important design parameter responsiveness detection algorithm 
backdoor connection starts long take monitor detect backdoor 
clearly desirable detect backdoors quickly possible enable additional actions recording related traffic shutting connection 
cases waiting longer allows monitor gather information consequently detect backdoors accurately resulting tradeoff responsiveness versus accuracy 
consideration related responsiveness concerns system resources consumed detection algorithm 
want detect backdoors quickly take care require resources monitor devote detection short time period 
hand line analysis sufficient resource intensive algorithms 
general algorithm detecting interactive backdoors section general algorithm detecting interactive backdoors keystroke characteristics 
algorithm incorporates types characteristics directionality packet sizes packet interarrival times 
find need exclude excessively short flows common traces due scanning automated monitoring software provide traffic analyze soundly 
criterion skip analysis flows comprised fewer packets lasting seconds flow direction bidirectional tcp connection 
exploiting connection directionality noted interactive connection initiated client server callback mechanism 
looking keystrokes need consider traffic sent initiator connection 
monitor doesn see establishment connection connection partial connection way tell actual initiator 
case consider flows 
monitoring access link interested detecting backdoors local site exploit connection directionality ignore outbound flows connection partial 
exploiting packet length characteristics size keystroke packets keystroke packets small sent line mode commands short 
verify assumption analyzed internet traffic traces total telnet rlogin client data packets 
carried single byte carried bytes carried bytes 
trace ssh connections heavily skewed client data packets length 
note ssh connections predominantly big packets file transfers 
consequently bytes cutoff small packets 
characterizing frequency small packets keystroke packets quite small exclude connections don small packets 
specifically devise metric measure frequency small packets connection determine exclude connection 
simplest metric ratio number small packets total number packets suitable definition small packet previous section define bytes payload 
unfortunately metric doesn practice 
stated previous section keystrokes small statistics large number connections 
specific connection find ratio low 
consequently order prevent frequent false negatives choose conservative threshold low 
low threshold metrics little discriminating power introduce false positives 
avoid problems devised metric defined terms number small packets total number packets number gaps small packets 
gap occurs time small packets separated large packet 
evaluate intuition consecutive small packets strong indicators connection interactive traffic 
small packets spread connection grouped reflect relative proportion small packets trace 
final algorithm set threshold exploiting timing characteristics mentioned keystroke interarrival times come striking pareto distribution exhibiting broad range pf 
exploit tendency machine driven non interactive traffic send packets back back short interval discriminate non interactive traffic interactive 
examining pair back back small packet arrivals computing ratio interarrival times fall range msec sec 
need take care include retransmitted packets computation 
upper bound sec fairly arbitrary sec appreciably change performance 
define metric quantify interarrival consecutive small packets falls range 
final algorithm set threshold appear criteria lax jointly prove highly effective show 
making algorithm run real time section discuss considerations algorithm real time 
observe reduce packet capture load great deal filtering data payload length packets capture small packets 
tcpdump doesn easy way specify particular range payload sizes filter packets bytes payload packet length ip header length tcp header length 
data length 
ip ip tcp bit shifting required extract ip tcp header lengths variable length due presence ip tcp options 
introducing filtering affect evaluation flow computed packets consecutive tcp sequence space 
take care evaluating see small packets accurately tell total number packets transmitted flow 
solve problem see gap sequence number estimate number missing large packets gap gap large pkt size large pkt size guess common size full sized packets 
size varies path characteristics maximum transmission unit depends particular tcp implementation rough approximation simply large pkt size consideration real time detection concerns quickly algorithm determine backdoor 
line analysis suffices check connection backdoor characteristics connection terminates trace ends defined terms statistics computed connection total lifetime 
simplest way adapt algorithm run real time reevaluate incoming packet 
alternatively timer connection test connection timer goes 
unfortunately approach works practice 
major problem classify connection non backdoor connection just ignore connection hard tell connection non backdoor connection backdoor connection preamble non backdoor characteristics telnet option negotiations precede telnet login dialog 
consequently keep re testing non backdoor connection clearly expensive 
address problem exponentially backing reevaluation timer 
initially choose small timeout value timer seconds 
subsequently connection appears non backdoor increase timeout value factor spreads computational load lifetime connection 
special purpose detection algorithms section explore algorithms look signatures reflecting particular protocols 
find servers protocols running ports standard ones instances may indicate presence backdoor 
compared general purpose detection algorithm special purpose algorithms better benefit protocol specific information accurate efficient 
hand relying protocol specific information algorithm susceptible evasion attacker perturb signature 
major applications special purpose detection algorithms 
baseline algorithms evaluate performance generalpurpose algorithm described allowing understand performance lose making algorithm general difficult evade 
second special purpose algorithms individually combination general purpose algorithm detect backdoors 
rest section introduce algorithms detecting various interactive protocols 
different design purposes divide algorithms classes optimal algorithms designed identify back doors accurately possible worrying efficiency 
algorithms intended baseline algorithms line analysis 
efficient algorithms incorporate protocol specific filtering mechanisms optimal algorithms reduce expense cost degree accuracy 
tradeoff varies great deal possible simple packet filter achieve accuracy league expensive algorithms see gain algorithms efficient real time detection 
table summarizes algorithms discussed rest section 
backdoor type optimal algorithm efficient algorithm ssh ssh sig ssh len ssh sig filter rlogin rlogin sig rlogin sig filter telnet telnet sig telnet sig filter ftp ftp sig ftp sig filter root prompt root sig root sig filter napster napster sig napster sig filter gnutella gnutella sig gnutella sig filter table summary special purpose backdoor detection algorithms 
ssh secure shell ssh encrypts transmitted content strong cryptography 
increasingly interactive bulk transfer traffic 
deployment represents major advance internet security presents significant difficulties content intrusion detection precisely renders monitor blind specifics connection 
particularly attractive backdoor 
algorithm detecting ssh ssh sig uses ssh version string signature ssh 
ssh connection established sides send identifying string form comments followed carriage return newline ascii respectively 
maximum length string characters including carriage return newline 
version strings contain printable characters including space 
currently ssh protocol version 
suffices ssh sig look text ssh ssh data packet sent direction connection 
replace ssh sig tcpdump filter denoted ssh sig filter efficient detection st bytes ssh bytes tcp tcp tcp tcp tcp tcp second detection algorithm ssh len uses implicit signature packet length detect ssh sessions 
ssh specification ssh absence tcp generate packet payload sizes form multiple 
ssh generate payload sizes length multiple cipher block size multiple ciphers aware 
ssh packets length length deviation occurs initial version exchange conform rules 
light pattern ssh len detects ssh follows 
test interactive connection timing algorithm 
interactive go step 

proportion packets length number packets length exceeds threshold classify connection ssh 
need careful choosing threshold packet retransmission fragmentation distort characteristics 
current implementation set threshold 
rlogin connection establishment rlogin client sends nul terminated strings server format ka nul client user name nul server user name nul terminal type speed nul server returns zero byte nul indicate received strings data transfer mode 
algorithm rlogin sig attempts detect rlogin sessions negotiation signature 
applies analysis connection flow initiator connection check byte nul 
flow sent initiator keep testing byte events happens gap sequence number occurs nul seen empty string non bit ascii byte seen number bytes examined reaches maximum bound current algorithm 
terminates finding nul check see flow direction begins non nul byte empty strings non bit ascii bytes 
hold connection classified rlogin connection 
combine rlogin sig tcpdump filter resulting efficient algorithm rlogin byte data len data length tcp ip ip ip ip tcp ip ip tcp note rlogin sig tests byte packet nul byte 
necessary find clients tend send nul packet remainder prolog information second packet 
telnet telnet protocol pr includes quite general mechanism negotiating options pr 
telnet sessions series option negotiations attempt detect distinct pattern byte formats iac option code iac won option code iac option code iac don option code code values won don iac respectively 
note options parameters longer bytes 
telnet sig tests bytes incoming packet see match 
connection doesn involve option negotiation classify non telnet connection 
test additional conditions bytes bit ascii 
lines longer bytes 
aid binary traffic happens match option patterns 
combine packet filter form efficient algorithm telnet sig filter st byte iac xff nd byte tcp tcp tcp tcp ftp section look somewhat different form interactive protocol user control portion ftp file transfer protocol pr 
ftp request reply protocol requests sent single usually short lines ascii text replies similar structure longer multi line 
ftp requests sent response user activity accordingly interactive timing 
generated mechanically ftp client arrive closely spaced 
replies sent ftp servers start status code number followed accompanying text 
day worth ftp activity lawrence berkeley national laboratory rest internet connections distribution code reply returned server code ready new user seen times code service available seen times code closing data connection seen times codes connection closed command okay seen codes seen 
server returns haven missed significant service available 
really matters detecting include extra effort 
ftp server replies fourth byte blank hyphen indicating multi line reply 
ftp sig algorithm looks bytes followed blank hyphen signature ftp connection 
compose ftp sig filter st bytes th byte blank hyphen tcp tcp tcp tcp similar filter 
difficulty approach sort status codes popular smtp mail transfer protocol po 
code corresponds service ready service available just ftp 
means algorithms detecting ftp backdoors just smtp backdoors beneficial explore 
root backdoor operational experience particular type backdoor installed attackers unix root shell connection may involve telnet option negotiation 
server starts sending packet payload exactly bytes blank corresponds forms unix root shell prompt 
gives simple algorithm root sig attempts detect root backdoors looking bytes packet sent server side connection corresponding root sig filter look packet exactly bytes payload tcp tcp ip ip tcp conceptual simplicity works surprisingly see 
napster napster distributed system users share copies music digitized mp format na 
users run client connects napster com servers purposes publishing mp user available public searching particular mp available distributed database 
server redirects client clients desired mp available client direct connection source mp bypassing server point 
napster proven controversial mp trading violation copyright laws mp tend large files enthusiasm site napster users consume considerable resources na ha 
sites efforts control napster traffic example removing connectivity napster com servers 
napster users taken counter measures circumvent blocking including configuring napster servers non standard ports communications 
open source napster clients available gn aid napster users modifying client behavior better circumvent detection 
detecting napster traffic ways similar detecting backdoors case traffic reflect security access violation policy violation authorization authentication 
focused problem detecting communication directly napster clients transfer actual mp 
thought develop generic mp detector preliminary shown problem somewhat difficult format short binary header suggest simple distinct pattern look bo 
napster client communication quite distinctive signature 
communication begins followed immediately name item intervening whitespace 
furthermore send get directive sent napster client packet current version napster sig simply looks strings sent packet oc clearly easy napster client change corresponding change detector looking absence whitespace directive address 
connection 
napster context look send get packet payload bytes respectively ip ip tcp tcp tcp ip ip tcp tcp tcp tcp tcp gnutella gnutella distribution system similar spirit napster gn 
distinctive features fully open source exchange arbitrary files just mp napster add ons doing centralized component gnutella clients simply need know name gnutella client participate distribution network 
consequently gnutella prove harder sites control napster 
current form gnutella easy detect 
gnutella session begins connecting client transmitting gnutella connect version nl nl receiving reply gnutella ok nl nl nl newline character ascii 
accordingly gnutella sig looks string gnutella blank connection 
corresponding gnutella sig filter look gnutella characters payload tcp tcp tcp tcp tcp tcp performance evaluation section evaluate algorithms developed 
evaluations done adding implementations algorithms bro intrusion detection system pa 
general framework evaluation follows 
assess algorithm accuracy run known interactive traffic particular type supposed detect telnet rlogin ssh general algorithm combination telnet rlogin ssh traffic bulk transfer analyze fails flag connection trace interactive 
evaluates false negative rate 
run algorithm packet traces site internet traffic high volume protocols nfs removed capture traces reliably see connections mark interactive manually assess connection appear interactive 
evaluates false positive rate 
note assess napster gnutella detectors traces captured applications existed 
informal assessment correlating traffic known napster gnutella ports services 
trace description traces evaluate performance algorithms ssh trace mb packets connec tions half hour snapshot ssh connections seen late night internet access link university california berkeley ucb 
lbnl mix trace mb packets connections lbnl mix trace mb packets connections 
trace contains hour aggregate traffic collected lawrence berkeley national laboratory lbnl middle night second middle afternoon 
traces high volume protocols ssh nfs nntp ftp data filtered 
note apply filtering operational deciding trade missing backdoors ports reduced packet capture load 
lbnl inter trace mb packets connections day worth telnet rlogin traffic collected lbnl 
performance ssh algorithms ran ssh sig trace evaluate false negative ratio 
clearly ssh sig works connection 
altogether complete ssh connections trace missed ssh sig 
demonstrates false negative ratio ssh sig extremely low expected presence signature required specification 
ran ssh sig lbnl mix trace lbnl mix trace lbnl inter trace evaluate false positive ratio 
complete non ssh connections mis classified ssh ssh sig 
false positive ratio ssh sig close 
ssh sig filter exactly performance traces surprising apparent opportunity error unusual packetization splitting ssh version text multiple packets 
addition filtering gain tremendous packets contain ssh version string need processed 
trace algorithm needs inspect kb packets mb entire trace 
major limitation ssh sig ssh sig filter ssh connection 
ssh interactive traffic bulk transfer difficult soundly evaluate false negative ratio ssh len designed detect interactive ssh backdoors 
consequently evaluate false positive ratio 
ran ssh len traces ssh connections lbnl mix trace lbnl mix trace lbnl inter trace 
non ssh connections classified ssh ssh len yielding low false positive rate 
compared ssh sig ssh sig filter ssh len require presence connection 
robust ssh highly lossy links ssh blocks length coalesced due packet retransmission resulting single packet bytes 
consequently ssh len connection missing 
performance rlogin algorithms altogether complete rlogin connections traces missed rlogin sig 
evaluating false positive ratio rlogin sig 
traces altogether non rlogin connections mis classified rlogin connection 
means rlogin sig extremely low false positive ratio 
adding filtering rlogin sig false negative ratio remains 
increase false positive ratio marginal altogether non rlogin connections mis classified rlogin connections rlogin sig filter 
filtering gain rlogin sig filter significant 
gb data traces mb data needs processed rlogin sig 
major limitation rlogin sig rlogin sig filter similar ssh sig connection seen monitor 
performance telnet algorithms evaluate false negative ratio algorithm telnet sig 
unfortunately turns telnet connections traces short 
short connections telnet sig fails connections include option negotiations 
hand connection short backdoor cause significant damage 
evaluation meaningful consider connections satisfying client sends lines data server sends line data duration connection second 
eliminating connections satisfying requirements telnet connections remain missed telnet sig 
inspection shows involve public library catalog server performs logins option negotiation 
find non telnet connections traces mis classified telnet connections 
demonstrates telnet sig low false positive ratio 
adding filtering telnet sig form algorithm telnet sig filter false positive false negative ratios unaffected traces studied 
filtering gain significant telnet sig filter process mb gb packet data 
major limitation telnet sig telnet sig filter similar ssh sig rlogin sig connection seen monitor includes option negotiations tends occur connection 
performance ftp algorithms noted ftp detection algorithm detect smtp note limitation treat protocols 
altogether ftp smtp sessions server sent bytes data 
missed ftp sig 
inspection shows connections partial connections initial dialog far away place signature trigger missing 
demonstrates ftp sig low false negative ratio 
non ftp smtp connections classified ftp smtp 
inspection shows ftp server running false positive 
adding filtering ftp sig filter enjoys accuracy filtering gain mb gb data need processed ftp 
limitation ftp sig ftp sig filter rare exceptions connection seen monitor 
root shell algorithms far tell traces include root shells soundly evaluate performance root sig root sig filter 
see section preliminary experiences indicating filter particular quite powerful 
performance general detection algorithm assess false negative ratio algorithm ran inter trace consists telnet rlogin connections 
complete rlogin connections missed algorithm 
inspection shows excessively short seconds duration command executed user login failures 
telnet connections excessively short missed timing algorithm 
false negative ratio comparable telnet sig 
inspection shows algorithm connections missed connections detected telnet sig missed timing algorithm 
evaluate false positive ratio algorithm ran algorithm lbnl mix trace lbnl mix trace telnet rlogin ftp ssh smtp connections filtered 
connections timing algorithm reported backdoors 
inspection shows imap cr pop mail servers interactively fact false positives 
experience production begun operational deployment backdoor detection algorithms production lbnl 
surprising retrospect obvious findings large number legitimate backdoors 
algorithm detected interactive smtp sessions nominally non interactive protocol 
example analyzing minutes traffic ucb comprising gb data filtering high volume traffic protocol specific algorithms report backdoors non standard ports 
ftp servers non standard ports interactive games remaining library card catalog server 
contrast timing algorithm reports backdoors 
visual inspections interactive aol sessions interactive games chat sessions card catalog servers ftp sessions unable identify 
running live traffic stream ssh detection algorithms turned ssh servers running port nominally server ran port provide tunneling firewalls port nominally pop port run older version ssh port due compatibility problems ports nat server ssh access collection hosts number different ports host variants 
production unsafe filter protocols 
running signature tcpdump filters full traffic streams performance problems kernel packet filter filters highly selective 
protocol specific detectors appears run sized full traffic streams running gb trace takes cpu minutes mhz pentium ii 
run protocol specific detectors daily traces lbnl traffic high volume ports 
shortly configuring monitor run real time 
currently run set filters remove legitimate backdoors nat front mentioned hosts run document upload service sig protocol ftp smtp similar structure host runs service tcp port involves exchange looks telnet option negotiation isn popular ftp server serves files binary data looks embedded telnet options 
napster gnutella detectors important tools enforcing lbnl appropriate policy example detected remote napster server running port ftp apparent attempt hide circumvent firewall 
root backdoor filter root sig filter uncovered root backdoors running ucb traffic 
form originally intended connection begins directly blank know experience rare albeit striking signature 
filter version algorithm detects blank connection providing sent prompt newline root sig filter quite powerful detecting transitions root unix su command sessions prompt seen login prolog blank 
part appeal root sig filter generates candidate connections false hit rate general traffic fairly high connections flags burdensome check exceptionally cheap algorithm terms computation 
run general algorithm operationally 
discussed detects large numbers interactive services requiring time consuming effort contacting managers various machines determine fact backdoors legitimate 
potential approach clear 
summary problem finding backdoor connection flood legitimate network traffic initially appears daunting 
interactive traffic characteristics quite different machine driven traffic smaller packet sizes longer idle periods possible search efficiently traffic 
general algorithm doing algorithms look signatures particular different protocols implemented bro intrusion detection system 
unexpected benefit developing algorithms realize frequently possible fingerprint particular application protocol unique nearly unique text includes 
lead developement successful algorithms napster gnutella important detect violates site policy users attempt evade detection 
algorithms frequently amenable prefiltering stateless packet filter discards nearly traffic stream considered algorithm 
filtering yields major performance increases terms reduced cpu processing little times decrease accuracy 
related line may prove fruitful explore possibility combining general algorithm algorithms yield better accuracy 
algorithms major stumbling block failed anticipate large number legitimate backdoors users routinely access 
backdoors surreptitious sense general sense standard protocols run non standard ports 
begun algorithms operationally necessitate development refined security policies addressing legitimate backdoors honing algorithms mechanistic way eliminate certain classes benign backdoors 
hurdles find utility detection algorithms clear compelling natural step investigate application detecting custom backdoor protocols loki da back cert 
acknowledgments ken lindahl cliff frost greatly appreciated help gaining research access ucb traffic tara anonymous reviewers feedback presentation 
bo borman telnet option rfc network information center sri international menlo park ca oct 
bo mpeg audio layer ii iii frame header www mp tech org programmer frame header html 
cert cert vulnerability note vn www cert org notes vn html oct 
cr crispin internet message access protocol version rfc network information center ddn network information center dec 
da daemon route com loki implementation phrack magazine sep 
www com phrack phrack txt danzig jamin ceres mitzel estrin empirical workload model driving wide area tcp ip network simulations internetworking research experience pp 

gl gligor guide understanding covert channel analysis trusted systems ncsc tg version www ncsc mil library rainbow ncsc tg html national computer security center nov 
gn www net html 
gn gnutella gnutella wego com 
ha consumer internet rapidly changing face computing www compaq com html toc april 
jacobson leres mccanne tcpdump ftp ftp ee lbl gov tcpdump tar 
ka kantor bsd rlogin rfc network information center sri international menlo park ca dec 
lippmann webster weber bottleneck verification find novel new attacks low false alarm rate proc 
advances intrusion detection sept www zurich ibm 
com dac prog raid talks html lippmann myers rose post office protocol version rfc network information center ddn network information center may 
na napster www napster com 
na napster press room www napster 
com press html 
napster protocol specification sourceforge net napster txt june 
sourceforge net 
pf paxson floyd wide area traffic failure poisson modeling ieee acm transactions networking pp 
june 
pa paxson bro system detecting network intruders real time proc 
usenix security symposium jan 
po postel simple mail transfer protocol rfc network information center sri international menlo park ca aug 
pr postel reynolds telnet protocol specification rfc network information center sri international menlo park ca may 
pr postel reynolds telnet option specifications rfc network information center sri international menlo park ca may 
pr postel reynolds file transfer protocol ftp rfc network information center sri international menlo park ca oct 
pn insertion evasion denial service network intrusion detection secure networks www aciri 
org vern evasion ps jan 
ra 
re bypassing firewall mailing list firewall wizards nfr net feb 
weekly get napster david weekly org code php 
kivinen ssh transport layer protocol internet draft draft ietf transport txt may 
