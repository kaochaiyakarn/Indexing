line construction symmetric compact directed acyclic word graphs shinohara takeda arikawa department informatics kyushu university fukuoka japan presto japan science technology jst mail ine takeda arikawa kyushu ac jp compact directed acyclic word graph cdawg space efficient data structure supports indices string 
symmetric directed acyclic word graph string dual structure supports indices reverse simultaneously 
blumer gave algorithm construct string works line manner 
show line algorithm constructs string directly 
directed acyclic word graph dawg smallest finite state automaton recognizes suffixes string 
involved combinatorial algorithms strings serve indices strings indexing structures suffix tries suffix trees suffix arrays see 

indexing structures suffix trie constructed linear time respect length string space requirements linear 
hidden constants big notation space complexity critical practice attention paid reduce constants 
blumer introduced compact directed acyclic word graph cdawg space efficient variant dawg 
cdawg obtained compacting corresponding dawg minimizing corresponding suffix tree 
blumer gave linear time algorithm constructing cdawg string builds dawg string shrinks cdawg 
crochemore developed algorithm construct directly constructing suffix trees intermediates 
algorithm allows save time space requirements simultaneously proven size strictly smaller suffix trees 
proposed online algorithm directly constructs strings :10.1.1.22.8737
algorithm ukkonen line suffix tree construction algorithm crochemore gave mccreight line suffix tree construction algorithm 
kind failure transition suffix link efficient constructions indexing structures suffix tries suffix trees 
interesting fact string suffix links strie form strie rev rev denotes reversal dawg similar property suffix links dawg compose stree rev :10.1.1.55.9399
duality damaged case suffix trees 
suffix links stree form structure supporting indices rev set suffix links stree corresponds subset set edges dawg rev 
order obtain duality suffix trees affix tree developed stoye 
affix trees modification suffix trees suffix links atree form atree rev see fig 

stoye prove line algorithm constructing affix trees runs linear time maa succeeded improve run lin ear time 
blumer showed nodes cdawg invariant reversal nodes cdawg string exactly correspond cdawg rev call symmetric compact directed acyclic word graph see fig 
right 
ukkonen gave intuitive excellent line algorithms construction strie stree 
suffix links strie equal edges strie rev turns strie strie rev sharing nodes simultaneously built line scanning left right 
algorithm construct blumer gave line results algorithm builds dawg stree rev time line left right fashion 
fact algorithm constructs suffix trees weiner interesting considered line algorithm 
algorithm builds suffix tree string appending suffixes current suffix tree increasing order 
words algorithm builds stree line right left 
addition algorithm modified create edges dawg rev time 
implies algorithm simultaneously constructs dawg stree rev line left right 
give algorithm simultaneously builds stree dawg rev line left right 
algorithm constructs stree way ukkonen algorithm computing shortest extension links sext links form dawg rev time 
show algorithm directly constructs line left right 
builds cdawg similarly algorithm developed computes sext links equal edges cdawg rev :10.1.1.22.8737
practical point view affix trees essentially range applications 
number nodes smaller atree linear respect length string fact inequality comparing number nodes min stree stree rev max stree stree rev atree holds string intuitively set nodes intersection stree stree rev set nodes atree union 
save space considerably compared affix trees 
cdawg attractive indexing structure underlying equivalence relation useful data mining machine discovery textual databases 
equivalence relation plays central role supporting human experts involved evaluation interpretation task mined expressions classical japanese poems 
rest organized follows 
section introduce notions notation define suffix tries suffix trees terms equivalence relations strings 
gives unified view data structures 
define bidirectional indexing structures including viewpoint duality 
section give line linear time algorithm construct stree dawg rev simultaneously 
algorithm builds line linear time shown section 
conclude section 
preliminaries notation finite alphabet 
element called string 
strings said prefix factor suffix string xyz respectively 
sets prefixes factors suffixes string denoted prefix factor su respectively 
length string denoted 
empty string denoted 

ith symbol string denoted factor string begins position ends position denoted 
convenience string denote rev reversed string rev 

set strings denote cardinality equivalence relations strings strings write resp 
sets positions resp 
identical 
equivalence class string respect resp 
denoted resp 

instance baggage ag ga ga gag gage ga ga gga bagga 
note strings factor form equivalence class 
equivalence class called degenerate class 
classes called non degenerate 
follows definition factors single equivalent class prefix vice versa 
equivalence class degenerate class unique longest member 
similar discussion holds factor string denote unique longest members respectively 
call resp 
representative resp 

running example ag baggage gg 
denote string running example ag gg baggage 
strings factor suffix tries suffix trees recall indexing structures suffix trie suffix tree dawg cdawg string represent string factor 
denoted strie stree dawg cdawg respectively 
define edge labeled graphs second component edge represents label 
definitions strie stree dawg cdawg fig 

regard stree compacted version strie operation 
similarly dawg seen minimized version strie operation 
different operations cause difference suffix trees refers single string representative string belong means node stree represents just string factor dawg represent 
words edges may point node dawg 
cdawg obtained minimizing stree operation compacting dawg operation 
nodes strie stree corresponding called root nodes 
common assumption string ends endmarker occurring string su associated leaf node strie stree 
words strie stree su leaf nodes 
marker denoted 
endmarker assumption keep holding 
nodes corresponding dawg cdawg called initial nodes 
final node string su associated 
bidirectional index structures index structure represents strings factor factor rev call bidirectional index structure string define structure graph kinds edges ones string rev giegerich kurtz observed strie strie rev dual sense share nodes :10.1.1.55.9399
refer bidirectional index structure strie strie rev 
formal definition definition fig 
duality stree dawg rev pointed shown definition fig 

factor 
easy see trivial correspondence definition correspondence identify er definition ax ax factor rev ya rev ya factor rev equivalent definition dawg rev 
edges er definition called shortest extension links sext links stree introduced crochemore rytter 
part reversed sext links known suffix links play key role time efficient construction suffix trees 
formally suffix links definition strie tree factor xa xa factor 
definition stree tree factor xa xa factor xa xa xa 
definition dawg dag factor xa xa factor 
definition cdawg dag factor factor xa xa factor xa xa xa xa xa factor xa xa xa 

definitions indexing structures strie stree dawg cdawg 
definition strie strie rev bidirectional tree el er factor el xa xa factor 
er ax ax factor 
definition stree dawg rev bidirectional dag el er factor el xa xa factor xa xa xa er ax ax factor 
definition bidirectional dag el er factor el xa xa factor xa xa xa er ax ax factor ax ax ax 

definitions bidirectional indexing structures strie strie rev stree dawg rev 
set ax ax factor ax reversal suffix links reversed suffix link defined ax ax factor ax fig 
illustrate strie strie rev stree dawg rev baggage 
duality omit definition bidirectional index structure dawg stree rev 
definition fig 
show definition symmetric cdawg string denoted originally defined blumer 
edges er called sext links cdawg 
suffix links cdawg set ax ax factor ax reversed suffix link cdawg set ax ax factor ax ax ax ax illustrate dawg st ree rev fig 
baggage 
symmetric bidirectional index structure called affix tree introduced stoye 
atree atree rev baggage shown fig 
formal definition comparison 
intuitively set nodes intersection stree stree rev set nodes atree union 
line construction stree dawg rev section give algorithm simultaneously constructs stree dawg rev string line linear time respect 
definition string stree denote tree obtained eliminating non branching internal nodes stree 
ukkonen suffix tree construction algorithm builds stree stree line manner string despite difference trees algorithm know stree stree occur algorithm constructs stree fashion ukkonen algorithm dawg rev constructed time incomplete sense lacks nodes corresponding non branching internal nodes stree sext links 
obtained structure input exactly stree dawg rev 
denote stree sext links incomplete version stree dawg rev 
describing algorithm formally define stree stree sext links order clarify algorithm constructs 
string lw xa factor unique symbol xa factor 
equivalence closure lw smallest superset lw symmetric reflexive transitive 
readily shown refinement equivalence class union equivalence classes string factor denote longest string equivalence class belongs equivalence relation prefix corresponds locus string factor stree stree 
ready give formal definitions 
definition stree tree obtained replacing operation operation definition 
definition stree sext links bidirectional dag el er obtained replacing operation operation definition 
prove structures identical defined definition definition respectively input string 
main idea algorithm stree string algorithm creates entirely way ukkonen algorithm 
time new node created construction stree sext aa 
strie strie rev left stree dawg rev right baggage 
thick solid lines represent edges strie stree thin break lines ones strie rev dawg rev 
string baggage ends unique character endmarker omitted 

dawg st ree rev left right string baggage 
links new node correspond certain edges dawg rev computed 
ukkonen algorithm creates leaf node called trick enables algorithm achieve time construction stree edge directed transparent leaf node called open edge 
modify create leaf node need leaf node define sext links ii sext link leaf node clue define sext links node created just leaf node 
may wonder creating leaf nodes time complexity construction stree quadratic due series updating open edges 
recall fact label edge stree usually implemented pair integers 
furthermore note second value label open edge stree implement second value global variable update open edges constant time increment variable pay attention back reasons ii 
obvious proposition aa 
atree left atree rev right baggage 

proposition suppose stree reversed suffix link leaf node labeled points node node leaf node stree 
proof 
definition reversed suffix link node triple ax ax string suffix represented leaf stree 
consequently ax ax means suffix represented leaf node stree 
proposition tells suffix tree reversed suffix link newest leaf node points created leaf node 
conversely suffix link created leaf node pointing leaf node created 
sequel shall clarify reason ii implies 
construction stree sext links dimensional table sext 
description sext means sext link node labeled points node 
similarly tables suf correspond suffix link reversed suffix link respectively 
maintain sext links explain sext links new node computed ukkonen type construction stree 
see fig 
shows phase construction stree abab 
starred point fig 
called active point 
string phase 
active point stays algorithm start update stree stree 
act denote active point phase 
phase act moves spelling 
possible act move ahead current location spelling say case moves stops act notice new node created case seen phase aba phase abab fig 

say case new edge labeled created act currently stays 
case divided sub cases act node case 
act edge case 
case algorithm just creates new edge labeled new leaf node see fig 
left 
newly created node case 
concrete examples seen phases ab third step phase abab fig 

case algorithm needs create new node act stays middle edge insert new edge labeled see fig 
right 
concrete examples case bee seen second steps phase abab fig 

having making node creates new edge new leaf node nodes nodes newly created case 
abab aba ab abab 
line construction stree abab sext links represented broken arrows 
third step phase abab sext links form dawg baba 

cases position active point denoted gray star 
active point node case displayed left leaf node newly created 
hand case right internal node created active point middle edge 
sext link leaf node cases follows proposition reversed suffix link new leaf node points created leaf node suppose jth created leaf node th construction stree 
reversed suffix link node pointing labeled formula proposition concerns sext link proposition suppose jth th created leaf nodes stree respectively 
sext sole sext link leaf node proof 
leaf node factor occurred suffix 
jth suffix preceded string cv factor 
example leaf node created phase ab fig 
third 
sext ab second character string abab 
sext links internal node leaf node node newly created case algorithm maintenance node node newly created case determine sext links assume phase internal node created middle edge node node results children exists node suf character suppose node sext sext set point bu case remember definition sext links 
instance step phase abab fig 
ab abab sext abab abab 
ab undefined define sext ab abab 
sext stays pointing node obviously bu au example second step phase abab fig 
sext bab abab 
ab sext ab 
previously remarked reason ii section refers sext link leaf node order determine sext links node way mentioned sext links formally lemma 
lemma internal node newly created phase construction stree sext links existing child node new leaf node child sext created character sext sext phase 
proof 
follows definition node sext link labeled character occurrence string preceded note string suffix string occurrences followed string occurrence preceded node sext link labeled hand preceding character occurrence ends character node sext link labeled hand active point arrives node case applied new sext link node created 
suppose just leaf node created active point stopped node phase construction stree 
addition assume jth created leaf node 
say 
notice active point stops node case phase phase sext link node labeled created set point node represents 
clarify reason 
parent nodes respectively 
notice uw 
furthermore suf node currently represents node corresponds 
sext active point stops node algorithm faces case sext link node label created set point leaf node 
concrete example shown fig 

sext links pointing new node thing accounted change sext links point newly created nodes mention case new leaf node 
new leaf node common case case 
character appears string time new edge labeled created root node associated 
sext root node corresponds empty string 
seen phases ab abab fig 

character appeared string leaf node pointed leaf node created 
treat decide sext link stree modified point newly created internal node case 
recall node children 
stree sext links shown left 
node created leaf node phase 
scanning new character active point moves node seen center stree 
sext set point created leaf node ba 
right representing stree sext aa baa active point arrived node aa 
suppose node pointed labeled sext link node stree sext words cp sext link modified point sext cp concrete example seen phase abab phase abab fig 

sext abab phase abab modified sext ab step phase abab node ab internal node newly created phase abab 
case sext link node remains pointing node cp case 
similar discussion holds sext links pointing node child node correctness complexity algorithm algorithm summarized fig 
fig 

compute sext links nodes stree sext links algorithm theorem string stree sext links constructed line linear time space respect 
proof 
proven stree obtained line time clarify correctness complexity construction sext links 
data structure newly add ukkonen algorithm table sext 
clear require space 
fixed alphabet space complexity algorithm linear 
assumed string ends unique marker 
scanned new edge labeled absolutely created root node corresponding new leaf node created 
sext link root node labeled set point new leaf node 
chain formed sext links leaf nodes stree exactly spells rev path dawg rev corresponds string rev completed 
guarantees paths dawg rev corresponding suffixes rev created sext links internal nodes stree 
algorithm constructs dawg rev line new sext links computed time new node created 
establish sext links computed linear time respect 
obvious decide sext link new leaf node takes constant time 
determine sext links newly created internal node copy sext links children new node 
takes time children sext links 
fixed alphabet takes constant time 
matter change sext links due new created internal node 
suppose phase act stays depth stree 
phase algo algorithm construction stree text sext links alphabet text 
text marker appearing text 
create nodes root bottom create new edge bottom root suf root bottom root bottom root nil th created leaf node repeat update text function update canonical pair active point 
nil nil check point text implicit extension split edge explicit create new leaf node new edge global variable representing scanned length input string 
nil set suffix link nil set suffix link maintenance sext links text nil sext sext character sext nil nil sext sext sext link sext modify sext links pointing sext suf nil set suffix link sext text return 
main routine function update 
rithm begins seek location active point 
sext links changed active point stops 
implies complexity change sext links due new internal nodes takes time 
line construction section propose construct string line time 
define cdawg similar way definition stree 
line algorithm builds cdawg way builds certain edges cdawg rev procedure set suffix link character string represented suf sext function check point boolean implicit text edge return text explicit return edge function extension node canonical pair :10.1.1.22.8737
return explicit find text edge return implicit function pair integers borrowed ukkonen algorithm 
return explicit find text edge find text edge return function split edge node text edge replace edge edges new node return 
functions 
sext links nodes cdawg 
stress algorithm ukkonen suffix tree construction algorithm :10.1.1.22.8737:10.1.1.22.8737
implies add functions rect separate node pseudocode algorithm section obtain cdawg :10.1.1.22.8737
matter build edges cdawg rev sext links cdawg course 
fortunately fact amount information suffix trees 
loss information comes property node having incoming edges correspond nodes connected suffix links suffix trees 
lost information strings obtained concatenating labels suffix links 
hint exercise 
furthermore cdawg construction algorithm capable storing lost information integers nodes :10.1.1.22.8737
notice treat suffix trees means obtain sext links 
subsections show algorithm section changed constructing examples 
turning attention pseudo code th line update function changed create new edge final labels reversed suffix links sext links strings character 
sext link corresponding newly created edge sequence snapshots line construction abab shown fig 

character appeared string edge labeled created directed abab aba ab abab 
line construction abab 
solid arrows represent edges cdawg broken arrows represent sext links nodes cdawg equivalent edges cdawg rev 
final node phase sext link initial node labeled set point final node 
comparing corresponding phase fig 
see character label cdawg corresponds label sext link leaf node node suffix tree phase general phase construction cdawg representative final node 
assume edge created node jth edge entering final node jth edge associated 
exists gap representative 
notice gap corresponds reversal concatenation labels sext links leaf node leaf node stree 
grounds gap new sext link node set point final node label rev change sext links see phases abab abab fig 

active point stays middle edge labeled abab phase abab edge split edges due creation new edge labeled 
notice sext link labeled cut 
labeled set point new node ab labeled set node ab 
ab ab abab time abab 
sext link label length cut 
see fig 
displays cdawg abb cdawg abba 
sext link initial node pointing final node labeled ba cdawg abb 
conversion cdawg abba new node created active point currently stays 
sext link labeled ba cut part set point new node labeled general new node created middle edge sext link corresponding edge cut part labeled single initial character label cut sext link 
depend length label sext link cut 
realize operation mentioned need associate sext link labeled ba string bb final node bb representative final node 
associate just representative sext ba abb recognize sext link pointing final node cut owing newly created node notice exist sext links initial node final abba abb 
cdawg abb cdawg abba sext links 
node 
sext link point string represented certain node representative 
example cdawg abb fig 
sext abb sext abb sext ba bb 
seen phase abab fig 
edge labeled bab merged node ab label modified sext ba bab sext ba character tail label ba sext link corresponds label sext link node ab stree abab fig 

fig 
displays node separation happen construction 
fig 
active point arrives node ab edge labeled belongs non longest path initial node node ab node cloned seen cdawg 
sext ba cdawg cut sext ab sext implementation factors represented node mentioned sext link cdawg set point certain factor represented node 
implement strings naively space requirement quadratic 
implement integers referring positions input string suppose representative node cdawg 
node integers represents position left occurrence 
addition edge entering node integer representing entrance order node see left fig 
cdawg 
example edge labeled ab edge labeled second entering node ab 
note cdawg edge labeled abc entering final node represents factors second third members final node respectively 
edge labeled abc associated set 
way edges entering final node associated sets left right 
general edge node may correspond strings represented node 
truth strings occur sequentially string edge corresponds strings represent pair integers minimum maximum elements set associated 
result discussions theorem string constructed line linear time space respect 
gave line linear time algorithm construct suffix tree string dawg reversal string 
builds suffix tree ukkonen line algorithm simultaneously builds dawg sext links nodes suffix tree 
blumer gave line linear time algorithm construction string builds dawg suffix links compacts dawg suffix links 
algorithm proposed directly constructs string line linear time builds cdawg string line sext links compose cdawg reversal string 
enables save time 
cdawg cdawg sext links 
space time constructing 
blumer blumer haussler ehrenfeucht chen 
smallest automaton recognizing subwords text 
theor 
comput 
sci 
blumer blumer haussler mcconnell ehrenfeucht 
complete inverted files efficient text retrieval analysis 
acm 
preliminary version stoc 
chen 
efficient elegant subword tree construction 
apostolico galil editors combinatorial algorithm words volume nato advanced science institutes series pages 
springer verlag 
crochemore rytter 
text algorithms 
oxford university press new york 
crochemore 
compact directed acyclic word graphs 
structures logic computer science lncs pages 
springer verlag 
giegerich kurtz :10.1.1.55.9399
ukkonen mccreight weiner unifying view linear time suffix tree construction 
algorithmica 
gusfield 
algorithms strings trees sequences 
cambridge university press new york 

approximate string matching factor automata 
theor 
comput 
sci 
shinohara takeda arikawa :10.1.1.22.8737
line construction compact directed acyclic word graphs 
proc 
th ann 
symp 
combinatorial pattern matching lncs pages july 
maa 
linear bidirectional line construction affix trees 
proc 
th ann 
symp 
combinatorial pattern matching lncs pages 
springerverlag 
mccreight 
space economical suffix tree construction algorithm 
acm apr 
stoye 

master thesis universit bielefeld may 
stoye 
affix trees 
technical report universitat bielefeld technische fakultat 
takeda matsumoto fukuda 
discovering characteristic expressions literary works new text analysis method gram 
theor 
comput 
sci 
appear 
ukkonen 
line construction suffix trees 
algorithmica 
weiner 
linear pattern matching algorithms 
proc 
th ann 
symp 
switching automata theory pages oct 

