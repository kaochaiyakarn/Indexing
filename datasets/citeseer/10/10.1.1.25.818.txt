compositional explanation types algorithmic debugging type errors olaf university york uk olaf cs york ac uk type systems typed functional programming languages hindley milner type system 
practical problem type systems hard understand program type correct function intended type 
suggest core problem di culty explaining expression certain type 
type system defined compositionally 
propose explain types variant hindley milner type system defines compositional type explanation graph principal typings 
describe programmer understands types interactive navigation explanation graph 
furthermore explanation graph foundation algorithmic debugging type errors semi automatic localisation source type error having understand type inference steps 
implemented prototype tool explore usefulness proposed methods 

type systems typed functional programming languages hindley milner type system 
combines unobtrusiveness requiring type annotations program flexibility polymorphism 
basic ideas type system intuitive function types 
type polymorphic function represents types gained instantiation type variables 
function principal general type represents types 
practical experience shows type checker catches errors trivial deep logical errors 
experience shows type error message hard deduce actual cause error understand :10.1.1.36.3711:10.1.1.43.7746:10.1.1.24.6669:10.1.1.46.4848
consider tiny haskell program xs ys map toupper 
xs ys permission digital hard copies part personal classroom granted fee provided copies distributed prot commercial advantage copies bear notice full citation rst page 
copy republish post servers redistribute lists requires prior specic permission fee 
icfp september florence italy 
copyright acm 
function map toupper maps list characters list uppercase characters concatenates lists infix operator composes functions 
programmer thinks composition function mapping lists characters list characters 
haskell system hugs gives error message error line type error application expression map toupper 
xs ys term map toupper type char char match program typable programmer reasoning faulty 
wrong subexpression map toupper 
type match type 
glasgow haskell compiler generally gives detailed type error messages hugs better couldn match char expected type char inferred type second argument right hand side equation map toupper xs ys message reports type conflict di erent subexpression 
function certainly type type char 
analyse type error messages current interpreters compilers unsatisfactory 
meaning current type error messages meaning reported types relation program defined 
furthermore program position error message far source error 
argue lack precise error location unavoidable type system 
lack precision programmer able explore unexpected type inferred locate source error 
main component type error explanation system explanation system types 
argue hindley milner type inference tree milner type checking algorithm suitable explaining types 
claim type explanation compositional comprehensible 
explanation tree structure types node determined uniquely types node children 
tree principal types compositional tree principal haskell org hugs haskell org ghc typings unfortunately hindley milner type system principal types principal typings 
john mitchell defines type checking algorithm implicitly defines type system closely related hindley milner type system call principal monomorphic typing property 
type system principal monomorphic typings basis 
type checking algorithm produce compositional type explanation tree 
fact avoid duplication subtrees construct acyclic type explanation graph 
show programmer understand types interactive navigation type explanation tree 
navigation di erent levels enables programmer avoid useless information losing important details 
just type inconsistencies reported far actual error run time errors usually observed far source 
declarative languages algorithmic debugging successfully locate run time errors 
type explanation graph basis algorithmic debugging type errors 
algorithmically locate type errors programmer follow type explanations needs know types intends variables expressions 
implemented prototype type explanation debugging tool explore ideas 
prototype produced examples shown 
haskell examples analysis valid proposed method applicable hindley milner programming languages ml clean 
section analyse problems type error messages current systems argue hindley milner type derivation tree milner type checking algorithm suitable basis explaining types type errors 
section informally describe idea compositional type explanations 
section formalise type system principal monomorphic typings section define construction type explanation graph 
section discuss navigation explanation graph section demonstrate algorithmic debugging type errors works 
section briefly discuss implementation explanation debugging tool 
section discuss related 
conclude section 

problems provide better support programmer untypable program analyse current type error messages unsatisfactory giving helpful information hard 
meaning type error messages 
type checkers systems hindley milner programming languages report type error form expression contradictory types 
hugs reports type type match 
ghc reports expected type inferred type 
unclear descriptions mean types relate expression 
types error messages contain type variables 
mean expressions polymorphic types instances types 
occurrence type variable types means type variable replaced type types 
type variables introduced type checker called nongeneric type variables scope program contrast generic type variables occurring type annotations program 
sorts type variables confusing 
error location 
program highlights part problem reverse reverse xs reverse xs xs head reverse xs init reverse tail reverse xs xs init xs hugs gives error message error line type error application expression xs init xs term xs type match unification give infinite type glasgow haskell compiler says occurs check construct infinite type expected type inferred type argument init xs second argument init xs haskell systems give di erent expressions type checking fails 
unfortunately expressions far away source error right hand side second equation reverse reverse xs define desired function reverses order elements list 
example highlights problem polymorphism flexibility polymorphism erroneous expression typed 
fortunately type erroneous expression usually di erent type intended part programmer 
usage expression usually leads type error context 
reverse example contrived 
written intended type reverse program obtained precise error message 
type annotations practically undesirable hindley milner type system designed unnecessary 
right hand side function definition usually contain type annotations large su er polymorphism problem 
sparseness type annotations type checker seldom knows intended type expression compare inferred type 
conclude general type checker pinpoint exactly source type error report inconsistency types program location 
occurrences word usually sentences indicate erroneous program may welltyped 
limitation type systems subject 
explanation types 
types reported error message agree type intended programmer 
hugs reports definition expression xs type match type programmer intends xs list reported type reasonable 
type instance type 
similarly glasgow haskell compiler reports occurrence xs definition types 
programmer intends xs list arbitrary elements 
type checker obtain types 
heart tool explaining type errors tool explaining types program fragments 
typed expression di cult explain type 
type inference tree 
type system formally defined type rules 
define valid type judgements 
type judgement consists expression environment associates free variable type type expression 
type judgement valid exists type inference tree 
shows tree 
assume literal overloaded just type int 
fact split tree subtrees fit page underlines impossible understand tree 
look small part time 
verify correctness tree verifying inference step instance type rule 
inference step provide explanation 
simplicity assume types null globally known consider tree leaves judgements xs ys 
type int 
type 
furthermore programmer may intend expression xs 
ys 
general type example type int int 
wants apply expression list chars list ints 
general type typed 
hindley milner proof tree prove exists general type 
algorithm type explanation systems proposed milner type checking algorithm algorithm recursively traverses expression determine principal type 
implicitly constructs inference tree 
intermediate states construction inference tree example 
discuss details note unknown type algorithm introduces new type variable 
example state introduces variables subtrees combined type variables may substituted 
example reach state type int substituted type function type argument equal 
type variables scope tree constructed algorithm may modify tree constructed time 
furthermore state algorithm uses type inferred xs traversing subtree 
global modifications flow information subtrees hard follow algorithm ciently implemented suitable explaining types 

compositional explanations previous section argued type explanation inference tree global dependencies type checking algorithm modifies type variables global scope 
comprehensible explanation consist small manageable units meaningful 
claim type explanation compositional 
explanation tree structure types node determined uniquely types node children 
inference step small explanation unit refers explanations child nodes 
principal typings 
consider expression knowing variables infer function takes arguments types arguments equal types type expression result type function express concisely follows expression type expression null xs appearing example section 
know predefined function null type bool 
infer expression null xs type bool xs similarly subexpression xs ys expression xs ys type xs ys type variables express dependencies types 
type expression types variables belong separately meaningless 
definition 
type environment plus type typing written type judgement states type typing expression just inferred typings expressions typing null xs typing xs bool xs ys typing xs ys note type inference tree uses di erent typing expression xs ys 
typing instance typing inferred 
inferred principal general typing xs ys 
definition 
typing instance typing type substitution 
typing principal expression typing typings instances comparison type principal expression type environment type types instances 
null bool null int bool xs int xs int xs int null xs bool ii xs int xs int ys int ys int xs int ys int xs ys int int iii int int int int int int ys int ys int ys int ys int xs int xs int xs int ys int ys xs int int 
xs int null xs bool ii 
xs int ys int xs ys int int iii 
xs int ys int ys xs int int xs int ys int null xs xs ys ys xs int int xs int ys 
null xs xs ys ys xs int int int xs 
ys 
null xs xs ys ys xs int int int int space reasons subtrees ii iii displayed separately tree 
hindley milner type inference tree null bool null bool xs xs state null bool null bool xs xs xs null xs bool state substitution xs xs ys ys xs ys xs ys state int state int int int int int int ys ys state substitution int xs xs ys int ys int xs ys int xs ys int int int int int int int ys int ys int ys int ys int state substitution int 
ys int ys int xs xs xs ys int ys xs int state intermediate steps type inference tree construction algorithm principal type meaningless fixed type environment 
contrast expression determines principal typing uniquely type variable renaming 
principal typing meaningful unit information expression 
inference step 
principal typings null xs xs ys typing principal expression ys xs type int xs ys int determine principal typings principal typing null xs xs ys ys xs 
arrange typings columns side side expressions null xs xs ys ys xs types bool int xs ys int renamed type variables second third typing columns 
type variables express dependencies typing unrelated type variables typings 
construct type argument bool types second third argument equal 
substitute int expressions null xs xs ys ys xs types bool int int xs int ys int types variables xs ys agree 
substitute int int expressions null xs xs ys ys xs types bool int int int int xs int int int ys int int short applied general substitution gives required type equalities 
obtain principal typing expression null xs xs ys ys xs type int int xs int ys int shows type inference tree principal typings example 
type variables local single principal typing 
typings leaves derivation tree trivial independent remaining tree 
inference step uniquely determined premises 
nutshell tree compositionally defined 
type error 
untypable expression type inference step fail 
case error message report conflicting typings type error map toupper 
expressions 
map toupper types char char error message surprisingly similar glasgow haskell compiler 
information error message defined meaning 
function 
map toupper principal typing char char argument principal typing assume types map toupper 
underlining types emphasises type function argument fit 
remaining parts example especially arguments xs ys contribute error 
programmer understand principal typing expression ask explanations discuss subsequent sections 
polymorphic monomorphic variables 
type inference hindley milner system general easy far suggested 
consider expression previous exposition gives type error type error expressions types type needs function type second equal argument type function 
hand occurrences type 
exists infinitely typings example point polymorphic variable 
di erent occurrences di erent types 
previous section polymorphic variable null consider possibility variables listed type environments typings polymorphic 
expression example expression principal typing exists type system 
hindley milner type system principal types su cient compositional type explanation 
get problem 
hindley milner type system clearly distinguishes polymorphic variables monomorphic variables 
variables defined top level program polymorphic 
type polymorphic variable may contain quantifiers variable may di erent types 
variables basically representing function arguments monomorphic 
type monomorphic variable may contain type variables monomorphic variable may type occurrence 
principal 
type environments previous examples contain monomorphic variables 
assumed types polymorphic variables data constructors null implicitly globally known 
new polymorphic variables defined program possibly limited scope need types polymorphic variables explicit formal type system 
null bool xs xs xs null xs bool ii xs xs ys ys xs ys xs ys iii int int int int ys ys ys int ys int int xs xs xs ys int ys xs int 
xs null xs bool ii 
xs ys xs ys iii 
xs ys int ys xs int xs int ys int null xs xs ys ys xs int int xs int ys 
null xs xs ys ys xs int int int xs 
ys 
null xs xs ys ys xs int int int int int int int int type inference tree principal local typings introduce second separate environment types polymorphic variables 
idea type checker takes input expression environment polymorphic variables 
types inconsistent type checker produces output type expression type environment monomorphic variables occur freely expression 
type type environment general types type environments give valid type judgement principal monomorphic typing 

type system preceding informal define type system principal monomorphic typings 
language 
aim tool real programs classical calculus plus 
language uses main features functional languages 
subsequent examples written language 
syntax 
type checking purposes define patterns equal expressions shall contain construct practice meet restrictions 
equation consists left hand side expression right hand side expression defined variable appears left hand side 
definition consists equations variable 
program sequence definitions 
definition may recursive simplicity allow mutual recursion 
polymorphic variable subsequent definitions 

hindley milner type system uses quantifier types polymorphic variables 
example variable null type bool 
type system regard typings types 
express polymorphism typing quantifier 
polymorphic variable null principal typing bool 
fact null occur domain type environment indicates null polymorphic 
contrast principal typing ys variable ys indicates ys monomorphic 
see ys di erent types expression inference step types variables type environments unified 
type system quantifier 
keeps type system simple 
particular type variable scopes typing appears 
furthermore useful practice functional languages hindley milner type system uses quantifier types polymorphic variables 
type signature null bool functional language simply interpreted specifying null typing bool polymorphic variables type signature type environment typing empty 
polymorphic variables type environment empty demonstrate discussion restricted polymorphism 
type judgements 
environments monomorphic polymorphic variables separate 
associate monomorphic variables types associate polymorphic variables typings 
monomorphic type environment mapping variables types 
monomorphic typing pair monomorphic type environment type 
polymorphic typing environment mapping variables typings 
write environment set pairs 
dom denotes domain environment 
operator combines environments right supersedes left 
operator combines environments assumption agree common domain 
set variables 
denotes environment variable int literal 

data constructor true false 
expression bind pattern equation variable eq 
definition variable def eq 
eq program prog def 
def type variable type constructor int bool 
type 
syntax language monomorphic type environment 
monomorphic typing polymorphic type environment 
type judgements eq def prog type judgements components int int constructor dom new application new def def equation vars 

vars 
vars 

definition eq 
eq reduce eq 
eq 
program def def 

def 
def 
def 
type system principal monomorphic typings 
new dom 
dom mgu 
dom 


new new dom 
dom mgu 
dom 

unification type environments types reduce dom reduction typing agrees defined variables shows syntax typings type environments sorts type judgements various program fragments 
type judgements equations definitions programs type environments program fragment 
type judgement definitions polymorphic environments 
polymorphic variables group second polymorphic variable defined group 
type rules 
type rules type system principal monomorphic typings 
variables domain polymorphic environment polymorphic variables monomorphic 
note definition variable monomorphic 
rule equation variables occurring patterns removed environments achieve correct variable scoping similarly defined variable removed rule definition 
rules program combination environments assures correct variable scoping 
rule program assigns typings data constructors 
environments types 
unification monomorphic environments types defined 
function uses function mgu determines general unifier set type equations 
unification function defined section 
environments unified unifying types variable 
unified environment types variables occur input environments 
type variables 
type variables scope typing matter typing polymorphic environment part type judgement 
unification typings split apart monomorphic environments types 
type variables di erent typings unrelated type variables typings unified disjoint 
ensure disjointness demand common informal statement new type rules type variable distinct type variables introduced type inference tree 
requirement globally unique type variables easy implement ciently 
alternatively require disjointness premises rules add rule renaming type variables typings 
approach scope type variables explicit type system leads larger type system away cient implementation 
restricted polymorphism 
consider program xs xs true local definition obtain type judgement 
xs xs polymorphic variable instantiated di erent types 
infer 
xs xs int int 
xs xs bool true bool type inference step true requires unification types xs fails 
program rightly typable 
monomorphic variable xs monomorphic environment expresses type variable polymorphic programs example polymorphic environment associate polymorphic variables typings just types 
point typing contain monomorphic variable type contain type variable type typing 
superfluous monomorphic variables removed function reduce defined rule definition 
type inference hindley milner system 
obtained type system principal monomorphic typings rewriting john mitchell type checking algorithm ptl section type inference system extending language 
mitchell uses ptl expose strong relationship type checking simply typed calculus hindley milner type system 
type rules read type checking algorithm 
polymorphic environment program fragment input 
remaining components type judgement may second polymorphic environment monomorphic environment type output 
example polymorphic environment application algorithm recursively calls twice 
call input determines principal monomorphic typing call input determines principal monomorphic typing calls independent 
unification function combines typings obtain principal monomorphic typing 
definition 
monomorphic typing principal expression polymorphic environment monomorphic typings hm instances second type judgement judgement hindley milner type system translates polymorphic environment environment quantified types 
claim hm type judgement provable type system principal 
theorems prove similar properties algorithm ptl 
adaption mitchell proofs routine outside scope 

explanation graph type system principal monomorphic typings polymorphic environment creates global dependencies type inference tree 
typing polymorphic variable leaf inference tree 
understand polymorphic variable typing search inference tree place typing added polymorphic typing environment 
inference tree compositional 
solution simple copy inference tree definition polymorphic variable occurrence variable tree typing polymorphic variable longer leaf tree 
consider expression id id non compositional derivation tree id int id int construct tree id id id id id id id int id int explanation tree completely syntax directed type inference tree compositional 
polymorphic environment longer needed 
collapse trivial inference steps definitions single equation 
typing data constructor leaf tree may useful put definition data type typing tree implicitly declares type data constructor 
copying tree definition polymorphic variable waste space 
share subtrees construct acyclic explanation graph explanation tree 
sharing useful tell programmer navigating explanation graph visited certain subgraph coming di erent point polymorphic variable 

navigation graph defined graph compositional inference step meaningful 
practice programmer interested fraction inference steps explanation graph 
programmer understands typings best interactively navigating graph 
level program fragments 
type checking example program section gives error message type error xs init xs expressions xs init xs types xs typings subexpressions surprising 
xs list lists left subexpression times nested list right 
just list arbitrary elements 
central point locating errors type xs typings subexpressions xs init xs may general type intend xs 
intended types instance types typings 
fact case clear indication error 
ask explanation typing expression xs type xs expressions xs types xs typing intended xs typing xs 
demand explanation expression xs type xs expressions xs types xs intend function type instance function type definition lhs rhs xs head reverse xs types xs left hand side equation correct type xs typing right hand side contradicts intentions 
level polymorphic variables 
asking explanations lead source error 
unfortunately search process long 
speed search 
ask type explanations terms polymorphic variables traversing explanation graph skip inference steps program fragments polymorphic variables 
quickly locate erroneous definition 
start type error type error xs init xs init intend types polymorphic functions general 
ask explanation head reverse type head intended type reverse 
ask explanation type reverse type polymorphic variable correct 
error definition reverse 
determine exact location error switch explanations level program fragments reverse equation 
xs 
reverse expected type reverse instance type typing equation instance type typing second equation 
ask second typing equation 
xs 
reverse lhs rhs reverse xs reverse xs types reverse xs second typing list 
intention ask expression reverse xs type reverse xs expressions reverse xs types reverse xs typings reasonable 
located error expression reverse xs wrong 
comparing intentions definition reverse typings realise correct expression reverse xs 
navigation di erent levels enables avoid unnecessary detail quickly reach source type error 
usually start high level regarding polymorphic functions move individual inference steps program fragment level 
conceivable finer level shows unification process type inference step stages 

algorithmic debugging problem type checker notices type inconsistencies far sources errors reminds similar problem run time errors usually observed far source 
algorithmic debugging introduced shapiro diagnose wrong missing answers prolog 
algorithmic debugging successfully applied locate sources run time errors functional languages 
principle algorithmic debugging linked run time errors 
quite clear algorithmic debugging applied propositions evaluation judgements type judgements defined compositional tree acyclic graph 
tree node proposition correct erroneous 
node source error proposition erroneous propositions children correct 
algorithmic debugging consists constructing tree erroneous root observe erroneous behaviour locating tree source error 
determine node proposition erroneous oracle 
usually oracle programmer asked questions validity propositions 
example session user input italics type error xs init xs intended type instance 
head intended type instance 
reverse intended type instance 
intended type instance 
point system knows source error definition reverse starts asking typings fragments definition 
reverse intended type instance 
reverse intended type instance 
system know answer question third question 
reverse xs reverse xs intended types instance 
note equal type variables separate types instantiated equally obtain intended types 
reverse xs reverse xs intended types instance 
reverse xs reverse xs intended types instance 
error located 
wrong expression reverse xs system assumes typing single variable correct 
probably ask types data constructors assuming type definitions correct 
useful common practice algorithmic debugging programmer declare set variables correct trusted example variables defined standard libraries 
reduces number questions 
reduce number questions feasible programmer just answering indicates part type meet intentions 
answer question reverse intended types instance 
programmer may indicate inner list argument type erroneous 
second equation definition reverse erroneous system skip question reverse intended type instance 
similarly programmer indicate occurrences type variable conflict intentions instantiating occurrences di erently 
questions algorithmic debugging shorter explanations typings 
algorithmic debugging leads source error programmer having understand typings inferred 
hand programmer want understand typings 
furthermore practice easier locate erroneous typing set typings state typing instance intended 
believe combination algorithmic debugging free navigation explanations type inference steps desirable 
practical experience needed determine exactly programmer explanation tree ectively 

implementation built prototype type explanation debugging tool 
program language defined section constructs type explanation graph case untypable program root graph type error message 
tool simple textual user interface enables navigation explanation graph various ways 
prototype tested examples refined ideas 
examples obtained output prototype 
prototype written haskell mark jones type checker core haskell 
replace actual type checking algorithm type checking algorithm jones type checker provides framework useful extend prototype handle haskell class system 
development prototype concentrated quick development ease modification explore ideas 
return cient 
main ciency issue practical tool space required explanation graph 
graph huge 
need constructed full constructed small pieces needed 
type checker may store typings polymorphic variables 
programmer requires explanation program fragment fragment type checked part explanation graph constructed 
note type checking algorithm principal monomorphic typings requires typings polymorphic variables scope type check program fragment 
improved implementation type checking algorithm probably cient implementation milner algorithm 
algorithm introduces type variables performs unifications 
furthermore construction explanation tree type variables implemented mutable variables cient substitution type variables appear explanation graph 
combination algorithm algorithm possible 
type conflict top level definition 
may erroneous definition type checked algorithm 

related people investigated methods improving understanding type errors 
saw need type checking algorithm di erent bernstein stark type checking algorithm similar defines type inference trees compositional post processing 
basically algorithm determines type occurrence variable 
types unified matched case polymorphic variable binding occurrence variable 
system enables programmer obtain types subexpressions authors take advantage compositionality 
large number types single variable types especially typings hard understand 
simon huch developed variation type checking algorithm reduces problem algorithm collects types monomorphic variables 
realised importance compositionality typings 
yang outlines similar algorithm 
suggests combining algorithm passes type information downward traversing expression 
lee yi show finds type conflicts earlier 
defines unification substitutions avoid left right bias 
walz johnson apply maximum flow technique set type equations determine source error 
wand modifies unification algorithm keep track type variable program fragment forces instantiation 
duggan bent improve wand method 
haynes related method 
possible transfer approaches type system guide reduce number questions algorithmic debugging 
people note importance interactive tool 
developed tool small functional language interactively explains step algorithm 
outlines design interactive type error explanation system wand method 
simon huch developed tool interactively viewing types subexpressions context 
defines graph type information generalises approaches wand bernstein stark yang michaelson investigate psychological aspects explaining type errors 
yang michaelson trinder wells manifesto properties type error reporting system 
think system properties 

summary analysed problem understanding types type errors identified compositionality key generating explanations 
tree principal types compositional 
tree principal typings compositional 
hindley milner type system expression principal typing noticed mitchell type algorithm ptl implicitly defines type system principal monomorphic typings 
type inference tree type system construct compositional acyclic type explanation graph 
inference step graph uniquely determined premises understood 
explicit quantifier generic non generic type variables unnecessary 
demonstrated interactive navigation explanation graph assists understanding types type errors algorithmic debugging explanation graph semi automatically locate source type errors 
experiments prototype tool encouraging 
tool needs better user interface 
improve orientation explanation graph envision tool show explanations typings window source program relevant program fragments highlighted second window 
programmer free mark program fragment ask typing 
mouse pointer ease marking erroneous parts types 
polymorphism haskell class system type errors worse 
just view hugs error message tiny expression print div error illegal haskell class constraint inferred type expression print div type show integral io currently working extending prototype handle haskell class system 
extension explanation graph classes appears straightforward 
type systems various kinds program analysis developed 
speculate explanation graphs similar constructed systems 
graph may basis showing inferred information developer analysis programmer 
navigation algorithmic debugging tool type explanation graph magic wand turns problems types white smoke 
claim substantially helps understand types find cause type errors 
simon thompson axel simon frank huch colin runciman anonymous referees 


explaining type errors polymorphic languages 
acm 
bernstein stark 
debugging type errors 
technical report stony brook 
haynes 
diagnosis ill typed programs 
tr indiana university 
duggan bent 
explaining type inference 
science computer programming 
fritzson kamkar 
generalized algorithmic debugging testing 
acm dec 
jim 
principal typings 
popl pages 
acm 
jones 
typing haskell haskell 
proceedings haskell workshop pages 
universiteit utrecht uu cs 
lee yi 
proofs folklore polymorphic type inference algorithm 
acm toplas july 

unification substitutions type inference 
ifl lncs pages 

generalising techniques type debugging 
trends functional programming chapter 
intellect 
milner 
theory type polymorphism programming 
journal computer system sciences dec 
mitchell 
foundations programming languages 
mit press 
naish 
declarative debugging scheme 
journal functional logic programming 
nielson nielson hankin 
principles program analysis 
springer 
nilsson 
declarative debugging lazy functional languages 
phd thesis linkoping sweden may 
peyton jones hughes haskell non strict purely functional language 
www haskell org feb 

finding source type errors interactively 
proceedings el pages 
university goteborg chalmers university technology 
pmg report 
shapiro 
algorithmic program debugging 
mit press 
simon huch 
tool understanding type errors 
draft proc 
ifl pages 
rwth aachen 
aib 

explanation polymorphic type checker standard ml 
master thesis heriot watt university edinburgh scotland 
walz johnson 
maximum flow approach anomaly isolation unification incremental type inference 
popl pages 
acm 
wand 
finding source type errors 
popl pages 
acm 
yan michaelson trinder wells 
improved type error reporting 
proc 
ifl pages 
rwth aachen 
aib 
yang 
explaining type errors finding source type conflict 
trends functional programming chapter 
intellect 
yang michaelson 
visualisation polymorphic type checking 
journal functional programming 
yang michaelson trinder 
people check polymorphic types 
proceedings th workshop psychology programming pages 

