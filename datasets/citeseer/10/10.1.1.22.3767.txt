garp mips processor reconfigurable coprocessor typical reconfigurable machines exhibit shortcomings ideal general 
garp architecture combines reconfigurable hardware standard mips processor die retain better features 
novel aspects architecture prototype software environment preliminary performance results 
compared ultrasparc garp similar technology achieve speedups ranging factor high factor useful applications 
years reconfigurable hardware usually guise field programmable gate arrays fpgas touted new better means performing computation 
promoters argue fpgas create fast application specific circuits problem 
impressive speedups documented number tasks including dna sequence matching textual pattern searching rsa encryption name just 
despite successes computer built fpgas overcome obstacles fpga machines rarely large encode entire interesting programs 
smaller configurations handling different pieces program swapped time 
configuration time expensive configuration briefly discarded 
real programs code repeated worth loading fpga 
circuit constructed fpga efficient circuit dedicated hardware 
standard functions multiplications floating point operations big slow fpga compared counterparts ordinary processors 
problems worth solving fpgas usually involve data kept fpgas 
standard model exists attaching external memory fpgas 
fpga machines typically include ad hoc memory systems designed specifically application envisaged machine 
supported part darpa dabt onr nsf cda 
authors mail addresses cs berkeley edu cs berkeley edu 
john hauser john wawrzynek university california berkeley instruction cache standard processor memory data cache reconfigurable array basic garp block diagram 
wide acceptance marketplace requires binary compatibility range implementations 
current crop fpgas hand reprogrammed new chip version fpga family 
address concerns various researchers proposed building machine tightly couples reconfigurable hardware conventional microprocessor 
organization hybrid remains open topic 
outline candidate hybrid architecture call garp fpga recast slave computational unit located die processor 
reconfigurable hardware speed main processor takes care computation 
fig 
shows organization machine highest level 
garp reconfigurable hardware goes name reconfigurable array 
garp designed fit ordinary processing environment includes structured programs libraries context switches virtual memory multiple users 
main thread control program managed processor fact programs need reconfigurable hardware 
expected certain loops subroutines programs switch temporarily reconfigurable array obtain speedup 
garp loading execution configurations reconfigurable array control program running main processor 
garp external storage accessible reconfigurable array giving array access standard memory hierarchy main processor 
provides immediate memory consistency array processor 
furthermore garp defined support strict binary compatibility implementations reconfigurable control block row extra logic blocks msb logic blocks row logic blocks bits aligned processor data word extra logic lsb blocks memory buses array organization 
addition memory buses wire network carries signals array blocks 
bit adder bit comparator bit word alignment memory bus bit logical operation bitwise typical natural layouts multi bit functions 
hardware 
details array architecture sections followed overview programming environment look speedups real applications 
garp architecture garp main processor executes mips ii instruction set extended garp 
popular processor mips common basis research university community 
garp reconfigurable array composed entities called blocks fig 

block row known control block 
rest blocks array logic blocks correspond roughly clbs xilinx series 
garp architecture fixes number columns blocks 
number rows implementation specific expected 
architecture defined number rows grow upward compatible fashion 
basic quantum data array bits 
logic blocks operate values bit units wires arranged pairs transmit bit quantities 
operations complete manual available web cs berkeley edu projects brass garp html 
bit quantities generally require logic blocks 
functions naturally laid array rows fig 

logic blocks row space row operation bits plus logic blocks left right overflow checking rounding control functions wider data sizes needed 
memory buses run vertically rows moving information array 
array execution memory buses data transfers memory main processor 
memory accesses transfers restricted central portion memory bus corresponding middle logic blocks row 
loading configurations saving restoring array state entire width memory buses 
memory buses available moving data array blocks 
conventional wire network provides interconnection array 
wires various lengths run orthogonally vertically horizontally 
vertical wires communicate blocks column horizontal wires connect blocks adjacent rows 
fpga designs connections wire logic block 
logic block includes resources potentially making wire wire connection independent obligations 
loading execution configurations control main processor 
instructions added mips ii instruction set purpose including ones allow processor move data array processor registers 
individual configuration covers number complete rows array may total number physical rows array 
distributed array cache configurations programs quickly switch configurations cost reloading memory time 
traditional memory caches size management configuration cache transparent programs 
data registers array latched synchronously array clock frequency fixed implementation 
relationship array clock main processor clock required intended clocks 
clock counter governs array execution 
clock counter nonzero decremented array clock cycle 
clock counter zero updates state array stalled effectively stopping array 
copies array main processor may modify array state 
main processor sets array clock counter nonzero array execute specific number array clock steps 
control blocks row serve array outside world 
things control blocks interrupt main processor initiate data memory accesses array 
division array rows simplify array management technique reported dynamic instruction set computer disc 
garp resembles disc way multi bit operations naturally oriented rows global buses run orthogonally rows bringing values array 
shifts memory bus memory bus carry clocked register logical arithmetic function dreg vout hout clocked register crossbar crossbar crossbar crossbar table lookup 
input table lookup horizontal wires shifts carry shift optional shift invert shift carry shift optional shift invert shift shift select variable shift 
simplified logic block schematic 
shift shift principal logic block functions 
lookup tables simultaneously indexed twice get single bit results 
see text 
optional shift invert hout shift optional shift invert shift select shift shift optional shift invert select 
shift optional shift shift invert shift carry optional shift invert propagate carry triple add 
input table lookup optional shift invert carry save addition sum generate result function carry chain input table lookup shift shift shift shift shift carry carry generate generate propagate propagate generate generate propagate propagate carry chain carry chain box spread row 
compare fig 

logical arithmetic function clocked register memory bus register register dreg dreg logical arithmetic function logic block ord inputs taken internal registers 
array logic blocks logic block array implement function bit inputs 
recall basic data quantum bits 
operations data wider bits formed adjoining logic blocks row fig 

construction multi bit adders major functions aided hardware invoked special logic block modes 
fig 
shows main data paths logic block 
bit inputs taken adjacent wires derive outputs 
output calculated direct copy input 
output value optionally buffered register bit outputs driven pairs wires leading logic blocks 
logic block registers read written memory buses 
path logic block allows wire wire connection independent function calculated logic block 
principal logic block functions modes illustrated fig 

modes implement arbitrary input bitwise logical function variable shift bits way select multiplexor function input add subtract comparison operation 
lookup table fig 
performs exact function separately high low bits operands 
example table lookup mode fig 
bit lookup table specifies arbitrary input logical function function independently applied high low bits inputs generate high low bits result 
effect perform arbitrary logical function bitwise bit wide inputs 
decision bits wide assumption large fraction configurations taken multi bit operations configured identically bit 
doubling bits size configurations time required load configurations space taken die store reduced cost loss flexibility 
support fast bit wide additions row includes fast carry chain box spread logic blocks row shown fig 

carry chain fast able perform full sized addition array clock cycle 
compared typical fpgas garp expends hardware accelerating operations adds variable shifts 
fact row garp array approximates conventional alu 
array die area typically going inter block wiring configuration storage incremental area cost including special hardware necessarily high think 
cost paid back configuration uses special modes faster needs fewer logic blocks result 
addition adjacent wire inputs option connecting register inside logic block 
feature enables number useful paths logic block fig 
illustrates examples 
array wires vertical horizontal wires exist array moving data logic blocks 
array wires grouped pairs carry bit quantities 
pair wires driven single logic block read simultaneously logic blocks spanned wires 
wire network passive value jump wire passing logic block 
fig 
illustrates pattern vertical wires single column rows fig 
shows horizontal wires rows 
horizontal vertical wires different patterns optimized different purposes 
shorter horizontal wires tailored multi bit shifts row vertical wires oriented connecting functional units laid horizontally 
long horizontal wires typically broadcast control signals logic blocks single multi bit operation 
driver wire fixed configuration changed loading new configuration 
configurations hardware loaded ensure wire driver 
configurations failing test loaded 
array timing commercial fpgas usually specify precise delay times array components 
development task tools human designer ensure signal path exceeds maximum allowed delay 
practice relationships different components delay times vary fpga implementation 
harder pattern vertical wires wires single column rows 
line drawn represents pair wires bits 
horizontal wires wires wires rows 
line represents pair wires bits 
multiplier rows cycles bits bit constant bits bits bit constant bits bits bit constant bits bits bits bits bits bits bits statistics multipliers synthesized array 
predict speeds versions fpga family execute configuration 
specify component delays precise times change processor generation delays garp defined terms fit array clock cycle 
sequences permitted short wire simple function short wire simple function long wire function carry chain short wire function 
sequence assumed require multiple clock cycles 
short wires include shorter horizontal wires plus vertical wires certain length 
simple function direct table lookup fig 
traversal independent path logic block fig 

cycle computed value may latched logic block register affecting timing 
multipliers fpgas multipliers reconfigurable array built smaller parts typically selectors adders 
importance multiplication impact design garp array 
ability add operands triple add mode fig 
exists support fast multiplication purpose 
special variation select mode fig 
easier choose partial products 
fig 
lists area time delays various multipliers synthesized array 
multiplies constants especially dense configured hard wired shifts adds horizontal wires rows triple add mode 
processor control array execution main processor number instructions controlling array 
important listed table fig 

include instructions loading configurations copying data array processor registers manipulating array clock counter saving restoring array state context switches 
mentioned earlier clock counter controls array execution 
clock counter zero array stopped 
setting clock counter positive main processor array execute specific number clock cycles 
clock counter decrements array clock cycle reaching zero 
avoid restricting main processor implementation garp architecture specify main processor instructions execute array clock cycle 
keep processor array synchronized new processor instructions fig 
wait array clock counter reach zero performing function 
simplest example main processor needs read result computation performed array 
setting array clock counter proper value processor execute instruction time 
array done wait array clock counter zero attempting copy result processor 
instruction interlock 
description reg load switch configuration address reg 
reg array row reg count copy reg value array row reg set array clock counter count 
reg array row reg count copy array row reg value reg set array clock counter count 
reg increase array clock counter value reg 
reg copy array clock counter reg array zeroing clock counter 
reg invalidate cache copy configuration address reg 
reg array control reg copy value array control register array control reg reg 
reg save array data state memory address reg 
reg restore previously saved data state memory address reg 
basic processor instructions controlling reconfigurable array 
interlock 
column indicates instruction stalls waiting array clock counter run zero 
instructions interrupted stalled 
instructions intended context switches 
instructions copy middle logic blocks row 
recall fig 
additional instructions shown give processor access logic blocks edges array possible send values registers array step 
con gurations block array requires exactly configuration bits bytes specify sources inputs function block wires driven outputs 
configuration bits needed array wires configuration rows requires exactly bytes 
assuming bit path external memory loading full row configuration takes sequential memory accesses 
typical processor external bus need complete load 
useful configurations require entire resources array garp allows partial array configurations 
smallest configuration row configuration fill exactly number contiguous rows 
configuration loaded uses entire array rows unused automatically inactive 
distributed array cache configurations similar ordinary instruction cache 
size cache implementation dependent 
reasonable garp deep cache logic block sufficient hold row configurations sixteen row configurations combination size 
note order maximize cache utilization partial configurations necessarily loaded physical row array 
hardware translates row numbers programs see configurations starting logical row 
exactly partial configurations placed array dependent pattern vertical wires fig 

vertical wires garp follow repeated recursive pattern partial configurations loaded various offsets 
configurations active time matter array rows left unused small configuration 
analogous thread control program counter main processor 
independently written configurations active simultaneously way guarantee interfere vertical wires 
program special need making configuration active time easily load larger configuration containing smaller ones 
array access memory memory accesses initiated array direct processor intervention 
memory accesses proceed phases phase memory access request second data transfer 
writes phases may occur array cycle 
reads memory request necessarily precedes data transfer 
restrictions phases pipelined new memory access initiated cycle 
array memory accesses controlled control blocks edge array 
parallel memory buses fig 
address bus runs vertically rows 
control signals requesting memory accesses generated array logic blocks forwarded control blocks memory system 
memory address read address bus registers selected row 
data transferred memory bus selected row usually different row supplied address 
contiguous bit words read written request memory buses 
array sees memory hierarchy main processor 
misses chip data cache cause array execution stalled data fetched external memory 
reduce cache misses array perform prefetching accesses merely load chip data cache 
page faults due array memory possible cause faulting process suspended page fault serviced 
contrast commercial fpgas garp array contains writable storage bits logic block 
conscious design decision intended primarily limit time needed context switches running processes 
existing chip data cache provides ample temporary storage limited bandwidth memory buses theory bottleneck 
addition mechanism demand accesses just described array available memory queues performing read write multiple data streams 
input streams output stream supported 
streams read written cycle memory buses concurrently 
memory queues programmed main processor configuration executed 
standard preprocessor standard compiler modified mips assembler standard linker executable garp simulator ga configurator config garp programming environment 
new modified tools highlighted 
software environment software tools created possible write programs garp simulate approximate clock cycle accuracy 
software path summarized fig 

tools substantially new configurator garp simulator 
garp assembler merely modified mips assembler 
array configuration coded ga file simple textual language 
source fed program called configurator generate representation configuration collection bits 
simplicity configurator creates text file character array initializer program 
need assembly language programming invoke garp instructions interface reconfigurable array 
gnu compiler gcc accomplished inline asm statements 
con configurator accepts human readable description configuration converts binary representation processor 
input language configurator akin assembly language high level language typical fpga netlist 
data operations placed explicitly rows columns programmer 
configuration defined collection rows row containing logic blocks specific columns 
basic syntax row optional row name column number logic block settings feel permissible logic block settings probably easiest impart example 
specifies complete configuration adding bit values columns middle columns array row row drive registers wires 
function vout drive registers wires 
dreg hout row row add registers values row latch result registers 
dreg add carry sum sum result configuration values registers row registers row added sum stored registers row 
column significant rightmost columns 
row names period distinguish syntactically 
field second row specifies input logic blocks come row labeled case row 
obtain connection vertical wires programmer merely names source needed logic block input 
responsibility configurator choose specific vertical wires making connections 
inputs row example taken vertical wires row 
different syntax hand indicates inputs read row horizontal wires rows 
example output configurator text suitable initializing array 
course majority output elided 
linking con guration program reconfigurable array time consuming parts program usefully employed 
remainder program written compiled ordinary compiler executed main processor reconfigurable array 
configuration linked ordinary program 
continuing example configurator output file called add config code char config add include add config suffices initialize array config add desired configuration bits 
configuration accessible program loaded activated array 
configuration invoked new garp specific instructions unknown compiler assembly language programming required 
assembly code loads executes example refer back fig 
add la config add contains pointer config add array 
step array cycles 
ra return subroutine 
refer ordinary mips registers la mips load address instruction 
symbols indicate registers array row row 
mips subroutine calling convention passes subroutine arguments registers subroutine return value passed back 
assembly language stub program add values reconfigurable array executing ordinary subroutine 
subroutine loads proper configuration array switches array configuration cache 
copies arguments array registers steps array cycles perform addition reads sum back returns 
course example involves overhead 
practice array substantial just easily done main processor 
simulator complete hardware implementation garp exist garp programs executed simulator 
simulator loads executes standard mips executables 
operating system calls forwarded environment simulator running 
outside operating system calls simulator best count true clock cycles 
interlocks stall instructions noticed stall cycles counted 
memory caches modeled cache stalls added 
simulator assumes main processor simple single issue mips 
simulator cycle cycle identical actual implementation cycle counts realistic 
preliminary evaluation attempt evaluate garp architecture compared hypothetical garp sun ultrasparc 
ultrasparc way superscalar bit processor kb chip instruction data caches 
processor runs cache prefetch grouping integer unit floating point graphics unit cache dmmu ultrasparc 
cache integer unit reconfigurable array cache dmmu hypothetical garp 
floorplan ultrasparc die hypothetical garp die constructed technology 
mhz mhz benchmark sparc garp ratio des encrypt mb dither image ms ms sort records benchmark results 
times garp obtained program simulation 
mhz implemented metal layer process die size mm create hypothetical garp removed sparc superscalar integer floating point processing units ultrasparc die replaced mips processor extended garp reconfigurable array 
new processor single issue bit mips ii smaller powerful ultrasparc processing unit 
fig 
shows die actual ultrasparc hypothetical garp derived 
surgery essentially puts garp top ultrasparc memory system 
garp simulator course retargeted model sparc caches closely possible 
size assumed reconfigurable array fig 
draws experience tentative vlsi array implementation 
assumed conservatively achieve sparc clock rate garp array clock 
restricts garp clock mhz versus sparc mhz 
time taken processors benchmarks tabulated fig 

summaries benchmarks sections 
results shown case best able attain processor 
approximations involved garp numbers unfortunately considered rough easy see garp holds advantage problems 
data encryption standard des important encryption methods years data encryption standard des 
des application reconfigurable hardware normal processors trouble implementing efficiently 
des encrypts bits data time 
bits run obfuscation loop times loop des spends time 
bits divided bit quantities steps repeated see fig 
key bits bits bits bits bits bits bits bits bits box table box table box table box table bits bits box table box bit permutation box table box table box table iteration inner loop des 
symbols indicate exclusive operations 

extract bit subsequences ri exclusive bits encryption key 

apply resulting bit values index box table bit values 
box unique approximates random function 

perform permutation bits box results 
permutation 

exclusive permuted result older ri form new ri 
encrypted bit output formed 
software implementations des invariably implement boxes table lookups requiring read memory box evaluation 
told table lookup memory reads needed bits encrypted 
hand software implementations avoid final bit permutation pre permuting box table entries 
table entries full bits size box outputs need ed combined ri 
software sufficiently large fpga implement algorithm directly 
box table lookups bit permutations done quickly parallel external memory 
garp cycles inner loop iteration 
simulations indicate mhz garp times faster mhz ultrasparc task 
key bits floyd steinberg error diffusion 
image dithered top bottom scan order 
replacing pixel original color closest available color results color error error gets pushed uncommitted neighboring pixels adjusting original colors pixels 
process repeats pixel right 
image dithering benchmark considered dithering image fixed palette fewer colors 
input image stores bytes pixel total levels red green blue pixel 
target palette benchmark called web palette web browsers netscape navigator 
palette contains colors orthogonal arrangement levels red green blue 
dither palette employed floyd steinberg error diffusion essentially standard algorithm task 
dithering image proceeds top bottom scan line order 
dithering pixel involves steps 
find color target palette closest pixel color 

find color error introduced color distribute error neighboring pixels adjusting neighbors colors 
fig 
shows pixel color error distributed diffused neighbors floyd steinberg algorithm 
case finding closest target color matter reducing source image levels red green blue levels target palette 
accomplished dividing color component rounding 
calculating error requires multiplying result back subtracting 
distributing error involves scales additions neighboring pixels 
save errors diffused single pixel multiple neighbors added added destination pixel 
application garp times faster ultrasparc 
garp advantage comes ability manipulate bit quantities 
garp ultrasparc division done multiplying approximation 
multiplies implemented terms shifts adds garp fairly efficiently 
sorting third benchmark examined sorting array records record key value pair 
sort orders records bit keys 
corresponding bit values interpreted correctly permuted keys 
sparc fastest sort pure quicksort estimates close half time goes memory accesses 
records quicksort general log partitioning passes entire array 
case number partitioning passes clearly 
garp reduced memory traffic doing merge sort merges streams time 
merge takes sorted streams input outputs single sorted stream times long 
cuts number passes needed log 
odd number helps reduce cache conflicts 
garp mhz able perform complete sort roughly twice fast mhz sparc 
efforts apply sophistication sparc done quicksort machine 
time introduced additional instructions ultimately saved 
ongoing results previous section taken preliminary garp implementation 
priority better resolve garp performance completing vlsi implementation garp reconfigurable array 
just scratched surface potential applications 
areas include cryptography compression pattern matching signal processing graphics 
different tack researcher group tim callahan examining potential performance gains having compiler automatically map important program loops garp array 
comparisons possible uses silicon area vector unit 
reconfigurable hardware best solution problems characterize limitations advantages 
garp extension existing computing practice garp architecture better chance part mainstream fpga machines 
results far suggest garp processor substantial advantage standard risc processors applications 
believe hypothetical garp outlined easily built today larger arrays possible near 
silicon densities continue grow historically reconfigurable hardware form may inevitable component processors 
acknowledgments specially tim callahan william chang andr dehon comments concerning conversations topics contained 
peter athanas harvey silverman processor reconfiguration instruction set metamorphosis computer vol 
pp 
mar 
andr dehon dpga coupled microprocessors commodity ics early st century proceedings ieee workshop fpgas custom computing machines apr pp 

andr dehon reconfigurable architectures general purpose computing ph thesis massachusetts institute technology 
maya gokhale william holmes andrew sara lucas ronald douglas building highly parallel programmable logic array computer vol 
pp 
jan 
eric david run time reconfiguration fpga scanning genomic databases proceedings ieee symposium fpgas custom computing machines apr pp 

bernard gunther george milne narasimhan assessing document relevance runtime reconfigurable machines proceedings ieee symposium fpgas custom computing machines apr pp 

jean vuillemin patrice bertin didier mark shand herv touati philippe programmable active memories reconfigurable systems come age ieee transactions vlsi vol 
mar 
rahul michael smith high performance microarchitecture functional units proceedings th annual international symposium microarchitecture nov pp 

ralph wittig paul chow fpga processor reconfigurable logic proceedings ieee symposium fpgas custom computing machines apr pp 

xilinx programmable logic data book 
michael brad hutchings dynamic instruction set computer proceedings ieee symposium fpgas custom computing machines apr pp 

bruce schneier applied cryptography protocols algorithms source code nd edition john wiley sons 
robert digital mit press cambridge massachusetts 
