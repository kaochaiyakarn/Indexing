verification temporal properties patrice godefroid university liege belgium gerard holzmann bell laboratories murray hill new jersey new algorithm solving model checking problem linear time temporal logic 
algorithm viewed combination existing algorithms plus new state representation technique introduced 
new algorithm simpler traditional algorithm tarjan check maximal strongly connected components directed graph classical algorithm model checking 
time complexity tarjan algorithm requires memory 
algorithm compatible important complexity management techniques bit state hashing state space caching 
proc 
ifip symp 
protocol specification testing verification 
june liege belgium 
january verification temporal properties patrice godefroid university liege belgium gerard holzmann bell laboratories murray hill new jersey 
techniques verifying safety liveness properties concurrent systems fly search algorithms known quite time 
verification safety properties relies search reachable bad states 
verification liveness properties requires search reachable bad cycles 
assumed validation liveness properties required implementation algorithm detection strongly connected components reachability graph 
tarjan standard algorithm ahu perform cost linear size reachability graph implemented verification systems support liveness properties 
construction strongly connected components compatible range validation techniques reduce memory requirements fly verification algorithms 
examples techniques state space caching techniques studied instance ghp bit state hashing technique hol mainstream verification tools today 
years new algorithms published solve part problem 
algorithm proposed avoids detection strongly connected components performing nested depth searches 
algorithm check cycles pass state marked accepting state 
hol algorithm implemented facilitate detection called acceptance cycles promela validation models validator spin 
second algorithm published hol similarly avoids detection strongly connected components definition state demon automaton controls separate searches standard search truncated search cycles explained detail 
second algorithm check cycles pass states marked progress states 
context spin fast detection called non progress cycles dual acceptance cycles 
algorithms proves necessary construct maximal strongly connected components sufficient show exist produce single traversal strongly connected component demonstrate existence user 
cost algorithms time memory linear size reachability graph twice cost standard reachability analysis algorithm 
discuss additional improvements 
show algorithm simplified combined hol 
show resulting algorithm implemented smaller space complexity thought possible new state representation technique 
doubling memory requirements worst new algorithm requires bits overhead state stored 
protocols practical significance require tens hundreds bytes memory state stored alter space requirements significant way 
show despite simplicity algorithm described solve model checking problem verify temporal property required fairness january assumption 
focuses verification temporal logic formulae specifically detection acceptance cycles 
uchi automata algorithm propose independently model checking detection acceptance cycles general 
section give formal framework verification temporal properties reachability analyses 
discuss algorithms hol describe combined 
section continues discussion new general storage technique propose named hybrid storage 
section concludes discussion related 

verification temporal properties 
representing programs consider program describing system interacting concurrent processes processes communicate instance shared variables communication channels 
assume program describes finite state system 
words assume possible compute finite state automaton called labeled transition system represents behavior processes combined 
formally tuple alphabet finite set states transition relation initial state 
computed simulating possible sequences actions system perform initial state 
set actions code program set states system reach initial state transitions correspond transitions states system perform executing single action 
computation program sequence states 
exists transitions 
states intermediate states reached execution sequence actions 
system initial state 
initially execute noncritical section go go loop go critical section go execute noncritical section go go loop go critical section go dekker algorithm consider known dekker algorithm dij mutual exclusion reproduced 
january parallel processes shared variable private boolean variables private variable set process owning examined 
variable set signal intention enter critical section tests enter critical section checking proceeds immediately critical section 
conflict 
conflict resolved value variable withdraws setting waits turn comes 
waits withdraws enters critical section critical section sets variable indicate time potential conflict resolved favor sets just exiting critical section 
assume running asynchronously different processors different speeds read write instructions involving shared variables executed atomic operations 
automaton corresponding concurrent program reachable states transitions 

specifying temporal properties representing temporal properties linear time propositional temporal logic mp 
lineartime temporal logic specifying properties infinite sequences states 
propositions logic correspond boolean conditions variables process states program 
formulas constructed propositions classical boolean connectives 
temporal operators eventually semantics defined usual mp 
formulas interpreted infinite sequences 
states particular infinite sequence states formula satisfied falsified sequence 
informally holds state holds successor states sequence formula interpreted holds holds successor state holds holds state holds holds successor states state holds 
consider formula pq 
expresses property state proposition holds coincides followed state proposition holds 
infinite sequences states meet requirement satisfy formula 

verification problem verification problem consider 
concurrent program linear time temporal logic formula check infinite computations satisfy known modelchecking problem 
solve problem assumption need formula linear temporal logic possible build 
uchi automaton accepts exactly infinite words satisfying temporal formula buc 
formally 
uchi automaton tuple alphabet set states dsss transition relation starting state fs set accepting states 

uchi automaton classical automaton defined section augmented set accepting states 

uchi automata define languages words functions ordinal alphabet intuitively word accepted 
uchi automaton automaton infinite execution intersects set infinitely 
formally define run word 
sequence 
function 
run 
accepting state repeats infinitely state xf infinitely iw word accepted accepting run word january construction 
uchi automaton formula worst case exponential length formula wol tha 
practice formulas short worst case behavior rarely seen 

uchi automaton corresponding pq shows 
uchi automaton accepts infinite words satisfying formula pq sequences states contain state holds holds remainder sequence 
verification procedure vw 
build finite automaton infinite words negation formula resulting automaton accepts sequences states violate 
course provided user negation procedure skipped 
compute product automaton 
uchi automaton 
transition synchronized transition product automaton accepts infinite computations accepted computations violate formula verification completed checking automaton accepts sequences 
empty proven infinite computations satisfy formula consider dekker algorithm 
verify processes say wants enter critical section eventually enters 
property formalized formula 

uchi automaton corresponding 
initial state designated symbol 
accepting state designated double circle 
surprisingly automaton corresponding product dekker algorithm nonempty means exists infinite computation program violating property 
computation moves moves loops infinite computation violates formula reached reached 
note verify properties infinite computations defined viewing restricted type 
uchi automaton set accepting states set states verification procedure consider finite computations program required possible transform finite computations infinite ones letting terminating state repeat forever lp 

specifying fairness assumptions useful verifications formalize specific assumptions context concurrent program executed 
instance concurrent processes executed different processors customary assume processor finite progress enabled operation eventually execute 
finite progress assumption expressed instance dijkstra late sixties dij 
classic finite progress assumption usually defined special case larger class fairness assumptions 
context finite progress defined weak fairness mp fra 
notions fairness formalize specific properties instance process schedulers concurrent systems 
main purpose assumptions exclude computations allowed specific type process scheduler january assumed 
fairness assumptions act filters removing classes infinite behaviors conflict assumptions scheduler behavior 
consider previous example 
showed computation moves moves loops violates property 
assumed running asynchronously different processors different speeds computation violates finite progress weak fairness assumption 
execute transition including looping assuming weak fairness case equivalent assuming process eventually executes transition 

uchi automata corresponding respectively scope discuss various notions fairness studied see instance mp fra 
shown fairness assumptions modeled temporal logic formulas lp 
uchi automata acw 
previous example assumption process eventually executes transition formalized formula denotes fact current transition program performed process possibility add program processes corresponding 
uchi automata 
verification procedure formula remains similar presence fairness assumptions 
fairness assumptions modeled formula verification problem amounts checking infinite computations program satisfy formula done procedure discussed previous section 
fairness assumptions modeled 
uchi automata fair synchronized program product fair computed different way defined previous section time automata nontrivial acceptance conditions see chapter tha verification problem reduces checking emptiness consider dekker algorithm formula 

uchi automaton corresponding formula states transitions 
product automaton empty means formula satisfied program 
note assuming fairness ill advised formal verifications 
fairness filter restrictive erroneous computations eliminated missed verification 
result verification conditional validity fairness assumptions 
instance scheduler system changed proof correctness application protocol relied properties scheduler immediately invalid 
verification rely fairness assumptions stronger 
principle furthermore obligation user prove formally fairness assumptions valid scheduler 
practice hard impossible 
conclude problem proving program satisfies formula assuming notion fairness reduced problem checking emptiness 
uchi automaton note computing checking emptiness done time 

possibility specify acceptance sets process directly program define program product 
uchi automata acw gw 
january 
checking emptiness buchi automata 
previous check 
uchi automaton nonempty check exists cycle viewed graph contains accepting state reachable initial state note necessary consider possible cycles sufficient check contains lest maximal non trivial strongly connected component reachable initial state includes state set searching maximal strongly connected components done tarjan algorithm ahu tar 
algorithm depth search additional computations state encountered search 
see ahu complete presentation algorithm 
algorithm visits reachable states 
time complexity linear size requires storage reachable states randomly accessed memory 
state value variable labels reachable states order visited stored 
tarjan algorithm requires additional stack 
algorithm requires access explicit state information value ensure correctness compatible techniques guarantee preservation information 
bit state hashing technique instance collapses representation states associated information bits memory hol 
state space caching techniques may remove previously visited states completely memory ghp 
fixed amount memory size problems analyzed tarjan algorithm unavoidably smaller handled techniques 
observation triggered development algorithm checking 
uchi automata emptiness compatible bit state hashing method state space caching discipline 
checking emptiness 
uchi automata reduced set reachability problems 
justified fact 
uchi automaton nonempty state xf reachable initial state reachable 
algorithm consists successive depth searches dfs 
purpose dfs determine accepting states reachable orders postorder 
reachable accepting state backtracked search state 
accepting states entered fifo queue 
aim second dfs check accepting states queue accessible 
second dfs starts reached search cycle passes detected error violation property checked reported 
new dfs initiated accepting states checked 
due postorder ordering possible show states visited ith search revisited jth searches consequently searches performed single hash table store states visited 
words searches correspond unique second dfs worst case algorithm visits reachable states twice phase search 
time complexity linear size requires storage reachable states randomly accessed memory 
case error states stack second search correspond bad cycle accepting state counter example complete error path starting initial state produced 
necessary perform third search find path starting initial state leading state second version algorithm 
algorithm away additional queue second stack second hash table 
basic idea perform dfs interleaved way sequentially 
time accepting state backtracked search search phase suspended second search explores accepting state reachable 
case algorithm resumes search look accepting states 
version algorithm requires twice space 
advantage error detected complete counter example immediately january extracted stacks 

algorithm section build improved version second algorithm 
improved version require second stack second hash table 
accomplish algorithm hol solves related problem detection cycles 
non progress cycle cycle contain states marked 
algorithm hol inspects distinct state spaces regular second transitions progress states disabled 
switches state space means state demon added system 
state demon process determines state space search currently operates 
combine ideas hol obtain new algorithm checking emptiness 
uchi automata 
add state demon process system verified hol initially magic demon magic state demon process defines mode search operates 
initial state demon process variable magic equal 
second final state demon immediately assignment magic equal 
assume demon process switch initial state final state system accepting state enabled transitions explored 
switched demon process go back 
effect magic zero normal depth search performed corresponding dfs 
magic second phase search entered check accepting state reachable 
january initialize stack empty empty search enter push stack dfs dfs top stack enabled succ execution magic halt return error enter push stack dfs magic sf magic execution demon enter push stack dfs pop stack magic search description new algorithm 
consists simple modification classical depth search 
lines number removed code classical dfs remains 
bit magic added representation state store current state demon process 
magic denotes value magic state magic search performed usual 
accepting state sf backtracked line magic set line second search initiated line determine accepting state description stored additional variable line reachable 
case detected line error reported 
correctness proof algorithm straightforward 
theorem exists strongly connected component acceptance state cycle component reported 
proof consider strongly connected component scc accepting state 
accepting state scc entered magic part state space root new search subtree 
reachable part reachable subtree detected line 
case path leading back subtree truncated subtree contains states previously visited intermediate states reached accepting state reachable assumed reachable part scc accepting state scc considered contradicts assumption 
successive nested searches previous section combined new algorithm performed single stack single hash table demon process 
algorithm quite straightforward implement 
error detected states current stack correspond complete infinite computation violating property checked exhibited january user immediately counter example 
time complexity remains unchanged linear size additional bit corresponding value magic stored hash table attached reachable state slightly increases memory requirements 
practice overhead due fact number bits necessary store state usually larger bit hundreds thousands bits necessary represent state 
worst case algorithm store reachable states different possible values magic 
twice number states needs stored tarjan algorithm version algorithm second version 
possible overcome problem new hybrid storage technique introduced section 

hybrid storage 
storage techniques search performed new algorithm states visited stored memory 
various ways reachable states stored 
assume states names name space cardinality corresponds product number possible values individual process states local global variables message channel contents 
number possible names state log bits necessary represent states unambiguously 
storing reachable states requires mem classic nlog bits memory 
classical storage technique conventional reachability analysis algorithms may call logarithmic storage technique 
consider alternative storage technique call linear storage technique 
define correspondence elements name space elements array bits size initially bits set 
ith state encountered exploration ith bit set 
storage technique memory mem linear required state space exploration algorithm mem linear independent number reachable states 
particular determine critical density crit storage methods require amount memory stating mem classic mem linear crit log consequently log linear storage discipline preferable logarithmic storage requires memory 
words linear storage technique suitable high density state spaces 
protocol state spaces usually far critical density linear storage pays 
typically orders magnitude larger number reachable states name space usually large linear storage technique require amount memory 
typically bytes required store state greater bits available today computers 
applicability linear storage discipline limited special cases 
algorithm offers just special case 

hybrid storage discuss storage technique combination logarithmic linear storage called hybrid storage 
assume state unambiguously identified pattern precisely bits 
divide representation state parts length respectively state corresponds unique pair 
call head tail collect states head groups 
states group head differ tail 
exploration store groups states memory individual states logarithmic storage technique 
group consists head length plus bit array length store tails states group 
hybrid storage technique groups bits stored memorize states january visited states bits logarithmic storage method 
overhead bits group stored clearly number groups stored smaller number individual states 
amount memory mem hybrid required storage technique mem hybrid number head matchings search number states head state previously encountered search 
particular partition determine critical proportion crit head matchings hybrid storage technique pays setting mem classic mem hybrid obtains crit log crit hybrid storage requires memory logarithmic storage preferable 
assume log 
crit 
state states head length state previously encountered search hybrid storage preferable logarithmic storage 

application verification temporal properties clearly hybrid storage method pays identify part state description high density place linear storage 
consider algorithm 
product automata divide groups hybrid storage partition 
automata highest density coverage grouped tail linear storage 
choice take states demon process demon representing current state demon process bit magic logarithmic storage store groups bits extra bits representing linear storage area indicating state visited magic magic values magic 
consider example section assume system checked algorithm state requires bytes bits represented 
memory overhead due storage state demon process limited bits reachable state example states visited search modes expected case hybrid storage requires memory logarithmic 
connected graph contains accepting state reachable states guaranteed visited search modes 
memory requirement hybrid storage bits compared bits classical logarithmic storage technique 
possibility include demon additional automata fair included experimental results storage technique table 
state graph corresponding dekker algorithm 
uchi automaton shown 
uchi automaton corresponds negation formula 
table compares logarithmic storage hybrid storage applied algorithm 
number stored states resp 
groups states groups 
size state resp 
group state group representing bytes bits 
column titled memory gives total memory required algorithm store states reached verification property 
compute total sizes rounded integer numbers bytes multiplied number states 
row table gives memory requirements simple exploration combined property 
second row corresponds verification formula logarithmic storage bits added representation state bit represent state states see magic bit represent state demon 
third row corresponds verification formula 
automaton contains states bits added logarithmic storage bits plus bit demon process 
partition logarithmic storage hybrid storage january states state memory groups group memory demon demon table comparison logarithmic hybrid storage hybrid storage technique requires memory formula 
note hybrid storage method quite different orthogonal techniques state compression scheme hgp 
techniques easily combined increase reduction 

comparison new algorithm checking emptiness 
uchi automata features algorithm solve model checking problem linear time temporal logic verification temporal property fairness assumption 
hybrid storage technique memory requirements close conventional state space exploration program eliminating memory overhead required verify temporal property 
algorithm compatible techniques increase scope automated validations bit state hashing state space caching techniques 
algorithm generate complete counter examples case program violate temporal property 
algorithm simple proof correctness implemented relatively minor modification standard depth search 
points new algorithm compares favorably previously known algorithms including tar lp hol 
algorithm added spin protocol validation tool mid hybrid storage method replacing earlier algorithm 
noncommercial users obtain spin system anonymous ftp research att com netlib spin directory 
importance efficient algorithms verification temporal logic formulae need justification 
example growing importance field mention completed pilot verification project named 
main goals project demonstrate feasibility formal verification temporal logic industrial environment 
period years april april team people worked formal verification isdn code ess switch parallel mainstream team people developing conventional design 
verification team modeled high level requirements hundreds temporal logic formulae performed total formal validations sustained rate automated validations month 
main tool validations new version validation tool hp extended algorithms proving liveness properties similar ones discussed 
result effort team able trap prevent hundreds quite subtle high level design errors clearly demonstrating temporal logic verification today feasible fairly large scale industrial applications extremely effective 
author done part visiting bell laboratories 
january 
acw aggarwal courcoubetis wolper adding liveness properties coupled finite state machines 
acm transactions programming languages systems 
ahu aho hopcroft ullman design analysis computer algorithms addison wesley reading 


uchi decision method restricted second order arithmetic proc 
intern 
congr 
logic method philos 
sci pp 
stanford stanford university press 
courcoubetis vardi wolper yannakakis memory efficient algorithms verification temporal properties proc 
nd workshop computer aided verification lncs pp 
june 
dij dijkstra cooperating sequential processes programming languages ed academic press new york 
fra francez fairness springer verlag 
ghp godefroid holzmann state space caching revisited proc 
th workshop computer aided verification montreal june 
gw godefroid wolper partial approach model checking proc 
th ieee symp 
logic computer science pp 
amsterdam july 
hgp holzmann godefroid coverage preserving reduction strategies reachability analysis proc 
th int 
symp 
protocol specification testing verification florida june 
hol holzmann improved protocol reachability analysis technique software practice experience 
hol holzmann design validation computer protocols prentice hall 
hp holzmann patti validating sdl specifications experiment proc 
th int 
symp 
protocol specification testing verification north holland publ june 
lp lichtenstein pnueli checking finite state concurrent programs satisfy linear specification proc 
th acm symp 
principles programming languages pp 
new orleans jan 
mp manna pnueli temporal logic reactive concurrent systems specification springer verlag berlin 
tar tarjan depth search linear graph algorithms siam computing pp 

tha modal logic deductive databases introducing logic approach artificial intelligence wiley 
vw vardi wolper automata theoretic approach automatic program verification proc 
symp 
logic computer science pp 
cambridge june 
wol wolper relation programs computations models temporal logic 
proc 
temporal logic specification lncs pp 

wolper vardi sistla reasoning infinite computation paths proc 
th ieee symp 
foundations computer science pp 
tucson 
january 
