schedulability analysis utilization bounds highly scalable real time services abdelzaher lu department computer science university virginia charlottesville va mail cs virginia edu proliferation high volume time critical web services online trading calls scalable server design allows meeting individual response time guarantees real time transactions 
main challenge honor guarantees despite unpredictability incoming server load 
extremely high volume real time service requests mandates constant time scheduling schedulability analysis algorithms opposed polynomial logarithmic ones number current requests 
major contributions developing architecture theoretical foundations scalable real time servers operating dynamic environments 
derive tight utilization bound schedulability aperiodic tasks requests allows implementing constant time schedulability test server 
demonstrate liu layland schedulable utilization bound ln apply aperiodic tasks prove optimal arrival time independent scheduling policy meet aperiodic task deadlines utilization maintained second show aperiodic deadline monotonic scheduling optimal arrival scheduling policy aperiodic tasks 
result optimally prioritize server requests 
evaluation utilization control loop maintains server utilization bound shows approach effective meeting individual deadlines high performance real time server 
reported motivated timing requirements high performance real time services line trading 
high performance servers may need handle tens thousands requests second 
service real time ensure requests served respective deadlines 
meeting deadline requirements traditionally relied proper scheduling schedulability analysis techniques 
excessive load reported supported part national science foundation ccr ccr 
high performance service puts important limitation complexity scheduling policies schedulability analysis techniques may applied 
extreme real time scheduling run time schedulability analysis take place constant time 
algorithms higher complexity number served requests may scale efficiently high performance server 
current high performance servers run nonreal time operating systems implement edf assume requests classified limited constant number classes 
requests class served fifo order priority level 
call policy arrival time independent priorities independent invocation arrival times 
arrival time independent policies superset fixed priority policies 
analyze fixed priority policies term usually refers periodic task scheduling policies successive invocations task priority 
context aperiodic tasks task invocation semantics inappropriate 
note implementation overhead arrival time independent scheduling policy depends number classes constant design 
overhead constant independent number queued requests 
perspective schedulability analysis constant time processing requirement imposes important limitation 
widely constant time schedulability analysis technique uses utilization bounds determine schedulability 
analysis new incoming requests admitted system utilization bound exceeded 
unfortunately existing utilization bounds assume incoming tasks periodic sporadic minimum interarrival time 
schedulability bounds derived multiframe periodic task model 
contrast service requests high performance server general arrive completely aperiodic fashion 
real time scheduling theory needs new schedulability result extend utilization schedulability conditions aperiodic tasks 
result derived evaluated 
prove utilization bound aperiodic tasks 
optimal arrival time independent scheduling policy admitted arriving tasks schedulable utilization remains bound times 
bound lower liu layland bound periodic tasks 
relaxing task periodicity requirement consider larger set possible task arrival patterns 
minimum utilization pattern larger set smaller minimum utilization subset task arrival patterns periodic liu layland bound 
noted schedulable utilization bounds construction pessimistic 
exceeding bound necessarily entail deadline misses 
provide sufficient schedulability condition merit computationally efficient 
prove aperiodic task arrival patterns utilization remains schedulable ii exists pattern aperiodic task arrivals utilization infinitesimally expect servers tolerate certain percentage deadline misses set utilization target bound 
thorough study relation excess utilization probability deadline misses interesting problem defer 
show evaluation section poisson arrivals deadline misses observed bound sufficiently exceeded 
show percentage missed deadlines increases increasing excess utilization 
bound assumptions regarding task arrival patterns expect pessimistic bursty arrivals 
analogous pessimism bounds derived sporadic task model account periodic arrival pattern worst case 
fortunately high load conditions interested cpu load consistently large improving accuracy bound 
bound perform worse workloads composed occasional task arrivals separated large idle times 
hope results inspire research precise constant time schedulability tests suitable extremely bursty loads 
note real time servers expected serve mix real time non real time traffic 
suggests total server utilization close saturation server naturally meet real time deadlines low overhead arrival time independent scheduling long real time load exceed total capacity 
perspective real time scheduling theory hope open door follow ups improve bound considering characteristics incoming traffic burstiness determining schedulability 
derived bound run time load control 
example feedback control loop prevent utilization exceeding bound satisfying timing requirements 
previous implemented loop apache web server demonstrated maintain server utilization arbitrary overload threshold changing quality served content higher loads utilization reduced serving clients lower quality content 
bound simply replace overload threshold mentioned architecture guarantee meeting timing constraints 
remainder organized follows 
section introduces new task model call acyclic model 
show set aperiodic tasks represented equivalent set acyclic tasks 
utilization bound arrival time independent scheduling acyclic tasks described section 
section evaluates practicality derived bound 
section describes related 
section presents avenues 
acyclic task model propose acyclic task model represent tasks real time system periodicity constraints 
acyclic task composed chain successive task invocations 
task invocation arrival time execution time relative deadline absolute deadline invocation 
case periodic sporadic tasks different invocations acyclic task independent execution times deadlines 
require deadline task invocation arrival time invocation task 
shows example acyclic tasks 
horizontal timeliness represent progression individual tasks 
vertical bars delimit successive invocations task 
bar marks deadline previous invocation arrival time 
shaded rectangles represent invocation execution times 
tasks scheduled processor 
note task invocations zero execution time allowed acyclic task model 
task task task 
example acyclic task set easy see set aperiodic task invocations transfered equivalent set acyclic task invocations follows ffl partition aperiodic task invocations sequences invocations consecutive invocations sequence absolute deadline invocation arrival time 
number sequences ffl consecutive invocations sequence precedes insert third dummy invocation arrival time deadline execution time 
note added invocation alter schedulability change utilization 
process completed invocation sequences formed satisfies definition acyclic task 
transformation suggests aperiodic arrival pattern exists equivalent acyclic arrival pattern utilization schedulability status bound derived acyclic tasks apply aperiodic tasks 
suffices derive utilization bound acyclic tasks 
bound depend number acyclic tasks high performance servers large number requests served concurrently number acyclic tasks typically large 
practical purposes interested asymptotic value bound 
generalized bound acyclic tasks consider simple model scheduling independent acyclic tasks uniprocessor 
instant set task invocations arrived deadlines expired ft ja call current invocations 
number current invocations time acyclic task model remains constant time utilization contributed current task invocations called current utilization shall prove optimal arrival time independent scheduling policy task invocations meet deadlines ub ub ub gamma gamma 
expressions equivalent 
number current invocations increases bound approaches arrival time independent scheduling traditionally scheduling policies classified dynamic priority depending different invocations task priority 
fixed priority scheduling acyclic tasks lead deadline misses arbitrarily low utilization 
different task invocations arbitrarily different deadlines execution times 
associating fixed priority levels acyclic tasks lead situation relative deadline low priority task invocation smaller execution time concurrent high priority task invocation leading deadline regardless current utilization 
consider arrival time independent priority scheduling policies 
call scheduling algorithm independent priority assigned task invocation depend arrival time 
typically policy classifies individual task invocations finite number classes ii associates fixed priority class independently invocation arrival times 
formally define arrival time independent scheduling follows definition arrival time independent scheduling algorithm function 
maps infinite set task invocations arrival times vector finite set values 
satisfies note edf example arrival time independent definition property violated 
infinite set task invocations arrive independently generally infinite set distinct absolute deadlines theoretically infinite set distinct priorities 
finite violates condition 
small arrival time independent scheduling policy easily implemented current operating systems support fixed finite number priority levels 
example akin diff serv architectures classify network traffic finite number classes give classes priority 
arrival time independent classification tasks relative deadlines example online trading server serve gold customers delay bound second serve silver customers delay bound seconds offering non customers best effort service 
call scheduling policy assigns higher priority invocations shorter relative deadlines aperiodic deadline monotonic scheduling policy 
shall prove policy optimal 
optimal utilization bound derive optimal arrival time independent scheduling policy necessary define sense optimality 
traditional sense optimality scheduling policy set task invocations set schedulable arbitrary policy schedulable optimal policy 
schedulability line property defined ability invocations meet deadlines allowable combination invocation arrival times 
definition suitable periodic sporadic tasks 
case acyclic tasks priori knowledge assumed task invocation parameters 
schedulability online property defined particular invocation arrival pattern occurs run time 
case arrival policy optimal aforementioned sense 
prove claim consider specific example task invocation set composed current task invocations execution times relative deadlines respectively 
scheduling policy prioritize invocations ways class policy ii class policy 
shows class policy optimal arrival pattern exists set class schedulable class similarly shows class policy optimal arrival pattern exists set class schedulable class optimal policy necessity function invocation arrival times edf 
context arrival time independent scheduling aperiodic tasks redefine sense optimality mean scheduling policy optimal maximizes schedulable utilization bound 
missed deadline policy class misses policy class ok non optimality class missed deadline policy class misses policy class ok non optimality class 
schedulability aperiodic tasks section derive utilization bound schedulability acyclic tasks aperiodic deadline monotonic scheduling policy 
show independent policy achieve lower bound 
show aperiodic deadline monotonic scheduling optimal sense achieving maximum bound 
critically schedulable task pattern task invocation zero slack 
derivation utilization bound aperiodic deadline monotonic scheduling undergoes steps 
consider set possible critically schedulable task invocation patterns 

find pattern maximum utilization max max occurs prior deadline critically schedulable invocation 
definition max exists point prior deadline critically schedulable invocation pattern utilization max 
compute minimum utilization umin min fu max patterns 
critically schedulable pattern exists point prior deadline critically schedulable invocation utilization max umin umin utilization bound 
independent task set uniprocessor critically schedulable reducing execution time invocations deadlines exists critically schedulable set lower utilization 
invocation pattern necessarily exceed derived bound point prior deadline system bound exceeded invocations meet deadlines 
key succinct derivation utilization bound avoid explicit enumeration possible task patterns set defined step 
worst case critically schedulable task invocation pattern worst case pattern short defined utilization exceeds umin finding subset set possible patterns proven contain worst case pattern minimum utilization umin 
particular prove worst case critically schedulable task arrival pattern properties lowest priority task invocation critically schedulable ii current utilization remains constant say busy interval prior deadline lowest priority invocation busy interval mean continuous cpu consumption 
max constant utilization aforementioned interval 
subject properties find analytic expression utilization function parameters general invocation pattern minimize respect pattern parameters obtain utilization bound 
proof detail 
theorem set acyclic tasks schedulable aperiodic deadline monotonic scheduling policy ub ub ub gamma gamma 
proof consider critically schedulable acyclic task invocation pattern 
definition task invocation pattern zero slack 
call task invocation tm consider interval time am am dm tm current 
time function deadlines busy interval 
interval cm dm tm tm cm dm utilization task invocation tm tm utilization higher priority task invocations current time tm utilization lower priority task invocations current time lower priority invocations affect schedulability tm minimized tm 
words reduce utilization critically schedulable task pattern task tm zero slack removing task invocations priority lower tm arrive minimum utilization bound tm lowest priority task invocation current interval am am dm call property 
shall denote lowest priority task invocation tn set execution gap period processor idle time precedes arrival critically schedulable task invocation tn task invocation set max dn 
show bound umin min max occurs invocation set utilization constant interval dn interval shown 
time 
busy period pattern lowest maximum utilization critically schedulable patterns max umin contradiction assume constant interval dn case show find critically schedulable invocation pattern lower maximum utilization 
choose hi hi dn 
choose lo lo hi 
lo hi exists acyclic task pattern current invocation hi say hi larger utilization current invocation lo say lo hi hi lo lo consider invocations hi lo task 
say invocation ta delays invocation tb reduction completion time increases slack vice versa 
cases arise depending hi lo delay lowest priority invocation tn zero slack ffl case 
hi delay tn case reduce execution time hi arbitrarily small amount ffi 
decrease utilization hi affecting slack tn ffl case 
hi delays tn lo delays tn reduce execution time hi arbitrarily small amount ffi add ffi execution time lo transformation decrease total time tn delayed 
lower utilization time hi ffl case 
hi delays tn lo delay tn hi delays tn higher priority 
case aperiodic deadline monotonic scheduling implies hi dn reduce hi arbitrarily small amount ffi add ffi cn decreases hi ffi hi gamma ffi ffi hi ffi hi dn transformation slack tn unchanged 
result critically schedulable task set lower maximum utilization 
contradiction statement lowest maximum utilization patterns hi umin assumption constant wrong 
proves umin occurs constant interval dn call property 
call constant value refers task pattern utilization computed 
proceed minimizing utilization respect attributes task invocations preempt tn consider busy period shown period continuous cpu execution precedes deadline critically schedulable task invocation tn gamma offset arrival time task invocation tn relative start busy period 
minimization respect parameters task invocations execute busy period undergoes steps step minimizing acyclic task consider invocation arrives busy period dn utilization invocation invocation deadline definition earlier dn sum execution times invocations dn precede acyclic task cp property utilization constant interval dn cp gamma length interval dn sum execution times interval amount dn cn gamma gamma gamma dn stands overflow amount computation time task invocation occurs deadline task invocation tn gamma equation rewritten cn dn gammau gamma gamma gammaa gamma gamma equation cn utilization minimum 
implies worst case invocation pattern tn arrives idle period see 
call property 
substituting cn setting minimum utilization gamma dn gamma gamma dn gamma gamma dn step minimizing consider busy period dn 
property period tn lowest priority invocation 
minimize respect computation times task invocations ft tn gamma invocation acyclic task busy period 
latest completion time invocation set start time invocation consider invocations non zero execution times zero execution time invocations alter utilization 
minimize respect computation times task invocations shall inspect derivative du da cases arise 
arrives task invocation higher priority running case blocked arrival 
advancing arrival time arbitrarily small amount change start time change start finish time task invocation 
consequently remains constant dv da 
equation du da gamma dn ck dk 
quantity negative indicating decreased increasing arrival time 
arrives task invocation lower priority running case preempts executing task invocation arrival 
advancing arrival time arbitrarily small amount reorders execution fragments invocations changing combined completion time 
consequently remains constant dv da 
equation du da gamma dn ck dk 
quantity negative indicating decreased increasing arrival time 
arrives task invocation running words arrives completion time previously running task invocation 
define contiguous period period contiguous cpu execution invocations tn gamma execution invocations forms contiguous periods 
cases arise ffl contiguous period ends advancing change dv da du da gamma dn ck dk 
quantity negative indicating decreased increasing arrival time ffl contiguous period ends cases arise dn case 
task invocations running arrived advancing arrival time shift contiguous period increase amount 
follows dv da 
equation du da dn gamma ck dk 
quantity positive indicating decreased decreasing 
ii dn case 
du da gamma dn ck dk 
quantity negative indicating decreased increasing arrival time 
iii dn ii seen lim du da lim gamma du da derivative du da defined dn signs derivative ii seen minimum dn decreased cases case iii minimum occurs 
cases exhaust possibilities iii minimum global minimum 
case task invocation arrives task invocation running definition case contributes contiguous period ends definition subcase dn definition subcase iii 
words task invocation arrives exactly completion time previous task invocation period contiguous completion invocation dn simplicity re number invocations tn gamma order arrival times 
follows minimized gamma gamma cn gamma dn gamma gamma depicted 

contiguous period gamma global minimum equation cn dn gamma gamma fc gamma gamma ji gamma substituting gamma get expression cn gamma gamma gamma gamma gamma substituting expression get dn gamma dn gamma gamma gamma dn gamma step minimizing utilization equation decreases dn gamma increase 
tn lowest priority invocation aperiodic deadline monotonic scheduling policy upper bounds deadlines dn worst case pattern dn gamma dn equation significantly simplified case 
resulting utilization gamma gamma gamma gamma gamma corresponding computation time tn cn gamma gamma gamma gamma gamma step minimizing arrival times invocations tn gamma spaced respective computation times step obtain condition minimum utilization minimize respect subject constraint cn 
set du dt 
setting derivative equation zero get gamma gamma substituting value equation simplifying get gamma gamma quantity gamma gamma denominator equation upper bounded gamma corresponds case computation times equal gamma 
consequently lower bound utilization critically schedulable acyclic task set equation see conditions cn gamma gamma 
cn positive 
consequently aforementioned bound satisfy constraint cn 
illustrates minimum utilization condition 
plots relation equation illustrating point minimum utilization constraint cn 
cn increases monotonically obvious point minimum utilization subject constraint cn obtained value cn 
setting cn equation get gamma gamma 
substituting equation eventually get minimum utilization subject 
minimum utilization condition gamma gamma gamma minimum utilization obtained computation times equal case gamma gamma equation equation theorem proved 
bound tight sense utilization actual critically schedulable task pattern arbitrarily close bound 
describe critically schedulable task pattern utilization approaches infinitesimally computed bound large tn infinitesimally small execution time 
example tn blocked entire interval arrival time deadline invocations gamma acyclic tasks 
task consists invocations equal utilization 
arrives tn say 
second arrival time gamma gamma gamma computation time relative deadline gamma gamma gamma implies invocation task computation time gamma gamma gamma gamma gamma gamma relative deadline gamma gamma gamma worst case task pattern shown 
simple algebra easy see utilization pattern equal bound tn zero slack 
bound tight 
theorem aperiodic deadline monotonic scheduling optimal arrival time independent scheduling policy sense minimizing utilization bound 
proof utilization bound scheduling policy udm utilization bound aperiodic deadline monotonic scheduling derived 
consider utilization value udm shall show 

worst case task pattern show schedulability bound policy demonstrate single task set maximum utilization policy constructing task invocation pattern maximum utilization aperiodic deadline monotonic 
possible udm task invocation misses deadline pattern called ta due property loss generality ta lowest priority invocation aperiodic deadline monotonic scheduling 
policy equivalent aperiodic deadline monotonic scheduling task invocation tb ta tb lowest priority task invocation policy invocation priorities independent invocation arrival times loss generality tb invocation arrives ta schedule task set policy completion busy period remain 
invocation finish tb ta tb higher priority ta deadline monotonic scheduling shorter deadline 
task invocation tb policy consequently limit lim udm follows udm scheduling policy corollary utilization bound aperiodic deadline monotonic scheduling optimal arrival scheduling policies 
experimental evaluation check utilization bound accurate combination experimental testing real server prototype simulation results obtained home simulator 
sets experiments subsections respectively 
testing real prototype previous demonstrated success utilization control loop controlling web server performance 
loop implemented part utilization control middleware described detail 
middleware measures average server utilization periodically manipulates quality served content measured utilization maintained desired operating point 
experiment described section middleware configured maintain server utilization bound 
middleware library linked apache web server linux platform 
combination apache linux representative web server configurations today 
experimental server platform amd pc connected local area network client machines 
machines run client software tests server synthetic workload 
web load generator called httperf client machines server web requests 
number concurrent requests large essence number equivalent acyclic tasks infinite 
depicts achieved utilization 
experiment request rate server increased suddenly time zero rate exceeds schedulable utilization bound 
sudden load change approximates step function 
compares open loop server utilization closed loop utilization controller gain margin values higher gain margin indicates conservative utilization control 
shown loop successful reducing server utilization remain target duration experiment open loop gain margin gain margin controller set point sampling point server utilization sampling point server utilization 
utilization control performance server utilization steady bound easily verify instrumenting client software individual request deadlines met 
brief simulation study shows proportion tasks deadlines utilization increased bound 
simulation study uniprocessor simulator evaluate tightness utilization bound 
workload consisted independent aperiodic tasks firm deadlines tasks immediately aborted missed deadlines simulator composed set sources generated tasks executor emulated scheduling execution tasks monitor periodically collected performance statistics ratio cpu utilization system 
deadline monotonic policy schedule tasks 
inter arrival time subsequent tasks source followed exponential distribution 
experiments execution time tasks source randomly generated uniform distribution range time units 
purpose presentation assume time unit millisecond 
slack factor source defined gamma followed uniform distribution range 
sampling period sec experiments 
sampling instant monitor collected information sampling period gamma constant sampling period ffl sampled ratio sm defined number deadline misses divided number tasks terminates sampling period gamma 
ffl sampled cpu utilization su defined percentage busy time sampling period gamma 
note sampled cpu utilization approximation current utilization cpu 
addition monitor computed maximum sampled ratio defined maximum sampled ratio run 
represents worst transient ratio due workload burstiness 
means deadline misses run 
monitor computed average cpu utilization au defined percentage busy time run 
measure tightness utilization bound repeated run different numbers sources 
run lasted sec 
plots maximum sampled ratio corresponding run 
average cpu utilization maximum sampled ratio 
maximum ratio see deadline misses occurred average cpu utilization bound 
au maximum sampled ratio nonzero means deadline violations occurred load condition 
result demonstrates sampled average cpu utilization approximate logical utilization defined derivation bound 
measured utilization admission control purposes avoid deadline misses 
difference theoretical bound measured threshold deadline misses attributed task generation process apparently didn generate worst case pattern 
time second utilization time second ratio utilization time second utilization time second ratio utilization time second utilization time second ratio utilization time second utilization time second ratio utilization 
utilization ratio figures plots traces sampled cpu utilization ratio different workload levels 
expected frequency magnitude non zero sampled ratio increased average cpu utilization increased 
average cpu utilization deadline misses occurred sporadically 
deadline misses occurred significantly frequently average cpu utilization higher 
result justifies admission control sampled cpu utilization mechanism avoid deadline misses system aperiodic task workload 
second set simulation experiments utilization bound set point adaptive feedback control loop automatically adjusts task service quality parameters desired utilization maintained 
practical application quality correspond frame rate resolution color depth content compression attributes changes server alter cpu load 
quality level zero added represent denial service 
server subjected simulated overload 
repeated experiments different cpu set points utilization bound 
resulting run time server utilization ratio cases depicted respectively 
runs service quality control module initialized service 
qos level subsequently increased simulated control loop desired utilization reached 
see utilization bound utilization set point system deadline misses 
comparison utilization set point system suffered deadline misses sampling periods 
result demonstrates effectiveness utilization bound feedback quality adaptation purposes avoiding deadline misses overload 
time second utilization time second cpu utilization set point time second utilization time second cpu utilization set point 
feedback qos adaptation satisfying deadline constraints related date main paradigms proposed realtime scheduling 
earliest approach providing guarantees performance critical systems rely static allocation scheduling algorithms assume full priori knowledge resource requirements tasks arrival times 
rate monotonic scheduling theory introduced second paradigm knowledge task arrival times required 
result sporadic tasks accommodated long minimum inter arrival time known 
concept dynamic real time systems pioneered spring kernel project introduced third major paradigm describe applications run time workload parameters unknown admission control time 
envision fourth paradigm real time scheduling concerns aperiodic tasks requests web server execution times generally resource requirements unknown admission 
uncertainty resource requirements may due example data dependencies impossible predict execution time task interpreting semantics application specific inputs 
measurable quantity systems aggregate utilization different resources 
theory needed relate utilization schedulability aperiodic tasks 
date utilization schedulability test proposed aperiodic task model 
aperiodic tasks handled prior literature ways 
approach requires creation high priority periodic server task servicing aperiodic requests 
examples include sporadic server server variations 
approach bounds total load imposed system aperiodic tasks allowing critical periodic tasks meet deadlines 
usually assumes aperiodic tasks soft attempts improve responsiveness guarantee deadlines 
second approach typically relies algorithms joint scheduling hard periodic aperiodic tasks 
uses polynomial acceptance test arrival aperiodic task determine meet deadline 
examples include aperiodic response time minimization slack maximization slack stealing reservation rb algorithm guarantee routines introduced notably spring kernel project 
notable aperiodic scheduling includes results edf scheduling dynamic scheduling precedence constraints robust dynamic preemptive scheduling 
addition higher complexity tests typical admission control algorithms know worst case execution times arrived tasks 
contrast investigated problem deriving utilization bound guaranteed schedulability aperiodic tasks 
plethora qos adaptation mechanisms described earlier literature feedback qos adaptation maintain utilization schedulable limits 
authors concerned developing probabilistic guarantees maintaining utilization bound control theoretical techniques 
particular interest problem relating measured utilization definition utilization 
derived time optimal utilization bound schedulability aperiodic tasks arrival time independent scheduling 
bound allows admission test incoming tasks faster polynomial tests proposed earlier literature 
showed aperiodic deadline monotonic scheduling optimal policy sense maximizing schedulable utilization bound 
result may step aperiodic deadline monotonic scheduling theory analog rate monotonic scheduling theory case aperiodic tasks 
theory may prove significant importance real time applications real time database transactions online trading servers guaranteed delay packet scheduling 
applications aperiodic arrivals deadline requirements schedulability maintained 
limited fundamental result investigation means complete 
explore subsequent publications extensions theory case dependent tasks multiple resource requirements precedence exclusion constraints non preemptive execution task dependencies multi resource environment 
shall extend results multiprocessor scheduling aperiodic tasks 
multiprocessor trivially considered set uniprocessors interesting investigate better bounds possible processors share single run queue 
results usable important investigate methods aggregate utilization control maintain utilization schedulability bound 
statistical properties task arrival process combined mathematical analysis feedback control loops derive probabilistic guarantees meeting task deadlines 
avenue currently pursued author 
authors funk sanjoy baruah rigorous review shepherding earlier manuscript revealed flaws original derivation 
authors anonymous referees valuable comments 
abdelzaher shin 
combined task message scheduling distributed real time systems 
ieee transactions parallel distributed systems november 
abdelzaher shin bhatti 
performance guarantees web server systems approach 
ieee transactions parallel distributed systems 
accepted 
stankovic 
adding robustness dynamic preemptive scheduling 
responsive computer systems steps fault tolerant real time systems 

chang shin 
reservation algorithm scheduling periodic aperiodic real time tasks 
ieee transactions computers december 

results earliest deadline scheduling algorithm 
ieee trans 
software engineering october 
silly 
dynamic scheduling real time tasks precedence constraints 
journal real time systems september 
davis burns 
optimal priority assignment aperiodic tasks firm deadlines fixed priority pre emptive systems 
information processing letters march 
lehoczky 
optimal algorithm scheduling soft aperiodic tasks fixed priority preemptive systems 
real time systems symposium pages phoenix az december 

lin 
scheduling periodic aperiodic tasks hard real time computing systems 
performance evaluation review may 
mosberger jin 
httperf tool measuring web server performance 
pages madison wi june 
acm 
sha rajkumar 
generalized rate monotonic scheduling theory framework developing real time systems 
proceedings ieee january 
shepard 
pre run time scheduling algorithm hard real time systems 
ieee transactions software engineering jul 
sha lehoczky 
aperiodic task scheduling hard real time systems 
real time systems june 
stankovic ramamritham 
hard real time systems 
ieee press 
stankovic ramamritham 
design spring kernel 
proc 
real time systems symposium pages december 
stankovic ramamritham 
spring kernel new paradigm real time systems 
ieee software pages may 
lehoczky sha 
server algorithm enhanced aperiodic responsiveness hard real time environments 
ieee transactions computers january 
lehoczky 
algorithms scheduling hard aperiodic tasks fixed priority systems slack stealing 
real time systems symposium pages san juan puerto rico december 
xu 
multiprocessor scheduling processes release times deadlines precedence exclusion relations 
ieee transactions software engineering february 
xu parnas 
scheduling processes release times deadlines precedence exclusion relations 
ieee trans 
software engineering se march 
