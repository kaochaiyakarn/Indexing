computer journal vol 
dec pp 
design kernel language parallel inference machine ueda takashi chikayama institute new generation computer technology bldg 
ku tokyo japan review design concurrent logic language ghc basis kernel language parallel inference machine developed japanese fifth generation computer systems project design parallel language kl actual kernel language implemented 
key idea design languages separation concurrency parallelism 
clari cation concepts kind play important role bridging gap parallel inference systems knowledge information processing coherent manner 
particular design new kernel language encouraged re examine reorganize various existing notions related programming invent new ones 
japanese fgcs fifth generation computer systems project year project started aims developing methodologies technologies supporting knowledge information processing highly parallel inference machines 
outstanding feature fgcs project takes middle approach means designing novel kernel language bridges enormous semantic gap parallel hardware application software 
years ago people hoped gap narrowed gradually widening applications sophisticated development computer architecture risc parallel architectures requires exploit physical characteristics programs communication locality better 
necessarily undesirable phenomenon ecient processing understanding computation incurs diculty bridging gap 
approach adopted fgcs project logic programming paradigm bridge 
course merely proposing single paradigm suce simply starting point materialize paradigm form kernel language 
reason logic programming appropriate starting point sequentiality concept 
prolog successful outcome logic programming paradigm far relies sequentiality basic framework logic programming provide basis research parallelism 
done parallelism logic programming 
classi ed major directions parallel execution logic programs explicit speci cation concurrency call ordinary logic programs henceforth design concurrent logic programming languages 
direction concerned exploiting power parallel computers way transparent programmers notable example parallel execution prolog direction concerned parallelism logical level usually refer concurrency 
henceforth term parallelism mean parallelism physical level 
fgcs project decided follow direction principle 
felt parallel execution ordinary logic programs sucient cover levels abstraction applications layer hardware layer 
concurrency formalism needed write reactive systems harel pnueli elegantly decided design kernel language concurrent logic programming paradigm 
know applications require concurrency formalism quite con dent di erent programming paradigms implemented top concurrency framework 
concurrent languages provide natural construct consider parallel execution design parallel algorithms concurrent processes 
way design concurrent language augment sequential language primitives communication concurrency 
chose design kernel language independently existing sequential languages 
long felt concurrent programming easier promoted nding simple formalism concurrency concurrent language 
finding simple formalism useful clarifying various concepts related concurrency parallelism 
concurrent language designed called guarded horn clauses ghc ueda ueda described section 
designing ghc completely separated notion concurrency notion parallelism included language constructs 
speci cation concurrent program run parallel computer tends implementation dependent 
ective parallel computers able specify program executed wish 
may claim automatic parallelization clearly desirable explicit control parallelism programmers point view 
order develop automatic parallelization schemes carry research languages explicit control parallelism 
kernel language called kl chikayama ghc takes issue parallel execution account things 
kl called parallel language ghc concurrent language 
design kl described section 
concurrent logic language ghc design kernel language parallel inference machine goto machine building started 
concurrent logic languages considered possible basis kernel language include relational language clark gregory concurrent prolog shapiro parlog clark gregory 
particular studied concurrent prolog detail expressive languages implemented fully general purpose sequential computer miyazaki 
known experiences useful ways understand review programming language try implement 
implementation clarify details language successful gives constructive evidence complete proof language constructs reasonably de ned 
guarded horn clauses ghc born studies direct clue attempt clarify atomic operations concurrent prolog 
ghc shares basic framework concurrent logic languages 
firstly ghc program set guarded clauses 
secondly ghc features don know nondeterminism built search capability features don care nondeterminism allows program reactive systems interact outside world 
reactive systems concurrent logic languages process interpretation logic van emden de lucena goal multiset subgoals derived regarded process processes communicate generating observing bindings shared logical variables values 
concurrent logic languages bindings communicated ghc processes determinate revoked published processes 
determinacy bindings essential reactive systems bindings may interacting real outside world 
key idea ghc key idea ghc 
explained important aspect concurrent logic languages determinacy bindings 
general execution concurrent logic program proceeds parallel input resolution ueda allows parallel execution di erent goals rules guarantee determinacy bindings 
guards including heads di erent guarded clauses called goal executed concurrently instantiate 
goal commits clauses guards succeeded see 

body clause committed instantiate bodies clauses committed instantiate guards clauses achieved simply executing 

goal said succeed commits clause body goals succeed 
note half vacuously holds body empty 
commitment goal pursue clauses generating bindings 
commitment generate bindings clause left 
important aspect concurrent logic languages synchronization achieved 
general synchronization achieved restricting information ow caused uni cation 
concurrent prolog uses read annotations parlog uses mode declarations compiling uni cation input arguments sequence way uni cation test uni cation primitives 
languages additional mechanisms necessary guarantee restriction 
concurrent prolog bindings generated execution guard instantiate caller side recorded locally published commitment 
parlog guard clause containing guard goal instantiate caller called unsafe additional restriction imposed guard safe gregory 
key idea ghc quite simple 
uses restriction synchronization construct 
piece uni cation invoked directly indirectly guard clause instantiate caller suspended executed instantiating caller 
safety condition sense parlog automatically satis ed 
concurrent prolog bindings need recorded publication 
words ghc integrated notions determinacy bindings synchronization 
conceptual simpli cation led ghc adopted nally basis kernel language 
interestingly synchronization mechanism invented independently functional language di erent purposes sato sakurai 
ghc flat ghc kernel language provide common framework people working various aspects project including applications implementation theory 
accepting ghc basis kernel language convince satis es conditions 
expressive 

eventually implemented eciently possibly appropriate subsetting 

simple understood programmers including novices 
simple theoretical treatment 
social process programming language accepted community 
took considerable time ort ghc accepted icot 
primary reason considered ghc unduly restrictive logic language exible concurrent language 
soon sure ghc expressive write concurrent algorithms written concurrent logic languages 
program search problems important search problems specialty ordinary logic languages project started 
developed couple methods programming search problems ueda tamaki okumura matsumoto 
implementability quickly ascertained rapid prototyping ghc implemented fairly eciently sequential computers ueda chikayama 
simplicity continued study properties ghc looked simpler explanation language better suited process interpretation 
interpretation ghc process entity observes generates information represented form bindings implemented multiset body goals 
behavior body goal de ned guarded clauses regarded rewrite rules 
problem original de nition ghc guard goals process interpretation 
naturally regarded auxiliary conditions satis ed rewrite rule containing applied 
practical point view felt expressive power guard goals justify implementation ort implemented eciently 
short generality guard goals unnecessary 
considerations led reduce ghc subset flat ghc movement inspired reduction concurrent prolog flat concurrent prolog shapiro 
flat ghc arose practical requirements rigorous de nition long time 
vague idea certain prede ned predicates called clause guards de ned properties satis ed prede ned predicates 
convinced sucient conditions satis ed guard goal auxiliary condition deterministic succeeds depends arguments produce bindings 
conditions obeyed restricting predicates called directly indirectly guard de ned unit clauses possibly virtually case prede ned predicates clauses empty bodies 
restriction simpli ed theoretical treatment ghc operational semantics ueda program transformation rules ueda furukawa 
summarize basic idea flat ghc follows program set guarded clauses regarded rewrite rules goals 
guard clause speci es information observed applying rewrite rule body speci es multiset goals replacing original 
body goal uni cation goal form behavior language de ned non uni cation goal behavior user de ned 
uni cation body goal generates information unifying non uni cation body goal represents rest reduced 
understanding ghc better ghc rst proposed fully aware properties language clari ed inside outside icot 
example process interpretation flat ghc programs 
example logical characterization communication synchronization due maher 
showed information communicated processes viewed equality constraints terms generation information viewed publication constraint observation information modeled implication constraint set constraints published far 
acquired algebraic logical characterizations communication mechanism ghc indicates robustness language construct 
tried characterize atomic operations ghc 
concurrent prolog parlog publication bindings done atomically commitment non uni cation goal eventually commitment uni cation body goal run parallel goals 
means commitment ghc smaller simpler operation commitment concurrent prolog 
ghc information generated uni cation body goal atomic entity general 
transmitted smaller pieces possibly communication delay 
liberal computational model flat ghc expressive program cooperating concurrent processes leaves freedom implementation 
flat ghc unfortunately expressive program processes may cooperative 
construct kl section takes care processes 
point note ghc included control correct behavior processes excluded control ecient execution 
ghc left kl order clearly distinguish notions 
contrasts parlog features sequential suppressing parallel execution body goals 
believe important learn synchronization information ow sucient writing correct concurrent programs 
important topics theoretical aspects flat ghc include relationship theoretical models concurrency ccs milner theoretical csp hoare 
concurrent logic languages di er ccs csp asynchronous communication program dynamically recon gurable processes similar mathematical techniques formalize gerth saraswat rinard 
flat ghc notion transaction ueda furukawa captures externally meaningful unit communication corresponds event synchronous communication 
obtained completely satisfactory formal semantics fairly con dent flat ghc theoretically simple practical programming modi cation 
issue great interest various concurrent logic languages proposed relate ordinary logic languages don know nondeterminism 
consistent position clarify di erence families languages integrate carefully designed interface ueda 
developing compilation method ordinary concurrent logic languages ueda tried clarify means collect solutions search program related semantics solutions predicates prolog bagof 
parallel language kl described designed concurrent logic language flat ghc basis kernel language parallel inference systems 
descriptive power language sucient ecient program execution concern 
flat ghc programs say processor atomic operations making computation performed ways distribute operations available processors 
flat ghc programs specify partial ordering atomic operations possible total orderings conforming 
distribution ordering may ecient 
sure cases distribution ordering employed far optimal able specify physical details execution extent 
designed parallel programming language concurrent programming language flat ghc specify certain detail program executed 
section describes outline language named kl 
mapping computation flat ghc programs implicitly express potential parallelism sense ordering atomic operations exists ordering essential correctness 
faithfully exploit parallelism meaningful ideal parallel computer unlimited number processors interprocessor communication unlimited throughput latency 
real hardware limited number processors cost interprocessor communication neglected 
achieve eciency control required atomic operation performed 
call control mapping follows 
way solve problem language implementation fully responsible mapping 
current technology parallel software provide ecient mapping strategy applicable application areas establishing technology experiences diverse applications principal goals research parallel inference systems fgcs project 
mapping implicit sequential systems 
suppose methods solve problem method may fail nd solution rare cases terminates short period time solution failure signal method ecient nds solution 
case ecient sequential strategy try rst try unsuccessful 
sequential systems strategic decisions eciency usually clearly separated mandatory ordering correctness programs 
trying may best strategy parallel systems 
method may require computational resource processors execution 
case method tried parallel long interfere execution method realized providing elastic guideline mapping giving higher priority sophisticated mapping desirable 
suppose methods solve problem known nd solution eciently tell 
case best scheduling strategy may give methods approximately amount computational resource 
resource management important part algorithm parallel computation 
sequential computer systems parallel computer systems extensions conventional sequential systems operating systems primarily responsible mapping 
acceptable far application programs sequential mapping strategy implicitly speci ed executed sequencing 
parallel systems explicit mapping operations frequently required invoking operating system mapping operation incur intolerable overhead 
solve problem introduced kl features intended eciently implemented represents group goals 
group unit execution control initiation interruption resumption abortion execution 
exception handling resource consumption control mechanism provided construct 
construct extension construct proposed clark gregory clark gregory 
priority body goal kl program unit priority control 
goal integer priority associated 
keeps maximum minimum priorities allowed goals belonging priority goal speci ed relative 
language provides large number logical priority levels translated physically available priority levels provided implementation 
priority speci ed priority parent goal inherited 
priority mechanism programming speculative computation burton osborne 
processor speci cation body goal may processor speci cation designates number processor execute goal 
goal executed processor parent goal 
straightforward mechanism provides basis research sophisticated load distribution strategies 
automatic load distribution strategies developed diverse problems 
optimal load distribution depends heavily problem single scheme works universally 
typical schemes planned provided libraries users select appropriate ones problems 
notable characteristics kl language priority processor speci cations separated concurrency control 
call speci cations pragmas 
pragmas merely guidelines language implementations may precisely obeyed 
true controlling mechanism abortion computation example may happen immediately 
relaxation distributed implementation easier 
pragmas speci ed program clearly distinguished syntactically japanese word corresponding english 
language constructs 
pragmas change correctness programs performance may change drastically 
uncommon half ort develop program devoted design appropriate mapping advantageous speci cation mapping syntactically isolated rest program 
parallel programming languages speci cation parallel execution mixed language constructs especially constructs concurrency control 
major revision required improving eciency running program di erent implementation liable introduce new bugs 
keeping sequential languages criterion appropriate comparing parallel algorithms 
assume parallel algorithm sequential execution time size problem average potential parallelism 
total execution time algorithm ideal parallel computer 
means algorithm sequential execution time parallelism considered better algorithm ideal parallel computer 
hold potential parallelism may vary time exceed physically available parallelism 
limited physical parallelism case real world parallel algorithm sequential time complexity worse known sequential algorithm beaten sequential algorithm running sequential computer suciently large matter designing parallel algorithm consider hybrid strategy algorithm switches sequential algorithm physically available parallelism 
pure languages pure lisp pure prolog straightforwardly express certain kinds ecient algorithm due lack notion destructive assignment 
overcome requires optimization techniques enable implementation destructive assignment hardware memory 
ghc pure language inherent problem 
write ecient algorithms pure languages able mimic eciency array operations conventional languages 
reason kl introduced primitive updating array element constant time disturbing single assignment property logical variables 
primitive follows set vector element vect index elem array vect index value index new element value predicate binds elem value index th element vect new array vect index th element replaced 
precise priority speci cation may guaranteeing certain properties diverging autonomously non terminating programs 
goals may old array vect naive implementation allocate completely new array copy elements 
known goals set vector element goal vect problem destructively updating 
actual implementation kl simpli ed ecient version counting scheme chikayama kimura detects situation event new array obtained constant time 
means imperative algorithm rewritten kl retaining computational complexity random access memory emulated array 
course allowing data structure decrease possibility parallel execution considerably 
stated requirement computational complexity considered sequential parts parallel algorithms invoked physically available parallelism 
implementation advanced implementation kl currently multi psi takeda system 
experimental parallel inference machine processors psi ii nakashima nakajima connected grid attaining peak performance list concatenation 
multi kl implementation research development parallel application software 
new implementation development higher performance inference machine pim goto expected processing elements attain peak performance 
reviewed design concurrent language ghc basis kernel language fgcs project design parallel language kl actual kernel language implementing 
explained expose concurrency parallelism 
need accessible programmers may exposed programmers 
amount parallel application software kl accumulated try nd appropriate higher level language constructs supporting application programmers implementation techniques kl 
careful separating concurrency parallelism separate closely related concepts 
concurrency correctness parallelism eciency 
means semantics ghc independent underlying model implementation semantics kl assumes particular mega reductions second 
roughly corresponds mega logical inferences second prolog 
model implementation 
formal semantics kl dicult describe separation ghc simpler theoretical point view 
mention separation programming point view experience shows writing correct concurrent programs dicult 
dicult write ecient parallel programs 
operating system chikayama pim rst developed kl implementation general purpose sequential machine synchronization bugs bothered installed multi psi 
purpose research kernel language design usable programming language better understand various concepts related concurrent parallel logic programming 
started project logic programming paradigm introduced concurrent logic programming continue nd concepts systematically bridge semantic gap parallel computers knowledge information processing 
ghc kl room re nement 
instance simple mode system notion constraints simplifying flat ghc ueda morita terms programming implementation 
example indicates implementation applications theory interact designing programming language 
important healthy development kernel language language reviewed people working diverse areas 
acknowledgments indebted colleagues listed worked working designing implementing kernel language 
special due furukawa takeuchi initiating research concurrent logic programming icot 
burton speculative computation parallelism functional programming 
ieee trans 
computers vol 
pp 

chikayama kimura multiple management flat ghc 
proc 
th int 
conf 
logic programming mit press cambridge ma pp 

chikayama sato miyazaki overview parallel inference machine operating system 
proc 
int 
conf 
fifth generation computer systems icot tokyo pp 

clark gregory relational language parallel programming 
proc 
acm conf 
functional programming languages computer architecture acm pp 

clark gregory parlog parallel logic programming language 
research report doc dept computing imperial college science technology london 
clark gregory notes systems programming parlog 
proc 
int 
conf 
fifth generation computer systems icot tokyo pp 

clark gregory parlog parallel programming logic 
acm 
trans 
prog 
lang 
syst vol 
pp 

van emden de lucena predicate logic language parallel programming 
logic programming clark eds academic press london pp 

gerth codish lichtenstein shapiro fully denotational semantics flat concurrent prolog 
proc 
third annual conf 
logic computer science ieee pp 

goto sato nakajima matsumoto overview parallel inference machine architecture pim 
proc 
int 
conf 
fifth generation computer systems icot tokyo pp 

gregory parallel logic programming parlog language implementation addison wesley 
harel pnueli development reactive systems 
logics models concurrent systems apt ed springer verlag heidelberg pp 

hoare communicating sequential processes 
prentice hall englewood cli 
status plans research development 
proc 
int 
conf 
fifth generation computer systems icot tokyo pp 

maher logic semantics class committed choice programs 
proc 
fourth int 
conf 
logic programming mit press cambridge ma pp 

milner communication concurrency 
prentice hall englewood cli 
miyazaki takeuchi chikayama sequential implementation concurrent prolog shallow binding scheme 
proc 
symp 
logic programming ieee pp 

nakashima nakajima hardware architecture sequential inference machine psi ii 
proc 
symp 
logic programming ieee pp 

okumura matsumoto parallel programming layered streams proc 
symp 
logic programming ieee pp 

osborne speculative computation multilisp 
parallel lisp languages systems ito halstead eds lecture notes computer science springerverlag heidelberg pp 

saraswat rinard concurrent constraint programming extended 
conf 
record seventeenth annual acm symp 
principles programming languages acm pp 

sato sakurai functional language uni cation 
proc 
int 
conf 
fifth generation computer systems icot tokyo pp 

shapiro subset concurrent prolog interpreter 
tech 
report tr icot tokyo 
shapiro concurrent prolog progress report 
computer vol 
pp 

takeda nakashima masuda chikayama load balancing mechanism large scale multiprocessor systems implementation 
proc 
int 
conf 
fifth generation computer systems icot tokyo pp 

tamaki stream compilation ground prolog committed choice languages 
proc 
th int 
conf 
logic programming mit press cambridge ma pp 

ueda guarded horn clauses 
logic programming wada ed lecture notes computer science springer verlag heidelberg pp 

ueda making exhaustive search programs deterministic 
new generation computing vol 
pp 

ueda guarded horn clauses parallel logic programming language concept guard 
programming generation computers nivat 
eds north holland amsterdam pp 

ueda parallelism logic programming 
information processing ritter ed north holland amsterdam pp 

ueda designing concurrent programming language 
proc 
information processing society japan tokyo pp 

ueda chikayama concurrent prolog compiler top prolog 
proc 
symp 
logic programming ieee pp 

ueda furukawa transformation rules ghc programs 
proc 
int 
conf 
fifth generation computer systems icot tokyo pp 

ueda morita new implementation technique flat ghc 
proc 
seventh int 
conf 
logic programming mit press cambridge ma pp 


