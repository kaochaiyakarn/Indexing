gmi flexible efficient group method invocation parallel programming jason maassen henri bal faculty sciences division mathematics computer science vrije universiteit amsterdam netherlands cs vu nl www cs vu nl manta generalization java remote method invocation model rmi providing efficient group communication mechanism parallel programming 
group method invocation model gmi allows methods invoked single object group objects possibly personalized parameters 
likewise result values exceptions returned normally rmi discarded multiple results produced combined single result 
different method invocation reply handling schemes combined orthogonally allowing express large spectrum communication mechanisms rmi mpi style collective communication special cases 
gmi invocation reply schemes selected method individually run time 
gmi implemented manta high performance java system 
micro benchmarks applications partially taken java grande benchmark set investigate gmi runtime efficiency compare collective communication operations mpijava library 
prototype implementation performs competitively faster mpijava 

object oriented languages java support distributed programming remote method invocation rmi model 
key advantage rmi extends object oriented notion method invocation communication processes 
parallel applications authors argued rmi inadequate support alternative forms communication needed allowing interaction groups objects 
example multicast may implemented multiple rmi calls cumbersome exploit efficient low level hardware multicast primitives 
complex communication personalized multicast data reduction harder express rmi 
parallel applications communication groups objects needed code simplicity application speed 
approach introduce group communication extend object oriented languages support collective digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
copyright acm xxxxx xx xx xx 
tion native library mpi 
increases expressiveness cost adding separate model message passing integrate object models 
mpi deals static groups processes objects threads 
particular mpi requires collective operations explicitly invoked participating processes processes execute lock step ill suited object oriented programs 
approach introduce group communication object replication integrated seamlessly method invocations 
object replication express multicast writing replicated object forms group communication 
introduce elegant approach integrate flexible group communication object oriented language 
goal express group communication method invocations just rmi express point point communication 
generalize rmi model way express communication group objects 
extended model called group method invocation gmi 
key idea extend way method invocation result value handled 
method invocation forwarded single object group objects possibly personalizing parameters destination 
result value including exceptions returned normally discarded forwarded separate object multiple results produced combined single result 
schemes handling invocations combined schemes handling results giving fully orthogonal design 
due orthogonal approach gmi simple highly expressive 
gmi express mpi style collective communication members group collectively invoke communication primitive 
mpi gmi allows single thread invoke method group objects requiring active involvement threads read information group objects 
gmi orthogonal design express communication patterns far regarded unrelated special primitives 
particular object replication futures voting easily expressed gmi 
implemented gmi part manta high performance java system variety applications including parts mpj benchmark suite java grande forum 
show gmi implemented highly efficiently 
example invoking method group please note term group communication refers arbitrary forms communication groups objects operating systems community term denote multicast regard just specific form group communication 
remote objects takes myrinet cluster 
detailed evaluation low level performance gmi performance speedups applications 
main contribution generalization rmi expressive efficient easy framework parallel programming supports rich variety communication patterns seamlessly integrating object oriented languages 
remainder structured follows 
section describe gmi model 
section briefly describe api implementation model manta 
section shows examples section describe performance benchmarks applications node myrinet cluster 
section presents related section concludes 

gmi model section describe gmi model implement group communication 
summarize rmi model show generalized support groups objects 
describe communication patterns groups implement types group communication 
remote method invocation rmi allows methods object invoked remotely 
methods defined special remote interface 
object suitable receiving implementing remote interface 
object compiled extra objects generated stub skeleton 
stub contains special compiler generated implementations methods remote interface remote object 
example shows stubs acting remote single object machine 
sum object section running example 
stub stub skeleton machine machine machine stubs acting remote rmi 
thread stub skeleton machine machine reply add add reply invoke message reply message method invocation stub 
method stub invoked stub forwards invocation skeleton sending network message description method parameters see 
skeleton waits message decodes invokes requested method object returns method result stub returns invoker 
rmi result handling stub skeleton fixed operate synchronously 
stub forwards method skeleton waits reply message continuing 
skeleton send reply back stub method result 
furthermore stub rmi serves remote single object changed stub created 
group method invocation gmi generalize rmi model ways 
stub group objects just single 
stub machine serves group objects machines 
stub skeleton machine machine machine stub acting group gmi 
second allow method invocations result values handled different ways communication code stubs skeletons generated respectively 
rmi exceptions treated special cases result values 
third simple api programmer configure stubs skeletons method individually run time 
different forwarding result handling schemes combined giving rich variety communication mechanisms 
configuring stubs run time communication behavior application easily adapted changing requirements 
describe notion object groups discuss forwarding schemes result handling schemes combinations 
discuss synchronization issues object groups 
object groups object group consists objects possibly different machines 
groups created dynamically 
proper semantics group operations groups immutable creation 
objects group ordered identified rank 
ranks group size available application 
objects group may different types implement group interface serves similar function remote interface defines methods invoked group compiler generate stub skeleton objects interface 
forwarding schemes support communication multiple objects gmi allows stub act group objects 
depending application stub able forward invocations objects group 
gmi offers forwarding schemes single invocation invocation forwarded single possibly remote object group identified rank 
group invocation invocation forwarded object group 
personalized group invocation invocation forwarded object group parameters personalized destination user defined method 
scheme similar normal rmi 
configuring stub programmer specify group object method invocations forwarded 
rmi gmi allows destination different invocation 
second scheme express multicast 
method invocation identical parameters forwarded object group 
scheme suitable distributing data computations group 
invocation forwarded group objects user defined personalization method invoked 
method serves filter parameters group method 
gets input parameters group method rank destination object size group 
produces personalized set parameters output 
parameters forwarded destination object 
personalized version call sent group object 
gmi method stub configured separately runtime specific forwarding scheme 
result group stub configured way methods behaves differently 
configuring method stub programmer selects compiler generated communication code method forwarding 
method group interface compiler generates communication code forwarding scheme 
increases code size stub allows compiler compile time information generate optimized communication code method 
result handling schemes java rmi supports synchronous method invocations restrictive parallel programming 
gmi model require invoker wait result 
offers variety result handling schemes express asynchronous communication futures primitives 
skeletons gmi offer result handling schemes discard results results returned stub 
discarded skeleton 
forward results results returned stub forwards user defined handler object original invoker 
return result single result returned stub 
method invoked single object result returned directly 
results selected rank returned stub 
combine results combine results single user defined filter method 
final value returned stub 
discard results allows method invoked asynchronously 
stub forward invocation skeletons return immediately waiting reply 
method returns result default value null returned 
result value returned exception thrown method directly discarded skeletons 
second scheme forward results allows results including exceptions forwarded separate handler object 
stub forward method invocations return immediately 
skeletons return result values stub 
stub forward user defined handler object original invoker retrieve final results 
mechanism implement futures result value stored explicitly retrieved voting results collected frequently occurring returned selection result combining results 
third result handling scheme return result default way handling results unicast invocations rmi 
stub forwards method invocation blocks skeleton returns result 
multiple results produced user selects advance group objects rank 
advantage single skeleton return result avoiding communication overhead 
skeleton thread stub skeleton get result get get result result combined result invoke message invoke message machine machine machine example result combining final scheme combine results useful multiple results produced 
combining results stub forward results scheme skeletons communicate combine results single 
example shown invocation forwarded group objects 
group objects execute method return result local skeleton object 
skeleton forwards result second skeleton waits result arrive combines result user defined combine method returns final result stub 
combine method acts filter takes multiple return values including exceptions input produces single result output 
scheme combine multiple results parallel example arranging skeletons tree structure 
important object group large 
scheme significantly save communication overheads data reduction operations 
exception thrown execution combine operation forwarded place regular result values 
result combine operation thrown exceptions 
table combinations stub skeleton behavior reply handling invocation discard forward return combine single asynchronous rmi rmi collective combine group multicast voting flat combine synchronous multicast group combine reduce gather personalized scatter scatter voting flat combine synchronous scatter scatter group combine combinations forwarding schemes different schemes forward method invocation schemes handling results 
gmi allows schemes combined orthogonally shown table 
table scatter gather reduce refer equivalent collective operations mpi 
flat combine denotes combine operation stub skeletons arranged flat communication tree 
twelve combinations result useful communication patterns making gmi highly expressive 
section illustrate forms group communication examples 
important advantage gmi subsumes general forms communication mpi style collective operations require active participation threads rmi style group operations initiated single thread require participation threads 
illustrate importance rmi style group operations showing group combine operation implement load balancing mechanism 
thread produces jobs servers containing object form group 
objects monitor load server 
thread invokes method objects group invocation 
object executes method returns estimate local load 
thread selects loaded server combine operation sends job 
application difficult express mpi style collective communication known advance load balancing information requested 
asynchronous events easily expressed group invocations collective communication 
servers frequently poll incoming messages periodically broadcast latest load information degrade performance 
synchronization ordering method invocation rmi guarantees order method invocations received 
example stubs simultaneously forward method skeleton order skeleton receives handles invocations defined 
may run invocations concurrently depending behavior network implementation skeleton 
programmer regular java monitor mechanism synchronized wait notify ensure object behaves correctly independent order method invocations received 
similarly gmi model guarantee ordering group invocations 
group invocations done simultaneously group may received different orders different group objects 
semantically group invocation equivalent doing multiple rmi calls synchronization problems addressed programmer way rmi 
advantage group invocations details message forwarding result processing handled efficiently gmi implementation 
applications group objects merely intended replicas single object preferable program model 
native implementation offers replicated objects kept consistent totally ordered multicast thread scheduler 
gmi specifically designed applications consistency model strict alternative communication forms personalized broadcast needed 
implemented top gmi 

implementation section briefly describe api implementation gmi system 
gmi model restricted specific programming language 
chose implement gmi manta high performance java system 
describe extended manta support group model 
api designed applications programming interface gmi model 
just java rmi api uses special interface library classes language extensions 
library routines written entirely java fully portable 
defined java package group contains necessary classes interfaces groups objects 
interface similar java rmi remote interface 
define methods serves signal compiler 
compiler recognizes interfaces extend group interface see section generates required stub skeleton classes 
class contains basic functionality group objects extend class similar java rmi rmi 
contains fields give rank object group total size group 
class parent class generated stubs 
contains methods select forwarding reply handing scheme method 
core gmi api 
group class contains methods create new groups add objects groups create group stubs 
section show examples api applications 
implementation implemented model api manta highperformance java system 
manta system specifically designed parallel programming java 
manta contains native java compiler compiles java source code directly native executables byte code efficient runtime system highly optimized implementation rmi 
briefly rmi implementation optimized ways 
generated code rmi stubs skeletons generated java serialization mechanism java replaced efficient mechanism generated code rmi library replaced efficient runtime system tcp ip actual communica load server load server server load stub thread load server load server server load stub thread server server server server load server load server server load stub thread load balancing gmi tion panda communication substrate 
important performance optimization system uses efficient lowlevel communication primitives implement group communication 
primitives provided panda communication layer 
example panda uses hardware multicast ethernet support network interface firmware myrinet 
extended manta compiler recognize interface generate required stubs skeletons 
java systems preprocessor needed similar rmi 
group stubs invoke panda communication routines turn call efficient network level primitives 
group invocation stub efficient multicast offered panda 
combining result values implemented efficient binomial tree algorithm 
api completely implemented java 
creating joining groups implemented rmi 
central rmi object functions group registry 
new group created name registered group registry allowing machines access group 
object tries join group request sent central registry rmi containing information object 
registry waits join requests received complete group returns group information size location objects rank object mapping group member 
contains table information group methods implements 
entry table group method containing information forwarding scheme reply handling scheme combine personalization method 
methods information table changed 
compiler generated group method stub checks table see forwarding scheme reply handling scheme method invokes appropriate compiler generated implementation 
prevent reflection usually inefficient additional preprocessor generate classes containing empty prototypes personalization combine methods 
implementation api library written java lines code 
implementation group related part manta runtime system written approximately size 
compiler related code required generating stubs skeletons significantly larger lines code 
code especially compiler fairly straightforward gives indication complexity hidden programmer gmi framework 

examples show example applications illustrate gmi 
api described creating group object similar creating rmi object 
group interface extending interface created defines methods common group objects 
part group object implement group interface extend class 
example shown 
group interface sum contains methods add get 
add method adds value sum get retrieves current value 
group object implements methods 
import group interface sum extends public void add double public double get class extends implements sum private double value public synchronized void add double value public synchronized double get return value simple group object main class shown contains main program run participating machines 
machine creates new group called 
machines create new object add group 
rmi method invocations done stub directly group objects 
create new stub bind method 
object group ready 
shown examples methods stub configured separately specific combination forwarding reply handling schemes 
multiple stubs different configurations method 
extend example illustrate important forms group communication obtained configuring stub explained section 
giving different implementations assume infrastructure allow multiple java programs running different machines participate parallel computation 
machine capable contact participating machine machines ordered ranking scheme 
class main public static void main string args program rank number programs group create sum new group join sum sum group sum group bind sum rank group simple group application method called main method 
group invocation illustrates group invocation gmi 
group member sets forwarding scheme add method group invocation 
description method void add double passed string parameter 
generated stub contains table descriptions group methods 
table efficiently select configuration method java inefficient reflection mechanism 
invocations add forwarded objects 
example illustrates ease expressing group communication gmi similarity rmi 
note group method invoked times configured 
public static void int rank sum group rank group void add double invocation group int group add group invocation result combining example result combining get values objects compute sum 
forwarding scheme get method set group invocation 
object group produce result 
combine individual results single reply handling scheme set combine results 
described section combine filter combine results 
filter user defined method passed parameter 
unfortunately java support method parameters 
limitation java function objects 
object containing combine method passed extra parameter 
allow generation efficient code avoiding reflection prototype function object generated 
preprocessor uses group interface input generates single class containing empty combine methods methods interface 
class methods known names signatures derived respective group interface 
generated class extended user provide implementation combine methods 
example prototype class shown extended combine class 
class contains class combine extends public double get double result int rank double result int rank int size return result result public static void int rank sum group rank combine new combine group double get invocation group group double get result combine double result group get combining result implementation get method combine filter method get 
parameter types combine filter method derived description group method get 
implementation uses pairwise combine filter method gets intermediate results parameters 
information origin results size group passed parameters combine operations gather may need 
example sum partial results returned 
selecting schemes forwarding reply handling get method invoked stub forwarded object 
results combined repeatedly invoking get method single result value remains 
value returned stub 
personalized group invocation personalized group invocations frequently parallel programs 
shows simple example invocation implemented gmi 
set forwarding scheme add method personalized group invocation 
described section personalized invocation requires personalization filter capable personalizing parameters destination 
implement personalization filters function object passed combine filter 
add generated personalization method add 
class split extends public void add double value int rank int size value size rank public static void int rank sum group rank split new split group void add double invocation personal group add personalized send problem java methods output parameters 
add designed modify parameters add needs way return modified parameters 
restriction java include class gmi library contains multiple versions single method different parameter type 
personalization method invoked passed new object gmi runtime system 
personalization method modify parameters store object 
turn stub forwards method invocation group object modified parameters object 
add method invoked stub invocation forwarded object group add method personalize parameter 
example add divides parameter different value destination adds new value method 
invocation forwarded group object process repeated object group 
result forwarding parallel applications asynchronous communication essential adequate performance 
example futures allow invocation method reception return value handled separately 
shows implemented gmi forward result scheme 
class extends private double res private exception exc null private boolean empty true public synchronized void get double res exception exc int rank res res exc exc empty false notifyall public synchronized double getresult throws exception empty wait exc null throw exc return res public static void int rank sum group rank new group double get invocation single group double get result forward group get useful double result getresult forwarding result get method configured invocations forwarded single object group return value forwarded external object intended 
personalization combine methods preprocessor generate prototype class extended class 
class provides implementation forward method get 
forward method gets parameters result value get method double exception may null rank group object produced result 
selecting schemes forwarding reply handling get method invoked stub forwarded object 
stub immediately returns default result allowing invoking thread continue 
real return value received forwarded object retrieved getresult 

performance results evaluate performance gmi implementation 
goal evaluation show obtain performance gmi expressive approach just invokes mpi routines java 
benchmarks compare performance gmi applications counterparts implemented mpijava 
mpijava library java language binding native mpi library case mpich provides highly efficient collective communication 
ensure sequential speed java code gmi mpijava compiled applications manta compiler 
performance differences attributed different communication libraries 
discuss micro benchmarks gmi examples section 
compare efficiency group communication gmi mpijava 
ported kernels application collective communication sections java grande forum mpj benchmark suite gmi 
additional codes written evaluate performance 
applications cover wide range group communication primitives including broadcast reduction 
benchmark report speedups relative fastest versions machine higher speedups translate lower execution times 
performance measurements done das system cluster mhz pentium pro processors mbyte main memory 
boards connected gbit sec myrinet network 
system runs redhat linux kernel version 
micro benchmarks applications run single executable processor involved computation 
micro benchmarks discuss performance basic group operations described section 
latencies completion times group operations table 
measurement performed doing operations followed barrier synchronization ensure operations completed receivers measurement stops 
general operations low latency explained efficient low level myrinet communication panda provides optimizations performed manta system 
comparison manta rmi round trip latency hardware 
latency group invocation increases slightly group size 
reason operation executed pipelined fashion sender continue soon message delivered locally 
processors running executable flow control scheme underlying myrinet multicast protocol block sender receivers run resources 
explains increase latency www cs vu nl das table group operations time group group collective group personalized size invocation combine combine invocation processors 
table shows latencies forms result combining collective group roughly similar latencies 
high latencies personalized group sends due current implementation optimal serially sends messages receivers 
applications shows speedups achieved applications relative fastest version single machine 
applications taken java grande benchmark suite 
applications come different problem sizes show results largest problem size 
kernel performs parallel lu factorization followed sequential triangular solve 
machines communicate broadcasting integers arrays doubles 
gmi version broadcasts expressed forwarding single put method group objects 
mpijava integer stored spare entry double array prevent extra broadcast 
gmi version slightly better speedup mpijava version compared 
ray tracer renders scene spheres 
machine renders part scene simultaneously generated nodes 
node calculates checksum part scene 
reduce operation combine checksums single value 
machines send rendered pixels machine individual messages 
speedups achieved mpijava gmi identical 
body code modeling argon atoms interacting jones potential cubic spatial volume periodic boundary conditions 
iteration mpijava version uses summation operations update atoms 
gmi machine stores data single object 
objects combined collective combine operation invokes specific combine method 
speedup gmi mpijava identical gmi mpijava machines 
mpijava version faster highly optimized summation operations arrays primitive types 
gmi mpijava implements operations completely library require serialization communicate invoke user defined methods perform operations 
gmi general approach results slightly lower speedup 
asp pairs shortest paths finds shortest path pair nodes graph parallel version floyd algorithm 
program uses distance matrix partitioned row wise available processors 
iteration processor containing row broadcast 
versions obtain excellent speedups amount communication needed iteration broadcast row small compared computation time updating multiple rows distance matrix 
leq linear equation solver iterative solver linear systems form ax program partitions dense matrix containing equation coefficients processors 
iteration processor produces part candidate solution vector needs vector previous iteration input 
processors need combine partial solution vectors iteration 
processors decide iteration necessary calculating difference element computing sum differences combine operation 
versions similar speedups processors 
unfortunately gmi version scale processors 
caused algorithm combine operation 
mpijava library uses ring algorithm system currently uses binomial tree 
qr parallel implementation qr factorization 
program parallelized partitioning matrix factorized processors 
iteration column maximum norm selected entire matrix serve householder vector processor selects suitable column local partition 
columns maximum norm selected combine operation broadcast processors 
gmi obtains better speedups qr mpijava compared processors 
mpijava suffers high serialization overhead 
caused operation uses object data array mpijava optimized 
gmi implementation optimized handle objects 
uses highly efficient serialization code generated manta compiler 

related java increasingly recognized suitable platform highperformance computing 
driving force high performance java java grande forum www org 
research projects investigate parallel programming java 
efficient communication mechanisms vital building block high performance java 
approach sharing objects parallel processes object caching object replication 
replication caching objects provides flexibility expressiveness gmi 
alternative communication mechanism outside java object model mpi style message passing 
mpj proposes mpi language bindings java 
mpi supports rich set communication styles particular collective communication 
major disadvantage mpi integrate java object model 
communication java objects sequential programs expressed method invocations mpj message passing 
mpj communication primitives primarily designed transmitting arrays primitive data types doubles handling complex object data structures java lists graphs 
mpj lacks thread support 
gmi subsumes mpi style collective communication cleanly integrates communication java object model 
earlier ccj library implements efficient mpi collective operations interface fits better java objectoriented framework 
ccj conceptually close mpi uses groups threads groups objects 
implements limited set collective operations 
field distributed systems group communication mainly speedup cpus gmi mpijava cpus ray tracer gmi mpijava cpus gmi mpijava speedup cpus asp gmi mpijava cpus leq gmi mpijava cpus qr gmi mpijava speedups benchmarks serves purposes fault tolerance location transparency 
efficiency important context 
common object request broker architecture corba similar functionality rmi 
corba uses special interface definition language idl define remote interfaces 
rmi interfaces generate stubs skeletons 
limitations corba offers remote method invocation polymorphism coming close rpc 
forms group communication provided 
corba interceptor functions inserted limited number hooks runtime system 
interceptors allow standard method invocation mechanism modified 
applied methods pass interception point 
result interceptors general able handle method invocation 
usefulness implementing complex group operations limited 
functionality gmi heavily depends interceptor scheme uses function objects modify behavior invoked methods 
difference gmi uses modification functions specific single method single stub 
gmi function objects flexible easier implement 
smart proxies change behavior application extending stubs generated idl compiler 
unfortunately implementing smart proxies quite complex programmer implement communication code 
complex group communication patterns defined gmi approach hardly feasible 
gmi stub completely compiler generated including communication code 
programmer needs configure stub runtime function objects necessary 
systems exist try corba suitable parallel programming 
extends corba notion spmd object consists computing threads perform part computation required invocation 
addition idl programmer specify data distribution computation threads 
corba provide convenient interface parallel program 
computation threads spmd object communication package mpi communicate 
programs written mix communication libraries corba mpi may properly integrate target language 
similar proposals extend corba 
javaspaces provide communication linda shared data spaces may seen objects remote communicating processes 
group operations applied spaces 
implements collective operations top entity space performance issue 
template library implements collective operations 
systems gmi directly augments java object model orthogonal set method invocation mechanisms 
provides maximal programming flexibility efficient group communication 
gmi relies concept orthogonally combined point point communication primitives sr language extends point point group communication 

introduced new model group communication generalizes rmi remote method invocation adding different schemes forwarding invocations handling results 
combining schemes orthogonally rich variety useful communication primitives arises integrates seamlessly objectoriented languages 
resulting model group method invocation gmi highly expressive easy efficient 
elaborate properties 
gmi expressiveness due orthogonal design 
gmi supports invoking method single multiple objects personalized group invocations various ways gathering combining data different objects 
gmi supports mpi style collective operations threads collectively call operation rmi style group operations invoked single thread 
believe model better fits java multi threaded programming model mpi collective commu nication designed spmd style parallelism 
gmi expressiveness illustrated fact existing communication primitives remote method invocations asynchronous rmi futures voting just appear naturally gmi design matrix opposed introduced special cases 
despite large expressiveness gmi applications programming interface small due highly orthogonal design 
implementation api java complicated somewhat restrictions language lack function parameters lack output parameters 
small api essential gmi easy 
addition gmi integrates seamlessly object oriented languages method invocation objects general communication mechanism 
gmi designed high performance particular exploit efficient low level multicast primitives provided network 
myrinet cluster current implementation invoke method group remote objects studied applications compared performance gmi mpijava hardware compiler manta 
results point weakness current gmi implementation scalability problem combine algorithm show performance gmi similar mpijava cases better 
described easy expressive efficient mechanism adding group communication objectoriented languages java 

andrews olsson 
sr programming language concurrency practice 
benjamin cummings publishing redwood city ca 
hatcher macbeth 
system compiling multithreaded java bytecode distributed execution 
parallel computing 
baker carpenter fox ko li 
java interface mpi 
proc 
uk workshop java high performance network computing sept 
bal jacobs langendoen ruhl kaashoek 
performance evaluation orca shared object system 
acm transactions computer systems feb 
ruhl bal 
evaluating design alternatives reliable communication high speed networks 
architectural support programming languages operating systems asplos cambridge ma 
black 
encapsulating plurality 
ecoop number lecture notes computer science pages 
springer 
diwan balasubramanian akman gannon 
java rmi performance object model interoperability experiments java hpc distributed components 
acm workshop java high performance network computing santa barbara ca feb 
rollins 
javelin scalability issues global computing 
acm java grande conference pages san francisco ca june 
bull smith davey 
benchmark suite high performance java 
concurrency practice experience 
carpenter judd skjellum fox 
mpj mpi message passing java 
concurrency practice experience 
freeman arnold 
javaspaces principles patterns practice 
addison wesley 
flynn hummel 
high performance parallel programming java exploiting native libraries 
acm workshop java high performance network computing feb 
guerraoui felber 
system support object groups 
proc 
oopsla pages vancouver oct 
keahey gannon 
corba architecture application level parallel distributed computation 
proc 
supercomputing san jose 
hatcher bal 
enabling java high performance computing 
commun 
acm 
maassen bal 
efficient replicated method invocation java 
acm java grande conference pages san francisco ca june 
maassen van bal jacobs 
efficient java rmi parallel programming 
acm trans 
prog 
lang 
syst 
object managment group 
common object request broker architecture specification 
june 
ed 
object managment group 
corba parallel processing rfp 
june 
www omg org meetings schedule parallel processing rfp html 
bal maassen 
object collective communication java 
joint acm pages 
sato ishikawa 
template structured collections 
int 
parallel distributed processing symposium ipdps pages cancun mexico 
philippsen 
efficient serialization rmi java 
concurrency practice experience 
rene 
mpi code encapsulation parallel corba object 
ieee int 
symposium high performance distributed computing hpdc pages 
bhatti 
java networks workstations parallel computing framework inspired linda message passing interface mpi 
practice experience 
bal 
runtime optimizations java dsm implementation 
joint acm pages 
wang schmidt 
design performance meta programming mechanisms object request broker middleware 
th usenix conference object oriented technologies systems coots san antonio 
stroud 
distributed object oriented framework dependable multiparty interactions 
oopsla pages denver nov 
