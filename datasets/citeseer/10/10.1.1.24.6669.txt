tool understanding type errors progress olaf frank huch axel simon university york uk olaf cs york ac uk lehrstuhl ur informatik ii rwth aachen germany informatik rwth aachen de 
modern statically typed functional languages type inference determine type function automatically 
fails compiler emits error message complex 
expression mentioned type error message wrong 
implement interactive tool allows programmers browse source code program query types expression 
variable typed set possible types user decide wrong 
help nding origin type errors detailed knowledge type inference user side 
modern purpose languages statically typed come sophisticated type system 
type system increases length code type annotations casting advantages nding errors compile time prevail 
functional languages hindley milner type system mil haskell jh ml burden alleviated type inference computes types functions automatically 
programmer longer needs supply types relies compiler annotation 
program typeable compiler mark expression type inference algorithm failed 
error hard understand non trivial programs checked reported position may agree part program erroneous 
xs ed xs ed xs ed ed xs ed function iterate list remove adjacent duplicate entries 
sorted lists behaves nub function haskell prelude 
locally de ned function ed discards list elements long equal example type correct wrote clause ed xs 
due fact de ned pattern function typing mistake type error 
ed expects list type applied element type list 
loading function haskell interpreter hugs jr yields message error hs line type error application expression ed xs term xs type match unification give infinite type hugs generates error message tries unify types xs branch branch 
glasgow haskell compiler gives similar message 
error position wrong programmer nd real error source 
general approach looks user starts examining types expressions neighborhood fragment compiler reported wrong 
trivial errors occur constructors dicult errors involve variables places 
nd variable reported type user examine surrounding expressions occurrence identi er 
involved identi ers source error 
natural way nding cause type error goal support user task letting query types expressions program 
support querying expressions hugs interpreter display type arbitrary expression entered command line 
non typeable function uses top level declarations useful check types declarations correct 
possible incorrect function commented hugs load modules error free 
local declarations introduced accessed due name scoping haskell 
query function useful explain curried function application polymorphism students worthwhile adopting 
currently implement interactive tool named able show type identi er 
complete source code user program shown function variable selected local ones 
case program type correct possible query types expressions inferred far giving user support nd con ict 
tool try explain type error derived necessary user knows type inference works 
think approach support programmers resolving type errors natural way described 
browsing program start small demonstration tool works 
application window divided regions upper shows full unaltered source code lower part holds table displaying types expressions 
user clicks source code area program underline smallest expression includes position 
selecting expression underlines selecting white space underlines expression mechanism possible easily mark subexpressions program 
selection added type view window 
table colored square type annotation 
added expression permanently underlined color square entry type view table removed 
colored underlines possible look types expressions simultaneously 
consider program 
adding source code line 
type view table contain entries fig 

table type information 
underscores type 
explain elaborate display types local polymorphic identi ers 
displaying types local expressions lowercase letters type annotations denote type variables 
function example said time function type variables instantiated concrete types 
variables type annotation implicitly quanti ed writing interpreted type example 
consider function haskell possible annotate writing incorrect due implicit universal quanti cation mean function returns type 
problem variable bound outside de nition way saying type variable function compatible haskell type notation want quantify explicitly 
decided prepend underscore variable bound outside current type expression 
type local function displayed 
implicit quanti cation allows reuse type variables standard haskell name type variables new annotation 
tool new type variable names display polymorphic annotations 
adding type function id de ned id fig 
impossible tell variable equal 
technique possible display polymorphic types local variables 
gathering type information type correct program possible view type subexpression 
challenging task display types expressions inference algorithm failed 
vague type information available obviously con icting 
order annotate syntax tree maximum information need check inconsistent types late possible 
lambda abstraction variable introduced times 
resulting type usage usually visible user written type annotation 
variables represent internally variables may replaced expressions concrete types type variables 
int float merging type information traversing body function gather information list 
types list merged uni ed equal algorithm annotate type 
example tool inference process display types colored squares refer locations program 
order nd error source user exclude type information list 
main mechanism tool nd hugs ghc allows annotate variables patterns function wide scope excluded implicit quanti cation 
add local type signature source code time display type local expression want change user source code 
type errors 
user asks tool remove rst usage tool infers type int float 
remaining type information consistent excluded usage type cause type error 
user investigate type derived looking types adjacent expressions 
type inference algorithm uses kind heuristic determine error source choose elements ignore list 
example subset consistent 
demonstrates dicult nd origin type error automatically 
algorithm sketched far bernstein stark bs handle bindings di erently 
type function inferred error correct 
function probably de ned wrong usage error show de nition function 
consider example head head type constructor instantiated term instantiated means type variable replaced internal variable 
point de nition type head type lead error reaching de nition head body function type order avoid awkward error positions decided instantiate bound identi ers 
tool display types program type correct 
working dealing non typeable programs specify subset types identi er 
list types identi er compatible list shown may quite long 
finding candidate wrong type dicult due amount information 
sensible automatically calculate biggest subset list con icts 
similar idea johnson walz jw majority decision taken 
experiences useful set type information nd error 
case turns approach speeds nding type errors full haskell support valuable 
currently language simple functional language lambda case constructs 
related gone improving type error handling 
standard inference algorithms ly left right bottom traversal trough syntax tree produce errors depend structure program 
report rst inconsistent application source error 
alleviate uence traversal order mcadams mca wand wan infer branches node separately unify substitutions result type inference :10.1.1.43.7746
approaches collect type information identi er unify point variable de ned bs jun 
close tool works 
event error technique allows search biggest uni able subset report occurrences errors jw 
improved algorithm may implemented version hugs jr 
generating better diagnostic messages couple interactive tools developed explain type inference works compiler derives type error bs soo db 
systems su er tremendous amount information produce 
simple erroneous expressions information generated overwhelming usable practice 
think tools unsuitable students know type inference works 
discussed diculty presenting type errors right location pointed sophisticated algorithms fail deliver incomprehensible error messages 
natural way nd source type error take look subexpressions neighborhood error position 
tool supports user letting browse program querying type subexpression 
solved problem showing local polymorphic identi ers prepending underscore type variable name 
case incompatible types tool collects type information identi er possible presents list user 
implement functionality user may remove information usages identi er induced 
leads type con icts excluded usages possible error source 
implemented experimental results 
think interactive approach give better support nding type errors complicated heuristic algorithms 
acknowledgments idea assisting programmer locate type errors browsing types expressions due simon thompson 
second author participated third year project building type checking assistant miranda simon thompson supervision 
type checking assistant address problem showing types expressions correctly standard type inference algorithm bs 
explaining type errors polymorphic languages 
acm letters programming languages west lafayette indiana 
department computer sciences purdue university 
bs karen bernstein eugene stark 
debugging type errors full version 
electronically available november 
db dominic duggan frederick bent 
explaining type inference 
technical report cs university waterloo department computer science 
jh simon peyton jones john 
haskell non strict purely functional language 
technical report microsoft research cambridge chalmers university technology 
jr mark jones alastair reid 
hugs haskell user gofer system www haskell org hugs 
jun yang jun explaining type errors nding sources type con icts 
electronically available august 
jw johnson walz 
maximum ow approach anomaly isolation uni cation incremental type inference 
proc 
th acm symposium principles programming languages popl pages 
ly lee yi 
proofs folklore polymorphic type inference algorithm 
acm transactions programming languages systems toplas 
mca :10.1.1.43.7746
uni cation substitutions type inference 
lncs ifl james clerk maxwell building kings buildings may eld road edinburgh uk march 
university edinburgh 
mil robin milner 
theory type polymorphism programming 
journal computer system sciences december 
robin milner mads tofte robert harper david macqueen 
de nition standard ml revised 
mit press 
thomas nordin 
personal communication 
simon peyton jones cordelia hall kevin hammond partain philip wadler 
glasgow haskell compiler technical overview 
proc 
uk joint framework information technology technical conference 
soo 
explanation polymorphic type checker standard ml 
master thesis university 
wan wand 
finding source type errors 
th annual acm symp 
principles prog 
languages popl pages january 
