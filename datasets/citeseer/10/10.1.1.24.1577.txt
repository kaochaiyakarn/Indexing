dsl approach improve productivity safety device drivers development laurent re fabrice charles consel renaud marlet gilles muller compose group irisa inria university rennes campus universitaire de beaulieu rennes cedex france mail consel marlet muller irisa fr peripheral devices come pace require fast releases drivers little progress improve development drivers 
development consists decoding hardware intricacies inaccurate documentation 
assembly level operations need interact device 
low level operations reduce readability driver prevent safety properties checked 
presents approach domainspecific languages overcome problems 
define language named devil dedicated defining basic communication device 
general purpose language devil allows description checked consistency 
improves safety interaction device uncovers bugs early development process 
assess approach shown devil expressive specify large number devices 
evaluate productivity safety improvement traditional development report experiment mutation testing 

appliances equipped processors cellular phones smart cards cars new peripheral devices developed 
pc devices rapidly evolving area 
typical examples video adaptors come pace months partly supported thomson multimedia contract french ministry education research 
author current address labri cours de la lib ration cedex france 
author current address trusted logic rue du versailles france 
mail renaud marlet trusted logic fr 
match needs demanding computer games 
competitive context time market essential device drivers need available soon new device ready 
device driver situated device operating system kernel directly application small systems 
critical piece code miscommunication may create major problems 
hand driver incorrectly device disable 
hand device driver may misuse resources available os application crash system 
preceding observations show acute need productivity safety device driver development 
need difficult satisfy reasons originating nature devices documentation lack adequate programming language support common programming practices 
approach domain specific languages productivity possible achieve device drivers share lot commonalities cover specific domain calls form code reuse expertise re 
propose novel approach achieve kinds reuse 
approach domain specific languages dsls opposed general purpose languages 
productivity approach improves safety compromising efficiency 
dsl adapted task dsl captures abstracts design implementation expertise domain dsl programmer focus compute describe opposed 
words fundamental concepts issues addressed programmer explicit dsl implementation issues stay hidden improves pro 
expressive power dsl restricted properties critical domain decidable checked automatically improving safety 
systematic domain specific optimizations tedious difficult manually implement gpl automated dsl compiler 
device drivers include domains expertise hardware operating system issues separation concerns requires separate dsl conceptual layer 
multi dsl approach motivated fact different layers driver described different programmers specific background specific constraints 
address complete development device drivers focus conceptual layers 
introduce dsl named devil device interface language provides low level layer device driver basic interaction device 
consider local devices pieces hardware directly communicate cpu address data buses 
consider remote devices printers communicate higher level local devices serial parallel interfaces 
devil specification rigorously describes access mechanisms type layout data exchanged operate device behavioral properties 
assume particular os target platform 
matter fact language requires hardware expertise description devil typically written device vendor 
compiling devil description provides typed highlevel interface device write upper layers device driver 
driver programmer benefit approach interface models idealized device abstracts hardware intricacies 
upper layers written gpl directly utilizes implementation device interface combined programs written dsls drivers 
devil restricted language various typing consistency properties specification verified 
generated interface strongly typed upper layers device driver checked standard gpl compiler 
contributions 
carried domain analysis device drivers points difficulties driver development 
separating concerns hardware vendors os driver programmers extracted structured key concepts commonalities variations code communicating device 
identified important properties provide safety guarantees communication 
analysis designed language devil precisely describe interaction hardware devices provide high level software interface operating 
language strongly typed enables consistency properties checked specification corresponding interface driver 
verification impossible perform drivers written gpl 
assess usefulness language shown expressive describe wide range standard pc devices including ethernet video ide disk sound interrupt dma mouse controllers 
evaluate productivity safety improvement offered devil conducted mutation testing experiment 
evaluation demonstrates driver written devil generated library may contain times fewer errors equivalent driver fully written organized follows 
section analyzes difficulty device driver development 
section presents dsls argues suited specifying device drivers 
section describes design devil language 
section presents mutation testing experiment 
section describes related 
section concludes suggests 

writing low level device drivers performed domain analysis device driver development 
points summarize various reasons developing device drivers difficult 
devices complex 
design device subject numerous contradictory constraints performance requirements backward compatibility 
result programming interface device awkward addressing modes random partitioning device registers obscure initialization sequences concentrate low level part drivers communication device higher level layers raise kinds issues proper management os resources 
devices inaccurately documented 
device drivers documentation available programmers hardware vendor 
documentation easy read low level high level concepts generally intertwined electronics communication mechanisms physical placement data register layout semantics 
terminology changes device vendor 
documentation informal written natural language 
consequently device description ambiguous incomplete inconsistent 
fact systematic way hardware vendor validate device specification 
mapping device documentation code straightforward 
extracting hardware interface documentation expressing program requires significant tedious error prone 
hand device specification expressed terms ports registers possibly indexed paged bit vectors register fragments corresponding values hand manipulating device driver requires assembly level operations explicit bus accesses bit manipulation operators shift 
language primitives adequate 
programming languages put programmers away functional units cpu offer low level instructions operate device 
operations account significant part device driver represent lines code 
low level nature operations checked type correctness consistency properties 
fairly unreadable 
language abstraction mechanisms inappropriate little 
common approach reducing effects low level operations programmability readability introduce macros available language 
practice macros existing drivers give symbolic names specific constants bit masks port offsets 
drivers examined macros encapsulate set low level operations 
reason patterns communication device similar little sharing device register 
hand abstraction low level code fragments generic reusable macros considered tedious 
hand defining specific macros individual register accessors considered useful twice doing resulting code readable 
case macros depends programmer care customs 
typically systematic uniform literal constants hardwired code definitions scattered different source files apparent reason 
speed concern 
offer better typing guarantees macros inlined efficiency functions slow 
fact speed crucial issue device drivers compilers support function inlining 
focusing critical paths device driver programmers tend keep performance mind optimize piece code 
programming practices poor 
issues show deficiencies software engineering device drivers today originate attitude programmers 
fact people write device drivers especially linux proud written code incomprehensible peers 
low level device drivers require programmers domains expertise 
unique situation device driver requires expertise different areas 
hand specific hardware expertise needed understand low level interface device internal behavior 
hand software engineering expertise required impose programming style structure code defining appropriate abstractions low level parts achieve efficiency code open enable extensions 
matter fact driver programmers considered expert domains 
example 
consider excerpt actual driver logitech mouse displayed 
seen values dy horizontal vertical motion mouse constructed interleaved bit operations device accesses 
code fragment compelling example awkward programs written large scale appropriate support manipulating low level device functionalities available programming practices favored 
assessing software engineering device drivers complexity devices inaccuracy documentation complex mapping device specification code language support programmers practice expertise significant impact software engineering device drivers 
matter fact developing drivers efficient process leads code intricate unreadable impedes maintenance evolution 
sur define mse data port define mse control port 
define mse read low define mse read high xa define mse read low xc define mse read high xe 
definition outb mse read low mse control port dx inb mse data port xf outb mse read high mse control port dx inb mse data port xf outb mse read low mse control port dy inb mse data port xf outb mse read high mse control port buttons inb mse data port dy buttons xf buttons buttons 

example communication logitech bus mouse linux situation disastrous impact reliability commercial operating systems 
example microsoft reports system failure nt caused drivers drivers development repetitive process built patterns code specific domain bus transactions bit manipulations usage patterns os resources fixed api observation calls re improve productivity safety 
mentioned general purpose languages offer little support 
code patterns fine grained usefully abstracted 
second typing rules validation mechanism offered loose detect bugs early development process programmer rely testing sample data 
domain specific languages offer solution problems 
offer suitable built abstractions capture domain expertise re regardless programmer practice 
provide additional safety guarantees allow domainspecific properties automatically checked 
dsls section 

domain specific languages domain specific language programming specification language dedicated particular domain problem 
dsl provides appropriate built abstractions notations small declarative imperative expressive general purpose language 
examples dsl numerous 
distributed sample product support services nt server may july communication jim senior vice president charge windows november th 
worldwide daily basis sql unix shells makefiles dsls various domains graphics financial products telephone switching systems protocols operating systems device drivers routers networks robot languages :10.1.1.34.3868
profusion shows attention dsls received research industrial communities 
points explain dsls attractive variety applications 
easier programming 
appropriate abstractions notations declarative formulations dsl program concise readable gpl counterpart 
development time shortened maintenance improved 
programming focuses compute opposed compute user skilled programmer 
specific optimization strategies implemented dsl compiler offer performance 
systematic re 
gpl programming environments include ability common operations libraries 
re libraries left programmer 
contrast dsl offers guidelines builtin functionalities enforce re 
additionally dsl captures domain expertise implicitly hiding common program patterns dsl implementation explicitly exposing appropriate parameterization dsl programmer 
programmer necessarily reuses library components domain expertise 
improved safety 
dsls enable properties programs automatically checked 
contrast gpl semantics dsl restricted decidable properties critical domain 
detecting errors early development process improves productivity 
addition re improved dsl programs rely components frequently tested 
dsls software architecture applications call dsl 
fact dsl sense structure implement program family 
program family set programs share characteristics worthwhile study develop 
program family typically associated problem domain 
dsl program viewed way designate member program family 
dsl compiler acts application generator produce member program family 
practice formulation terms dsl suggests attractive way architecture software implement program family 
program family traditionally implemented library captures common code patterns offers re implementing various family members 
library larger generic usability decreases due multiplication entry points parameters options offered 
result library ignored programmers considered complex difficult read 
situation dsl offer domain specific interface library programmer directly manipulate numerous highly parameterized building blocks complexity hidden 
effect dsl compiler automatically generates code calls library functions library seen machine dsl 
generated code corresponds code manually written implement family member library 
designing developing dsl definition dsl critically relies thorough analysis commonalities variations program family identifies common patterns design implementation 
goal analysis extract key abstractions properties notations terminology domain 
contributes determining basic elements language designed possible required verifications performed programs 
dsls device driver development device drivers form example tight program family addition having api operating system type device share similar operations vary hardware 
target dsls 
shown section productivity safety device driver development poor 
software engineering concerns addressed dsls 
additionally dsls address efficiency issue major concern device driver development 

design devil section gives summary domain analysis lower layer drivers communication devices 
identified concept corresponding devil language construct 

domain analysis perform domain analysis exploited variety information sources 
thoroughly examined wide spectrum devices corresponding drivers mainly linux sources ethernet video sound disk led display interrupt dma mouse controllers 
study supported literature driver development device available web discussions device driver experts windows linux embedded operating systems 
result domain analysis shows language needed provide high level software interface hardware devices 
usually case interfaces language declarative nature 

levels abstractions top level devil specification declaration device 
physical addresses abstracted ports ranges ports parameterize declaration 
ports allow device registers declared 
device variables defined registers forming functional interface device 
levels abstraction illustrated simplified fragment devil description mouse controller displayed 
device logitech base bit port register sig reg base variable signature sig reg int 
top level declaration introduces logitech description 
description parameterized respect range ports provided main range offsets 
bit register sig reg declared port base offset 
device variable signature interpretation register bit unsigned default integer 
resulting description fragment declares device functional interface consists single device variable signature 
device variables visible outside devil description declared private ports registers hidden abstractions part functional interface device 
examine detail levels 

ports port abstraction basis communication device 
abstraction hides fact depending device mapped operated memory operations 
device communication points addresses derived main addresses devil includes port constructor denoted takes arguments ranged port constant offset base illustrated 
limit set accessible ports meaningful device range valid offsets specified port illustrated 

registers domain analysis registers typically defined ports port reading port writing 
port needs provided reading writing share port case sig reg shown register read see example 
registers size number bits explicitly specified 
bit masks 
register declaration may associated mask specify constraints bits register 
symbol mask corresponds bit register 
symbol denote relevant bit irrelevant bit fixed value read written irrelevant bit read written 
default mask specified bits register assumed relevant 
example consider declaration register 
register index reg write base mask mask indicates bits relevant bit value written 
similarly bits value written 
relevant bits register construct variable 
example relevant bits unsigned integer variable variable take values 
private variable index index reg int access pre actions 
registers require registers set specific values accessed 
example indexed registers viewed sequence registers fixed base address accessing registers typically consists manipulating ports set index register accessed read write target register 
pre actions may attached register set specific context read written 
example declares read hardware constraint provision device vendor allow extensions 
convention device chip documentation bits numbered right left starting 
registers accessed port base provided device variable index set register dx low read base mask pre index register dx high read base mask pre index 
device variables hardware efficiency reasons minimize number os register may group various independent values 
example see bits register may denote buttons mouse pushed remaining bits register may provide information concerning motion mouse 
cases meaningful values constructed assembling bit sequences different registers 
example mouse encoded device lowest bits different registers 
fact meaningful values possibly spread register fragments represent convenient way express high level communications device 
conceptually read written variable gpl call device variables 
directly map physical entries variables correspond logical view device physical representation device state 
essence device variables form functional interface device programmer 
construction values 
previous examples device variables shown declarations corresponding entire register signature register fragments index 
possible declare variable combination illustrated example 
variable dx dx high dx low signed int variable dy dy high dy low signed int horizontal vertical motion mouse constructed concatenation operator fragments motion registers store low high bits actual motion values 
resulting bit sequences interpreted signed integers 
types 
devil allows bit sequences interpreted type 
set types currently offered devil reflects types various device drivers studied domain analysis booleans signed unsigned integers various sizes enumerated types ranges sets integers 
lack space examples constructs omitted 
features devil detailed 
features include access post actions enumerated types arrays structures synchronize device variables order register accesses register constructors variable behaviors conditional declarations depending device modes 
detailed description devil 

verification contrast dsl domain specific information explicit 
devil declarations enable categories verification scope 
devil strongly typed uses entities ports registers variables matched types 
second omitted double definitions detected 
example bits registers checked device variable definition missing 
lastly overlapping definitions building entities located reported error 
example register bits included different variables 
devil functional interface gpl provides opportunities verifications 
verifications include type checking conditional variable checking static dynamic 

assessment previous sections shown dsls enable properties programs automatically checked 
section examine number errors detected covered gpl dsl 
gpl study language traditionally write device drivers 
devil alternative introduces languages development process devil specifying device interface denoted devil rest library implements devil description 
approach leads evaluation pair devil devil devil devil 
evaluation error detection coverage devil mutation analysis 
evaluation enables demonstrate benefits dsl approach terms software robustness 
demillo mathur analyzed errors tex reported knuth 
analysis clearly reveals simple errors represent significant fraction majority errors production programs 
reveals errors remain hidden long time testing exposes 
observations important considering permissive nature language bits declared irrelevant bit masks 
program mutation testing produces set alternate programs 
alternate program known mutant formed modifying statement time predefined mutation rules 
mutation rules derived empirically studies errors commonly programmers translating requirements code 
traditional mutation testing want reason coverage set tests respect program mutation testing works principle adequately covers test able discriminate mutation presumably mutation discriminated test adequately cover proportion mutants die mutation testing indicates covered compiler case compiler devil compiler thought test set consider analysis performed compiler test element 
ll say compiler adequately covers program analysis discriminate mutation study focuses different devices ethernet card ide controller corresponding drivers experiment consists measuring coverage devil devil discovered corresponding compilers checkers mutation rules defined ensure resulting mutant syntactically correct modifies semantics program 
mutation rules devil chosen favor experiment reflects worst cases devil 
mutants generated program point 
program point called site 
site leads mutants 
example integer digits base mutants generated removing digit inserting new digit replacing digit 
table shows target device experiment number sites mutants generated 
device devil devil logitech lines code mutation sites ide lines code intel mutation sites ethernet lines code ne mutation sites table 
number mutation sites coverage analysis 
figures summarize results mutation analysis performed devil drivers come linux kernel version 
static verification devil provides dynamic checking 
dynamic checking taken account experiment 
devil 
axis consists device drivers study 
axis represents rate undetected mutants site 
axis represents number undetected mutants balanced number sites 
analysis data demonstrate propensity introducing undetected errors times lower devil 
observed errors devil part driver nearly detected 
results improved specifications compiler experiment rely earlier version devil exploit features 
undetected site ethernet ide 
percentage undetected errors site devil devil undetected ethernet ide 
number undetected errors 
related device drivers started study graphic display adaptors server 
developed language called gal aimed specifying device drivers context :10.1.1.34.3868
successful proof concept gal covered restricted domain 
restriction allowed model domain single dsl 
udi project aimed making device drivers os platforms 
normalizes api os lower part device drivers 
interface implemented library 
showing timeliness udi complementary devil 
furthermore udi basis development dsls upper layers udi uniform driver interface project result contribution computer companies including compaq hp ibm 
driver library identifies fundamental operations layers 
windows specific driver generators system offer guis aimed specifying main features driver generated 
produce driver skeleton consists invocations coarse grained library functions 
knowledge existing driver generators cover communication device 
languages specifying digital circuits systems existed 
standard language widely domain vhdl 
vhdl specification describes low level logic electronic functionalities device 
devil differs vhdl concentrates communication device device inner workings 
interface described devil specification deduced vhdl specification 

devices rapidly evolving require fast releases drivers driver development received little attention research community 
situation surprising considering level safety drivers offer guarantee integrity host system 
results 
analyzed domain low level device drivers listed obstacles fast production safe drivers 
pointed device drivers form program family described domain specific languages 
domain analysis designed language named devil aimed specifying communication layer device providing typed functional interface 
strong typing language allows consistency domain specific properties automatically checked 
errors detected early development process safety improved 
approach sharply contrasts general purpose language requires writing tedious error prone assembly level code permit useful validation 
assess approach shown devil expressive specify interface large spectrum different pc devices including ethernet video disk sound interrupt dma mouse controllers 
implementations generated specifications shown significant performance loss 
evaluate effectiveness strong typing consistency checking performed mutation testing experiment comparing static error detection approaches 
devil improves productivity providing domainspecific abstractions contribute programming easier 
increased productivity comes reducing undetected errors illustrated mutation analysis devil 
generally specification written devil improves productivity abstracting device interface os independent way allowing systematic reuse 
approach driver development aims designing dsls model upper layers drivers 
dsls possible verify drivers device interface operating system 
availability 
devil specifications implementation compiler checker available www irisa fr compose devil 
acknowledgment 
authors anne fran le julia lawall comments earlier versions robin hansen wrote part devil compiler 
agrawal demillo hsu hsu martin mathur spafford 
design mutant operators programming language 
technical report serc tr software engineering research centre purdue university west lafayette indiana mar 
arnold van deursen res 
algebraic specification language describing financial products 
ieee workshop formal methods application software engineering pages apr 

laboratory application languages 
bendix editors nordic workshop programming environment research aalborg 
technical report aalborg university may 
systems users manual 
url www com 
chandra larus 
experience language writing coherence protocols 
proceedings st usenix conference domain specific languages santa barbara california oct 

user guide 
url www com 
consel marlet 
software methodology language development 
palamidessi glaser meinke editors proceedings international symposium programming language implementation logic programming number lecture notes computer science pages pisa italy sept 
dekker newcomer 
developing windows nt device drivers programmer handbook 
addison wesley edition mar 
demillo mathur 
software artifacts evaluate effectiveness mutation analysis detecting errors production software 
technical report serc tr software engineering research centre purdue university west lafayette indiana feb 
draves jones thompson 
mig mach interface generator 
school computer science carnegie mellon university july 
eide frei ford lepreau lindstrom 
flick flexible optimizing idl compiler 
proceedings acm sigplan conference programming language design implementation pages las vegas nv usa june 
elliott 
modeling interactive multimedia animation embedded language 
proceedings st usenix conference domain specific languages santa barbara california oct 
gupta jagadeesan koutsofios weiss 
generating audits fast way 
proceedings third ieee symposium requirements engineering pages jan 
ieee standards 
standard vhdl language manual 
url standards ieee org 
kamin 
special purpose language picture drawing 
proceedings st usenix conference domain specific languages santa barbara california oct 
knuth 
errors tex software practice experience july 
ladd 
application languages software production 
usenix symposium high level languages new mexico oct 
parnas 
design development program families 
ieee transactions software engineering mar 
project udi 
udi specifications version september 
url www project udi org 
pu black cowan walpole consel 
operating system specialization 
st acm sigplan workshop domain specific languages paris france jan 
computer science technical report university illinois urbana champaign 

linux device drivers 
reilly edition feb 
re consel marlet muller 
devil language 
research report irisa rennes france may 
thibault consel muller 
safe efficient active network programming 
th ieee symposium reliable distributed systems pages west lafayette indiana oct 
thibault marlet consel 
domain specific language video device driver design implementation 
proceedings st usenix conference domain specific languages santa barbara california oct 
thibault marlet consel :10.1.1.34.3868
domain specific languages design implementation application video device drivers generation 
ieee transactions software engineering may june 
version 
