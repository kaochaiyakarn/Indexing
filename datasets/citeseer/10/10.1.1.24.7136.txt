sampling moving window streaming data brian babcock datar rajeev motwani introduce problem sampling moving window items data stream develop chain sample priority sample algorithms problem 
applications timeliness data important data considered interesting 
outdated data expired longer evaluating queries 
consider problem maintaining uniform random sample speci ed size moving window elements data stream 
overview streaming data model see 
memory ecient algorithms problem de nitions moving window 
sequence window size consists data elements arrive timestamp window duration consists data elements arrival timestamp time interval current time 
problem maintain sample speci ed size data arrives online studied past 
standard solution vitter reservoir sampling techniques developed 
reservoir sampling works incoming data contains inserts updates runs diculties data contains deletions case data expires 
solution periodically regenerate sample deletions expensive scan entire database 
approach dealing deletions keep counts common data elements probabilistic counting maintain random sample 
dept computer science stanford univ ca 
mail datar cs stanford edu sequence windows algorithm sampling moving window maintain reservoir sample rst data elements stream maintaining sample arrival new data element causes element sample expire expired element replaced newly arrived element 
algorithm maintains uniform random sample window elements requiring memory store data elements disadvantage highly periodic data element sequence number included sample data element sequence number cn integers 
regularity technique unacceptable applications 
simple algorithm add new data element backing sample probability ck log generate sample size sampling backing sample 
data elements expire removed backing sample 
argument cherno bounds shows size backing sample ck log probability high probability algorithm keep large backing sample supply desired sample size log memory 
expected memory usage previous algorithm log novel technique call chain sample improves preserving high probability upper bound log 
chain sample algorithm described generates sample size 
produce sample size maintain independent chain samples 
chain sample algorithm ith element arrives chosen sam ple probability min ith element chosen sample algorithm selects index element replace expires assuming sample expires 
index picked uniformly random range representing range indexes elements active ith element expires 
element selected index arrives algorithm stores memory chooses index element replace expires building chain elements case expiration current element sample 
expected length chain elements element sample ith oldest non expired element recurrence bounds expected length derive log upper bound memory usage single chain 
number possible chains elements data elements bounded number partitions ordered integer parts chain probability probability chain occuring stirling approximation log probability constant timestamp windows techniques described previous section timestamp windows number data elements moving window may vary time 
developed algorithm call priority sample timestamp windows 
data element arrives assigned priority 
element selected inclusion sample active non expired element highest priority 
maintain sample size generate priorities element choose element highest 
data elements need store memory element timestamp higher priority elements sample 
easily maintain linked list elements property ordering linked list decreasing priority increasing timestamp 
linked list maintained algorithm analogous right spine timestamps fully ordered priorities heap ordered 
argument expected length list active elements nth harmonic number 
furthermore application cherno bound harmonic numbers see demonstrates probability length list exceed ln active elements ln 
log expected memory usage priority sample high probability upper bound memory usage 
authors adam meyerson sergey brin helpful suggestions 
aragon seidel 
randomized search trees 
proc 
th ieee focs 
babu widom 
continuous queries data streams 
technical report stanford university database group march 
gibbons matias poosala 
fast incremental maintenance approximate histograms 
proc 
rd vldb 
matias vitter wang 
dynamic maintenance wavelet histograms 
proc 
th vldb 
mulmuley 
randomized algorithms 
prentice hall 
vitter 
random sampling reservoir 
acm trans 
math 
software 

