interactive repositioning bone fracture segments michael christof salama christian eckstein kai hormann nther greiner university erlangen computer graphics group am erlangen germany email informatik uni erlangen de presents application semiautomatic repositioning bone fractures allows merging fragments 
application developed regard surgeons want simulate position orientation bone fragments 
interactive algorithm includes volumetric collision detection intuitive navigation coarse manual positioning 
additionally optimization process mathematically exact repositioning bone fragments implemented 
order accelerate volumetric collision detection octree structures efficiently implemented hierarchy oriented bounding boxes obb 
collision test uses separating axis theorem fast traversal octree 
improve manual part repositioning process principal axes fragment precalculated initially 
subsequently fragments pre justified user 
optimization process performed powell algorithm multidimensional minimization 
optimal position bone fragments determined voxel metric exploits bounding box hierarchy 
surgical treatment bone fractures typical problem medical practise 
complicated fractures repositioning bone fragments surgical intervention com siemens medical solutions 
erlangen germany plex task extremely negative influence duration intervention patient 
order circumvent idea simulate surgery purely virtual environment tomographic data individually acquired patient 
account possibilities virtual reality applications assist surgeon semi automatic repositioning system allows glue single fragments 
problem similar puzzle applications 
authors describe semi automatically assemble athens scanned stone fragments 
section give overview process repositioning bone fragments 
includes segmentation fragments section visualization techniques section 
section describe interaction volumetric datasets collision detection techniques 
process repositioning fragments introducing powell algorithm section 
results section conclude section 
repositioning bone fragments repositioning procedure described tier approach 
initial step semiautomatic segmentation data performed order classify individual bone fragments 
segmentation basis manual repositioning physicist 
requires vmv stuttgart germany november method interactive visualization volume data allows pick move individual sub volumes 
fast robust algorithm collision detection necessary intuitive navigation space 
manual repositioning optimization process performed efficiently computes optimal position 
step procedure explained detail 
segmentation manual repositioning requires ability independently move bone fragments 
implies necessity divide original ct data set sub volumes transformed separately 
addition coarse subdivision explicit voxel segmentation required order efficiently perform collision detection see section 
bone fragments easily classified ct data applying simple threshold scale inexpensive volume growing technique chosen 
allows separation bone structure surrounding tissue 
results obtained semi automatic approach controlled corrected manually 
visualization variety efficient algorithms direct volume rendering developed years 
solutions range pure software approaches development special purpose hardware methods exploit steadily evolving features general purpose graphics hardware 
high computational cost volume rendering hand caused huge number spatial interpolation operations 
hand large volume data limited memory bandwidth soon bottleneck 
consequence efficient algorithms developed years store volume data local video memory exploit general purpose texturing hardware fast interpolation 
texture methods promising implementations low cost hardware approaches applicable display multiple independent volumes inter penetrate 
displaying multiple data sets blending stack texture slices back front requires complex depth sorting algorithm efficient texture memory management extremely difficult 
alternative commercially available volume rendering library provided volume graphics efficiently handle arbitrary intersecting volumes 
due applied pure software ray casting approach image quality achieved frame rate represent tradeoff compared state art texture approaches 
supports different rendering modes local illumination isosurface display maximum intensity projection available variety platforms win linux solaris irix including multiprocessors 
interaction collision detection guarantee encouraging results techniques detect overlaps fragments navigation necessary 
key issue repositioning bone fragments collision detection fundamental problem interactive applications 
context previous works focus interaction polygonal objects polygon meshes polyhedra splines 
unfortunately approaches suffer fact explicit surfaces required lead results 
natural approach collision detection solution volumetric objects containing voxels describe different interaction behaviors included structures 
papers volumetric collision detection published years :10.1.1.35.3436
approaches try solve problem introducing hierarchical structures octrees sphere trees 
bounding volumes include axis aligned bounding boxes aabb oriented bounding boxes obb including different interaction methods voxels 
ideas solving volumetric collision detection problem adopted 
authors octree sphere tree hierarchies obbs 
additionally interaction voxels volumetric objects probability model object defined predefined probability map 
point inside volume assigned value different levels hierarchy cow foot bone hierarchy depth left depth right 
range seen probability surface crossing point exists 
possible interpretation probability map mentioned opacities context volume rendering 
general collision probability calculated multiplication surface probabilities object certain point 
building hierarchy order create hierarchy accelerated collision detection octree oriented bounding volumes basic primitives datasets rectilinear voxels 
constructing hierarchy stage algorithm described 
firstly algorithm starts bottom leafs merges neighbouring nodes 
approach includes nodes contain relevant information empty voxels second step added reduce overhead collision detection pruning tree top 
node hierarchy assigned value interval represents minimum maximum collision probabilities node 
additionally user specifies solid threshold empty threshold shorten tree 
second stage recursively defined algorithm starts root node breadth traversal 
tak ing current node decisions taken delete 
delete direct child child delete child second stage algorithm reduces tree nodes contain voxels changing values user increases decreases com plexity hierarchy 
shows results cow foot bone presents different levels hierarchy 
collision detection previous section described realize reduced hierarchy volumetric objects 
efficient algorithms interference detection bounding boxes 
authors give cost function large models hierarchical representation objects interference detected describes total cost function interference detection number bounding volume colliding bones showing depth traversal 
interference bones torn apart traversal visible 
pair overlap tests costs testing pair bounding volumes overlap number primitive pairs tested interference costs testing pair primitives interference 
formula gottschalk implemented approach called separating axis theorem rapid interference detection account :10.1.1.35.3436
obbs placed relative rotation translation cf 

additionally radii interval ra separating axis obbs disjoint intervals projection tion fulfilled disjoint intervals simplifications col test :10.1.1.35.3436
hierarchy defined section collision test algorithm interference detection depth traversal described 
alternative breadthfirst traversal possible 
depth traversal results seen 
bone segments interfere hierarchy traversed 
bone fragments torn apart traversed cells visible 
bool collision return false return true collision return true collision return true return false pseudo code depth traversal 
finding suitable initial position optimization process principal axes bone fragments aligned left data set moved rotated common axis close fragment possible 
optimization process constellation bone fragments obtained manual repositioning apply automatic fitting procedure optimally aligning pair sub volumes representing fragments adjoint 
general idea fix fragments move translations rotations criterion measures gap fragments minimal 
considering criterion scalar function depends translation rotation parameters second fragment movement approach understood dimensional optimization problem 
numerical methods exist solving problems chose powell method performed long starting value provided 
order find suitable initial position took approach 
firstly compute principal axes sub volumes 
axis principal segmented volume data set voxels represented centers minimizes average distance defined normalized eigenvector greatest eigenvalue matrix volume centroid 
secondly rotate second fragment principal axes volumes align 
thirdly second data set translated rotated common axis reasonable starting position numerical optimization process cf 

fragments close circumscribe region bone fracture box called volume interest voi cf 

counting number voxels voi volume interest bone fragments 
belong fragment belong second fragment belong fragments data sets overlap voxels yields numbers objective function measures remaining gap fragments computing total number voxels voi 
note fragment fixed constant 
minimizing quantity equivalent placing second data set voi maximally dense penalizing overlapping regions 
results discussion approach implemented prototype application 
experiments datasets tibia fracture broken cow foot hand bones 
order evaluate approach measured time creation hierarchies optimization process 
hierarchy evaluated datasets taken ct arm modalities 
datasets segmented section 
tabular shows time calculation hierarchical octrees tibia fracture cow foot hand bones 
collision detection nearly interactive achieved depending level detail 
navigating volumes size average time table calculation time hierarchy seconds 
dataset dimension time hand table calculation time repositioning cow foot seconds 
number iterations time interference test msecs 
memory required build hierarchy amounts bytes node 
implemented memory manager minimized memory page swapping 
table timings optimization process seen 
calculations broken cow foot breadth traversal number iterations strongly depends quality manual adjustment 
pre justification disadvantageous cases optimization process terminated finding optimal solution 
drawback optimization process calculates mathematically optimum repositioning 
keep mind proceeding additional help physicians medical solution differs mathematical 
reason fractures glued reality objects pressed strongly insures proper union fracture 
allow optimization adapted probability model 
additionally segmentation errors influence results 
algorithm interactive repositioning bone fractures aid 
datasets created standard ct arm devices segmented semi automatically volume growing approaches 
order visualize volumes commercial ray casting library allows rendering independent volumes 
collision detection algorithms necessary navigation bone fragments efficient method obbs oc tree hierarchy 
interference test accelerated separating axis theorem created hierarchy 
order semi automatically reposition fractures volumes pre justified user 
automatic optimization process started powell algorithm 
brady jung nguyen ht nguyen 
phase perspective ray casting interactive volume navigation 
visualization 
cam foran 
accelerated volume rendering tomographic reconstruction texture mapping hardware 
proceedings symposium volume visualization pages 
cohen lin 
collide interactive exact collision detection system large scale environments 
symposium interactive graphics pages 
eckstein 
von 
master thesis university erlangen september 
silver 
shape volumetric collision detection 
proc 
ieee visualization 
alonso serrano 
solving collision detection problem 
ieee computer graphics applications may 
gottschalk lin manocha 
obbtree hierarchical structure rapid interference detection 
proc 
acm sig graph 
kaufman 
collision detection volumetric objects 
proc 
ieee visualization pages 
hubbard 
interactive collision detection 
proc 
ieee symposium research frontiers virtual reality 
levoy 
fast volume rendering shear warp factorization viewing transformation 
proceedings siggraph pages 
mei ner hoffmann stra er 
enabling classification shading texture volume rendering opengl extensions 
visualization 
mei ner stra er 
ii pci card real time volume rendering 
proc 
sig graph eurographics workshop graphics hardware 

virtual assembling past 
ieee computer graphics applications pages march april 
pfister lauer 
real time ray casting system 
proc 
siggraph 
press teukolsky vetterling flannery 
numerical recipes cambridge university press nd edition 
salama engel bauer greiner ertl 
interactive volume rendering standard pc graphics hardware multi textures multi stage rasterization 
proc 
siggraph eurographics workshop graphics hardware 
hooper greenberg 
improved computational methods ray tracing 
acm transactions graphics pages 
ertl 
efficiently graphics hardware volume rendering applications 
proc 
siggraph comp 
graph 
conf 
series 
