equational reasoning partial re ection geuvers wiedijk cs kun nl department computer science nijmegen university netherlands 
modify re ection method enable deal partial functions division 
idea re ection program tactic theorem prover implementation language object language theorem prover 
main ingredients re ection method syntactic encoding class problems interpretation function mapping encoding problem decision function written encodings 
correctness proof decision function gives fast method solving problems 
contribution lies extension re ection method deal equations algebraic structures functions may partial 
primary example theory elds 
re ection method yields problem interpretation function total 
show overcome de ning interpretation relation 
give precise details mathematical terms coq syntax 
program tactic rational verifying equations eld elements 
method proving equations eld elements real numbers theorem prover type theory 
method uses re ection method discussed encode set syntactic expressions inductive data type interpretation function maps syntactic expressions eld elements :10.1.1.35.2343
writes normalization function simpli es syntactic expressions proves function correct interpretations equal eld 
prove equality eld elements nd syntactic expressions method applied successfully ring expressions theorem prover coq implemented ring tactic goal elements ring ring tactic nds underlying syntactic expressions executes normalization function checks equality normal forms 
application re ection method situation elds poses big extra problem syntactic expressions may interpretation interpretation function syntactic expressions actual eld partial 
solution propose write interpretation relation binary relation syntactic expressions eld elements 
prove relation partial function 
precise way approach discussed including technical details implementation coq 
precise encodings coq see 
re ection method general re ection method re ecting part meta language object language 
meta theoretic results prove results langauge 
re ection called internalization level approach meta language level internalised object language 
re ection method see general situations speci class problems decision function 
just restricted theorem prover coq 
theorem prover allows user de ned inductive data types writing executable functions data types user de ned tactics meta language re ection method applied 
classes problems applied syntactic encoding class problems data type say type problem decoding function problem prop prop collection propositions language theorem prover decision function dec problem prove problem dec 
goal verify problem class problems holds nd problem dec proof yields proof dec fails dec obtain information 
note dec complete problem dec dec yields proof construction syntactic encoding original problem done implementation language theorem prover 
convenient user access implementation language condition 
user access meta language re ection method works user construct encoding cumbersome 
rst explain re ection method looking example numbers multiplication 
point precisely essential ingredients 
extend example looking numbers multiplication division 
partiality problem arises 
explain re ection method applied example 
illustration implemented coq tactic solving equations elements eld set multiplication division addition subtraction constants variables 
tactic applied successfully formalization real numbers coq currently working 
equational reasoning re ection method explain re ection method simple example numbers multiplication 
suppose set 
equivalence relation built equality theorem prover user de ned relation congruence 


ii 
associative commutative iii unit respect 
phrased di erently hf 
abelian monoid 
dealing want prove equations 






arbitrary elements prove equation theorem prover properties iii times 
possible write tactic theorem prover just apply steps iii rewrite left right hand side equation sides equation literally 
obviously smart tactic terminate equality hold course better applying iii clever order 
case abelian monoids done rewriting terms normal form shape 


elements decomposed listed alphabetic order 
may variable type term type form 

tactic written meta language access code order pre de ned total order say lexicographic 
note normal form achieved term rewrite system order variables 
clever tactic 
rewrite left right hand side equation normal form check sides equation literally 
ways augment theorem prover proof technique equational reasoning 

add primitives theorem prover 
write meta language tactic built basic primitive steps performs normalization checks equality 

write normalization function language theorem prover prove correct inside theorem prover core tactic 
rst obviously undesirable general gives guarantee method correct add primitive rule likes 
second third pros cons discussed extensively 
experience see especially theorem provers type theory third method convenient wants verify large numbers problems class 
motivate 
re ection type theory abelian monoid hf 
want verify equation 
equality monoid denoted may user de ned long equivalence relation congruence 
note de nitional equality built coq 
usually denoted generated literal equality adding computation steps unfolding de nitions recursion 
de nitional equality decidable built type checker included equality terms de equal equal respect 
introduce inductive type syntactic expressions type variables take type constant expressions containing case just element type theory coq syntax de nition follows 
definition set nat 
inductive set evar de ne semantics expression need valuation assign value variables 
interpretation function connecting level syntactic expressions semantics de ned usual recursion expression 
coq syntax interpretation function de ned follows abelian monoid variable rho fixpoint cases evar rho 
write normalization function sorts variables removes unit apart tail position associates brackets left 
don give encoding coq give examples 
equality internal computational equality theorem prover proof required veri cation veri cation equality performed type checker 
prove key lemma normalization function 
coq terminology construct proof term rho rho rho 
situation depicted diagram states diagram commutes 
solving equation elements amounts 
find tactic check type checker proof trans diagram coq means construct proof term type done proofs symmetry transitivity sym trans 
sym 
trans 
crucial point rho rho rho 
rho rho rho 
tted trans convertible 
case nd rho convertible rho call de ning rho nd rho 
rho 
construct proof term trans rho sym rho 
important points note proof term equality relatively small size compared proof term spelled completely terms congruence 
re exivity symmetry transitivity 
terms refl sym trans just de ned constants 
terms rho generated tactic rho size linear small constant 
proof term completely spelled polynomial size 
unfold de nitions observe bulk proof term 
large extended part roughly size input elements 
proof term linear size input terms 
checking proof term verifying type general take long 
type checking involves serious computation language theorem prover small programming language 
bulk type checker verifying convertible 
compare approach tactic written completely meta 
tactic roughly thing re ection method reduce expressions normal form generate step step proof term veri es reduction correct 
checking proof term take time 
increase speed may gained check user generated proof term general avoid reducing full normal form assuming user sees possible shortcuts 
generating proof term easy re ection method tactic written meta language 
tactics generate full proof term interaction 
note completely user generated proof term equality may fastest type check see realistic 
see re ection approach particularly appealing theorem provers type theory construct proof term remains relatively small re ection 
theorem provers provide required programming language encode normalization interpretation functions 
looking back example encoded coq goal goal 
tactic generates evar evar evar evar 
evar evar evar evar 
function rho de ned way rho evar rho evar rho evar constructs term trans rho sym rho rho 
note rho rho rho evar evar evar evar 
term type checker 
type checks type goal tactic succeeds constructed proof term proving goal type check fails tactic fails 
re ection partial operations explain partial re ection adapting example include division 
view division ternary operation proof type theoretic view 
may alternatively write fz note requires proof applied 
side note principle irrelevance proofs extending equality expressions form proofs 
encoding coq achieved representing fz type pos pairs hb pi equality pos inherited function pos extend structure zero element division operator elds encounter problem unde ned elements 
cause trouble various places 
question syntactic expression allows accepted interpretation choose 
course related question theorem prover allows write meaning may 
second problem naive normalization function rewrite just 
undesirable 
note division problem occur disguised form variable correct side condition 
normalizing expression take interpretation account interpretation subexpressions verify normalization steps correct 
solved problems just mentioned allowing syntactic expressions interpretation 
de ned relation proved partial function 
writing normalization function way expression interpretation expression interpretation syntactic expressions de ne inductive type syntactic expressions type variables take 
type constant expressions containing zero expression type theory coq syntax inductive set evar note doesn depend light syntactic expressions semantic information 
implies allowed formed expression 
interpretation relation semantics expression function interpretation relation need valuation assign value variables 
interpretation relation de ned inductively follows 
vn 
coq structure operations equality expected 
inductive de nition follows 
inductive prop ivar rho evar idiv nz nz 
note just take modulo equality similarly constant variables operators 
partial function modulo equality technical terms correctness normalization proved version normalization correctness normalization function brings expressions interpretation normal forms wm wm variables lists wm disjoint 
creates mutually exclusive lists sorted variables representing enumerator representing denominator 
sorting lists multiplicative expressions 
case encounters enumerator expression replaced interpretation 
expressions interpretation normalization function return 
don give encoding coq restrict examples 
understand way works follows 

expression sequences variables constants created rst representing enumerator second denominator 
intention interpretation interpretation 

sequences put normal form normalization procedure multiplicative expressions 

variables occur canceled units removed replaced contains note tacitly identify sequence expression arises consecutively applying components 
way implemented coq separate list data structure encode lists de ne append operation denote 
denote expressions multiplicative normal form multiplicative normal form matter fact doesn steps sequentially slightly smarter faster way 
proving correctness preserve property denominators 
rst step crucial 
second step reordering variables prove reordering preserves property easy 
third step prove preserved cancellation case 

rst step nice recursion interpretation induction interpretation di erent interpretation di erent 
similarly interpretation induction interpretation di erent interpretation di erent 
correctness proof works doesn bother interpretation expressions operates written way fact interpretation implies simple way sketched interpretation 
note term rewriting system orders variables importantly works properly expressions interpretation 
information expression start derived existing ned couldn write theorem prover 
know rst interpretation virtue construction property preserved 
prove key lemmas 
extensionality extensionality states really partial function equality 
re ection re ection method solving nd tactic construct see proof terms statements check type checker means convertible proof applied respectively extensionality applied 
just case re ection section precise proof term constructed type checks type terms shown equal equational theory 
section exhibit proof term 
main type checking proof term lies execution algorithm done type checker 
problem remains 
interpretation relation arise proof obligations just nd encodings prove encodings 
new goals course don want user take care goals tactic solve 
problem dealt section 
proof loaded syntactic objects second step partial re ection method need proofs way tactic construct tactic extracts proof term possible implemented 
chosen data type expressions proofs 
strategy doing ts type theoretic approach create syntactic expressions proof objects inside forgetful function interpretation function key property proved ej note depends know semantics type heavy syntactic expressions including proof terms 
dependent type coq terms de ned inductive xe set xe rho xe xe xe xe xe xe xe nz xe nz 
type represents type heavy syntactic expressions interpretation interpretation function hold constant domain 
coq terms de ne xi xe xe note de ne interpretation induction just return intended interpretation 
obligation prove underlying light syntactic expression interpretation 
forgetful function extracting light syntactic expression maps heavy syntactic expressions light ones 
coq terms fixpoint xx xe cases evar xx xx xx xx 
de ned induction xe 
maps extract components syntactic expression semantic element heavy encoding 
key result second extraction interpretation rst jxj just jxj 
tactic works follows problem nd tactic ej obtain proof terms statements check type checker ej tactic creates type indirectly creating types diagram situation follows 
outside triangles commute due large middle triangle commutes due extensionality triangles commute due 
proof term method explicit extensionality rho ne rho rho xe rho rho xe xe xe correspond de ned xx xe 
xx xe 
ne 
term typed convertible 
normalizing proof loaded objects presence type type 
de ne normalization function operate heavy syntactic expressions type possible yields simpler diagram desirable computation reducing normal form heavier 
dicult program having take proof terms account levels re ection approach visible slightly blurring exposition 
reasons completeness constructed see function proofs correct 
ideally amount diagram dependent type value output normalization function literally input value provably equal 
construct term xn xe xe 
construct xn fe fe fe type pairs xe 
type theoretic terms type dependent pairs hf ei prove hf ei yields hf provably equal cast purely mathematical terms situation follows 
de ne wf predicate syntactic expressions stating interpretation formed 
de ned follows 
wf maps lift fe wf fe wf furthermore construct proof object wf wf read normalization function diagram 
lift lift fe wf fe wf proof term shows function set formed expressions 
correctness interpretation function mapping heavy syntactic expressions elements 
matter fact just rst projection 
partial re ection practice approach partial re ection successfully current fta project fundamental theorem algebra 
tactic called rational proving equalities 
tactic implemented outlined 
just want prove equality equality rewrite goal di erent form 
order explain implemented rewrite tactics rst say equality fta project 
equality just congruence relation respected operations certain predicates replace equals equals expression built terms respecting equality 
stands contrast standard leibniz equality coq leibniz equals may replaced proposition 
instance lemma wd left de ned rewriting tactics important predicate respects equality 
instance tactic step left applies goal rational solve equation returns new goal de ned apply wd left rational rational tactic prove equality new inequality example illustrates 
note denotes divided proof side condition variable 
extended re ection method include partial functions 
power method lies fact new proof obligations arise 
user wants prove simple equation involving partial functions system generate new set goals order prove partiality side conditions ful lled 
necessary side conditions ful lled proven correctness normalization function 
phrased di erently normalization preserves de nedness 
crucial point fact syntactic expressions may unde ned ones tactic generates simple reason encodings de ned semantic objects theorem prover 
normalization function starts syntactic expression de ned simple reason semantic object interpretation de nedness preserved normalization 
side point fact encoding yields de ned syntactic expression statement meta level 
encoding function meta function expect state literally theorem prover 
state capture want say trivially true variable say encoding function 
actual implementation method tactic solving equations eld elements shown useful technique 
believe generally applicable situations partiality occurs 
henk barendregt useful discussions subject anonymous referees comments 

barthe barendregt level approach lean proof checking 

re ection build ecient certi ed decision procedures 
martin abadi takahashi ito editors tacs volume 
lncs springerverlag 

huet 
coq proof assistant manual version inria rocquencourt cnrs ens lyon 

fundamental theorem algebra project computer science university nijmegen netherlands 
see www cs kun nl gi projects fta 
harrison meta theory re ection theorem proving survey critique technical report crc sri international cambridge computer science research center 

howe computational meta theory nuprl proceedings ninth international conference automated deduction eds 
lusk overbeek lncs pp 


geuvers proof computation coq appear tcs 
