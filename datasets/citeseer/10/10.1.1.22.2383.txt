see generic software exploration environment jean marie favre laboratoire lsr imag rue de la domaine universitaire bp grenoble cedex france www adele imag fr large software products difficult understand 
way cope problem provide tools generating different software views 
unfortunately different entity types relationships large software product building specific tool view cost effective 
presents see generic software exploration environment 
see object oriented framework set customizable tools 
environment lines needed produce graphical views virtually source data 
see successfully applied improve understanding different software artifacts including multi millions loc software 

large software products complex difficult understand 
factors contribute complexity number entities relationships 
number software entities relationships clearly plays important role comprehension process 
instance dependency graph module level contains nodes edges 
understanding structure may really difficult tough graph single entity type module single relation type dependency 
number types software models 
complexity due large number entity relationship types involved 
complex software products may hundreds types model concepts variables statements components versions bug reports test cases libraries product lines large set types structured software models ranging programming models configuration management models architectural models cases programming model defined standardized stable 
models vary evolve time 
diversity software representations 
eventually software artifact concrete representations 
source code best known software representation software representations including instance makefiles dll configuration files software representations low level languages raw file formats intended managed specific tools people special skills 
result incremental design efficiency understandability mind 
diversity perspectives software 
perspective corresponds kind activity undertaken software engineer playing role 
large software products viewed different perspectives 
simply put large software products difficult understand entities different types concrete representations usually designed software comprehension mind 
common approach cope understanding problems consists providing software engineers reverse engineering visualization tools order reduce cognitive effort :10.1.1.25.9780
tools possible perspective extract subset software entities focusing subset software model 
visualization techniques produce suitable graphical representations 
software exploration tools enable software engineers navigate view perspective :10.1.1.25.9780
tools proposed rigi pbs cia hy moose codecrawler spool seesoft dali 
techniques integrated commercial case tools including instance call graphs class inheritance browsers 
main body software exploration qualified specific approach specific tool provided specific perspective 
effective situations approach particularly weak context large software companies software models covered specific tools cost building new specific tool may prohibitive 
results situations software companies store maintain interesting information don really cost presenting information useful way high 
concentrates generic approach 
idea provide framework easy build specific tools generic components 
strongly believe approach needed domain software exploration context large companies 
presents see generic software exploration environment 
rest structured follows 
section presents requirements 
section describes approach 
section illustrates approach presenting key aspects see object oriented framework 
section illustrates different tools see framework 
section provides discussion 

see requirements 
background main trend research reverse engineering focuses programming small models 
contrast requirements experience building reverse engineering tools deal nontraditional models including configuration management models component models 
particular need generic tools put evidence context collaboration lsr laboratory large software dassault syst mes ds 
ds world leader cad cam markets main product lines 
study focused large software product developed developers 
software huge amount entities loc classes files versions 
relies wide range software models software representations 
aims lsr ds collaboration formalize software models ds component model om 
built specific exploration tool om visualization tool dedicated visualization exploration om components 
ability visualize existing components appreciated components built ds 
time om components graphically represented concise understandable way 
important achievement components thousands lines code spread files 
tool represents significant development effort 
success version naturally brought problem evolution generalization 
interviews ds software engineers revealed existence perspectives software models 
showed great diversity potential users exploration tools 
concluded context needed generic software exploration environment see allows produce arbitrary set views arbitrary set data cost 

requirements background described defined set requirements see similar requirements reported literature different ways 
concentrates requirements 
multi source exploration 
exploration environment independent source data 
possible display virtually kind structured data 
views result fusion different heterogeneous data sources 
possible integrate environment new data source programmatically dynamically extensive knowledge structure 
multi visualization exploration 
possible represent piece information different ways :10.1.1.25.9780
swapping visualization technique easy 
possible customize views interactively 
customizable exploration 
exploration needs skills greatly vary large 
environment able provide wide range powerful features experienced explorer small set simple functions novice 
environment provide features order create specific tools specific tasks 
case probably better term inspection exploration 
graphical interface specific inspection tools customized fulfill specific needs efficient way 
instance interfaces consist specific views screen arranged precise layout 

see approach today large successful software companies ds strongly rely object oriented oo component cb techniques 
believe availability techniques provide new opportunities understanding reverse engineering tools particular generic software exploration environment 
approach consists providing object oriented framework set customizable tools tool builder 

object oriented framework providing huge generic tool believe step provide object oriented framework dedicated software exploration 
simply put oo framework organized set packages defined interfaces 
framework approach brings flexibility extensibility making assumption way 
possible reuse part framework compose elements ways extend framework new technique available 

set customizable tools set customizable tools delivered framework 
tools serve illustrate framework 
enable user get immediate functionality requiring programming effort 
depending intended audience different tools proposed ranging tools user friendly interface limited expressive power highly customizable environments interpreter high level query language 
interface common idea tools provide way adapted specific needs 

tool builder customizable tools simple tools may limited scope highly generic tools complex 
industrial context tools daily hundreds software engineers designed carefully 
programmatic effort required build specific tools pieces supplied framework may considered high 
case tool builder offer alternative 
idea provide tool generator referred tool builder making possible built specific exploration tool interactively assembling components 
approach component technology exemplified java beans component model designed sun 
currently object oriented framework customizable tools implemented 
process designing new component model top java beans get rid limitations 

see framework see framework supports large set features illustrate approach focus important aspects exploration tools extraction information software visualization presentation information 
see kind components source components visualization components 

source components source components components responsible giving access software artifacts uniform way irrespective actual software representation software models software meta models 
took solution combining object oriented functional paradigms 
integration done different context including programming languages temporal data bases 
give rough idea approach focusing central parts integration concept function object oriented world 
oo framework see interfaces associated implementations 
framework centered simple interfaces 
interfaces define requirements data explored simple possible 
implementing single interface successor interface sufficient get see functionality 
concentrates interface 

successor interface 
successor interface object oriented model notion function mathematical sense term precise notion multi valued function 
multi valued function function yielding object collection objects 
interface successor collection object strongest point interface simplicity contains single method 
easy implement reducing effort required add new data source 
note interface designed return collection object collection versatile data type representing abstraction sets multi sets bags sequences single object easily converted singleton collection 
simple interface extremely versatile concept multi valued function sufficient navigate entities get attributes instance implementing file browser require provide implementation returning directory set files directories composed 
abstraction provided interface see able deal kind implementation 
hand implementation function may data structure representing function extension typically function seen set pair values 
hand function may represented comprehension say means piece code computing fly object set successors 
see interesting feature approach 
successor interface possible explore virtually source data programmer provide specific implementation suited specific data source 
point especially easy method implemented 
full power see framework comes availability wide range implementations 
set implementations provided kinds basic generic implementations play role wrappers piece data represented extension comprehension compositional implementations implementations combining implementations basic composite build new implementations 
see composition done programmatically interactively 

basic implementations extension 
generic implementation wrapping data structures including text files databases object attributes 
wrappers text files 
flat ascii file formats probably common ways represent explicitly software entities relations 
developed set wrappers build successors informations stored files 
diversity file formats handled different parameterized implementations 
instance particular implementation successor interface set string pairs stored file 
class provides various constructors methods allowing set value parameters field separators default values easy deal common cases 
similarly wrappers provided support rigi standard file format 
currently studying handle xml files gxl format 
wrappers databases 
see support access relational databases columns relational table explicit representation multi valued function successor 
interoperability relational databases simple jdbc interface 
industrial standard enables interoperability virtually relational database system remotely located 
see provides support object oriented databases 
particular implemented bridge object store database system context collaboration dassault systeme 
currently interoperability object oriented database systems requires effort goal systems transparent access database 
connected exploring kind data just simple exploring graph objects memory 
wrappers attributes 
dealing arbitrary structure objects represented memory powerful features see reverse engineering environments require information extracted software stored persistent way see able get information directly tool generates connected see process way 
instance possible get information syntax tree directly generated parser long data structure accessed see process 
features realized directly means implementations provided see implementations wrap associative data structures hashtables successors 
attribute class viewed successor yielding object value specified attribute 
single implementation called 
implementation takes name attribute parameter uses introspection access attribute 
feature possible access arbitrary set objects writing piece code 

basic implementations comprehension 
see require information software represented explicitly basic implementation handle data comprehension say means piece code 
includes example wrappers methods shell scripts database queries 
wrappers object methods 
object methods natural candidates implement successor interface 
possible 
instance expression constructs unique successor required build file browser name java method returning directory content 
new wrappers batch commands 
large companies software repositories available batch commands shell scripts 
typically case configuration management systems 
important provide wrappers able exploit kind information 
instance takes parameter string describing command executed 
different parameters indicate parse resulting output 
wrappers database queries 
said information stored database directly accessed 
derived information represented comprehension obtained execution queries 
query instance sql query potential implementation successor interface 

compositional implementations 
basic implementations give access existing data represented explicitly 
cases necessary derive new information data 
compositional implementations enable create complex successors connecting elementary successors defined operators 
see provides large set operators cover wide range needs 
set operators provided see directly derived mathematical toolkit formal specification language set theory 
instance implementation takes successors parameters 
object yields union results returned successors 
similarly returns composition successors second applied result 
interestingly computes transitive closure successor say object returns set objects directly indirectly accessible 
takes predicate successor return objects satisfying predicate see include aggregate functions cardinality sum compositional implementations provided deal non functional requirements 
operators effect results yield underlying successor allow instance trade offs execution speed memory requirement 
case operator successor argument memorizing fly calls function avoid unnecessary recomputation technique known memoization functional languages 
particular operator convert function described comprehension function represented extension improving greatly performances computing intensive function 
optionally result persistent 

programmatic vs interactive composition 
compositional implementations described successors implement successor interface recursively composed build sophisticated functions 
particular possible merge different sources data transparent way instance data coming relational database transitive closure data obtained plain files composed functions implemented batch system buffered avoid unnecessary computation 
java language provides convenient notation inline classes enabling programmer easily include java code arbitrary successor expressions 
exemplified piece code 
new new new new successor public collection object piece java code new code sight complicated simpler implemented scratch 
certainly safer solution require implement transitive closure buffering algorithms hand 
error prone 
ease composition successor implementations see provides textual language giving concise precise notation different operators 
instance example transitive closure method composed getname method successor returns directory name files contains directly indirectly 
notation operators directly inspired notation 
new getname feature useful programmatic approach main benefit comes ability integrate easily textual language interactive exploration tools 
point illustrated section 
language seen functional query language 
current version see supports textual languages currently extending environment support graphical syntax similar spirit hy query language 
note implicit type conversion takes places expressions required obtain typed expression 
helps expressions interactive way 
language concise 

visualization components interfaces implementations described deal sources data visualization constitutes important part see framework 
interfaces required visualization components expressed terms structures set theory sequence graph tree words data displayed visualization expressed terms type constructors turn expressed terms set functions 
uniform treatment components greatly helps connection source components visualization components 
concrete point view see includes large set visualization components 
see java bean component model extensive swing framework provided java environment 
particular framework provided valuable components visualize rich set structures including sequences tables trees hyper texts complete spectrum visualization techniques see integrates wrappers various visualization components grappa java version dot graph visualization tool 
developed scratch different visualization components tree maps line sequences inspired 
visualization techniques currently available see selected ability display large sets data 
tough wide range components included see possible add environment new visualization components dynamically just source components 
possible include specific components 
interesting aspect see visualization component described encapsulated support uniform interface 
views described format model specifies software artifacts visualize renderer indicates artifacts mapped graphical entities 
approach followed modern visualization frameworks improved see model renderer expressed terms successors making easy produce new view 
simplify production see framework provides set interfaces implementations dedicated visualization 
instance interface intended map objects colors 
implementation maps specified set values specified set colors example function represented extension set pair value color 
similarly maps range values gradation color implementations possible combine features 
implementations provided edit renderer properties interactively panels color save 
specific component defined consistently easy switch visualization technique 
instance hierarchical structure visualized swing jtree graph displayed grappa tree map just changing parameter keeping model 

see customizable tools usually best ways evaluate software exploration tool see 
case see important keep mind power environment directly visible resides see framework 
section demonstration tools included see environment briefly illustration approach see interpreter see viewer 
simple tools proved usable large scale context dassault syst software classes 
context suppose goal explore java standard library java classes delivered jdk 
tools modification loading ds repository session connection source components extracting information java programs 

example see interpreter demonstration tool called see interpreter see 
framework tool lines java code 

features 
tool aims give access see language rudimentary interface see 
simply put see language functional language giving access compositional operators supplied framework 
step interaction see interpreter consists entering new command 
command immediately interpreted result displayed textual graphical form 
history session displayed textual form top 
result command displayed graphically bottom 
basically kinds commands expressions queries definitions new symbols letx directives controlling behavior interpreter loading new source component 
interpreted language commands saved form program 
particular possible create specific tool program tool available large novice explorers 

example scenario 
illustrate see interpreter assume want study relationship composition packages inheritance relationship instance want know package packages contain super classes classes words want know inheritance relationship crosses package boundaries 
want build scratch specific tool 
selecting adequate source components 
study problem see hand 
building java parser far expensive see source components available extract necessary information 
java introspection library provided java environment possible class get super class method 
unfortunately library provide support deal packages 
instance possible package get list classes contains 
starting write tedious piece code idea check internet piece code providing functionality 
search tools freely available 
main page describes shortly functionality tool 
page sentence reflect finds packages system 
get information tool downloaded 
loading selected source components see specific tool specific set features 
see point view considered source component provides way extract information java programs 
start session see interpreter load java component see step 
exploring source components 
just loaded new component know 
fortunately see explore software model implemented component just piece software 
see supports exploration software models exploration meta information software 
topic important feature see scope 
step shown scenario fit history window 
important learn method gives access packages 
building new functions getting result 
short name method 
function tested package example 
session see interpreter java lang reflect 
define successor function need 
successor expression package getname means want names packages contain super classes classes contained package 
main benefit interpreted language try immediately 
output learn java lang reflect package uses packages java lang java security 
simple view built see viewer superclasses interfaces class java lang reflect 
get global view function returning graph defined tested 
want 
got graph bottom window 
see core packages java strongly connected 
creating new specific tool 
just defined interactively new function parameter package names displaying graph inheritance packages 
function useful may want save program just built available team 
software engineers know see language supply specific tool simplified interface text field enter name package panel display graph 
tool standalone integrated plug programming environment 
currently see able create plug ins kawa programming environment 
function called directly kawa menus 
integration entirely transparent novice explorer 
favorite programming environment knowing see plug 

example see viewer complex language build complex expressions see viewer panels buttons menus guide explorer 
main idea tool views specified high level abstraction wide range explorers long know information required 

features 
see viewer demonstration tool 
tough current interface considerably improved tool proved useful practice 
illustrated figures views described different fields specifying information display model display renderer 
precise line specification specifies root entities 
line indicates relationship displayed 
lines specify rendering providing value different properties color nodes space nodes includes example rendering specification 
figures depict graphical user interface edition rendering specification done textual editing text fields 
configuration rendering done sophisticated graphical interface panels buttons slide bars just java bean component model edition component configuration responsibility shared environment component 
words visualization component provide configuration editor piece code 
default editor 
shown case properties specified means sequence string pair values color width 
usually property java bean component set constant value 
approach possible instance indicate background color component yellow 
approach retained see powerful property set constant function 
possible instance set color node information related node 
functions directly expressed terms model making connection visualization components source components 
concrete point view different expressions filling various fields successor expressions arbitrary complexity 
expert explorer sophisticated expressions novice explorers may simple ones 
major benefit interactive system see viewer explorer build view specification incrementally getting step associated result 
particular start instance blank lines see default values enable get immediately result 
possible successive adjustments adding changing properties pressing ok button update view 
considered satisfactory views named saved novice explorers load available views explore software knowledge see language 

example session 
illustrate see interpreter continue scenario started previous section somebody liked ability visualize inheritance level packages wants get precise picture level classes 
starting see viewer 
starts see viewer initial environment including functions defined section 
functions available tool starts tool behavior just specialized exploration java programs 
particular menu line contains items class classes package indicates different heterogeneous source components cooperate scenes give results 
building simple view 
start explorer just wants see hierarchy classes interfaces class 
selects class item menu enters name class instance swing press ok entities 
incremental design view software appears screen 
setting model line displays graph depicted right just learned name methods contextual menu displayed class just displayed 
tough rendering lines left blank default values applied result satisfactory 
note default tree displayed left 
alternate view displays exactly information different format 
explorer choose best way interact data depending task 
similarly table generated automatically shown figures 
defining new metrics visualizing 
moment colleague enters room proceedings wcre hand 
just read hybrid reverse engineering approach combining metrics program visualization demeyer 
proposed techniques appealing wants see effectiveness 
decide improve existing view adding metrics 
problem get metrics display 
menu learn visualization components currently loaded grappa supports width height properties node 
respect availability metrics metrics directly provided available source components 
matter 
see derive new metrics existing data compute fly need change software models just loaded 
possible get list methods fields declared class 
counting elements gives simple interesting metrics 
decide set rendering specification properties width height pressing ok button gives new view information different perspective strong emphasis put big classes 
shows classes component far complex ones 
mapping package colors 
suggested color map third metric 
described section easy map range values color 
case current scenario explorers prefer study relationship inheritance composition packages see section decide map color class package containing class 
interestingly adding property color get result 
obviously function returns package color 
issue said see able handle type mismatches inserts type conversion operators necessary 
case see builds automatically new mapping distinct values random color ensuring classes package represented color 
ability create automatically important feature practice possible know priori packages involved inheritance graph packages may involved explorers may particular preferences color coding 
tough packages randomly mapped color feel need explorers may look automatically generated 
components explorers change interactively save load existing ones helps maintaining consistency views 
case scenario explorers don change just want see change color inheritance path 
adding information view 
view currently displayed interesting gives global view 
interesting possible get information particular class just moving cursor 
tip attribute visualization component 
adding property tip getname display name class explorers decide provide information 
html format improved readability message displayed 
pressing ok moving cursor class possible test immediately effect different html markers 
technique explorers learn class really big declares methods 
just moving cursor component class left learn class declares methods attributes 
getting global view large piece software 
result satisfactory time see view just designed scales 
explorers decide look set classes included packages java awt swing packages build graphical interfaces java language 
starting class graph traversal start classes contained packages 
get clear picture class inheritance displayed 
changing accordingly model specification rendering options interesting picture appears screen computing view takes seconds pc mhz processor 
displays inheritance relationships classes 
difference size classes striking 
dozen big classes remaining really small 
interestingly big classes roughly hierarchy 
brown classes bottom hierarchy green ones top 
moving cursor big classes explorers rapidly recognize graph just studied previously component biggest classes 
picture clearly shows swing toolkit awt toolkit 
confirm knowledge experienced java programmer 
closer examination reveals interesting points 
instance disconnected nodes java interfaces linked super class inheritance interfaces classes 
usage interface notion low framework 
attention explorers drawn node marked peculiar shape fields methods 
class considered suspect sight 
moving cursor reveals name java awt event 
false alarm class deals keystrokes definition constant fields 
region interesting note color associated class constitutes sub tree nodes sub tree blue 
indicates cohesion package variants concept grouped single package class events package name java awt event 
moment colleague enter room 
impressed view displayed screen wants slightly change display age author class 
responsible configuration management team knows extract information batch commands 
session continues 

discussion various remarks scenario described 
see exploration tool 
see viewer interpreter simple demonstration tools simple interface 
tools tip iceberg 
full power see lies flexibility object oriented framework 
particular possible reuse classes framework create application 
see create plug integrated existing programming environment 
approach contrasts exploration tools 
see linked particular software model 
see restricted way exploration java programs 
see applied different sources data including instance file structures software processes component models see explore piece data software 
see linked particular representation 
scenario described integration piece code extracting information software 
explained section see able access information flat files databases batch systems see philosophy consists looking data unnecessary data conversion 
fact ability deal representation comprehension strongest features see contrast existing exploration tools data previously extracted represented extension means file exchange format rsf gxl 
approach limitations size exchanged gxl files somewhat large api access information program considerably efficient convenient stream gxl 
see 
inheritance relationship smoothly integrates approaches allowing explore demand huge software structures 
see linked particular visualization 
exploration tools particular visualization technique 
instance rigi environment centered graph visualization 
see bound specific technique 
new visualization components loaded dynamically 

large software companies manage large software products 
deal software entities software models software representations 
tools help understanding huge amount information problem able build tools evolve 
claim generic approach taken context 
see generic software exploration environment 
possible specify create new exploration tools easily 
see really generic depend particular kind data particular visualization technique 
shown lines necessary build new views get interesting results 
concrete point view see object oriented framework set customizable tools built top 
small set interfaces wide range implementations see framework simple powerful 
instance see interpreter lines java code 
framework naturally continue evolve set associated tools 
interesting aspect see new source components connected fly exploration session 
particular explorer may continue exploration unknown source components 
case problem explore software entities explore software model 
believe point constitutes important research issue 
see provides solutions address problem 
topic 
currently process defining new component model top java beans 
component model form basis see tool builder develop reverse engineering components 
fact strongly believe merging reverse engineering component software engineering promising approach 
steps direction hand see applied reverse engineering component software hand describes see reverse engineering software components 
information see url www adele imag fr 

spiegel front java technical report tr univ berlin dec 
www inf fu berlin de cia ciao www research att com ciao dahm byte code engineering api tech 
report tr univ berlin dec 
david fly class browser www docs uu se demeyer ducasse lanza 
hybrid reverse engineering approach combining metrics program visualisation proc 
working conference reverse engineering wcre ieee 
eick steffen sumner seesoft tool visualizing line oriented software statistics ieee trans 
software engineering vol 
nov 
favre preprocessors point view proc 
int 
conf 
software maintenance proc 
working conference reverse engineering favre understanding large proc 
th international workshop program comprehension iwpc ieee may 
favre rigorous approach maintenance large portable software proc 
european conference software maintenance reengineering ieee mar 
favre estublier reverse engineering large component software product proc 
european conf 
software maintenance reengineering 
graphviz www graphviz org holt winter sch rr gxl standard exchange format tech 
report univ koblenz landau may 
holt pbs portable bookshelf tools www turing toronto edu www com home austin rr com htm kawa ide 
www tek tools com kawa kazman carriere view extraction view fusion architectural understanding proc 
th int 
conference software reuse 
lethbridge pak integrated personal management software exploration tool proc 
nd int 
symp 
constructing software engineering tools coset june 
choi batory object oriented functional data language ieee transactions software engineering vol 
nov 
mendelzon reverse engineering visualizing querying muller rigi www rigi csc uvic ca nguyen favre estublier exploring large software products proc 
paris dec french 
perry software interconnection models proc 
th int 
conf 
software engineering ieee march 
keller bridging program comprehension tools design navigation proc 
intnl 
conf 
software maintenance oct 
tichelaar lanza ducasse moose extensible language independent reengineering object oriented systems proc 
nd int 
symp 
constructing software engineering tools june 
favre helping various stakeholders understand large software product submitted european conference component software engineering spivey notation prentice hall storey fracchia ller cognitive design elements support construction mental model software exploration proc :10.1.1.25.9780
th international workshop program comprehension ieee may 
sun java sun com tilley paul smith framework program understanding proc 
th international workshop program comprehension iwpc 
wuu dayal uniform model temporal versioned object oriented databases chapter tansel editors temporal databases theory design implementation benjamin cummings publishing pages 
