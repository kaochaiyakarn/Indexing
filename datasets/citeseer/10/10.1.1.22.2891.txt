locating program features execution slices eric wong bellcore morristown nj bellcore com gokhale university california riverside ca cs ucr edu joseph horgan bellcore morristown nj bellcore com trivedi duke university durham nc kst ee duke edu important step efficient software maintenance locate code relevant particular feature 
report study applying execution slice technique reliability performance evaluator identify code unique feature common group features 
supported tools called vue program features source code tracked files functions lines code decisions uses 
study suggests technique provide software programmers maintainers starting point quick program understanding 
keywords program comprehension program feature execution slice invoking test excluding test unique code common code modules designed software system exhibit high degree cohesion low degree coupling module addresses specific subfunction requirements simple interface viewed parts program structure 
cohesion measure relative functional strength module natural extension concept information hiding 
cohesive module ideally just thing 
coupling measure interconnection modules program structure depends interface complexity modules 
high cohesion low coupling desirable characteristics achieving practice extremely difficult 
low cohesion high coupling inevitable language parameters ubiquitous results program features mixed code 
programmers early development stage system may try follow certain standards ensure clear mapping feature corresponding code segments 
development continues pressure keep system operational probably lead exclusion traceability 
software ages program features implemented modules seemingly unrelated 
programmer maintainer understanding deteriorate delocalized structures lead serious maintenance errors 
important step efficient software maintenance locate code relevant particular feature 
methods achieving 
systematic approach followed requires complete understanding program behavior code modification 
second needed approach adopted requires partial understanding program locate quickly possible certain code segments need changed desired enhancement bug fixing 
systematic approach provides understanding existing interactions program features impractical large complex systems contain millions lines code 
hand needed approach expensive time consuming tends non local interactions features 
interactions critical avoiding unexpected side effects code modification 
need arises identify parts system crucial programmer maintainer understand 
possible solution read documentation studies conducted effective design documentation compensate delocalized plans 
uncommon find inadequate incomplete documentation system 
document available programmers maintainers may reluctant read 
faster efficient way identifying important segments code system speak 
reports study issue 
static dynamic slices abstraction help programmers maintainers locate implementation different features software system 
static slice effective identifying code uniquely related feature general includes larger portion program code great deal common utility code 
hand collecting dynamic slices may consume excessive time file space 
execution slice technique execution slice set program components basic blocks decisions uses uses executed test input 
compared static dynamic techniques clear advantage applying approach complete traceability test collected properly testing see section details information reused directly additional sophisticated slicing analysis 
result testers code coverage improve confidence quality programmers maintainers benefit information efficiently locate code implements features 
explanation basic block decision section 
effectiveness execution slice technique depends important factors shown 
ffl heuristics studies reported heuristics identify code feature point view 
studies touch specific part problem 
general notion execution slice technique incorrect assume single heuristic applicable scenarios 
fact depending need different heuristics applied mapping program features code 
result developing novel heuristics experimenting explore potential provide maximum benefits 
heuristics identify code unique feature section common group features section 
discuss section impact feature implementation invoking excluding tests selecting heuristic 
ffl test cases indicated code identified execution slice technique depends heuristic applied features implemented tests selected 
section discuss relation invoking excluding tests terms execution slices 
relationship depends heavily goal looking code unique feature common group features 
section explore word solution focused invoking tests exist respect feature located test exhibit feature 
discussions explorations completely ignored slightly acknowledged previous works provide important guidance helping select appropriate tests 
ffl granularity program features study located execution slices respect controlflow dataflow analyses provide different details controlflow 
implies code unique feature common group features different levels granularity basic blocks decisions uses uses respect branch line code 
importance locating code finer granularity levels explained section 
ffl tool support important factor technique applicable real life contexts supported automated tools 
tools study generate execution slice respect test 
provide graphical interface features implemented program heuristics test cases granularity tool support technique slice execution important factors execution slice technique visualizing code related feature features see figures section 
compared tool shows code annotated ascii interface believe tools technique attractive practitioners 
clear close relationship heuristic applied invoking excluding tests selected way feature implemented 
profound impact code identified execution slice technique 
addition heuristics provide thorough discussion impact factors quality code identified prior efforts focused definition demonstration selection heuristics 
remainder organized follows 
section explains general concepts including heuristics finding code selection invoking excluding tests division programs components 
section describes tool support execution slice technique 
section presents case study show merits technique 
lessons learned study discussed section 
appear section 
general concepts program feature viewed description functionality specification 
way describe features program specification 
example specification unix program wc count number lines words characters input 
specify features respect functionalities returns number lines returns number words returns number characters 
suppose programmers maintainers understand features program considered determine feature exercised test 
program feature invoking test test executed shows functionality excluding test 
example unix program 
suppose functionality count number lines 
test say wc data returns number lines file data invoking test test say wc data gives number words number lines file data excluding test 
invoking test said focused feature exhibits feature features 
example focused test respect counts number lines 
true test wc data referred returns number lines file data 
addition number lines returns number words characters 
exhibits features count number words characters respectively 
ways execution slices invoking excluding tests may compared identify pieces code related example form union execution slices invoking tests find set code implement clear problem approach code may included invoking tests exhibit features invoking tests focused 
create intersection execution slices identify code executed test exhibits impossible general identify invoking excluding tests practical alternative run small carefully selected set tests say exhibiting 
consider tests possible tests program 
invoking excluding represent program components executed test exhibits exhibit respectively 
similarly invoking set components executed invoking test heuristics finding code unique feature simple approach compare execution slice just invoking test excluding test 
minimize amount relevant code identified invoking test selected may smallest execution slice terms number blocks decisions uses uses slice excluding test selected may largest execution slice 
ideally tests focused invoking tests approach identify code executed invoking test excluding test invoking excluding 
words code union invoking tests union excluding tests identified 
third approach similar second identify program components commonly executed invoking tests excluding test invoking excluding 
implies identified program components intersection invoking tests union excluding tests 
result select program components executed feature exhibited 
depending features implemented programmers maintainers may try approaches see section construct approaches order find best set code related feature 
study reported section second approach works best identifying code uniquely related features 
summarize approach follows 
find invoking includes components implement may implement features 

find excluding includes components implement features exhibited set excluding tests 
may include code segments common features 

subtract excluding invoking components executed tests exhibit exhibit uniquely related heuristics finding code common feature code common pair features say executed test exhibits test exhibits way find code run program carefully selected tests exhibit features tests exhibit features 
take intersection set code related feature set code related feature intersection invoking invoking 
similarly code common features identified intersection sets code executed individual feature intersection invoking number features application invoking union code executed tests exhibits selection invoking excluding tests theory find invoking excluding may run possible tests program 
practice carefully selected tests needed 
different sets code may identified different sets invoking excluding tests 
poorly selected tests lead inaccurate identification including code unique feature excluding code excluded 
invoking tests feature selected focused possible respect feature 
find code unique feature excluding tests similar possible terms execution slice invoking tests common code filtered possible 
similarly identifying code common group features invoking tests terms execution slice feature dissimilar possible invoking tests features group 
enables exclusion maximum uncommon code 
illustrate concept sample code 
note code written free format explain functionality 
intended follow syntax computer programming language 
suppose want find code uniquely compute area equilateral triangle 
construct invoking test exhibits feature excluding tests compute area isosceles triangle rectangle respectively 
clearly closer difference execution slices shows statements unique feature additional code statements identified place excluding test 
furthermore example indicates need feature computes area rectangle find code unique computing area equilateral triangle 
ability identify program components unique feature necessity knowing program features greatly enhances feasibility execution slice technique quickly highlight small number program components important programmers maintainers needed program understanding strategy 
division programs components natural components program files functions file cases classification may satisfactory 
example code function may implement feature precludes function unique features 
solve problem need decompose program 
additional finer categories blocks decisions uses uses 
necessary programs decomposed broader category subsystem may contain files functions 
program study written see section term function procedure subroutine 
sample code written free format 
basic block block sequence consecutive statements expressions containing branches element sequence executed 
definition assumes underlying hardware fail execution block 
decision conditional branch block 
definition variable statement expression assigns value variable occurrence statement expression 
uses classified uses variable appears computational statement expression uses variable appears inside predicate 
note pair definition corresponding respect variable includes definition variable decision predicate variable 
example definition respectively true branch constitute 
similarly definition pair false branch 
code illustrate components uses unique equilateral triangle 
compute difference set uses executed test equilateral triangle section test isosceles triangle section 
find definition variable read statement uniquely feature compute area equilateral triangle 
definition variable feature 
type information provides finer view def pair variable feature 
attempt enumerate possible ways define variable 
readers interested details blocks decisions uses uses defined study refer 
tool support execution slice technique collecting execution slice test input hand time consuming prone errors 
tool automatically analyzes collects information necessary studies conducted large complicated systems 
study vue tool built top visualizing features code 
program computes set testable attributes blocks decisions uses uses instruments compile time 
instrumentation complete executable built instrumented code 
time program executed test new trace information respect test terms times block decision executed test complete traceability matrix test appended corresponding trace file 
information execution slice test represented terms blocks decisions uses uses executed test 
vue interface tests exhibit feature examined moved invoking category excluding category 
test categorized way 
tests stay default dont know category means care tests simply know tests exhibit feature 
code identified heuristics discussed earlier displayed graphical interface allow programmers maintainers visualize feature implemented program 
examples appear figures 
vue part tm gammaa software understanding system developed bellcore 
information bellcore com 
case study case study show experience execution slice technique identify code uniquely related feature common pair group features 
target system sharpe symbolic hierarchical automated reliability performance evaluator analyzes stochastic models study 
sharpe contains lines code files total functions 
developed groups users practicing engineers researchers performance reliability modeling students engineering science courses 
major revisions fix bugs adopt new requirements 
sharpe provides specification language analysis algorithms different model types sharpe mc mrm ft util rvalue prob cdf cdf prob cdf util sub features features cdf features sharpe markov chains mc markov reward models mrm generalized stochastic petri nets product form queuing networks fault trees ft 
various transient steady state measures interest possible built functions sharpe 
study view specification model built functions computing measures interest pertaining model feature 
example specification markov chains grouping built functions cdf prob facilitate analysis process constitute single feature specific functions cdf prob form subfeatures 
features study shown 
refer mc mrm ft respective built functions features respectively 
feature denoted example denoted subfeatures need unique particular feature shared features 
example cdf shared features data collection feature small set invoking excluding tests carefully selected 
heuristics discussed sections find blocks decisions uses uses unique feature common pair features 
observations data collected experiments identified files functions blocks decisions experts familiar sharpe verification 
results promising identified program components unique feature shared pair features common features 
complete verification done respect identified uses uses difficult humans complete understanding complicated system sharpe fine granularity 
experts examine identified uses uses agreed descriptions assigned 
table number blocks unique analyze share util results cg qn pn bind sor phase expo read symbol ftree debug uniform total percentage note blank entry means block corresponding file unique data analyzed code unique features 
due space constraints report results subfeatures choice com blocks highlighted unique feature display blocks unique feature pletely arbitrary 
table shows number blocks identified file basis subfeatures 
seen total blocks identified unique feature blocks constitute entire application 
implies total blocks identified unique blocks identified important programmers maintainers provide starting point understanding implemented 
analysis different granularity finds small percentage decisions uses uses identified unique similar observation small percentage identified applies subfeatures 
file wise summary decisions uses uses unique subfeatures shown appendix code unique viewed graphical interface vue 
purpose illustration unique blocks decisions identified steps discussed section feature shown figures 
subfeatures detailed data shown analyses data provide similar observation subfeatures matter granularity level small percentage program components defined level identified unique corresponding 
true branch false branch false branch true branch unique feature unique feature display decisions unique feature code common pairs features analyzed 
features purpose giving total pairs 
table shows number blocks common various possible pairs features file 
similar summaries decisions uses uses appendix information useful preventing certain types unexpected maintenance errors 
example programmer may change function feature mind realizing change may affect feature 
case blocks file analyze implement features result change blocks may affect shown data experts know sharpe indicated results collected technique provide surprising insights target program 
especially true move granularity uses uses difficult complete understanding complicated system sharpe fine granularity 
view showing table number blocks decisions uses common features 
information help programmers maintainers understand change certain code global impact features 
addition code sense represents utility code may potential reuse program expanded stage 
table number blocks common pair features analyze share util results cg qn pn bind sor phase expo read symbol ftree debug uniform total percentage note notation indicates code common features blank entry means common block corresponding file 
lessons learned section case study consider pros cons execution technique map program features code 
identification starting points program understanding code identified execution slice technique unique feature common group features starting point studying program features 
especially useful features implemented different modules large complicated poorly documented system 
important realize technique may find table code common features number number number number blocks decisions uses uses analyze share util results cg qn pn bind sor phase expo read symbol ftree debug uniform total percentage note blank entry means common code corresponding file 
relevant code feature tests computing execution slices may incomplete 
fact find complete set code feature may invoking excluding tests gamma contrast technique requires carefully selected tests 
experts know sharpe indicated small number program components identified various granularity levels technique provided surprising insights useful preventing certain types unexpected maintenance errors see section 
particularly interesting reaction experts results levels detailed information 
collected real data information fine granularities help programmers maintainers avoid making unexpected errors 
intuition leads believe knowing possible impact features changing definitions certain program variables feature mind plus practice software maintenance 
ease advantage execution slice technique programmers maintainers compute execution slices carefully selected tests invoking excluding ignore 
significantly reduces amount effort required technique 
process automated vue see section 
code identified displayed user friendly graphical interface see figures 
simplify transfer technique real world 
furthermore differs test coverage measurement tools collects complete trace information terms times block decision executed respect test remember line code decision executed 
detailed traceability programmers maintainers effectively locate code implements features testers set information compute code coverage improve confidence quality 
result combine program understanding code coverage measurement integrated process 
need objective verification important part case study verify identified program components descriptions assigned 
ideal approach ask familiar application highlight code segments think important feature 
information serves basis verification 
obvious difficulty approach different segments highlighted different people raises series problems summarize divergent information 
explained earlier goal find complete set code implement feature 
objective provide small number carefully selected program components various levels granularity starting point maintainers get quick understanding feature implemented system 
accomplish ask experts versed implementation details application confirm identified code unique feature common group features predicted 
realize objective way verify data collected experiment desirable effort devoted task 
variations code identified dynamic technique code identified study depends heuristic applied affected features implemented program invoking excluding tests selected 
discuss feature implementation decide heuristic 
assume want find code unique feature 
suppose feature say ff exhibited feature fi feature fl exhibited 
implies invoking tests ff exhibit fi fl features 
condition best way find code uniquely related ff invoking excluding hand ff bundled fi fl way just described ff exhibited features exhibited simultaneously probably different heuristic invoking excluding similar arguments apply cases finding code common group features 
explain invoking excluding tests affect decision heuristic 
suppose looking code unique feature say 
easily identify invoking tests exhibit features easily identify focused invoking tests respect better invoking excluding hand trouble identifying tests exhibit 
difficult obtain focused invoking tests respect probably invoking excluding invoking tests selected follow guidelines section select excluding tests 
find code unique feature invoking excluding tests similar terms execution slice possible order filter common code possible 
find code common group features invoking tests feature dissimilar possible invoking tests features group maximum uncommon code excluded 
short universal heuristic cases 
programmers maintainers judgment determine approach best meets needs 
different heuristics invoking excluding tests give different mappings features code experience suggests general provide starting points help programmers maintainers understand system analyzed 
difference program components identified give different recall defined percentage ratio number identified program components total number program components identified false positive rates determined percentage ratio number identified program components descriptions assigned total number identified program components 
extension program debugging costly activities software maintenance enhancements removing development bugs 
emphasis study address concern identifying code unique particular feature common pair group features point view program understanding similar approach program debugging 
excluding tests result successful execution program invoking tests cause program fail 
excluding tests noted successful tests invoking tests noted failing tests 
code components executed failing tests successful tests places location fault 
enhancing results including information static slices execution slices extract code contained body functions methods 
features may introduce new structs classes may add attributes existing structs classes 
include information necessary examine static slices addition results obtained execution slices 
bottom line trade follow needed program understanding strategy discussed section locate quickly easily possible certain code segments starting points look code related feature 
study underway develop hybrid method effectively combine static information code identified execution slice technique 
study program components identified unique feature general unique verified experts understood application thoroughly 
technique aid revealing code common group features assist developers recovering design description implementation description 
rigorous objective verification process needs developed experience indicates execution slice technique simple informative 
useful part programmer maintainer tool kit provide starting point understanding large complicated software system 
technique valuable finding code components unique functionality may effective identifying components relevant important point view functionality 
fact dangerous assume code feature identified invoking excluding tests 
greatest advantages methodology supported tools vue viable option immediate application large scale systems 
large complicated systems mere identification unique shared files functions blocks decisions may sufficient 
identification unique shared def uses provide depth understanding application help save maintenance errors occur due subtle interactions various features easily overlooked 
tools support identification unique shared def uses addition files functions blocks decisions 
fact maintenance requires understanding small percentage large system exemplified year problem 
date sensitive code identified understood modified ensure smooth transition twentieth century 
code unique feature may lines system consisting millions lines code 
year problem drives home significance highlighting unique components code 
success execution slice technique identify date sensitive code depends effectively invoking excluding tests designed 
invoking tests execute segments pertaining date portion code excluding test cases execute segments pertaining non date portion code 
conclude experience suggests execution sliced technique immediately applicable industry 
answer perfectly important difficult problem large legacy systems provide software programmers maintainers starting point quick program understanding 
authors extremely grateful dr robin help sharpe 
authors research scientists team software environment research group bellcore effort making vue available study 
agrawal horgan li london wong ghosh wilde mining system tests aid software maintenance ieee computer pp july 
agrawal horgan london wong fault localization execution slices dataflow tests proceedings sixth ieee international symposium software reliability engineering pp toulouse france october 
ball software visualization large ieee computer pp april 
user manual bellcore 
choi scacchi extracting restructuring design large systems ieee software january 
horgan london data flow coverage language proceedings fourth symposium software testing analysis verification pp victoria british columbia canada october 
horgan london data flow coverage testing tool proceedings symposium assessment quality software development tools pp new orleans la may 
ieee guide software requirements specifications ansi ieee std 
korel laski dynamic program slicing information processing letters 
korel dynamic program slicing understanding program execution proceedings fifth international workshop program comprehension pp mi may 
swanson software maintenance management addison wesley new york 
littman pinto letovsky soloway mental models software maintenance empirical studies programmers soloway iyengar eds 
ablex publishing norwood nj 
trace visualization tool ieee software pp september 
military standard defense system software development dod std department defense february 
page jones practical guide structured systems design yourdon press computing series prentice hall englewood cliffs new jersey 
pressman software engineering practitioner approach mcgraw hill new york 
trivedi performance reliability analysis computer systems example approach sharpe software package kluwer academic publishers boston 
soloway pinto letovsky littman designing documentation compensate delocalized plans communications acm november 
weiser program slicing ieee trans 
software engineering se july 
wilde casey early field experience software reconnaissance technique program comprehension proceedings international conference software maintenance pp monterey ca november 
wilde gomez locating user functionality old code proceedings international conference software maintenance pp orlando fl november 
wilde software reconnaissance mapping program features code software maintenance research practice 
yourdon march issue american programmer march 
appendix number decisions uses uses unique note blank entry means unique decision corresponding file 
part number unique decisions analyze share util results cg qn pn bind sor phase expo read symbol ftree debug uniform total percentage part ii number unique uses analyze share util results cg qn pn bind sor phase expo read symbol ftree debug uniform total percentage part iii number unique uses analyze share util results cg qn pn bind sor phase expo read symbol ftree debug uniform total percentage appendix number decisions uses uses shared pair features note notation indicates decisions uses uses shared features blank entry means shared decision corresponding file 
part number shared decisions analyze share util results cg qn pn bind sor phase expo read symbol ftree debug uniform total percentage part ii number shared uses analyze share util results cg qn pn bind sor phase expo read symbol ftree debug uniform total percentage part iii number shared uses analyze share util results cg qn pn bind sor phase expo read symbol ftree debug uniform total percentage 
