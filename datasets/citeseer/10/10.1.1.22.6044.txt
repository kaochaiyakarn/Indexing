tight upper bound number candidate patterns bart jan van den bussche centrum context mining frequent patterns standard levelwise algorithm question arises current level current set frequent patterns maximal number candidate patterns generated level 
answer question providing tight upper bound derived combinatorial result sixties kruskal 
result useful reduce number database scans 
contact author bart luc departement wni universitaire campus belgium phone fax bart luc ac frequent pattern mining problem known :10.1.1.40.6984
set items database subsets called transactions 
pattern set items support de ned number transactions contain pattern pattern called frequent support exceeds minimal support threshold 
goal nd frequent patterns search space problem subsets clearly huge 
generating counting supports patterns solutions proposed perform directed search patterns 
directed search enforces scans database brings great cost databases tend large main memory 
standard apriori algorithm solving problem monotonicity property subsets frequent pattern frequent :10.1.1.25.3707
pattern considered potentially frequent called candidate pattern support unknown subsets known frequent 
step algorithm candidate patterns generated supports counted performing complete scan transaction database 
repeated new candidate patterns generated 
number scans database equals maximal size candidate pattern 
improvements apriori algorithm try reduce number scans database estimating number candidate patterns generated 
heart techniques lies purely combinatorial problem solved rst seriously start applying current set frequent patterns certain pass algorithm maximal number candidate patterns generated passes come 
contribution solve problem providing hard tight combinatorial upper bound 
computing upper bound pass algorithm times watertight guarantee size come base various optimization decisions depending speci algorithm 
section discuss existing techniques reduce number database scans point dangers existing heuristics purpose 
upper bound techniques watertight 
section derive upper bound combinatorial result sixties kruskal 
section show get upper bound applying recursively 
section discuss issues concerning implementation upper bounds top apriori algorithms 
section give experimental results showing ectiveness result estimating far ahead generated 
conclude section 
related nearly frequent pattern mining algorithms developed proposal apriori algorithm rely levelwise candidate generation pruning strategy 
di er generate count candidate patterns 
rst optimizations dhp algorithm proposed park 
algorithm uses hashing scheme collect upper bounds frequencies candidate patterns pass 
patterns known turn infrequent eliminated consideration 
ectiveness technique showed rst passes 
upper bound reduce number passes rst passes techniques combined algorithm 
strategies discussed try reduce number passes 
reduction passes causes increase number candidate patterns need explored single pass 
tradeo reduction passes number candidate patterns important time needed process transaction dependent number candidates covered transaction blow exponentially 
upper bound predict blowup occur 
partition algorithm proposed savasere reduces number database passes 
database partitioned parts small handled main memory 
partitions considered time frequent patterns partition generated apriori algorithm 
rst pass patterns merged generate set potential frequent patterns counted complete database 
method performs database passes performance heavily dependent distribution data generate candidates 
sampling algorithm proposed toivonen performs scans database picking random sample database nding frequent patterns probably hold database verifying results rest database 
cases sampling method produce frequent patterns missing patterns generating remaining potentially frequent patterns verifying frequencies second pass database 
probability failure kept small decreasing minimal support threshold 
cause combinatorial explosion number candidate patterns 
dic algorithm proposed brin tries reduce number passes database dividing database intervals speci size :10.1.1.25.3707:10.1.1.25.3707
candidate patterns size generated 
frequencies candidate sets counted rst interval database 
relative frequencies candidate patterns size generated counted interval patterns size 
general interval candidate patterns size generated counted 
algorithm stops candidates generated 
method drastically reduces number scans database performance heavily dependent distribution data generate candidates 
rst successful attempts generate frequent patterns depth rst search proposed agarwal han :10.1.1.40.6984:10.1.1.25.3707:10.1.1.25.3707
generating patterns depth rst manner implies monotonicity property exploited anymore 
lot patterns generated need counted compared breadth rst algorithms 
algorithm han solves problem loading compressed form database main memory proposed 
memory resident bene ts fast counting mechanism generated patterns 
obviously possible load compressed form database main memory 
strategies try push certain constraints candidate pattern generation deeply possible reduce number candidate patterns generated 
try nd set maximal frequent patterns frequent patterns superset frequent :10.1.1.40.6984
course techniques note patterns represented called header tables 
give frequencies frequent patterns required general pattern mining problem consider 
rst heuristic speci cally proposed estimate number candidate patterns generated apriorihybrid algorithm :10.1.1.40.6757
algorithm uses apriori initial passes switches aprioritid expects run faster 
aprioritid algorithm database counting support candidate patterns 
encoding candidate patterns previous pass employed purpose 
apriorihybrid algorithm switches aprioritid expects encoding candidate patterns small main memory 
size encoding grows number candidate patterns 
calculates size encoding current pass 
size small fewer candidate patterns current level previous pass heuristic decides switch aprioritid 
heuristic heuristics 
take example disjoint datasets 
rst dataset consists subsets frequent pattern size 
second dataset consists subsets disjoint frequent patterns size 
merge datasets get patterns size patterns size 
memory store encoding patterns heuristic decides switch aprioritid 
decision premature number new patterns pass start growing exponentially 
improvement apriori algorithm part folklore tries combine iterations possible candidate patterns generated 
potential combination technique realized early modalities applied examined 
exactly 
basic upper bounds follows family patterns size de nition 
candidate pattern pattern size larger subsets denote set size candidate patterns 
provide upper bound jc terms jlj 
lemma central approach simple proof lemma :10.1.1.40.6984
exists unique representation representation called canonical representation computed follows integer satis es integer satis es 
zero 
establish theorem 
jlj canonical representation jc smallest integer integer exists set 
proof 
suppose sake contradiction jc note canonical representation 
theorem kruskal says jlj impossible jlj rst inequality follows observation implies equality follows known binomial identity 
notation refer upper bound provided theorem kk jlj kruskal 
subscript level predicting important parameter cardinality jlj 
superscript denotes level predicting 
proposition tightness 
upper bound provided theorem tight exists jlj jc kk jlj 
proof 
write nite set natural numbers string natural numbers writing members decreasing order 
compare sets comparing strings lexicographic order 
resulting order sets known order 
intuitive proof kruskal theorem order bollob :10.1.1.3.2424
canonical representation bollob shown subsets rst sets natural numbers order exactly rst sets natural numbers order smallest integer reasoning conclude supersets rst sets natural numbers order exactly rst kk sets natural numbers order 
analogous tightness properties hold upper bounds longer explicitly state 
example 
set patterns size ff gg canonical representation maximum number candidate patterns size kk maximum number candidate patterns size kk 
tight ff gg ff gg estimating number levels canonical representation jlj yields upper bound maximal size candidate pattern denoted maxsize 
recall size equals number iterations standard apriori algorithm perform 
jlj candidate pattern size higher proposition 
rst term canonical representation jlj maxsize denote number jlj 
form kk theorem immediate tells level kk zero 
formally proposition 
jlj kk jlj 
estimating levels result bound level total number candidate patterns generated follows proposition 
total number candidate patterns generated set patterns kk total jlj kk jlj getting upper bound kk neat simple takes parameters numbers current size number jlj current frequent patterns 
reality arrived certain level merely cardinality actual set current patterns 
example frequent patterns current pass disjoint current upper bound estimate number certain non zero gure 
pairwise disjointness clear patterns possible 
sum richer information mere cardinality able get better upper bound 
get inspiration recall candidate generation process apriori algorithm works steps 
join step join obtain superset union patterns inserted share smallest items insert select prune step delete pattern subset take closer look join step point view :10.1.1.40.6984
consider family frequent patterns size share smallest items cardinality remove patterns shared smallest items get exactly distinct single item patterns 
number pairs formed single items exactly number candidates join step generate family consideration 
get obvious upper bound total number candidates sum possible family obvious upper bound jc denote obvious recursively computed manner 
denote set items occurring arbitrary item de ne set fs fxg min sg obvious jlj obvious 
upper bound crude take prune step account join step 
join step checks subsets potential candidate subsets 
generalize method subsets considered 
family frequent patterns sharing smallest items take frequent patterns sharing smallest items 
remove shared items pattern family get new set patterns size consider set candidates size add back previously removed items obtain pruned set candidates size just join step subsets checked pruning 
note get estimate kk jl cardinality upper bound theorem 
doing possible values yields improved upper bound jc denote improved computed re ning recursive procedure obvious upper bound follows improved jlj jlj improved 
previous section estimate jc generally estimate jc 
henceforth denote general improved upper bound kk 
general de nition follows kk jlj jlj kk 
base case note jlj kk jlj 
de nition kk smaller kk prove formally upper bound number candidate patterns size theorem 
jc kk 
proof 
induction base case clear 
suces show set patterns denote fh fxg hg 
containment conclude jc xj jc xj jc kk inequality induction 
show need show fxg min means subset fxg size element fxg fy subset 
subset element fy min fy 
rst condition follows second condition trivial 
theorem 
natural question take minimum de nition kk answer terms take minimum incomparable 
example patterns pairwise disjoint mentioned section shows example kk jlj larger summation kk 
converse possible consider ff gg 
kk summation yields 
example 
consist subsets plus sets 
kk kk kk hand kk kk kk kk kk kk kk kk kk kk kk kk kk 
kk kk kk kk kk kk kk kk kk kk kk kk kk 
subsets sets 
improve upper bound jlj maxsize 
analogy proposition de ne kk proposition 
maxsize 
nally theorem improving upper bound kk total total number candidate patterns 
de ne kk total kk proposition 
total number candidate patterns generated set patterns bounded kk total 
kk total kk total 
ecient implementation evaluate upper bounds implemented optimized version apriori algorithm trie data structure store generated patterns similar described brin :10.1.1.25.3707:10.1.1.25.3707
trie structure cheap straightforward implement computation upper bounds 
top level subtrie rooted singleton pattern fxg represents exactly set de ned section 
top level subtrie subtrie rooted element pattern fx yg represents 
compute recursive bounds traversing trie frequencies candidate patterns counted traverse trie remove candidate patterns turned infrequent 
done follows 
remember point current set frequent patterns size stored trie 
node depth smaller compute canonical representation number descendants node depth compute cf 
proposition kk cf 
theorem kk total cf 
proposition 
node depth kk values equal kk values respectively 
compute sum kk values children kk smallest sum kk minimum zero gives value compute kk total node 
done node traversed depth rst manner nally root node contain upper bounds number candidate patterns generated maximum size pattern 
soundness completeness method follows directly theorems propositions previous sections 
point numbers involved exponentially large number items implementation take care arbitrary length integers provided standard mathematical packages 
length integer logarithmic value lengths numbers involved remain polynomially bounded 
cost computation upper bounds negligible compared cost complete algorithm 
time needed calculate upper bounds largely dictated number nodes trie 
shown experimentally scales linearly constant factor implementation small 
number nodes time seconds time needed compute upper bounds compared number nodes 
ran experiments di erent datasets varying minimal support thresholds 
pass algorithm registered number nodes trie time spent compute upper bounds resulting di erent datapoints 
shows results 
experimental evaluation data sets experimented synthetic datasets generated program provided quest research group ibm almaden 
di erent settings parameters generator resulting gures analogous 
experimented real market basket dataset belgian retail store containing transactions 
store carries products 
results experiment immediately results synthetic datasets 
reason turned bad ordering items explained 
reordering form seen order items ect recursive upper bounds 
computing upper bound subset frequent patterns win incorporating structure current collection frequent patterns lose information recursively restrict subtrie candidate pattern min lose information exactly subpattern patterns come patterns contain excluded patterns frequent 
heuristic optimizations frequent pattern mining force frequent items appear candidate patterns reordering single item patterns increasing order frequency :10.1.1.40.6984:10.1.1.25.3707
reordering items real life dataset heuristic results analogous results synthetic datasets 
results show experimental results real life dataset 
shows level computed upper bound kk improved upper bound kk number candidate patterns level actual number jc turned 
shows computed upper bounds maximal size candidate pattern 
experiment maximum turned 
shows upper bounds total number candidate patterns generated compared actual number candidate patterns jc total ectively generated combined passes single 
figures show previous experiment performed synthetic dataset containing transactions items varying minimal support threshold respectively 
discussion results pleasantly surprising note improvement kk kk anticipated theoretical discussion dramatic 
kk kk jc actual estimated number candidate patterns 
kk kk estimated size largest possible candidate pattern 
kk kk jc total actual estimated total number candidate patterns 
kk kk jc total total number candidate patterns threshold 
kk kk jc total total number candidate patterns threshold 
kk kk jc total total number candidate patterns threshold 
second comparing computed upper bounds actual numbers observe high accuracy estimations kk estimations kk match exactly actual number candidate patterns generated level 
upper bounds total number candidate patterns large estimated rst passes surprising initial stages information 
fourth pass frequent patterns size known estimations exact 
totals manageable optimizer estimates decide combine iterations single generated candidate patterns 
entirely similar results obtained varying minimal support thresholds 
motivated heuristics reduce number database scans context frequent pattern mining provide hard tight combinatorial upper bound number candidate patterns size largest possible candidate pattern set frequent patterns 
ndings restricted single algorithm applied frequent pattern mining algorithm levelwise generation candidate patterns 
standard apriori algorithm frequent pattern mining algorithms experiments showed upper bounds considerably reduce number database scans risk getting combinatorial explosion number candidate patterns 
agarwal aggarwal prasad :10.1.1.40.6984
depth rst generation long patterns 
proceedings sixth acm sigkdd international conference knowledge discovery data mining 
acm press 
agarwal aggarwal prasad 
tree projection algorithm generation frequent itemsets 
journal parallel distributed computing march 
agrawal imielinski swami :10.1.1.40.6984
mining association rules sets items large databases 
proceedings acm sigmod international conference management data volume sigmod record pages 
acm press 
agrawal mannila srikant toivonen verkamo :10.1.1.25.3707
fast discovery association rules 
fayyad smyth uthurusamy editors advances knowledge discovery data mining pages 
mit press 
agrawal srikant 
fast algorithms mining association rules 
ibm research report rj ibm research center san jose california june 
bollob :10.1.1.3.2424
combinatorics 
cambridge university press 
brin motwani ullman tsur :10.1.1.25.3707:10.1.1.25.3707
dynamic itemset counting implication rules market basket data 
proceedings acm sigmod international conference management data volume sigmod record pages 
acm press 
frankl 
new short proof kruskal theorem 
discrete mathematics 
van den bussche 
supporting interactive association rule mining 
proceedings second international conference data warehousing knowledge discovery volume lecture notes computer science pages 
springer 
haas editors :10.1.1.40.6984
proceedings acm sigmod international conference management data volume sigmod record 
acm press 
han pei yin :10.1.1.40.6984:10.1.1.25.3707:10.1.1.25.3707
mining frequent patterns candidate generation 
chen naughton bernstein editors proceedings acm sigmod international conference management data volume sigmod record pages 
acm press 
heckerman mannila pregibon editors :10.1.1.40.6984
proceedings rd international conference knowledge discovery data mining 
aaai press 
bayardo jr eciently mining long patterns databases :10.1.1.40.6984
haas pages :10.1.1.40.6984
:10.1.1.40.6984
theorem nite sets 
theory graphs pages 
akad 
kruskal :10.1.1.40.6984
number simplices complex 
mathematical optimization techniques pages 
univ california press 
lakshmanan ng han pang :10.1.1.40.6984
optimization constrained frequent set queries variable constraints 
faloutsos ghandeharizadeh editors proceedings acm sigmod international conference management data volume sigmod record pages 
acm press 
lin kedem :10.1.1.40.6984
pincer search new algorithm discovering maximum frequent set 

schek ramos alonso editors edbt volume lecture notes computer science pages 
springer 
mannila toivonen verkamo :10.1.1.40.6984
ecient algorithms discovering association rules 
proceedings aaai workshop knowledge discovery databases pages 
aaai press 
zaki parthasarathy ogihara li :10.1.1.40.6984
new algorithms fast discovery association rules 
heckerman pages :10.1.1.40.6984
ng lakshmanan han pang 
exploratory mining pruning optimizations constrained association rules 
haas pages :10.1.1.40.6984
park 
chen yu 
ective hash algorithm mining association rules 
proceedings acm sigmod international conference management data volume sigmod record pages 
acm press 
savasere omiecinski navathe 
ecient algorithm mining association rules large databases 
dayal gray nishio editors proceedings th international conference large data bases pages 
morgan kaufmann 
srikant vu agrawal 
mining association rules item constraints 
heckerman pages :10.1.1.40.6984
toivonen 
sampling large databases association rules 
proceedings nd international conference large data bases pages 
morgan kaufmann 

