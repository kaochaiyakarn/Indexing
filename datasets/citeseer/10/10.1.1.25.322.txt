handbook software engineering knowledge engineering vol 
world scientific publishing agent oriented software engineering michael wooldridge dept computer science university liverpool liverpool zf uk paolo ciancarini dipartimento di scienze dell informazione university bologna bologna italy software knowledge engineers continually strive develop tools techniques manage complexity inherent systems build 
article argue intelligent agents agent systems offer novel opportunities developing effective tools techniques 
discussion classic subject software complex introduce intelligent agents software structures capable making rational decisions 
rational decision makers suited construction certain types software mainstream software engineering little success 
go examine number prototype techniques proposed engineering agent systems including formal specification verification methods agent systems techniques implementing agent specifications 
keywords autonomous agents multi agent systems 

past decades software engineers derived progressively better understanding characteristics complexity software 
widely recognised interaction probably important single characteristic complex software see 
software architectures contain network aware dynamically interacting components thread control engaging complex coordination protocols get offer plethora services components typically orders magnitude complex correctly efficiently engineer simply compute function input single thread control 
unfortunately turns real world applications precisely characteristics 
consequence major research topic computer science past decades development tools techniques model understand implement systems interaction norm 
advent global computing platforms internet world wide web increased requirement designing systems including complex interactions 
researchers believe computation understood chiefly process interaction 
turn led search new computational abstractions models tools conceptualise implement interacting systems 
software agents multi agent systems grown active areas research development activity computing generally 
reasons current intensity interest certainly important concept agent autonomous system capable interacting agents order satisfy design objectives agent oriented software engineering natural software designers 
just understand systems composed essentially passive objects state perform operations understand interacting semi autonomous agents offer services 
structure section defines mean term agent summarises agents appropriate engineering certain complex software systems 
describe typical application domains multi agent systems 
section describe agent oriented specification techniques focussing particular requirements agent oriented specification framework 
section discuss specifications implemented directly executing automatically synthesising executable systems specifications 
section discusses implemented systems may verified determine satisfy specifications 
section conclude comments issues agent oriented software engineering 
note sections include material fuller examination particular specification implementation verification agent systems may :10.1.1.25.322

agent systems agent system mean key abstraction agent 
agent mean abstraction enjoys properties pp autonomy agents encapsulate state accessible agents decisions state direct intervention humans reactivity agents situated environment may physical world user graphical user interface collection agents internet combined able perceive environment potentially imperfect sensors able respond timely fashion changes occur pro activeness agents simply act response environment able exhibit goal directed behaviour initiative social ability agents interact agents possibly humans kind agent communication language typically ability engage social activities cooperative problem solving negotiation order achieve goals 
multi agent system system composed number agents typically interact order satisfy goals 
obvious question ask agents multi agent systems seen important new direction software engineering 
reasons pp natural metaphor 
just domains conceived consisting number interacting essentially passive objects conceived interacting active purposeful agents 
example scenario currently driving research development activity agents field software agents buy sell goods internet behalf users 
natural view software participants transactions semi autonomous agents 
distribution data control 
handbook software engineering knowledge engineering software systems possible identify single locus control control systems distributed number computing nodes frequently geographically distributed 
order systems effectively nodes capable autonomously interacting agents 
legacy systems 
natural way incorporating legacy systems modern distributed information systems wrap agent layer enable interact agents 
open systems 
systems open sense impossible know design time exactly components services system comprised able interact 
operate effectively systems ability engage flexible autonomous decision making critical 
important example kind systems middleware platforms omg corba sun jini 
platforms include concept agenthood helps designing specific types component service 
defined agent look example applications agent technology 

applications agent technology agents applied application domains important 
agents distributed systems distributed systems idea agent seen natural metaphor development concurrent object programming paradigm 
specifically multi agent systems applied domains air traffic control 
air traffic control systems oldest application areas multiagent systems 
example oasis optimal aircraft sequencing scheduling system currently undergoing field trials sydney airport australia 
specific aim oasis assist air traffic controller managing flow aircraft airport offers estimates aircraft arrival times monitors aircraft progress previously derived estimates informs air traffic controller errors importantly finds optimal sequence land aircraft 
oasis contains types agents global agents perform generic domain functions example sequencer agent responsible arranging aircraft cost sequence aircraft agents aircraft system airspace 
business process management 
workflow business process control systems area increasing importance computer science 
workflow systems aim automate processes business ensuring different business tasks expedited agent oriented software engineering appropriate people right time typically ensuring particular document flow maintained managed organisation 
adept system current example agent business process management system 
adept business organisation modelled society negotiating service providing agents 
adept currently tested british telecom bt business process involves departments different tasks 
industrial systems management 
largest probably best known european multi agent system development project date archon :10.1.1.116.2392:10.1.1.119.2204
project developed deployed multi agent technology industrial domains 
significant domains power distribution system installed currently operational northern spain 
agents archon main parts domain component realises domain specific functionality agent wrapper component provides agent functionality enabling system plan actions represent communicate agents 
archon technology subsequently deployed domains including particle accelerator control 
distributed sensing 
classic application multi agent technology distributed sensing 
broad idea system constructed network spatially distributed sensors 
sensors may example acoustic sensors battlefield radars distributed airspace 
global goal system monitor track vehicles pass range sensors 
task simpler sensor nodes network cooperate example exchanging predictions vehicle pass region sensor region 
apparently simple domain yielded surprising richness environment experimentation multi agent systems lesser known distributed vehicle monitoring testbed provided proving ground today multi agent system development techniques 
space shuttle fault diagnosis 
difficult imagine domain harder real time constraints flight diagnosis faults spacecraft 
earliest applications prs architecture precisely 
brief procedures astronaut diagnose faults space shuttle reaction control systems directly coded prs plans prs architecture interpret plans provide real time advice event failure malfunction system 
factory process control 
organisations modelled societies interacting agents 
factories exception agent approach modelling managing factories taken researchers 
began largely parunak system contract net protocol manufacturing control 
mori multi agent approach controlling steel coil processing plant wooldridge described process determining optimal production sequence factory naturally viewed problem negotiation various production cells factory 
handbook software engineering knowledge engineering agents internet currently surrounds things agent related phenomenal growth internet 
particular lot interest mobile agents move internet operating user behalf 
kind functionality achieved telescript language developed general magic remote programming related functionality provided languages java 
number rationales type agent electronic commerce 
currently commercial activity driven primarily humans making decisions goods buy price 
difficult see certain types commerce usefully automated 
standard motivating example travel agent 
suppose want travel manchester san francisco 
different airlines price structures routes choose journey 
may mind route long aircraft involved fly wire may insist option available airlines may want fly airlines bad experience 
trying find best flight manually preferences tedious business fairly straightforward 
entirely plausible kind service provided agents take specification desired flight preferences checking range line flight information databases return list best options 
hand held pdas limited bandwidth 
hand held personal digital assistants seen step laptop computer market 
pdas provided links telecommunications networks 
pda query needs resolved require network information resources may efficient send agent network purpose resolve query remotely 
searching process done agent remote site final result query need sent back pda originated query 
information gathering 
widespread provision distributed semi structured information resources world wide web obviously presents enormous potential presents number difficulties information overload agents seen natural tool perform tasks searching distributed information resources filtering unwanted news email 
time writing interest mobile agents centred java programming language form applets portable downloadable programs embedded www pages provides widely mobile object framework 
relevance object management group omg consortium computer manufacturers developing things mobile agent framework known corba object request broker architecture distributed object standard 
agents interfaces area current interest agent interfaces 
idea agent assistant user task 
rationale current interfaces sense pro active things happen user initiates task 
idea agent acting way assistant anticipating requirements agent oriented software engineering attractive 
nicholas director mit media lab sees ultimate development agents follows agent answers phone recognizes callers appropriate may tell white lie behalf 
agent trained timing versed finding opportune moments idiosyncrasies somebody knows shares information person act behalf effectively 
secretary falls ill difference agency send albert einstein 
issue iq 
shared knowledge practice best interests army commander sending scout ahead 
dispatch agents collect information behalf 
agents dispatch agents 
process multiplies 
process started interface delegated desires prototypical interface agents type described 
remainder article consider means specify implement verify agent systems 

specification section consider problem specifying agent system 
requirements agent specification framework 
sort properties capable representing 
predominant approach specifying agents involved treating intentional systems may understood attributing mental states beliefs desires intentions see detailed justification idea :10.1.1.119.2204
idea number approaches formally specifying agents developed capable representing aspects agent system beliefs agents information environment may incomplete incorrect goals agents try achieve actions agents perform effects actions ongoing interaction agents agents interact environment time 
term agent theory refer theory explains aspects agency interact generate behaviour agent 
successful approach formal agent theory appears temporal modal logic space restrictions prevent detailed technical discussion logics see extensive :10.1.1.119.2204
best known logical frameworks cohen levesque theory intention rao georgeff belief model :10.1.1.37.7970
cohen levesque model takes primitive just attitudes beliefs goals 
attitudes particular notion intention built 
contrast rao georgeff take intentions primitives addition beliefs goals 
key technical problem faced agent theorists developing formal model gives account interrelationships various attitudes comprise agents internal state 
comparatively serious attempts specify real agent systems logics see attempt 

implementation handbook software engineering knowledge engineering specification implement system correct respect specification 
issue consider move specification concrete computational system 
possibilities achieving transformation consider 
directly execute animate specification 
translate compile specification concrete computational form automatic translation technique 
sub sections follow shall investigate possibilities turn 

directly executing agent specifications suppose system specification expressed logical language way obtaining concrete system treat executable specification interpret specification directly order generate agent behaviour 
interpreting agent specification viewed kind constructive proof satisfiability show specification satisfiable building model logical sense 
models specification language computational interpretation model building viewed executing specification 
discussion concrete consider concurrent metatem programming language 
language agents programmed giving temporal logic specification behaviour intended exhibit specification directly executed generate agent behaviour 
models temporal logic concurrent metatem agents specified linear discrete sequences states executing concurrent metatem agent specification process constructing sequence states 
state sequences viewed histories traced programs execute temporal logic concurrent metatem computational interpretation actual execution algorithm described 
note executing concurrent metatem agent specifications possible primarily models concurrent metatem temporal logic comparatively simple obvious intuitive computational interpretation 
agent specification languages general bdi formalisms rao georgeff considerably complex logics :10.1.1.37.7970
particular usually semantic framework known possible worlds 
technical details somewhat involved purposes article main point general possible worlds semantics computational interpretation way concurrent metatem semantics 
clear executing logic semantics mean 
response number researchers attempted develop executable agent specification languages simplified semantic basis computational interpretation 
example rao agentspeak language essentially bdi system simple computational semantics :10.1.1.5.1612

compiling agent specifications alternative direct execution compilation 
scheme take specification transform concrete computational model automatic synthesis process 
main perceived advantages compilation direct execution run time efficiency 
direct execution agent specification concurrent metatem typically involves manipulating symbolic agent oriented software engineering representation specification run time 
manipulation generally corresponds reasoning form computationally costly 
compilation approaches aim reduce symbolic specifications simpler computational model requires symbolic representation 
reasoning done line compile time execution compiled system done little run time symbolic reasoning 
compilation approaches usually depend close relationship models temporal modal logic typically labeled graphs kind automata finite state machines 
example pnueli rosner synthesise reactive systems branching temporal logic specifications 
similar techniques develop concurrent system skeletons temporal logic specifications 
best known example approach agent development situated automata paradigm rosenschein kaelbling 
epistemic logic logic knowledge specify perception component intelligent agent systems 
technique constructive proof directly synthesise automata specifications 
general approach automatic synthesis theoretically appealing limited number important respects 
agent specification language expressive offline reasoning expensive carry 
second systems generated way capable learning capable adapting program run time 
direct execution approaches agent specification frameworks tend concrete computational interpretation making synthesis impossible 

verification developed concrete system need show system correct respect original specification 
process known verification particularly important introduced informality development process 
divide approaches verification systems broad classes axiomatic semantic model checking 
subsections follow shall look way approaches evidenced agent systems 

axiomatic approaches axiomatic approaches program verification enter mainstream computer science hoare late :10.1.1.116.2392
axiomatic verification requires take concrete program program systematically derive logical theory represents behaviour program 
call program theory 
program theory expressed logical language original specification verification reduces proof problem show specification theorem equivalently logical consequence program theory 
development program theory feasible axiomatizing programming language system implemented 
example hoare logic gives axiom statement type simple pascal language 
axiomatization program theory derived program text systematic way 
relevant mainstream computer science specification verification reactive systems temporal logic way pioneered pnueli manna colleagues 
idea computations reactive systems infinite sequences correspond models linear temporal logic 
temporal logic develop system specification axiomatize programming language 
axiomatization systematically derive theory program program text 
specification program theory encoded temporal logic handbook software engineering knowledge engineering verification proof problem temporal logic 
comparatively little carried agent systems community axiomatizing multi agent environments 
shall review just approach 
axiomatic approach verification multi agent systems proposed :10.1.1.34.6293
essentially idea temporal belief logic axiomatize properties multi agent programming languages 
axiomatization program theory representing properties system systematically derived way indicated 
temporal belief logic reasons 
temporal component required observed need capture ongoing behaviour multi agent system 
belief component agents wish verify symbolic ai systems right 
agent symbolic reasoning system includes representation environment desired behaviour 
belief component logic allows capture symbolic representations agent 
multi agent programming languages axiomatized temporal belief logic shoham agent fisher concurrent metatem see :10.1.1.37.7970
note approach relies operation agents sufficiently simple properties axiomatized logic 
works shoham agent fisher concurrent metatem largely languages simple semantics closely related rule systems turn simple logical semantics 
complex agents axiomatization straightforward 
capturing semantics concurrent execution agents easy course area ongoing research computer science generally 

semantic approaches model checking ultimately axiomatic verification reduces proof problem 
axiomatic approaches verification inherently limited difficulty proof problem 
proofs hard classical logic addition temporal modal connectives logic problem considerably harder 
reason efficient approaches verification sought 
particularly successful approach model checking :10.1.1.111.7245
name suggests axiomatic approaches generally rely syntactic proof model checking approaches semantics specification language 
model checking problem quite simple formula language model determine valid 
model checking verification studied connection temporal logic 
technique relies close relationship models temporal logic finite state machines 
suppose specification system program claims implement 
determine truly implements take generate model corresponds sense encodes possible computations determine specification formula valid program satisfies specification just case answer 
main advantage model checking axiomatic verification complexity model checking branching time temporal logic ctl done polynomial time proof problem modal logics quite complex :10.1.1.111.7245
rao georgeff algorithm model checking agent systems 
precisely give algorithm logical model propositional bdi agent specification language formula language determining formula valid model 
technique closely model checking algorithms normal modal logics 
show despite inclusion extra modalities beliefs desires intentions agent oriented software engineering ctl branching time framework algorithm quite efficient running polynomial time 
second step stage model checking process described done efficiently 
clear step realised bdi logics 
logical model characterizing agent comes derived arbitrary program mainstream computer science 
need take program implemented say pascal derive belief desire intention accessibility relations give semantics bdi component logic 
noted earlier clear relationship bdi logic concrete computational models implement agents clear model derived 

article summary agents perceived significant technology software engineering main techniques specification implementation verification agent systems 
software engineering agent systems early stage development widespread acceptance concept agent implies agents significant software engineering 
technology success software engineering aspects need taken seriously 
probably important outstanding issues agent software engineering understanding situations agent solutions appropriate ii principled informal development techniques agent systems 
attention form analysis design methodologies agent systems attention see 

find agents introductions intelligent agents multiagent systems 
ferber undergraduate textbook name suggests volume focussed multiagent aspects theory practice individual agents 
rate collection articles introducing agent multiagent systems wei 
collections research articles provide comprehensive field autonomous rational agents multiagent systems bond gasser collection readings distributed artificial intelligence introduces basic problems multiagent systems field papers contains dated remains essential reading huhns singh collection sets ambitious goal providing survey agent field succeeds respect 
general theory practice intelligent agents see wooldridge jennings focuses primarily theory agents contains extensive review agent architectures programming languages 
collection articles applications agent technology see 
comprehensive roadmap agent technology published 


agha wegner yonezawa editors 
research directions concurrent object oriented programming 
mit press cambridge ma 

barringer fisher gabbay gough owens 
metatem framework programming temporal logic 
rex workshop stepwise refinement distributed systems models formalisms correctness lncs volume pages 
springer verlag berlin germany june 
handbook software engineering knowledge engineering 
bernhard bauer rg ller james odell 
agent uml formalism specifying multiagent software systems 
ciancarini wooldridge editors agent oriented software engineering proceedings international workshop aose 
springer verlag berlin germany 

bond gasser editors 
readings distributed artificial intelligence 
morgan kaufmann publishers san mateo ca 

brown gasser leary alan 
ai www supply demand agents 
ieee expert august 

chellas 
modal logic 
cambridge university press cambridge england 

clarke grumberg peled 
model checking 
mit press cambridge ma 

cohen levesque 
intention choice commitment 
artificial intelligence 

dennett 
intentional stance 
mit press cambridge ma 

ralph heckel jochen 
requirement specification design agent systems graph transformation roles uml 
ciancarini wooldridge editors agent oriented software engineering proceedings international workshop aose 
springer verlag berlin germany 

durfee 
coordination distributed problem solvers 
kluwer academic publishers boston ma 

etzioni weld 
intelligent agents internet fact fiction forecast 
ieee expert august 

fagin halpern moses vardi 
reasoning knowledge 
mit press cambridge ma 

ferber 
multi agent systems 
addison wesley reading ma 

findler lo 
examination distributed planning world air traffic control 
journal parallel distributed computing 

fisher 
survey concurrent metatem language applications 
gabbay ohlbach editors temporal logic proceedings international conference lnai volume pages 
springer verlag berlin germany july 

fisher wooldridge 
formal specification verification multiagent systems 
international journal cooperative information systems 

georgeff lansky 
reactive reasoning planning 
proceedings sixth national conference artificial intelligence aaai pages seattle wa 

halpern vardi 
model checking versus theorem proving manifesto 
lifschitz editor ai mathematical theory computation papers honor john mccarthy pages 
academic press london england 

hoare 
axiomatic basis computer programming 
communications acm 

hoare 
communicating sequential processes 
communications acm 

huhns singh editors 
readings agents 
morgan kaufmann publishers san mateo ca 

jennings 
agent base software engineering 
artificial intelligence agent oriented software engineering 

jennings 
developing industrial multi agent systems 
proceedings international conference multi agent systems icmas pages san francisco ca june 

jennings norman faratin brien 
autonomous agents business process management 
applied artificial intelligence journal 

jennings norman faratin brien 
implementing business process management system adept real world case study 
applied artificial intelligence journal 

jennings sycara wooldridge 
roadmap agent research development 
autonomous agents multi agent systems 

jennings wooldridge editors 
agent technology foundations applications markets 
springer verlag berlin germany 

elizabeth kendall 
agent software engineering role modelling 
ciancarini wooldridge editors agent oriented software engineering proceedings international workshop aose 
springer verlag berlin germany 

kinny georgeff 
modelling design multi agent systems 
ller wooldridge jennings editors intelligent agents iii lnai volume pages 
springer verlag berlin germany 

klusch editor 
intelligent information agents 
springer verlag berlin germany 

lesser erman 
distributed interpretation model experiment 
ieee transactions computers 

lucas 
oasis air traffic management system 
proceedings second pacific rim international conference ai pricai seoul korea 

maes 
agents reduce information overload 
communications acm july 

manna pnueli 
temporal verification reactive systems safety 
springer verlag berlin germany 

mori masuda 
computer control system iron steel plants 
hitachi review 


digital 
stoughton 

oaks wong 
jini nutshell 
reilly associates 

james odell van dyke parunak bernhard bauer 
representing agent interaction protocols uml 
ciancarini wooldridge editors agent oriented software engineering proceedings international workshop aose 
springer verlag berlin germany 

object management group omg 
see www omg org 

pnueli rosner 
synthesis reactive module 
proceedings sixteenth acm symposium principles programming languages popl pages january 

rao 
agentspeak bdi agents speak logical computable language 
van de velde editors agents breaking away proceedings seventh european workshop modelling autonomous agents multi agent world lnai volume pages 
springer verlag berlin germany 

rao georgeff 
bdi agents theory practice 
proceedings handbook software engineering knowledge engineering international conference multi agent systems icmas pages san francisco ca june 

rao georgeff 
model theoretic approach verification situated reasoning systems 
proceedings thirteenth international joint conference artificial intelligence ijcai pages chamb ry france 

rosenschein kaelbling 
synthesis digital machines provable epistemic properties 
halpern editor proceedings conference theoretical aspects reasoning knowledge pages 
morgan kaufmann publishers san mateo ca 

rosenschein kaelbling 
situated view representation control 
agre rosenschein editors computational theories interaction agency pages 
mit press cambridge ma 

shoham 
agent oriented programming 
artificial intelligence 

smith 
framework distributed problem solving 
research press 

cammarata hayes roth thorndyke 
distributed intelligence air fleet control 
bond gasser editors readings distributed artificial intelligence pages 
morgan kaufmann publishers san mateo ca 

van dyke parunak 
manufacturing experience contract net 
huhns editor distributed artificial intelligence pages 
pitman publishing london morgan kaufmann san mateo ca 

wei editor 
multi agent systems 
mit press cambridge ma 

white 
telescript technology foundation electronic marketplace 
white general magic latham street mountain view ca 

mark wood scott 
overview multiagent systems engineering methodology 
ciancarini wooldridge editors agent oriented software engineering proceedings international workshop aose 
springer verlag berlin germany 

wooldridge 
logical modelling computational multi agent systems 
phd thesis department computation umist manchester uk october 

wooldridge 
agent software engineering 
iee proceedings software engineering february 

wooldridge 
reasoning rational agents 
mit press cambridge ma 

wooldridge bussmann 
production sequencing negotiation 
proceedings international conference practical application intelligent agents multi agent technology paam pages london uk april 

wooldridge jennings 
intelligent agents theory practice 
knowledge engineering review 

wooldridge jennings 
pitfalls agent oriented development 
proceedings second international conference autonomous agents agents pages minneapolis st paul mn may 

wooldridge jennings kinny 
methodology agent oriented analysis design 
proceedings third international conference autonomous agents agents pages seattle wa may 
