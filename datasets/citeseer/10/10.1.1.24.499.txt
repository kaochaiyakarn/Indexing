predicting lifetimes dynamically allocated memory david cohn adaptive systems group menlo park ca cohn com satinder singh department computer science university colorado boulder cs colorado edu predictions lifetimes dynamically allocated objects improve time space efficiency dynamic memory management computer programs 
barrett zorn simple lifetime predictor demonstrated improvement variety computer programs 
decision trees lifetime prediction programs show significantly better prediction 
method advantage training large number features decision tree automatically choose relevant subset 
intelligent memory allocation dynamic memory allocation computer applications 
application requests blocks memory operating system memory manager needed explicitly frees 
typically requests handled way regard long requested block 
programmers runtime profiles analyze typical behavior program write special purpose memory management routines specifically tuned dominant classes allocation events 
machine learning methods offer opportunity automate process tuning memory management systems 
study barrett zorn allocators special allocator objects short lived default allocator 
tried simple prediction method number public domain allocation intensive programs got mixed results lifetime prediction problem 
showed cases able predict strategy assigning objects predicted short lived special allocator led savings program running times 
results imply predict cases get similar savings programs 
concentrate lifetime prediction task show axis parallel decision trees lead significantly better prediction programs studied zorn grunwald included 
advantage approach large number features allocation requests decision tree decide relevance 
number advantages lifetime predictions intelligent memory management 
improve cpu usage special purpose allocators short lived objects allocated small spaces incrementing pointer deallocated dead 
decrease memory fragmentation short lived objects pollute address space long lived objects 
improve program locality program speed short lived objects allocated small part heap 
advantages prediction weighed time required examine request prediction intended 
frequently argued computers memory faster cheaper need concerned speed efficiency machine learning algorithms 
purpose algorithm save space computation concerns paramount 
related traditionally memory management relegated single general purpose allocator 
performance critical software developers frequently build custom memory manager believe tuned optimize performance program 
hand construction inefficient terms programming time required optimization may seriously degrade program performance accurately reflect program wilson 
grunwald zorn monitors program runs benchmark inputs determine commonly requested block sizes 
produces set memory allocation routines customized efficiently allocate block sizes 
memory requests handled general purpose allocator 
barrett zorn studied lifetime prediction benchmark inputs 
allocation request call graph list nested procedure function calls effect time object size identify allocation site 
allocations particular site short lived benchmark inputs algorithm predicted allocations short lived 
method produced mixed results lifetime prediction demonstrated savings predictions bring 
discuss approach lifetime prediction uses learned decision trees 
section discuss identification relevant state features decision tree 
section discusses greater detail problem lifetime prediction 
section describes empirical results applying approach benchmark programs section discusses implications results directions 
feature selection decision tree barrett zorn approach captures state information form program call graph time allocation request recorded fixed predetermined depth 
graph plus request size specifies allocation site statistics gathered separately site 
drawback approach forces division distinct call graph preventing generalization irrelevant features 
computationally requires maintaining explicit call graph information program normally provide storing potentially large table call sites predictions 
ignores potentially useful information parameters functions call stack contents heap memory program registers time request 
ideally examine program state possible time allocation request automatically extract pieces information best allow predicting requested block 
decision tree algorithms useful sort task 
decision tree divides inputs basis input feature improves purity tree leaves 
inputs statistically irrelevant prediction splits tree final set decisions examine input features improve predictive performance 
regardless parsimony final tree training tree entire program state feature vector computationally infeasible 
experiments detailed arbitrarily top words stack request size approximate indicator program state 
target machine sparcstation including program registers feature set significant difference dropped consideration efficiency 
lifetime prediction characteristic memory requests predict lifetime block long requested memory returned central pool 
accurate lifetime prediction lets segregate memory shortterm long term permanent storage 
decision tree learning algorithm derive rules distinguish short lived permanent allocations general pool allocation requests 
short lived blocks create simple efficient allocation scheme barrett zorn 
permanent blocks allocation simple cheap allocator need compute store information normally required keep track block return pool freed 
complication unequal loss different types incorrect predictions 
appropriately routed memory request may save dozens instruction cycles inappropriately routed may cost hundreds 
cost terms memory may unequal short lived block incorrectly predicted permanent permanently tie space occupied block allocated method freed 
permanent block incorrectly predicted short lived may pollute allocator short term space preventing large segment free memory reclaimed see barrett zorn examples 
risks translate time space tradeoff depends properties specific allocators space limitations target machine 
experiments arbitrarily defined false positives false negatives equal loss noted 
cases may handled reweighting splitting criterion rebalancing training inputs described section 
experiments conducted types experiments 
measured ability learned decision trees predict allocation lifetimes 
second incorporated learned trees target applications measured change runtime performance 
predictive accuracy oc decision tree software designed murthy considered axis parallel splits effect conditioning decision single stack feature 
chose sum minority criterion splits minimizes number training examples misclassified split 
tree pruning cost complexity heuristic holds back fraction case data set testing selects smallest pruning original tree standard error squared best tree breiman 
details criteria may murthy breiman 
addition automatically pruned trees examined trees truncated leaves effect examining features making decision 
oc includes provisions explicitly specifying loss function false positive false negative classifications 
straightforward incorporate sum minority splitting criterion chose incorporate loss function training set duplicating training examples match target ratios case forcing equal number positive negative examples 
experiments set benchmark applications reported barrett zorn ghostscript postscript interpreter espresso pla logic optimizer cfrac program factoring large numbers gawk awk programming language interpreter perl report extraction language 
examined gcc public domain compiler specific interest compiler technology 
experimental procedure follows linked application program modified malloc routine addition allocating requested memory wrote trace file size requested block top machine words program stack 
calls free allowed tagging existing allocations barrett zorn labeled bytes allocated lifetime 
worth noting experiments run sparcstation frequently optimizes away traditional stack frame 
possible force system maintain traditional stack wished information available program wild overriding system optimizations 
examined comparable success predicting lifetimes terms number intervening calls malloc may argued equally useful measure 
focus number bytes purposes comparison existing literature 
input files taken public ftp archive available zorn grunwald 
procedure take traces files typically largest store entire program trace 
traces combined form training set decision tree third test learned tree 
ghostscript training files manual ps large ps test file ud doc ps espresso training files cps mlp test file xp cfrac training inputs test input gawk training file awk words small awk test file awk words large awk perl training files perl perl input hosts perl hosts data perl input test file perl words small awk input gcc training files cse combine test file expr short lived allocations attempted distinguish short lived allocations general pool 
comparison barrett zorn defined short lived allocations freed subsequent bytes allocated 
experimental results section summarized table 
barrett zorn oc application false pos false neg false pos false neg ghostscript espresso cfrac gawk perl gcc table prediction errors short lived allocations percentages bytes 
values parentheses trees truncated levels 
barrett zorn results included comparison available 
permanent allocations attempted distinguish permanent allocations general pool barrett zorn consider short lived allocations discussed previous section 
permanent allocations freed program terminated 
note ambiguity definitions permanent block allocated near program lifetime may 
table summarizes results experiments 
opportunity examine function relevant features program stacks subject 
gawk varied training match barrett zorn 
training input single gawk program file run data set tested gawk program run 
unable compute barrett zorn exact results appears false negative rate 
application false pos false neg ghostscript espresso cfrac gcc table prediction errors permanent allocations bytes 
runtime performance raw error rates indicate possible accurate predictions lifetime allocation requests predictions improve program performance 
address question incorporated predictive trees applications measured effect runtimes 
hybrid implementation replacing single monolithic decision tree number simpler site specific trees 
site case lexical instance call malloc equivalent 
allocations site exclusively short lived permanent directly insert call specialized allocators manner barrett zorn 
allocations site mixed site specific tree put place predict allocation lifetime 
requests predicted short lived routed quick malloc routine similar described barrett zorn predicted permanent routed routine specialized purpose 
tests random data specialized routines approximately times faster malloc 
experiments targeted applications varying degrees predictive accuracy ghostscript gcc cfrac 
results encouraging see table 
ghostscript gcc best predictive accuracies benchmark data section clear improvement performance 
cfrac lower accuracy mixed results shorter runs runtime performance improved longer runs missed predictions pollute short lived memory area degrade performance 
discussion application machine learning computer software operating systems largely field promises great benefit 
described application producing efficient accurate predictions lifetimes memory allocations 
data suggest feature set large runtime program stack possible characterize predict memory usage program benchmark runs 
exceptions appear programs perl gawk take script data file 
memory usage depends characterizing typical scripts typical data sets scripts act 
ongoing research memory management pursuing number con perl generalization performance significantly better tested script different data 
reported results different scripts comparison barrett zorn 
application benchmark test error run time training set short long permanent normal predictive ghostscript trained ud doc ps sites tree manual ps large ps thesis ps gcc trained combine cse decl sites trees expr loop reload cfrac trained delta delta delta sites trees delta delta delta delta delta delta delta delta delta table running times seconds applications site specific trees 
times shown averages runs exception loop statistically significant probability greater 
results described including lifetime clustering intelligent garbage collection 
barrett zorn lifetime predictors improve memory allocation performance 
sigplan conference programming language design implementation june albuquerque new mexico pp 

breiman friedman olshen stone classification regression trees wadsworth international group belmont ca 
grunwald zorn efficient synthesized memory allocators 
technical report cu cs dept computer science university colorado 
murthy kasif salzberg system induction oblique decision trees 
journal artificial intelligence research 
wilson johnstone neely boles dynamic storage allocation survey critical review 
proc 
intn workshop memory management scotland sept springer verlag 
zorn grunwald set benchmark inputs publicly available ftp archive ftp cs colorado edu pub misc malloc benchmarks 
