intrusion detection system teiresias pattern discovery algorithm andreas wespi marc dacier herv debar ibm research division zurich research laboratory ch switzerland authors andreas wespi research scientist ibm zurich research laboratory information technology solutions department 
holds sc 
computer science university berne switzerland 
research interests include intrusion detection network security general distributed parallel computing 
marc dacier holds sc 
computer sciences university louvain belgium worked research assistant 
obtained ph computer security toulouse france 
worked security consultant paris france 
joined ibm zurich research laboratory manager global security analysis laboratory 
herv debar research scientist global security analysis laboratory ibm zurich research laboratory works system network security particular intrusion detection system management 
interests include secure systems artificial intelligence 
dr debar holds ph university paris france telecommunications engineering degree institut national des communications france 
mailing address andreas wespi marc dacier herv debar ibm research division zurich research laboratory ch switzerland 
telephone fax mail dac deb zurich ibm com descriptors intrusion detection teiresias pattern discovery pattern matching variable length patterns unix processes audit logs functional verification tests edited urs pia pedersen karsten petersen tim world aps aalborg denmark isbn proceedings intrusion detection system teiresias pattern discovery algorithm addresses problem creating pattern table model normal behavior process 
model purposes 
far approaches proposed fixed length patterns variable length patterns naturally suited model normal process behavior 
developed novel technique build tables variable length patterns 
technique teiresias algorithm initially developed discovery rigid patterns unaligned biological sequences 
evaluate quality technique testbed environment compare techniques fixed length patterns 

proceedings new technique detect attacks unix processes observing behavior deviations processes 
initial results debar dacier wespi 
latest results obtained applying new algorithm teiresias initially developed discovery rigid patterns unaligned biological sequences 
readers aware previous may want skip sections directly go section 
forrest perelson allen introduced change detection algorithm way natural immune systems distinguish self nonself detecting computer viruses 
forrest hofmeyr somayaji longstaff reported preliminary results extending approach intrusion detection area establishing definition self unix processes 
technique models way application service running machine normally behaves registering sequences system calls invoked 
intrusion assumed pursue abnormal paths executable code detected new sequences observed see haeseleer forrest helman forrest hofmeyr somayaji hofmeyr 
behavior technique intrusion detection system trained learn normal behavior process usually done recording activity process running real environment period 
procedure drawbacks potential produce false negatives possible behaviors exercised recording period new users new applications configuration changes may introduce new usage patterns 
potential produce false positives application recording period 
observed behavior function environment running prevents distribution initialized intrusion detection system immediately plugged activated 
approach consists artificially creating input data sets exercise normal modes operation process 
example forrest 
set messages study behavior sendmail daemon 
method eliminates risk obtaining false positive obtaining false negative 
furthermore extremely complex time consuming task come input data set 
debar dacier wespi shown functionality verification test suites provided application developers observe specified behaviors application 
approach able eliminate risk obtaining false positive dramatically reduce risk obtaining false negative design input data set exercises proceedings normal sense having specified designer application modes operation application study 
results experiments running new algorithm teiresias create call variable length sequences represent normal behavior process 
suites differs forrest ways variable length patterns fixed length patterns 
decision raise alarm new paradigm simpler hamming distance described forrest allowing possible realtime countermeasures taken 
structure follows 
section presents principles intrusion detection techniques working 
explains patterns generated cover sequences 
section goes details applying teiresias algorithm intrusion detection 
section presents experimental results compares approach fixed length approaches 
section concludes offering ideas 

principle approach approach unix processes described sequence audit events generate start fork finish exit 
normal behavior processes modeled table patterns sub sequences extracted sequences 
detection process relies assumption attack exploits vulnerabilities code new included model subsequences audit events appear 
fig 
describes complete chain configure detecting tool 

line treatment upper part fig 
represents model normal behavior created offline 
audit events recorded ftp daemon triggered experiment process translated letters easier handling 
letter system represents combination audit event name process generating pieces information provided unix audit trail 
recording runs filtering reduction process purpose explained 
experiment completed entire audit information generate table patterns constitute model normal behavior system 
purpose filtering reduction aggregation box threefold note forrest 
sequences system calls audit events 
obtaining system calls constitutes intrusive technique 
proceedings explained detail remainder section filtering eliminate irrelevant events processes related services monitor sort remaining ones process number reduction remove duplicate sequences due processes generating exactly stream audit events start fork finish exit aggregation remove consecutive occurrences system calls 
intrusion detection system 
sorting prevents audit stream arbitrary context switches operating system 
processes sorted intrusion detection process applied process individually 
events inside process remain order written audit trail 
reduction keeps unique process images model extraction 
test suites record normal behavior ftp daemon 
test suites carry repetitive actions result instances process image see debar complete explanation issue 
remove duplicates current algorithm extract patterns audit data 
line version memory cost algorithmic complexity keeping known process images 
proceedings aggregation comes observation strings consecutive audit events quite frequent certain events exhibiting small variations 
example ftp login session ftp daemon closes file handles inherited inetd 
number closes changes apparent reason 
simplified audit trail obtain model contains fewer shorter patterns observed differences experiments aggregation 
claim reduced simplified audit trail original equivalent new possibly semantic content 
experimental choice remove aggregation part true false alarm performance intrusion detection system satisfactory 
aggregation phase omitted intrusion detection technique requires redundancy neural networks 
obvious aggregation consists replacing identical consecutive audit events additional virtual audit event 
doing enriches vocabulary number registered audit events possibly number patterns want keep small 
solution simply aggregates identical consecutive audit events 
audit event represents events regular expression formalism output aggregation box 

real time detection lower part fig 
shows real time intrusion detection process 
audit events generated ftp daemon go sorting reduction mechanism real time 
apply pattern matching algorithm section cover sequences fly 
known pattern matches current stream audit events decision taken raise alarm see section 

pattern matching algorithm pattern matching algorithm quite critical performance system 
wish maximize speed detection capabilities 
require patterns match exactly matched ordinary expressions wildcards 
step algorithm step looks exact match second step looks best partial match possible 
steps illustrated examples figs 

step algorithm illustrated fig 

pattern matches string selected pattern table 
pattern matches string event counted uncovered removed 
algorithm subsequently applied remainder string 
selectable pattern algorithm recursively look patterns exactly cover continuation string depth proceedings string whichever comes fig 

means selectable pattern chosen find patterns completely match events pattern sequence 
sequence exist step algorithm 
rationale want know selected pattern positive influence coverage audit events vicinity 
pattern sequence algorithm head pattern sequence continues remainder string 
exact pattern matching sequence 
approximate pattern matching sequence 
find patterns match sequence selected pattern try selectable pattern table 
fact selectable patterns fulfill depth requirement triggers second phase algorithm 
second step algorithm deals failure cases illustrated fig 

algorithm looks sequence patterns covers largest number audit events 
sequence removed string algorithm goes back part looking selectable pattern shortening string long 

intrusion detection proceedings string algorithm extracts number groups audit events covered length groups 
decision raise alarm length uncovered sequences 
worth noting different measures purpose forrest 
amount percentage uncovered events string 
reasons choosing measures threefold processes generate large number events 
attack hidden midst set normal actions 
percentage uncovered characters fail detect attack case 
small processes falsely flagged anomalous uncovered events percentage uncovered characters 
long processes falsely flagged anomalous isolated uncovered events amount uncovered characters 
observed experiments trace attacks represented number consecutive characters 
consistent findings hofmeyr note mismatches due intrusions occur fairly distinct bursts sequences system calls monitored 
means attack carried fewer consecutive characters 
experiments led choose value words group consecutive events considered anomalous flagged attack 
amounts defining intrusion event generates sequence consecutive events covered algorithm defined 
validate concepts developed intrusion detection testbed debar dacier wespi compare various strategies build table patterns detector 
strategies focus ftp service widely known contain vulnerabilities provides rich possibilities user interaction 

generating variable length patterns teiresias easy generate fixed length patterns immediate approach building pattern table 
techniques generate tables fixed length patterns described forrest 
debar 

variable length patterns appear naturally suitable describe normal behavior process 
careful look sequences audit events proceedings generated behalf process shows cases long subsequences repeated frequently 
example process images obtained ftp daemon start string 
string contains audit events incorporated pattern set 
approaches fixed length patterns shorter pattern lengths detect long patterns 
variable length patterns motivated fact example ftp daemon answers user commands command probably represented set long sequence audit events 
capability extract variable length patterns data set sense teng chen lu 
looking automated approach extract variable length patterns 
manual pattern extraction feasible small scale experiments hofmeyr time consuming 
technique suffix trees proposed generate variable length patterns automatically debar 
preliminary results show ability method detect real intrusions detailed analysis indicates prone issue false alarms 
novel method generate set variable length patterns 
method comprises steps 
variable length patterns contained set training sequences process images created training system determined 
second reduction algorithm applied prune entries pattern table contribute coverage 
patterns may share common sub sequences patterns may needed cover training sequences 
goal minimal pattern set cover training sequences 

extracting maximal variable length patterns input pattern extraction module fig 
sequences audit events preprocessed described section 
define variable length pattern sub sequence minimal length occurs twice different sequences 
furthermore consider maximal variable length patterns 
pattern maximal pattern contains pattern sub sequence number occurrences pattern example patterns abc abcd pattern abc considered maximal occurs pattern abcd 
algorithms determine variable length patterns 
teiresias algorithm rigoutsos novel algorithm developed initially discovery rigid patterns unaligned biological sequences 
teiresias interesting properties 
suited problem main reasons finds maximal variable length patterns avoiding generation non proceedings maximal intermediate patterns 
performance scales size output 
follows teiresias efficiently finds maximal variable length patterns set training sequences 

reducing pattern set want pattern set process specific possible 
means patterns cover audit sequences generated behalf process created audit sequences process 
set maximal variable length patterns usually contains overlapping patterns patterns share common sub sequences 
assume simple set training sequences extracting maximal variable length patterns results pattern table abcd abc dea fde bc de ea examples overlapping patterns abcd abc share common sub sequence abc 
question arises patterns needed cover training sequence 
decompose training sequences resulting sub sequences correspond entries pattern table 
possible decompositions training sequences listed 
symbol mark decomposition points 
abcd ea bc fde abcd abc ea de fde abc dea bc fde abcd abc ea de fde see patterns second decomposition 
decomposition pattern dea occur pattern abcd occur second 
conclude pattern set determined teiresias reduced decomposition coverage training sequences unique 
various ways construct reduced pattern set 
reduced pattern set fulfill requirement possible cover training sequences patterns reduced pattern set 
addition features desirable proceedings reduced pattern set contain long patterns 
number patterns reduced pattern set minimal 
pattern set preferably contains long patterns assumed process specific short patterns 
example pattern length expected audit sequences different processes quite pattern length audit sequences different processes 
small pattern table useful practical point view 
fewer patterns pattern matching algorithm consider efficiently run 
mentioned preferences contradictory 
allowed minimal pattern length extreme case pattern table smallest 
consist audit events created behalf process 
pattern set useless single audit events process specific created behalf processes 
furthermore attacks trigger additional audit event detected 
apply heuristics constructing reduced pattern set overcome duality reach compromise 
mentioned looking automated approach determine table variable length patterns cases problem complex solved manually 
table gives information problem size ftp experiment performed 
training sequences events patterns maximal patterns covering patterns table problem size ftp experiment 
executed ftp client result different audit sequences server side 
audit sequences comprise audit events 
audit sequences serve input pattern extracting module see fig 

retrieved variable length patterns training sequences obtain total patterns 
total patterns maximal 
patterns generate teiresias algorithm 
obvious generating maximal patterns directly teiresias great advantage approaches generate intermediate patterns 
maximal variable length patterns pattern set patterns constructed covers training sequences 
proves necessity reducing pattern sets generated teiresias pattern matching process consider patterns clearly run faster consider entries 

results proceedings set test environment measure quality various pattern sets 
train system functionality verification test suite aix ftp daemon 
test suite exercise ftp automatically 
pattern extraction algorithm place various pattern tables may created 
results obtained different pattern sets fixed length patterns length fixed length patterns length variable length patterns obtained teiresias algorithm pattern reduction 
fixed length patterns created splitting training sequences pieces pattern length 
certain corrections account case training sequence length multiple pattern length debar 
comparison fixed length patterns length 
consider patterns length sufficiently process specific consider patterns length longer initial tests showed produce results 
proof concept testbed simulate user sessions attack performed user sessions attacks performed ftp server 
pattern matching algorithm different sets see attacks detected alarm raised ordinary user sessions attacks simulated 
results summarized table 
set method mean pattern length number patterns uncovered events false positives attacks detected table comparison pattern tables 
longer length fixed length patterns patterns needed cover proceedings training sequences 
total patterns needed case length needed case length 
variable length approach obtain mean pattern length fewer patterns needed coverage 
conclude table variable length patterns constitutes compromise pattern length table size 
discussed section intrusion detection system raises alarm length uncovered sequences exceeds threshold 
heuristics applied determine ideal threshold 
principle see threshold uncovered event results alarm raised 
results obtained far show difficult achieve 
general rule state desirable uncovered events possible normal user sessions 
column table shows variable length pattern performs best respect criterion 
events covered opposed uncovered events obtained set fixed length patterns length respectively 
fixed length patterns length variable length patterns raise false positives claim detected attack attack occurred 
second pattern set results false positives 
implemented attacks ftp server 
attacks exploit server misconfigurations exploit deficiencies older versions ftp daemon 
attacks attacks detected patterns sets pattern set 
mentioned number false positives number attacks detected related threshold 
high threshold reduces number false positives number attacks detected low threshold increases false positives number attacks detected 
account criteria compare quality pattern sets state variable length pattern set performs best 
contains longer patterns sets requires smaller pattern table covers nearly events normal user sessions raises false positives detects attacks 

intrusion detection system model normal process behavior audit sequences created behalf process 
process model pattern table entries sub sequences audit event sequences determined training phase 
fixed length pattern approach certain limitations including inability represent long meaningful substrings appears natural variable length patterns 
described technique generate tables proceedings variable length patterns automatically 
construct patterns teiresias algorithm method initially developed discovery rigid patterns unaligned biological sequences combination pattern reduction algorithm 
showed variable length pattern model advantages fixed length model 
advantages variable length patterns longer fixed length patterns fewer patterns needed cover training sequences 
consequence process specific patternmatching implemented efficiently 
concentrate validating approach network services implementing real time pattern matching algorithm 
proceedings debar dacier wespi 

fixed vs variable length patterns detecting suspicious process behavior 

quisquater meadows gollmann eds computer security esorics lecture notes computer science vol 
pp 

berlin heidelberg springer 
debar dacier wespi 

audit information generation intrusion detection systems 
papp eds information systems security proceedings th international information security conference ifip sec pp 

vienna austria budapest hungary chapman hall 
debar dacier wespi 

experimentation workbench intrusion detection systems 
technical report rz 
ibm research division zurich research laboratory switzerland 
haeseleer forrest helman 

approach change detection algorithms analysis implications 
proceedings ieee symposium research security privacy 
ieee computer society press 


computer intrusion detection comparative survey 
technical report 
center computer security research university nsw australia 
forrest hofmeyr somayaji 

computer immunology 
communications acm 
forrest hofmeyr somayaji longstaff 

sense self unix processes 
ieee symposium research security privacy pp 

ieee computer society press 
forrest perelson allen 

self nonself discrimination 
proceedings ieee symposium research security privacy pp 

ieee computer society press 
hofmeyr 

intrusion detection system call traces 
ieee software 
rigoutsos 

combinatorial pattern discovery biological sequences 
bioinformatics 
teng chen lu 

adaptive real time anomaly detection inductively generated sequential patterns 
proceedings ieee symposium research security privacy pp 

ieee computer society press 

