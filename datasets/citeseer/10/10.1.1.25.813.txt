mixed initiative interfaces learning tasks smartedit talks back steven wolfman lau pedro domingos daniel weld department computer science engineering university washington box seattle washington cs washington edu applications machine learning viewed interactions teacher provides training examples student learns generalization training examples 
application great interest iui community adaptive user interfaces 
traditional learning interface scope teacher student interactions consists solely teacher user providing number training examples student learner testing learned model new examples 
active learning approaches go step traditional interaction model allow student propose new training examples solved teacher 
propose interfaces machine learning closely resemble human teacher student relationships 
teacher time attention precious resources 
intelligent student proactively contribute learning process reasoning quality knowledge collaborating teacher suggesting new examples solve 
describes variety rich interaction modes enhance learning process presents decision theoretic framework called diamand choosing best interaction 
apply framework smartedit programming demonstration system describe experimental validation preliminary user feedback 
keywords mixed initiative machine learning applications programming demonstration 
machine learning ml widely areas wrapper induction credit approval image analysis data mining intelligent user interfaces 
learning module appear iui 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
iui january santa fe new mexico 
copyright acm endow system ability extract valuable information substantial amounts data adapt new circumstances 
traditional applications machine learning involve users domain experts provide label training examples primitive ways 
systems operate batches examples provide request feedback learning process 
communication user learning system provision batch examples test system batch examples 
experience research shows great bene ts realized machine learning applications rich user interfaces 
active learning shown just allowing system pick example label greatly reduce number examples user need consider :10.1.1.119.2797
bauer describe inclusion variety interaction modes wrapper generation system result robust wrappers annoyance user 
previous smartedit text editing system led machine learning tasks bene careful management interactions user 
result system requires fewer examples learn concept acquires domain knowledge user ort appropriate users unfamiliar machine learning 
vision view process training machine learning system analogous interaction teacher student 
teacher guides student concept presenting explaining examples 
teacher ultimately controls interaction student takes initiative directing teacher attention areas knowledge unclear 
interaction user machine learning system mimic interaction teacher student 
user teacher demonstrates examples concept system student 
traditional machine learning lled role student listening quietly 
strategy may waste valuable resources teacher time ort withholding information student level understanding 
propose machine learning systems follow example proactive student asking questions proposing examples solutions relating level knowledge appropriate interaction learning system learner context attributes interaction mode library user current interaction mode attribute vector mode solved examples user actions queries diamand learned model diagram diamand interaction manager machine learning application 
traditional ml systems bottom components xed interaction mode 
diamand allows introduce library interaction modes choose set attributes 
chosen interaction mode regulates stage communication interaction user learning system 
ective 
mixed initiative interface uniquely appropriate machine learning systems user directly interested helping underlying system 
user primary goal system re ne knowledge point learned correct concept aid task 
user interface act maximize value user orts learning system 
interface guidance may take form informing user learner internal state comprehensible domain oriented manner control discourse user attention new aspects learning process 
overview rest explore issues arise constructing mixed initiative user interfaces machine learning systems 
describe general framework interaction management machine learning common structure machine learning tasks examples labels solutions predictions data sets 
particular describe comprehensive list classes interaction modes machine learning systems set attributes measuring aspects utility interaction modes diamand decision theoretic interaction manager discourse system selecting interaction modes multi attribute utility function learning framework adapting weights diamand utility function individual users experiments validating framework full implementation diamand smartedit programming demonstration system text editing preliminary user feedback smartedit implementation diamand 
shows high level architecture system 
diamand selects set interaction modes judges appropriate attribute vectors 
best modes user controls stage discourse updating state learner 
modes new state learner 
implementation diamand smartedit currently includes interaction modes attributes original smartedit learning system adaptive utility function 
section motivate subject user interfaces machine learning brief case study smartedit 
top blocks sections list classes interaction modes diamand decision theoretic framework adaptively selecting modes example set attributes diamand 
section section describes implementation framework smartedit programming demonstration system discusses preliminary user feedback 
conclude contributions sketch lines research building 

case study smartedit machine learning application bene ts mixed initiative discourse programming demonstration user demonstrates system perform task 
system treats demonstration partial execution trace program solves task generalizes trace original program 
prior formulated programming demonstration pbd inductive learning problem 
formulation learner sequence changes application state observed user performs task concrete example 
learner generalizes program capable performing task new examples learning functions transform initial application state desired nal state 
actual learning mechanism involves maintaining compact representation set candidate hypotheses pared learning include hypotheses consistent observed task 
user interface pbd similar regular macro recording interface user demonstrates behavior program recording program performs concrete example 
contrast regular macros pbd system doesn merely record series keystrokes 
generalizes demonstrations robust executable program 
recording demonstration user ask system execute learned program example 
ect system interaction modes recording user solution example solving example learned program 
implemented interface smartedit pbd system text editing 
example simple task smartedit delete html comments text screenshot original smartedit pbd system 
task delete html comments 
rst comment deleted just word sample 
system incorrectly predicts user action move string ample le 
user demonstrates task starting macro recorder moving cursor comment selecting comment shift cursor keys pressing delete key delete 
stops macro recorder 
demonstration smartedit candidate programs program consisting actions form move occurrence occurrence delete selection 
need mixed initiative interface interface users problems revealed 
user performed examples asking system predict action fact system learned task correctly rst demonstrations 
performed example asking system prediction 
system learned right program user cycle large number predicted actions nding correct 
third user asked system predicting actions wished return demonstrating examples system support returning recording mode 
problems re ect interactive machine learning applications 
smartedit instance machine learning algorithm generalizes solutions supplied user learns model explaining solutions 
user interacts learning algorithm solving examples supervising system performance example 
points space possible interaction modes user learner 
problems revealed user tests suggest interaction modes bene ts acquiring concepts quickly judicious choice example classify active learning allowing user control learning process 
section describes space interaction modes detail 

interaction learning formed comprehensive list ective general classes interaction modes machine learning 
classes relies features common learning domains assumes machine learning expertise part user 
supervised machine learning task includes distinct examples user solves classifying complex manipulation 
possibly ordered set unsolved examples readily available easily constructed 
learner searches space hypotheses explain observed examples execute hypotheses new unsolved example predict solution 
users generally familiar application domain text editing may vary knowledge underlying machine learning system 
machine learning expert able correct learner individual hypotheses assume users machine learning experts 
assumption especially true case adaptive user interfaces users may directly aware machine learning system 
list interaction mode classes includes user solution simplest class standard machine learning learning system observes example solution user provides uses result input learning algorithm 
smartedit uses interaction mode class user provides solutions partial solutions examples demonstrating text editing procedure section text 
collaborative solution system executes learned hypothesis example presents solution user 
user con rms solution case example training data system asks alternate solution 
system propose alternate solution user acceptance rejection process continues 
example user demonstrates delete rst comment asks system predict action 
system incorrectly predicts move word ample choose cycle guess 
members rst interaction classes implemented original smartedit 
system solution class interactions learning system assumes slightly control executing learned concept example part demonstrating solution user giving chance reject solution 
user take chance system assumes solution correct carries example 
user need exert little ort type interaction long system learned concept high quality 
note collaborative solution mode user correct system predictions indicates prediction correct 
recalling example smartedit run learned program step time program correct user interrupt smartedit proceed delete remaining html comments le 
performance performance interaction mode learning system takes full control executes concept autonomously new examples 
implemented smartedit example performance mode useful system learned program delete html comments 
proceed delete described section implemented representatives classes generation classes user example selection 
comments html les directory 
program applied new les immediately date 
performance mode potential system progress learning studying distribution new examples system supervised user 
system example selection system proposes user shift attention particular example user selected example randomly chosen example order 
related active learning literature system driven example selection provide greater learning bene system collect data interesting examples rst 
user example selection system requests user select provide promising new example investigate 
ideally request accompanied high level description kind example valuable operate 
class interactions trades increased control user increased burden onus selecting example 
system example generation class system generates new example user solve 
learning applications relatively unstructured unrestricted input system may able generate arbitrary examples 
structured environments modifying existing examples may ective generating entirely novel examples 
user example generation system asks user create new example solved 
type interaction valuable system specify user quality new example help discriminate contending hypotheses 
example smartedit request example open html comment unmatched closing tag 
user provides example system clarify learned concepts 
hand user indicates examples impossible irrelevant system learned information distribution examples 

decision theoretic framework interaction modes described previous section form core primitives rich comprehensible discourse user 
assume human user ectively control dialogue nd complete set options bewildering 
assumption especially hazardous expect users experience machine learning algorithms choice ective interaction depends crucially state ml system 
adopt mixed initiative framework diamand learner human user participants dialogue aimed improving learner hypothesis minimal ort part user 
user learning system communicate various interaction modes 
set attributes provides means discriminate interaction modes attribute provide numerical evaluation range interaction state learning system 
diamand scores interactions attributes appropriate presents best user 
user may proceed interaction override system choose di erent 
diamand scores interactions decisiontheoretic framework utility model allows learner balance interaction expected burden user estimated value task learner 
believe human user perceive utility interaction situation di erently 
users may prefer learning system highly active control discourse early possible expense user corrections 
prefer system watches quietly certain understands user concept 
account di erences diamand adapts utility function preferences individual user 
render problem adapting diamand utility function feasible reasonable number interactions model function linear combination weighted attributes 
diamand models individual user preferences set weights available attributes 
weights interaction interaction score dot product weight vector vector values attribute interaction 
diamand framework application designer provides learning system set modes interacting system set attributes measure important aspects interaction modes 
core diamand component analyzes available interaction modes utility function chooses mode highest utility user 
diamand imposes constraints user interface system mediates 
order support collaborative selection appropriate interaction user system able override system choice interaction mode choose mode prefers 
smartedit diamand implementation accomplish presenting available interactions user list radio buttons 
second facilitate rapid learning interface provide mechanism feedback diamand particularly poor interaction mode choices 
requirement satis ed bad choice button 
interface capabilities diamand codify feedback learn 
simple feedback model lend variety actual learning algorithms 
interaction receives feedback value range represent update correlation user preferences interaction receive positive feedback interaction receive negative feedback 
diamand gathers feedback mechanisms utility values 
purposes discussion utility interaction choice 
time user overrides choice interaction mode diamand takes implicit negative feedback choice cs positive feedback user choice cu 
response generates positive feedback value user choice equal cu cs 
diamand generates negative feedback choice interaction second highest utility equal cs 
second user choice diamand system generates strong negative feedback value steps similarity error error similarity metrics averaged rst steps simulated diamand runs 
fteen attributes choices domain 
con dence bars set assuming tailed gaussian distribution results 
choice equal cs parameter learning system 
learning mechanism diamand responds user feedback online reinforcement learning technique loosely described auer 
diamand performs exploration try apparently inferior interaction modes order solicit feedback choices 
diamand allows feedback interaction time 
algorithm adjusts weight vector adding scaled version interaction attribute vectors 
attribute vector scaled interaction feedback value uniform factor controlling learning rate gradient descent 
shows action learning system arti cial domain 
assumed domain fteen attributes interaction modes numbers approximate hope eventually achieve smartedit 
model user preferences set weights attributes revealed diamand 
generate random vector entry attribute selecting values range element vector 
run user created generating random weight vector scaling length 
diamand initial weight vector random vector 
step random attribute vector constructed interaction 
respective weight vectors diamand user model pick best highest utility interaction 
choices di er feedback generated user diamand choice favor 
user utility diamand choice issues presses bad choice button 
diamand updates model feedback 
earlier version diamand explore space interaction modes manner frustrated users making wrong choices apparent reason 
measured values averaged runs step 
error step di erence user utility value diamand interaction choice user utility choice 
similarity diamand weight vector user vector cosine angle vectors dot product divided lengths 
value approaches vectors similar 
shows long user preferences really represented linear combination attributes diamand quickly learn user preferences 
scenario diamand error interactions user typical smartedit tasks 
tested variations number attributes interaction modes 
results indicate interactions learning faster attributes slow learning fty attributes choices diamand error level drops similarity level rises steps 
starting diamand zero weight vector random vector little di erence settings steps 

diamand attribute set attribute set diamand system de nes space user adaptations available system 
diamand adapt user particular user preferences expressible basis set de ned attributes 
best attribute set speci diamand implementation depend somewhat learning system interaction set vital consideration attribute set re ect balance user ort value task system 
smartedit implementation diamand chose appropriate general attributes viable learning system interaction library combinations 
rst user input level continuity probability correction focus user effort represent physical mental ort required user 
task progress value system focus achievement user objective 
measures re ect typical objective user machine learning system complete task re ning hypothesis learning system correctly describes data 
remainder section describe attributes implementation 
user input attribute measures diculty completing interaction 
interactions may possible calculate expected amount input keystrokes mouse clicks necessary complete interaction 
case smartedit take simple approach hand craft function interaction returns rating 
rating re ects calculated possible courses interaction subjective estimate amount input required potential courses 
note ideally attributes measuring user ort draw germane human computer interaction task analysis initial described uses simple heuristics attributes 
complex realistic scheme applied results mapped range 
level continuity new interaction preceding measures additional burden interactions user imposed cognitive required change interaction modes 
example diamand moves discourse performance mode directly user solution mode sudden shift initiative confuse user 
hand moving collaborative solution mode performance mode confusing change initiative great 
smartedit diamand implementation create matrix values re ect subjective estimation level continuity pair interactions 
track completed interaction mode assign value attribute matrix entry mode mode currently consideration 
probability correction probability user forced correct error system 
measure re ect amount attention user forced pay system interaction 
typically attribute estimated learner con dence hypotheses 
case smartedit measure value directly learning systems probability framework 
interaction simulated determine probability user forced correct system prediction 
task progress achieved interaction measure user task completed course interaction 
smartedit measure value expected number program actions completed course interaction 
measure mapped range establishing upper bound reported value scaling 
value system interaction amount improvement increase con dence system hypothesis space 
measure change quality hypothesis space note space fewer distinct hypotheses ambiguous favor correct concept 
smartedit quantify ambiguity entropy hypothesis space amount information system gain ask user hypotheses correct 
note possible interaction mode implicitly asks limited version broad question asking user explicitly displaying proposed solution mechanism 
interaction divides space programs disjoint subsets discriminates subsets 
instance recording example divides learning system hypothesis space distinct subsets predict possible recording trace 
demonstration calculate subsets 
demonstration point subset explains user actions 
model view expected change quality hypothesis space information gain interaction ig entropy information gain see chapter 
screenshot smartedit enhanced diamand 
task delete html comments rst deleted 
interactions lined left screen scores represented darkness fonts bar gauges right 
system just selected record step interaction asking user demonstrate move 
diamand selected interaction step third high probability error step interaction 
ig log set concepts drawn universe predict indistinguishable solutions current example probability concept task progress measure mapped range truncating scaling range entropy values 

implementation implemented framework context smartedit system 
smartedit previously supported modes interaction user solution collaborative solution intelligent interaction management 
user responsibility select interaction mode choice guidance 
impossible switch back user solution mode collaborative solution mode 
order introduce diamand collaborative framework smartedit followed steps described section provide learning system interaction library attribute set include interface capacity switch interactions poor interaction choice 
learning system smartedit learning engine version space algebra 
attributes described section 
constructed new library interaction modes 
create interaction library cleanly separated interactions smartedit recording mode asks user record entire example asks measurement compare utility demonstrating di erent examples system selection interaction mode 
user record just single action record full example record step 
ts user solution class section 
smartedit ability guess action step collaborative solution mode 
introduced entirely new interaction modes run example successively presents system guesses step current example 
brief pause allow user interrupt system commits guess 
interaction mode system solution category 
run sure interaction immediately executes learned program step step system con dence program step drops threshold currently 
interaction performance mode 
introduced system example selection form jump record example mode 
mode system cursor just example particularly confusing system asks user demonstrate example 
smartedit user interface altered display interaction choices set radio buttons 
diamand scores interactions displayed contrast font horizontal gauge right interaction shown 
bad choice button added allow users diamand choice 
result implementation system capable intelligently recommending interaction perform 
user interface problems motivated case study addressed interaction manager 
users tell recording examples system lowers ranking user solution mode interactions recommends collaborative system solution modes 
user enter collaborative solution mode system solution mode early switch back solving examples interaction manager 
performed formal user study focusing diamand 
received informal feedback smartedit implementation diamand collaborators students department 
feedback users motivated current design user interface 
example user smartedit perform task felt trained system correctly pair examples 
smartedit run system solution mode mistake irregular example went unnoticed 
performed task diamand interaction manager correctly recommended recording irregular example user failed notice change recommendations initiated run interaction anyway 
avoid problem weights represented format admits easy comparison options shaded gauges attention grabbing fading fonts 
similar process led new user control interaction system declines select interaction automatically asks user take initiative 
run system solution mode useful diamand introduced plain smartedit system 
interaction receives xed utility rating 
user control serves purposes 
maintains credibility system diamand takes control recommends interaction propose 
second provides bar user choice raised feedback mechanism 
ect extra positive feedback balances highly negative feedback provided bad choice button 
qualitative feedback users far mixed 
users aggravated intrusion diamand control discourse 
happy receive guidance assistance 
believe existing diamand mechanism appropriate attributes measuring user tolerance interruptions eventually accommodate styles users 

related lines research approached problem designing interfaces machine learning di erent ways developing methodologies learning interfaces creating interfaces speci learning applications 
active learning focuses value system attribute ignoring burden interactions user 
focus requires assumption interactions pose burden user assumption may reasonable face single mode interaction 
introduces numerous interaction modes distinguishing requires richer set attributes 
describe framework enabling domain experts construct intelligent agents 
framework selects interactions guide user exploration particular example 
address problem proactively selecting moving examples interactions interaction manager designed generalize speci learning system 
bauer describe pbd system wrapper induction 
system performs heuristic search space wrappers programs extract data web pages 
describe utility function speci wrapper induction help users choose re ne wrapper 
introduce attribute number questions asked user help determine bother user interaction current wrapper 
previous adaptive user interfaces provided mechanisms collaborating re ne learner concept 
early pbd systems request guidance user generalizing actions 
mail clerk agent learns observing user explicit feedback trained 
addition compares con dence user set thresholds tell decide initiate action suggestion remain quiet 
systems describes general interface machine learning supports interaction modes 
partly inspired planning 
example trains system describes robust multi modal interface treats ai planner user equal participants problem solving dialogue 

machine learning applications fertile area research intelligent user interfaces 
users experts domain thrown complex systems internal functioning may arcane goal interactions assist system learning process 
contributions advocate mixed initiative interface machine learner human user equally share responsibility guiding learning process 
de ne comprehensive set interaction modes capture wide variety interaction types 
decision theoretic framework learner repeatedly chooses interaction mode maximizes expected utility 
de ne multi attribute utility function balances direct user ort cognitive load cost correcting computer introduced errors potential progress user gain learner understanding 
describe initial implementation diamand context smartedit system programming demonstration 
plethora interesting directions stemming 
interface model thoroughly tested user studies 
applying diamand framework domains reveal new challenging problems 
graphical programming demonstration systems eager natural step allowing explore collaborative example selection constrained environment naturally sequential text domain 
diamand framework may applicable choosing interaction modes general user interface context solely interfaces machine learning systems 
current ongoing research involves introducing novel interaction modes automatic example generation realistic effective attributes diamand 
di erent learning algorithms complex non linear utility functions improve ecacy diamand core learning component 

acknowledgments people provided code help discussion corin anderson peter auer jim geo hulten zachary ives dutch meyer denise rachel pottinger kelly shaw 
research funded part oce naval research national science foundation iri iis arcs foundation barbara thomas cable fellowship national science foundation graduate fellowship microsoft fellowship nsf career award 

angluin 
queries concept learning 
machine learning 
peter auer 
improved line algorithm learning linear evaluation functions 
proceedings thirteenth annual conf 
computational learning theory 
morgan kaufmann june 
bauer paul 
information agents web mining 
proceedings conf 
intelligent user interfaces january 
tecuci marcu bowman 
coa agent programming agent teaching 
proceedings seventeenth int 
conf 
machine learning june 
david cohn les atlas richard ladner :10.1.1.119.2797
improving generalization active learning 
machine learning 
allen cypher 
eager programming repetitive tasks demonstration 
allen cypher editor watch programming demonstration pages 
mit press cambridge ma 
diaper editor 
task analysis human computer interaction 
ellis horwood 
ferguson allen 
arguing plans plan representation reasoning mixed initiative planning 
proceedings second int 
conf 
arti cial intelligence planning systems pages 
menlo park calif aaai press 
ferguson allen miller 
trains mixed initiative planning assistant 
proceedings third int 
conf 
arti cial intelligence planning systems pages edinburgh scotland may 
menlo park calif aaai press 
lau pedro domingos daniel weld 
version space algebra application programming demonstration 
proceedings seventeenth int 
conf 
machine learning pages june 
lau daniel weld 
programming demonstration inductive learning formulation 
proceedings int 
conf 
intelligent user interfaces pages redondo beach ca usa january 
lesh rich sidner 
plan recognition human computer collaboration 
proceedings seventh int 
conf 
user modelling ban canada july 
pattie maes kozierok 
learning interface agents 
proceedings fourteenth national conf 
arti cial intelligence pages 
witten 
agent programming demonstration 
allen cypher editor watch programming demonstration pages 
mit press cambridge ma 
mitchell 
machine learning 
mcgraw hill 
brad myers 
creating user interfaces demonstration 
allen cypher editor watch programming demonstration pages 
mit press cambridge ma 
howard rai decision analysis introductory lectures choices uncertainty 
addison wesley 
