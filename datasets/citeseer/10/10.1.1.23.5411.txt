ieee network may june modeling tcp congestion control important task improving service provided internet users efficiency network resource utilization 
importance due large amount tcp traffic internet percent total bytes percent total packets tcp type 
tcp source controls rate application packets function way network treats reacts packets 
main objective modeling come simple expressions tcp throughput network reaction 
main advantages 
determines factors influencing performance protocol gives people working tcp insights congestion control improved 
example modeling shown case drop tail buffers synchronized tcp flows throughput tcp connection inversely proportional square average round trip time rtt 
explanation evaluation bias tcp connections long rtts 
result proposed modification standard window increase algorithm tcp order improve fairness protocol 
modeling shown dropping packets randomly network routers done random early detection red improves fairness tcp making throughput connection inversely proportional average rtt square 
possible expression tcp throughput study change parameters tcp congestion control minimize variations window adding aggressiveness protocol 
useful multimedia applications tcp possibly new version tcp adapted applications 
second advantage tcp modeling permits network designers improve reaction networks incoming packets moment congestion current control policy tcp 
important done direction 
focus dimensioning buffers network routers management occupancy 
objectives maximize utilization network resources protect tcp transfers minimize queuing time routers delay sensitive applications telnet short web transfers get better service 
typical problem kind tuning red parameters 
red interesting buffer management technique solution achieve objectives 
example expression tcp throughput calculated shown number tcp connections exceeds certain threshold red buffer gets unstable regime 
instability explained sudden jump drop probability average queue length reaches maximum threshold see details red parameters 
motivated new parameter red gentle parameter order avoid jump 
authors explicit expressions tcp throughput improve parts network link layer wireless interface 
new application tcp modeling emerged 
consists explicit expressions tcp throughput control rate real time flows audio flow tcp friendly way 
reaction network packet drop probability averaged certain time interval rate real time flow set expected throughput tcp connection running network conditions 
clearly trade exists choosing long averaging time interval get smooth variation rate low jitter quality choosing short intervals get fast reaction changes network conditions 
modeling tcp seen step procedure 
model evolution tcp window congestion events moment congestion 
includes modeling particular mechanisms tcp timeouts limitation rate due window advertised receiver 
comes modeling network reaction consists directly transformation modeling process congestion events 
tcp connection lifetime seen succession congestion events tcp increases window reduces 
see model network describe rtt connection varies 
variation rtt determines variation window congestion events 
note tcp increases window amount rtt regardless length 
example congestion events window evolution depicted fig 

network defined single red buffer modeling tcp achieved considerable degree accuracy 
come accurate model network combine model tcp solve model tcp performance 
assumes single bottleneck router crossed tcp connections type 
difficulty arises want approximate throughput tcp ieee tcp ip modeling validation barakat inria france discuss article different issues considered modeling tcp protocol real environment 
discussion measurements internet 
show internet heterogeneous simplistic assumption tcp congestion control network may lead erroneous results 
outline results field novel approach correct validation model tcp 
ieee network may june real internet 
assumptions required model reaction huge heterogeneous environment 
difficulty analysis accuracy modeling change assumptions 
assumption may expect results hold internet paths 
results may hold due correctness modeling particular paths 
may hold due phenomenon observed cancellation errors introduced different blocks model tcp 
model tcp blocks validated separately blocks wide range internet paths 
address article problem tcp modeling general form 
focus mainly modeling tcp real network particular environment single drop tail buffer red buffer 
measurements conducted internet discuss different issues considered correct modeling tcp 
outline different approaches domain show need general approach copes heterogeneity network reaction observed 
see heterogeneity internet change performance model path hour path 
introduce notion separate validation block model tcp model validation 
discuss issues related throughput expressions practice particularly tcp friendly applications 
section measurement testbed refer course article 
discuss issues related modeling tcp window evolution 
issues related network modeling discussed 
explain technique validation model tcp conclude article 
refer reader details 
measurement testbed testbed consists long life tcp connections run internet machine inria sophia antipolis south france machines fig 

machine located inria 
second machine located paris km inria 
third machine located university south australia 
considered short distance medium distance long distance connections respectively 
henceforth terms sd md ld distinguish connections 
source located inria runs newreno version tcp 
newreno version tcp able recover multiple packet losses timeout division window 
source connections fed simple application data send 
connections run hours different days month january 
developed ran tool inria looks trace connection packets acks number statistical calculations connection total number packets acknowledged total number retransmissions moments window reduced temporal variation window size roundtrip time 
accounted mechanisms newreno developing tool particularly fact newreno source recover multiple packet losses window data 
stored statistics fixed time intervals separate files 
chose intervals get data file 
shall assume network conditions approximately interval 
time intervals set min sd connection min md connection min ld connection 
modeling tcp window evolution effort tcp modeling devoted long transfers congestion avoidance mode tcp 
slow start phase due fast increase window size short duration ignored 
window assumed increase linearly time congestion events decrease half size congestion 
moments congestion determined underlying model network 
moments source detects loss packet decides reduce window 
ideally new versions tcp try approximate moments detection loss data packets window 
tcp known increase window size congestion avoidance mode linear manner function rtt number time 
increase approximately equal packets rtt number packets covered ack 
linear increase time hold rtt supposed constant vary independently window size substituted analysis average transfer 
multiplicative decrease factor equal half source receives duplicate acks congestion detection fast recovery phase succeeds 
case timeout occurs window set packet slow start called quickly reach slow start threshold 
authors keep decrease factor case timeout equal half set window packet assume linear increase low value :10.1.1.1.3504
believe difference approaches expected low probability timeout new enhancements proposed tcp congestion control 
measurements showed ld connection losses detected timeout due small size tcp window 
result noticed 
sd md connections window large timeout phenomenon absent 
tcp modeling set multiplicative decrease factor constant value factor general window increase rate considered permits results study congestion control policies 
clearly model simple accounts linear increase multiplicative decrease part tcp congestion control 
issues considered better modeling tcp 
enumerate important sections explain possible introduced model 

measurement testbed 
sophia antipolis inria sophia antipolis sd md enst paris ld university south australia ieee network may june dependence window size rtt paths window tcp connection small compared bandwidth delay product packets cross multiple congested routers expect assumption linearity window increase hold 
paths connection contribute queuing time network routers congestion caused aggressive connections 
rtt varies independently window size substituted analysis average resulting time linear window growth rate rtt average rtt number packets covered ack 
independence expected hold paths window connection large compared product 
increase window case result increase rtt turn result sublinear increase window time 
expect presence linear model tcp window evolution uses average rtt calculation window slope result overestimation real throughput 
understand dependence plot variation rtt function window size ld sd connections figs 

ld connection typical example connection sd connection typical example second 
measure rtt packet window packets note window size measurement 
average rtts obtained close window sizes 
gives thick line figures 
see clearly ld connection rtt average constant independent window size 
increasing function window size sd connection sublinear window increase seen connection 
fig 
shows sublinear behavior 
plot variation real window sd connection seconds 
straight line corresponds expected window evolution rtt independent window size 
line time linear model tcp window evolution 
problem window increase complicates analysis difficult impossible obtain simple explicit expressions tcp throughput 
literature considers gives throughput solution implicit differential equations 
considering linear models succeeds finding closed form expressions tcp throughput :10.1.1.1.3504
clear moment modeled complicated network internet 
importance depends factors intensity exogenous traffic sharing path tcp connection buffering capacity network routers available bandwidth path 
real environment look traces rtt window size try infer traces model dependence rtt window size 
previous inference necessary content network defined single red buffer bandwidth propagation delay variation rtt function window size known 
model rtt window evolution network reaction provide required information calculation tcp throughput 
example models developed calculation 
model rtt variation traces sd connection propose technique inference dependence window size rtt 
define model variation rtt 
fitting technique infer parameters model traces connection 
appropriate model rtt variation 
ld connection rtt vs window size 
round trip time window size bytes inria australia day average round trip time 
sd connection rtt vs window size 
round trip time window size bytes inria day average round trip time ieee network may june literature networks router 
denote window tcp connection 
model considers rtt constant certain window size windows larger rtt increases linearly rate write model follows rtt rtt 
rtt seen contribution propagation delay exogenous traffic total rtt 
represents contribution connection total rtt window large 
represents bottleneck bandwidth path connection 
model rtt nonlinear square technique infer parameters rtt model traces connection 
rtt rtt measurement corresponds window write rtt follows rtt rtt oe oe certain error 
oe error introduced nth rtt measurement 
propose find parameters model minimize sum total number rtt measurements 
solve minimization problem traces sd connection shown fig 

get thick line fig 

plot fig 
percent confidence intervals measurements obtained 
results show clearly dependence window size rtt particular path 
small windows expected rtt constant equal window connection exceeds bytes expected rtt starts increase linearly bytes 
modeling timeouts fast recovery modeling consider mechanisms tcp 
due coarse granularity tcp timers ms implementations mechanism introduces certain idle time congestion detection 
second mechanism introduces certain time detection congestion duplicate acks resumption window increase 
time source supposed recover losses transmit new packets order ack clock 
modeling mechanisms tcp requires detailed description protocol behavior packet level 
behavior quite complicated model varies version 
fast recovery phase ignored due complexity modeling adds negligible contribution throughput works 
assumed source receives duplicate acks window resumes linear increase congestion event 
reasonable new versions tcp tcp sack fast recovery phase quite robust fast true versions reno fast recovery may fail due multiple losses window 
failure fast recovery results timeout slow start window packet 
model account fast recovery phase lead throughput overestimation failures frequent 
timeout mechanism studied probability packet dropped 
denote probability authors focus calculation probability source fails receive duplicate acks trigger fast recovery 
assumed necessary sufficient condition occurrence timeout 
timeouts assumed occur fast recovery phase 
believe case new versions tcp sack option robust quick fast recovery phase 
believe modifications proposed tcp error recovery failure oe 
sdc window size vs time 
instantaneous tcp window bytes time exact fluid model window real window 
sd connection expected rtt vs window size 
round trip time window size bytes inria day expected round trip time ieee network may june receive duplicate acks longer sufficient condition get timeout 
sources able recover losses ack received rtt 
anticipation deployment modifications show heuristic addition timeout mechanism model condition 
simplify analysis assumed packet dropped subsequent packets window dropped 
probability get timeout average duration timeout period calculated function basic timeout interval doubled source backs timer loss retransmission 
practice rtt shown safe value 
functions influence timeout intervals introduced model way 
calculate throughput connection excluding intervals words assuming window resumes linear increase directly congestion event method detection fig 

denote throughput denote throughput connection presence timeout intervals fig 

throughput cases equal ratio average number packets cross network congestion events average time congestion events see details :10.1.1.1.3504
denote process time intervals congestion events timeout intervals excluded fig 

denote process time intervals congestion events timeout intervals considered fig 

average number packets cross network congestion events cases follows equations fact write note expressions throughput terms packets second 
note throughput corresponds rate tcp packets leave network called receiving rate 
modeling window limitation problem previous model consider fact tcp source inject network packets window advertised receiver 
phenomenon seen fig 
plot number bytes network function time 
model sublinear calculation simple expression throughput impossible particular models network 
example calculation straightforward time congestion events constant 
techniques queuing theory authors succeed calculating throughput congestion events appear homogeneous poisson process 
general models network generally distributed time congestion events think finding approximations throughput 
possible approximation assume receiver window reached congestion events 
problem automatically transformed simpler constant time intervals congestion events equal average time intervals 
kind approximation 
find bounds throughput approximation 
advantage bounds valid receiver window 
approximation valid small receiver windows needs apply condition average window moments congestion order approximation expression throughput obtained window limitation 
note problem window limitation exists px es xx es es fd bp qp ppp zp min 
model timeout intervals 
time transmission rate 
model timeout intervals 
time transmission rate duplicate acks timeout ieee network may june small windows advertised current internet receivers kbytes 
supposed disappear trend increasing window field tcp header dynamically changing buffer size allocated tcp connection receiver 
recommended studies tcp congestion control consider infinite receiver window 
models account limitation tcp transmission rate importance 
fluid models vs discrete models models tcp assume window increases continuously congestion events 
continuous model window facilitates analysis permits tools theory continuous functions integration differentiation 
continuous increase may hold congestion window source volume data network 
quantity increases small values bytes ack arrivals increases steps packet rtts 
due nagle algorithm prohibits tcp source injecting small packets network 
moment congestion window source divided number packets network 
models assuming continuous increase window called fluid models appropriate prediction window variation tcp source 
throughput obtained models throughput tcp connection realize limited nagle algorithm 
correct throughput obtained ways discrete model window evolution fluid model introducing corrections calculated throughput account difference size congestion window source volume data network 
tcp modeling chose second alternative calculation tcp throughput due simplicity analysis fluid models permits 
technique order account packet nature tcp 
illustrate technique plot fig 
number packets cross network congestion events fluid model discrete packet model 
curve discrete model taken 
average half window assumed dropped network congestion rtt 
suppose transmission rates expressed terms packets denote average window size congestion average time interval congestion events 
denote throughput obtained fluid model real throughput tcp 
approximation obtained shifting fluid window packet results decrease throughput rtt 
subtracting rate dropped packets approximately equal follows results eq 
write correction see figures validating model fluid model tcp able give throughput detailed discrete model 
modeling network part model heterogeneity internet greatest impact 
objective part find characterization congestion loss moments 
loss moment terminology moment tcp source decides network congested reduce window 
moments directly characterized making assumptions way appear 
example assume appear deterministic process poisson process 
direct characterization approach widely literature 
possible indirect characterization consists finding model reaction network particular tcp packet small time interval 
examples approach papers suppose tcp packets dropped network constant variable probability assuming loss moments form poisson process variable intensity function window size connection 
advantage indirect approach decouples model network control policy tcp source 
happens internet paths process losses seen tcp connection function way increases decreases window process changes control policy packets transmitted constant rate 
indirect approach useful paths permits deduce loss process tcp connection see seen connection different congestion control policy 
cite different applications indirect approach paths 
application probe network flow packets constant rate flow calculate parameters appropriate model network packet drop probability variation loss intensity function transmission rate 
parameters possible predict performance tcp xx rtt ew es xx rtt ew es rate dropped packets ew es 
fluid model vs discrete model 
time packet model fluid model rtt rtt number packets network ieee network may june connection path 
application indirect approach trace tcp connection build model network predict performance tcp connection congestion control policy 
useful study influence change tcp congestion control parameters 
third application indirect approach tcp friendly application tfrc deduce loss process sees loss process tcp flow see get better estimate rate 
applications possible direct approach model network reaction deduce performance tcp connection loss process seen connection control policy 
recall talking paths loss process changes congestion control policy 
difficulty indirect approach definition correct model internet calculation parameters 
may possible simple network router red buffer known drop packets probability increases linearly average queue length difficult wide network internet 
clear model exists internet works paths 
certainly internet reaction tcp packets changes path time path 
example paths network may drop packets constant probability paths probability increases linearly congestion window paths probability increases logarithmically congestion window 
imagine different models network 
question paths models useful 
difficulty coming model network reaction works internet paths shall focus direct approach 
recall direct approach consists parameters loss process seen connection throughput calculation 
tcp connections control policy decide heterogeneity internet loss processes see 
section measurement results show extent internet heterogenous 
expression tcp throughput evaluate influence assumption network 
note simple expression tcp throughput general process congestion events 
diversity loss processes internet section loss processes connections 
plot distribution time intervals congestion events 
figures show samples distributions got 
figures contain comparison theoretical distributions exponential sd ld connections normal md connection 
sd connection process highly bursty results spike close origin 
burstiness seen fig 
window repeatedly divided short time intervals 
noticed congestion sd connection persists multiple consecutive rtts network keeps dropping packets source keeps reducing window 
md connection time intervals losses closely follow normal distribution 
ld connection expect loss process close poisson 
ld connection source small window contribute congestion network 
loss process sees superposition large number processes routers crosses 
correlation losses connections 
correlation varies day negative positive values absolute value covariance coefficient reaching 
tables show covariance coefficients saw connections different hours day 
recall covariance coefficient order process coefficient varies times highly negatively correlated highly positively correlated 
measurements show examples losses tcp connection may see internet 
expect see processes paths 
distributions inter loss times 
paths including satellite wireless links may exhibit memory paths result important correlation losses 
results discuss section impact different parameters loss process tcp throughput 
give idea certain assumption occurrence losses congestion events influences result modeling 
influence loss process choice tcp modeling existing models tcp simplistic assumptions times deterministic poisson 
propose general model network restricted assumption loss process stationary ergodic 
allow times follow distribution losses correlated 
derive general expression throughput uses addition cov ess es es es nn nn table 
sd covariance coefficient 
covariance hour coefficient traces min cov var table 
md covariance coefficient 
covariance hour coefficient traces min cov var table 
ld covariance coefficient 
covariance hour coefficient traces min cov var ieee network may june packet loss probability average rtt rtt variance times covariance function loss process 
window reduction factor equal half find variance vars covariance functions cov respectively loss process normalized square average time losses 
terms appear square root formula 
term corresponds intensity losses average time 
second term represents variation times 
third term represents correlation losses 
third term equal zero loss process exhibits correlation 
take term get known square root formula established deterministic loss process 
formula gives error introduce making certain assumption loss process 
example tells throughput increasing function variance times 
assuming losses deterministic poisson lead underestimation real throughput 
contrast assuming losses poisson deterministic lead overestimation real throughput 
section contains results measurements show wrong variance yields wrong throughput estimate 
formula tells due geometrical decrease weights small number covariance functions sufficient calculate throughput loss process highly correlated 
window evolution independent past certain number loss events 
separate model validation introduce section notion separate validation part model tcp 
researchers compare directly real throughput achieved tcp connection final result modeling 
saw model tcp composed parts model window evolution model losses 
proceeding validation step hides errors introduced parts 
gives sum errors separately 
prevents distinguishing part model error mainly due 
second important errors introduced parts model may opposite signs may total error small acceptable 
result wrong estimation capacity model see phenomenon error cancellation exist 
avoid problem error superposition possibly error cancellation propose validate separately tcp throughput rtt bp 

sd connection time distribution 
probability density function time inria day exponential distribution measurements 
sd connection time distribution 
probability density function time inria day exponential distribution measurements 
md connection time distribution 
probability density function time inria paris day exponential distribution measurements 
md connection time distribution 
probability density function time inria paris day exponential distribution measurements ieee network may june parts model 
start model losses 
consider fluid linear model window evolution 
get error introduced assumption distribution losses window tcp increase continuously linearly losses decrease multiplicatively factor losses 
tcp window ideal behavior reality 
construct ideal behavior window moments losses seen tcp connection 
average rtt measurements calculation linear window increase rate 
ideal window shown straight line fig 

call version tcp window behaving ideal window ideal tcp exact fluid model 
calculate numerically throughput obtained ideal tcp compare result modeling certain assumption loss process 
comparison gives error introduced model losses 
throughput ideal tcp calculated follows 
sum areas ideal window loss moments time axis divide sum total time measurement 
gives time average ideal window size 
ideal throughput obtained dividing average ideal window measured average rtt 
get error introduced model window evolution need compare ideal throughput real throughput 
comparison ideal throughput corrected timeouts packet nature tcp heuristics outlined earlier 
results confirm utility method validation 
take sd connection 
plot fig 
ideal throughput obtained different hours day 
plot real throughput result linear fluid model assuming deterministic times result packet model considers losses deterministic 
model assuming deterministic losses underestimates ideal throughput high variance times observed sd connection figs 

ideal throughput turn overestimates real throughput due sublinear growth window discussed earlier 
notice direct comparison real throughput result modeling case deterministic losses hides errors gives impression model works correctly 
take ld connection fig 

ideal throughput approximates real throughput window increase ld connection quite linear discussed earlier 
model deterministic losses give performance case sd connection loss process close poisson figs 

assumption losses form poisson process give better performance 
difference perfor 
ld connection time distribution 
probability density function time inria australia day exponential distribution measurements 
ld connection time distribution 
probability density function time inria australia day exponential distribution measurements 
sd connection separate model validation 
tcp throughput kb day time hours inria exact fluid model deterministic losses packet level model real throughput 
ld connection separate model validation 
exact fluid model deterministic losses packet level model real throughput tcp throughput kb day time hours inria australia ieee network may june mance model deterministic losses sd ld connections explained method validation introduced 
method conclude better take loss process poisson ld connection 
article overview different issues considered modeling tcp 
main results summarized follows linear window increase model hold paths round trip time dependent window size 
sublinear window increase model needs considered case 
modeling requires model round trip time inferred measurements 
process congestion events needs characterized 
simplistic assumption may lead considerable error internet paths 
particular underestimating variance time intervals congestion events leads underestimation throughput 
validation model tcp needs done steps 
model window evolution model network need validated separately 
step validation hides error introduced part model may results situations 
acknowledgments author eitan altman avrachenkov encouragement valuable remarks earlier version article 
grateful expressed prof altman help improving presentation article 
author colleagues enst university south australia providing required material conduct experiments 
thompson miller wilder wide area internet traffic patterns characteristics ieee network nov 
jacobson congestion avoidance control acm sigcomm aug 
lakshman madhow performance tcp ip networks high bandwidth delay products random loss ieee acm trans 
net vol 
jun pp 

floyd connections multiple congested gateways packet switched networks part way traffic acm comp 
commun 
rev oct 
floyd jacobson random early detection gateways congestion avoidance ieee acm trans 
net aug 
altman barakat stochastic model tcp ip stationary random losses acm sigcomm sept 
mathis macroscopic behavior tcp congestion avoidance algorithm comp 
commun 
rev july 
padhye modeling tcp throughput simple model empirical validation acm sigcomm sept 
bu towsley fixed point approximation tcp behavior aqm network umass tech 
rep july 
firoiu queue management congestion control ieee infocom mar 
misra ott window distribution idealized tcp congestion avoidance variable packet loss ieee infocom mar 
misra 
gong towsley fluid analysis network aqm routers supporting tcp flows application red acm sigcomm aug 
morris scalable tcp congestion control ieee infocom mar 
lakshman madhow design interfaces tcp ip wireless ieee milcom 
floyd fall promoting congestion control internet ieee acm trans 
net vol 
aug pp 

floyd handley padhye equation congestion control unicast applications acm sigcomm aug 
barakat performance evaluation tcp congestion control ph thesis available www inria fr personnel barakat fall floyd simulation comparisons tahoe reno sack tcp acm comp 
commun 
rev jul 
misra 
gong towsley stochastic differential equation modeling analysis tcp behavior performance oct 
allman balakrishnan floyd enhancing tcp loss recovery early duplicate acknowledgment response internet draft june progress 
altman state dependent type queueing analysis congestion control data networks ieee infocom apr 
semke mahdavi mathis automatic tcp buffer tuning acm sigcomm sept 
allman falk effective evaluation tcp acm comp 
commun 
rev vol 
oct 
telatar behavior certain stochastic processes arising window protocols ieee globecom dec 
nagle congestion control ip tcp internetworks rfc jan 
biography barakat sophia inria fr received degree electrical electronics engineering university 
obtained degree networks distributed systems university nice sophia antipolis france 
working ph team inria sophia antipolis france 
obtained ph april joined ica department epfl lausanne 
main research interests congestion error control computer networks performance evaluation communication protocols integration new transmission media satellite networks internet 
