handbook software engineering knowledge engineering vol 
world scientific publishing software engineering visual programming languages margaret burnett department computer science oregon state university corvallis mail burnett cs orst edu article describes emerging research visual programming languages may lead require development new software engineering support paradigms 
keywords visual programming languages software engineering user programming user software engineering forms 
visual programming languages vpls increasingly common domains 
example visual programming languages sublanguages common way kinds gui programming common way specifying visualization graphics depicting scientific data starting appear macro generators user applications 
despite increase vpls programming tasks attention software engineering support mechanisms working languages 
visual programming programming dimension convey semantics 
examples additional dimensions multidimensional objects spatial relationships time dimension specify semantic relationships 
potentially significant object relationship token just traditional textual programming languages word token collection tokens visual expression 
examples visual expressions visual programming include diagrams free hand sketches icons demonstrations actions performed graphical objects 
programming language semantically significant syntax includes visual expressions programming language visual programming language 
vpls include text multidimensional way 
traditional textual programming languages incorporate little dimensional syntax text limited forms 
multidimensionality essential difference vpls strictly textual languages 
point difference programming languages vpls comes simply multidimensionality predict software engineering methodologies devices developed software written non visual programming languages serve software written vpls 
multidimensionality led vpls researchers new programming frontiers far beginnings accompanying software engineering research frontiers 
article surveys beginnings example vpl research visual spreadsheet language forms 
discussion software engineering issues particular vpls survey issues affect subareas software engineering vpls supporting program comprehension visual programs testing visual programs debugging visual programs reusing visual code 
example traditional languages dimension connects linear string language dimension may allow optional line spacing documentation device limited semantics continued previous line 
dimensions truly conveys semantics second dimension limited notion spatial relationships expressible dimensional string grammar 

software engineering issues particular vpls features alluded particular implications software engineering vpls 
diversity audience users vpls professional programmers users training professional software engineering notions methods 
second develop software engineering approaches fully compatible non traditional paradigms mechanisms vpls 
example specifying program semantics directly manipulating objects demonstrating concrete examples way programming done traditional languages little research suitable software engineering support mechanisms non traditional language features 
third opportunity problem language features possible multidimensionality pioneered vpls inherent elements software engineering support 
common features concreteness directness explicitness immediate visual feedback 
concreteness means expressing aspect program particular instances specifying aspect semantics specifying desired behavior specific object value 
software engineering implication concreteness testing done terms concrete values concreteness program development automatically performs incremental testing test value 
directness context direct manipulation usually described feeling directly manipulating object 
cognitive perspective directness computing means small distance goal actions required achieve goal 
vpls definitions relevant 
green petre point distillation psychology programming literature vpl designers programming requires mapping problem world program world closer programming world problem world easier problem solving 
example directness vpl manipulating object specify change location movement specify movement functions numbers screen coordinates specify 
aspect semantics explicit environment directly stated textually visually requirement programmer infer 
example explicitness vpl explicit depiction dataflow relationships edges related program objects 
drawings common software engineering support devices traditional languages separate tools invoked step separated editing debugging process 
vpls drawings part language syntax automatic side effect maintained environment 
context visual programming immediate visual feedback refers automatic display effects program edits 
tanimoto coined term liveness categorizes immediacy semantic feedback automatically provided process editing program 
example high degree liveness automatic recalculation feature spreadsheets 
feature provides functionality traditional debuggers incremental 
vpls unique features challenge develop software engineering approaches compatible features take advantage opportunities offer power rigor traditional approaches 

dynamic documentation program comprehension program comprehension critical debugging maintenance phases software lifecycle 
combination concrete values visual feedback leads naturally idea software animation vpls include various forms 
software animation thought dynamically computed documentation mechanism supporting program comprehension 
difference software animation separately prepared documentation documentation oriented code tied code software animations date source code evolves 
empirical studies done vpls effects program comprehension 
see whitley survey 
results studies mixed reporting findings kinds programs audiences vpls visual notations linked greater comprehension strictly textual languages notations linked greater comprehension 
unfortunately studies investigated static diagrammatic notations omitting dynamic graphics concreteness feedback mechanisms vpls 
dynamic graphics concrete values program comprehension mechanism specifically investigated studies regarding software animation effects people ability comprehend previously existing programs 
results animations helped participants program comprehension participants actively involved working animations 
type animation investigated studies graphical animation textual programs pointed vpls include similar capabilities simply products 
forms animation follows naturally combination support graphical types evolving data values incremental visual feedback computations evolve program edits 
example provide animated documentation selection sort programmer may wish emphasize move portion algorithm having element glide screen new location 
specify animation programmer gives formulas intermediate positions graphical depiction element travel specifying straight clockwise counter clockwise start number steps directly drawing path middle 
user provides formulas form create animation element matrix sorted system automatically generalizes remaining elements matrix 
generalization result shown 
animation effects spatial movement programmer select options animation form specify paths visibility space fade fade sequences color space gradual color transitions intensity space brightening dimming transitions 
fig 

animation form element selection sort animation 
parameters established cell formulas top middle flexible combination text drawing result bottom 
automatic generalization formula form causes lazy basis copy form created animate whichever element actively sorted 
fig 

sort animation shows elements unsorted group top moved time sorted group bottom 
final element moving top left corner bottom right point animation 

testing high degrees concreteness immediate visual feedback vpls motivated part kind instant testing goal idea user immediately sees result program edit spot programming bugs quickly able right away 
motivation especially prevalent user vpls vpls professional programmers 
spreadsheet systems provide evidence concreteness immediate visual feedback finding removing bugs spreadsheet formulas substantial body research showing spreadsheets contain bugs 
example field audits real world spreadsheets contain bugs cells contain bugs 
early empirical study experienced spreadsheet users spreadsheets created users contain user generated bugs 
results studies similar spreadsheets examined contain bugs 
see halverson survey studies 
compounding problem creators programs language environments featuring immediate visual feedback spreadsheet systems express unwarranted confidence reliability programs 
forms bring benefits applying formalized notions testing informal incremental development world spreadsheet vpls including range research languages paradigm standard commercial spreadsheet packages 
see test wysiwyt methodology approach testing highly visual problem solving environments spreadsheets 
methodology completely visual designed support users sophisticated programmers 
software engineering research definition means program tested called test adequacy criterion 
wysiwyt approach vpl designer chooses test adequacy criterion pairing subexpression relationships exercised test 
test adequacy criterion define ideal system continuously communicates users closely gotten testing activities ideal 
system treats user decision correctness test user communicates decisions system checking value notices correct 
system tracks tests implications keeps track previous tests need redone result formula edits 
approach provides feedback testing adequacy stages spreadsheet development intent helping users detect bugs spreadsheets 
methodology prototyped forms best illustrate user scenario illustrates wysiwyt methodology appear integrated widely commercial spreadsheet packages 
suppose user printout tax form front wants spreadsheet answers 
created spreadsheet 
spreadsheet simple ways user reporting wrong answer 
taxpayers may struggling gather required data may change mind right data values enter 
shortcuts formulas basing conditions version data bothering max operator line prevent negatives formulas probably general may cause problems data changes 
example entered line line formula line changes line parents tell claim year formula line give correct answer 
similar problems arise discovers entered data wrong box 
form ez name address report income attach copy form 
attach tax payment top form 
note check 
department treasury internal revenue service income tax return single dependents irs label see page 
don please print 
print name initial home address number street 
box see page 
apt 
city town post office state zip code 
foreign address see page 
please see instructions back 
see form ez booklet 
presidential election campaign see page want go fund 
total wages salaries tips 
shown box form 
attach form 
interest income 
total form ez 
add line line 
adjusted gross income 
parents claim return 

enter amount line 
enter 
total standard deduction personal 
subtract line line 
line larger line enter 
income 
fig 

portion tax form 
social security number ez calculations presidential election 

total wages 
interest 
adjusted gross 
parents 
line 
income fig 

user spreadsheet taxes 
cells simply data values 
line formula line line line formula line line formula line line 
simple case wysiwyt methodology provide benefits 
shows mock incorporated popular spreadsheet package 
cells containing formulas opposed data values initially red bordered checkboxes 
time user sees red border moves mouse tool tips inform red borders mean untested blue borders mean tested 
check cells approve values user checks value sure correct checkmark appears cell user checked 
show user explicitly checked value 
wider implications checkmark reflected border colors 
border explicitly approved cell cells contributing blue 
changed data affected replaced question marks 
remind check cells values thought important check 
suppose replacing data value user formula change line alluded changing previous formula constant line change involved formula just changed data value affected cells borders revert red downstream disappear indicating cells completely untested 
see 
maintenance status cell editing process illustrated important benefit approach 
feature user may realize testing irrelevant formula change needs redone 
primary goal approach reduce correctness spreadsheet formulas 
empirical study methodology significantly reduced tested spreadsheets improving effectiveness efficiency testing 
ez calculations presidential election 

total wages 
interest 
adjusted gross 
parents 
line 
income ez calculations presidential election 

total wages 
interest 
adjusted gross 
parents 
line 
income ez calculations presidential election 

total wages 
interest 
adjusted gross 
parents 
line 
income fig 

mock popular spreadsheet package enhanced wysiwyt technology 
black white shot red shows dark gray blue shows lighter gray 
cells containing formulas initially red meaning untested 
user decision data value correct checks 
checkmark appears cell explicitly validated 
borders cells contributing correct value tested closer pure blue 
example simple formulas cells point pure blue meaning fully tested 
user changes formula line constant 
change causes affected cell bottom row considered untested pure red 
year user may want improve spreadsheet year year having redesign formula context current year data values 
example adds box tax form line spreadsheet line uses operator formula line 
need try test cases line cell considered tested exercises case exercises case 
see rothermel descriptions coverage criteria currently possible criteria alternatively employed 
user checks data value border lines turn purple blue red 
purple cells turn blue user selects hits show details button 
system draws arrows pertaining subexpression relationships colors depicting cases need tested 
arrow subexpression red pointing case needs tried 
ez calculations presidential election 

total wages 
interest 
adjusted gross 
parents 
line 
income fig 

cells require test value completely tested formula view purple cell borders red blue arrows subexpressions shows 
adjusted gross value blue bordered purple arrow blue arrow red 

debugging pointed earlier concreteness immediate visual feedback features number vpls provide functionality needed debugging 
prevalence formula errors spreadsheets shows functionality valuable keep errors place get errors get 
order debugging user know wrong 
animations dynamic documentation described section potential way vpls help user spot incorrect behavior 
possibility testing interactions described section user comes value correct 
user detected presence error debugging classically said stages locating error fixing verifying fixed portion correct 
provide support locating error wysiwyt methodology extended follows 
addition marking values correct checkmark user mark value incorrect ing 
dataflow path contributing value portion spreadsheet fault exists highlighted user see 
technique decide cells highlight set heuristics ideas research slicing dicing 
forms explicitly support fixing stage follow vpl common practice allowing formulas edited incrementally requiring separate tools editing compiling verify stage idea regression testing supported wysiwyt methodology 
forms cell edited downstream cell colors border colors question marks reset making explicit user cells need re examined point 
fig 

incorrect value cell key indicated checkbox placed user 
system display sub slice fault lies highlighted cells 
cell likelihood containing fault communicated darkness background 

code reuse idea reusing code appealing effective reuse long acknowledged problem 
help address difficulties advocate strong management commitment code reuse leading treatment code asset carefully managed organized repository 
advent web may bring change outlook encouraging informal loosely organized code repositories 
may particularly true vpls aimed users software creations usually managed 
fact commercial user vpls agentsheets previously known names cocoa provide just repositories 
discussion reuse confined existing code component place creating new component 
general component artifact software process article concentrates solely code components 
term repository mean collection components 
distinguish reuse tasks performed person term producer mean programmer building reusable components term consumer mean programmer interested components 
packaging tasks traditionally required producers prepare component inclusion formally controlled code repository conforming standards preparing documentation providing test suites kind environment realistic expect producers software users follow sort rigorous packaging reuse standards making code available 
reuse supported sophisticated support mechanisms available consumer side 
words highly useful assumptions formed basis traditional approaches supporting code reuse assumed informal repositories simply managing body enforce standards oversee repository 
set repository structure hierarchy component categories collections 
component producers provide component packaging aid consumer 
biggerstaff richter identify fundamental reuse problems successful reusability system address finding components understanding components modifying components composing components 
constantly evolving repository requirement classification packaging code producer vpl support needs 
finding components area best supported traditional software engineering support mechanisms query facilities allowing consumers search keyword author comment contents vpls employed mechanisms fact easily taken step forward depicting availability explicitly programming environment vpl provide continual reminder reuse opportunities exist 
example environment forms automatically provides display query facility code components available incorporation specialization evolving program shown 
fig 

left forms query facility help users find potentially useful code components 
right interrelationships components shown 
arrows leading node give examples components component 
having possibly reusable component consumer step understand behavior determine consider making 
area opportunity vpls vpl includes aids program comprehension vpl features tightly integrated encouragement reuse form bigger sum parts example forms consumer interested sorting component search query facility clicking animation nodes watch dynamic documentation sort described section 
modifying composing components ways consumers components selected 
study professional smalltalk users observed consumers extensive previous usage contexts figuring unfamiliar components 
right side shows dimensional repository display explicit depiction relationships components helps facilitate finding examples 
left side touching quiz stats node brings view executable source code quiz stats supporting nodes user watch execution provide different sample values try modify copy portions quiz stats needed purposes 
user begins making changes incorporate new component testing debugging features discussed earlier support effort 
ability browse retrieve experiment usage contexts critical allowing consumers successfully reuse code specially packaged producers 
ability permits alternative documentation standardization procedures traditionally required producers important informal repositories cooperative repositories owned organization 

features vpls raise challenges opportunities regarding provide appropriate software engineering support 
challenge comes fact non traditional audiences target users languages users usually formally trained programming software engineering 
second arises vpls include unusual features directly map previous software engineering support mechanisms 
features include concrete objects demonstrations non imperative paradigms multidimensionality specify program semantics 
time features give rise opportunities highly integrated software engineering support mechanisms 
attending significant differences traditional languages vpls may possible devise software engineering support methods achieve desirable properties methods traditional languages may look different traditional methods 
acknowledgments supported part national science foundation ccr nyi award ccr hewlett packard 
material software animation forms summarizes collaborative author paul carlson 
material code reuse forms summarizes collaborative author rebecca walpole martin griss siu 
material wysiwyt methodology summarizes collaborative author gregg rothermel li james andrei curtis cook thomas green karen rothermel assistance contributions graduate students oregon state university visual programming research group patents pending 

biggerstaff richter 
reusability framework assessment directions 
biggerstaff perlis eds software reusability concepts models volume addison wesley reading ma 

brown gould experimental study people creating spreadsheets acm transactions office information systems vol 

burnett visual programming webster ed encyclopedia electrical electronics engineering john wiley sons 

burnett rothermel scaling see test methodology testing spreadsheet grids ieee symposium visual languages sept 

burnett atwood yang forms order visual language explore boundaries spreadsheet paradigm journal functional programming appear 

carlson burnett seamless integration algorithm animation visual programming language acm proceedings avi international workshop advanced visual interfaces may 

green petre usability analysis visual programming environments cognitive dimensions framework 
journal visual languages computing vol june 

hutchins hollan norman direct manipulation interfaces 
norman draper eds user centered system design new perspectives human computer interaction lawrence erlbaum assoc hillsdale nj 

lawrence stasko empirically evaluating animations teach algorithms ieee symposium visual languages oct 

nardi small matter programming perspectives user computing mit press cambridge ma 

halverson spreadsheets trial survey research spreadsheet risks hawaii international conference system sciences jan 

rothermel burnett slicing spreadsheets integrated methodology spreadsheet testing debugging conference domain specific languages dsl oct 

repenning 
tactile programming unified manipulation paradigm supporting program comprehension composition sharing ieee symposium visual languages sept 

rosson carroll reuse uses smalltalk programming acm trans 
computer human interaction vol sept 

rothermel li burnett see test methodology testing form visual programs international conference software engineering april 

rothermel burnett li methodology testing spreadsheets acm transactions software engineering methodology appear 

rothermel cook burnett green rothermel wysiwyt testing spreadsheet paradigm empirical evaluation international conference software engineering june 

shneiderman direct manipulation step programming languages 
computer vol aug 

smith cypher spohrer programming agents programming language 
communications acm vol july 

stasko lewis algorithm animations assist learning 
empirical study analysis interchi apr 

tanimoto visual language image processing journal visual languages computing vol june 

teo tan quantitative qualitative errors spreadsheet development hawaii international conference system sciences jan 

walpole burnett supporting reuse evolving visual code ieee symposium visual languages sept 

whitley visual programming languages empirical evidence journal visual languages computing vol 
feb 

wilcox atwood burnett cook continuous visual feedback aid debugging direct manipulation programming systems 
acm conference human factors computing systems chi mar 

