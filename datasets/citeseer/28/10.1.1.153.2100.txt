experience learning personal assistant tom mitchell rich caruana dayne freitag john mcdermott david zabowski school computer science carnegie mellon university personal software assistants help users tasks finding information scheduling calendars managing flow require significant customization individual user 
example assistant helps schedule particular user calendar know user scheduling preferences 
explores potential machine learning methods automatically create maintain customized knowledge personal software assistants 
describe design particular learning assistant calendar manager called cap calendar apprentice learns user scheduling preferences experience 
results summarized approximately user years experience cap learned evolving set rules characterize scheduling preferences users 
experience suggest machine learning methods may play important role personal software assistants 

spread networked personal computers personal software assistants rapidly appeared variety tasks management information mail organization calendar scheduling 
easily imagine knowledge assistants operate networks kind software secretary providing services home paying bills making travel arrangements submitting purchase orders locating information electronic libraries applications user acceptance depend customizing personal assistant particular habits interests user 
just human secretaries success depend knowledge particular user habits goals specific set operations agent perform 
example agent sorts incoming mail succeed fail correctly models user criteria say urgent mail category 
build software assistants easily customized individual users 
programs provide simple parameters allow users customize behavior explicitly 
example text editors allow users set default type fonts directories email sorting programs allow users declare keywords indicate messages sorted categories 
approaches limited 
scale sophisticated assistants ability users program preferences explicitly decrease 
customizing email sorter accommodate personal notion urgent message example requires detailed articulation fairly subtle concept 
furthermore users john mcdermott affiliated digital equipment 
revised version appear communications acm july 
willing able put effort initially customize assistants may unwilling continually update knowledge 
message particular business contract quite urgent approaching contract deadline necessarily urgent deadline 
thesis research software assistants automatically customize individual users learning experience 
currently exploring thesis developing learning software assistants calendar management electronic newsgroup filtering email negotiation 
applications approach summarized follows provide convenient interface allows user perform task editing email interface online calendar 
system treat user interaction training example user habits meeting scheduled user reflects preference duration time location type meeting 
learn general regularities training data learned knowledge increase services offered software assistant provide interactive advice user schedule meetings offer negotiate specific meetings behalf user 
refer kind interactive learning assistant learning apprentice interactive assistant acquires knowledge routine observing users actions 
kay recognize potential value personal learning assistants 
early example learning apprentice leap system dealt domain vlsi digital logic design 
earlier descriptions calendar apprentice described current related effort develop learning calendar assistant described 
learning apprentice designed browsing efficient online information sources library catalogs development holte drummond 
anzai developed prototype system learns help users fill purchase orders learning preferences vendor parts 
semi automated methods user customization studied 
example propose dialog learning method allow users train interface agents demonstration 
kodratoff investigate iterative approach learning system 
applications ranging designing manufacturing technologies aiding manager computer center 
sheth maes explored simulated evolution evolve agents personal information filtering 
exemplar learning apprentice systems studied bareiss protos system apply domain clinical audiology 
number researchers explore machine learning information retrieval filtering cataloging 
sections case study learning apprentice calendar management called cap 
cap provides editing email interface online calendar 
learns users scheduling preferences routine enabling give customized scheduling advice user 
copies cap accumulated approximately user years experience handful users 
describe cap learning methods experimental results fielded system 
final section describes lessons learned case study regarding potential machine learning methods customizing software assistants task domains 

calendar apprentice cap learning apprentice assist user managing meeting calendar 
provides interactive access online calendar electronic mail 
users edit calendar adding deleting moving copying annotating meetings mark various calendar events tentative confirmed 
user commands instruct cap send electronic mail meeting invitations meetings marked tentative meeting reminders confirmed meetings attendees specified meeting 
user commands available tagging days text notes altering calendar screen display printing calendar various formats 
kinds assistance system provide user 
consider analogy human secretary assist managing calendar 
human secretary particular person user carry similar detailed instructions add alter individual meetings send email reminders 
time burden shift human secretary learns user scheduling preferences take routine aspects task 
example secretary learn long user typically meets depending type meeting attendees secretary learn meetings may moved cancelled order room higher priority meetings 
acquired knowledge alter interaction secretary user user give brief instructions please set meeting joe week trusting secretary appropriate knowledge fill detailed location time duration meeting 
furthermore acquired knowledge user scheduling preferences allow secretary negotiate arrange meetings user behalf effectively offloading user 
goal cap exhibit similar learning behavior copy system learn scheduling preferences user evolve gradually passive editing interface knowledge assistant capable interacting intelligently user offloading meeting negotiation user 
date focus developing learning methods learned knowledge provide interactive advice user adds new meetings calendar 
cap currently learns rules enable suggest meeting duration location time date 
begun developing system learned knowledge negotiate meetings email behalf user 

system organization depicts interface cap seen user 
user viewing interface built gnu emacs communicates underlying lisp process provides cap learning inference capabilities 
cap user interface 
user adding meeting displaying particular week calendar 
bottom screen cap prompts user meeting duration offering advice minutes learned scheduling preferences 
case user overrides advice 
particular week calendar process adding new meeting 
general user adds new meeting cap prompts sequence meeting type attendees date duration time location meeting tentative confirmed 
bottom screen cap prompting user duration meeting offering suggestion meeting allocated minutes 
suggestion derived previously learned rule matches known features new meeting features user prompted plus features inferred 
user may accept advice override entering desired value 
user overriding advice instructing system allocate minutes meeting 
user accepts overrides cap advice training example captured subsequent learning 
meeting described instance provides training example general concept meetings duration minutes 
representative training example meeting acquired cap interaction shown request attendees thrun event type meeting date time duration location weh confirmed displayed week action time action date previous request request previous prompt confirmed position attendees project scientist previous attendees meeting request attendees meeting number attendees cmu attendees attendees toms group known attendees day week friday time attendees single attendee table typical training example calendar meeting 
top set features corresponds attributes meeting entered user accepted response agent advice 
middle set includes automatically collected attributes characterizing current state computational environment 
bottom set includes additional features inferred system background knowledge people semantics basic calendar attributes 
table 
notice training example includes attributes provided user date time includes attributes current calendar state week displayed user attributes inferred background knowledge domain position attendees previous meeting involving attendees 
kind training data cap learns rules suggest duration location day week time meetings 
sample learned rules shown table 
rule statistics maintained summarize performance training data gave rise rule subsequent examples 
rules type predict duration kept list sorted past performance advice generated position attendees grad student single attendee 
sponsor attendees mitchell duration 
training test group name directors duration 
training test position attendees faculty department attendees scs number attendees location weh 
training test position attendees grad student location weh 
training test seminar type theo day week monday 
training test department attendees day week friday time 
training test course name time 
training test table typical learned rules 
evening cap typically learns new rules meeting feature 
rules prioritized system performance training data subsequent 
example rule correct training examples formed subsequently encountered examples applies 
topmost rule list matches new meeting 
cap provides advice user regarding meeting duration location directly rules 
cap advice regarding meeting date march inferred rules suggest day week thursday 
example today date rules predict day week predicted date rules predict particular date march specific lasting value 
meeting wednesday date suggested cap wednesday wednesday week currently displayed user whichever 
cap advice regarding time meeting taken directly rules suggested time slot booked 
case cap recommends closest alternative time calendar opening desired duration available 
addition learned rules user scheduling preferences cap uses factual knowledge individual attendees meetings 
particular novel attendee appears calendar acquires attendee institution position department email address supervisor 
information requested user attendee encountered 
alternatively information obtained automatically online databases containing personnel information 
currently extending system databases available environment 
seen table attributes attendees preconditions learned rules 

learning method night cap automatically runs learning process refine set rules provide advice day 
process applies learning procedure similar id see appendix learn decision tree training data 
path decision tree converted rule 
order improve generality rule preconditions pruned improves rule performance 
learning procedure uses training examples shown table acquire rules shown table 
evening cap learns approximately rules duration location time day week may novel different previously learned rules 
learned rules merged previous lists rules removing duplicates sorting measured accuracy 
cap learning process summarized table 
number design choices arise defining learning procedure software assistants cap 
design choice learning method 
initially considered inductive learning methods decision tree induction artificial neural network ann backpropagation 
experimentally learning methods produced comparable accuracy trained set data came prefer decision trees reasons 
decision tree learning produces collections rules intelligible humans see table learned weights ann difficult interpret 
human readability important systems humans may wish inspect edit approve learned knowledge 
second rules output decision tree induction provide piecewise representation learned information contrast monolithic representation ann enables system monitor performance individual rules time outdated rules rejected highly useful rules retained 
second design choice large window training examples learner utilize 
large window training data desirable order assure regularities learning procedure statistically significant 
large window training data include old data may representative current scheduling regularities 
example university environment onset summer break leads major shifts scheduling preferences users 
empirically window examples works current learning method users 
faculty users 
update performance statistics current rule include performance new training example meetings 

window examples training example meetings 

training examples examples selected random window examples 
test examples window examples training examples 

feature duration location day week time learn decision tree predict values feature id algorithm set appendix applied training examples convert path learned decision tree rule remove rule preconditions result decreased rule performance rule training examples test examples 
new rule record number positive negative examples matches window examples sort new rule previous rules feature accuracy measured previous step 
table learning procedure cap 
night cap runs procedure learn new rules merge current rule sets 
corresponds roughly calendar months length semester 
changing environment cap learn methods learn reliably shorter windows data useful 
third design choice vocabulary meeting attributes considered learner 
hundreds attributes features potentially available cap describe training example meeting 
example available attributes include previous meeting attendees department attendees meeting previous meeting attendees learner consider attributes search general rules 
increases number attributes increase number training examples order maintain fixed level learning performance data required select reliably larger set candidate hypotheses 
developed method called greedy attribute selection automatically selects attributes learning determining attributes lead successful learning past 
technique dynamically customize learning procedure user type learned rule 
design choice defining learning procedure new learned rules integrated existing rules 
nightly learning uses fixed window data previously learned rules characterize useful regularities apparent data combine new learned rules previously learned rules successful practice 
cap accomplishes maintaining statistics number correct incorrect predictions rule training data subsequent 
rules sorted performance statistics 
net effect old rules empirically rise top list new rules perform training data 
old rules ineffective practice quickly drop list 
separate list maintained type rule rules predicting meeting time 

experimental results cap varying degrees half dozen users 
users university faculty members fairly busy calendars cap sole calendar record months 
experimental results taken data collected cap routine subjects 
cap learned rules perform practice 
way answer question plot percentage cap advice coincides exactly choices user period time system 
data plotted shows accuracy advice meeting day week duration time location user user 
plots solid line indicates accuracy advice cap learned rules 
comparison dotted line indicates accuracy advice dynamically computed default value common value feature examples 
accuracy plotted particular date measured accuracy advice meetings date 
user graphs cover period march december user cover november november 
drawn results 
possible system learn rules characterize scheduling preferences significant degree 
accuracy learned advice varies significantly feature feature user user average accuracy duration user low time user note calendar particularly difficult agent predict user choice meeting time may equally acceptable times user choose arbitrarily 
average accuracy learned rules features users compared average advice default values 
graphs advice considered accurate identical user input 
notice accuracy cap advice varies time reflecting dynamic nature domain need updating user specific scheduling preferences 
faculty users periods poorest performance correlate strongly semester boundaries academic year january june september 
example notice drop performance users august september new semester begins old scheduling priorities replaced new ones 
cap performance typically recovers dips learns new rules reflecting user new scheduling regularities 
learning procedure reported somewhat improved procedure training data originally collected 
user necessarily see advice subsequent learning experiments produce 
user decisions differed seen advice possible results experiment overly pessimistic 
user location user location prediction accuracy mar jun sep jan jun sep dec jan jun sep dec user duration user duration prediction accuracy mar jun sep jan jun sep dec jan jun sep dec user day week user day week prediction accuracy mar jun sep jan jun sep dec jan jun sep dec user time user time prediction accuracy mar jun sep jan jun sep dec march december jan jun sep dec november december accuracy time day week duration time location prediction tasks 
graphs left user right user solid lines indicate accuracy advice generated cap learned rules 
dotted lines indicate accuracy obtained suggesting default value feature 
clear cap learns disappointing accuracy cap advice higher 
level accuracy acceptable providing interactive advice user override adding new meetings eventual goal assistants offload user autonomously performing portions user workload 
done increase accuracy cap knowledge level automatically schedule meetings 
believe learning method improved various ways expect promising approach agent focus meetings confident predictions 
certain meetings predicted fairly accurately meetings faculty subjects student meetings predictable past experience time campus trips 
cap successfully learn discriminate meetings confidently handle useful autonomous scheduler routine meetings simply forward difficult cases user just human secretary tends operate autonomously cases interacts user problematic cases 
cap successfully distinguish cases trust learned rules 
provides evidence relying observed past performance attach confidences individual rules 
experiment rules learned location subject evening sept sorted accuracy training data 
shows accuracy top ranked rule sorted list applied subsequent meetings training 
notice single rule covers subsequent meetings accuracy 
term coverage indicate proportion examples prediction 
shows coverage accuracy cap uses highest ranked rules 
omitted numbers indicate corresponding rule set performed shorter set 
size rule set increased include learned rules coverage grows nearly average accuracy advice drops 
notice accuracies plotted earlier correspond rightmost point 
illustrates cap increase average accuracy predictions offering advice top ranked rules apply cost reduced coverage 
cap performance change offered advice matching rule past accuracy 
shows average accuracy advice plots varied 
rightmost points plot indicate accuracy coverage rules averaged time period 
points left indicate increasing accuracy decreasing coverage cap advice threshold increased 
example user average accuracy advice improves rule coverage drops average 

prospects cap provides case study exploring thesis machine learning techniques lead self customizing software assistants 
primary lessons case study include feasible automatically learn user specific meeting preferences passive percent accuracy percent coverage tradeoff coverage accuracy learned rules 
prediction accuracy plotted different subsets cap rules 
learned rules sept sorted performance training data predict subsequent meetings 
curve indicates accuracy coverage top ranked rule taken 
indicates accuracy coverage top ranked rules 
curve illustrates potential learner increase accuracy limiting coverage 
observation accuracy significantly surpasses simpler approaches computing default values 
learned rules cap typically understandable users allowing possibility users evaluating augmenting editing 
rules learned cap useful providing interactive advice approved overridden user sufficiently accurate support autonomous negotiation meetings agent user behalf 
method improving accuracy cap advice allow volunteer advice applicable rules ones relatively accurate past 
suggests role software agent complete automation user workload agent select autonomously handle subset situations high confidence referring difficult non routine cases user 
expect kind shared responsibility useful user location user location accuracy user duration user duration accuracy user day week user day week accuracy user time user time accuracy coverage coverage average accuracy versus coverage 
shows accuracy versus coverage tradeoff prediction tasks users rule types 
showed tradeoff day shows average accuracy tradeoff years 
users prediction tasks accuracy increases smoothly coverage reduced 
model practical software assistants 
effective method learning changing environment measure performance individual rules time continually merge sort new learned rules old empirically determined accuracy 
modularity rules compared neural networks important process 
tasks suited learning apprentice approach taken cap 
characteristics calendar management task appear important approach order collect initial training data system provide service attractive new users acquired knowledge user 
case cap system sufficiently useful standard calendar editor 
tasks routinely performed online user customization satisfy property form filling tasks entering purchase orders 
second perfect advice complete coverage assistant necessity 
third time interval needed acquire sufficient data reliable learning learning time constant shorter time interval learned regularities remain stable task time constant 
case cap faculty users learning time constant month task time constant approximately months academic semester 
attributes user decisions sufficiently observable system 
calendar task decisions meeting duration location depend attributes state calendar features meeting attendees observable system 
unfortunately depend features meeting rooms available features currently observable cap result limits performance 
tasks believe satisfy properties currently pursuing include newsgroup reader learns types articles users find interesting email assistant learns routine types messages conditions user sends 
experiments suggest number topics research 
noted important goal extend cap point autonomously negotiate email arrange routine meetings forwarding non routine meeting requests user 
addition obvious issue improving accuracy learned knowledge raises research issues related transfer authority user system 
example user supervision agent best organized allow user evaluate agent evolving decision making strategy allow gradual transfer authority release supervisory control user assistant gain confidence assistant evolving capabilities 
second research issue involves reducing time constant learning 
approach learn temporally stable knowledge seminar seminar series typically held location duration 
type learned knowledge called determination knowledge enable agent infer general rule location duration new seminar series soon seminar series encountered 
approach reducing learning time constant called cooperative learning learning rules pooling training data multiple users 
example combining training data multiple faculty users cap learn rules valid class users meeting admissions committee meeting location room 
pooling training data users learning time constant rules reduced factor increasing observability world interfacing online information sources including agents useful research direction 
allowing agent access users calendars room reservation databases personnel databases increase number potentially relevant attributes considered agent decision making 
course increase number attributes generally lengthen time constant learner raising additional research issue learning efficiently large sets potentially relevant attributes 
cap provides demonstration machine learning methods acquire calendar scheduling preferences individual users estimate reliability various learned rules 
results encouraging just collect sufficient data able understand capabilities difficulties developing systems remains demonstrated knowledge learned systems cap significantly reduce users workload 
research plan extend cap negotiate meetings users behalf explore additional tasks including learning users newsgroup reading preferences learning strategies email flow assistance 
potential impact success area anticipate flurry experiments machine learning approaches self customized assistants coming years 

acknowledgments gratefully acknowledge contributions members project including siegfried lisa dent jean jourdan mcdermott owen mcdermott 
ken lang matt mason doug provided helpful comments earlier version 
research sponsored part advanced research projects agency arpa number digital equipment 
inductive inference decision trees decision tree meeting location position student programmer faculty 
department cs ee decision tree organizes problem classifying object instance series questions object 
example decision tree classifies calendar meetings meeting location 
instance classified starting root node decision tree branches results individual tests leaf reached point instance assigned class leaf labeled 
id algorithm learning decision trees examples 
original algorithm due quinlan variants developed 
set training examples id produces decision tree growing top point greedily picking test attribute best classifies training examples 
algorithm summarized follows grow tree training sample terminate condition training sample return appropriately labeled leaf node choose best feature training sample decision node testing value training sample subsample instances attach branch grow tree subsample return adequate termination condition conditional block instances subsample class 
grows tree top id repeatedly chooses feature test node tree 
chooses feature testing second block reduces ambiguity increases purity training sample 
id estimates purity measuring entropy sample 
class case training sample instances belong class belong class entropy log log approaches instances belong class reaches maximum value instances evenly split classes 
entropy sample computed arbitrary number classes inverse purity 
feature test training sample partitions number sets 
considering feature test entropy set partition measured measures summed weighted fraction original instances going set 
difference entropy original sample sum non negative number called information gain 
id chooses feature test yields greatest information gain 

bareiss porter weir protos exemplar learning apprentice 
tech 
rept 
ai university texas austin 

dialog learning dbl adaptive interface agents programming demonstration systems 
tech 
rept 
cmu cs carnegie mellon university 

caruana freitag greedy attribute selection 
appear proceedings eleventh international conference machine learning 

dent mcdermott mitchell zabowski personal learning apprentice 
proceedings international joint conference artificial intelligence july 

foltz dumais personalized information delivery analysis information filtering methods 
communications acm 

holte drummond learning apprentice 
tech 
rept 
unpublished university ottawa 

jourdan dent mcdermott mitchell zabowski interfaces learn learning apprentice calendar management 
tech 
rept 
cmu cs carnegie mellon university 

kay computer software 
scientific american 

kodratoff tecuci iterative approach learning apprentice systems 
tech 
rept 
ups laboratoire de recherche en informatique universite de paris sud 

kozierok maes intelligent groupware scheduling meetings 
submitted cscw 

mitchell mahadevan steinberg 
leap learning apprentice vlsi design 
proceedings ninth international joint conference artificial intelligence august 

okada anzai groupware learns 
proceedings ieee pacific rim communications computers signal processing may 

architecture machine human environment 
mit press 

quinlan induction decision trees 
machine learning 

quinlan generating production rules decision trees 
proceedings international joint conference artificial intelligence august 

rumelhart hinton williams 
learning internal representations error propagation 
parallel distributed processing rumelhart mcclelland pdp research group ed mit press pp 


russell analogical inductive reasoning 
ph th computer science department 

sadeh look ahead techniques micro opportunistic job shop scheduling 
ph th robotics institute carnegie mellon university 

salton buckley improving performance relevance feedback 
jasis 

schlimmer learning apprentice text transformations cataloging 
unpublished 

sheth maes evolving agents personalized information filtering 
proceedings ninth ieee conference ai applications 
