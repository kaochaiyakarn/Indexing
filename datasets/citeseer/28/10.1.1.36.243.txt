klaim kernel language agents interaction mobility de nicola ferrari rosario pugliese dipartimento di sistemi informatica universit di mail dsi dsi dipartimento di informatica universit di pisa mail di unipi investigate issue designing kernel programming language mobile computing describe klaim language supports programming paradigm processes data moved computing environment 
language consists core linda multiple tuple spaces set operators building processes 
klaim naturally supports programming explicit localities 
localities class data manipulated data language provides coordination mechanisms control interaction protocols located processes 
formal operational semantics useful discussing design language provides guidelines implementations 
klaim equipped type system statically checks access rights violations mobile agents 
presents kernel programming language klaim kernel language agents interaction mobility describing mobile agents interaction strategies 
introduce basic concepts linguistic primitives formal opera tional semantics 
followed discussion pragmatics language prototype implementation 
distinguishing features approach explicit localities accessing data computational resources presence simple type system control access rights 
choice klaim primitives heavily influenced process algebras linda :10.1.1.113.9679
language seen asynchronous higher order process calculus basic actions original linda primitives enriched explicit information location nodes processes tuples allocated 
explicit localities enable programmer distribute retrieve data processes sites net structure tuple space multiple located spaces 
localities considered order data dynamically created communicated network 
outcome powerful programming formalism example easily model encapsulation 
nondeterminism inherent definition linda primitives 
arises read operations suspended waiting tuple 
tuple available suspended operations nondeterministically selected proceed 
similarly read operation matching tuple arbitrarily chosen 
linda programming paradigm known generative communication :10.1.1.113.9679
tuple added ts generated life time independent producer process life time 
original proposal predicative non blocking forms inp part language :10.1.1.113.9679
yield true false depending ts contains tuple matching argument 
returning true retrieve remove matching tuple 
tuple available suspended operations nondeterministically selected proceed 
similarly read operation matching tuple arbitrarily chosen 
linda programming paradigm known generative communication :10.1.1.113.9679
tuple added ts generated life time independent producer process life time 
original proposal predicative non blocking forms inp part language :10.1.1.113.9679
yield true false depending ts contains tuple matching argument 
returning true retrieve remove matching tuple 
consider predicates functional duplicates non predicative counterparts difficult implement distributed environment 
may require expensive checks entire tuple spaces 
suffices extend klaim coordination language combinator allocate complete net 
hierarchical net written ae ae allocation environment returns localities sequences sites 
idea site net allocated 
site environment ae control interactions nets 
allocated nets similar spirit multiple ambients cardelli gordon :10.1.1.147.2334
complete investigation allocated nets scope subject 
operational semantics syntactic levels klaim reflected semantic level 
operational semantics klaim sos style proceeds steps 
step defines symbolic semantics specifies parts process commitments control localities effects actions tuple spaces 
analogies eval operations telescript go operation allow mobile agents programmed 
theoretical works non interleaving semantics process calculi adopted notion locality capture logical distribution processes 
basic idea approaches allow observation actions locations access paths take place 
approach localities tool observing distribution processes programming device structure control distribution processes data 
formal models closely related :10.1.1.53.1757
approaches deal mobility calculus channel locality names passed interactions 
significantly localities klaim simulate private name passing scope mechanisms calculus natural encoding asynchronous calculus klaim easily programmed 
scoping mobility role net allocate coordinate set processes 
formally describing issues related physical distribution net semantics essential study migratory applications understanding design decisions carrying implementation 
method uses hash table load class definitions remote processes starting execution 
note similar approach adopted implementation aglets library 
presents part java code implementing 
give reader flavour klava programming report source code agent example section 
public class extends classloader private hashtable classes new hashtable private hashtable new hashtable node thisnode public synchronized public void string classname byte get classname null null put classname public synchronized class string classname boolean throws class result byte result class classes get classname check local cache classes result null return result classname load class repository null try result super classname return result catch exception system err throw new classname result length parse class file result null throw new result classes put classname result return result java public class extends process protected kstring protected locality protected distance protected public kstring locality distance public void execute newloc new kstring new kstring new newloc newloc self newloc newloc new distance eval self print costs public static void main string args throws node node new kstring new kstring locality new marketplace distance new args length new args args length new kstring args args length new args args length distance new integer args node new process new distance node start node java java implement dialect linda called jada :10.1.1.1.5724
jada supports version linda multiple tuple spaces 
tuple spaces key notion jada autonomous entities distributed nodes net identified internet address nodes placed 
jada distinction logical physical addresses 
processes tuple spaces connecting nodes placed invoking methods 
cardelli 
global computation 
manuscript 
available url www luca demon uk 
cardelli gordon :10.1.1.147.2334
mobile ambients 
appear 
available url www luca demon uk 
carriero gelernter 
evy 
calculus mobile agents 
concur proceedings montanari sassone eds lncs pp 
springer 
gelernter :10.1.1.113.9679
generative communication linda 
acm transactions programming languages systems 
gelernter 
multiple tuple spaces linda 
