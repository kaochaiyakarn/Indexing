representing action change logic programs michael gelfond department computer science university texas el paso el paso tx vladimir lifschitz department computer sciences department philosophy university texas austin austin tx represent properties actions logic programming language uses classical negation negation failure 
method applicable temporal projection problems incomplete information reasoning past 
proved sound relative semantics action states transition functions 
extends eshghi kowalski evans apt representing properties actions logic programming languages negation failure 
goal overcome limitations earlier 
existing formalizations action logic programming adequate simplest kind temporal reasoning temporal projection 
temporal projection problem description initial state world properties actions determine world look series actions performed 
existing formalizations temporal projection cases description initial state complete 
reason formalizations semantics logic programming automatically apply closed world assumption predicate 
interested temporal reasoning general kind values fluents situations goal derive facts values fluents 
temporal projection class reasoning problems includes instance cases want information current state world fluent may depend situation instance location object :10.1.1.85.5082
particular propositional fluents assertions true false depending situation 
answering questions past 
view logic programming accepted strictly declarative 
adequacy representation body knowledge logic programming language means adequacy respect declarative semantics language 
target language instance language classical logic circumscription logic programming language 
method describing properties actions logic programming translation language extended logic programs soundness main technical result 
counterexample showing translation incomplete 
possible way achieving completeness discussed section 
second proof main theorem depends relationship stable models may interesting part general theory logic programming :10.1.1.24.6050
language introduced section section brief review extended logic programs 
translation logic programming defined section soundness theorem stated section 
section contains lemmas relate stable models section proof soundness theorem 
language describing actions description action domain language consists propositions kinds 
happen value proposition added 
reason modular translation declarative language translation processes propositions reasonably adequate language nonmonotonic 
extended logic programs representing incomplete information traditional logic programming languages difficult 
ground query traditional valued logic programming system produce answers tell truth value query determined basis information included program 
extended logic programs introduced sense different :10.1.1.49.9332
language extended programs distinguishes negation failure classical negation 
expression atom means intuitively false expression interpreted evidence true 
clear difference assertions program gives information truth value general form extended rule lm lm literal atom possibly preceded 
extended program set rules 
answer sets program easily characterized terms default logic 
identify rule default lm lm stands literal complementary 
extended program viewed default theory 
answer sets program simply extensions sense default logic intersected set ground literals proposition 
approaches semantics logic programs kinds negation proposed :10.1.1.50.1751
context shown lead result answer set semantics 
describing actions logic programs ready define translation language extended programs 
different effect propositions say similar differ preconditions 
translation method defined domain description contain similar effect propositions 
signing set ground atoms ground instance bm bm rule bm bm bm bm example fpg signing program slightly different original definition 
section show answer sets general program signing characterized terms fixpoints monotone operator 
specifically set ground atoms symmetric difference obviously 
clear sg fs define monotone operator oe answer set fixpoint oe 
recall general logic programs notion answer set stable model defined means construction :10.1.1.24.6050
general logic program rule replaced ground instances 
reduct relative set ground atoms obtained deleting rule expression form body ii expressions form bodies remaining rules 
clearly positive program consider minimal model smallest set ground atoms closed rules 
set coincides answer set 
michael gelfond 
logic programming reasoning incomplete information 
annals mathematics artificial intelligence 
appear 
michael gelfond vladimir lifschitz :10.1.1.24.6050
stable model semantics logic programming 
robert kowalski kenneth bowen editors logic programming proc 
fifth int conf 
symp pages 
reproduced 
john mccarthy 
formalizing common sense papers john mccarthy 
ablex norwood nj 
john mccarthy patrick hayes :10.1.1.85.5082
philosophical problems standpoint artificial intelligence 
meltzer michie editors machine intelligence volume pages 
edinburgh university press edinburgh 
reproduced 
luis pereira jose alferes 
non monotonic reasoning founded semantics 
proc 
international logic programming conference pages 
luis pereira jose :10.1.1.50.1751
founded semantics logic programs explicit negation 
proc 
tenth european conf 
artificial intelligence pages 
