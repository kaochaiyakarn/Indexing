preferred items 
riccardo torlone paolo ciaccia dip 
di informatica universit roma tre della roma italy torlone dia uniroma deis cnr universit di bologna viale bologna italy deis unibo 
dealing user preferences widespread issue novel data intensive application domains electronic catalogs commerce multimedia databases real 
set preferences important problem efficiently determine best objects preferences 
assume preferences expressed qualitative way tuples relation schema prefer product product quite natural user point view includes proper subcase quantitative preferences defined means scoring function 
starting analysis basic properties qualitative preferences consider best operator smoothly embed preferences queries relational algebra 
study general properties operator practical algorithm computation 
show algorithm improves simple nested loops approach lead faster response times 
modern applications nowadays faced problems managing user preferences 
remarkable example arises commerce internet sites marketplaces electronic shops provide information thousands millions products 
effectively supporting user search browsing large repositories entails problem properly understanding user needs filtering items helping user formulate appropriate queries presenting results ranked presumed relevance 
similar issues arise multimedia databases user looks objects similar 
case problem notion similarity subjective system learn exploit acquired knowledge user preferences retrieve relevant objects 
database field problem expressing managing user preferences received growing attention years 
approaches preferences expressed quantitatively defining scoring function weighted linear combination attributes values numeric 
scoring function associates tuple numeric score tuple preferred score higher score 
observed quantitative preferences limited expressive power define linear orders tuples model complex patterns preferences 
reason qualitative preferences considered database researchers :10.1.1.21.2504
relying existence scoring function qualitative preferences just assumes tuples compared computable function typical case defines partial order tuples general case just binary relation objects database 
consider qualitative preferences sake generality disregard issues related language preferences expressed 
means rely linear order dimensions similar properties 
mind argument basic properties qualitative preferences clarify issues relevant query evaluation 
purpose introduce best operator discuss properties turn consider best queries evaluated 
particular previous works consider case best highest ranked tuples computed possibly tuples lower rank returned :10.1.1.21.2504
leads develop basic algorithm major aim limit possible number comparisons tuples worst case relation tuples 
algorithm adapted cyclic preferences 
organized follows 
section introduce basic notions investigate general issues preferences 
section best operator study general properties 
section propose algorithm computing best operator discuss possible improvements algorithm 
section list set practical theoretical open issues 
space limitation proofs various results omitted full 
qualitative preferences section introduce basic notion user qualitative preferences 
order simplify notation refer relational model various notions results extended involved data models xml object oriented 
denote relation scheme name relation 
ak set attributes 
assume attribute associated set values called domain tuple scheme associates value taken domain 
relation scheme called instance finite set tuples 
preferences relational scheme naturally expressed collection pairs tuples pair specifies preference tuple 
definition preference relation 
qualitative preference relation relational scheme binary relation di 
denote single preference say preferable 
example 
consider relation 
model color price bmw black ford escort white toyota silver ferrari red set qualitative preferences possibly expressed potential customer 
preference relation naturally represented means directed graph call preference graph 
graph nodes correspond tuples edge node node 
instance preference graph example reported 
remarkable properties preference relations expressed studied terms properties corresponding graph 
fig 

preference graph note definition put priori hypothesis binary relation 
usually applications strict partial order irreflexive asymmetric transitive 
intuitively reflexivity sense context asymmetry prevents inconsistencies preferences transitivity yields simple way infer preferences 
practical cases asymmetry transitivity may fail hold 
instance preferences obtained account single properties tuples 
consider simple example symmetric preferences ferrari toyota toyota preferable ferrari price 
similarly example preferences consider prefer color car color car model car model car reason prefer car car 
symmetric general cyclic preferences 
tn finite lead ambiguous situations introduce stronger notion preference tuple preferable tuple converse hold 
definition strong preference relation 
preference relation say strongly preferable denoted 
example 
consider relation example assume 

strong preference relation preference relation show transitive partial order 
natural notions tuples derived definitions 
called indifference holds tuples explicit preference exist 
precisely say indifferent written iff hold 
notion likeness concerns tuples preferences allow establish better 
particular say written hold 
example 
consider relation example assume set preferences 

interesting note partial order indifference relation necessarily transitive 
consider instance case simply trivially partial order 
indifferent 
case probably inappropriate call indifference represent tuples 
conversely easy show transitive equivalence relation reflexive symmetric transitive relation 
practical relevance useful consider transitive closure preference relation 
querying preferences section investigate operator combined standard operators relational algebra specify queries database preferences 
operator called best denoted behavior quite natural returns tuples relation tuple better 
user satisfied basic result operation applied iteratively step returns best tuples excluding tuples retrieved previous steps 
definition best operator 
relation scheme qualitative preference relation 
best operator rank defined follows example 
consider preferences example 
operators relational algebra best operator profitably queries preferences taken account 
example 
consider example 
model best cars preferences price obtained expression model rice 
consider interesting properties best operator 
establishes best operator insensitive transitivity 
theorem 
preference relation scheme instance 
interesting properties best operator defined checked considering directed graph associated preference relation 
recall source graph node incoming edges path sequence nodes connected edges length path composed nodes 
results 
lemma 
preference relation preference graph 

returns sources 
length longest path source 
fixpoint equal length longest path source 
acyclic node involved cycle 

acyclic fixpoint path 
equal length longest evaluating best operator section propose algorithm computing best operator demonstrate correctness discuss possible improvements algorithm 
initially assume preference relation partial order 
theorem assumption transitivity imply loss generality hypothesis asymmetry relaxed 
start basic result fixes lower bound computation best operator 
basic operation computation consists verifying tuple preferable assume task requires constant time 
time computational complexity measured terms number comparisons 
theorem 
computation best operator requires time worst case cardinality point result valid application best operator computation may require iterations fixpoint reached 
cases comparisons necessarily needed completely determine result best operator true actual computational effort strongly depend structure preference relation algorithm able exploit 
nested loops algorithm easily applied evident perform poorly general case execute comparisons regardless underlying preference relation :10.1.1.21.2504
algorithm nested loops compare tuples multiple times achieve faster response times way organizes search space 
consider relation preference relation partial order 
algorithm evaluation composed number phases iteration best operator 
turn phase consists set scans set ci candidate tuples belong output outi th phase 
scan tuple selected inserted outi 
phase phase set tuple extracted processed order time 
tuple extracted scan temporarily plays role selected tuple 
compare tuple extracted 
cases possible 
case just put set unresolved tuples remains selected tuple 
case put set dt contains tuples dominated remains selected tuple belongs set dt deleted 
case selected tuple added set dt contains tuples dominated belongs set dt deleted 
algorithm proceeds processing way tuples 
selected tuple get 
show tuple processed ones dominates 
tuple dominated compared reason compare tuples comparison done tuple dominated put set delete 
job put set collect tuples returned output phase 
completes scan 
point empty copy tuples empty select tuple repeat procedure execute scan tuple selected inserted scan obtain phase concluded 
phases second phase put tuples sets 
note strongly reduces search space 
select tuple proceed phase 
second phase terminates set empty 
subsequent phases proceed similarly 
phase starts inserting ci tuples sets outi 
show result 
theorem 
basic algorithm correctly computes result relation cardinality requires time worst case 
example 
assume preferences 
initially set tuple extracted initial selected tuple 
extract remains selected tuple set 
assume extract indifferent remains selected tuple set 
extract tuple selected tuple set 
extract indifferent set 
need compare compared 
add delete set 
repeat procedure setting 
singleton just set conclude phase 
second phase put tuples proceed similarly 
indifferent get second phase concluded 
immediately obtain 
algorithm terminates 
variants basic algorithm defined purpose account general cases improving efficiency 
consider case asymmetric irreflexive 
effective way deal case resort relation tuples returned iteration best operator 
algorithm modified accordingly iteration th phase keep set selected tuples si just tuple 
tuple extracted set ci compare tuple si 
cases considered basic algorithm 
case just add si 
cases proceed basic version algorithm difference set dt dt si si 
note comparison needed iteration representative si 
equivalence relation 
respect efficiency algorithm note crucial operation algorithm consists extraction tuple set ci candidates 
performance improved appropriate choice tuple preference relation 
differently appear sight turns convenient extract tuples form ci reversed order preference 
fact way selected tuple changes frequently consequence dominated tuples distributed sets dt 
follows cardinality sets minimized 
set candidate tuples obtained phase union sets dt output previous phase turn implies reduction search space 
improvement obtained employing special properties relation 
instance equivalence relation 
case certain iteration th phase selected tuple find selected tuple set dt dt ui empty ui 
show change correctness algorithm preserved number comparisons generally reduced 
final discussion considered problem querying database relations qualitative preferences defined 
starting analysis basic properties qualitative preferences introduced studied best operator embody preferences queries 
computation operator inherent quadratic complexity better results obtained depending structure preferences 
available algorithm qualitative preferences nested loops evaluation style introduced algorithm tries limit number comparisons tuples reducing search space iteration 
starting algorithm number open problems remain solved 
list 
devising disk algorithm computing best operator large relations appears challenging problem 
efficient management sets dominated tuples paged index considered 
theoretical point view useful identify specific patterns preferences characterize algorithm complexity accordingly 
devising specific strategy performing effective scan set candidate tuples relevant issue 
tightly related theoretical problem minimum number comparisons needed infer partial order 

agrawal wimmers 
framework expressing combining preferences 
proc 
acm sigmod international conference management data dallas usa pp 


atzeni de 
relational database theory 
benjamin cummings 

bartolini ciaccia waas 
new approach interactive similarity query processing 
proc 
th intl 
conf 
large data bases roma italy pp 


nyi kossmann 
skyline operator 
proc 
th intl 
conf 
data engineering heidelberg germany pp 


ciaccia torlone 
finding best matter preference 
technical report available www dia uniroma torlone pubs pub htm 

chomicki 
querying intrinsic preferences 
proc 
th international conf 
extending database technology edbt prague czech republic 

ciaccia 
imprecision user preferences multimedia queries generic algebraic approach 
proc 
st int 
symp 
foundations information knowledge systems burg germany pp 


fagin 
combining fuzzy information multiple systems 
proc 
th acm sigact sigmod sigart symp 
principles database systems pods montreal canada pp 


fagin wimmers 
incorporating user preferences multimedia queries 
proc 
th intl 
conf 
database theory icdt delphi greece pp 


fishburn 
preference structures numerical representations 
theoretical computer science 

jayaraman 
preference queries deductive databases 
new generation computing 

koudas papakonstantinou 
prefer system efficient execution multi parametric ranked queries 
proc 
acm sigmod international conference management data santa barbara usa pages 

lacroix 
preferences putting knowledge queries 
proc 
th intl 
conf 
large data bases roma italy pp 


ng 
extension relational data model incorporate ordered domains 
acm transactions database systems 

tan eng ooi 
efficient progressive skyline computation 
proc 
th intl 
conf 
data engineering heidelberg germany pages 
