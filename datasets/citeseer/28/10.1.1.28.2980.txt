composition services mobile code pierre com alex alex cui unige ch centre informatique university geneva rue du general switzerland 
mobile code slowly gaining acceptance clear really useful 
judiciously may incur greater complexity programming degradation performances 
goal show mobile code particularly suited glue composition services flexibility extensibility necessary 
support claim describe services application programmed mobile code context active networking 
study impact flexibility complexity performances resulting systems 
sending active packets network packets containing code possible modify replace node packet processing functions allowing perform computations user data inside network tailor functions application specific requirements 
flexibility adapt network quickly constraints new situations conceive completely new set services applications 
research mobile agents similar approach improve flexibility distributed systems broader context 
important issue mobile code technology 
results clearly proceedings joint symposium asa ma palm springs oct shown applied mobility important design choice positive negative consequences :10.1.1.20.3442
consequences diverse increased flexibility cheaper configuration management bandwidth saving loss performance improvement degradation higher security requirements opportunities implement new kinds access control recognize mobility suited certain conditions avoided contexts classical paradigms rpc client server shown merits 
pieces software move intrinsically difficult move large database bound resources screens hard disks definite location 
having identified limitations mean mobility altogether 
interesting small pieces mobile code composition static elements means avoid burden defining protocols programming servers offers maximal adaptability access update data stored information systems 
cases involving creation remote threads discussed papers mobile agents understood 
instance agent moves large database order compute summary server reducing network traffic 
splitting long computation parts handled parallel computers order perform time studied 
experience shows useful spawn short lived remote threads perform simpler tasks calling method remote object dropping information predefined place 
messenger paradigm grounded imposes communication takes places execution environments spawning new thread code sent network :10.1.1.54.3551
goals show approach allows build little programming effort systems great flexibility computational overhead reasonable 
possible create new thread remote host sending code case code sent loaded demand 
code moved message sent server trigger creation new internal thread code belongs server extended client 
case possibility flexible server incorporate complex interpreter define new language communication client server sql 
especially useful clients special needs supported server 
example client small black white screen poor network connection systematically removes color information images web pages transferring 
possibility exploited gateway service described section 
interesting possibility offered service provider clients install event handlers server execute periodically special event occurs 
advantage setup needs clients satisfied client disconnected time event occurs programmed unilaterally client collaboration service provider impossible :10.1.1.54.3551
request specialization possible client way attach mobile code request sent server 
code executed server similar previous case extending service functionality 
client running mobile code execution environment code sent back client executed arrives 
interesting possibility simplifies programming client 
reason think design applicable systems handle high number events distributed collaborative applications 

case study chat application section describe simple chat application order illustrate services concepts previous sections allow build dynamic system distributed java platforms connected anon segment 
describe application sketch concept mobile event handler hook clear integrate services minimal number conventions 
rationale hook concept information dynamic distributed systems difficult exploit maintain hidden api :10.1.1.54.3551
accessible api fixed set callbacks easy define satisfy possible needs services show objects clients install new code triggered internal events 
example visible objects proxies gui service pushes messenger platform see fig 
objects natural api gui service 
applications know find call methods inspect modify values install new code executed time object method invoked 


graphical user interfaces applications 
technical report du centre informatique university geneva switzerland 
:10.1.1.54.3551

foreign event handlers maintain information consistency system adequacy 
workshop mobile agents context competition cooperation autonomous agents conference seattle may 

ieee communications magazine pages jan 
tolksdorf 
coordination patterns mobile information agents 
cooperative information agents ii proceedings second international paris france pages july 
tschudin :10.1.1.54.3551
structuring computer communications 
phd thesis university geneva switzerland oct 
tschudin 
messenger environment condensed description 
