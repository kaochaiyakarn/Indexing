ieee transactions software engineering vol 
may understanding code mobility fuggetta member ieee pietro picco member ieee giovanni vigna member ieee technologies architectures methodologies traditionally develop distributed applications exhibit variety limitations drawbacks applied large scale distributed settings internet 
particular fail providing desired degree scalability 
address issues researchers investigating variety innovative approaches 
promising intriguing ones ability moving code nodes network exploiting notion mobile code 
emerging research field code mobility generating growing body scientific literature industrial developments 
mobile code systems address wider range needs requirements service customization dynamic extension application functionality autonomy fault tolerance support disconnected operations 
cope variety requirements needs industrial academic researchers proposed number 
lively chaotic research activity generated confusion semantics mobile code concepts technologies 
problem unclear distinction implementation technologies specific applications paradigms design applications 
early valuable assessment code mobility authors analyze compare issues concepts belong different abstraction levels :10.1.1.43.7985
similarly autonomous objects mechanisms rev rpc compared echo distributed algorithms applications intelligent mail web browsers paradigms structuring distributed applications mobile agents :10.1.1.134.4847
argue different concepts notions compared directly 
inappropriate misleading trying compare emacs editor fork unix system call clientserver design paradigm 
confusion terminology 
cope variety requirements needs industrial academic researchers proposed number 
lively chaotic research activity generated confusion semantics mobile code concepts technologies 
problem unclear distinction implementation technologies specific applications paradigms design applications 
early valuable assessment code mobility authors analyze compare issues concepts belong different abstraction levels :10.1.1.43.7985
similarly autonomous objects mechanisms rev rpc compared echo distributed algorithms applications intelligent mail web browsers paradigms structuring distributed applications mobile agents :10.1.1.134.4847
argue different concepts notions compared directly 
inappropriate misleading trying compare emacs editor fork unix system call clientserver design paradigm 
confusion terminology 
instance systems claim able move state component code :10.1.1.124.8958
similarly autonomous objects mechanisms rev rpc compared echo distributed algorithms applications intelligent mail web browsers paradigms structuring distributed applications mobile agents :10.1.1.134.4847
argue different concepts notions compared directly 
inappropriate misleading trying compare emacs editor fork unix system call clientserver design paradigm 
confusion terminology 
instance systems claim able move state component code :10.1.1.124.8958
assertion justified availability mechanisms allow programmer pack portion data space executing component component code sent remote destination 
quite different situation run time image component transferred including execution state program counter call stack 
case programmer task rebuild execution state component migration data transferred code 
conversely case task carried run time support mcs 
conversely case task carried run time support mcs 
terminological confusion stems excessive overload term mobile agent term different somewhat overlapping semantics distributed systems artificial intelligence research communities 
distributed system community term mobile agent denote software component able move different execution environments 
definition different interpretations 
example telescript agent represented thread migrate different nodes carrying execution state tacoma agents just code fragments associated initialization data shipped remote host :10.1.1.124.8958
ability migrate started execution 
hand artificial intelligence community term agent denotes software component able achieve goal performing actions reacting events dynamic environ 
ignore implications broader notions agent restricted software domain 
ment 
generating confusion mix concepts notions belong different layers layer providing code mobility exploiting 
definition agreement distinguishing characteristics languages supporting code mobility 
lists essential characteristics mobile code language 
include support manipulating transmitting receiving executing code containing objects discussion manage state mobile components 
contributions consider support mobility code state mentioning weaker forms code mobility involving code migration discuss :10.1.1.48.5344:10.1.1.43.7985:10.1.1.43.7985
certainly confusion disagreement typical new research field 
research developments novel ideas mechanisms systems conceptualization effort re elaborates raw ideas seeking common stable ground base endeavors 
research code mobility exception 
technical concerns raised performance security factors full acceptance exploitation mobile code 
cases bindings data space migrating eu removed 
third case code shipping mechanism standalone code exploited perform remote execution tcl script newly created eu destination ce 
mechanism asynchronous immediate 
copy variables belonging execution state eu invoking submit may passed parameters operation order migrate variables tcl script 
ara developed university kaiserslautern ara multilanguage mcs supports strong mobility :10.1.1.48.5344
ara called agents managed language independent system core plus interpreters languages supported time writing tcl 
core interpreters constitute ce services accessible agents place abstraction 
mobility supported proactive migration data space management simplified fact agents share system resources bindings removed migration 
facile developed ecrc facile functional language extends standard ml language primitives distribution concurrency communication 
object group abstraction provided represent dynamically created object aggregates determine unit mobility unit 
objects belonging group explicitly checked thread objects checked object group 
rationale absence fuggetta understanding code mobility automatic mechanism give programmer ability modify dynamically granularity unit mobility 
data space management object group move bindings migrated objects owned source ce transformed network 
tacoma tacoma cornell mobile agents tcl language extended include primitives support weak mobility :10.1.1.124.8958
executing units called agents implemented unix processes running tcl interpreter 
functionality ce implemented unix operating system plus dedicated run time supporting agent check check 
code shipping standalone code supported mechanisms providing synchronous asynchronous immediate execution 
initialization data new eu encapsulated data structure called briefcase resources ce contained stationary data structures called cabinets 
nov 
kaiser leonard chorus distributed operating systems computing systems vol 
pp 
oct 
harrison chess mobile agents idea vitek tschudin pp :10.1.1.43.7985

available ibm technical report 
bic fukuda distributed computing autonomous objects computer aug 
stamos gifford implementing remote evaluation ieee trans 
pp 
feb 
chang echo algorithms depth parallel operations general graphs ieee trans 
software eng july 
johansen van renesse schneider tacoma distributed system version technical report dept computer science univ cornell univ norway june :10.1.1.124.8958
park multi agent architecture supporting services access rothermel popescu pp 

white telescript technology mobile agents software agents bradshaw ed 
aaai press mit press 
