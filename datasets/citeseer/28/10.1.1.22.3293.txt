chapter external memory data structures lars arge massive dataset applications data stored space query efficient data structures external storage devices 
data needs changed dynamically 
chapter discuss advances development provably worst case efficient external memory dynamic data structures 
briefly discuss popular external data structures practice 

massive datasets need stored space efficient data structures external storage devices 
chapter discuss advances development worst case efficient external memory data structures 
concentrate data structures geometric objects mention structures appropriate 
briefly discuss popular external data structures practice 
model computation 
accurately modeling memory disk systems complex task ruemmler wilkes :10.1.1.117.39
primary feature disks want model extremely long access time relative internal memory 
order amortize access time large amount data typical disks read write large blocks contiguous data standard level disk model parameters aggarwal vitter vitter shriver knuth number objects problem instance number objects problem solution number objects fit internal memory number objects disk block operation simply operation reading writing block disk 
refer 
computation performed objects internal memory 
worst case efficient structures consider simple practical interest 
reasons developing simpler heuristic general purpose structures worst case performance guarantees large number structures developed database community 
focus chapter provably worst case efficient data structures section 
give short survey major classes heuristic structures 
reader referred surveys complete discussion agarwal erickson gaede gunther nievergelt widmayer :10.1.1.137.9369:10.1.1.38.6261
chapter assume reader familiar basic internal memory data structures design analysis methods balanced search trees amortized analysis see cormen 


trees tree fundamental external memory data structure bayer mccreight comer knuth mehlhorn :10.1.1.96.6637
reader referred surveys complete discussion agarwal erickson gaede gunther nievergelt widmayer :10.1.1.137.9369:10.1.1.38.6261
chapter assume reader familiar basic internal memory data structures design analysis methods balanced search trees amortized analysis see cormen 


trees tree fundamental external memory data structure bayer mccreight comer knuth mehlhorn :10.1.1.96.6637
tree corresponds internal memory balanced search tree 
uses linear space disk blocks supports insertions deletions log os 
dimensional range queries asking elements tree query interval theta theta log tree internal nodes possibly root fan theta theta leaves 
tree height log 
space update query bounds obtained tree bounds obtain general complicated problems 
bounds significantly better bounds obtain just internal memory data structure virtual memory 
space bound obviously optimal log query bound optimal comparison model computation 
note query bound consists log corresponding familiar log internal memory reporting term accounting os needed report elements 
bounds obtained number problems arge vitter arge vengroff vitter agarwal callahan higher lower bounds established problems subramanian ramaswamy arge hellerstein kanellakis taylor miranker singh :10.1.1.33.4042:10.1.1.16.4346:10.1.1.116.7365:10.1.1.49.9444
discuss results sections 
trees come variants trees see bayer mccreight comer mehlhorn arge vitter knuth agarwal :10.1.1.16.4346:10.1.1.96.6637
basic tree theta ary tree root possibly having smaller degree built top theta leaves 
degree internal nodes number elements leaf typically kept range node leaf stored disk block 
space bound obviously optimal log query bound optimal comparison model computation 
note query bound consists log corresponding familiar log internal memory reporting term accounting os needed report elements 
bounds obtained number problems arge vitter arge vengroff vitter agarwal callahan higher lower bounds established problems subramanian ramaswamy arge hellerstein kanellakis taylor miranker singh :10.1.1.33.4042:10.1.1.16.4346:10.1.1.116.7365:10.1.1.49.9444
discuss results sections 
trees come variants trees see bayer mccreight comer mehlhorn arge vitter knuth agarwal :10.1.1.16.4346:10.1.1.96.6637
basic tree theta ary tree root possibly having smaller degree built top theta leaves 
degree internal nodes number elements leaf typically kept range node leaf stored disk block 
leaves level tree height log refer 
popular tree variants data elements stored leaves sorted order internal node holds log denote log external memory data structures theta routing splitting elements guide searches 
weight balanced trees 
weight balanced tree developed arge vitter similar normal trees leaves level rebalancing done splitting fusing nodes 
requiring degree node theta require weight size node theta ch root subtree height weight defined number elements leaves subtree rooted constraint means degree theta tree height log 
means children approximately size theta gamma 
normal trees sizes differ factor exponential weight balanced trees viewed external version bb ff trees nievergelt trees simple alternative bb ff trees internal memory structures arge vitter :10.1.1.16.4346
performing insertion deletion leaf tree weight constraint may violated nodes path root order rebalance tree perform split fuse operation log nodes 
key property weight balanced tree performing rebalance operation split fuse weight theta ch node theta ch updates performed rebalance operation needs performed means cost rebalance operation ch os amortized complexity update remains log 
cost rebalance operation example ch stores size theta ch secondary structure needs rebuilt splits example structure theta ch elements 
property suggests simple rebalancing strategy partial rebuilding see overmars splitting fusing nodes path root simply rebuild tree rooted highest unbalanced node path 
level balanced trees applications dynamic maintenance planar st graphs agarwal 
persistent trees 
database applications need able update current database querying current earlier versions database data structure 
simple inefficient way supporting functionality copy data structure time update performed 
efficient way partially persistent technique tarjan referred multiversion method becker verma :10.1.1.49.4094:10.1.1.74.3527
making copies structure idea technique maintain structure times element keep track time interval really structure 
btree persistent follows data element augmented existence interval consisting time element inserted possibly time deleted 
say precise bounds slightly better complicated agarwal 
element alive existence interval 
answer stabbing query simply report intervals tree time refer 
discussion section structure uses space constructed log os 
queries answered log os 
earlier attempts kanellakis 
see subramanian ramaswamy ramaswamy subramanian guting dynamic structure problem developed arge vitter :10.1.1.35.1453
structure viewed external version interval tree edelsbrunner external memory data structures static solution stabbing query problem persistence 

consists fan theta weight balanced tree endpoints intervals base tree intervals stored secondary structures associated internal nodes described 
range containing points associated node natural way 
underflow structure implemented sweeping persistent tree solved static version problem interval os 
structure necessary just stored intervals multislab lists ended spending theta os visit theta multislab lists node reporting intervals total 
resulted omega gamma log query bound 
store intervals multislab lists containing omega gamma intervals underflow structure os spent visiting lists query charged term query bound 
idea charging query cost output size called filtering chazelle idea static structure elements node called bootstrapping paradigm vitter :10.1.1.147.3224
ideas global rebuilding obtain worst case efficient update bounds 
section 
discuss example ideas 

problem equivalent performing diagonal corner queries special case sided range queries set points plane 
consider mapping interval point plane 
finding intervals containing query point corresponds finding points refer 
section consider general sided planar range searching problem set points plane solution sided query consists points refer 
earlier attempts ramaswamy subramanian subramanian ramaswamy guting arge :10.1.1.35.1453
developed optimal dynamic structure sided planar range searching problem 
structure diagonal corner query 
sided query 
external memory data structures uses ideas discussed interval tree structure section bootstrapping static structure filtering tree 
similar bound slightly different model search component query ignored proved arge 

model defined hellerstein 
considered authors kanellakis taylor miranker 
note linear space logarithmic query structures range counting problem number points query rectangle points need reported developed slightly different model computation see agarwal zhang :10.1.1.26.965
sub optimal linear space structure answering sided queries subramanian ramaswamy developed range tree uses optimal log log log space uses optimal log os answer query 
optimal structure sided queries arge 
obtained optimal structure 
discuss structure 
contrast little theoretical done higher dimensional range searching special cases higher dimensional range searching 
section survey results 
range searching 
vengroff vitter data structure dimensional range searching logarithmic query bound 
modifications vitter structure answers queries log os uses log log log space :10.1.1.147.3224
generally structures answering sided queries dimensions finite ranges log os log log log space 
mentioned space crucial query time manipulating massive datasets 
linear space cross tree grossi grossi tree singh extended support dimensional range queries gamma os 
updates performed log os 
space restrictions motivate structures single specialized queries design general structures answer different types queries 
implementation considerations motivate sacrifice worst case efficiency simplicity 
considerations led development large number general purpose data structures practice come worst case performance guarantees 
quickly survey major classes structures 
reader referred complete surveys details agarwal erickson gaede gunther nievergelt widmayer greene orenstein samet :10.1.1.137.9369:10.1.1.38.6261
range searching dimensions extensively researched problem 
large number structures developed problem including space filling curves see orenstein abel mark grid files nievergelt hinrichs various quad trees samet kd robinson variants buddy trees seeger kriegel lomet salzberg cell trees gunther various trees guttman greene sellis beckmann kamel faloutsos :10.1.1.72.3364:10.1.1.131.7887:10.1.1.129.3731:10.1.1.45.9180:10.1.1.141.6518
structures broadly classified types space driven structures quad trees grid files partition embedded space containing data points data driven structures kd trees trees partition data points 
agarwal 
considerations led development large number general purpose data structures practice come worst case performance guarantees 
quickly survey major classes structures 
reader referred complete surveys details agarwal erickson gaede gunther nievergelt widmayer greene orenstein samet :10.1.1.137.9369:10.1.1.38.6261
range searching dimensions extensively researched problem 
large number structures developed problem including space filling curves see orenstein abel mark grid files nievergelt hinrichs various quad trees samet kd robinson variants buddy trees seeger kriegel lomet salzberg cell trees gunther various trees guttman greene sellis beckmann kamel faloutsos :10.1.1.72.3364:10.1.1.131.7887:10.1.1.129.3731:10.1.1.45.9180:10.1.1.141.6518
structures broadly classified types space driven structures quad trees grid files partition embedded space containing data points data driven structures kd trees trees partition data points 
agarwal 
described general framework efficient construction updating structures 
mentioned want able answer diverse set queries halfspace range queries general polygon range queries point location queries single data structure 
agarwal 
described general framework efficient construction updating structures 
mentioned want able answer diverse set queries halfspace range queries general polygon range queries point location queries single data structure 
data structures easily answer different queries main reason practical success 
lot extensions new structures support moving objects see wolfson salzberg tsotras proximity queries see berchtold papadopoulos manolopoulos roussopoulos kriegel sproull white jain satoh samet gaede gunther agarwal erickson nievergelt widmayer :10.1.1.146.2508:10.1.1.1.7355:10.1.1.133.2288:10.1.1.137.9369:10.1.1.37.5751:10.1.1.38.6261:10.1.1.24.2262
discussed guarantee worst case query performance provided structures 
far discussed point data structures 
general interested storing objects lines polyhedra spatial extent 
point case large number heuristic structures variations ones mentioned proposed objects 
worst case efficient structures known 
practice filtering refinement method managing objects spatial extent 
directly storing objects data structure store minimal bounding axis parallel rectangle containing object pointer object 
answering query find minimal bounding rectangles fulfilling query filtering step retrieve objects corresponding rectangles check see fulfill query refinement step 
way designing data structures rectangles general objects transform points higher dimensional space store points point data structures discussed see gaede gunther nievergelt widmayer survey :10.1.1.137.9369
structure idea emerged especially efficient storing querying minimal bounding rectangles 
discuss called tree variants 
trees 
tree originally proposed guttman multiway tree similar tree leaf nodes level tree leaf contains theta data rectangles 
order query tree find say rectangles containing query point start root recursively visit children minimal bounding rectangle contains way visit internal nodes minimal bounding rectangle contains nodes actual data rectangles containing intuitively want minimal bounding rectangles stored internal node overlap little possible order obtain query efficient structure 
insertion performed log os tree 
traverse path root leaf choose insert new rectangle 
insertion result need node root leaf path 
insertion new rectangle increase overlap node heuristics choosing leaf insert new rectangle splitting nodes rebalancing proposed greene sellis beckmann kamel faloutsos :10.1.1.129.3731:10.1.1.45.9180:10.1.1.141.6518
tree variant beckmann 
result best performance cases 
deletions performed similarly deletions tree guarantee log bound finding data rectangle delete may require os 
rebalancing deletion performed merging nodes tree tree variants delete node reinsert children tree referred forced 
deletions performed similarly deletions tree guarantee log bound finding data rectangle delete may require os 
rebalancing deletion performed merging nodes tree tree variants delete node reinsert children tree referred forced 
idea try obtain better structure forcing global reorganization structure local reorganization node merge constitutes 
constructing tree repeated insertion takes log os necessarily result tree terms query performance 
sorting log tion algorithms proposed roussopoulos kamel faloutsos dewitt berchtold :10.1.1.178.5499:10.1.1.147.855:10.1.1.104.894:10.1.1.101.1700
algorithms factor faster repeated insertion algorithm produce tree practically better query performance tree built repeated insertion 
better linear worst case query proven 
de berg 
agarwal 
arge showed deletions dimensional range queries supported efficiently buffers 
range queries batched sense obtain result query immediately 
parts result reported different times query pushed tree 
means data structure algorithms updates queries depend result queries 
luckily case plane sweep algorithms edelsbrunner overmars arge :10.1.1.33.324
general problems entire sequence updates queries known advance requirement queries eventually answered known batched dynamic problems edelsbrunner overmars 
idea discussed section arge showed implement buffered segment tree arge 
showed data structure technique solving general class high dimensional problems 
buffer tree technique develop data structures turn develop algorithms different areas arge kumar arge van den hutchinson sanders :10.1.1.33.324
luckily case plane sweep algorithms edelsbrunner overmars arge :10.1.1.33.324
general problems entire sequence updates queries known advance requirement queries eventually answered known batched dynamic problems edelsbrunner overmars 
idea discussed section arge showed implement buffered segment tree arge 
showed data structure technique solving general class high dimensional problems 
buffer tree technique develop data structures turn develop algorithms different areas arge kumar arge van den hutchinson sanders :10.1.1.33.324
external buffered priority queues extensively researched log elements buffer tree fan tree node buffer size operations performed lazy way buffers 
cause applications graph algorithms 
arge showed perform operations basic buffer tree amortized log os 
note case occurs right away batched 
