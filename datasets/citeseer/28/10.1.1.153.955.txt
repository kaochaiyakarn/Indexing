workflows 
jan dumas wil van der aalst arthur ter hofstede jan dept mathematics computer science university antwerp antwerp belgium mail jan ua ac centre innovation queensland university technology brisbane australia mail dumas qut edu au dept technology management eindhoven university technology eindhoven netherlands mail aalst tm tue nl dept management information systems university antwerp antwerp belgium mail jan ua ac area workflow management confronted large number competing languages relations relative expressiveness usually clear 
language generally possible express workflow different ways feature known variability 
aims providing formal groundwork studying relative expressiveness variability defining notions equivalence capturing different views workflow systems operate 
firstly notion observational equivalence absence silent steps defined related classical bisimulation 
secondly number equivalence notions presence silent steps defined 
distinction case silent steps visible controllable environment case silent steps visible alternation system events environment interactions 
shown notions equivalence different coincide classical notions bisimulation silent steps weak branching 
workflow systems support coordination manual automated activities basis explicit process models 
decades significant interest possibilities offered systems similar tools automating business processes 
unfortunately lack formal foundation coupled failed standardization efforts led plethora similar subtly different workflow modeling languages 
resulting babel raised issue comparing relative expressiveness languages translating models defined language equivalent models defined language 
addition language possible define multiple equivalent models workflow 
turn raises questions ways workflow models different 
differences significant nature superficial limited consequence 
significant dealt 
copyright australian computer society appeared computing th australasian theory symposium cats university newcastle australia 
conferences research practice information technology vol 

mike atkinson frank dehne eds 
reproduction academic profit purposes permitted provided text included 
term variability refer possibility defining multiple models workflow modeling language 
aware research systematically categorizes variability workflow modeling 
field conceptual modeling information systems variability recognized phenomenon 
example proposes framework types variability identified uml class diagrams entity relationship diagrams 
framework variability conceptual modeling shown fundamental nature considerable restrictions differences layout notation considered differences models modeling language shown possible model set concepts real world different ways 
experience conceptual modeling field observed workflow field examples variability raising number issues 
instance modelers may produce different models faced modeling problem 
turn may hinder reuse workflow models janssens difficult compare sketch workflow model required modeler workflow models available reuse 
similar problem arises setting inter organizational workflows necessary compare model workflow required partner provided 
order study relative expressiveness workflow languages deal variability workflow modeling formal foundation needed defines equivalence workflow models means 
reported aims contributing establishment formal foundation 
specific question addressed stated follows workflows considered equivalent 
provides elements answer question abstracting language describe workflows 
results applied specific languages pairs thereof example wf nets van der aalst yawl van der aalst ter hofstede bpel andrews curbera goland klein leymann liu roller smith thatte weerawarana outside scope 
workflows called workflow processes business processes term various connotations seen number perspectives jablonski bussler 
control flow process perspective describes execution ordering basic activities involved workflow 
data information execution activities data passed activities 
resource organizational perspective provides organizational anchor workflow determines resources involved execution activities 
operational perspective describes internal structure activities mapping manual automated actions 
terms languages specify workflows control flow perspective plays central role 
data perspective constrained defined top organizational operational perspectives ancillary 
considers workflows abstracted level control flow 
previous known notions equivalence trace equivalence weak bisimulation kiepuszewski ter hofstede van der aalst branching bisimulation van der aalst basten area workflow 
practical examples show trace equivalence weak 
accordingly authors adopted weak branching bisimulation 
formal argumentation notion equivalence appropriate workflow modeling 
argue motivated notion equivalence workflows imperative study expressiveness defining possibly partial inter language process mappings 
defining mappings different languages confronted situation language defines construct mapped ways terms constructs language 
example split construct represents multi choice number branches branches chosen branches chosen executed parallel 
construct supported workflow languages van der aalst ter hofstede kiepuszewski barros mapped combination constructs parallel execution exclusive choice 
specifically split leading tasks translated exclusive system controlled choice doing parallel 
alternative translation parallel execution branches exclusive system choice branch exclusive system choice 
able properly capture split pattern language imperative defined notion equivalence captures language semantics 
setting defines notions equivalence observational viewpoint reflect way workflow systems operate 
observational equivalence defined terms sets tasks workflow offers environment response inputs environment provides 
sets tasks known sets worklists prioritized central generally accepted conceptions workflow systems hollingsworth 
possible observational equivalence notions defined related known bisimilarity relations 
particular define notions equivalence workflows silent steps show notions distinct coincides weak branching bisimulation 
note concurrent bisimulation related notions considered workflow systems 
task workflow expanded task task equivalence notions defined expanded workflow typical approach process algebra baeten weijland 
approach followed 
kiepuszewski 
case workflow models silent steps non determinism 
notion observational equivalence defined assumption related bisimulation 
section considers case silent steps allowed 
notions observational equivalence general case defined classified silent steps visible environment 
section concludes 
workflows silent steps section informal description define workflow observable behavior 
description formalization notions 
workflow set activities related controlflow dependencies 
executed workflow management system workflow behaves reactive system alternatively system offer environment form set activity identifiers environment responds choice elements offer additional information required complete activity 
remain high level abstraction describe behavior workflow transition tree connected rooted edge labeled directed graph cycles 
example workflow offers set offers represented shown 
transition tree definition independent language describe workflows 
typically languages rely constructs task node parallel split nodes synchronization nodes decision choice nodes merge nodes case resulting descriptions expanded transition trees 
definition workflows suggests observable behavior workflow described possibly infinite set traces consist alternations offers containing set activity identifiers acceptances containing single activity identifier element preceding offer 
describes observable behavior workflow workflows considered define set traces 
note point adopt usual definition traces including offers trace define trace list activity identifiers lead equivalence relation 
argued concurrency theory trace model capture know control flow moment choice represented 
standard example distinction transition trees 
modeled choice process taken step taken step workflow perspective distinction captures fact environment just pick activity identifier say addition supplies external information needed conclude activity 
example case activity get age transition trees environment picks activity supply requested information 
information may system executes workflow determine offer step different continuations may observed depending age entered 
moment choice observable environment see certain information supplied difference subsequent offers 
logs workflow contain supplied information able tell difference workflow described described 
consider example transition trees label edges activity identifiers uppercase supplied information lowercase 
example supplied information correspond decisions environment 
concrete transition trees clear abstraction abstraction concrete transition trees distinguished traces observable behavior environment see decisions matter final offer 
intuition moment choice captured assumption transition tree abstraction concrete transition tree ignores information provided environment 
process algebra intuition moment choice captured notion bisimulation 
give formal argument shows intuition externally supplied information justifies equivalence notion workflows 
postulating infinite set activity identifiers receive goods check credit get patient information 
activities offered environment set users applications interact workflow system 
set assume infinite set input data 
represent units information supplied environment system completion activity 
examples data simple boolean get patient information 
postulate infinite set nodes 
definition workflow 
workflow aw tuple represents rooted edge labeled tree nodes edges root explained workflow abstracts data supplied external environment 
introduce notion concrete workflow take information account labeling edges pair activity identifier externally supplied information 
definition concrete workflow 
concrete workflow cw tuple represents rooted edge labeled tree nodes edges root require concrete workflow consistent means certain activity accepts set input data 
formally call cw consistent holds edge edge edge introduce usual notion determinism cws specific choice input action environment leads state 
words system executes deterministic process arbitrary choices 
formally cw called deterministic node pair edge note deterministic cws environment arbitrary choices selecting activity supplying input information 
interpretation cw state system offers environment choice form set set identifiers corresponding activities environment perform state 
environment choice set supplies information system moves state indicated edge labeled 
set formally defined follows 
cw set node denoted defined 
want base notion equivalence observational equivalence define exactly observed workflow system 
purpose introduce notion workflow trace 
events record trace set system offers environment consists set activity choice environment set represented activity data supplied environment completing activity represented element leads definition 
definition workflow trace 
set workflow traces cw defined set lists form list 
wk ak ik wk set iff path 
nk ak ik nk wi ni 
final extra offer wk trace necessary distinguish trees shown 
note definition workflow trace equivalent colored trace defined van glabbeek weijland called decorated trace authors equate offer color 
final offer needed able distinguish transition trees easy see deterministic cws characterized isomorphism workflow traces deterministic cws isomorphic iff set workflow traces engelfriet 
proceed establishing relationship cws aws 
done instance relation relates nodes aw cw 
require relation relates root nodes 
furthermore transition aw corresponding concrete transition cw justifies existence 
hand concrete transition cw justified corresponding transition aw 
definition instance relation 
instance relation aw cw relation edge edge 
notion define concrete instance workflow definition instance 
cw called instance aw consistent instance relation similarity instance relation bisimulation relation leads observation 
proposition 
consistent cw instance aw iff aw obtained replacing edge labels bisimilar proof 
sketch shown instance relation defines bisimulation relation vice versa shown bisimulation relation defines instance relation notion observational equivalence cws form sets workflow traces extend notion aws 
definition observational equivalence 
aws called observation equivalent sets workflow trace sets instances 
note captures intuition aws distinguishable iff possible looking workflow trace sets detect instance belongs 
definition instance relation similar bisimulation relation leads lemma 
lemma 
aws bisimilar iff set instances 
consistent cw instance iff bisimilar aw ignore input data fact bisimulation relation equivalence relation 
fact show part follows aws instance aws common instance bisimilar 
hard see aw deterministic instance 
observed deterministic cws trace set iff isomorphic follows allowed deterministic instances shown aws bisimilar iff observation equivalent 
order proposed equivalence notions general possible consider case non deterministic cws 
problem nondeterministic cws different edges identical labels may leave node cws longer defined isomorphism set workflow traces 
consider examples 
non deterministic cws cws trace sets 



surprising type cws essentially ready trace semantics known strict bisimulation strict standard trace semantics van glabbeek 
level cws shown problem level aws 
observed deterministic cws characterized isomorphism trace sets 
show similar result wider class viz cws deterministic bisimulation 
definition deterministic bisimulation 
cw said deterministic bisimulation distinct edges holds bisimilar alternative characterization weaker form determinism proposition 
proposition 
cw deterministic bisimulation iff bisimilar deterministic cw 
cw bisimilar node deterministic cw bisimilar 
part holds simply merge edges bisimilar cw edges possibly infinite number steps 
result bisimilar original deterministic 
cws characterized workflow traces isomorphism shown characterized workflow traces bisimulation 
lemma 
cws deterministic bisimulation set workflow traces iff bisimilar 
proof 
sketch prove part 
path 
nk ak ik nk root cw similar path 
ak ik root cw nodes ni bisimilar define set wi 
prove part 
cws deterministic bisimulation 
cw deterministic bisimulation bisimilar deterministic cw viz obtain merge edges bisimilar 
cws set workflow traces bisimilar deterministic cw set workflow traces 
deterministic cws characterized isomorphism workflow traces follows corresponding deterministic cws isomorphic bisimilar 
useful observation cws deterministic bisimulation observationally distinct set workflow traces 
lemma 
cw deterministic bisimulation consistent cw set workflow traces 
proof 
sketch suppose try deterministic merging pairs edges form find pairs edges possibly infinite number steps 
process step merged nodes set consistent concrete set know result bisimilar result set workflow traces 
proposition follow deterministic bisimulation contradicts original assumption 
step merged nodes different sets 
paths nodes define different workflow traces set 
merging change set workflow traces follows workflow traces 
clear workflow traces set workflow traces deterministic cw 
proposition fact cws set workflow traces bisimilar know set cw 
follows traces set workflow traces 
ready show main theorem section states aws notions bisimulation observation equivalence coincide 
theorem 
aws bisimilar iff observation equivalent 
proof 
sketch show part 
assume aws bisimilar 
construct cw replacing activity identifiers pair obtain deterministic cw 
note possible assume infinite 
bisimilar follows instance bisimilar assume instance bisimilar set workflow traces 
cw deterministic bisimulation lemma bisimilar deterministic bisimulation follows lemma set workflow traces follows instance consequently set workflow traces set workflow traces set workflow traces observation equivalent 
proceed part 
lemma know bisimilar aws instances sets workflow traces 
workflows silent steps area concurrency theory common distinguish steps process directly observable controllable environment 
observable step occurs process ready perform workflow terms corresponding task appears offered set environment allows occur task picked set 
contrast silent step denoted entirely controlled system environment directly observe occurrence 
workflow nets van der aalst example steps appear form unlabeled transitions play important role describing semantics xor split split join join nodes workflow models 
correspond internal tasks decisions performed workflow system example updating variable workflow evaluating boolean condition select execution path executing script workflow system synchronizing tasks 
types steps system controlled system decides opposed steps performing human automated task interpreted steps 
indicate extent considered part observable behavior workflow 
environment directly observe occurrence step indirectly detect process options continuation occurrence causes tasks added removed offered set 
turns silent steps strong implications terms workflow equivalence 
discuss implications adapt definitions section workflows silent steps follows distinguished task introduced 
definition cw remains unchanged constraint added enforce activity identifier associated empty input data denoted edge labeled 
definitions instance relation instance remain unchanged 
definition set exclude cw define 
definitions workflow trace observational equivalence vary depending interpretation silent steps discussed 
classical notions equivalence section existing notions equivalence processes steps weak bisimulation milner branching bisimulation basten van glabbeek 
denote path zero edge definition weak bisimilarity 
aws weakly bisimilar denoted wbs iff exists symmetric relation nodes 
roots related 
exists path denotes path path 
consider aws correspond cws seen wbs 
hand aw equivalent corresponding aws 
applies 
intuition notion equivalence activity including preceding steps mirrored similar path equivalent workflow 
definition branching bisimilarity 
aws branching bisimilar denoted bbs iff exists symmetric relation nodes 
roots related 
exists path 
aws get equivalence classes bbs wbs 
intuition equivalence notions order mirror step process possible precede follow number steps equivalent process 
difference notions branching bisimilarity preserves branching structure process imposing steps taken lead states offer identical sets possible choices similarly steps taken lead states offer identical sets possible choices necessarily examples illustrating concept silent steps set choices 
comparison branching bisimilarity weak bisimilarity equivalences van glabbeek weijland 
notions equivalence generalization bisimulation candidates defining semantics workflows 
investigate sections comparing observational semantics reasonable correspond different interpretations steps 
structure presentation consider options turn steps appear traces define equivalence relationship traces captures certain steps observed ii traces defined steps appear 
semantics visible silent steps explore types semantics steps may observed traces full semantics change semantics non empty semantics 
full semantics full semantics considers step visible 
semantics formalized simply definition new notion set exclude offered sets wi 
example possible traces possible traces modified version definition definition observational equivalence full semantics aws denoted fs definition 
clearly aws distinguished semantics 
change semantics change semantics considers steps result modified set visible 
interpretation semantics environment see explicit steps see changes activities offered system 
traces identical full semantics 
difference full semantics change semantics 
change semantics possible traces full semantics possible traces cs denote change semantics 
formalized follows 
definition equivalence relation traces smallest equiva change semantics 
cs relation pair workflow traces xn xn xn xm xn xn xm cs xn xn 
informally requirement cs formulated follows trace contains sublist form replace sublist obtain equivalent trace 
definition equivalence relation cws aws change semantics 
cws cs iff full semantics workflow trace exists workflow trace cs vice versa 
aws cs iff instance instance cs vice versa 
follows aws fs implies cs implication necessarily hold way fs cs 
inclusion strict fs cs 
non empty semantics non empty semantics abstracts steps occur set empty 
interpretation semantics environment see explicit steps leave state actions offered environment 
remove traces empty offers followed step traces remain identical 
obtain different traces get get write nes denote aws observation equivalent non empty semantics 
formalized follows 
definition equivalence relation traces non empty semantics 
nes smallest equivalence relation pair workflow traces xn xn 
xm xn xn xm nes 
informally requirement nes formulated follows trace contains sublist form remove sublist obtain equivalent trace 
definition equivalence relation cws aws non empty semantics 
cws nes iff full semantics workflow trace exists workflow trace nes vice versa 
aws nes iff instance instance nes vice versa 
follows aws fs implies nes implication necessarily hold way fs nes 
inclusion strict fs nes 
aws nes cs note nes trace sets coincide initial state invisible 
cs nes 
surprisingly semantical definitions coincides standard equivalence notions branching bisimulation weak bisimulation 
equivalence notions change semantics suitable 
corresponds case workflow system updates set immediately step step internal system result external action new set visible environment 
environment able detect occurrence step changes contents set 
unfortunately elegant bisimulation formulation notions evidenced aws 
cs bisimulation relation relate root nodes time relate node edge node second edge vice versa 
reason visible step semantics environment observe options available set having try option 
problematic examples defining bisimulation formulation change semantics semantics invisible silent steps explore types semantics steps observed eager semantics far sighted semantics near sighted semantics 
semantical definitions observable traces show steps 
eager semantics eager semantics system gives priority steps long steps possible offer environment 
example possible traces possible traces possible trace note offered 
problems eager semantics divergence aws possible infinite path steps tree 
may lead situation workflow offer empty 
proceed formal definition semantics 
definition eager workflow trace 
set eager workflow traces cw defined set lists form list 
wk ak ik wk set iff path ak ik nk holds wj edge label leaves traces define equivalence relation es definition replacing original workflow traces eager workflow es 
far sighted semantics far sighted semantics system looks states reached zero steps offers activity identifiers edges leave states 
example possible traces formally define follows 
cw denote far sighted set set activity path 
definition far sighted workflow trace 
set far sighted workflow traces cw defined set lists form 
wk ak ik wk set iff path ak ik nk holds wj nj edge label arrives nj 
define equivalence relation fss definition replacing original workflow traces far sighted workflow traces 
note trace sets cws shown identical far sighted semantics 
hard see obtain semantics omit full semantics sets final set level cws far sighted semantics equivalent trace semantics steps ignored 
note mean moment choice longer captured semantics level cws lead semantics level aws generalization bisimulation 
near sighted semantics near sighted semantics system choice making offer step 
current state steps system picks steps 
visible steps available system offer corresponds edges labeled visible steps leaving state waits environment respond picks steps 
example possible traces system offers possible traces system offers 
formally define semantics follows 
definition near sighted workflow trace 
set near sighted workflow traces cw set lists form 
wk ak ik wk set iff path 
ak ik nk holds wj aj ij 
define equivalence relation nss definition replacing original workflow traces near sighted workflow traces 
table summarizes findings 
lists equivalence classes induced equivalence notions previously discussed set examples 
purpose table illustrate proposed equivalence notions different different equivalence notions introduced section weak branching bisimilarity 
noted table suggests eager semantics coincides weak branching bisimilarity 
generally true 
instance consider aw obtained changing 
seen es bbs eager semantics step taken offer irrelevant alternative transition labeled weak branching coincide working examples known notions differ van glabbeek weijland 
equivalence notions listed table distinct 
literature equivalence notions defined van glabbeek van glabbeek weijland 
similar notions equivalence readiness semantics defined olderog hoare olderog hoare close eager semantics 
ing bisimulation characterization readiness semantics non divergent processes provided assumption step causes task removed offered set 
parallels drawn treatment steps full semantics notion autonomous actions discussed basten 
autonomous actions defined steps process may observed controlled environment captures intuition full semantics steps internal actions observed environment change set 
equivalence notions table suitable workflow systems 
classical ones trace semantics branching bisimilarity suitable consider explicit offers 
equivalence notions steps may visible full change nonempty semantics change semantics realistic captures intuition set environment perceive inputs 
equivalence notions steps invisible eager far sighted near sighted semantics near sighted semantics realistic 
eager semantics may create dead branches transition tree far sighted semantics lets choice steps influenced environment contradicting assumption steps entirely controlled system 
provides starting point defining equivalence relations workflows 
provide definitive answer question raised 
provided number formal notions aws cws raised key issues need considered choosing equivalence notion 
addition formalized notion equivalence workflows absence silent steps 
pursued theoretical practical directions 
theoretical perspective interesting issues include studying branching bisimilarity bbs full semantics fs change semantics cs non empty semantics nes eager semantics es far sighted semantics fss near sighted semantics nss table equivalences aws corresponding cws various notions equivalence properties notions equivalence introduced particular characterizing classes workflows notions equivalence particular involving invisible silent steps correspond understood notions equivalence weak branching bisimulation 
practical perspective notions equivalence applied proving correctness mappings workflow modeling languages proving impossibility defining full mappings certain languages 
relevant light emergence proposed standards business process execution support silent steps notably bpel andrews 

partially funded arc discovery expressiveness comparison interchange facilitation business process execution languages 
van der aalst 
application petri nets workflow management journal circuits systems computers 
van der aalst basten 
inheritance workflows approach tackling problems related change theoretical computer science 
van der aalst ter hofstede 
yawl workflow language accepted publication information systems available qut technical report fit tr queensland university technology brisbane 
van der aalst ter hofstede kiepuszewski barros 
workflow patterns distributed parallel databases 
andrews curbera goland klein leymann liu roller smith thatte weerawarana 
business process execution language web services version 
accessed may www ibm com developerworks webservices library ws bpel 
baeten weijland 
process algebra vol 
cambridge tracts theoretical computer science cambridge university press cambridge 
basten 
branching bisimilarity equivalence information processing letters 
engelfriet 
determinacy observation equivalence trace equivalence theoretical computer science 
van glabbeek 
linear time branching time spectrum ii semantics sequential systems silent moves best ed proceedings concur vol 
lecture notes computer science springer verlag berlin pp 

van glabbeek weijland 
branching time abstraction bisimulation semantics journal acm 
hollingsworth 
workflow management coalition workflow model document number wfmc tc workflow management coalition uk 
ing 
weak semantics button pressing experiments proceedings th international workshop computer science logic csl utrecht netherlands september springer verlag pp 

jablonski bussler 
workflow management modeling concepts architecture implementation international thomson computer press london uk 
janssens 
workflow modelling petri nets van der aalst ed proceedings workshop workflow management th international conference application theory petri nets lisboa pp 

kiepuszewski ter hofstede van der aalst 
fundamentals control flow workflows acta informatica 
milner 
calculus communicating systems vol 
lecture notes computer science springer verlag berlin 
olderog hoare 
specification oriented semantics communicating processes acta informatica 

framework classifying variability conceptual models technical report rps university antwerp dept management information systems 
basten 
process algebra autonomous actions technical report eindhoven university technology department mathematics computing science eindhoven netherlands 

finding trading partners establish ad hoc business processes move meaningful internet systems proceedings doa coopis odbase international conferences irvine ca usa springer verlag pp 

