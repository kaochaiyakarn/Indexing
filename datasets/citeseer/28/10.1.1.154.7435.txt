ective compiler support predicated execution hyperblock scott mahlke david lin william chen richard hank roger center reliable high performance computing university illinois urbana champaign il predicated execution ective technique dealing conditional branches application programs 
problems associated conventional compiler support predicated execution 
paths control combined single path regardless execution frequency size conventional conversion techniques 
second speculative execution di cult combine predicated execution 
propose new structure referred hyperblock overcome problems 
hyperblock cient structure utilize predicated execution compiletime optimization scheduling 
preliminary experimental results show hyperblock highly ective wide range superscalar vliw processors 
superscalar vliw processors potentially provide large performance improvements scalar predecessors providing multiple data paths function units 
order ectively utilize resources superscalar vliw compilers expose increasing amounts instruction level parallelism ilp 
typically global optimization scheduling techniques utilized compiler nd su cient ilp 
common problem global optimization scheduling strategies resolve conditional branches target application 
predicated execution cient method handle conditional branches 
predicated guarded execution refers conditional execution instructions value boolean source operand referred predicate 
predicate value instruction executed normally predicate value instruction treated op 
predicated execution support provided architecture compiler eliminate conditional branches application 
process eliminating conditional branches program utilize predicated execution support referred conversion 
conversion initially proposed assist automatic vectorization techniques loops conditional branches 
conversion basically replaces conditional branches code comparison instructions set predicate 
instructions control dependent david lin amdahl sunnyvale ca 
branch converted predicated instructions dependent value corresponding predicate 
manner control dependences converted data dependences code 
conversion eliminate backward branches program 
predicated execution support ectively scheduling numeric non numeric applications 
numeric code overlapping execution multiple loop iterations software pipeline scheduling achieve highperformance superscalar vliw processors 
ability remove branches predicated execution support compact schedules reduced code expansion achieved software pipelining 
software pipelining advantage predicated execution support compiler 
non numeric applications decision tree scheduling utilizes guarded instructions achieve large performance improvements deeply pipelined processors issue processors 
guarded instructions allow concurrent execution multiple paths control execution instructions branches depend may resolved 
problems associated utilizing conventional compiler support predicated execution 
conversion combines execution paths region typically inner loop body single block 
instructions entire region examined time particular path region entered 
execution paths approximately size frequency method ective 
size frequency di erent execution paths typically varies inner loop 
infrequently executed paths execution paths comparatively larger number instructions limit performance resultant predicated block 
execution paths subroutine calls unresolvable memory accesses restrict optimization scheduling predicated block 
second problem speculative execution conveniently predicated execution 
speculative eager execution refers execution instruction certain execution required 
predicated instructions speculative execution refers execution instruction predicate calculated 
speculative execution important source ilp superscalar vliw processors allowing long latency instructions initiated earlier schedule 
propose structure referred hyperblock problems 
hyperblock set predicated basic blocks control may enter top may exit locations 
hyperblocks formed modied version conversion 
basic blocks included hyperblock execution frequency size instruction characteristics 
speculative execution provided performing predicate promotion hyperblock 
superscalar optimization scheduling register allocation may ectively applied resultant hyperblocks 
remainder consists sections 
section architecture support utilize predicated execution discussed 
section presents hyperblock associated transformations 
section preliminary evaluation ectiveness hyperblock 
concluding remarks ered section 
support predicated execution architecture supporting predicated execution able conditionally side ects selected instructions 
condition cation predicate stored predicate register le speci ed additional source operand added instruction 
content speci ed predicate register squash instruction processor pipeline 
architecture chosen modi cation allow predicated execution impact architecture model statically scheduled multiple instruction issue machine supported impact compiler 
impact architecture model modi cations predicated execution system 
proposed architectural modi cations serve reduce dependence chain setting predicates increase number instructions allowed modify predicate register le 
section implementation predicated execution discuss implications proposed modi cations impact architecture model architecture instruction set instruction scheduling 
support system system vliw multiprocessor system utilizing directed data ow architecture 
instruction word contains operations may individually predicated 
additional source operand added operation speci es predicate located predicate register le 
predicate register le array boolean bit registers 
processor pipeline operand fetch stage predicate speci ed operation examined 
content predicate register instruction allowed proceed execution stage squashed 
essentially operations predicates converted ops prior entering execution stage pipeline 
predicate speci ed operation known time operation leaves operand fetch stage 
mov mov mov mov ld addr ld addr ld mem ld mem bgt gt add stu jump stu bar add add add add add add add blt blt example predication source code segment assembly code segment assembly code segment predication 
content predicate register may modi ed operations stu stu bar 
stu operation takes operands destination predicate register boolean value source predicate register described 
boolean value typically produced comparison operation 
predicate value destination predicate register assigned boolean value operation squashed 
stu bar operation functions manner destination predicate register set inverse boolean value predicate value 
operation loop control sets predicate controlling iteration comparing contents loop iteration counter loop bound 
figures show simple loop containing ifthen conditional corresponding assembly code 
set mutually exclusive predicates di erent execution paths shown example requires instructions shown 
comparison performed followed stu set predicate register true path predicated stu bar set predicate register false path predicated 
results minimum dependence distance comparison rst possible predicate set 
support impact architecture proposed modi cations method impact architecture model seek reduce number instructions required set predicate reduce dependence length setting predicate rst 
shows basic model superscalar processor context instruction refers superscalar instruction opposed vliw instruction 
register file instruction fetch 
instruction decode operand fetch 
instruction execute 
memory access 
tf 
predicate register file mov mov ld addr ld mem pred gt add add add add blt writeback example predication im pact model 
pipeline model predicated execution 
pipeline addition predicate register le 
fourth stage pipeline memory access addition initiating memory access access predicate register speci ed instruction 
passed writeback stage determines result instruction written register le 
squashing instruction prior execution system instruction squashed writeback stage 
dashed arrow described section 
proposed predicate register le nx array boolean bit registers 
possible predicates bit hold true value bit hold false value predicate 
pair bits associated predicate register may take combinations false false true false false true 
false false combination necessary nested conditionals instructions sides branch require execution 
instruction able specify predicated true value predicate false value 
requires addition log bits instruction 
impact model predicate registers may ed number instructions 
bits specied predicate register may simultaneously set pred clear instruction 
new instructions integer unsigned oat double comparison added destination register register predicate register le 
eld destination predicate register set result compare eld set inverse result compare 
allows setting mutually exclusive predicates conditionals instruction 
performing comparison setting predicates instruction previous code example reduces shown 
true path comparison predicated false path predicated addition pred ld pred st instructions provided allow register allocator save restore individual predicate registers function call 
instructions added impact architecture support predicated execution 
ability comparison instructions set mutually exclusive predicates cycle coupled fact instructions squashed writeback stage reduces dependence distance comparison rst 
adding additional hardware instruction execute stage allows result predicate comparison operation forwarded memory access writeback stages dashed arrow dependence distance reducible 
may accomplished scheduling predicate comparison operation operation referencing predicate de ned comparison cycle 
note section stu comparison instructions assumed take cycle execute 
general stu cycles comparisons cycles dependence distance reduced combining impact predicate model predicate forwarding logic pipeline 
hyperblock set predicated basic blocks control may enter top may exit locations 
single basic block hyperblock designated entry 
control ow hyperblock point 
motivation hyperblocks group basic blocks di erent control ow paths single manageable block compiler optimization scheduling 
basic blocks control may ow included hyperblock 
basic blocks systematically excluded hyperblock allow ective optimization scheduling basic blocks hyperblock 
similar structure hyperblock superblock 
superblock block instructions control may enter top may exit locations 
hyperblock instructions superblock predicated instructions 
superblock contains instructions path control 
hyperblocks hand combine basic blocks multiple paths control 
programs heavily biased branches hyperblocks provide exible framework compile time transformations 
section hyperblock block selection hyperblock formation generation control ow information hyperblocks hyperblock speci optimization extensions conventional compiler techniques hyperblocks dis cussed 
hyperblock block selection rst step hyperblock formation deciding basic blocks region include hyperblock 
region blocks choose typically body inner loop 
regions including non loop code conditionals outer loops containing nested loops may 
conventional techniques conversion predicate blocks single loop nest region 
hyperblocks subset blocks chosen improve ectiveness compiler transformations 
programs possible paths execution combining paths single predicated block loss performance due limited machine resources fetch units function units 
form hyperblocks features basic block ina region examined execution frequency size instruction characteristics 
execution frequency exclude paths control executed 
removing infrequent paths reduces optimization scheduling constraints frequent paths 
second feature basic block size 
larger basic blocks priority inclusion smaller blocks 
larger blocks utilize machine resources may reduce performance control paths smaller blocks 
characteristics instructions basic block considered inclusion hyperblock 
basic blocks hazardous instructions procedure calls unresolvable memory accesses priority inclusion 
typically hazardous instructions reduce ectiveness optimization scheduling instructions hyperblock 
heuristic function considers issues shown 
weight bb size bb size main path weight main path bb block selection value bsv calculated basic block considered inclusion hyperblock 
weight size basic block normalized main path 
main path executed control path region blocks considered inclusion hyperblock 
hyperblock initially contains blocks main path 
variable bb characteristic value basic block 
maximum value bb 
blocks containing hazardous instructions bb 
variable machine dependent constant represent issue rate processor 
processors resources execute instructions concurrently take advantage larger hyperblocks 
example illustrate hyperblock block selection shown 
example shows weighted control ow graph program loop segment 
numbers associated node arc represent dynamic frequency basic block control transfer traversed respectively 
simplicity example considers block execution frequency criterion hyperblock block selection 
main path example example hyperblock formation block selection tail duplication 
blocks block executed frequently selected part hyperblock 
block executed frequently excluded hyperblock 
hyperblock formation blocks selected conditions satised selected blocks may converted transformed hyperblock 
condition exist incoming control ow arcs outside basic blocks selected blocks entry block 
condition exist nested inner loops inside selected blocks 
conditions ensure hyperblock top instructions hyperblock executed hyperblock exited 
tail duplication loop peeling transform basic blocks selected hyperblock meet conditions 
group basic blocks satis es conditions may transformed conversion algorithm described section 
tail duplication 
tail duplication remove control ow entry points selected blocks entry block blocks selected inclusion hyperblock 
order remove control ow blocks outside hyperblock replicated 
tail duplication algorithm transforms control ow graph rst marking ow arcs violate condition 
selected blocks direct indirect predecessor selected set blocks marked 
marked blocks duplicated marked ow arcs adjusted transfer control corresponding duplicate blocks 
reduce code expansion blocks duplicated time keeping track current set duplicated blocks 
abcde example loop peeling original ow graph peeling iteration inner loop tail duplication 
example illustrate tail duplication shown 
example block contains control ow entry point block selected hyperblock block 
block duplicated control ow arc adjusted duplicated block selected blocks tail duplication entered outside blocks entry block condition satis ed 
loop peeling 
loop nests inner loops iterate small number times cient hyperblocks formed including outer inner loops 
satisfy condition inner loops contained selected blocks broken 
loop peeling cient transformation accomplish task 
loop peeling rst iterations loop creating new set code iteration 
peeled iterations included hyperblock original loop body excluded 
loop peeled average number times expected iterate execution pro le information 
original loop body serves execute actual number iterations exceeds expected number 
example illustrating loop peeling shown 
blocks selected hyperblock inner loop consisting blocks inner loop peeled eliminate backedge hyperblock 
example assumed loop executes average iteration 
note tail duplication applied duplicate block peeling applied 
peeling tail duplication resultant hyperblock blocks satis es conditions 
node splitting 
tail duplication loop peeling node splitting may applied set selected blocks eliminate dependences created control path merges 
merge points execution time paths typically dictated longest path 
goal node splitting completely eliminate merge points su cient code duplication 
node splitting essentially duplicates blocks subsequent merge point path control entering merge point 
manner merge point completely eliminated creating separate copy shared blocks path control 
node splitting especially ective high issue rate processors control intensive programs control data dependences limit number independent instructions 
problem node splitting results large amounts code expansion 
excessive node splitting may limit performance hyperblock causing unnecessary instructions fetched executed 
selective node splitting performed compiler 
heuristic function node splitting importance shown 
weight flow size flow size main path weight main path bb flow selection value fsv calculated control ow edge blocks selected hyperblock contain incoming edges merge point 
execution frequency control ow edge 
size number instructions executed entry block point ow edge 
parameters parameters calculating bsv 
computed node splitting algorithm proceeds starting node largest di erences associated incoming ow edges 
large di erences indicate highly unbalanced control ow paths 
basic blocks largest di erence split rst 
node splitting continues blocks incoming edges di erence certain threshold 
node splitting algorithm places upper limit amount node splitting applied hyperblock 
conversion 
conversion replaces set basic blocks containing conditional control blocks single block predicated instructions 
illustrates resultant ow graph conversion applied 
current implementation variant rk conversion algorithm utilized hyperblock formation 
rk algorithm rst calculates control dependence information basic blocks selected hyperblock 
predicate register assigned basic blocks set control dependences 
predicate register de ning instructions inserted basic blocks source control dependences associated particular predicate 
data ow analysis determine predicates may de ned inserts resets pred clear instructions predicates entry block hyperblock 
conditional branches basic blocks selected hyperblock removed instructions predicated assigned predicate 
example code segment illustrating hyperblock formation shown 
example blocks shown selected hyperblock block 
control entry point block eliminated tail duplication 
conversion applied resultant set selected blocks 
single predicate required set blocks 
instructions block predicated true instructions block predicated false 
load mem ble add load mem load mem add jump add add ble add store mem jump sub store mem bne load mem pred le add load mem load mem add add add bgt sub store mem bne add store mem bne jump cond cond pred ne pred eq mov pred clear pred ne pred eq add sub example program segment hyperblock formation original control ow graph original assembly code assembly code hyperblock formation 
pred clear pred ne pred eq pred ne pred eq mov sub add example hyperblock 
block need predicated block block hyperblock may reached block 
note hyperblock conversion remove branches associated exits hyperblock 
control transfers hyperblock eliminated 
generating control flow information hyperblock compiler tools including dependence analysis data ow analysis dominator analysis loop analysis require control ow information order applied 
control ow may easily determined basic basic blocks instructions basic block sequential ow basic blocks determined explicit branches 
instructions hyperblock sequential require complex analysis 
example instructions demonstrate output dependence ow dependence predicate considered 
instructions predicated mutually exclusive predicates path control 
result dependence instructions 
predicate hierarchy graph graphical representation boolean equations predicates hyperblock 
composed predicate condition nodes 
predicate node represent null predicate instructions executed 
conditions added children respective parent example predicate hierarchy graph corresponding control ow graph 
predicate nodes 
subsequent predicates added parent condition nodes 
shown 
instructions considered condition set complementary predicates 
instruction causes creation top condition results creation child predicate node 
instruction add predicate child predicated condition node 
goal determine predicates instructions executed single pass hyperblock 
control ow path instructions 
boolean expression built predicate instruction determine condition instruction executed 
corresponding expressions anded decide instructions executed pass hyperblock 
resultant function simpli ed control path 
relatively simple matter determine path 
example control path instructions 
show rst build equations predicates 
equations formed anding predicates root predicate node current predicate node 
multiple paths may predicate paths ored 
created predicates active rst condition node second condition node 
equation may reached 
anding equations results simpli ed zero 
control path instructions 
shows complete control ow graph generated aid predicate hierarchy graph shown 
hyperblock speci optimizations optimizations speci improving ciency hyperblocks utilized instruction promotion instruction merging 
discussed section 
instruction promotion 
speculative execution provided performing instruction promotion 
promotion predicated instruction removes dependence instruction promotion instruction op hyperblock conditions true 
op predicated 

op destination register 

unique op dest pred 

dest live atop 

dest dest 
set pred pred 
gg algorithm type instruction promotion 
predicated instruction instruction sets corresponding predicate value 
instructions scheduled corresponding predicate determined 
instruction promotion ective long latency instructions memory accesses initiated early 
rst investigated instruction promotion enable speculative execution software pipelined repeat loops 
instruction promotion extended general code sequences context hyperblock 
promoted instructions execute regardless original predicate value 
promoted instructions overwrite register memory location correct program execution 
exceptions speculative instructions reported speculative instruction supposed execute original code sequence 
exceptions speculative instructions assumed handled sentinel scheduling architecture compiler support 
hyperblock instruction promotion concentrates handling rst condition 
algorithms instruction promotion utilized handle di erent types instructions 
rst algorithm shown simplest form promotion type 
type instruction promotion utilized instructions predicates de ned multiple times 
destination instruction considered promotion live de ned possible control paths de nition point predicate predicate promoted predicate de nition instruction dependent 
manner application type promotion reduces predicate depth null predicate reached 
example illustrating type promotion shown original code sequence shown 
load instruction indicated arrow promoted atype promotion 
instruction de nes predicate predicated indicated instruction promoted executed 
promotion load instruction longer ow dependent predicate comparison instruction scheduled rst cycle hyperblock 
type instruction promotion utilized instructions predicates de ned multiple times 
algorithm similar type promotion instruction promoted way null predicate 
single level promotion utilized due mul load mem pred le add load mem load mem add add add bgt sub store mem bne load mem pred le add load mem load mem add add add bgt sub store mem bne load mem pred le add load mem load mem add add bgt sub store mem bne example hyperblock speci optimizations type instruction promotion renaming instruction promotion instruction merging 
instruction promotion instruction op hyperblock conditions true 
op predicated 

op destination register 

exists op dest pred 

dest live instructions de ne pred de ne ancestor pred 

dest dest op ops de ne pred ancestors pred 
set pred 
gg algorithm type instruction promotion 
tiple de nitions instruction predicate possibly predicated di ering values 
instructions promoted due destination variable live alternate control paths violate condition type type promotion 
promotion performed destination register instruction renamed 
algorithm perform renaming instruction promotion shown 
opportunity renaming promotion uses destination promoted instruction updated renamed value 
move instruction inserted hyperblock restore value original register original control path taken 
example renaming instruction promotion shown 
load instruction indicated arrow promoted type promotion live de nition point predicate true control path causes variable live de nition 
renaming destination load allows promoted 
subsequent add adjusted new destination account renaming 
note move instruction necessary immediately rede ned 
normal application optimization move inserted subsequently deleted dead code elimination 
instruction merging 
instruction merging combines instructions hyperblock complementary predicates single instruction execute predicate true false 
technique derived partial redundancy elimination 
goal instruction renaming promotion instruction op hyperblock conditions true 
op promoted type 
exists op src dest op dominates op 

dest dest op 
rename dest new register 
rename src new dest 
add new move instruction op immediately op new dest old dest 
pred pred 
pred 
gg algorithm renaming instruction promotion 
instruction merging instruction op hyperblock conditions true 
op promoted type promotion 

op promoted type promotion 

op identical instruction op 

pred complement form pred 

de nitions src reach op op 
op placed op 
promote op 
delete op 
gg algorithm instruction merging 
merging remove redundant computations multiple paths control hyperblock 
algorithm perform instruction merging shown 
identical instructions complementary predicates rst identi ed hyperblock 
source operands de nitions reaching instruction opportunity instruction merging 
instruction merging accomplished performing type promotion lexically rst instruction eliminating second instruction 
instruction merging reduces size hyperblocks allows speculative execution resultant instruction 
example hyperblock instruction merging shown 
code segment add instructions add predicated complementary predicates hyperblock 
instruction merging rst add promoted type promotion predicate second add eliminated 
extending conventional compiler techniques hyperblocks control ow information hyperblocks derived section conventional optimization register allocation note instruction merging may appear undo ects node splitting 
instructions may merged dependent instructions source operands cond node splitting undone instructions ective 
instruction scheduling techniques extended straight forward manner hyperblocks 
di ering basic blocks control ow hyperblocks sequential 
complete control ow graph instructions hyperblock 
compiler transformations utilize sequentiality inherent basic blocks just modi ed handle arbitrary control ow instructions 
hyperblocks provide additional opportunities improvement conventional compiler techniques 
traditional global techniques conservative consider control paths basic blocks 
superblock techniques consider single path control time loop straight line code may potential optimizations multiple paths 
paths control resolve limitations superblock techniques traditional global techniques 
performance evaluation section ectiveness hyperblock analyzed set non numeric benchmarks 
methodology hyperblock techniques described implemented impact compiler 
impact compiler prototype optimizing compiler designed generate cient code vliw superscalar processors 
compiler utilizes machine description le generate code parameterized superscalar processor 
machine description le characterizes instruction set microarchitecture including number type instructions fetched issued cycle instruction latencies code scheduling model 
study underlying microarchitecture assumed register interlocking instruction set latencies similar mips 
processor assumed support speculative execution instructions store branch instructions 
furthermore utilizing hyperblock techniques processor assumed support predicated execution described section unlimited supply predicate registers 
machine con guration execution time assuming cache hit rate derived simulation 
benchmarks experiment consist non numeric programs spec set eqntott espresso li commonly applications cccp cmp compress grep lex qsort tbl wc yacc 
results performance hyperblock techniques compared superscalar processors issue rates 
issue rate maximum number instructions processor fetch issue cycle 
limitation placed combination instructions issued cycle 
performance reported terms aa aa aa aa aa aa aaa aa aa aa aa aa aa aaaa speedup issue issue issue aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa speedup issue issue issue aa aa aa aa aa aa aa aaa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aaa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aaa aaa aa aa aaaa aa aaaa aa aa aa aa aa aa aa aa aaaa aaa aaa aaa aaa aa aa aa aaa aaa aa aaa aa aaa ip pp ip pp ip pp ip pp ip pp ip pp ip pp ip pp ip pp ip pp ip pp ip pp cccp cmp compress eqntott espresso grep lex li qsort tbl wc yacc aa aa aa aa aa aa aa aa aaa aa aa aaaa aa aaa aaa aa aa aa aa aa aa aa aa aa aa aaa aa aa aa aa aaaa aaa aaa aaa aa aa aa aa aa aa aaa ip pp io po ip pp io po ip pp io po ip pp io po ip pp io po ip pp io po cccp cmp compress eqntott espresso grep lex li qsort tbl wc yacc aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aaaa aaa aa performance comparison various scheduling structures basic block ip hyperblock execution paths pp hyperblock selected execution paths 
ectiveness hyperblock speci optimizations ip hyperblock execution paths io ip optimization pp hyperblock selected execution paths po pp optimization 
speedup execution time particular con guration divided execution time base con guration 
base machine con guration speedup calculations issue rate supports conventional basic block compiler optimization scheduling techniques 
compares performance structures compile time scheduling superscalar processors 
note hyperblock speci optimizations promotion merging applied comparison 
ure seen combining paths execution inner loops hyperblock ip result performance loss 
ccp compress achieve lower performance issue rates ip compared basic block 
benchmarks show performance loss ip lower issue rates 
attributed large number instructions di erent paths control lling available instruction slots 
issue rate increased su ciently problem alleviated 
performance blocks selectively included hyperblock pp discussed section generally highest benchmarks issue rates 
pp provides larger scheduling scope scheduler identify independent instructions compared scheduling basic blocks 
benchmarks achieve lower performance pp compared issue due lack instruction slots schedule instructions selected paths execution 
pp achieves higher performance ip benchmarks issue rates 
exclusion undesirable blocks hyperblocks reduces con icts lack available instruction slots provides code reordering opportunities 
represents performance hyperblock speci optimizations 
optimizations consist instruction promotion provide speculative execution instruction merging eliminate redundant computations hyperblocks 
comparing hyperblocks paths execution combined ip io average performance gain issue processor achieved hyperblock speci optimizations 
hyperblocks selected paths execution combined pp po average speedup observed issue processor 
largest performance gains occur compress grep lex 
compares hyperblock superblock 
note optimizations increase ilp loop unrolling applied superblock hyperblock comparison 
speedup issue issue issue aa aa aa aa aaa aa aa aa aa aa aa aa aa aa aa aa aaa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aaa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aaa aa aa aa aa aa aa aa aa aa aaa aaa aaa aa aaa aaa aaaa aa aa aa aaaa aa aa aa aa aa aa aa aa aa aa aaa aaa aaaa aaaa aa aa aa aa aa aa aaaa aa aa po po po po po po po po po po po po cccp cmp compress eqntott espresso grep lex li qsort tbl wc yacc performance comparison hyperblock superblock structure scheduling basic block superblock po hyperblock 
gure seen structures provide signi cant performance improvements basic blocks 
superblock performs better hyperblock lower issue rates due lack instruction slots schedule instructions multiple paths control 
hyperblock generally provides performance improvement higher issue rate processors greater number independent instructions multiple paths control ll available processor resources 
point nite supply predicate registers assumed 
combined predicate register usage distribution benchmarks shown 
graph presents number hyperblocks speci ed number predicate registers 
alternate con gurations predicate registers compared 
pr represents scheme complementary predicate registers similar 
pr utilizes complementary predicate register organization discussed section 
gure seen predicate registers satisfy requirements benchmarks study 
comparing pr pr distributions shows cases true false predicates pr organization 
average number predicate registers hyperblock pr pr 
register pr organization equivalent registers pr organization true false locations pr organization uses average predicate registers hyperblock 
complementary predication organization ciently utilized reduce overhead setting predicate register values 
results section represent hyperblocks pr pr hewlett packard nasa contract nasa nag cooperation 
registers predicate register usage distribution comparison pr complementary predicate registers pr complementary predicate registers 
nary evaluation hyperblock structure 
evaluation include compiler optimizations increase ilp superscalar processors loop unrolling induction variable expansion applied structures 
currently optimizations available superblocks impact compiler fully implemented hyperblock 
fair comparison superblock ilp optimizations disabled study 
complete analysis hyperblock requires ilp optimizations applied 
current research incorporating ilp optimizations hyperblocks evaluating ectiveness 
concluding remarks conventional compiler support predicated execution major problems paths control combined single path conventional conversion speculative execution allowed predicated blocks 
hyperblock structure introduced overcome problems 
hyperblocks formed selectively including basic blocks hyperblock execution frequency size instruction characteristics 
systematically excluding basic blocks hyperblocks provides additional optimization scheduling opportunities instructions hyperblock 
speculative execution enabled performing instruction promotion instruction merging resultant hyperblocks 
preliminary experimental results show hyperblocks provide substantial performance gains structures 
hyperblocks ective higher issue rate processors su cient resources schedule instructions multiple paths control 
additional superscalar optimization scheduling techniques incorporated hyperblocks measure full ectiveness 
authors bob rau hp labs members impact research group comments suggestions 
research supported contract dr lee ncr amd advanced processor development division matsushita electric industrial control data dependence program transformations 
phd thesis department computer science university illinois urbana champaign il 
allen kennedy porter eld warren conversion control dependence data dependence proceedings th acm symposium principles programming languages pp 
january 
park schlansker predicated execution tech 
rep hpl hp laboratories palo alto ca may 
rau scheduling techniques easily schedulable horizontal architecture high performance scienti computing proceedings th annual workshop microprogramming microarchitecture pp 
october 
lam software pipelining ective scheduling technique vliw machines proceedings acm sigplan conference language design implementation pp 
june 
aiken nicolau optimal loop parallelization proceedings acm sigplan conference language design implementation pp 
june 
rau yen yen departmental supercomputer ieee computer pp 
january 
hsu bratt overlapped loop support proceedings th international symposium computer architecture pp 
may 
hsu davidson highly concurrent scalar processing proceedings th international symposium computer architecture pp 
june 
chang mahlke chen warter hwu impact architectural framework multiple instruction issue processors proceedings th international symposium computer architecture pp 
may 
hwu mahlke chen chang water hank holm superblock ective structure vliw superscalar compilation appear journal supercomputing january 
ferrante ottenstein warren program dependence graph optimization acm transactions programming languages systems vol 
pp 
july 
lee schlansker parallelization loops exits pipelined architectures proceedings supercomputing november 
mahlke chen hwu rau schlansker sentinel scheduling vliw superscalar processors proceedings th international conference architectural support programming languages operating systems october 
morel global optimization suppression partial redundancies communications acm pp 
february 
