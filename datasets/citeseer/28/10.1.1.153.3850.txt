modeling ill structured optimization tasks cases kazuo miyashita electrotechnical laboratory tsukuba ibaraki japan etl go jp katia sycara robotics institute carnegie mellon university pittsburgh pa katia cs cmu edu mizoguchi institute scienti industrial research osaka university osaka japan ei osaka ac jp cabins framework modeling optimization task domains 
domains systems human experts possess exact model guiding optimization 
user model optimality subjective situation dependent 
cabins optimizes solution iterative revision case reasoning 
cabins task structure analysis adopted creating initial model optimization task 
generic vocabularies analysis specialized case feature descriptions application problems 
extensive experimentation job shop scheduling problems shown cabins operationalize improve model accumulation cases 
key words case reasoning optimization task analysis knowledge system expert system explicit representation knowledge addition inference mechanism operates knowledge achieve system goal 
knowledge base represents model domain experts approach complicated problem domain 
operational model hopefully exhibits desired behavior speci ed observed real world exactly way mathematical model attempts mirror real world situations 
builders expert systems formulate model rst de ning model behavior wish understand extending model aid speci examples 
example protege interrelated phases knowledge base construction model building model extension 
building model developers rst perform requirements analysis identify task expert system perform 
knowledge engineers domain experts cooperate construct model proposed system behavior 
model generally corresponds developer theory experts solve problem 
extending model model intended behavior expert system validated ascertaining model applies closely related application problems 
activity involved rst stage model formulation model building entails knowledge level analysis determines goals knowledge system actions system capable knowledge system determine actions attain goal 
research ai clear consensus favor knowledge level analysis advantages knowledge modeling acquisition 
chandrasekaran colleagues advocated generic task framework identi ed number tasks general utility classi cation methods performing tasks kinds knowledge needed methods 
clancey proposed heuristic classi cation inference pattern diagnosis task examining expert systems mycin 
mcdermott developed half weak methods di erentiate propose revise methods solving general tasks require domain speci search control knowledge 
methodologies knowledge level analyses successfully applied development expert systems 
stage model formulation model extension generic methodology corresponding knowledge level analysis rst stage model formulation 
generally believed creating knowledge model may di cult extending existing model arduous human experts 
words domain experts may able introspect articulate process knowledge allows solve problems experts easily supply content knowledge may may consistent model 
elicit consistent domain knowledge human experts model knowledge acquisition tools developed mole salt opal 
model extension knowledge acquisition tools powerful allowing domain experts large knowledge bases help knowledge engineers tools strongly tied speci problem solving method presupposed tools 
example salt proved useful acquiring knowledge expert system called vt supports design elevator systems salt acquire effective knowledge solving scheduling problems 
failure salt caused fact propose revise problem solving method assumed salt inappropriate scheduling problem spite structural resemblance design problem 
problem solving method generic applicable wide variety tasks time capable matching nuances particular applications model extension framework problem solving method highly practical value 
case reasoning case reasoning cbr problem solving paradigm previous experiences guide problem solving 
cases similar current problem retrieved memory similarity metric best case selected retrieved compared current problem 
needed precedent case adapted current situation identi ed di erences precedent current cases 
cbr allows reasoner propose solutions domains completely understood reasoner evaluate solutions algorithmic method available evaluation interpret open ended ill de ned concepts 
cbr helps reasoner take actions avoid repeating past mistakes focus reasoning important parts problem 
owing advantages cbr successfully applied kinds problems design planning diagnosis instruction cbr regarded appropriate problem solving method large class applications 
terms knowledge acquisition cbr number practically desirable features encourage cbr applications domains 
cbr successful cases stored case base retrieved re 
failed cases stored warn problem solver potential di culties help recover failures 
problem solved case base updated new experience 
learning integral part case problem solving 
general easier experts collect su cient number problem cases solving sample problems try particulars problem cases order formulate consistent rule set 
cbr considered natural time consuming method knowledge acquisition 
noted cbr panacea obviates overhead associated knowledge acquisition 
de nes new types knowledge acquisition tasks de nition appropriate case features indices 
solving di culties attempts combining knowledge level analysis case reasoning constructing task description case reasoning task structure guideline developing indexing schema case :10.1.1.4.4382
hypothesize analysis application problem task level provides useful category vocabularies describing features situations problem vocabularies mapped domain speci vocabularies case descriptions ort vocabularies represented knowledge level 
validate hypothesis case approach implemented cabins system formulating model optimization task guide iterative solution optimization ill structured domains 
model optimization task knowledge user context dependent preferences situation dependent search control 
cabins cbr method extending optimization task model created domain experts knowledge engineers task structure analysis 
show coupled task level analysis case reasoning method provide strong leverage reducing di culty knowledge acquisition 
evaluate ectiveness approach extensive experiments cabins performance done domain job shop scheduling widely known ill structured optimization problem 
rest organized follows section presents characteristics challenges job shop scheduling domain 
section presents model formulation approach cabins 
section presents overview case optimization approach cabins 
section explains experiment method presents results 
section presents concluding remarks 
scheduling problem scheduling assigns set orders time set resources nite capacity 
di cult scheduling problem classes job shop scheduling 
job shop scheduling known np complete problem 
job shop scheduling order consists set activities scheduled partial activity ordering 
dominant constraints job shop scheduling temporal precedence constraints specify relative sequencing activities order resource capacity constraints restrict number activities assigned resource overlapping time intervals 
activity precedence constraints order release date due date restrict set acceptable start times activity 
capacity constraints restrict number activities resource particular point time create con icts activities competing resource overlapping time intervals 
goal scheduling system produce schedules respect temporal relations resource capacity constraints optimize set objectives minimizing tardiness minimizing wip process process inventory job shop schedule optimization di cult automate variety reasons 
di cult np hard combinatorial optimization problems domain experts believed possess su cient heuristic knowledge making schedules ciently 
repair machine machine machine resource constraint propagation precedence constraint propagation order order order example tight constraint interactions owing tight interactions scheduling constraints con icting nature optimization criteria impossible assess precision extent required schedule revision improve impact scheduling decision global satisfaction optimization criteria 
example moving forward activity order creates downstream cascading constraint violations 
way user system evaluate desirability action assess ects optimization preferences apply action problem see resulting schedule evaluate light ofthe evaluation preferences 
release date due date due date schedule order order wip order swap tardiness order schedule order order wip order example con icting objectives evaluation high quality schedule di cult need balance con icting objectives trade 
trade typically re ect user preferences di cult express cost function 
example wip tardiness compatible 
shown situations repair action reduce tardiness wip increases 
better schedule depends user preferences 
complication user preferences implicit context dependent may depend state scheduling environment particular time 
interactions preferences ective tradeo depend particular schedule produced 
means generally user scheduling system fully specify preferences priori getting scheduling results system 
looking obtained schedule results user thinks additional preferences 
real world schedule optimization problems usually precise evaluation criteria ective control knowledge nding optimal solutions ciently 
modeling optimization task analysis ill structuredness job shop scheduling problem section provides insights type problem solving methods suitable ill structured optimization problem type knowledge required solving problem 
insights de nition enhancement knowledge level model problem 
uniform knowledge level analysis frameworks describing systems developed research groups kads spark protege ii 
adopt task structure analysis building model optimization task 
task structure tree tasks methods subtasks applied recursively reaches tasks sense performed directly available knowledge 
task synonymous types problemsolving goals example optimization task characterizes family problems require achieving goal generating solution maximizes evaluation criteria 
method process achieve goals task example task optimization accomplished constructive methods repair methods 
optimize constructive methods repair methods propose critique modify verify algorithmic methods search methods utility analysis hill climb check evaluate heuristic methods mathematical methods select goal set goals select repairs apply repairs check evaluate random selection case reasoning simulation cost calculation task structure optimization shows task structure optimization task 
design considered optimization task task structure constructed task structure design 
task structure diagram circles represent tasks rectangles represent methods 
diagram intended show complete task structure optimization task captures methods subtasks relevant 
optimization task solved constructive methods repair methods 
ill structured domains scheduling complete domain knowledge available constructive methods produce high quality solutions cient way 
repair methods consist subtasks propose verify critique modify 
proposing solution principal methods available algorithmic search 
algorithmic methods categorized classes heuristic mathematical 
heuristic methods solve problem approximated algorithms 
methodology works problems restricted problem structure 
mathematical methods linear integer programming solve problems precise mathematical model problem constructed 
search methods constraint satisfaction branch bound search optimal solution space partially constructed solutions help domain speci search control knowledge 
critiquing solution quality solution analyzed utility function domain experts 
solution judged acceptable repair process terminated solution 
sources solution identi ed repair goals 
modifying solution ective way repair goals selected applied current problem 
selection repair goals repair actions possible method nd similar past experiences current problem situation suggest plausible repair action current context 
ill structured problems random selection method selecting repair action allows solution escape local minima 
methods goal setting strongly domain dependent methods de ned developed domain experts help knowledge engineers 
verifying solutions problem repair checked regarding feasibility result 
done simulation methods constraint propagation 
feasible solution achieved evaluated see repair improves quality solution calculating explicit cost function nding similar past repair results evaluated acceptable 
cabins case reasoning method subtasks evaluation goal selection repair selection 
hypothesis knowledge required subtasks acquired small orts approach shown section 
case model extension task structure model building analytical tool 
system performs task viewed methods subtasks task structure 
simply provides generic vocabulary describing systems 
order formulate model speci application problem developer application program needs extend model task structure 
optimization task scheduling problem certain factory knowledge level knowledge level symbol level model task task structure analysis specialization features model specific problem operationalization progressive enhancement cases solutions explanations model building model extension scheduling method certain factory model solving problem model formulation cabins shows schematic diagram model formulation process cabins 
order develop cabins system model optimization task needs extended kinds domain dependent knowledge required performing task 
cabins uses case reasoning principal problem solving method optimization task model extension process cabins composed phases specialization operationalization progressive enhancement 
rst phase specialization carried knowledge level 
specialization generic vocabulary task structure analysis transformed re ned vocabulary speci problem domain 
cbr point view task structure analysis provide case feature categories specialization process maps feature descriptions cases application domain 
example task level analysis suggests case feature category solution quality description necessary goal selection subtask specialization process scheduling domain transforms feature descriptions speci ones tardiness wip schedule 
generic vocabulary task structure analysis domain speci vocabulary speci ed specialization described knowledge level language specialization accomplished domain experts enumerate appropriate feature descriptions application domain help knowledge engineer explain meaning generic vocabularies 
second phase operationalization progressive enhancement symbol level process 
phase speci cases accumulated domain experts case base case descriptions de ned previous stage 
cases contain content knowledge domain judgments explanations domain experts particular problem context 
ill structured problems job shop scheduling human experts expected su cient understanding problem acquiring content knowledge cases easier acquiring forms rules reasons explicit understanding domain causality necessary cases implicitly map problem features solutions knowledge need abstracted indexing mechanism abstraction content cases case matched new problem consistency check knowledge needs done retrieved cases uence inconsistent wrong cases weaken mass right cases meta control information knowledge usage certainty factors needs described population relevance cases implicitly de nes control 
cases operationalize model executable improve capability operationalized model incrementally 
accumulation cases successfully achieved problem goals creates implicit model domain experts solve problem high quality solutions 
accumulation cases failed solving problem extends model inductively useful search control knowledge avoiding similar failures recognized experts 
accumulation cases progressively enhance problem solving capability terms solution quality problem solving ciency 
experimental results cabins section validate ectiveness approach job shop scheduling problems 
cabins case optimization approach considerations job shop scheduling problem model formulation method optimization task clear iterative revision optimization technique suitable recording user judgments case base ective exible way eliciting user optimization preferences improve solution quality recording successful failed repair trials case base appropriate way learning control knowledge improve search ciency 
observations hold true real world ill structured optimization problems vlsi layout circuit design transportation planning 
problems test data training data initial problem solver domain knowledge sub optimal solution case case repair repair heuristics case base contextual features applied repair heuristics results evaluations case acquisition repair human expert optimized solution cabins architecture cabins uni ed framework knowledge acquisition iterative optimization ill structured problems 
shows schematic diagram architecture cabins implementation 
cabins composed modules initial solution builder interactive repair case acquisition module automated repair case re module 
generate initial solution cabins problem solving methods dispatch rules available cabins general initial problem solver produce optimal solution complete knowledge domain user preferences available problem solver ill structured optimization problems job shop scheduling 
order compensate lack types knowledge cabins gathers information form cases interaction domain expert training phase 
suggestion defect repaired user selection critical defect solution 
suggestion repair action apply user decision repair action applied solution quality improvement 
evaluation repair result user evaluation modi cation result 
cabins acquires cases category concepts re ect user preferences combination ects produced application particular local optimization action schedule constitutes acceptable unacceptable outcome 
cabins optimization criteria explicitly represented case features terms cost function implicitly extensionally represented case base 
cabins learns additional categories concepts re ect control knowledge quality enhancement ciency improvement aspect solution repaired heuristic repair action choose particular repair context give repair 
concepts recorded case base cabins guide iterative optimization infer optimization tradeo evaluating current solution 
way acquired knowledge exploited enhance incomplete domain model cabins improve ciency problem solving quality resulting solutions 
think cbr inappropriate method generating initial schedules owing ill causality problems inherently di erent solutions optimal slightly di erent problems 
basic assumption case approach spite problem types domain knowledge available constitute useful case features 
repair heuristics set repair heuristics applied problem 
descriptive features attributes problem describe particular problem situation useful estimating ects applying repair heuristics problem 
features explained detail section job shop scheduling problem 
evaluation criteria quanti cation di erent aspects ects applying repair heuristics problem 
degree importance criteria general user state dependent 
case base repair control model user preference model selection evaluation search space 
selected solution rejected solution candidate solution search space search control cabins cases gathered cabins searches optimal solution space complete solutions autonomously 
shows schematic diagram search space search control cabins system 
cabins revises current solution iteratively improve solution quality 
step search cabins selects solution neighbors current solution 
neighborhood size current solution number potential solutions revision equal number repair actions number repair objects 
scheduling problem repair actions heuristics modify assignments resources activities schedule repair objects typically activities schedule 
number revision cycles required obtain nal solution general predicted advance tight constraint interactions scheduling problem 
search space large scheduling problem intractably big 
cabins mechanisms control search cbr repair control model provides search control case selection repair goal action user preference model provides search control case evaluation result application selected repair action 
case representation corresponding task structure cabins subtasks cbr problem solving method goal selection repair selection evaluation 
cabins repair selection divided strategy selection tactic selection 
repair goal derived particular high level description defects solution problem signi cance user 
way achieve particular repair goal designated selection associated repair strategies 
repair strategy executed successive application variety repair tactics associated 
result tactic application evaluated check acceptable 
cabins repair process decisions goal strategy tactic selection result evaluation case reasoning 
content case able represent decision criteria human experts repair process 
case descriptions cabins de ned specialization task structure analysis results 
case cabins describes application particular repair action problem cabins general types cases corresponding hierarchical classes repair actions goal case strategy case tactic case 
case type delineated descriptive features heuristic approximations re ect problem space characteristics repair history records sequence applications successive repair actions repair ects repair outcome 
case type di erent sets categories derived task level analysis characterize features described case 
hierarchy repair actions categorization case features give strong semantics helping user cabins understand organize expertise represented case 
result domain experts easily de ne speci features repair actions implemented programmer knowledge cabins internal structure process 
feature categories cabins derived task structure optimization task see section 
task structure analysis identi ed feature categories type case goal case information necessary selecting repair goal stored 
repair goal selected identifying critical defect current problem consideration problem context 
accordingly goal case categories features quality situation 
quality category user de ne features constitute evaluation current problem unsatisfactory values cause defects 
situation category user describes external factors uence evaluation current problem 
repair action recorded goal case repair goal 
repair goal select critical objectives current problem sort repair targets selected objective 
user expertise captured goal case detecting defects solution problem context quality situation 
strategy case records information necessary select repair strategy 
repair strategy selected global characteristics repair target strategy case single category features global context 
features global context represent potential repair exibility repair target 
repair action stored strategy case repair strategy 
repair strategy determine degree allowable change repair sort changeable components repair target appropriately order tactic applications ripple ects tactic applications minimized 
strategy case captures user knowledge tradeo possible ects allowable global disruptions repairing target 
tactic case represents information required selecting repair tactic 
repair tactic selected local characteristics component current repair target 
features tactic case belong category local context 
local context features re ect exibility revision repair target component limited bounds allowed repair strategy 
repair action stored tactic case repair tactic executes revision components repair target 
important piece information stored tactic case evaluation repair result 
features evaluating repair result belong repair ect category 
repair tactic repair action actual changes repair targets ects changes evaluated domain expert stored tactic case judgment acceptability repair results 
tactic case captures user knowledge prediction local ects possible tactic application user preferences tradeo favorable unfavorable repair ects local global perspectives 
presents schematic diagram showing abstracted content cabins case base 
content derived specialization task structure analysis results optimization task scheduling problem order schedule selected repair target strategy application 
tactic application activity selected order designated repair target 
features order stored global context strategy cases activity features recorded tactic cases 
tactic case schedule quality changes recorded repair ect evaluation results domain experts 
shown examples feature cabins case described set attributes value filtering importance similarity 
feature attribute speci es name feature considered 
value attribute records value feature 
val case base goal case schedule quality scheduling situation goals strategy case order features strategies tactic case activity features tactics schedule quality changes evaluations features repair actions case base schedule optimization problem ues filtering importance similarity attributes assigned user case acquisition likes override default retrieval procedure case 
value filtering attribute feature exact match feature required case retrieved 
value partial match contribute case retrieval 
value importance attribute designates importance feature particular case 
filtering importance attributes allow user express uniqueness feature particular case di erent ways 
attributes represent exceptional case value feature case special meaning user 
similarity attribute denotes function calculate feature similarity 
shows example goal case experiments 
example features belonging schedule quality re ned weighted tardiness inventory major concerns experiments 
features scheduling situation case year month economy boom depression considered ect judgment appropriateness cur case name exp data exp schedule quality slot slot feature weighted tardiness feature inventory value value filtering filtering importance importance similarity normal similarity normal scheduling situation slot slot feature year feature month value value filtering filtering importance importance similarity normal slot feature economy value bad filtering importance similarity normal goals solution goal reduce weighted tardiness result failed solution goal reduce inventory result succeeded similarity normal example cabins goal case schedule optimization problem rent schedule 
example month may imply seasonal factors uence production planning strict due date requirements widely observed year 
case shows reduce inventory selected critical goal successfully achieved failure attaining reduce weighted tardiness goal 
case name exp gs goal reduce inventory order features slot slot feature slack ratio feature tardiness ratio value value filtering filtering importance importance similarity normal similarity normal slot slot feature inventory ratio feature resource idle ratio value value filtering filtering importance importance similarity normal slot feature resource busy deviation value filtering importance similarity normal strategies solution strategy shift right result succeeded similarity normal example cabins strategy case schedule optimization problem example strategy case cabins 
example order features re ned features describing global context order 
slack ratio example total waiting time divided length allowable time window completion order release date due date 
high slack ratio shows loose schedule repair exibility 
resource busy deviation standard deviation utilization resources activities order assigned 
high resource busy deviation indicates presence highly contended resources bottleneck resources turn repair exible 
example case records shift right strategy means move activities order right timeline selected repair strategy succeeded achieving goal 
example tactic case cabins 
activity features include features activity limited bounds 
particular bound cabins uses time interval called repair time horizon 
repair time horizon activity time interval activity preceding activity order start activity succeeding activity order see 
associated repair time horizon features potentially predictive ectiveness applying particular repair tactic 
left slack ratio right slack ratio roughly estimate exibility activity time horizon considering resource contention 
alternative resources shows number alternative resources activity assigned 
features activity features predict gain achieved applying corresponding repair tactic activity time horizon 
example imm left idle ratio predicts possible ects applying slide left tactic activity 
example case jump left tactic moves activity resource left timeline possible repair time horizon applied ects repair recorded features schedule quality changes 
features schedule quality changes describe impacts repair action application schedule optimization objectives tardiness inventory 
typically ects re ect diverse set objectives considered heavily related schedule quality features goal case 
noted perspectives recording ects 
local perspective describes ects occurred repaired activity 
global perspective represents ects tactic application schedule 
ects caused tactic application determined activities selected strategy repaired human expert predict acceptability tactic application result considering trade current global local repair ects 
result repair ects perspectives need recorded 
result evaluation assigned set ects repair action set succeeded failed 
judgment repair outcome domain expert training phase case name exp gs os goal reduce weighted tardiness strategy shift left final activity features slot slot feature left slack ratio feature right slack ratio value value filtering filtering importance importance similarity normal similarity normal slot slot feature imm left idle ratio feature imm right idle ratio value value filtering filtering importance importance similarity normal similarity normal slot slot feature aggr left idle ratio feature aggr right idle ratio value value filtering filtering importance importance similarity normal similarity normal slot slot feature left feature right value value filtering filtering importance importance similarity normal similarity normal slot slot feature left alt idle ratio feature right alt idle ratio value value filtering filtering importance importance normal similarity normal slot slot feature left alt feature right alt value value filtering filtering importance importance normal similarity normal slot feature alternative resource value filtering importance normal tactics solution tactic jump left schedule quality changes slot slot feature local weighted tardiness feature local inventory value value filtering filtering importance importance similarity normal similarity normal slot slot feature global weighted tardiness feature global inventory value value filtering filtering importance importance similarity normal similarity normal effect result succeeded example cabins tactic case schedule optimization problem repair time horizon time horizon repair time horizon activity gets recorded case base 
result succeeded tradeo involved set ects current application repair action judged acceptable 
effect approximation aggregated ects repair determined subjectively user 
case acquisition cabins session starts empty case base 
set training problems user interacts cabins repair problems hand 
interactions results stored cases information problem contexts 
case acquisition user operationalize model solving schedule optimization problems 
shows interactions cabins user case acquisition 
iteratively repairing solution training problem user select repair action deemed appropriate particular problem situation apply problem evaluate result repeatedly 
user decisions course repair problem context recorded case 
selection repair actions goal strategy tactic user assign values attributes case features filtering importance similarity supplemental explanations decisions 
schedule optimization problem user rst selects urgent repair goal schedule list user de ned goals achieved schedule 
user selection repair goal quality training problem cabins solution user repair cycle repair action explanation filtering importance similarity repair effects evaluation outcome effect interactions cabins user case acquisition current schedule situations uencing user scheduling decisions recorded goal case 
application repair goal current schedule produces sorted list orders signi cance defect repair goal 
user selects repair strategy set user de ned repair strategies repairing order sorting 
user selection repair strategy global characteristics order constitute content strategy case 
repair strategy applied order activities order picked sorted avoid unnecessary computations unbounded ripple ects 
user selects repair tactic set user de ned repair tactics repairing rst activity sorted queue 
repair tactic application causes changes schedule executing repair applying constraint propagation resolve constraint violations 
repair tactic application may result infeasible schedule 
infeasible schedule occur constraints propagated xed time window boundary order time window release date latest due date order 
outcome repair tactic application feasible ects repair calculated shown user 
ect describes result repair respect repair objectives de ned features schedule quality changes tactic case 
tight constraint interactions ects ubiquitous job shop scheduling schedule optimization extremely hard 
application repair tactic produces feasible result user determine resultant schedule acceptable calculated ects 
outcome judged unacceptable schedule resulting application revision heuristic feasible revision result improvement respect user criteria 
happen harmful ects outweigh user judgment ected improvement 
example reduction order tardiness enforces increased utilization low quality machines total cost incurred repair eventually increased decreased user dislike possible low quality products 
repair judged unacceptable user 
user judgment balancing favorable unfavorable ects related particular optimization objective constitutes explanations repair outcome 
user supply supplemental explanation judgment assigning value effect attribute repair tactic description tactic case 
gives case additional information extent case acceptable unacceptable 
repair tactic application applied repair tactic ects repair user judgment explanation repair outcome recorded case activity features 
repair process continues acceptable outcome reached failure declared 
failure declared repair action available 
sequence applications successive repair actions ects user evaluation results recorded case 
way number cases accumulated case base model solving schedule optimization problem operationalized progressively enhanced 
case retrieval re cases gathered cabins repairs sub optimal schedules user interaction 
cabins repairs schedules invoking cbr schedule quality scheduling situation indices recognize schedule sub set repair goal focusing order repaired repair goal invoking cbr order features indices decide repair strategy focusing activity repaired order invoking cbr activity features indices decide appropriate repair tactic activity order invoking cbr schedule quality changes indices evaluate repair result repair result unacceptable invoking cbr failed tactic additional index decide give repair tactic 
cabins cases retrieved nearest neighbor method standard formula calculating similarity th case current problem follows exp nx im cf pf sd im importance th feature th case case base value heuristically de ned user 
cf value th feature th case pf value th feature current problem sd standard deviation th feature value cases case base 
feature values normalized division standard deviation feature value features equal salience equal weight similarity function 
experiments hypothesize accumulation cases cabins acquire user optimization preferences re produce better solutions learn control knowledge solve problems ciently 
words cases cabins incrementally improve model schedule optimization terms solution quality ciency 
section report experimental results job shop schedule optimization problems validate hypotheses 
hypotheses di cult test due subjective ned nature user preferences obvious correlate schedul varieties methods similarity calculation depending value filtering similarity attributes features relevant discussion 
see details 
ing results captured preferences de ne quality schedule evaluation subjective 
address issues devise method test hypotheses consistent manner 
necessary know optimization criterion implicit case base experimental results evaluated 
experiments reported explicit criterion wip weighted tardiness re ect user optimization criterion built rule reasoner rbr goes trial error repair process optimize schedule criteria rbr constructed select repair action repair result calculated unacceptable go repair actions giving repairing schedule 
repair repair ects calculated basis rbr prede ned evaluation objective evaluate repair outcome consistent manner 
rbr generate case base cases explicit optimization objective 
rbr knows exact objective function evaluation emulator human scheduler repair schedule cient way consistent evaluations repair results 
rbr generating case base cabins making comparison baseline cabins experiments 
naturally objective known rbr known cabins implicitly indirectly re ected extensional way case base 
designing objective rbr re ected case base got experimental baseline evaluate schedules generated cabins 
rbr purpose controlled experiments clarify usefulness performance cabins 
analogous controlled experiments psychology experimental situations simpler humans virtue controlled experiments experimenter isolate control variables meaningful having confounding variables nd responsible experimental results 
evaluated approach suite job shop scheduling problems parameters bottlenecks range due dates activity durations varied cover range job shop scheduling problem instances structure 
problem class orders operations machines 
parameters cover di erent scheduling conditions range parameter controlled distribution order due dates release dates bottleneck parameter controlled number bottleneck resources 
groups problems randomly generated considering di erent values range parameter values bottleneck con guration bottleneck problems 
problems variations problems originally reported 
problem sets di erent respects allow substitutable resources non bottleneck resources original problems due dates orders problems tighter percents original problems 
cross validation method experiments 
problem set class divided half 
training problem set repaired rbr gather cases 
cases case repair validation problem set 
repeated process interchanging training test sets 
reported results validation problem sets 
subsections empirical results increasing case base size improves performance cabins terms solution quality problem solving ciency 
results indicate accumulation cases progressively enhance competence model solving scheduling problems 
case accumulation ects quality increase case base size bene cial harmful ects cabins performance terms solution quality 
possible explanations ects follows better quality solutions having new cases successfully repaired novel problems cabins increases possibility improving solution quality re cases similar problem situations 
poorer quality solutions explanations additional cases deleterious ect quality solutions cabins 
incorrect cases may lead cabins produce poorer solutions 
increase number failure cases case base force cabins give exploration better solutions chance nd 
comparison rbr rule repair repair cabins case base size ect case base size solution quality cabins graph compares performance cabins di erent sized case bases terms solution quality 
comparison baseline performance rbr created cases cabins 
value greater indicates solution produced cabins indicated case base size exceeded solution quality produced rbr 
graph results cases increment plotted size case base exceeds results cases increment plotted shown 
get case bases di erent sizes appropriate number cases problem class randomly selected deleted created case base cases 
graph schedule quality improve increased case base size 
marginal payo increase case base size decreases 
explained partially fact number cases say cases capture characteristics user preference model created records solution evaluations user various problem contexts additional new cases may give redundant information 
size case base relatively small new case usually adds information di erent part model improves capability cabins producing solutions better quality directs search local minima escaped new cases acquired 
gure indicates collecting number cases cases cabins degrade solution quality increase case base size 
shows cases cabins stored knowledge avoiding escaping local minima search space 
concluded size case base cabins improve solution quality early stage case accumulation 
deleterious favorable ect solution quality accumulation cases 
words accumulation cases quickly improve operational capability user preference model cabins 
case accumulation ects ciency increase case base size bene cial harmful ects cabins performance terms problem solving ciency 
possible explanations ects follows cient problem solving increasing number failure cases number di erent failure types known cab ins increases 
cabins avoid repeating large variety failures reducing search time 
cient problem solving irrelevant cases may suggest cabins expand search tree fruitless directions 
experiment take anumber repair tactic applications indicator problem solving ciency cabins applications repair tactics time consuming factor cabins repair process 
graph compares performance cabins different sized case bases terms number tactic applications 
comparison baseline performance rbr 
value graph indicates problem solving cabins case size comparison rbr rule repair repair cabins case base size ect case base size problem solving ciency cabins cient rbr 
graph results cases increment plotted size case base exceeds results cases increment plotted shown 
graph shows cabins improves problem solving ciency increase case base size improvement solution quality saturated cases accumulated 
result indicates cabins acquires ective search control knowledge speeding accumulation cases 
search ciency reaches stationary value large number cases cases acquired 
explained complicated nature repair control model created history repair goal action selections repair results di erent problem situations 
diversity cases required create repair control model cases creating user preference model 
concluded accumulation cases slowly steadily improve operational capability repair control model cabins 
proposed model formulation building extension method optimization task ill structured problem domains 
adopted task structure analysis method initial model building proposed model extension technique case reasoning 
oped system called cabins implements proposed methodology shown cabins create user preference model repair control model cases guide iterative solution optimization ciently ill structured domains 
experimentally demonstrated increase case base size cabins improved solution quality problem solving ciency benchmark suite job shop schedule optimization problems 
results show accumulation cases enhance competence created models 
job shop scheduling experiments show cabins outperformed simulated annealing method acknowledged optimization method solution quality problem solving ciency 
experiments manifest ectiveness ways exploiting failure cases cabins speed learning intractable optimization problems 
importantly modeling perspective user cab ins de ne domain speci case descriptions easily specializing generic vocabularies task level analysis 
cabins acquire cases user interaction process solution improvement imposing low additional ort user enhancing problem solving capability 
proposed model formulation method combining task level analysis case reasoning provide practical approach solving ill structured optimization problems 
limitation current status research cabins su ers utility problem cabins requires time case matching retrieval increase case base size 
de ne optimal case base size monitoring performance cabins problems domain knowledge ltering techniques useful improving ciency cabins dynamically eliminating redundant incorrect cases case base 
acknowledgment authors indebted dr johan osaka university currently inria france insightful discussions knowledge modeling 
combining case reasoning task speci architectures ieee expert pp chandrasekaran generic tasks building blocks knowledge systems diagnosis routine design examples knowledge engineering review pp chandrasekaran design problem solving task analysis ai magazine pp chandrasekaran johnson smith task structure analysis knowledge modeling communications acm pp clancey heuristic classi cation arti cial intelligence pp dasarathy ed nearest neighbor nn norms nn pattern classi cation techniques ieee computer society press los alamos eshelman mcdermott mole knowledge acquisition tool international journal man machine studies pp french sequencing scheduling mathematics job shop ellis horwood london johnson aragon mcgeoch schevon optimization simulated annealing experimental evaluation part graph partitioning operations research pp smith fox issues design ai schedulers workshop report ai magazine pp klinker sample driven knowledge acquisition tool reporting system marcus ed 
automating knowledge acquisition expert systems ch kluwer academic boston klinker marques mcdermott usable reusable programming constructs knowledge acquisition pp kolodner simpson sycara process case reasoning problem solving proceedings ninth international joint conference arti cial intelligence pp kolodner case reasoning morgan kaufmann san mateo lewis brown case reasoning solution problem redundant engineering large scale manufacturing international journal expert systems pp marcus mcdermott salt knowledge acquisition tool propose revise systems arti cial intelligence pp markovitch scott information filtering selection mechanisms learning systems machine learning pp mcdermott problem solving methods impose structure knowledge proceedings international workshop arti cial intelligence industrial applications pp minton learning ective search control knowledge explanation approach kluwer academic publishers boston miyashita sycara learning control knowledge cases schedule optimization problems proceedings tenth ieee conference arti cial intelligence application pp miyashita sycara improving system performance case iterative optimization knowledge filtering proceedings international joint conference arti cial intelligence published miyashita case approach improve quality ill structured optimization application job shop scheduling ph dissertation osaka university osaka mizoguchi consideration design process knowledge engineering point view journal japanese society arti cial intelligence pp japanese mizoguchi ikeda task ontology task analysis level mediating representation proceedings second japanese knowledge acquisition knowledge systems workshop pp musen fagan combs domain model drive interactive knowledge editing tool international journal man machine studies pp musen automated support building extending expert models machine learning pp newell knowledge level arti cial intelligence pp puerta tu musen multiple method knowledge acquisition shell automatic generation tools knowledge acquisition pp reeves ed modern heuristic techniques combinatorial problems press new york sadeh look ahead techniques micro opportunistic job shop scheduling ph dissertation carnegie mellon university pittsburgh simoudis miller application cbr help desk applications proceedings case reasoning workshop pp stout marcus mcdermott automating recognition di ering problem solving demands international journal man machine studies pp sycara miyashita case acquisition user preferences solution improvement ill structured domains proceedings twelfth national conference arti cial intelligence sycara miyashita learning control knowledge case acquisition user optimization preferences ill structured domain tecuci eds machine learning knowledge acquisition integrated approaches morgan kaufmann san mateo published wielinga schreiber breuker modelling expertise schreiber breuker eds kads principled approach system development ch academic press san diego 
