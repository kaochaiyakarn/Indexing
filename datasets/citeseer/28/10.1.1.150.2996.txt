program understanding panos scott computer information sciences computer information sciences university florida university florida gainesville fl gainesville fl program understanding associated hierarchy abstractions interpretations deduced code 
understanding process parallels bottom programming process maintainers associating small groupings individual instructions higher level interpretations 
understanding process repeated desired level understanding attained 
program understanding context requires identi cation study numerous complex interrelationships induced data ow calling functional dependencies exist software 
environment needed order aid programmer understanding software 
internal program representation ipr plays critical role nature environment 
earlier discussed internal program representation environment conforms requirements stated internal program representation system dependence graph sdg directed labeled multigraph captures control data dependences calling context procedures proposed :10.1.1.50.4405
toolset referred supports number tasks program written subset ansi slicing dicing ripple analysis 
background problems associated program understanding show toolset aid programmer understanding software 
software maintenance expensive demanding ongoing process 
boehm estimated air force system cost instruction develop instruction maintain lifetime 
case may exceptional maintenance costs large embedded system average times development costs 
generally recognized primary reason software maintenance costly modi cation requires rst foremost software understood 
program said understood interpretation program achieved 
proposed models fall categories code driven bottom problem driven top 
strategies employed programmers engaged activity 
support notion di erent maintenance tasks require di erent kinds program understanding di erent processes required 
example consider code segment 

sum 
read 


sum sum 
read 


write sum 
write identify di erent kinds program understanding 
understanding de nitions sum directly ect sum statement statements 

understanding de nitions directly ect statement statements 

understanding value sum statement depends statements 

understanding segment adds number input values reads negative value prints result value read 

understanding author assumes source input values non empty 

understanding segment determines sum scores exam class cs 
example illustrates principal domains program understanding programming application domain 
rst kinds understanding belong programming domain represent extrapolation code intent terms standard programming interpretations problem solving techniques 
fth kind belongs application domain di ers rest represents abstraction code intent terms speci application 
domain lies outside domain program interpretations requires program documentation understanding 
program understanding associated hierarchy abstractions interpretations deduced code 
understanding process parallels bottom programming process maintainers associating small groupings individual instructions higher level interpretations 
understanding process repeated desired level understanding attained 
program understanding context requires identi cation study numerous complex interrelationships induced data ow calling functional dependencies exist software 
program segments just simple example indicate 
example contains localized interactions 
letovsky soloway programmers di culty understanding code non local interactions 
example call procedure clear de nitions sum reach sum statement number 
answer question depends variable sum de ned global variable body procedure procedure invokes directly indirectly returns 
complexity task surprising programmers spend approximately maintenance time looking code 
conclude maintenance quality productivity improved supplying maintainer set proper tools may employ understanding target software 
hand number organizations simply purchasing new tools automatically increase productivity 
needed creation process type understanding uses set tools designed framework process 
tools allow maintainer ask questions program provided precise answers 
order study tool assisted program understanding provide ective environment understanding programs 
integrated existing software maintenance tools provide additional facilities support software engineering activities 
developed environment research issues remain 
example answers understanding tool provides programmer way best improves maintainer understanding program relationships 
task trivial large amount dependencies software 
furthermore maintenance tools fast interactive response time 
maintainers discouraged 
realizing need half years ago embarked task developing tools turning theoretical concepts practical realities support software engineering research center considerable progress goals 
key element system internal program representation ipr system dependence graph sdg 
sdg parse tree representation program 
nodes represent program constructs parameters call sites edges represent various kind dependencies data ow control ow declaration nodes adjacent 
main bene structure represents vast amount information shared numerous software engineering tasks 
applications typically kind information di erent representations 
approach eliminates redundancies 
algorithms sdg underlying structure source language independent 
environment referred supports number tasks program slicing dicing ripple analysis dependency analysis du chain ud chain reaching de nitions calculation host browsing activities 
remainder organized follows 
section presents background slicing dicing ripple analysis 
brie describe internal program representation derived 
tour toolset show major functions tools 
background perspective important concept static slice build sdg 
addition slicing tool provide useful information software maintainer 
slicing provides way decompose large program smaller independent components 
program statement inp subset variables weiser de nes static slice relative slicing criterion set statements predicates ect values variables statement weiser reports experimental results experienced programmers slicing debugging 
weiser programmers remembered slice relevant bug having probably having half cases examined 
debugging programmers view programs ways need conform program textual modular structures 
particular statements slice may scattered code larger program 
experienced programmers routinely slices program 
weiser concluded programmers remembered relevant slices program debugged probably mentally constructing slices debugging 
presumably programmer independently developed slicing method 
novice programmers taught concept slicing avoid learn debugging techniques faster 
debugging process programmers try better understand code nd eliminate bugs programmers nd slices debugging logical tool automatically creates program slices useful debugging code understanding 
suppose testing nd value certain variable incorrectly computed statement obtaining slice signi cantly smaller piece code entire program locate bug 
value variable computed correctly statement may employ method suggested referred dicing computing intersection slices 
bug associated statements set referred fault prone statement set set statements associated slice minus associated slice obtained generating complement slice relative slice large program computes value variable code associated function needed application slice variable extracted program application 
program slicing aids code reuse 
funded national science foundation center industrial florida high technology industry council 
number slices spatial arrangement may hold signi cant information structuring program 
assortment metrics computed actual signi cance investigated 
useful metrics include coverage overlap clustering tightness 
ripple analysis identi es statements ected change statement ripple analysis forward slicing 
program maintainer examine ripple statement help determine possible ects proposed modi cation 
structured walkthroughs code inspection activities easier perform calculating interprocedural reaching de nitions set statements reach statement du chains chain links de nitions may reach ud chains chain links de nition possible uses 
furthermore run time support provided automatic data generation calculated ud du chain information 
dynamic slicing pertinent tools built sdg instrument generated code 
tools run incomplete programs provided compilable 
tools development stage 
entry void main int int call site actual actual actual actual entry void formal int formal int formal formal call site actual actual actual actual call site actual actual actual actual control flow call affect param return control return link parameter parameter transitive sdg corresponding code 
developed object nder uses information sdg group related types data routines 
note tool help code capture objects original designer mind 
internal program representation weiser ow graph representation programs 
ottenstein show intraprocedural slice linear time traversing suitable graph representation program referred program dependence graph pdg 
horwitz introduce algorithms construct interprocedural slices extending program dependence graph supergraph pdg referred system dependence graph sdg :10.1.1.50.4405
extension captures calling context procedures lacking method proposed weiser 
new approach permits precise slices permits slicing program contains calls unknown procedures procedures bodies available provided transitive dependencies discussed known 
pointed internal program representation ipr chosen plays critical role software development environment 
example sdg shown prototype accepts programs written ansi pascal generates parse tree sdg 
tools slicer ripple analyzer dependency analyzer du chains ud chains reaching de nitions calculator de nitions chains span procedure boundaries browser utilize sdg 
grammar proposed consists single main program supports scalar variables assignment statements conditional statements loops support variable declarations 
language consists collection procedures parameters passed value result return statements 
return statements arbitrarily located procedure return values calling procedure 
start int int goto label exit flowgraph control flowgraph post dominator tree extend grammar consequently modify sdg follows variable declarations supported 
second distinguish pass value pass parameters 
notation employed order determine type parameter passing 
pointer operations restricted constitute pass parameters pointer variables permit assignments variables denotes de referencing contents variables 
third number return statements permitted appear procedure 
return statements contain expressions may include variables modeled return statements fourth distinguish functions return values opposed 
fifth constructs handled long jumps 
parse tree basis sdg 
allows slicing precise resolution sdg statement level 
sdg slicing algorithm proposed methods considerable extensions previous works :10.1.1.50.4405
grammar superset grammar targeted :10.1.1.50.4405
second method building sdg di ers respects 
method eliminates need compute gmod sets procedure system construct linkage grammar corresponding subordinate characteristic graphs linkage grammar nonterminals 
third parse tree basis sdg 
allows slicing precise resolution sdg statement level 
improved precision occurs algorithm slicing requires traversal certain edges backwards 
statement asx foo encountered computation slice union slices associated included slice clear variables ect value employing parse tree sdg able avoid shortcoming statement sdgs arrive precise slices precise data dependence analysis depends 
slice relative statement control data dependence control dependence program graph directed graph initial node nodes reached 
nodes correspond basic blocks edges represent transfers control basic blocks 
shows example initial node marked 
dependences blocks arise result control data dependences 
said control dependent exists directed path node path including post dominated post dominate order calculate control dependences control program needed 
control post dominators calculated equivalent calculating dominators reverse control edges control reversed 
algorithm discussed compute control dependences 
show example control corresponding post dominator tree 
du chain statement data dependence order compute data dependences program rst calculate reaching de nitions entire program 
de ne gen kill sets block 
iterative algorithm calculate reaching de nitions 
node data ow dependent node node de nes variable em case routine invocation 
call site encountered annotated introducing actual actual nodes 
actual nodes considered unknown nodes time called procedure solved 
assignment actual nodes depends corresponding formal nodes 
speci cally formal node node consider corresponding actual node de nition 
node actual node considered de nition kill set de ned empty 
formal node node gen kill sets empty de nition 
encounter call site suspend solution current procedure descend called procedure calculation reaching de nitions begun 
procedure repeated procedure calls procedure 
point data ow dependences encountered procedure calculated gen kill sets known 
section brie environment tools implemented 
accepts source program written subset ansi pascal input produces sdg described earlier 
sdg subsequently available tools 
presents simple graphical user interface developed window library routines facilitates user interaction system 
brief description major components tools discussed earlier follows 
noted yacc components built scratch 
ud chain statement 
yacc parser generator yacc project generate parser fed ansi source program produces parse tree output 
step produces nodes control ow edges skeletal structure rest system dependence graph built 
terminal node annotated corresponding location source line column number 
allows achieve mapping source le sdg 
dependency generator dependency generator takes parse tree generated yacc input produces parse tree system dependence graph 
illustrates statement sdg produced dependency generator program shown 
tools tools reside discussed shortly 
graphical interface tool invoked user window shown les subdirectory displayed 
subdirectory changed changing path eld screen 
le contains desired program selected clicking subsequently opened open button 
tools invoked user request sdg corresponding le opened built accomplished build sdg button 
point user position cursor target statement variable wishes inspect invoke appropriate module slicer ripple analyzer dependence analyzer du chain mapping source code graphical display sdg straightforward 
user selects variable statement action performed slice line column illustrate statement sdg opposed parse tree sake simplicity 
clear button employed clear highlighted text quit button exit 
buttons discussed tool development process 
additionally object finder button shown 
determined 
sdg searched match line column 
match variable highlighted corresponding node remembered 
user subsequently chooses action node remembered target node 
results action re ected display traversing sdg highlighting source corresponding nodes marked slice 
slicer module calculates slices system dependence graph 
screen dump shown illustrates slice program relative statement highlighting statements belong slice 
context maintainer may intraprocedural slice button wishes limit view scope function 
furthermore buttons related slicing provided 
ascend tool allows maintainer limit slice function selected functions call selected function 
operation corresponds slicing phase 
correspondingly descend tool allows maintainer limit slice function selected functions called selected function 
operation corresponds slicing phase 
du chain screen dumps displayed 
illustrate precision identi cation position uses de nition variables statement procedure boundaries crossed recursive procedures 
statement selected requested determination uses de nition notice predicate statement evaluates false predicate 
furthermore predicate evaluates false variable statement 
execution path passes statement statement statement captured 
similarly illustrates de nitions variable reach statement 
case reaches statement declaration ud anomaly detected statement containing de nition depending course data 
calls button invokes tool displays calling sequence addition user query system calls calls buttons 
speci cally maintainer selects cursor function sample 
case functions call function sample identi ed functions invoked function sample identi ed 
dependency button invokes data ow dependence analyzer 
assumed statement selected described earlier output indicates line number variable name type variable function variable may ect value selected variable visible 
show de nitions selection causes statements identi ed maintainer speci ed variable de ned 
wish acknowledge steve implementation toolset 
serc industrial 
personal communication 
aho sethi ullman 
compilers principles techniques tools 
addison wesley reading mass boehm 
high cost software practical strategies developing large software systems horowitz ed 
addison wesley reading mass basili mills 
understanding documenting programs 
ieee transactions software engineering se 
brooks 
theory comprehension computer programs 
int man machine studies 
ferrante ottenstein warren 
program dependence graph optimization 
acm toplas 
horwitz prins reps integrating non interfering versions programs 
proc 
th acm symposium programming languages 
horwitz reps binkley :10.1.1.50.4405
interprocedural slicing dependence graphs 
acm toplas january 
letovsky soloway 
strategies documenting delocalized plans 
proc 
conf 
software maintenance pages 
roy 
program dependence analysis 
ieee conf 
software maintenance 

system dependence graphs parse trees software maintenance 
journal information sciences appear 
johnson 
new approach nding objects programs 
technical report cis edu cis tech reports tr tr ps florida dept cis 
lyle weiser 
automatic program bug location program slicing 
proc 
nd international conference computers applications 
ottenstein ottenstein 
program dependence graph software 
acm sigplan notices 

knowledge program debugging systems 
ieee software 

structured program analysis applied software maintenance 
proc 
conf 
software maintenance pages 
weiser 
programmers slices debugging 
cacm 
weiser 
program slicing 
ieee transactions software engineering 
wilde 
lecture series software development environments 
october 
