patternhunter faster sensitive homology search bin ma john tromp computer science department university ontario london canada bioinformatics solutions columbia street west waterloo ont canada computer science department university waterloo ont canada bioinformatics lab computer science department university california santa barbara ca usa motivation genomics proteomics studies routinely depend homology searches strategy nding short seed matches extended 
exploding genomic data growth presents dilemma dna homology search techniques increasing seed size decreases sensitivity decreasing seed size slows computation 
results new homology search algorithm patternhunter uses novel seed model increased sensitivity new hit processing techniques signi cantly increased speed 
blast levels sensitivity patternhunter able nd homologies sequences large human chromosomes mere hours desktop 
availability patternhunter available www com commercial package 
runs platforms support java 
contact mli cs ucsb edu interested faster sensitive methods nding approximate repeats homologies dna sequence dna sequences performed popular blastn altschul program 
particular application task comparative genomics large genomes chromosomes human international human genome sequencing consortium need compared 
programs developed task 
include fasta lipman pearson sim huang miller blast family altschul gish altschul zhang madden sen sei states delcher burkhardt kurtz 
smith waterman alignment compares bases bases clearly slow 
lines approach lead improvements 
rst exempli ed blast routinely thousands scientists 
approach nds short exact seed matches hits extended longer alignments 
comparing long sequences fasta sim blastn bl seq wu blast psi blast run slow need large amounts memory 
somewhat faster uses memory programs currently limited ungapped alignments 
runs quite ciently default gap scores large seed length turns worse output quality doesn scale huge sequences 
line approach exempli ed uses su trees 
su trees su er problems meant deal precise matches limited comparison highly similar sequences delcher burkhardt kurtz 
awkward handling mismatches 
second problem su trees intrinsic large space requirement 
introduce novel seeding schemes methods implemented program patternhunter 
modern desktop running time ranges seconds genomes minutes arabidopsis chromosomes hours human chromosomes modest memory provably higher sensitivity default blastn 
selecting seeds get expect dilemma blast type search large seeds lose distant homologies small ones creates random hits slow computation 
new idea allows higher probability hit homologous region having somewhat lower expected number random hits 
blast looks matches default blastn consecutive letters seeds 
propose non consecutive letters seeds 
call relative positions letters model andk weight 
seemingly simple change surprisingly large ect sensitivity 
appropriately chosen model signi cantly higher probability having hit homologous region compared blast consecutive seed model having lower expected number hits example region length identity blast consecutive weight model probability having hit range nonconsecutive model weight probability getting hit see 
hand expected number hits region blast consecutive model nonconsecutive model expects hits 
length model shift places length window length model places reason increased sensitivity events having match di erent positions independent spaced models 
model shifted copy share position base mismatch shared positions matches fail corresponding matching events far independent 
independent events better pooling success probabilities 
generally fewer bases shared amodel shifted copies higher sensitivity clearly measure consecutive models worst shift shares bases 
convenience denote model string positions represent required matches don cares 
example model seed match 
blast uses models form blast matches bytes containing bases simultaneously extends hits left right 
ne default length match necessarily contains match bytes smaller seeds 
suppose substring query sequence similar length substring target sequence 
string indicating matches 
say covers binary string length statistical purposes hits separately blast program ignores hits overlapping recorded 

hit occurs model covers substring 
evaluate model compute probability generating hit xed length region similarity dynamic programming works ne model size quickly prohibitive time space 
somewhat arbitrarily chose region length practice ungapped homologies typically size bases 
note shorter region length longer spaced model su ers having fewer places weight sensitive model sensitivity similarity 
figures compare nonconsecutive model blast consecutive models 
model heuristically discovered dynamic programming algorithm slightly suboptimal sensitivity experiments weight 
new patternhunter uses optimal model support user de ned randomly generated neighbourhood models 
di erent models allows patternhunter di erent outputs di erent runs increasing sensitivity 
neighbourhood models multiple similar models simultaneously increase sensitivity 
similarity percentage shown axis percentage regions acquiring hit plotted axis sensitivity similarity level 
recalling earlier discussion independence near optimality models witnessed fact shift shares bases 
current version blast triggers extension disjoint hits diagonal certain distance altschul 
increased selectivity sets loss sensitivity smaller weight model generate fewer extensions equally sensitive hit model larger weight 
done spaced models advantage hits longer required disjoint order gain lot sensitivity 
compares sensitivity double hit spaced weight model single hit weight consecutive models 
uses default seed size compares sensitivity spaced weight model 
expected number hits region easily calculated lemma 
lemma expected number hits weight length model length region similarity sensitivity sensitivity similarity similarity hit performance weight spaced model versus weight consecutive models coordinates logarithmic scale 
sensitivity hit similarity hit performance weight spaced model versus single hit weight consecutive models 
proof expected number hits sum possible positions tting model region speci matches observations figures show steeper curve spaced seed model smaller hit probability low similarity regions respect closest consecutive model terms sensitivity 
fact figures show spaced model weight replace consecutive weight model gaining sensitivity similarity spaced model replace weight consecutive model gaining sensitivity 
note increasing weight reduces number random hits approximately factor 
brought attention re hit performance weight consecutive model versus weight nonconsecutive model lated conceptually di erent approach applied ungapped homology search buhler califano rigoutsos 
buhler applies random hashing projection technique known locally sensitive hashing lsh indyk follows 
hundreds iterations newly chosen random hash function applied region xed size regions mapping value fully compared 
similar overlapping regions diagonal merged ungapped alignments 
blast long ungapped alignment regions similar cover length 
earlier similar idea applied flash califano rigoutsos shorter regions 
papers focused covering homology entirely hits doing hit extension blast style 
retrospectively carefully chosen deterministic spaced seed model maximizes chance hsp contain seed minimizing random hits 
experiments show sen sei states limited ungapped alignment default size seed faster lsh 
patternhunter compare genomes desktop implemented patternhunter java spaced seed model various algorithmic improvements advanced data structures 
hit generation patternhunter uses method generating hits similar 
position sequence compute index tting model particular position 
index weight bits long bits base 
lookup big table gives rst position sequence model matches 
gives rst hit 
subsequent hits table position gives position model matches 
table requires int bytes base 
number hits index large relative cost computing index negligible 
hit look diagonal hashtable hit table nd rightmost matched position diagonal 
position right hit ignore hit part match 
double hit option chosen absence hit diagonal merely record new 
hit extension extend hit greedy fashion left right stopping score drops certain amount 
resulting segment pair score certain minimum ignore segment pair hsp 
position comparison reached score stored hit table equivalent hits hsp recognized redundant 
gapping extension nd best way extend hsp left gaps try candidates diagonal sorted set hsp adding set new local hit generation 
variation red black tree implement set sorted diagonal 
inserted tree optimal gapped alignment left retired tree newly generated far right endpoint 
retired alignments put priority queue scores 
local hit generation nds triple hits small model limited length region left hsp stores tree certain minimum length 
note mega blast computes indices ciently packing bases byte 
candidate hsp gap newly hsp compute gapping cost sum gap open plus gap extension penalties plus cost adjusting hsp size perfect data best hsp link chosen compute optimal partial alignment score 
overlapping alignments reported 
implementation patternhunter implemented java 
orts write simple clean short code 
executable size patternhunter kb size blast ering large fraction functionality 
input sequences length model weight patternhunter uses megabytes hashtable entries bytes array occurrence indices 
bytes store inputs variable amount data structures patternhunter uses bytes memory addition java virtual machine memory footprint range half mbyte dozen mbytes 
model weight small constant depending options patternhunter uses 
default amounts mbytes 
typically smaller 
conclude reason theoretical estimation exactly re ected java virtual machine garbage collections free memory heap 
experiments larger human chromosomes demonstrated estimation memory accurate 
allows patternhunter complete chromosomes human genome modern desktop computer gigabytes memory 
results report test runs patternhunter comparison programs 
blast family especially newly improved blastn industry standard widely recognized sensitivity blastn speed blastn limit comparison programs 
experiments performed mhz pentium iii pc gbyte memory 
table compares patternhunter latest versions blastn downloaded ncbi website july th 
programs run ltering bl seq option ensure identical input actual matching engines 
table compares patternhunter note sen sei currently available gapped alignments 
may suspect patternhunter sacri ces quality 
figures show opposite 
seed weight mb misses high scoring alignments 
parameters patternhunter outputs better results blastn times faster uses tenth memory 
notice quick growth blastn time space requirements indicating poor scalability 
mb default ne gap costs allowed continue comparison running memory vastly inferior output quality compared patternhunter ph uses fth time quarter space 
patternhunter compare human genome reads mouse genome total base pairs 
ph weight nishes pentium iii cpu days 
ph weight cpu days 
results available genome cse ucsc edu designed high speed highly similar sequences blastn sensitivity patternhunter simultaneously exceeds blastn sensitivity speed long sequences memory 
written java runs genome 
alignment score ph ph mb mb alignment rank input coli 
run times shown 
score plotted function rank alignment axes logarithmic 
mb misses alignments score 
mb seed size times slower times memory ph indicating missed alignments mb mainly due seed size 
acknowledgments grateful zheng zhang comments saved various pitfalls 
brought buhler alignment score ph blastn alignment rank input coli 
run times shown 
patternhunter produces better quality output blastn running times faster 
indyk attention 
larry miller working related projects david lipman comments bringing califano rigoutsos attention huang comments dan brown jim kent letting patternhunter mouse human genome comparison david states providing information referees useful suggestions 
bm supported nserc research ogp 
jt supported 
ml supported part nserc research ogp nserc fellowship 
bm ml done university 
altschul altschul gish miller myers lipman basic local alignment search tool 
mol 
biol 
international human genome sequencing consortium international human genome sequencing consortium initial sequencing analysis human genome 
nature 
sequence human genome 
science 
gish gish wu blast 
website blast wustl edu 
madden madden blast sequences new tool comparing protein nucleotide sequences 

lett 

mb filter ph huang miller huang miller time cient linear space local similarity algorithm 
advances applied mathematics 
alignment score alignment rank input chr chr 
run times shown 
patternhunter ph sixth time quarter memory 
programs non ne gap costs match mismatch avoid running memory 
comparison show curve default low complexity ltering decreases runtime seconds 
califano rigoutsos califano rigoutsos flash fast look algorithm string homology 
tech 
rep ibm watson research center 
indyk indyk motwani approximate nearest neighbors removing curse dimensionality 
proc 
th ann acm symp 
theory comput dallas tx 
buhler buhler cient large scale sequence comparison locality sensitive hashing 
bioinformatics 
altschul altschul madden scha er zhang zhang miller lipman 
gapped blast psi blast new generation protein database search programs 
nucleic acids research 
zhang zhang schwartz wagner miller greedy algorithm aligning dna sequences 
comp 
biol 
states states website wustl edu software lipman pearson lipman pearson rapid sensitive protein similarity searches 
science 
delcher delcher kasif peterson white salzberg alignment genomes 
nucleic acids research 
burkhardt burkhardt 
rivals ferragina gram database searching su array 
rd ann 
international conference computational molecular biology lyon april 
kurtz kurtz fast computation maximal repeats complete genomes 
bioinformatics 
seq size seq size ph ph mb blastn pneumoniae coli chr chr sapiens chr sapiens chr performance comparison speci ed match mismatch gap open gap extension 
ph denotes patternhunter seed weight ph denotes double hit model sensitivity similar blast single hit size seed mb denotes default seed size default ne gap penalties 
blastn bl seq uses default seed size 
table entries ph ph mb blastn indicate time seconds space megabytes means memory segmentation fault 
seq size seq size ph ph coli chr chr patternhunter seed weights hit model vs weight seed 
ungapped alignments 
patternhunter weight spaced seed higher single hit sensitivity 

