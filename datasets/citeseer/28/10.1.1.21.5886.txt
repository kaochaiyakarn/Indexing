active disks programming model algorithms evaluation acharya joel saltz dept computer science dept computer science dept computer science university california university maryland university maryland santa barbara college park college park application technology trends indicate pro table feasible move computation closer data processes 
evaluate active disk architectures integrate signi cant processing power memory disk drive allow application speci code downloaded executed data read written disk 
key idea bulk processing processors host processor primarily coordination scheduling combination results individual disks 
program active disks propose stream programming model allows disklets executed ciently safely 
simulation results suite algorithms application domains commercial data warehouses image processing satellite data processing indicate algorithms active disks outperform conventional disk architectures 
application technology trends indicate pro table feasible move data intensive computation closer data processes 
simplify operating system support required disk processors 
second partitioned versions suite algorithms process datasets interest 
algorithms sql select sql group external sort datacube operation decision support image convolution generation earth images raw satellite 
rst algorithms relational databases remaining image databases satellite data repositories respectively 
application started known algorithms literature tried keep modi cations minimum :10.1.1.144.1766:10.1.1.141.2971:10.1.1.108.3178
third compare performance partitioned algorithms running active disks performance original algorithms running conventional disks 
comparisons con gurations corresponding current technology economics corresponding available decade 
addition evaluate sensitivity results large variations interconnect bandwidth host processor speed 
experiments help identify bottlenecks 
sql group group operation allows users compute dimensional vector aggregates indexed list attributes 
partitions relation disjoint sets tuples value index attribute computes aggregate value set tuples 
sql standard provides aggregation functions min max sum avg count 
aggregation functions need small amount storage 
graefe shows hashing techniques perform sort nested loop techniques implementing group bys :10.1.1.108.3178
accordingly algorithm conventional disk algorithm :10.1.1.108.3178
active disk algorithm performs group steps 
downloaded code performs local group bys long number aggregates computed ts disklet integer kernel integer temp bu er buffer function init integer filter integer copy filter kernel function get buffer buffer perform convolution buffer kernel gg buffer send buffer integer filter ff gg open image file disk fname disks fd open fname fd create stream disk :10.1.1.144.1766
output disklet buffer sname stream str stream open str sname read install disklet install filter invoke disklet file input input stream spec descriptor offset length buffer run fd streams streams terminated 
partitions relation disjoint sets tuples value index attribute computes aggregate value set tuples 
sql standard provides aggregation functions min max sum avg count 
aggregation functions need small amount storage 
graefe shows hashing techniques perform sort nested loop techniques implementing group bys :10.1.1.108.3178
accordingly algorithm conventional disk algorithm :10.1.1.108.3178
active disk algorithm performs group steps 
downloaded code performs local group bys long number aggregates computed ts disklet integer kernel integer temp bu er buffer function init integer filter integer copy filter kernel function get buffer buffer perform convolution buffer kernel gg buffer send buffer integer filter ff gg open image file disk fname disks fd open fname fd create stream disk :10.1.1.144.1766
output disklet buffer sname stream str stream open str sname read install disklet install filter invoke disklet file input input stream spec descriptor offset length buffer run fd streams streams terminated 
str select blocks returns stream new data str select streams null buf buf close fd close stream stream disk resident code host resident code pseudo code partitioned version convolution ltering 
aggregation functions need small amount storage 
graefe shows hashing techniques perform sort nested loop techniques implementing group bys :10.1.1.108.3178
accordingly algorithm conventional disk algorithm :10.1.1.108.3178
active disk algorithm performs group steps 
downloaded code performs local group bys long number aggregates computed ts disklet integer kernel integer temp bu er buffer function init integer filter integer copy filter kernel function get buffer buffer perform convolution buffer kernel gg buffer send buffer integer filter ff gg open image file disk fname disks fd open fname fd create stream disk :10.1.1.144.1766
output disklet buffer sname stream str stream open str sname read install disklet install filter invoke disklet file input input stream spec descriptor offset length buffer run fd streams streams terminated 
str select blocks returns stream new data str select streams null buf buf close fd close stream stream disk resident code host resident code pseudo code partitioned version convolution ltering 
lter example detects horizontal lines images 
disk memory 
lter example detects horizontal lines images 
disk memory 
runs space ships partial results host disk memory 
host accumulates partial results forwarded disklets 
external sort starting point versions external sort :10.1.1.141.2971
long history external sorting research database community currently holds record fastest external sort indy minutesort record 
pipelined version pass single node sort conventional disk version :10.1.1.141.2971
rst phase uses reader thread read data move tuple pointers buckets writer thread sort bucket partial radix sort write bucket 
second phase uses threads merge sorted partitions created rst phase 
runs space ships partial results host disk memory 
host accumulates partial results forwarded disklets 
external sort starting point versions external sort :10.1.1.141.2971
long history external sorting research database community currently holds record fastest external sort indy minutesort record 
pipelined version pass single node sort conventional disk version :10.1.1.141.2971
rst phase uses reader thread read data move tuple pointers buckets writer thread sort bucket partial radix sort write bucket 
second phase uses threads merge sorted partitions created rst phase 
reader reads block sorted partition sets merge bu ers merger selects lowest valued key current block partition copies write bu ers writer writes bu ers disk 
making passes keys radix size bits plus cleanup 
right hand side shows pipelines 
pipeline data placed box bottom read disk 
gates 
ect datacube computes group bys possible combinations list attributes 
cient methods computing datacube :10.1.1.144.1766
algorithms called pipehash conventional disk algorithm 
pipehash represents datacube lattice related group bys 
directed edge connects group group generated exactly attribute 
edge associated weight re ects estimated size group 
edge associated weight re ects estimated size group 
pipehash determines set group bys perform computing minimum spanning tree lattice see example 
schedules group bys sequence pipelines group bys pipeline computed part single scan disk resident data 
nal results pipeline stored back disk input pipelines see examples pipelines 
individual pipehash uses hashing technique :10.1.1.108.3178
conventional disk algorithms suite implementation algorithm uses striping large requests aggressive prefetching 
active disk algorithm uses separate disklet pipeline 
disklet creates hash tables component group bys scratch space 
hash tables di erent group bys allocated memory proportion estimated size group bys 
datasets bytes 
group smaller dataset distinct values larger dataset distinct values 
select assumed selectivity 
sort datasets byte tuples byte uniformly distributed keys 
created datasets description :10.1.1.141.2971
smaller dataset gb tuples larger dataset gb tuples 
datacube datasets byte tuples 
smaller dataset gb tuples larger dataset gb tuples 
tuple byte attributes 
shows large con gurations active disk architectures outperform conventional disk architectures reasonable relationships host processor disk processor ghz host processor times faster mhz disk processor 
note faster host processor allows sort improve performance disk active disk con guration 
indicates large con gurations host processor bottleneck algorithms sort redistribute disk resident datasets 
discussion related fact able easily convert algorithms stream programming model come surprise 
volume data processed cost fetching data disk optimizing intensive algorithms matter setting cient pipelines stage performs processing data read disk passes stage :10.1.1.141.2971
sql standard supports simpler version stream model proposed cursor interface 
interface allows client application ship query server receive results query tuple time 
model proposed provides greater functionality sql cursors downloaded code restricted relational queries multiple disklets downloaded act concert bu er size adjusted meet needs application 
active disk architecture proposed assumes disks communicate host communication disks happens host 
proceedings fourth acm workshop parallel distributed systems may 
agarwal 
super scalar sort algorithm risc processors 
proceedings acm sigmod international conference management data pages 
agarwal agrawal deshpande gupta naughton ramakrishnan sarawagi :10.1.1.144.1766
computation multidimensional aggregates 
proceedings nd international conference large databases pages 
dusseau dusseau culler hellerstein patterson :10.1.1.141.2971
highperformance sorting networks workstations 
proceedings acm sigmod international conference management data pages 
agarwal agrawal deshpande gupta naughton ramakrishnan sarawagi :10.1.1.144.1766
computation multidimensional aggregates 
proceedings nd international conference large databases pages 
dusseau dusseau culler hellerstein patterson :10.1.1.141.2971
highperformance sorting networks workstations 
proceedings acm sigmod international conference management data tucson az 
golding merchant shriver wilkes 
attribute managed storage achieve qos 
proceedings acm international conference modeling computer systems sigmetrics 
gene feldman 
source code ocean data processing system 
group nasa goddard 
graefe :10.1.1.108.3178
query evaluation techniques large databases 
acm computing surveys jun 
gray 
challenges building data stores 
