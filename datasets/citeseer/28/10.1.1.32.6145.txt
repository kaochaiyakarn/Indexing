system design issues internet middleware services deductions large client trace steven gribble sc 
university british columbia dissertation submitted partial satisfaction requirements degree master science computer science graduate division university california berkeley committee charge professor eric brewer chair professor randy katz dissertation steven gribble approved chair date date university california berkeley system design issues internet middleware services deductions large client trace copyright steven gribble system design issues internet middleware services deductions large client trace steven gribble master science computer science university california berkeley professor eric brewer chair thesis analysis large client side web trace gathered home ip service university california berkeley 
specifically demonstrate heterogeneity web clients existence strong predictable cycle clients web activity clients requests small time scales large time scales implying lack self similarity presence locality clients requests strong function client population size high latency services encounter delivering data clients implying services need maintain large number simultaneously active requests 
system design issues internet middleware services drawn trace analysis implementation experience transend transformation proxy 
describe generations trace playback tool allowed replay home ip traces back prototype middleware service sake stress testing 
iii life come life 
gif distribution visible roughly bytes bytes 
hypothesize byte plateau caused small bullet images icons web pages byte plateau represents gif content pictures diagrams advertisements anomaly large spike html distribution roughly kilobytes 
investigation revealed spike caused extremely popular netscape net search page 
locality cache size mb hit rate pop size hit rate vs cache size number different user population sizes 
near universal assumption systems locality typical mechanism take advantage locality caching :10.1.1.21.1584
effectiveness caching depends number factors including size user population cache serves size cache 
measure effectiveness infrastructure caching opposed client side server side caching respect captured home ip population implemented cache simulator played segments traces user population size cache size mb hit rate vs user population size number cache sizes 
caches 
filtered requests set client ip addresses order simulate client populations different sizes 
