query execution techniques caching expensive methods joseph hellerstein jeffrey naughton university wisconsin department computer sciences dayton st madison wi cs berkeley edu naughton cs wisc edu 
object relational object oriented dbmss allow users invoke time consuming expensive methods queries 
queries containing expensive methods run data duplicate values time wasted redundantly computing methods value 
problem studied context programming languages memoization standard solution 
database literature sorting proposed deal problem 
compare third solution variant unary hybrid hashing call hybrid cache 
wasteful invoke thumbnail image 
cache result thumbnail time called image 
subsequent time thumbnail called image cached result re reading re processing image 
problem redundant method invocation arise queries method invoked duplicate free input key relation 
optimization techniques predicate migration hs postpone expensive predicate methods joins performed :10.1.1.20.9548
join operation produces duplicate copies input values possible duplicate values input 
result intelligent optimization queries expensive predicates motivates intelligent execution techniques queries 
explores query execution techniques method caching efficiently 
considering algorithms caching single expensive method relations arbitrary size 
similarities sorting hashing studied previously detail particularly joins results highlight tradeoffs noted 
techniques accelerate queries multiple expensive methods 
leads number questions relating challenge integrating method caching query optimization 
focuses query execution techniques outline directions research query optimization caches 
related increasingly large body addressed problem query optimization face expensive predicates hs hel :10.1.1.20.9548
papers orthogonal treat optimization issues assume caching strategies efficient non existent 
kemper moerkotte steinbrunn proposed bypass techniques optimizing executing disjunctive queries 
alleviates problems redundant computation disjunctive queries solution problem redundant method invocation general example avoid duplicate method invocation simple thumbnail example 
focuses techniques caching recovering method results fly computing query 
kemper moerkotte steinbrunn proposed bypass techniques optimizing executing disjunctive queries 
alleviates problems redundant computation disjunctive queries solution problem redundant method invocation general example avoid duplicate method invocation simple thumbnail example 
focuses techniques caching recovering method results fly computing query 
large body orthogonal techniques provide persistent caches store method results relations reused multiple queries period time 
graefe provides annotated bibliography ideas section query processing survey gra :10.1.1.108.3178
persistent caches akin materialized views gm function indices ms ls point view single query represent precomputed methods caches generated fly 
persistent caches way analogous techniques avoiding recomputation common relational subexpressions sel 
order generate persistent cache may compute method input relation duplicate values scenario techniques speed generation persistent cache 
conversely persistent cache available method may able circumvent techniques 
order generate persistent cache may compute method input relation duplicate values scenario techniques speed generation persistent cache 
conversely persistent cache available method may able circumvent techniques 
mixture techniques possible incomplete persistent cache alongside techniques 
orthogonal persistent caching common subexpressions approaches coexist profitably techniques 
correlated sql subqueries considered form expensive method hs :10.1.1.20.9548
demonstrated magic sets rewriting speed subqueries non recursive sql 
magic decorrelation avoids redundant computation computing duplicate free set input values correlated subquery feeding distinct input values subquery joining result subquery computations outer query block 
technique allows input handled set oriented fashion opposed standard tuple time invocation correlated subquery 
note subqueries user defined methods necessarily invoked tuple time 
note method semantics time cache functions indefinitely results independent time 
sql create function command allows methods declared variant variant variant default iso ill 
variant function may return different result input different times function variant may cached indefinitely 
typical data analysis manipulation methods registered variant sql system cached 
refine categories proposed postgres defining classes methods results cacheable natural periods length transaction query hel :10.1.1.20.9548
environment performance study performance study run development version illustra publicly available version 
illustra run buffers settings produce traces query plans execution times 
machine sun sparcstation processors megabytes ram running sunos release 
disk hold databases illustra binaries third paging 
unfortunately technique breaks faced values hash table quickly large operating system forced page disk 
hash accesses definition low locality distinct input values operating system paging schemes manage memory poorly 
demonstrated dramatically section 
current input tuple aa abc hash hybrid cache hash partitions output buffers hash table partition hash staging phase hybrid cache 
sorting system approach hs pointed sql subqueries form expensive method :10.1.1.20.9548
authors pioneering system optimization sac proposed scheme avoid redundant computation correlated subqueries identical inputs idea directly applicable expensive methods general 
noted referenced relation ordered referenced column re evaluation subquery conditional depending test current referenced value previous candidate tuple 
previous evaluation result 
cases pay sort referenced relation referenced column order avoid re evaluating subqueries unnecessarily sac 
hybrid hash join modified partition building relation grown dynamically hybrid cache 
addresses second problem solve problem duplicate tuples building relation need inserted hashtable memory filled 
note inputs common primary key joins semi joins optimizations hybrid cache may frequently useful hybrid hash join 
general somewhat complex solutions problems hybrid hash join proposed 
sort vs hash revisited analyzing hashing sorting graefe presents interesting result hash algorithms typically dual sorting algorithms perform comparably gra :10.1.1.108.3178
observe section assumption apply problem caching 
highlights advantage hybrid cache caching exposes important distinction hashing sorting noted previously 
graefe distinguishes hashing sorting observing hashing utilizes amount main memory proportional number tuples output sorting utilizes amount proportional number tuples input larger 
analogous significantly different earlier observation hashing value sorting tuple 
additional advantage hashing sorting resulting fact sorts tuples hashes input values 
mentioned predicate methods output values small 
result hybrid cache better choice sorting expensive predicate methods 
expensive methods select order group lists choice hybrid cache sorting size distinct input values method outputs compared expected memory needed complete input tuples duplicate input values 
decision fairly easily usual cost formulas non recursive sorting hashing see instance graefe query processing survey gra :10.1.1.108.3178
open issues caching multiple methods previous sections detailed analysis performance study caching results single method 
advertisements thumbnail sort tuple cache similar hybrid cache select select thumbnail product image advertisements ad text similar optic query expensive methods 
advertisements percentage hybrid cache quantize sort tuple cache select select name advertisements quantize product image red query nested expensive methods 
system uses appropriate choice hybrid cache sorting expensive method tuned sorts queries possible today extensible systems 
acmsigmod international conference management data pages boston june 
gm mumick 
maintenance materialized views problems techniques applications 
ieee data engineering bulletin special issue materialized views data warehousing june 
gra graefe :10.1.1.108.3178
query evaluation techniques large databases 
acm computing surveys june 
hel joseph hellerstein :10.1.1.20.9548
predicate migration optimizing queries expensive predicates 
ieee data engineering bulletin special issue materialized views data warehousing june 
gra graefe :10.1.1.108.3178
query evaluation techniques large databases 
acm computing surveys june 
hel joseph hellerstein :10.1.1.20.9548
predicate migration optimizing queries expensive predicates 
technical report sequoia university california berkeley december 
hel joseph hellerstein 
practical predicate placement 
hot wen chi hou ozsoyoglu 
statistical estimators relational algebra expressions 
proc 
th acm sigact sigmod sigart symposium principles database systems pages austin march 
hs joseph hellerstein michael stonebraker :10.1.1.20.9548
predicate migration optimizing queries expensive predicates 
proc 
acm sigmod international conference management data pages washington may 
ill illustra information technologies illustra user guide illustra server release june 
