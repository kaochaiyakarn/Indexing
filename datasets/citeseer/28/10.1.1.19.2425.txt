efficient complex query support multiversion xml documents shu yao chien vassilis tsotras carlo zaniolo zhang department computer science university california los angeles ca zaniolo cs ucla edu computer science department university california riverside ca tsotras cs ucr edu 
managing multiple versions xml documents represents critical requirement applications 
interest supporting complex queries xml data regular path expressions structural projections diff queries 
examine problem supporting efficiently complex queries xml documents 
approach relies scheme durable node numbers preserve order xml tree nodes invariant respect updates 
document various complex queries reduced combinations partial version retrieval queries 
differences mentioned fast disappearing support complex queries xml documents critical 
demonstrated amount current research topic emergence powerful xml query languages 
particularly challenging problem supporting efficiently path expression queries doc chapter 
query specifies figures immediate elements chapters transitive sub elements figures sub sections 
various techniques proposed support regular path expressions literature :10.1.1.21.8854:10.1.1.33.1258:10.1.1.1.2777
techniques durable numbering schemes preserve logical document structure presence updates 
multiversion documents support complex queries user selected version 
furthermore need support difference queries versions queries evolution documents selected parts lineage queries 
proposed schemes efficient storage retrieval multiversion documents showed provide significant improvements respect traditional schemes rcs sccs 
enhance version retrieval efficiency places document elements disk pages clustering mechanism called ubcc usefulness copy control 
efficient complex query support multiversion xml documents ubcc mechanism achieves better version clustering copying elements live versions 
variation ubcc versioning scheme 
versioning schemes proposed effective supporting simple queries handle complex queries path expression queries 
complex queries outlined spar scheme adapts durable node numbers multiversion environment :10.1.1.21.8854
furthermore spar uses timestamping preserve logical structure document represent history evolution 
expand properties spar scheme investigate efficient physical realizations 
different storage indexing strategies examined optimize spar implementation 
study builds observation evaluating complex version queries mainly depends efficiency evaluating basic type query partial version retrieval query 
query retrieves specific segment individual version version 
retrieving segment single versioned xml document efficient target elements clustered secondary store logical order case multiversion document 
multiversion document segment version may elements physically scattered different pages due version updates 
retrieving small segment require reading lot unnecessary data 
ubcc effective supporting full version retrieval queries complex queries content history combined call indexing techniques multiversion tree multiversion tree :10.1.1.74.3527:10.1.1.49.4094
investigate approaches scheme single multiversion tree scheme ubcc multiversion tree scheme ubcc multiversion tree 
approaches ubcc mechanism main storage scheme document elements 
additional indices secondary indices partial version retrievals efficiently supported 
approach lets multiversion tree organize document elements disk pages time uses index partial retrievals 
document evolves document objects valid version dispersed various disk pages 
page may contain document objects requested version pages accessed reconstruct version 
solve problems introduced edit versioning scheme separates actual document data edit script ii uses usefulness clustering scheme ubcc page management 
script small easily accessed 
usefulness clustering similar technique transaction time databases cluster temporal data outlined :10.1.1.49.4094
usefulness clustering consider actual document objects organization disk pages 
simplicity assume changes document versions object additions deletions 
objects added document stored sequentially pages 
object deletions physical logical objects remain pages recorded marked deleted 
example uses edit script determine useful pages version facilitates object 
ubcc clustering effective full version retrieval queries efficient complex queries path expression queries 
path expression queries need maintain logical document order ubcc 
path expression queries path expression query described regular expression document tree 
example query find figures chapter document supported xml query languages special path expression notation chapter :10.1.1.37.8206:10.1.1.37.8206
figures may subtree rooted chapter node document 
answer queries efficiently single version environment fully traversing document subtrees method needed quickly identify ancestor descendant relationships document elements 
proposes numbering scheme document elements numbers assigned elements remain unchanged elements added deleted document :10.1.1.21.8854
achieved sorting nodes pre order traversal leaving space room insertions 
path expression queries path expression query described regular expression document tree 
example query find figures chapter document supported xml query languages special path expression notation chapter :10.1.1.37.8206:10.1.1.37.8206
figures may subtree rooted chapter node document 
answer queries efficiently single version environment fully traversing document subtrees method needed quickly identify ancestor descendant relationships document elements 
proposes numbering scheme document elements numbers assigned elements remain unchanged elements added deleted document :10.1.1.21.8854
achieved sorting nodes pre order traversal leaving space room insertions 
durable numbering scheme advantageous automatically maintains logical document tree structure 
ordered list node durable numbers reconstruct document logical order 
numbering scheme change allows indexing various document elements persistent way 
achieved sorting nodes pre order traversal leaving space room insertions 
durable numbering scheme advantageous automatically maintains logical document tree structure 
ordered list node durable numbers reconstruct document logical order 
numbering scheme change allows indexing various document elements persistent way 
outlined spar new versioning scheme adapts durable numbers timestamps order efficiently support complex queries multiversion xml documents :10.1.1.21.8854
expand spar scheme properties justify reduction various complex multiversion queries partial version retrieval queries 
shu yao chien spar versioning scheme new versioning scheme assigns durable structure encoding id numbers timestamps elements document 
spar stands sparse preorder range numbering consists numbers durable node number dnn range discussed 
numbering scheme xml document viewed ordered tree tree nodes corresponds document elements terms synonyms 
spar stands sparse preorder range numbering consists numbers durable node number dnn range discussed 
numbering scheme xml document viewed ordered tree tree nodes corresponds document elements terms synonyms 
pre order traversal number identify uniquely elements xml tree 
easy compute provide durable external indexes objects need point document element insertions deletions normally change pre order numbers document elements follow 
need durable node ids stable indexing elements allow decomposition documents linked files :10.1.1.21.8854
furthermore durable ids describe position element original document requirement typically ids databases 
dnn establishes total order elements document pre order traversal consecutive integers leaves interval nodes possible dnn sparse numbering scheme preserves lexicographical order document elements 
second element spar scheme range 
proposed mechanism supporting efficiently path expression queries :10.1.1.21.8854
need durable node ids stable indexing elements allow decomposition documents linked files :10.1.1.21.8854
furthermore durable ids describe position element original document requirement typically ids databases 
dnn establishes total order elements document pre order traversal consecutive integers leaves interval nodes possible dnn sparse numbering scheme preserves lexicographical order document elements 
second element spar scheme range 
proposed mechanism supporting efficiently path expression queries :10.1.1.21.8854
instance document chapter elements elements contained chapters 
typical query retrieve titles chapter elements 
proposed xml query languages query described path expression follows doc chapter xml document tree elements children chapter elements descendants chapter elements contained sections subsections :10.1.1.37.8206
support efficient execution path expression queries need ability finding sub elements elements provided spar scheme 
second element spar scheme range 
proposed mechanism supporting efficiently path expression queries :10.1.1.21.8854
instance document chapter elements elements contained chapters 
typical query retrieve titles chapter elements 
proposed xml query languages query described path expression follows doc chapter xml document tree elements children chapter elements descendants chapter elements contained sections subsections :10.1.1.37.8206
support efficient execution path expression queries need ability finding sub elements elements provided spar scheme 
dnn range denote dnn range element descendant node iff dnn dnn dnn range 
interval dnn dnn range associated element elements document updated spar numbers pre order traversal number dnn range equal number descendants efficient complex query support multiversion xml documents remain unchanged 
new elements inserted assigned dnn range interfere spar neighbors want maintain sparsity keeping intervals nearby nodes far apart possible 
integers occasional spar needed assure property 
better solution floating point numbers additional decimal digits added needed new insertions 
simplicity exposition examples integers 
shows sample xml document spar values 
root element assigned range :10.1.1.45.8397
range split sub ranges direct child elements ch ch insertion points ch ch ch 
range assigned chapter element continues split assigned direct child elements leaf elements met 
version model spar numbering scheme maintains logical document order supplies durable node ids possible timestamps manage changes content structure documents 
record xml document element contains element spar element version lifespan 
range assigned chapter element continues split assigned direct child elements leaf elements met 
version model spar numbering scheme maintains logical document order supplies durable node ids possible timestamps manage changes content structure documents 
record xml document element contains element spar element version lifespan 
lifespan described timestamps version element created version element deleted 
element called alive versions shu yao chien element node text node author lifespan spar page page attribute node ch lifespan spar sec lifespan spar lifespan spar pcdata lifespan spar book lifespan spar sec lifespan spar lifespan spar page page ch lifespan spar page page sec lifespan spar lifespan spar fig :10.1.1.45.8397

xml document version represented spar model 
pcdata lifespan spar lifespan 
element alive current version value variable representing increasing current version number 
furthermore full document reconstructed simply leaf pages tree 
document evolves versions new elements added updated deleted 
changes update tree element 
order answer queries multiversion document need maintain multiple versions tree 
various multiversion tree structures proposed consider multiversion tree mvbt optimal partial version retrievals code readily available :10.1.1.74.3527:10.1.1.49.4094
mvbt form directed graph multiple roots 
associated root consecutive version interval 
root provides access portion structure valid root version interval 
conceptually mvbt maintains versions tree store snapshots versions require large space 
