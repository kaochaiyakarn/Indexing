fl kluwer academic publishers boston 
manufactured netherlands 
intelligent adaptive information agents keith decker decker cis edu department computer information sciences university delaware newark de katia sycara sycara cs cmu edu robotics institute carnegie mellon university pittsburgh pa editor larry kerschberg 
adaptation open multi agent information gathering systems important reasons 
reasons include inability accurately predict problem solving workloads changes existing information requests failures additions agents data supply resources task environment characteristic changes require system reorganization 
developed multi agent distributed system infrastructure retsina reusable task structure intelligent network agents handles adaptation open internet environment 
typically single information agent serve information needs agents humans intelligent software agents 
information agent quite different typical world wide web www service provides data multiple users 
obvious interface differences information agent reason way handle external requests order carry www services typically blindly concurrent 
information agents perform information gathering response queries carry long term interactions involve monitoring particular conditions information updating 
agents communicate message passing kqml communication language :10.1.1.125.3310
retsina open agent society agents may join new agents put internet day leave agents fail intermittently time agents utilize middle agents matchmakers brokers find 
retsina agents designed expressly handle adaptation 
adaptation behavior agent response unexpected low probability events dynamic environment 
examples unexpected events include unscheduled failure agent agent computational platform underlying information sources 
differentiates approach approaches sims focused providing multi source information agent behaviors 
focus architecture ability interleave computational actions concurrent behaviors interleave planning execution schedule periodic activities activities deadlines handle behaviors time step may externally asynchronously enabled 
developing discrete control architecture software agents rely shared representation structure tasks agent carrying 
planner plan retriever creates structures objectives determined communicator scheduler actively manages agenda executable actions structures execution monitor takes care individual action executions 
task structure representation features derived earlier hierarchical task network planning task structure representations tca taems :10.1.1.32.8351

agent control components control process information agents includes steps communicating agent goals objectives planning achieve local non local objectives scheduling actions plans carrying actions see 
addition agent shutdown initialization process 
initialization process executed agent startup agent giving initial objectives poll messages agents advertise capabilities 
communication agent communicates messages kqml knowledge query manipulation language 
kqml emerging agent communication language standard focuses extensible set performatives speech acts tell ask advertise 
communicative act consists known outer language includes performative message parameters sender receiver reply reply language ontology content 
inner content language specified language ontology domain specific 
kqml currently informal semantics performatives lacks problems addressed :10.1.1.29.6467:10.1.1.32.8351
example requestor agent information requests ask information provider agent reply parameter conversation marker 
eventually receives replies reply sorry messages matching reply parameter 
receipt requests requestor internal goals fulfilled recipient information agent 
types information seeking goals information agent receives 
initial implementation simple earliest deadline scheduling heuristic 
list actions constructed schedule earliest deadline action enabled chosen 
enabled actions missed deadlines executed missed deadline recorded start period task adjusted help meet period deadline 
periodic task chosen execution schedule deadline equal current time plus action period 
architecture support complex scheduling :10.1.1.57.2877

execution monitoring retsina agents operate dynamic environment results actions predicted certainty 
agent architecture includes execution monitoring module 
execution monitoring process takes agent intended action prepares monitors completes execution 
conversely sensing world useful doing fact cause agent adapt course action 
initial focus handling planner adaptation additional kinds control flow plans periodic actions performed repeatedly specific intervals triggered actions performed repeatedly response external events 
existing planning formalisms explicitly describe control flow terms ordering relationships actions oe denoting action performed action 
relationships insufficient distinguish number distinct control relationships arise plans repetitive actions 
hold position control flow relationships derivative basic relationships required information flows effects task duration result quality working integrated representation information control flow hierarchical task structures :10.1.1.42.8231
types adaptation expressed agent level include adapting failures time agent system unavailable go line middle long term monitoring situation agent 
planner task reductions handle situations failures dealt smoothly 
alternate agents available contacted subproblem restarted note sort partial solutions expensive 
alternate agent available task wait 
model communicative acts limited requests replies number periodic queries percentage idle predicted agent predicted cloning agents actual cloning 
predicted idle percentages single non cloning agent agent cloning behavior various task loads 
plotted points measured idle percentages experimental data including cloning agents 
commitments 
benefits semantics requests commitments understood second model allows build simpler agents open environment :10.1.1.125.3310
say requester agent preferences provider agent capabilities 
specific request instance agent preferences specific reply action service request instance agent capabilities 
furthermore agent mental state respect particular specification preference capability 
advertisement capability specification agent creating advertisement committed servicing request satisfies advertisement constraints 
economic markets agents price reliability utility characteristics choose agent 
matchmaker supply agent appropriate updated pricing information new agents enter exit system alter advertisements 
agents dynamically adjust organization necessary limited transaction costs 
potentially organizations provide efficient load balancing ability provide truly expensive services expensive terms resources required 
federations agents give individual autonomy choosing business locally centralized facilitator extension matchmaker concept brokers requests :10.1.1.125.3310:10.1.1.44.1311
centralization message traffic potentially allows greater load balancing provision automatic translation mediation services 
functional units traditional manager employee groups single multi source information agent manager simple information agent employees 
organizing functional units related information sources organizations concentrate providing higher reliability multiple underlying sources simple information integration partially overlapping information load balancing 
exhaustive list 
adaptive behavior individual agent level supported reusable agent architecture 
reported examples experimental results level planning execution 
planning level discussed adapting failures multiple task reductions interleaved planning execution 
task reduction planner focuses indicating underlying information flows tasks directly indicating task ordering described 
current includes integration highly adaptive scheduling component :10.1.1.57.2877
time sec request fulfillment number servers number servers predicted elapsed time sec 
predicted actual effect provider failure recovery matchmade system time sec request fulfillment number servers number servers predicted elapsed time sec 
predicted actual effect provider failure recovery brokered system discussed fairly detailed model experimentation simple cloning behavior implemented 
behavior agent adaptive response performance requirements 
experiments described done standard unix workstation connected network 

potential second agent existed totally idle idle curve differs cloning case 

communications done appropriate kqml performatives extensions :10.1.1.125.3310

effect reduced requesters effort active load balancing 

cohen levesque 
