design intention signs revolution franco zambonelli dipartimento di scienze dell universit di modena reggio emilia reggio emilia italy franco zambonelli unimo identify analyze set issues influencing characteristics today complex software systems distinguish traditional software systems 
examples different areas show issues influence application domains widespread 
discuss issues dramatically impact way software modeled engineered 
particular show edge revolutionary shift paradigm change attitudes making conceive software systems longer terms mechanical systems terms intentional physical systems 
keywords agent oriented software engineering computation philosophical foundations emergent behaviors agent coordination computer science software engineering going dramatically change 
scientists engineers spending great deal efforts attempt continuously adapting improving established models methodologies software development 
called software crisis occurred having led modular object oriented programming paradigm mainly caused problem size 
required amount functionality software systems increasing limits handle effectively adopting algorithmic approach software modeling approach software development led architectural approach software systems design modeling 
driving force primarily driven research technological efforts till today leading room acm copyright information van dyke parunak erim po box ann arbor mi usa erim org modern approaches object oriented component oriented programming 
crisis going face years different nature increase size software systems represent single facet 
scenario cause software crisis rapidly forming eyes everybody computing systems going connected active :10.1.1.113.4377
hand computer systems going embedded object everyday clothes home furniture homes mention computing capabilities handheld computing devices cellular phones reality 
hand due advances wireless technologies network connectivity pervasive computing device connected network traditional internet ad hoc networks 
diffusion wap incoming technology possibility accessing internet electricity grids stage trend 
computing systems active perform activity behalf activities devoted improve comfort home control automate manufacturing processes industries 
daemons assistant agents populate pcs workstations devoted monitor handle computing digital resources 
argue scenarios simply quantitatively affect terms number components effort required design development software systems 
argue qualitative change characteristics software systems methodologies adopted develop 
particular argue main characteristics addition quantitative increase interconnected computing systems distinguish software systems traditional ones situatedness software components execute context environment influence influenced openness software systems subject decentralized management dynamically change structure locality control components software systems represents autonomous proactive loci control locality interactions despite living fully connected world software components interact accordingly local geographical logical patterns 
researcher having worked area agent computing immediately recognize characteristics main distinguishing ones agents multi agent systems jen :10.1.1.101.5226
section go details characteristics try show different extents different terminology research communities recognizing importance adapting models technologies take account 
contribution attempt synthesizing single conceptual framework multitude novel concepts abstractions lack interaction common terminology research groups emerging different areas recognition basic 
synthesis attempt argues section integration concepts abstractions software modeling design simply represent proper evolution current models methodologies 
claims going pass real revolution radical change paradigm 
addition explicit modeling environment activities possible identify confine clearly sources dynamics unpredictability non concentrate software components terms deterministic entities deal dynamic possibly unpredictable environment 
examples 
notable examples trend 
systems control manufacturing systems generally embedded systems control physical environments traffic control systems home care health care system tends built explicitly managing environmental data explicitly account unpredictable dynamics environment specific event handling policies 
internet applications web systems immersed existing intrinsically dynamic internet environment typically engineered clearly defining boundaries system terms application level including new application components developed middleware level environmental substrate components embedded :10.1.1.108.8391
clearly identifying defining boundaries key points web application engineering 
example systems workflow management computer supported collaborative built shared data space abstractions exploited common environment execution workflow processes agents tol 
final example worth noting promising proposals area distributed problem solving optimization works colonies model centered dynamic virtual environment influencing activities distributed problem solver processes 
openness living environment perceiving affected intrinsically imply sort openness software system 
fact aim understand way software components aware context execute way interaction independent components open context con controlled ruled 
examples 
consider control systems critical environments traffic control systems public telephony services health care systems manufacturing systems 
systems forever running stopped removed environment embedded 
systems need continuously updated environment live change frequently addition new physical components consequently new software components software systems :10.1.1.113.4377
systems managing openness capability establishing new effective interactions new components dramatic importance ability component entering new execution contexts safety effectively 
important execution contexts able constrain control dynamic interactions occurring 
similar considerations apply open distributed computing 
software services survive dynamics uncertainty internet able serve client component able enact security resource control policy local context :10.1.1.16.8398
systems need continuously updated environment live change frequently addition new physical components consequently new software components software systems :10.1.1.113.4377
systems managing openness capability establishing new effective interactions new components dramatic importance ability component entering new execution contexts safety effectively 
important execution contexts able constrain control dynamic interactions occurring 
similar considerations apply open distributed computing 
software services survive dynamics uncertainty internet able serve client component able enact security resource control policy local context :10.1.1.16.8398
final example openness context play important role relates mobility 
mobility users software devices moves concept openness extreme making components move context execution whi 
course application areas requires capability components acquire knowledge dynamically context execute capability control component interaction context 
local control flow control concept key aspects computer science software engineering levels hardware level high level design applications 
environment physical nature amount physical world single component sense affect locally bounded physical laws 
environment logical minimization conceptual management complexity suggest case modeling local terms limiting effect single component environment 
components normally interact context software system belong locally system 
open component system interact components systems 
cases minimization conceptual complexity suggests modeling component terms component temporarily moved context interacts locally new context :10.1.1.16.8398
open world components need form execute interact effectively 
component aware context effectively efficiently context necessarily locally confined 
final note known locality interactions strong requirement number components system increases dimension distribution scale increases 
case presence autonomous threads control may tracking controlling concurrent autonomous autonomously initiated interactions difficult object component applications interactions strictly local 
notion application replaced notion interacting systems 
objects components part system environment uncontrollable dynamics order abstractions 
specified typically static patterns interaction object programming replaced dynamic autonomously initiated interaction patterns 
dynamic interactions include component environment indirect interactions components occur environment 
outlined scenario largely adopted basic model agent computing jen :10.1.1.101.5226
fact agents considered situated software entities live environment execute autonomously local control actions interact agents 
local interactions promoted may explicitly mentioned part model 
despite fact traditional computer scientist software engineers admit doing systems assimilated agent computing modeled agent systems 
scientists working agent computing recognize agents agent computing potential general model today computing systems 
characteristics impact dramatically way software systems modeled engineered leading true revolution computer science software engineering 
fact required change traditional design attitude implying mechanical perspective intentional attitude requiring physical biological perspectives 
despite opposing forces difficulties inherent revolutionary phase including need restructuring cultural background revolution definitely open door new interesting research engineering challenges 
acknowledgments supported nokia research center boston italian framework project 
cabri leonardi zambonelli engineering mobile agent applications context dependent coordination rd international conference software engineering acm toronto ca may :10.1.1.16.8398
cap web life new understanding living systems oct 
leonardi zambonelli load balancing policies dynamic applications ieee concurrency 
crovella bestavros self similarity world wide web traffic evidence causes acm sigmetrics pp 

coordination control computational ecosystems vision coordination internet agents omicini eds springer verlag pp 

huberman hogg emergence computational ecologies lectures complex systems addison wesley 
huh huhns interaction oriented programming st international workshop agent oriented software engineering lncs jan 
jen jennings agent software engineering artificial intelligence :10.1.1.101.5226
kuhn structure scientific university chicago press rd edition nov 
moses artificial social systems computers artificial intelligence 
par parunak go ant engineering principles natural agent systems annals operations research 
parunak entropy self organization agent systems th international conference autonomous agents acm press may 
certainty time chaos new laws nature free press 
sip 
emergence cellular computing ieee computer july 
tol tolksdorf coordinating web workspaces th ieee workshops enabling technologies infrastructures collaborative enterprises gaithersburg ma ieee cs press june 
tennenhouse proactive computing communications acm may :10.1.1.113.4377
watts small worlds dynamics networks order randomness princeton university press princeton nj 
wegner 
interaction powerful algorithms communications acm 
whi white mobile agents software agents aaai press menlo park ca pp 
