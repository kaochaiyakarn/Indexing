proceedings acm oopsla conference vancouver bc october 
jres resource accounting interface java spread internet computing model server systems undergoing important changes 
research ideas concerning dynamic operating system extensibility finding way commercial domain resulting designs extensible databases web servers 
addition ordinary users service providers deal untrusted downloadable executable code unknown origin intentions 
board java emerged language choice internet oriented software 
argue order realize full potential applications dealing untrusted code java needs flexible resource accounting interface 
current definition java version interface resource management 
application domains benefit providing interface standard integral part language specification include known paradigms application controlled load balancing preventing denial service attacks emerging concepts extensible servers 
addressing issue resource management may fact adequate decision designing plain programming language 
case java language runtime environment includes features extensible operating system java enabled browser essence operating system running applets 
server side environments running untrusted code developed may common :10.1.1.124.9017
fact java provides model mechanisms controlling resource consumption applications apart changing thread priorities problem systems reasons malicious code prevented resources code charged resources consuming 
issues represent significant obstacle deploying commercial extensible servers 
ad hoc resource controlling solutions possible java 
example native code possible monitor cpu time consumed thread 
consider image processing services created profit independent developer 
architecture extensible web server possible developer upload code service 
service available large group potential users 
clients access services standard web browser interface case sophisticated special demands able upload code accessing image rendering services 
server practical application kernel example dynamically extensible web server adequate implementing scenarios :10.1.1.124.9017
system core uploaded code execute single java virtual machine jvm 
constructing server single jvm considerable advantages 
performance cross domain calls core extensions better relying traditional os protection mechanisms separate processes encapsulating extensions core 
second security restrictions bytecode run finely controlled java provides adequate mechanisms extensibility implementing protection domains :10.1.1.124.9017
server practical application kernel example dynamically extensible web server adequate implementing scenarios :10.1.1.124.9017
system core uploaded code execute single java virtual machine jvm 
constructing server single jvm considerable advantages 
performance cross domain calls core extensions better relying traditional os protection mechanisms separate processes encapsulating extensions core 
second security restrictions bytecode run finely controlled java provides adequate mechanisms extensibility implementing protection domains :10.1.1.124.9017
issues dynamic extensibility protection understood context java lack support resource accounting serious consequences 
single address space environment described difficult identify servlets consume resources 
malicious servlets easily mount denial service attacks attacks aimed preventing applications able resources 
second main incentives attractive high quality extensible internet servers revenue may potentially bring 
rewriting complete resulting byte array passed invocation resulting class object passed jvm just original code 
jvm core know changes 
current standard jvm jres extension resource manager accounting computational resources limiting resource consumption information resource availability applications define resource policies different levels resource privileges monitoring behavior extensions 
extending jvm resource managing facilities 
implementation jres uses bytecode rewriting tool developed kernel project :10.1.1.124.9017
thread registration core component current implementation jres thread registration 
goal store information threads active system 
module responsible maintaining information contacted user program sets clears resource limit particular thread new resource consumption information available 
responsibility thread registration module generate newly created threads 
consider scenario thread creates large object hands thread thread exits garbage collected counted memory consumption 
problem exist environments possible identify cooperating threads ensure data shared groups threads 
fact constraint severe may appear 
instance applet security rules ensure applets access threads thread groups 
example architecture easy define identify collections cooperating threads kernel :10.1.1.124.9017
important decision kernel design disallow object sharing protection domains 
similar designs expected designs extensible java environments 
related jres related research areas resource accounting enforcing resource limits traditional extensible operating systems safe language technologies binary code transformations 
section summarize important areas influencing research 
main characteristics model high code mobility large numbers anonymous users result different kind resource demands applications traditional operating system environments 
efficient distributed computational resources model useful 
jres provides experimental infrastructure research issues 
design implementation jres demonstrate interesting useful resource management functions added java modifying jvm certainly incorporate jres implementation jvm 
currently working incorporating jres jaguar extensible database kernel :10.1.1.124.9017
topic current transfer object ownership 
summary presents jres interface extending java resource accounting limiting capabilities 
main motivation jres facilitating creation extensible internet environments untrusted code uploaded 
currently java lacks resource management support severe shortcoming building environments 
