consistency checking complex object database schemata integrity constraints beneventano ffi sonia bergamaschi ffi stefano sartori mail deis unibo dipartimento di informatica sistemistica universit di bologna cnr ffi dipartimento di scienze dell universit di modena cnr integrity constraints rules guarantee integrity database 
provided adequate mechanism express available question arises way populate database satisfies constraints supplied database designer 
database schema including constraints admit non empty model 
gives answer question complex object database environment providing theoretical framework including ingredients alternative formalisms able express relevant set state integrity constraints declarative style specialized reasoners tableaux calculus able check consistency complex objects database schemata expressed formalisms 
proposed formalisms share common kernel supports complex objects object identifiers allow expression acyclic descriptions classes nested relations views built means recursive record quantified set object type constructors intersection union complement operators 
furthermore kernel formalism allows declarative formulation typing constraints integrity rules 
contributions topics capability expressing constraints declarative style come different research areas deductive databases description logics languages object oriented databases 
deductive databases offer uniform solution satisfiability problem wide class integrity constraints expressed deduction rules availability general theorem provers contact address sartori deis viale bologna italy phone operator fax mail deis unibo check consistency set data definitions constraints check database states respect constraints 
significant contributions topics 
major drawback proposals operate logical flat data model actual directions knowledge representations focus powerful data modelling capabilities adding structural complexity value relational databases 
fact formalisms supporting classes complex description organized multiple inheritance hierarchies milestone database systems knowledge representation systems developed artificial intelligence :10.1.1.27.6071
object oriented database models class ones known complex object data models considered area deductive databases oodb particularly significant expressiveness data models precise extensional semantics support complex objects object identifiers allow definition complex values built means recursive set record constructors 
furthermore provide techniques guarantee inheritance consistency database schemata strict inheritance class taxonomies 
object oriented dbms example new classes violate strict inheritance semantics prevented means known type checking techniques class named specialization class named structural description refinement structural description 
structural point view object relational database systems adopt data model values oids precise extensional semantics 
dls differentiate primitive defined concepts representing respectively necessary conditions necessary sufficient conditions objects instances concept 
primitive concepts correspond usual semantics database classes defined concepts correspond semantics views 
extensional semantics concepts exploiting semantics defined concepts dls provide reasoning techniques called taxonomic reasoning subsumption computation computation isa relations explicitly implied descriptions concepts inconsistency detection detection empty concepts 
complexity inferences assessed variety acyclic dls see 
description logic formalisms databases extend different directions cited dls exploit taxonomic reasoning database environment proposed :10.1.1.50.2685
extensions proposed necessary represent richer expressiveness respect previously proposed dls :10.1.1.50.2685
fact aspects expressive 
introduce distinction values objects identity value types class types briefly called classes dls support objects classes 
support additional type constructors record set allowing complex values built 
primitive concepts correspond usual semantics database classes defined concepts correspond semantics views 
extensional semantics concepts exploiting semantics defined concepts dls provide reasoning techniques called taxonomic reasoning subsumption computation computation isa relations explicitly implied descriptions concepts inconsistency detection detection empty concepts 
complexity inferences assessed variety acyclic dls see 
description logic formalisms databases extend different directions cited dls exploit taxonomic reasoning database environment proposed :10.1.1.50.2685
extensions proposed necessary represent richer expressiveness respect previously proposed dls :10.1.1.50.2685
fact aspects expressive 
introduce distinction values objects identity value types class types briefly called classes dls support objects classes 
support additional type constructors record set allowing complex values built 
usually support representation management cyclic classes classes directly indirectly 
fact aspects expressive 
introduce distinction values objects identity value types class types briefly called classes dls support objects classes 
support additional type constructors record set allowing complex values built 
usually support representation management cyclic classes classes directly indirectly 
capability supporting value types firstly introduced extended description logics odl proposed hand permits data model compatible extension relational model hand fundamental represent called integrity typing constraints described predicates concrete domains integer string real propose solution consistency problem complex object database environment providing theoretical framework including alternative formalisms olcp olcd able express relevance typing constraints build concept description recognized dealt dls community franz baader :10.1.1.50.2685:10.1.1.50.1728
relevant set state integrity constraints declarative style specialized reasoners tableaux calculus able check consistency complex objects database schema expressed formalisms 
olcp olcd proposed new data models formal tools structural part disregarding behavioral aspects different existing oodb models mapped class integrity constrains expressed declarative style 
precise extensional semantics tradition description logics pre requisite development specialized reasoner consistency checking 
proposed formalisms share common kernel object language complements provides general value identity type system disallowing cyclic descriptions 
starting point compromise expressiveness model decidability reasoning activities 
fact express significant state integrity constraints typing constraints integrity rules 
typing constraint expresses comparison attribute path base value 
union intersection complement operators allow expression integrity rules 
furthermore decidability results reasoning activities obtained description logics research area comparable formalism alc :10.1.1.50.1728
directions possible extensions kernel formalism may considered main guideline decidability 
start formalism olcp section consider possible independent relevant extensions path relations cyclic type names paths multivalued attributes 
olcp object language complements path relations formalism introduces capability expressing path relations path relation expresses comparison attribute paths 
second olcd object language complements allowing descriptive cycles introduces capability expressing cyclic descriptions 
second olcd object language complements allowing descriptive cycles introduces capability expressing cyclic descriptions 
prove consistency checking olcp olcd decidable 
unfortunately prove formalism allowing capability expressing cyclic descriptions capability expressing path relations reasoning activity undecidable 
furthermore extending olcp paths multi valued attributes leads undecidability 
olcp olcd derived odl formalism proposed olcd extends odl union complement operators existential quantification sets olcp extends odl features union complement operators path relations introduces restriction descriptions :10.1.1.50.2685
furthermore consistency checking odl performed means completely different techniques 
specialized reasoners developed olcp olcd tableaux calculus extend theoretical results obtained :10.1.1.50.1728
extensions quite complex olcp olcd represent combinations features separately different proposals completely new techniques detect incoherence path relations typing constraints including value types objects developed 
behavior reasoners schema class descriptions eventually including integrity constraints returns true class consistent respect schema legal instance database schema exists class interpretation non empty 
unfortunately prove formalism allowing capability expressing cyclic descriptions capability expressing path relations reasoning activity undecidable 
furthermore extending olcp paths multi valued attributes leads undecidability 
olcp olcd derived odl formalism proposed olcd extends odl union complement operators existential quantification sets olcp extends odl features union complement operators path relations introduces restriction descriptions :10.1.1.50.2685
furthermore consistency checking odl performed means completely different techniques 
specialized reasoners developed olcp olcd tableaux calculus extend theoretical results obtained :10.1.1.50.1728
extensions quite complex olcp olcd represent combinations features separately different proposals completely new techniques detect incoherence path relations typing constraints including value types objects developed 
behavior reasoners schema class descriptions eventually including integrity constraints returns true class consistent respect schema legal instance database schema exists class interpretation non empty 
reasoner consistency checking perform subsumption computation consistency subsumption reduced 
structure 
hand semantics virtual class isn way infer subsumed manager matter primitive classes manages department know department managed element class manager 
final example consider usage virtual relations 
virtual relation collects values nesting level subsumed description 
instance collection tuples having string attribute name follows virtual relation names name string relation names include tuples associated objects employee material repository strings 
formalism complex objects including integrity constraints olcp extension object description language odl introduced tradition complex object data models :10.1.1.50.2685
olcp ancestor odl provides system base types string boolean integer real type constructors tuple set class allow construction complex value types class types 
class types briefly called classes denote sets objects identity value value types denote sets complex finitely nested values object identity 
additionally intersection operator create intersections previously introduced types allowing simple multiple inheritance 
types names 
respect formalism language hand offers inverse function represented atomic attribute number restrictions cyclic definitions support value types path relations essential representation significant integrity constraints object oriented environment 
similar comment respect authors new data model extends object oriented models various directions including ary relations inverse attribute cardinality constraints provide schema satisfiability procedures 
recalled works description logics area inspired 
purpose description logics languages sufficient consider concrete domains database environment instance class technician section defined instance 
exception concrete domains integrated concept languages alc :10.1.1.50.1728
isn alc allow equality predicates domains class section defined 
discuss limits 
objective mainly deal classes relations represent inheritance aggregation rules type constraints path relations 
unfortunately path relations turned conflict schema lead propose separate formalisms 
tool takes input schema type description checks type consistent 
olcp olcd reasoners integrated tool 
usefulness techniques propose limited satisfiability perceive queries virtual classes coherence procedure exploited compute subsumption relationships query classes schema 
technique semantic query optimization 
subsumption computation query optimization shown quite simple ddl environment object oriented environment path equations functional dependencies ddl :10.1.1.27.6071
investigations planned topic 
appendix section give proofs logical properties calculi olcp olcd termination soundness completeness 
assume schema normal form denoted oe types occurring oe denoted possibly subscripts accents 
assume constraint system derives initial constraint system form fx sg 
springer verlag heidelberg germany 
atzeni parker 
formal properties net knowledge representation schemes 
data knowledge engineering 
baader hanschke :10.1.1.50.1728
scheme integrating concrete domains concept languages 
th international joint conference artificial intelligence sydney australia 
beneventano bergamaschi sartori vincini 
semantics driven query optimizer oodbs 
christiansen larsen editors flexible query answering systems volume issn denmark 
bergamaschi nebel 
complexity multiple inheritance complex object data models 
workshop ai objects ijcai sidney australia august 
bergamaschi nebel :10.1.1.50.2685
acquisition validation complex object database schemata supporting multiple inheritance 
journal applied intelligence 
bergamaschi sartori 
taxonomic reasoning conceptual design 
