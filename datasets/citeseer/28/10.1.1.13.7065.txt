abduction logic programming marc denecker kakas department computer science leuven belgium 
marc denecker cs kuleuven ac www cs kuleuven ac department computer science university st 
ac cy www cs ac cy 
abduction logic programming started late early attempt extend logic programming framework suitable variety problems artificial intelligence areas computer science 
aims chart main developments field years take critical view developments perspectives logical epistemological computational suitability application 
attempts expose challenges prospects development field 
aims chart main developments field years take critical view developments perspectives logical epistemological computational suitability application 
attempts expose challenges prospects development field 
decades abduction ai non monotonic reasoning paradigm address limitations deductive reasoning classical logic 
role abduction demonstrated variety applications 
proposed reasoning paradigm ai diagnosis natural language understanding default reasoning planning knowledge assimilation belief revision multi agent systems problems :10.1.1.13.7065:10.1.1.62.8517:10.1.1.31.9982
context logic programming study abductive inference started eighties outcome di erent attempts logic programming solving ai problems 
facing limitations standard logic programming solving problems di erent researchers proposed extend logic programming abduction 
eshghi introduced abduction logic programming order solve planning problems event calculus 
approach abduction solves planning goal explaining ordered sets events plan entails planning goal 
eshghi introduced abduction logic programming order solve planning problems event calculus 
approach abduction solves planning goal explaining ordered sets events plan entails planning goal 
approach explored shanahan denecker jung 
kakas mancarella showed application abduction logic programming deductive database updating knowledge assimilation 
application abduction diagnosis studied abductive logic programming framework semantics defined suitable extension completion semantics lp :10.1.1.31.9982
parallel studies abduction inferential method eshghi kowalski kakas mancarella dung abduction semantical device describe non monotonic semantics logic programming way analogous poole 
abductive logic programming investigated knowledge representation point view suitability representing reasoning incomplete information definitional assertional knowledge shown :10.1.1.21.4452
reasons abductive logic programming alp recognized promising computational paradigm resolve limitations logic programming respect higher level knowledge representation reasoning tasks :10.1.1.13.7065
alp manifested framework declarative problem solving suitable broad collection problems 
approach explored shanahan denecker jung 
kakas mancarella showed application abduction logic programming deductive database updating knowledge assimilation 
application abduction diagnosis studied abductive logic programming framework semantics defined suitable extension completion semantics lp :10.1.1.31.9982
parallel studies abduction inferential method eshghi kowalski kakas mancarella dung abduction semantical device describe non monotonic semantics logic programming way analogous poole 
abductive logic programming investigated knowledge representation point view suitability representing reasoning incomplete information definitional assertional knowledge shown :10.1.1.21.4452
reasons abductive logic programming alp recognized promising computational paradigm resolve limitations logic programming respect higher level knowledge representation reasoning tasks :10.1.1.13.7065
alp manifested framework declarative problem solving suitable broad collection problems 
consequently start number abductive systems developed 
abductive procedure computing negation failure abduction extended case general abductive predicates 
kakas mancarella showed application abduction logic programming deductive database updating knowledge assimilation 
application abduction diagnosis studied abductive logic programming framework semantics defined suitable extension completion semantics lp :10.1.1.31.9982
parallel studies abduction inferential method eshghi kowalski kakas mancarella dung abduction semantical device describe non monotonic semantics logic programming way analogous poole 
abductive logic programming investigated knowledge representation point view suitability representing reasoning incomplete information definitional assertional knowledge shown :10.1.1.21.4452
reasons abductive logic programming alp recognized promising computational paradigm resolve limitations logic programming respect higher level knowledge representation reasoning tasks :10.1.1.13.7065
alp manifested framework declarative problem solving suitable broad collection problems 
consequently start number abductive systems developed 
abductive procedure computing negation failure abduction extended case general abductive predicates 
early abductive procedure developed completion :10.1.1.31.9982
reasons abductive logic programming alp recognized promising computational paradigm resolve limitations logic programming respect higher level knowledge representation reasoning tasks :10.1.1.13.7065
alp manifested framework declarative problem solving suitable broad collection problems 
consequently start number abductive systems developed 
abductive procedure computing negation failure abduction extended case general abductive predicates 
early abductive procedure developed completion :10.1.1.31.9982
proposed sldnfa extension sldnf abduction allowing nonground abductive hypotheses 
proposed extension sldnfa constraint solver linear order demonstrated system applied correctly partial order planning context event calculus 
idea integrating abduction constraint solving developed generally framework procedure result incorporating clp constraint solving abductive procedure 
abductive procedure regarded hybrid sldnfa procedure console defined explicit rewrite rules completion equality 
journal logic programming special issue abductive logic programming 
contains papers open new perspectives relationship abduction computational paradigms 
overview state art abductive logic programming point problems challenges sketch progress 
bob kowalski abductive logic programming 
proposed alp framework integrate agent knowledge reduce goal subgoals plan achieve goal described program part abductive theory agent obligations elements determine reactive behaviour described integrity constraints part abductive theory :10.1.1.62.8517
suggestion alp plays central role capturing behaviour autonomous agent feeds reacts environment 
view role way logic programming evolve generally programming language described elegantly short position statement logic programming volume 
rest organized follows 
section briefly reviews study abduction ai philosophy abductive logic programming broad context 
section reviews di erent alp frameworks developed far analyzing potential scope applications links extensions lp 
ends discussion challenges prospects development field alp 
abduction 
explanation 
term abduction introduced philosopher pierce defined inference process forming hypothesis explains observed phenomena :10.1.1.21.4452
abduction defined broadly form inference best explanation best refers fact generated hypothesis subjected optimality criterion 
broad definition covers wide range di erent phenomena involving form hypothetical reasoning 
studies abduction range philosophical treatments human scientific discovery formal computational approaches di erent formal logics 
context formal logic abduction defined follows 
restricting explanation formulas predicates describing primitive causes domain explanation formula entails observation gives cause observation 
class theories logical entailment view implements causality view abductive inference 
relationship reasoning paradigms mentioned previous section definition abduction broad covers wide range hypothetical reasoning inference formally distinguished 
surprisingly di erent views abduction implement 
philosophers logicians argued abduction generalization induction :10.1.1.36.8356
induction defined inference general rules explain certain data 
simple example illustrating inductive inference derivation human human induction seen form inference best explanation 
term abduction refers form reasoning clearly distinguished inductive inference 
current applications abduction goal infer knowledge knowledge specific particular state scenario world 
definition implements entailment view abductive solution entail constraints 
view taken versions alp stronger consistency view sense solution entailment view solution consistency view vice versa 
di erence views subtle practice di erent options usually coincide 
frequently happens unique model case views equivalent 
practice alp systems entailment view easily implemented need extra specialized procedures satisfaction integrity constraints semantics treats constraints way query :10.1.1.21.6503
definition aims define concept abductive solution query define abductive logic programming logic right pair syntax semantics 
notion generalized model defined originally proposed suggests definition 
definition 
model abductive logic framework ic exists set model classical model ic ic 
definition 
model abductive logic framework ic exists set model classical model ic ic 
entailment relation abductive logic frameworks classical logic formulas defined standard way follows ic model ic note definition generic choice semantics logic programming 
way abductive extensions stable semantics founded semantics partial stable model semantics defined 
completion semantics extended case abductive logic programs :10.1.1.31.9982
completion semantics abductive logic framework ic defined mapping completion 
order logic theory consisting un set unique names axioms clark equality theory 
ic comp set completed definitions non abducible predicates 
study attempts clarify representational epistemological aspects alp proposed id logic appropriate logic alp :10.1.1.21.4452
completion semantics extended case abductive logic programs :10.1.1.31.9982
completion semantics abductive logic framework ic defined mapping completion 
order logic theory consisting un set unique names axioms clark equality theory 
ic comp set completed definitions non abducible predicates 
study attempts clarify representational epistemological aspects alp proposed id logic appropriate logic alp :10.1.1.21.4452
id logic defined extension classical logic inductive definitions 
inductive definition consists set rules defining specific subset predicates founded semantics 
logic gives epistemological view alp abductive logic program definition set non abducible predicates abducible predicates open predicates defined 
integrity constraints abductive logic framework simply classical logic assertions 
past years framework instantiated extended di erent ways 
order show wider variety motivations approaches abductive logic programming section aims briefly number alternative frameworks implemented systems applications 
di erent instantiations di er di erent formal syntax semantics simply di erent inference method induce di erent procedural semantics 
approaches completion semantics lp abduction deduction 
alp frameworks :10.1.1.31.9982
syntax framework hierarchical logic programs hierarchical program recursion 
predefined set abducible predicates 
formal syntax extension clark completion semantics non abducible predicates completed 
main aim study relationship abduction deduction setting non monotonic reasoning 
formally hierarchical abductive logic program abducibles completion pc consists definitions non abducible predicates 
equivalences allow rewrite observation equivalent formula language abducible predicates pc classical logic entailment 
formula called explanation formula seen disjunctive characterization abductive solutions restriction hierarchical programs ensures termination procedure compute explanation formula 
framework extended handle restricted form integrity constraints 
abductive framework formalize diagnostic problem solving classification nonmonotonic inheritance hierarchies extended characterize updates deductive databases :10.1.1.31.9982
completion semantics basis knowledge compilation optimization abductive problem solving described 
iff framework 
iff framework completion semantics 
initially developed unifying framework integrating abduction view updating 
iff proof procedure defined rewriting system initial goal rewritten disjunction answers 
main rewrite rules unfolding backward reasoning definitions propagation forward reasoning integrity constraints 
iff produces answers goals form conjunctions abducible atoms denial integrity constraints 
extension special treatment built predicates constraint logic programming proposed 
modification iff proof procedure developed applications modeling reasoning rational agents management active rules databases :10.1.1.62.8517
main underlying lp semantics framework fitting valued completion semantics correctness results proven perfect model semantics restrictions stable semantics 
prototype implementations instances iff procedure exist applied experiments :10.1.1.34.5373
original iff proof procedure implemented java applied voyager extension problem interaction communication multiple agents cooperative problem solving 
information integration multiple sources management formation networks integrated progol learn preconditions actions frameworks event situation calculi 
iff produces answers goals form conjunctions abducible atoms denial integrity constraints 
extension special treatment built predicates constraint logic programming proposed 
modification iff proof procedure developed applications modeling reasoning rational agents management active rules databases :10.1.1.62.8517
main underlying lp semantics framework fitting valued completion semantics correctness results proven perfect model semantics restrictions stable semantics 
prototype implementations instances iff procedure exist applied experiments :10.1.1.34.5373
original iff proof procedure implemented java applied voyager extension problem interaction communication multiple agents cooperative problem solving 
information integration multiple sources management formation networks integrated progol learn preconditions actions frameworks event situation calculi 
extension applied job shop scheduling semantic query optimization 
procedure suggested implemented april context applications active databases agents 
extension applied job shop scheduling semantic query optimization 
procedure suggested implemented april context applications active databases agents 
study problem resource allocation multi agent environment 
approaches stable founded semantics logic programming semantics proposed refinements completion semantics 
include stable model semantics founded model semantics :10.1.1.24.6050
alp frameworks semantics underlying lp framework 
sldnfa id logic 
sldnfa abductive extension suitable abductive reasoning context possibly recursive abductive logic programs completion semantics :10.1.1.21.6503
proven sound certain restrictions complete respect valued completion founded semantics 
approaches stable founded semantics logic programming semantics proposed refinements completion semantics 
include stable model semantics founded model semantics :10.1.1.24.6050
alp frameworks semantics underlying lp framework 
sldnfa id logic 
sldnfa abductive extension suitable abductive reasoning context possibly recursive abductive logic programs completion semantics :10.1.1.21.6503
proven sound certain restrictions complete respect valued completion founded semantics 
procedure came early attempts implement ai planning abductive reasoning event calculus 
procedures correctly handles non ground abduction abduction atoms variables 
procedure experiments integration abduction constraint solving 
procedures correctly handles non ground abduction abduction atoms variables 
procedure experiments integration abduction constraint solving 
describes extension sldnfa constraint solver theory total order applies partial order planning context temporal reasoning incomplete knowledge 
logical level evolved study role alp knowledge representation sldnfa abductive deductive reasoning 
number subsequent experiments alp sldnfa demonstrated role alp knowledge representation incomplete temporal knowledge :10.1.1.31.9982
explain clarify representational epistemological aspects alp proposed id logic integration classical logic inductive definitions founded semantics :10.1.1.21.4452
computational level orts done improve computational performance expressivity original implementation sldnfa procedure 
system developed leuven implements abduction context id logic supporting directly general order classical axioms language higher order aggregates 
system integrates constraint solving general purpose abductive resolution sldnfa 
procedure experiments integration abduction constraint solving 
describes extension sldnfa constraint solver theory total order applies partial order planning context temporal reasoning incomplete knowledge 
logical level evolved study role alp knowledge representation sldnfa abductive deductive reasoning 
number subsequent experiments alp sldnfa demonstrated role alp knowledge representation incomplete temporal knowledge :10.1.1.31.9982
explain clarify representational epistemological aspects alp proposed id logic integration classical logic inductive definitions founded semantics :10.1.1.21.4452
computational level orts done improve computational performance expressivity original implementation sldnfa procedure 
system developed leuven implements abduction context id logic supporting directly general order classical axioms language higher order aggregates 
system integrates constraint solving general purpose abductive resolution sldnfa 
implemented meta interpreter top sicstus prolog available www cs kuleuven ac kt 
system integrates constraint solving general purpose abductive resolution sldnfa 
implemented meta interpreter top sicstus prolog available www cs kuleuven ac kt 
shtml 
system context prototypical constraint solving problems queens logical puzzles planning problems blocks world 
proving infinite failure definite logic programs failure planning goals semantic interpretation temporal information natural language :10.1.1.31.9982
extension system context scheduling application maintenance power units power plants 
experiment involves higher order aggregates described detail section 
compared di erent approaches solving constraint problems including clp smodels system shows problems system competitive 
bottom abduction 
bottom abduction 
approach proposed originally aims develop cient techniques computing abductive solutions generalized stable model semantics translating abductive logic program standard logic program applying cient bottom stable model generators translation 
approach translation abductive logic programs pure logic programs stable model semantics 
abductive solutions original abductive logic program correspond stable models translation compute abductive solutions proposed procedure bottom stable model computation truth maintenance techniques 
extension procedure computing founded models dynamically checks integrity constraints computation stable models uses derive facts :10.1.1.18.8803
bottom procedure integrated procedure top expectation 
top procedure searches atoms rules relevant query integrity constraints helps steer search direction solution 
procedure number applications domains 
legal reasoning dynamic notion similarity cases legal reasoning implemented abductive logic programming 
incompatibility spe correctness transformation abductive logic programs pure logic programs shown independent stable model semantics extended handle integrity constraints 
new information system computes abduction maximally consistent program avoids incompatibility 
abductive constraint logic programming 
framework grew attempt address problem providing high level declarative programming modeling environment problems artificial intelligence time acceptable computational performance 
roots come abduction negation failure early definitions abductive logic programming :10.1.1.13.7065
key elements support abduction central inference system facilitate declarative problem solving ii constraint logic programming techniques enhance ciency computational process abductive inference applied high level representation problem hand 
abductive theory program integrity constraints ic defined clp language finite domain constraints 
semantics form generalized model semantics extends obvious way definition underlying lp framework clp 
negation meaning abduction computed homogeneous way abducible 
abductive program framework extended abduction pair logic programs possibly including negation failure disjunctions 
instance element abducible 
explanation ground literal consists pair sets subsets consistent entails anti explanation satisfies conditions entail abduction framework extends standard abduction defining explanation anti explanations allowing solutions rules program deleted allowing general rules abduced deleted 
implementation methods proposed computing extended abduction 
proposed model generation method term rewriting :10.1.1.24.6050
transformation methods proposed reduce problem computing extended abduction standard abductive problem :10.1.1.28.2011
extended abduction potential applications abductive theory revision abduction non monotonic theories view update deductive databases theory update contradiction removal system repair problems model checking inductive logic programming see :10.1.1.28.2011
framework preference abduction abductive logic program augmented set possible priorities di erent literals program 
goal preferred abduction computes set abducible atoms subset representing priority relation consistent means true preferred answer set prioritized logic program 
instance element abducible 
explanation ground literal consists pair sets subsets consistent entails anti explanation satisfies conditions entail abduction framework extends standard abduction defining explanation anti explanations allowing solutions rules program deleted allowing general rules abduced deleted 
implementation methods proposed computing extended abduction 
proposed model generation method term rewriting :10.1.1.24.6050
transformation methods proposed reduce problem computing extended abduction standard abductive problem :10.1.1.28.2011
extended abduction potential applications abductive theory revision abduction non monotonic theories view update deductive databases theory update contradiction removal system repair problems model checking inductive logic programming see :10.1.1.28.2011
framework preference abduction abductive logic program augmented set possible priorities di erent literals program 
goal preferred abduction computes set abducible atoms subset representing priority relation consistent means true preferred answer set prioritized logic program 
preferred abduction atoms priority relationship 
explanation ground literal consists pair sets subsets consistent entails anti explanation satisfies conditions entail abduction framework extends standard abduction defining explanation anti explanations allowing solutions rules program deleted allowing general rules abduced deleted 
implementation methods proposed computing extended abduction 
proposed model generation method term rewriting :10.1.1.24.6050
transformation methods proposed reduce problem computing extended abduction standard abductive problem :10.1.1.28.2011
extended abduction potential applications abductive theory revision abduction non monotonic theories view update deductive databases theory update contradiction removal system repair problems model checking inductive logic programming see :10.1.1.28.2011
framework preference abduction abductive logic program augmented set possible priorities di erent literals program 
goal preferred abduction computes set abducible atoms subset representing priority relation consistent means true preferred answer set prioritized logic program 
preferred abduction atoms priority relationship 
procedure compute preference abduction proposed 
system judged useful due flexibility allowed experiment easily changes policy preferences 
re assignment module able suggest solutions adapt existing seconds 
chosen useful module system facilitate operators develop adjust solution meet specific needs preferences time 
links alp extensions lp parallel development frameworks systems alp clear exist strong links alp frameworks extensions logic programming 
alp tight connections answer set programming :10.1.1.49.9332:10.1.1.24.6050
recall framework extension answer set programming abduction 
standard alp negation strongly related stable logic programming restriction answer set programming pure logic programs :10.1.1.49.9332:10.1.1.24.6050
mentioned section abductive logic framework generalized stable semantics translated equivalent logic program stable semantics 
consequently current systems computing stable models smodels compute abduction generalized stable semantics 
chosen useful module system facilitate operators develop adjust solution meet specific needs preferences time 
links alp extensions lp parallel development frameworks systems alp clear exist strong links alp frameworks extensions logic programming 
alp tight connections answer set programming :10.1.1.49.9332:10.1.1.24.6050
recall framework extension answer set programming abduction 
standard alp negation strongly related stable logic programming restriction answer set programming pure logic programs :10.1.1.49.9332:10.1.1.24.6050
mentioned section abductive logic framework generalized stable semantics translated equivalent logic program stable semantics 
consequently current systems computing stable models smodels compute abduction generalized stable semantics 
interestingly significant di erences computational models developed areas 
alp procedures sldnfa iff extensions sldnf operate top way predicate programs systems smodels bottom propagation propositional grounding logic program 
generic definition formal model semantics alp provide answers 
fact alp inherits ambiguity logic programming epistemological level demonstrated 
fundamental questions understand meaning alp framework need understand meaning symbols 
negation alp understood 
extended completion semantics defined alp console theseider maps negation failure literals classical negation :10.1.1.31.9982
hand generalized stable semantics framework negation failure literals interpreted modal literals kp autoepistemic logic default logic :10.1.1.24.6050
relationship alp classical logic 
alp framework may contain arbitrary classical logic theory ic constraints alp model semantics models alp framework satisfy constraints ic standard way classical logic 
suggests alp extension classical logic 
fact alp inherits ambiguity logic programming epistemological level demonstrated 
fundamental questions understand meaning alp framework need understand meaning symbols 
negation alp understood 
extended completion semantics defined alp console theseider maps negation failure literals classical negation :10.1.1.31.9982
hand generalized stable semantics framework negation failure literals interpreted modal literals kp autoepistemic logic default logic :10.1.1.24.6050
relationship alp classical logic 
alp framework may contain arbitrary classical logic theory ic constraints alp model semantics models alp framework satisfy constraints ic standard way classical logic 
suggests alp extension classical logic 
hand alp defined study abductive reasoning classical logic normally viewed study deductive reasoning 
lack clear epistemological foundations alp causes alp lack coherence factor blurring role status alp knowledge representation level broader context logic ai 
epistemological study alp contribute significantly understanding field logical methodological level 
computational challenges computational challenges paradigm considerable 
challenge building abductive systems solving broad class problems formalized high level declarative representations extremely di cult realise 
theoretical level complexity formal results show general problem computing abduction hard :10.1.1.31.9982
datalog case problem computing abductive solutions general intractable 
general case alp frameworks function symbols existence abductive solution undecidable 
implementational level problem implementing abductive reasoning seen extension implementation clp systems need reason constraints general order logic 
current systems iff integration clp techniques high level abductive procedures 
challenges domain find interesting niche domains industrial impact current systems evaluated fine tuned 
experimentation evaluation abductive systems realistic domains yield important information levels language constructs methodology computational control integration heuristic information 
prototypical classes problems candidates alp methods scheduling planning domains knowledge intensive learning machine learning rich background knowledge performed inductive methods integrated abduction 
possible approach challenges section briefly describe views approach logical computational challenges 
underlying logic alp id logic logic appropriate alp way extends classical logic inductive definitions generalized non monotone kind :10.1.1.21.4452
mentioned earlier section abductive logic framework ic natural embedding id logic 
represents definition non abducible predicates ic represents set classical logic assertions 
view alp study abduction context id logic 
id logic defined attempt cope epistemological challenges logic programming gives answers epistemological questions raised section 
mentioned earlier section abductive logic framework ic natural embedding id logic 
represents definition non abducible predicates ic represents set classical logic assertions 
view alp study abduction context id logic 
id logic defined attempt cope epistemological challenges logic programming gives answers epistemological questions raised section 
computational level currently developing system called system integrating features special attention search abductive computation :10.1.1.21.4452
computation selection evaluation choice points guided information obtained constraint store associated abductive solution 
information high level search avoid branches entering 
result robust modular system capable solve ectively wider range problems older systems 
application domain experiments system currently focused scheduling planning applications 
console theseider role abduction database view updating 
journal intelligent information systems vol 
pp 

:10.1.1.31.9982
de denecker bruynooghe 
generation pre interpretations detecting unsolvable planning problems 
proceedings workshop model automated reasoning th international joint conference artificial intelligence pages 

american association artificial intelligence aaai press 

denecker 
extending classical logic inductive definitions 
lloyd editor international conference computational logic cl volume lecture notes artificial intelligence pages london july :10.1.1.21.4452
springer 

denecker de schreye 
sldnfa abductive procedure normal abductive programs 
sldnfa abductive procedure normal abductive programs 
apt editor proc 
international joint conference symposium logic programming pages 
mit press 
:10.1.1.21.4452
denecker de schreye 
representing incomplete knowledge abductive logic programming 
proc 
international symposium logic programming pages 

denecker van de schreye 
event calculus protocol specification 
experiment 
maher editor international joint conference symposium logic programming pages :10.1.1.21.4452
mit press 

marc denecker maurice bruynooghe victor marek 
logic programming revisited logic programs inductive definitions 
international conference logic programming 

thomas eiter georg gottlob nicola leone 
abduction logic programs semantics complexity 
theoretical computer science :10.1.1.21.4452

thomas eiter wolfgang nicola leone gerald pfeifer 
declarative problem solving dlv system 
jack minker editor logic artificial intelligence 
symposium automated abduction stanford 

inoue 
hypothetical reasoning logic programs 
journal logic programming :10.1.1.21.4452

inoue 
simple characterization extended abduction 
proceedings international conference computational logic lecture notes artificial intelligence pages springer :10.1.1.21.4452
journal logic programming :10.1.1.21.4452

inoue 
simple characterization extended abduction 
proceedings international conference computational logic lecture notes artificial intelligence pages springer :10.1.1.21.4452

inoue ohta 
bottom abduction model generation 
technical report tr institute new generation computer technology japan 

kakas michael integrating abductive constraint logic programming 
proc 
international logic programming conference pp 
:10.1.1.31.9982

kakas michael 
air crew scheduling abduction 
proceedings pp 
proceedings logic programming non monotonic reasoning lpnmr 
kakas 
abductive concept learning 
new generation computing vol 
pp :10.1.1.21.4452


kakas van nu marc denecker 
system problem solving abduction 
lloyd 
eds procs 
int 
conf 
computational logic cl london uk pages lnai springer :10.1.1.21.4452:10.1.1.31.9982

lloyd 
foundations logic programming 
springer verlag 
journal logic programming special issue alp 

sakama inoue 
alternative approach semantics disjunctive logic programs deductive databases 
journal automated reasoning :10.1.1.31.9982

sadri toni 
dialogues negotiation agent varieties dialogue sequences 
pre proc 

satoh computing minimal revised logic program abduction 
proc 
international workshop principles software evolution pp 
:10.1.1.21.4452

satoh level abduction decide similarity cases 
proc 
ecai pp 

satoh computing abduction tms 
proc 
iclp pp 
:10.1.1.21.4452

satoh query evaluation method abductive logic programming 
proc 
jicslp pp 

toni 
automated reasoning collective information management 
proc 
international workshop community interactive systems conjunction ac annual conference ec programme :10.1.1.31.9982
van denecker de schreye 
representing continuous change abductive event calculus 
proc 
international conference logic programming 
van nu marc denecker 
problem solving id logic aggregates experiments 
denecker kakas toni editors th int 
workshop non monotonic reasoning nmr session abduction pages colorado usa april 
:10.1.1.21.4452
van nu kakas system programming abduction 
proceedings lpnmr lnai vol 
pp 
springer verlag 
