environments multiagent systems state art research challenges danny weyns van dyke parunak fabien michel tom holvoet jacques ferber leuven leuven belgium danny weyns tom holvoet cs kuleuven ac institute ann arbor mi usa van parunak org lirmm cnrs montpellier montpellier cedex france ferber lirmm fr 
generally accepted environment essential compound multiagent systems mass 
environment typically assigned limited responsibilities neglected entirely overlooking rich potential paradigm mass opportunities environments offer researched domain situated mass complex principles concepts responsibilities environment interplay agents environment fully clarified 
give overview state art environments mass survey discusses relevant research tracks environments explored far 
track illustrated number representative contributions research community 
study results research identify set core concerns environments divided classes concerns related structure environment concerns related activity environment 
conclude list number research challenges opinion important research environments mas 
general agreement multiagent research community environments essential multiagent systems mass 
researchers neglect integrate environment primary abstraction models tools mass minimize responsibilities 
consequence rich potential applications techniques developed mass overlooked 
popular frameworks jade jack retsina zeus reduce environment message transport system broker infrastructure 
known methodologies message prometheus tropos offer support basic elements environment fail consider environment class entity 
standard literature mass weyns 
eds mas lnai pp 

springer verlag berlin heidelberg weyns education including deals briefly topic environments 
fipa specifications hard find functionality environment message transport broker systems 
restricting interaction inter agent communication neglects rich potential possibilities paradigm mass researchers working domain situated mass traditionally integrate environment class entity mas 
situated mass environment active entity processes change state independent activity embedded agents 
inspired biological systems researchers shown environment serve robust self revising shared memory agents 
individual agents continuously keeping track knowledge system 
enables agents environment excellent medium indirect coordination 
gradient fields marks environment guide agents local context facilitate coordination community agents decentralized fashion 
practical applications shown environment contribute manage complex problems 
examples domains supply chain systems network support peer peer systems manufacturing control multiagent simulation exploitation environment mass results better manageable solutions promising paradigm deal increasing complexity dynamism system infrastructure advanced problem domains ad hoc networks ubiquitous computing 
despite large amount domain situated mass just understanding complex principles concepts related environment interplay agents environment 
aims contribute ways 
give overview state art environments mass study results research identify set core concerns environments second contribution 
third outline number research challenges opinion important development environments mass organization sect 
start overview state art environments mass studying mas literature focus environments tough job 
study encountered types difficulties term environment different meanings causing lot confusion functionalities associated environment treated implicitly integrated mas ad hoc manner 
confusion environment comprises mainly caused mixing concepts infrastructure 
researchers refer environment logical entity mas agents objects resources embedded 
notion environment refer environments multiagent systems software infrastructure mas executed 
environment refers underlying hardware infrastructure mas runs 
fact functionalities environment treated implicitly ad hoc manner indicates general mas research community fails treat environment class entity 
defines class module program building block independent piece software 
provides abstraction information hiding mechanism module implementation changed requiring change modules environment general treated independent building block encapsulates clear cut responsibilities mas irrespective agents 
starting perspective overview state art environments mass discuss sect 
just summary representative papers topic environments mass fact number research papers devoted environment limited 
overview reflection mas research literature put spotlight models concepts associated environment 
survey structured follows general models environments russell norvig ferber odell environments mobile agents inter agent facilities communication infrastructure huhns stephens fipa jade retsina models indirect interaction classical blackboard communication tuple interaction models javaspaces lime stigmergy synthetic ecosystems network routing interaction models related space mass environment organizational layer agr agent environment interaction perception environment robocup soccer server model active perception dealing actions environment synchronous model action action model regional synchronization task environments wooldridge environments agent oriented methodologies gaia track selected number relevant contributions research community specified brackets 
primary goal survey complete give overview wide range different conceptions associated environment mass various uses 
sect 
extract listed research tracks set core concerns environments mass divided concerns classes concerns related structure environment structuring resources ontology concerns related activity environment communication actions perception environmental processes weyns concern represents logical functionality environment may natural responsibility 
goal logical functionalities explicit concerns environments class entities 
want underline proposed list concerns intended complete 
aim give initial impetus explore rich potential environments mass sect 
outline number research challenges opinion important development environments mass divided list categories definition scope environments agent environment interrelationship engineering environments category discusses number applicable research challenges 
challenges may serve source inspiration exploration environments mass sect 
draw 
conventions 
remainder style conventions quotations put quotation marks specific terms literature marked 
terms concepts want emphasize marked italic 
environments mass survey state art section give overview number important research tracks way include notion environment 
start discussing couple general models environments proposed literature 
zoom various concepts functionalities related inter agent facilities environment agent environment interaction 
conclude section discussing position environments agentoriented software engineering 
track illustrated number relevant contributions research community 
general models environments start study environments mass number representative models environments proposed research community 
russell norvig 
chapter russell norvig discuss intelligent agent relates environment agent viewed perceiving environment sensors acting environment effectors generally acknowledged relationship agent environment schematically depicted fig 

environments multiagent systems sensors environment percepts actions agent effectors fig 

agent interaction environment russell norvig discuss number key properties environments adopted researchers domain accessible versus inaccessible indicates agents access complete state environment 
deterministic versus nondeterministic indicates state change environment uniquely determined current state actions selected agents 
static versus dynamic indicates environment change agent 
discrete versus continuous indicates number percepts actions limited 
complex class environments inaccessible nondeterministic dynamic continuous 
properties list properties typically occurring mass russell norvig define generic environment program see fig 

program periodically gives agents percepts receives back run environment state update fn agents termination inputs state initial state environment update fn function modify environment agents set agents termination predicate test done repeat agent agents percept agent get percept agent state agent agents action agent program agent percept agent state update fn actions agents state termination state fig 

generic environment program weyns tions 
program updates state environment actions agents possibly dynamic processes environment considered agents 
simple program environments clearly illustrates basic relationship agents environment 
ferber 
ferber discusses modelling environments mas length 
ferber environment represented single monolithic system centralized environment set cells assembled network distributed environment 
centralized environment agents access structure 
distributed environment cell behaves centralized environment miniature 
cell distributed environment differs number ways centralized environment state cell distributed environment depends surrounding cells perception agents distributed environment typically goes cell agents move cell cell agent link cells managed propagation signals network cells managed 
orthogonal difference centralized distributed representation environment ferber distinguishes generalized specialized models environments 
generalized model independent kind actions performed agents 
specialized model characterized defined set actions 
ferber distinguishes purely communicative mass agents communicate message transfer purely situated mass agents act environment combination communicating situated mass central ferber model environment way actions modelled 
action model ferber distinguishes influences reactions influences 
influences come inside agents attempts modify course events world 
reactions result state changes produced environment combining influences agents local state environment laws world 
clear distinction products agents behavior reaction environment provides way handle simultaneous activity mas 
ferber uses formalism block representation interactive components model mas set interconnected components exchange messages links 
components encapsulate behavior composed hierarchically 
fig 
depicts model combined communicating situated mas notation 
model depicted fig 
activity cycle mas starts environment sends perceptions agents 
soon synchronizer sends synchronization perceptions signals agents agents triggered interpret perceptions 
agent produces influence environment possibly transmits message agent 
agent informs synchronizer finished action sending synchronization actions message 
agents sent synchronization actions messages synchronizer sends synchronization reactions message environ environments multiagent systems io dh je aii ca jh aii ca jh io dh je dh ah io dh je je ca ha aii ca jh aii ca io dh je ha je ha je aii ca ej ca ha aii ca ka ai fig 

model communicating situated mas ment simultaneously sends synchronization message transmission message routing unit 
consequence environment calculates reactions collected influences state changes environment message routing unit delivers messages 
reactions calculated environment sends reactions message synchronizer 
analogously message routing unit sends message transmission messages delivered 
environment sends perceptions agents cycle repeats 
mas model fig 
messages synchronized actions messages transmitted time influences 
variant model discussed 
odell classic environment modelling mas 
odell colleagues environment provides conditions entity agent object exists 
authors distinguish physical environment communication environment 
physical environment provides laws rules constraints policies govern support physical existence agents objects 
example law agent system agents allowed occupy place time 
accordance environment defined tuple state 
state set values completely define environment including agents objects environment 
indicates environment active entity 
process change state independently actions embedded agents 
primary purpose implement dynamism environment aggregation diffusion evaporation pheromones ant agents weyns coordinate 
odell colleagues argue common processing platform 
provide foundation agent applications build leverage specific environmental requirements conclude spite acronym fipa agent platform architecture focusses entirely electronic environment address physical environment 
address real potential active environment 
get powerful interaction communication environment provides principles processes govern support exchange ideas knowledge information functions structures commonly employed exchange communication roles groups interaction protocols roles groups 
basically communication information entity 
difference exists transmission communication 
communication requires information transmitted agent results state change act sensing deciding may simply choose 
interesting point view related issue discussed 
colleagues propose notion behavioral implicit communication bic form communication exploits environmental properties agents capacity interpret actions 
enable bic environment needs support observability actions agents 
odell colleagues define agent social environment communication environment agents interact coordinated manner 
social environment consists social units groups agent participates roles employed social interaction members play roles social groups 
group empty agents participate group collection contain single participating agent multiple agents 
groups unique identity system 
groups social actors business organization interacts sector groups industry 
authors define role representation agent function service identification group 
roles determine patterns dependencies interactions agents 
environments mobile agents 
mid nineties mobile agents active area research development communities 
mobile agents ability migrate autonomously network principle code mobility 
mobile agent capable suspend execution node arbitrary moment particular points life time move code execution state node resume execution seamlessly 
mobile agent bound network host begins execution 
permits mobile agent move destination node contains resources services wants interact 
mobile agents provide flexibility inside distributed network reduce network load optimize service performance 
support environments multiagent systems ca ech je ca ca ace je ace fig 

structure distributed agent environment ity introduces additional requirements multiagent platform 
decade platforms mobile agents developed 
representative examples aglets ibm voyager objectspace grasshopper ajanta university minnesota soma developed university bologna 
mobile agent platforms realize distributed processing environment usually referred distributed agent environment dae 
typically support hierarchy locality abstractions model physical network resources 
fig 
depicts overview dae 
white agents symbolize mobile agents gray symbolize stationary agents 
host agent system run support execution agents 
agent system provides places 
place executing context offers specific services 
example trading place agents offer buy information service access 
region groups number agent systems typically local area network 
region region registry maintains information registered agent systems places hosted agents 
current location mobile agents updated corresponding region registry migration 
terminology fig 
region place agent system standardized omg standard 
enumerates number common capabilities mobile agent platforms 
agent execution basic provisions put incoming agents execution account binding local resources 

transport mobility support facilitate network transport agent code execution state 
weyns 
unique identification support generation unique agent identifiers scope entire internet 

communication support enable agents communicate platform services 

security support security issues authentication access control resources integrity guarantees code state transfer untrusted network 

management enable system administrators interact system monitor agents interrupt execution agent task 
important issue mobile agent systems interoperability 
interoperability permits integration heterogeneous agent systems legacy systems 
obtain interoperability platforms mobile agents comply main standards omg standard fipa standard 
inter agent facilities section zoom various concepts functionalities related inter agent facilities environment 
organized material line taxonomy agent interaction mechanisms proposed 
start studying traditional infrastructure direct message transfer agents 
commonly form direct message flow peer peer conversations distinguished agent commands subordinate example 
discuss models indirect interaction including blackboard systems tuple interaction models stigmergy 
conclude look models environment serves organizational layer 
communication infrastructure 
communication doubt basic aspect mas 
section focus communication infrastructure message transfer agents 
start general reflections agent communication huhns stephens 
look fipa agent platform communication 
connection discuss concrete architectures communication fipa compliant middleware platform jade retsina mas infrastructure 
huhns stephens 
nd chapter huhns stephens discuss characteristics concerns multiagent environments 
authors list characteristics 
multiagent environments provide infrastructure specifying communication interaction protocols 
multiagent environments typically open single centralized designer 
multiagent environments contain agents autonomous distributed may self interested cooperative authors list brief summary number concerns multiagent execution environments environments multiagent systems ca ca jb ca ca eha ho ej aii ca hj aii ca aii ca hj aii ca hj ca ca ca ca jb eha ho ej fig 

fipa agent platform model 
design autonomy relates platform interaction protocols agent architecture 
communication infrastructure relates type communication medium type connection 
directory service white yellow pages 
message protocol refers language technology cor ba 
mediating security services support needed transactions authentication 
operations support refers archiving stephens look environment computational infrastructure enables agents communicate 
fipa 
fipa foundation intelligent physical agents agent platform model illustrates typical communication infrastructure direct message exchange see fig 

key building block environment fipa agent platform 
agent platform includes run time environment defines life cycle agent system executes java virtual machine 
building blocks agent platform directory facilitator acting yellow pages service agents advertise discover services offerings agent management system enables agents register platform locate white pages service controls resource usage message transport system communication service local inter platform message exchange 
message transport system specified great detail 
specifies transport protocols low level details wired weyns wireless transfer messages interfaces different agent platforms message transport envelopes encoding metadata required message forwarding individual transport protocols 
lastly message transport system includes specifications acl message representations define syntax sending messages 
standard message transport fipa provides standards interagent communication defines precise semantics exchanged bits 
specifications divided sections message structure specification defines structure fipa acl fipa agent communication language messages library performatives defining semantics different communicative acts number protocols message sequences applicable agent systems content language fipa messages called fipa cl fipa content language 
note fipa define ontology language express domain knowledge 
increasing number agent platforms comply fipa standard including jack jade zeus 
jade 
fig 
depicts jade java agent development environment architecture 
jade pure java middleware platform intended development distributed multiagent applications peer peer communication 
jade includes java classes support development application agents run time environment provides basic services agents execute 
instance jade run time called container set containers called platform 
platform provides layer hides agents complexity underlying execution system 
jade includes naming service ensuring agent unique name yellow pages service distributed multiple hosts 
je ca ff je ah ah ah ah ajm je fig 

jade architecture environments multiagent systems agents dynamically discover communicate exchanging asynchronous messages 
structure messages complies fipa acl language definition 
jade provides set skeletons typical interaction protocols 
platform supports mobility code execution state exclusive data jvm java virtual machine stack 
enables agents running host migrate different remote host restart execution point stopped 
jade widely academic community companies jade internal projects including telecom italy technologies ag rockwell automation 
retsina 
retsina reusable environment task structured intelligent network agents known mas infrastructure see fig 

retsina open mas infrastructure supports communities heterogeneous agents 
retsina mas infrastructure build layers 
operating environment provides platform infrastructure components agents run 
retsina supports broad range execution platforms automatically handles different types network transport layers 
communication infrastructure provides types communication channels message transfer peers multicast ca ffe ah je ffe ai ai ca ai bh je bh ei aii ca je de ai ajm je ij hj fig 

retsina mas infrastructure weyns discovery process agents find infrastructural components 
acl retsina kqml knowledge query manipulation language 
retsina provides ontology derived wordnet ontology protocol engine protocol language 
mas management services offer tool support monitor activity agents debug launch applications 
retsina provides service performance monitoring simulation 
security module supports agent authentication secure communication integrity retsina infrastructure components 
basic high level infrastructural support offered agent name services 
ans provides means away physical locations mapping agent identifiers network addresses 
participate transactions agents provide agents addresses cache removing need unnecessary lookups 
second level infrastructural support offered middle agents 
provide mapping agents services 
service providers advertise services agents request get contact information relevant providers 
advertisement requests formulated special language called larks language advertisement request knowledge sharing 
retsina oaa top retsina mas architecture bridges retsina mas infrastructure oaa platform open agent architecture 
due fundamental differences architectures inter agent interactions translated 
models indirect interaction 
section discuss interaction models entities interact indirectly kind communication abstraction 
indirect mediated interaction characterized number fundamental properties name uncoupling space uncoupling time uncoupling 
order communicate interacting entities know explicitly place exist time 
especially open highly dynamic distributed systems properties enable flexible robust interaction cooperating entities 
interesting attempt define unified framework indirect interaction coordination artifacts omicini ricci 
classical blackboard communication infrastructure 
blackboard systems type mediated interaction models proposed ai researchers 
blackboard intermediary data repository enables cooperating software modules communicate indirectly anonymously 
classic blackboard system consists main components see fig 

knowledge sources independent computational modules contain expertise solve problem 

blackboard system wide data repository containing shared data interaction knowledge sources happens blackboard 
environments multiagent systems kh ai jh da fig 

components classical blackboard system 
control component runtime decisions course problem solving 
currently executing knowledge source completes control component selects appropriate pending knowledge source execution 
guide selection knowledge sources provide control component necessary control knowledge 
traditional mass contrast blackboard systems emphasize autonomy agents coordinated interaction agents distribution central data repository organization emergent global phenomenon 
mass blackboard systems technologies different application domains 
traditional blackboard systems appropriate closely collaborating problem solving focus mass solving large scale distributed problems 
tuple interaction models 
contrast blackboard systems tuple technologies associative access shared dataspace communication synchronization purposes 
introduced linda 
linda coordination language coordination defined spirit separation concerns computation internal behavior active entities system coordination management interdependent active entities especially communication synchronization separated possible 
linda attains providing coordination language enables communication agents 
agents linda communicate putting tuples removing shared space tuplespace 
linda language essence composed primitives allows take tuple tuplespace matches template allows put tuple tuplespace rd allows read tuple template 
years variants distributed computing appeared mars sun javaspaces lime 
take closer look 
weyns javaspaces 
tuplespace model developed part base sun jini 
javaspaces fairly straightforward translation original linda model distributed setting 
javaspaces offers possibility remotely accessible 
developed context java programming language tuples objects put tuplespace 
javaspaces adds possibility distributed transactions tuplespace 
fact hard problem raised busi 
busi showed serializability transactions guaranteed javaspaces system 
javaspaces remains important supported sun discovery mechanism jini system 
lime 
linda mobile environment middleware system allows communication agents similar way linda 
built operate mobile environment opposed linda conceived parallel computing 
communicating centralized tuplespace lime agent carries tuplespace 
traditional tuplespace operations available augmented operations non blocking read non blocking operations 
originality approach agents reside connected host merged transparently agents illusion locally shared tuplespace 
lime middleware applications agents mobile moving host host hosts mobile physically moving 
order possible location parameter added operations agents select tuplespace wish interact 
cope dynamic environment reactions defined code executed tuplespace specific tuples inserted tuplespace 
years number tuple systems proposed ad hoc mobile computing 
add mechanisms sharing tuples 
maintains agent defined view host surroundings 
view date representation state neighboring nodes network representation maintained network contents change 
done efficiently interface asynchronous operations block result returned available opposed synchronous interface common tuplespace systems 
system view similarly description neighboring hosts network system allows agents execute linda operations gathered view specification 
built lime system 
takes different approach 
middleware maintains distributed tuples distributed tuple example represent gradient field decays propagated network 
tuple spread different distributed middleware maintains tuple network topology changes 
environments multiagent systems stigmergy 
term stigmergy coined grass explain nest construction colonies 
concept indicates individual entities interact indirectly shared environment individual modifies environment respond modification modify turn 
discusses uses stigmergy mas 
popular means indirect interaction pheromones 
pheromone chemical substance software counterpart deposited environment 
pheromone interesting properties aggregates newly dropped pheromone merges reinforces existing pheromone diffuses meaning propagates local environment evaporates meaning decays time 
pheromone representation shared agent knowledge spreads nearby agents allowing local information transfer reinforced agents allowing mas incrementally build solution disappears time natural way cope dynamism environment 
applications stigmergy include solving constraint problems dorigo ant colony optimization routing calls telecommunication networks manufacturing control peer peer systems 
application examples depth technical discussion refer 
take closer look representative uses stigmergy 
zoom synthetic ecosystems look telecommunication network routing infrastructure 
synthetic ecosystem 
brueckner considers synthetic ecosystem hand agents control physical entities real world hand agents act software environment 
enable indirect coordination software agents way social ants coordinate software environment emulates services provided real world ants 
part software environment realizing services called pheromone infrastructure 
pheromone infrastructure models discrete spatial dimension 
comprises finite set places topological structure linking places 
link connecting places downstream upstream direction 
place set downstream set upstream neighbor places directly linked 
agent synthetic ecosystem mapped place current location agent may change time 
pheromone infrastructure models finite set pheromone types 
pheromone type specification software object comprising strength slot real number data slots 
pheromone type propagation direction downstream upstream specified 
pheromone infrastructure handles finite set software pheromones pheromone type 
data slot strength slot assigned value finite domain form pheromone type direction strength value value strength slot interpreted specific amount pheromone 
different pheromones synthetic ecosystem may stored place 
weyns agent may perform activities current place pheromone infrastructure access agents located place 
perceive neighbor places place 
sample local strength values specified set pheromones 
initiate change local strength specified pheromone specified value 
pheromone infrastructure manipulates values strength slot pheromones place way 
external input aggregation request agent strength specified pheromone changed specified value 

internal propagation propagation diffusion assume external input strength pheromone place input event immediately propagated neighbors propagation direction local strength changed input weaker input propagates neighbors 
stepwise weakening input influenced propagation parameter 

changes caused external input propagation account strength pheromone constantly reduced absolute value evaporation 
reduction influenced evaporation parameter pheromone 
major difference algorithms realized pheromone infrastructure observed nature 
ant deposits pheromones ground evaporation 
particle particle pheromone moves continuous space driven brownian motion 
initial location amount pheromones reduced builds vanishes completely 
discrete space pheromone infrastructure propagated pheromones specific locations settle 
furthermore structure space homogeneous 
places pheromones may propagated places places propagation possible 
consequence mechanisms evaporation propagation pheromones modelled separately 
continuously exchanging particles places wave input events running links triggered original input agent 
pheromone infrastructure realizes application independent support synthetic ecosystems designed number design principles decentralization locality parallelism indirect communication information sharing feedback randomization forgetting 
principles synthetic ecosystems proposed pheromone infrastructure applied manufacturing control systems 
parunak colleagues applied digital pheromones practical applications overview refer 
network routing 
bonabeau colleagues mechanism routing load balancing telecommunication networks environments multiagent systems builds schoonderwoerd gu rin 
routing allows calls transmitted source destination sequence intermediate switching nodes 
pathway message short possible account fluctuations user traffic changes network structure link switch failures 
provide fault tolerance spreading computational load routing functionality implemented decentralized way 
social insects exhibit flexibility robustness solving difficult problems highly distributed way 
authors exploit knowledge tackle routing problem telecommunication networks 
original routing algorithm schoonderwoerd node ni network nodes neighbors links bidirectional characterized routing table ri columns row corresponds destination node column node 
gives probability message destination node nl routed node ni node nm 
agents go source node destination node moving node node 
node agent move selected routing table current node 
agents update routing tables nodes viewing node origin destination node agents certain knowledge portion network come modify routing tables 
part modification influence routing messages agents portion network destination 
approach avoids requiring agents go back way node origin update intermediate routing tables 
precisely agent modifies row corresponding source node viewed destination node 
ns source node agent nm node just came ni current node time entry ri reinforced entries ri row decay 
modification determined reinforcement parameter depends agent characteristics 
influence agent depend agent performing aging modulate agent waiting long time route destination node means nodes visited links congested decrease agent age 
idea gu rin bonabeau colleagues propose update row corresponds agent source node rows corresponding intermediate nodes visited agent 
reinforcement entry associated name discounted factor depends agent age relative time visited node 
shows extended approach yields significantly better performance results 
authors point simplifications previously models state realistic tests complex network models needed 
deeper understanding limits constraints communication networks necessary 
weyns interaction models related space mass ancestors agent models providing explicit representation spatial structure environment cellular automata ca 
ca model provides regular lattice automata characterized homogeneous state transition rule 
related structure naturally suited represent abstraction physical environment ca widely model problems spatial features play important role 
approaches providing integration ca agent systems proposed see 
platforms mas simulation developed line swarm implement spatial structure environment terms regular grids 
multilayered multi agent situated system mas model providing explicit representation agents environment interaction model strongly related agents context 
environment modelled multi layered structure layer represented connected graph sites 
layers may represent abstractions physical environment represent logical aspects organizational structure 
layers specific connections interfaces defined specify information generated layers may propagate different 
agents interact reaction adjacent entities emit fields diffused environment perceived agents 
experiments simulation complex systems model proposed applications ubiquitous computing scenario 
type application requires software architectures tools models comprising notion space 
approaches sharing viewpoint important mention fields computational fields leonardo zambonelli 
fields supports coordination agents environment means distributed data structures fields spread agents elements environment 
agents sense intensity fields constantly guided moving local minima 
environment organizational layer 
particular interest organizational concepts mas organizations groups communities roles 
organizational perspective mas naturally considered designed computational organization defines framework agent activities organization imposes set constrains behavior agents offers set facilities services agents may 
ferber colleagues distinction agent centered mas organizational centered mas 
organization acts dynamic framework agents may enter leave organizations environment resources services communications tasks concepts groups roles 
thinking terms organizational design differs agent centered approach dominant years 
building oc environments multiagent systems mas designer concentrates organizational level specifying structures pattern activities agents abstractions groups roles interaction protocols authority constraints roles stage mental issues beliefs goals considered 
organization specified mas developer focusses agent internal architecture 
models proposed 
briefly examine agr model previously called aalaadin simple organizational model 
agr 
agr model primitive concepts agent group role 
agr model agents play roles groups 
agent may play multiple roles time may member groups 
group part organization context patterns activity 
agents allowed communicate agents group 
suppose agent group wants communicate agent group belong belong communication established agent joins group agent joins group agent exists member groups act mediator communication 
restriction scope communication supports creation defined organizational structures hierarchies 
groups act environments agents 
agent may enter leave group human may enter leave house social structure firm lab 
group agents provide services facilities agents group may 
partitioning society agents groups enables designer build secure systems secured groups agents protect requesting authorization joined 
agr provides set diagrams describe organizations 
diagram group represented oval imitates board 
agents represented positioned board cut board belong groups 
role represented hexagon line links role agents 
fig 
illustrates concrete organization diagram 
exam fig 

diagram agr describing concrete organizations weyns fig 

organizational sequence diagram agr ple agent member groups agent plays roles group role group 
organizational sequence diagram describes dynamics organizations temporal relationships organizational events creation group agent enters group leaves acquisition role 
organizational sequence diagram seen extension uml sequence diagram incorporates dynamics roles groups 
contrary auml sequence diagram life line agent represented single vertical line organizational sequence diagram life line agent may consists possibly parallel segments 
segment describes life agent playing specific role specific group 
parallel segments represent fact agent plays roles simultaneously 
fig 
depicts example organizational sequence diagram 
madkit multiagent platform designed agr model 
madkit groups roles core mechanisms building launching deploying simulating observing multiagent programs 
practical applications proven usefulness madkit underlying agr model 
extensions agr 
agr organizations encompass notions situatedness action 
integrate notion situatedness agr spatial relationship added group 
extension raise difficult problems semantics distance relation roles role representing social location coordinates represent spatial locations 
approach followed far 
include notion action environments multiagent systems agr necessary reify concept environment integrate organizational concepts 
parunak odell propose extension agr reifying environment 
model agent member possibly groups element environment 
interesting needs exploration 
ferber michel propose approach consider organization special kind environmental zone called area 
actions associated organizations communicating entering group leaving playing role creating group 
summary main idea research track agr offer organizational centered approach build mass agr designer considers organization mas accessible organizational structure agents behave designer builds agent system roles agents play organization 
designer agent internal architectural details 
agent environment interactions section discuss different models related agent environment interaction 
look agents perception environment 
zoom couple models actions 
section concludes brief discussion notion task environments 
perception environment 
perception ability agent observe neighborhood resulting percept environment 
percepts describe sensed environment form expressions understood agent 
agents percepts update knowledge world directly decision making 
case agent situated physical world perception implemented hardware example video camera laser sensor mobile agent 
software agents situated virtual environment perception implemented software 
perception common mas relatively little research done area 
research perception robotics cognitive science 
virtual environments aspects perception modelled explicitly couple theories generic models perception proposed 
illustrate perception robocup soccer server discuss domain independent model active perception 
robocup soccer server 
robocup soccer server supports kinds sensors sensor model aural sensor visual sensor body sensor 
aural sensor detects messages sent referee players 
messages received immediately 
format aural sensor message hear ime sender message weyns time indicates current time sender refers sender message content received message 
server parameters affect aural sensor 
player hear message player hear capacity hear decay hear capacity player decreased number message heard 
cycle hear capacity increased hear limited hear max 
players receive message time 
message player transmitted players audio cut dist meters player 
visual sensor reports objects currently seen player 
information automatically sent player sense step fixed period time 
visual information arrives server format see distance direction refers name observed object distance direction self explaining 
refers information relative velocity target object 
included observed object player indicate head body direction player relative observing player 
visible sector player dependent parameters sense step determines basic time step received visible information visible angle player view cone visible distance number meters player able see object 
object distance view cone player perceive type object ball player goal exact name object 
player influence frequency quality information changing 
body sensor reports current physical status player 
information automatically sent player sense body step 
transmitted information contains different kinds player specific information approximation player current speed relative direction player head counter indicates number move commands player executed far 
robocup soccer server supports rich flexible model perception model confined robocup domain 
model active perception 
weyns holvoet propose generic model active perception focusses software agents situated virtual environment 
active perception enables agent direct perception relevant aspects environment current task facilitating better situation awareness helping keep processing perceived data control 
authors state model generic sense independent domain specific topology environment offers reusable core abstractions active perception situated mass offers support model domain specific properties perception 
fig 
gives high level overview model 
model de environments multiagent systems mi ai ja je ah ca ah ah fig 

model active perception composes active perception functional modules sensing interpreting filtering 
sensing maps state environment representation 
representation defined structured assembly symbols refers back environment external agent 
mapping state representation depends factors 
agent select set foci 
focus characterized sensibility may properties operating range resolution focus selection enables agent direct perception allows sense environment specific types information 
ant mas agent may interested visible perception environment agent may interested pheromones 
sense desired type information agents select different appropriate focus 
second representation state composed set perceptual laws 
perceptual law expression constrains composition representation requirements modelled domain 
perceptual laws instrument designer model domain specific constraints perception 
contrary physical sensing incorporates constraints naturally constraints modelled explicitly software mass examples perceptual law specifies area obstacle scope perceiving agent law certain conditions adds noise perception 
modelling domain specific sensing perceptual laws permit designer introduce synthetic constraints perception 
reasons efficiency introduce default limits perception order restrain amount information agents process 
important notice model supports parallel sensing environment 
agents select different foci simultaneously sensing typically results compound representation environment 
property important enable agents sense environment multi mode manner 
second functionality active perception interpretation 
interpretation maps representation percept 
interpret representation agents weyns descriptions 
descriptions blueprints enable agents extract percepts representations 
percepts describe sensed environment form expressions understood internal machinery agent 
consider representation contains number similar objects certain area 
agent interprets representation may description interpret distinguished objects description interpret group objects cluster 
third final functionality active perception filtering 
selecting set filters agent able select data items percept match specific selection criteria 
filter imposes conditions elements percept 
conditions determine elements percept pass filter 
agent selected focus perceive environment visually currently interested agents perceptual range select appropriate filter matches agents percept 
important concerns dynamism perception 
context open systems important components perception system change changed dynamically engineer agents 
authors model active perception agent change set selected foci filters dynamically ongoing tasks 
hand perceptual laws pre defined designer 
perceptual laws cope unpredictable changes environment 
deal run time changes domain specific constraints perception model extended infrastructure adapt set perceptual laws changes system replace laws dynamically 
models actions 
classical approach deal actions environmental transformation states action defined transition state operator execution produces new state 
observational point view result behavior agent action directly modelled modifying environmental state variables 
approach suffices classical ai agent acting fails mass agents acting concurrently shared environment 
ferber indicates number weaknesses classical approach action 
limitation elementary actions described 
complex composite actions hardly described 
harder problem static nature actions state transformations 
dynamic processes environment evaporation pheromones described transformation obtained application actions 
drawback lack flexible support simultaneous actions 
deal possible collision explicit tests possible consequences added action code verify agents step location 
mas community assumes actions different agents carried parallel classical models action offer environments multiagent systems adequate formal basis represent collective actions 
approach distinguish actions agents consequence actions 
traditional approaches actions leave description actions happen aside take account results actions 
zoom models action deal drawbacks 
zoom action model situated mass ferber ller described 
look action model weyns holvoet described builds ferber ller model 
scarce done explicit models action point bordini da rocha costa presents xml description language actions effects called environment description language multi agent simulations 
background information action models refer 
synchronous model action 
action model ferber ller main principles 
distinguishes influences reactions influences 
influences come inside agents attempts modify course events world 
reactions result state changes produced environment combining influences agents local state environment laws world 
clear distinction products agents behavior reaction environment enables handling simultaneous actions 
second model decomposes system dynamics parts dynamics environment dynamics agents situated environment 
third model describes different dynamics mas means state machines 
contrary classical theories state world describe evolution mas ferber ller model evolution described transformation call dynamical state 
dynamical state defined tuple consisting state environment set influences simultaneously produced environment 
evolution mas defined function called cycle step transfers dynamical state dynamical state 
cycle function split sub functions react exec 
set laws world describe state world computed previous state set influences 
addition set operators defined agents allow produce influences environment 
react function takes influences current state world laws produces state world 
exec function produces influences dynamical state 
describe dynamics system ferber ller integrate react exec functions cycle function 
cycle function expresses evolution mas agents cycle function produces new state environment reaction environment set produced influences new set influences produced agents dynamics environment 
global synchronizer responsible weyns synchronization cyclic evolution mas 
synchronizer ensures moment agents treated acting simultaneously environment reacts subsequently handing agents endless loop 
ferber ller model deals complex interactions environment agents solving fundamental problem simultaneous actions elegant way 
model applicable purely reactive agents agents memory 
model basically restricted synchronous mas evolution mas evolves global pace 
influences agents treated happened influence potentially interfere influence 
action model regional synchronization 
alternative centralized synchronization model ferber ller weyns holvoet propose action model regional synchronization 
regional synchronization longer global synchronizer agent equipped local synchronizer 
synchronizer responsible handle synchronization issues associated agent 
action agent synchronizer synchronizes synchronizers neighborhood 
result synchronization algorithm formation group agents called region 
agents region act simultaneously independent agents mas 
algorithm regional synchronization discussed detail 
action model integrates regional synchronization describes dynamics mas composed set agents exist environment act simultaneously locality 
actions invoked agents activities may going environment 
activities denoted ongoing activities 
examples ongoing activities moving object context ant systems pheromone 
weyns holvoet different notion dynamical state ferber ller model 
dynamical state defined tuple consisting state environment set consumptions 
consumption effect environment reserved particular agent 
consumption results reaction environment produced influences agent 
agent consumes consumption consumption absorbed agent food turned energy agent may simply hold element object picked consumption may affect agent state arm robot external force 
dynamics system defined cycle function maps dynamical state dynamical state 
clarify activities invoked agents ongoing activities environment hand reaction environment activities hand cycle function split parts 
part composed sub functions exec apply second part single function react notion consumption introduced ferber 
environments multiagent systems represents reaction environment simultaneously performed activity agents ongoing activities 
exec represents activities invoked agents 
subset simultaneous acting agents consume consumptions produce set influences application operators 
effects ongoing activities environment induced apply function 
depending state environment set ongoing activities produce set influences environment application set parallel composed operators associated ongoing activities 
activities invoked agents ongoing activities environment happen simultaneously influences resulting apply exec combined 
reaction environment simultaneously performed activity agents ongoing activities environment described react function state environment united sets influences set parallel composed laws react determines state environment produces new set consumptions 
evolution dynamical system defined sequence cycles 
cycle cycle function transfers dynamical state dynamical state produces new state environment new set consumptions 
twofold transfer result reaction environment execution set operators invoked subset agents exist system application set operators resulting ongoing activities environment state environment set consumptions set laws world 
comparison 
weyns holvoet compare discussed models action 
obvious differences models definition dynamical state granularity groups synchronized agents 
models compared perspective typical execution reaction cycle situated mass graphically depicted fig 

bba dh je ao aj na je ana ka je je je dh je ah ah ah fig 

comparison model action execution reaction cycle weyns ferber ller model dynamical state composed state influences 
dynamics mas expressed reaction environment set influences subsequently production new set influences state environment laws world 
execution reaction cycle runs point influences collected point influences collected indicated synchronization point ferber ller model fig 

start cycle initiated environment model takes environment centered view mas evolution 
granularity synchronously acting agents ferber ller group agents mas 
agents act global pace influences agents cycle considered happening simultaneously 
ferber ller model agents synchronize passage execution reaction cycle synchronization point ferber ller model act simultaneously 
regional synchronized model action dynamical state composed state consumptions 
dynamics mas expressed subset consumptions production set influences environment subsequently reacts applicable laws updating state producing new set consumptions 
weyns holvoet model execution reaction cycle runs point reactions calculated point reactions calculated indicated synchronization point weyns holvoet model fig 

agents region basis take initiative start cycles model takes agent centered view mas evolution 
model agents different regions consume consumptions independently run asynchronously execution reaction cycle 
weyns holvoet model granularity synchronous acting agents regions synchronized agents 
influences agents region considered happening simultaneously different regions act asynchronously 
weyns holvoet model passage execution reaction cycle agents synchronize synchronization point weyns holvoet model form regions act simultaneously 
task environments 
wooldridge defines task environment tuple env 
environment env triple env set environment states initial state state transformer function 
predicate runs 
run agent environment sequence interleaved environment states actions 
eu ei set environment states ac set actions available agents 
task environment specifies environments multiagent systems properties system agent inhabit environment env 
criteria agent failed succeeded task specification 
wooldridge common types tasks achievement tasks form achieve state affairs maintenance tasks form maintain state affairs 
achievement task specified number goal states 
agent required bring goal states 
known achievement task environment blocks world see 
maintenance task environment task environment agent required keep avoid state affairs 
simple example software agent task maintain set available services particular context 
complex tasks specified combinations achievement maintenance tasks 
known model task environments framework task analysis environment modelling simulation developed decker lesser 
specify reason analyze simulate task environments 
independent agent architecture inherent nature modelled domain 
details refer 
environments agent oriented methodologies popular methodologies message prometheus tropos offer support basic elements environment consider environment class entity 
knowledge methodology analysis design mass considers environment primary abstraction extended version gaia described 
zambonelli colleagues state identifying modelling environment involves determining entities resources mas exploit control consume working achievement organizational goal authors distinguish computational virtual environments web site physical environments manufacturing pipeline 
list issues put forward taken consideration environmental modelling phase 
environmental resources agents effectively sense effect 
environment model distinguish existence possibly constrained accessibility resource 

agent perceive environment 
question refers representation environment circumstances 

existing scenario characterized part environment 
distinction agents environment clear cut 
dynamic environmental resources designer decide modelled agents dynamic resources environment 
weyns gaia identification environmental model part analysis phase intended yield computational representation environment mas situated 
subsequent architectural design phase output environmental model primary role model preliminary interactions model set organizational rules integrated system organizational structure includes real world organization mas situated 
organizational structure complete preliminary role interaction models 
detailed final design phase definition agent model services model derived completed role interaction models 
authors gaia commit specific techniques modelling roles environment interactions outcome gaia process technology neutral specification easily implemented appropriate agent programming framework modern object component framework 
respect development environmental model authors state difficult provide general modelling abstractions general techniques environments different applications different nature related underlying technology authors propose reasonable general approach ambition universal treat environment terms computational resources variables tuples available agents sensing reading values affecting changing values consuming extracting environment environmental model represented list resources associated symbolic name characterized type actions agent perform possibly associated additional textual comments descriptions 
notation fusion notation reads ar readable resource environment var readable resource changes ar variable changed agent authors indicate realistic development scenarios analyst choose provide detailed structured view environmental resources particular specific issues related modelling environmental resources may required enrich complement basic notation 
examples representation logical physical relationships resources environment 
graphical schema may help model identify resource accessed 
dynamics environment 
authors propose additional annotations basic notation deal issue 
dealing priori unknown availability resources 
authors suggest associative access model linda tuple space suit purpose 
deal active components services computer systems part operational environment authors give general guidelines 
environments multiagent systems role active components simply data provider web server computer sensor modelled terms resources 
environment contains components capable perform complex operations active databases active control systems components treated part environment 
concerns environments survey described previous section shows environment includes broad diversity functionalities 
section extract number core concerns environments survey 
focus concerns represent logical functionalities environment 
mentioned section researchers highly different views concept environment causing lot confusing environment comprises 
start disentangle confusion propose layer model mass depicted fig 

ff je ca ji ff je am am ha de ai je na jb bh ij ij ajm bh ij fig 

layer model mass mas application layer typically consists sub layers domain specific application logic containing application environment focus proposed model software agents 
weyns embedded agents supporting mas framework offers highlevel programming abstractions mas developer support communication pheromone infrastructure 
mas application runs top execution platform typically composed generic distributed middleware infrastructure virtual machines execute top operating system 
execution platform mapped physical infrastructure comprises hosts processors connecting network infrastructure 
colleagues identify levels environments application environment execution environment authors application environment provides context agents perform actions communicate acquire information problem solve 
application environment translation problem situation grid world tiles holes tileworld graph structure locations accessible files peer peer file sharing system 
execution environment platform execute mas 
execution environment mapped physical layout hardware jvm mapped single host number jvms mapped different hosts 
model environment agents externally connected application environment placed agents inside application environment emphasizing agents inextricably bound environment agents application environment form abstraction layer run top execution platform maps physical infrastructure 
concerns environment discuss section located mas application layer top layer fig 

distinguish classes concerns concerns related structure environment concerns related activity environment 
concerns may quite natural functionalities environments 
want stress practice concerns put forward dealt implicit ad hoc way 
goal logical functionalities explicit concerns environments class entities 
concern discuss relevant possible mas environment 
set concerns viewed portfolio logical functionalities environment may natural responsibility practice designer decide concerns integrated environment model domain hand 
final want underline proposed list concerns intended complete 
goal give initial impetus explore rich potential environments mass section discuss number research challenges may serve source inspiration exploration 
concerns related structure environment start discussing number concerns related structural features environment 
successively look structuring resources ontology 
environments multiagent systems structuring 
agents objects mas share common environment 
agents objects dynamically interrelated 
role environment define rules relationships exist evolve 
environment acts structuring entity mas 
structuring take different forms spatial see organizational environment structured mediating entity 
structuring fundamental functionality environment 
structure environment design choice depends requirements domain hand dealt explicitly 
resources 
agents environment typically comprises different types objects logical resources 
responsibility environment control access resources 
general resources read perceived modified consumed agents 
extent agents able access particular resource may depend factors nature resource resource current relationship resources agents neighborhood agent resource capabilities agent general access resources described set laws defined domain hand see 
ontology 
chang colleagues state agents able understand environment environment specify ontology provides conceptual representation domain hand 
ontology cover structure environment observable characteristics objects resources agents interrelationships 
symbolically oriented agents explicit ontology available agents enable interpret environment reason 
reactive behavior stigmergic agents designer developer applies ontology encode agents internal structures 
kinds agents implicit ontology enables decisions 
concerns related activity environment discuss number concerns related activity performed environment 
look concerns related activity produced agents communication actions perception 
conclude responsibilities environment related activity produced resources objects 
communication 
stated state art overview communication inextricably bound mass communication take different forms ranging direct message transfer anonymous mediated communication shared space indirect communication stigmergy 
types communication pros cons 
designers aware potency impact type communication solution 
selecting particular type communication architectural choice determined requirements problem domain hand 
weyns actions 
dealing actions mass general complex matter 
allow multiple agents act environment parallel need explicit models deal actions range far scope state changes simple individual manipulation objects 
decade ago hanks pollack cohen raised problem effects simultaneous actions differ effects actions performed sequentially state art section discussed couple models action mass central models distinction products agents behavior hand reaction environment hand set explicitly defined laws govern effects actions agents 
models resolve number fundamental issues respect actions mass dealing actions mas needs extensive research grow full maturity 
perception 
perception implies environment observable entity 
agents able inspect neighborhood 
general agents able inspect environment current preferences 
state art overview discussed examples selective perception foci proposed views proposed 
perception constrained agents capabilities environmental properties fact reflect properties problem domain 
environmental constraints explicit form perceptual laws 
action models wide unexplored field open concern perception 
environmental processes 
activity agents resources objects produce activity environment 
digital pheromone example dynamic structure aggregates additional pheromone dropped diffuses space evaporates time 
examples rolling ball moves local temperature evolves time 
maintaining dynamics important functionality environment see 
challenges conclude list number research challenges opinion important exploration environments mas 
divided list categories issues respect definition scope environments issues respect interrelationship agents environment issues concerning engineering environments mass definition scope environments sect 
noted term environment vague ill defined relation mass ongoing research challenge developing clearer environments multiagent systems understanding mean environment defining requires relating entities 
case environments definition requires relating agents inhabit different application domains 
environments agents 
difference environment agents inhabit 
wide variety distinctions proposed 
examples developer writes specific application agents 
software hardware infrastructure agents run environment 
environment provides logical context agents perform actions communicate acquire information problem solve 
agents autonomous proactively pursue objectives 
environment objectives 
refinement previous suggestion agents achievement goals environment maintenance goals 
environment extensive unbounded agents bounded localized environment 
environment embodies dynamics laws physics problem domain 
agents react laws contingent ways 
environment open inspection 
individual agents opaque 
words environment implements presumed able see domain agents hide local decisions open direct inspection manipulation 
distinctions proposed yield different relative responsibilities agents environment mapped problem domain life cycle design implementation real system 
distinctions deserve formalization analysis 
certainly orthogonal 
truly distinct views relation agent environment 
taxonomy environments 
formal understanding different ways agents related environment classify environments respect 
level understanding enable researchers sure talking kind environment describing systems arguing relative merits alternative approaches 
environments domains 
reason definitions environment mass applied wide range different applications domains impose differing constraints afford different resources interactions agents 
example natural designers mas intended provide packet routing quality service management communications network associate environment existing weyns infrastructure hardware software network agents execute 
domain agent simulation ecosystem environment agents application distinction agent environment driven differences bounded vs unbounded scope vs contingent dynamics 
domain electronic commerce distinction transparent environment opaque agents hide proprietary details individual participants paramount 
taxonomy environments hand develop systematic principles relating specific kind environment particular domain 
number research questions address question relation taxonomy environments taxonomy domains 
include domains need explicit distinction environment agent 
domains particularly suited distinction 
features domains particularly amenable hostile distinction 
particular functions environments valuable regardless application domain 
general specification domain mapped specification particular environment best support mass serving domain 
agent environment interrelationship understanding space possible environments refined need explore detail relation agents environments 
relationship elaborated dimensions architecture protocol topology 
architecture 
applications agents environment software running physical computing system 
relationship agent software environment software software hardware computational substrate 
cases agents may completely dependent environment access computational services environment services provides operating system agents 
cases agents environment may independent access computational services different physical cpu robotic applications interact computational peers 
case question distinguish agents environment particularly important level environment just program executing architecturally level agents 
cases mutually exclusive 
imagine architecture agents environment execute separate cpu services inter agent communications available environments multiagent systems shared environment 
configurations possible case purely physical dimensional arena provides environment soccer robots 
exploration architectural alternatives relating agents environments offers ample scope new discipline software engineering 
protocol 
protocol mean set conventions agents interact environment 
issue protocol governs degree environment open heterogeneous agents agents designed advance knowledge environment 
protocols vary dimensions physical vs digital natural vs arbitrary 
physical protocol agents physical sensors effectors change sense state physical world 
digital protocol agents need way read write register message mailbox communication channel 
natural protocol structure interaction constrained broader laws physics agent complies laws interact 
arbitrary protocol signs exchanged agents defined engineered language agent understand order interact 
natural protocol open system agents constructed detailed knowledge environment 
combinations dimensions possible illustrated tab 

table 
taxonomy agent environment protocols examples ca ji ah ha ca ja id ha aja ji ei jh 
aj ei aii ho ca jh 
jd ej aja ji ho da ei ja ca ji ca aii cai kcd taxonomy agent environment protocols preliminary offers directions research dimensions distinguish different ways agents interact environments 
dimensions impact degree system open closed 
weyns responsibilities environment services provide increase openness heterogeneous agents 
alternatively applications highly secure environments ensure authorized agents access services 
topology 
characteristic environments define topology agents exist locally 
soccer agent location arena network agent lives specific router information retrieval agent visits database time 
topological constraints simplify agent reasoning restricting range information agent consider locally available system deployment restricting interaction nearby entities enabling low bandwidth communications may pose challenges achieving timely long range interactions 
research questions involving relation agents environment topology include topologies kind environment naturally induce 
robotics environments naturally conform low dimensional manifolds surface earth flying robots atmosphere 
computer networks mapped manifolds typically power law graphs complex structures 
information retrieval applications topology may conform semantic structure natural language 
mean agent local environment 
words topology constrain agent actions 
cases agents may able access information current location topology may able communicate agents remote 
cases direct inter agent communications may restricted agents location 
constraints different topologies impose agent interactions environment environment 
existence phenomena small world shortcuts highly varying node degrees lead interactions vary widely intuitions lead expect low dimensional manifolds planar graphs 
environment responsibility regard locality 
responsible instance enforce locality agent interaction 
agents equally localized agents different degrees scope 
example tree structured environment imagine agent interact directly agents nodes lower level nodes 
agent scope related environment structure 
engineering environments previous areas research challenges provide ample scope theoretical exploration lead intriguing intellectual issues 
ultimate social benefit insights requires application concrete problems challenge engineering environments problems pose significant challenges design implementation practical systems 
environments multiagent systems design 
disciplined design practices agents general infancy extending techniques environments greatly increases scope done 
step gaining recognition environments class entities mas design 
number points discussed directly impact design different sorts domains map different types environments agents related environments 
results studies areas need captured tools description languages representational mechanisms enable engineers communicate unambiguously alternative designs 
cases environment may incorporate physical digital elements design tools need support integration domains 
implementation 
growth agent oriented programming led proliferation frameworks development platforms agents 
similarly growing recognition importance environments stimulate extensions tools development new tools support environments agents different platforms interact 
inevitably embodying services environment platform collapse dimensions explored previous paragraphs 
example single platform support architectural options discussed 
success rival platforms market important tool assessing dimensions important practical safely removed developer inventory 
critical question implementation concerns relationship logical physical distribution environment 
cases sense environment represents physically distributed topology distributed physically cases benefits agent environment distinction retained environment hosted single machine 
sum recognizing distinction agent environment opens new horizons research development comparable development agent metaphor suggestions may help inspire generation researchers explore directions point promising 
measure success degree natural momentum research community leads self sustaining body science technology recognizes environments class entities study multi agent systems 
environments mass assigned limited responsibilities overlooking rich potential paradigm mass survey environments mass study learned environments include broad diversity functionalities 
weyns insights survey extract set general concerns environments concern representing particular logical functionality environments 
fundamental concern environment structures mas 
environmental structuring take different forms spacial organizational 
agents able understand environment explicit ontology required covers structure environment observable characteristics objects resources agents interrelationships 
structural aspects identified set concerns related activity environment 
common activity agents environment communication 
discussed types communication mass designer aware potency impact form communication select appropriate form requirements problem domain 
communication agents typically perform actions environment 
responsibility environment define rules enforce effects agents actions 
agents able perceive environment 
environment observable entity contrary agents 
environment enable agents observe neighborhood preferences perception constrained environmental properties reflect limitations modelled domain 
clarified agents entities produce activity environment 
objects resources may active environment example pheromone moving object 
maintaining dynamics important responsibility environment 
set concerns proposed complete intended start potential responsibilities environments mas explicit 
listed number research challenges may serve source inspiration exploration 
hope may contribute extend exploration environments mass environments carry rich potential paradigm mass long researchers software developers limit functionality environments deal responsibilities implicit ad hoc manner full potential environments revealed 
discover exploit full potential environments treat environments class entities 
recognizing environments class entities opens new horizons research development mass acknowledgments attendees international workshop environments multiagent systems valuable discussions contribute 
special word appreciation goes kurt alexander kind cooperation 
environments multiagent systems 
aglets www trl ibm com aglets 
ajanta www cs umn edu ajanta home html 
doyle govindan willinger optimization driven framework designing generating realistic internet topologies 
acm sigcomm computer communications review 
ller baez nagy moca platform 
multi agent simulation ii lecture notes computer science vol 

springer verlag berlin heidelberg new york 
simone dealing space multi agent systems model situated mas 
second international joint conference autonomous agents multiagent systems acm press bologna italy 
simone heterogeneous agents situated heterogeneous spaces 
applied artificial intelligence taylor francis 
spatially dependant communication model ubiquitous systems 
international workshop environments multiagent systems new york 
barabasi albert emergence scaling random networks 
science 
poggi jade fipa compliant agent framework 
th international conference practical application intelligent agents multi agent technology 
bonabeau dorigo theraulaz swarm intelligence natural artificial systems 
sfi studies sciences complexity oxford university press 
bonabeau gu rin snyers kuntz theraulaz routing telecommunications networks smart ant agents 
intelligent agents telecommunications applications 
giorgini giunchiglia mylopoulos tropos agent oriented software development methodology 
technical report dit university trento italy 
brueckner return ant 
phd dissertation humboldt universit berlin germany 
busi zavattaro serializability transactions javaspaces 
electronic notes theoretical computer science vol 

leonardi zambonelli mars programmable coordination mobile agents 
ieee internet computing 
gelernter coordination languages significance 
communications acm 
chang chen chien kao soo reality mind cognitive middle layer environment concepts believable agents 
international workshop environments multiagent systems new york 

cheyer martin open agent architecture 
journal autonomous agents multi agent systems 
coleman arnold hayes object oriented development fusion method 
prentice hall international hemel uk 
corkill collaborating software 
international lisp conference new york weyns 
demazeau rocha costa populations organizations open multiagent systems 
st national symposium parallel distributed ai 
dijkstra multi agent cellular automata system visualising simulated pedestrian activity 
th international conference cellular automata research industry 
dorigo maniezzo colorni ant system optimization colony cooperating agents 
ieee transactions systems man cybernetics part 
morgan 
eds blackboard systems 
addison wesley 
evans kearney caire garijo gomez sanz massonet message methodology engineering systems software agents 

mas international workshop environments multiagent systems 
new york www cs kuleuven ac events mas 
fellbaum wordnet electronic lexical database 
mit press 
ferber multi agent systems distributed artificial intelligence 
addison wesley isbn great britain 
ferber gutknecht meta model analysis design organizations multi agent systems 
rd international conference multi agent systems paris france 
ferber gutknecht michel agents organizations organizational view multi agent systems 
agent oriented software engineering iv 
springer verlag berlin heidelberg new york 
ferber ller influences reaction model situated multiagent systems 
th international conference multi agent systems japan aaai press 
ferber michel integrating environments organization centered multiagent systems environments multiagent systems weyns parunak michel 
eds lecture notes artificial intelligence vol 
berlin heidelberg new york springer 
finin labrou mayfield agent communication language 
software agents mit press 
fipa foundation intelligent physical agents 
www fipa org 
freeman arnold javaspaces principles patterns practice 
jini technology series addison wesley 
free line dictionary computing 
doc ic ac uk index html 
gasser perspectives organizations multi agent systems multi agent systems applications th advanced course agent link rd european agent systems summer school 
luck mark trappl 
eds lecture notes artificial intelligence vol 

berlin heidelberg new york springer 
grass la reconstruction du nid les coordinations inter chez sp 
la theorie de la interpretation du comportement des termites 
vol 

grasshopper www grasshopper de 
gu rin optimisation en environment dynamic application au dans les de communications 
dissertation university rennes ecole nationale sup rieure des communications de environments multiagent systems 
gutknecht ferber michel integrating tools infrastructures generic multi agent systems th international conference autonomous agents montreal quebec canada acm press 
hanks pollack cohen benchmarks testbeds controlled experimentation design agent architectures ai magazine 
lesser vincent wagner raja zhang decker garvey white multi agent systems lab university massachusetts 

hodgson lucas jack intelligent agents www agent software com shared home 
huhns stephens multi agent systems societies agents 
weiss ed multi agent systems isbn mit press 
jennings agent software engineering 
artificial intelligence elsevier science publishers 
julien roman egocentric context aware programming ad hoc mobile environments 
th international symposium foundations software engineering charleston usa 
leonardi zambonelli fields unifying approach engineering swarm intelligent systems 
lecture notes artificial intelligence vol 

springer verlag heidelberg new york 
zambonelli leonardi tuples air middleware context aware computing dynamic networks 
icdcs workshops 
model ubiquitous mobile computing 
theory practice open computational systems 
ieee computer society 
holvoet adaptation distributed environment international workshop environments multiagent systems new york 
michel ferber gutknecht generic simulation tools mas organization th european workshop modelling autonomous agents multi agent world france 
michel ferber weak interaction strong interaction agent simulations 
th workshop multi agent simulation mabs aamas melbourne australia 
mili steiner architectural design environment 
international workshop environments multiagent systems new york 
minar burkhart langton swarm simulation system toolkit building multi agent simulations 
working santa fe institute 
montresor anthill framework design analysis peer peer systems 
th european research seminar advances distributed systems italy 
murphy picco roman lime middleware physical logical mobility 
th international conference distributed computing systems 
nwana ndumu lee zeus toolkit building distributed multi agent systems 
th international conference autonomous agents seattle wa usa weyns 
odell parunak fleischer temporal aspects dynamic role assignment 
agent oriented software engineering iv th international workshop melbourne australia 
springer verlag berlin heidelberg new york 
odell parunak fleischer role roles designing effective agent organizations 
software engineering large scale multi agent systems lecture notes computer science vol 

springer verlag berlin heidelberg new york 
odell parunak fleischer modeling agents environment 
agent oriented software engineering iii giunchiglia odell weiss 
eds 
lecture notes computer science vol 

springer verlag berlin heidelberg new york 
bordini da rocha costa environment description language multiagent simulation 
international workshop environments multiagent systems new york 
omg www fokus gmd de research cc index html 
omicini ricci coordination artifacts environment coordination autonomous agents th joint conference autonomous agents multi agent systems acm press new york 
omicini zambonelli klusch tolksdorf eds coordination internet agents models technologies applications 
springer verlag berlin heidelberg new york 
padgham prometheus methodology developing intelligent agents 
th agent oriented software engineering workshop bologna italy 
parunak institute www net 
parunak go ant engineering principles natural agent systems 
annals operations research vol 

parunak brueckner fleischer odell design taxonomy multi agent interactions 
agent oriented software engineering iv melbourne 
springer verlag berlin heidelberg new york 
parunak odell representing social structures uml agent oriented software engineering ii wooldridge weiss ciancarini 
eds 
notes computer science vol 
berlin new york springer 
robocup www robocup org 
rockwell www rockwell com 
russell norvig artificial intelligence modern approach prentice hall 
holvoet environment coordination situated multi agent systems 
international workshop environments multiagent systems new york 
schoonderwoerd holland bruten rothkrantz ant load balancing telecommunication networks 
adaptive behavior vol 

soma www lia deis unibo research soma 
sun microsystems javaspaces specification 
sycara klusch lu dynamic service matchmaking agents open environments 
acm sigmod record 
sycara paolucci van retsina mas infrastructure kluwer academic publishers 
dis cs umass edu research environments multiagent systems 
telecom italia www com 
castelfranchi omicini ricci better shared environment flexible coordination tacit messages 
international workshop environments multiagent systems new york 
voyager www com voyager htm 
weinstein parunak brueckner agents swarming semantic spaces corroborate hypotheses 
joint conference autonomous agents multiagent systems new york www net aamas pdf 
weyns holvoet regional synchronization situated multi agent systems 
rd international central eastern european conference multi agent systems prague czech republic lecture notes computer science vol 

springer verlag berlin heidelberg new york 
weyns holvoet formal model situated multi agent systems 
formal approaches multi agent systems special issue fundamenta informaticae 
weyns holvoet look talk synchronization scheme situated multi agent systems 
uk workshop multi agent systems liverpool 
weyns holvoet colored petri net regional synchronization situated multiagent systems 
international workshop petri nets coordination pnc bologna italy 
weyns holvoet active perception situated multi agent systems 
journal applied artificial intelligence 
www com pages index html 
wolfram theory applications cellular automata 
world press 
wolfram new kind science 
wolfram media isbn 
wooldridge multiagent systems 
isbn 
john wiley sons england 
zambonelli jennings wooldridge developing multiagent systems gaia methodology 
transactions software engineering methodology acm press 
zambonelli parunak design intention signs revolution 
international joint conference autonomous agents multiagent systems bologna italy acm press 
