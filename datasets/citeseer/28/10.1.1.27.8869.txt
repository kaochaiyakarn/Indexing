computational logic multi agent systems roadmap sadri toni department computing imperial college queen gate london sw bz uk ftg ic ac uk www lp doc ic ac uk ftg december agent computing emerging computing paradigm proved extremely successful dealing number problems arising new technological developments applications 
report role computational logic modeling intelligent agents analysing existing agent theories agent oriented programming languages applications identifying challenges promising directions research 
past years eld agent computing emerged greatly expanded due new technological developments faster cheaper computers fast reliable interconnections emergence world wide web 
developments time opened new application areas electronic commerce posed new problems integrating great quantities information building complex software embedding legacy code 
establishment new eld agentbased computing con rmed emergence number regular specialised workshops conferences journals accompanied creation european network excellence international organisation setting standards eld fipa foundation intelligent physical agents 
www org www fipa org universally accepted de nition agents facilitate discussion agreement researchers take agents computing artifacts hardware software exhibit properties autonomy agents ability act direct intervention agents including humans 
agent agent characterised beliefs commitments 
commitments production rules refer non consecutive states world agent operates 
bdi agent approaches logic simply tool representing agents rely non logic execution model 
causes wide gap theory practice approaches 
years number logic programming proposals agents put forward :10.1.1.62.8517:10.1.1.54.7045:10.1.1.27.4100
proposals form computational logic knowledge representation computational tool necessarily implementation tool 
past developments computational logic relevant crucial modeling understanding agents 
example agents need reason changes environment bring desired changes 
performance enhanced ability learn 
analyse underlying computational mechanisms adopted various approaches obtain reactivity perform planning 
planning amounts proactive behaviour 
general plan set partially totally ordered actions planning deliberative process generating set actions achieve goals 
papers refer similar logical accounts planning 
kowalski sadri employ de nitions integrity constraints observations represent beliefs agents :10.1.1.62.8517
de nitions extensions usual clark completion logic programs negation failure 
integrity constraints implications 
observations conjunctions literals 
integrity constraints represent uniformly condition action rules commitment rules deontic modalities obligations goals 
example de nition represent belief agent agent object buy steal way 
integrity constraints represent agents buy object obligation time agent buys television uk get tv condition action rule agent object hears police door agent run away 
goal television possible plan achieving goal buy television get tv 
note informal description simpli cation domain omit representation time 
knowledge representation de nitions integrity constraints suciently general allow incorporation di erent temporal reasoning theories example event calculus extension incorporating macro events spirit golog situation calculus plan libraries :10.1.1.27.4100
reasoning engine underlying agent combines backward reasoning de nitions unfolding goals subgoals forward reasoning integrity constraints observations manner abductive proof procedures 
planning reactivity achieved reasoning backwards forwards respectively 
observation explained explanations conjunction beliefs 
kowalski sadri agents reactive senses 
hierarchical planning complete plan generated action plan needs fully decomposed terms primitive actions 
progression planner generates earlier actions plan rst 
advantages progression planner compared regression planner rst interrupted rst actions generated partially constructed plan primitive executed immediately 
case regression planner 
similarly shanahan agents augment beliefs means observations environment explained :10.1.1.62.8517
agents reactive rst sense replan 
baral gelfond extended logic programming implement modi cation language beliefs agents expressed theories language history past observations :10.1.1.27.4100
agents goals properties hold 
logic program proactively reduce goals plans 
advantages progression planner compared regression planner rst interrupted rst actions generated partially constructed plan primitive executed immediately 
case regression planner 
similarly shanahan agents augment beliefs means observations environment explained :10.1.1.62.8517
agents reactive rst sense replan 
baral gelfond extended logic programming implement modi cation language beliefs agents expressed theories language history past observations :10.1.1.27.4100
agents goals properties hold 
logic program proactively reduce goals plans 
agents reactive rst sense replan 
observations environment directly added knowledge base explanation triggers generating actions 
contrast cautious agent accepts new information agent believes sincere provided new information contradict beliefs 
integrity constraints enforce various characteristics example property explicit negation hold time agent believe property negation agent contradictory goals 
observations past events 
agents reactive sense revise beliefs response observations 
vivid agents characterised beliefs extended logic programming form reaction rules generalising event condition action rules active databases action rules similar reaction rules lacking triggering event premises :10.1.1.22.9042
vivid agents goals 
reaction rules encode reactive communicative behaviour agent action rules encode proactive behaviour generate plans achieve goals 
example telecommunication scenario vivid agent hold beliefs base transceiver station normally sends live signals base station failure case live signal sent 
automated loading dock application agents load unload trucks agent reaction rules agent receives message agent agent got hold box loaded agent sends message back acknowledging receipt message 
example agent program specify tank obliged attack tank tank obliged proceed route blocked tank belongs enemy 
integrity constraints approaches specify situations arise actions performed concurrently example speed tank exceed maximum speed allowed di erent planes route concurrently 
alternative sets actions generated reaction messages agent programs 
di erent criteria characterising alternative sets actions computational complexity examined 
extensions approach incorporate temporal probabilistic agent reasoning chapter chapter :10.1.1.27.4100
interrap uses version event calculus reason time actions incorporates hierarchical planning 
structures beliefs components world model corresponding history agent actions mental model corresponding event calculus theory social model providing beliefs agents interact 
reasoning engine abductive proof procedure similar :10.1.1.62.8517
interleaves planning execution partially constructed plans 
di erent criteria characterising alternative sets actions computational complexity examined 
extensions approach incorporate temporal probabilistic agent reasoning chapter chapter :10.1.1.27.4100
interrap uses version event calculus reason time actions incorporates hierarchical planning 
structures beliefs components world model corresponding history agent actions mental model corresponding event calculus theory social model providing beliefs agents interact 
reasoning engine abductive proof procedure similar :10.1.1.62.8517
interleaves planning execution partially constructed plans 
apl combination imperative logic programming 
agents apl entities beliefs goals plan rules 
beliefs form sentences logic language full rst order logic logic programming 
beliefs form sentences logic language full rst order logic logic programming 
goals imperative programs built primitive goals sequences goals way similar golog 
plan rules logic www cs umd edu projects impact programming style guarded rules primitive composite goals body 
agent architectures common feature existing agent architectures explicit implicit presence cycle terms described act 
kowalski sadri adopt resource bounded cycle resource limit parameter determined implementation terms inference steps absolute time :10.1.1.62.8517
thinking component consists explaining observations needed generating actions reaction observations planning achieving goals agent 
architecture independent planning algorithm underlying temporal action theory 
implementation hierarchical progression planner event calculus :10.1.1.27.4100
adopts event calculus formulation macro actions inspired 
agent architectures common feature existing agent architectures explicit implicit presence cycle terms described act 
kowalski sadri adopt resource bounded cycle resource limit parameter determined implementation terms inference steps absolute time :10.1.1.62.8517
thinking component consists explaining observations needed generating actions reaction observations planning achieving goals agent 
architecture independent planning algorithm underlying temporal action theory 
implementation hierarchical progression planner event calculus :10.1.1.27.4100
adopts event calculus formulation macro actions inspired 
agent cycle reasoning interrupted accept inputs observations generate outputs actions 
outputs actions generated response inputs received iteration cycle actions generated reactively proactively earlier iterations 
shanahan adopts sense plan act cycle 
agent cycle reasoning interrupted accept inputs observations generate outputs actions 
outputs actions generated response inputs received iteration cycle actions generated reactively proactively earlier iterations 
shanahan adopts sense plan act cycle 
sense plan phases iteration cycle resource bounded terms resolution steps 
baral gelfond adopt explicit agent cycle form goal plan execute rst action plan :10.1.1.27.4100
cycle third step cycle complete plan generated selected goal 
iterations cycle observation may invalidate preconditions actions plan case replanning needed 
impact system adopts similar cycle form receive messages nd action execute execute selected action record result 
cycle resource bounded reasoning takes place completed single iteration agent cycle 
step cycle nds action executed reasons agent program integrity constraints 
approach described length agent built top arbitrary software may legacy code 
special mechanism code calls bridging actual data structures software representation logical atoms framework 
impact provides new theoretical foundation working system building heterogeneous database techniques 
vivid agents run perception reaction cycle planning activity concurrently :10.1.1.22.9042
cycle receives incoming messages representing perceptions observations communication events generates reactions dictated set reaction rules 
reactions may depend agent beliefs may update 
planning component consists planner action component plan execution 
planner uses copy beliefs update beliefs 
agent mental state updated observation 
approaches planning component concept intention bdi sense choice plan alternatives implicit explicit 
multi agent systems section consider features approaches previously described speci cally appropriate multi agent systems applications 
features include communication languages protocols capability representing reasoning agents beliefs 
dell sadri toni extend language communication actions tell ask additional abducible actions meta level predicates beliefs :10.1.1.62.8517:10.1.1.27.4100
model allows asynchronous communication 
illustrate extended language specifying updates agent beliefs communication agents 
authors show integrity constraints language proposed model communication protocols kind proposed fipa :10.1.1.27.4100
instance examples protocols agent asked question friendly agent agent nd answer tell answer agent agent asked question neutral agent agent nd answer units time tell answer soon nd answer units time reply 
features include communication languages protocols capability representing reasoning agents beliefs 
dell sadri toni extend language communication actions tell ask additional abducible actions meta level predicates beliefs :10.1.1.62.8517:10.1.1.27.4100
model allows asynchronous communication 
illustrate extended language specifying updates agent beliefs communication agents 
authors show integrity constraints language proposed model communication protocols kind proposed fipa :10.1.1.27.4100
instance examples protocols agent asked question friendly agent agent nd answer tell answer agent agent asked question neutral agent agent nd answer units time tell answer soon nd answer units time reply 
dell pereira propose combination agents kowalski sadri dynamic logic programming :10.1.1.62.8517:10.1.1.34.7273:10.1.1.27.4100
resulting framework agents plan react change knowledge bases goals attempt change knowledge bases goals 
dynamic logic programming gives declarative procedural semantics evolution knowledge bases state state 
model allows asynchronous communication 
illustrate extended language specifying updates agent beliefs communication agents 
authors show integrity constraints language proposed model communication protocols kind proposed fipa :10.1.1.27.4100
instance examples protocols agent asked question friendly agent agent nd answer tell answer agent agent asked question neutral agent agent nd answer units time tell answer soon nd answer units time reply 
dell pereira propose combination agents kowalski sadri dynamic logic programming :10.1.1.62.8517:10.1.1.34.7273:10.1.1.27.4100
resulting framework agents plan react change knowledge bases goals attempt change knowledge bases goals 
dynamic logic programming gives declarative procedural semantics evolution knowledge bases state state 
impact approach approach pereira agents may hold beliefs agents 
impact approach agents exchange messages 
ciao module package system possible add syntactic semantic extensions language structured way traditional prolog systems done ecting parts language 
ciao includes large set libraries 
additionally ciao prolog generates executables compilation bytecode allows movement code dynamically platforms 
ciao prolog allows goals launched means high level primitives separate threads 
threads communicate prolog database shared threads :10.1.1.30.9163
threads accessing shared fact optionally wait failing exist 
example code concurrent current temp 
monitor temp read temp current temp temp 
read temp read temp device temp assert current temp temp 
facts concurrently atomically updated accessed 
ciao prolog allows special kind object called active viewed network wide servers methods 
active object launched possibly remotely daemon answers requests method invocations receives 
active objects implement distributed knowledge bases blackboards updates global facts automatically available remote agents 
eel eel uses event approach process communication limited model communication allows synchronous point point communication :10.1.1.27.4100
concepts sending receiving messages relies message uni cation method exchanging information concurrent processes 
syntax similar prolog shares prolog operational semantics special reserved predicates deal synchronisation communication 
programming language extending prolog means features modules called cells inheritance multi threading thread communication shared memory called cell variables allowing synchronisation threads partially speci ed terms allow determine structure modules run time 
equipped built window interface network interface distributed multi processing environment 
inheritance overriding modules apply 
give dynamic version brooks subsumption architecture symbol manipulation allowed permit communication agents dynamic recon guration achieved see 
dynamic subsumption architecture implement football playing agents robocup environment 
implementation applications section brie describe implementation architectures systems surveyed earlier describe applications 
kowalski sadri architecture implemented prolog java voyager tested number applications :10.1.1.62.8517:10.1.1.27.4100
applications particularly noteworthy distributed information integration agents equipped knowledge allows act mediators integrate information sources answer user queries ectively handle heterogeneity di erent sources facilitate resolution con icts arise 
ci etl go jp collective management information networks www agents employed check enforce structural properties networks dangling links properties content nodes network 
learning agents example learn preconditions actions 
approach shanahan implemented prolog tested navigation problems khepera robot 
learning agents example learn preconditions actions 
approach shanahan implemented prolog tested navigation problems khepera robot 
robot proximity sensors wheels move environment example oce environment 
architecture allows robot sense environment plan moves getting execute moves replan presence newly observed 
architecture baral gelfond implemented prolog envisaged application shuttle control :10.1.1.27.4100
supporting architecture mobile robots competing aaai robot competitions 
rst competition aaai robot contest robots required navigate way round oce environment topological map hitting obstacles 
placed third 
second competition aaai contest vacuum cleaning contest robots required navigate way corridor rooms order clean rooms 
placed third 
second competition aaai contest vacuum cleaning contest robots required navigate way corridor rooms order clean rooms 
robot various constraints example forbidden enter room human clean corridor presence humans 
won rst place contest 
system pereira implemented revise system xsb prolog tested examples :10.1.1.27.4100
vivid agents implemented pvm prolog tested distributed diagnosis problems distributed diagnosis computer network diagnosis unreliable communication protocols :10.1.1.22.9042
applications centralised technique costly cause large communication overheads 
vivid agents approach decomposes system set subsystems diagnosed agent detailed knowledge subsystem knowledge neighbouring systems 
core impact implemented java 
second competition aaai contest vacuum cleaning contest robots required navigate way corridor rooms order clean rooms 
robot various constraints example forbidden enter room human clean corridor presence humans 
won rst place contest 
system pereira implemented revise system xsb prolog tested examples :10.1.1.27.4100
vivid agents implemented pvm prolog tested distributed diagnosis problems distributed diagnosis computer network diagnosis unreliable communication protocols :10.1.1.22.9042
applications centralised technique costly cause large communication overheads 
vivid agents approach decomposes system set subsystems diagnosed agent detailed knowledge subsystem knowledge neighbouring systems 
core impact implemented java 
system built collection heterogeneous databases 
authors urgen dix manuel hermenegildo luis moniz pereira useful comments contributions report jim cunningham abe mamdani jeremy pitt helpful discussions 
alferes pereira przymusinski dynamic logic programming 
cohn schubert eds proc 
kr international conference principles knowledge representation reasoning pages morgan kaufmann 
baral gelfond reasoning agents dynamic domains :10.1.1.27.4100
minker ed 
pre proc 
workshop logic arti cial intelligence washington june 
baral son theory practice robot aaai aaai robot 
workshop multi agents systems logic programming 
conjunction iclp new mexico state university december 
distributed communicating agents 
meng thesis department computing imperial college science technology medicine london uk 
hermenegildo :10.1.1.30.9163
concurrency prolog threads shared database 
proc 
iclp international conference logic programming mit press 
chen warren tabled evaluation delaying general logic programs 
technical report clip project december 
marques distributed algorithm development pvm prolog 
proc 
th euromicro workshop parallel distributed processing ieee computer society press 
dahl eel programming language internal concurrency logic agents :10.1.1.27.4100
proc 
workshop multi agents systems logic programming 
conjunction iclp new mexico state university december 
damasio pereira revise extended logic programming system revising knowledge bases :10.1.1.27.4100
dahl eel programming language internal concurrency logic agents :10.1.1.27.4100
proc 
workshop multi agents systems logic programming 
conjunction iclp new mexico state university december 
damasio pereira revise extended logic programming system revising knowledge bases :10.1.1.27.4100
kr international conference knowledge representation reasoning morgan kaufmann 
:10.1.1.27.4100
agents logic programming 
phd thesis imperial college science technology medicine london uk 
workshop multi agents systems logic programming 
conjunction iclp new mexico state university december 
damasio pereira revise extended logic programming system revising knowledge bases :10.1.1.27.4100
kr international conference knowledge representation reasoning morgan kaufmann 
:10.1.1.27.4100
agents logic programming 
phd thesis imperial college science technology medicine london uk 
dell pereira updating agents :10.1.1.34.7273:10.1.1.27.4100
proc 
kr international conference knowledge representation reasoning morgan kaufmann 
:10.1.1.27.4100
agents logic programming 
phd thesis imperial college science technology medicine london uk 
dell pereira updating agents :10.1.1.34.7273:10.1.1.27.4100
proc 
workshop multi agents systems logic programming 
conjunction iclp new mexico state university december 
dell sadri toni combining introspection communication rationality reactivity agents :10.1.1.27.4100
dell pereira updating agents :10.1.1.34.7273:10.1.1.27.4100
proc 
workshop multi agents systems logic programming 
conjunction iclp new mexico state university december 
dell sadri toni combining introspection communication rationality reactivity agents :10.1.1.27.4100
furbach del cerro eds proc 
jelia th european workshop logics arti cial intelligence pages lnai springer verlag 
dell sadri toni communicating agents :10.1.1.27.4100
proc 
conjunction iclp new mexico state university december 
dell sadri toni combining introspection communication rationality reactivity agents :10.1.1.27.4100
furbach del cerro eds proc 
jelia th european workshop logics arti cial intelligence pages lnai springer verlag 
dell sadri toni communicating agents :10.1.1.27.4100
proc 
workshop multi agents systems logic programming 
conjunction iclp new mexico state university december 
dix kraus subrahmanian temporal agent reasoning :10.1.1.27.4100
dell sadri toni communicating agents :10.1.1.27.4100
proc 
workshop multi agents systems logic programming 
conjunction iclp new mexico state university december 
dix kraus subrahmanian temporal agent reasoning :10.1.1.27.4100
technical report department computer science university maryland september 
dix subrahmanian probabilistic agent reasoning :10.1.1.27.4100
technical report department computer science university maryland september 
dix subrahmanian pick meta agent programs :10.1.1.27.4100
workshop multi agents systems logic programming 
conjunction iclp new mexico state university december 
dix kraus subrahmanian temporal agent reasoning :10.1.1.27.4100
technical report department computer science university maryland september 
dix subrahmanian probabilistic agent reasoning :10.1.1.27.4100
technical report department computer science university maryland september 
dix subrahmanian pick meta agent programs :10.1.1.27.4100
appear journal logic programming 
dung acceptability arguments fundamental role non monotonic reasoning logic programming person game :10.1.1.27.4100
dix kraus subrahmanian temporal agent reasoning :10.1.1.27.4100
technical report department computer science university maryland september 
dix subrahmanian probabilistic agent reasoning :10.1.1.27.4100
technical report department computer science university maryland september 
dix subrahmanian pick meta agent programs :10.1.1.27.4100
appear journal logic programming 
dung acceptability arguments fundamental role non monotonic reasoning logic programming person game :10.1.1.27.4100
arti cial intelligence 
eiter subrahmanian pick heterogeneous active agents semantics 
dix subrahmanian probabilistic agent reasoning :10.1.1.27.4100
technical report department computer science university maryland september 
dix subrahmanian pick meta agent programs :10.1.1.27.4100
appear journal logic programming 
dung acceptability arguments fundamental role non monotonic reasoning logic programming person game :10.1.1.27.4100
arti cial intelligence 
eiter subrahmanian pick heterogeneous active agents semantics 
arti cial intelligence 
eiter subrahmanian heterogeneous active agents ii algorithms complexity 
kowalski 
logic programming integrity constraints 
proc 
jelia european workshop logics arti cial intelligence pages 
kowalski sadri :10.1.1.62.8517
logic programming multi agent systems 
appear annals mathematics arti cial intelligence 
kowalski sergot logic calculus events 
new generation computing 
ai ia th congress italian association arti cial intelligence pages bologna 
schroeder ecient argumentation framework negotiating autonomous agents 
proc 
maamaw workshop modelling autonomous agents multi agent world springer verlag 
schroeder wagner vivid agents theory architecture applications :10.1.1.22.9042
technical report department computer science city university london uk 
shanahan shakey 
working notes aaai fall symposium cognitive robotics pages 
shanahan abductive event calculus planner 
