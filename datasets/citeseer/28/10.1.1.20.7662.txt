generating state spaces object oriented petri nets milan ce tom department computer science engineering university technology bo cz czech republic mail fee cz 
article describes problems arise area generating exploiting state spaces object oriented petri nets oopns underlie modelling language tool called 
rst explain uence identi ers dynamically appearing disappearing instances state space explosion problem 
describe compare methods working identi ers sophisticated naming rules mechanisms abstracting names 
subsequently discussed approaches specifying properties systems validated means state spaces oopn models 
current complex distributed applications require dealing dynamically arising disappearing objects communicate synchronize actions migrate particular nodes distributed environment running 
oopn example main methods produce consume shown 
main principles structure behaviour oopns explained 
due space limitations description formal complete 
explain necessary notions 
bit deeper oopn formalism complete de nition oopns :10.1.1.134.7596
structure oopns object oriented petri net de ned collection elements comprising sets constants const variables ar net elements places pl transitions tr class elements object nets method nets synchronous ports sy nc message selectors msg classes class object identi ers oid method net instance identi ers mid 
denote net id oid mid 
oopn initial class name oid initial object 
called universe oopn contains nested tuples constants classes object identi ers 
prefer second approach allows di erent methods solving naming problem di erent contexts combine methods trying remove sources state space redundancies 
reducing state spaces get rid consider unnecessary naming information prove doing lose important properties modelled systems analyzed veri ed 
context oopns important able distinguish particular instances states express ownership relations know manipulated events surrounding particular states 
normally interested concrete values identi ers implementing just mentioned mechanisms 
section methods solving naming problem compared sophisticated naming rules assigning identi ers newly arising stances inspired process identi er handling spin called name abstraction specialization symmetry method reducing state spaces :10.1.1.134.7596
method considering concrete names instances important checking states equal leads working renaming equivalence classes states individual states 
methods discussed context oopns 
rst de ne full state spaces oopns order obtain basis discussing reduction mentioned methods 
add naming problem solved problem removing unnecessary instances states 
add naming problem solved problem removing unnecessary instances states 
systematically remove instances number concurrently existing instances may grow naming problem manifest stronger 
generated redundant semantically equal states distinguished di erent garbage apply solution naming problem 
advantageous remove unnecessary instances states soon possible 
case oopns immediate garbage collecting mechanism solve problem :10.1.1.134.7596
order mechanism properly suces create oopns store obsolete instances 
interesting naming problem important domain dynamically structured formalisms devoted interest 
formal analysis veri cation supposed run low level semantics object oriented petri nets introduced 
solve naming problem 
order mechanism properly suces create oopns store obsolete instances 
interesting naming problem important domain dynamically structured formalisms devoted interest 
formal analysis veri cation supposed run low level semantics object oriented petri nets introduced 
solve naming problem 
spin naming problem treated simple set rules naming instances limiting maximum number instances entirely satisfying solution obtained explain :10.1.1.134.7596
short note call naming problem proposed require nite domains identi ers solution symmetry analysis methods investigate detail 
relatively appeared note symmetry canonical representation heap new java pathfinder model checker similar methods 
full state spaces oopns full state spaces oopns de ned general concept state spaces mentioned earlier 
oopn states correspond reachable markings structural transitions applicable events 
problem generating unnecessary states need avoided advanced naming schemes alleviated degree partial order reduction techniques 
techniques reduce number paths leading particular states possibilities obtain di erent permutations identi ers involved characteristic instances 
problem fully solved way possible choose interleaving set possible ones 
sophisticated naming rules combined partial order reduction methods hardly eliminate second possible source naming redundancies possibility mapping system level symmetries symmetrical actions instances identi ers 
certain kind sophisticated naming rules similar originally solving naming problem mentioned model checker spin :10.1.1.134.7596
spin works dynamically processes described specialized language promela 
processes identi ed integers terminated identi ers reverse order creation starting currently running process 
principle easily implemented hand possibility cyclic instantiation processes partially overlapped lifetimes method prevent state space growing nity 
course assumes apply arti cial limits number running processes 
abstracting naming information respect previous discussion suggest possible method solving naming problem considering concrete values names instances important checking equality states 
words going de ne markings equal exists suitable permutation set identi ers application states identical 
consequence replace working particular states working renaming equivalence classes 
note application ecient way removing garbage states remains desirable order avoid generating semantically equal states distinguished di erent garbage contained 
try describe method name abstraction partially formal way fully formal description proofs propositions :10.1.1.134.7596
noted concept name abstraction specialization general notion symmetries applied reducing state explosion caused presence concrete names instances states 
general symmetries highly specialised renaming symmetries oopn models allow fully automated ways treating generating state spaces 
name abstracted state spaces described special case symmetrically reduced state spaces de ne directly save space get closer implementation 
add application symmetries solving naming problem context state spaces oopns take account special issues garbage collection encapsulation method net instances objects nite numbers possible identi ers newly arising instances 

id id oid id oid id 
concept renaming permutations provides basis de ning called renaming symmetries sets markings sets events 
renaming symmetries preserve structure trivial contents markings events change involved identi ers 
formal de nition renaming symmetries obtained straightforward little longer extension working identi ers markings events exact de nition refer reader :10.1.1.134.7596
denote renaming symmetry induced renaming permutation de ne markings equal renaming exists renaming permutation done events 
denote renaming equivalence relation 
members equivalence classes referred black board alphabet representatives 
quotient sets denoted subscript ma notion renaming symmetries allows formalize mentioned property concrete names instances oopn state uence names instances appear possible behaviours starting state 
identical states respect way created role far 
conclude renaming save memory sophisticated naming rules case partial order reduction 
hand pay renaming terms associated time complexity testing markings equal renaming corresponds solving graph isomorphism problem 
fortunately usually greatly decrease time complexity various heuristics proposed dealing general purpose symmetries accommodated context oopns 
techniques lead renaming insensitive state space hashing followed heuristic tests states equal renaming alternatively heuristically computed representation oopn states canonical renaming details apply di erent heuristics context oopns name abstraction :10.1.1.134.7596
illustrate considerations data obtained simple prolog prototype oopn state space generator applied example models classical dining philosophers distributed philosophers russian philosophers di erent versions simple systems counters :10.1.1.134.7596
state spaces models obtained introduced sophisticated naming rules reduction trying isolate naming nested objects states 
name abstraction state spaces reduced times 
visible name abstraction lead signi cant reductions numbers states exist systems system distributed philosophers elaborated sophisticated rules remove naming redundancies 
conclude renaming save memory sophisticated naming rules case partial order reduction 
hand pay renaming terms associated time complexity testing markings equal renaming corresponds solving graph isomorphism problem 
fortunately usually greatly decrease time complexity various heuristics proposed dealing general purpose symmetries accommodated context oopns 
techniques lead renaming insensitive state space hashing followed heuristic tests states equal renaming alternatively heuristically computed representation oopn states canonical renaming details apply di erent heuristics context oopns name abstraction :10.1.1.134.7596
illustrate considerations data obtained simple prolog prototype oopn state space generator applied example models classical dining philosophers distributed philosophers russian philosophers di erent versions simple systems counters :10.1.1.134.7596
state spaces models obtained introduced sophisticated naming rules reduction trying isolate naming nested objects states 
name abstraction state spaces reduced times 
visible name abstraction lead signi cant reductions numbers states exist systems system distributed philosophers elaborated sophisticated rules remove naming redundancies 
speedup obtained name abstraction examples ranged small negative values results change degree improving mentioned methods partial order reduction isolated naming unambiguously nested objects better hash functions bit chain oriented comparison states better algorithms name abstraction self symmetries name abstraction especially obtained speedup may decrease elaborated sophisticated naming rules applied dealing systems system level symmetries especially partial order reduction 
oopns de ne place bounds transition liveness ignoring object oriented structuring virtually merging instances nets 
hand want know maximum number tokens appear place single instance net transition live instance certain net arise oopn 
add new statistics primarily connected dealing instances objects oopns 
example interested arise persistent instances transient instances net instances deleted deleted having created 
note evaluating instance oriented statistics complicated evaluating statistics ignoring object oriented structuring :10.1.1.134.7596
dealing leads tracking individual life particular instances due recycling identi ers due name abstraction simply local states instances referred identi er di erent states examining state space paths states 
universal oopn state space query language universal state space query language user controlled traversing state spaces oopns inspired proposed languages kind associated tool design cpn 
universal state space query language context oopns provide specialized tools querying states events oopns respecting highly speci structuring 
note tools describing terms embedded temporal logic formulae specifying properties systems veri ed means oopn models expressing system invariants checked ne grained speci cation legal termination states progress states 
