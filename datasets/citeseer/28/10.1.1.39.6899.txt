pergamon information systems vol 
pp 
fl elsevier science rights reserved printed great britain active rule analysis optimisation rock roll deductive object oriented database andrew dinn norman paton howard williams department computing electrical engineering watt university edinburgh uk department computer science university manchester oxford road manchester uk received december final revised form march active database systems provide facilities monitor respond changes relevance database 
active behaviour normally described event condition action rules eca rules number systems developed different data models support rules 
experience active databases shows systems powerful potentially useful applications hard program liable exhibit poor performance runtime 
document addresses issues examining analysis optimisation active rules context powerful active database system 
shown results analyses exploited rule multiple query optimisation applied range circumstances eliminate duplicated rule processing 
copyright fl elsevier science key words active database rule analysis rule optimisation object oriented databases deductive object oriented databases 
active database system database system enhanced mechanisms support automatic reactions situations relevance data intensive application 
active behaviour generally expressed way rules describe events monitored conditions examine context event taken place actions indicate responses particular events 
proposals systems support event condition action eca rules fundamental characteristics systems understood :10.1.1.34.8207
experience systems indicates certain difficulties arise technology put practice central problems issues relating comprehension performance active applications 
active rules seen providing low level powerful mechanisms describing certain behavioural aspects application 
users active database systems aware behaviour exhibited set rules straightforward anticipate understand number researchers proposals static analysis runtime observation rule behaviour :10.1.1.30.9989
static analysis generally conducted context rule languages powerful prototype active databases immediately obvious easily certain results extended systems 
active behaviour generally expressed way rules describe events monitored conditions examine context event taken place actions indicate responses particular events 
proposals systems support event condition action eca rules fundamental characteristics systems understood :10.1.1.34.8207
experience systems indicates certain difficulties arise technology put practice central problems issues relating comprehension performance active applications 
active rules seen providing low level powerful mechanisms describing certain behavioural aspects application 
users active database systems aware behaviour exhibited set rules straightforward anticipate understand number researchers proposals static analysis runtime observation rule behaviour :10.1.1.30.9989
static analysis generally conducted context rule languages powerful prototype active databases immediately obvious easily certain results extended systems 
examines applicability earlier rule analysis powerful active rule language shows results adapted extended active extension rock roll deductive object oriented database system :10.1.1.100.5752
addition problems designing debugging rule bases identifies performance key concern potential users active database systems 
reasons applications exploit active rules poorer performance anticipated rules designed implemented correct free standing units may repeat certain database accesses triggered transaction 
experience systems indicates certain difficulties arise technology put practice central problems issues relating comprehension performance active applications 
active rules seen providing low level powerful mechanisms describing certain behavioural aspects application 
users active database systems aware behaviour exhibited set rules straightforward anticipate understand number researchers proposals static analysis runtime observation rule behaviour :10.1.1.30.9989
static analysis generally conducted context rule languages powerful prototype active databases immediately obvious easily certain results extended systems 
examines applicability earlier rule analysis powerful active rule language shows results adapted extended active extension rock roll deductive object oriented database system :10.1.1.100.5752
addition problems designing debugging rule bases identifies performance key concern potential users active database systems 
reasons applications exploit active rules poorer performance anticipated rules designed implemented correct free standing units may repeat certain database accesses triggered transaction 
effective optimization active rule recommended klaus dittrich andrew dinn bases able identify share retrieval tasks common multiple simultaneously triggered rules exploiting multiple query optimization techniques 
exploitation techniques active database systems blocked date possible perform multiple query optimization context static rule analysis guarantee optimizations change meaning set rules 
important features active rule system semantics introduced 

rule analysis active databases section summarises results earlier research static analysis active rules 
static rule analysis involves identifying certain properties rule base rule definition time view warning rule programmers undesirable behaviour patterns may exhibited rule base 
properties identified static detection termination rule processing guaranteed terminate set changes database state :10.1.1.30.9989
confluence rule processing guaranteed reach unique final state valid complete rule execution sequence starting legal database state 
identification potential non termination set rules programmers compile time possibility infinite loops run time identification potential programmers rule base may exhibit nondeterministic behaviour 
section addresses aspects rule analysis examination properties graphs show sets rules interact study individual rule actions conditions relate 

identification potential non termination set rules programmers compile time possibility infinite loops run time identification potential programmers rule base may exhibit nondeterministic behaviour 
section addresses aspects rule analysis examination properties graphs show sets rules interact study individual rule actions conditions relate 

analysing rules trigger activation graphs formal definitions structures proofs properties introduced section 
active rule analysis optimisation triggering graph directed graph fv node corresponds rule rule base edge means action rule generates events trigger cycles triggering graph rule set processing involving rules guaranteed terminate :10.1.1.30.9989
triggering graph fails take account details interaction conditions actions potentially non terminating rules 
consider example rule update attribute new value set triggering graph rule base involving contains cycle action updates attribute turn triggers 
non terminating behaviour result action assigns value condition true 
overcome limitation triggering graphs activation graphs introduced 
activation graph rule contains cycle condition true execution action 
triggering graph contains cycle execution rule terminate 
analysis confluence built notion rules commute 
pair rules commute database state executing followed produces final database state executing followed rules commute execution rule trigger rule action affect truth condition changing true false vice versa action change effect executing action conditions hold reversed 
rule set guaranteed confluent pair rules algorithm explanation correctness proof yields sets rule commutes rule fr fr repeat unchanged fr fr function returns set rules may triggered argument :10.1.1.30.9989
bases predicate starburst rules rule priority ordering defined rule programmer :10.1.1.30.9989
complex rule systems require sophisticated definition predicate 
andrew dinn approaches described section story definitions dependent analysis pairs rules determine rules may interact 
issue considered subsection 
triggering graph contains cycle execution rule terminate 
analysis confluence built notion rules commute 
pair rules commute database state executing followed produces final database state executing followed rules commute execution rule trigger rule action affect truth condition changing true false vice versa action change effect executing action conditions hold reversed 
rule set guaranteed confluent pair rules algorithm explanation correctness proof yields sets rule commutes rule fr fr repeat unchanged fr fr function returns set rules may triggered argument :10.1.1.30.9989
bases predicate starburst rules rule priority ordering defined rule programmer :10.1.1.30.9989
complex rule systems require sophisticated definition predicate 
andrew dinn approaches described section story definitions dependent analysis pairs rules determine rules may interact 
issue considered subsection 

andrew dinn approaches described section story definitions dependent analysis pairs rules determine rules may interact 
issue considered subsection 

analysing conditions actions graph analyses previous subsection conducted association pieces research conservative general applicability seek establish ways rule may affect 
set operations characterise notion triggering starburst active rule system :10.1.1.30.9989
representative operations rules rule set starburst specific features operations 
ffl rule rule return set operations trigger rule 
information event description rule 
ffl rule rule return set operations rule may perform 
stronger requirement analyses conservative results sufficient required know rule may trigger activate deactivate 
certain rule systems rules triggered response accumulating changes database consideration rule automatically renders condition false 
standard semantics active rules object oriented databases means feature active rule analysis optimisation relational systems 
means systems possible construct activation graph automatically 
possible determine rules deactivate automatically static analyses offer benefits :10.1.1.30.9989
ffl analyses dependent declarative language express rule actions 
may common appropriate restrict condition language eca rule system declarative query language underlying database active rule systems generally provide extensive declarative facilities describing rule actions 
number researchers sought build results described sections 
develops trigger graph analysis method applying rule system developed object oriented logical data model differs notably starburst employs immediate coupling condition action evaluation tuple level transition granularity :10.1.1.30.9989
possible determine rules deactivate automatically static analyses offer benefits :10.1.1.30.9989
ffl analyses dependent declarative language express rule actions 
may common appropriate restrict condition language eca rule system declarative query language underlying database active rule systems generally provide extensive declarative facilities describing rule actions 
number researchers sought build results described sections 
develops trigger graph analysis method applying rule system developed object oriented logical data model differs notably starburst employs immediate coupling condition action evaluation tuple level transition granularity :10.1.1.30.9989
features requires significant modification method trigger analysis 
profit logical formalism rule language obtain refined trigger graphs stricter analysis relation 
method invocations rule actions unified event specifications allowing pruning trigger graph call event specification fail unify say corresponding arguments incompatible bindings 
furthermore analysis condition action code employed identify constraints apply method arguments point invocation 
profit logical formalism rule language obtain refined trigger graphs stricter analysis relation 
method invocations rule actions unified event specifications allowing pruning trigger graph call event specification fail unify say corresponding arguments incompatible bindings 
furthermore analysis condition action code employed identify constraints apply method arguments point invocation 
may compared constraints imposed event condition specification triggered rule allowing pruning graph constraints incompatible 
refinement succeeds providing stricter analysis switching specific case deferred set granularity rules immediate tuple granularity rules :10.1.1.30.9989
event action languages restricted functionality constraint analysis prune trigger graph depends fact rules fired immediately ensure changes method invocation event triggering 
experience analysis techniques reported 
reported termination analysis carried active database systems composite events 
aim similar reported conduct rule analysis powerful active rule systems scope wider 
optimization previous optimization active rule systems tended concentrate rules implicitly monitor primitive structure events exploit straightforward execution models 
generally focused algorithms may need exploit conventional optimization techniques treat algorithm needs join optimizer transform programs exploit intermediate results rule processing 
surprisingly little optimization eca rule systems 
closest described described rule analysis detect opportunities parallel evaluation rules 
generalizes confluence analysis defined providing wider notion compatibility rules commutativity basis parallel execution strategy :10.1.1.30.9989
generalization copes immediate deferred coupling modes complex condition action languages 
attempt deal event algebras mixed transition granularities relies phased execution cycles deferred rule execution simplify confluence analysis 
common consider rule analysis optimisation 
andrew dinn described incorporates powerful event specifications execution model features analysis optimisation looks multiple query optimisation parallelism means providing better performance 
cycle allowed hierarchy recursive triggering terminate 

rule analysis rap section describes rule analysis rap presenting results termination confluence 

termination termination analysis rap relies result detailed rule program exhibit non terminating rule triggering firing cycle rule triggering graph :10.1.1.30.9989
basic result needs applied context event definitions support unification rules triggered composite primitive events rule conditions rule actions raise events 
consideration termination analysis rap starts looking effect features construction triggering graph defined section 

triggering graphs event parameters described section event definitions rap defined match quite precisely call application 
summary section indicated conduct rule termination analysis rap account event parameters composite events fact conditions raise events 
algorithms lean heavily analysis event specifications context triggering graphs 
experimental reported performs significantly sophisticated event unification suggests termination analysis event unification highly effective practice 

confluence confluence analysis rap method described :10.1.1.30.9989
termination analysis changes need allow extra complexities rap knowledge execution models 

commutativity coupling modes transition granularity confluence analysis built method establishing commutativity pairs rules starburst active rule language :10.1.1.30.9989
starburst commutativity algorithm considers operations performed rule condition action identifying rule read set subset database schema extent may read condition evaluation action execution write set subset database schema extent may written rule action 

confluence confluence analysis rap method described :10.1.1.30.9989
termination analysis changes need allow extra complexities rap knowledge execution models 

commutativity coupling modes transition granularity confluence analysis built method establishing commutativity pairs rules starburst active rule language :10.1.1.30.9989
starburst commutativity algorithm considers operations performed rule condition action identifying rule read set subset database schema extent may read condition evaluation action execution write set subset database schema extent may written rule action 
identifies write read clash rules write set rule overlaps read set write write clash write sets rules overlap 
clash occurs order rules execute affects final outcome 
pair rules ordered priority outcome clash rule set contains rules vacuously confluent 
contexts multiple query optimisation applied depend coupling modes rules involved algorithms take account features optimising rule bases 
supported gr uk engineering physical sciences research council support pleased acknowledge 
grateful fernandes careful reading helpful comments resulted 
active databases input members act net european active rules network 
aiken hellerstein widom :10.1.1.30.9989
static analysis techniques predicting behaviour active database rules 
acm tods 
baralis ceri paraboschi 
improved rule analysis means triggering activation graphs 
