indexing positions continuously moving objects christian jensen scott mario lopez department computer science aalborg university denmark department mathematics computer science university denver colorado usa coming years witness dramatic advances wireless communications positioning technologies 
result tracking changing positions objects capable continuous movement increasingly feasible necessary 
proposes novel tree indexing technique supports efficient querying current projected positions moving objects 
technique capable indexing objects moving dimensional space 
update algorithms enable index accommodate dynamic data set objects may appear disappear changes occur anticipated positions existing objects 
comprehensive performance study reported 
insertion algorithms tree consider extending moving points aim minimize objective functions areas bounding rectangles margins overlap bounding rectangles 
context functions time dependent consider evolution 
specifically objective function integral minimized 
area integral computes area volume trapezoid represents part trajectory bounding rectangle space see 
integral formula dynamic update algorithms described algorithms described :10.1.1.24.2262
insertion deletion insertion algorithm tree employs functions compute area bounding rectangle intersection bounding rectangles margin bounding rectangle splitting node distance centers bounding rectangles doing forced 
tpr tree insertion algorithm tree exception functions mentioned integrals formula functions 
computing integrals area margin distance relatively straightforward :10.1.1.24.2262
algorithm computes integral intersection rectangles extension algorithm checking rectangles overlap see section 
area integral computes area volume trapezoid represents part trajectory bounding rectangle space see 
integral formula dynamic update algorithms described algorithms described :10.1.1.24.2262
insertion deletion insertion algorithm tree employs functions compute area bounding rectangle intersection bounding rectangles margin bounding rectangle splitting node distance centers bounding rectangles doing forced 
tpr tree insertion algorithm tree exception functions mentioned integrals formula functions 
computing integrals area margin distance relatively straightforward :10.1.1.24.2262
algorithm computes integral intersection rectangles extension algorithm checking rectangles overlap see section 
time point rectangles intersect intersection region rectangle dimensions upper lower bound rectangle defined upper lower bound intersecting rectangles 
algorithm divides time interval returned overlap checking algorithm consecutive time intervals intersection defined time parameterized rectangle 
intersection area integral computed sum area integrals 
time point rectangles intersect intersection region rectangle dimensions upper lower bound rectangle defined upper lower bound intersecting rectangles 
algorithm divides time interval returned overlap checking algorithm consecutive time intervals intersection defined time parameterized rectangle 
intersection area integral computed sum area integrals 
illustrates subdivision intersection time interval smaller intervals dimensional case 
algorithm :10.1.1.24.2262
section parameter introduced 
parameter intuitive static setting static data 
dynamic setting remains component length time period integrals computed insertion algorithm 
large component depends update frequency 
page buffer bytes pages root tree pinned page replacement policy employed 
nodes modified index operation marked dirty buffer written disk operation removed buffer 
performance studies workloads queries update operations index simulating index usage period time 
addition workload initially index 
efficient algorithm developed tpr tree :10.1.1.24.2262
algorithm heuristic minimizing area integrals parameter 
proceed describe updates queries initial data generated 
moving objects positions velocities uniformly distributed unrealistic attempt generate realistic skewed twodimensional data simulating scenario objects cars move network routes roads connecting number destinations cities 
addition simulating cars moving cities scenario motivated fact usually underlying infrastructure moving objects tend destinations 
rep ch june 
samet 
design analysis spatial data structures 
addison wesley reading ma 
jensen lopez :10.1.1.24.2262
indexing positions continuously moving objects 
technical report department computer science aalborg university 
jensen 
tree indexing general spatio temporal data 
