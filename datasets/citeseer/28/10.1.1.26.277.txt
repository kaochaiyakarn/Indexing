zeus toolkit building distributed multi agent systems nwana ndumu lee applied research technology bt laboratories heath ip re info bt uk multi agent systems approach knowledge level operation autonomous agents promises significant benefits distributed systems engineering enhanced interoperability scalability 
far innate difficulty constructing multi agent systems promise largely 
emerging desire agent developers move away developing point solutions point problems favour developing methodologies toolkits building distributed multi agent systems 
philosophy led development zeus agent building toolkit facilitates rapid development collaborative agent applications provision library agent level components environment support agent building process 
zeus toolkit synthesis established agent technologies novel solutions provide integrated collaborative agent building environment 
notion heterogeneous autonomous agents collaborating solve problems powerful metaphor engineering distributed interoperable software systems 
notion heterogeneous autonomous agents collaborating solve problems powerful metaphor engineering distributed interoperable software systems 
agent approach introduces new level abstraction knowledge level operation autonomous systems enhances distributed systems interoperability scalability re 
far promise agent approach largely distributed software engineering community 
due number factors including current lack standards agent technology primarily inherent complexity constructing collaborative agent systems 
facilitate large scale realisation collaborative agent approach distributed software engineering urgent need frameworks methodologies toolkits support rapid development multi agent systems :10.1.1.48.4629
explosion number multi agent system development environments frameworks toolkits :10.1.1.37.7970:10.1.1.41.631:10.1.1.31.3660
describes zeus toolkit constructing collaborative multi agent applications 
zeus careful synthesis established agent technologies provide integrated environment rapid development multi agent systems 
zeus defines multiagent system design approach supports visual environment capturing user specification agents generate java source code agents 
agent approach introduces new level abstraction knowledge level operation autonomous systems enhances distributed systems interoperability scalability re 
far promise agent approach largely distributed software engineering community 
due number factors including current lack standards agent technology primarily inherent complexity constructing collaborative agent systems 
facilitate large scale realisation collaborative agent approach distributed software engineering urgent need frameworks methodologies toolkits support rapid development multi agent systems :10.1.1.48.4629
explosion number multi agent system development environments frameworks toolkits :10.1.1.37.7970:10.1.1.41.631:10.1.1.31.3660
describes zeus toolkit constructing collaborative multi agent applications 
zeus careful synthesis established agent technologies provide integrated environment rapid development multi agent systems 
zeus defines multiagent system design approach supports visual environment capturing user specification agents generate java source code agents 
breakdown rest follows section briefly describes issues involved building distributed multi agent systems main problems raised knowledge level collaboration heterogeneous distributed independently autonomous software systems 
communication requires shared representation understanding common domain concepts common ontology 
information discovery typically handled special purpose utility agents facilitators function society wide white pages address books yellow pages providing look service agents addresses abilities respectively 
agents need register address nameserver abilities facilitator visible society 
scalability robustness facilitators arranged hierarchies similar internet domain 
facilitators manage message traffic agent societies :10.1.1.31.3660
communication languages developed meet need agent independent agent communication language acl 
notable examples include knowledge query manipulation language kqml fipa acl 
agent communication languages speech act theory human utterances viewed actions sense actions performed everyday physical world picking block 
acls specify message types performatives ask tell achieve virtue sent agent assumed effect illocutionary actions receiving agent 
required toolkit support agent creation process providing structured menus application developers configure functionality modalities required agents selecting appropriate menu items 
thirdly toolkit support open design ensure easily extensible 
expert users able easily add library agent level components configure new agents combination user defined system supplied components 
required toolkit utilise standardised technology feasible designed standardisation mind 
argue ndumu nwana standardisation sine qua non industrial technology :10.1.1.48.4629
way envisaged components replaced little difficulty standardised components 
standardisation agent applications address agent agent agent legacy software agent user interactions standardised acl example attempts content languages acls 
zeus functional requirements having briefly described design philosophy consider requirements viewpoint user toolkit 
viewed user centred perspective required toolkit allow users configure number different agents varying functionality behaviour organise agents manner system supplied organisational relationships agent selected system supplied user defined communicative ordination mechanisms supply agent appropriate application specific problem solving code generate automatically executables agents 
default goal processing graph implicitly implements agent accept goal available resources pursue agent continue accepting goals come served basis capacity exhausted agent accepted goal agent fully committed goal power ensure goal achieved 
shall see discussing exception handling agent remains committed accepted goal longer best interest remain 
particularly noteworthy current version ordination engine explicit rationality model reasoning framework determine accept goals equivalently abandon goals may technically achievable 
model needed implemented adding agenda associated reasoning rules control conditions goal processing graph launched goal selection ii node queue ordination engine goal scheduling control 
reasoning rules agenda essentially equivalent desire filter belief desire intention agent architecture :10.1.1.37.7970
application domains designed zeus explicit rationality model deemed particularly necessary plan include versions system 
planner scheduler role planner scheduler construct action sequences achieve desired input goals 
planner control ordination engine initiates planning manages contracting subgoals agent achieve 
plan operator representation described section planning operators actions tasks represented classical fashion primitive summary operators 
retsina architecture distributed collection goal oriented software agents operate asynchronously perform information retrieval integration supporting various decision making tasks 
university toronto agent building shell related zeus 
describes agent building shell provides reusable layers languages services building agent systems coordination communication languages description logic knowledge management operative information distribution organisation modelling conflict management 
progress resulted practical toolkit embodiment zeus coherent architecture retsina effort having expended issues description logics non monotonic truth maintenance agent systems extension kqml derive language cool 
toronto clearly recognises begins addressing important issues identified ndumu nwana :10.1.1.48.4629
borrowed conversation rules cool language take top approach managing conversations agents ordination graph specification bottom design 
jackal agent communication infrastructure support agent agent communication kqml acl 
jackal implements various conversation policies cool 
desire provides compositional development method architecture multi agent systems 
focuses architecture attempts provide generic compositional building blocks specifying agent architectures zeus 
desire prescribe specify issues protocols example inter agent collaboration support truly distributed agent systems 
desire offer similar visualisation debugging facilities zeus 
desire develop prototype multi agent applications 
open agent architecture oaa truly open architecture developing distributed multi agent systems :10.1.1.31.3660
key distinguishing feature powerful facilitator ordinates agents set planner 
facilitator receive tasks agents decompose award agents set 
agents communicate facilitator obvious bottleneck 
oaa employs custom primitive agent communication language 
facilitator receive tasks agents decompose award agents set 
agents communicate facilitator obvious bottleneck 
oaa employs custom primitive agent communication language 
designed minimise effort involved creating new agents wrapping legacy applications 
oaa systems exist :10.1.1.31.3660
oaa principally differs zeus ordination zeus agents decentralised oaa centralised facilitators 
oaa generate code zeus offer similar visualisation debugging facilities 
dmars architecture developed australian artificial intelligence institute conceptual underpinnings belief desire intention bdi model provides environment developing distributed multi agent systems 
dmars agents attempt bdi reasoning framework 
