database programming transaction logic anthony bonner university toronto department computer science toronto ontario canada bonner db toronto edu michael kifer suny stony brook department computer science stony brook ny kifer cs edu consens university toronto department computer science toronto ontario canada consens db toronto edu presents database applications proposed transaction logic extension classical predicate logic accounts clean declarative fashion phenomenon state changes logic programs databases 
natural model theory sound complete proof theory logics allows users program transactions 
addition semantics leads naturally features single logic proved elusive past 
transaction logic holds promise logical model hitherto non logical phenomena including called procedural knowledge ai behavior object oriented databases especially methods side effects 
focuses applications database systems including transaction definition execution nested transactions view updates consistency maintenance bulk updates nondeterminism sampling active databases dynamic integrity constraints hypothetical reasoning imperative style programming 
supported part operating natural sciences engineering research council canada university toronto 
transaction logic abbreviated accounts clean declarative fashion phenomenon updating arbitrary logical theories notably databases logic programs 
logics action declarative formalism specifying executing procedures update permanently change database logic program generally logical theory 
special case transactions defined logic programs 
possible classical logic horn version procedural declarative semantics efficient sld style proof procedure 
formal aspects focuses applications database systems :10.1.1.51.278
designed applications mind especially databases logic programming ai 
developed general logic solve wide range update related problems 
individual applications different fragments logic 
applications practical theoretical discussed great detail 
developed general logic solve wide range update related problems 
individual applications different fragments logic 
applications practical theoretical discussed great detail 
instance logic programming leads clean logical treatment assert retract operators prolog effectively extends theory logic programming include updates queries 
object oriented databases combined object oriented logics logic provide logical account methods procedures hidden inside objects manipulate objects internal states :10.1.1.115.3586
logic covers structural aspect object oriented databases combination account behavioral aspect 
ai suggests logical account planning 
strips actions instance aspects hierarchical non linear planning easily expressed spite previous efforts give phenomena declarative semantics unifying logical framework account 
surface candidates logic transactions logics reason updates related phenomena time action 
systems update thought query side effects 
model behavior provide logical foundation object oriented databases 
achieves allowing logical formula truth value side effect database 
way account behavior object oriented databases formalisms 
integrating logic structural aspect object oriented systems accounted :10.1.1.115.3586:10.1.1.115.3586
system comes closest spirit prolog 
unfortunately updates prolog non logical operations result state changing procedures awkward prolog programs difficult understand debug maintain 
provides general solution aforementioned limitations prolog action logics 
overview transaction logic extension order logic syntactically semantically 
complete development including proof theory extent 
classical logic horn version particular interest deductive databases 
horn transaction defined datalog style rules premise specifies sequence queries updates 
horn logical language programming database transactions just datalog logical language programming queries 
furthermore horn efficient sld style proof procedure dual bottom procedure :10.1.1.51.278
proof procedures answer queries execute transactions update database 
importance focuses applications horn describe full horn restriction 
syntax syntax distinguishes kinds formulas transaction formulas elementary transitions 
define composite transactions define elementary updates 
instance atoms ins del stand insertion deletion atom defined enumerable set elementary transitions consisting formulas ins del relational database enumerable sets elementary transitions called transition bases 
practice formulas materialized generated demand algorithm 
reader referred detailed discussion transition bases 
seen syntax strict distinction relational databases operators thought union 
general order formula defining insertion deletion involved :10.1.1.115.3586
predicates query database predicates update 
classical logic predicate truth value addition predicate may side effect changing state database 
uniformity representation important modeling methods object oriented databases generally distinguish information retrieving state changing methods 
desired distinction different sorts predicates updates queries 
database corresponds particular state state consisting models database 
approach states provides lot flexibility defining elementary updates 
flexibility needed general databases semantics elementary updates obvious relatively simple updates insert delete 
example mean insert atom database entails especially explicitly database 
simple answer question solutions proposed see comprehensive discussion :10.1.1.115.3586
reasons take general approach elementary updates 
elementary update mapping takes database database database order formula 
generally elementary update may non deterministic just mapping binary relation databases 
database applications wide variety interesting useful formulas constructed formulas capture novel important features database knowledge base systems 
second solution defining non deterministic transaction removing tuples view 
illustrate approach define procedure called rem student allows user view remove student course 
likewise define procedure called rem prof allows user remove professor course 
procedures defined follows rem student prof stud crs takes stud crs sec drop stud crs sec rem prof prof stud crs takes stud crs sec relieve prof crs sec way user view deletions knowing section course student takes prof teaches direct access transactions drop relieve 
approach view updates similar advocated object oriented databases different update method programmed allowed view update :10.1.1.32.6420
second approach problem define non deterministic update procedure rem teaches combining definitions rem student rem prof rem teaches prof stud crs takes stud crs sec drop stud crs sec rem teaches prof stud crs takes stud crs sec relieve prof crs sec delete fact professor teaches course certain student system perform actions drop student course ii relieve professor course 
choice nondeterministic system run time 
course user usually want leave choices entirely database system 
cases user constrain system choice ensure instance deletion teaches relation relieve professor course 
rel satisfies functional dependency fd 
rel maximal having property 
bulk updates sampling assignments defined transition base 
instance define add entries transition base practice transition base probably enumerated special procedure written language important point semantics allows procedures 
explicitly construct choice operator :10.1.1.18.8803
falls naturally semantics special case 
hypothetical reasoning hypothetical queries play important role reasoning knowledge 
queries necessary perform hypothetical updates actual ones 
instance game playing program may reason follows performing series actions opponent situation improve 
serial implication expresses relations 
example constraints iii iv expressed formulas respectively unlock shoot shoot lock load addition temporal relations immediately immediately express temporal relations style james allen theory time intervals 
relations include time time start full elaborates ideas 
comparison works far databases concerned aware declarative approach updates comprehensive particular works discussed capable expressing constraints execution complex transactions 
likewise seamlessly accommodate hypothetical state transitions transitions commit exception works limited updating sets ground atomic facts :10.1.1.115.3586
extensive comparison 
winslett foundational meaning updates general logical theories 
grahne mendelzon axiomatized various theories state transition studied tractable cases call elementary state transitions approach state transitions inspired results 
manchanda warren introduce dynamic prolog logic system update transactions right failed leave residue database 
hull jacobs 
language constructs programming active databases 
int conference large data bases pages 
morgan kaufmann san francisco ca 
mendelzon :10.1.1.115.3586
difference updating knowledge base revising 
proceedings international conference knowledge representation reasoning pages boston mass april 
kifer lausen wu :10.1.1.115.3586
logical foundations object oriented frame languages 
morgan kaufmann san francisco ca 
mendelzon :10.1.1.115.3586
difference updating knowledge base revising 
proceedings international conference knowledge representation reasoning pages boston mass april 
kifer lausen wu :10.1.1.115.3586
logical foundations object oriented frame languages 
journal acm july 
krishnamurthy naqvi 
non deterministic choice datalog 
account situation version entailment allows omit intermediate final database states 
intuitively statement says transaction execute successfully starting database 
formally statement read follows transition base transaction base transaction succeeds database context clear simply say transaction succeeds 
likewise statement true say transaction fails 
inference system allows find database sequence :10.1.1.51.278
dn fact enumerate sequences satisfy statement transaction succeeds 
statement dual 
informally says execute successfully terminating state dn 
discussed fully 
hand items infer truth directly transition base database 
specifically item deals elementary updates item handles database queries 
hand items combine existing entailments infer new 
specifically item infers classical conjunctions item infers serial conjunctions item infers defined transactions 
items anticipate proof procedures form model theoretic basis procedures :10.1.1.51.278
item basis wide class dynamic constraints section 
lemma corresponds special case transaction affect database acts query 
case classical serial conjunction identical 
reflected rules special cases items respectively 
