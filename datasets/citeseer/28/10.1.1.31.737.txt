new heuristic optimizing large queries fegaras department computer science engineering university texas arlington yates street box arlington tx email fegaras cse uta edu number oodb optimization techniques proposed translation path expressions joins query unnesting may generate large number implicit joins simple queries 
unfortunately current commercial query optimizers dynamic programming approach system handle queries tables 
number proposals advocate combinatorial optimization techniques iterative improvement simulated annealing deal complexity problem 
techniques fail take advantage rich semantic information inherent query specification information available query graphs gives handle choose relations join time 
presents polynomial time algorithm generates quality order relational joins 
minor modifications sort oodb algebraic operators 
oodb algebras grouping explicitly supported operator appear place algebraic form form query nesting unnested promoting inner queries level query nesting hierarchy 
results large flat join concatenation joins level nested query 
furthermore unnesting methods proposed literature introduce additional operators outer joins grouping increasing number operators considered time 
sources implicit operations include views methods expanded query optimization 
number heuristics proposed literature optimizing large relational queries deal acyclic query graphs generate deep left join trees :10.1.1.17.775:10.1.1.76.1079
widely believed database community goal optimizer find best evaluation plan execute query infeasible non trivial queries avoid worst plans 
cost guided searching combinatorial optimization techniques iterative improvement simulated annealing extract solution fixed amount time 
unfortunately cost searching methods proposed far takes advantage semantic information inherent queries information available query graphs gives handle choose relations join time 
believe heuristic algorithm semantic knowledge inherent query graphs lesser extent cost searching appropriate choice cost searching 
difference substantial 
parts curve relations shown correspond negative values gamma 
indicates ii bad really bad goo plans orders magnitude lower cost ii plans ii substantially better goo ii plans better goo plans 
consequently goo algorithm consistent stable optimizing large queries 
related heuristics proposed literature join ordering large relational queries deal acyclic query graphs generate deep left trees :10.1.1.76.1079
comparison heuristics various randomized algorithms 
shown restriction query graphs problem generating optimal plan np hard 
commercial relational optimizers dynamic programming approach system handle queries tables 
notable exception starburst uses various polynomial algorithms query graph shape linear queries able optimize queries containing tables 
