accepted ijcai workshop modelling solving problems constraints 
explanations design patterns identification yann ga gu narendra jussien cole des mines de nantes rue alfred bp nantes cedex yann narendra jussien fr design patterns describe micro architectures solve recurrent architectural problems objectoriented programming languages 
important identify micro architectures maintenance object oriented programs 
micro architectures appear distorted source code 
application explanation constraint programming identifying distorted micro architectures 
production quality source code important matter software industry 
quality source code facilitates evolutions maintenance addition new functionalities bug corrections adaptation new platforms integration new class libraries 
object oriented programming quality source code respecting conventions idioms elegant class architecture 
works studied aspect demeyer gives synthesis aspect difficult define studied mention jahnke 
micro architecture describes structure subset classes object oriented program 
solutions proposed design patterns gamma examples micro architectures 
easy write directly source code carefully respects design patterns 
time distorted design patterns source code micro architectures similar identical proposed design patterns 
lack tools helping identify distorted versions design patterns existing source code indicating possible improvements pointing differences exact design pattern 
article propose explanation constraint programming jussien sake clarity remainder article object oriented programming language java term class particular represents class class interface 
identify correct micro architectures similar design patterns 
section introduces notion design pattern precisely 
section recalls solutions proposed literature identification correction program source code 
section discusses notions explanations constraint programming 
section presents solution identify architectures similar design patterns section gives results obtained industrial libraries 
design patterns architecture software system unique 
depends context developed various aspects expected lifetime cost development foreseen evolutions experience architects developers 
particular problem exist optimal architecture architecture adapted context 
focus general context independent architectural problems 
definition recurring architectural problems design patterns gamma represent solutions independent context object oriented language 
capture experience developers 
definition design pattern contains essential parts 
unique name identifying pattern 
description addressed architectural problem 
solution problem class diagrams representing involved classes roles omt notation object modelling technique rumbaugh 
consequences possible trade offs solution example composite design pattern builds complex structures objects composing recursively objects nature tree manner 
lets treat uniformly objects compositions objects 
general structure composite design pattern shown example 
composite design pattern definition gamma pp 
embodies eleven sections pages pages average length design pattern definition book 
sections intent motivation applicability introduce problem part compose objects tree structures representing part hierarchies treat uniformly individual objects compositions objects 
sections structure participants collaborations propose solution part problem class diagrams instance diagrams list participants list presenting class roles list collaborations list presenting class interactions 
consequences section part states effects applying design pattern simplification clients implementation 
sections implementation sample code known uses related patterns provide specific information implementation solution 
description problem solved design pattern informal 
represents set motivations apply design pattern precise description addressed problem 
directly description detect architectural problems 
hand consider architectural solution described class diagrams source code examples example micro architecture 
example overview composite design pattern general structure composite design pattern shown 
class interface component defines operation applied object type leaf composition objects type component composite 
instances composite class charge applying operation children 
composite design pattern higher quality code software architecture subject evolutions transformations life cycle 
evolutions transformations slow design patterns impede quality 
difficult apply priori design pattern solutions micro architectures software finished 
applying design patterns requires thorough knowledge existing design patterns knowledge developers possess insight architecture 
propose design patterns improve source code quality produce directly design pattern compliant source code 
want identify places architecture quality improved design patterns 
approach consists detecting groups classes structures close micro architecture solution suggested design pattern see example 
class structure group improved applying solution design pattern 
approach consists description relationships classes introduced design pattern explanation constraint solver detecting source code classes structure close referenced design pattern transforming source code accordingly design pattern specifications 
article describe phase identification phase 
example identification composite design pattern consider development application produce representations documents 
left kernel application consists class element defines common interface elements document titles class title paragraphs class paragraph indented paragraphs class 
document class composes elements describe document 
architecture similar composite design pattern 
specifications design pattern require document class subclass element class unify interfaces allow composition documents right 
state art software engineering re engineering studies exist automating identification correction design defects 
reasons lack material 
hand automation processes techniques related intellectual activity software development welcomed 
automation welcomed loss control resulting automation process acting software software difficult maintain 
loss control automatic detection correction design defects perceived important compared benefits brought automation 
hand solutions proposed solutions reduced problems semi automatically detecting correcting design defects classes jahnke fowler demeyer example problem long methods lack cohesion methods class problems detecting design patterns existing source code help documenting understanding legacy systems brown kr mer prechelt wuyts ducasse 
works clearly show fully automatic approach ambitious software complexity user input really important 
techniques exist identify design patterns 
techniques logic programming great interest wuyts design pattern described set kernel application describe documents left original architecture right corrected architecture 
class depicted box ore division containing class name possibly class associations methods fields 
association represented plain arrow aggregate class component 
dotted arrows instance creation knowledge links 
square line empty triangle corresponds inheritance 
logical rules 
logical rules unify facts representing source code identify design patterns 
technique limited 
detects classes relationships described logical rules 
directly allow detect similar identical micro architectures design pattern 
rules extended introduce missing distorted cases obtain solutions 
consequently rules quickly impossible manage 
addition new design patterns requires thinking possible distortions conceiving system rules 
outside object oriented languages community search sub graphs graph gin presents similarities 
knowledge search sub graphs similar merely identical subgraph studied 
related phase adaptation case reasoning 
fuchs technique adapted continuous domains order relation values technique unadapted discrete problem 
conclude acceptable solution problem favor dialog developer explain concretely architecture group classes distorted version existing design pattern direct dynamically search architectures proposing interactively exclusion characteristic design pattern avoid determining priori possible evolutions reasons propose explanations constraint programming 
explanation constraint programming explaining suggesting possible architectural modifications interesting way improve object oriented source code 
explanation constraint programming proved interest applications jussien 
recall section 
explanations consider constraint satisfaction problem csp 
decisions enumeration phase variable assignments correspond adding removing constraints current constraint system backtracking 
contradiction explanation nogood schiex verfaillie subset current constraint system problem left leads contradiction feasible solution contains nogood 
contradiction explanation divides parts subset original set constraints equation subset decision constraints introduced far search 
vk ak contradiction explanation composed decision constraint variable vj selected previous formula rewritten vi ai vj aj left hand side implication constitutes eliminating explanation removal value aj domain variable vj noted expl vj aj 
classical csp solvers domain reduction techniques removal values 
recording eliminating explanations sufficient compute contradiction explanations 
contradiction identified domain variable vj emptied 
contradiction explanation easily computed eliminating explanations associated removed value expl vj vj contradiction explanation contain constraint denotes constrained problem 
exist generally eliminating explanations removal value 
recording leads exponential space complexity 
technique relies forgetting erasing eliminating explanations longer relevant current variable assignment 
doing space complexity remains polynomial 
keep explanation time value removal 
computing explanations minimal inclusion explanations interesting 
allow precise information emerging dependencies variables constraints dependencies identified search 
unfortunately computing explanations time consuming junker 
compromise size computability knowledge inside solver 
constraint solvers know explicitly remove values domains variables 
precise interesting eliminating explanations computed explicitly stating information 
achieve behavior necessary alter solver code 
jussien modifying solver 
explanations explanations ways jussien jussien jussien 
debugging purposes pop mind explain clearly failures explain differences intended observed behavior problem value assigned variable 
explanations determine direct indirect effects constraint domains variables problem dynamic constraint removal 
case justification system bessi re solving dynamic csp 
justification system partial explanation system 
able explain failure dynamically remove constraint facilitates building dynamic constrained problem solver jussien boizumault 
direct applications possible particular explanation guide search 
classical backtracking searches proceed encountering failures backtracking choice point 
contradiction explanation improve standard backtracking exploit information gathered improve search provide intelligent backtracking gu ret replace standard backtracking jump approach la dynamic backtracking ginsberg jussien develop new local searches partial instantiations jussien 
interesting design pattern identification context ability explanation systems explain solution problem 
stated contradiction explanation contain decision constraints denotes nogood said relevant decision constraints valid current search state bayardo jr miranker 
constrained system system possible solutions 
explanations recursively obtained having tested possible values variable 
interested reader refer jussien information 
provide data driven search user input contradiction explanation justifies lack solutions current problem 
selecting relaxing constraint explanation allows discovery new solutions distorted solutions original problem 
selection left user knows constraint relax keep principle design pattern searched 
data driven search design patterns detailed section 
application problem detection micro architectures similar design pattern explanation constraint programming consists 
modelling set design patterns csp microarchitecture solution proposed design pattern modelled set constraints 
variable associated class defined design pattern 
variables model integer valued 
domain variable set existing classes source code 
class identified unique integer 
relationships classes inheritance association represented constraints variables 
see example 
modelling user source code keep information needed apply constraints class names forming domain variables relationships classes abstracted tables attached library constraints 
see example 
resolving csp search distorted solutions solutions violates constraints specified design pattern real solutions csp search guided dynamically user find interesting distorted solutions 
information explanations contradiction provided constraint solver help user 
library specialized constraints relationships classes defined gamma built library constraints 
specialized constraints express inheritance association knowledge relationships 
constraints involve variables representing class tools manage constraints sets 
simple trick handle constraints sets variables representing sets classes enumerated problem solving 
propagation mechanism ensures consistency variable domains specific nature constraints 
library offers constraints covering broad range design patterns 
design patterns difficult express need additional relationships decomposition relationships sub relationships 
provide symbolic constraints library constraints combined form complex constraints strict inheritance establishes inheritance relationship classes variables defined example 
relationship enforced 
notion strict inheritance derive notion inheritance variables may represent class 
example strict inheritance constraint inheritance relationship links classes parent relationship superclass subclass 
considering single inheritance inheritance relationship partial order denoted set classes pair distinct classes inherits constraint associated inheritance relationship binary constraint variables classes operational semantics constraint dx represents domains variable da db db da knowledge establishes knowledge relationships classes 
class knows class methods defined invoke methods relationship binary oriented transitive 
denote relationship constraint related enforces 
non knowledge ensures reciprocal relationship 
class know class constraint expresses relationship 
composition ensures classes composed 
class composed instances class class defines fields type write relationship binary oriented transitive 
enforced constraint 
field type ensures field class type constraint establishes link 
generic constraint define easily new constraints 
behavior solver dedicated constraint library sufficient solve problem 
solutions fit exactly definition design pattern real solution csp improve quality user source code 
need find distorted solutions assignments verify features intended pattern violates constraints defining design pattern 
constraint programming key tool solving problem 
real solutions computed 
computation ends contradiction solution 
constraint programming provides contradiction explanation failure set constraints justifying combination classes verify constraints describing design pattern 
need relax constraints constraints provided contradiction explanation find real solutions 
contradiction explanation provides insights distorted solutions available precisely distortions constraint violations lead results associated constraints relaxed 
user input needed select constraints relaxed 
removing constraint suggested contradiction explanation necessarily lead new solvable csp constraints relaxed recursively solvable csp obtained constraints remain 
solutions new solvable csp distorted solutions original problem 
facilitate user input preferences assigned constraints problem reflecting priori hierarchy constraints preferences mandatory system 
metric derived preferences measures quality 
metric allows automation solver find distorted solutions sorted quality 
user driven version great interest priori preferences hard determine case 
user restrict interactively search subset distorted solutions 
explanation constraint programming gives complete control user important intellectual activity 
application composite design pattern model composite design pattern mean csp see example 
input source code example modelled classes relationships classes encoded tables see example 
example modelling composite design pattern composite design pattern example modelled associating variable class defined component composite leaf constraining values variables relationships classes composite component leaf component composite component 
explanation constraint solver palm jussien solves csp identify subsets classes structures similar micro architecture design pattern giving set distorted solutions see example 
source code modified accordingly leading corrected kernel application example right 
results developed tool patterns trace identification detection enhancement java see demonstration available www yann net html example modelling source code source code application example involves classes element title paragraph document main 
domain variable csp example component composite leaf size slot possible class source code 
define generic model encode classes source code system 
generic model table name string superclasses list components list list list relationships classes encoded model check relationships required design pattern name represents name class 
superclasses list direct superclasses class represented ephemeral object 
components list components aggregated class represented ephemeral object 
common super class components 
list classes known class represented ephemeral object 
list classes unknown class represented ephemeral object 
deduce automatically needed information source code application 
example solutions resolution csp modelling composite design pattern application produce representations documents see left produces results form dist sol quality component class dist sol quality composite class dist sol quality leaf class solution constraint component composite weight component element composite document leaf paragraph solutions 
solutions automatically provided tool 
interface 
tool performs different steps section improve quality source code architectural point view 
tool written java accepts java source code 
solver written claire caseau laburthe palm explanation constraint solver jussien developed top choco constraints system laburthe 
allows load visualize omt notation application written java generate model application constraint system call explanation constraint system palm model detect referenced design patterns visualize real distorted solutions perform needed transformations source code similar design pattern improve quality load visualize modified application design patterns referenced tool composite design pattern section facade design pattern models relationships set client classes set classes forming sub system unique facade class mutual knowledge see example mediator design pattern design pattern similar facade clients classes classes sub system may know 
example overview facade design pattern general structure facade design pattern shown 
facade design pattern composed classes clients facade clients facade facade clients clients 
clients variables encoding sets enumerated letting propagation system remove unfeasible solutions 
facade design pattern design pattern may modelled referenced tool 
structural design patterns compos interface 
ite facade easier model behavioral creational design patterns need statically undecidable information type particular object generic collection 
modelling factory observer singleton design patterns progress 
factory provides interface build families related objects specifying concrete classes 
behavioral observer design pattern defines dependencies objects dependent objects notified updated related objects changes 
creational singleton design pattern ensures class unique instance system provides global entry point 
applied tool different systems 
particular applied approach packages java class libraries java awt java net packages 
known occurrences composite facade design patterns identified known distorted occurrences 
results promising need analyze manually packages check possible distorted solutions identified models need check modelling design patterns method proven complete 
article original constraint programming propose solution difficult problem identification design patterns objectoriented source code 
explanations provide system distorted design patterns identified explained search completely driven user developed library dedicated constraints solve problem 
constraints tool 
results approach satisfying allow propose time tool solve problem 
current concerns definition relationships classes extension library constraints application constraints systems gamma course 
partly funded par object technology international drive ottawa ontario canada bayardo jr miranker roberto bayardo jr daniel miranker 
complexity analysis learning algorithms constraint satisfaction problem 
aaai 
bessi re christian bessi re 
arc consistency dynamic constraint satisfaction problems 
proceedings aaai 
brown kyle brown 
design reverse engineering automated design pattern detection smalltalk 
technical report tr university illinois urbana champaign 
caseau laburthe yves caseau fran ois laburthe 
claire combining objects rules problem solving 
proceedings jicslp workshop multiparadigm logic programming 
demeyer serge demeyer st phane ducasse oscar nierstrasz 
object oriented reengineering oop sla tutorial 
oopsla tutorial notes 
fowler martin fowler 
refactoring improving design existing code 
addison wesley 
fuchs fuchs lieber napoli 
algorithm adaptation case reasoning 
proceedings th european conference artificial intelligence ecai berlin germany pages 
gamma erich gamma richard helm ralph johnson john vlissides 
design patterns elements reusable object oriented software 
addison wesley 
gamma erich gamma 

available members ch gamma zip 
ginsberg matthew ginsberg 
dynamic backtracking 
journal artificial intelligence research 
gu ret gu ret narendra jussien christian prins 
intelligent backtracking improve branch bound methods application problems 
european journal operational research 
jahnke jens jahnke albert 
rewriting poor design patterns design patterns 
proceedings workshop object oriented reengineering esec fse september 
junker ulrich junker 
quickxplain conflict detection arbitrary constraint propagation algorithms 
technical report ilog sa 
jussien narendra jussien vincent 
palm system explanation constraint programming 
proceedings techniques implementing constraint programming systems workshop cp pages singapore september 
jussien boizumault narendra jussien patrice boizumault 
best search property maintenance reactive constraints systems 
international logic programming symposium pages port jefferson usa october 
mit press 
jussien narendra jussien olivier 
local search constraint propagation conflict heuristics 
seventh national conference artificial intelligence aaai pages austin tx usa august 
jussien narendra jussien patrice boizumault 
maintaining arc consistency dynamic backtracking 
principles practice constraint programming cp number lecture notes computer science pages singapore september 
springer verlag 
kr mer prechelt christian kr mer lutz prechelt 
design recovery automated search structural design patterns object oriented software 
proceedings working conference reverse engineering pages 
laburthe fran ois laburthe 
choco api 
technical report version committee 
mitchell chen gansner 
bunch clustering tool recovery maintenance software system structures 
proceedings icsm 
gin jean charles gin 
pour intelligence artificielle 
application la 
th se de doctorat universit de montpellier ii december 
french 
ducasse st phane ducasse 
recovering high level views object oriented applications static dynamic information 
proceedings icsm 
rumbaugh james rumbaugh michael blaha william premerlani frederick eddy william 
object oriented modeling design 
prentice hall 
schiex verfaillie thomas schiex rard verfaillie 
nogood recording fot static dynamic constraint satisfaction problems 
international journal artificial intelligence tools 
wuyts wuyts 
declarative reasoning structure object oriented systems 
proceedings tools usa pages 
