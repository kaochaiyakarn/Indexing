unifying concurrency control recovery transactions semantically rich operations hasse ye department computer science university ky usa email cs edu breitbart 
schek institute information systems eth ch zurich switzerland email ye schek inf ethz ch classical theory transaction management contains different aspects concurrency control recovery ensure serializability atomicity transaction executions respectively 
concurrency control recovery independent criteria aspects developed orthogonally result cases criteria incompatible 
unified theory concurrency control recovery databases read write operations introduced ava allows reasoning serializability atomicity framework 
ava class schedules introduced called prefix reducible guarantees serializability atomicity failure prone environment read write operations 
protocols developed generate schedules database concurrency control mechanism 
section define protocols generating safe schedules prove correctness 
section concludes 
model description section describe transaction model 
main purpose model unify concepts serializability failure atomicity concurrently executed transactions defined arbitrary finite set operations 
similarly model basic principles ffl operations defined arbitrary data types operation define undo operation undoes effects corresponding operation :10.1.1.32.8317
ffl recovery related operations undo operations explicitly transactions consequently schedule represents execution regular operations 
ffl serializability respect commutativity relation undo operations reason correctness schedules including recovery operations especially interference recovery related undo regular operations schedule 
formalize ideas discuss section notion operations defined data objects data type undo operations sole purpose recover effects corresponding operation 
model possible database states sequences allowed adt operations return values avoid explicit definition database states 
partial order determined follows operations 
transactions abort aborts ordered conflicting undo operations transactions reverse order corresponding forward operations forward operations ordered undo operations arbitrary order 
undo operations transaction commit follow transaction original operations precede 
undo operation gamma fi conflicts gamma 
gamma conflicts gamma gamma gamma say schedule reducible red exists expanded schedule transformed serializable schedule applying rules :10.1.1.32.8317
commutativity rule operations different transactions commutes order replaced 
undo rule gamma operations gamma gamma removed illustrate consider schedule delete insert est expansion delete insert est est gamma delete gamma reducible 
hand schedule delete insert est expansion delete insert est est gamma reducible 
goal obtain expanded schedule schedule design transaction manager way generates schedules expanded explicitly backward operations remains serializable application commutativity undo rules 
transaction manager dynamically generates schedule executed transactions 
means time schedule may contain operations active transactions 
transaction manager ensure serializability committed transactions require prefix schedule serializable sure transaction commit 
means property schedule reducibility prefix closed schedule reducible prefix reducible 
unfortunately class reducible schedules prefix closed online scheduling transactions :10.1.1.32.8317
resolve requiring schedule prefix reducible definition schedule prefix reducible pred prefix reducible 
example schedule reducible prefix reducible schedule delete insert est prefix reducible 
similarly consider class prefix reducible schedules class schedules allow unify notions transaction serializability atomicity :10.1.1.32.8317
unified transaction theory section main theoretical results 
means property schedule reducibility prefix closed schedule reducible prefix reducible 
unfortunately class reducible schedules prefix closed online scheduling transactions :10.1.1.32.8317
resolve requiring schedule prefix reducible definition schedule prefix reducible pred prefix reducible 
example schedule reducible prefix reducible schedule delete insert est prefix reducible 
similarly consider class prefix reducible schedules class schedules allow unify notions transaction serializability atomicity :10.1.1.32.8317
unified transaction theory section main theoretical results 
goal provide constructive characterization prefix reducible schedules models semantically rich operations easily lead construction schedulers 
section identify conditions generalization characterization ava exact 
general case able provide constructive graph characterization prefix reducible schedules 
proc 

int 
workshop research issues data eng distributed object management taipei taiwan 
:10.1.1.32.8317
schek weikum ye 
unified theory concurrency control recovery 
proc 
acm principles database systems 
