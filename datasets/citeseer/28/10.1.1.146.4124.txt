erlang experimental telephony programming language armstrong virding computer science laboratory ab experimental programming language called erlang suitable programming telephony applications 
discuss requirements language introduce language series simple examples show sequential concurrent activities programmed 
discuss error recovery mechanism erlang performance characteristics current implementation 

erlang programming language designed pro concurrent real time distributed applications 
grew series experiments aimed creating language suitable programming large scale telephony applications 
main characteristics language follows 
robustness programming large systems small programming errors view inevitable 
mal systems exhaustive test procedures currently capable ensuring fault free software systems size complexity modern applications 
errors interested problem detecting handling errors manner system exhibits satisfactory behaviour presence errors 

real time concerned real time applications 
response times critical 
circumstances partic ular operation performed certain time 
erlang mechanisms expressing real time cies 

distributed kinds application interested essentially distributed 
systems built variable number communicating nodes 
node operates autonomously central master node system 
nodes communicate nodes form underlying transport medium 
weak coupling actual transport system distributed erlang system 
programs written erlang easily ported uni processor implemen tation multi processor multi node implementation minimal code changes 

fine grain erlang provides fine grain computational processes 
fine grain mean computational effort required create destroy parallel activity erlang small 
granularity computation important influence program 
general fine grain computations preferable heavy weight processes telephony applica tions natural way programming telephony application composed large number small independent agents 

functional notation erlang looks single assignment functional language 
subtle difference erlang strict functional language 
erlang designed language controlling real time applications control hardware strict sequencing events important 
pure functional language calling function twice arguments guaranteed produce result 
language function call may result hardware action ensure hardware produce result 
erlang viewed strict functional language regards computational functions dependent interaction real world success conventional imperative language regards ing hardware events 

concurrent erlang applications built large number parallel processes 
take view degree con currency application exactly match degree concurrency software structure program con application 
programming unconstrained parallel language statement language represents parallel activity difficult error prone 
individual process describe sequential behaviour allow number sequential processes execute concurrently 
method syn processes exchanging data processes message passing 

modular erlang built module system easier construct large systems 

simple examples erlang programs constructed large number small functions 
give formal definition erlang language semantics show language features example 
syntax erlang data structures variables similar prolog 
start factorial function built erlang equations factorial 
factorial factorial 
general equation syntax form head guard body 
function evaluation proceeds form pattern directed function 
function called system searches appropriate equation head matches function call 
variables occurring head bound values supplied call 
guard evaluated 
head matches condition implied guard true system commits body equation evaluated 
equations matched sequentially order appear page appropri ate match 
error equation match 
body evaluation sequential 
return value function result evaluating function body 
form lhs rhs occurring body function causes rhs evaluated result bound lhs 
lists written prolog 
example function reverses order elements list written rev rev 
rev rev rev 
example rev evaluates 
note notation denotes return value short quote function quote merely returns unevaluated argument 
previous examples shown functions defined sets recursion equations 
simple considerable power 
show expressive power erlang examining simplified telephony example 
example dialled number analyser 
define function lookup seq struct analyses number sequence seq see represents valid subscriber number 
lookup defined follows lookup seq struct returns subscriber valid sequence get digits ambiguous sequence invalid invalid sequence lookup seq nil invalid 
lookup struct get digits 
lookup digit digits struct arg index digit get arg arg lookup digits lookup nil invalid 
lookup subscriber subscriber 
lookup struct digits lookup digits struct 

struct data structure defined recursively follows nil struct subscriber struct iff structs object argument tuple argument represents action taken particular digit dialled 
analyse number sequence look rd argument tuple subscriber dial digit represented arguments tuple third argument tuple look nd argument sub tree eventually arrive terminal node struct nil representing invalid number subscriber representing valid user number 
example auxiliary functions 
index defined index 
built function get arg struct fetches th argument struct 
example get arg foo evaluates non recursive equations lookup lookup represent boundary conditions analysing sequence empty tree gives result invalid analysing empty sequence requires user supply digits 
rd equations lookup lookup specifies recursive tree walking case follow branches tree branch depending digit sequence 
manipulation way tree shows power erlang typical telephony programming problem 
tree insertion equally simple left exercise reader 

examples communication erlang primitives creating parallel process spawn sending receiving messages send receive 
illustrate take example simple process created count charging pulses telephony metering system 
firstly process records pulses 
module counter 
export start 
start sys proc counter sys proc 
counter sys proc tot receive proc bump tot tot counter sys proc tot sys report sys tot counter sys proc tot sys reset counter sys proc 
function start evaluated start counter process 
counter process receives bump message process proc messages report reset process sys 
note example included module declarations 
module declaration example causes function start exported module function counter purely local module 
exported functions functions accessed outside module 
set counter process started follows module sys start 
export init 
init sys 
init sys max id spawn line handler start port max spawn counter start sys id max max init sys max 
function sys start init sys max evaluated spawns max line handler processes connects line handler process process count number charging pulses sent line handler process 
note inter module require fully qualified names refer counter start module sys start simply start module counter 
flexible message passing process spawning mechanism provides convenient framework sim ple fragments telephony program expressed 
example illustrates part code conventional pots application 
code describes situation occurs call set 
assume calling sub dialled valid number called number free 
circumstances caller hear ring tone called subscribers phone ringing 
situation described pair communicating functions ringing ringing 
ringing receive hook tone terminate idle answered tone start switch conversation timeout tone terminate wait clear 
ringing receive hook ring answered conversation terminate ring idle 
side call evaluates function ringing side ringing sides point view things happen 
side call attempt going hook message hook received process partner answer message answered received process timeout occur 
seconds event timeout occurs 
erlang syntax express receive hook 
answered timeout 
represents code executed condition true 
hook message received ring tone calling subscriber hears stopped sending mes sage tone process tone mes sage sent called partner abandon call attempt terminate 
function idle evaluated 
called partner answers ringing tone removed switch started start switch 
call progress functions conversation conversation control progress call 
point note receive primitive selective say takes message matches queue messages waiting attention receiving process 
queues unmatched messages 
previous example process evaluating function ringing expecting messages hook answered 
messages arrive process waiting automatically queued processing 
example suppose messages sent received process eventually input queue process hook hook digit digit 
notation means message process input message queue process hook entry queue 
receive statement form receive hook 
remove top item queue receive id digit digit 
remove third entry queue binding variables id digit 
reception message state input queue hook hook digit 
selective behaviour receive intended erlang programs easily model ccitt sdl specifications 
sdl message reception unwanted mes sages saved processing 
mechanism implicit erlang 
advantage embedding fairly sophisticated message reception mechanism language frees pro grammer worrying messages processed time common problem telephony programming 
mechanism avoids deadlock problems occur languages occam csp parlog unexpected message permanently block communication channel 

error detection recovery erlang provides sophisticated error detection mechanism 
purpose error detection mechanism allow system take certain default actions event unplanned event 
error detection mechanisms programs written build system restore safe state event certain classes error 
error detection mechanism provides method process monitor behaviour process 
monitored process dies monitoring process informed take actions protect system restore safe state 

basic mechanisms error recovery mechanisms erlang described terms concepts process links exit signals 
execution processes establish links processes 
set processes process linked call link set process 
process terminates abnormally run time error termination special exit signal sent processes link set 
process terminates normally exit normal signal sent processes link set receipt exit signal default action receiving process terminate send exit signal processes link set 
exception signal exit normal received signal sim ply ignored 
default handling exit signals allow process take required action receipt exit signal 

simple example example evaluating function init creates processes child process evaluating function driver start linked parent process evaluating function monitor 
init process flag trap exit spawn link driver start monitor 
spawn link atomic command equivalent spawn immediately followed link command 
prevent situation process die linked parent process sees exit signal 
process flag trap exit command evaluated tells system allow process treat exit signals normal inter process messages received receive statements 
monitor receive id mess write received id mess exit id write process exited spawn link driver start monitor 
run time error occurs child process exit signal sent parent process 
trapped parent process previously issued process flag trap exit command 
parent traps exit signal follows receive exit id 
id bound process name daughter process bound term describing rea son exit signal 

robust server example demonstrate construct robust device allocation process 
suppose number resources represented processes allocated common device alloca tion process 
top loop device allocation process written follows top free allocated receive id alloc top alloc free allocated id id release resource allocated delete resource id allocated top resource free allocated 
top alloc allocated id id top free allocated 
top alloc resource free allocated id id resource top free resource id allocated delete delete delete 
process wishes reserve devices managed device allocation process sends message alloc process waits reply indicating resource available process indicating process allocated requesting process 
requesting process finished resource sends message release resource resource allocation process 
resource allocation process maintains lists free list free processes allocated list resource id pairs remembers resource resource allocated process id server correctly guarantee client processes obey client server protocol 
words guarantee client process releases reserved resources finished 
suppose programming error occurs client process 
circumstances client may terminate abnormally send release mes sage allocation process 
situation handled modification allocation process top recover free allocated receive id alloc top recover alloc free allocated id id release resource unlink id allocated delete resource allocated top recover resource free allocated exit id reason resource lookup id allocated allocated delete id allocated top recover resource free allocated 
top recover alloc allocated id id top recover free allocated 
top recover alloc resource free allocated id id resource link id top recover free resource id allocated 
lookup id resource id resource 
lookup id allocated lookup id allocated 
example modified previous code resource allocated client process link created evaluating link id function client resource manager 
client releases resource normal manner release message link removed evaluating unlink id function client terminates releasing resource exit signal received server note previously evaluated process flag trap exit function server establishes resource allocated terminating process examining allo cation list function lookup releases resource 
addition links client server automatically removed 

error kernels previous section showed construct robust device allocation server 
server function correctly presence programming errors client processes 
leads observation code large system correct order system provide acceptable behaviour 
accept able mean level system protect minor errors 
extension observation leads concept error kernel 
error kernel define smallest part system correct order system provide acceptable behaviour 
major goals system design isolate error kernel program clear manner possible increase probability correct 
formal tools proof need applied code error kernel entire system 
empirical studies described shown error kernel system comprising tens thousands lines erlang code small lines 

implementation erlang interpreters written various ported number different machines vax sun pc 
control experimental hardware see details ericsson md system connected network sun workstations 
distribution provided md group switch 
performance current proved adequate experiments telephony programming 
purpose experiments evaluate erlang programming language programming telephony applica tions 
evaluation interested clarity expression performance 
implementations concentrate improved performance example investigating erlang compiled flat concurrent logic programming language strand kl 
language designed building prototypes concurrent real time robust distributed applica tions 
language free side effects contains mechanisms robust systems programmed 
explicit notion concurrency built error han mechanism problems encountered interaction language conventional operating system avoided 

wish ack valuable contributions bjarne da 
cker go 
ran ba ge anders gustafsson mike language 
wish users erlang patience enthusiasm diminished despite non backwards compatible changes language 
da 
cker 
williams experiments programming languages techniques telecommunication applications proc 
th int conf 
software engineering tion switching systems eindhoven netherlands april 
armstrong virding philosopher problem logic programming telecommunications applications third ieee logic programming september salt lake city utah armstrong williams prolog rapid prototyping telecommunications systems 
th int conf 
software engineering telecommunication switching systems july 
clocksin mellish programming prolog 
springer verlag 
ccitt recommendation specification description language 
sdl reprint ericsson review articles md nos strand new concepts parallel processing 
ian foster steven taylor 
prentice hall 
