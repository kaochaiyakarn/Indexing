appear concurrent object calculus reduction typing andrew gordon university cambridge computer laboratory cambridge united kingdom paul hankin university cambridge computer laboratory cambridge united kingdom obtain new formalism concurrent object oriented languages extending abadi cardelli imperative object calculus operators concurrency calculus operators synchronisation mutexes 
syntax terms extremely expressive precise sense uni es notions expression process store thread con guration 
chemical style reduction semantics prove equivalent structural operational semantics 
identify deterministic fragment closed reduction show includes imperative object calculus 
collection type systems object oriented constructs heart abadi cardelli 
recast abadi cardelli rst order type systems object types subtyping setting calculus prove subject reduction 
syntax terms includes stores running expressions avoid need separate store typing typing expressions 
translate asynchronous communication channels choice free asynchronous calculus calculus illustrate expressiveness types read write channels supertypes read write channels 
motivation great deal software coded terms concurrent processes objects 
purpose develop new formalism expressing typing reasoning computations concurrent processes objects 
current liation microsoft research 
preliminary version 
nal version accessed url www elsevier nl locate entcs volume html gordon hankin concurrent object calculus conc consists abadi cardelli imperative object calculus imp extended primitives parallel composition synchronisation mutexes 
extends analysis abadi cardelli object oriented features concurrent languages 
heart series type systems able express great variety object oriented idioms 
conc may smoothly soundly extend type systems accommodate concurrency 
formalisms capable encoding objects concurrency 
support abadi cardelli type systems distinctive feature calculus 

process calculi syntax conc includes sequential composition expressions expected return results need encode results terms continuations 
reducing concurrent objects concepts conc treats objects primitive 
introduce auxiliary notions stores con gurations labelled transitions directly describe semantics conc terms reduction relation expressions 
evidence expressiveness calculus encoding asynchronous calculus 
extended version available authors includes examples full de nitions full proofs 
main technical results 
describe semantics concurrent objects reduction relation structural congruence relation style milner reduction semantics calculus 
prove reduction semantics equivalent classical structural operational semantics de ned auxiliary notions stores threads con gurations 
second identify single threaded subset calculus preserved reduction includes imp calculus 
third simple rules parallel composition restriction confer abadi cardelli rst order type system objects subtyping ob calculus 
prove subject reduction system needing notion store typing separate notion expression typing 
related plotkin structural operational semantics standard technique concurrent languages 
computation described sequence con gurations 
con guration typically consists collection runnable threads store data state communication channels 
di fisher describe calculus concurrent objects style 
languages treated style include actor language cml 
ferreira hennessy je rey avoid con gurations operational semantics cml employing ccs style labelled transition system 
parallel composition expressions gordon hankin expression consisting running parallel 
result returned returned composition result returned discarded 
situation process calculi parallel composition commutative ects di erent 
implementation terms perfectly natural running amounts forking new thread running reduction semantics directly inspired milner presentation chemical machine berry boudol 
chemical semantics computation state represented term calculus need auxiliary notion con guration 
previous chemical semantics concurrent languages evaluation contexts treat sequential composition expressions semantics exploits non commutative parallel composition 
di fisher closely related 
principal results de nition con guration reduction semantics calculus type soundness theorem proof certain guard expressions synchronisation side ects 
prove soundness type system concurrent objects 
chemical semantics need auxiliary notions con gurations reduction contexts theirs 
includes independent equivalent characterisations operational semantics 
various formalisms calculus family model imperative concurrent objects 
models formalisms processes computations concept returning result expressions 
operation returning result translated continuations sending message result channel 
conc calculus expressions return results precursor imp expressions wish presuppose channel communication returning results expressions results fundamental aspect programming languages deserve semantics right 
organisation section syntax semantics core calculus concurrent objects conc calculus 
section add mutexes obtain conc calculus 
syntax terms uni es auxiliary notions process expression store con guration supports particularly simple reduction semantics 
section show semantics corresponds precisely conventional complex semantics phrased terms con gurations 
section demonstrate soundness ob type system conc section concludes 
gordon hankin concurrent objects extend imperative object calculus adding names objects adding parallel composition name scoping operators calculus 
syntax assume disjoint nite sets names variables labels 
range names 
range variables 
range labels 
de ne sets results denotations terms grammars syntax conc calculus results variable name denotations xi bi object terms result 
denomination method select method update clone cloning parallel composition restriction method variable bound scope term variable bound scope restriction name bound scope fn fv sets names variables respectively free term write fx vg substitution result free occurrence term write mean terms equal renaming bound names bound variables reordering labelled components objects 
syntactic conventions read read read write pn pn 
syntax distinguishes names represent addresses stored objects variables represent intermediate values 
distinction re ects di erent uses names variables essential believe useful come treat observational equivalences 
results syntax atomic names atomic variables techniques easily extend structured results tuples abstractions 
gordon hankin obtained syntax directly combining imp calculus calculus 
syntax uses separate constructs restriction denomination name scoping name de nition respectively 
allows cyclic dependencies de nitions 
alternative single construct de ning names simultaneously mutually recursive scopes join calculus example 
due generality syntax need simple type system de ned section rule certain terms formed 
example process 

contains denominations name formed 
informal semantics may interpret term object calculus process expression 
process simply concurrent computation 
expression concurrent computation expected return result 
fact expression may regarded process may ignore result returns 
result expression immediately returns 
denomination 
xi bi process confers name object xi bi 
say object xi bi denotation name intuitively process represents object stored memory location name represents address object 
method select expression invokes method labelled object denoted presence denomination 
xi bi ect run expression bj fxj pg run body bj method labelled variable xj bound name object 
method update expression updates method labelled object denoted presence denomination 
xi bi ect update denomination 
xi bi fjg return result 
clone clone expression shallow copy object denoted presence denomination 
xi bi ect clone generate fresh name denomination 
xi bi return result 
clone names denote copies denotation xi bi updates ect 
expression rst runs expression returns result calls runs expression parallel composition expression process depending expression process 
terms running parallel 
expression expression gordon hankin result result returned result returned ignored 
restriction expression process depending expression process 
restriction generates fresh name scope formal semantics base operational semantics structural congruence reduction relations 
reduction represents individual computation steps dened terms structural congruence 
structural congruence allows rearrangement syntactic structure term reduction rules may applied 
may regard semantics concurrent extension small step substitution semantics imp described gordon hankin lassen 
interesting aspect formal semantics management concurrent expressions return results 
intend result expression returned right hand side topmost parallel composition 
discussed section contexts expecting result parallel composition commutative 
hand contexts immediately left parallel composition result discarded parallel composition commutative 
structural congruence identi es results returned discarded 
structural congruence congruence terms satisfy structural congruence fn fn fv fn reduction relation terms satisfy reduction rst rules xi bi 



bj fxj pg 


xi bi fjg 
clone 


fn fx pg 
gordon hankin embed expressions imp calculus conc abbreviations 
result clone short clone respectively 
contexts expecting term object xi bi short term 
xi bi fn xi bi 
show section reductions term imp embedded conc deterministic 
example example abadi cardelli book illustrates abbreviations reduction rules eliminating method select update 







synchronisation conc express atomic reads writes shared memory standard shared memory mutual exclusion algorithm encoding synchronisation mechanisms 
prefer reasons 
encoding mutual exclusion normally solved hardware primitives inhibition interrupts reads writes shared memory 
second encoding lead complicated calculations reduction behaviour higher level synchronisation mechanisms communication channels 
prefer encode higher level mechanisms calculus conc obtained extending conc calculus mutexes binary semaphores 
shared variable mutual exclusion algorithms mutexes commonly runtime systems object oriented languages simple reduction rules 
de ned compositional translation conc conc omit 
process mutual exclusion algorithm guarantee exclusive access objects representing mutexes 
gordon hankin third approach add synchronisation mechanisms primitive operations objects calculus di fisher 
keep primitives calculus simple prefer integrate speci synchronisation construct semantics method select method update 
syntax enrich syntax include denotations locked unlocked include terms acquire release 
adopt convention denotation term abbreviates term 
fn 
result acquire release short acquire release respectively 
informal semantics denomination 
locked 
unlocked represents mutex denoted state locked unlocked respectively 
intuitively mutex bit stored memory location mutex acquisition acquire attempts lock mutex denoted denomination 
unlocked acquisition acquire changes state 
locked returns result 
acquisition blocks 
release release unconditionally unlocks mutex denoted denomination 
release release sets state 
unlocked returns result 
formal semantics de ne structural congruence relation exactly rules section 
reduction relation de ned rules section new rules mutex acquisition release additional reduction rules 
unlocked acquire 

locked 
release 

unlocked example mutexes encode standard forms synchronisation critical regions synchronised objects method may active 
focus example encoding asynchronous communications channels similar pict 
channel object named contains result empty methods read write 
channel empty operation write updates gordon hankin contains operation read blocks 
channel contains result operation read returns updates empty operation write blocks 
di fisher implement similar abstraction calculus concurrent objects 
code channel behaviour follows 
usual abbreviates fv 
borrow imp calculus encoding abstractions function applications objects 
rd locked wr unlocked reader rd writer wr val val read acquire reader val release writer write acquire writer val release reader code maintains invariant time locks reader writer unlocked 
reader unlocked result val contents channel 
writer unlocked channel empty 
asynchronous channels encode asynchronous calculus xy write read new fx yg fv rep read rep rep conjecture translation sound respect suitable notion observational equivalence 
particular translation fully encoding channels allows observer discover message sent 
structural characterisation reduction purpose section characterise reduction semantics terms conventional structural operational semantics 
desirable reasons 
increases con dence correctness semantics 
second provides convenient way enumerate possible reductions term 
sake brevity just conc easy extend treatment section describes formed terms conc rudimentary type system distinguishes expressions terms expected return result processes 
section demonstrate formed terms reduction semantics coincides structural operational semantics de ned con gurations 
section identify single threaded omitting single rule rudimentary type system 
fragment deterministic includes imp calculus 
gordon hankin formed terms atype system formed terms distinguishes expressions processes 
type system types proc exp represent processes expressions respectively 
may ignore result expression term type exp term type proc 
type system liberal provides guarantees formed terms 
guarantees proper process occur context expecting expression 
second guarantees top level denominations free names term represent partial function names objects domain preserved computation steps 
domain term dom dom 
fpg dom dom dom dom dom dom dom fpg dom 
kind stand proc exp formed terms judgment de ned table 
say term process expression proc exp respectively 
formed terms concur exp proc result exp object bi exp dom bi 

xi bi proc select update exp dom 
clone res dom exp exp clone exp exp exp dom 
exp par proc dom dom 
lemma suppose dom dom 
terms formed include 





receives type 
structural operational semantics conventional technique describing semantics concurrent languages state relies syntactic category con gurations consist store paired set runnable threads 
mimic technique gordon hankin identify sets terms represent threads stores con gurations 
elementary thread result method update select clone 
thread elementary thread term thread 
store term form 
pm 
dm 
con guration tni abbreviation term tn 
may transform term con guration follows normalising terms con gurations 
ei 
hp 
bi ti pg fn 
pg fn fn qg fn fn show induction derivation implies de ned particular exp implies takes form ti 
de ne structural operational semantics relation terms sos de nition term normalised con guration reduced term con guration 
structural operational semantics sos select pg fn 

xi bi bj fxj pg sos update sos 
xi bi xi bi fjg 
sos 
sos clone fn xi bi 
clone sos 

gordon hankin sos result pg fn 
fx pg sos 
sos pg fn 
ti sos 
sos 
sos res sos 
sos 
sos norm sos 
sos 
structural operational semantics coincides reduction semantics structural congruence 
write sos mean sos theorem exp sos theorem suggests procedure discovering possible reductions expression normalise expression see sos reductions derivable 
obvious relation directly discover possible reductions expression de ned structural congruence 
theorem fails hold processes expressions 
consider process 

term type proc exp reductions composition commutative 
hand normalised con guration hp 
hp 
sos hp 
pi 
di culty reduction relation represent behaviour processes running subterms left composition composition commutative 
remedy situation de ne versions structural congruence reduction specialised processes situated left composition 
proc fn fn roughly proc composition commutative top level 
proc proc proc 
alternative de nition specify relations set inference rules simultaneously de nitions show proc 
proc 

gordon hankin proposition proc proc sos proc single threaded fragment identify deterministic fragment conc single threaded type system conc judgment de ned typing rules concur 
show proc exp ti 
lemma suppose exp exp theorem suppose exp show represents term imp exp follows imp embedded deterministic fragment closed reduction 
order type system types type system consist rst order object types abadi cardelli ob types processes expressions 
section conc conc needs additional type mutexes 
type proc exp ai distinct ai proc rudimentary type system exp type expressions proc type processes 
ob ai type objects methods return results types respectively 
identify object types reordering components 
subtype relation re exive transitive relation types satis es bi bi ai exp exp proc 
environment list vn write mean results vi distinct 
de ne typing judgment follows typing rules val subsumption val val select bi bj val object bi xi bi bi dom bi 

xi bi proc gordon hankin val update bi bj dom 
val clone bi clone bi val exp exp dom 
val par dom dom 
proc val res dom rules straightforward combination rules abadi cardelli ob rules rudimentary type system section 
lemma theorem suppose prove subject reduction theorem theorem typed forms imp abadi cardelli need introduce standard auxiliary notion store typing 
terms calculus include sequential threads stores need separate notion store typing notion typable term 
outcome statement subject reduction imperative form ob abadi cardelli book 
forms structural congruence reduction specialised processes situated left composition preserve typing type proc proposition suppose proc 
proc proc 
proc short arg val usual object calculi 
la type read write 
subsumption hide internal methods reader writer val get la empty environment 
re ne usage channel types de ne type write channels write type read channels read pierce sangiorgi 
inclusions la la part de nition pierce sangiorgi system derivable 
gordon hankin described concurrent extension abadi cardelli imperative object calculus imp 
syntax calculus essentially imp parallel composition restriction calculus new primitives synchronisation mutexes 
syntax extremely expressive precise sense uni es notions expression process store thread con 
novel reduction semantics concurrent expressions need evaluation contexts proved corresponds conventional structural operational semantics de ned terms 
exhibited translations asynchronous calculus imp calculus calculus showed supports rst order type system ob objects subtyping 
translations imp calculus raise questions concerning observational equivalences intend study 
avenue investigate encoding concurrency primitives monitors condition variables named threads 
alan je rey ren lassen useful conversations concurrent objects 
mart abadi luca cardelli ren lassen andy pitts commented draft 
supported royal society university research fellowship epsrc research studentship ep src project operational theory objects 
gordon current liation microsoft research 
abadi cardelli 
theory objects 
springer verlag 
agha mason smith talcott 
foundation actor computation 
journal functional programming january 
amadio leth thomsen 
concurrent calculus calculus 
proceedings foundations computation theory volume lecture notes computer science 
springer verlag 
berry milner turner 
semantics ml concurrency primitives 
proceedings popl pages 
berry boudol 
chemical machine 
theoretical computer science april 
boudol 
calculus direct style 
proceedings popl pages 
dal 
concurrent objects blue calculus 
draft 
gordon hankin di fisher 
calculus concurrent objects 
proceedings concur august 
ferreira hennessy je rey 
theory weak bisimulation core cml 
technical report computer science school cognitive computing sciences university sussex 
fournet gonthier 
re exive cham join calculus 
proceedings popl pages january 
gordon hankin lassen 
compilation equivalence imperative objects 
proceedings fst tcs volume lecture notes computer science pages 
springer verlag 
full version available technical report university computer laboratory 
honda tokoro 
object calculus asynchronous communication 
proceedings ecoop volume lecture notes computer science pages 
springer verlag 
jones 
pi calculus semantics object design notation 
proceedings concur volume lecture notes computer science pages 
springer verlag 
sangiorgi 
imperative objects mobile processes 
proceedings 
lamport 
fast mutual exclusion algorithm 
technical report digital systems research center november 
milner 
functions processes 
mathematical structures computer science 
milner parrow walker 
calculus mobile processes parts ii 
information computation 
peyton jones gordon finne 
concurrent haskell 
proceedings popl pages 
pierce sangiorgi 
typing subtyping mobile processes 
mathematical structures computer science 
summary proceedings lics pp 

pierce turner 
concurrent objects process calculus 
proceedings volume lecture notes computer science pages 
springer verlag 
pierce turner 
pict programming language 
technical report computer science department indiana university 
appear proof language interaction essays honour robin milner plotkin stirling tofte editors mit press 
gordon hankin plotkin 
structural approach operational semantics 
technical report fn daimi aarhus university september 
reppy 
higher order concurrency 
phd thesis department computer science cornell university 
available technical report 
vasconcelos 
typed concurrent objects 
proceedings ecoop 
walker 
objects pi calculus 
information computation february 

