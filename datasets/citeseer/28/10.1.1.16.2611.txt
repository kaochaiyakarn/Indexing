appear proceedings second international workshop self adaptive software budapest hungary design principles resource management systems intelligent spaces luke howard mit ai lab cambridge ma usa luke ai mit edu www ai mit edu projects iroom 
idea ubiquitous computing smart environments longer dream long serious area research soon technology start entering day lives 
major obstacles prevent technology spreading 
different smart spaces equipped different kinds devices projector vs computer monitor vs tv set 
second multiple applications running space time inevitably contend devices scarce resources 
underlying software smart space needs provide tools self adaptivity shields rest software physical constraints space dynamically adjusts allocation scarce resources number priorities active tasks change 
briefly argue demand agent startup desirable feature agent system charge smart space discuss consequences resource management 
support demand agent startup smart spaces agent systems deal dynamic spontaneously created unstable collections agents 
creators systems refrain making assumptions available system time usually resort dynamic discovery direct negotiation techniques agent looks service resource 
general attitude assumed creators agent systems controlling smart spaces 
standard jini implementation hive examples systems :10.1.1.26.6486
smart spaces virtue stable physical environments impose special set constraints underlying software infrastructure 
true lot adaptivity needed new components appear disappear people come go devices brought removed time benefit assuming certain level persistence 
feature physical space components static sense usually 
day space contains lights equipment projectors telephones reasonable expect devices day 
details course dependent particular implementation 
open agent architecture oaa relies facilitator agent inter agent communication task brokerage uses prolog icl interagent communication language describing agents needs capabilities 
language allows service providers describe agents terms tasks perform really terms resources represent 
decker uses kqml communicating needs abilities agents 
common tendency java systems jini hive name interface interfaces resource implements list attribute value pairs describing agents capabilities :10.1.1.26.6486
case agent interface provides information agent capabilities invoked 
provides information agent 
advantages interface names describing agents interface ontologies apis easily understood programmers get adopted large communities 
stressed interfaces provide access agent services 
