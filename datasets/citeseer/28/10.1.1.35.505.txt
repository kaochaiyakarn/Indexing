experimental clp platform integrity constraints abduction slim henning christiansen computer science department university munich 
munchen germany slim informatik uni muenchen de department computer science university box dk denmark henning dk integrity constraint abduction important query answering systems enhanced query processing expressing knowledge databases 
straightforward characterization subset language chr originally intended writing constraint solvers applied clp languages 
subset strikingly simple computational model executed existing prolog technology 
earlier results confirms chr platform experimenting combinations top bottom evaluation disjunctive databases shown integrity constraint abduction constraint logic programming clp established extension logic programming adds higher expressibility cases efficient query evaluation 
clp rise field constraint databases 
abducibles chosen extensional predicates 
abductive theory ic define translation chr program ic similarly translation section difference closing rule left abducible predicate extensional rule contains extensional facts including possible initial facts abducible predicates 
example 
definition orphan predicate considered example special case translation orphan considered abducible predicate 
consider small example :10.1.1.39.634
example 
consider abductive framework program integrity constraint bird 
bird penguin 
penguin flies false 
query sibling mickey leads final state successful subgoals father person male person father mickey person mickey approach abduction avoids problems variables abducibles exist abduction algorithms 
persons necessary explanation mickey unknown father 
unknown father male gender matter 
correctness properties translation abductive frameworks chr program described summarized follows consider abductive framework written chr program ic initial goal successful subgoal derivation abducible atoms necessarily ground predefined extensional facts grounding substitution satisfies ic 
successful subgoal exists derivation abductive explanation instance completeness obvious nonrecursive programs recursive programs situation similar discussed translation programs chr notice implementation chr abductive frameworks integrity constraints suited implementing called explicit negation claim support negation framework :10.1.1.50.1751
technique introduce predicate abducible predicate characterized integrity constraint false 
related shown straightforward characterization important aspects systems means chr programs 
programs constraint logic languages integrity constraints important describing fine grained query evaluation constraint databases written directly chr programs executed current chr technology 
abductive frameworks fit naturally model provides implementation handles correctly problem variables abducibles exists earlier approaches abduction 
important consequence results demonstrate efficient implementation techniques constraint logic programs embedded underlying chr environment applicable variety database applications query answering mechanisms 
approach characterized simplicity need guards provided chr procedural semantic described quite simple computational model 
constraint store hold extensional part database including new facts suggested abductive step integrity constraints serve ready strike soon inconsistency observed 
relation integrity constraints constraint logic suggested shape incremental top evaluation method 
strong similarities described kowalski :10.1.1.39.634
approaches originated different starting points final result similar 
comparing proof procedure may involve rewriting complex formulae optimized methods similar underlying chr environment :10.1.1.39.634
investigated detail notice similarity examples semantic query optimizations described 
chr seen extension disjunctive logic programming forward chaining constraints 
constraint store hold extensional part database including new facts suggested abductive step integrity constraints serve ready strike soon inconsistency observed 
relation integrity constraints constraint logic suggested shape incremental top evaluation method 
strong similarities described kowalski :10.1.1.39.634
approaches originated different starting points final result similar 
comparing proof procedure may involve rewriting complex formulae optimized methods similar underlying chr environment :10.1.1.39.634
investigated detail notice similarity examples semantic query optimizations described 
chr seen extension disjunctive logic programming forward chaining constraints 
requirements constraint solver essentially posed traditional constraint logic programming systems backward chaining 
turns prolog implementations chr able evaluate chr programs disjunction prolog 
