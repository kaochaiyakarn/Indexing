differential evaluation continual queries ling liu university alberta department computing science edmonton alberta canada email cs ca pu roger tong zhou oregon graduate institute science technology department computer science box portland oregon usa email cse ogi edu information environments internet brought ready access large amount information 
internet data notoriously autonomously managed distributed fashion 
large scale information monitoring internet environment requires support traditional database techniques 
key issues increasing reward monitoring fast growing information base similarly increasing processing cost 
improve expressiveness queries information monitoring define continual queries useful tool monitoring updated information 
continual queries standing queries monitor source data notify users new data matches query 
consequence duplicates query result avoided unnecessary computation cost minimized 
approach exhibits better performance improvement information sources large size evolve dynamically 
dra design seen synthesis previous research differential files incremental view maintenance active databases 
index terms intelligent information retrieval information monitoring continual queries differential data incremental query processing interoperable information systems 
unprecedented amount new information available exponential growth internet :10.1.1.21.1842
side flood information easily overwhelm users side naive query processing easily overload database system network 
problems constant addition updates information sources internet force users revisit web sites re issue queries frequently obtain new data match queries 
trying monitor constant information flow internet labor intensive user resource intensive system 
unfortunately traditional database techniques view materialization active databases query optimization powerful encounter difficulties distributed interoperable environments internet :10.1.1.56.375
unprecedented amount new information available exponential growth internet :10.1.1.21.1842
side flood information easily overwhelm users side naive query processing easily overload database system network 
problems constant addition updates information sources internet force users revisit web sites re issue queries frequently obtain new data match queries 
trying monitor constant information flow internet labor intensive user resource intensive system 
unfortunately traditional database techniques view materialization active databases query optimization powerful encounter difficulties distributed interoperable environments internet :10.1.1.56.375
interoperation database techniques relatively storage management data www pages completely non trivial :10.1.1.21.1975
address interoperability problem internet environments developed distributed interoperable object model diom supports methodical explicit composition query results interoperable information sources 
key idea generate new query results incrementally updating previous query results re evaluating queries scratch 
approach builds previous results architecture epsilon serializability support flexible efficient monitoring information updates internet environments 
side flood information easily overwhelm users side naive query processing easily overload database system network 
problems constant addition updates information sources internet force users revisit web sites re issue queries frequently obtain new data match queries 
trying monitor constant information flow internet labor intensive user resource intensive system 
unfortunately traditional database techniques view materialization active databases query optimization powerful encounter difficulties distributed interoperable environments internet :10.1.1.56.375
interoperation database techniques relatively storage management data www pages completely non trivial :10.1.1.21.1975
address interoperability problem internet environments developed distributed interoperable object model diom supports methodical explicit composition query results interoperable information sources 
key idea generate new query results incrementally updating previous query results re evaluating queries scratch 
approach builds previous results architecture epsilon serializability support flexible efficient monitoring information updates internet environments 
contribution diom epsilon serializability define powerful mechanism user specification update monitoring 
database updated materialized view refreshed reflect updates 
naive solution view base data 
contrast incremental update algorithms believed carry lower execution cost changes database moderate 
approaches described previously 
approach refreshes view immediately update base table :10.1.1.56.375
second refresh query issued view 
third refreshes view periodically 
main tradeoff choosing approaches view data vs cost updating 
algorithms literature centralized database environment materialized view base tables reside 
third refreshes view periodically 
main tradeoff choosing approaches view data vs cost updating 
algorithms literature centralized database environment materialized view base tables reside 
study distributed materialized view management primarily focused determining optimal refresh sources timing multiple views defined base data 
works distributed environments include quasi copies replication update anomalies data warehouses research challenges powerful database techniques active databases materialized views developed monitor updates homogeneous consistent databases techniques easily extend distributed interoperable environment internet :10.1.1.19.5246
main reasons summarized properties introduced previously uniform access heterogeneous data scalability large networks evolution data sets software autonomy information producers information consumers 
diom model simplify information gathering delivery providing uniform access software 
autonomous data sources may support abstraction making composition change notification individual evolution difficult 
research challenge cq simplify input continual query processing autonomous data sources need support simple data exchange format 
fundamental problem active database view materialization approaches operate base data difficulties scalability number information producers servers information consumers clients grow exponentially case internet 
system scalable need shift processing client side possible 
second research challenge cq store query results client side perform differential re evaluation client 
motivation proposing differential re evaluation algorithm dra described section processing continual queries 
dra builds previous research differential files hypothetical relations incremental updating materialized views :10.1.1.19.5246:10.1.1.19.5246:10.1.1.56.375
third important research challenge support general updates including insertions deletions modifications 
mentioned continuous queries supports append operations data 
capture general updates data sources information producers differential relations send information consumers differential re evaluation continual queries 
simple definition cq dra algorithm workable compared attempts extend continuous queries directly 
define result running continual query cq sequence query answers fq obtained running query sequence database states time triggered 
assume mapping sequence database states sequence monotonically increasing timestamps state refer time cq sequence database states defined triggering condition triggering condition specification query executed 
take forms ffl direct specification time 
example executed monday 
policy adopted harvest information gatherers :10.1.1.21.1975
ffl specification time interval previous query result 
example week gamma produced 
interpreted time specification relative event 
ffl condition database state 
differential relations represent net effect collection updates relation stored derived 
differential relation stored relation instantiated system outerjoin keeps tuples left right relations matching tuples padding null values needed 
source updated insertion deletion modification see example 
define operator computes differential relations arbitrary spj expressions 
concept differential relations extent similar concept hypothetical relations incremental updating materialized views :10.1.1.56.375
difference lies usage detailed structure 
eager mechanism materialized view update hypothetical relation represents net changes single transaction base relation dropped transaction committed materialized view updated 
continual query refresh method differential relation maintains changes transactions base relation 
data differential relation dropped timestamps older timestamp latest execution relevant continual query 
continual query refresh method differential relation maintains changes transactions base relation 
data differential relation dropped timestamps older timestamp latest execution relevant continual query 
mention relational model essential approach simplifies representation database changes allows relational algebra avoids need explain semantics particular object model 
differential relations introduce concept differential relation relation represent changes relation design set basic operations facilitate manipulation relations 
goal defining differential relations hypothetical relations described provide unified treatment changes separate treatments insertions deletions modifications resulting algorithms generating combining individual results :10.1.1.56.375
denote relation scheme described set attributes denote relation instance consisting collection tuples values taken domains set attributes denotes value attribute tuple tuple attribute denoted tid provides unique immutable identifier 
tuple deleted re appended new tid assigned 
unique tuple identifier tid easier connect tuples hold values object changes 
fact primary key unique identifier tuple definition differential relation tid relation scheme 
instance join deltar outerjoin tid attach deletions deltar old attach insertions deltar new 
join deltar deltar outerjoin tid attach deletions deltar deletions deltar old attach insertions deltar insertions deltar new 
observe example exhibits interesting optimization problem efficient execution set ary join expressions intermediate results reused spj expressions 
instance query saving intermediate results re evaluation expressions may easily speed processing 
mechanism works effectively larger idea truth table facilitate combination possible joins borrowed research updating materialized view :10.1.1.56.375
minimize cost constructing table columns table number changed relations operand relations query expression pi oe 
system apply conventional query optimization techniques centralized distributed environment reduce cost operation 
example continual query denoted pi oe request access classes relations different information sources 
assume relations say updated execution query commutativity selection projection joins associativity joins query decomposed subqueries subq pi oe subq pi oe result subq selection condition selection condition result subq evaluation operator reduced subquery subq system performance processing cq greatly improved evaluation subq done directly previous execution result cached client side ii comparing original query size result subq smaller cardinality degree 
acm transactions database systems september 
barbara alonso 
processing continuous queries general environments 
technical report matsushita information technology laboratory princeton nj june 
blakeley larson tompa :10.1.1.56.375
efficiently updating materialized views 
proceedings acmsigmod international conference management data pages washington dc may 
bowman danzig hardy manber schwartz :10.1.1.21.1842
harvest information discovery access system 
technical report matsushita information technology laboratory princeton nj june 
blakeley larson tompa :10.1.1.56.375
efficiently updating materialized views 
proceedings acmsigmod international conference management data pages washington dc may 
bowman danzig hardy manber schwartz :10.1.1.21.1842
harvest information discovery access system 
proceedings second international world wide web conference pages chicago illinois october 
bowman danzig hardy manber schwartz wessels :10.1.1.21.1975
harvest scalable customizable discovery access system 
proceedings acmsigmod international conference management data pages washington dc may 
bowman danzig hardy manber schwartz :10.1.1.21.1842
harvest information discovery access system 
proceedings second international world wide web conference pages chicago illinois october 
bowman danzig hardy manber schwartz wessels :10.1.1.21.1975
harvest scalable customizable discovery access system 
technical report department computer science university colorado technical report cu cs august 
chakravarthy 
architectures monitoring techniques active databases evaluation 
proceedings th international conference data engineering pages los alamitos february 
segev park 
maintaining materialized views distributed databases 
proceedings th international conference data engineering pages los angeles february 
lohman :10.1.1.19.5246
differential files application maintenance large databases 
acm transactions database systems september 
jhingran goh potamianos 
rules procedures caching views database systems 
wu yu pu 
divergence control epsilon serializability 
proceedings eighth international conference data engineering pages phoenix february 
ieee computer society 
zhuge garcia molina hammer widom :10.1.1.19.5246
view maintenance warehousing environment 
proceedings acm sigmod international conference management data san jose ca may 
appendix lemmas proposition proofs lemma equations hold 
attach insertions deltar new deltar 
proof distributive property projection difference pi gamma pi gamma pi holds assumption tuple unique immutable identifier recall section 
assumption projection re defined pi ft jt tid tid result relation scheme distributive property projection difference hold traditional relational project operator eliminates duplicates result relation 
pi gamma pi gamma pi 
alternative way maintain distributive property projection difference associate multiplicity counter tuple relation 
approach algorithms updating materialized views :10.1.1.56.375
proposition differential substitution list sl deltar deltar propagate join deltar deltar tid tid 
proof join gamma join combine deltar combine deltar join deletions deltar join deletions deltar join deletions deltar deletions deltar 
join combine deltar combine deltar gamma join join insertions deltar join insertions deltar join insertions deltar insertions deltar 
definition definition lhs diff join join combine deltar combine deltar outerjoin tid tid attach old new attach old new outerjoin tid tid attach old 
