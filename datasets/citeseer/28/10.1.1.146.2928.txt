autonomous agents multi agent sytems kluwer academic publishers 
manufactured netherlands 
challenges research directions agent oriented software engineering franco zambonelli franco zambonelli dipartimento di scienze dell ingegneria universita di reggio reggio italy andrea omicini andrea omicini unibo dipartimento di elettronica informatica sistemistica deis universita di bologna venezia italy 
agent computing promising approach developing applications complex domains 
despite great deal research area number challenges need faced agent computing widely accepted paradigm software engineering practice ii turn agent oriented software abstractions practical tools facing complexity modern application areas 
short key concepts agent computing pertain software engineering characterise emerging key issues multiagent systems mass engineering 
particular show issues analysed terms different scales observation analogy scales observation physical phenomena terms micro macro meso scales 
characterisation discuss scale observation peculiar engineering issues arising key research challenges solved promising research directions explored 
keywords multiagent systems agent oriented software engineering intelligence engineering self organisation 

agents multiagent systems mass emerged powerful technology face complexity variety today ict scenarios 
instance industrial experiences testify advantages agents manufacturing processes web services web computational markets distributed network management 
addition studies advise possibility exploiting agents mass enabling technologies variety scenarios pervasive computing grid computing semantic web 
emergent general understanding mass effective technology represent novel general purpose paradigm software development 
agent computing promotes designing developing applications terms autonomous software entities agents situated environment flexibly achieve goals interacting terms high level protocols languages 
zambonelli omicini features suited tackle complexity developing software modern scenarios autonomy application components reflects intrinsically decentralised nature modern distributed systems considered natural extension notions modularity encapsulation systems owned different stakeholders ii flexible way agents operate interact environment suited dynamic unpredictable scenarios software expected operate iii concept agency provides unified view artificial intelligence ai results achievements making agents mass act sound manageable repositories intelligent behaviours 
years increasing acceptance agent computing novel software engineering paradigm great deal research related identification definition suitable models techniques support development complex software systems terms mass 
research roughly grouped term agent oriented software engineering endlessly proposes variety new metaphors formal modelling approaches development methodologies modelling techniques specifically suited agent oriented paradigm 
research early stages challenges need faced agent oriented software engineering deliver promises widely accepted practically usable paradigm development complex software systems 
analyse main open research challenges agent oriented software engineering issues related mass engineering challenge traditional current approaches software engineering call innovative approaches solutions 
better organise presentation argue different issues may arise depending scale observation adopted model build software system 
extreme micro scale observation system engineered rely controllable predictable behaviour typically limited number individual agents mutual interactions 
key engineering challenges related extending traditional software engineering approaches agent oriented abstractions 
extreme macro scale mas conceived multitude interacting agents behaviour system mere behaviour individuals key interest novel systemic approaches software engineering needed 
meso scale observation need predictability control typical micro scale clashes emergence phenomena typical macro scale 
engineering approach meso scale requires accounting problems typical micro macro scale possibly new problems specific meso scale 
course claim cover problems agentoriented software engineering exhaust list potentially interesting research directions 
discussion aims sketching scenario articulated give readers clue fascinating amount research undertaken 
case emphasise goal discussion simply advertise personal viewpoints authors 
tried collect challenges research directions organise rational readable way outcomes number stimulating discussions took place meetings methodologies software engineering agent systems sig eu funded network excellence agentlink 
fully endorse responsibility state time greatly indebted participants sig having shared opinions knowledge 
turn hope able transmit knowledge 
remainder organised follows 
section introduces key concepts motivations agent oriented software engineering research showing generality agent oriented paradigm impact areas distributed systems engineering ai 
section represents core introduces scale observation characterisation scale discusses main research challenges promising research directions 
section concludes mentioning additional research issues detailed may worth considerations researchers 

agent oriented software engineering concepts driving forces technology agent computing considered new generalpurpose paradigm software development tends radically influence way software system conceived developed calls new software engineering approaches 

agent computing novel software engineering paradigm core concept agent computing course agent 
definition agent comes set relevant agent specific concepts abstractions 
generally speaking agent viewed software entity characteristics autonomy agent passively subject global external flow control actions 
agent internal execution activity java thread sort goal driven intelligent engine irrelevant context pro actively oriented achievement specific task 
situatedness agent performs actions situated particular environment computational web site physical manufacturing pipeline able sense affect portions environment 
sociality majority cases agents open operational environments hosting execution multiplicity agents possibly belonging different stakeholders think agent mediated marketplaces 
mass global behaviour derives interactions constituent agents 
fact agents may communicate coordinate dynamic way zambonelli omicini 
multiagent systems architectures vs traditional software architectures 
challenges research directions possibly high level languages protocols achieve common objective necessary achieve objectives 
looking definition clear mas simply reduced group interacting agents 
complete modelling mas requires explicitly focusing environment mas constituent agents situated society group interacting agents give rise 
modelling environment implies identifying basic features resources environment way agents interact 
modelling agent societies agent organisations agent ecologies specific metaphor adopted depending specific characteristics application goals operational environment implies identifying rules drive expected evolution mas various roles agents play society :10.1.1.15.7163
considerations lead general characterisation depicted left basic abstractions architecture totally differ traditional software engineering approaches right 
considering traditional object oriented perspective differences object oriented agent oriented perspective modelling building software system sharp 
object agent principle autonomous proactive internal activity solicited service requests coming external thread control 
traditional object applications explicit modelling external environment modelled terms objects objects wrap environmental resources terms internal attributes perceive world terms objects names 
addition traditional object computing promotes perspective software systems components functional entities 
global system architecture conceived static functional decomposition interactions components objects simply expression inter dependencies concepts society roles simply sense 
considerations claim agent computing represents brand new software engineering paradigm calling better discussed new discipline agent oriented software engineering aose short 
course aware objects components today distributed concurrent systems somewhat removed historical definition starting approach view agents 
aspect oriented programming explicitly aims overcoming intrinsic limitations functional decomposition 
active objects reactive components exhibit degree autonomy 
context dependencies component applications explicit distinction active passive objects approach distinction agents environment 
possibility promoted modern middleware establishing open interactions modelling interactions articulated simple request response ones complex object component systems appear dynamic society static software architecture 
case zambonelli omicini fact traditional object component systems abandoning traditional abstractions starting adopt approaching agentbased computing body evidence novel software engineering paradigm needed ii agent oriented right 

promise aose distributed systems engineering outlined today software engineering approaches increasingly adopting abstractions approaching agent computing 
trend better understood recognising vast majority modern distributed systems scenarios intrinsically prone developed terms mass modern distributed systems de facto mass composed autonomous situated social components 
far autonomy concerned today software systems integrate autonomous components 
weakest autonomy reduces ability component react handle events case graphical interfaces simple embedded sensors 
cases autonomy implies component integrates autonomous thread execution execute proactive way 
case modern control systems physical domains control simply reactive proactive implemented set cooperative autonomous processes case embedded computer systems interacting distributed sensor networks 
integration complex distributed applications systems software running mobile devices tackled modelling terms autonomous software components 
internet distributed applications typically autonomous processes possibly executing different nodes cooperating choice driven conceptual simplicity decentralised management actual request autonomous concurrent activities 
today computing systems typically situated 
explicit notion environment components allocated execute components explicitly interact 
control systems physical domains sensor networks tend built explicitly managing data surrounding physical environment explicitly account unpredictable dynamics environment specific event handling policies 
mobile pervasive computing applications recognise general term context awareness need applications model explicitly environmental characteristics position environmental data provided embedded infrastructure model implicitly terms internal object attributes 
internet applications web systems dive existing internet environment typically engineered clearly defining boundaries system terms application including new application components developed middleware level environmental substrate components embedded 
sociality modern distributed systems comes different flavors capability components supporting dynamic interactions interaction established run time previously unknown components ii somewhat challenges research directions higher interaction level overcoming traditional client server scheme iii enforcement sorts societal rules governing interactions 
control systems critical physical domains typically run forever stopped removed environment embedded 
systems need continuously updated environment live change frequently addition new physical components consequently new software components software systems 
systems managing openness capability automatically re organise interaction patterns crucial ability component enter new execution contexts respect rules expected drive execution system 
pervasive computing systems lack resources power simply communication unreachability nodes come go unpredictable ways calling re structuring communication patterns high level negotiations resource provision 
issues exacerbated mobile networking systems interactions fruitful controllable despite lack intrinsic structure dynamics connectivity 
similar considerations apply internet open distributed computing 
software services survive dynamics uncertainty internet able serve client component able enact security resource control policy local context administrative domain 
marketplaces typical examples class open internet applications 
sum today distributed systems increasingly assimilated general mas scheme left 
explicit adoption agent concepts distributed systems engineering carry advantages autonomy application components directly forced distributed characteristic operational environment enforces stronger notion encapsulation encapsulation control data algorithms reduces complexity managing systems high dynamically varying number components account situatedness explicitly modelling environmental resources active computational entities differentiated way recognition matter fact provides better separation concerns turn helps reduce complexity dealing dynamic high level interactions societal architectural concepts enables address flexible structured way intrinsic dynamics uncertainties modern distributed scenarios 

promise aose intelligent systems engineering mass mainly developed concept ai research community earlier research area disregarded software engineering aspects focused ai ones 
recognition agent computing novel software engineering paradigm far diminishing importance ai aspects bring renewed general interest variety ai research findings 
zambonelli omicini despite different definitions flavors ai going discuss forget ai mainly concerned building intelligent systems name artificial intelligence literally suggests notion artifacts exhibiting intelligent behaviour 
ai considered engineering field dealing constructive concerns simply scientific dealing understanding predicting intelligent systems behaviour 
earliest influential ai papers addresses problem write programs exhibiting common sense showing constructive concerns early ai researchers clearly demonstrates notion practical reasoning reasoning actions played central role ai 
somewhat disappointing nearly years ai research conducted having research groups concentrate single isolated aspects ai say artificial vision knowledge representation planning failed producing reasonable set conceptual practical tools promote integration vast amount research findings mainstream practice software development 
agents key abstraction today ai 
notion agents provides uniform conceptual space findings ai field easily framed related eventually find mainstream acceptance 
practical conceptually affordable entry point new students practitioners interested ai right place experience intelligent behaviours agents natural vehicle spreading results ai research exploitation real world application domains 
strong notion encapsulation promoted agents includes encapsulation control enables integration components intelligent behaviour model pattern technology embody intelligence large software systems influence system architecture development process 
clearly sceptical engineers amenable intelligent components 
addition agent oriented abstractions naturally provide new powerful approach construction intelligent systems agents pave way classical ai achievements industrial systems promote original effective ways solve highly complex problems calling system intelligence 
correspondingly promise aose twofold 
drawing ai findings making part everyday software engineering practice 
raising level complexity problems solved human artifacts allowing artificial systems incorporate growing amounts intelligence mean theory practice 

current directions agent oriented software engineering change paradigm dramatic event scientific engineering field 
far software engineering concerned key implication challenges research directions design development software systems new paradigm means rely conceptual tools methodologies conceived totally different old paradigm 
possible develop complex distributed system terms objects client server interactions choice appears odd complicated system mas assimilated mas 
brand new set conceptual practical tools specifically suited abstractions agent computing needed facilitate promote support development mass fulfil great general purpose potential agent computing 
researchers area agent computing recognised needs vast amount research focused topics 
scope survey relevant areas aose 
number excellent extensive articles written purpose forward interested reader 
short summary current mainstream research directions worth reporting 
agent modelling 
novel formal practical approaches component modelling required deal autonomy pro activity situatedness 
variety agent architectures investigated suitable model different types agents specific aspects agents purely reactive agents logic agents agents belief desire intentions 
research far notably clarified concept agency different facets 
mas architectures 
necessary develop new ways modelling components mas way necessary develop new ways modelling mas 
traditional functional oriented perspectives variety approaches investigated model mass particular approaches inspired societal organisational biological metaphors subject majority researches showing specific suitability different metaphors different application areas :10.1.1.15.7163
mas methodologies 
traditional methodologies software development driving engineers analysis design development tuned match abstractions agent oriented computing 
variety novel methodologies discipline support development process mas defined past years clarifying various sets abstractions come play mas development duties responsibilities software engineers 
notation techniques 
development specific notation techniques express outcome various phases mas development process needed traditional object component oriented notation techniques easily apply 
context auml proposal extending standard uml agent oriented systems subject great deal research rapidly de facto standard 
mas infrastructures 
support development execution mass novel tools novel software infrastructures needed 
context various tools zambonelli omicini proposed transform standard mas specifications auml specifications actual agent code variety middleware infrastructures deployed provide proper services supporting execution distributed mass 
clearly contributing increase acceptance practical usability paradigm 
number challenging research problems solved number potentially interesting research directions larger may appear list 

challenges aose micro macro meso scales key question ask facing development mas equally development system terms aose abstractions concepts mean engineer software system modern scenarios 
similar question arises need discussing key challenges promising research directions aose 
unfortunately computing ubiquitous pervasive answering question difficult 
computational devices computers wearables micro sensors associated software components soon populate physical spaces homes offices streets 
components interact context dynamic complex networks 
considering ipv addressing scheme possible principle assign ip address square earth surface vision incredibly huge open network connecting billions computer devices 
perspective concept software systems blurred 
fact easy say software system artifacts developed engineered finite set interacting software components deployed preexisting system executing software components ii artifacts interact virtually infinite number components scenario transitive interactions reciprocal influences possibly extend world wide scale 
clearly scenario logical physical boundary enabling clear definition subject engineering vanishes soon system deployed soon engineer engineer wonders impact deployment artifacts may surrounding environment 
question raised section engineering software system mean better posed different way 
scale observation situate engineering 
known fact universe different observed different perspectives 
everyday scale observation classical mechanics applies relativity concepts relevant scale simply practical 
quantum mechanics relevant small scales observation peculiar situations 
study challenges research directions universe sense specifying scale observation study applies 
similar way effective approach aose requires fixing scale observation give meaning concept software systems enable identification issues faced engineering 
particular distinguish different scales observation micro macro meso scales raising different issues aose 
identification scales terminology adopted comes analogy world mems molecule engineering 
manufacturing size components quantum phenomena appear taken account characteristics position single atom relevant 
manufacturing components collective phenomena observed classical physical laws disregarding presence behaviour single atoms effective 
called meso scale phenomena classical quantum mechanics observed required taken account proper manufacturing components 
applying similar characterisation mass identify different scales observation follows micro scale 
micro scale observation typically applies traditional software development processes 
engineers involved analysis design development mas limited number units agents defined interact achievement specific application goal may typically preserve enforce strict control understanding component system 
software system limited identifiable size actual subject engineering engineers approach building detailing features agent develop mechanisms underlying interagent interaction interaction agents environment 
macro scale 
macro scale observation engineering relates understanding controlling behaviour huge software systems large number interacting agents hundreds billions possibly distributed decentralised network deep dynamic uncontrollable operational environments 
due complex decentralised nature systems subject engineering possible exert strict control agent interaction observe reasonable manageable level detail individual components system 
collective behaviour system matters 
emphasise macro scale approach mas engineering adopted building systems explicitly conceived achieving goals collective macro scale swarm systems sensor networks understanding control systems simply grow size macro scale approach feasible global information economies world wide systems grid 
zambonelli omicini meso scale 
meso scale observation typically applies activity deploying micro scale software system pre existing macro scale 
previously said computing scenarios limited number software systems exist isolation built immersed existing networked scenario high complexity 
working development system micro scale terms hardly time engineers face basic questions impact system deployed open complex scenario ii impact global system deployment systems 
words phase process developing mas requires account micro scale macro scale aspects 
simple example may help clarify concepts 
consider case agent mediated electronic marketplaces auction sites 
engineer may wish develop mas enabling user select specific shopping preferences set agents travel world wide network auction sites look possibly buy user requested 
micro scale observation key issues agents shall best fulfil user requirements get cheated way get best offers available network 
extreme macro scale observation presence global agent information economy prices dynamically established agents acting auctions introduces problem controlling global degree price fluctuations potential emergence instabilities economic crisis 
meso scale ensure agents deployed network able effectively interact global auction system way efficiency affected starting buying unsatisfactory goods unsatisfactory totally unpredictable prices global stability system undermined having agents speculate prices influence 

micro scale micro scale subject vast majority aose research researchers classically tend categorised aose hat 
endeavour reflects short state art summary reported section surprising naturally derives endeavour driven software engineering research far 
years ago fact micro meaningful scale observation software systems 
software systems closed operating isolation somewhat open interacting external world static predictable patterns interaction 
duty engineers simply trying build reliable efficient self contained software systems ensure strict control understanding component systems sake effective maintenance 
consequence fact earlier current approaches aose mainly focus building small size mass definition challenges research directions suitable models methodologies tools kinds systems 
systems claimed open meso scale macroscale issues disregarded 
consequence aose practice micro scale focused trying apply extend traditional assessed methods tools object oriented ones aose 
potentially interesting research challenges micro scale received attention practice extending traditional methods considered necessarily best direction follow discuss 

assessing advantages agents software engineering 
authors participants sig agentlink possibly readers confident potential advantages agent oriented paradigm fact paradigm adopted development complex software systems 

considerations reported section potentials paradigm need supported stronger quantitative arguments 
software engineers going spend money man months development complex software system hardly convinced shift new paradigm pay overhead involved process simply conceptually elegant 
require evidence fact help save money resources 
emphasise referring advantages agents bring software systems advantages agents bring process developing software systems 
moment little proves extent advantages adopting agent oriented approach software development 
instance describe experience research group building robotics application aose methodology document quantitative way man months effort efficiency software development process notably improves different specifically agent approaches 
example rossi discuss fact definition evaluation aose methodology take account suitability matching peculiar abstractions agent computing proposed methodologies suitability facilitating software development maintenance 
opinion justified research efforts attempt identifying suitable aose methodologies mas engineering needed direction evaluating quantitative qualitative way agent paradigm associated methodologies order assess actual advantages existing paradigms software analysis design maintenance 

standard non standard extreme processes 
definition agent specific methodologies definitely explored topics aose large number aose methodologies describing process building mas organised proposed literature 
characterises methodologies proposed far zambonelli omicini assume traditional waterfall model analysis design implementation maintenance organising process building mas 
raises key questions somewhat related previously identified challenge 
sure traditional software process model apply mas 
abstractions agent computing possibly impact way approach building mas 
world dynamic complex software systems concepts requirements engineering analysis design implementation maintenance apply traditional way 
answer moment 
think scientists working area really interrogate problem possibly novel software process models suited agent computing hopefully effective traditional ones 
second appears odd proposals aose methodologies adopt standard process model real world industrial software development standard model rarely applied 
matter fact cases software developed non structured process analysis design implementation collapse bunch technicians programmers directly interacting clients refine typically vague specifications striving deliver time 
mainstream community software engineering situation getting properly attributed definition novel software process models specifically conceived give flavor engineering chaotic processes agile extreme software process models 
area aose think similar direction explored possibly exploiting fact abstractions agents may promote identification different agile process models argued previous paragraph 
promising approach direction described 

auml 
acceptance new paradigm better promoted adopted software engineers minimal effort letting exploit possible knowledge minimising need acquire new knowledge new states mind 
reasons considerations apply scientists large number research efforts spent area aose exploit extend traditional object oriented notation modelling techniques context mass particular anticipated subsection agent oriented extensions uml auml current subject great deal research 
instance extensions uml diagrams proposed account highlevel nature agent interactions societal aspects intrinsic mas architectures 
extensions focusing specific aspects agent paradigm set intuitive largely familiar diagrams turn great acceptance paradigm 
agent research community auml fully specified standardised de facto standard newly proposed aose methodologies tend adopt challenges research directions auml basic notation technique newly proposed interaction patterns variety applications usually expressed terms auml diagram 
despite current enthusiasm auml far convinced auml ultimate answer 
current period transition auml play important role think complexity dynamics situated nature modern software systems effectively dealt notations modelling techniques originated static situated software architectures 
extensions proposed auml intrinsically carry original shortcomings original object oriented proposal 
ones thinking traditional software engineering community shortcomings standard uml evident novel notations explored account higher dynamics complexities 
accordingly think great challenge area aose identifying brand new notations modelling techniques conceived scratch suit specific characteristics mass stating auml abandoned 
simply stating auml novel proposals welcome simply discarded conform widespread standards 
fact reasonable proposals direction formulated effectively compete auml witnessed sturm describing modified version opm specifically suited mass 
exploiting full potential formal models 
formal models played role context software engineering research formal notations system design formal frameworks system verification research formal methods tried cover spectrum engineering practice 
despite efforts show usefulness practice claim usability success formal methods participated theory software engineering day practice far university courses formal methods software engineering formal methods software engineering best practice 
reason unprecedented complexity modern software systems urgently call formal methods helping engineers designing testing verifying applications 
look results research focus appears shifting providing global formal approach engineering process addressing separate aspects specialised formal methods tools ii suitably integrating different formal approaches engineering process 
context formal methods represent obvious fascinating challenge aose 
particular agents provide new opportunity formal approaches micro scale 
level observation fact complexity typically addressed simply adding new components increasing capabilities individual systems components 
natural encapsulation provided agents means suitably formalised agent architectures say bdi logic agents effectively build complex autonomous components behaviour modelled traditional ai zambonelli omicini techniques knowledge reasoning order logics 
compositional methods principle micro scale foresee critical behaviour systems prevent undesired behaviour features individual agent components 
particular logic agent architectures particularly promising bring software engineering arena results computational logics achieved years research 
fora exist trying pave way direction 
nature agent oriented abstractions represent conceptual framework promoting seamless clean integration different heterogeneous formal approaches 
vision agent oriented methodologies promoting effective factual formal methods mainstream se challenge aose researchers 

promoting intelligence engineering 
discussed subsection intelligent behaviours studied isolation decades ai research exception robotics research having assumed unitary view embodied intelligence 
furthermore ai born constructive discipline methodological concerns occasionally way ai research 
result distance practice software engineering findings ai great 
obvious challenge aose today provide affordable way introduce engineering intelligent behaviours mainstream software engineering practice 
point simply exploit agents provide conceptual framework ai techniques occasionally standard software engineering practice 
key challenge aose provide methodological approach enabling software engineers comfortably devise exploit selected ai solutions everyday practice 
example operations research born independent research field long ai today closely related ai ai tools encapsulated exploited standard techniques 
provides programmers number structured problems travelling salesman knapsack provide suitable algorithms vast amount real world application problems 
analogously data mining practically integrated number efficient ai techniques classification clustering temporal sequences 
practically exploited multiplicity different application scenarios criteria properly select 
despite fact ai related areas provide engineers criteria technique selection pre conditions engineering methods efforts typically performed isolation global view system engineering issue 
needed representing challenge ai general aose particular integrated approach enable engineering complex application problems complex require form system intelligence faced issue 
challenges research directions 
macro scale macro scale observation deals engineering behaviour large scale mas 
implies applying engineering methods observation level abstracts fact global system possibly individually deployed sub systems agents 
immediate consequence macro scale behaviour individual agents individual sub systems se relevant 
relevant behaviour system 
sceptical readers tempted say macro scale means related engineering activity building matter scientific investigation activity observing studying understanding 
agree traditionally dealing complex systems macro scale involved types scientific activities 
human artifacts software systems grow level complexity impossible control micro scale observation happening networks distributed systems longer satisfied activity scientific investigation 
understanding systems find ways engineer behaviour apply rigorous methodologies enabling exert extent control systems direct behaviour needed 
internet web sharp examples change perspective 
years ago size web underlying physical network routers grew dramatically huge connected researchers started investigating structure dynamics networks discovered peculiar unexpected aspects 
apart purely scientific interest discoveries newly acquired knowledge basic background engineering router topologies highly accessed web sites caches web indexing algorithms 
instance led identification founded methodologies evaluating impact addition new routers new highways internet 
coming back mass large amount experimental simulation research aimed understanding behaviour large possibly world wide mass available 
challenges area somewhat related promoting emergence discipline macro scale aose 

measuring system 
engineering implies activity measuring 
micro scale traditional software engineering widely applied measuring methods quantify complexity software system robustness mean time failures typically software metrics proposed basic assumption having micro level visibility system components 
far individual components system inspected behaviour analysed clear analogous sorts metrics applied agents specific micro scale metric problem emerging meso scale measure trust analysed section 
zambonelli omicini macro scale problem measuring system possibly important 
fact lose visibility control individual components way characterise system introduce synthetic indicator behaviour metrics able capture relevant characteristics quantitatively compare behaviour systems behaviour system different times different conditions 
unfortunately lack micro scale control past area software measurement useless brand new approaches identified 
approaches measure mas macro level proposed motivated contingent needs showing specific characteristics mas examination 
metrics appear restricted applicability scope promise general nature 
instance parunak brueckner introduce general concept entropy mas show colony ants globally impacts environment situated 
roli adopt compression algorithm determine terms compression rate degree coordination achieved cellular mas 
network science earlier web topology inspired definition general macro scale metrics determine connectivity characteristics network agents 
opinion large amount reach higher understanding really needs measured mass specific classes mass macro scale metrics may general nature 
getting inspiration thermodynamics information theory network science science typically having deal macro scale measures may direction may starting scratch search distinguishing macro scale metrics 

controlling system 
measuring system important understand characterise 
measure consequent action measuring simply reduces scientific activity 
engineering measuring system ensuring specific measurable values pre defined range range characterising acceptable behaviour system 
words measuring system control controlling system preserving specific observable measurable behaviours 
variety macro scale control tasks may wish enforce large mas 
give examples 
world wide agent information economy may wish avoid unpredictable large range price fluctuations ensure reasonable stability global price systems 
sensor networks grids may wish various tasks performed agents sensors nodes properly distributed geographic area highly overloaded underloaded zones emerge 
large scale network acquaintances may wish ensure pathological topologies leading distorted information dissemination occur 
unfortunately enforcing type control macro level examples challenging task 
challenges research directions traditional control theory tells parameters laws governing evolution system known enforcing active control simply reduces changing operational parameters required 
area mass far easy task 
cases way know operational parameters laws governing mas 
second know lack micro scale control components system decentralised possibly belonging different stakeholders require novel approach influence behaviour system loop adding new components changing characteristics operational environment changing behaviour pre existing components 
promising specific approaches direction undertaken 
large number experimental studies global information economies isomorphic studies performed human economies telling lot actual laws governing paving way suitable methodologies tools control extent 
studies large networks agents telling specific pathological situations undesired global synchronisation coordination activities may occur principle avoid 
lack general purpose models tools understand control macro level behaviour large size mas 

universality mass basic question general understanding general control tools mass exist intriguing challenging 
variety highly heterogeneous physical systems analysed terms macro properties exhibit surprisingly similar behaviours 
instance phase transitions bifurcations shifts ordered chaotic behaviour follow exactly laws limited number attractor classes describe global dynamics huge number physical systems 
words high complexities ruling macro scale behaviour diverse physical systems appear unifying universal laws 
ask similar universal properties may exhibited mass may define general purpose engineering tools 
reasoning possibility suggested van parunak weird 
different types physical systems exhibiting universal behaviour typically weakly correlated particles interacting specific laws 
degree correlation may vary system system may specific interaction laws global behaviour aspects 
mas systems general terms characterised weakly correlated autonomous particles interacting specific schemes 
big surprise definitely scientific technological breakthrough discover mass obey universal laws complex physical systems 
case exciting discover general laws mas completely different physical systems underlying universal laws computational systems autonomous components existed 
zambonelli omicini laws identify unifying techniques face different parameters macro scale complexities variety different mass global information economies grids sensor networks 
promising directions eventually identify general universal laws hard say 
better understanding exploitation number findings study complex natural physical systems may definitely help 

sociology biology 
past years natural social systems played important role areas related computer science 
biology acted major source inspiration definition variety novel search heuristics genetic algorithms ant algorithms 
social systems specifically social networks played major role understanding behaviour large computational networks internet web 
motivated successes areas fact mass naturally abstracted ecological societal terms lessons biology sociology started influencing development large scale distributed computational systems large scale mass goal reproducing mass robust self regulating macro scale behaviours exhibited ecological social systems 
instance algorithms inspired ant foraging effectively exploited mobile agents find information distributed network 
similarly social phenomenon gossip turns dramatically effective propagate information social network inspiration variety novel routing algorithms 
specific area mass variety social natural phenomena negotiation interactions social conventions pheromone interactions exploited extensively development systems robust adaptive macro scale behaviour 
natural social phenomena exploits specific classes physical phenomena achieve adaptive macro scale behaviours 
instance fields approach exploits virtual gravitational fields orchestrate movements large number distributed mobile agents robots 
context feel studies building specific classes mass able provide general insights large scale mass effectively controlled outof loop approaches 
insights produced near larger variety phenomena explored ii novel formal modelling approaches produced 
regard point number interesting physical biological phenomena currently underestimated area aose potential effectively exploited building robust adaptive mass instance emergence regular spatial patterns observed variety physical systems possibly exploited implement novel effective strategies distributed coordination large scale mass example patterns distribution specimen populations deriving specific interaction mechanisms definition challenges research directions adaptive mas organisations effective strategies dynamic division labour 
regard second point current lack common model different types natural biological physical phenomena exploited large scale mass making impossible compare heterogeneous approaches making impossible document performed experiences sake reproducibility reusability 
possibility having common modelling language possible build catalogue reusable patterns global mass behaviour 
identification common modelling language definitely close identification universal laws mass macro scale 

meso scale meso scale observation comes play micro scale software system typically developed specific application goals achieved context macro scale open complex operational scenario evaluated regard actual deployment 
mean meso scale issues arise deployment phase arise studying characteristics system deployment perspective 
instance consider system designed developed micro scale system adopting micro scale approach components place working defined application goals 
problem system sooner immersed execution pre existing possibly world wide system macro scale characteristics hardly controlled micro scale 
clear need preserve micro scale characteristics system macro scale characteristics system reciprocal influences 
currently research faces problem enabling execution mass immersed open scenario 
include standardisation efforts enabling dynamic open interoperability models dynamic open agent societies aose methodologies explicitly conceived deal open agent systems 
opinion faces meso scale issues restricted perspective simply terms slightly extended micro scale observation 
instance problem openness systems cases posed simply terms components software system connect components external world interact getting damaged 
opinion meso scale observation introduces critical issues simply enabling interoperability aspect necessary 
specifically anticipated key challenges face dual aspects understanding controlling impact software system immersed macro scale scenario vice versa understanding controlling potential impact deployment software system may macro scale 
formulation problem clear meso scale poses challenging problems aose 
fact effectively zambonelli omicini face issues assume availability proper micro scale models tools aose methodologies agent oriented formal methods availability macro scale ones control methodologies unifying models possibility organise engineering account 
tempted say meso scale challenging general issues difficult precisely identify specific challenges promising research directions 
try go details specific issues aware dimensions meso scale largely unidentified 

identifying boundaries system 
starts considering fact software system deployment time part larger system problem identifying boundaries separating systems arises 
open world agents come life die time mobile agents roam network domains plans task accomplished software system delegated external components middleware services mediators brokers concept boundaries systems weak 
words may unclear engineer consider part system include simply considered having 
tentative solutions deal boundary problem proposed far 
instance common practice open agent systems wrap external entity agent part internal system encapsulating boundary effect set identified wrapper agents 
practice solve problem simply hides inside agents 
practice simply useless happens agents system interact parts external world 
effective solution enforce mas interactions internal external take place shared interaction infrastructure blackboard tuple space 
case shared interaction infrastructure acts virtual space welldefined boundaries identifiable dynamics interaction boundaries 
unfortunately solution dramatically clashes usual perspective interagent interactions agents typically assumed able directly talk peer peer way mediation shared interaction space 
possibly general direction abstracting actual presence shared infrastructure identifying integrating aose methodologies usable guidelines identification boundaries electing boundary conditions modelling characteristics dynamics interactions boundaries primary abstraction open mas development 
guidelines boundary conditions modelled just know 
issue directly leads problem formalisation meso scale 
challenges research directions 
formal models non systems 
quite obvious role played formal methods micro scale additional questions arise considering fuzziness concept meso scale 
fact systems come unpredictable macro scale non pragmatic theoretical causes 
parts system engineer control external world comes open boundaries bringing burdens uncertainty complexity 
components account modelling may represented glance components may developed teams having worked separately different portions system multiple heterogeneous dynamic application environments may dealt different technologies languages paradigms legacy systems may combined effective fruitful way 
meso scale software engineers afford lose control components system building despite intrinsic explosion complexity 
issues security quality behaviour automated verification absolutely critical engineer 
unfortunately suitably addressed help traditional formal methods 
happens critical portions system modelled formally 
case instance meso scale systems exploiting shared interaction infrastructure 
shared interaction infrastructures typically encapsulate embody critical portions system behaviour providing knowledge management security mechanisms communication services usually provided infrastructure components form services means dedicated run time abstractions daemons servers brokers middle agents key point shared interaction infrastructure comes suitable formal characterisation key run time abstractions provided formal characterisation system properties guaranteed proved principle 
fact dynamic behaviour critical run time abstractions shared individual agents constituting mas modelled predicted corresponding global system behaviour principle designed partially predictable independently individual autonomous behaviours agents 
example instance discussed omicini coordination abstractions provided run time agent coordination infrastructure required predictable dynamics formally characterised 
ensures critical system behaviour depending governance agent interaction formally defined design stage ensured run time 
general key challenge aose meso scale observation devising formally defined agent infrastructures incorporating suitable methodologies associated formal methods tools 
allow engineers super impose critical system properties design time preserve execution time prove formally despite general complex mass 
security infrastructures trust 
dichotomy intrinsic complexity software systems absence accessible models zambonelli omicini system behaviour understandable predictable dichotomy sharp meso scale observation raises key issue trust humans mass difficulty trusting systems fully understood behaviour fully predicted affects users sense engineers developers responsible design actual functioning systems 
conceiving trustworthy models engineering complex systems dramatic importance technological progress characterising information society necessary condition widespread adoption acceptance mass trust important social issues mass human systems 
considering scenarios commerce government edge human artificial societies tends blur appears quite natural consequence 
general social issues involved human societies trust faced construction complex artificial systems mass trust information technology accounts main issues trust humans systems terms trust users systems trust designers engineers systems ii trust systems systems terms trust system components trust components different systems 
interpretation mass terms societies promoted agent oriented approaches possible face issues conceptual framework adopting uniform approach explore general models solutions 
correspondingly identification suitable models technologies going mere concerns security fully supporting notion trust artificial systems primary challenge mas research workshops trust deeply mas research trying address concerns 
implies definition development infrastructures provide agents mas security explicitly model embed notion trust suitable abstractions expressiveness effectiveness required complex mas engineering 
trivial example agent mas necessary engineers able characterise measure terms trusted time system life information accessible understandable users 
relevant especially meso scale agent interact open uncertain world making difficult understand predict course action trust 
issue making trust models heterogeneous sources psychology economy law 
match technology infrastructure level mas appears challenging problems mas research 

empowering social intelligence 
meso scale observation complexity systems longer allows system components completely controlled designed governed merely individuals 
correspondingly scale observation intelligence embedded agents section build intelligent systems 
notion situated intelligence challenges research directions seen eyes intelligent systems engineers calls suitable design outside agents societies agents form get deployed environments agents live 
design intelligent systems require hand suitable design abstractions support social intelligence intelligence exhibited agent societies directly ascribed individual intelligent component agents hand suitable infrastructures shaping agent environment fully enable promote exploitation individual social intelligence 
requirement clearly emerges aose methodologies adopting organisational models describe design systems terms organisational structure roles involved organisational patterns roles relationships organisational rules constraints roles interactions 
requirement comes application scenarios characterised articulated dynamic organisational structures coordination processes agent oriented abstractions proved effectiveness inter organisation workflow management systems agent cscw team cooperative military contexts 
key challenge aose research provide models technologies methodologies support social intelligence 
hand means defining suitable social abstractions incorporate form higher level intelligence governing agent interaction global social intelligent behaviour 
instance case notions programmable coordination services institutions 
hand involves enabling promoting individual agent intelligent activity society structure dynamics 
clearly promote controlled self reconfiguration self adaptation intelligent systems fact enabled inspect social structure dynamics allowed affect intelligent agent principle reason society inferences possibly plan evolution instance fix undesired behaviour adapt environmental changes 

area aose definitely early stage 
increasing number research groups get involved topic explore implications developing complex software systems agent oriented paradigm number fascinating challenges open investigation 
tried overview aose research simply reduce defining new agent specific development methodologies adapt existing notations 
research important promote acceptance paradigm emerging application areas pervasive grid computing require 
near software engineers asked produce deploy control complex software systems possibly large numbers agents immersed complex environments populated millions agents able behave reliable intelligent trustworthy way scale observation 
zambonelli omicini requirements fulfilled identification novel approaches possibly directions identified necessary 
course ambition having covered pages possible challenges research directions 
variety challenging engineering problems discussed affect development agent systems call exploration promising research directions 
instance dealt potential role evolutionary connectionist approaches play engineering agent systems micro level macro level 
touched issues related engineering user interfaces aware scope importance increasing dramatically underlined growing awareness relevance affective dimension area emotional agents 
brave hypothesise agent paradigm possibly right direction eventually identify sound hyper turing computational model research efforts directions valuable 
addition extensively dealt fact scenarios simply deal intangible agents living cyberspace physical agents components modular robot smart dust strongly interacting physical world everyday environments 
sorts interactions require novel modelling engineering approaches driven new social physical issues 
dealt rapid advances nano bio technologies 
happen current concept agent bio mechanical fully organic 
engineering issues implied building reliable machine ethical issues implied creators novel specimens 
simply going bit far engineering issues paradigms come 
likes exciting research 
acknowledgments students researchers past years actively participated meetings agentlink sig michael luck efforts making agentlink successful exciting experience 
andrea omicini partially supported project ex dell informazione project la eco dell ec fp coordination action agentlink iii 
notes 
widespread acceptance agent computing software engineering paradigm fight opinions consider agents pure ai technique endeavour originated urge defend ai research community may challenges research directions contributing leaving simply consider agents re sell known research findings area distributed systems endeavour mainly driven quantitative implementation oriented considerations fully disregards qualitative software engineering issues 

similar change endeavour scientific investigation engineering place scientific areas ecology climatology great urge observing understanding systems directing evolution meet specific goals preserving biodiversity preventing catastrophic climate changes 

abelson allen hanson knight rauch weiss amorphous computing commun 
acm vol 
pp 


albert jeong barabasi error attack tolerance complex networks nature vol 
pp 


babaoglu meling montresor anthill framework development agentbased peer peer systems proceedings nd international conference distributed computing systems ieee cs press vienna pp 


bar yam dynamics complex systems perseus books reading ma 

bass clements kazman software architectures practice nd edn 
addison wesley reading ma 

bauer muller odell agent uml formalism specifying multiagent software systems int 
software eng 
knowl 
eng 
vol 
pp 


poggi middleware programming support agent systems proceedings nd international symposium agent theory agent implementation vienna pp 


berners lee hendler lassila semantic web sci 
am 

pagurek white mobile agents network management ieee commun 
surv 
vol 
pp 


bonabeau dorigo theraulaz swarm intelligence 
natural artificial systems oxford university press oxford uk 

booch object oriented analysis design nd edn reading ma addison wesley 

ieee comput vol 
pp 


bowen hinchey myths formal methods ieee software vol 
pp 


bussmann agent oriented programming control tasks proceedings rd international conference multi agent systems ieee cs press paris pp 


leonardi zambonelli engineering mobile agent applications contextdependent coordination ieee trans 
software eng 
vol 
pp 


rossi evaluation agent oriented methodologies proceedings oopsla workshop agent oriented methodologies seattle usa 

ciancarini omicini zambonelli coordination technologies internet agents nordic comput 
vol 
pp 


ciancarini omicini zambonelli multiagent systems engineering coordination viewpoint agents vi agent theories architectures languages vol 
lnai springer verlag pp 


ciancarini wooldridge agent oriented software engineering proceedings st international workshop agent oriented software engineering vol 
lncs springer verlag pp 


iv th international workshop computational logic multi agent systems fort lauderdale fl 
zambonelli omicini 
possible approach development robotic multi agent systems proceedings st ieee wic conference intelligent agent technology ieee cs press halifax ca 

costa picco cugola epidemic algorithms reliable contentbased publish subscribe evaluation proceedings th international conference distributed computing systems ieee cs press 

crovella bestavros self similarity world wide web traffic evidence causes acm sigmetrics vol 
pp 


st international workshop declarative agent languages technologies melbourne au 

demazeau costa populations organizations open multi agent systems proceedings st national symposium parallel distributed ai 

uml significant uml change communications acm vol 
pp 


rodriguez aguilar sierra garcia formal specifications agent institutions agent mediated electronic commerce vol 
lncs springer verlag pp 


estrin culler pister connecting physical world pervasive networks ieee pervasive comput 
vol 
pp 


eugster felber guerraoui kermarrec faces publish subscribe acm comput 
surv 
vol 
pp 


ferber gutknecht meta model analysis design organizations multiagent systems 
proceedings rd international conference multi agent systems ieee cs press paris pp 


foster kesselman grid blueprint new computing infrastructure morgan kaufmann san francisco ca 

foundation intelligent physical agents fipa specifications 
www fipa org 

fox organizational view distributed systems ieee trans 
syst 
man cyber 
vol 
pp 


gomez weiss survey agent oriented software engineering researches methodologies software engineering agent systems kluwer new york ny 

sycara team oriented agent coordination retsina multi agent systems proceedings st international joint conference autonomous agents multiagent systems 
acm press bologna 

gomez sanz agent oriented software engineering proceedings rd central eastern europe conference multiagent systems vol 
lncs springer verlag pp 


hall myths formal methods ieee software vol 
pp 


garijo gonzales survey agent oriented methodologies agents iv agent theories architectures languages vol 
lnai springer verlag pp 


jennings agent approach building complex software systems commun 
acm vol 
pp 


juan pierce sterling roadmap extending gaia methodology complex open systems proceedings st acm joint conference autonomous agents multi agent systems acm press bologna pp 


kappel coordination workflow management systems rule approach coordination technology collaboration application vol 
lncs springer verlag 

kendall role modelling agent system analysis design implementation proceedings st international symposium agent systems applications ieee cs press palm springs ca pp 


kephart software agents route information economy proc 
natl 
acad 
sci 
vol 
pp 

challenges research directions 
kephart chess vision autonomic computing ieee comput 
vol 
pp 


kiczales lamping mendhekar maeda lopes loingtier irwin aspectoriented programming object oriented programming vol 
lncs springer verlag pp 


zimmerman hands look java mobile agents ieee internet computing vol 
pp 


kinny georgeff rao methodology modelling technique systems bdi agents van de velde eds modelling autonomous agents multi agent world vol 
lnai 
springer verlag th international workshop maamaw jan eindhoven netherlands pp 


extreme programming multi agent systems proceedings st international joint conference autonomous agents multiagent systems acm press bologna pp 


giorgini mylopoulos goal organizational perspective multi agent architectures intelligent agents viii agent theories architectures languages vol 
lnai springer verlag pp 


kuhn structure scientific revolutions university chicago chicago il 

lind issues agent oriented software engineering proceedings st international workshop agent oriented software engineering vol 
lncs springer verlag 

luck mcburney priest agent technology enabling generation computing agentlink ii southampton uk 

zambonelli fields physically inspired approach distributed motion coordination 
ieee pervasive comput 
vol 


mccarthy programs common sense minsky ed semantic information processing mit press boston ma pp 


meyer formalism specifications ieee software vol 
pp 


moses tennenholtz artificial social systems comput 
artif 
intell 
vol 
pp 


noriega agent mediated auctions metaphor barcelona ph thesis universitat de barcelona 

noriega sierra electronic institutions trends challenges cooperative information agents vi vol 
lncs springer verlag pp 


odell parunak bock representing agent interaction protocols uml proceedings st international workshop agent oriented software engineering vol 
lncs springer verlag pp 


omg corba specifications 
www corba org 

omicini semantics tuple coordination models proceedings acm symposium applied computing acm san antonio tx pp 


omicini soda societies infrastructures analysis design agent systems ciancarini wooldridge eds agent oriented software engineering vol 
lncs springer verlag 
st international workshop aose limerick ireland june 
revised papers pp 


omicini ricci coordination infrastructures engineering multiagent systems methodologies software engineering agent systems kluwer new york ny 

omicini ricci reasoning organisation shaping infrastructure ai ia vol 
xvi pp 


omicini zambonelli coordination internet application development auton 
agents multi agent syst vol 
pp 


parnas predicate logic software engineering ieee trans 
software eng vol 
pp 


parunak go ant engineering principles natural agent systems ann 
oper 
res vol 
pp 

zambonelli omicini 
parunak personal communication 

parunak brueckner entropy self organization multi agent systems proceedings th international conference autonomous agents acm press montreal ca pp 


parunak odell representing social structures uml proceedings th international conference autonomous agents acm press pp 


poggi agent oriented software construction uml handbook software engineering knowledge engineering volume emerging technologies world scientific singapore pp 


ricci omicini virtual enterprises workflow management agent coordination issues int 
coop 
inform 
syst vol 
pp 

special issue cooperative information agents best papers cia 

iamnitchi foster mapping gnutella network ieee internet comput vol 
pp 


roli zambonelli cellular automata tell behaviour large scale agent systems software engineering large scale agent systems vol 
lncs springer verlag 

rowstron druschel pastry scalable decentralized object location routing largescale peer peer systems proceedings th ifip acm conference distributed systems platforms heidelberg pp 


russel norvig artificial intelligence modern approach prentice hall pearson education international englewood cliffs nj nd edn 

sefm st international conference software engineering formal methods brisbane australia 

shaw deline klein ross young abstractions software architecture tools support ieee transactions software engineering vol 
pp 


shaw garlan software architectures perspectives emerging discipline prentice hall englewood cliffs nj englewood cliffs nj 

shehory sturm evaluation modeling techniques agent systems proceedings th international conference autonomous agents acm press montreal ca 

shen norrie agent systems intelligent manufacturing state art survey int 
knowl 
inform 
syst vol 
pp 


shen hormone inspired adaptive communication distributed control self reconfigurable robots ieee trans 
robot 
auto vol 
pp 


noise order nature vol 
pp 


shoham tennenholtz social laws artificial agent societies line design artif 
intell vol 


sichman conte castelfranchi demazeau social reasoning mechanism dependence networks proceedings nd european conference artificial intelligence amsterdam nl pp 


sierra garcia evolutionary programming proceedings st international joint conference autonomous agents multiagent systems acm press bologna pp 


sturm shehory single model method specifying multiagent systems proceedings nd international conference autonomous agents multiagent systems acm press melbourne au pp 


tennenhouse embedding internet proactive computing commun 
acm vol 
pp 


sipper hype computation commun 
acm vol 
pp 


trappl petta emotions humans artifacts mit press 
challenges research directions 
tripathi ahmed kumar coordination model secure collaboration process coordination ubiquitous computing crc press pp 


trust th international workshop trust open agent societies melbourne au 

van der hoek wooldridge logic rational agency logic igpl vol 
pp 


omicini coordination service ontological formal foundation electron notes theor 
comput 
sci vol 


wegner interaction powerful computing commun 
acm vol 
pp 


wood multiagent system engineering int 
software eng 
knowl 
eng vol 
pp 


wooldridge agent software engineering iee proc 
software eng vol 
pp 


wooldridge jennings kinny gaia methodology agent oriented analysis design auton 
agents multi agent sys vol 
pp 


local interactions predict large scale patterns empirically derived cellular automata nature vol 
pp 


yu singh searching social networks proceedings nd international joint conference autonomous agents multiagent systems acm press melbourne au pp 


zambonelli methodologies software engineering agent systems sig report meeting agentlink news vol 
pp 


zambonelli sig report methodologies software engineering agent systems agentlink news vol 
pp 


zambonelli sig report methodologies software engineering agent systems agentlink news vol 
pp 


zambonelli jennings omicini wooldridge agent oriented software engineering internet applications coordination internet agents models technologies applications springer verlag berlin pp 


zambonelli jennings wooldridge organizational abstractions analysis design multi agent systems proceeding st international workshop agent oriented software engineering vol 
lncs springer verlag pp 


zambonelli jennings wooldridge developing multiagent systems gaia methodology acm trans 
software eng 
meth vol 
pp 

zambonelli parunak change paradigm computer science software engineering synthesis knowl 
eng 
rev 
