essence data access power dot 
gavin bierman erik meijer wolfram schulte microsoft research uk gmb microsoft com microsoft usa microsoft com microsoft research usa schulte microsoft com 
describe data access features experimental programming language currently development microsoft research 
targets distributed data intensive applications accordingly extends support data control 
data dimension provides type theoretic integration prevalent data models object relational semi structured models data 
control dimension provides elegant primitives asynchronous communication 
concentrate data dimension 
aim describe essence extensions mean identify exemplify formalize essential features 
tool small core language fc valid subset full language 
core language able formalize type system operational semantics data access fragment 
programming languages living organisms need continuously evolve response changing environment 
evolutionary steps typically quite modest commonly provision better reorganized apis 
occasionally radical evolutionary step taken 
example addition generic classes java 
argue time come large evolutionary step taken 
software intended distributed web scenarios 
typically structured tier model consisting middle tier containing business logic extracts relational data data services tier database processes produce semi structured data typically xml displayed user interface tier 
writing middle tier applications address 
applications commonly written object oriented language java deal relational data essentially sql tables object graphs semi structured data xml html 
addition applications fundamentally concurrent 
inherent latency network communication natural model concurrency black ed ecoop lncs pp 

springer verlag berlin heidelberg bierman meijer schulte asynchronous 
accordingly provides simple model asynchronous way concurrency join calculus 
rest shall focus exclusively data access aspects concurrency primitives discussed 
write mean language excluding concurrency primitives 
unfortunately common programming practice native api support data access jdbc ado net leave lot desired 
example consider fragment taken mildly adapted jdbc tutorial query sql database user supplied country stored variable input 
connection con statement stmt con string query select country input rs stmt query rs string rs cof name float rs price system println strings represent sql queries clumsy removes possibility static checking 
impedance mismatch language relational data quite striking value projected row passing string denoting column name appropriate conversion function 
seriously passing queries strings security risk script code injection problem consider case variable input string 
unfortunately api support java xml xpath xquery similar apis map xml values tightly object representation offer querying facilities string passing 
contention object oriented languages need evolve support data access satisfactorily 
hardly new observation large number academic languages offered support relational semi structured data see :10.1.1.41.7922:10.1.1.60.8264
spite obvious advantages languages appears acceptance hampered fact different mainstream application languages java example proposes extensions lazy functional language haskell tl hybrid functional imperative language advanced type module systems 
approach language support problem different direction extend common application languages creating new language 
closer approach 
defines way embedding sql commands directly java code 
results sql commands stored java variables vice versa 
sql commands statically checked compiler 
compilation consists stages pre process embedded sql second pure java compilation 
embedded sql code part language se fact embedded code prefixed keyword sql 
essence data access chief difference offers integration xml relational data models object model 
design objectives 
aim project evolve existing language provide class support manipulation relational semi structured data 
started extensions apply equally object oriented languages including java 
addressing title essence resulting language twofold extensions type system importantly elegant provision query capabilities sub title 
carefully designed set core design principles 

coherent extension safe fragment programs valid programs behaviour 

type system intended simple possible closely aligned type system xpath xquery standard 
intended users programmers familiar xpath xquery 

programming perspective real power comes query capabilities 
achieved generalizing member access allow simple xpath path expressions 
organization 
rest organized follows 
comprehensive overview programming language 
identify formalize fc core fragment 
detail simpler fragment ic show fc compiled ic 
compilation able show number properties fc including type soundness theorem 
briefly discuss related conclude 
design goal evolve provide integration object relational semi structured data models 
possibility add data models programming language orthogonal way including new types xml table xml relational schema respectively 
sought integrate models generalization ad hoc specializations 
rest section shall key ideas give number small programs illustrate ideas 
section serve programmer 
assume reader familiar java languages 
new types extension familiar primitive types integers booleans floats classes interfaces 
section shall consider preliminary version informally described 
subsequently simplified language chief contribution formalization 
bierman meijer schulte turn extensions type system streams anonymous structs discriminated unions content classes consider new query capabilities 
streams 
structural type add stream type streams represent ordered homogeneous collections zero values 
example int type homogeneous sequences integers 
streams aligned iterators appear 
streams typically generated iterators blocks contain yield statements 
example method virtual int int int yield return generates finite increasing stream integers 
importantly noted just invoking method body immediately execute iterator block immediately returns closure 
streams essentially lazy lists haskell sense 
closure consumed foreach statement code fragment builds finite stream iterates elements printing screen 
int foreach int console vital aspect streams flattened nested streams streams 
streams coincide xpath xquery sequences flattened 
alignment key design decision enables semantics generalized member access match path selection xquery 
give details 
addition flattening stream types allows efficiently deal recursively defined streams 
consider recursive variation function defined previously virtual int int int yield break yield return yield return statement yield break returns empty stream 
non recursive call yield return yields single integer 
recursive call yield return yields stream integers 
type system treats types int int equivalent type correct 
flattening forced copy stream produced recursive invocation leading quadratic linear number yields virtual int int int yield break yield return foreach int yield return essence data access note flattening stream types imply underlying stream flattened coercion element stream yield ed 
see operational semantics iterating stream effectively perform depth traversal ary tree produced iterator 
offers limited extremely useful form covariance streams 
covariance allowed provided conversion element type identity example button subtype object int conversion int object involves boxing 
notion simple variant notion covariance arrays statically safe array covariance overwrite elements streams 
rationale implicit conversions limited constant time operations 
coercing stream type button type object takes constant time coercing int object linear length stream boxing conversion int object identity 
key programming feature generalized member access suggests familiar dot operator powerful 
receiver stream member access mapped elements 
tostring implicitly maps method call elements stream returns value type string 
feature significantly reduces burden programmer 
member access generalized behaves path expression 
example tostring 
converts elements stream string pads string returning stream padded strings 
wishes map simple member access elements stream 
offers convenient shorthand called apply expression written applies block denotes sequence statements element stream block may contain variable plays similar role implicit receiver argument method body bound successive element iterated stream 
expressions reminiscent smalltalk methods 
example code creates stream natural numbers converts elements hex string converts upper case applies apply expression print elements screen tostring toupper console anonymous structs 
second structural type add anonymous structs encapsulate heterogeneous ordered collections values 
anonymous struct tuple ml haskell written struct int button example 
value type contains member type int unlabelled member type button 
construct value type expression new new button 
access components anonymous structs generalize notion member access 
assuming value previous type write ac shall adopt fj shorthand write mean sequence bierman meijer schulte cess integer value :10.1.1.109.1141
unlabelled members accessed position example returns button member 
streams member access lifted unlabelled members anonymous structs 
access property button component variable just write equivalent 
point reveal power generalized member access 
stream friends type struct string name int age friends age returns stream integers 
member access structural types 
query statement prints names friends friends name interestingly allows repeated occurrences member name anonymous struct type different types 
example assume declaration struct int button float projects members new anonymous struct equivalent new type struct int float 
provides limited form covariance anonymous structs just streams 
example anonymous struct struct int button subtype struct int control 
subtype struct object control conversion int object identity conversion 
support width subtyping anonymous structs 
choice types 
third structural type add particular form discriminated union type call choice type 
written example choice int bool 
name suggests value type integer boolean may hold time 
unions variant records pascal users keep track type values discriminated union implicitly tagged static type chosen alternative unions algol 
words discriminated union values essentially pair value static type 
syntax creating choice values injection implicit generated compiler 
choice int button choice int button new button provides test choice values test value static type 
int return true int return false 
assuming expression type choice expression true exactly 
invariant maintained type system 
slight complication arises subtyping choice control object new button button subtype control object type tag generated compiler 
choice type thought providing family overloaded constructor methods component type 
just standard object constructor method chosen 
example clearly essence data access control better object 
control returns true 
notion best routine extension reader may guessed member access generalized discriminated unions 
behaviour member access obvious designed coincide xpath 
consider value type choice char button 
member access succeeds irrespective value character button object 
case type expression int 
member may supported possible component types 
classic treatments union types probably consider type incorrect 
choice types follow semantics xpath example query foo bar returns bar nodes foo node exist empty sequence exist 
expression typed return value type color 
new type variant nullable type appear 
value type color 
thought singleton stream empty contains single color value contains button 
emphasize behaviour precisely matches xpath 
follows design allowing values boxed value types subtype supertype object 
anonymous structs choice types considered subtypes class object 
content classes 
allow close integration xsd xml schema languages included notion content class 
content class normal class single unlabelled type describes content class opposed familiar named fields 
simple example content class 
class friend struct string name int age void 
generalized member access content classes 
expression bill age returns integer bill value type friend 
xsd perspective classes correspond global element declarations content type classes correspond complex types 
comparisons xml data model immediately comprehensive study 
xml programming clear new type structures sufficient model simple xml schema 
example xsd schema element name address complextype sequence choice element name street type string element name type int bierman meijer schulte choice element name city type string sequence complextype element represented somewhat succinctly 
content class declaration class address struct choice string street int string city full language supports xml literals syntactic sugar serialized object graphs 
example create instance address class literal address address street elm st street city hollywood city address compiler contains validating xml parser literal normal constructor calls 
xml literals contain typed holes xquery allow embed expressions compute part literal 
especially convenient generating streams 
inclusion xml literals semantics generalized member access mean xquery code directly written 
example consider xquery cases processes bibliography file assume stored variable bs book bibliography lists title authors grouped inside result element 
suggested xquery solution follows 
bs book return result title author result solution identical foreach bs book yield return result title author result full language adds powerful query expressions discussed 
instance filter expressions return elements stream satisfy boolean expression labels duplicated anonymous structs discriminated unions full language allows type selection 
example value type struct int struct string select string member writing string transitive queries supported full language expression selects members type transitively reachable transitive queries inspired xpath descendant axis 
essence data access database programming relational tables merely streams anonymous structs 
example relational table created sql declaration create table customer name string int represented struct string name int customer addition path queries full language supports familiar sql expressions including select various joins grouping operators 
importantly statements value appropriate type value resides database memory write sql queries code access database 
xquery cases asks list title prices book sold bn select statement xml literals query written expression select book prices title title title price price price price bn bn price price bn book prices book book book bn bn book title bn title note xml placeholders title bn price code evaluated new titles new prices computed bindings clause 
far shown query values generalized member sql expressions imperative language allow perform updates 
focuses type extensions generalized member access 
essence rest study formally essence mean identify essential features 
adopt formal mathematical approach define core calculus featherweight short similar core subsets java fj mj classicjava :10.1.1.109.1141:10.1.1.14.5415
core calculus whilst lightweight offers similar computational feel full language supports new type constructors generalized member access 
fc completely valid subset fc program literally executable program 
rest section organized follows 
define syntax type system fc 
give operational semantics directly fc prefer compile features particular generalized member access 
greatly simplifies resulting operational semantics demonstrates features require extensive new machinery 
define bierman meijer schulte target language inner compilation 
ic essentially language handful new language constructs simpler type system 
give operational semantics ic programs 
specify compilation fc programs ic programs 
translation quite straightforward 
conclude section stating properties calculi compilation 
important type soundness property ic 
space prevents providing details proofs proved standard techniques similar analagous theorems fragments java 
core calculus fc syntax fc program consists class declarations 
class declaration defines zero methods contains exactly unlabelled type call content type 
code conventional class declaration number field declarations anonymous struct 
fc follows requires methods explicitly marked virtual override 
program assume unique designated method class declarations serves entry point 
program cd class definition cd class md method definition md virtual override fc supports main kinds types value types types 
usual distinguished type void methods return null type null value types include base types bool int structural types anonymous structs discriminated unions 
types class types streams 
usual types object identity represented runtime heap 
assume designated special class object 
types value types types types classes void null void null types stream types value types 
singleton stream type base types struct fd anonymous structs field definition choice choice types fd named member base types unnamed member bool int employ shorthand denote type choice type stream type singleton non singleton respectively 
flattens stream types simplification fc removing nested stream types altogether type grammar 
simplified fc choice types members essence data access unlabelled exclude simplification nested choice types 
coded fc unlabelled anonymous structs 
fc expressions split ordinary expressions expressions 
expressions expressions statements 
assume number built primitive operators 
grammar write denotes instance operators 
formalize operators meaning clear 
expression literals expression built operators pe variable assignment variable method invocation null null apply cast binding expression dynamic typecheck named binding static typecheck choice values unnamed binding new object creation new anonymous struct creation field access field access position pe expression simplification interests space restrict apply expressions contain expression sequence statements 
simplifies typing rules apply expressions coded foreach loops serious restriction 
statements fc standard 
mentioned earlier adopted yield statement appear generate streams 
statement skip pe promoted expression conditional variable declaration return return statement return empty return yield return yield statement yield break stream foreach foreach loop loop block follows assume fc programs formed cyclic class hierarchies correct method body construction conditions easily formalized suppress details lack space 
subtyping 
define typing judgements fc programs need define number auxiliary relations 
define subtyping relation 
write mean type subtype type rules defining relation follows 
bierman meijer schulte refl trans object class box sub null null fd stream object sing fd fd fd fd struct struct fd struct fd choice choice choice choice rules straightforward 
rule stream contains notation 

uses denote instances rule select left cases case select right cases 
include cases individually select left right alternatives 
rules stream struct predicate relates types identity conversion 
button object int object 
short shall give straightforward definition 
generalized member access 
seen key programming feature generalized member access 
capturing behaviour type system tricky adopted elegant solution define auxiliary relations 
written tells value type accessing member return value type define similar relation function member access written having generalized member access captured separate typing relation greatly simplifies typing judgements expressions 
generalized member access key feature shall give detail 
definition relation stream types follows 


void void rules map member access stream elements making sure create nested stream type 
rules function member access similar 
rule captures intuition mapping void valued method stream forces evaluation stream return value 
defining rules member access anonymous structs need define rules member access named field definitions 
pretty straightforward follows 
essence data access consider rules generalized member access anonymous structs 
give degenerate cases component supports member access 


struct fd fdn struct fd fdn non degenerate cases follows 
fds struct fd fdn struct 
fds struct fd fdn struct subset components support member map member access components order 
return type anonymous struct component return types 
consider rules generalized member access choice types 
consider rules depending components support member access 
give simple case possible components support member access 
choice choice case possible components supports member access 
rules follows omit nested cases 
choice 
choice 
reader recall return type generalized member access involves singleton stream type 
give cases possible components supports member access 
choice choice 
choice choice 
generalized member access singleton streams relatively straightforward complication ensure nested streams generated 




need define rules generalized member access classes 
clearly need reflect standard semantics function member access classes bierman meijer schulte searches class hierarchy matching method 
find matching method class need check actual types arguments types expected behaviour rules 
class md md class md md consider rules generalized field access 
small subtlety concerning recursive class definitions consider recursive class list lists integers class list struct int head list instance xs type list want xs head recursively select head fields xs 
simply unfolding content type rules earlier generalized access anonymous structs precisely happen 
number solutions order type system simple possible follow haskell sml break recursive cycles nominal types 
setting means simply perform member lookup nominal members content nominal types 
refined rules result type xs head int 
formalizing trivial time consuming 
define family generalized member access judgements written identical previous rules defined nominal types 
elide definitions 
define field access nominal types define formally content type class written content class follows 
class object md class md content content content struct rule generalized member access classes simply searches member content type class rule 
content generalized index access 
mentioned earlier elements anonymous structs accessed position 
captured rule 
type fdi struct fd fdn reader expected index access generalized types routine details omitted 
typing judgements 
able define typing judgements fc 
define relations corresponding syntactic categories expressions expressions statements 
judgements write mean essence data access partial function program identifiers types 
judgements expressions expressions written pe respectively 
fig 

rules routine shall discuss interesting details 
rule typing judgement binding expression 
defined follows compactness rules shows elegance having captured generalized member access auxiliary relations 
rules ensure return type apply expression nested 
rule ensures appropriate mixed flattening streams 
rule captures intuition applying void typed expression stream forces evaluation stream type void 
typing judgement fc statements written intended mean statement typed typing environment returns value normal return yield return value type 
rules reflect fact type stream elements cast type bound variable 
downcast matches 
inner calculus ic consider featherweight calculus fc shall fact define core calculus 
inner calculus called ic intended similar lower level fc thought internal language compiler 
chief simplification ic type system support generalized member access 
intention compile generalized member access translating fc programs ic programs 
give details compilation 
apart simplified type system define quite simply operational semantics ic 
grammar ic simple grammar fc 
extra expression statement forms added reflects lower level nature ic likewise couple removed grammar redundant 
expect new syntactic forms available programmer 
extensions follows expression 
expression new closure creation pe 
new choice creation block expression content class content statement choice content 
yield return typed yield bierman meijer schulte pe int tint bool tid null null tis bool choice bool content tnew new fd new struct fd 






void void pe pe void return bool return yield return bool yield break 
foreach yield return 
foreach fig 

typing judgements fc expressions expressions statements essence data access ic includes expressions create closure choice elements 
include operator content extract content element object element choice type add operation extract valued content 
type raise exception 
add typed block expressions ic addition provide typed yield statement 
syntactic forms removed grammar fc remove field accesses completely replaced positional access remove untyped yield statement yields explicitly typed 
define typing judgements ic expressions statements written respectively 
rules identical fc shall just give rules new syntactic forms 
rules creating closure choice elements follows 
new 
new choice typing rules extracting content content class choice elements follows choice content content typing rule block expressions yield statements follows void 
yield return 
yield break 

object yield return operational semantics ic section formalize dynamics ic defining operational semantics 
follow fj mj give form small step reduction relation big step evaluation relation easily defined :10.1.1.109.1141:10.1.1.14.5415
evaluation contexts encode evaluation strategy familiar way definition ic evaluation contexts routine omitted 
define value forms ic expressions statements bv value form binding expression expression values statement values null void basic values sv skip return return value new bv struct value return new choice value yield return typed yield value yield break evaluation ic expressions statements takes place context state pair heap stack frame 
heap represented bierman meijer schulte finite partial map runtime objects stack frame finite partial map variable identifiers values 
runtime object pair cn type cn canonical value closure 
closure runtime representation stream written pair stack frame statement sequence 
superscript flag indicates closure fresh clone 
explain distinction 
follows assume expressions statements typed 
fig 
define evaluation relation ic expressions written means state expression reduces possibly steps possibly updated state 
auxiliary function value defined follows value def value def 
rules routine 
usual number cases lead error state dereference null object 
errors ic say pair terminal errors value 
evaluation relation ic expressions written pe pe fig 

rules method invocation deserve explanation differentiated method void returning 
method body unfolded executed form return value 
value result method invocation 
method void valued unfold method body execute form return 
result special value void 
evaluation relation statements written fig 
give just interesting cases dealing foreach loops 
mentioned streams aligned iterators foreach loop syntactic sugar obtained iterator block type method 
walked current members 
semantically important copies enumerable object 
semantics faithfully encode tagging closures creating clones appropriate 
whilst iterating stream update place rules fsc fnc foreach creates copy fresh original rules fsf 
rule fbr write range clone fresh 
rules fsf fsc embody flattening streams 
evaluate foreach loop evaluate stream yields value 
value stream execute foreach loop stream 
compiling fc ic section give details compilation fc ic 
compilation routine interests space shall concentrate interesting aspect generalized member access 
employ coercion technique translate implicit generalized member access fc explicit ic code fragment 
expressed inductively defined relation written member function member access respectively 
judgement intended essence data access expressions cn cn cn true cn false new true new dom false new dom new fresh cn content cn null content new bv value expressions new new return null method void return method void return void fig 

evaluation rules ic expressions expressions mean invoking member element type returns element type ic coercion encodes explicit access appropriate member 
fig 
give details compilation generalized member access gma members relation 
version function members bierman meijer schulte foreach null yield break foreach fresh dom yield return null foreach clone foreach fbr clone yield return null foreach clone foreach fresh dom yield return null foreach clone foreach foreach fsf clone yield return null foreach clone foreach foreach fsc fresh dom yield return null foreach clone foreach clone yield return null foreach clone foreach fnc fig 

evaluation rules ic foreach loops methods similar omitted 
definition employed function syntax coercions really contexts dropped types various block expressions 
shorthand yield return mean statement sequence yield return yield break functions value returns element singleton stream raises exception empty hasvalue returns boolean depending singleton stream element 
coded directly definitions omitted 
essence data access compiling gma streams compiling gma anonymous structs 

fds gk struct fd fdn struct new gp 
struct fd fdn compiling gma choice types 
gk choice choice return new choice yield return new sp return new choice yield return sp new sp gp sp return null gk choice return return gn 
choice return new yield return return null compiling gma singleton streams hasvalue return new yield return value return null hasvalue return value return null fig 

compilation generalized member access bierman meijer schulte example compile instance member access fc follows compile expression ic yielding generate coercion corresponding member access 
result compilation simply 
write compilation expression incoherence design 
java design incoherent 
languages notion best conversion conversion types 
exist best conversion compile time error generated 
compiling fc ic notion best conversion dealing rules subtyping 
formalize notion best java language specifications give precise details 
new types complicate notion greatly example conversions int object rule box rules box trans int choice int string object 
clear conversion better 
critical pairs similarly easy resolve 
properties fc ic section briefly mention properties fc ic compilation 
give details proofs standard follow analogous theorems java details appear forthcoming technical report 
main result ic type sound captured properties 
generalized judgements mean expression typed state formed respect familiar way 
usual need add stupid typing rules formal proof :10.1.1.109.1141
theorem type soundness ic 





terminal 

terminal 
prove compilation fc ic type preserving fc expression environment type compilation resulting ic expression type 
theorem type preservation compilation 



related numerous languages proposed structured data 
reasons space focus semi structured data languages relational data cited 
essence data access number special purpose functional languages proposed processing xml values 
stands contrast approach aims extending existing widely object oriented programming language 
languages similar xj xtatic 
xj adds xml xpath class construct java uses logical xml classes represent xsds 
way xj allows compile time checking xml fragments impedance mismatch xml objects quite large deal mix data object xml world 
consequence example xpath queries restricted xml data 
xtatic extends separate category regular expression types 
subtyping structural 
gives lot flexibility conforms xml schema subtyping defined name restrictions extensions allow free mix objects xml 
xtatic uses pattern matching xml projections fits chosen type system lacks class queries 
contrast xj xtatic treat xml distinct separate class 
ingenuity lies uniform integration new stream choice struct types existing types generalization member access power dot 
fact generalized member access achieves benefits type systems try solve 
example long standing problem write query data comes sources similar modulo distribution rules 
type algebra regular expression types allows factorization scenario possible 
generalized member access hand handles problem need distribution rules type level 
popular approach deal xml object oriented language called data bindings 
data binding generates strongly typed object representation xml schema xsd 
java xsd exe net framework generate classes xsd 
impossible generate reasonable bindings rich type system xsds adequately mapped classes interfaces 
consequence resulting mappings weakly typed 
takes different simpler view xml considered serialization syntax rich type system 
tied particular xml data model 
design doesn support entirety full xml stack experience type system language extensions rich support realistic scenarios 
written large number applications including complete set xquery cases xsl stylesheets substantial application kloc manage tv listings 
considered problem manipulating relational semistructured data common object oriented languages 
observed existing methods apis provide poor support common application scenarios 
bierman meijer schulte proposed series elegant extensions provides typesafe class access querying forms data 
built full compiler implements design 
studied extensions formally 
represents industrial application formal methods process formalizing intuitions extremely useful managed trap number subtle design flaws process 
addition formalize fragment little subtle places 
example believe gives formal operational semantics iterators 
said useful simultaneously developing compiler 
small number occasions formalization high level failed capture lower level issues 
whilst fc small prove theorems hand liked formalized larger fragment language 
moment unrealistic highly developed machine assistance 
aspect project consider compilation 
common type system cts common language runtime clr whilst general lacks support structural types 
current compiler targets net means choice anonymous structs types simulated 
plan study extending clr structural types 
enable effective compilation languages offer structural types functional languages 
interesting study lightweight covariance added cts languages 
implementation status 
prototype compiler freely available 
covers entire safe fragment includes data access features described polyphonic concurrency primitives 
available research microsoft com 

albano ghelli orsini 
types databases galileo experience 
proceedings dbpl 

albano ghelli orsini 
fibonacci programming language object databases 
journal large data bases 

benton cardelli fournet 
modern concurrency abstractions toplas 

benzaken castagna frisch 
xml centric general purpose language 
proceedings icfp 

bierman parkinson pitts 
mj imperative core calculus java java effects 
technical report university cambridge 

bracha odersky stoutamire wadler 
making safe past adding genericity java 
proceedings oopsla 

breazu tannen coquand gunter scedrov 
inheritance implicit coercion 
information computation 

buneman pierce 
union types semistructured data 
proceedings 

chamberlin xquery cases 
www org tr xquery cases 
essence data access 
xquery 
www org tr xquery 

flatt krishnamurthi felleisen 
classes mixins 
proceedings popl 

gonthier 
reflexive chemical machine join calculus 
proceedings popl 

pierce 
regular object types 
proceedings ecoop 

harren shmueli burke sarkar 
xj integration xml processing java 
technical report ibm research 

hosoya pierce 
xduce typed xml processing language 
proceedings webdb 

hosoya vouillon pierce 
regular expression types xml 
proceedings icfp 

howard leblanc 
writing secure code 
microsoft press 

igarashi pierce wadler 
featherweight java minimal core calculus java gj 
acm toplas 

leijen meijer 
domain specific embedded compilers 
proceedings conference domain specific languages 

matthes ig schmidt 
persistent polymorphic programming tycoon 
technical report university glasgow 

meijer schulte bierman 
programming circles triangles rectangles 
proceedings xml 

meijer schulte bierman 
unifying tables objects documents 
proceedings dp cool 

pierce 
types programming languages 
mit press 

price 
java programming oracle 
reilly 

yu kennedy syme 
formalization generics net common language runtime 
proceedings popl 
