approach analyzing robustness windows nt software ghosh shah reliable software technologies circle sterling va phone fax email com www com today vast majority software executing defense systems untrusted commercial shelf software microsoft windows software 
vulnerabilities software may exploited gain unauthorized access security critical systems 
anumber studies analyzed robustness software run unix systems 
results studies pointed vulnerabilities software potentially exploited security intrusions 
describes new study aimed analyzing robustness software running windows nt systems 
relatively new operating system thoroughly analyzed security research community tools techniques applied unix system software 
goal research identify robustness gaps application software operating system software potentially exploited violations security 
contributions include grammar input generator taxonomy failure conditions experimental results robustness testing software running nt platform 
malicious computer users organized crime hostile nations information warfare united states growing threat concern upper government 
threat real urgently prepare information warfare attacks 
current security analysis tools attempt assess network sponsored defense advanced research projects agency darpa contract 
views contained document authors interpreted representing official policies expressed implied defense advanced research projects agency government 
level vulnerabilities site 
tools provide assessment organization vulnerability threats vulnerable software 
recognizing military systems commercial architectures problem untrusted software critical importance concerned information warfare 
application level vulnerabilities particular signi cance area information warfare 
information warfare campaigns frontal network rewall insidious campaigns wage war applications currently executing commanders desktops 
dramatic example concern department defense vulnerability systems illustrated memo air force issued 
memo stated push pull technology current versions netscape communicator microsoft internet explorer disabled air force network installations 
memo says currently technologies introduce security risks impact data throughput networks tolerated 

risk technology automatically schedule downloads untrusted executables sensitive systems 
provided web service provided internal users currently ine ective malicious executables downloading installing executing push pull technology 
software applications built vulnerabilities intentionally placed may allow misuse system resources contrary security policy 
software security vulnerabilities result factors program bugs malicious misuse 
technologies methodologies analyzing software order discover vulnerabilities potential avenues exploitation focused software running unix systems 
growing market share windows nt systems mission critical applications vulnerability windows nt software imperative assess 
addition source code analysis techniques unix systems feasible commercial shelf cots software running windows systems 
approach analyzing robustness windows nt software described 
approach principle applied software executing windows nt desktop including application software user utilities com components shared libraries system calls 
goal research determine gaps windows nt software exist classify nature robustness gaps determine may impact security windows nt systems 
architecture tool analyzes robustness windows nt software results analyzing gnu console applications run windows nt systems 
prior art independently de ned prior art assessing system software robustness fuzz ballista 
research projects studied robustness unix system software 
fuzz university wisconsin research project studied robustness unix system utilities 
ballista carnegie mellon university research project studied robustness di erent unix operating systems handling exceptional conditions 
methodologies results studies brie summarized establish prior art robustness testing 
fuzz rst noted research studies robustness software performed group university wisconsin 
group published study reliability unix utility programs 
random black box testing tool called fuzz group standard unix utilities crashed hung tested fuzz 
years group repeated extended study unix utilities basic techniques 
study spite advances software failure rate systems tested 
study noted di erences failure rate commercially developed software versus freely distributed software gnu linux 
di erent operating system platforms tested 
commercial free software distributions 
expected higher reliability commercial software development processes surprise results fuzz study 
failure rates system utilities commercial versions unix ranged failure rates gnu utilities 
results fuzz analysis quite revealing methodology employed fuzz simple 
fuzz merely subjects program random input streams 
criteria failure coarse 
program considered fail dumps core le hangs 
submitting program random input fuzz checks presence core le hung process 
core le detected crash entry recorded log le 
fashion group able study robustness unix utilities unexpected input 
causes crashes investigated fuzz researchers analyzing source code provided commercial vendors addition source code available freely distributed software 
errors programmers include pointer array errors dangerous input functions errors signed characters checking le reading input 
example incrementing pointer past array common error programmers 
dangerous input functions function result program crashes 
insidious manipulation dangerous input functions permit stack smashing attacks allow execution arbitrary program code embedded user input 
example programmer error assuming le character immediately follow newline character 
user input may necessarily follow format 
fuzz study investigate vulnerability programs bu er overrun attacks gaps robustness measured fuzz study may exploitable manner security violations 
mentioning addition unix utilities fuzz research studied robustness unix network services window applications window servers 
ballista ballista research project carnegie mellon university attempting cots software analyzing robustness gaps 
ballista automatically tests operating system software com valid invalid input 
determining gaps robustness exist goal ballista project automatically generate software wrappers lter dangerous inputs reaching vulnerable cots operating system os software 
robustness gap de ned failure os handle exceptional conditions 
realworld software bugs generate unexpected exception conditions goal ballista research assess robustness commercial oss handle exception conditions may generated application software 
fuzz research ballista focused assessing robustness operating system calls frequently desktop software 
empirical results ballista research read write open close fstat stat select called 
generating inputs application software system calls ballista research generated test harnesses system calls allowed generation valid invalid input 
results testing robustness gap severity scale formulated 
scale categorized failures categories crash restart abort silent hindering crash 
failure de ned error success return code abnormal terminations loss program control 
categorization failures ne grained fuzz research categorized failures crashes hangs 
ballista robustness testing methodology applied di erent commercial mach hp ux qnx os high availability times real time systems 
results testing commercial oss categorized crash severity scale comparison oss 
summary ballista research able demonstrate robustness gaps commercial oss mission critical systems employing black box testing 
robustness gaps turn software developers improve software 
hand failing improvement software software may attempt exploit vulnerabilities os 
research unix system software section serves basis robustness testing nt software system described 
goal assess robustness application software system utilities commonly nt operating system 
rst identifying potential robustness gaps pave road isolating potential vulnerabilities windows nt system 
analyzing robustness windows nt software objective tool described develop environment nt software tested robustness 
types software analyzed environment include console applications gui applications network servers dynamically linked libraries dlls system functions ole com dcom components 
random intelligent data design library environment riddle environment created testing robustness cots software windows nt systems 
riddle analysis cots software access source code assumed 
environment box testing techniques generate input application tested 
goal testing assess robustness software tested input generated characterized anomalous 
input generated riddle cases falls outside normal operational pro le software tested 
shows architecture implemented riddle assessing robustness windows nt software 
component tested input generation components riddle 
functions input generation library support testing random input intelligent input generation input grammar component generation malicious input 
addition random testing generating input intelligently input grammar component permits stress testing software functions black box perspective 
combining random input malicious input boundary value conditions legal grammar program component tested thoroughly simple random black box testing 
riddle oracle analysis 
riddle reveal component executed correctly 
riddle uses data generation library test specification generator cots component exit code assertions security assertions exception handling assertions input generation post processing riddle riddle architecture 
riddle environment supports robustness testing cots software components 
testing speci cation component decided grammar input generation creates syntactically correct anomalous input component test 
riddle environment controls execution component test send inputs capture resulting output component 
assertions post processing reveal robustness gaps software 
assertions incorrect exit codes unhandled exceptions hung processes insecure behavior les system crashes determine component robust anomalous input 
software component test fundamental system function nt operating system complex desktop application graphical user interface gui 
riddle provides set input generation functions drive components interface speci cation 
riddle currently supports testing console applications dos utilities network servers 
development going creating test harnesses os functions windows events com components 
grammar robustness testing ability generate intelligent input essential type stress testing necessary robustness assessment 
simplest form testing involves generating random streams data program tested done fuzz project 
random input generation test ability program handle non conforming input typically exercise program functionality 
testing applications syntactically correct data result thorough testing application testing purely random data 
example applications take command line arguments immediately terminate receive correct number parameters receive ag 
situation random testing test program initial check 
hand syntactically correct arguments input parameters result application tested 
order exercise program functionality test function response anomalous input riddle employs grammar input generation component 
creation grammar input generation component riddle test software syntactically correct data contains unexpected input 
anomalous input generated function calls data generation library 
shows architecture input generation component riddle 
rid dle takes grammar speci cation input produces random syntactically correct strings data employing functions data generation library 
data generation library intelligence 
testing application takes le name parameter data generation library produce number substitutions parameter 
case le name data generation library produce name existing le valid le name doesn exist invalid le name name le speci permissions set extremely long le name 
possibilities results di erent test case may exercise application tested new way 
grammar speci cation de ned parts 
rst part de nition grammar written format similar backus naur form bnf 
second part le contains de nitions tokens grammar 
riddle begins parsing grammar de nition checking syntactically correct see 
rid dle begins process generating data grammar read 
data rid dle generates relies terminal de nitions supplied token de nition le functions called data generation library 
program tested grammar definition created 
de nition declares format input syntactically correct exercising program test 
production rule consists left hand side right hand side separated colon 
left hand side single non terminal 
right hand side production identi es set non terminals tokens non terminal left hand side reduce 
single non terminal anumber choices reductions 
case reduction separated symbol 
tokens productions reduce single terminal step away terminals 
riddle case terminals reduce string 
terminal token reduces speci ed separately grammar de nition token de nition le 
simple grammar equivalent tothe regular expression followed single ab aab 
grammar de nition start start token de nitions riddle begins rst production rule 
possible syntactically correct sentences production 
example production de nes non terminal start starting production 
reducing non terminal start data generator choice picking production rule results token inthe example production rule results token followed bythe non terminal start 
data generation component uses repeatable random number generator choose production choices faces 
additionally riddle provides means weighting choice production rules 
probability speci ed adding weight production 
start production written start start grammar de nition indicates chance non terminal start reducing start times reducing words chance reduce start anda chance reduce grammar data generation component called produce syntactically correct data begins starting production 
chooses productions random account probabilities added nonterminals reduced tokens 
example grammar string tokens 
nal step process reduce tokens values 
example reduces string reduces string giving string 
data produced syntactically correct respect grammar create 
riddle allows user specify token reduces string literal function returns string literal 
previous example token reduced string literal 
user specify token reduce function grammar definition grammar parser data generation library data generation program token definition grammar input generation syntactically correct input grammar input generation 
component riddle architecture permits intelligent black box testing anomalous input 
data generation program uses grammar program generate syntactically correct albeit anomalous input program test 
core input generation functions called data generation library riddle 
call 
function return string place token choices le names mentioned earlier 
riddle able generate data serve anomalous program input 
functions reduction token data generation library 
library contain functions reduce numerous user speci ed strings testing purposes 
riddle designed test types applications take command line take streams data input 
class applications includes commonly operating system utilities 
examples unix utilities include cp ls man ps commands 
windows nt examples include mode tree subst 
applications rely streams data include web servers httpd ftp servers ftp clients lpr 
simpli ed example testing unix utility cp demonstrated 
grammar de nition accounts small subset command functionality useful illustrative purposes 
grammar de nition start sp low start sp low start sp file name file name token de nition low low file name sp grammar speci cation provide production input string consists number followed strings produced function 
input strings produced test cases 
test cases riddle produce cp cp existing file existing directory cp open file extremely long buffer characters test cases syntactically correct usages cp command combined anomalous data 
anomalous data supplied data generation library results undesirable application failure weakness robustness application detected 
experimental analysis riddle architectures shown implemented prototype tool experimentation 
riddle test gnu win software 
gnu software selected partially results fuzz analysis 
fuzz analysis gnu software fared best robustness testing compared commercial implementations similar utilities 
gnu tools written maintained world class programmers software serve baseline robust software 
study comprehensive 
research investigate software runs nt platform 
gnu software tested ls rm mkdir rmdir cat cp chmod 
riddle tests program known external interface 
di erent test run rid dle customized di erent number iterations argument lengths argument content 
grammar input generation riddle intelligently test program anomalous syntactically correct input data 
program tested input set generated 
input set varied independent variables length content order get variation tuple input set parameter set length content 
length variable set di erent values representing number bytes input 
content varied english alphabet characters printable ascii characters full ascii character set 
di erent programs chosen total parameter sets created 
set varied giving unique test runs length values content values parameter sets 
test runs created 
test run consisted iterations varied random content random generators 
total di erent test cases run software 
running experiments resulting data post processed indexing data various elds application content application length 
results post processing analyzed detect pattern error codes resulted testing 
shows taxonomy failures analyzing results robustness testing 
classi cation failures resulting experiment divided executions terminated 
processes terminate caught timeout riddle classi ed hung processes 
executions terminated classi ed terminated abnormally terminated normally 
sub divided applications reported error condition exit 
summary results stated earlier results experiments analyzed failure classi cation 
analysis consisted examining classifying exit codes errors resulting application execution 
purpose analysis nd signi cant patterns relating appearance invalid error conditions 
results obtained test runs ended applications exiting abnormally system error conditions applications hung timeout seconds applications exited silently errors 
condition applications accepted anomalous input crashing signaling error 
purely robustness standpoint condition may desirable permit continued operation particularly applications high availability essential 
lack error code may indicate latent error condition may manifest awed outputs trusted 
rest test runs ended applications exiting normally signaling error condition exit codes 
correlating di erent control variables analysis shows relationship length input abnormal termination applications 
analysis length generated input parameters increased probability application terminating abnormally increased 
ect reached plateau length 
signi cant di erence results kilobyte string kilobyte input 
hand failure classes non terminating hung processes terminating processes exited abnormally exited normally error condition exit code error condition taxonomy failures 
gure shows taxonomy failures developed analyzing outputs robustness testing software running windows nt platform 
processes terminate abnormally create system error conditions 
processes exit normally exit error code fail silently 
tested applications terminated abnormally parameter length bytes 
similar identical trend noticed regards content generated parameters 
applications terminated abnormally generated inputs consisted alphabet 
abnormal terminations divided equally parameters generated printable ascii full character set printable ascii strings getting slightly higher signi cant rate abnormal terminations 
describes environment approach testing windows nt software robustness unexpected anomalous input 
importance robustness testing established prior research unix systems fuzz ballista testing environments 
knowledge riddle rst research tool applied outside operating system vendor testing robustness nt systems 
grammar input generation component gives riddle unique capability generate intelligent syntactically correct input anomalous just 
capability gives ability black box test software manner stress test exercise functions fully random black box testing techniques 
objective research isto develop robustness testing environment windows nt systems identify potential robustness gaps software runs windows nt systems 
date riddle applied gnu win utilities 
taxonomy failures developed allowed classi cation failure conditions resulted robustness testing 
analysis showed nearly quarter test runs ended abnormal terminations system error conditions 
drawn result maintained software written software experts world handling anomalous inputs completely robustly 
signi cant result analysis showed applications fared worse input length increased kilobytes length 
research involve exploring robustness gaps determine potential exploited security intrusions 
addition analysis grammar input generation component analysis nt software including network servers windows graphical interfaces operating system functions dynamically linked libraries com components 
development riddle develop menu driven interface riddle enabling easy set experiments testing nt software 
editors 
air force thinks push pull technology risky 
risks digest january 
proceedings fourth usenix unix security symposium pages santa clara ca october 
gen john 
commander chief view rear area home front vulnerabilities support options 
proceedings fifth september 
presentation september 
farmer spa ord 
cops security checker system 
usenix conference proceedings pages anaheim ca summer 
farmer venema 
improving security site breaking 
available ftp ftp ftp win tue nl pub security admin guide cracking 
louis 
domestic law enforcement electronic civil defense 
proceedings th september 
presentation september 
klaus 
internet security scanner 
available ftp ftp ftp iss net pub iss 
koopman sung siewiorek 
comparing operating systems robustness benchmarks 
miller 
empirical study reliability unix utilities 
communications acm december 
miller koski lee murthy natarajan 
fuzz re examination utilities services 
technical report university wisconsin computer sciences dept november 
sa ord hess 
tamu security package ongoing response internet intruders academic environment 
