sound polymorphic type system dialect geoffrey smith school computer science florida international university miami fl usa email cs fiu edu dennis volpano department computer science naval postgraduate school monterey ca usa email volpano cs nps navy mil advanced polymorphic type systems come play important role world functional programming 
far type systems little impact widely imperative programming languages 
show ml style polymorphism integrated smoothly dialect call polymorphic pointer operations including address operator dereferencing operator pointer arithmetic 
give natural semantics polymorphic prove type soundness theorem gives rigorous useful characterization go wrong typed polymorphic program executed 
example typed polymorphic program may fail terminate may abort due dangling pointer error 
proving type soundness theorem requires notion attempted program execution show natural semantics gives rise quite naturally transition semantics call natural transition semantics models program execution terms transformations partial derivation trees 
technique generally useful proving type soundness theorems languages defined natural semantics 
attention developing sound polymorphic type systems languages imperative features 
notable large body appear science computer programming vol 
nos 

material supported national science foundation 
ccr ccr 
preprint submitted elsevier preprint march surrounding ml :10.1.1.37.5096:10.1.1.12.9871
efforts addresses polymorphic typing language combines variables arrays pointers class key ingredients traditional imperative languages 
result directly applied get polymorphic extensions widely languages 
presents provably sound type system polymorphic dialect called polymorphic pointer operations including address operator dereferencing operator pointer arithmetic 
type system allows operations restrictions programmers enjoy pointer flexibility type security polymorphism ml 
address straightforward type inference polymorphic programs need written type annotations 
type system demonstrates ml style polymorphism brought cleanly realm traditional imperative languages 
establish soundness type system respect natural semantics polymorphic harper syntactic approach establish type preservation property known subject reduction property 
prove type soundness theorem gives rigorous useful characterization go wrong typed polymorphic program executed 
precisely show execution welltyped polymorphic program succeeds fails terminate aborts due specific set errors attempt dereference dangling pointer 
proving type soundness theorem requires notion attempted program execution show natural semantics gives rise quite naturally transition semantics call natural transition semantics models program execution terms transformations partial derivation trees 
technique generally useful proving type soundness theorems languages defined natural semantics 
overview polymorphic section 
section formally defines syntax type system semantics 
sections prove soundness type system 
conclude discussion 
overview polymorphic polymorphic intended close core kernighan ritchie possible 
particular stack variables pointers arrays 
pointers dereferenced explicitly variables dereferenced implicitly 
furthermore pointers class values variables 
polymorphic pointer operations typed polymorphic program may suffer dangling illegal address errors focus eliminating pointer require weakening expressive power adding ml style polymorphism programmers write polymorphic functions naturally soundly ml parameterizing functions data sizes casting pointers type void 
example adopt concrete syntax polymorphic resembles syntax example polymorphic functions swap var reverse var swap reverse reverse reverse note polymorphic include type annotations declarations 
polymorphic differs treatment semicolons 
reverses elements function uses reverse swap array sections see alternative ml syntax somewhat flexible :10.1.1.50.5634

illustrates polymorphic manipulate sections arrays pointer arithmetic 
construct var binds new cell initialized value scope binding lifetime cell ends evaluated 
variable dereferenced implicitly 
achieved typing rule says type var type 
call swap reverse equivalently written swap array subscripting syntactic sugar equivalent 
arrays created construct arr binds pointer uninitialized array size value scope lifetime array ends evaluated 
type system polymorphic assigns types form var variables types form ptr pointers 
functions swap reverse polymorphic swap type ptr ptr reverse type ptr int unit type ptr int int unit 
type unit appears types reverse degenerate type containing value unit serves type constructs loops produce useful value 
notice pointer array types unified variable pointer types related symmetric typing rules var ptr ptr var 
ptr ref avoid confusion ml 
note dereferencing polymorphic differs dereferencing standard ml ref 
polymorphic types stratified levels 
ordinary data types type schemes type levels damas milner system new level called phrase types terminology due reynolds containing types variable types form var 
stratification enforces second class status variables example return type function data type write function returns variable 
contrast pointer types included data types making pointers class values 
achieving type soundness polymorphic effort spent trying develop sound polymorphic type systems imperative extensions core ml 
especially studied problem typing standard ml class 
problem easier language variables edinburgh lcf ml subtle problems arise 
key problem variable escape scope lambda abstraction letvar stk stk stk evaluates push function pushes values stack implemented list denotes empty list denotes cons 
case type system allow type variables occur type stk generalized list kept homogeneous 
different mechanisms proposed dealing problem context polymorphic adopt especially simple approach 
polymorphic class functions possible compute polymorphic value interesting way example write curried functions 
reason suffer essentially loss language expressiveness limiting polymorphism function declarations 
limiting polymorphism function declarations ensures soundness polymorphic generalizations pointers new problems type soundness 
careful formulating semantics type preservation property may hold 
example program allowed dereference pointer cell deallocated reallocated value obtained may wrong type 
reason natural semantics designed catch pointer errors 
formal description polymorphic syntax polymorphic grammar var arr 
xn en meta variable ranges identifiers literals integer literals unit 
expression 
xn function declaration declares function scope 
operator denotes pointer arithmetic 
full language overloaded denote integer addition 
polymorphic designed ensure function calls implemented stack static links displays 
property achieved restriction functions defined top level 
polymorphic allows function declarations impose restriction free identifiers function declared top level 
roughly speaking top level declaration scope extends way program 
example program var arr 


identifiers declared top level identifiers occur free subtle difference polymorphic formal parameters polymorphic function constants local variables 
function equivalent var polymorphic polymorphic directly express internal static variables 
example declaration written polymorphic static int var uniquely renamed 
type system polymorphic types polymorphic stratified follows 
int unit ptr var data types type schemes phrase types meta variable ranges type variables 
compared type system standard ml type variables polymorphic imperative 
rules type system figures 
deductive proof system assign types expressions 
typing judgments form meaning expression type assuming prescribes phrase types free identifiers precisely metavariable ranges identifier typings finite functions mapping identifiers phrase types phrase type assigned modified identifier typing assigns phrase type assigns phrase type identifier ident var id var var lit int integer literal unit unit val address val arith subscript assign compose var var ptr ptr var ptr int ptr ptr int var var letvar int int unit var var fig 

rules type system part int ptr arr fun xn close 
xn funcall en en fig 

rules type system part generalization data type relative written close type scheme set type variables occurring free 
note close rule fun allows functions polymorphic types 
say generic instance written exists substitution domain note rule ident allows identifier type generic instance allows polymorphic function called different types arguments 
extend definition type schemes saying 
say 
semantics polymorphic give natural semantics polymorphic need extend language syntax include semantic values new values runtime representations variables pointers functions xn 
metavariable ranges addresses described 
expression variable expression pointer 
intuitively variable pointer represented address tag bit tells implicitly dereferenced variables implicitly dereferenced pointers 
expression xn 
lambda abstraction represents function formal parameters xn body expect addresses just natural numbers allow semantics detect invalid pointer arithmetic 
address pair natural numbers segment number offset 
intuitively put variable array segment 
simple variable address element array addresses 
pointer arithmetic involves offset address dereferencing nonexistent dangling pointers detected segmentation fault 
identify set values consisting literals pointers lambda abstractions xn 
result successful evaluation value 
require notion memory 
memory finite function mapping addresses values special results dead uninit 
results indicate cell address deallocated uninitialized respectively 
write contents address dom write memory assigns value address value address note update dom extension dom 
define evaluation relation asserts evaluating closed expression memory results value new memory evaluation rules figures 
write denote capture avoiding substitution free occurrences note substitution rules apply 
allows avoid environments closures semantics result evaluating polymorphic expression just polymorphic expression 
possible flexible syntax language fact closed expressions evaluated evaluation closed expression 
rule apply specifies function arguments evaluated left right leaves evaluation order unspecified 
note operator need specify rule val contents dom value deref dom value ref offset integer update dom dead dom dead sequence branch nonzero integer fig 

evaluation rules part loop unit nonzero integer unit unit dom var dead positive integer dom uninit uninit arr dead dead xn 

xn apply xn 
en vn vn xn en fig 

evaluation rules part variable dies scope simply unreachable point storage reused 
note successful evaluation produces value memory lemma value memory 
proof 
induction structure derivation 
type preservation turn question soundness type system 
section framework harper prove type system satisfies type preservation property called subject reduction property 
property basically asserts types preserved evaluations expression type evaluates successfully produces value type 
need extend typing rules type semantic values variables pointers lambda abstractions introduced section 
typing variable pointer clearly requires information type value stored address information provided address typing 
expect address typing map addresses data types 
turns typed program produce value nonexistent pointer pointers typable type preservation hold 
example program arr typed evaluates nonexistent pointer 
leads define address typing finite function mapping segment numbers data types 
notational conventions address typings identifier typings 
modify typing judgments include address typing rules previously figures need extended include address typings add new typing rules 
furthermore includes updated version rule fun 
addition including address typing new rule replaces close close generalize type variables free 
prove type preservation theorem require number lemmas establish useful properties type system 
basic lemma shows type system types closed values reasonably shows closed value type form expect 
shows closed expression type var possible forms 
note denotes empty identifier typing 
var var ptr ptr intro fun xn xn 
xn close 
xn fig 

new rules typing semantic values lemma correct forms suppose 
int integer literal unit unit ptr form form xn var form form proof 
immediate inspection typing rules 
note part lemma assumes array subscripting syntactic sugar 
consequence part lemma form typing derivation rule val 
typing rules part remain syntax directed 
fact variables possible forms exploited evaluation rules specifically rules ref update 
particular able define semantics defining auxiliary relation evaluation value contexts contrast rules 
continue basic lemmas showing typings preserved substitutions extensions address identifier typings lemma type substitution substitution typing derivation higher 
proof 
induction structure derivation 
lemma suppose 
dom dom 
proof 
induction height derivation 
way adding extra assumption cause problems adding free type variables preventing close generalizing variables fun steps 
happens rename variables original derivation adding extra assumption 
type substitution lemma renaming height derivation increased 
lemma substitution 
proof 
assume bound identifiers renamed necessary ensure identifier occurring occurs bound ident var id derivation splice appropriate derivation may extra assumptions point lemma cause problems 
lemma intro occur free 
proof 
lemma simple corollary type substitution lemma 
suppose 
exists substitution 
type substitution lemma 
free 
return type preservation 
roughly speaking wish show closed program type address typing evaluates memory type 
allocate addresses occur show type show type address typing extends 
denote extends need assume consistent example int needs store integers segment precisely define dom dom ii value 
note give type uninitialized dead addresses type 
prove type preservation theorem theorem type preservation exists 
proof 
induction structure derivation just show cases remaining cases similar 

evaluation dom var dead typing letvar var var 
induction exists 
dom dom 

rule var var lemma var apply lemma get 
second induction exists 
remains show dead follows immediately go wrong simply removed deallocated address domain final memory marking dead 
current definition forced remove final address typing 
fail dangling pointers range allowed retain typing time allocated change typing extend address typing 

evaluation xn 

xn typing fun xn close 
xn 
rule intro xn 
lemma xn 
close lemma xn 

induction exists 
type soundness type preservation property ensure type system sensible 
example type system assigns type expression trivially satisfies type preservation property type system useless 
main limitation type preservation applies typed expressions evaluate successfully 
really able say happens attempt evaluate arbitrary typed expression 
approach strengthening type preservation gunter harper example augment natural semantics rules specifying certain expressions evaluate special value type 
example attempt dereference value pointer evaluate 
showing type preservation holds augmented evaluation rules get typed expression evaluate 
errors lead occur evaluation typed expression 
drawback approach need augment natural semantics 
seriously approach give information 
tells certain errors arise evaluation typed expression leaves open possibility errors neglected check augmented natural semantics 
approach different form semantics natural semantics 
approach advocated wright felleisen small step structured operational semantics prove type soundness number extensions ml 
find natural semantics natural appealing small step structured operational semantics particularly languages variables bounded lifetimes 
example proposed small step semantics polymorphic quite subtle mechanisms employed deallocate cells correct time 
gunter remy propose alternative natural semantics call partial proof semantics :10.1.1.56.7506
propose different 
argue show type soundness theorem language polymorphic defined natural semantics 
trouble natural semantics defines complete program executions represented derivation trees 
type soundness theorem need notion attempted execution program may course fail various ways 
argue natural semantics gives rise natural way transition semantics call natural transition semantics provides needed notion attempted program execution 
basic idea program execution sequence partial derivation trees may may eventually reach complete derivation tree 
partial derivation tree nodes may labeled pending judgments represent expressions need evaluated program see slightly different formulation natural transition semantics natural transition semantics applied problem computer security 
execution 
pending judgment form 
contrast refer ordinary judgments complete judgments 
define partial derivation trees precisely need comments evaluation rules natural semantics 
note natural semantics rules rule schemas metavariables instantiated rule 
second note hypotheses rule evaluation judgments boolean conditions condition dom rule contents 
boolean conditions regarded complete judgements 
note hypotheses evaluation judgment includes implicit boolean condition 
example hypothesis rule deref hypothesis really abbreviation hypotheses form assume henceforth forms derivation trees 
want partial derivation trees limited trees arise systematic attempt build complete derivation tree constrains form tree 
precisely definition tree nodes labeled partial complete judgments partial derivation tree satisfies conditions node labeled complete judgment subtree rooted node complete derivation tree 
ii node labeled pending judgment 
node children instance evaluation rule form 
jn labels children jk respectively possibly exception jk ek vk kth child may alternatively labeled pending judgment ek 
may readily see partial derivation tree pending judgment level rightmost node level parent pending judgment 
define transitions rules natural semantics describe partial derivation tree transformed 
suppose instance evaluation rule form 
jn hypothesis ji evaluation judgment ei vi boolean condition bi 
transformations resulting rule defined follows suppose partial derivation tree contains node labeled pending judgment 
children labeled complete judgments jk suppose jk form ek vk transform adding child labeled pending judgment ek 
jk boolean condition bk true transform adding child labeled bk 
suppose transform replacing label complete judgement 
write partial derivation tree transformed step usual denotes reflexive transitive closure 
case polymorphic transformation relation defined deterministic 
particular evaluation rules ambiguity need choose rule applied guard evaluated 
nondeterminism transformation relation rules 
second hypothesis rules dom metavariable bound deterministically 
course nondeterministic choice address newly allocated variable array importance 
key property transforms partial derivation tree partial derivation tree lemma partial derivation tree partial derivation tree 
proof 
straightforward 
transformation rules give desired notion program execution execute memory start tree consists single root node labeled pending judgment apply transformations generating sequence partial derivation trees precisely define execution program memory possibly infinite sequence partial derivation trees 
node tree labeled ti ti ti tree sequence sequence tree tn tree tn note possible outcomes execution sequence ends complete derivation tree 
successful execution 
ii sequence infinite 
nonterminating execution 
iii sequence ends tree tn contains pending judgment successor 
aborted execution 
type soundness theorem show typed programs aborted execution arise specific set errors 
argue notion execution correct 
write denote node tree labeled soundness notion execution lemma 
lemma 
contains pending judgments complete derivation tree judgment form proof 
lemma partial derivation tree 
contains pending judgments complete derivation tree judgment labels root 
judgment form initial tree root labeled 
seen inspecting definition transformation changes label node changes label form 
label form show notion execution complete lemma complete derivation tree 
proof 
induction structure derivation lemma shows successful execution 
show execution successful 
arbitrary natural semantics need 
example language nondeterministic choice operator executions may successful may nonterminating may abort 
polymorphic essentially deterministic stronger result hold 
notion program execution turn polymorphic consider say executions typed polymorphic programs 
definition pending judgment 
typed iff exist address typing type 
partial derivation tree typed iff pending judgment typed 
roughly speaking combination type preservation theorem correct forms lemma lemma allows characterize forms expressions encountered execution typed program 
allows characterize go wrong execution 
key type soundness result theorem progress typed partial derivation tree contains pending judgment 
typed 
furthermore exists contains errors 
read write dead address 

read write address invalid offset 

read uninitialized address 

declaration array size 
proof 
uppermost node labeled pending judgment say 
transformation occur node 
just consider possible forms expression just give case cases quite similar 
typed pending judgment 
typed exist 
typing assign var correct forms lemma form form simplifying notation bit pending judgment labels form 

consider cases turn 
label typing assign var var form 
children rule update transform adding new child labeled pending judgment 
furthermore possible transformation new pending judgment typed 
exactly child condition ii definition partial derivation tree fact uppermost node labeled pending judgment child labeled judgment form case may transform adding new child labeled boolean condition dom dead provided condition true 
type preservation theorem exists 
dom 
dom contains error write address invalid offset dead contains error write dead address 
transform contains error 
children labeled hypotheses rule update transform replacing label 
label typing val followed assign ptr var children applicable transformation rule update add new child labeled pending judgment 
ptr new pending judgment typed 
exactly child condition ii definition partial derivation tree fact uppermost node labeled pending judgment child labeled judgment form 
type preservation theorem exists ptr 
correct form lemma form 
may transform adding new child labeled boolean condition form guaranteed true 
ptr 
children transform adding new child labeled pending judgment 
lemma pending judgment typed 
children third child labeled judgment form 
case may transform adding new child labeled boolean condition dom dead provided condition true 
type preservation theorem exists 
dom 
dom contains error write address invalid offset dead contains error write dead address 
transform contains error 
children labeled hypotheses rule update transform replacing label 
progress theorem gives type soundness result simple corollary corollary type soundness execution succeeds ii terminate iii aborts due errors 
proof 
execution 
typed assumption 
progress theorem ti typed furthermore ti contains pending judgment successor contains errors 
execution finite ends complete derivation tree tree containing errors 
discussion desirable properties programming language implementation guarantee safe execution programs 
means program execution faithful language semantics program erroneous 
course notoriously unsafe language typical implementations pointer errors cause running program overwrite runtime stack resulting arbitrarily bizarre behavior 
results segmentation fault core dumped message may occur far original error worse times program appears run successfully results entirely invalid 
techniques provide safe execution language designed errors impossible 
example language define default initializations variables preventing uninitialized variable errors 
ii language perform compile time checks type checks guard errors 
iii runtime checks catch errors 
case polymorphic type soundness theorem corollary specifies exactly runtime checks needed guarantee safe execution 
trouble error declaring array size typical implementations checks 
expect implementations polymorphic 
difficult check error reading writing address invalid offset pointer maintain runtime range permissible offsets 
error reading uninitialized address checked fairly efficiently initializing array cells special uninit value 
leaves error reading writing dead address 
course difficult check efficiently 
natural semantics check possible reusing cells 
reach point trade offs 
directly implement natural semantics getting safe inefficient debugging implementation polymorphic follow usual practice build stack implementation leaves errors unchecked achieving efficiency expense safety 
case type soundness theorem tells kinds errors need look debugging programs 
final alternative change semantics polymorphic giving cells unbounded lifetimes necessitating garbage collection done design java 
advanced polymorphic type systems come play central role world functional programming far little impact traditional imperative programming 
assert ml style polymorphic type system applied fruitfully real world language bringing expressiveness polymorphism rigorous characterization behavior typed programs 
polymorphic includes development efficient implementations polymorphism extension language include features especially structures 
precisely allocating variables arrays stack polymorphic language unifies arrays pointers causes type preservation property fail 
ken arnold james gosling 
java programming language 
addison wesley 
luis damas robin milner 
principal type schemes functional programs 
proceedings th acm symposium principles programming languages pages new york 
acm 
pascal fradet ronan daniel le tayer 
static detection pointer errors axiomatisation checking algorithm 
proceedings th european symposium programming volume lecture notes computer science pages berlin april 
springer verlag 
michael gordon robin milner christopher wadsworth 
edinburgh lcf volume lecture notes computer science 
springer verlag berlin 
john greiner 
standard ml weak polymorphism sound 
technical report cmu cs school computer science carnegie mellon univ pittsburgh pa may 
carl gunter 
semantics programming languages structures techniques 
mit press 
carl gunter didier :10.1.1.56.7506
proof theoretic assessment runtime type errors 
technical report tm bell laboratories 
robert harper 
simplified account polymorphic 
information processing letters august 
robert harper 
note simplified account polymorphic 
information processing letters january 
robert harper greg morrisett 
compiling polymorphism intensional type analysis 
proceedings nd acm symposium principles programming languages pages new york 
acm 
john mitchell ramesh viswanathan 
standard ml nj weak polymorphism imperative constructs 
proceedings th ieee symposium logic computer science pages new york 
ieee 
brian kernighan dennis ritchie 
programming language 
prentice hall 
xavier leroy 
unboxed objects polymorphic typing 
proceedings th acm symposium principles programming languages pages new york 
acm 
xavier leroy pierre weis 
polymorphic type inference assignment 
proceedings th acm symposium principles programming languages pages new york 
acm 
robin milner mads tofte robert harper 
definition standard ml 
mit press 

type inference algorithm transition semantics polymorphic master thesis department computer science naval postgraduate school monterey ca september 
john reynolds 
essence algol 
de bakker van vliet editors algorithmic languages pages 
ifip north holland publishing 
zhong shao andrew appel 
typed compiler standard ml 
proceedings acm sigplan conference programming language design implementation pages 
geoffrey smith dennis volpano 
polymorphic typing variables 
acm transactions programming languages systems may 
geoffrey smith dennis volpano :10.1.1.50.5634
ml style polymorphic type system proceedings th european symposium programming volume lecture notes computer science pages berlin april 
springer verlag 
mads tofte 
type inference polymorphic 
information computation 
dennis volpano geoffrey smith 
type soundness proof variables lcf ml 
information processing letters 
dennis volpano geoffrey smith 
eliminating covert flows minimum typings 
proc 
th ieee computer security foundations workshop pages 
ieee june 
andrew wright 
simple imperative polymorphism 
lisp symbolic computation december 
andrew wright matthias felleisen 
syntactic approach type soundness 
information computation november 

