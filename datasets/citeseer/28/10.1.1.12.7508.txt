managing data quality cooperative information systems monica roberto catarci carlo batini universit di roma la sapienza dis catarci dis uniroma delle universit di milano disco batini disco 
current approaches development cooperative information systems services offered cooperating organizations opportunity building coordinators brokers top services 
quality data exchanged provided different services approaches data low quality spread cooperative system 
time improvement comparing data correcting disseminating high quality data 
service framework managing data quality cooperative information systems 
xml model data quality data proposed design broker selects best available data different services 
eds coopis lncs pp 

springer verlag berlin heidelberg managing data quality cooperative information systems hand cis characterized high data replication different copies data stored different organizations 
data quality perspective great opportunity improvement actions carried basis comparisons different copies order select appropriate reconcile available copies producing new improved copy notified involved organizations 
cis designed service approach consider cooperation different organizations obtained sharing integrating services networks services commonly referred services web services exported different organizations defined operations allow users applications access perform tasks offered back business applications :10.1.1.21.7413:10.1.1.21.7413
propose service framework architecture managing data quality cis architecture aims avoiding dissemination low qualified data cis providing support data quality diffusion improvement 
best knowledge novel contribution information quality area aims integrating specific context cis modeling architectural issues 
enforce vision presenting general architecture focuses specific elements problem consider primary importance 
specifically face problem lack quality certification proposing model organization export data associated quality information 
section distributed design data quality broker service described 
section concludes drawing 
related data quality traditionally investigated context single information systems methodological framework data quality cooperative systems proposed consisting phases definition measurement exchange analysis improvement 
cooperative scenarios main data quality issues regard assessment quality data owned organization ii methods techniques exchanging quality information iii improvement quality cooperating organization iv heterogeneity due presence different organizations general different data semantics 
assessment heterogeneity iv issues results achieved traditional systems borrowed :10.1.1.31.109
methods techniques exchanging quality information ii partially addressed literature 
considering issue exchanging data associated quality model export data quality data needs defined 
conceptual models associate quality information data proposed extension entity relationship model data warehouse conceptual model quality features described description logic formalism 
models thought specific purpose introduce quality elements relational database design introduce quality elements data warehouse design 
exported data quality data accessed organizations means application service operations cooperating organization available 
model exporting data quality data referred data data quality model 
section introduce data quality dimensions section describe model respect data features section quality features section 
data quality dimensions data quality dimensions properties data correctness degree updating 
data quality dimensions concern data values deal aspects concerning quality logical schema data format :10.1.1.21.7413
section propose outline data quality dimensions cis stemming real requirements cis scenarios experienced 
reader refer complete definitions examples possible evaluation methods related 
general concept schema element corresponding instance entity entity relationship schema class unified modeling language diagram 
define accuracy 
consistency implies values conflict 
internal consistency means values compared order evaluate consistency specific instance schema element 
semantic rule constraint hold values attributes schema element depending application domain modeled schema element 
internal consistency defined degree values attributes instance schema element satisfy specific set semantic rules defined schema element 
data model model inspired data model underlying xml ql :10.1.1.33.2943
database view xml adopted xml document set data items document type definition dtd schema data items consisting data quality classes 
particular xml document contains application data form data graph related data quality values form quality graphs quality dimension introduced section 
specifically nodes data graph linked corresponding ones quality graphs links shown 
operations offered application services return xml documents outputs 
issues scope 
just point comparison take account trust values provided rating service order avoid erroneous evaluations organizations low quality data propagate 
protocols service implemented set identical software components deployed inside different organization executed independently see 
locally implements primitives defined previous section 
access reliable multicast primitive denoted rm send message specific delivery guarantees :10.1.1.33.2943
informally reliable multicast ensures non crashed component eventually delivers set messages sent components 
primitive implemented asynchronous distributed system simple deterministic algorithms :10.1.1.33.2943
describe steps protocol executed components read qr 
sake simplicity assume operation implemented organization 
protocols service implemented set identical software components deployed inside different organization executed independently see 
locally implements primitives defined previous section 
access reliable multicast primitive denoted rm send message specific delivery guarantees :10.1.1.33.2943
informally reliable multicast ensures non crashed component eventually delivers set messages sent components 
primitive implemented asynchronous distributed system simple deterministic algorithms :10.1.1.33.2943
describe steps protocol executed components read qr 
sake simplicity assume operation implemented organization 
real world cases equivalent operations returning equivalent data discovered quality knowledge repository 
protocol works follows example run protocol depicted rm reply compare 
