joint optimization cost coverage query plans data integration existing approaches optimizing queries data integration decoupled strategies attempting optimize coverage cost separate phases 
sources tend variety access limitations phased optimization cost coverage unfortunately lead expensive planning highly inefficient plans 
techniques joint optimization cost coverage query plans 
algorithms search space parallel query plans support multiple sources subgoal conjunct 
refinement partial plans takes account potential parallelism source calls binding sources included plan 
start introducing motivating query plan representation 
column lists attributes bound call source 
simplify matters assume sources independent coverage probability tuple source independent probability tuple source 
consider example query title retail price review book isbn title author price isbn retail price review isbn reviewer review title data warehousing retail price 
briefly discuss limitations existing approaches optimizing query motivate approach 
bucket algorithm lro bucket algorithm levy lro generate buckets containing sources relevant subgoals query bucket book bucket price bucket review buckets generated algorithm enumerate possible plans corresponding selection source bucket :10.1.1.38.7636
combination correctness plan checked containment checks executable orderings plan computed 
note plans include source going lead executable orderings way binding reviewer attribute input source query 
consequently set plans output bucket algorithms superscripts specify attributes bound source call 
call plans linear plans sense contain source relations mentioned query 
combination correctness plan checked containment checks executable orderings plan computed 
note plans include source going lead executable orderings way binding reviewer attribute input source query 
consequently set plans output bucket algorithms superscripts specify attributes bound source call 
call plans linear plans sense contain source relations mentioned query 
feasible logical plans enumerated approach lro consists finding feasible execution orders logical plans executing plans :10.1.1.38.7636
approach guaranteed give maximal coverage prohibitively expensive terms planning execution cost 
particular query subgoals scenario sources bucket subgoal worst case complexity approach terms planning time distinct linear plans cost finding feasible order approach lro executing top plans dl tried prohibitive execution cost enumeration strategy lro ranking enumerated plans order coverage broadly quality executing top plans arbitrarily chosen idea identify specific plans high coverage execute :10.1.1.38.7636
example procedures rank best plan sources highest coverage sources buckets rank second best plan contains sources highest coverages executing best plan problem type approach plans ranked highest terms coverage may necessarily provide best tradeoffs terms execution cost 
example suppose source stores tuples attribute value retail price plan query accessible sources times binding pattern restriction 
consequently set plans output bucket algorithms superscripts specify attributes bound source call 
call plans linear plans sense contain source relations mentioned query 
feasible logical plans enumerated approach lro consists finding feasible execution orders logical plans executing plans :10.1.1.38.7636
approach guaranteed give maximal coverage prohibitively expensive terms planning execution cost 
particular query subgoals scenario sources bucket subgoal worst case complexity approach terms planning time distinct linear plans cost finding feasible order approach lro executing top plans dl tried prohibitive execution cost enumeration strategy lro ranking enumerated plans order coverage broadly quality executing top plans arbitrarily chosen idea identify specific plans high coverage execute :10.1.1.38.7636
example procedures rank best plan sources highest coverage sources buckets rank second best plan contains sources highest coverages executing best plan problem type approach plans ranked highest terms coverage may necessarily provide best tradeoffs terms execution cost 
example suppose source stores tuples attribute value retail price plan query accessible sources times binding pattern restriction 
total cost plan contrast lower ranked plan may cost significantly offering coverage competitive offered 
example assuming source maintains independent isbn values title data warehousing cost may 
simplifying assumption sources independent probability tuple source independent probability tuple assumptions line types statistics previous lro 
techniques learning response time statistics probing discussed learning coverage statistics developed 
estimating cost parallel plan estimate cost parallel plan purely terms execution time 
assume execution time dominated tuple transfer costs ignore local processing costs mediator assumption relaxed affecting advantages approach 
execution costs idea binding relations introduced linear query plans subgoal query source relation :10.1.1.1.7398
generalization idea parallel plans 
computed terms response times offered various sources parallel plan 
response time source proportional number times source called expected number tuples transferred call 
sources binding pattern limitations set feasible source calls depend set call variables bound number calls number tuples transferred depend value binding relation preceding source call 
develop dynamic programming algorithm section greedy algorithm section 
subplan generation algorithm shown algorithm computes best subplan subgoal statistics sources export binding relation current partial plan computes utility sources bucket sorts sources utility value 
algorithm adds sources sorted bucket subplan utility current subplan utility previous subplan 
models discussed section calculate utility cost coverage subplans 
algorithm greedy flavor subplans generated algorithm shown optimal sources conditionally independent presence object source change probability object belongs source :10.1.1.106.8424
assumption ranking adapt idea combining cost quality multimedia database query plans cost increases additively quality precision recall decreases number predicates increases 
actual implementation scale coverage appropriately handle discontinuity normalization contribution coverage component range cost component 
parallel plan significantly better utility lower cost higher coverage best single linear plan see example section may provide maximal possible utility 
general achieve maximal possible utility may need generate execute union parallel plans 
running time algorithm dominated line executed times time loop computing utility subplan source independence assumption 
algorithm complexity 
dynamic programming approach parallel plan generation introduce dynamic programming style algorithm called parplan dp extends traditional system style optimization algorithm find best parallel plan query 
basic idea generate various permutations subgoals compute best parallel plan terms utility permutation select best 
algorithm related traditional system style algorithm extension handle binding pattern restrictions multiple overlapping sources important differences :10.1.1.101.459
parplan dp source selection subgoal ordering utility model parallel plans traditional system just need pick single best subgoal order cost model :10.1.1.101.459

parplan dp estimate attribute sizes binding relations partial parallel plans multiple sources single subgoal 
take overlap sources subplan account estimate sizes attributes binding relation 
algorithm complexity 
dynamic programming approach parallel plan generation introduce dynamic programming style algorithm called parplan dp extends traditional system style optimization algorithm find best parallel plan query 
basic idea generate various permutations subgoals compute best parallel plan terms utility permutation select best 
algorithm related traditional system style algorithm extension handle binding pattern restrictions multiple overlapping sources important differences :10.1.1.101.459
parplan dp source selection subgoal ordering utility model parallel plans traditional system just need pick single best subgoal order cost model :10.1.1.101.459

parplan dp estimate attribute sizes binding relations partial parallel plans multiple sources single subgoal 
take overlap sources subplan account estimate sizes attributes binding relation 

complexity worst case complexity query planning parplan dp number subgoals query number sources exporting subgoal 
factor comes complexity traditional dynamic programming factor comes complexity 
note way searching space parallel plans increase complexity query planning algorithm significantly 
fact complexity compares favorably complexity linear plan enumeration approach described lro number linear plans enumerated complexity greedy algorithm find feasible execution order linear plan 
despite fact approach lro computing feasible optimal execution orders complexity computing optimal orders :10.1.1.38.7636
greedy approach noted parplan dp better complexity linear plan enumeration approaches 
exponential number query subgoals 
order get efficient algorithm need trade optimality guarantees performance 
introduce greedy algorithm parplan greedy see algorithm gets plan quickly expense optimality 
observe expected coverage cost increase try get higher coverage 
see particular query hand large area cost increases slowly coverage increases rapidly 
intriguing possibility offered plots done representative queries domain results suggest best initial weightings give high coverage plans relatively low cost user 

related bucket algorithm lro source inversion algorithm provide early approaches generating candidate query plans data integration :10.1.1.38.7636
mentioned section disadvantages generating possible linear plans executing lead alternate approaches 
percentage coverage cost weights comparing coverage cost plans parplan dp different weights utility function queries subgoals 
axis varies weights utility function axis shows cost coverage percentage cost coverage offered parplan dp weight 
project dl extends query planning algorithm lro uses coverage information decide order potential plans executed 
mentioned section disadvantages generating possible linear plans executing lead alternate approaches 
percentage coverage cost weights comparing coverage cost plans parplan dp different weights utility function queries subgoals 
axis varies weights utility function axis shows cost coverage percentage cost coverage offered parplan dp weight 
project dl extends query planning algorithm lro uses coverage information decide order potential plans executed 
coverage computed source overlap models :10.1.1.106.8424
extension lro minicon algorithm pl 
minicon improves efficiency bucket algorithm assumes decoupled strategy concentrating enumerating linear plans assessing quality executing rank ordered fashion 
naumann offers variation bucket algorithm lro set linear plans ranked set quality criteria branch bound approach develop top best linear plans 
notion quality include cost coverage cost model quite restrictive making approach phased essence 
minicon improves efficiency bucket algorithm assumes decoupled strategy concentrating enumerating linear plans assessing quality executing rank ordered fashion 
naumann offers variation bucket algorithm lro set linear plans ranked set quality criteria branch bound approach develop top best linear plans 
notion quality include cost coverage cost model quite restrictive making approach phased essence 
example claim change join execution order plan effect iq quality score seen join orders significant impact quality utility plan 
consider cost query optimization problem presence binding patterns consider source selection issue :10.1.1.1.7398:10.1.1.101.459
parallel plans joins unions quite standard distributed parallel database systems lpr ov 
parallel plans scenarios pose special challenges uncontrolled overlap data sources source access binding restrictions need produce plans variety cost coverage requirements 

started motivating need joint optimization cost coverage query plans data integration 
ijcai workshop intelligent information integration stockholm sweden 
oliver duschka michael genesereth alon levy 
recursive query plans data integration 
journal logic programming volume pages 
florescu koller levy :10.1.1.106.8424
probabilistic information data integration 
proceeding international conference large data bases vldb 
florescu levy manolescu suciu :10.1.1.101.459
query optimization presence limited access patterns 
journal logic programming volume pages 
florescu koller levy :10.1.1.106.8424
probabilistic information data integration 
proceeding international conference large data bases vldb 
florescu levy manolescu suciu :10.1.1.101.459
query optimization presence limited access patterns 
proc 
sigmod 
jean robert louiqa raschid vladimir tao learning response time query feedback application query optimization 
large data bases vldb 
selinger astrahan chamberlin lorie price 
access path selection relational database management system 
sigmod 
yerneni li ullman garcia molina :10.1.1.1.7398
optimizing large join queries mediation systems 
proc 
international conference database theory 
