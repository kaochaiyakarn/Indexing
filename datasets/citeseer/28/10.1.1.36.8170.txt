distributed programming logic tuple spaces paolo ciancarini technical report ublcs april laboratory computer science university bologna di bologna italy university bologna laboratory computer science research technical reports available anonymous ftp area ftp cs unibo pub tr ublcs compressed postscript format 
abstracts available host directory pub tr ublcs abstracts plain text format 
local authors reached mail address name cs unibo 
ublcs technical report series mapping parallel computations distributed systems january 
parallel scientific computing distributed systems approach february 
run time support dynamic load balancing debugging september 
problems increases complexity designing distributed programming language different paradigms interprocess communication available remote procedure calls asynchronous message passing csp synchronous 
especially language designed includes sequential component existing programming language easy choose communication mechanisms fit existing mechanisms 
point view language designer interesting paradigms associative communication shared dataspace 
activity language design distributed systems idea shared dataspace useful allows neatly separate issues concerning control coordination activities issues pertinent controlling single activity 
linda example kind languages fact linda coordination layer parallelize number sequential programming languages notably modula scheme :10.1.1.113.9679
language interesting theoretical point view usually resulting combinations offer new programming idioms implementation point view linda tuple space offers opportunities optimizations practical point view resulting language spectrum applications sequential language 
study combination linda logic programming language 
interested combination reasons 
associative communications exemplified linda fit logic paradigm unification 
claimed systems programmed aiming implementing software societies members cooperate perform distributed tasks fulfill global goals 
central problems designing complex organizations achieving cooperation set independent agents 
design implementation coordination protocols involving independent agents addressed activities coordinated 
fact design software societies ublcs linda run time system esp supported specific tools new word groupware introduced designate kind software 
enforcing coordination essential designing open systems :10.1.1.18.3624
groupware systems important instances open systems multi user software development environments office information systems distributed operating systems 
include number heterogeneous agents users automatic tools processors share number heterogeneous services file systems databases schedulers compete distributed resources cpu time mass storage space shared data 
cases activities agents modify system adding new agents services consuming non replaceable resources 
applications coordinate collections separate activities referring asynchronously central control 
language esp useful tool designing solutions class problems open coordination programs 
programs interact external environment react eventually modifying 
instance case program implementing programming environment incrementally modified users 
fact esp implement multiuser programming environment set users establish number cooperation protocols order coordinate 
generally exploring suitability esp open system design especially groupware design programs ublcs support interaction users tools necessary distributed ai office automation software engineering applications :10.1.1.18.3624
acknowledgments 
partially supported 
pf sistemi italian ministry university scientific research 
part done author visiting scientist dept computer science yale university 
theoretical computer science 

logic programming language model 
new generation computing 
hewitt :10.1.1.18.3624
offices open systems 
acm transactions office information systems july 
jagannathan 
generalized framework class tuple space systems 
