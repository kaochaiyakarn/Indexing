distance browsing spatial databases samet computer science department center automation research institute advanced computer studies university maryland college park maryland cs umd edu cs umd edu different techniques browsing collection spatial objects stored tree spatial data structure basis distances arbitrary spatial query object compared 
conventional approach nearest neighbor algorithm known prior invocation algorithm 
needed nearest neighbor algorithm needs neighbors possibly performing redundant computations 
second approach incremental sense having obtained nearest neighbors st neighbor obtained having calculate nearest neighbors scratch 
incremental approach finds processing complex queries conditions involves spatial proximity nearest city chicago population greater case query engine pipelined strategy 
general incremental nearest neighbor algorithm applicable large class hierarchical spatial data structures 
needed nearest neighbor algorithm needs neighbors possibly performing redundant computations 
second approach incremental sense having obtained nearest neighbors st neighbor obtained having calculate nearest neighbors scratch 
incremental approach finds processing complex queries conditions involves spatial proximity nearest city chicago population greater case query engine pipelined strategy 
general incremental nearest neighbor algorithm applicable large class hierarchical spatial data structures 
algorithm adapted tree performance compared existing nearest neighbor algorithm trees :10.1.1.133.2288
experiments show incremental nearest neighbor algorithm significantly outperforms nearest neighbor algorithm distance browsing queries spatial database uses tree spatial index 
incremental nearest neighbor algorithm usually outperforms nearest neighbor algorithm applied nearest neighbor problem tree improvement nearly large distance browsing queries 
fact prove informally step execution incremental nearest neighbor algorithm optimal respect spatial data structure employed 
furthermore simplifying assumptions prove dimensions distance computations leaf nodes accesses algorithm finding neighbors 
nearest neighbor algorithm may preferable provided efficient incremental algorithm large values sense choose solution know advance neighbors needed value value estimated selectivity secondary condition 
issues demonstrate need query engine estimates selectivity factors involving numbers values expected satisfy various parts query computational costs applicable algorithms 
compare incremental nearest neighbor approaches browsing collection spatial objects stored tree spatial data structure basis distances arbitrary spatial query object 
process general incremental nearest neighbor algorithm applicable large class hierarchical spatial data structures show adapt algorithm tree 
performance compared existing nearest neighbor algorithm trees :10.1.1.133.2288
addition demonstrate nearest neighbor algorithm transformed special case tree adaptation general incremental nearest neighbor algorithm :10.1.1.133.2288
transformation process reveals tree incremental nearest neighbor algorithm achieves pruning tree nearest neighbor algorithm 
tree adaptation leads considerably efficient conceptually different algorithm 
presence object bounding rectangles tree enables pruning devices reduce disk accessing spatial descriptions objects stored external tree 
issues demonstrate need query engine estimates selectivity factors involving numbers values expected satisfy various parts query computational costs applicable algorithms 
compare incremental nearest neighbor approaches browsing collection spatial objects stored tree spatial data structure basis distances arbitrary spatial query object 
process general incremental nearest neighbor algorithm applicable large class hierarchical spatial data structures show adapt algorithm tree 
performance compared existing nearest neighbor algorithm trees :10.1.1.133.2288
addition demonstrate nearest neighbor algorithm transformed special case tree adaptation general incremental nearest neighbor algorithm :10.1.1.133.2288
transformation process reveals tree incremental nearest neighbor algorithm achieves pruning tree nearest neighbor algorithm 
tree adaptation leads considerably efficient conceptually different algorithm 
presence object bounding rectangles tree enables pruning devices reduce disk accessing spatial descriptions objects stored external tree 
experiments show incremental nearest neighbor algorithm significantly outperforms nearest neighbor algorithm distance browsing queries spatial database uses tree spatial index 
section discusses issues arise high dimensional spaces drawn section 
related numerous algorithms exist answering nearest neighbor nearest neighbor queries 
motivated importance queries fields including geographical information systems gis pattern recog acm transactions database systems june pp 
nition document retrieval learning theory 
algorithms coming field computational geometry points dimensional vector space allow arbitrary spatial objects limited point query object :10.1.1.133.2288
applications rough answer suffices algorithms developed return approximate result saving time computing :10.1.1.15.3125
algorithms require specialized search structures employ commonly spatial data structures 
example algorithms exist tree quadtree related structures rtree lsd tree 
addition algorithms applied spatial data structures 
related numerous algorithms exist answering nearest neighbor nearest neighbor queries 
motivated importance queries fields including geographical information systems gis pattern recog acm transactions database systems june pp 
nition document retrieval learning theory 
algorithms coming field computational geometry points dimensional vector space allow arbitrary spatial objects limited point query object :10.1.1.133.2288
applications rough answer suffices algorithms developed return approximate result saving time computing :10.1.1.15.3125
algorithms require specialized search structures employ commonly spatial data structures 
example algorithms exist tree quadtree related structures rtree lsd tree 
addition algorithms applied spatial data structures 
knowledge incremental solutions nearest neighbor problem exist literature 
similar method published time 
principal difference method lsd tree algorithm uses priority queues data objects nodes spatial data structure 
algorithm somewhat complicated priority queues offer performance benefits experiments 
algorithm initially developed pmr quadtree presentation general 
expand considerably initial solution showing adapted tree comparing solution existing nearest neighbor algorithm :10.1.1.133.2288:10.1.1.131.7887
addition show nearest neighbor algorithm transformed special case tree adaptation general incremental nearest neighbor algorithm :10.1.1.133.2288
byproduct transformation process nearest neighbor algorithm simplified considerably 
term distance scan term distance browsing 
becker ting introduce concept distance scan motivate 
principal difference method lsd tree algorithm uses priority queues data objects nodes spatial data structure 
algorithm somewhat complicated priority queues offer performance benefits experiments 
algorithm initially developed pmr quadtree presentation general 
expand considerably initial solution showing adapted tree comparing solution existing nearest neighbor algorithm :10.1.1.133.2288:10.1.1.131.7887
addition show nearest neighbor algorithm transformed special case tree adaptation general incremental nearest neighbor algorithm :10.1.1.133.2288
byproduct transformation process nearest neighbor algorithm simplified considerably 
term distance scan term distance browsing 
becker ting introduce concept distance scan motivate 
done similar lines section context finding closest object query point additional conditions may imposed object 
algorithms mentioned far assume objects exist dimensional euclidean space distances defined objects data set object point space 
class nearest neighbor algorithms operates general objects commonly called metric space model 
restriction objects reside metric space distance metric defined objects 
general case possible produce new objects metric space aggregate divide objects euclidean space bounding rectangles purpose 
various methods exist indexing objects metric space model computing proximity queries :10.1.1.145.5268
methods properties distance metrics symmetry triangle inequality operate knowledge objects represented distances objects computed 
general approach usually slower methods spatial properties objects objects properties exist images chemical data time series 
approach advocated high dimensional vector spaces 
may possible map general objects geometric space benefit efficient search methods 
approach advocated high dimensional vector spaces 
may possible map general objects geometric space benefit efficient search methods 
mapping approaches domain specific general approaches proposed 
acm transactions database systems june pp 
trees tree object hierarchy form balanced structure inspired tree :10.1.1.131.7887:10.1.1.131.7887:10.1.1.96.6637
tree node contains array key pointer entries key hyper rectangle minimally bounds data objects subtree pointed pointer 
tree leaf node pointer object identifier tuple id relational system nonleaf node pointer child node lower level 
maximum number entries node termed node capacity fan may different leaf nonleaf nodes 
node capacity usually chosen node fills disk page small number 
incremental nearest neighbor algorithm applied virtually hierarchical spatial data structure 
fact generally applicable data structure hierarchical containment partitioning see 
description assume tree structure method general structures tree node represents regions space objects pointers external table stored leaf nodes regions intersect objects 
remainder section distinction node region represents meaning clear context 
basic requirement method applicable region covered node completely contained region parent node examples structures satisfy requirement include quadtrees trees trees lsd trees :10.1.1.131.7887
examples node region rectangular requirement 
algorithm handles object represented leaf node pmr quadtree tree 
assume exposition node parent leaf nodes store objects algorithm easily adapted handle cases hb tree cell tree shelves 
observe data objects query objects arbitrary type points rectangles polygons 
example algorithm combined range query checking object node range prior inserting priority queue rejecting fall range 
combined queries obtained manipulating distance functions return special values objects nodes rejected 
incremental nearest neighbor clearly solve traditional nearest neighbor problem query object find nearest neighbors done simply retrieving neighbors algorithm terminating determined 
analysis performing comprehensive theoretical analysis incremental nearest neighbor algorithm complicated especially high dimensional spaces 
prior area limited case data objects query object points :10.1.1.72.8506
number simplifying assumptions data objects uniformly distributed data space 
section discuss issues involved sketch rudimentary analysis dimensional points 
wish analyze situation finding nearest neighbors 
th nearest neighbor query object distance region distance called search region 
assuming half points nodes outside search region expected number points priority queue 
assuming space memory priority queue elements means di satisfy equation di di course derivation assumptions generally hold practice 
fairly practice dimensional points 
gives indication obtain sequence ways analyzing size priority queue 
nearest neighbor search trees alternative approach nearest neighbor search trees proposed :10.1.1.133.2288
approach applicable finding nearest neighbors fixed advance 
contrast incremental nearest neighbor algorithm fixed advance 
key idea nearest neighbor algorithm maintain global list candidate nearest neighbors tree traversed depth manner 
see fact nearest neighbor algorithm employs pure traversal means step algorithm local decisions node visit node visit child node current node incremental nearest neighbor algorithm global decisions contents priority queue choose child nodes nodes visited 
approach applicable finding nearest neighbors fixed advance 
contrast incremental nearest neighbor algorithm fixed advance 
key idea nearest neighbor algorithm maintain global list candidate nearest neighbors tree traversed depth manner 
see fact nearest neighbor algorithm employs pure traversal means step algorithm local decisions node visit node visit child node current node incremental nearest neighbor algorithm global decisions contents priority queue choose child nodes nodes visited 
section describe somewhat simplified version nearest show example execution :10.1.1.133.2288
prove simplified version fact equivalent algorithm versions visit nodes tree :10.1.1.133.2288
show nearest neighbor algorithm transformed sequence steps incremental algorithm 
algorithm description nearest neighbor algorithm tree traversed depth manner :10.1.1.133.2288
complications mentioned section arise performing nearest neighbor search depth traversal overcome maintaining list candidate nearest neighbors 
contrast incremental nearest neighbor algorithm fixed advance 
key idea nearest neighbor algorithm maintain global list candidate nearest neighbors tree traversed depth manner 
see fact nearest neighbor algorithm employs pure traversal means step algorithm local decisions node visit node visit child node current node incremental nearest neighbor algorithm global decisions contents priority queue choose child nodes nodes visited 
section describe somewhat simplified version nearest show example execution :10.1.1.133.2288
prove simplified version fact equivalent algorithm versions visit nodes tree :10.1.1.133.2288
show nearest neighbor algorithm transformed sequence steps incremental algorithm 
algorithm description nearest neighbor algorithm tree traversed depth manner :10.1.1.133.2288
complications mentioned section arise performing nearest neighbor search depth traversal overcome maintaining list candidate nearest neighbors 
particular reach leaf node containing query object insert contents node candidate list recursive traversal tree 
see fact nearest neighbor algorithm employs pure traversal means step algorithm local decisions node visit node visit child node current node incremental nearest neighbor algorithm global decisions contents priority queue choose child nodes nodes visited 
section describe somewhat simplified version nearest show example execution :10.1.1.133.2288
prove simplified version fact equivalent algorithm versions visit nodes tree :10.1.1.133.2288
show nearest neighbor algorithm transformed sequence steps incremental algorithm 
algorithm description nearest neighbor algorithm tree traversed depth manner :10.1.1.133.2288
complications mentioned section arise performing nearest neighbor search depth traversal overcome maintaining list candidate nearest neighbors 
particular reach leaf node containing query object insert contents node candidate list recursive traversal tree 
candidate list contains members largest distance members query object prune search 
shows nearest neighbor algorithm 
iterate list sorted order recursively invoke child nodes 
distance child query object larger nearestlist maxdist ignore child rest entries activebranchlist 
means object subtree child remaining entries activebranchlist get inserted nearestlist 
nearestlist nearestlist return nearestlist nearestlist node node leaf node object node dist object nearestlist maxdist insert nearestlist dist object object endif activebranchlist entries node activebranchlist child node activebranchlist dist child nearestlist maxdist nearestlist child exit loop endif endif nearest neighbor algorithm 
difference nearest neighbor algorithm original presentation treatment activebranchlist :10.1.1.133.2288
pruning eliminate entries consideration comparing distances nearestlist maxdist identifies pruning strategies :10.1.1.133.2288
section show pruning strategies fact allow pruning 
objects stored outside tree tree leaf nodes contain bounding rectangles object minor optimization line 
compute distance query object bounding rectangle 
distance child query object larger nearestlist maxdist ignore child rest entries activebranchlist 
means object subtree child remaining entries activebranchlist get inserted nearestlist 
nearestlist nearestlist return nearestlist nearestlist node node leaf node object node dist object nearestlist maxdist insert nearestlist dist object object endif activebranchlist entries node activebranchlist child node activebranchlist dist child nearestlist maxdist nearestlist child exit loop endif endif nearest neighbor algorithm 
difference nearest neighbor algorithm original presentation treatment activebranchlist :10.1.1.133.2288
pruning eliminate entries consideration comparing distances nearestlist maxdist identifies pruning strategies :10.1.1.133.2288
section show pruning strategies fact allow pruning 
objects stored outside tree tree leaf nodes contain bounding rectangles object minor optimization line 
compute distance query object bounding rectangle 
distance nearestlist maxdist compute real distance object query object 
objects stored outside tree tree leaf nodes contain bounding rectangles object minor optimization line 
compute distance query object bounding rectangle 
distance nearestlist maxdist compute real distance object query object 
object accessed potentially saving disk scenario objects stored outside tree 
recall bounding rectangle object distance distance suggested sorted buffer store nearestlist :10.1.1.133.2288
large values manipulation nearestlist started major factor execution time algorithm 
replaced sorted buffer simple priority queue structure sorted decreasing order distance making easy replace farthest object 
acm transactions database systems june pp 
example example algorithm describe finding nearest neighbors query tree 
ii 
nn invocation occur distance 
final contents nearestlist returned list nearest neighbors ofq 
node ordering metrics ordering sort elements activebranchlist various metrics measuring distances elements bounding rectangles 
metrics considered mindist minmaxdist :10.1.1.133.2288
bounding rectangle node mindist minimum possible distance object subtree rooted minmaxdist maximum distance object subtree rooted guaranteed minimum maximum distances object 
mindist min maxdist calculated geometry position size bounding rectangle node require examining actual contents precise definition follows 
mindist distance closest point boundary necessarily corner minmaxdist distance closest corner adjacent corner farthest shows examples calculation mindist minmaxdist shown solid broken line respectively 
notice bounding rectangle distance distance accounting value minmaxdist equal opposite true 
mindist distance closest point boundary necessarily corner minmaxdist distance closest corner adjacent corner farthest shows examples calculation mindist minmaxdist shown solid broken line respectively 
notice bounding rectangle distance distance accounting value minmaxdist equal opposite true 
sense orderings represent optimistic mindist pessimistic minmaxdist choice 
see observe minimum bounding rectangles order increasing value mindist mindist mindist best contains object distance close mindist value dist mindist need hold may contain object closer order increasing minmaxdist value hand worst case object nearest distance minmaxdist larger minmaxdist 
experiments reported showed ordering activebranchlist mindist consistently performed better minmaxdist :10.1.1.133.2288
confirmed experiments include acm transactions database systems june pp 
example mindist solid line minmaxdist broken line bounding rectangle distance object bounded mindist minmaxdist 
notice point closer point case 
result section describes experimental findings 
metrics uses regardless ordering activebranchlist 
represents minimum distance object bounding rectangle provides means pruning nodes search bound maximum distance available 
hand bounding rectangle minmaxdist upper bound distance object nearest clear minmaxdist help pruning search objects closer elements positions higher minmaxdist values 
bounds distance closest element property limited value useful seeking nearest neighbor 
pruning strategies mentioned algorithm employs set pruning strategies prune entries activebranchlist entries processed :10.1.1.133.2288
classes pruning strategies identified termed downward pruning upward pruning :10.1.1.133.2288
downward pruning entries activebranchlist eliminated prior processing nodes entering loop line 
upward pruning entries activebranchlist eliminated processing node returning recursive call line 
pruning strategies discussed said applicable downward pruning upward pruning :10.1.1.133.2288
represents minimum distance object bounding rectangle provides means pruning nodes search bound maximum distance available 
hand bounding rectangle minmaxdist upper bound distance object nearest clear minmaxdist help pruning search objects closer elements positions higher minmaxdist values 
bounds distance closest element property limited value useful seeking nearest neighbor 
pruning strategies mentioned algorithm employs set pruning strategies prune entries activebranchlist entries processed :10.1.1.133.2288
classes pruning strategies identified termed downward pruning upward pruning :10.1.1.133.2288
downward pruning entries activebranchlist eliminated prior processing nodes entering loop line 
upward pruning entries activebranchlist eliminated processing node returning recursive call line 
pruning strategies discussed said applicable downward pruning upward pruning :10.1.1.133.2288
discuss pruning strategies turn show sufficient combination upward downward pruning strategy downward pruning 
pruning strategies mentioned algorithm employs set pruning strategies prune entries activebranchlist entries processed :10.1.1.133.2288
classes pruning strategies identified termed downward pruning upward pruning :10.1.1.133.2288
downward pruning entries activebranchlist eliminated prior processing nodes entering loop line 
upward pruning entries activebranchlist eliminated processing node returning recursive call line 
pruning strategies discussed said applicable downward pruning upward pruning :10.1.1.133.2288
discuss pruning strategies turn show sufficient combination upward downward pruning strategy downward pruning 
allows pruning entry activebranchlist bounding rectangle mindist minmaxdist bounding rectangle activebranchlist 
pointed minmaxdist pruning limited value useful 
may appear pruning strategy upward pruning line 
condition checked recursive call statement upward downward pruning 
acm transactions database systems june pp 
strategy prunes object dist minmaxdist bounding rectangle 
strategy applicable 
strategy claimed downward pruning inclusion somewhat help pruning nodes search :10.1.1.133.2288
possible authors intended strategy prune objects leaf nodes 
appear particularly fruitful requires objects accessed distances calculated 
possible explanation inclusion strategy discard nearest object subtree activebranchlist processed 
purpose clear better candidate replace object anyway 
possible explanation inclusion strategy discard nearest object subtree activebranchlist processed 
purpose clear better candidate replace object anyway 
strategy prunes node activebranchlist mindist nearestlist maxdist 
applicable value downward upward pruning 
note strategy explicitly labeled downward pruning strategy downward pruning noted :10.1.1.133.2288
particular entering loop line eliminate entries activebranchlist distances larger nearestlist maxdist pruning occur nearestlist contains entries 
recalling strategy applicable shown case applying strategy upward pruning eliminates bounding rectangles applying strategy downward pruning 
see bounding rectangle activebranchlist smallest min maxdist value 
strategy prune entry activebranchlist bounding rectangle mindist minmaxdist 
course means nearestlist longer bounded total number objects tree 
entire process performed easily merging nearestlist list called 
increasing order distance able preserve role previous contents activebranchlist nodes pruned greater distances th nearest object 
subtrees traversed outputting nearest neighbors 
observe transformed algorithm mindist distance metric rendering issue min maxdist metric :10.1.1.133.2288
transformed algorithm general achieve pruning nodes original nearest neighbor algorithm 
conclude discussion nearest neighbor algorithm pointing transformation yields algorithm equivalent incremental algorithm earlier organized priority queue 
acm transactions database systems june pp 
experimental results order evaluate tree incremental nearest neighbor algorithm denoted inn compared result tree nearest neighbor algorithm denoted nn distance browsing section :10.1.1.133.2288
observe transformed algorithm mindist distance metric rendering issue min maxdist metric :10.1.1.133.2288
transformed algorithm general achieve pruning nodes original nearest neighbor algorithm 
conclude discussion nearest neighbor algorithm pointing transformation yields algorithm equivalent incremental algorithm earlier organized priority queue 
acm transactions database systems june pp 
experimental results order evaluate tree incremental nearest neighbor algorithm denoted inn compared result tree nearest neighbor algorithm denoted nn distance browsing section :10.1.1.133.2288
measured incremental cost inn cost obtaining st neighbor obtained th neighbor section 
varying number objects browsed able see true advantage method computing nearest neighbors incrementally committing predetermined number nearest neighbors case nearest neighbor algorithm 
remember know advance objects browsed finding desired object 
compare inn nn computing result nearest neighbor query section 
note random maps necessarily model real world maps perfectly 
particular construction random maps cover entire square area case real maps tiger line file county maps 
furthermore random maps tend uniform real maps tend dense clusters small line segments mixed sparsely covered areas 
randomly generated maps capture important features real maps low probability line segments meeting point enabled run experiments wide range map sizes maps similar characteristics 
experiments differ hilbert packed tree tree :10.1.1.178.5499:10.1.1.133.2288
hilbert packed tree static structure constructed applying peano hilbert space ordering spatial objects basis centroids 
leaf nodes tree built filling objects nonleaf nodes built top bounding rectangles computed nodes 
notice conventional tree node splitting rules applied construction hilbert packed tree node filled capacity hilbert packed tree construction algorithm 
interested dynamic environments chose tree tree experiments noted 
execution time milliseconds inn real nn real inn random nn random log number line segments execution time finding neighbor 
tree node disk os inn real nn real inn random nn random log number line segments tree node disk finding neighbor 
tree node disk os find relative behavior algorithms inn better nn rate growth similar 
rate growth appears logarithmic number line segments 
compares results reported nn observed number tree node accesses grew linearly height tree :10.1.1.133.2288
experiments exact agreement observation asymptotically observations equivalent trees height tree grows logarithmically number objects 
object distance calculations inn performs better nn 
acm transactions database systems june pp 
object distance calculations inn real nn real inn random nn random log number line segments object distance calculations finding neighbor 
distance function nearest neighbor search image database find image closest color query image 
number dimensions color histograms typically 
applications number dimensions higher 
spatial indexing structures high dimensions 
tree example degenerate dimensions higher :10.1.1.102.7240
specifically happens range queries small query windows index pages read reading expensive sequential scan data 
indexing structures proposed address issue example tree lsd tree tree lsd tree respectively :10.1.1.102.7240
provide speedup compared sequential scan dimensions 
approach taken speed access point data high dimension map points space lower dimension case incremental nearest lower dimensional space :10.1.1.39.5767
applications number dimensions higher 
spatial indexing structures high dimensions 
tree example degenerate dimensions higher :10.1.1.102.7240
specifically happens range queries small query windows index pages read reading expensive sequential scan data 
indexing structures proposed address issue example tree lsd tree tree lsd tree respectively :10.1.1.102.7240
provide speedup compared sequential scan dimensions 
approach taken speed access point data high dimension map points space lower dimension case incremental nearest lower dimensional space :10.1.1.39.5767
order guarantee accuracy result output algorithm filtered distances corresponding higher dimensional points 
approach abandon goal indexing data points space occupancy properties distance metric employed see discussion metric space model section 
tree example degenerate dimensions higher :10.1.1.102.7240
specifically happens range queries small query windows index pages read reading expensive sequential scan data 
indexing structures proposed address issue example tree lsd tree tree lsd tree respectively :10.1.1.102.7240
provide speedup compared sequential scan dimensions 
approach taken speed access point data high dimension map points space lower dimension case incremental nearest lower dimensional space :10.1.1.39.5767
order guarantee accuracy result output algorithm filtered distances corresponding higher dimensional points 
approach abandon goal indexing data points space occupancy properties distance metric employed see discussion metric space model section 
index method distance employed algorithm applicable :10.1.1.145.5268
fact nearest neighbor algorithm similar algorithm uses priority queue nodes guide traversal index 
provide speedup compared sequential scan dimensions 
approach taken speed access point data high dimension map points space lower dimension case incremental nearest lower dimensional space :10.1.1.39.5767
order guarantee accuracy result output algorithm filtered distances corresponding higher dimensional points 
approach abandon goal indexing data points space occupancy properties distance metric employed see discussion metric space model section 
index method distance employed algorithm applicable :10.1.1.145.5268
fact nearest neighbor algorithm similar algorithm uses priority queue nodes guide traversal index 
euclidean distance metric nearest neighbor search region section spherical 
hand node regions types spatial index structures hyper rectangular shape 
effect making nearest neighbor search expensive points accessed necessary 
problems arising operating high dimensional spaces alleviated relaxing requirement nearest neighbors computed exactly 
goal report neighbors quickly possible 
incremental nearest neighbor algorithm object slightly farther query object node algorithm process reporting high dimensional space seen may cause lot extra 
report nearest neighbor distance larger particular suppose object priority queue closest node queue closest propose report approximate nearest neighbor dn nonnegative constant 
leads definition approximate nearest neighbor conforms distance th nearest neighbor distances objects returned approximate nearest neighbor search larger obviously get exact result larger exact result change required incremental nearest neighbor algorithm approximate sense key nodes priority queue :10.1.1.15.3125
specifically node dn key dn 
significant reduction node accesses results finding approximate nearest neighbors opposed exact nearest neighbors :10.1.1.15.3125
relatively high probability result exact approximate cases 
example approximate nearest neighbor search dimensions meaning relative error distance allowed speedup execution time order exact nearest neighbor search average relative error true nearest neighbor half time :10.1.1.15.3125
incremental nearest neighbor algorithm object slightly farther query object node algorithm process reporting high dimensional space seen may cause lot extra 
report nearest neighbor distance larger particular suppose object priority queue closest node queue closest propose report approximate nearest neighbor dn nonnegative constant 
leads definition approximate nearest neighbor conforms distance th nearest neighbor distances objects returned approximate nearest neighbor search larger obviously get exact result larger exact result change required incremental nearest neighbor algorithm approximate sense key nodes priority queue :10.1.1.15.3125
specifically node dn key dn 
significant reduction node accesses results finding approximate nearest neighbors opposed exact nearest neighbors :10.1.1.15.3125
relatively high probability result exact approximate cases 
example approximate nearest neighbor search dimensions meaning relative error distance allowed speedup execution time order exact nearest neighbor search average relative error true nearest neighbor half time :10.1.1.15.3125
concluding remarks detailed comparison approaches browsing spatial objects tree basis distances arbitrary spatial query object 
shown incremental algorithm inn significantly outperforms terms execution time tree node disk object distance calculations solution nearest neighbor algorithm nn 
leads definition approximate nearest neighbor conforms distance th nearest neighbor distances objects returned approximate nearest neighbor search larger obviously get exact result larger exact result change required incremental nearest neighbor algorithm approximate sense key nodes priority queue :10.1.1.15.3125
specifically node dn key dn 
significant reduction node accesses results finding approximate nearest neighbors opposed exact nearest neighbors :10.1.1.15.3125
relatively high probability result exact approximate cases 
example approximate nearest neighbor search dimensions meaning relative error distance allowed speedup execution time order exact nearest neighbor search average relative error true nearest neighbor half time :10.1.1.15.3125
concluding remarks detailed comparison approaches browsing spatial objects tree basis distances arbitrary spatial query object 
shown incremental algorithm inn significantly outperforms terms execution time tree node disk object distance calculations solution nearest neighbor algorithm nn 
true nn approach optimized application carefully choosing increments previous search re algorithm described incremental accesses set nodes incremental nearest neighbor algorithm modified described acm transactions database systems june pp :10.1.1.15.3125:10.1.1.15.3125
sults pruning nn algorithm re invoked 
relatively high probability result exact approximate cases 
example approximate nearest neighbor search dimensions meaning relative error distance allowed speedup execution time order exact nearest neighbor search average relative error true nearest neighbor half time :10.1.1.15.3125
concluding remarks detailed comparison approaches browsing spatial objects tree basis distances arbitrary spatial query object 
shown incremental algorithm inn significantly outperforms terms execution time tree node disk object distance calculations solution nearest neighbor algorithm nn 
true nn approach optimized application carefully choosing increments previous search re algorithm described incremental accesses set nodes incremental nearest neighbor algorithm modified described acm transactions database systems june pp :10.1.1.15.3125:10.1.1.15.3125
sults pruning nn algorithm re invoked 
incremental approach superior performance applied problem computing nearest neighbors query object 
experiments confirm inn algorithm achieves higher level pruning nn algorithm 
important reduces amount tree node disk number distance calculations combined account major portion execution time 
reducing number object accesses object distance calculations incremental algorithm greater effect terms reducing execution time complex spatial objects polygons 
worst case scenario leaf nodes spatial data structure accessed see discussion section 
contrast incremental algorithm variant tree implementation spatial objects stored external tree alleviates worst case described making bounding rectangles leaf nodes enabling avoid accessing data objects disk particular original version algorithm spatial index assumed bounding rectangles meant worst case data objects accessed disk order measure distances query object 
bounding rectangles stored tree leads considerably efficient conceptually different incremental algorithm trees bounding boxes pruning devices reduce disk accessing spatial descriptions objects 
involves comparing behavior incremental nearest neighbor algorithm different spatial data structures pmr quadtrees trees trees adapting algorithm classes index structures distance indexes :10.1.1.145.5268
wish investigate decided report results experiments spatial objects stored leaf nodes external tree 
done part organization external object storage large effect performance introduces extra variable comparison algorithms 
recall footnote decided report experiments spatial objects stored leaf nodes external tree 
acm transactions database systems june pp 
aref samet 
estimating selectivity factors spatial operations 
optimization databases fifth international workshop foundations models languages data objects pages austria september 
technical report informatik technische 
arya mount silverman wu :10.1.1.15.3125
optimal algorithm approximate nearest neighbor searching 
proceedings fifth annual acm siam symposium discrete algorithms pages arlington va january 
revised version www cs umd edu mount 
becker ting 
communications acm september 
berchtold hm keim kriegel 
cost model nearest neighbor search high dimensional data space 
proceedings th acm sigact sigmod sigart symposium principles database systems pods pages tucson az may 
berchtold keim :10.1.1.102.7240
kriegel 
tree index structure high dimensional data 
proceedings nd international conference large data bases pages mumbai india september 
bern 
ieee transactions computers july 
nther 
spatial database indices large extended objects 
proceedings seventh international conference data engineering pages kobe japan april 
guttman :10.1.1.131.7887
trees dynamic index structure spatial searching 
proceedings acm sigmod conference pages boston ma june 
hafner sawhney equitz flickner niblack 
efficient color histogram indexing quadratic form distance functions 
robinson 
tree search structure large multidimensional dynamic indexes 
proceedings acm sigmod conference pages ann arbor mi april 
acm transactions database systems june pp 
roussopoulos kelley vincent :10.1.1.133.2288
nearest neighbor queries 
proceedings acm sigmod conference pages san jose ca may 
roussopoulos 
direct spatial search pictorial databases packed trees 
