indexing querying xml data regular path expressions advent xml standard data representation exchange internet storing querying xml data important 
xml query languages proposed common feature languages regular path expressions query xml data 
poses new challenge concerning indexing searching xml data conventional approaches tree traversals may meet processing requirements heavy access requests 
propose new system indexing storing xml data numbering scheme elements 
numbering scheme quickly determines ancestor descendant relationship elements hierarchy xml data 
propose algorithms processing regular path expressions join searching paths element join scanning sorted elements attributes find element attribute pairs join finding kleene closure repeated paths elements 
common features languages regular path expressions ability extract information schema data 
users allowed navigate arbitrary long paths data regular path expressions 
example xpath uses path notations urls navigating hierarchical structure xml document 
despite past research efforts widely believed current state art relational database technology fails deliver necessary functionalities efficiently store xml semi structured data 
furthermore comes processing regular path expression queries straightforward approaches conventional tree traversals reported literature :10.1.1.1.2777
approaches fairly inefficient processing regular path expression queries overhead traversing hierarchy xml data substantial path lengths long unknown 
propose new system called indexing storing xml data new numbering scheme elements attributes 
index structures allow efficiently find elements attributes name string common operations process regular path expression queries 
proposed numbering scheme quickly determines ancestor descendant relationship elements attributes hierarchy xml data 
query chapter xml elements xml attribute 
query running example sections 
note notations slightly different xquery working draft 
see table full notations regular path expressions 
conventional approaches straightforward approaches processing regular path expression queries traverse hierarchy xml objects top bottomup fashion :10.1.1.1.2777
process query topdown approach example downward paths starting element followed find exists element descendant 
step needs repeated chapter elements xml database 
implies absolutely necessary examine possible path elements leaf nodes xml trees usually known elements paths 
element root xml tree entire tree traversed 
query elements tree searched 
elements corresponding xml tree examined traversing tree find exists element ancestor 
upward traversal simpler costly exists upward path 
elements elements cost bottom approach higher top approach 
hybrid approach proposed traverses top bottom meeting middle path expression :10.1.1.1.2777
hybrid approach take advantages top bottom approaches xml data certain structural characteristics 
effectiveness guaranteed 
sections describe decomposition regular path expression propose new path join algorithms process regular path expression queries traversing xml trees 
decomposition path expressions main idea proposed path join algorithms complex path expression decomposed simple path expressions 
element element element attribute joins observed query processing time increased linearly size xml data increased 
result shows linear scalability proposed algorithms provides total elapsed time query evidence proposed path join algorithms improve performance query processing xml path expressions conventional methods order magnitude 
previous xml databases graph data models path traversals play central role query processing optimizing navigational path expressions important issue 
optimal query plan depends values database shape graph containing data 
query evaluation strategies proposed lore cost query optimizer :10.1.1.1.2777
top strategy exploiting path expression bottom strategy exploiting value predicates hybrid strategy 
speed query processing lore database different types index structures proposed 
value index text index search objects specific values link index path index provide fast access parents object objects reachable labeled path 
keyword search important query xml data structures xml data known users 
florescu kossmann propose extend xml ql query language keyword search capabilities 
indexes facilitate keyword searching structure inverted files extended support full text indexing additional information granularity xml elements type keywords depth related element instances 
wolff structural information xml documents retrieval process probabilistic model 
propose index structures structure time second data set element attribute attributes results sigmod author id nitf block dir nitf block dir sigmod top sigmod ea join sigmod bottom number buffer pages table summary join queries time second nitf bottom nitf top nitf ea join number buffer pages time second nitf bottom nitf top nitf ea join number buffer pages sigmod data nitf data nitf data index preserves hierarchical structure underlying data text index supports evaluation textual queries 
problem optimizing regular path expressions studied context navigating semi structured data web sites :10.1.1.33.1258
semistructured data modeled edge labeled graph nodes denote html pages edges denote hyperlinks 
abiteboul vianu deal path query evaluation takes advantage local knowledge path constraints data graphs may capture structural information web site 
address issue equivalence decidability regular path queries constraints 
fernandez dan suciu propose query optimization techniques rewrite regular path expression query reduces scope navigation 
technical report version ibm august 
olivier mark ichikawa 
structured graph format xml metadata describing web site structure 
computer networks isdn systems 
jason mchugh jennifer widom :10.1.1.1.2777
query optimization xml 
proceedings th vldb conference pages edinburgh scotland september 
jason mchugh jennifer widom serge abiteboul luo anand rajaraman 
indexing semistructured data 
