eddies continuously adaptive query processing ron joseph hellerstein university california berkeley cohera com cs berkeley edu large federated shared databases resources exhibit widely characteristics 
assumptions time query submitted rarely hold duration query processing 
result traditional static query optimization execution techniques ineffective environments 
introduce query processing mechanism called eddy continuously operators query plan runs 
characterize moments symmetry pipelined joins easily reordered synchronization barriers require inputs different sources coordinated 
combining eddies appropriate join algorithms merge optimization execution phases query processing allowing tuple flexible ordering query operators 
query execution pipeline fly requires significant care maintaining query execution state 
highlight query processing stages called moments symmetry operators easily reordered 
describe synchronization barriers certain join algorithms restrict performance rate slower input 
join algorithms frequent moments symmetry adaptive non existent barriers especially attractive environment 
observe ripple join family hh provides efficiency frequent moments symmetry adaptive nonexistent barriers equijoins alike :10.1.1.104.4432
eddy architecture quite simple need traditional cost selectivity estimation simplifying logic plan enumeration 
eddies represent step larger attempt away traditional optimizers entirely hope providing run time adaptivity reduction code complexity 
focus continuous operator reordering single site query processor leave optimization issues discussion 
run time fluctuations properties vary query processing costs operators selectivities rates tuples arrive inputs 
architectural assumptions intended efficiently flexibly provide distributed query processing sites wide area parallel query processing large shared cluster 
narrow focus somewhat concentrate initial difficult problem run time operator reordering single site query executor changing effective order shape pipelined query plan tree face changes performance 
discussion assume initial query plan tree constructed parsing naive 
optimizer need exercise judgement reordering plan tree fly 
constructing query plan choose spanning tree query graph set table pairs join kbz algorithms joins :10.1.1.76.1079
return choice join algorithms section defer section discussion changing spanning tree join algorithms processing 
study standard single node object relational query processing system added capability opening scans indexes external data sets 
common base architecture available commercial object relational systems ibm db udb informix dynamic server udo federated database systems cohera 
refer non resident tables external tables 
iterator producing notes current cursor position cr case new outer loop begins fetching tuple scanned cr 
repeated indefinitely joining tuples tuples position cr 
alternatively loop moment symmetry order inputs swapped remembering current position repeatedly joining tuple starting cr tuples cs 
depicts scenario changes ordering 
operators pipelined hash join wa barriers whatsoever :10.1.1.56.701
operators constant symmetry processing inputs totally decoupled 
moments symmetry allow reordering inputs single binary operator 
generalize noting joins commute tree binary joins viewed single ary join 
easily implement doubly nested loops join operator relations moments complete symmetry loop point inputs reordered say straightforward extension discussion cursor recorded input loop go recorded cursor position input 
operators constant symmetry processing inputs totally decoupled 
moments symmetry allow reordering inputs single binary operator 
generalize noting joins commute tree binary joins viewed single ary join 
easily implement doubly nested loops join operator relations moments complete symmetry loop point inputs reordered say straightforward extension discussion cursor recorded input loop go recorded cursor position input 
effect obtained binary implementation operators swapping positions binary operators effectively plan tree transformation go steps approach treats operator right hand input unit unit swaps units idea previously static query optimization schemes ik kbz hel :10.1.1.144.2361
viewing situation manner naturally consider reordering multiple joins inputs join algorithms different 
query need mutually commutative require join algorithm 
discuss commutativity join algorithms section 
note combination commutativity moments symmetry allows aggressive reordering plan tree 
ah summarize salient properties variety join algorithms 
desire avoid blocking rules hybrid hash join desire minimize ordering constraints barriers excludes merge joins 
nested loops joins unclustered indexes index ordering scan ordering 
reordering inputs difficult ensure terminology section lookups index new inner relation produce tuples cr infrequent moments symmetry barriers making undesirable 
algorithms consider frequently symmetric versions traditional iteration hashing indexing schemes ripple joins hh :10.1.1.104.4432
note original pipelined hash join wa constrained version hash ripple join :10.1.1.56.701
external hashing extensions uf iff directly applicable hash ripple join hh treats index joins special case :10.1.1.104.4432
non equijoins block ripple join algorithm effective having frequent moments symmetry particularly processing hh :10.1.1.104.4432
illustrates block index hash ripple joins reader referred hh iff uf detailed discussions algorithms variants 
desire avoid blocking rules hybrid hash join desire minimize ordering constraints barriers excludes merge joins 
nested loops joins unclustered indexes index ordering scan ordering 
reordering inputs difficult ensure terminology section lookups index new inner relation produce tuples cr infrequent moments symmetry barriers making undesirable 
algorithms consider frequently symmetric versions traditional iteration hashing indexing schemes ripple joins hh :10.1.1.104.4432
note original pipelined hash join wa constrained version hash ripple join :10.1.1.56.701
external hashing extensions uf iff directly applicable hash ripple join hh treats index joins special case :10.1.1.104.4432
non equijoins block ripple join algorithm effective having frequent moments symmetry particularly processing hh :10.1.1.104.4432
illustrates block index hash ripple joins reader referred hh iff uf detailed discussions algorithms variants 
algorithms adaptive sacrificing performance uf iff demonstrate scalable versions hash ripple join perform competitively hybrid hash join static case hh shows block ripple join efficient nested loops join arrives moments symmetry frequently nested loops joins especially early stages processing :10.1.1.104.4432
nested loops joins unclustered indexes index ordering scan ordering 
reordering inputs difficult ensure terminology section lookups index new inner relation produce tuples cr infrequent moments symmetry barriers making undesirable 
algorithms consider frequently symmetric versions traditional iteration hashing indexing schemes ripple joins hh :10.1.1.104.4432
note original pipelined hash join wa constrained version hash ripple join :10.1.1.56.701
external hashing extensions uf iff directly applicable hash ripple join hh treats index joins special case :10.1.1.104.4432
non equijoins block ripple join algorithm effective having frequent moments symmetry particularly processing hh :10.1.1.104.4432
illustrates block index hash ripple joins reader referred hh iff uf detailed discussions algorithms variants 
algorithms adaptive sacrificing performance uf iff demonstrate scalable versions hash ripple join perform competitively hybrid hash join static case hh shows block ripple join efficient nested loops join arrives moments symmetry frequently nested loops joins especially early stages processing :10.1.1.104.4432
ah discuss memory overheads adaptive algorithms larger standard join algorithms 
reordering inputs difficult ensure terminology section lookups index new inner relation produce tuples cr infrequent moments symmetry barriers making undesirable 
algorithms consider frequently symmetric versions traditional iteration hashing indexing schemes ripple joins hh :10.1.1.104.4432
note original pipelined hash join wa constrained version hash ripple join :10.1.1.56.701
external hashing extensions uf iff directly applicable hash ripple join hh treats index joins special case :10.1.1.104.4432
non equijoins block ripple join algorithm effective having frequent moments symmetry particularly processing hh :10.1.1.104.4432
illustrates block index hash ripple joins reader referred hh iff uf detailed discussions algorithms variants 
algorithms adaptive sacrificing performance uf iff demonstrate scalable versions hash ripple join perform competitively hybrid hash join static case hh shows block ripple join efficient nested loops join arrives moments symmetry frequently nested loops joins especially early stages processing :10.1.1.104.4432
ah discuss memory overheads adaptive algorithms larger standard join algorithms 
ripple joins moments symmetry corner rectangular ripple prefix input stream joined tuples prefix input stream vice versa 
note original pipelined hash join wa constrained version hash ripple join :10.1.1.56.701
external hashing extensions uf iff directly applicable hash ripple join hh treats index joins special case :10.1.1.104.4432
non equijoins block ripple join algorithm effective having frequent moments symmetry particularly processing hh :10.1.1.104.4432
illustrates block index hash ripple joins reader referred hh iff uf detailed discussions algorithms variants 
algorithms adaptive sacrificing performance uf iff demonstrate scalable versions hash ripple join perform competitively hybrid hash join static case hh shows block ripple join efficient nested loops join arrives moments symmetry frequently nested loops joins especially early stages processing :10.1.1.104.4432
ah discuss memory overheads adaptive algorithms larger standard join algorithms 
ripple joins moments symmetry corner rectangular ripple prefix input stream joined tuples prefix input stream vice versa 
hash ripple joins index joins scenario occurs consecutive tuple consumed scanned input 
ripple joins offer frequent moments symmetry 
producer consumer run differing rates faster thread may block queue waiting slower thread catch 
river multi threaded exploit algorithms reading various inputs independent rates 
river implementation derives sort features efficient mechanisms including pre fetching scans avoidance operating system buffering high performance user level networking 
pre optimization eddies reorder tables joins heuristic pre optimizer choose initially pair relations joins constraint relation participates join 
corresponds choosing spanning tree query graph nodes represent relations edges represent binary joins kbz :10.1.1.76.1079
reasonable heuristic picking spanning tree forms chain cartesian products tables known small handle star schemas base table cardinality statistics available picks arbitrary equijoin edges assumption relatively low selectivity followed arbitrary non equijoin edges required complete spanning tree 
spanning tree query graph pre optimizer needs choose join algorithms edge 
equijoin edge index join index available hash ripple join 
non equijoin edge block ripple join 
cost 
completion time secs naive lottery performance selections cost varies runs 
spin loops corresponding relative costs followed randomized selection decision appropriate selectivity 
describe relative costs selections terms delay units studying optimization absolute number cycles spin loop irrelevant 
implemented simplest version hash ripple join identical original pipelining hash join wa implementation exert statistically motivated control disk resource consumption hh :10.1.1.56.701:10.1.1.104.4432
simulated index joins doing random os file returning average number matches corresponding pre programmed selectivity 
filesystem cache allowed absorb index os 
order fairly compare eddies static plans simulate static plans eddies enforce static ordering tuples setting ready bits correct order 
naive eddy fluid dynamics operator costs illustrate eddy works consider simple single table query expensive selection predicates traditional assumption performance selectivity properties change execution 
higher selectivity lottery aggressively favors optimal ordering selectivity 
joins discussed selections point ease exposition course joins common expensive operator query processing 
section study eddies interact pipelining ripple join algorithms 
moment continue study static performance environment validating ability eddies scenarios static techniques effective 
simple table query select experiment constructed plan hash ripple join index join data uniformly distributed table indicates selectivity rs join selectivity respect tuple entering join finds matching tuples average hel :10.1.1.144.2361
artificially set selectivity index join selectivity 
shows relative performance eddy schemes static join orderings 
results echo results selections showing lottery eddy performing nearly optimally naive eddy performing best worst static plans 
noted section index joins analogous selections 
proceedings usenix annual technical conference monterey june 
hac hellerstein chou raman roth haas 
interactive data analysis control project 
ieee computer august 
hel hellerstein :10.1.1.144.2361
optimization techniques queries expensive methods 
acm transactions database systems 
hh haas hellerstein :10.1.1.104.4432
ripple joins online aggregation 
ieee computer august 
hel hellerstein :10.1.1.144.2361
optimization techniques queries expensive methods 
acm transactions database systems 
hh haas hellerstein :10.1.1.104.4432
ripple joins online aggregation 
proc 
acm sigmod international conference management data pages philadelphia 
haas kossmann wimmers yang 
acm transactions database systems october 
ioannidis ng shim sellis 
parametric query optimization 
vldb journal 
kbz krishnamurthy boral zaniolo :10.1.1.76.1079
optimization nonrecursive queries 
proc 
th international conference large databases vldb pages august 
kd kabra dewitt 
franklin 
cost query scrambling initial delays 
proc 
acm sigmod international conference management data seattle june 
wa wilschut apers :10.1.1.56.701
dataflow query execution parallel main memory environment 
proc 
international conference parallel distributed info 
sys 
