transparent fault tolerance web services architectures vijay simon miles luc moreau david de roure michael luck sm moreau mml ecs soton ac uk department electronics computer science university southampton southampton bj uk 
service architectures enable development new classes grid distributed applications 
main capabilities provided systems dynamic flexible integration services services allowed part distributed system simultaneously serve different applications 
increased flexibility system composition difficult address classical distributed system issues fault tolerance 
relatively easy individual service fault tolerant improving fault tolerance services collaborating multiple application scenarios challenging task 
look issue developing fault tolerant service distributed systems propose infrastructure implement fault tolerance capabilities transparent services 
grid problem defined flexible secure coordinated resource sharing dynamic collections individuals institutions resources 
grid computing ebusiness share large number requirements interoperability platform independence dynamic discovery ebusiness community web services emerged set open standards defined world wide web consortium ubiquitously supported suppliers users 
rely syntactic framework xml transport layer soap xml language wsdl describe services service directory uddi 
benefit open standards acknowledged grid community illustrated projects embracing web services various ways 
www org grid project engineering optimisation grid services condor available web services 
mygrid www mygrid org uk grid middleware project biological setting addresses integration web services agent technologies 
open grid service architecture ogsa extends web services support dynamic creation transient grid services 
grid computing characterised applications may long lived involve large number computing resources 
applications need designed fault tolerance order robust 
result grid community generally distributed computing community devised multiple algorithms fault tolerance 
web community focused aspect standard way develop fault tolerant web services 
specific problem address 
approach may summarised follows implementors web service implement interface checkpoint rollback architecture dynamically extends service interface published wsdl document methods fault tolerance applications making different web services declare inter dependencies fault manager control fault recovery extension soap communication layer able log replay messages 
specific contributions design architecture fault tolerance web services supports multiple algorithms fault tolerance 
ii specification interfaces different architecture components 
iii overview implementation 
organised follows 
section summarise techniques fault tolerance support architecture section web services stack 
describe architecture section implementation section conclude section 
fault tolerance background expanding design brief fault tolerance distributed systems 
intended aid understanding terms extensive survey 
fault tolerance ability application continue valid operation application part fails way 
failure may due example processor crashing 
order application suffering failure continue state processes data returned previous consistent state 
example object data may return rollback previous values current values lost processes may return state message re sent previous attempt apparently failed 
order return previous consistent state application record replica previous state 
entire state process copied checkpointing mechanism incremental changes process state logging mechanism 
methods rollback previous valid state 
fault tolerance considerably difficult distributed applications processes communicate passing messages 
process may fail processes aware failure 
lead state application global state inconsistent 
application globally consistent state receipt operation message recorded state process send operation message recorded 
aim fault tolerance mechanism distributed applications keep application consistent global state return known consistent state known maximal state case failure 
fault tolerance mechanisms transparency low overhead portability scalability 
transparency implies exists mechanism applications implemented largely ignore processes failing recovering dealt mechanism 
important transparency exists developers burden eased fault tolerance mechanism replaced rest application requiring modification 
requirement low overhead portability scalability lead choice fault tolerance mechanisms apply 
fault tolerance achieved fault tolerance object replication techniques 
checkpointing performed variety ways distributed applications 
consistent synchronous checkpointing involves processes forced globally synchronise state processes recorded 
global synchronisation means processes state processed received messages blocked sending messages 
blocking processes may reduce speed application consistent checkpointing may preferred means fault tolerance 
failure processes consistent checkpointing rollback global checkpoint 
quasi synchronous approach suggested singh requiring global synchronisation processes force checkpoint time sending messages 
alternative consistent checkpointing independent asynchronous checkpointing 
case process records state attempting coordinate processes potentially avoiding overhead global synchronisation 
communicating processes may depend require certain states 
rollback process failure may require processes rollback previous checkpoints 
possible rollbacks require original process rollback attempt reach consistent global state 
repetition rollbacks lead domino effect process rollback times reach consistent global state losing lot processing occurred failure 
state process invalid rollback consider dependency process 
rollback checkpoint take place multiple processes fault tolerance mechanism ensure create extra dependencies 
order achieve mechanism employ phase commit processes put blocking state prevent messages sent new dependencies forming rolled back requested checkpoint appropriate moment 
independent checkpointing mechanisms deal process dependency ways 
pessimistic independent checkpointing requires process logs changes checkpoint sending receiving message 
dependencies processes due messages passed ensures rollback process previous checkpoint affect dependent processes 
optimistic independent checkpointing requires dependencies explicitly recorded system rollback process dependent processes informed appropriately possibly rolled back 
pessimistic approach places restrictions process autonomy checkpointing may require checkpointing optimistic approaches 
optimistic mechanisms overhead rollback hand 
noted single mechanism universally applicable 
suitability algorithms differ application type exists different set algorithms batch processing shared memory mpi applications 
restrict discussions fault tolerance requirement web services architecture 
web services service negotiation trading partner agreement service flow wsfl service discovery uddi wsfl xml messaging soap network layer ftp iiop mq mail management qos fig 

generalized conceptual web services stack world wide web application application communication 
programmatic interfaces available referred web services www org ws 
ensure interoperability different architectures web services architecture describes standards definition discovery binding communication services 
service provides set application functionality bound advertised interface 
architecture provides abstraction implementation services 
service discovery mechanisms universal description discovery integration uddi aid discovering services statically dynamically bound 
facilitate binding services describe behaviour description language wsdl 
exists explicit information lifetime instance creation management policy differs implementations 
web services stack number web services implementations exist proprietary web services stack 
stacks vary way gel interact legacy systems proprietary technologies 
generalized conceptual web service stack represented 
network layer messaging layer service description layer standardized ensure interoperability 
soap supported de facto xml messaging protocol web service implementations 
detailed discussions soap protocol wsdl described respectively 
vertical layers describe attributes framework addressed level 
security management qos widely accepted system attributes 
error handling web services different layers conceptual stack employ different types error handling 
description layer wsdl provides mechanism way wsdl fault applications specify error characteristics 
similar way define exceptions raised methods java interface 
similarly underlying soap messaging layer provides soap fault applications communicate error information 
error mechanisms soap wsdl help support errors raised application mechanism exists handling framework failures system errors 
service lifetime management web services differ usual distributed systems 
soap omits features messaging systems distributed object systems distributed garbage collection ii batching messages iii objects requires distributed garbage collection iv activation requires 
web services support explicit activation deactivation services difficult lifetime management control 
common implementations time expiry mechanism controlling underlying resources 
fault tolerance web services service infrastructures single process may part multiple applications 
rollback initiated standard fault tolerance mechanisms mentioned earlier 
propose fault tolerance vertical layers web services stack 
earlier discussion described need fault tolerance service infrastructure 
rest discuss special requirements layer 
architecture overview fault tolerant system applied web services architecture 
top shows various components application service composition application domain fault manager fault detectors service provider web services hosting environment modified soap layer message log web service wsdl dynamic stub service provider web service service implementation dynamically bound services dynamically bound fault tolerance library web service fig 

architecture fault tolerant web services fault tolerance infrastructure specific application instance location independent 
lower half represents modifications existing hosting environment services 
modifications case classified set changes messaging layer refer section detailed description set interfaces supported individual services 
henceforth refer upper half application layer lower half service layer 
general framework provides capability 
detect fault failure 
estimate damage caused decide strategy recovery 
repair fault 
restore application state 
framework differs traditional frameworks corba employs pronged strategy recover fault local recovery mechanism global recovery mechanism 
context local recovery restricted recovery individual service instance global recovery applies entire application 
local recovery mechanism tries service instance minimal intervention global recovery mechanism 
local recovery mechanism failure notification global recovery mechanism case failure recover fault locally 
architecture imitates hour glass model restrict dependency layers minimal set interfaces ordination layers 
application layer assumes application instance aggregates set service instances provide capability application 
concept service aggregation known service composition central definition virtual organisation vo 
definition service composition restricted vos extended service composition expressed way workflow specification wsfl lang composition service may created statically design time created dynamically negotiation techniques enactment description wsfl technique 
detailed discussion negotiations composition services outside scope 
application layer assumes exists description service composition refer obtaining list collaborating services 
application layer initialized application instance enactment composition 
instantiation data held composition definition provided explicitly creation 
application layer implements set key components 
application uses services composition provide capability 
application directly interact global fault manager refer definition allow application framework interact behalf 

global fault manager coordinator interacts applications framework underlying services implement fault tolerant system 
fault manager responsible monitoring fault diagnosis checkpoint rollback ordination may central distributed 

service entity bound interface definition usually wsdl description executes independent process process web services hosting environment 

fault detector fault detector detects change perceived ideal environment uses software interrupts fault manager notify failure 
addition providing context fault may provide behavioral override allowing applications extend fault notification mechanism 
global fault manager interacts set services specified service composition 
underlying services needs support set interfaces enable communication local global fault managers 
local fault manager coordinates independent checkpointing rollback individual service monitors service supports fault detector interface creating fault notifications 
local fault manager interacts messaging layer initiate blocking non blocking recovery replay messages 
global fault manager relies set fault detectors send fault notifications 
application register custom list detectors addition supported individual services 
modified soap layer provides message logging message replay capability acknowledge receipt processing message 
provides interfaces interaction global fault manager local fault managers 
modifications layer allow application framework maintain log messages selectively suspend communication services 
enable framework isolate service instance rest system local recovery 
addition ability suspend communication helps rollback providing ability isolate affected set services 
modifications soap messaging layer enable support fault tolerance message checkpointing rollback fault tolerance object replication 
section describe interactions various components framework implementing message checkpointing rollback 
discussion describe framework support fault tolerance object replication 
implementation ibm apache soap ibm web sphere application server ibm web hosting environment implement proposed framework 
implementation provides modified soap layer different libraries initialise application framework set plug ins various application types 
application framework allows application specify service composition support design time run time compositions services 
current implementation framework assumes service compositions static immutable framework modified allow dynamic compositions complement uddi support dynamic discovery binding services 
application layer implemented part application instances execution space web service 
case application framework creates initializes global fault manager 
global fault manager accepts fault tolerance mechanism specific parameters application type immutable parameters uses service composition discover establish contact local fault managers performs phase commit checkpoint operation coordinate checkpointing activity service instances 
local fault manager implemented set libraries bound dynamically service code 
local fault manager interacts modified soap layer control flow messages recovery mechanism may may support non blocking checkpoint rollback 
case failure local fault manager categorizes fault tries recover fault 
certain cases may possible recover service locally rollback current state replaying messages 
case full recovery possible local fault manager tries recovering maximal state fault notification global fault manager 
notification global fault manager initiates roll back notifying affected services 
dependency set recovery provided application 
additionally fault detectors provide dependency set current fault provision specifically useful case compositions different protocols support different points 
example service composition may consist set intranet internet services services intranet may iiop inter service communication connect inter net soap layer 
rollback implemented phase commit operation 
framework ensures loose coupling supporting different fault mechanisms local global fault managers 
addition checkpointing rollback mechanism fault tolerance object replication improve fault tolerance applications 
possible ways enable web services hosting environment create set redundant services define mechanism active passive replication services client redirection 
detailed discussion replication fault tolerance scope discussion 
successfully implemented fault tolerant architecture web services affecting interoperability existing services 
framework demonstrates method effectively decoupling local global fault recovery mechanisms 
provides capability monitoring individual service instances service hosts 
algorithm independence support different application types allow provide fault tolerant capabilities web services internally employ different programming models 
dynamic varying composition services issue needs addressed 
depends composition schemes evolve research web services 
research funded part epsrc mygrid project gr epsrc project gr uddi standards 
www uddi org 
wsdl spec 
www org tr wsdl 
xml protocol working group 
www org xp group 
soap standards 
web services hosting technology 
www alphaworks ibm com tech december 
bhargava 
independent checkpointing concurrent rollback recovery distributed systems optimistic approach 
proceedings th ieee symposium reliable distributed systems pages 
cox xue keane 
grid computational data resource sharing engineering optimisation design search 
ieee proceedings icpp workshops pages valencia spain september 
johnson wang 
rollback recovery protocols message passing systems 
ian foster carl kesselman jeffrey nick steven tuecke 
physiology grid open grid services architecture distributed systems integration 
technical report argonne national laboratory 
ian foster carl kesselman steve tuecke 
anatomy grid 
enabling scalable virtual organizations 
international supercomputer applications 
david johnson willy zwaenepoel 
recovery distributed systems optimistic message logging checkpointing 
proc 
th annual acm symp 
principles distributed computing pages toronto canada 
frans kaashoek raymond henri bal andrew tanenbaum 
transparent fault tolerance parallel orca programs 
proceedings symposium experiences distributed multiprocessor systems iii pages 
sean landis maffeis 
building reliable distributed systems corba 
theory practice object systems 
prof dr frank leymann 
web services flow language 
www ibm com software solutions webservices pdf wsfl pdf may 
member ibm academy technology ibm software group 
singhal 
comprehensive low overhead process recovery quasi synchronous checkpointing 
luc moreau 
agents grid comparison web services part transport layer 
ieee international symposium cluster computing grid berlin germany may 
judith myerson 
web services architectures 
www com content articles myerson asp january 
omg www omg org docs formal pdf 
fault tolerant corba december 
version 
scales lam 
transparent fault tolerance parallel applications networks workstations 
proceedings usenix annual technical conference pages san diego ca usa 
robert strom yemini 
optimistic recovery distributed systems 
acm transactions computer systems 
satish thatte 
xlang web services business process design 
www com team xml xlang default htm 
