implementing push relabel method maximum flow problem boris cherkassky central institute economics mathematics st moscow russia cher su andrew goldberg computer science department stanford university stanford ca usa goldberg cs stanford edu september 
study cient implementations push relabel method maximum ow problem 
resulting codes faster previous codes faster problem families 
speedup due combination heuristics implementation 
exhibit family problems known methods quadratic time growth rate 
andrew goldberg supported part nsf ccr powell foundation 
done boris cherkassky visiting stanford university computer science department supported mentioned nsf powell foundation 

maximum ow problem classical combinatorial problem comes wide variety applications 
study implementations push relabel method problem 
basic methods maximum ow problem include network simplex method dantzig augmenting path method ford fulkerson blocking ow method push relabel method goldberg tarjan 
earlier algorithm cherkassky features push relabel method 
best theoretical time bounds maximum ow problem method follows 
algorithm goldberg tarjan runs nm log time algorithm king runs nm time constant algorithm runs nm nlog time high probability algorithm ahuja runs nm log time 
prior push relabel method studies shown algorithm practice superior methods including network simplex method ford fulkerson algorithm algorithm tarjan algorithm 
see 
studies show push relabel method superior method practice 
study implementations push relabel method 
evaluate operation orderings distance update heuristics 
previous implementations global relabeling gap relabeling heuristics 
result implementation faster problem families asymptotically faster previous implementations 
evaluate di erent operation selection strategies nd maximum distance selection best problems 
exhibit problem instance generator running time implementations grow quadratically 
dimacs problem families extensively tests growth rate signi cantly smaller 
implementations problem generator available mail server 
organized follows 
section review push relabel method 
section introduce global relabeling gap relabeling heuristics 
describe implementations evaluated problem families evaluation section 
experimental results appear section 
section 
push relabel method section review basic concepts push relabel method 
assume reader familiar 
see 
phase variant ofthe method implementation 
push 
applicability active admissible 
action send min ef uf units ow relabel 
applicability active push apply action replace min ef fd 

update operations 
pushing operation updates pre ow relabeling operation updates distance labeling 
ow network directed graph node set arc set respectively source sink respectively non negative capacity function arcs 
de ne jv jej assume arc arc 
ow function arcs satis es capacity constraints arcs conservation constraints nodes source sink 
conservation constraint node indicates excess ef de ned di erence incoming outgoing ows equal zero 
pre ow satis es capacity constraints relaxed version conservation constraints requires nonnegative 
arc residual ow increased violating capacity constraints saturated 
residual capacity uf arc amount arc ow increased 
residual graph induced residual arcs 
distance labeling satis es conditions residual arc 
residual arc 
node active fs tg ef 
push relabel method maintains pre ow distance labeling initially pre ow equal zero arcs ef zero nodes ef set number bounds potential ow value sum arc capacities 
initially smaller distances gf method repeatedly performs update operations push relabel described 
active nodes rst stage method terminates 
second stage method discussed section 
update operations modify pre ow labeling increases ef uf decreases ef amount 
push saturating uf push nonsaturating 
relabeling sets label equal largest value allowed valid labeling constraints 
discharge 
applicability active 
action fv wg current edge list false repeat admissible push fv wg edge edge list replace fv wg current edge edge list rst edge edge list current edge list true ef list list relabel 
discharge operation 
ciency push relabel method depends ordering update operations 
low level operations combined follows 
call unordered pair fv wg edge associate values edge fv wg 
list incident edges fv wg xed arbitrary order 
edge fv wg appears exactly lists current edge fv wg current candidate pushing operation initially current edge rst edge edge list main loop implementation consists repeating discharge operation described active nodes 
shall discuss maintenance active nodes 
discharge operation applicable active 
operation iteratively attempts push excess current edge fv wg pushing operation applicable edge 
operation replaces fv wg current edge edge edge list fv wg edge list rst edge list current operation stops excess reduced zero 
remaining issue order active nodes processed 
natural orders suggested 
fifo algorithm maintain set active nodes queue selecting discharging front node queue adding newly active nodes rear queue 
hl algorithm select discharging node highest label 
worst case fifo algorithm runs time largest label algorithm runs pm time 
hl algorithm implementation maintains array sets bi index array 
set bi consists active nodes label represented list insertion deletion take time 
index largest label active node 
initialization placed set 
iteration algorithm removes node bb processes discharge operation updates algorithm terminates active nodes 
rst stage excess sink equal minimum cut value set nodes reach sink gf induces minimum cut 
second stage method converts ow 
done essentially computing decomposition standard way see reducing paths nodes ow excess 
gain ciency implementation computes partial decomposition reducing ow mentioned paths ow cycles soon discovered 
experience second stage takes signi cantly time rst stage 

heuristics push relabel method described poor practical performance 
intuitively relabel local operation method loses global picture distances 
global relabeling heuristic updates distance function computing shortest path distances residual graph nodes sink 
done linear time backwards breadth rst search computationally expensive compared push relabel operations 
global relabelings performed periodically relabelings 
heuristic drastically improves running time 
useful relabeling heuristic gap relabeling discovered independently cherkassky derigs meier observation 
integer suppose certain stage algorithm nodes distance label nodes sink reachable nodes 
labels nodes may increased 
note nodes active 
maintain linked lists nodes distance label overhead detecting gap small 
done gap relabeling heuristic useful involves processing nodes determined disconnected sink 
gap relabeling signi cantly improves practical performance push relabel method usually global relabeling 
heuristics independent global relabeling discovers nodes disconnected sink gaps 
overhead gap relabeling small 
gaps discovered run implementation uses heuristics running time implementation uses global relabeling 
cases gaps discovered implementation signi cantly faster 
test test optimization average running time average running time level real user system real user system 

average running times seconds test programs 
experimental setup 
computing environment 
experiments conducted sun sparc workstation model mhz processor running sun unix version 
workstation megabytes memory 
codes experiments written compiled gcc compiler version optimization option 
performed machine calibration experiment designed organizers dimacs international algorithm implementation challenge 
shows average running times test programs compiled optimization 

problem families 
problem families experimental evaluation 
dimacs challenge 
families produced generators available dimacs 
rst generator goldfarb second washington developed anderson students seminar third ac version generator 
seventh problem family produced generator ak 
generator produces problem instances hard push relabel methods 
dimacs generators randomness produce di erent instances parameter values pseudorandom generator seed available 
generators take pseudorandom generator seed parameter system clock obtain seed 
experiments repeatable modi ed generators take seed argument 
problem class problem size test seeds report average running times 
ak generator produces deterministic network value problem families follows 
long 
network problem instances di erent nodes family generated program parameters wide 
network nodes family generated program parameters washington long 
network nodes family generated washington program function arg arg arg washington wide 
network nodes family generated washington program function arg arg arg washington line moderate 
network family nodes generated washington program function arg arg arg 
acyclic dense 
network family nodes generated ac program options set produce fully dense graphs random capacities maximum capacity set ak 
network family nodes arcs generated ak program takes parameter 
implementations evaluated 
experimented variants method report codes prf prf implement hl fifo algorithms respectively 
codes global gap relabeling heuristics 
global relabelings performed relabelings 
implementations adjacency list representation input graph 
tried operation selection strategies including highest excess selection selection various hybrid strategies 
performance strategies worse hl strategy 
experimented various global relabeling frequencies 
simple strategy performing global relabeling cn relabelings constant works quite 
best choice depends problem family implementation better implementation problem class worse problem class 
value experiments compromise 
experiments prf code fastest 
particular prf faster prf dimacs families consider 
contrast results hl version faster fifo version families 
put performance codes perspective implemented algorithm df 
algorithm performs best practice algorithms push relabel method 
obtained implementation fifo push relabel algorithm anderson asf 
implementation uses global relabeling heuristic global relabelings performed relabelings 
results experiments give running times seconds 
running time user cpu time excludes input output times 
obtain data point code runs code problems produced generator parameters pseudorandom generator seed 
data tabulate average ak generator randomness 
runs 
programs exceeding cpu time limit seconds including problems study seconds terminated corresponding table entries left blank 
plot data addition 
plots logarithmic scales 

experimental results experiments show hl implementation prf fastest code problem instances report 
fifo implementation prf second fastest 
problem families implementation performs families noticeably slower factor 
di erence codes biggest long narrow networks 
networks highest label selection strategy tends create gaps gap relabeling heuristic takes advantage 
heuristic nature gap relabeling especially clear prf long networks number nodes eliminated gap relabelings varies drastically problem instance running times 
gap relabeling heuristic helps combined hl algorithm combined fifo algorithm 
reason follows 
suppose implementation hl algorithm gap relabeling heuristic gap arises execution 
implementation wastes time processing nodes discarded heuristic distance label nodes increases global relabeling performed 
similar situation fifo implementation progress processes active nodes 
experimental results con rm combination hl selection gap relabeling especially ective 
implementations gap relabeling highest label version slower fifo version acyclic dense networks 
holds implementations wide networks hl version slower fifo version seconds vs node problems 
tests prf faster prf 
particular node problems running times seconds vs 
gap relabeling turned problems performance prf degrades substantially performance prf code faster 
asf code implements fifo algorithm prf applies global relabeling relabelings vs prf gap relabeling 
di erences account fact exception asf slower prf 
sparse networks relabeling frequency codes similar code performance networks 
networks prf somewhat faster largest washington long problems asf little faster 
problem class global relabeling frequency asf times prf works better 
problem classes ak problems prf substantially faster gap relabeling heuristic 
dense networks asf global relabelings performs asymptotically worse asf 
implementation df algorithm slowest asymptotically acyclic dense problem family substantially faster asf 
indirect comparison shows prf faster implementations studied problem classes studied papers including wide long washington line moderate acyclic dense families 
experimental data problem families studied comments 
running time logscale df asf prf prf number nodes power nodes arcs df asf prf prf 
wide family data 

wide family 
gives data wide problem family 
family prf asymptotically faster df asf 
prf faster prf factor 
running time logscale df asf prf prf number nodes power nodes arcs df asf prf prf 
long family data 

long family 
gives data long problem family 
prf performs best problem instances performance varies highly depending number gaps discovered 
performance fifo implementations similar prf slightly faster asf 
df asymptotically slower codes 
running time logscale df asf prf prf number nodes power nodes arcs df asf prf prf 
washington wide family data 

washington wide family 
gives data washington wide problem family 
family prf fastest code 
asf slightly faster prf slower factor smallest problems slightly faster largest problems 
factor slower smaller problems 
df asymptotically slower codes 
running time logscale df asf prf prf number nodes power nodes arcs df asf prf prf 
washington long family data 

washington long family 
gives data washington long problem family 
relative performance codes similar washington wide family performance di erence somewhat greater 
prf exhibits large running time variation instance similar long problems 
running time logscale df asf prf prf number nodes logscale nodes arcs df asf prf prf 
washington line moderate family data 
number arcs approximate exact number depends seed 

washington line moderate family 
gives data washington line moderate problem family 
family prf fastest code prf little slower 
codes signi cantly slower df slowest code 
running time logscale asf df prf prf number nodes logscale nodes arcs df asf prf prf 
acyclic dense family data 

acyclic dense family 
gives data acyclic dense problem family 
family prf prf df exhibit similar performance prf fastest df slowest codes 
asf asymptotically slower 
running time logscale df asf prf prf number nodes logscale nodes arcs df asf prf prf 
ak family data 

ak family 
gives data ak problem family 
family codes exhibit roughly quadratic growth rate 
fastest code prf order magnitude faster slowest code df 

concluding remarks best implementation push relabel method prf faster implementation algorithm df problem families prf asymptotically faster large problems speedup orders magnitude 
implementation algorithm perform better basis indirect comparison 
believe highest label variant push relabel method global gap relabeling heuristics best currently available method solving maximum ow problems 
experiments show gap relabeling heuristic global relabeling heuristic implementations push relabel method especially highest label selection variant 
design problem families bad prf code bad prf code 
fact combined reasonable performance prf code code natural candidate consider prf perform 
push relabel method superior method practice wide margin global gap relabeling heuristics 
experiments ak problem family show heuristics push relabel implementations take quadratic time certain problems 
growth rate signi cantly smaller problem families 
code availability codes implementations ak generator available mail server codes 
list available software instructions obtaining software send mail ftp request theory stanford edu put send opt code info subject line 
reply contain desired information 
acknowledgments robert kennedy help preparation richard anderson providing maximum ow code 

ahuja orlin tarjan 
improved time bounds maximum flow problem 
siam comput 

anderson 
goldberg algorithm maximum flow computational study 
johnson mcgeoch editors network flows matching dimacs implementation challenge pages 
ams 

hagerup mehlhorn 
maximum flow computed nm time 
proc 
icalp 

cherkassky 
fast algorithm computing maximum flow network 
editor collected papers issue combinatorial methods flow problems pages 
institute systems studies moscow 
russian 
english translation appears ams trans vol 
pp 


cohen megiddo 
strongly nc algorithms detecting cycles dynamic graphs 
proc 
st annual acm symposium theory computing pages 

dantzig 
application simplex method transportation problem 
koopmans editor activity analysis production allocation pages 
wiley new york 

dantzig 
linear programming extensions 
princeton univ press princeton nj 

derigs meier 
implementing goldberg max flow algorithm computational investigation 
zor methods models operations research 

derigs meier 
evaluation algorithmic re nements proper data structures pre ow push approach maximum flow 
asi series computer system sciences volume pages 
nato 

dinic 
algorithm solution problem maximum flow power estimation 
soviet math 
dokl 

edmonds karp 
theoretical improvements algorithmic ciency network flow problems 
assoc 
comput 
mach 

ford jr fulkerson 
flows networks 
princeton univ press princeton nj 

goldberg 
new max flow algorithm 
technical report mit lcs tm laboratory computer science 

goldberg 
cient graph algorithms sequential parallel computers 
phd thesis january 
available technical report tr lab 
computer science 

goldberg tardos tarjan 
network flow algorithms 
korte lovasz schrijver editors flows paths vlsi layout pages 
springer verlag 

goldberg tarjan 
new approach maximum flow problem 
proc 
th annual acm symposium theory computing pages 

goldberg tarjan 
new approach maximum flow problem 
assoc 
comput 
mach 

goldfarb 
computational comparison dinic network simplex methods maximum flow 
annals oper 
res 

johnson mcgeoch editors 
network flows matching rst dimacs implementation challenge 
ams 


determining maximal flow network method pre ows 
soviet math 


king rao tarjan 
faster deterministic maximum flow algorithm 
proc 
rd acm siam symposium discrete algorithms pages 

nguyen 
implementations goldberg tarjan maximum flow algorithm 
johnson mcgeoch editors network flows matching dimacs implementation challenge pages 
ams 

tarjan 
simple version blocking flow algorithm 
operations research letters 

