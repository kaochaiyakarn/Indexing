multiversion linear quadtree spatio temporal data tzouramanis michael vassilakopoulos yannis manolopoulos data engineering lab department informatics aristotle university thessaloniki greece theo csd auth gr computer org csd auth gr 
research spatio temporal databases largely focused extensions access methods proper handling time changing spatial information 
multiversion linear quadtree mvlq spatio temporal access method multiversion trees mvbt embedding ideas linear region quadtrees :10.1.1.49.4094
specifically storing independent numerical data having different transaction time consecutive image store group codewords share transaction time codeword represents spatial subregion 
new structure may index mechanism storing accessing evolving raster images 
conducted thorough experimentation sequences real synthetic raster images 
excellent survey advances years spatio temporal database research 
fundamental objective proposed study efficient spatio temporal access method storing accessing evolving raster images regional data 
efficiency considered terms space requirements time performance query processing 
new indexing structure transaction time called multiversion linear quadtree mvlq 
motivation devising new spatio temporal access method multiversion tree mvbt proposed method differs number reasons :10.1.1.49.4094
storing independent numerical data having different transaction time consecutive image mvlq stores group codewords share transaction time codeword represents spatial subregion 
consequence algorithms insertion deletion update processes mvlq significantly different corresponding algorithms mvbt 
due fact batch operation insertions deletes updates data records specific transaction time may significant different policies node splitting merging 
mvlq analogous functionality significantly different structure proposed authors overlapping linear quadtrees :10.1.1.24.2641
motivation devising new spatio temporal access method multiversion tree mvbt proposed method differs number reasons :10.1.1.49.4094
storing independent numerical data having different transaction time consecutive image mvlq stores group codewords share transaction time codeword represents spatial subregion 
consequence algorithms insertion deletion update processes mvlq significantly different corresponding algorithms mvbt 
due fact batch operation insertions deletes updates data records specific transaction time may significant different policies node splitting merging 
mvlq analogous functionality significantly different structure proposed authors overlapping linear quadtrees :10.1.1.24.2641
structures origin linear region quadtree 
mvlq stores codewords modified mvbt apply technique overlapping sequence 
purpose article mvlq initial experimental study time performance temporal window queries provide results variety parameter settings 
conducted thorough experimentation sequences real synthetic raster images 
se respectively 
second number pair quadtree level node located 
linear representation quadtree nodes called fd fixed length depth linear implementation 
interested reader find linear implementations literature fl fixed length vl variable length see details 
reasons explained choice linear representation black quadtree nodes fd fixed length depth implementation :10.1.1.24.2641
right part fig 
presents different linear quadtrees obtained corresponding quadtrees middle 
simplicity fd locational codes quadcodes sequel black nodes appear linear quadtrees levels nodes shown 
multiversion linear quadtree sequence images stored linear quadtree image labeled unique timestamp ti updates overwrite old versions inserted image retained 
ime ti key split occurs leaf splits 
assuming node capacity key split entries original node kept node rest moved new leaf 
ime ti copy original leaf allocated acceptable change past states spatio temporal structure 
case remove non past versions quadcodes copy node 
operation called version split number versions quadcodes version split range constant integer :10.1.1.49.4094:10.1.1.49.4094
version split leads quadcodes merge attempted sibling copy sibling containing versions quadcodes choice depends starttime field sibling 
version split leads quadcodes node key split performed 
tzouramanis vassilakopoulos manolopoulos deletion real world deletion time point tj implementation depends starttime field corresponding leaf 
ime tj appropriate entry form removed leaf 
physical deletion leaf checked holds entries 
number entries deletion completed 
number threshold node underflow handled classical tree difference sibling exists preferably right check starttime field proceeding merge key redistribution 
ime tj deletion handled logical deletion updating temporal information appropriate entry ti tot ti tj ti insertion time 
entry logically deleted leaf exactly versions version underflow occurs causes version split node copying versions quadcodes new node :10.1.1.49.4094:10.1.1.49.4094
evidently number versions quadcodes version split merge attempted sibling copy sibling 
update updating changing value level fd code leaf entry time point tj implemented logical deletion entry ii insertion new version entry new version entry new level value example consider consecutive images respect timestamps left fig 

mvlq structure insertion image fig 
window queries primary importance basis number operations executed 
window sequence binary images stored associated unique timestamp ti considered satisfaction queries mvlq strict containment window query border intersect window query general border intersect window query cover window query fuzzy cover window query definitions algorithms processing queries described applied mvlq slight modifications 
brevity description modifications included report 
order improve spatio temporal query processing raster images added horizontal pointers mvlq leaf 
pointers introduced adapted spatiotemporal data :10.1.1.24.2641
way need top traverse consecutive tree instances search history specific fd code excessive page accesses avoided 
names pointers pointer bc pointer pointer fc pointer 
roles functions described :10.1.1.24.2641
alternative naive approaches answering spatio temporal queries easy devise 
order improve spatio temporal query processing raster images added horizontal pointers mvlq leaf 
pointers introduced adapted spatiotemporal data :10.1.1.24.2641
way need top traverse consecutive tree instances search history specific fd code excessive page accesses avoided 
names pointers pointer bc pointer pointer fc pointer 
roles functions described :10.1.1.24.2641
alternative naive approaches answering spatio temporal queries easy devise 
respective algorithms perform suitable range search mvlq version corresponds time interval separately stored starting respective mvlq roots 
alternative approaches take account horizontal pointers resulting significantly worse performance 
experiments preliminaries multiversion linear quadtree spatio temporal data mvlq structure implemented experiments performed parameter values 
respective algorithms perform suitable range search mvlq version corresponds time interval separately stored starting respective mvlq roots 
alternative approaches take account horizontal pointers resulting significantly worse performance 
experiments preliminaries multiversion linear quadtree spatio temporal data mvlq structure implemented experiments performed parameter values 
assuming page size size time interval bytes size fd locational code size pointer bytes size level fd code byte conclude internal nodes mvlq accommodate tr entries leaves contain records format 
node capacity useful time complexity choose large small possible :10.1.1.49.4094
guarantee space utilization useful choose large proved maximum value equal parameter inequality hold leaf internal node capacity equal values experimentation parameters :10.1.1.49.4094
evolving images synthetic real raster binary images sizes pixels 
experiments synthetic real images number evolving images 
size image kbytes image kbytes worst case 
alternative approaches take account horizontal pointers resulting significantly worse performance 
experiments preliminaries multiversion linear quadtree spatio temporal data mvlq structure implemented experiments performed parameter values 
assuming page size size time interval bytes size fd locational code size pointer bytes size level fd code byte conclude internal nodes mvlq accommodate tr entries leaves contain records format 
node capacity useful time complexity choose large small possible :10.1.1.49.4094
guarantee space utilization useful choose large proved maximum value equal parameter inequality hold leaf internal node capacity equal values experimentation parameters :10.1.1.49.4094
evolving images synthetic real raster binary images sizes pixels 
experiments synthetic real images number evolving images 
size image kbytes image kbytes worst case 
case small stored main memory 
