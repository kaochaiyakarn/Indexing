ace framework optimizing music classification cory mckay rebecca daniel li music technology mcgill university montreal canada cory mckay mail mcgill ca music technology mcgill university montreal canada acm org music technology mcgill university montreal canada daniel mail mcgill ca music technology mcgill university montreal canada li mail mcgill ca music technology mcgill university montreal canada ich music mcgill ca presents ace autonomous classification engine framework optimizing classifiers 
set feature vectors ace experiments variety classifiers classifier parameters classifier ensembles dimensionality reduction techniques order arrive configuration problem hand 
addition evaluating classification methodologies terms success rates functionality incorporated ace allowing users specify constraints training classification times amount time ace arrive solution 
ace designed facilitate classification new pattern recognition provide flexibility experience 
ace packaged audio midi feature extraction software certainly existing feature extractors 
includes discussion ways existing general purpose classification software adapted meet needs music researchers shows ideas implemented ace 
standardized xml format communicating features information classifiers proposed 
special emphasis placed potential classifier ensembles remained largely mir community date 
brief theoretical discussion ensemble classification order promote powerful approach 
keywords music classification classifier ensembles combining classifiers optimization mir permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
queen mary university london classification techniques play essential role mir related research areas 
include genre classification similarity analysis music recommendation performer identification composer identification instrument identification name just 
examination mirex evaluation topics clearly demonstrates importance classification mir 
despite importance relatively little developing standardized easy classification software particular needs music mind 
survey published mir papers reveals researchers implement systems shelf pattern recognition software developed fields music 
approach results time wasted duplication effort potentially relatively limited software time devote building classifiers part larger research project 
general pattern recognition frameworks limited applications inevitably encounters complications limitations difficulties due particularities music 
standardized classification software especially adapted mir significant benefit 
fortunately done area 
tzanetakis cook particular effectively researchers downie great promise 
ace autonomous classification engine proposed framework builds important systems addresses number areas remain dealt 
section discusses shortcomings general purpose pattern recognition frameworks respect music proposes specific improvements 
particular emphasis put importance standardized method transmitting features feature extractors classification software 
xml file formats proposed order address issue 
section concentrates grouping classifiers ensembles 
mir researchers perform experiments variety classifiers order find ones best suited particular tasks 
experiments genre classification system mckay conducted combining classifiers ensembles 
surprising proven effectiveness ensemble algorithms adaboost freund shapire 
classifier ensembles gaining increasing attention machine learning pattern recognition communities past decade mir community certainly benefit experimenting wide variety potentially powerful approaches available 
particularly true considering asymptotic behaviour success rates appear demonstrating variety mir areas observed aucouturier pachet 
course classifier ensembles come cost added complexity variety approaches avail able daunting 
section presents brief survey field order encourage experimentation classifier ensembles mir research 
classifier variety sophistication classification techniques difficult decide techniques parameters 
experienced pattern recognition researchers resort experimentation 
ace framework designed deal problem automatically 
ace performs optimization experiments different dimensionality reduction techniques classifiers classifier parameters classifier ensemble architectures 
particular efforts investigate power feature weighting mckay 
functionality built ace allows analyze effectiveness different approaches terms classification accuracy training time classification time 
allows users experimentally determine best set techniques particular priorities 
ace may directly classifier 
users selected classifier wish ace optimization pre existing knowledge need provide ace feature vectors model classifications 
ace trains presents users trained classifier 
important advantage ace opensource freely distributable 
ace implemented java means framework portable easy install 
ace built modular extensible design philosophy 
simple documented matter users build ace 
section presents ace framework 
implementation functionality software discussed benefits offers mir community 
classification system features receives 
ace packaged easy flexible importantly highly extensible feature extraction software extracting features audio midi files 
requirement ace feature extractors ace designed feature extractors generate appropriately formatted output 
section presents brief overview bundled feature extraction software 
feature extraction classification computationally intensive 
particularly true system ace exploratory approach 
section details plans adapting ace distribute workload multiple computers 
section shows results test classification tasks performed ace order evaluate effectiveness 
include tests standard benchmarks uci machine learning repository mir specific tasks 
section summarizes section presents ideas additions ace 
developing classification framework suited mir limitations existing systems development general pattern recognition software package trivial 
application domain needs peculiarities occur researchers fields 
surprise general pattern recognition frameworks available important weaknesses respect mir 
general appears van der weka witten frank general frameworks mir 
matlab toolbox weka java application code library 
frameworks designed powerful tools limitations applied mir 
disadvantage reliant matlab proprietary software package 
free academic purchase matlab order 
furthermore pay wishes commercially licence permit redistributed 
means software developed distributed special permission distributed open licence 
certainly suitable basic research prototyping problematic respect serious application development 
introduces important concerns respect mir software 
general consensus mir community appears supportive free open source fully distributable software 
important ensuring research transparency sharing results essential allowing researchers build 
related importance extensibility modularity 
open research community code freely distributable designed expand easily 
portability documentation ease installation important considerations 
lip service paid principles taken seriously 
uncommon experience potential users discouraged installation difficulties linking errors arcane code documentation 
furthermore mir software usable understandable users variety skill levels 
mir community composed experts wide variety fields reasonable expect highly knowledgeable classification benefit research 
weka data mining framework largely meets requirements 
freely distributable open source relatively documented implemented java platform independence beautifully designed truly pleasure 
includes variety inter faces users different needs abilities 
inevitable general system missing important qualities respect mir 
significant issues related weka file format store features communicate classifiers 
way assign class instance 
possible solution break multi class problem binary classification problems separate file class instances classified belonging belonging class 
alternatively create separate class possible combination classes resulting exponential increase numbers classes 
clear solutions ideal 
unfortunately problem classification systems general just weka 
understandable pattern recognition tasks require classification class 
unfortunately great deal research involves certain unavoidable ambiguities imposition class membership instance unrealistic tasks genre classification types similarity related classification example 
second problem files permit logical grouping features 
feature treated independent quantity relation feature 
encounters multi dimensional features music useful maintain logical relationship components features 
power spectra mfcc bins beat histogram instruments just examples 
maintaining logical relationship values multidimensional features allows perform classifications particularly fruitful ways take advantage interrelatedness particularly respect classifier ensembles 
training neural net mfcc example classifier features rms spectral centroid prove fruitful mixing mfcc features 
third problem files allow labelling structuring instances 
instance stored collection feature values class identifier identifying metadata 
music appropriate extract features number windows 
furthermore features may extracted window windows recording 
weka files provide way associating features window recording comes provide means identifying recordings storing time stamps associated window 
means information stored organized processed external software unspecified non standardized file format 
fourth problem way imposing structure class labels 
encounters hierarchical structures music cases genre categories structural analyses 
weka treats class distinct independent 
means native way classification techniques structured taxonomies 
criticisms meant weka way 
quite contrary fact weka singled arguably best framework available 
positive aspects weka easy write java code excellent existing weka code adds functionality precisely ace 
issues discussed apply existing systems developed specifically music mind 
mentioned section wellknown powerful systems 
pioneering system effectively number research projects 
unfortunately portability installation issues system 
currently centred audio classification currently include midi functionality 
unfair compare general classification systems weka originally designed primarily feature extractor performs task 
regularly maintained creator george tzanetakis plans extend functionality possibly port increasing amounts weka functionality 
graphical feature extraction classification framework parallel data mining machine learning system 
alpha release impossible fairly evaluate promises extremely powerful flexible system mir prototyping 
unfortunately inherit licensing problems potentially limit prototyping 
licence complicated researchers outside obtain forbids commercial applications 
means system uses tasks 
furthermore open source 
feature file formats clear section important need standardized flexible file format storing feature values communicating classifiers 
existing formats certainly suitable types tasks designers mind insufficient particular needs mir researchers 
xml file formats order attempt meet need 
xml chosen standardized format parsers widely available extremely flexible 
verbose format result space efficient formats verbosity corresponding advantage allows humans easily read files 
particularly ful working debugging feature extractors 
important priority developing feature file format enforce clear separation feature extraction classification tasks particular researchers may reasons particular feature extractors particular classification systems 
file format possible feature extractor communicate features type classification system 
portability possible features generated different extractors classification system set extracted features multiple classification systems 
reusability files important consideration 
example useful set extracted features variety tasks genre classification artist identification 
similarly convenient reuse model classifications different sets features 
example classify corpus audio recordings perform task symbolic recordings corpus model classifications 
unfortunately current feature file formats merge feature values model classifications making kind reusability difficult 
separate files proposed traditionally contained file file storing feature values storing model classifications 
unique keys file names merge files 
model classification file omitted unsupervised learning classifying unknown patterns 
propose additional optional file specifying taxonomical structures 
enables specify relationships classes information useful tasks hierarchical classification 
file omitted flat classification 
final optional file format proposed storing metadata features basic descriptions details cardinality multi dimensional features 
strictly necessary file helps potential full independence feature extractors classifiers 
researcher classifier mailed feature values file feature definitions file researchers example need additional information feature extractor features extracted 
explicit document type definitions dtd proposed ace xml formats shown figures 
seen features may stored instances called data sets may may sub sections 
correspond recording windows example 
sub section features data set may features 
sub section may start stamps order indicate portion data set corresponds 
possible windows arbitrary varying sizes element feature vector file comments data set element comments pcdata element data set data set id section feature element data set id pcdata element section feature attlist section start cdata cdata element feature name element name pcdata element pcdata 
xml dtd ace xml file format storing feature values 
element classifications file comments data set element comments pcdata element data set data set id misc info role classification element data set id pcdata element misc info pcdata attlist misc info info type cdata element role pcdata element classification section class element section start class element class pcdata element start pcdata element pcdata 
xml dtd proposed ace xml file format storing classifications 
element taxonomy file comments parent class element comments pcdata element parent class class name sub class element class name pcdata element sub class class name sub class 
xml dtd optional ace xml file format storing class taxonomies 
element feature key file comments feature element comments pcdata element feature name description sequential parallel dimensions element name pcdata element description pcdata element sequential pcdata element parallel dimensions pcdata 
xml dtd optional ace xml file format storing feature definitions 
overlap 
feature name identifying possible omit features data sets sub sections appropriate 
feature may values denoted element order permit multi dimensional features 
shows dtd storing model classifications 
format may output classification results 
data set may optional metadata associated 
data set broken potentially overlapping sub sections desired sub section assigned classes 
data set may assigned classes 
sub section start stamps show region influence particular classes 
dtd optional taxonomy format shown 
format allows representation hierarchically structured taxonomies arbitrary depth 
final optional file format storing feature definitions shown 
format enables store name possible feature description applied sub sections data sets dimensions 
classifier ensembles motivation classifier ensembles noted section mir researchers performed experiments multiple classifiers see best suited particular tasks attempted combine classifiers ensembles 
section provides justification doing 
practice combining classifiers ensembles inspired notion combined opinions number experts correct single expert 
ideally ensemble perform better individual component classifiers 
case necessarily guaranteed 
question worth increases computational demands implementation complexity accompany ensemble classification guaranteed increase performance 
dietterich proposed reasons classifier ensembles beneficial 
reason referred dietterich statistical reason follows 
suppose number trained classifiers 
knows performed training testing potentially validation data estimate generalize universe possible inputs 
classifiers performed similarly testing validation data way knowing fact best classifier 
chooses single classifier runs risk accidentally choosing poorer ones 
statistical argument particularly strong cases limited training testing data available evaluation individual classifiers test sets high error 
second reason referred computational reason applies classifiers train hillclimbing random search techniques 
training multiple neural networks example training data result significantly different trained classifiers depending randomly generated initial conditions 
aggregating classifiers ensemble take advantage multiplicity solutions offered different classifiers 
computational argument highlights particular appropriateness instable classifiers ensemble classification lead variety useful solutions slightly modified training data 
final reason termed referential fact guarantee types classifiers particular problem converge theoretically optimal solution 
provide simplified example say researcher mistakenly believes problem linear decides linear classifiers 
reality optimal classifier non linear possible linear classifiers consideration perform optimally individually 
ensemble linear classifiers approximate non linear decision boundary potentially perform better single linear classifier 
essential element effectiveness classifier ensembles diversity 
classifiers ensemble tend misclassify instances combining results little benefit 
contrast greater amount independence classifiers result errors individual classifiers overlooked results ensemble combined 
successful ensemble techniques bagging boosting see section increasing classifier diversity 
known effectiveness algorithms adaboost freund shapire provide convincing experimental evidence efficacy classifier ensembles 
surprising influential researchers josef kittler continue emphasize value 
overview classifier ensemble techniques depth survey ensemble classification scope brief overview order promote classifier ensembles mir community 
kuncheva book excellent resource looking information 
methods combining classifiers ensembles divided groups 
classifier fusion involves merging results classifiers method voting 
second classifier selection involves system dynamically select specialist classifiers particular input pattern 
mixture experts method called stacking example hybrid method classifier trained weight votes classifiers ensemble 
way features training data divided component classifiers play important role success failure ensembles 
bagging boosting powerful techniques fact order attempt maximize diversity correspondingly ensemble effectiveness 
bagging involves bootstrapping train classifiers 
means classifier acquires training set sampling available training instances replacement 
boosting involves iteratively training classifiers instances previous classifiers performed poorly emphasized training sets subsequent classifiers 
adaboost approach variants particularly known success 
boosting tends perform better bagging training data bagging better smaller training sets 
ace ace system designed dual goals increasing classification success rates facilitating process classification users skill levels 
ace implemented java weka framework 
discussed section weka powerful flexible designed limitations respect mir research needs 
key aspect ace adapts weka meet needs including multi class membership hierarchical taxonomies multi dimensional features instance sub sections important ways done implementation ace xml file formats section 
conversion utilities included convert ace xml weka format arguably current de facto standard mir ace xml encouraged superior expressive power 
ace weka possible take advantage weka classification tools 
include classifiers feedforward neural nets support vector machines nearest neighbour classifiers decision tree classifiers bayesian classifiers name just 
variety dimensionality reduction tools available principle component analysis feature selection genetic algorithms exhaustive comparisons best searches 
number classifier combination techniques available including adaboost bagging majority voting stacking 
main features ace automatically performs experiments approaches various parameters order find suited problem particular needs 
different approaches involve tradeoffs classification success rates processing times functionality built ace possible meet needs particular problems allowing users set training testing time constraints 
functionality built ace allows users specify limits long system arrive solution result ace initially pursue promising approaches past experiments similar data output best approaches time 
accomplished having ace monitor performance 
ace incorporation classifier ensembles potential bring significantly improved classification rates mir research 
course may true cases pattern recognition expert recommend specialized solution problem better experimentally ace 
ace intended replace experts automatically provide solutions relatively quickly effortlessly users diverse skill levels 
ace allows peripheral background pattern recognition easily perform high quality classifications variety methods 
important pattern recognition experts rarely specialized knowledge applied fields music experts applied fields rarely expertise pattern recognition 
ace sophisticated pattern recognition accessible mir researchers 
ace provides excellent tool pattern recognition experience wish perform benchmarking comparisons new approaches 
weka ace includes interfaces users different needs 
way ace gui allows users build taxonomies label manage training testing instances manage features control classifier settings carry comparisons classification methodologies train classifiers view results experiments classifications 
second way ace simple command line interface 
interface useful users appropriate configuration files set quick easy method performing tasks batch processing 
final way ace users directly access ace java classes software 
ace entirely open source documented implemented intuitive manner 
feature extraction feature extraction key part classification task 
ace packaged feature extraction applications extracting features audio symbolic recordings respectively 
feature extractors powerful flexible importantly extensible 
designed portability ease ace system 
designed emphasis importance logical separation feature extractors classifiers easily classification frameworks ace 
similarly ace designed arbitrary existing feature extraction systems produce preferably ace xml files 
users free feature extraction software wish may take advantage ace portability install ace platform feature extraction software runs 
provided users feature extraction software interested trying powerful new tools 
symbolic feature library mckay extensive library currently available 

published information 
distributing workload classification techniques computationally intensive especially features large training sets 
issue amplified multiple classifiers 
functionality built ace allow run trials multiple computers parallel order achieve efficient effective reductions execution time 
distributed computing systems currently considered grid weka khoussainov 
grid weka advantage built directly weka 
powerful established environment holds great promise drawback certain licensing issues discussed section 
grid weka allow computation distributed multi purpose workstations dedicated machines compatible range hardware operating system configurations 
ace parallel capabilities exploited access typical computing lab 
distributed aspect system complete server sub system designed contains coordination system database 
necessary ace users may choose dedicate computer server allowing ace run perpetually 
server keep record performances ace operations run particular user cluster generate statistics self evaluation improvement 
ace idle time attempt improve solutions previously encountered currently inactive problems 
benchmark testing groups tests performed verify ace effectiveness 
group consisted tasks beat box recognition experiment reproduction previous class identification experiment 
ace achieved classification success rate class beat box experiment adaboost 
best success rate improved ace reduction error rate 
second set tests involved running ace uci datasets blake merz variety research domains 
results shown table table 
ace classification success rate uci datasets fold cross validation compared published baseline 
data set ace selected classifier success rate ace success rate anneal adaboost audiology adaboost autos adaboost balance scale na bayes diabetes na bayes ionosphere adaboost iris ff neural net labor nn vote decision tree zoo decision tree seen ace performed particularly difficulty data sets 
emphasized ace excellent performance relative published algorithm shown better wide variety alternative algorithms 
statistical uncertainty impossible claim ace results inherently superior show ace certainly achieve results probably better sophisticated state art algorithms 
particularly impressive ace forced restrict learning schemes minute training testing typical pc ghz 
done order investigate ace ability rapidly evaluate wide variety classifiers 
higher success rates achieved training time performance achieved ace limited time demonstrates efficiency exploratory research 
table revealing demonstrates variety classifiers perform best variety data sets 
furthermore adaboost selected ace times demonstrating efficacy ensemble classification 
results support appropriateness ace experimental approach utilization ensemble classification 
demonstrated effectiveness ace respect musical general data particularly encouraging pattern recognition schemes incorporated ace distributed computing allocation increased training times justifiable 
goals ace summarized follows highlight limitations traditional pattern recognition software applied mir propose implement number solutions 
encourage experimentation classifier ensembles mir community 
provide portable classification software midi audio feature extraction software emphasize extensibility ease effectiveness 
provide software allows users automatically perform experiments various classifiers classifier parameters data reduction techniques ensemble architectures ensemble parameters order find approaches suited particular problems 
research aside plans incorporate distributed processing ace discussed section number improvements planned 
include implementation learning schemes important mir currently missing weka hidden markov models 
inclusion classifiers memory neural networks feedback important area expansion play important role music research 
plans implement modules facilitating post processing 
implementation tool generating model classification files priority 
additional goal strengthen ace support weka unsupervised learning functionality 
beneficial include tools constructing blackboard systems particular ones integrate knowledge sources heuristics 
complement ace machine learning approach nicely 
generous financial support social sciences humanities research council canada centre interdisciplinary research music media technology mcgill alma fund greatly appreciated 
aucouturier pachet 

improving timbre similarity high sky 
journal negative results speech audio sciences 
blake merz 

uci repository machine learning databases 
retrieved april www ics uci edu mlearn mlrepository html 
university california irvine department information computer sciences 
dietterich 
ensemble methods machine learning 
multiple classifier systems kittler roli eds 
new york springer 
downie 
international music information retrieval systems evaluation laboratory introducing 
demo handout international conference music information retrieval 
mckay 

combining efficient feature weighting classification tasks music information retrieval 
proceedings international conference music information retrieval 
freund schapire 

experiments new boosting algorithm 
proceedings international conference machine learning 

van der duin de ridder tax 

classification parameter estimation state estimation engineering approach matlab 
new york wiley 
khoussainov kushmerick 

grid enabled weka toolkit machine learning grid 
ercim news 
kittler 
framework classifier fusion needed 
proceedings joint iapr international workshops advances pattern recognition 



selective voting 
proceedings international conference intelligent systems design applications 

kuncheva 
combining pattern classifiers 
nj wiley 
mckay 

feature extraction library 
proceedings international conference music information retrieval 
mckay 
automatic genre classification midi recordings 
thesis 
mcgill university canada 
kapur tzanetakis 

retrieval gestures timbre classification techniques 
proceedings international conference music information retrieval 

tzanetakis cook 

framework audio analysis 
organized sound 
witten frank 

data mining practical machine learning tools techniques java implementations 
san francisco morgan kaufmann 
