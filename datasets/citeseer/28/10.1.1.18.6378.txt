systems directions pervasive computing robert janet davis ben eric adam steven swanson tom anderson brian bershad steven gribble david wetherall university washington cs washington edu pervasive computing focus users tasks computing devices technology provides attractive vision computing 
hardware networking infrastructure realize vision reality precious applications run infrastructure 
believe lack applications stems largely fact currently hard design build deploy applications pervasive computing space 
argue existing approaches distributed computing flawed axes applied pervasive computing sketch alternatives better suited space 
application data functionality need kept separate evolve gracefully global computing infrastructure 
second applications need able acquire resource need time continuously provide services highly dynamic environment 
application data functionality need kept separate evolve gracefully global computing infrastructure 
second applications need able acquire resource need time continuously provide services highly dynamic environment 
third pervasive computing requires common system platform allowing applications run range devices automatically distributed installed 

pervasive computing promises computing infrastructure seamlessly aids users accomplishing tasks renders actual computing devices technology largely invisible :10.1.1.160.6637
basic idea pervasive computing deploy wide variety smart devices working living spaces 
devices coordinate provide users universal immediate access information support users completing tasks 
hardware devices networking infrastructure necessary realize vision increasingly reality precious applications run infrastructure 
notable tions email communication world wide web medium electronic publishing client interface multi tier applications 
result giant ad hoc distributed system tens thousands devices services coming going 
consequently key challenge developers build applications continue provide useful services devices roaming infrastructure network provides limited services 
part research pervasive computing building world system architecture pervasive computing 
experiences architecture believe existing distributed computing technologies ill suited meet challenge 
say discovery services application aware adaptation useful pervasive computing environment :10.1.1.12.1036:10.1.1.39.4636:10.1.1.121.328
contrary consider clearly beneficial pervasive computing applications 
sufficient successfully design build deploy applications pervasive computing space 
argue current approaches building distributed applications deeply flawed axes express depth call fault lines 
rest explore fault lines detail summarized table 
problem cause proposed solution objects scale large wide area distributed systems availability application services limited intermittent programming distributing applications increasingly unmanageable encapsulation data functionality single abstraction transparency highly dynamic environment heterogeneity devices system platforms keep data functionality separate programming change applications need able acquire resource need time common system platform integrated api single binary format table 
overview fault lines discussed listing problem cause proposed solution fault line 

data functionality fault line concerns relationship data functionality represented 
distributed systems legion globe targeted global computing environment explored objects unifying abstraction data functionality :10.1.1.49.3547
skeptical objects distributed computing reasons 
objects encapsulation mechanism assumptions implementation data layout change frequently object interface possible design interfaces accommodate different implementations hold system evolves 
assumptions hold global distributed computing environment 
increasingly common data formats html png specified industry groups standard bodies notably world wide web consortium evolve relatively slow pace 
java originally mobile code platform internet successful enterprise access databases universal 
result considerable tension integrating data functionality tightly form objects integrating tightly 
world resolves tension keeping data functionality separate introducing new higher level abstraction group 
architecture data represented tuples essentially records named optionally typed fields functionality provided components implement units 
environments serve new unifying abstraction containers stored tuples components environments providing combination roles served file system directories nested processes traditional operating systems :10.1.1.23.1800
environments possible group data functionality necessary 
time allow data functionality evolve separately applications store exchange just data avoiding problems associated objects discussed 
summarize arguing data functionality need supported equally large distributed systems need kept separate 
arguing object oriented programming useful 
programming style forces applications explicitly acquire resources local remote prepared equivalent resources time 
world applications need explicitly bind resources including storage communication channels 
control bindings forcing applications periodically provide timeouts unavailable resources 
distributed systems jini control access remote resources take step requiring resources explicitly bound 
furthermore resource discovery world late binding effectively binds resources reduces applications exposure failures changes environment :10.1.1.12.1036
style programming change imposes strict discipline applications developers 
programming change presents opportunity enabling system services easier build applications 
world provides support saving restoring application checkpoints migrating applications features including implementation tuples inheritance multiple dispatch provided multi java provided better match java single inheritance single dispatching methods 
data nodes 
ci douglis wheeler editors 
mobility processes computers agents 
acm press 
addison wesley feb 
noble satyanarayanan narayanan walker :10.1.1.121.328
agile application aware adaptation mobility 
proceedings th acm symposium operating systems principles pages saint malo france oct 
pai druschel 
flash efficient portable web server 
proceedings th acm symposium operating systems principles pages copper mountain resort colorado dec 

nested java processes os structure mobile code 
proceedings th acm sigops european workshop pages portugal sept 
van steen tanenbaum :10.1.1.49.3547
globe wide area distributed system 
ieee concurrency 
weiser 
computer century 
