distrib 
comput 
springer verlag logical approach multilevel security probabilistic systems james gray iii paul syverson department computer science hong kong university science technology clear water bay kowloon hong kong center high assurance computer systems naval research laboratory washington dc usa mail syverson itd nrl navy mil summary 
set modal logic reasoning multilevel security probabilistic systems 
logic contains expressions time probability knowledge 
making halpern tuttle framework reasoning knowledge probability give semantics logic prove sound 
give syntactic definitions perfect multilevel security show semantic interpretations equivalent earlier independently motivated characterizations 
discuss relation characterizations security usefulness security analysis 
key words formal modeling verification knowledge security probabilistic systems multilevel security aspect computer security concerned protecting information classified respect multilevel hierarchy unclassified se top secret 
probabilistic system hardware software system probabilistic choices consulting random number generator execution 
probabilistic choices useful multilevel security context introducing noise reduce rate eliminate illicit communication processes different classification levels 
concerned definitions perfect information theoretic multilevel security sense definitions rule illicit communication relying complexity theoretic assumptions 
model allows system unlimited computational power definitions sufficient ensure illicit communication 
systems address depicted form shown fig 

general form intended represent systems including physical hardware hard wired connections systems operating system kernel supported hong kong research council 
supported onr 
correspondence syverson connections processes provided shared memory processes executing multiprocessor connections systems provided interprocess communication ipc mechanism 
system called provides services systems 
example case multiuser relational database store control access set relations 
system respect reasoning multilevel security 
set systems labeled si called covert senders access secret information 
systems called covert senders may attempt covertly send secret information systems authorized see information 
attempts concerned 
commonly done literature refer covert senders high systems referring situation covert senders access highly classified information 
refer set covert senders collectively high environment denoted systems part environment sense environment central system 
second set systems labeled rj called covert receivers authorized see secret information available covert senders 
refer covert receivers low systems collectively low environment denoted covert senders able communicate information covert receivers say covert channel equivalently purposes insecure 
notes order 

important bear mind threat concerned users human users covert sender systems attempting send secret information covert receivers 
assume wanted easily pass notes park entirely bypass 
concerned covert senders trojan horses appear user wants contain entirely undesirable user trojan covert senders covert receivers si rj fig 

general form system horses attempting send secret information covert receivers 
legitimate concern system developers want incur cost verifying component conglomerate system respect multilevel security requirements 
ideally small number components system case security requirements require verification remaining components implemented shelf hardware software respect security may trojan horses 
assume worst case scenario covert senders covert receivers trojan horses 
assume trojan horses cooperating attempt transmit information covert senders covert receivers 

important bear mind intended application covert senders able communicate directly covert receivers bypassing 
typically software hardware physical controls prevent 
example known principles monitor see typical applications mind 

model contrasts sharply security consider set untrusted agents viz covert senders receivers connected trusted agent works consider set trusted agents connected untrusted agent 
difference model reflects difference respective applications 
meadows dolev intended analysis set legitimate trusted agents attempting establish secure communication untrusted network 
assumption penetrator able subvert network central component system trusted lateral agents 
contrast intended analyze centralized server serves set untrusted entities 
correspondingly assumption penetrator may able subvert untrusted lateral agents central server 

fact partitioned set systems external sets high low may indicate limiting levels information secret unclassified 
case 
general setting information classified users cleared resp 
finite partially ordered set see denning finite set classification levels clearance levels resp 
ordered reflexive transitive anti symmetric relation call dominates 
fact set forms finite lattice 
user permitted observe piece information user clearance dominates classification information 
case levels separate analysis performed level analysis set levels partitioned dominated low partition set levels dominated high partition 
lost generality restricting attention levels 
motivation reasoning probabilistic behavior systems appeared examples discussions authors cf 

essentially motivation possible probabilistic system satisfy existing definitions security sutherland mccullough restrictiveness contain probabilistic covert channels 
long term goal develop logic reason multilevel security system 
logical definition security delineates ideal security probabilistic systems 
apply real systems complex simultaneously ideally secure adequately functional 
important establish ideal order know possible 
view step direction practical verification multilevel security real probabilistic systems presumably definitions security allow limited information flow 
prior gave logic information theoretic definition security author probabilistic noninterference pni expressed kl rl kl intuitively regarded knows rl intuitively regarded permitted know formula intuitively interpreted knows permitted know words knows subset permitted know 
intuitively appealing formula proposed glasgow panangaden developed bieber cuppens 
extended approach probabilistic framework retaining syntactic form definition security viz formula 
knowledge operator kl proposed bieber cuppens probabilistic analog proposed nonstandard unnatural 
example subject knows change time 
particular probabilistic framework subjects know probability distribution interactions including outputs receive 
contrast intuitive notion knowledge standard formalizations knowledge chandy misra halpern subject acquire knowledge interacts environment 
disadvantage prior glasgow bieber cuppens authors formula permitted knowledge operator rl 
operator standard semantics nature application specific 
example see permitted knowledge essentially formalized knowledge permitted defined application 
develop new formalization pni framework halpern tuttle 
framework knowledge operator standard semantics 
new formalization permitted knowledge operator free nonstandard operators previous formalization 
viewed prior 
sense viewed novel application halpern tuttle framework instantiate framework adversary see definition fundamentally different described 
remainder organized follows 
sect 
set model computation 
sects 
set syntax semantics logic sect 
prove soundness 
sect 
state primary definition security prove equivalent probabilistic noninterference 
sect 
state verification condition show equivalent applied flow model 
sect 
give 
system model section describe system model 
model sect 
give semantics logic 
describe general system model taken halpern tuttle 
framework halpern tuttle builds fagin halpern 
encompasses earlier ruspini 
giving general system model tailor model needs imposing additional structure model halpern tuttle terminology choosing adversaries resulting application specific model 
general system model set agents pn local state 
global state tuple local agents states 
run system mapping times global states 
assume time discrete dealing security digital level system 
example addressing security issues analog channels hardware 
assume times natural numbers 
probabilities moving global states represented model means labeled computation trees 
nodes trees represent global states 
node tree children node represent set global states possibly come 
arc node children labeled probability moving state 
node sum outgoing arcs 
assume set outgoing arcs finite arcs labeled nonzero probabilities 
final assumption viewed convention probability moving state state zero state included child state certain events system may regarded nonprobabilistic nondeterministic 
typical example occurs user choose input analysis system wish assign probability distribution choice cases regard choice nonprobabilistic 
nonprobabilistic choices system lumped single choice treated adversary prior start execution 
choice system execution purely probabilistic 
halpern tuttle words nonprobabilistic choices factored 
model computation possible choice adversary corresponds labeled computation tree 
words system represented set computation trees corresponding different choice adversary 
indication adversary choice just prior start execution 
application specific system model section impose additional structure general model described previous section 
fix set agents fix model intuitions regarding communication place environmental constraints agents fix set choices available adversary 
agents 
indicated fig 
surrounding discussion limit model agents system halpern tuttle include state environment part global state 
usage term environment intended capture relevant state system deduced agents local states sect 

typically includes messages transit communication medium 
model things part covert senders receivers local states omit call environment model 
refer external environment viz covert senders receivers constitute environment 
consideration denoted covert senders alternatively high environment denoted covert receivers alternatively low environment denoted remainder tacitly assume global system comprised agents 
model communication 
model communication similar bieber cuppens millen author cf 
respectively 
view interface collection channels inputs outputs occur 
consider agent resp consist processing done high resp low environment including communication mechanism delivers messages need model messages transit halpern tuttle terminology state environment components global state included part state 
systems interest timing events concern 
see lampson early description covert communication channels depend timing 
particular covert communication channels depend clock shared covert senders receivers 
channels typically called timing channels see wray examples discussion 
handle cases take set times domain runs ticks best available shared clock 
events occurring ticks regarded occurring tick 
sufficient purposes analysis far covert senders receivers concerned accurate information available 
note timing certain events wrt best available shared clock nonprobabilistic consider various possibilities choices adversary factor nondeterminism discussed halpern tuttle 
mechanisms high level routines may introduce covert channels see mccullough sect 
take low level view particular assume input output channel unit time times chosen considerations 
time vector inputs channel vector outputs channel 
agent produces new data value time may fact serve signal covert channel exploitation 
treat new signal events inputs 
similarly consider possibility system prevent input occurring 
system merely chooses input ignore 
input received considered output 
considerations fix model communication follows 
assume basic sets symbols nonempty finite set input output channel names ck representing set input values shared clock may explicit clock supplied system clock may clock manufactured covert senders receivers purposes see examples discussion 
context high level means highly highly classified 
representing set output values 
representing set positive natural numbers 
set set times 
input channel time talking vector inputs occurs time 
denote set vectors inputs 
typical input vectors denoted 
similarly denote set output vectors typical output vectors denoted 
talk history input vectors time introduce notation traces 
denote set input traces length ic mathematically ic shorthand set functions trace ic denote single input channel time 
need talk infinite traces inputs 
analogous notation ic short hand set functions similarly denote set output traces length oc set infinite output traces oc 
naturally output trace represents output channel time situations want talk vectors traces inputs outputs subset channels cases natural generalizations notations viz environmental constraints 
agent able see inputs outputs subset system channels 
precise restricting vectors traces subsets input vector set channels define input vector channels similarly input trace ic set channels define input trace channels assume set low channels denoted subset intuitively set channels low environment able directly see 
particular able see inputs outputs occur channels practice type physical procedural constraints agent prevent directly viewing inputs outputs channels example channels may represent wires connected workstations processing secret data 
case secret workstations located inside locked guarded room 
addition periodic checks wires ensure 
way prevented directly viewing data passes channels hand place constraints set channels able see 
particular worst case assumption able see inputs outputs channels 
considerations consistent called secure environment assumption previous 
assumption precise terms definition adversary 
adversary 
discussed halpern tuttle framework nonprobabilistic choices factored execution system fixing adversary start execution 
framework define set possible adversaries choice 
adversary application pair agents attempting send data high environment system low environment 
fully general model agents mixed strategies game theoretic sense 
point execution system strategy gives probability distribution set possible inputs conditioned history current point 
section example motivate need generality 
doing adversary precise definitions 
definition adversary conditional probability function time ic oc 
intuitively adversary describes environment conditional distribution input vector previous history inputs outputs 
saying conditional probability function require fact trivial define conditional probability mass function corresponding replaced values corresponding random variables 
conditional probability mass function defined terms probability measure definition 
definition say adversary satisfies secure environment assumption respect set channels iff exists pair conditional probability functions ic oc denotes real multiplication 
secure environment assumption intuitively understood saying input channels time conditionally statistically independent input channels time input channels time depends previous inputs outputs channels remainder assume adversaries initial choice satisfy secure environment assumption 
section describe adversary description particular system construct corresponding computation tree ta 
tree possible adversary think set trees indexed adversaries 
write ta ta tai clear adversary satisfies secure environment assumption wrt conditional probability functions unique 
unique adversary probability functions satisfy corresponding constraint 
ambiguity writing th th want refer components adversary individually 
note definition adversary meant general adversary discussed halpern tuttle 
fact halpern tuttle give structure adversary 
adversary application specific particular reasoning multilevel security probabilistic systems designed outside domain 
hand particular adversary represents novel application halpern tuttle framework 
halpern tuttle examples adversary represents things initial input system schedule certain events processors steps occur 
contrast adversary represent input system 
represents mixed strategy choosing inputs system 
sense think generalization item application fits framework set halpern tuttle 
state system 
point computation tree ta defined state system 
purposes state includes information 

inputs outputs occurred channels current time 

adversary 
halpern tuttle assumption points trees unique 
suggest adopt idea ensure true 
state encodes adversary 
nodes tree ta encode note assume agent knows adversary just encoded state 
think high part adversary encoded high environment low part encoded low environment 

additional components global state represent internal state 
example describing convenient internal state variables 
state variables thought vector values value state variable 
internal state exists denoted history internal states denoted 
computation trees 
set possible states system points computations talk construction computation trees 
reachable point assume probability distribution outputs 
example conditional probability distribution give history time inputs outputs internal states respectively vector internal state variables internal system state time vector outputs produced system time 
adversary wecan construct corresponding computation tree starting initial state system point root tree empty histories inputs outputs iteratively extending points follows 
point tree internal system history input history output history 
child iff 
formed modifying internal system state extending input history output history resp 
resp 
positive 
cases label arc system environment choices independently 
runs system 
run system infinite sequence states path computation trees 
want talk particular run time point occurs denote point pair 
wish talk various components run trace inputs outputs variables denote run denote point 
tree denote set runs infinite sequences states formed tracing path root runs 
security applications concerned information flow system information system se 
system model adequate represent internal states traces thereof subsequent sections adequate represent systems entirely terms input output 
particular system behavior represented 
syntax section set formal language describe simple systems 
give axioms rules logic 
formation rules describe operation system consideration viz variant lamport raw temporal logic actions 
primary difference roughly speaking raw temporal logic actions lamport temporal logic actions tla treatment stuttering 
concerned refinement omit considerations stuttering 
add modal operator pri allows specify reason probabilistic behavior system 
previous section assume basic sets symbols nonempty members usual representation talking subjects agents system 
formally subject identified process view system set channels see inputs outputs 
formulae language built rules 
constants set basic symbols terms 
state variables representing value variable current state terms 
state variables reserved communication channel 
state variable cin takes values state variable cout takes values note implicitly inputs covert senders receivers system outputs system covert senders receivers 
system consideration respect reasoning security 
mechanism need specify communication agents including system consideration 
primed state variables terms 
represent value variable state 
standard operators terms addition multiplication respectively parentheses grouping subterms form composite terms 
atomic formula equation inequality terms 
formula formula read intuitively 
build composite formulae usual recursive fashion 
formula subject prs real valued term 
intuitively prs represents subjective probability assigns formula probability previous history inputs outputs channels refer prc set communication channels objective probability represents probability available information unbiased probability 
specify reason security properties interest add set modal operators formulae kn representing knowledge subject represented subscript operator 
add additional formation rule syntax 
formula subject ks representing knows formula 
note previous rules mutually recursive express knows 
formula formula contain knowledge temporal operators 
examples give simple examples describe systems language 
ultimately sufficient formal machinery show systems secure simply set formally 
descriptions meant give reader intuitive feel meaning expressions language 
precise meanings sect 

second examples motivate choice model adversaries strategies 
example example simple encryption box uses time pad 
channels high low 
tick system clock inputs high channel outputs 
low output computed exclusive xor denoted high input randomly generated bit 
note modeling sender encrypting side time pad system 
issues random bit string distributed receiver decrypting side scope specification 
known xor data stream independent uniformly distributed bit stream results output stream uniformly distributed 
describe encryption box follows 

system specified formula 
prc prc formula lout state variable representing output low channel output time 
prc denotes probability output isa time 
entire formula says times probability producing clock tick equal probability producing zero equal 
note specified probability distribution inputs constitutes environment behavior system behavior 
example second example insecure version simple encryption box 
shannon gives early description system 
example system computes exclusive current high input randomly generated bit outputs value low channel time 
system randomly generated bit tick generated output high output channel previous tick clock 
expressed formalism follows 

formula specifies system 
prc prc hout note third conjunct hout unprimed indicating output time exclusive current output input note high agent ignores output system acts exactly system previous example perfect encryption 
particular suppose model adversary input string input provided high agent 
straightforward prove adversary high input string fixed prior start execution output low uniformly distributed fact contain information high input string 
bit time pad time available high agent time 
due algebraic properties exclusive viz high agent information counteract encryption 
particular high agent employ game theoretic strategy send information desires system low agent 
example suppose high agent wishes send sequence bits 
ll denote high input resp output time hin resp hout 
appropriate strategy high agent follows 
high agent chooses input time hin hout bk 
output low time denoted lout computed follows 
lout hout hin system description hout hout bk high strategy bk properties employing correct strategy high agent transmit arbitrary message low agent 
course motivates choice model adversaries strategies input strings 
sense formal language exception knowledge operator ks 
previously mentioned operator formalize security properties interest 
illustrate section 
mention security analyses typical assume system users know system works specifications secret assumptions explicit knowledge operator particular system specification formula assume subject ks 
logic give axioms logic 
refer formulae language 
propositional reasoning 
instances tautologies propositional logic 
temporal reasoning 
standard axioms temporal reasoning discrete systems 
logic constitute generally called dum 
see goldblatt details 
labelled axioms historical names 
formulae language 
dum interpreted roughly saying point true 
formally viewed notational shorthand formulae 
guarantees temporal operator respects modus ponens 
axioms captures feature time desire 
gets transitivity 
guarantees don run time points temporal include 
guarantees points time connected linearity 
dum guarantees time discrete 
points time finitely points see goldblatt discussion 
real number axioms 
standard field order axioms real numbers apply members function terms range 
enumerate axioms 
see elementary real analysis book enumeration 
epistemic reasoning 
nonredundant axioms lewis system cf 
chellas goldblatt 
apply knowledge operators ks 
temporal axioms give axioms historical names 
subject formulae language 
ks ks ks knowledge respects modus ponens 
ks knows true 
ks ks ks don know know don know 
random variable axioms 
standard requirements random variables probability theoretic sense 
pm positive measure formula subject prs probability event greater equal zero 
nm normalized measure channel subject prs cin probability possi bilities sums 
prs cout additional axioms 
logic contains different modalities need axioms describe interactions 
intended complete sense merely sufficient purposes 
formula subject ks ks knows true knows true 
kpr formula subject real number ks prc ks prs knows objective probability knows subjective probability probabilities 
axioms 
give rules logic standard 
mp 
modus ponens infer 
nec 
necessitation rule applies modal operators ks 
called necessitation originally applied necessity operator 
infer infer ks note indicates derivation axioms set premises 
derivations defined 
case knowledge operator analogously nec says theorem derivable premises subjects know 
define formal derivations 
definition finite set formulae language 
finite sequence formulae called derivation iff satisfies axiom 
follows theorem nec 
results mp 
write indicate derivation write indicate derivation axioms 
completes statement formal system 
semantics previous section syntactic system 
far intuitive meanings attach formalism 
section provide semantics system terms halpern tuttle framework applicationspecific model set sect 

semantic model model tuple form operations ordering relation gives real numbers set points global states worlds set labeled computation trees nodes sets channels possible inputs possible outputs respectively assignment function assigns semantic values syntactic expressions point values particular point indicated projection vp knowledge accessibility relations subject essentially points accessible subject subject distinguish points 
subject know points 
describe accessibility relation precisely section 
remainder generally denote accessibility relations corresponding subject 
assigning meaning language fundamental importance associate probability space labeled computation tree 
particular labeled computation tree ta construct sample space runs ra event space xa subsets ra probability assigned probability measure assigns probabilities members xa 
construction probability space quite natural standard see seidel instances 
go detail explaining basic concepts probability measure theory cf 

definition labeled computation tree ta associated sample space ra set infinite paths starting root ta 
definition sample space ra set ra called generator iff consists set traces common finite prefix 
intuitively generators probability theoretic events corresponding finite traces 
definition sample space ra define event space xa unique field sets generated set generators 
xa smallest subset ra contains generators closed countable union complementation 
definition define probability measure xa standard way 
suppose generator corresponding finite prefix 
defined product transition probabilities root tree path time known unique extension entire event space cf 

abusive probability measures 
particular finite set points write denote probability assigned passing points technically wrong defined sets runs sets points 
mapping extremely natural set runs corresponding set points set runs pass points 
construction probability spaces sets runs corresponding finite sets points 
danger abuse notation greatly simplifies presentation 
assignment function semantic model main technical question need address assigning meaning formulae logic subject point execution node computation tree sample space evaluating probability subject assigns formula 
discussed halpern tuttle choosing sample spaces assigning meaning probability formulae straightforward 
assigning meanings formulae done standard ways straightforward 
denote sample space subject point ss approach assigning sample spaces discussed halpern tuttle describe correspond ing decision theorists call agent posterior probability sect 

particular choose ss set points tree history inputs outputs channels occur path point essentially means probability space takes account inputs outputs seen current point forget seen 
precisely definitions 
definition subject runs necessarily tree 
say history time definition subject points necessarily tree 
say history conditions hold 



history time 
definition points unique trees point ambiguity referring tree contains 
tree denote tree 
definition subject point sample space point ss tree tree history point assign truth values temporal formulae point 
addition assign values variables example input channel point 
assignment function denoted vp define vp need assign truth values formulae containing primed variables 
define functions points settings consider possibility subject internal state variables finer distinctions points 
application internal processing relevant subjects viz encoded adversary factored computation tree 
lose needed generality making definition 
think child tree assign truth values formulae pair points 
define vp mutually recursively 
additional notation 
notation 
correspondence trees adversaries refer adversary corresponding tree 
denote adversary 
notation succ denote set nodes immediately succeed tree children 
notation extensions denote set infinite sequences states starting tree 
define vp 
point time execution computation tree ta 
numbers assigned number names 
members assigned syntactic identifiers 
channel vp cin channel vp cout variable name excluding channel variables cin cout vp members assigned values pair points referring values points vp contrast variables may change value point unprimed variables evaluated referring point state variable vp primed variables evaluated referring second point vp composite terms assigned values pair points evaluating constituent parts pair points applying corresponding semantic operator formulae assigned truth values pair points evaluating constituent parts pair points true iff true iff true true interpret probability formula point take set pairs points ss emanates 
restricting set compute probability pairs evaluates true 
precisely formula subject vp prs ss ss ss ss succ andv true atomic formula true point iff true pairs points emanating precisely vp true iff succ true needed include quantification language free metalinguistic shorthand 
formula vp true iff extensions iv true composite formulae assigned truth values points natural way 
example vp true iff vp true vp true knowledge operator modal operator semantics terms accessibility relation points standard way viz points necessarily distinct trees subject say accessible denoted history accessibility relations assign truth values formulae form ks follows 
vp ks true iff implies vp true remainder model formula set formulae indicate evaluates true roots trees indicate members evaluate true roots trees indicate implies model typically semantics modal logics treat truth model truth possible worlds model 
familiar usage note computational view primary notion run world state 
truth model naturally thought truth runs model initial state runs 
soundness sect 
sect 
give syntactic characterizations security show semantic interpretations syntactic characterizations equivalent certain previously developed definitions 
significance results greatly reduced logic sound 
soundness guarantee formal proof security implies independently motivated notion security 
soundness theorem gives just correspondence 
theorem soundness set formulae language formula 
proof 
order prove soundness show axioms valid rules truth preserving nec need theorem preserving 
axioms rules results completely standard 
cf 
chellas goldblatt 
set 
specifically assumed semantics rules axioms concerning logical connectives preserve soundness 
assume real numbers part models axioms concerning valid 
likewise pr terms interpreted conditional probabilities events rv axioms valid semantics reflect basic facts probability measures 
accessibility relations set sect 
clearly equivalence relations 
standard result modal logic axioms valid nec knowledge operators theorem preserving cf 

temporal reasoning axioms similarly valid nec temporal operator theorem preserving time structure model computation cf 

remains show soundness additional axioms 
show validity point vp ks false definition semantic assignment function exist conditions hold 
extensions false point extension 
equation implies vp false formula implies vp ks false valid 
show validity kpr ll assume point vp ks prc show vp ks prs applying semantic assignment function equation implies implies sc sc show equation point 
semantic assignment function 
vp prs ss ss definition conditional probability additive property probability measures expand righthand side equation get vp prs ss sc sc ss summation taken tree history 
limiting ss points emanating sc results sc equation rewritten vp prs sc sc sc ss tree 
equation history 
equation sc vp prs ss additive property probability measures implies vp prs kpr valid completes proof 
completes discussion logic 
remainder focus security applications logic 
formal definition security section give primary definition security call formal security condition fsc show meaning equivalent probabilistic noninterference pni equivalent browne independently developed stochastic non interference 
described pni motivated previous noninterference goguen meseguer connections information theory 
particular system modeled way channel memory pni implies information flow channel covert senders covert receivers 
see browne connections classical information theory 
contrast intuition definition security derives understanding low subject knows secure system versus insecure system 
intuition definition follows 
system consideration secure iff low subject receives output probability know occur probability essence low subject knows probability distribution upcoming outputs learn new information receives outputs 
precise introduce shorthand 
notation 
recall subject formalized subset set communication channels subset represents subject view system 
subject ln require formula specifying receives output time 
specified ln bn bi 
specify compactly bl subject equal ln bl output vector equal bn 
define formal security condition follows 
definition subject 
suppose system described set formulae logic say satisfies formal security condition fsc respect bl formula prl bl kl prl bl derivable note definition refers output 
see theorem sufficient insure high behavior effect events including outputs visible glance property may appear strong satisfied useful systems 
particular reader may wonder users know probability distribution outputs get bother system 
won learn 
see concern need keep mind low subject represents single user entire low environment 
example suppose system analyzing level database containing unclassified secret information 
case represents users processes operating unclassified level including users processes involved entering updating unclassified data 
individual low user may practice know answer query submitting principle information available principle know entire history low environment including low inputs 
hand reader may wonder way system fail satisfy fsc 
case low environment fail know probability distribution output 
answer precisely cases probability distribution affected high environment 
high environment influence probability low environment gets certain outputs low environment know probability distribution statistical inference received outputs 
information theory know precisely situation high environment send information low environment situation system covert channel 
show fsc equivalent pni 
talk meaning fsc precisely semantic interpretation fsc define follows 
definition say satisfies semantic interpretation fsc respect bl prl bl kl prl bl prove semantic interpretation fsc equivalent pni need recast terms model 
follows 
definition adversaries satisfy secure environment assumption 
say agree behavior iff exist unique probability functions describe definition unique probability functions describe 
definition subject set runs necessarily taken computation tree 
say event exists time runs having history time iff event refer condition holds length intuitively event finite time length determine occurred 
note general event contains runs computation tree 
events measurable probability spaces 
think meta events interested measure subset runs contained computation tree 
precise introduce definition 
definition computation tree ta event projection ta denoted ea ea runs ta clear context meant ignore distinction meta events projections write ea 
observation projection event measurable 
event computation tree ta ea xa due restriction events observable finite time 
particular projection event tree observable finite time finite number unions generators definition system computation trees 
say satisfies probabilistic noninterference pni respect subject iff trees satisfying secure environment assumption ta ta event ifa agree behavior position state main theorem section 
doing state prove lemma 
lemma ta ta trees agree behavior satisfy secure environment assumption conditions equivalent 

low output vector bl points ta ta sl bl sl sl bl sl 
event ea ea proof 
observing sl bl sl bl projections event sl sl projections event 
backward direction lemma condition implies condition follows easily 
particular ta ta points 
condition implies sl sl intersection events event sl bl sl sl bl sl condition holds definition conditional probability 
prove forward part lemma start showing holds certain subset events events corresponding finite histories 
event exists time length characteristic run run iff history time corresponds finite history characterized time prove forward part lemma subclass events induction length base case 
length zero 
runs history time events length empty set set runs trees case case ra ra base case proved 
induction case 
assume condition holds events corresponding finite histories length event corresponding finite history length 
suppose run time characterizes event characterized time intuitively corresponds finite history obtained truncating time induction hypothesis ea ea ea induction case holds trivially assume ea 
equation ea 
definition conditional probability il ol low input output history resp characterize bl low input output vectors time needed additionally characterize construction probability measures described sect 
secure environment assumption bl bl bl meta event representing low output vector time low environments respectively 
agree behavior greater zero points trees ta ta histories 
condition sl bl sl sl bl sl notice sl sl projections sl bl sl bl projections bl 
bl bl equations equations induction case proved 
complete proof observing event constructed finite number unions events correspond finite histories 
events correspond finite histories analogous generators event spaces 
desired result arbitrary events follows fact measures equal events correspond finite histories 
prove theorem relating pni fsc 
theorem set formulae describing subject 
satisfies pni respect iff satisfies semantic interpretation fsc respect proof 
model satisfies semantic interpretation fsc wrt iff bl prl bl kl prl bl holds iff bl root tree vp prl bl kl prl bl true applying semantic assignment function holds iff bl points vp prl bl true implies vp prl bl true holds iff bl points vp prl bl vp prl bl semantic assignment function holds iff bl points sl bl sl sl bl sl sufficient show satisfies pni iff equation holds 
equation implies pni follows easily lemma 
particular adversaries agree behavior 
equation lemma implies event satisfies pni 
show reverse direction assume satisfies pni bl arbitrary points 
note apply pni immediately may case agree behavior 
reason point construct new adversary follows 
note isan adversary corresponding tree general contain suppose 
defined follows 
il ol 
il ol 
constant input channels 
blindly deterministically follows time blindly deterministically inputs 
note construction computation trees point tree point leading say conditions hold 
restrictions ic oc respectively 
constructing retained output probability function high behavior ta chosen ensure equation holds appropriately point identical history ta 
point ta having history corresponding point history note construction computation trees history say sum probabilities arcs emanating bl equal sum probabilities arcs emanating bl 
particular equal bl case points ta having history sl bl sl bl particular equation holds 
note agree behavior 
sl bl sl sl events pni implies bl bl equations imply equation completes proof 
significance theorem soundness verifying system satisfies fsc sufficient show satisfies pni previously mentioned necessary sufficient condition system free covert channels 
section discuss issue verifying fsc 
verification syntactic statement mclean defines flow model fm motivation providing precise explication information flow security 
mclean intent fm provide characterization security concrete security models evaluated 
authors studies concrete version fm called applied flow model afm shows afm captures strictly stronger notion security pni 
reason studying afm easily verified fsc 
definition subject 
suppose set premises describe system 
say satisfies syntactic verification condition svc respect bl formula prc bl kl prc bl derivable intuitively svc says times low environment knows objective probability distribution output 
section show statement equivalent statement conditional statistical independence 
conditioned previous history output statistically independent previous non high history 
relationship afm section show svc system specified satisfies afm relationship svc afm analogous relationship fsc pni 
definition system computation trees subject 
say satisfies applied flow model afm respect iff tree ta satisfying secure environment assumption respect point ta low output vector bl sc bl sc sl bl sl definition notational differences exactly definition afm 
prove theorem 
theorem set formulae describing subject 
satisfies afm respect iff satisfies semantic interpretation svc respect proof 
model satisfies semantic interpretation svc wrt iff bl prc bl kl prc bl holds iff bl root tree vp prc bl kl prc bl true applying semantic assignment function holds iff bl points vp prc bl true implies vp prc bl true holds iff bl points vp prc bl vp prc bl semantic assignment function holds iff bl points sc bl sc sc bl sc show semantic interpretation svc implies afm assume equation show equation holds 
consider right hand side equation 
sl bl sl definition conditional probability additive property probability measures equal sl bl sc sc sl summation taken tree history 
limiting sl bl points emanating sc results sc bl equal sc bl sc sc sl equation sc bl sc sc bl sc having history equal sc bl sc sc sl additive property probability measures equal sc bl sc precisely left hand side equation system satisfies afm 
show afm implies semantic interpretation svc assume equation bl arbitrary 
want show equation holds may computation tree apply equation directly 
define adversary ta guaranteed contain points history history 
suppose 
define bh ic oc bh bh bh il il bh bh arcs leading resp labelled positive probabilities corresponding arcs ta leading point resp history 
note probabilities reaching general different probabilities reaching respectively 
due construction computation trees point conditional probability receiving particular output time step determined solely system adversary 

sc bl sc sc bl sc sc bl sc sc bl sc apply equation right hand sides equations particular history right hand sides equal sl bl sl 
equations imply sc bl sc sc bl sc proof complete 
fsc versus svc introduced svc claiming easier formally verify fsc 
see consider structure formulae need derived verifying fsc viz prl bl kl prl bl primary difficulty deriving formula requires reason subjective probabilities formulae form prl 
expect systems typically described entirely terms objective probabilities probability formulae form prc 
deriving formula form requires reason various objective probabilities give rise subjective probabilities 
topic pursued depth 
fact reader may note axiom logic addressing interaction objective subjective probabilities viz kpr 
intuition relationship closely related secure environment assumption 
special cases verifying fsc worth pointing 
case derive prl bl prc bl verifying fsc reduces problem verifying svc 
part verifying svc derived prc bl kl prc bl formulae conjuction axiom kpr conclude prl bl kl prl bl prove fsc 
course cases simply verify svc avoid extra verifying formula 
special case system behavior described inputs 
case svc provable truth value consequent svc concern antecedent 
kpr axiom proving fsc showing truth consequent exactly easy proving svc 
examples continued note security encryption box example respect subject formally derivable svc 
recall system specification system specified formula 
prc prc recall subjects assumed know system description 
kl prc prc bl antecedents svc schema consistent prc prc 
svc respect system consists formulae 
prc kl prc prc kl prc derivable propositional reasoning modus ponens necessitation axioms 
svc stronger fsc proof sufficient show system satisfies fsc 
typical case proceed svc prove fsc done 
noted special cases equally easy derive fsc directly 
observe insecure encryption box example fsc includes formulae describe system assumptions knowledge thereof 
obvious insecure encryption box fails satisfy pni 
attack described original example easily find adversaries satisfy secure environment assumption agree low behavior disagree probability certain low events 
low environment assign probabilities output sent high part adversary 
theorem fsc 
soundness theorem follows fsc 
logic specifying reasoning multilevel security probabilistic computer systems 
established connections information theoretic formulations security logical formulations knowledge probability distributed systems 
date able specify verify toy systems logic 
svc takes small step practically verifiable security 
fsc svc verifying real systems real multilevel secure systems karger complex completely free covert channels specification level browne 
satisfy ideal notions security 
feel important cast ideal security precise logical framework 
hope extensions ideal notions security allowing limited information flow ultimately lead machine checkable proofs security real systems 

portions appeared 
jeremy jacob mike john mclean catherine meadows ira moskowitz helpful comments papers 
anonymous referees careful reading helpful comments previous draft 

bieber cuppens definition secure dependencies logic security 
proc 
computer security foundations workshop iv nh june 
bieber cuppens logical view secure dependencies 
comput security 
browne stochastic non interference temporal stochastic processes covert channels 
odyssey research associates ithaca ny november 
unpublished manuscript 
browne turing test non information flow 
proc 
ieee symposium research security privacy oakland ca may 
browne mode security infrastructure covert channel suppression 
proc 
ieee symposium research security privacy oakland ca may 
chandy km misra processes learn 
distrib comput 
chellas bf modal logic 
cambridge university press cambridge 
cuppens logical analysis authorized permitted information flows 
proc 
ieee computer society symposium research security privacy pages oakland ca may 
denning de lattice model secure information flow 
communications acm may 
denning de cryptography data security 
addison wesley reading ma 
dolev dwork waarts yung perfectly secure message transmission 
jacm january 
fagin halpern jy reasoning knowledge probability 
jacm march 
gasser building secure computer system 
van nostrand reinhold new york 
glasgow panangaden logic reasoning security 
acm transactions computer systems august 
goguen ja meseguer security policies security models 
proceedings ieee computer society symposium security privacy oakland ca 
goldblatt logics time computation nd edn vol csli lecture notes 
csli publications stanford ca 
gray iii jw mathematical foundation information flow security 
comput security preliminary version appears proc 
ieee symposium research security privacy oakland ca may 

gray iii jw syverson pf logical approach multilevel security probabilistic systems 
proceedings ieee computer society symposium research security privacy pp oakland ca may 
gray iii jw syverson pf epistemology information flow multilevel security probabilistic systems 
technical report nrl naval research laboratory may 
pr measure theory 
springer new york 
halpern jy reasoning knowledge analyze distributed systems 
traub grosz lampson eds annu rev comput sci 
halpern jy tuttle knowledge probability adversaries 
jacm 
karger pa dw mason ah kahn ce retrospective vax vmm security kernel 
ieee trans softw eng 
lamport temporal logic actions 
technical report dec systems research center palo alto ca december 
lampson bw note confinement problem 
communications acm october 
marcus redmond model theoretic approach specifying verifying hooking security policies 
proceeding computer security foundations workshop nh 
marsden je elementary classical analysis 
freeman san francisco 
mccullough noninterference composability security properties 
proceedings ieee computer society symposium security privacy oakland ca 
mccullough theorem multilevel security 
ieee transactions software engineering june 
mclean security models information flow 
proc 
ieee symposium research security privacy oakland ca may 
meadows applying formal methods analysis key management protocol 
comput security 
millen jk security synchronous machines 
proceedings computer security foundations workshop iii nh june 
ross sm probability models 
rd edn academic press orlando fl 
rudin principals mathematical analysis 
mcgraw hill new york 
ruspini eh epistemic logics probability calculus evidence 
proceedings th international joint conference artificial intelligence pp 
seidel probabilistic communicating processes 
technical report university oxford lady margaret hall phd thesis 
shannon ce channels side information transmitter 
ibm journal research development republished david slepian ed key papers development information theory ieee press 
shannon ce way communication channels 
proc 
th berkeley symp 
math 
stat 
prob vol 
pp republished david slepian ed key papers development information theory ieee press 
probability vol 
graduate texts mathematics 
springer berlin heidelberg new york 
sutherland model information 
proceeding th national computer security conference baltimore md september 
syverson pf gray iii jw epistemic representation information flow security probabilistic systems 
proc 
th ieee computer security foundations workshop pp county kerry ireland june 
jt johnson dm information flow nondeterministic systems 
proceedings ieee computer society symposium research security privacy oakland ca 
wray jc analysis covert timing channels 
comput security james wesley gray iii born 
pursued intersection computer science formal methods working way formal methods section united states naval research lab receiving phd computer science university maryland college park 
jim assistant professor department computer science hong kong university science technology engineer doing things justification works 
january jim midst move rsa labs redwood city california research scientist 
paul syverson received ph philosophy specializing logic indiana university master degrees philosophy mathematics indiana university philosophy cornell university 
worked naval research laboratory primarily epistemic temporal logics analyzing cryptographic protocols secure computing systems 
current focus design analysis protocols systems anonymity accountability 
