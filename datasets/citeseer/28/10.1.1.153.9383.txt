back arrows invertible programming smetsers van marko van eekelen rinus plasmeijer institute computing information sciences university nijmegen toernooiveld ed nijmegen netherlands 
cs ru nl smetsers cs ru nl cs ru nl cs ru nl plasmeijer cs ru nl invertible programming occurs area data conversion required conversion direction inverse 
purpose introduce bidirectional arrows 
bi arrow class extension haskell arrow class extra combinator changes direction computation 
advantage bi arrows invertible programming preservation invertibility properties biarrow combinators 
programming bi arrows polytypic generic way exploits 
bidirectional polytypic examples including invertible serialization give definition monadic bi arrow transformer construct bidirectional parser pretty printer 
categories subject descriptors programming techniques applicative functional programming general terms algorithms keywords haskell arrows invertible program construction polytypic programming 

arrows generalization monads :10.1.1.29.4575
just monads arrows provide set combinators 
possible combine functions general way 
principle combinators assume little functions combine 
fact functions may comprise side effects 
main application areas arrows field interactive programming data conversion 
specifically extensive applications areas user interfaces reactive programming parser combinators 
general area data conversion may important prove invertibility specified algorithm 
instance stolen lord rings book movie 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
haskell september estonia 
copyright acm 

directly case encryption serialization marshalling compression parsing indirectly area data base transactions roll backs may performed 
goal set arrow framework specification invertible algorithms 
start extending unidirectional framework arrows bidirectional framework bidirectional arrows bi arrows 
particular represent pair conversion functions single arrow specify conversion functions definition 
advantage single definition reduces amount code needed conversion pair code reused arrow library 
basically specifies conversion direction usually involved case gets inverse conversion free 
instance specifying parser specifies pretty printer 
price pay specifying parser bit complicated 
advantages programming arrows inversion exploited best polytypic generic framework 
extend bidirectional framework polytypic context 
context show define essential combinators bi arrow transformers 
give smaller polytypic examples including invertible de serialization 
discuss done larger example parsers pretty printers 
specifically contributions 
extend framework arrows support bidirectional arrows 
approach explicitly uses embedding projection arrows 
approach suitable polytypic conversion functions 
show define pairs conversion functions single definition 
show specifying direction conversion specifies direction 
polytypic examples definitions 
pure lazy functional language haskell examples 
polytypic examples generic haskell generic programming extension haskell 
code downloaded www cs ru nl bi arrows 
just easily expressed clean built generics 
assume general knowledge arrows polytypic programming briefly recall relevant definitions techniques 
section section introduces bidirectional arrow combinators 
small invertible program example section 
done embedding projection arrows introduced section 
section framework polytypic context introduce invertible arrows state 
polytypic traversals mappings bi arrows state arrows 
state arrows section create somewhat larger example performing de serialization data structure type 
section introduces monadic programming bi arrows 
ways deal failure bi arrows introduced method lift monads bi arrows 
application bi arrows consisting parser pretty printer created section 
example uses combination state monadic arrows 
section discusses related section concludes mentions prospects 

arrows bidirectional arrows section introduces bidirectional framework consists set reversible arrow combinators 
combinators arrow combinators defined hughes :10.1.1.29.4575
recall shortly standard arrow framework section 
show laws adapted dyadic bi arrows framework section 
give specific inversion laws bi arrows section 
section show bidirectional arrows constructed small motivating example 
arrows briefly recall hughes definitions expressed haskell type constructor class 
class arrow arr arr arr pure arr arr arr infixr arr arr second arr arr arr arr arr infixr usual definition second expressed terms corresponding haskell default definition second second second arr swap arr swap swap snd split fst split allow case distinction hughes shows new combinator needed 
introduces choice arrow class arrow arr arrowchoice arr left arr arr right arr arr arr arr arr infixr second right expressed terms left haskell prelude function left right right arr mirror left arr mirror mirror right left instantiating arrow class ordinary functions arrows 
instance arrow arr id instance arrowchoice left id usual product sum operations functions fst split snd left right literature find combinators derived combinators programming arrows easier arrow arr arr arr arr infixl refrain giving exhaustive overview 
bidirectional arrows support invertibility extend arrows new combinators inv inverse 
similar standard arr single function takes functions lifts bidirectional arrow bi arrow creating structure contains 
intention functions inverse 
second inv reverses direction computation yielding inverse bi arrow boil swapping comprised functions 
class arrow arr biarrow arr arr infix inv arr arr define biarrow top arrow class conceptually bi arrows form extension arrow class 
allows bi arrows normal arrows 
derived combinators second right arr constructor build adapters redefine combinators invertible 
introduce swap swap left mirror mirror const error arr inverse swap mirror defined 
arrow laws bi arrows reason programs containing arrow combinators properties specific arrows called arrow laws 
collection arrow laws uniquely defined 
laws taken subset ones postulated hughes :10.1.1.29.4575
need adaptation laws framework 
occurrences arr replaced corresponding dyadic operator bi arrows intended inverse definition composition laws ida ida ida id id definition pair laws id id id id id id assoc assoc categorial terms product type dual sum type 
general property holds products dual property valid sums 
dual obtained systematically replacing split left right fst snd left example dual product law leads sum law left left left obtain dual express assoc terms split fst snd 
assoc fst fst split snd fst split snd fst split fst snd split snd snd transformation leads left left left right right left right left right right note right dual second mirror dual swap 
laws properties proven easily 
example ida ida second ida proven substituting definitions second taken section applying appropriate laws 
inversion laws importantly implementations bi arrows proper satisfy additional inversion laws 
definition inversion laws inv inv inv inv inv inv inv inv inv left left inv rules appropriate arrows pure functions 
general case arrows sideeffects monads internal side effects lifted bi arrows required left respectively 
inverse combinators categorical duals left 
needed revert possible side effects left 
rest arrows pure 
rules sufficient 
rest framework assumptions absence sideeffects 
course introducing new instance arrow classes defined guarantee corresponding laws hold 
say bi arrow composition pair inverse laws hold 
bi arrow 
invertible inv ida inv essence framework invertibility preserved bi arrow combinators 
working finishing details formal proof property various biarrow laws 
separate 
emphasis introducing framework applications 

programming bi arrows idea bi arrows specifying operation direction gets inverse operation opposite direction 
section discuss create invertible definition bi arrow definitions section 
discuss inherent differences functions bi arrows section 
motivates introduce structure contains functions section 
discuss problems paterson notation bi arrows section 
motivating example easy difficult define functions means arrow constructors 
section give example 
course keep mind functions easily invertible 
take instance simple function append concatenates lists 
clear inverse function type general ways split list parts 
example function obvious inverse reverse 
take standard definition starting point get arrow version 
lifted reverse biarrow reverse reverse illustrate concerns bidirectional programming 
reverse reverse reverse xs reverse xs case distinction arrows done left right means tag input left right indicating empty non empty list respectively 
tagging done applying bi arrow forms isomorphic mapping lists 
list biarrow arr arr list list list list left list xs right xs list left list right xs xs give arrow version reverse 
arrowchoice arr biarrow arr arr list right second inv list adjusted version append takes element attaches list 
specifies invertible arrows appears convenient symmetrical versions arrows handle argument result symmetrically 
leads definition 
give example usage section 
arrowchoice arr biarrow arr arr second list right second inv second list auxiliary arrow converts product sum sum product exchanges field nested pair 
defined terms introduced section 
biarrow arr arr rtfil left left right right rtfil left left rtfil right right biarrow arr arr inv functions bi arrows constructed invertible inverse reverse instance arrows 
means inv compile time error caused absence instance biarrow 
depends biarrow class write compile time error sensible way define instance biarrow 
course define functions dropping second argument instance works direction 
examples mean get compile time error anymore 
get correct result expression evaluation result run time error 
embedding projection bi arrow transformer circumvent problem handling inversion explicitly embedding projection ep pairs 
see instance 
generalize embedding projections pairs functions pairs arrows 
arrow transformer enables construct bi arrows top existing arrows particularly functions 
type embedding projections parameterized arrow data arr ep arr arr instances bi arrow classes defined straightforwardly 
instance arrow arr arrow arr arr ep ep second instance arrowchoice arr arrowchoice arr left ep left left right instance arrow arr biarrow arr ep arr arr inv ep ensure invertibility preserving property biarrow transformer arr arrow constructed arr inverse 
define arr function terms error previous section give informative run time error support normal arrow operations 
adding example force instance arrow yields inv yields way show example 
yields paterson notation example previous section clearly shows support programming arrow combinators quite complicated 
notation arrows proposed paterson helpful relieves programmer defining lot small adaptor arrows 
example definition arrow notion proc xs case xs xs xs arr id unfortunately syntactic sugar arrows support invertibility 
translation scheme described uses unidirectional adaptors easily bidirectional 
internal adaptors unidirectional defined arr 
similar problem encountered defining bi arrows extension original arrow class default second uses arr 

polytypic programming bi arrows sections framework polytypic context 
section polytypic traversals generalized mappings 
show define right left traversals terms left right duality 
secondly section introduce state arrow transformer arrow implementation arbitrary arrows lifted arrow supporting invertible computations states 
polytypic traversals polytypic traversals generalizations polytypic mappings 
introduced jansson jeuring 
polytypic map pings operate functions polytypic traversals operate arrows 
mapping just special case traversal 
mapping order traversal data structure important due possible side effects arrow 
specify traversal operation polytypic programming extension haskell generic haskell 
type certain predefined basic types int generic representation sums products units 
generic haskell preprocessor derive code polytypic function long define polytypic function base instances sum prod unit 
arr arrowchoice arr biarrow arr arr arr unit ida prod inv sum inv biarrow arr arr prod fst snd exl split exr biarrow arr arr sum inl inr left right remarks context restriction type variable arr 
generic haskell expects type variables declared polytypic type variables separated 
usual context restrictions arr context restriction 
due fact polytypic 
usually derived automatically generic haskell omitted 
adaptors superfluous definitions prod sum coincide 
functions prod sum counterparts split tuples respectively 
clarity reasons omitted cases constructor information instances con label essential examples 
generic haskell derive specific traversal function data type schematic representation type 
need derived instances types kind 
unfortunately generic haskell support generic functions context restrictions type classes instances 
simulate introducing dummy class define necessary instances obvious way 
types kind leads class 
bug generic haskell preprocessor generate ill typed code deriving generic function instances arrows types kind 
source contains generic function instances types 
clean version source derive generic function instances correctly 
clean compiler gives false uniqueness errors arrows generics 
provide copy uniqueness attributes 
bug generic haskell generate infinite amount code omitting context restrictions polytypic function 
clean compiler require context restrictions 
class arrowchoice arr biarrow arr arr arr instance polytypic traversal map increment function tree integers data type definition tree instance definition data tree leaf node tree tree instance tree tree write forcing biarrow leaf node leaf node leaf yields leaf node leaf node leaf way defined determines traversal order 
basically order left right give preference left respectively 
analogously define traversals right left variants basic combinators 
jansson jeuring show left right right left traversals form pair data conversion functions inverse 
want show defining traversals separately define inverse bi arrows 
define right left traversal dual left right traversal 
arrowchoice arr biarrow arr arr arr inv inv leaf node leaf node leaf yields leaf node leaf node leaf order matter example state bi arrow transformer monads arrows specify computations side effects state 
show define state arrow bi arrow framework 
state arrow example define invertible pair conversion functions separate functor shape contents combine shape contents back 
consider arrow transformer adds state arrow newtype stt arr st arr corresponding instances arrow biarrow defined 
arrow transformer occurs :10.1.1.29.4575
instances obtained directly replacing unidirectional adapters defined means arr bidirectional adapters :10.1.1.29.4575
instance biarrow arr arrow stt arr arr st st second instance arrowchoice arr biarrow arr arrowchoice stt arr left st left inv right instance biarrow arr biarrow stt arr st inv st inv arrowchoice arr biarrow arr arr biarrow arr arr second inv method state arrow implemented underlying arrow 
composition state arrows just composes underlying arrows 
instance stt choice arrow defined help distributivity product type sum type 
usual property specified constructing appropriate bi arrow case transformation section 
minor modifications instance declarations necessary :10.1.1.29.4575
polytypic shape state arrow previous section define invertible pair conversion functions separate functor shape contents combine shape contents back 
expressed ordinary functions type signatures functions separate functor combine functor defining functions primitives invertible state arrow 
data stored retrieved functor passed state 
list states introduce arrow 
arrow operates state get input element add element state 
biarrow arr stt arr st get put get xs xs put xs xs shape operations inverse specify explicitly 
choose define combine function polytypic traversals introduced section 
combine arrowchoice arr biarrow arr stt arr combine separate arrowchoice arr biarrow arr stt arr separate inv combine example illustrates combine fill empty tree structure integers 
combine leaf node leaf node leaf yields leaf node leaf node leaf separate leaf node leaf node leaf yields leaf node leaf node leaf :10.1.1.112.7071
polytypic de serialization section example encode decode pair functions implement structure encoding decoding data 
packing function takes data converts list bits booleans unpacking function recovers data list bits 
bit representation directly represents structure data static information type data dynamic information value stored data structure compression methods 
choice conversion specified arbitrary 
pick decoder reads bits input produces original data structure 
obtain decoder data type give polytypic specification 
basic types char int encoded fixed number bits 
specify primitive operation means arrow combinators appears easier define pure function lift arrow 
int biarrow arr int arr int bool int int bits bits int int bits int bits odd int bits div bits int bs bits int true bs bits int bs bits int false bs bits int bs decoder integers defined 
expects list bits taken state 
done producing shape list filling list combine arrow previous section 
arrowchoice arr biarrow arr int stt bool arr int combine inv int biarrow arr int arr size create create replicate size length size encoder integers dual decoder integers arrowchoice arr biarrow arr int stt bool arr int inv decoder defined polytypic function decode arr arrowchoice arr biarrow arr decode arr stt bool arr decode unit decode int decode char decode bool decode prod decode decode decode sum bool decode decode conversion unit duplicates input bool isomorphism boolean type product voids 
biarrow arr arr unit unit unit biarrow arr arr bool biarrow arr arr bool bool bool bool bool right left bool left false bool right true polytypic decoder programmed follows 
unit encoded zero bits case unit just returns unit 
case booleans just reads bit 
case integers reads bit integer help integer decoder defined 
case characters reads bit integer converts character 
case pairs units 
applies decoding componentwise 
case sum type reads bit determine left right branch decoded 
duality get encoder free definition decoder 
encode arr arrowchoice arr biarrow arr decode arr stt bool arr encode inv decode example encode tree containing integers simply write encode tree int leaf node leaf node leaf output consists bits integers bits nodes leaves tree structure 

monadic programming bi arrows examples deal failure 
course decoding algorithm terminate properly input data correspond value bits missing 
expressing algorithm essential real application decoding function acceptable lead uncontrolled termination 
hand harder preserve invertibility functions able fail 
section appropriate techniques handle failure losing invertibility completely 
introduce bi arrow definitions polytypic zipping section 
define class section show certain cases zipping example 
obtain useful implementation new class section adds monadic arrow transformer arsenal 
short example monadic bi arrow applied monad adds support graceful failure polytypic zip function 
section extend collection arrow classes combinator applied arrows choose second fails 
partial polytypic zipping introduce polytypic function closely related polytypic traversals section polytypic zipping 
deal failure fix 
binary zipping takes structures shape combines single structure 
opposite 
bidirectional framework get free define zipping bi arrow 
done follows zip arr arrowchoice arr biarrow arr zip arr arr zip unit inv zip prod zip zip zip sum zip zip biarrow arr arr unit unit unit unit unit unit unit unit unit biarrow arr arr prod prod dorp prod dorp prod biarrow arr arr sum sum mus sum mus inl inl left mus inr inr right sum left inl inl sum right inr inr just encode inverse decode define unzip inverse zip 
unzip arr arrowchoice arr biarrow arr zip arr arr unzip inv zip inv note definition zip partial structures shape result zipping structures undefined 
obviously inverse zipping total function 
unzip tree ida leaf node leaf yields leaf node leaf leaf node leaf necessary zipping total check input structures match handle gracefully 
usually done returning value indicates structures shape size 
case inverse partial zipping returns general impossible reconstruct non matching argument structures 
bi arrows zero deal operations fail class 
class arrow arr arr zeroarrow arr arrow zeroarrow multiplicative zero composition pure bi arrows zeroarrow zeroarrow zeroarrow clearly law excludes zeroarrow inverse 
imply completely lose invertibility zeroarrow cases left inverse failing operation exists 
formally arrow left invertible inv ida derived combinator left fanin bidirectional variant fanin arrow combinator appears convenient combination 
arrowchoice arr biarrow arr infixr arr arr arr biarrow arr arr id id right definition conclude directly invertible id id inverse right occurrence invertible 
call combinator right reverse direction yields right 
show combinator preserves left invertibility 
specifically shown arrow left invertible left invertible 
analogously follows left combinators preserve 
new combinator extend zip explicit failure 
fact polytypic instance changes sum see 
additionally add class context restriction type zip 
zip arr arr arrowchoice arr biarrow arr zip arr arr zip sum fa zeroarrow zip zip fa mus sum mus inl inl right left mus inr inr right right mus left sum right left inl inl sum right right inr inr sum left adaptor fa tags result additional sum constructor indicate constructors matched 
particular uses right case constructors identical left different 
case zeroarrow branch chosen case normal zip zip performed 
lifting monads bi arrows able apply zip concrete data structures need appropriate instances arrow classes including 
convenient flexible way manage failures implement concepts non determinism states obtained monads 
monadic arrows arrows represent monadic computations 
goal section twofold show deal monadic arrows bidirectional arrow framework provide basis handling failures 
classes monads haskell 
basic monad defined return bind operations class monad return plus monad support failures monadic arrows implement choices 
class monad monadplus mzero mplus usually kleisli arrow transformer represent monadic computations defined monad follows newtype arr unk arr arrow suitable purposes possible define instance inv handles argument result asymmetrically 
symmetrical version kleisli transformer obtained adjusting argument type definition follows newtype mot arr mo arr instances arrow biarrow arrowchoice mot require able traverse underlying monad 
done polytypic mapping section 
limits choice data types impossible instantiate function types 
instance definitions auxiliary arrows monadic join return operations 
instance monad arrowchoice arr biarrow arr arrow mot arr arr mo mo inv second instance monad arrowchoice arr biarrow arr arrowchoice mot arr left mo inv left right instance monad arrowchoice arr biarrow arr biarrow mot arr mo liftm liftm inv mo inv monad biarrow arr arr joinp joinp mx mx return return return monad biarrow arr arr joins splits joins return left return right splits return left return return right liftm monad liftm return mention invertibility depends underlying monad 
monad shown invertible list monad hold 
purposes monadic arrows handle failures 
zero monadic arrow defined help mzero 
instance monadplus arrowchoice arr biarrow arr mot arr zeroarrow mo const mzero const mzero illustrate monadic arrow return generic zipping function 
example combining information trees successful unm zip tree ida just leaf node leaf leaf node leaf yields just leaf node leaf try combine trees different shape yields mzero zip tree ida just leaf node leaf leaf yields 
parsing pretty printing section show define parser reversible arrow combinators 
get inverse free 
give example parser simple functional language specified grammar bnf notation 
expression variable string constructor string expression expression expression variable expression variable constructor main difference decoder section parser decoder choose alternatives action sum type solely depends input bit 
parser section try alternatives see succeeds 
difference parser completely determined type term parses 
needs parse extra spaces parentheses consequently expect resulting parser left right invertible different input sentences may lead result 
analogously encode decode define parser derive corresponding pretty printer 
programmer need write complete pretty printer code 
plus arrow failure parsers handled 
need combinator applied parsers choose second case fails 
introduce arrow class comparable monadplus class monadic parser combinators 
class arr arr arr arr arr contrast haskell arrow plus combinator combinator tags result see parser chosen 
said possible chooses non failing computation 
expressed law zeroarrow zeroarrow implementation state arrow straightforward defined section 
instance arr biarrow arr stt arr zeroarrow st zeroarrow instance arr arrowchoice arr biarrow arr stt arr st inv instantiating monadic arrow complex 
defer definition section 
concrete parser previous sections combination state monadic arrows build concrete example parser 
resulting syntax tree represented data structure 
data expression app expression expression nested expression lambda string expression variable string constructor string observe syntax tree explicitly stores expression enclosed brackets 
done ensure printing parsed expression brackets displayed correctly 
parsing issues lexical level assume separated scanner lexer parser list tokens 
leads data token id string lambda open close arrow eof deriving eq type parser arr stt token arr type printer arr stt token arr parsing keywords defining parser expressions introduce auxiliary parsers examine input tokens 
tries read token input stream 
succeeds token delivered result parser fails 
zip example section combination zeroarrow handle failure 
token zeroarrow ida test id id test token right left second examines input list see token identifier 
distinguish variables starting lower case char constructors starting upper case char parser parameterized predicate 
parser succeeds case identifier token fulfilling predicate 
identifier returned parser fails 
zeroarrow ida id id id name name right name token left token parsing expressions grammar input language left recursive directly translated parser 
introduce intermediate function parsing expressions called terms applications 
nested uncurry lambda variable constructor lambda var exp right left var exp variable var right right left var constructor right right right nested nested left nested combines parsers expression kinds arrow plus combinator 
result tagged various rights converted adapter expr expr corresponding part syntax tree 
parsing consecutive elements helper combinator arrow defined section 
biarrow arr infixl arr arr arr lambda arrow const lambda split fst split const arrow split snd open close open close head head parser applications takes doing 
reads list terms converts tree binary applications 
introduce function parse list elements applied parser tries parse elements 
tag left right tag left tag right note try find longest list 
parser expressions expressed easily 
uncurry apply apply apply app app apply app xs apply app app xs apply app apply apply pretty printer expressions obtained inverse parser 
parse arr arrowchoice arr biarrow arr parser arr expression parse eof fst eof print arr arrowchoice arr biarrow arr printer arr expression print inv parse monadic plus arrow really parser provide appropriate implementation plus arrow 
specifically need instance definition monadic arrow transformer course instance mplus underlying monad 
instance monadplus arrowchoice arr biarrow arr mot arr mo inv adapter arrows defined follows 
monadplus biarrow arr arr uncurry mplus monadplus biarrow arr arr return left return const mzero monadplus biarrow arr arr return right const mzero return adapter general invertible arguments obviously inverse 
means instance invertible defined terms inv 
consequently defining operation instance get invertibility free longer sufficient prove pairs pure functions lifted inverse 
show correctness global reasoning required 
practice may imply inverse operation needs fine tuned order produce expected result 
particular holds parser example 
nested constructor added syntax tree able reconstruct brackets disambiguate expressions 
parser printer examples suppose list input tokens tokens open lambda id arrow id close lambda id arrow id eof parse convert expression write parse return tokens expression token want print expression expr app nested lambda variable lambda variable simply write print return expr token monad reveal expression parser ambiguous 
suppose leave nested constructor example expression 
printing expression lead list tokens containing open close brackets anymore 
parser able parse list produce expression started app occur inside lambda expression 
reason parser delivers successful parse 
framework easy change parser way successful parses list monad monad 
list monad standard implementation monad class 
thing change example type 
parse return tokens expression token running expression list tokens tokens lambda id arrow id lambda id arrow id eof yield expressions app lambda variable lambda variable lambda app variable lambda variable 
related inspired jansson jeuring define polytypic functions parsing pretty printing prove invertibility 
maintain invertibility pairs separate definitions leading proof obligation programmer 
contrast single definition conversion directions invertibility preserving combinators 
result prove invertibility primitives 
furthermore approach limited example parsing polytypic functions 
invertibility important practical property algorithms 
instance plays important role database world ensure change view domain leads corresponding change underlying data domain 
ensure property foster domainspecific programming language expressions denote bi directional transformations trees 
functions get function extracting view concrete put function creates updated concrete view original concrete view updated view 
proper get put functions invertibility guaranteed 
similar purposes mu define programming language injective functions defined guaranteeing invertibility 
put get functions defined crux bookkeeping doing get put invertible 
different approach taken robert gl ck 
try construct inverse function original automatically 
symmetrical representation functions inverse function constructed interpreting original function backwards 
arrow combinators representation property 
main difference obtain inverse function construction try automatically generate inverse function original 
lr parsing techniques administrative bookkeeping invert choices conditional branches original function 
lot inverting existing programs functional imperative see example dijkstra chen ross 
approach hands focusses constructing parts programs invertible way 

feel provided interesting framework area invertible programming 
extended arrows bidirectional arrows bi arrows preserve invertibility properties 
invertible bi arrow transformers 
bi arrows polytypic context 
introduced ways deal state monads 
concrete parser pretty printer example discussion properties 
want provide full formal proof framework preserves invertibility properly 
furthermore investigate approach scales real world practical examples invertibility properties requirement 
things require creating translation scheme similar paterson notation way required properties preserved programs easier read write 
acknowledgments anonymous referees earlier version helpful comments 
plasmeijer 
generic programming extension clean 
arts editors th international workshop implementation functional languages ifl selected papers pages 
sweden sept 
chen 
program inversion fun 
sci 
comput 
program 
courtney elliott 
genuinely functional user interfaces 
proceedings haskell workshop september 
dijkstra 
program inversion 
program construction pages 
foster greenwald moore pierce schmitt 
combinators bi directional tree transformations linguistic approach view update problem 
acm sigplan sigact symposium principles programming languages popl long beach california 
extended version available university pennsylvania technical report ms cis 
earlier version workshop programming language technologies xml plan 
gl ck 
derivation deterministic inverse programs lr parsing 

gl ck 
revisiting automatic program inverter lisp 
volume pages new york 
acm press 
hinze peyton jones 
derivable type classes 
hutton editor proceedings acm sigplan haskell workshop volume electronic notes theoretical computer science 
elsevier science aug 
preliminary proceedings appeared university nottingham technical report 
hudak courtney nilsson peterson 
arrows robots functional reactive programming 
jeuring peyton jones editors advanced functional programming th international school volume lncs oxford 
springer 
hudak peterson fasel 
gentle haskell 
www haskell org tutorial 
hughes :10.1.1.29.4575
generalising monads arrows 
science computer programming 
jansson jeuring 
polytypic compact printing parsing 
swierstra editor proceedings th european symposium programming esop amsterdam netherlands march volume pages 
springer verlag berlin 
jansson jeuring 
polytypic data conversion programs 
science computer programming 
clarke jeuring 
dependency style generic haskell 
proceedings eighth acm sigplan international conference functional programming icfp pages 
acm press 
paterson 
new notation arrows 
international conference functional programming pages 
acm press sept 
paterson 
arrows computation 
gibbons de moor editors fun programming symposium honour professor richard bird th birthday pages oxford 

peyton jones hughes report programming language haskell 
university yale 
www haskell org definition 
plasmeijer van eekelen 
concurrent clean language report version december 
www cs ru nl clean 
ross 
running programs backwards logical inversion imperative computation 
formal aspects computing journal 

mu takeichi 
algebraic approach bidirectional updating 
second asian symposium programming language systems volume lncs pages 
springer 
wadler 
monads functional programming 
broy editor program design calculi proceedings marktoberdorf international summer school 
springer verlag 
