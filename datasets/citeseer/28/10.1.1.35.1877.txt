optimizing branching path expressions jason mchugh jennifer widom stanford university db stanford edu www db stanford edu path expressions form basis query languages semistructured data xml specifying traversals graph data 
consider query optimization problem path expressions branch specify traversals related subgraphs expressions common nontrivial queries xml data 
searching entire space query plans branching path expressions generally infeasible introduce heuristic algorithms generate query plans branching path expressions 
algorithms implemented lore database system xml report experimental results variety database query shapes 
compare optimization execution times suite algorithms post optimizations small queries compare optimal plan produced exhaustive search plan space 
semistructured data abi bun data management xml dff focused graph data models query languages path expressions specify traversals data 
plan fs author bs db book invalid fs access method requires bound 
plan es db book fs author violate bound variable restrictions invalid operator support passing bindings variable es method fs method 
eliminate invalid plans size exhaustive plan space prohibitively large 
database statistics cost query optimizer relies database statistics cost formulas estimate cost predicted running time plan considers sac 
cost formulas somewhat implementation dependent formulas lore physical operators mw :10.1.1.23.3841
intermediate result size estimation key general factor depends statistics gathered data 
section briefly discuss statistics result size estimation optimizing branching path expressions 
traditional relational object oriented statistics suited estimating predicate selectivities estimating number tuples relation class produces joined relation class 
object oriented statistics somewhat complicated class hierarchy taken account rk ss xh 
example cost single step isolation lower es fs bs fs bs 
situations expensive es followed rest plan lower cost fs bs access method 
algorithm exponential algorithm reduce 
term considering subset possible step orderings 
algorithm generates different step orderings swapping order steps step recursively input list approach reduces step ordering term mw :10.1.1.23.3841
shows precisely search space reduced 
procedure accepts list steps list variables currently bound 
plans produced 
plan step optimized recursive call joined best access method step 
rank algorithm optimization time execution time total time table experiment simple branching path slow plans produced algorithm unexpected 
apparently making local access method decision step order ignores global situation 
note anomaly results table execution times algorithms reported th th respectively 
explores strictly larger plan space expect produce strictly better plans 
attribute slight inconsistency somewhat imperfect statistics cost estimates costing quite accurate general shown mw :10.1.1.23.3841
detailed results section look detail experiments section focusing algorithms considering post optimizations 
experiment simple branching path experiment hdb movies movie actor vi 
expression contains branches similar example shown 
database average actors acted movie stores carry movie 
sigmod record september 
mw mchugh widom 
compile time path expansion lore 
proceedings workshop query processing semistructured data non standard data formats jerusalem january 
mw mchugh widom :10.1.1.23.3841
query optimization semistructured data 
technical report stanford university database group september 
ftp db stanford edu pub papers ps 
extended version mw available mw mchugh widom 
