type approach program security dennis volpano geoffrey smith department computer science naval postgraduate school monterey ca usa email volpano cs nps navy mil school computer science florida international university miami fl usa email cs fiu edu 
presents type system guarantees typed programs procedural programming language satisfy noninterference security property 
program inputs outputs classified various security levels property basically states program output classified level change result modifying inputs classified higher levels 
intuitively means program leak sensitive data 
property similar notion introduced years ago goguen meseguer model security multi level computer systems 
give algorithm inferring simplifying principal types document security requirements programs 
presents type system procedural language guarantees typed programs respect security levels variables manipulate 
precisely guarantees typed programs noninterfering basically means high security inputs affect low security outputs 
goguen meseguer introduced idea noninterference years ago notion security multi level computing systems papers applies notion programming languages 
type soundness theorem proof typed program noninterference property 
proof depends lemmas interestingly turn typing analogs properties known years security community simple security property confinement property known property 
properties bell lapadula model developed early model multi level security 
earlier type system guarantee noninterference simple imperative language 
extend analysis language order procedures polymorphically respect security classes 
address type inference problem 
overview type system 
formally system prove soundness relative standard natural semantics 
material activities supported national science foundation agreements 
ccr ccr 
section turn attention type inference type simplification 
sketch related efforts research directions 
overview type system noninterference introduced model security multi level computing systems 
basic idea system users supply high level inputs supply low level inputs 
low level users allowed see low level system outputs 
sake simplifying discussion shall consider security levels low high 
system noninterference property matter high level inputs change low level system outputs remain 
idea applied programming languages 
intuitively notion high level program inputs altered affecting lowlevel outputs 
simple example consider procedure just formal parameters proc inout low inout high treated variables security levels low high respectively 
suppose calls low high low high terminate final values final values may differ 
noninterfering final value cases 
type system guarantees typed programs noninterfering 
types types system stratified levels 
types security levels types types expressions commands types types phrases 
security levels assumed partially ordered 
example low high trusted untrusted low high trusted untrusted 
relation extended subtype relation phrase types 
phrase types similar forsythe command types parameterized 
command type form cmd intuition command type assignment variable security level higher 
command type high cmd contain assignments low variables 
phrase types types variables written var types acceptors written acc 
variable type var stores information security level lower 
acceptor write variable type parameters procedures 
variable implicitly dereferenced rule converting var 
likewise rule converting variable type acceptor type necessary left sides assignments procedure calls involving parameters 
subtype relation contravariant command acceptor types 
core language typing rules typed language core imperative language procedures procedures class values 
inspired denning program certification rules developed typing rules ensure noninterference 
instance suppose variables identifier typing gives type low var gives type high var 
assignment rejected change initial value affect final value denning termed explicit flow introduce typing rule acc cmd rule requires variables example agree security levels 
agree subtyping assignment rejected 
hand accepted 
low high coerce type low high get agreement allowing assignment type high cmd 
alternatively coerce type high acc low acc give assignment type low cmd 
worth pointing subtyping covariant contravariant variable types variable expression behaves covariantly acceptor behaves contravariantly 
low var unrelated high var 
example suppose try copy indirectly follows od final value affected initial value denning termed implicit flow typing rule insists guard body loop typed security level cmd cmd determining program noninterfering course undecidable 
shall see type system sound decidable logic reasoning noninterference program 
necessarily incomplete noninterfering programs rejected type system 
security type inference type inference setting attempts prove program noninterfering produces principal type succinctly conveys program executed securely 
principal type constrained type scheme set flat subtype inequalities security levels 
consider instance procedure indirectly copies proc letvar letvar construct letvar allocates local variable scope 
principal type procedure proc acc type variables corresponds security level security level call procedure executed securely provided arguments security levels substituted bound variables type satisfy inequality 
call type cmd conveyed proc 
sense procedure polymorphic 
principal type simplified proc acc due subtyping procedure types 
practical matter important simplify inferred principal types exploiting antisymmetry type constructors 
type inference simplification discussed detail section 
formal treatment type system syntax core imperative language 
phrase expr proc inout comm letvar inout meta variable ranges identifiers ranges integer literals ranges locations language input output initial values locations program represent inputs final values locations represent outputs 
addition seen natural semantics evaluating letvar causes new location allocated deallocated 
assume simplicity procedure exactly parameters kind false true 
phrase closed free identifiers 
types core language stratified follows proc var acc cmd var acc meta variable ranges set security levels partially ordered 
rules type system 
omit typing rules compound expressions similar rule sum 
notice rule int allows integer literal security level 
intuitively value intrinsically sensitive sensitive comes sensitive location 
note rule allows procedures polymorphically 
remaining rules type system constitute subtyping logic 
typing judgment meta variable ranges identifier typings location typings 
identifier typing finite function mapping identifiers types form var acc type assigned modified identifier typing assigns type assigns type identifier location typing finite function mapping locations types similar notational conventions 
facilitate soundness proof introduce syntax directed set typing rules 
rules system just rules rules ident val assign replaced syntax directed counterparts 
subtyping rules included syntax directed system 
write judgments syntax directed system 
benefit syntax directed system rule derivation typing uniquely determined form 
helpful determining coercions needed type inference 
establish syntax directed system equivalent original system respect types 
need lemmas lemma 

lemma 
equivalence expressed theorem theorem 
iff 
shall assume typing derivations done syntax directed type system shall take mean natural semantics give natural semantics closed phrases 
closed phrase evaluated relative memory finite function locations integers 
ident var var var acceptor acc acc var int val val sum compose letvar assign procedure apply var var acc cmd cmd cmd var cmd letvar cmd acc cmd cmd cmd cmd cmd cmd var acc cmd proc inout proc var acc proc var acc var acc cmd proc inout proc inout cmd inout cmd fig 
rules type system contents location dom integer write memory assigns location location update dom extension dom 
expressions commands pure semantics uses evaluation expression evaluation command 
commands nonexpansive dom dom 
stand location removed domain 
base reflex trans acc acc acc cmd proc cmd cmd proc var acc proc var acc subtype ident fig 
subtyping rules val var assign acc cmd cmd cmd cmd cmd cmd fig 
syntax directed typing rules evaluation rules 
write denote capture avoiding substitution free occurrences note substitution rules call allows avoid environments closures semantics 
type soundness noninterference section establish semantic soundness type system proving noninterference theorem 
proving soundness require lemmas establish useful properties type system semantics 
lemma expression substitution 

val contents dom add sequence branch call proc inout update dom location dom letvar loop proc inout inout fig 
evaluation rules lemma simple security 
free 
lemma confinement 
cmd dom dom location assigned 
ready prove soundness theorem 
theorem noninterference 
suppose dom dom dom 

absence procedures theorem proved directly 
prove noninterference theorem corollary theorem proof omitted due space restrictions 
theorem 
suppose xk nk 
xk 

xk dom dom dom 
known polymorphic variables easily break traditional forms type soundness 
true security type system 
giving variable polymorphic type opens door laundering 
possible store high information retrieve low 
soundness break subtle ways due mutable objects variables class coupled higher order polymorphic procedures 
interesting note core language extended features existing techniques weak types limiting polymorphism values preserve soundness 
type inference sake describing type inference setting need introduce extended types contain type variables 
place security levels 
metavariables range extended types 
range extended identifier typings map identifiers extended types ftv gives set free type variables 
type inference algorithm defined cases phrases language figures 
takes input location typing extended identifier typing program phrase set type variables represents set stale type variables allows choose fresh type variables necessary 
succeeds returns set flat subtype inequalities extended type updated set stale type variables 
note constraint abbreviates inequalities 
establish correctness algorithm instantiation mapping type variables ordinary types 
applied usual way extended types extended identifier typings sets inequalities extended types 
lemma 
ftv succeeds contains type variables case case var default fail proc inout cmd var acc proc var acc cmd cmd cmd cmd cmd cmd cmd cmd case var acc cmd fail cmd default fail letvar cmd var cmd inout proc inout cmd proc inout cmd fig 
algorithm proc var acc case var fail default fail case var acc cmd fail cmd default fail fig 
algorithm continued theorem soundness 
suppose succeeds instantiation true contain type variables 

proof 
induction structure show interesting case cases similar follow straightforwardly induction 
suppose cmd letvar true closed 
cmd var extend closed 
clearly extends closed 
true true 
induction 
var closed true true 
second induction var cmd 
var var var cmd 
rule letvar letvar cmd 
theorem completeness 
suppose ftv succeeds exists instantiation extends variables true 
succeed halts fail 
proof 
induction structure show interesting cases proc similar 
suppose cmd ftv rule type cmd 
induction succeeds exists instantiation extends variables true 
form 
cause pattern match fail 
ftv agree variables type variable member 
cmd 
induction succeeds instantiation extends type variables true cmd 
form cmd 
second pattern match succeeds returning cmd extends variables lemma 

extends variables establish true 
lemma contains type variables variable member 
agree type variables 
true 
likewise lemma contains type variables 
agree type variables 
true 
third hypothesis rule re done 
suppose proc inout proc var acc ftv rule procedure var acc cmd ftv occur 
var acc cmd 
induction var acc succeeds returning exists instantiation extends variables true cmd 
form cmd 
pattern match succeeds proc inout returning proc var acc 
extends variables 
extends variables follows theorems check typable respect running succeeds checking satisfiable respect partial ordering security levels 
checking satisfiability flat set subtyping inequalities respect partial order studied previously 
npcomplete general done efficiently example partial order disjoint union lattices 
principal types addition checking typability type inference gives ability compute principal types document possible types program 
constrained quantification principal types type scheme type variables instantiated ways satisfy subtype inequalities instances type scheme defined follows definition instance 
exists instantiation domain true 
case say instance 
definition principal type 
principal type respect iff 
soundness completeness theorems compute principal type respect running verifying satisfiable forming type scheme contains type variables free 
note definition instance relation fact required weaker definition adopted allow type simplification discuss 
example type inference 
calling procedure section produces principal type proc acc complex principal type obviously serve useful documentation programmer 
reason necessary practical matter simplify principal types produced type simplification natural notion equivalence type schemes type schemes equivalent iff set instances 
idea type simplification replace type scheme simpler equivalent type scheme 
type simplifications considered applied directly 
deductions type scheme instantiated 
instance suppose contains inequalities 
partial order instantiation satisfies instantiate type 
unify 
general collapse strongly connected components performing simplification type scheme yields simpler principal type 
proc acc simplify type schemes exploiting types 
example proc acc antimonotonic boosting produces smaller type 
constraint instantiate yielding simpler principal type 
performing instantiations repeatedly obtain principal type proc acc constraints 
type simplification principal types useful documentation security requirements programs 
related directions earliest efforts area denning lattice model secure information flow 
denning extended bell lapadula giving secure flow certification algorithm programs 
early followed variety efforts dealing secure information flow 
efforts aimed proving soundness denning analysis 
efforts prove soundness relative instrumented semantics validity open question 
contrast show soundness analysis respect standard natural semantics 
ban tre similar spirit 
give compile time algorithm detecting information flow sequential programs justify algorithm terms noninterference property 
algorithm works building final accessibility graph indicating contents variable point program flow instance variable point 
drawback number vertices final accessibility graph linear size program 
means simplified principal types final graphs serve practical program documentation 
palsberg rb give type system trust analysis calculus trust coercion 
unsafe coercion permits untrusted values explicitly coerced trusted values 
subject reduction soundness property shown type system 
unclear say soundness system terms secure information flow 
trust coercion certainly rules noninterference theorem 
type approach abadi version pi calculus called spi extended express cryptographic protocols 
related necula lee proof carrying code 
desirable extend core language considered number important features including concurrency networking exception handling 
impact features noninterference property needs investigated 

abadi secrecy typing cryptographic protocols draft unpublished manuscript dec systems research center december 

andrews reitman axiomatic approach information flow programs acm trans 
programming languages systems pp 


ban tre bryce le tayer compile time detection information flow sequential programs proc 
rd esorics lncs pp 


bell lapadula secure computer system mathematical foundations model mitre tech report 

denning lattice model secure information flow comm acm pp 


denning denning certification programs secure information flow comm acm pp 


goguen meseguer security policies security models proc 
ieee symposium security privacy pp 


mizuno schmidt security flow control algorithm denotational semantics correctness proof formal aspects computing pp 


necula proof carrying code appear proc 
th symp 
principles programming languages january 

rb trust data proc 
tapsoft lncs pp 


palsberg rb trust calculus proc 
static analysis symposium lncs pp 


reynolds preliminary design programming language forsythe technical report cmu cs carnegie mellon university june 

smith principal type schemes functional programs overloading subtyping science computer programming pp 


smith volpano polymorphic typing variables acm trans 
programming languages systems pp 


tiuryn subtype inequalities proc 
ieee symp 
logic computer science pp 


tofte type inference polymorphic information computation pp 


volpano smith irvine sound type system secure flow analysis computer security pp 


wand keefe complexity type inference coercion proc 
acm conf 
functional programming languages computer architecture pp 


wright simple imperative polymorphism journal lisp symbolic computing pp 

article processed atex macro package llncs style 
