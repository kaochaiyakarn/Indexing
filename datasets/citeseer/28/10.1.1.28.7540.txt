apt victor marek law truszczy nski david warren eds 
logic programming paradigm year perspective springer berlin heidelberg newyork barcelona budapest hong kong london milan paris santa clara singapore tokyo logic user defined aggregates generation database systems carlo zaniolo wang computer science department university california los angeles los angeles ca usa summary 
provide logic foundations extended aggregate constructs required advanced database applications 
particular focus data mining applications show require user defined aggregates extended early returns 
propose simple formalization extended user defined aggregates nondeterministic construct choice 
obtain programs formal semantics concept total stable models amenable efficient implementation 
instance values third column wind column computed follows select wind count tennis group outlook training set table query returns weak weak strong strong similar aggregate queries columns compute remaining coefficients numerator denominator evaluated counting tuple grouped 
boosting step described implemented simply increasing weight misclassified tuples 
award winning classification algorithm carlo zaniolo wang implemented sql count aggregate 
aggregate formulation preferable original formulation ensures scalability performance large training sets 
count aggregates classifiers discussed briefly section :10.1.1.40.6757
associations applications designed discover associations extensive count aggregates 
instance consider example citizen official language speaks citizen official language speaks stored database relations respectively named confidence validity rule estimated follows sj oj closer stronger confidence validity rule 
computed sql queries count 
assume database relations describe system find implication rules searching tables satisfy meta level templates specified user 
instance market data analysis represents best known applications association rules 
apriori algorithm core application searches frequent items sets counts items combination items threshold 
computation expressed sql count aggregate ensuring efficiency queries represents challenge 
true related class queries called iceberg queries 
classification algorithms discussed face similar problems see discussion section :10.1.1.40.6757
user defined aggregates databases general aggregate computations data mining algorithms implemented conveniently efficiently built sql aggregates employing sql user defined aggregates 
discuss limitations propose extended form aggregate overcome limitations 
online aggregation proposed concept online aggregation finds applications data mining olap algorithms 
typical online aggregation estimating averages 
formal semantics formal semantics extended aggregates defined standard declarative semantics datalog simply viewing program aggregates short hand expanded program aggregates 
take instance rule compute new aggregate function set values grouped computation set aggregate requires ability enumerate elements set 
instance assumption set elements totally ordered visit ata time say ascending order 
assumption violate genericity principle requires nonmonotonic constructs visit elements preventing aggregates recursive rules 
better solution consists choice freely carlo zaniolo wang recursive rules :10.1.1.18.8803
fact positive programs choice equivalent programs negated goals guaranteed total stable models 
rewriting step uses choice produce chain results set results body ordering rules nil nil choice choice aggregates computed internal recursive predicate rules new nil nil single new new old multi old new recursive rules implement inductive definition calling single multi predicates written user 
single initialize new denotes input value new value aggregate singleton set 
new input value old denoting partial value aggregate fed multi predicate processed multi rules defined user returned head recursive rule 
number kept table computed follows basic bom computation simplified efficient atleast aggregate yielding pcost part cst basic part pcost part sb pcost sb cst part sb mult part cst mult improvement respect previous formulation relation qualify part counted rule head 
technique counting children dist problem underlying graph acyclic 
cyclic graphs current formulation exploits property extrema unaffected duplicates idempotence 
applications sql databases encouraged success ldl designed implemented system called sql ag supports sql user defined aggregates extends supporting early returns 
explored new aggregates express complex data mining algorithms encouraging results complex algorithms iceberg queries sprint algorithm enhanced public technique proposed pruning quickly coded special user defined aggregates developed versions sql ag :10.1.1.40.6757
oracle dbmss sql described 
describe second system built db user defined scratch pad functions 
implements sql specification user defined aggregates db 
example user define iterative routine average follows aggregate function number returns number state initialize average init iterate average iterate terminate average terminate average init average iterate average terminate functions user define definition aggregate carlo zaniolo wang sql ag generates source file defines user defined functions groupby implement new aggregate 
