concurrency prolog threads shared database manuel fi es manuel hermenegildo fi es school computer science madrid concurrency logic programming received attention past 
problem proposals applied prolog involve large modi cations standard implementations communication synchronization facilities provided naturally language model feel possible 
propose new mechanism implementing synchronization communication concurrency atomic accesses designated facts shared database 
argue model comparatively easy implement better previous proposals prolog control model standard set built ins 
show proposed model easy express classical concurrency algorithms subsume mechanisms linda variable communication classical parallelism oriented primitives 
report implementation model provide performance resource consumption data 
linda simple powerful concurrency paradigm focuses uni es mechanisms communication synchronization 
linda model assumes shared memory area blackboard tuples written read pattern matching concurrent processes 
writing reading performed number primitives atomic actions 
reading may suspend requested tuple blackboard main synchronization mechanism 
approach available natively libraries logic programming systems :10.1.1.52.3148:10.1.1.37.5323
practical example approach binprolog jinni system 
jinni relatively rich set primitives creating threads called engines providing starting goal means recovering answers returned 
obtaining multiple answers engine possible asking engine call nally fails 
coordination engines achieved linda style set primitives access modify shared blackboard 
