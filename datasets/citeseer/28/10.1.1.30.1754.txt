erratic semantic theory embedded coordination language andrew moran david sands carlsson department computing science chalmers university technology university sweden dave cs chalmers se 
powerful abstraction mechanisms functional programming languages provide means develop domain specific programming languages language 
typically realised designing set combinators higher order reusable programs application area constructing individual applications combining coordinating individual combinators 
concerned successful example embedded programming language library combinators building graphical user interfaces lazy functional language haskell 
library build number substantial applications including web browser proof editor interface proof checker constructive type theory 
develops semantic theory non deterministic stream processors heart concept 
alternative erratic choice mccarthy amb bottom avoiding non deterministic operator embodies certain kind fairness denotational approach documented problems modelling mccarthy amb see mor 
serious attempt denotational semantics mccarthy amb due bro developed order language doesn consider sharing 
moran lm consider mccarthy amb context call name lambda calculus 
able construct powerful equational theory language including proof rules recursion operational approach language question call need 
choice operator considered article simpler arguably useful able build semantic theory deterministic call need developed ms :10.1.1.37.144
schmidt schau kss reduction calculus call need erratic non determinism extension need lambda calculus 
believe theory equivalence subsumes calculus schmidt schau way deterministic part subsumed improvement theory ms :10.1.1.37.144
schmidt schau theory inadequate purposes 
firstly considers pure lambda calculus constructors 
moran lm consider mccarthy amb context call name lambda calculus 
able construct powerful equational theory language including proof rules recursion operational approach language question call need 
choice operator considered article simpler arguably useful able build semantic theory deterministic call need developed ms :10.1.1.37.144
schmidt schau kss reduction calculus call need erratic non determinism extension need lambda calculus 
believe theory equivalence subsumes calculus schmidt schau way deterministic part subsumed improvement theory ms :10.1.1.37.144
schmidt schau theory inadequate purposes 
firstly considers pure lambda calculus constructors 
secondly consider cyclic recursion example express cyclic combinator 
thirdly importantly include proof principles reasoning recursive definitions 
unique fixed point induction context lemma allows number basic equivalences established 
basic equivalences provable typically insufficient prove interesting recursively defined entities 
directly apply context lemma reasoning way somewhat tedious 
alternative develop operational counterpart denotational fixed point induction rule characterises recursive function say terms finite approximations 
ms moran sands show call need supports fixed point induction rule cost sensitive preorder :10.1.1.37.144
adapted setting studying convex approximation relation focus different proof rule recursion unique fixed points 
known proof technique process algebra involves syntactically characterising class recursion equations unique solution 
knowing recursive equation unique fixed point means prove equivalence terms showing satisfy recursion equation 
usual syntactic characterisation guarded recursion recursive calls syntactically guarded observable action fixed point definition unique 

lm moran operational theory mccarthy amb submitted publication 
mil milner fully models typed calculus theoretical computer science 
mor moran call name call need mccarthy amb ph thesis department computing sciences chalmers university technology sweden september 
ms moran sands improvement lazy context operational theory call need extended version extended version ms available authors november :10.1.1.37.144
ms moran sands improvement lazy context operational theory call need proc :10.1.1.37.144
popl acm press january pp 

mt mason talcott equivalence functional languages effects journal functional programming 
lm moran operational theory mccarthy amb submitted publication 
mil milner fully models typed calculus theoretical computer science 
mor moran call name call need mccarthy amb ph thesis department computing sciences chalmers university technology sweden september 
ms moran sands improvement lazy context operational theory call need extended version extended version ms available authors november :10.1.1.37.144
ms moran sands improvement lazy context operational theory call need proc :10.1.1.37.144
popl acm press january pp 

mt mason talcott equivalence functional languages effects journal functional programming 
nn nielson nielson cml process algebra theoretical computer science 
