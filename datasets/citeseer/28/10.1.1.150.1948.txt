op 
byzantine generals transaction commit protocols leslie lamport computer science laboratory sri international michael fischer computer science department yale university april minor revision april author supported part national science foundation number mcs 
second author supported part national science foundation number mcs office naval research number 
transaction commit problem distributed database system instance weak byzantine generals problem 
shown assumption process fail crashing failing send messages solution problem tolerate failures worst case require message passing delays 
assumption simple solution exhibits optimal worst case behavior 
contents wbg problem time complexity wbg problem byzantine generals solution ii database systems point processing transaction irrevocable decision abort commit committing transaction involves inserting changes database 
distributed database system decision announced sites affected transaction 
show designing fault tolerant protocol arriving decision equivalent weak byzantine generals wbg problem introduced closely related byzantine generals problem described :10.1.1.12.1697:10.1.1.12.1697
byzantine generals problems studied weak assumptions behavior failed process particular failed process lie sending contradictory information processes 
solutions despite weak assumptions 
solutions shown optimal certain respects 
particular shown solution handles process failures worst case require messagepassing delays 
transaction commit protocol studied stronger assumption process failure failed process simply dies death detectable processes 
call simple failure crash 
processes fail crashing called fail processes 
byzantine generals problems concentrated handling lying processes general feeling relevant processes fail crashing 
main result solution wbg problem transaction commit protocol handle crashes requires message passing delays worst case 
restricting failure simple crashes improve worst case time complexity transaction commit 
weaker result kind obtained dolev strong restricted processes fail failing send messages allowed failed process continue sending messages fails 
result similar somewhat weaker obtained independently hadzilacos 
demonstrate solution handle crashes crashes occur process aware outcome message passing delays 
see discussion early stopping byzantine generals solutions 
wbg problem assume system consisting processes numbered communicate directly process sending messages 
weakest form transaction commit problem process initially chooses transaction commit abort communicates processes decide final action committing aborting transaction 
conditions satisfied 
tc 
process fails processes initially choose action final action taken processes 
tc 
processes fail take final action 
wish strengthen condition example requiring absence failures transaction abort process initially chooses abort 
lower bound time complexity suffices weaker problem 
algorithm give section obtain stronger condition 
transaction commit protocol usually stated terms transaction coordinator single process initial decision abort commit 
condition tc replaced tc process fails action taken process initially chosen transaction coordinator 
note tc stronger tc protocol satisfying tc satisfies tc 
considering weaker condition tc obtain stronger lower bound section 
algorithm section satisfies condition stronger tc wbg problem actions commit abort generalized arbitrary values set process initially chooses initial private value chooses final public value communicating processes 
tc tc obvious generalizations wbg 
process fails processes initially choose private value value chosen processes public value 
wbg 
processes fail choose public value 
time complexity wbg problem section prove result worst case time complexity solution wbg problem 
reasoning byzantine generals problems tends subtle informal reasoning easily lead errors 
formally define concepts give detailed proof result 
notation set possible values processes choose 
set possible messages processes send 
cardinality finite set set finite sequences elements set empty sequence denoted 

si 
sj initial subsequence set integers 
integer 
note empty set denote 
set integers 
integer 
note 
wbg algorithm processes choose initial private values send messages order agree public value 
model message passing terms distinct rounds process send round messages received round messages sent 
easiest think model describing synchronous algorithm processes form synchronization external algorithm synchronized clocks decide round 
model represent asynchronous algorithm sending message caused receipt message timeout indicates failure message arrive 
asynchronous algorithm simply define process round messages message contents depends round message received process timeout indicating absence round message 
define scenario single execution algorithm excluding processes actual choice public values 
consider scenarios process fail crashing simply failing send messages 
assume process detect absence message tell sender crashed sending message 
definition round scenario consists 
denotes private value initially chosen process 
set cr cr cr 
denote cr 
cr denotes set processes crashed sending round messages 
set processes crash scenario 
cr 

ms qs means th message sent process round message mi having process qi destination 
process crashed sending messages round 
note process send different messages process single round 
send messages 
assuming process crashed sends message round 
assumption simplify proof distinguish process crashes round sending round messages crashes round sending messages round 
substantive restriction algorithm process sends messages round modified having process send null message 
define relations scenarios 
definition round scenarios forr cr cr ii iii 
means scenarios round 
forr ii cr cr iii means scenarios round behavior round 
forr ii 
ms qs subsequence consisting mi qi qi means rounds scenarios appear process 
exists means scenarios appear process fail 
note relations symmetric reflexive 
define message passing protocol set possible scenarios generated algorithm 
assume protocol deterministic messages sent process round depend initial private value process messages receives round 
possible sources nondeterminism message passing protocol wbg algorithm messages process sends depend order messages sent received vary random transmission delays 
process deliberate nondeterministic choice 
proving nonexistence result argue follows nonexistence algorithm employing deterministic protocol implies nonexistence nondeterministic protocol 
nondeterministic protocol remove sources nondeterminism obtain deterministic arbitrarily fixing transmission delays eliminate nondeterminism message arrival time 
fixing advance choice process 
algorithm works nondeterministic protocol nondeterminism removed restrictions 
suffices prove nonexistence algorithm deterministic message passing protocol 
informal reasoning avoided allowing nondeterministic protocols formal definition 
type nondeterminism appear protocol easy define wbg algorithm allowing process actions depend private value chosen process 
course kind nondeterminism implemented real protocol way process know private values processes messages received 
difficult devise formal definition nondeterministic protocol allows kinds nondeterminism third 
chosen avoid problem consider deterministic protocols 
natural define protocol algorithm formal machine generates scenarios 
formally define protocol set possible scenarios generated 
approaches logically equivalent algorithm identified set behaviors produce 
chosen view protocol set scenarios reason 
want place weakest possible constraints protocol leads strongest possible lower bound result applies widest class protocols 
weakening constraints protocol means allowing larger class scenarios 
specifying algorithm allow larger class behaviors usually requires explicit addition nondeterminism algorithm 
define protocol algorithm trying weaken definition require describing complex algorithm 
hand approach specify protocol placing conditions set scenarios allowing larger class behaviors means adding fewer conditions 
leads naturally weakest possible definition 
definition ak round crash message passing protocol consists set round scenarios 
restrict attention scenarios processes crash 

values 
vn exists scenario vp 
ii 
processes choose initial private values need fail 

cr 
means messages sent process round determined sees round crash round 


ms qs ii 
ms qs 
scenario round crashes sending round message sent 
note part definition cr interchanging shows equal initial subsequences 
implies part cr 
come formal definition wbg algorithm 
practice wbg algorithm specify process chooses public value function initial private value messages received 
considering done process define wbg algorithm single mapping scenarios values assigns scenario public value chosen process crash scenario 
condition wbg implies processes crash choose public value 
leads definition 
definition round crash wbg algorithm consists round crash message passing protocol pand mapping 
ifs condition wbg 


process crash scenario sees set messages wbg processes choose public value 
main result 
theorem exist round fault wbg algorithm 
hypothesis obvious problem possible choice public value 
hypothesis needed conditions wbg wbg essentially vacuous processes crash 
ak round fault algorithm easily transformed fault algorithm 
prove theorem need lemmas additional definitions 
part lemma states rounds scenario continued complete scenario processes crash round round lemma round crash message passing protocol scenario ii cr 
ii cr 
iii cr 
proof proof part induction forr scenario existence guaranteed part definition letting vp 
assume 
applying induction hypothesis find scenario ii cr 
denote set processes cr cr set processes crash round part definition implies 
successive application part definition part show maintained construct scenario cr cr 
cr cr orp cr cr 
cases case equal definition second case part definition 
shows completes proof part prove part repeatedly apply part definition get scenario show relation maintained step 
apply part find required scenario definition round scenario regular cr ii cr 
regular scenario processes crashed round processes crash 
lemma round message passing protocol regular scenarios proof proof part backwards induction immediate definition 
assume cr cr 
implies cr cr cr 
cr cr 
cr cr 
case 
second case part definition implies 
shows apply induction hypothesis show finishing proof part prove part prove stronger result regular proof backwards induction follows immediately definition 
assume assumption regularity implies cr cr cr ii cr 
case part definition subsequence second case definition 
conclude result follows induction hypothesis 
definition relation defined reflexive transitive closure smallest transitively closed relation ii implies heart proof result 
lemma round crash message passing protocol regular scenarios cr proof 
ms qs 
proof double induction forward induction backwards induction involves proving cases 

assuming lemma holds 
assuming lemma holds 
case see definition implies andthe result follows part lemma 
consider second case applying part definition obtain scenario 
ms qs 
clear qs 
qs qs apply lemma conclude result follows transitivity consider third case apply part lemma cr cr implies regular 
regular 
apply lemma deduce apply part lemma obtain scenario qs cr cr qs 
regular regular 
apply lemma conclude sos apply apply part definition obtain scenario cr cr cr 
ms qs 
note rounds identical process crashes message sooner sends message qs 
qs cr cr 
apply 
wehave sends messages round wecan apply lemma conclude gives desired result prove theorem assuming existence round fault wbg algorithm deriving contradiction 
protocol mapping comprising wbg algorithm 
distinct elements scenario existence scenarios guaranteed part definition 
part definition 
exists 
part lemma exists regular scenario regular scenario 
lemma processes choose initial private value 
part definition implies 
pt apply part lemma conclude implies follows part definition implies required contradiction 
byzantine generals solution ordinary byzantine generals problem distinguished process take process private value 
goal process choose value call public value conditions satisfied bg 
process fail process fail chooses process private value public value 
bg 
processes fail choose public value 
course bg wbg 
condition bg generalizes tc arbitrary set values just commit abort important strengthens apply processes fail 
solution byzantine generals problem easy construct solution weak byzantine generals problem transaction commit problem 
converse case byzantine generals problem sense harder weak byzantine generals problem 
refer reader details byzantine generals problem discussion differs wbg problem :10.1.1.12.1697:10.1.1.12.1697
section give simple algorithm solves byzantine generals problem assumption process fail crashing 
round algorithm works presence crashes theorem optimal worst case time complexity 
show processes crash process chooses public value round sends messages round 
algorithm described informally leave formal definition message passing protocol reader 
process crash sending message default value chosen case 
null denote value 
algorithm bg round process sends value process 
round process 
received value process round takes value public value sends value process stops executes round 

process sent don know message round ii crashed round detected failure receive round message process takes null public value sends value null process stops 

sends message don know process 
round process stopped 
received value process round takes public value 

chooses null public value 
theorem ii algorithm bg satisfies conditions bg bg processes fail process fail crashing 
processes crash process chooses public value round stops round 
proof process crash successfully sends value process round process crash choose value public value round 
proves condition bg 
prove bg show process crash chooses public value process crash chooses public value 
may obviously assume choose value null suppose chooses value null 
processes fail crashing process sends value receiving process process send private value round 
process choose null public value 
show choose value null 
assume chooses public value result receiving message sent round round process sent value process 
round process sent don know message round crashed previous round 
implies chosen value null round including round 
send value round value received crash 
case choose value round 
rounds different process sent value processes 
hypothesis processes crash 
process crash sent value processes 
crash received value chosen public value 
completes proof condition bg 
assume processes crash process chooses value round observe failure process round receives message process previously observe failed 
crashes happen round 
chooses value process stops sending round messages 
crash algorithm bg lets process chooses public value round may round 
theorem implies algorithm better 
hope find algorithm avoids sending round messages 
shown impossible 
proof essentially proof theorem omitted 
algorithm optimal terms number rounds takes 
demillo lynch merritt 
cryptographic protocols 
proceedings th acm sigact symposium theory computing may 
dolev reischuk strong 
eventual immediate 
proceedings rd symposium foundations computer science 
dolev strong 
requirements agreement distributed systems 
proc 
nd symposium reliability distributed software database systems pittsburgh july 
michael fischer nancy lynch 
lower bound time assure interactive consistency 
hadzilacos 
lower bound byzantine agreement fail processors 
harvard university center research computing technology technical report tr july 
lamport shostak pease :10.1.1.12.1697
byzantine generals problem 
acm trans 
prog 
lang 
systems july 
lamport :10.1.1.12.1697
weak byzantine generals problem 
journal acm pease shostak lamport 
reaching agreement presence faults 
journal acm april 
schneider 
byzantine generals action implementing fail processors 
acm trans 
computer systems may 

