secure information flow multi threaded imperative language geo rey smith school computer science florida international university miami fl usa cs fiu edu dennis volpano computer science department naval postgraduate school monterey ca usa volpano cs nps navy mil previously developed type system ensure secure information ow sequential imperative programming language vsi 
program variables classi ed high low security intuitively wish prevent information owing high variables low variables 
extend analysis deal multithreaded language 
previous type system insu cient ensure desirable security property called noninterference 
noninterference basically means nal values low variables independent ofthe initial values high variables 
modifying sequential type system able guarantee noninterference concurrent programs 
crucial result purely nondeterministic thread scheduling 
implementing scheduling problematic show restrictive type system guarantee noninterference deterministic easily implementable scheduling policy round robin time slicing 
consider consequences adding clock language 
success mobile code technologies depends large part kinds security guarantees clients executing code 
concerns ensuring code respects client privacy sensitive information improperly disclosed 
current software approaches security address issue protecting privacy introducing protection domains access privileges 
basic idea specify security policy set privileges piece code digital signature 
certain access privilege code attempts cross domain boundary say example attempts access local le system 
privilege granted execution proceeds 
keep mind decision security policy code signature code 
approach taken security architecture java appear th acm symposium principles programming languages san diego california january 
developer kit jdk extended stack introspection proposal 
suppose prove program satis es secure information ow property guarantees program respects private information 
need check runtime code permission read private information simply trust property guarantees information improperly disclosed 
approach taken 
interested developing type system concurrent programming language exploring secure ow properties shown hold typed programs 
atype system code type checked secure ow violations just 
code type checks allowed run access private information checks 
type checking done client security architecture 
way done code certi cation site 
example orts underway companies certify security compilation units electronic commerce servers 
understandable consumer con dence low stolen credit card numbers despite encryption 
site apply type checker initial step certifying code 
continues earlier vsi vs vs relationship typing security properties semantics concurrent setting 
presents results 
type system vsi longer su cient guarantee desirable security property called noninterference add threads language 
noninterference property intended assert information ow high variables low variables basically nal values low variables independent ofthe initial values high variables 

noninterference property restored multi threaded language requiring guards loops type low requiring loops type low cmd 
conditionals need restricted 
main result 

crucial result purely nondeterministic thread scheduling 
mean suggest system address security concerns 
integrity properties instance best handled code signing 
clear implemented practice 
show deterministic scheduling round robin time slicing implementation java threads windows nt noninterference property hold 
show noninterference restored regardless scheduling policy requiring guards conditionals type low 

consider adding clock language 
show clock isgiven type high noninterference preserved 
remainder organized follows 
section example shows type system vsi insu cient ensure noninterference multi threaded language 
sections formally de ne semantics multi threaded language type system 
section prove type system guarantees noninterference property 
section explore adding clock language ects noninterference property 
section consider consequences nondeterministic implementable semantics concurrency 
section discuss interactions noninterference property language semantics 
section discuss related 
ect threads noninterference authors showed denning style analysis imperative programs formulated type system vsi 
example suppose support security classes low high 
security classes types program variables 
variables indicate holds high security information indicate holds low security information 
improper assignment caught type error 
note opposite assignment allowed deal introduce subtyping type system say subtly type system guard implicit information ows seen program indirectly copies bit deal implicit ows type system classi es program commands having type cmd cmd intuitively command type cmd transmit information variables safely branches conditional guard type vsi shown type system ensures typed program satis es noninterference property described follows suppose memories agree variables run successfully starting yielding nal memories agree variables 
intuitively means information leak variables variables nal values variables independent initial values variables 
furthermore programs checked automatically type correctness doing type inference vs 
possible information variables leak outside observer observe halts aborts fails terminate long takes terminate 
see vs approaches eliminating covert information ows 
language considered vsi sequential mobile programs multi threaded 
reason important extend analysis deal multi threaded language see noninterference property ected presence concurrency 
main goal 
example shows type system vsi longer su cient ensure noninterference extend language concurrent threads communicate shared memory 
program consists threads 
assume pin var result var 
threads program typed type system vsi 
typing gives trigger trigger type var mask type var 
program run memory initially trigger trigger result mask power pin arbitrary natural number twice mask assuming scheduling fair thread scheduled nitely program eventually halts value pin copied result 
noninterference property violated 
restore noninterference property concurrent setting impose new restrictions typing loops require guard loop type loop get type cmd 
new restrictions succeed ruling program trigger trigger type guards loops threads sections develop ideas precisely proving new restrictions loops su cient restore noninterference property multithreaded programs 
syntax semantics threads written simple imperative language phrases expressions commands metavariable ranges identi ers integer literals 
integers values false nonzero true 
note expressions pure cause side ects total contain partial operations division 
concurrent systems consider consist simply set commands threads run concurrently consider facilities creating new threads 
approach taken cli jones jon model system threads object map simply nite function thread identi ers 
commands 
addition single global memory shared threads maps identi ers integers 
note simple context don need distinguish identi ers locations 
way threads interact shared memory 
assume simplicity expressions evaluated atomically 
simply extend memory obvious way map expressions integers writing denote value expression memory note thread mask trigger result result mask bitwise trigger trigger thread mask trigger result result mask bitwise complement mask trigger trigger thread mask pin mask trigger trigger mask mask trigger trigger threaded program leaks information de ned provided identi er occurring domain case typed 
gunter gun de ne semantics commands transitions update dom 
sequence 
branch nonzero loop typed typed dom typed compared type system vsi typings loops restricted ways rst guard loop type second loop get type cmd 
type soundness lemmas establish key properties ensured type system lemmas prove typed programs noninterference property 
lemma simple security identi er class proof 
induction structure lemma con nement cmd identi er assigned class guaranteed terminate successfully memory dom dom 
nonzero proof 
induction structure fact contain loops 
rules de ne transition relation 
con gurations 
con guration pair simply memory rst case command executed second case command terminated yielding nal memory write 
fold self composition 
re exive transitive closure 
rules specifying global transitions system threads global 
semantics global level purely nondeterministic 
point don require scheduling fair 
semantics open question discussed sections 
type system types system data types phrase types var cmd simplicity limit security classes just possible generalize arbitrary partial order security classes 
type system rules allows prove typing judgments form subtyping judgments form 
denotes identi er typing nite function identi ers phrase types 
lemma subject reduction cmd cmd 
proof 
induction structure form follows cmd cmd 
argument complicated somewhat presence subtyping 
transition second rule sequence induction cmd rule compose cmd 
transition rst rule sequence argument simpler 
form cmd cmd 
case similar 
need lemma execution sequential composition lemma 
proof 
induction 



de nition identi er typing say memories equivalent written domain agree identi ers 
say commands equivalent shown rules 

type cmd 
ident int val var sum assign var cmd compose cmd cmd cmd cmd cmd cmd cmd cmd base reflex cmd cmd cmd subtype typing subtyping rules 
extend equivalence gurations de ning notion equivalence commands 
trying show executing command twice equivalent memories leads equivalent memories 
prove property induction number transitions necessary deal fact executions proceed quite di erently conditionals guards need follow executions 
reason prove general property roughly speaking equivalent con gurations go equivalent con gurations 

need clause de nition seen example 
suppose cmd disagree value command go go need don type cmd 

theorem sequential noninterference suppose typed 




exists 
proof 
induction structure dealing case type cmd 
case con nement lemma assign variables type 

type cmd subject reduction lemma 
transition 
appeal con nement lemma get assigns variables type exists 
re done 
case type cmd considering turn possible forms case type cmd type cmd 
type var type simple security lemma identi er class 
case 
type cmd form 
induction exists suchthat 

lemma 

clause de nition 
similarly 
induction exists suchthat 
lemma 

proof break loops typed vsi 
rules contain loops assured terminating 
case 
type cmd wemust type cmd 
implies 
nonzero case 
loops type cmd wemust implies 


sequential noninterference theorem says reaches con guration step reaches equivalent con guration zero steps 
bound strengthened 
example suppose type cmd type cmd 
suppose step goes steps 
goes step 
takes steps get 
need run completion order get required program equivalence equivalent tod de nition 
wish apply sequential noninterference theorem establish concurrent noninterference theorem 
lemma depends crucially nondeterministic scheduling shows execution thread lifted execution global system lemma global execution suppose 





proof 
induction 


inductive step 
exists 

induction rule global 

second follows 

case 
similar 

lemma remains true assume scheduling fair dealing nite computations 
assume bounded fairness sothat xed bound number transitions thread thread gets turn lemma holds 
de nition dom dom dom 
corollary concurrent noninterference suppose typed 
exists 

proof 
global exists 
inspection rules 



rst case sequential noninterference theorem exists 

global execution lemma 

second case similar 
fg denote empty object map 
give corollary nal corollary suppose typed 
fg thenthere exists 
fg proof 
easy generalization concurrent noninterference corollary follows exists 
fg 
fg de nition adding clock language languages include system clock read running program instance java includes function system 
expect implications secure information ow timing information observable internally 
section explore issue 
include clock special identi er initially tells number transition steps current program execution 
read giving type var var 
wemust modify semantics commands update appropriately modi ed transitions 
assume run trouble noninterference property 
example suppose cmd command takes steps nish 
consider program just thread update dom 
branch nonzero loop nonzero 
modi ed transitions maintain clock assuming initially program copies checking value program determine executed turn tells 
assume program ill typed branches second conditional type cmd 
proof theorem goes noninterference property preserved 
scheduling policies semantics concurrency rule global purely nondeterministic rule simply says step thread selected run step 
important understand noninterference results section depend crucially nondeterminism 
example corollary says way threads leads termination way scheduling threads leads equivalent result 
schedules di erent 
particular rst schedule treats threads equally sense gives thread roughly equal amount cpu time second schedule greatly favor thread 
impose additional constraints way scheduling done may falsify global execution lemma noninterference property 
example suppose scheduling done roundrobin time slicing time slice steps 
consider threads thread thread situation quite di erent usual proves correctness concurrent program respect nondeterministic scheduler 
immediately say program correct respect scheduler care implement schedule produced implemented scheduler produced nondeterministic scheduler 
suppose cmd command takes longer steps nish 
terminate state terminate state 
terms proofs going sequential noninterference theorem exists 
case 
time slicing scheduler thread run long time giving turn thread approach scheduling probabilistic 
attempt approximate ect rule global ipping coins step select thread run 
ways faithful rule global adoption probabilistic semantics possible create probabilistic covert channels gra addressed re ning notion noninterference 
point discussed detail section 
preserve noninterference face arbitrary scheduler appears necessary require guards conditionals type done strengthen sequential noninterference theorem form theorem lockstep execution suppose typed exists 
exists 
lockstep execution result strong establish concurrent noninterference regardless scheduling done 
done exactly mirrored lockstep execution implies add clock give program timing depend values variables 
unfortunately restricting conditionals way quite burdensome practice 
hand useful guarding timing attacks 
kocher example describes timing attack rsa modular exponentiation learn private key koc 
attacks possible merely knowing source code algorithm 
typing conditionals loops rejects code susceptible kind attack 
closer look noninterference noninterference property basically says nal values low variables independent initial values high variables 
precisely changing initial values high variables ect set possible nal values low variables 
observing nal values low variables reveal initial values high variables 
consider example mclean mcl 
high variable value low variable 
consider threads thread thread rand rand returns random integer 
program satis es noninterference property regardless value nal value integer 
program doesn secure 
run program repeatedly expect sequence nal values feel quite con dent case value 
explained 
answer implicitly changed semantics language purely nondeterministic semantics rule global kind probabilistic semantics 
nondeterministic semantics outcomes possible impossible distinction 
probabilistic semantics outcomes occur probability distribution possible probabilistic inferences 
example assume thread equal probability scheduled step rand generates numbers range equal probability see nal value initial value probability number probability 
con dent correctly guessing initial value running program repeatedly picking common nal value rule probabilistic inferences wewould need re ned notion noninterference requires probability distribution nal value independent initial value program satisfy probabilistic notion noninterference changes initial value change distribution nal value see appropriate formulation noninterference property depends kind language considered 
cases idea nal values low variables independent initial values high variables 
deterministic language means changing initial values high variables change nal values low variables 
nondeterministic language considered means changing initial values high variables change set possible nal values low variables 
probabilistic language means changing initial values high variables change distribution possible nal values low variables 
course argued nondeterministic semantics unrealistic real implementation display probabilistic behavior 
worth remarking nondeterministic semantics regarded abstraction probabilistic semantics equates possible occurs nonzero probability 
instance implementation rule global ips coins step decide thread run property thread nonzero probability selected step 
terminating execution possible rule global nonzero probability occurring implementation 
corollary hold implementation 
careful view possibility 
corollary assures implementation certain initial values high variables observing nal values low variables mean guess initial values high probability 
worth remarking thread example rejected type system 
suggests typed programs system probabilistic semantics satisfy sort probabilistic noninterference property 
easy see type system rule probabilistic timing channels 
example suppose value low variable high command takes long time execute 
consider threads thread thread thread scheduling works ipping coin step decide thread run high probability threads run rate 
high probability value ends copied extending type system deal probabilistic language remains area study 
known cases noninterference restrictive 
particular noninterference accommodate information downgrading 
example information ectively downgraded encrypted 
security literature properties proposed 
noninterference rst proposed goguen meseguer gm deterministic systems 
mccullough mcc proposed generalized noninterference restrictiveness nondeterministic systems gray gra gra proposed restrictiveness information flow security probabilistic systems 
see mclean mcl comparison properties johnson wj information theoretic account possibilistic probabilistic noninterference 
problem ciphertext sensitive changes high cleartext treat ciphertext low 
clear violation noninterference mcl 
related analyzing code various security properties long history 
denning den den dd developed form program certi cation detecting secure ow violations code 
inspired bell lapadula bl fenton fen lampson lam 
classic operating systems protection harrison ruzzo ullman showed problem determining program comprised simple primitives updating access matrix leaks access right undecidable 
see ddg excellent discussion solvability complexity issues associated formal systems reasoning program security 
gligor hg describe ways eliminate timing channels source code trusted computing bases automated tool 
ban atre bryce le metayer attempt treat secure information ow nondeterministic setting give compile time technique detecting ow violations sequential programs 
orts closely related attempt characterize sort security analysis formal system types 
palsberg rb developed system manage trust lambda calculus 
clear appropriate notion type soundness trust system explicit coercions trusted untrusted entities available core calculus 
suitable notion speak security way 
abadi aba developed system typing rules ensuring secrecy cryptographic protocols 
protocols expressed extension pi calculus called spi 
type soundness testing equivalence substitutions values variables typed spi term 
words spi term called observer distinguish heintze riecke hr attempt re ne denning analysis detailed type structure 
extend type system concurrent language treat type soundness case 
myers liskov ml describe decentralized approach information secure information ow setting soundness addressed 
sort formal justi cation downgrading needed 
clear just ordinary thread implementations users exploit seemingly innocuous features thread priorities scheduling easily build reliable covert channels 
shelf implementation java 
furthermore bandwidth channels issue private keys credit card numbers require little bandwidth 
truly secure programming language demands fundamental changes language design understanding relationship semantics security 
acknowledgments material activities supported national science foundation ccr ccr 
grateful mart abadi paul attie nevin heintze john mclean jon riecke helpful discussions scott smith shepherding 
aba mart abadi 
secrecy typing cryptographic protocols 
proceedings tacs september 
ban atre bryce le metayer 
compile time detection information ow sequential programs 
proceedings rd european symposium research computer security pages brighton uk november 
lecture notes computer science 
bl david bell leonard lapadula 
secure computer systems mathematical foundations model 
technical report mitre bedford ma 
dd dorothy denning peter denning 
certi cation programs secure information ow 
communications acm 
ddg denning denning garland harrison ruzzo 
proving protection systems safe 
technical report csd tr purdue university november 
den den dorothy denning 
secure information flow computer systems 
phd thesis purdue university west lafayette may 
dorothy denning 
lattice model secure information ow 
communications acm 
fen fenton 
information protection systems 
phd thesis university cambridge 
gm goguen meseguer 
security policies security models 
proceedings ieee symposium security privacy pages oakland ca 
li gong marianne mueller roland 
going sandbox overview new security architecture java development kit 
proceedings usenix symposium internet technologies systems monterey ca december 
gra james gray iii 
probabilistic interference 
proceedings ieee symposium security privacy pages oakland ca may 
gra james gray iii 
mathematical foundation information ow security 
proc 
ieee symp 
research security privacy pages oakland ca may 
gun carl gunter 
semantics programming languages 
mit press 
hg hr gligor 
formal methods automated tool timing channel identi cation tcb source code 
proceedings nd european symposium research computer security pages november 
nevin heintze jon riecke 
slam calculus programming secrecy integrity 
proceedings th acm symposium principles programming languages 
harrison ruzzo ullman 
protection operating systems 
communications acm august 
jon cli jones 
practical problems uence semantics 
proceedings th european symposium programming volume lecture notes computer science pages berlin april 
springer verlag 
koc paul kocher 
timing attacks implementations di hellman rsa dss systems 
proceedings th annual crypto conference august 
lam butler lampson 
note con nement problem 
communications acm 
mcc mccullough 
noninterference composability security properties 
proceedings ieee symposium security privacy pages oakland ca 
mcl john mclean 
security models information ow 
proceedings ieee symposium security privacy pages oakland ca 
ml andrew myers barbara liskov 
decentralized model information ow control 
proceedings th acm symposium operating systems principles october 
jens palsberg peter rb trust calculus 
proceedings static analysis symposium 
lecture notes computer science 
vs dennis volpano geo rey smith 
eliminating covert ows minimum typings 
proc 
th ieee computer security foundations workshop pages 
ieee june 
vs dennis volpano geo rey smith 
approach program security 
proc 
tapsoft volume lecture notes computer science pages 
springer verlag april 
vsi dennis volpano geo rey smith cynthia irvine 
sound type system secure ow analysis 
journal computer security 
dan wallach dirk balfanz drew dean edward felten 
extensible security architectures java 
technical report department computer science princeton university april 
wj todd dale johnson 
information ow nondeterministic systems 
proceedings ieee computer society symposium research security privacy pages oakland ca may 

