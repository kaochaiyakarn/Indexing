rcs system version control walter tichy department computer sciences purdue university west lafayette indiana important problem program development maintenance version control task keeping software system consisting versions configurations organized 
revision control system rcs software tool assists task 
rcs manages revisions text documents particular source programs documentation test data 
automates storing retrieval logging identification revisions provides selection mechanisms composing configurations 
introduces basic version control concepts discusses practice version control rcs 
conserving space rcs stores deltas differences successive revisions 
delta storage methods discussed 
usage statistics show rcs delta storage method space time efficient 
concludes detailed survey version control tools 
keywords configuration management history management version control revisions deltas 
rcs system version control walter tichy department computer sciences purdue university west lafayette indiana 
version control task keeping software systems consisting versions configurations organized 
revision control system rcs set unix commands assist task 
rcs primary function manage revision groups 
revision group set text documents called revisions evolved 
new revision created manually editing existing 
rcs organizes revisions ancestral tree 
initial revision root tree tree edges indicate revision evolved 
managing individual revision groups rcs provides flexible selection functions composing configurations 
rcs may combined resulting powerful package version control 
rcs offers facilities merging updates customer modifications distributed software development automatic identification 
identification stamping revisions configurations unique markers 
markers akin serial numbers telling software maintainers unambiguously configuration 
rcs designed production experimental environments 
production environments access controls detect update conflicts prevent overlapping changes 
experimental environments strong controls counterproductive possible loosen controls 
rcs originally intended programs useful text revised frequently previous revisions preserved 
rcs applied successfully store source text drawings vlsi layouts documentation specifications test data form letters articles 
discusses practice version control rcs 
introduces basic version control concepts useful clarifying current practice designing similar systems 
revision groups individual components treated sections extensions configurations follow 
size survey version control tools appears 
earlier version published software practice experience july 

getting started rcs suppose text file placed control rcs 
invoking check command ci creates new revision group contents initial revision numbered stores group file told command deletes asks description group 
description state common purpose revisions group part group documentation 
check commands ask log entry summarize changes 
revision assigned default log message just records fact initial revision 
files called rcs files stands versions called working files 
get back working file previous example execute check command command extracts latest revision revision group writes file edited finished checked back ci ci ci assigns number new revision 
ci complains message ci error lock set login system administrator decided configure rcs production environment enabling strict locking feature 
feature enabled rcs files initialized check operations require lock previous revision current evolved 
locking prevents overlapping modifications people file 
locking required revision locked check option course late check locking changed checking file overwrite modifications 
prevent accidental overwrites senses presence working file asks user really intended overwrite 
overwriting check useful backing previous revision 
able proceed check case execute rcs command retroactively locks latest revision locked 
case programmers involved negotiate modifications take precedence 
rcs file private owner file expected deposit revisions strict locking feature unnecessary may disabled 
strict locking disabled owner rcs file need lock check 
safety reasons 
turning strict locking done commands rcs rcs commands enable disable strict locking feature rcs file individually 
system administrator decides strict locking enabled initially 
reduce clutter working directory rcs files moved subdirectory name rcs 
rcs commands look directory rcs files 
commands rcs subdirectory change may undesirable ci deletes working file 
instance save current revision continue editing 
invoking ci checks usual performs additional check locking 
working file disappear check 
similarly option check followed checkout locking 
option useful file needed compilation check 
options update identification markers working file see 
ident rcs rlog operations ci rcs provides commands extract identification markers change rcs file attributes remove unchanged working files optional compare revisions record configuration optional merge revisions read log messages information rcs files synopsis commands appears appendix 

automatic identification rcs stamp source object code special identification strings similar product serial numbers 
obtain identification place marker id text revision instance inside comment 
marker string form id filename date time author state check operation replace string need touched keeps date automatically 
propagate marker object code simply put literal character string 
done follows pairs rcs working files specified ways working file rcs file 
pair files may arbitrary path prefixes rcs commands pair intelligently 
static char id command ident extracts markers file particular object code 
ident helps find revisions modules program 
returns complete unambiguous component list copy program reconstructed 
facility invaluable program maintenance 
additional identification markers component id 
marker log similar function 
accumulates log messages requested check 
maintain complete history revision directly inside enclosing comment 
partial reproduction log contained revision file ci log appears file easy determine modifications 
log ci revision wft added option updated assignment date new delta 
added handling default branches 
revision wft added call copy remainder rcs file 
revision wft added ignoring interrupts new rcs file renamed avoids deletion rcs files interrupts 
revision wft corrected checking return code diff 
rcs file inherits mode ci working file write permission removed 

log entries produced marker log 
revisions stored form differences log message physically stored independent number revisions 
log marker incurs negligible space overhead 

rcs revision tree rcs arranges revisions ancestral tree 
ci command builds tree auxiliary command rcs prunes 
tree root revision normally numbered successive revisions numbered field revision number called release number second level number 
explicitly ci command assigns new revision number incrementing level number previous revision 
release number incremented explicitly option ci 
assuming revisions rcs file command ci ci assigns number new revision 
check ins option assign numbers 
release number incremented major transition points development instance new release software product completed 

branches needed 
young revision tree consists branch called trunk 
tree ages side branches may form 
branches needed situations 
temporary fixes suppose tree revisions grouped releases illustrated 
revision release operation customer sites release active development 

revision tree 
imagine customer requesting fix problem revision actual development moved release 
rcs permit extra revision spliced reflect actual development history 
create branch revision check fix branch 
branch starting number revisions branch numbered double numbering needed allow branch say 
revisions second branch numbered 
steps create branch add revision check revision edit change ci check branch sequence commands transforms tree 
note may necessary incorporate differences revision level 
operation automates process see appendix 

revision tree side branch distributed development customer modifications assume situation revision operation customer sites release development 
customer sites rcs store distributed software 
customer modifications placed branch distributed source placed side branch 
software distribution arrives appended trunk customer rcs file customer merge local modifications back new release 
example customer rcs file contain tree assuming customer received revision added local modifications revision received revision merged resulting 

customer revision tree local modifications 
approach practiced project universities cooperate developing national computer network 
parallel development desirable explore alternate design different implementation technique parallel main line development 
development carried side branch 
experimental changes may moved main line abandoned 
conflicting updates common occurrence programmer checked revision complete assignment reason 
person perform modification immediately 
case second person check revision modify check side branch merging 
node revision tree consists attributes revision number check date time author identification log entry state actual text 
attributes determined time revision checked 
state attribute indicates status revision 
set automatically experimental check 
revision promoted higher status example stable released 
set states user defined 

revisions represented deltas conserving space rcs stores revisions form deltas differences revisions 
user interface completely hides fact 
delta sequence edit commands transforms string 
deltas employed rcs line means edit commands allowed insertion deletion lines 
single character line changed edit scripts consider entire line changed 
program diff produces small line delta pairs text files 
edit script take longer compute significantly shorter 
deltas classical space time tradeoff deltas reduce space consumed increase access time 
version control tool impose little delay possible programmers 
excessive delays discourage version controls induce programmers take shortcuts compromise system integrity 
gain reasonably fast access time editing compiling rcs arranges deltas way 
revision trunk stored intact 
revisions trunk stored reverse deltas 
reverse delta describes go backward development history produces desired revision applied successor revision 
implementation advantage extraction latest revision simple fast copy operation 
adding new revision trunk fast ci simply adds new revision intact replaces previous revision reverse delta keeps rest old deltas 
ci requires computation new delta 
branches need special treatment 
naive solution store complete copies tips branches 
clearly approach cost space 
rcs uses forward deltas branches 
regenerating revision side branch proceeds follows 
extract latest revision trunk secondly apply reverse deltas fork revision branch obtained thirdly apply forward deltas desired branch revision reached 
illustrates tree side branch 
triangles pointing left right represent reverse forward deltas respectively 

revision tree reverse forward deltas 
implementing fast check latest trunk revision arrangement disadvantage generation revisions takes time proportional number deltas applied 
example regenerating branch tip requires application deltas including initial 
usage statistics show latest trunk revision retrieved cent cases see section usage statistics biasing check time favor revision results significant savings 
careful implementation delta application process necessary provide low retrieval overhead revisions particular branch tips 
techniques delta application 
naive pass delta generalpurpose text editor 
prototype rcs invoked unix editor ed applying deltas expanding identification markers 
easy implement performance poor owing high start costs excess generality ed 
intermediate version rcs special purpose stream oriented editor 
technique reduced cost applying delta cost checking latest trunk revision 
reason behavior delta application involves complete pass preceding revision 
better algorithm 
note deltas line oriented stream editor involves copying unchanged lines revision 
faster algorithm avoids unnecessary copying character strings piece table 
piece table onedimensional array specifying revision lines rcs file 
suppose piece table pt represents revision pt contains starting position line revision application delta transforms piece table pt pt instance delete command removes series entries piece table 
insertion command inserts new entries moving entries insertion point array 
inserted entries point text lines delta 
involved reading delta 
deltas applied piece table sequential pass table looks line rcs file copies output file updating identification markers time 
course rcs file permit random access copied lines scattered file 
illustrates rcs file revisions corresponding piece tables 
available 

rcs file piece tables piece table approach property time applying single delta roughly determined size delta size revision 
example delta cent size revision applying takes cent time generate latest trunk revision 
stream editor take cent 
important alternative representing deltas affects performance 
sccs precursor rcs uses interleaved deltas 
file containing interleaved deltas partitioned blocks lines 
block header specifies revision block belongs 
blocks sorted way single pass file pick lines belonging revision 
regeneration time revisions headers inspected associated blocks copied skipped 
number revisions increases cost retrieving revision higher cost checking latest trunk revision reverse deltas 
detailed comparison sccs interleaved deltas rcs reverse deltas 
considers version rcs stream editor 
piece table method improves performance rcs faster sccs deltas applied 
additional speed delta methods obtained caching generated revision implemented dsee 
caching access time frequently revisions approach normal file access time cost additional space 

locking controversial issue locking mechanism rcs difficult design 
problem solution pure form followed discussion complications caused real world considerations 
rcs prevent persons depositing competing changes revision 
suppose programmers check revision modify 
programmer checks revision programmer unfortunately programmer seen changes effect changes covered deposit 
changes lost revisions saved confined single revision conflict prevented rcs locking 
intends edit revision opposed reading compiling revision checked locked option subsequent check ci tests lock removes 
programmer time may lock particular revision programmer may check succeeding revision 
revision locked exclusive responsibility 
note problem entirely different atomicity problem 
atomicity means concurrent update operations rcs file permitted may result inconsistent data 
atomic updates essential implemented rcs solve conflict discussed 
important maxim software tools rcs stand way making progress project 
consideration leads weakenings locking mechanism 
revision locked checked 
necessary people wish compile inspect locked revision preparation 
operations lock revision check succeeding 
secondly check operations branches rcs file possible locking revision affect revision 
thirdly revisions occasionally locked long period time programmer absent unable complete assignment 
programmer pressing change alternatives making progress find holding lock ask person release check locked revision modify check branch merge changes break lock 
breaking lock leaves highly visible trace electronic mail message sent automatically holder lock recording breaker commentary requested 
breaking locks tolerated certain circumstances go unnoticed 
experience shown automatic mail message attaches high stigma lock breaking programmers break locks real emergencies worker leaves locked revisions 
rcs file private programmer owns rcs file expect perform check operations locking unnecessary nuisance 
case strict locking feature discussed earlier may disabled provided file protection set owner may write rcs file 
effect owner check revisions lock needed doing 
added protection rcs file contains access list specifies users may execute update operations 
access list empty normal unix file protection applies 
access list useful restricting set people update permission 
just locking access list effect read operations approach consistent unix philosophy openness contributes productive software development environment 

configuration management preceding sections described rcs deals revisions individual components section discusses handle configurations 
configuration set revisions revision comes different revision group revisions selected certain criterion 
example order build functioning compiler right revisions scanner parser optimizer code generator combined 
rcs conjunction provides number facilities effect smooth selection 

rcs selection functions default selection development usual selection criterion choose latest revision components 
command selection default 
example command retrieves latest revision default branch rcs file current directory 
default branch usually trunk may set side branch 
side branches defaults needed distributed software development discussed section rcs revision tree 
release selection specifying release branch number selects latest revision release branch 
instance retrieves latest revision release number rcs file 
selection convenient release completed development moved release 
state author selection highest level number release number desired state attribute help 
example retrieves latest revision release number state attribute released 
course state attribute set appropriately ci rcs commands 
alternative select revision author option 
date selection revisions may selected date 
suppose release entire system completed current march local time 
command march pm lt checks components release independent numbering 
option specifies cutoff date revision selected check date closest date 
name selection powerful selection function assigning symbolic names revisions branches 
large systems single release number date sufficient collect appropriate revisions groups 
example suppose wishes combine release subsystem release 
creation dates releases differ 
single revision number date passed command suffice select right revisions 
symbolic revision numbers solve problem 
rcs file may contain set symbolic names mapped numeric revision numbers 
example assume symbol bound release number file revision number single command rv retrieves latest revision release revision large system modules checking revisions command greatly simplifies configuration management 
judicious symbolic revision numbers helps organizing large configurations 
special command assigns symbolic revision number selected revision rcs file 
effectively freezes configuration 
assigned symbolic revision number selects components configuration 
necessary symbolic numbers may intermixed numeric ones 
example select revision branch options may combined 
branch latest revision branch satisfying conditions retrieved default branch 

combining rcs program processes configurations 
driven configuration specifications recorded special file called makefile 
avoids redundant processing steps comparing creation dates source processed objects 
example instructed compile modules system source modules changed processed 
extended auto checkout feature rcs certain file processed attempts check operation 
successful performs required processing deletes checked file conserve space 
selection parameters discussed passed parameters directly embedded makefile 
extended search subdirectory named rcs needed files just current working directory 
working file totally ignores corresponding rcs file uses working file 
newer versions distributed achieved rule default special extension 
auto checkout extension available versions gnu 
file checked rule default deleted processing 
purpose 
auto checkout rcs effect selection rule especially tuned multi person software development maintenance 
situations programmers obtain configurations consist revisions personally checked plus latest checked revision revision groups 
schema set follows 
programmer chooses working directory places symbolic link named rcs directory containing relevant rcs files 
symbolic link sure ci operations need specify working files makefile need changed 
programmer checks needed files modifies 
invoked composes configurations selecting revisions checked rest subdirectory rcs 
selection may controlled symbolic revision number selection criteria 
programmers editing separate working directories insulated changes checking modifications 
similarly maintainer recreate older configuration starting empty working directory 
initial invocation revisions selected rcs files 
maintainer checks files modifies new configuration gradually built 
time invoked substitutes modified revisions configuration manipulated 
final application rcs storing makefiles 
revision groups makefiles represent multiple versions configurations 
configuration distributed best approach unambiguously fix configuration symbolic revision number calling embed symbol makefile check makefile symbolic revision number 
approach old configurations regenerated easily reliably 

usage statistics usage statistics collected dec vax computers purdue computer science department 
machines mainly research purposes 
data reflect environment majority projects involve prototyping advanced software development relatively little long term maintenance 
experiment ci operations instrumented log number backward forward deltas applied 
data collected month period dec dec 
table summarizes results 
operation total total deltas mean deltas operations branch operations applied applied delta operations ci ci table statistics ci operations 
lines show statistics check check third line shows combination 
recall ci performs implicit check obtain revision computing delta 
measures revision stored intact counts delta 
represents number passes necessary pass copying step 
number deltas applied note check operation executed twice frequently check operation 
fourth column gives mean number deltas applied cases 
ci mean number deltas applied 
reasons initial check requires delta time ci requires delta branches 
column shows actual number operations applied delta 
column indicates branches 
columns demonstrate trunk revision far frequently accessed 
rcs check revision simple copy operation absolute minimum copy semantics access older revisions branches common environments access older deltas order magnitude frequent combined average number deltas applied 
rcs faster sccs delta applications reverse deltas clearly method choice 
second experiment conducted march involved surveying existing rcs files machines 
goal determine mean number revisions rcs file space consumed 
table ii shows results 
tables ii produced different times unrelated 
total rcs total mean mean size mean size overhead files revisions revisions rcs files revisions files files deltas table ii 
statistics rcs files 
mean number revisions rcs file 
columns show mean sizes bytes rcs file latest revision rcs file respectively 
overhead column contains ratio mean sizes 
assuming revisions rcs file approximately size ratio gives measure space consumed extra revisions 
sample cent rcs files contained single revision 
reason systems programmers routinely check source files distribution tapes may touch 
get better indication space savings possible deltas measures files contained revisions recomputed 
files rcs necessary 
shown second line average number revisions files overhead 
means extra deltas require cent extra space cent extra revision 
measured space consumed sccs reported average revisions group overhead cent extra revision 
observed average revisions group single large project provided overhead 
dsee reported delta storage combined blank compression results overhead mere cent revision 
leading blanks accounted cent surveyed pascal programs revision group members smaller single cleartext copy 
observations demonstrate clearly space needed extra revisions small 
delta storage luxury keeping multiple revisions online certainly affordable 
fact introducing system delta storage may reduce storage requirements programmers save back copies anyway 
back copies stored efficiently deltas introducing system rcs may free considerable amount space 

survey version control tools need keep back copies software arose programs data longer stored media entered terminals stored disk 
back copies desirable reliability modern editors automatically save back copy file touched 
strategy valuable short term back ups suitable long term version control existing back copy overwritten corresponding file edited 
tape archives suitable long term offline storage 
changed files dumped back tape day old revisions remain accessible 
tape archives unsatisfactory version control ways 
backing file system hours capture intermediate revisions 
secondly old revisions online accessing tedious timeconsuming 
particular impractical compare old revisions group may require mounting searching tapes 
tape archives important fail safe tools event catastrophic disk failures accidental deletions ill suited version control 
conversely version control tools obviate need tape archives 
natural technique keeping old revisions online delete file 
editing file simply creates new file name different sequence number 
technique available option dec vms operating system turns inadequate version control 
prohibitively expensive terms storage costs especially data compression techniques employed 
secondly indiscriminately storing change produces revisions programmers difficulties distinguishing 
proliferation revisions forces programmers spend time finding deleting useless files 
thirdly support functions locking logging revision selection identification described available 
alternative approach separate editing revision control 
user may repeatedly edit revision freezing explicit command 
revision frozen stored permanently longer modified 
rcs freezing revisions done ci 
editing frozen revision implicitly creates new changed repeatedly frozen 
approach saves exactly revisions user considers important keeps number revisions manageable 
ibm clear sccs cmu sdc dec cms examples version control systems approach 
clear maintains data base programs specifications documentation messages deltas 
goal provide control development process management viewpoint 
sccs stores multiple revisions source text ancestral tree records log entry revision provides access control facilities uniquely identifying revision 
efficient delta technique reduces space consumed revision group 
sdc simpler sccs stores revisions 
maintains complete log old revisions may back tape 
cms sccs manages tree structured revision groups offers identification mechanism 
tools dealing configurations state flux 
sccs sdc cms combined programs 
flexible selection rules missing tools difficult specify precisely revision group passed building desired configuration 
xerox cedar system provides system modeller rebuild configuration arbitrary set module revisions 
revisions module distinguished creation time tool managing groups 
selection rules primitive system modeller appears somewhat tedious 
apollo dsee sophisticated software engineering environment 
manages revision groups way similar sccs cms 
configurations built configuration threads 
configuration thread states revision group named configuration chosen 
configuration thread may contain dynamic specifiers choose revisions am currently working revisions bound automatically build time 
provides notification mechanism alerting maintainers need rebuild system change 
rcs general model describing multi version multi configuration systems model describes systems graphs nodes represent configurations nodes represent version groups 
model gives rise suit selection rules composing configurations implemented rcs 
revisions selected rcs passed configuration building 
revision group management modelled sccs 
rcs retains sccs best features offers significantly simpler user interface flexible selection rules adequate integration improved identification 
detailed comparison rcs sccs appears 
important component revision control systems program computing deltas 
sccs rcs program diff computes longest common substring revisions produces delta substring 
delta simply edit script consisting deletion insertion commands generate revision 
delta longest common substring necessarily minimal take advantage crossing block moves 
crossing block moves arise blocks lines procedures appear different order revisions 
edit script derived longest common substring deletes shorter blocks 
heckel proposed algorithm detecting block moves algorithm heuristics conditions generated delta far minimal 
dsee uses algorithm combined blank compression apparently satisfactory results 
new algorithm guaranteed produce minimal delta block moves appears 
release rcs algorithm 
people helped rcs success contributed criticisms suggestions corrections new commands including manual pages 
list people long reproduced sincere help goes 
appendix synopsis rcs operations ci check revisions ci stores contents working file corresponding rcs file new revision 
rcs file doesn exist ci creates 
ci removes working file options 
check ci asks commentary describing changes relative previous revision 
ci assigns revision number option option missing derives number lock held user lock locking strict ci increments number latest revision trunk 
side branch started explicitly specifying number option check 
ci determines revision checked different previous asks proceed 
facility simplifies check operations large systems need remember files changed 
option searches checked file identification markers containing attributes revision number check date author state assigns new revision computing 
option useful software distribution recipients distributed software rcs check updates option 
convention guarantees revision numbers check dates sites 
check revisions retrieves revisions revision number date author state attributes 
places revision working file prints standard output 
expands identification markers 
ident extract identification markers ident extracts identification markers expanded file prints 
rcs change rcs file attributes rcs administrative operation changes access lists locks unlocks breaks locks toggles strict locking feature sets state attributes symbolic revision numbers changes description deletes revisions 
revision deleted fork side branch 
clean working directory removes working files checked changed compare revisions compares revisions prints difference unix tool diff 
revisions compared may checked 
command useful finding changes 
freeze configuration assigns symbolic revision number revision rcs files 
command useful accurately recording configuration merge revisions merges revisions rev rev respect common ancestor 
way file comparison determines segments lines revisions revisions different 
segments type rev differing revision segment rev replaces corresponding segment rev 
type indicates overlapping change flagged error requires user intervention select correct alternative 
rlog read log messages rlog prints log messages information rcs file 
commands optional installed 

feldman stuart program maintaining computer programs software practice experience vol 
pp 
march 

hunt james mcilroy algorithm differential file comparison computing science technical report bell laboratories june 

marc source code control system ieee transactions software engineering vol 
se pp 
dec 

tichy walter design implementation evaluation revision control system proceedings th international conference software engineering pp 
acm ieee ips nbs september 

david chase robert computer aided software engineering distributed workstation environment sigplan notices vol 
pp 
may 
proceedings acm sigsoft sigplan software engineering symposium practical software development environments 

alan evolution source code control system software engineering notes vol 
pp 
nov 
proceedings software quality assurance workshop 

brown clear system nato conference software engineering rome 

habermann nico software development control system technical report carnegie mellon university department computer science jan 

dec code management system digital equipment 
document 
ea 
lampson butler schmidt eric practical polymorphic applicative language proceedings th symposium principles programming languages pp 
acm january 

tichy walter data model programming support environments application automated tools information system design development ed 
hans jochen schneider anthony wasserman north holland publishing amsterdam 

heckel paul technique isolating differences files communications acm vol 
pp 
april 

tichy walter string string correction problem block moves acm transactions computer systems vol 
pp 
nov 
