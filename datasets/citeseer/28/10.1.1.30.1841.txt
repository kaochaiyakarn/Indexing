optimizing object queries ective calculus fegaras university texas arlington david maier oregon graduate institute science technology object oriented databases oodbs provide powerful data abstractions modeling facilities generally lack suitable framework query processing optimization 
key factors oodb systems successfully compete relational systems meet performance requirements non traditional applications development ective query optimizer 
propose ective framework solid theoretical basis optimizing oodb query languages 
calculus called monoid comprehension calculus captures features odmg oql basis expressing various optimization algorithms concisely 
concentrates query unnesting known query decorrelation optimization improves performance considerably treated properly oodb systems 
framework generalizes unnesting techniques proposed literature capable removing form query nesting simple ecient algorithm 

fegaras maier 
reasons commercial success relational database systems er performance business applications due sophisticated query processing optimization techniques 
non traditional database applications require advanced data structures expressive operations provided relational model 
currently major approaches addressing needs applications carey dewitt :10.1.1.102.9734
object relational databases extend relational model object oriented features objectoriented databases oodbs add database capabilities object oriented programming languages 
oodbs provide powerful data abstractions modeling facilities usually lack suitable framework query processing optimization 
addition early oodb systems lacked declarative language associative access data 
simple pointer chasing perform object traversals leave opportunities optimization 
demonstrate expressive power calculus showing map major features oql monoid calculus 
show monoid calculus amenable ecient evaluation 
give initial evidence exhibiting simple normalization system putting expressions canonical form 
main contribution description framework optimizing monoid comprehensions 
focus important optimization problem query unnesting called query decorrelation propose practical ective general solution fegaras :10.1.1.41.7010:10.1.1.31.737
method generalizes unnesting techniques proposed literature 
framework capable removing form query nesting calculus simple ecient algorithm 
simplicity method due monoid comprehension calculus intermediate form oodb queries 
monoid comprehension calculus treats operations multiple collection types aggregates quanti ers similar way resulting uniform way unnesting queries regardless type nesting 

consequently computes value 
example reverse list rst element null 
function composition monoid ers enormous expressive power list operations compose functions propagate state list iteration 
example th element list nth null length fst uses counter state propagate iteration complex example sorting elements list total order sort insert insert true false fst list comprehensions form equivalent list folds fegaras known :10.1.1.41.7010
list folds list comprehensions capture list primitive recursive function de ned recursive equations follows fst note represents simulated easily fold returning pair carries rest list result 
simple syntactic restrictions applied list primitive recursive functions functions precisely characterize polynomial time space cook 
optimizing object queries ective calculus 
unfortunately expressive power gained function composition monoid comes high cost 
function indicates nulls convert zeros 
example nest operation true null groups input consists pairs department employee converts null empty sets 
generalized projection retrieves component pair removes duplicate 

query unnesting proposals oodb query optimization focused unnesting nested queries cluet moerkotte cluet moerkotte known query decorrelation :10.1.1.32.1754
nested queries appear oodb queries relational queries oodb query languages allow complex expressions point query 
addition oodb types allowed attributes collection values nested collections lead naturally nested queries 
current oodb systems typically evaluate nested queries nested loop fashion leave opportunities optimization 
unnesting techniques oodb queries similar techniques relational queries kim wong 
various simpli cations select distinct dno sum salary employees age group dno 
query nested rst glance translation monoid calculus fact nested dno salary employees age dno dno gi employees age unnesting algorithm generates algebraic form prefer form ecient 
simpli cation easily accomplished help transformation rule range variables respectively 
way di erence query expressed group query nested query forms optimized ecient algebraic form 
simpli cation materialized views handle forms uncorrelated nested queries cluet moerkotte :10.1.1.32.1754
example comprehension hc gi translated follows view hc viewi operator creates materialized view 
cases uncorrelated nested queries handled global views require special 
fegaras maier treatment framework 
example query ha ha gi ag comprehension value unnesting algorithm generate algebraic form shown query easy task optimizer transform algebraic form form shown pulling outer join operator tree 
supports binding provides seamless integration oql low impedance mismatch 
allows variables queries results queries passed back programs 
programs expressed binding compiled preprocessor performs query optimization compile time runtime proposed odmg 
addition compiled queries db provides interpreter evaluates ad hoc oql queries run time 
db evaluation engine written sdl shore data language shore object management system carey developed university wisconsin :10.1.1.34.9001
odl schemas translated sdl schemas straightforward way stored system catalog 
db oql compiler preprocessor accepts language called oql code embedded dml commands perform transactions queries updates preprocessor translates oql programs code contains calls db evaluation engine 
provide visual query formulation interface called fegaras translator visual queries oql text sent db oql interpreter evaluation :10.1.1.41.7010:10.1.1.41.7010
oql optimizer expressed powerful optimizer speci cation language called implemented exible optimization framework called extends earlier optimizer generators fegaras 
addition compiled queries db provides interpreter evaluates ad hoc oql queries run time 
db evaluation engine written sdl shore data language shore object management system carey developed university wisconsin :10.1.1.34.9001
odl schemas translated sdl schemas straightforward way stored system catalog 
db oql compiler preprocessor accepts language called oql code embedded dml commands perform transactions queries updates preprocessor translates oql programs code contains calls db evaluation engine 
provide visual query formulation interface called fegaras translator visual queries oql text sent db oql interpreter evaluation :10.1.1.41.7010:10.1.1.41.7010
oql optimizer expressed powerful optimizer speci cation language called implemented exible optimization framework called extends earlier optimizer generators fegaras 
language specifying query optimizers captures large portion optimizer speci cation information declarative manner 
extends number term manipulation constructs rule language specifying query transformations 
preprocessor maps speci cation code 
translation done stages queries framework rst translated monoid comprehensions serve intermediate form translated version nested relational algebra supports aggregation quanti cation outer joins outer unnests 
algebraic terms translated execution plans 
important task query optimizer nding order evaluate query operations 
context relational databases task known join ordering 
db system uses polynomial time heuristic algorithm called goo fegaras generates quality order monoid algebra operators query algebraic form :10.1.1.41.7010:10.1.1.31.737:10.1.1.31.737
goo bottom greedy algorithm performs pro table operations rst 
measure pro size intermediate results easily modi ed real cost functions 
goo query graphs takes account output sizes results constructed earlier steps predicate selectivities 
generates bushy join trees low total size intermediate results 
best evaluation order operators derived algebraic form mapped evaluation plan rule rewriting system 
system considers available access paths indexes available physical algorithms generate di erent plans 
phase alternative plans derived order operators generated best plan selected 
evaluation plan translated intermediate evaluation code re ects signatures evaluation algorithms db code translated straightforwardly interpreted db interpreter 
db evaluation engine built top shore carey :10.1.1.34.9001
sdl layer shore exclusively implementation believe resilient changes shore storage manager easier 
alternative write value added server top storage manager 
ort devoted implementation evaluation engine simple possible sacri cing performance 
required careful design 
entry table values indicate execution time query seconds query unnesting 
star indicates incomplete execution due shore server crash 
measurements clear query unnesting ers signi cant performance improvement selected queries 

related proposals object query algebras leung valduriez cluet delobel beeri kornatzky :10.1.1.31.9395
contrast algebra algebras support multiple bulk operators 
demonstrated get expressive power just operator monoid homomorphism 
supporting small number operators highly desirable bulk operations algebra supports transformation rules needs harder optimization task 
framework monoid homomorphisms rst introduced ective way capture database queries tannen tannen 
mixing possible monad comprehensions restrict inputs output comprehension type 
monad comprehensions rst proposed convenient database language chan wadler wadler chan algebraic transformations forms methods converting comprehensions joins 
monad comprehension syntax adopted buneman alternative syntax monoid homomorphisms 
comprehension syntax capturing operations involve collections type structural recursion expressing rest operations converting collection type predicates aggregates 
earlier fegaras alternative representation lists called insert representation construct list values :10.1.1.41.7010
method commonly functional programming mainly uses constructors cons nil construct list values append singleton nil 
append representation superior comes adding extra properties append constructor commutativity idempotence de ne bags sets 
normalization algorithm uenced wong normalization monad comprehensions wong wong 
powerful rules nested comprehensions canonical comprehension forms generators simple paths 
powerful rules nested comprehensions canonical comprehension forms generators simple paths 
canonical forms equivalent canonical forms monoid comprehensions 
address query unnesting complex queries embedded query part predicate comprehension head unnested outer joins grouping 
increasing number proposals oodb query optimization 
focused handling nested collections ozsoyoglu wang colby converting path expressions joins kemper moerkotte cluet delobel unnesting nested queries cluet moerkotte cluet moerkotte focused handling encapsulation methods daniels :10.1.1.31.9395:10.1.1.32.1754
query decorrelation rst introduced context relational queries kim wong form source optimizing object queries ective calculus 
source transformations 
number proposals lately rewriting correlated queries ecient queries algebraic forms propose new evaluation algorithms perform better default nested loop evaluation embedded queries 
examples methods include magic decorrelation mumick promotes predicates inner loop nested loop evaluation correlated queries predicate move levy moves predicates query graph 
fegaras maier methods support separate compilation requires query recompilation method changes 
approach attaching user de ned optimization rules class method requires substantial ort programmers 
approach considering method view materializing table known memoization programming languages 
planning investigate approaches thoroughly choose best ts unnesting algorithm 
currently developing formal framework optimizing object oriented queries presence side ects fegaras :10.1.1.41.7010:10.1.1.41.7010
queries may contain object updates place form 
proposed language extension monoid comprehension calculus express object oriented features formal meaning extensions 
method denotational semantics give formal meaning imperative programming languages 
semantics language extensions expressed terms monoid calculus need fundamental change basic framework 
