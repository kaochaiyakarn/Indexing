umli unified modeling language interactive applications paulo da silva norman paton department computer science university manchester oxford road manchester pl england uk 
mail norm cs man ac uk user interfaces uis essential components software systems significantly affect effectiveness installed applications 
addition uis represent significant proportion code delivered development activity 
despite modelling languages tools support contract elaboration ui developers application developers 
unified modeling language uml widely accepted application developers ui designers 
reason introduces notation unified modelling language interactive applications umli extends uml provide greater support ui design 
case study umli notation method 
uml industry standard language object oriented software design 
examples industrial academic projects demonstrating effectiveness uml software design 
successful projects silent terms ui design 
projects may describe architectural aspects ui design tend omit important aspects interface design better supported specialist interface design environments :10.1.1.22.5422
despite difficulty modelling uis uml apparent domain application modelling ui modelling may occur simultaneously 
instance tasks domain objects interdependent may modelled simultaneously need support 
task modelling aspects considered ui design 
tasks interaction objects widgets interdependent 
despite difficulty modelling uis uml apparent domain application modelling ui modelling may occur simultaneously 
instance tasks domain objects interdependent may modelled simultaneously need support 
task modelling aspects considered ui design 
tasks interaction objects widgets interdependent 
considering difficulty designing user interfaces domain objects simultaneously believe uml improved order provide greater support ui design :10.1.1.11.8530
introduces umli notation aims minimal extension uml notation integrated design applications user interfaces 
umli aims preserve semantics existing uml constructors notation built new constructors uml extension mechanisms 
non intrusive approach umli verified describes umli notation introduced designed uml meta model 
umli notation influenced model user interface development environment mb uide technology 
umli notation influenced model user interface development environment mb uide technology 
fact mb uides provide context declarative models constructed related part user interface design process 
believe mb uide technology offers insights description user interfaces adapted uml technology 
instance mb uide technology provides techniques specifying static dynamic aspects user interfaces declarative models 
declarative models partially mapped uml models possible identify ui aspects covered uml models :10.1.1.11.8530
scope umli restricted form user interfaces 
form uis widely data intensive applications database system applications web applications umli considered baseline non form ui modelling 
case modifications required umli specifying wider range ui presentations tasks 
introduce umli notation structured follows 
application object interfaces compose application model 
integrated ui application development environment application model naturally produced result application design 
umli aims show specific set uml constructors diagrams possible build declarative ui models 
results previous mb uide projects provide experience declarative ui models inter related models provide declarative description user interfaces 
instance links explained terms state objects teallach :10.1.1.11.6612
link supported techniques tri dent generate concrete presentations 
terms mb uide technology common sense models describing ui 
umli aim new user interface modelling proposal reuse models techniques proposed mb uides context uml 
umli declarative user interface models 
interaction objects called widgets visual components 
selection grouping interaction objects essential tasks modelling ui presentations 
usually difficult perform tasks due large number interaction objects different functionalities provided graphical environments 
uml environment selection grouping interaction objects tends complex ui design environments uml provide graphical distinction domain interaction objects 
uml treats interaction objects way objects :10.1.1.11.8530
instance easy see results contained 
considering presentation modelling difficulties section introduces umli user interface diagram specialised object diagram conceptual modelling user interface presentation 
presentation model modelled object diagram uml 
presentation alternatively modelled umli user interface diagram 
see app environment independent 
fact ui presentation described user interface diagram implemented object oriented programming language toolkits 
widgets bound app order generate concrete presentation model 
way widget classified container editor 
binding widgets app described uml :10.1.1.11.8530
widget binding efficient yield final user interface implementation 
fact umli ui modelling implementation 
believe integrating ui builders umli case tools specialised constructors editor classes indicate concrete interaction objects widgets bound classes 
constructor adaptation similar gamma see page 
uml modelling common interaction application behaviours 
order independent behaviour modelled 
optional behaviour modelled 
repeatable behaviour modelled 
optional order independent repeatable behaviours common interactive systems umli proposes simplified notation :10.1.1.11.6612
notation modelling order independent behaviour 
see order independent selector rendered circle plus signal connected activities return transitions rendered solid lines single arrow selection state double arrow selectable activity 
order independent selector identifies order independent selection state 
double arrow return transitions identify selectable activities selection state 
event triggers activity app 
umli method case study umli method composed steps 
steps intended describe comprehensive method modelling ui integrated way underlying application 
example steps adapted incorporated traditional uml modelling methods 
case study describing library application umli method :10.1.1.11.8530
results case study examples umli notation previous sections 
step user requirement modelling 
cases identify application functionalities 
cases may decomposed cases 
reasoning creation new umli constructor constraint 
umli notation entirely modelled accordance umli meta model specifications 
demonstrates umli respecting principle non intrusive extension uml umli meta model replace functionalities uml constructor 
case study indicates umli may appropriate approach order improve uml support ui design 
fact uis case study modelled fewer simpler diagrams standard uml diagrams described :10.1.1.11.8530
umli meta model modify semantics uml metamodel umli going implemented plug feature uml case tool 
implementation umli allow umli evaluations complex case studies 

author sponsored de cient brazil 
springer 
da silva 
semantics unified modeling language interactive applications 
preparation 
da silva paton :10.1.1.11.8530
user interface modelling uml 
proceedings th european japanese conference information modelling knowledge representation finland may 
ios press 
appear 
appear 
gamma helm johnson vlissides 
design patterns elements reusable object oriented software 
addison wesley reading ma 
griffiths barclay paton gray kennedy cooper goble west smyth :10.1.1.11.6612
teallach model user interface development environment object databases 
proceedings pages edinburgh uk september 
ieee press 
johnson 

uml user interface modeling 
proceedings uml pages france june 

myers :10.1.1.22.5422
user interface software tools 
acm transactions computer human interaction march 
object management group 
omg unified modeling language specification june 
