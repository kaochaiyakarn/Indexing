specifying rational agents statecharts utility functions oliver obst universit koblenz landau ai research group rheinau koblenz germany fruit uni koblenz de 
aid development robotic soccer simulation league team robolog method speci cation multi agent teams statecharts introduced 
results years competitions showed team competitive behave adaptive unknown situations 
design adaptive agents method possible straightforward manner 
purpose extend approach adaptive action selection mechanism facilitate explicit representation goals agent 
creating team autonomous agents dynamic environments simulated robotic soccer dicult task agents encounter number different situations designer thinking time creation 
purpose extend approach adaptive action selection mechanism facilitate explicit representation goals agent 
creating team autonomous agents dynamic environments simulated robotic soccer dicult task agents encounter number different situations designer thinking time creation 
statecharts visual approach formalize complex systems 
describe behavior system di erent levels granularity representation 
speci cation transformed straightforward manner running prolog code :10.1.1.38.4706:10.1.1.38.4706
method facilitates high degree reactivity rules checked cycle 
proof concept developed robolog simulator team approach 
competitions amsterdam melbourne robocup turned team performed quite situations 
hand new situations team behave adaptive 
action selection mechanism adaptive prede ned plans chosen carefully new situation 
second step alteration prede ned plans focus sooner aspect 
additionally want provide mechanism evaluate utility script takes commitment selected options account 
approach possibility generate agent program speci cation 
approach multi agent systems statecharts introduced method specifying multi agent behavior statecharts translation statecharts code :10.1.1.38.4706
design soccer agents statecharts natural way describing sequence actions certain situation designing agents designer think typical situations certain player appropriate actions situation 
situations appropriate actions formalized statecharts 
agent design nished consists number scripts 
time execution agent looks applicable script executes step rst nd 
measure expected success boolean conditions edges statechart 
actions edge applicable conditions expected successful 
agent option execute actions rst applicable selected 
adaptive action selection mechanism evaluate usefulness applicable options execute useful 
intended side ect improved option evaluation explicit goal representation agent model closer bdi model :10.1.1.28.7820
utilities scripts architecture action selection preferences probability success introduced 
architecture options scored executed 
score option depends preference reward probability success option 
reward probability values hand written subject reinforcement learning 
