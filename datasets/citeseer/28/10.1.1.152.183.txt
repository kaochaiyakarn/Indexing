interprocedural may alias analysis pointers limiting alain deutsch inria rocquencourt le chesnay cedex france alain sch inria fr existing methods alias analysis recursive pointer data structures approximation techniques blurs distinction sub objects depth store equivalently location regionbased approximations blur distinction elements recursive data structures 
notable progress interprocedural alias analysis accomplished little progress precision analysis recursive pointer data structures seen inception approximation techniques jones muchnick decade ago 
result optimizing verifying parallelizing programs pointers remained difficult 
new parametric framework analyzing recursive pointer data structures express new natural class alias information accessible existing methods 
key idea represent alias information pairs symbolic paths qualified symbolic descriptions positions alias pair holds 
result algorithm interprocedural may alias analysis pointers numerous examples occur practice precise published algorithms cwz lr cbc 
related alias analysis definition applications 
aliasing occurs distinct names data access paths denote run time location 
introduced parameters pointers 
aim existential alias analysis algorithms determine program point upper approximation exact set possible pairs access paths may aliased reached 
existential alias analysis called may alias analysis 
time alias information ant scalar optimization code motion compile time program verification debugging dependence analysis parallelism ion improving code generation instruction level parallelism wa hg rf 
static determination aliases parameters single level pointers understood problem exists accurate polynomial intraprocedural sf interprocedural lr algorithms 
permission copy fee part material granted provided copies distributed direct commercial advantage acm copyright notice title publication date appear notice copying permission association computing machinery 
copy republish requires fee permission 
sigplan orlando florida usa acm ti determining aliases recursive pointer datatypes harder problem la 
intuitively alias sets potentially infinite transfer functions distributive single level pointers 
existing methods 
approximate existential alias analysis methods pointers classified store methods access paths methods 
methods graphs stores represent potential run time stores jm jm npd rm lh ha hpr de sh de st possibly augmented count information hu cwz set oj paws oj paths represent aliasing cc asu sf la lr combination cbc 
data flow values kept finite limiting jm finite number graph nodes locations jm determined allocation context 
methods partition infinite number runtime objects access paths finite number equivalence classes 
consequence store methods typically fail distinguish elements recursive pointer data structures 
finite number graph nodes analysis represent elements potentially unbounded structures 
introduces false cycles precludes instance distinguishing linear cyclic list tree graph 
similarly approximation methods limiting fail distinguish elements recursive pointer data structures depth distinguish tree general directed graph 
soon sub object depth aliased aliasing erroneously propagates sub objects depth objects different types 
de presents theoretical framework alias analysis 
formalism eilenberg monomial decomposition ei parikh commutative decomposition pa semantic model aliasing properties right regular equivalence relations 
main result lattice unitary prefix monomial relations subsets regular language shown interpretation lattice right regular equivalence relations 
provides practical application imperative languages general theory de 
handle cyclic data noted hhn serious obstacle languages pointers 
cwz distinguish extent trees dags graphs 
extends methods counting accurate struct list char hd struct list tl struct list copy struct list struct list tl cl null ca return tl tl gs tl copy tl hd hd return ll copy null algorithm lh cwz lr cbc deutsch result xx sl sl hd hd sl ti sl tl tl tb hd spurious aliases tl tl tl tl tl tl hd ym tl hd 
hd tl hd hd tl hd hd 
tl tl tl tl hd ti tl hd xml tl tm tq ti tl tl fy tl tl tl 
tl hd tl tl hd 
program property discovered lh cwz lr cbc deutsch pi ves ves pi successive ads don alias es xand alias heads pairwise pfi point ls heads tails completely precision alias analysis algorithms structure copying program creating lists elements pairwise aliased adapted lh limited cases counts general decremented safely 
contributions 

expressive parametric program analysis framework may alias analysis pointers 
framework embodies expressive notion dependency example allows relationships positions data structure aliasing captured 
inst ante property ith element list aliased element list represented exactly semilattice framework 
believe notion aliases new 
alias analysis framework parametrized lattice framework purpose express information tuples integers 
essence lattice vi controls qualitatively ability reason dependencies typical examples vd constant propagation ki linear arithmetic constraints ka arithmetic intervals cc simple sections bk combinations 
algorithm interprocedural may alias analysis pointers 
parametric framework define polynomial time flow sensitive algorithm analysis call value imperative language arbitrary recursion dynamic allocation nested recursive structures pointer variables pointers functions excluding casting unions 
encompasses large subset language 
significant 
example method provides solution open problem lh cwz hhn improve accuracy alias analysis presence recursive pointer data structures 
information obtained analysis generally precise obtained previous methods 
presents analysis results example due larus hilfinger lh 
spurious aliases due limiting larus hilfinger landi ryder collapsing different heap nodes chase choi 
seen analyses general strictly comparable precision 
consider specific program properties pi 
section presents parametric join semilattice alias analysis corresponding intraprocedural 
framework notion generic object names section 
section discusses complexity method prototype implementation discussed section 
assess precision information discovered framework section 
node labels computed method lh arc shown 
entry cwz graph nodes annotated approximate counts 
cbc 
names allocation sites 
alias pairs readability external level dereferencing 
instance pair hd hd really hd 
intraprocedural framework join semilattice ic access paths access path string selectors connected field component operator 
selectors include structure field names variable names dereferencing operator 
set selectors program 
access paths internally represented postfix notation 
instance language pointer expression lef definition equivalent lef represented postfix notation access path 
left 
algorithms operate access paths postfix form 
readability write access paths ordinary language representation 
symbolic access path sap short access path possibly containing symbolic expressions form set access paths called variable 
denotes empty access path bn set 
bn 
consider instance sap ti 
denotes set hd denotes set tl hd 
consider sap ight key 
denotes set key denotes set left key key 
kind symbolic expressions occur symbolic access path 
basis recursive pointer type set access paths basu access path yields object type applied object type minimal 
presents recursive types associated bases 
function basis maps recursive pointer type name corresponding basis 
bases represented deterministic finite automata dfa alphabet accessors states dfa just type names 
bases mutually recursive types defined similarly see appendix 
definition symbolic access paths access path form el 
ez 

selector 
expression form bk variable basis type write fv denote set coefficient variables occurring sap 
practices basis represented uniquely corresponding type name global table maintained mapping type names bases represented dfa 
numeric lattice lattice alias analysis parametrised numeric lattice 
determines class relations positions aliased data structures captured 
independent mono dimensional numeric lattices include constant propagation ki arithmetic intervals cc arithmetic congruences gr relational multidimensional numeric lattices include linear internal postfix representation symbolic access path tl hd 
theoretically inclined reader encouraged consult de de theoretical account correction bet en saps unit ary monomials eilenberg treatise ei parikh commutative decomposition pa 
struct list char hd struct list tl struct li st struct list hd struct list tl struct tree char key struct tree left right basis list tz list tl basis struct tree right recursive pointer types corresponding bases ka ch simple bk cc linear congruence equalities gr congruent trapezoids ma 
list assumptions numeric lattice associated operations keep construction parametric avoiding dependence particular numeric lattice 
hypothesis properties numeric lattice finite set numerical equipped operators upper approximations exact counterparts sets maps variables integers 


operations meet join upper approximate sets represents exactly empty set projection vu projection vu extension vu resolution linear system zf system equations upper approximation tn set integer intersection linear system zf system linear cfl zs upper vti set integer meet spaces different dimensions vi ah kz kl 
define sk 
vb equipped wdh widening operator cc ensure fixpoint computations 
relational lattices enumerated satisfy hypothesis lattice simple sections bk extended explained cc 
independent numeric lattice accommodated defining vu fold smash product defined systematic methods combining analysis frameworks proposed cc 
abuse notation write vu clear context 
vi dom dom domain 
parametric semilattice ur definition symbolic alias pairs symbolic alias pair form fi fl fz sym 
access paths urn dom fv fv variables fl omt 
addition say pair named sequence coefficient variables occurring left right order saps fl fz sequence algorithm join symbolic alias relations input symbolic alias relations qi qz ur vn output join method exhaustively apply return example fl replace pairs fl tl hd sn kl ez tl hd hd st kl lattice arithmetic intervals cc ell kl ad kz hd sb vu karr lattice ka ue kl kz hd sfl kl join operator predefine variables say kl kz 
operator rename maps symbolic alias pair canonically named counterpart extends componentwise sets symbolic alias pairs 
instance tl kl hd hd ka sfl symbolic alias pair canonically named 
proposition symbolic alias relations set ur vu oj symbolic relations vu join 
symbolic alias set canonically named alias pairs vu fi ee fi 
operator computed pointwise see 
termination fixpoint computations parametric semilattice ur vu just defined infinite chains number possible saps bounded 
may infinite chains instance lattice intervals cc 
define normalisation operation factor maps sap sap potentially unbounded subsequences paths recursive data structures replaced bases guarded new coefficient variables 
instance factor applied sap tl hd return pair consisting sap tl hd system equations 
factor shown fi ure 
factor overloading symb lic alias relation factor symbolic alias relation obtained normalizing factor rename symbolic alias pairs contained widening symbolic alias relations defined follows normalise factor apply pointwise numeric widening operator similar join operator 
operator inserted data flow equations points contained feedback set dependence graph equations 
instance feedback set defined set intervals headers loop headers see appendix details 
numeric lattice chains widening operator symbolic alias relations simply factor 
wh hd match ti hd compl sn sd sfl tl sfl hd hd tl hd sfl tl hd tl hd hd sti sk tract li tl mod tl sk struct li tl sn ti sfl sfl sb elementary operations examples function space defined parametric semilattice ur symbolic alias relations equipped join operation element widening operator ensure termination fixpoint iterations 
define transfer functions model effects individual program stat ements symbolic alias relations 
elementary operations transfer functions operate sets symbolic alias pairs contain access 
define operations manipulate symbolic representations 
examples full definitions appear appendix 
binary operator match determines symbolic access pat cent particular access path prefix precisely takes parameters relational operator access paths kf symbolic 
returns set solutions form residual possibly symbolic access path system equations 
equation true assignment numerical coefficients kf solution equation system operator takes system linear equations set variables returns compl 
set elements vt union upper approximates complement system respect positive integers 
variables occurring system assumed arbitrary positive integers eliminated 
symbolic path set set pairs symbolic access path element vu 
sets represent finitely possibly infinite sets access paths 
instance tl hd tl hd st necessary alias relations right regular aliased path exists aliased 
algorithm deletion fixed access path input symbolic alias relation ur vk output symbolic alias relation kill symbolic alias pair fz return fl algorithm input access path sap element vu output element method com fi match return ka ah bg eb example tz hd kl su lq ki hd kl kl xm tj kl hcf kl sfl kl transfer function kill denotes infinite set access paths 
free regular 
binary operator equivalence computes symbolic path set represents set access paths access path aliased implicit aliases deduced reflexive symmetric right regular closure taken account 
operation 
addition symbolic operations intersection projection numerical lattice element performed extract relevant information 
operation computes symbolic path set denoting set access paths obtained stripping prefix access paths represented operation match 
operator computes symbolic path set denoting star closure set access paths denoted recursive type paths applied 
match factor 
infix operation computes representation concatenation access paths denoted symbolic path sets symbolic path set access path write 
deletions kills transfer function kill fixed access path deletes alias pairs left right component contains extension 
deletions model variable goes scope exit lexical unit local block procedure assignments kills generates aliases int reduced alias pair function 
assignments component kills aliases instance tl kills tl generates aliases induced ti 
kill 
algorithm gen lhs rhs input access paths rhs lhs rh ih rhs symbolic alias relation output symbolic alias relation incorporates aliases generated assignment lhs 
rhs method equivalence classi lhs aliases lhs rhs rhs qu rhs return transfer function alias effects assignment rhs cr simple selector instance lhs tl assignment ti assume loss generality access paths rhs comparable prefix relation copy rhs assignments decomposed assignments tmp tmp followed 
describe exactly aliases introduced 

lhs aliased generates pair lhs 
rhs addition incoming alias pair rhs generates pair lhs symmetrically incoming pair rhs rhs generates uts 
short say effect assignment rewrite rhs lhs aliased access paths rl cent rhs prefix assignment lhs assign aliases lhs net effect rewrite rhs cr lhs aliased access paths lhs rhs fll hs zl 
tie aliases lhs cent rhs prefix effect reunite rhs 
fli 
cr assignment creates cycles 
case analysis describes precisely aliases generated assignment de terms possibly infinite sets alias pairs 
define counterpart operation operate sets alias pairs finite symbolic alias relations 
counterpart rewrite operation rewrite rhs maps symbolic alias relation symbolic alias relation rewrite rhs 
rewrite rhs access path symbolic path set 
transfer function shown ti hd tt sl tl tz tl tl transfer function tl kill analysis assignment hf fnr xit interprocedural information flow example assume just assignment shown described symbolic alias relation assignment ql 
interprocedural framework interprocedural methods non distributive problems large semilattices limit information loss analysing procedures separately cc sp jm keyed token abstracting call context 
usually results information loss recursive procedures recursive call generate new semilattice value 
cc ha lr perform generalisation data flow values function calls instantiation function returns 
consider alias pairs ml rz reaching entry function 
ml mz visible functions called generalise alias pairs single alias pair 
generic object name 
key observation due lr operates aliases visible 
analysed incoming pair aliasing output propagated back instantiation 
done applying transformation tz 
assume rest text distinct variables name 
achieved instance prefixing variable name static definition point procedure name 
generic objects order perform instantiation symbolic alias relations enrich symbolic access paths generic objects form kl 
name 
intuitively kl 
stands unknown symbolic access path coefficients icl 
kfi 
function calls call function formal parameters fl 
fi modelled transfer function follows ii ry hr cdn fl fw symbolic alias relation describing aliasing program point si sh aliases cdl affected affect directly propagated point sz represents aliases plus induced binding formal fi corresponding actual see 
alias relation contains symbolic alias pairs relevant generalisation performed 
set symbolic alias pairs represents substitution applied return associates generic objects introduced generalisation symbolic access paths represent 
arguments 
temporaries killed call discipline avoids spurious aliases formal parameter dead argument 
algorithm jl 
eca input formals fn distinct arguments aw symbolic alias relation call output symbolic alias relations ih sh method gen gc done support fl 
fn symbolic pair gl qc gl gz era support nt ry entry gl gz hr ush support gl support entry generalise gl gz gl support gz support done gz gl entry return entry interprocedural transfer function transfer function shown 
function gl gz ses symbolic pair gl gz replacing gt generic object kl 
kn number coefficients updating accordingly ad 
generic object name determined uniquely factorised form symbolic path gz 
function returns propagation aliases back calling point modelled transfer function tu symbolic alias relations computed corresponding exit symbolic alias relation describing aliasing exit function newly computed symbolic alias relation describes just return essentially instantiates generic object name occurring 
generic name red represents described 
consider call value language formals need replaced corresponding locals 
aliases sh added result qr 
transfer function shown 
variable generic object name function instantiate returns set pairs obtained replacing symbolic access paths associated adjusting accordingly instance ui tl sk ul sfl hd 
intraprocedural case widening operators inserted interprocedural equations order ensure termination fixpoint iterations see appendix 
example consider program fragment void struct list fl result tl fz algorithm ret th input symbolic alias relations ee output symbolic alias relation qm 
method er turn global variables symbolic pair df globals generic names fi foreach instantiate qr re fio done turn return qr turn transfer function nfl corresponding data equations fi fz tl kill result pz return fz li recursive widening operator needed 
assume point pi pi tl hd tl hd kl kz ti hd tl hd kl kz solution data flow equations fi 
tl hd ul tl hd si kl ti hd tl hd sti kl kz fz fi result 
ti result tl uz result hd kl result ti tl hd tl hd st kz tl hd tl hd kl extended interprocedural framework iterative program analysis precision basic interprocedural framework improved keeping symbolic alias relations program point procedure qualified different token 
avoid non realizable interprocedural paths 
seminal papers cc sp jm systematic direct methods perform extension 
lr uses alias sets size tokens cbc uses calling points incoming alias sets result exponential behaviour see ml 
clearly separated basic interprocedural framework extensions lr ml 
framework easily extended arbitrary token set 
issue orthogonal contribution 
pointers accommodated technique similar de 
struct list reverse struct list struct list null tl tl reverse return gz reverse null gs destructive list reversal function complexity define number program points maximal length normalised symbolic access path number distinct normalised symbolic access paths parameter varies control flow graphs fixed outdegree control flow graphs program point depends 
height numerical lattice vti coefficient variables 
terms number node evaluations worst case complexity analysis np az rn 
constant propagation lattice lattice intervals lattice linear equalities lattice simple sections 
length longest access path traverses recursive pointer type 
real programs small bounded 
prototype implementation interprocedural program analysis framework 
standard ml parametric module functor parameter module implementing numeric framework 
excluding numerical lattice oo lines long implementation semilattice transfer functions requires lines standard ml 
symbolic alias relations implemented level tries trie maps symbolic access path trie mapping symbolic access paths elements numerical lattice vi 
numerical lattices experimented lattice arithmetic intervals cc combination lattice intervals lattice linear equalities ka see cc gr explanation devise optimal combination 
data flow equations augmented widening operators solved standard iterative techniques 
preliminary experimentation statistical value indicates number iterations took seconds analyse programs lines 
precision analysis shown framework discover position dependent aliasing properties 
framework perform exact dependence aliased positions captured 
consider program fragment shown 
reverse destructively reverses list 
exact relationships initial final pos ions captured require information length assume cent sharing inst ante elements point aliasing point tl sf tl hd tl hd sf analysis discovers iterations aliasing tl tl hd tl sfl correctly detected cycles introduced reverse 
information important optimisation instance perform software pipelining hhn rf 
contrast lh hpr de cwz lr st cbc report list may cyclic 
probably detect cyclic 
noted hhn general applicability handle graph shaped data 
store methods lh hpr st cbc fail inability distinguish unbounded data structure cyclic data structure independent parameter st cbc 
addition counting proposed chase fails cwz 
regardless value parameter analysis lr report cyclic list detects spurious aliases form tl tl tl ti ti 
landi ryder method sets pairs access paths 
report aliasing data structure completely store methods 
soon subcomponent object located depth aliased spurious aliasing subcomponents depth reported 
class situations method markedly superior limited methods 
alias analysis pointers long standing critical issue optimizing verifying parallelising imperative languages 
crucial advent superscalar architectures massively parallel processing place higher demand optimizing compilers restructure code 
virtually existing alias analysis method approximation techniques proposed jones muchnick store approximations limiting 
pointed researchers techniques sufficiently accurate apply optimisation methods programs pointers 
previous theoretical results semantics formal language theory interpretation de de proposed method may alias analysis radically departs currently prevalent store andk limited approximation methods 
key concept integer coefficients denoting positions data structures 
existing numerical approximation techniques developed scalar array analysis finitely represent set positions pair symbolic access paths holds 
obtained practical flow sensitive interprocedural analysis framework detect new class may alias properties reach existing alias analysis methods 
implemented prototype assess practical feasibility approach 
preliminary experimentation demonstrates algorithm significantly superior extract accurate pointer information methods fail detect elementary pointer programs experimented approach medium large size programs parametric nature method gives confidence scalability approach 
currently undertaking systematic experimentation real programs 
conjecture applications concept opposition properties dynamically allocated pointer data structures possible 

keith cooper patrick cousot evelyn duesterwald mooly sagiv linda torczon helpful comments 
pop pld asu bk br cwz cbc ccf cc cc cc cc cc ch de de acm press 
eighteenth annual acm symp 
programming language orlando fl jan 
acm press 
conf 
programming language design implementation volume sig plan notices san francisco june 
aho sethi 
compilers principles techniques took 
addison wesley 
kennedy 
technique summarizing data access parallelism enhancing transformations 
con programming language design implementation volume sigplan notices pp 
june 
brzozowski 
derivatives regular expressions 

cm 
chase wegman zadeck 
analysis pointers structures 
conj 
programming language design implementation sig plan notices pp 
june 
choi burke carini 
efficient interprocedural computation pointer induced aliases side effects 
twentieth annual acm 
principles programming languages pp 

acm press jan 
choi cytron ferrante 
automatic construction sparse evaluation graphs 
pop 
cousot 
semantic foundations program analysis 
program flow theory application pp 

prentice hall 
cousot cousot 
interpretation unified lattice model static analysis programs construction approximation fixpoints 
fourth annual acm symp 
le programming languages pp 
jan 
cousot cousot 
static determination dynamic properties generalized type unions 
notices mar 
con sot 
static determinant ion dynamic properties recursive procedures 
working conf 
formal description programming concept 
ifip wg north holland aug 
cousot cou sot 
systematic design program analysis frameworks 
sixth annual acm symp 
principles programming language pp 

cousot cousot 
comparing galois connection widening narrowing approaches int 
programming language imp logic programming jth int 
plilp volume lecture notes computer science pp 

springer verlag aug 
cousot halbwachs 
automatic discovery linear restraints variables program 
fifth annual acm symp 
lea programming languages pp 
jan 
deutsch 
determining lifetime aliasing dynamically allocated data higher order functional ions 
seventeenth acm symp 
principles programming language pp 

acm press jam 

deutsch 
operational mode programming languages representations relations regular languages application static determination dynamic aliasing properties data 
phd thesis lix ecole polytechnique palaiseau france 
de dgs ei gr gr ha ha hg hhn hpr hu icc jm jm ka ki la la lr deutsch 
model aliasing abstractions finite representations right regular equivalence relations 
icc pp 

duesterwald gupta soffa 
reducing cost data flow analysis congruence partitioning 
international conference con appear springer verlag lecture notes computer science apr 
eilenberg 
languages machines volume academic press 
granger 
static analysis arithmetical congruences 
international journal oj computer mathematical 
granger 
static analysis linear congruence equalities variables program 
taps volume lecture notes computer science pp 

springer verlag 
granger 
improving results static analyses programs local decreasing iterations extended 
proc 
th conference foundations technology theoretical computer nce lecture notes computer science pp 

springer verlag dec 
halbwachs 
automatique de es 
par 
variables un prog 
phd thesis universit scientifique de grenoble institut national polytechnique de grenoble grenoble france mar 
harrison 
interprocedural analysis automatic parallelisation scheme programs 
lisp computation oct 

compile time garbage collection 
master thesis rice university houston aug 
tech 
report comp tr 
hendren 
parallelizing programs recursive data structures 
ieee trans 
parallel distributed processing jan 
hendren gao 
designing programming languages analyzability fresh look pointer data structures 
icc pp 

hendren hummel nicolau 
abstractions recursive pointer data structures improving analysis transformation imperative programs 
pld pp 

horwitz pfeiffer reps dependence analysis pointer variables 
conj 
language design implementation volume sigplan notices pp 
june 
hudak 
semantic model counting abstraction 
conf 
record acm 
lisp functional programming pp 
aug 
proc 
ieee international conf 
computer languages san francisco apr 
ieee press 
jones 
flow analysis lambda expressions 
symp 
functional languages computer architecture pp 

chalmers university technology june 
jones muchnick 
flow analysis optimization lisp structures 
muchnick jones editors program flow analysis theory ap pp 

prentice hall 
jones muchnick 
flexible approach interprocedural data flow analysis programs recursive data structures 
ninth annual acm symp 
principles programming languages pp 

acm press 
ab tract storage structures 
de bakker van vliet editors algorithmic languages pp 

ifip north holland 
karr 
affine relationships variables program 
acts kildall 
unified approach global program optimisation 
acm symp 
principles programming languages pp 

landi 
presence pointers 
phd thesis rutgers university jan 
landi 
undecidability static analysis 
acm letters programming languages sy dec 
landi ryder 
pointer induced aliasing 
pop pp 

lr lh lh ml ma npd pa rf rm sf sp sh st wa landi ryder 
safe approximate algorithm interprocedural pointer aliasing 
pld pp 

larus 
detecting conflicts structure accesses 
acm sigplan conf 
pto gr language design implementation pp 
june 
larus hilfinger 
restructuring lisp pro concurrent execution 
acm sigplan onf 
parallel programming experiences applications languages systems pp 
june 
marlowe landi ryder choi burke carini 
pointer induced aliasing clarification 
sigplan notices sept 
marlowe ryder 
hybrid incremental alias algorithms 
tech 
report lcsr tr rutgers university oct 

interpretation detect array data dependencies 
proc 
international symp 
supercomputing pp 

kyushu university press nov 
isbn 
morel 
data flow analysis global optimisation 
editor tools compiler construction advanced course pp 

cambridge university press 
panangaden demers 
computation aliases support sets 
fourteenth annual acm symp 
principles programming language pp 

parikh 
context free es 
cm 
rau fisher 
instruction level parallel processing 
journal 
murtagh 
lifetime analysis dynamically allocated objects 
fifteenth acm symp 
principles programming language pp 

acm press jan 
sagiv francez rodeh 
logicbased approach data flow analysis 
programming language implementation logic programming volume lecture notes computer science pp 

springer verlag aug 
sharir pnueli 
approaches interprocedural data flow analysis 
muchnick jones editors program flow theory applications pp 

prentice hall 

shivers 
control flow analysis higher order languages 
phd thesis carnegie mellon university pittsburgh may 
cmu cs 

lattice interpretation dynamic lisp structures 
computation nov 
wall 
limits instruction level parallelism 
proc 
asplos iii pp 
apr 
weihl 
interprocedural data flow analysis presence pointers procedure variables label variables 
seventh annual acm symp 
principles programming languages pp 

appendix generating bases mutually recursive pointer types 
mutually recursive types tl 
define minimal set access paths generates paths mapping objects type objects type traversing objects type tj ordering condition necessary ensure path traverses unique factorisation tj 
see example 
algorithm match 
ill defined iterative decomposition 
complex case occurs leading term iterated bk proper prefix consisting accessors properly prefix instance sons tl sons tl 
case compute sons tl struct char key struct sons struct struct hd basis ee struct tl sons tl hd st mutually recursive pointer types corresponding bases see br yields set regular expressions monomial form ei appears contained star expression 
example get regular expression ti hd matching proceeds tl hd iv 
algorithm factor 
normalisation sap performed steps 
subsequences copy selector traversing recursive type replaced term form bk basis type system equations augmented traversal partial subsequence performs full traversal 
second type recursive type basis bk appended recorded third step simplifies replacing occurrences form bk bk bk recording equation 
extend factor symbolic alias relations 
widening operator 
alias relations qi gz widening normalizing saps factor 
loop applies widening operator associated numeric lattice numeric spaces symbolic alias pair defined qz 
placement widenings 
widening operators inserted interprocedural data flow equations cc follows determine set dependence graph equations cycle traverses node data flow equation xj feedback set transfer function replace xi xi vt xj 
defined inst ante set int loop headers see 
algorithm 
function equivalence class computes symbolic path set representing set access paths aliased ss follows pair fl fz examined match check resp 
generate prefix case sap represents paths appended fl resp 
generate necessary right regular reduction 
system numeric equations describes values coefficients fl resp 
fl resp 
generates prefix corresponding values coefficients numeric space intersected projected coefficients occuring resp 
yielding 
example hd sti 
pair fz added adjusted take reflexivity account 
remaining algorithms see figures conceptually similar mechanisms 
pointers functions 
global variables distinguish set function names 
particular function name assignment generates particular alias pair 
analyse higher order function call 
function pointer type compute symbolic path set ass 
contains directly set function names potentially called 
technique similar de 
exploiting sparsity data flow equation systems 
alias analysis interesting candidate sparse evaluation graph techniques ccf dgs 
methods simplify data flow equations eliminating copies exploiting idempotence join meet operator 
opportunities simplification occur data flow equations alias analysis copies occur statements involve pointers joins typically eliminated conditionals involve pointers 
investigating incorporation new approach dgs analyser plan evaluate impact performance 
compaction methods 
aliasing symmetric perform symmetric reduction defining total order saps ignores coefficient names enforcing symbolic alias pair satisfies divide number alias pairs 
aliasing reflexive perform reduction discarding symbolic alias pair generates reflexive alias pairs 
symbolic reflexive reduction match operation 
alias analysis perform reflexive reduction general 
instance alias pair length safely removed analysis lr 
aliasing right regular aliased implies aliased perform right regular reduction 
symbolic alias pairs produced framework generally right regularly closed opportunities right regular reduction 
reduction methods applied sets symbolic alias pairs el denote symmetric relations 
reductions safely applied symbolic alias relations 
transitive reduction method proposed cbc compaction methods provably result loss precision 
generation data flow equations 
explained handle assignments function calls returns 
illustrate translation statements example 
function return values handled assigning return value global variable result see 
copy recursive dependence graph equations cent cycles 
ci exit ca 
widening operations inserted function entry see function exit see 
conditional branches guarded pointer comparisons taken account cc 
instance transfer function corresponding null 
see cz 
predicates pointer equality testing handled similarly 
cent cent 
ctt cent kill cl cen tl result kill tl cim ye ti kill result result kill hd hd ce ce ce tin jz kill result lz kill result lz ls kill data flow equations corresponding program algorithm factor input symbolic access path output normalised symbolic access path system linear equations relating variables method apply left right order el 
ei 
en selector typeof el 
recursive type basis fresh variable exists minimal typeof 
el ej en en su fi een en su recursive type fresh variable bk su exhaustively apply form 
ei ei 
en fi fresh variable el 


en su return define similar algorithm factor ty symbolic access path ty type name 
partial access path applied objects type ty 
star 
example factor ti tl im tl factor tl tl hd struct list ti algorithm widening symbolic alias relations input symbolic alias relations ur output widening el vq method qi actor ql factor symbolic alias pair qi exists pair fi qu fl vk fl jf eu fl fz return example hd tz hd tz hd vi lattice arithmetic intervals cc tl hd tl sfl karr lattice tl hd ya tl hd st widening operator algorithm normalisation algorithm factor factor input symbolic alias relation ur output normalised symbolic alias relation actor method symbolic alias pair fl fz factor fl factor fz cti fu gl gz done return algorithm factor defined 
example actor le key right key sfl kl normalisation algorithm factor algorithm input access path symbolic alias relation output symbolic path set method symbolic alias pair fz foreach fl project ch jv 
done foreach fz project cf fv jl pu done done pu return example tl tl hd tl hd tb sb equivalence class access algorithm rewrite ef input access path symbolic path set symbolic alias relation output symbolic alias relation method rename 
di symbolic alias pair fz foreach fl done foreach done ch ka fv fz rename match fl foreach fv done return rename te ight defined similarly algorithm input access path symbolic path set sym algorithm strip ej alias relation input access path symbolic path set output symbolic alias relation output symbolic path set method method rewrite hi foreach rename return project fv pu operator done return 
example tl hd sfl ki tl hd sn algorithm algorithm concatenation symbolic path sets input symbolic path sets output symbolic path set denoting concat en tion access paths denoted method rename coefficients appearing foreach fl ki foreach kz fi ah return example tl hd sti tl sk tl tl si concatenation symbolic path sets algorithm il entry input symbolic alias pair fl alias relations output symbolic alias relations method fz ul fi ad vi fif wj 
rename project cu fv fo fv rename return gene tl tl sb kt ih el ul ml operator generic name returns symbolic access path consisting generic object ki 
km number coefficient variables occurring name determined uniquely ignoring coefficient names kl fresh variables 
generalisation symbolic access paths 
