reasoning concurrent execution prioritized interrupts exogenous actions situation calculus giuseppe de giacomo dipartimento di informatica sistemistica universita di roma la sapienza salaria roma italy dis uniroma yves lesp department computer science college york university ave toronto canada ca hector levesque department computer science university toronto toronto canada hector cs toronto edu alternative planning approach highlevel agent control concurrent program execution considered 
formal definition situation calculus programming language illustrated detailed example 
language includes facilities prioritizing concurrent execution interrupting execution certain conditions true dealing exogenous actions 
language differs procedural formalisms concurrency initial state incompletely specified primitive actions user defined axioms situation calculus 
comes providing high level control robots agents dynamic incompletely known worlds approaches plan synthesis may demanding computationally simple settings 
alternative approach showing promise highlevel program execution idea roughly searching sequence actions take agent initial state goal state task find sequence actions constitutes legal execution high level non deterministic program :10.1.1.54.7045
planning find sequence necessary reason preconditions effects actions body program 
program happens deterministic little searching required non determinism included search task begins resemble traditional planning 
formulating high level program user gets control search effort required 
hope domains agent needs conveniently expressed suitably rich highlevel programming language 
previous golog language considered reason actions programs containing conditionals iteration recursion nondeterministic operators primitive actions fluents characterized axioms situation calculus :10.1.1.54.7045
explore execute programs incorporating rich account concurrency 
execution task remains changes programming language call congolog concurrent golog considerably expressive 
nice features language allows conveniently formulate agent controllers pursue goal oriented tasks concurrently monitoring reacting conditions environment 
course formal model concurrency 
explore execute programs incorporating rich account concurrency 
execution task remains changes programming language call congolog concurrent golog considerably expressive 
nice features language allows conveniently formulate agent controllers pursue goal oriented tasks concurrently monitoring reacting conditions environment 
course formal model concurrency 
fact developed approaches available inherits intuitions :10.1.1.85.2760
distinguished fundamental ways 
allows incomplete information environment surrounding program 
contrast typical computer programs initial state congolog program need partially specified collection axioms 
second allows primitive actions elementary instructions affect environment complex way 
possibility theory form ffl axioms describing initial situation ffl action precondition axioms primitive action characterizing poss 
ffl successor state axioms fluent stating conditions holds function holds situation take place called effect axioms provide solution frame problem ffl unique names axioms primitive actions 
ffl foundational domain independent axioms 
domain theory sort clean specification planning task dates back green classical planning domain theory axioms goal formula oe single free variable planning task find sequence actions axioms legal oe abbreviation gamma legal stands poss poss gamma words task find sequence actions executable action executed context precondition satisfied achieves goal goal formula oe holds final state results performing actions sequence 
golog golog logic programming language primitive actions background domain theory :10.1.1.54.7045
includes constructs ff primitive action oe wait condition oe oe sequence oe oe nondeterministic choice actions oe nondeterministic choice arguments oe nondeterministic iteration oe oe oe conditional oe oe loop proc fi oe procedure definition basic form high level program execution task special case planning task program execution domain theory axioms program oe execution task find sequence actions axioms oe oe abbreviation formula situation calculus says program oe executed starting situation legal terminating situation 
simple inductive definition containing rules oe oe def oe oe oe oe def oe oe oe oe oe def oe oe oe oe construct language :10.1.1.54.7045
kind semantics associates programs called evaluation semantics complete evaluation program 
goal eventually handling concurrency convenient give slightly refined kind semantics called computational semantics single steps computation transitions 
ffl foundational domain independent axioms 
domain theory sort clean specification planning task dates back green classical planning domain theory axioms goal formula oe single free variable planning task find sequence actions axioms legal oe abbreviation gamma legal stands poss poss gamma words task find sequence actions executable action executed context precondition satisfied achieves goal goal formula oe holds final state results performing actions sequence 
golog golog logic programming language primitive actions background domain theory :10.1.1.54.7045
includes constructs ff primitive action oe wait condition oe oe sequence oe oe nondeterministic choice actions oe nondeterministic choice arguments oe nondeterministic iteration oe oe oe conditional oe oe loop proc fi oe procedure definition basic form high level program execution task special case planning task program execution domain theory axioms program oe execution task find sequence actions axioms oe oe abbreviation formula situation calculus says program oe executed starting situation legal terminating situation 
simple inductive definition containing rules oe oe def oe oe oe oe def oe oe oe oe oe def oe oe oe oe construct language :10.1.1.54.7045
kind semantics associates programs called evaluation semantics complete evaluation program 
goal eventually handling concurrency convenient give slightly refined kind semantics called computational semantics single steps computation transitions 
step primitive action testing condition holds current state 
introducing special predicates final trans final oe intended say program oe may legally terminate situation trans oe oe intended say program oe situation may legally execute step situation program oe remaining 
goal eventually handling concurrency convenient give slightly refined kind semantics called computational semantics single steps computation transitions 
step primitive action testing condition holds current state 
introducing special predicates final trans final oe intended say program oe may legally terminate situation trans oe oe intended say program oe situation may legally execute step situation program oe remaining 
final trans characterized set equivalence axioms depending structure argument 
necessary quantify programs need encode golog programs firstorder terms including introducing constants denoting variables :10.1.1.54.7045
laborious quite straightforward omit details simply programs oe stands situation calculus formula situation arguments suppressed oe denote formula obtained restoring situation variable fluents appearing oe 
exogenous actions concurrent processes golog waiting oe amounts testing oe holds current state 
space reasons ignore 
types semantics belong family structural operational semantics introduced observe final trans occur tests disallowed :10.1.1.4.8186
necessary quantify programs need encode golog programs firstorder terms including introducing constants denoting variables :10.1.1.54.7045
laborious quite straightforward omit details simply programs oe stands situation calculus formula situation arguments suppressed oe denote formula obtained restoring situation variable fluents appearing oe 
exogenous actions concurrent processes golog waiting oe amounts testing oe holds current state 
space reasons ignore 
types semantics belong family structural operational semantics introduced observe final trans occur tests disallowed :10.1.1.4.8186
formulas order terms 
equivalence axioms gamma final follows universally closing final nil true final ff false final oe false final oe oe final oe final oe final oe oe final oe final oe final oe final oe final oe true final oe oe oe oe final oe oe final oe final oe oe oe final oe oe equivalence axioms gamma trans follows universally closing ffi trans nil ffi false trans ff ffi poss ff ffi nil ff trans oe ffi oe ffi nil trans oe oe ffi final oe trans oe ffi ffi ffi ffi oe trans oe ffi trans oe oe ffi trans oe ffi trans oe ffi trans oe ffi trans oe ffi trans oe ffi ffi ffi ffi oe trans oe ffi trans oe oe oe ffi oe trans oe ffi oe trans oe ffi trans oe oe ffi oe ffi ffi ffi oe oe trans oe ffi easy verify induction structure argument theorem golog program oe exist situation calculus formulas phi oe psi oe ffi mentioning final trans gamma gamma final oe phi oe gamma gamma ffi trans oe ffi psi oe ffi final trans place may give new definition oe def ffi trans oe ffi final ffi trans transitive closure trans defined second order situation calculus formula trans oe oe def oe oe oe ellipsis stands oe oe ffi ffi oe ffi trans ffi ffi oe oe ffi convenient include special empty program nil 
words oe holds possible repeatedly single step program oe obtaining program ffi situation ffi legally terminate get result theorem definitions equivalent non nil golog program oe situations gamma gamma oe oe concurrency ready define congolog extended version golog incorporates rich account concurrency 
say rich handles ffl concurrent processes possibly different priorities ffl high level interrupts ffl arbitrary exogenous actions 
higher order logic 
handbook logic artificial intelligence logic programming vol 
pages 
clarendon press 
levesque reiter lesperance lin scherl :10.1.1.54.7045
golog logic programming language dynamic domains 
appear journal logic programming 
mccarthy hayes 
philosophical problems standpoint artificial intelligence 
edinburgh university press 
milner 
communication concurrency 
prentice hall 
plotkin :10.1.1.4.8186
structural approach operational semantics 
technical report fn computer science dept aarhus univ denmark 
pryor murphy 
processes plan execution 
