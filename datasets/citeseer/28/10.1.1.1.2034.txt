cluster scalable network services fox steven gribble chawathe eric brewer paul gauthier university california berkeley inktomi fox gribble brewer cs berkeley edu gauthier inktomi com identify fundamental requirements scalable network services incremental scalability overflow growth provisioning availability fault masking 
argue clusters commodity workstations interconnected high speed san exceptionally suited meeting challenges internet server workloads provided software infrastructure managing partial failures large cluster new service 
propose general layered architecture building cluster scalable network services encapsulates requirements reuse service programming model composable workers perform transformation aggregation caching customization tacc internet content 
performance implementation simplicity architecture tacc programming model exploit base weaker acid data semantics results trading consistency availability relying soft state robustness failure management 
architecture shelf infrastructural platform creating new network services allowing authors focus content service composing tacc building blocks implementation 
discuss real implementations services architecture transend web distillation proxy deployed uc berkeley ip population hotbot commercial implementation inktomi search engine 
directories yahoo 
maintain database soft state base semantics keep user customization profiles acid database 
transformation proxies clients servers transform internet content fly transformed content base data regenerated computation service bills user session billing certainly delegated acid database 
focus services acid component manipulate primarily base data 
web servers search aggregation servers caching proxies transformation proxies examples services framework supports superset services providing integrated support requirements :10.1.1.21.1584
show base semantics greatly simplify implementation fault tolerance availability permit performance optimizations framework precluded acid 
cluster scalable service architecture section propose system architecture model building scalable network services clusters 
architecture attempts address challenges cluster computing challenges deploying network services exploiting clusters strengths 
view contributions follows proposed system architecture scalable network services exploits strengths cluster computing exemplified cluster servers transend hotbot 
process peer functionality encapsulated manager stub code 
simply linking stub front ends automatically recruited process peers manager 
user profile database service interface transend allows user register series customization settings html forms java javascript combination applet 
actual database implemented freely available performance adequate needs user preference reads frequent writes reads absorbed cache front 
cache nodes transend runs harvest object cache workers separate nodes :10.1.1.21.1975
harvest suffers functional performance deficiencies resolved 
collection harvest caches treated siblings default siblings queried request cache service time increase load increases cache nodes added 
scalability improved fault tolerance manager stub manage number separate cache nodes single virtual cache hashing key space separate caches automatically re hashing cache nodes added removed 
second modified harvest allow data injected allowing distillers scaling jpeg image factor dimension reducing jpeg quality results size reduction kb kb 
built distillers transend scaling filtering jpeg images shelf jpeg library gif jpeg conversion followed jpeg degradation perl html marks inline image distillation preferences adds extra links images users retrieve original content adds toolbar page allows users control various aspects transend operation 
user interface transend controlled html distiller direction user preferences front 
distillers took approximately hours implement debug optimize 
pathological input data occasionally causes distiller crash process peer fault tolerance guaranteed sns layer means don worry eliminating possible bugs corner cases system 
graphical monitor extensible tcl tk graphical monitor presents unified view system single virtual entity :10.1.1.38.1298
components system report state information monitor multicast group allowing multiple monitors run geographically dispersed locations remote management 
monitor page email system operator serious error occurs example stops receiving reports component 
benefits visualization just immediately detect looking visualization panel state system component currently causing bottleneck cache time distillation queueing chose approach discovering jpeg representation smaller faster operate images produces superior results 
delay interconnect resources system figures interest 
performance distillers timing distillation latency function input data size calculated approximately items ip trace file 
shows gif distiller approximately linear relationship distillation time input size large variation distillation time observed particular data size 
slope relationship approximately milliseconds input 
similar results observed jpeg html distillers html distiller far efficient 
cache partition performance gif size bytes detailed performance analysis harvest caching system :10.1.1.21.1975
summarize results average cache hit takes ms service including network os overhead implying maximum average service rate partitioned cache instance requests second 
tcp connection overhead attributed ms service time 
cache hits take ms service implying cache hit rate low variation 
penalty time fetch data internet varies widely ms seconds 
