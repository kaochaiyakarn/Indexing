event noti cation data driven coordination languages comparing ordered unordered interpretations busi dipartimento di scienze dell informazione universit di bologna bologna italy mail busi cs unibo cs unibo keywords coordination models languages shared data space event noti cation expressiveness concurrent languages java coordination 
javaspaces tspaces coordination distributed java programming proposed sun ibm respectively 
extend data driven coordination model linda event noti cation mechanism process register interest incoming arrivals particular kind data receive communication occurrences events 
introduce process calculus linda coordination model prove processes synchronous dataspace ordered interpretation turing powerful case asynchronous unordered interpretation introduce new calculus ln obtained extending event noti cation mechanism prove main results contrasting shown ln turing powerful unordered interpretation ii allows faithful encoding ordered semantics top unordered 
decades assisted dramatic evolution computing systems leading stand mainframes worldwide network connecting smaller powerful processors 
expected step direction represented called ubiquitous computing idea dynamically recon gurable federations composed users resources required users 
instance jini architecture represents rst proposal sun java technology inspired new computing paradigm 
scenario challenging topics concerned coordination federated components 
reason renewed interest coordination languages partially supported esprit working group coordina fteen years arisen 
example javaspaces tspaces coordination distributed java programming proposed sun ibm respectively 
proposals extend data driven coordination model linda processes interact consumption test absence inp data inside shared dataspace new event noti cation mechanism :10.1.1.113.9679
mechanism allows process register interest arrivals particular kind data de ning process triggered reaction occurrence events 
investigate expressive power linda coordination model di erent interpretations operator 
operator seen composed phases emission phase process executes operation sends datum dataspace rendering phase new datum reaches dataspace ectively available 
di erent semantics suggested ordered emission rendering datum form single autonomous atomic action 
term permits model nite computations able spawn instance program consumption occurrence hai axiom 
rules usual local synchronization rules respectively 
observe standard local rule applied actions di erent non standard rules regard way actions labeled non standard labels inferred structured terms 
rule indicates actions labeled performed hai environment transition labeled performed 
rules consider actions labelled indicating interest incoming instances hai :10.1.1.105.5728
process able perform kind action composed parallel registered event local actions combined global rule process performs action leaving environment unchanged rule :10.1.1.105.5728
rules deal di erent cases regarding label indicates arrival new instance hai processes waiting noti cation event environment rule environment left unchanged rule 
rules di erentiate ordered unordered semantics table 
ordered approach output operation consists cre hai notify jp jon inp inp jq jq jq jq jq jq jq jq jq jq jq jq jq jq table operational semantics symmetric rules omitted :10.1.1.105.5728
rules usual local synchronization rules respectively 
observe standard local rule applied actions di erent non standard rules regard way actions labeled non standard labels inferred structured terms 
rule indicates actions labeled performed hai environment transition labeled performed 
rules consider actions labelled indicating interest incoming instances hai :10.1.1.105.5728
process able perform kind action composed parallel registered event local actions combined global rule process performs action leaving environment unchanged rule :10.1.1.105.5728
rules deal di erent cases regarding label indicates arrival new instance hai processes waiting noti cation event environment rule environment left unchanged rule 
rules di erentiate ordered unordered semantics table 
ordered approach output operation consists cre hai notify jp jon inp inp jq jq jq jq jq jq jq jq jq jq jq jq jq jq table operational semantics symmetric rules omitted :10.1.1.105.5728
ordered unordered hai table semantics primitive 
rules consider actions labelled indicating interest incoming instances hai :10.1.1.105.5728
process able perform kind action composed parallel registered event local actions combined global rule process performs action leaving environment unchanged rule :10.1.1.105.5728
rules deal di erent cases regarding label indicates arrival new instance hai processes waiting noti cation event environment rule environment left unchanged rule 
rules di erentiate ordered unordered semantics table 
ordered approach output operation consists cre hai notify jp jon inp inp jq jq jq jq jq jq jq jq jq jq jq jq jq jq table operational semantics symmetric rules omitted :10.1.1.105.5728
ordered unordered hai table semantics primitive 
ation hai step 
way sequence outputs executed new data rendered order emitted 
production new instance hai communicated environment action label see rules 
results proved theoretical relevance think interest designers implementors coordination languages 
instance implement ordered output top unordered 
existence encoding justify presence event noti cation choice weaker easier implement unordered semantics expressive expensive ordered 
interesting issue addressed study interplay classical linda coordination paradigm event noti cation mechanism 
historically coordination mechanisms inspired distinct separated families coordination languages :10.1.1.105.5728
side linda inspired big amount data oriented languages event noti cation basis called control oriented languages manifold 
best knowledge represents rst attempt give formal treatment coordination language embodies coordination mechanisms 
think worthwhile study expressiveness fragment calculus test absence inp considered 
interest investigation justi ed fact inp operator example coordination primitive powerful dicult implement particular distributed memory systems see 
reactive tuple spaces mobile agent coordination 
proc 
ma volume 
lecture notes computer science 
gelernter :10.1.1.113.9679
generative communication linda 
acm transactions programming languages systems :10.1.1.105.5728

transition system speci cations negative premises 
ma volume 
lecture notes computer science 
gelernter :10.1.1.113.9679
generative communication linda 
acm transactions programming languages systems :10.1.1.105.5728

transition system speci cations negative premises 
theoretical computer science :10.1.1.105.5728

generative communication linda 
acm transactions programming languages systems :10.1.1.105.5728

transition system speci cations negative premises 
theoretical computer science :10.1.1.105.5728

shared tuple memories shared memories buses lans linda implementations spectrum connectivity 
phd thesis yale university department computer science 
minsky 
tuple centres coordination internet agents 
proc 
sac pages 
acm press 
papadopoulos :10.1.1.105.5728
coordination models languages 
advances computers 
plotkin 
structural approach operational semantics 
