computational secrecy typing pi calculus mart abadi ricardo corin dric fournet microsoft research university california santa cruz university twente 
define study distributed cryptographic implementation asynchronous pi calculus 
source level adapt simple type systems designed establishing formal secrecy properties 
show secrecy properties counterparts implementation formally level bitstrings respect probabilistic polynomial time active adversaries 
rely compilation typed intermediate language fixed scheduling strategy 
exploit interesting previous theorems intermediate language result appears computational soundness theorem standard process calculus mobile channels 
security attacks defenses operate various levels abstraction 
distributed program reasoning security terms programming language constructs concepts terms implementations 
implementations cryptography cryptographic primitives may represented black boxes specific functions bitstrings computing processes timing power consumption characteristics attacker may attempt exploit 
programming abstractions security helpful ideally mapped concrete implementations resist realistic low level attacks 
decade substantial research effort started address problem 
contribute line investigating implementation concurrent language message passing channel mobility 
treat cryptography formally terms symbolic expressions computationally level bitstrings resource bounded adversaries 
specifically define study distributed cryptographic implementation asynchronous pi calculus 
source level adapt simple type systems designed establishing formal secrecy properties 
particular rely secrecy types asymmetric communication style local pi calculus name confinement guarantees implied putting names scoped groups 
show secrecy properties strong computational counterparts implementation respect probabilistic polynomial time active adversaries operate concrete bitstrings 
implementation leverages laud results secrecy typing context simulatable cryptographic library :10.1.1.3.4629:10.1.1.4.5735
laud defined restricted appear proceedings fourth asian symposium programming languages systems lncs 
springer verlag berlin heidelberg 
variant spi calculus fixed scheduling strategy channel mobility fixed global communication ports 
laud calculus intermediate language translate pi calculus calculus rely simulatable cryptographic library 
laud employs type system secrecy proves soundness respect cryptographic library 
show translation type preserving 
laud results obtain computational secrecy guarantees soundness theorem pi calculus typings 
related comparison formal computational cryptography active research field produced computational justifications formal models cryptographic operations classes protocols formal cryptography 
higher level implementations process calculi terms black box formal cryptography :10.1.1.36.1115
tempting try compose results efforts 
instance imagine translation pi calculus turing machines spi calculus 
unfortunately strategy viable may 
compiling pi calculus spi calculus preserving security guarantees difficult best 
addition lack full computational interpretation pi spi calculus particular pi calculus features non determinism non termination odds probabilistic polynomial time computation 
type systems help certain realism setting goals instance aiming preserve secrecy properties necessarily testing equivalences 
alternatively may alter pi calculus reflect implementation constraints ad fournet designed calculus mobile names mobile channels ad hoc communications primitives established computational soundness implementation observational equivalence 
works develop implementations security functions 
particular canetti krawczyk considered problem implementing secure channels language framework 
main result appears computational soundness theorem standard process calculus mobile channels 
fact literature contain computational soundness theorem ccs 
going ccs main difficulties address pertain channel scopes mobility central pi calculus 
secrecy typing regarded discipline mobility 
contents section defines source language 
section presents local type system 
section explains intermediate language 
section describes distributed implementation asynchronous pi calculus 
section presents computational secrecy result 
section considers addition name groups 
section concludes 
source language section introduces source process calculus giving syntax semantics 
discusses secrecy informally 
syntax calculus appears 
assumes infinite set names infinite set variables similar identifiers range names range variables 
syntax distinguishes category terms data terms variable name processes 
mn output 
xn input 
xn replicated input nil parallel composition restriction conditional fig 

syntax process calculus processes programs 
terms variables names 
processes include constructs communication concurrency dynamic name creation roughly pi calculus conditional 
calculus polyadic sense messages tuples terms asynchronous sense output construct built acknowledgment 
inputs may replicated prefixing 
write 
xn replication optional 
usual may omit clause consists nil process 
name bound variables 
xn bound process 
xn write fn set names free process closed free variables may free names 
identify processes renaming bound names variables 
semantics calculus defined usual asynchronous pi calculus 
write reduces single reduction step 
write structurally equivalent 
represent weak observational congruence 
relations defined closed processes definitions appear full version 
concepts secrecy formal setting different definitions secrecy 
see discussion 
definition process preserves secrecy piece data publishes permit computation interaction attacker 
kind secrecy guarantee common analysis security protocols 
particularly adequate effective dealing secrecy fresh values viewed atomic keys nonces 
cardelli ghelli gordon abadi blanchet versions definition secrecy typing 
laud type system draw works computational results correspond stronger definition secrecy 
second definition process preserves secrecy value variable adversary distinguish definition advantage excluding partial implicit flows information 
local type system source language section give type system source language 
type system enforces asymmetric communication sense local pi calculus 
type system abadi blanchet laud section partly review borrowing previous papers 
precisely adapt fragment original type system excludes cryptography 
order match laud intermediate type system modify subtyping relation restrict typing rule conditionals 
types defined grammar secret secret 
tn public 
tn public type secret data intended kept secret message payloads protocol secret 
tn type channel adversary communicate carries tuples components types 
tn 
hand public 
tn type channel adversary may send receive messages channel may intended carry tuples components types 
tn adversary may send data channel 
public type public data 
subtyping relation reflexive relation public 
tn public 
rules type system concern judgments means formed environment 
means term type environment means set possible true types environment says process typed environment rules follows 
metavariable ranges names variables 
formed environment dom terms sets types terms processes public 
mi public 
mn 
tn 
mi ti 
mn public public 
xn public 

xn public 
tm public 
xn public 
xm tm 

xn secret 
tn 
xn tn 

xn output public output input public input public input secret nil parallel secret restriction secret cond typing rules output say public data sent public channel tuples expected types 
tn sent channel type 
tn public secret 
subtyping public data sent channel type public 
tn 
hand attacker channels type secret 
tn 
guarantee tuples types 
tn sent channels 
rules input channel question required represented name variable local pi calculus 
distinguish cases considering type type public corresponding output typed output public input values public 
rule input public treats case 
type public 
tm cases arise 
case corresponding output typed output public subtyping 
input values type public 
second case corresponding output typed output 
case input values expected types 
tm 
rule input public takes account cases checking process executed input typed 
type secret 
tn known attacker corresponding output typed output 
input values expected types 
tn 
rule cond exploits idea terms type certainly different 
case process may typed typed 
determine may type determine set possible types variable may course type subtyping public may replaced run time name type subtype possible types 
name possible type type assigned environment 
rule cond condition excludes comparison secret terms 
condition simply rules flow information secret values control flow process may observable adversary 
rule restriction excludes creation names type secret names secret channel types 
conditions rules cond restriction abadi blanchet imposed meet requirements payload secrecy see section 
example revisit adapt example abadi blanchet concerns protocol sends secret acknowledges message 
message 
message 
message 
ack channels receivers respectively 
initially creates secret channel sends return channel response sends proof origin new secret channel sends sends ack goal protocol guarantee secrecy calculus may represent principals protocol processes ack detailed assign types typechecks type secret main result theorem typing implies computational secrecy value substituted public secret public secret secret public secret public public secret public secret secret secret ack public obtain follows 
typing choose secret public 
output typed rule output 
input typed rule input public cases arise public public 
case vacuous rule cond test terms common types 
secret public secret secret 
case output typed output 
condition cond fulfilled secret secret public 
remaining input easily typed rule input secret 
process input typed input public similar cases arise 
intermediate language models backes laud concerned configurations probabilistic polynomial time turing machines 
machines connected ports ports connected wire 
machines represent honest parties controlled adversary 
time machine active 
idealized cryptographic library cryptographic library provides view cryptography sense 
principal associated deterministic machine pi machine connected concrete instance library mi runs cryptographic algorithms behalf pi maintains database maps handles cryptographic representations 
concrete library machines mi connect single idealized library thn ports maps handles shared symbolic dolev yao representations 
main results backes relate security systems respectively concrete idealized versions library standard computational cryptographic assumptions 
order prove security system uses concrete version suffices reason system uses idealized version 
laud intermediate language laud language programming machines pi processes send receive messages abstractly operate message contents library calls 
language inspired spi calculus semantics significantly different reflects low level implementation constraints cryptographic library 
particular communications occur global static bidirectional channels associated ports underlying machines 
channels intrinsically secure solely code initialization security specifications 
adversary controls scheduling machines channels represent untrusted network 
intercept network traffic disable execution local process 
contrast pi calculus context read replicated output message public channel prevent processes reading see 
respects language deterministic particular parallel execution machine supported interpreter maintains run queue input processes 
control flow machines carefully restricted 
machine activated reads single message input wires processes message runs bounded amount time puts message output wires yields 
usage library imposes programming discipline instance exclude encryption cycles leakage private keys 
grammar laud language minor syntactic changes values variable integer constant failed computation expressions value gen nonce nonce generation gen symenc key symmetric key generation ek symmetric key encryption ek symmetric key decryption keypair asymmetric key generation pubkey asymmetric encryption key ek asymmetric key encryption ek asymmetric key decryption store value storage retrieve value retrieval handle list 
en list list proj ei projection input process input replicated input sequence inputs processes input output run time failure binding conditional expressions represent calls cryptographic library 
calls successful return handles new entries return 
expression gen nonce creates fresh nonce 
expression gen symenc key generates symmetric key key rank prevent cycles see section 
expression keypair generates asymmetric key pair returns private decryption key pubkey returns associated encryption key 
expressions ek ek ek ek provide encryptions decryptions decryption visibly fails message encrypted key associated ek 
expressions store retrieve store retrieve data library respectively 
expression list 
en constructs list values list proj ei retrieves ith value 
input processes represent passive threads held interpreter run queue 
processes represent threads activated input perform output append input processes run queue 
processes input output conditional similar source calculus 
process evaluates expression evaluation succeeds runs result value substituted runs 
process represents run time failure written ii invalid input 
intuitively causes current thread abort instance failing evaluation test input process triggered thread put back run queue rejected message passed input run queue 
give syntax types intermediate language 
see details including subtyping relation typing rules 
public ek dk list 
tn sk intermediate types public data secret data secret nonce asymmetric encryption key asymmetric decryption key list symmetric key sum type public type public data 
counterpart secret data 
type type secret nonces 
type list 
tn lists 
types ek dk types public private asymmetric keys encrypting values type sk type symmetric keys order encrypting values type index avoiding encryption cycles 
type sum type 
sum types play role similar double typing rule input public section 
secrecy typing concrete configuration cn consists concrete system pi machines connected library machines mi user machine connected free ports plus adversary machine connects remaining unconnected ports 
ii intermediate level input processes consisting passive threads program machines pi laud results theorem corollary say ii typechecks environment cn preserves secrecy data communicated user machine precisely laud shows configuration cn system preserves payload secrecy user data sense defined backes pfitzmann simulatable cryptographic library 
basically system preserves payload secrecy adversary colluding user machine distinguish instance running user inputs provided instance inputs converted random values replaced back scrambling machine runs notion payload secrecy regarded computational version second formal definition secrecy described section 
distributed implementation source language section translate assemblies pi calculus processes intermediate language input processes 
pi calculus process represents concurrent system indicate distribution subprocesses machines 
source process pi implementation distributes subprocesses pi machines pi rearrange source processes pi threads 
give compositional translation threads run machine 
describe top level implementation initialization process 
normal forms source processes source threads processes perform series name creations tests yield parallel composition inputs outputs 
grammar atomic processes 
xn input 
xn replicated input 
mn output threads restriction conditional ai atomic processes source process show exists thread obtained repeatedly applying rewriting steps process contexts renaming fn step structural equivalence 
step observational equivalence contexts 
steps preserve source typing rewriting terminates 
represent thread machine translation core translation maps channel communications runs particular cryptographic protocol 
informally machine run queue contains input process running atomic process source process 
machine proposed message message matched pending inputs run queue 
message accepted translation input message triggers translation thread runs completion returns acknowledgment message appends new input processes run queue 
message accepted translation output message simply triggers pending output 
translate term list elements encryption key nonce 
list proj list proj 
write 
xn abbreviate list proj 
xn list proj 
occur translate processes follows 
mn cont net list 
mn 

xn net 
xn ack keypair list pubkey gen nonce represent output encryption followed output public channel net input corresponding input decryption 
specifically translate local channel asymmetric key pair public key private key nonce ac capability receive channel represented having capability send channel represented having ac nonce ac necessary key standard cryptographic assumptions may recovered message encrypted 
output guarded input channel cont 
guard ensures implementation sends output time 
conversely successful input acknowledged immediate output channel ack environment knows message delivered need proposed required functional correctness 
symbol represents fresh variable dummy value 
translation inputs defined local channel names variables condition ensures input translation static scope corresponding decryption key 
crucially implementation depend typing information 
contrast ordinary types secrecy types need known implementor 
express relative secrecy properties studying behaviour system presence adversary possibly different typings different adversaries 
initialization distributed computation initialization deals free names source processes pi group names follows 
free names input pi 
bi fn pi bi 
informally names represent data supplied attacker user 
require reflecting requirement underlying cryptographic library asymmetric decryption keys communicated 
similar locality requirement local pi calculus 
typed translation accommodate distribution private encryption keys 
turning attention knowledge adversary rw represent names controlled adversary rw represent names available adversary output 
rw names represent user secrets 
basically interested source processes behave export import rw 
pn secrets substituted order obtain distributed program intermediate language additional machine initialization 
particular distributes cryptographic materials associated top level restricted channels low level secure communications 
introduce syntactic sugar polyadic communication intermediate language abbreviate abbreviate list arrive definition intermediate level input processes 
initially hosted machines 
pn export eai export import user es cont import ebi ii cont eai export eai import ebi pi export import low level secure channels pi user low level secure channel user export import low level channels adversary context translation source context binds names abbreviates sequence actions 

considering initialization part specification implementation rely low level secure channels 
perform initialization net rely initial key distribution 
summary concrete distributed configuration cn consists system machines pi runs intermediate language processes ii defined plus library machines mi realize cryptographic primitives user machine adversary machine discussion definition processes ii depend origin imported values bi 
words implementation know priori values controlled adversary 
origin determined definition multiplexing values come peer machines adversary 
simplicity implementation assumes communications distributed ii includes matching inputs outputs 
support typecheck sort channels machine local communications optimized implementation rely cryptography 
implementation meant resist attacks 
adversary affect control flow program instance replaying messages 
consider example source process adv 
pi calculus semantics preserves secrecy context knows adv fact behaves just inert process 
implementation secrecy broken adversary decryption key adv adversary observes opaque message net produced evaluating list forward message twice machine hosts inputs causing machine send back adv list adv eventually adversary extract note rules section safely exclude typing contains secret adv public 
functional correctness mainly interested secrecy important check implementation works 
establish implementation functional particular definition adversary implements reliable network 
briefly recall main notations laud deterministic operational semantics intermediate language 
pi represent passive state local machine implements series input processes state idealized cryptographic library 
write pi series computation steps state pi state 
message represents encoded input adversary 
outcome represents encoded output indicates input accepted input accepted response 
omit definition encoded inputs outputs simply write encoded message produced pi send source output state operational correspondences inputs outputs follows 
range parallel compositions source inputs outputs range source outputs 
pi net ack 
pi net 
output pi cont net 
pi cont 
correspondences reflect unknown deterministic scheduling guarantee threads may input implementations input similarly outputs 
correspondence represents new restrictions evaluation context translations create new keys recorded library source restrictions discarded proposition relies cooperation adversary performs initialization repeatedly retrieves pending outputs stores queue repeatedly attempts deliver pending outputs machines turn 
proposition states implementation follows expected finite infinite source traces 
proposition functional correctness 
machines pi implement source processes pi initialization parameters rw idealized system pi thn 
pi 
exist adversary user source reductions configuration reaches state run queue machine pi contains input processes computational secrecy local typing establish payload secrecy distributed implementation arbitrary source processes 
translate types type environments verify source type derivations yield valid type derivations intermediate language 
translation types follows secret public public secret 
tn list ek list 
tn public 
tn list ek list public 
tn public translation channel types follows choice communication protocol 
lift translation types environments 
translating name binding bind variables translated type type corresponding private decryption key 
translate bindings follows secret secret public public public secret 
tn secret 
tn dk list 
tn public 
tn public 
tn dk list public 
tn intermediate language environment assigns types implementation channels net ack cont export import export import user way 
definition appears full version 
plus translations bindings lemma states source subtyping preserved type derivations source terms processes yield type derivations intermediate language 
lemma type preservation 




obtain theorem 
pi 
machines pi implement source processes pi initialization parameters rw source typing environment contains secret secret public public rw concrete system pi mi preserves payload secrecy illustrate theorem example section 
established system includes machines pi initialization parameters ack ack rw ack hosts translation hosts translation runs initialization process export export export import ack user 
cont import cont import ack meets conditions theorem system preserves payload secrecy types channel groups section supplement type system typing rules adapted cardelli 
rules designed ensure formal secrecy typing concern symmetric communication channels confined scoped groups names 
relying confinement discipline implement channels symmetric encryption computational secrecy guarantees 
group types source language group types embody static scoping policies pi calculus help control dynamic extrusion channels partitioning named groups statically controlling scope groups 
groups dynamically created part computation ensure channels group forever secret outside initial scope 
extend grammars source processes types accordingly processes 
see section 
mn output 
xn input 
xn replicated input group restriction sa 
tn restriction types 
see section 
tn channel group assume infinite set groups range groups 
process binds scope consider processes renaming bound groups 
processes enable communication restriction names belong group processes section additional indicates usage group names select symmetric key cryptography implementation 
restrictions mention types useful guiding translation 
operationally group restrictions behave name restrictions similar structural equivalence rules additional context rule reductions group types play dynamic role retrieve untyped source processes untyped semantics type erasure section 
supplement type system additional typing rules groups dom 
tn 
tn group restriction dom dom 
tn 
tn 
xn tn 

xn 
mi ti 
mn 
tn sa 
tn input output restriction formedness rules demand groups recorded group types mutually recursive 
group restriction ensures restricted occurs type free variable 
rules standard 
contrast rules local channels input enables inputs term group type 
example consider processes sd secret represents private long term channel represents private channel session creates group sends uses send secrets assign types sc secret typechecks type secret difficulties symmetric encryption scoped group types match symmetric keys limitations 
discuss standard limitations context intermediate language idealized cryptographic library 
encryption cycles may occur symmetric keys encryption keys encrypted values 
cycles potentially unsafe excluded standard computational definitions secrecy 
particular cycles excluded cryptographic library follows secret symmetric key encryption integer rank idealized library checks encryption symbolic representation value encrypted includes encryptions strictly lower rank 
key compromises may occur computation hard model computationally 
cryptographic library simplifies issue requiring symmetric key may eventually leaked adversary leaked encryption key known adversary 
laud type system simplifies excludes leakage symmetric keys typing 
address second limitation extend intermediate language follows 
convention rank indicate key immediately leaked adversary 
refine rule sk gen symenc key rules psk gen symenc key public gen symenc key sk sk gen symenc key sk sk special typing rule admissible laud system supports symmetric keys type public received adversary 
assume library implementation gen symenc key detects leaks key adversary additional port 
technically establish payload secrecy result systems modification 
straightforward show system preserves payload secrecy leaking symmetric keys system leak preserves payload secrecy 
laud private communication adversary breaks payload secrecy system leak adversary breaks payload secrecy system leak just ignoring extra input 
system dynamically rely rank parameters distributed implementation describe distributed implementation source processes groups extension implementation section 
global preliminary step partition free groups source processes pi 
public private groups rename restricted groups groups pairwise distinct give rank type rank 
tn maxi rank ti private restricted types rank 
extend translations types processes follows 
tn public public sk rank tn list 
tn 
mn cont net list 
mn 

xn net 
xn ack sa gen symenc key rank translation environment extended group type bindings pointwise discards groups 
section show translation processes welltyped 
initialization applies unchanged exchange private group names just names type secret 
tn public group names rw generalize proposition lemma theorem systems kinds channel implementations additional requirement toplevel source environment types public group types public public group types 
leave details full version 
summary obtain computational secrecy guarantees implementation standard process calculus mobile channels 
guarantees apply processes conform typing disciplines originally designed establishing formal secrecy 
pleasing typing disciplines strong non trivial computational meaning 
may able extend results secrecy requirements 
expect analogous results may established typing disciplines enforce authenticity suggested laud authorization 
addition implementations considered hardened kinds attacks corresponding security properties captured type systems 
unfortunately attractive extensions appear challenging 
instance protection traffic analysis may require expensive implementation strategies changes source calculus 
interesting direction research development high level models calculi convenient programming amenable sound efficient implementations 
acknowledgments abadi partly supported national science foundation ccr ccf 
corin partly supported nwo travel 

abadi 
protection programming language translations 
th international colloquium automata languages programming volume lncs pages 
springer verlag 

abadi 
security protocols properties 
bauer editors foundations secure computation nato science series pages 
ios press 

abadi blanchet 
secrecy types asymmetric communication 
theoretical computer science apr 

abadi fournet gonthier 
authentication primitives compilation 
th acm symposium principles programming languages pages jan 

abadi fournet gonthier 
secure implementation channel abstractions 
information computation apr 

abadi gordon 
calculus cryptographic protocols spi calculus 
information computation 

abadi rogaway 
reconciling views cryptography computational soundness formal encryption 
journal cryptology 

ad fournet 
cryptographically sound implementations communicating processes extended 
rd international colloquium automata languages programming volume lncs pages 
springer verlag july 

backes pfitzmann 
symmetric encryption simulatable dolev yao style cryptographic library 
th ieee computer security foundations workshop pages 

backes pfitzmann 
relating symbolic cryptographic secrecy 
ieee symposium security privacy pages 

backes pfitzmann waidner 
composable cryptographic library nested operations 
th acm conference computer communications security pages 

backes pfitzmann waidner 
symmetric authentication simulatable cryptographic library 
international journal information security 

canetti krawczyk 
analysis key exchange protocols building secure channels 
volume lncs 
springer verlag 

cardelli ghelli gordon 
secrecy group creation 
information computation 

fournet gordon maffeis 
type discipline authorization policies 
th european symposium programming volume lncs pages 
springer 

gordon jeffrey 
types effects asymmetric cryptographic protocols 
computer security 

laud 
secrecy types simulatable cryptographic library 
th acm conference computer communications security pages 
research report lu cybernetica aug 

sangiorgi 
asynchrony name passing calculi 
th international colloquium automata languages programming volume lncs pages 
springer verlag 

micciancio warinschi 
soundness formal encryption presence active adversaries 
st theory cryptography conference tcc pages 

