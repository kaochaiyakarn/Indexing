abduction negation failure active databases agents sadri toni department computing imperial college london sw az uk ftg doc ic ac uk 
suggested abductive logic programming suitable formalism represent active databases intelligent agents 
particular abducibles integrity abductive logic programs respectively represent actions active reactive rules 
expect approach abductive proof procedures provide engine underlying active database management systems agents 
analyse existing abductive proof procedures argue inadequate handling applications 
inadequacy due incorrect treatment negative literals integrity constraints 
inadequacy due incorrect treatment negative literals integrity constraints 
propose new abductive proof procedure give examples proof procedure achieve active behaviour deductive databases reactivity agents 
abductive logic programming powerful knowledge representation framework realise diverse applications 
abductive logic program hp ii consists logic program seen incomplete theory set abducible predicates variable free abducible atoms expand theory set rst order sentences integrity constraints satis ed sets abducibles expanding theory 
earlier shows promise abductive logic programming understand implement active databases see intelligent agents see :10.1.1.78.7418
particular beliefs desires agents bdi architectures understood logic programs integrity constraints respectively 
general active rules active databases rules determining reactive behaviour agents multi agent systems reactive rules understood integrity constraints abductive logic programming 
example active reactive rule rise temperature raise alarm understood declaratively integrity constraint rise temperature raise alarm accurately rise temperature raise alarm 
reactive rules interpreted production rules 
abductive interpretation multi agent systems active databases abductive answers understood acceptable sets actions performed consequence transactions case active databases observations goals case agents 
example observation rise temperature accurately acceptable set actions abductive answer accurately alarm 
general actions internal example changing database external ecting environment example communication actions 
selected abductive answer corresponds intention bdi architecture agents 
number proof procedures computation abductive answers abductive proof procedures proposed :10.1.1.31.9982:10.1.1.21.6503
reactivity active database management systems agents obtained interleaving execution proof procedures selection abducibles actions partially computed abductive answers plans processing outside observations trigger active reactive rules 
interleaving gives rise observe think act cycle 
investigation indicates existing procedures produces required active reactive behaviour due inadequate treatment negative literals integrity constraints 
propose alternative abductive proof procedure obtained modifying proof procedure 
selective completion logic program wrt set predicates language union completions predicates integrity constraints implications form ln literals possibly true atom possibly false 
variables implicitly universally quanti ed scope entire implication 
called head ln called body 
loss generality assume abducible predicates abductive logic program hp ii de ned sequel refer complement set wrt set predicates language set non abducible predicates 
motivating examples number abductive proof procedures de ned :10.1.1.31.9982
section examine behaviour proof procedures referred km fk sldnfa respectively simple abductive logic programs 
analogous considerations apply remaining proof procedures 
note km sldnfa employ denial integrity constraints special atom false head assume integrity constraints ln false rewritten ln false 
literal false implicitly conjoined initial goal sldnfa 
