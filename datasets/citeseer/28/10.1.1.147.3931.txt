code compression jens ernst william evans christopher fraser steven lucco todd proebsting university arizona university arizona microsoft research microsoft university arizona current research compiler optimization counts mainly cpu time cache level 
view important myopic system wide viewpoint ratio network disk speeds cpu speeds grows exponentially 
example seen cpu idle time paging compressing pages increase total performance cpu decompress interpret page contents 
profile shows functions called just reduced paging pay interpretation overhead 
describes measurements show code compression save space total time important real world scenarios 
compressed executable representation roughly size programs interpreted decompression 
compiled high quality machine code megabytes second mhz pentium processor compressed wire representation decompressed execution example roughly size sparc code compressing gee 
jens todd cs ona edu dept computer science gould simpson building tucson az 
microsoft com redmond wa 
permission digital hard copy part personal classroom granted fee provided copies distributed profit commercial advan tage copyright notice title publication date appear notice copying permission acm copy republish post servers 
redistribute lists requires prior specific permission fee pldi las vegas nv usa acm computer programs delivered cpu networks disks caches bottlenecks 
important scenarios significantly faster send compressed code interpreted decompressed executed 
fact self evident delivering code modems true faster networks paging disk cache misses decompressor fast 
consider important bottlenecks transmission memory 
transmission bottleneck want best possible compression afford expand compressed program executing 
call codes wire codes wire bottleneck 
memory bottleneck code seldom code stored interpreted compressed form 
code includes jumps calls need random access basic blocks 
code compiled run fast jit just time compilation rate high 
transmission memory bottlenecks may sense decompress wire code compressed interpretable form 
literature general purpose data compression bell offers techniques 
tasks mainly find combinations techniques suit specialized problem compressing virtual machine vm code determine generate compact automata accurately predict vm operator operand current context tokens common current context shortest encodings 
concerns vm code techniques clearly apply machine specific code 
describes code compressors best scenarios 
compressors quite different gather information common patterns appear code divide stream code smaller streams holding operators holding literal operands operator class related operators needs literal operand 
compressors wire vm code yields programs fifth size sparc code 
interpretable vm code called byte coded risc roughly larger wire format size programs 
interpret code typical time penalty cutting working set size 
alternately compile megabytes second producing machine code times faster example commercial jit compilers known 
high compilation rate permits recompile program execution clients local disk cache 
delivery time network disk mask recompilation time code runs speed fully optimized machine code generated microsoft visual 
trim memory requirements large desktop applications compress programs fit memory requirements embedded systems 
codes support client side server side compilation 
server side compilation necessary efficiently deliver large application programs 
example existing jit compilers allocate registers client expensive best results super linear length input program 
performing code optimization program downloaded mobile code system dramatically reduce time necessary generate machine code client 
design space single code compressor suits applications 
design space solution space related methods 
trade offs involve addressing issues listed 
compress byte codes arithmetic coding witten 
extreme byte codes easiest interpret directly branches naturally target byte boundaries 
nibble huffman codes decoded addressed analogously units bit bit fields decoding overhead higher 
extreme arithmetic codes compress better coding sequences longer individual symbols complicate direct interpretation 
arithmetic codes expanded interpretation successfully decompressing function time 
compressed representation include dictionary 
dictionaries allow compressor emit series dictionary indices dictionary transmitted 
dictionaries static computed exactly reused subject programs 
semi static computed subject program program 
dynamic updated compressor decompressor advance subject program 
dictionary coder move front mtf indexing bentley elias 
technique starts replacing sequence elements indices table changes dynamically 
table elements ordered element accessed element new access accessed element moved front intermediate elements shifted place 
sequence high spatial locality tends yield sequence small indices compress 
mtf coders act bit caching hardware probably interaction register intermediate codes registers regarded kind cache 
compressor partition input separate streams 
operators operands benefit different compression schemes finer partitionings possible 
programs important class streams separated input proebsting fraser proebsting 
accepts actual program proposes specialized instructions help compress program 
patterns replace combination operands wildcards 
example code tree generates patterns regard patterns specialized instructions 
example degenerate pattern specialized fetch value local frame offset 
burned specialized pattern 
middle pattern takes arbitrary offset pattern gets address cell fetch popping stack 
push result stack 
coder finite context markov modeling uses symbols predict symbol precisely 
order markov model uses symbols predict 
degenerate order model may frequencies context 
original representation influence effectiveness compression techniques 
particular input vm registers stack 
vm resemble conventional target machine stack machine 
stack machines register numbers compress register machines permit compiler front invest say global register allocation produce code typically faster smaller 
applications accept sub optimal performance exist applications demand ambitious optimization 
wire code term wire codes need interpreted directly partly decompressed interpretable form compiled 
example simply gzip file intermediate object code result wire format code 
gzip typically compresses code factor 
yu yu described ways tune general purpose data compressors software distribution 
compressor outputs average bits input character factor 
franz reports similar compressions slim binaries load time code generation franz kistler franz numbers easily compared compresses full executables compress code segments 
wire format code achieves factor 
tried lot techniques best date happens simple compile trees vm code literals form stream patterns containing literal operands associated opcode class related opcodes ike code stream gzip resulting streams isolation 
demonstrate 
compile input program trees 
example compile code int int cj return icc trees addrlp addrlp ll lei addrlp ol addrlp addrlp addrlp addrlp ll addrlp full description icc ir appears fraser hanson important discussion 
suffices note code stack square brackets enclose literal operands base intermediate code augmented operators suffixes flag literals fit sixteen bits 

form stream holding nested operator patterns type operator takes literal operand 
example operator stream sample addrlp addrlp lei addrlp addrlp addrlp addrlp addrlp addrlp stream 
apply move front coding stream isolation 
example mtf coding transforms stream table zero denotes symbol seen previously 

huffman code mtf indices mtf tables 

gzip produce final fully compressed version original program 
applying gzip ail mtf streams tables encoded byte values strings symbolic names appropriate 
instance unique instance particular tree encoded sequence bytes operator emitted prefix order 
char literals encoded individual bytes short literals pairs table compares size conventional sparc code segments wire code 
conventional code uncompressed wire code icc gee wep wire format improves significantly conventional encodings dividing input size beats version significantly small loss smallest input 
compilations done icc source wire byte codes 
compiler ambitious optimizer probably conventional code smaller probably likewise byte codes adapted emit 
interpretable code wire format achieves unprecedented levels code density organizing semantically similar instruction components separately compressed streams 
method exploits insight byte stream word stream compression techniques lempel ziv lempel ziv ziv lempel correlation sub byte sub word quantities instructions 
quantities include opcodes various types operands 
example lz compression inefficiently code simple instruction semantics call instruction follows move instruction bits bytes represent opcodes intermixed bits bytes semantics destination register move wire format semantics available lz compression grouping opcodes various types operands separate streams 
strategy uses lz compression requires linear decompression 
applications just time machine code generation working set reduction direct interpretation compressed code require randomly addressable compact program representation 
section describe simple techniques operand specialization opcode combination yield dense randomly addressable program representation called 
techniques exploit stream separation insight tree compression method 
physically separating streams instruction information operand specialization opcode combination quantize representation streams packing randomly accessible stream discrete byte codes 
conclude section presenting analyzing measurements virtual machine environment 
measurements demonstrate supports just intime code generation mb sec yielding code density competitive best packaged lz compression programs 
system called includes compiler converts high level language programs sequences instructions virtual machine lucco pldi 
risc instruction set augmented macro instructions common operations moving initializing blocks data 
section describe input differs icc intermediate representation experiments related 
brief automatically code generation time synthesize risc instructions icc ir interconvertible respect compression 
programs measured section highly optimized commercial compiler back contain information register allocation decisions cc ir 
system compresses fully linked executable programs containing risc instructions programs containing instructions 
server ships network client computers contain implementation 
interprets instructions directly converts native machine code 
system works platforms including nr powerpc macos 
measurements section performed pentium processor running nt 
processor configured megabytes memory 
generation require interpretable constrain design ensure instructions occur byte boundaries 
split stream compression techniques described bits opcode bits opcode 
increased size opcodes packs information opcode 
operand specialization opcode combination 
operand specialization briefly described operand specialization background section burning particular value fields instruction 
return subject describing operand specialization concretely terms system 
consider instruction id iw sp effect instruction load bit word address sp register 
iw suffix instruction indicates bit integer version instruction 
turns particular instruction frequently occurring instruction benchmark programs 
investigate possible specializations instruction set patterns ordered general 
ld iw sp 
ld iw sp 
ld iw 
ld iw sp 
ld iw 
ld iw 
ld iw 
ld iw general instruction pattern part base instruction set 
write base instructions form place asterisks field positions instruction indicate base instruction pattern take legal field value field position 
example writing base integer register move instruction mov 
indicates instruction fields take value legal field type 
case mov instruction fields take value integer registers 
id iw sp frequently occurring input instruction occurring benchmarks sense add dictionary possible instruction patterns specialized forms instruction 
doing avoid explicitly representing common operands 
compression algorithm describe performs operand specialization field time 
example compressor encounters specific instruction input scan generates instruction patterns candidate dictionary entries 
arrive operand specialized instruction pattern id iw compressor add ld iw ld iw dictionary 
modify input program reflect presence new instruction pattern 
subsequent pass input program compressor add dictionary specialized version instruction pattern incorporation field 
denote input instruction converted instruction pattern write instruction pattern square brackets followed list literal values substituted unspecified fields denoted asterisks instruction pattern 
example derived instruction pattern input instruction re write input instruction ld iw sp 
opcode combination compressor generates candidate instruction patterns opcode combination 
system adjacent pair opcodes candidate opcode combination 
example input program contains sequence instructions ld iw sp mov instruction pattern id mov 
candidate addition base instruction set 
denote angle brackets instruction patterns resulting opcode combination 
quantized instruction combinations sense 
combined instruction pattern leaves trailing sub byte operand compressor defer combination specialization taken place combined unspecified operands adjacent instructions pack neatly number bytes 
compressor generates candidate instruction patterns pair adjacent instructions possible pair consisting zero field operand specialization followed zero field operand specialization ensures operand specialization won compete opcode combination specializing instruction combiner chance consider specialized version 
opcode combination captures common code generation idioms 
example data movement instructions id iw mov 
frequently occur set parameters call instructions 
results quantized version tree construction shown previous section 
generation algorithm compressor begins base instruction set currently instruction patterns adds create dictionary frequently occurring instruction patterns 
find useful instructions add dictionary compressor scans input program times generating candidate instruction patterns estimating program size reduction cost decompressor memory usage abbreviates working set 
program size reduction equals reduction compressed program bytes occur candidate instruction pattern added dictionary minus number bytes needed represent instruction pattern dictionary 
decompressor uses table native instruction sequences interpretation native code generation 
compressor estimates decompressor memory usage cost dictionary entry averaging size bytes decompression table instruction sequences pentium powerpc chips 
benefit instruction pattern equals course abundant memory situations set equal 
compressor maintains heap candidate instructions sorted pass input program compressor removes best candidates heap adds dictionary 
compressor modifies input program reflect newly available instruction patterns 
considers pair instructions combined new opcode combined instruction pattern 
pass new instruction pattern applies particular pair 
performs instruction combination compressor modifies instructions input program represented compactly new instruction patterns 
avoid undue overhead updating input program compressor maintains table maps base instruction pattern list input program instructions matching pattern 
similarly avoid generating candidate instruction patterns generated compressor maintains hash table previously generated candidates keyed base instruction patterns specialized field values 
compressor ceases hunt useful patterns pass doesn yield patterns positive 
compressor uses greedy algorithm building dictionary 
optimal algorithm consider possible dictionaries effect compression prohibitively time consuming 
perform dictionary encoding compressor uses order semi static markov model opcodes fit bits 
words compressor builds decompressor build dictionary table possible instruction pattern enumerates instruction patterns follow input 
instructions follow compressor splits instruction patterns 
example dictionary program implementing icc contains instruction patterns 
instruction pattern instruction patterns follow 
special context markov model basic block beginnings various types program remains interpretable 
compressor created dictionary outputs dictionary followed modified input program compressed dictionary construction 
compression example compiler generates sequence instructions example program introduced wire format discussion 
enter sp sp sp ra sp nl nl call add re oad sp re oad ra sp exit sp sp ra input program initial dictionary set enter spill mov ble call add reload exit program small affords little opportunity useful instruction combination specialization 
illustrate steps compression 
consider just instructions program 
applying operand specialization instructions generates candidate specializations pass algorithm 
enter sp enter sp enter 
spill spill sp 
spill ra spill note candidate specialization instruction sp generated applying operand specialization instruction 
instruction set candidate instructions generated operand specialization called instruction operand specialized set 
add corresponding base instruction pattern operand specialized set input instruction construct augmented set candidate instruction patterns apply opcode combination instructions generate pairs instruction patterns formed selecting element instruction augmented operand specialized set candidates element instruction augmented operand specialized set candidates enter sp spill enter sp spill enter sp spill sp enter sp spill total set candidate instruction patterns generated instructions example program candidates generated opcode combination candidates generated opcode specialization 
total set base instruction patterns total number candidates generated large program remains manageable 
example total number candidates tested compressing gee 
final dictionary gcc contains instruction patterns including base instruction patterns 
illustrate operation cost benefit metric apply candidate instructions enter sp file size cost dictionary entry enter sp bytes byte indicate base instruction enter bits indicate field specialized bits set specialized value field 
working set cost dictionary entry enter sp 
dominated sequence native instructions generated decompressor generate code instruction 
just time conversion pentium instructions instruction space required bytes powerpc instruction space required bytes 
averaging yields enter sp instruction pattern saves byte original input program 
input instruction enter sp sp represented bytes bytes remaining field values sp compacted single operand byte 
program size reduction byte saved minus bytes dictionary entry 
benefit add instruction pattern dictionary 
code generation interpretation table cost candidate instructions suitable program remains 
large input contrast benefits operand specialization opcode combination outweigh table costs 
illustrate applied dictionary generated compressing gee example program 
resulting compressed program listed 
enter sp sp spill sp spill ra sp mov mov nl ble mov nl mov call sl sub lt epi instruction spans lines 
angle brackets indicate opcode combination 
recall instruction contains unspecified fields denoted asterisks followed colon list literal values insert order unspecified fields 
suffix indicates immediate values multiplied 
final instruction sequence epi special case 
semantics exit current function restoring callee saved registers restoring frame returning normal fashion instruction 
epi instruction sor 
dictionary entries generated operand specialization opcode combination 
total number bytes original input 
compressed program totals bytes bytes instruction opcodes bytes packed literals 
compression ratio better average benchmark programs function prologue epilogue greater proportion example benchmark programs 
results table gives executable program sizes benchmark programs 
code sizes relative pentium chip executable programs produced microsoft visual size visual output program normalized 
table shows competitive gzip code size 
addition table gives just time native code generation speed program megabytes second produced pentium code 
shows runtime program relative native pentium code produced microsoft visual 
runtimes programs include time necessary generate native code 
table shows runtime program interpreted relative pentium code produced microsoft visual 
runtime numbers microsoft word average metrics automatic document formatting time issue slate magazine page time slate cold boot time program nt disk cache 
compression word somewhat effective benchmark programs 
due unusually large number bit operations word 
results demonstrate code compression algorithm yields programs highly suitable mobile code 
require network bandwidth native code generate native code programs megabytes second pentium mhz processor megabytes memory 
local area network mobile program representation choice 
modem tree compression algorithm better minimizing latency program requested program begins performing client machine 
reducing risc machines useful risc designs reduced rarely minimal 
addressing modes immediate instructions redundant simulated simpler forms load store indirect load immediates 
abbreviations hardware implementations faster value machines clear 
amounts limited ad hoc code compression having forms say integer additions explicit hidden register displacement addresses hurt code compressor helps 
machine harder implement ran experiments try answer question 
wrote back icc progressively de tuned removing immediate instructions primitive load immediates addressing modes primitives store indirect 
compiled icc de tuned compilers compressed results methods section 
results machine variant risc minus immediates minus register displacement minus compressed size native size results suggest minimal machine compresses nearly typical ad hoc features making programs smaller 
acknowledgments todd proebsting supported part ibm 
foundation 
nsf ccr ccr arpa 
john miller gideon yuval microsoft research provided helpful background suggestions 
bibliography timothy bell john cleary ian witten 
text compression 
prentice hall 
jon louis bentley daniel sleator robert tarjan victor wei 
locally adaptive data compression scheme 
communications acm 
peter elias 
interval recency rank source coding line adaptive variable length schemes 
ieee transactions information theory 
franz kistler 
slim binaries 
tr dept information computer science university california irvine 
www ics uci edt oberon research html appear communications acm 
franz 
adaptive compression syntax trees iterative dynamic code optimization basic technologies systems 
tr dept information computer science university california irvine 
christopher fraser david hanson 
compiler design implementation 
addison wesley longman 
christopher fraser todd proebsting 
custom instruction sets code compression 
cs arizona edu odd 
kistler franz 
tree alternative java bytecodes tr dept information computer science university california irvine 
lempel ziv 
complexity finite sequences 
ieee transactions information theory lt 
ali reza adl tabatabai geoff steven lucco robert wahbe 
efficient language independent mobile programs 
pl di 
todd proebsting 
optimizing ansi interpreter superoperators 
ian witten radford neal john cleary 
arithmetic coding data compression 
communications acm 
tong ai yu 
data compression pc software distribution 
practice experience 
ziv lempel 
compression individual sequences variable rate coding 
ieee transactions information theory 

