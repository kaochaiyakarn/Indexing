placing robot manipulator obstacles optimized execution david hsu jean claude latombe stephen computer science department stanford university stanford ca latombe cs stanford edu appeared proc 
ieee international symposium assembly task planning pp 
presents efficient algorithm optimizing base location robot manipulator environment cluttered obstacles order execute specified tasks fast possible 
algorithm uses randomized motion planning techniques exploits geometric coherence configuration space achieve fast computation 
performance algorithm demonstrated synthetic examples real life cad data automotive industry 
computation time ranges minute simple problems minutes complex ones 
furthermore robot placed enable efficient task execution 
previous problem usually considers second criterion systems take account obstacles environment time partly planning collision free path robot degrees freedom dof difficult problem 
robot manipulators share space part various devices avoid collision motion see scene 
believe essential consider impact obstacles placement robot manipulators 
algorithm computes collision free path initial base location randomized path planner described :10.1.1.31.2802
planner chosen efficiently plan path dof robot complex environment 
randomized path planners pre compute roadmap configuration space samples parts relevant current task 
path computed planner obtain locally optimal path 
iteratively move base better locations 
section summarizes results points direction research 
related planning path robot obstacles classic problem robotics 
best complete planner planner finds path exists reports exists takes time exponential number degrees freedom robot 
decade practical planners developed dof robots 
particularly interesting development random sampling path planning :10.1.1.56.9474
randomized path planners capable solving path planning problems dof robots complex environments 
satisfy property called probabilistic completeness probability path planner fails find path exist decreases exponentially running time 
problem closely related path planning finding shortest path environment obstacles 
research computational geometry yielded efficient algorithms environments various metrics pp 
building blocks robot placement algorithm iteratively searches best base location described subsection 
algorithms represent obstacles explicitly 
collision checker determines configuration free 
check path collision free discretize sequence configurations regard path free configurations free 
problems may arise discretization fine eliminated making distance information returned collision checker :10.1.1.31.2802
subsections look algorithm sub algorithms detail 
searching optimal placement principle path planning algorithm search base location brute force way 
candidate base location simply call path planner get path optimize 
expensive computationally due repeated invocation path planner 
sample random neighborhood init retain configurations connected init straight line path 
continue sampling neighborhoods configurations retained 
procedure repeated goal periodically check straight line path configuration path connected init configuration path connect goal path init goal 
simple algorithm capable solving complex path planning problems cluttered environments minutes 
details algorithm implementation issues :10.1.1.31.2802
note manipulator multiple ik solutions easily extend planner considering multiple init goal reasonable geometric conditions configuration space planner probabilistically complete 
optimizing path specific choice path optimization algorithm depends robot cost measure 
fit algorithm path optimization fast done candidate base location 
straightforward method path optimization start initial path fl sample large number free configurations neighborhood fl find best path going configurations local minimum iteratively 
ieee int 
conf 
robotics automation pp 

hsu :10.1.1.31.2802
latombe motwani 
path planning expansive configuration spaces 
proc 
ieee int 
