information agents move survey load balancing mobile agents michael schroeder department computing city university london ec hb uk city ac uk april information agents process integrate heterogeneous distributed information 
achieve task ciently researchers promote idea mobile information agents migrate user host hosts network 
outline concepts mobile information agents give survey load balancing aims optimise distributed information processing 
contents information agents 
mobile agents 
load balancing mobile agents state load balancing 
systems implemented 
basically distributed computing infrastructure sockets message passing libraries distributed object computing platforms corba rmi rpcs 
able distribute load system dynamically mobile agents useful 
mobile agents mobile agents objects comprising data code migrate host 
historically carried process migration distributed object computing :10.1.1.103.9804
combination areas migrate distributed objects rst coined 
spread java researchers widely interested object mobility 
java crucial development mobile agents designed architecture independent programming language provides requirements implement object mobility standard feature 
java remote method invocation rmi simple mobile objects 
aim load balancing strategy adapt utilisation performance machines available requirements agents 
operating systems researchers investigated load balancing optimised mobility 
section survey load balancing mobility agent systems 
distinguish systems criteria static vs mobile tasks assigned hosts stay migrate turns stage advantageous leave machine system middleware lb mo ma ft si pvm pvm corba corba appl 
spawn rpc java appl :10.1.1.17.605

ocean java sockets mats voyager flash voyager traveler rmi agents :10.1.1.134.4780
challenger java explanation lb load balancing state model ma market mechanism mo type mobility weak strong wan support possible learning security ft fault tolerance self organisation native code support resource accounting si simulation model state vs model load balancing load balanced current snapshot system state expensive obtain model predicts system state may inaccurate 
survey summarised provides additional information middleware underlying systems mechanisms security fault tolerance implemented top middleware provisions 
section survey load balancing mobility agent systems 
distinguish systems criteria static vs mobile tasks assigned hosts stay migrate turns stage advantageous leave machine system middleware lb mo ma ft si pvm pvm corba corba appl 
spawn rpc java appl :10.1.1.17.605

ocean java sockets mats voyager flash voyager traveler rmi agents :10.1.1.134.4780
challenger java explanation lb load balancing state model ma market mechanism mo type mobility weak strong wan support possible learning security ft fault tolerance self organisation native code support resource accounting si simulation model state vs model load balancing load balanced current snapshot system state expensive obtain model predicts system state may inaccurate 
survey summarised provides additional information middleware underlying systems mechanisms security fault tolerance implemented top middleware provisions 
state load balancing state load balancing information system state decide host start task 
quality approach depends amount state data available 
systems price match ers bids employ sophisticated auction protocols 
auctions resource consumers bid resources auction style employed 
advantage auctions market mechanism allow determine unknown resource value group agents 
agreement comes price communication needed determine 
spawn rst system employs market strategies :10.1.1.17.605
provides market infrastructure coarse grained parallelism applets 
auction mechanisms evaluated simulation testbed vickrey auction sealed bid double auction repeated double auction 
main goal maximise gains trade 
authors aim compare social ciency price stability role reservation prices 
environment dynamic may advantageous agent migrate 
achieved mobile objects see mobile rmi objects described 
mobile agents active threads decide independently move add degree exibility scheduling handled locally 
having central scheduler decide tasks execute tasks agents decide locally global pattern load balancing emerging 
exist number systems mobile agent infrastructure :10.1.1.134.4780
systems traveler mats flash speci cally autonomous mobile agents roaming net search best host 
autonomous mobile agents traveler allows clients wrap parallel applications mobile agents dispatched resource broker 
broker forms parallel virtual machine atop available servers execute agents 
hosts asking broker capacities systems lets autonomous agents roam net nd servers run 
flash system agent maintains information system passes nodes keep information locally residing mobile agents 
mobile agents migrate cluster searching free resources 
system combines application system information load management 
able react ciently dynamic background load avoids unnecessary migration agents short life span 
market approach system provides market resource control mobile agents :10.1.1.134.4780
agents platform allows strong mobility agents 
allocate resources agents system uses electronic cash banking system set resource managers 
xed pricing dynamic pricing policies resources 
authors focus sealed bid second price auction mechanism dynamic pricing 
asynchronous computing requires limited form mobility host may dis connect leisure server guaranteed stay online permanently 
nally asynchronous computing easily implemented distributed object systems default request reply protocol client send request poll result server pushing client 
corba deferred synchronous request available standard feature 
third reason mobility load balancing 
mobile processes investigated load balancing operating systems :10.1.1.103.9804
similarly number agent systems mobility load balancing 
put general context compared agent systems static mobile load balancing state model 
state approaches balance load current system state expensive obtain 
systems model load balancing widely di cult de ne maintain accurate model workload system 
proceedings sixth international conference intelligent systems molecular biology montreal 
bayardo fowler helal kashyap ksiezyk martin nodine rashid rusinkiewicz unruh woelk 
infosleuth agent semantic integration information open dynamic environments 
acm sigmod pages 
kotz rus :10.1.1.134.4780
market resource control mobile agents 
proc 
second international conference autonomous agents aa usa may 
acm press 
acm press 
jim waldo 
mobile code distributed computing agents 
ieee intelligent systems 
waldspurger hogg huberman kephart :10.1.1.17.605
spawn distributed computational economy 
transactions software engineering february 
gio wiederhold michael genesereth 
basis mediation 
