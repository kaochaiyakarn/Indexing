analysis denial service attack tcp christoph ivan markus kuhn eugene spafford sundaram diego zamboni coast laboratory department computer sciences purdue university department computer sciences west lafayette kuhn sundaram zamboni cs purdue edu analyzes network denial service attack ip internet protocol networks 
popularly called syn flooding 
works attacker sending tcp transmission control protocol connection requests spoofed source addresses victim machine 
request causes targeted host instantiate data structures limited pool resources 
target host resources exhausted incoming tcp connections established denying legitimate access 
contributes detailed analysis syn flooding attack discussion existing proposed countermeasures 
furthermore introduce new solution approach explain design evaluate performance 
approach offers protection syn flooding hosts connected local area network independent operating system networking stack implementation 
highly portable configurable extensible requires special hardware modifications routers protected systems 

september dozen sites internet subjected denial service attack popularly called syn flooding 
attack exploits weaknesses tcp ip transmission control protocol internet protocol protocol suite 
corrected significant modifications protocols 
denial service attacks launched little effort 
presently difficult trace attack back originator 
possible solutions attack proposed implemented 
developed active monitoring tool classifies ip source addresses high probability falsified genuine 
approach finds connection establishment protocol messages coming forged ip addresses takes actions ensure resulting illegitimate half open connections reset immediately 
organized follows 
section describes background material ip tcp protocols 
section explains syn flooding attack 
section discusses existing approaches solve problem configuration improvements firewall approaches 
technical details approach described section followed performance evaluation section 
sections outline issues 

background provide brief description features tcp ip protocol suite facilitate attack 
details see 

internet protocol internet protocol ip standard network layer protocol internet provides unreliable connection best effort packet delivery service 
ip defines basic unit data transfer ip network called datagram 
service unreliable delivery datagrams guaranteed 
datagrams may lost duplicated delayed delivered order 
ip connection packet treated independently may travel different paths may lost delivered 
ip provides best effort delivery packets discarded resources exhausted underlying networks fail 
datagrams routed destination 
set rules characterize hosts gateways process packets error messages generated packets discarded 
syn syn ack listen syn 
transmission control protocol ack ensure reliable communications applications services need transmission control protocol tcp available 
resides ip application layer 
tcp provides reliable connection oriented data stream delivery service 
long link layer communication communicating endpoints tcp guarantees datagrams delivered order errors duplication 
provides services flow control mechanisms sliding window protocol adaptive retransmission techniques 
way handshake attacker source destination monitor gateway 
generic network topology data transmitted source host destination host tcp needs establish connection see 
connection establishment process called way handshake see 
step process syn packet sent second message syn ack flags set indicating acknowledges syn continuing handshake 
third message ack bit set indication hosts agree connection established 
third message may contain user payload data 
way handshake initializes sequence numbers new connection sequence numbers needed tcp protocol enable reliable tcp packet types distinguished flag bits synchronize acknowledgment reset set tcp header code field 
remainder abbreviate tcp control packets referring flags set code field syn tcp control datagram syn bit set code field 

way handshake connected packet delivery retransmission 
sends initial sequence number datagram syn second message acknowledges datagram ack sends sequence number syn acknowledges packet final message handshake ack tcp data structures tcp connection bsd style network code memory structures need allocated endpoints see 
socket structure socket holds information related local communication link protocol state information addressing information connection queues buffers flags 
tcp uses internet protocol control block structure transport layer hold information tcp state information ip address information port numbers ip header prototype options pointer routing table entry destination address 
tcp control block structure contains tcp specific information timer information sequence number information flow control status band data 
combined size data structures single tcp connection may typically exceed bytes 
different versions unix different data structures schemes allocation purpose discussion sufficient understand tcp connection establishment requires allocation significant memory resources 
tcp connection establishment syn arrives port tcp server listening mentioned data structures allocated 
limit number concurrent tcp connections half open connection state called operating system backlog backlog grace freebsd linux solaris solaris sunos windows nts windows table 
operating systems syn state syn received see appendix 
enforcing limit lead different denial service attack attacker request connections target machine memory completely exhausted allocating data structures half open tcp connections 
maximum number half open connections port reached see table tcp discards new incoming connection requests cleared completed half open connections 
system resources usually sufficient ports flooded 
tcp connection establishment process described state machine 
detailed happens point view destination machine server 
packet arrives destination machine tcp state machine listen state 

datagram checksum incorrect packet discarded client expected retransmit 

associated connection searched 
server discard packet send rst inform client reset connection 
exists tcp state machine listen state server discard packet send rst example case server just coming started listening 

syn packet arrives socket listen state mentioned data structures allocated 
server set flag indicating destroy connection associated memory structures encounters error 
backlog queue full server consider error terminate connection 

packet ignored contains rst 
contains ack discarded rst sent side 
packet discarded syn bit set 
server copies information client address information buffer connects client initializes initial send sequence iss number 
server sends second message way handshake syn ack client 
state changes syn 
connection establishment timer started connection 
connection remains syn state ack third message handshake received timer expires 
timer usually set seconds 
period time retransmissions second message way handshake may occur 
timer expires memory structures associated connection deallocated server goes back listen state 

syn flooding attack 
attack mentioned tcp implementations designed small limit half open connections port possible time 
attacker initiates syn flooding attack sending connection requests spoofed source addresses victim machine causes allocate resources explained section limit half open connections reached refuse successive connection establishment attempts particular legitimate attempts see 
important note outgoing connection attempts connections established affected attack 
nonexistent spoofed syn syn ack port flooding occurs 
system attack listen syn condition exists timer expires connections completed reset 
timer ex particular half open connection host reset connection release resources allocated 
spoofed syn packet contains source address reachable ip host host receive second message way handshake generated expecting syn ack having requested connection send rst packet consequently cause reset connection 
interest attacker forge source addresses belong hosts reachable victim attacker wants denial service condition longer timeout period needs continuously keep requesting new connections victim machine 
amount cpu network bandwidth required attacker sustained attack negligible 
basis attack tcp ip offer strong authentication control packets 
furthermore requirement inappropriately burdensome allocation memory computation resources target side 

different attack modes typical syn flooding attacks vary parameters number syn packets source address sent batch batch size delay successive batches delay mode source address allocation mode 
consider source addresses hosts reachable addresses allocated assigned associated hosts slow response virtually physically disconnected 
classify possible modes source address allocation attacker single address short list addresses list single address attack scripts published hacker magazines phrack take parameter single spoofed address source address syn packets 
absence defense mode attack effective modes described 
short list attacker generate small pool addresses source addresses generate syn packets 
list attacker different randomly generated source address successive batch syn packets 
list single address mode separately represents important special case list addresses mode 

solutions opinion solution characteristics independence operating system network stack implementation protected systems requirement ip tcp protocol modifications capability protect sets machines single machine special hardware requirements portability extensibility configurability countermeasures described section proposed date 
proposals provides characteristics looking 

configuration optimization ways reducing likelihood effects attack involve changes configurations systems routers 
system configuration improvements defend exhaustion resources systems attack obvious approach increase number resources devoted half open tcp connections reduce timeouts 
measures suggested different sources summarized 
reduce timeout period default short time seconds 
helps pruning connections tcp queue 

significantly increase length backlog queue default see table 
system able cope simultaneous half open connections 

disable non essential services reducing number ports attacked 
measures help dealing attacks severe shortcomings 
lowering timeouts may deny legitimate access machines round trip times exceed timeout period 

increasing backlog leads potential increase resource usage 
vendor recommends upgrading systems minimum mb ram allow cope attacks 
router configuration improvements measures proposed reactions attacks sources attempt difficult packets spoofed source addresses traverse routers 
solutions proposed summarized follows 
configure external interfaces routers block packets source addresses internal network 

configure internal router interfaces block packets outside source addresses outside internal network 
limits ability launch syn flooding attack network attacker able generate packets internal addresses 
measures effective taken large scale 
internet service providers isps configure routers appropriately fertile ground launching syn flooding attacks may reduced 
noted mobile ip situations created legitimate addresses appear apparently wrong interface particular mobile node retains ip identity far away home 

infrastructure improvements router configurations improved address spaces reachable various interfaces disjoint defined 
case routers attach organization local isp backbone network 
address prefixes separate inside outside 
example scheme deployed international telephone system 
phone number assignment geographical location system 
currently practical problems approach general routers large backbone networks complex topology clear distinction inbound outbound traffic 
packets routed backbones current link availability load take numerous possible paths network 
genuine packets source address reach backbone router legitimately various interfaces 
long significant number sites transmit packets backbone networks source address checking hosts subject untraceable attacks 
additional backbone mechanisms implemented cope large number network attacks 
implementation deployment scheme cryptographically sign ip source addresses packets allow tracing physical transmission path ip packet source 
wouldn prevent syn flooding threat tracing subsequent serve deterrent casual attacks 
case online tracing mechanisms especially useful successful syn flooding attack requires sustained network activity 
internet infrastructure lacks basic mechanisms successfully telephone networks long time 

connection establishment improvements solution addresses fact tcp imposes asymmetric memory computation requirements endpoints connection establishment process 
destination host needs allocate large data structures response syn packet guarantee authenticity 
way handshake requires sequence number match second third message protect accidentally old connections unauthorized access see 
destination needs store iss sending second message receiving third message able regenerate time third message way handshake received 
mechanism regenerate destination didn store host establish connection sending third message 
mechanism calculate cryptographic hash value source destination ip addresses ports source iss destination specific secret key 
calculate manner syn ack message 
time received third message way handshake recalculate secret key sequence number addresses ports message 
matches ack connection legitimate 
note solution provides protection sequence number prediction statistical properties hash functions 
approach prevents syn flooding attack considerable drawbacks 
solution requires modification tcp standard consequently tcp implementation 
impossible provide fault tolerance tcp currently offers destination keeping state half open connection 
furthermore mechanism impossible source include data third message way hand shake needs part hash function argument 
tcp sequence numbers technique introduces small probability old single forged packet open connection 
section discusses extension approach 
syn firewall 
firewall approach syn ack sites connected internet somewhat protected firewalls sense try firewalls protect syn flooding 
firewall vendors products available increase protection attacks solutions proposed 
firewall protection approaches idea packet destined host inside firewall examined firewall decisions authenticity actions taken protect internal hosts 
effective apart normal blocking done firewall specialized mechanism put place deal syn flooding 
drawbacks approach delays packet additional processing 
firewall product capable adding functionality module protect syn flooding 
main approaches described 
firewall relay approach packet internal host received firewall answers behalf 
way handshake successfully completed firewall contact host establish second connection 

case attack see firewall answers syn sent attacker 
final ack arrives firewall terminates connection host receives datagram 
mode protection effective firewall vulnerable syn flooding 

case legitimate connection firewall receives final ack creates new connection internal host behalf original client 
protected machines vulnerable new degradation service attack described section 
connection established firewall keep acting proxy translate sequence numbers packets flow client server 
method drawback introducing new delays legitimate connections 
delays introduced extra 
attack scenario relay firewall protection processing done firewall connection establishment time data packet 
obvious advantage destination host receives spoofed syn packets 
alternative approach firewall predict sequence number going host see section allow firewall intervene manner establishing connection need translating sequence numbers data packet 
firewall semi transparent gateway approach firewall lets syn ack packets go monitors traffic reacts 
call semi transparent gateway approach 
firewall passes syn packets destined internal hosts 
host responds syn ack packet firewall forwards reacts generating sending ack packet come client 
effect moving connection backlog queue host freeing resources allocated half open connection 

case attack see host sends syn ack gateway lets pass generates sends ack moves connection backlog queue 
firewall received legitimate ack arguably short period time send rst packet terminating connection 

case legitimate connection firewall generates sends ack packet 
legitimate ack packet arrives firewall lets pass duplicate ack packet arrives host 
tcp designed cope duplicate packets duplicate packet silently discarded 
data flow freely directions firewall intervention 
firewall firewall syn syn syn ack syn ack ack syn syn ack timeout ack data ack rst data data data sequence number conversion 
legitimate connection protection main advantage approach previous delays introduced legitimate connections established 
price pay large number illegitimate open connections destination attack 
limit number open connections higher systems order thousands limited cpu memory resources available host extra load server class systems withstand problems 
approach requires timeout period carefully selected deny access legitimate hosts long response times 
active monitoring category solutions consists software agents continuously monitor tcp ip traffic network place 
agent collect communication control information generate view connections observed monitored network 
furthermore watch certain conditions arise react appropriately 
category offers general approach detecting reacting large class network attempts breach security 
approach attractive low costs high flexibility 
requires new hardware pur 
attack semi transparent gateway firewall protection chased installed certain firewall router product desired functionality demand software modifications protected systems 
typical multiple access local area networks tool reactive character capability blocking offensive traffic firewall 
time writing know publicly available tool claimed perform active monitoring tool called synkill 
parameters program monitors local network syn packets acknowledged certain period time frees allocated resources sending matching rst packets 
tool called synkill falls category explained section 
active monitor synkill developed software tool lessen impact syn flooding attacks cases defeat attacks completely 
provides characteristics described section 

description program requires ability monitor inject network traffic machines protecting 
ethernet example networking technology satisfies requirement 
program called monitor reads examines tcp packets lan setting network interface promiscuous mode 
program called active generate tcp packets response observed traffic inject firewall syn syn syn ack ack ack syn ack rst data data 
legitimate connection gateway firewall protection network 
sections refer algorithm implementation synkill 
algorithm synkill algorithm classifies source ip addresses tcp packets seen null belonging correctly behaving hosts potentially spoofed addresses new certainly spoofed addresses bad 
classification observed network traffic administratively supplied input 
addresses administratively configured bad called perfect evil 
synkill performs processing steps tcp packet observed local area network handles asynchronous events administrative input timer expirations 
tcp packet processing divided address prefiltering program classifies observed address impossible unassigned administratively configured perfect evil see section decision process state machine determine correct state membership actions see section 
program take possible actions synkill sends rst packets observes connection establishment attempts impossible bad evil ip addresses networks see figures 
purpose action release 
attack scenario synkill generates rst packet response bad evil ip source addresses 
connection immediately moved closed state resources released 
resources allocated destination machine connection establishments 
synkill completes tcp connections generating third message way handshake sending destination see figures 
purpose action move connection quickly syn con nected state 
useful synkill considers connection establishment attempt illegitimate 
approach similar semi transparent gateway solution described section potentially subject new degradation service attack described 
execution action optional 
operation addition address classification synkill performs processing steps 
process administrative input asynchronously handle expiry events asynchronously handle staleness events asynchronously send rst impossible addresses net send ack complete observed syn ack connections send rst evil addresses nets see ack rst ack rst syn ack rst null syn record ack rst bad syn send rst staleness record expiry ack rst new syn record syn send rst perfect syn ack rst evil 
synkill finite state machine 
diagram contain optional action sending ack packets 
syn syn ack expiry ack listen syn connected dress database considered state null 
depicts state machine 
symbol denotes timestamp address updated 
timestamps generate timer events see 
record denotes datagram information ip addresses ports sequence numbers recorded rst generated necessary 
distinct sets events observed tcp packets timer events administrative commands rst 
observed tcp packets closed 
attack scenario synkill sends ack packet complete connection 
expiry passed synkill generates rst 
state machine preprocessing steps taken synkill operates state machine see 
source address tcp packet examined determine set membership address null new bad 
null addresses saved explicitly practical keep data structures possible ip addresses 
ad syn tcp packets syn bit set initial message tcp connection establishment attempt 
state machine designed ignore syns addresses new perfect states 
addresses bad evil states rst packet generated sent 
packet received address syn bit set moved new state indicate suspicion 
soon valid tcp traffic address observed ack rst address moved state 
ack rst synkill receives valid ack rst packets address means host generates valid packets address considered 
address moved state 
syn syn listen syn ack ack syn ack expiry ack rst syn connected ack ack rst closed late 
normal access scenario synkill generates sends ack packet complete pending connection 
duplicate ack original source reaches ignored 

timer events expiry expiry event occurs timer associated address new state expires 
means synkill observed valid tcp traffic address 
address moved bad state rst packets generated sent syn packets address observed address new state 
ideally expiry timer smaller current seconds timeout 
smaller chosen value legitimate connections erroneously denied synkill 
sent syn observed destination machine respond syn ack trigger third message way handshake 
third message ack cause synkill observed address 
subsequent connection establishment attempts succeed 
staleness notion staleness introduced mechanism allow addresses state leave state tcp traffic observed address period time staleness period 
allows synkill correctly classify spoofed ip addresses bad long 
normal access scenario connection delay valid source machine destination large 
synkill generate rst early expiry timer value chosen carefully 
stale 
implemented explicit timer events timestamp address examined time address processed 

implementation implemented algorithm programming language tcl tk graphical user interface 
program execute foreground daemon 
output redirected syslog 
currently program classification database grow entries garbage collects database entries database filled certain watermark 
utilizes packet capture library lawrence berkeley national laboratory high level interface packet capture systems packets monitored network accessible highly portable manner 
rich set administrative commands manipulate address classification database display statistics modify configuration synkill 
refer manual page details 

discussion philosophy approach build tool detect conditions syn flooding attack react appropriately defeat lessen impact attack 
synkill requires special hardware particular firewall products certain certain operating systems network stacks modifications protected systems 
software highly portable extensible easily configurable 
testbed successfully protected set hosts wide variety vendors operating systems attack 
section details operational characteristics synkill application 
furthermore active monitor approach allows replication software improve reliability performance decentralized distributed action 

performance synkill 
experimental evaluation performance synkill application evaluated configuration illustrated 
attacker performs syn flooding attack machine synkill application runs machine protecting hosts local area network 
host evaluates accessibility way starts processes attempt establish connections target computer simultaneously 
processes performs sequential attempts random delay zero seconds 
machines utilized evaluation environment sun sparc ultra workstations mb ram running solaris 
metrics considered performance tests success rates average delays 
success defined connection attempt succeeds regardless delay incurred 
success rate determined dividing number successful connections number connections tried time interval 
delay defined time required establish successful connection delays computed successful connections 
time intervals measures determined measuring total time taken test case dividing number 
successful connection completion connection closed immediately 
typical tcp connections exhibit behavior 
interested determining connection establishments succeed attack 
simulate maximum contention performed connection establishment attempts single port server 
simulates scenario hosts perform average tcp connection establishment attempt seconds 
means accessed server service requests minute order magnitude authors departmental web server 
test defense attack configuration mode delay 
size single addr 
synkill single addr 
synkill single addr 
synkill addrs 
synkill list table 
summary test cases performance evaluation synkill 
explored evaluation space test cases evaluate performance synkill program 
test cases summarized table 
terms mode delay batch size explained section 
characterize instances syn attacks 

evaluation results 
process growth attack case 
test cases included points 
test executes evaluation scripts syn flooding attack 
second test runs evaluation scripts attack defenses 
figures show success rates average delays test cases 
second test case attacker sends batches spoofed syn packets delay seconds batches 
note areas marked 
test case connection establishment success rates average delays normal operation attack 
letter correspond small window opportunity evaluation program attacked machine releases set blocked ports 
delay case indicates average successes tcp retry attempt 
area marked letter shows attack stopped connections succeed large delay 
test cases synkill protects target machine single address syn flooding attack different delays batch sizes 
cases similar performance results observed 
synkill learns spoofed address classifies bad releases half open connections address soon observed 
legitimate connections succeed small delays observed 
test case evaluates access machine syn flooding attack list spoofed addresses batches batch size delay second 
shows success rates average delays test case 
note noticeable effect attack machine protected synkill small increase delay experienced connection establishment 
load increase attacked machine responsible delay 
test case consists evaluating performance synkill attack spoofed addresses repeated 
attack script sends batches syn packets delay second new address batch 
sense worst case scenario synkill utilize learned knowledge bad addresses reset connections bad addresses spoofed source addresses 
measurements test case displayed 
observed considerable delays failures connection establishment attempts 
happened attacked machine ran swap space empty process table entries handle incoming connections 
attack load attacked machine increased dramatically point processes waiting attention ready queue 
observations suggest better performance synkill expected host configuration optimizations discussed section conjunction synkill 
mb ram mb swap space test machine quickly reached point inetd processes started handle artificially completed connections 
amount memory disk space resist continuous creation inetd processes handle attack type 
maximum number processes created particular attack assuming time synkill waits timeout new ip address seconds number roughly 
shown second new syn packets appear trigger creation inetd processes 
seconds ip addresses batch time appropriate rst packets generated 
release processes just time batch syn packets 
typical syn attacks low packet rates part attractiveness attack comes fact small number packets minute little sufficient successful denial service attack 
shown synkill approach effective defense syn packet rates close syn packets 
test case connection establishment success rates average delays temporarily attack active defense synkill 

test case connection establishment success rates average delays 
minute roughly second spoofed addresses repeated 
higher volumes result denial service similar opening telnet connections attractiveness syn attack diminished gone 

improvements section describes improvements synkill tool effective improved syn flooding attacks 

connection state tracking currently possible attacker teach synkill addresses fact spoofed spoofing ack rst packets 
exploited teach synkill spoofed address address syn flooding attack 
synkill artificially completes connection avoiding port flooding attacker may able start large number server processes target machine 
leads degradation service attack described section 
synkill respond improved attack keeping state observed tcp connections lan 
successful syn flooding attacker hard sequence number prediction attacks 
fur 
test case connection establishment success rates average delays 

test case connection establishment success rates average delays 
thermore approach facilitate detection classes network attacks see 

multiple network monitoring currently synkill implemented monitor single network interface 
may desirable allow tool monitor network interfaces simultaneously allowing sharing acquired address classification database 

attack interval source address prediction basic idea approach protect attacks timing random number generator artifacts attack scripts generic attack method 
analysis syn flooding attack software showed delays successive syn packets batch successive batches constant 
timing behavior observed targeted hosts spoofed packets travel route internetwork stable internetwork little jitter introduced 
synkill software measure inter arrival times statistical models predict arrival time spoofed syn packet 
syn packets fit predicted arrival times considered spoofed immediately reset 
obvious response attacker vary delay successive syn packets 
similarly random numbers published exploitation routines generated cryptographically weak standard library routines 
follow 
test case connection establishment success rates average delays 
cryptographic practices described 
implement number algorithms automatically detect predict pseudo random number sequences generated simple common generators predicted pseudorandom ip addresses identify malicious packets quickly 
obvious countermeasure side attacker attack implementations artifacts 

trusted address space ranges source address filtering mechanisms discussed sections widely implemented limited ip address space available spoofed source addresses 
synkill incorporate information secured address space ranges automatically include address preprocessing steps 

described analyzed network denial service attack called syn flooding 
contributed detailed analysis attack description discussion existing proposed countermeasures 
furthermore introduced new solution approach explained design evaluated performance 
design philosophy active anomaly detection tool detect conditions syn flooding attack react appropriately defeat lessen impact attack 
synkill requires special hardware particular firewall products certain operating systems network stacks modifications protected systems 
software highly portable extensible easily configurable 
evaluation tool shows synkill capable effectively protecting machines lan wide range attack configurations 
lessons learned study applied protection denial service attacks 
acknowledgments gustavo rodriguez rivera help design garbage collector members security seminar department computer sciences purdue university fruitful technical discussions 
suggestions anonymous referees helped improve presentation 
cisco systems defining strategies protect tcp syn denial service attacks september 
comer 
internetworking tcp ip 
prentice hall englewood cliffs new jersey third edition 
computer emergency response team cert carnegie mellon university pittsburgh pa ip spoofing attacks hijacked terminal connections jan 
ca 
computer emergency response team cert carnegie mellon university pittsburgh pa tcp syn flooding ip spoofing attacks sept 
ca 

hackers strike internet access 
washington post sep 
daemon route infinity 
project neptune 
phrack magazine 
crocker schiller 
rfc randomness recommendations security 
network working group dec 

flood warning 
summer 
ferguson 
network ingress filtering 
internet draft cisco systems september 
garfinkel spafford 
practical unix internet security 
associates sebastopol ca second edition 
graff 
sun security bulletin 
mountain view ca oct 
internet security systems 
realsecure user guide manual 
available iss net realsecure 
knuth 
art computer programming volume 
addison wesley publishing second edition 
laboratories 
livermore software labs 
announces defense syn flooding attacks october 
tcp syn flooding attack firewall october 
postel 
rfc internet protocol 
information science institute university southern california ca sept 
postel editor 
rfc transmission datagram protocol 
information sciences institute usc ca sept 
rekhter moskowitz de groot 
rfc address allocation private internets 
network working group mar 
stevens wright 
tcp ip illustrated volume implementation 
prentice hall englewood cliffs new jersey 
ziegler 
savvy hacker tangles web net host 
wall street journal sep 
tcp state machine depicts tcp state machine courtesy douglas comer 

tcp finite state machine 
