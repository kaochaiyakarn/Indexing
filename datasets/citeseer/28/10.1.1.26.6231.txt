multi context systems engineer executable agents august area agent computing proposals specific system architectures number proposals general approaches building agents 
attempts relate fewer attempts provide methodologies relate designs architectures executable agents 
provides attempt address shortcoming propose general method defining architectures logic agents directly executed 
approach multi context systems illustrate example architecture capable argumentation negotiation 
agent computing fast emerging new paradigm engineering complex distributed systems :10.1.1.25.322:10.1.1.63.7631
important aspect trend agent architectures means delivering agent functionality cf 
provides attempt address shortcoming propose general method defining architectures logic agents directly executed 
approach multi context systems illustrate example architecture capable argumentation negotiation 
agent computing fast emerging new paradigm engineering complex distributed systems :10.1.1.25.322:10.1.1.63.7631
important aspect trend agent architectures means delivering agent functionality cf 
agent programming languages :10.1.1.57.3255
context architecture viewed separation concerns identifies main functions ultimately give rise agent behaviour defines interdependencies exist 
agent architectures widely demand unambiguous specifications architectures increases greater need verify implementations architectures 
range techniques formally specify agent architectures concurrent metatem desire :10.1.1.26.1679
techniques typically fall short ways enforce particular view architecture specification ii offer explicit structures modelling components architecture relationships iii leave gap specification architecture implementation 
important aspect trend agent architectures means delivering agent functionality cf 
agent programming languages :10.1.1.57.3255
context architecture viewed separation concerns identifies main functions ultimately give rise agent behaviour defines interdependencies exist 
agent architectures widely demand unambiguous specifications architectures increases greater need verify implementations architectures 
range techniques formally specify agent architectures concurrent metatem desire :10.1.1.26.1679
techniques typically fall short ways enforce particular view architecture specification ii offer explicit structures modelling components architecture relationships iii leave gap specification architecture implementation 
rectify shortcomings proposed systems means specifying implementing agent architectures :10.1.1.36.2807:10.1.1.16.1418
multi context systems provide overarching framework allows distinct theoretical components defined interrelated 
systems consist set contexts informally considered logic set formulae written logic set rules transferring information contexts 
context architecture viewed separation concerns identifies main functions ultimately give rise agent behaviour defines interdependencies exist 
agent architectures widely demand unambiguous specifications architectures increases greater need verify implementations architectures 
range techniques formally specify agent architectures concurrent metatem desire :10.1.1.26.1679
techniques typically fall short ways enforce particular view architecture specification ii offer explicit structures modelling components architecture relationships iii leave gap specification architecture implementation 
rectify shortcomings proposed systems means specifying implementing agent architectures :10.1.1.36.2807:10.1.1.16.1418
multi context systems provide overarching framework allows distinct theoretical components defined interrelated 
systems consist set contexts informally considered logic set formulae written logic set rules transferring information contexts 
different contexts represent different components architecture interactions components specified means bridge rules contexts 
believe multi context systems suited specifying modelling agent architectures main types reason software engineering perspective support modular decomposition encapsulation ii logical modelling perspective provide efficient means specifying executing complex logics 
extension software engineering advantages specifically applies logical systems 
breaking logical description agent set contexts holds set related formulae effectively get form sorted logic formulae context single sort concomitant advantages scalability efficiency 
second advantage follows 
multi context systems possible build agents different logics way keeps logics neatly separated formulae logic gathered context possible increase representational power logical agents compared single logic simplify agents conceptually compared logics global context 
advantage illustrated multi context systems simplify construction bdi agent :10.1.1.36.2807
advantages apply logical agent built systems 
remaining advantages apply specific types logical agent reason beliefs agents 
multi context systems possible build agents reason way conforms modal logics kd standard modal logic handling belief obviates difficulties usually inherent theorem proving logics :10.1.1.16.1418
illustrated :10.1.1.36.2807
multi context systems possible build agents different logics way keeps logics neatly separated formulae logic gathered context possible increase representational power logical agents compared single logic simplify agents conceptually compared logics global context 
advantage illustrated multi context systems simplify construction bdi agent :10.1.1.36.2807
advantages apply logical agent built systems 
remaining advantages apply specific types logical agent reason beliefs agents 
multi context systems possible build agents reason way conforms modal logics kd standard modal logic handling belief obviates difficulties usually inherent theorem proving logics :10.1.1.16.1418
illustrated :10.1.1.36.2807
multi context systems easy directly execute agent specifications specifications deal modal notions 
final advantage related 
agents reason beliefs confronted problem modelling beliefs agents hard especially agents reason beliefs different way instance different logic 
advantage illustrated multi context systems simplify construction bdi agent :10.1.1.36.2807
advantages apply logical agent built systems 
remaining advantages apply specific types logical agent reason beliefs agents 
multi context systems possible build agents reason way conforms modal logics kd standard modal logic handling belief obviates difficulties usually inherent theorem proving logics :10.1.1.16.1418
illustrated :10.1.1.36.2807
multi context systems easy directly execute agent specifications specifications deal modal notions 
final advantage related 
agents reason beliefs confronted problem modelling beliefs agents hard especially agents reason beliefs different way instance different logic 
multi context systems provide neat solution problem :10.1.1.54.4654:10.1.1.23.6723
illustrated :10.1.1.36.2807
multi context systems easy directly execute agent specifications specifications deal modal notions 
final advantage related 
agents reason beliefs confronted problem modelling beliefs agents hard especially agents reason beliefs different way instance different logic 
multi context systems provide neat solution problem :10.1.1.54.4654:10.1.1.23.6723
software engineering logical modelling perspectives combined seen multi context approach offers clear path specification implementation 
providing clear set mappings concept design design implementation multi context approach offers way tackling gap gulf 
currently exists theory practice agent systems 
extends suggestion refining approach extending representation providing additional support building complex agents :10.1.1.36.2807
multi context systems provide neat solution problem :10.1.1.54.4654:10.1.1.23.6723
software engineering logical modelling perspectives combined seen multi context approach offers clear path specification implementation 
providing clear set mappings concept design design implementation multi context approach offers way tackling gap gulf 
currently exists theory practice agent systems 
extends suggestion refining approach extending representation providing additional support building complex agents :10.1.1.36.2807
multi context agents discussed believe multi context systems offers number advantages engineering agent architectures 
multi context systems 
believe appropriate building agents logic largely deliberative formal model multi context approach agent architecture consists components ffl units structural entities representing main components architecture :10.1.1.16.1418
ffl logics declarative languages set axioms number rules inference 
currently exists theory practice agent systems 
extends suggestion refining approach extending representation providing additional support building complex agents :10.1.1.36.2807
multi context agents discussed believe multi context systems offers number advantages engineering agent architectures 
multi context systems 
believe appropriate building agents logic largely deliberative formal model multi context approach agent architecture consists components ffl units structural entities representing main components architecture :10.1.1.16.1418
ffl logics declarative languages set axioms number rules inference 
unit single logic associated 
ffl theories sets formulae written logic associated unit 
ffl bridge rules rules inference relate formulae different units 
ffl bridge rules rules inference relate formulae different units 
units represent various components architecture 
contain bulk agent problem solving knowledge knowledge encoded specific theory unit encapsulates 
general nature units vary architectures 
example bdi agent may units represent theories beliefs desires intentions architecture functional separation concerns may units encode theories cooperation situation assessment plan execution :10.1.1.36.2807
case unit suitable logic associated 
belief unit bdi agent logic belief associated intention unit logic intention 
logic associated unit provides language information unit encoded rules inference provide mechanism information transferred units 
bridge rules understood rules inference premises different units 
case unit suitable logic associated 
belief unit bdi agent logic belief associated intention unit logic intention 
logic associated unit provides language information unit encoded rules inference provide mechanism information transferred units 
bridge rules understood rules inference premises different units 
instance see discussion relative merits logic non logic approaches specifying building agent architectures :10.1.1.119.2204
means formula may deduced unit formulae deduced units respectively 
execution model elements model units bridge rules concurrently 
execution unit non terminating deductive process 
bridge rules continuously examine theories units appear premises new sets formulae match 
particular enables represent situations silence period time may mean failure case bridge rules re establish previous state 
extensions standard multi context system incur cost 
including model means model departs somewhat order predicate calculus semantics 
currently looking linear logic individual propositions proof means giving semantics consuming conditions 
modular agents units bridge rules structural elements cumbersome building complex agents seen model developed :10.1.1.36.2807
complexity agent increases rapidly difficult deal necessary number units interconnections bridge rules 
adding new capabilities agent complex task 
solve problem suggest adding level abstraction model module 
introducing modules module set units bridge rules model particular capability facet agent 
shows mbrs rectangles middle diagram single premise module single modules mbrs send messages module single message answer contradictory information may appear 
possible ways dealing problem consider just example 
associate weight message 
value assigned message communication unit module sends 
weights belong maximum importance minimum meaning strength opinion message resolve contradictory messages :10.1.1.54.4654
instance message highest weight preferred different weights incoming messages combined communication unit receiving take final decision instance belief revision mechanism described :10.1.1.1.6298
note weights inter module messages 
formalising modules set agent names set mn module names message form ffl illocutionary particle specifies kind message 
ffl form self self refers agent owns module mn denotes modules agent 
possible ways dealing problem consider just example 
associate weight message 
value assigned message communication unit module sends 
weights belong maximum importance minimum meaning strength opinion message resolve contradictory messages :10.1.1.54.4654
instance message highest weight preferred different weights incoming messages combined communication unit receiving take final decision instance belief revision mechanism described :10.1.1.1.6298
note weights inter module messages 
formalising modules set agent names set mn module names message form ffl illocutionary particle specifies kind message 
ffl form self self refers agent owns module mn denotes modules agent 
reflects sending message indicates directed 
ffl form self self refers agent owns module mn denotes modules agent 
reflects sending message indicates directed 
ffl content message 
ffl set grounds set formulae justify 
form ff gamma gamma gg gamma form fl fl fl formula formula bnf syntax means followed occurrences words exactly set grounds argument :10.1.1.36.2807
agent need able justify statements component message discarded 
note argued gabbay approach generalisation classical logic approach messages just formulae classical logic 
ffl weight associated message :10.1.1.54.4654
see works practice consider 
ffl set grounds set formulae justify 
form ff gamma gamma gg gamma form fl fl fl formula formula bnf syntax means followed occurrences words exactly set grounds argument :10.1.1.36.2807
agent need able justify statements component message discarded 
note argued gabbay approach generalisation classical logic approach messages just formulae classical logic 
ffl weight associated message :10.1.1.54.4654
see works practice consider 
suppose agent named modules 
module sends message ask self self give nail means module agent asking modules give nail 
reason doing weight puts request 
combined weight higher weight positive literal communication unit module accept opinion give nail 
messages discussed far passed agent order exchange information modules compose 
approach admits common idea messages agents 
inter agent messages basic form minor differences ffl agent names modules specified 
ffl degree importance internal particular agent inter agent messages augmented degree belief weight relevant intra agent messages :10.1.1.1.6298
machinery place position specify realistic agent architectures 
home improving agents illustrate power approach advocated section details agent architecture designed built modular multi context approach 
architecture enables agents negotiate argumentation techniques 
particular scenario consider home improvement agents 
asks planner module plans achieve agent goals monitors execution 
ffl social manager sm module monitors agent exchanges agents 
channel agent environment agents 
generally speaking module tries help agent acquaintances satisfying requests possible takes account agent goals preferences 
module manages agent social relations keeping track agents reliable ones request :10.1.1.1.6298
ffl resource manager rm module keeps track agent resources knowledge resources acquaintances 
instance agent look plan subject restriction particular resource 
ffl module re module finds arguments proposition agent perspective 
ffl module um module examines grounds argument find incorrect assumptions beliefs agent perspective 

bridge rules id consume fired allocated screw fg removed ar answer self rm self sm give screw fg added 
multicast bridge rule distributes message rm 
similar descriptions modules agents may 
complete specification directly executed broadly speaking considering unit concurrent theorem prover bridge rules rules inference connecting theorem provers implementation possible described :10.1.1.18.3821
related main strands related executable agent architectures multi context systems 
mentioned previous produced formal models agent architectures example dmars agent grate failed carry forward clarity specification implementation leap faith required :10.1.1.36.6876
hand maintains clear link specification implementation direct execution specification exemplified running example 
relation direct execution distinguishes modelling agents possible directly execute specification directly related desire concurrent metatem :10.1.1.26.1679
multicast bridge rule distributes message rm 
similar descriptions modules agents may 
complete specification directly executed broadly speaking considering unit concurrent theorem prover bridge rules rules inference connecting theorem provers implementation possible described :10.1.1.18.3821
related main strands related executable agent architectures multi context systems 
mentioned previous produced formal models agent architectures example dmars agent grate failed carry forward clarity specification implementation leap faith required :10.1.1.36.6876
hand maintains clear link specification implementation direct execution specification exemplified running example 
relation direct execution distinguishes modelling agents possible directly execute specification directly related desire concurrent metatem :10.1.1.26.1679
desire modelling framework originally conceived means specifying complex knowledge systems 
desire views individual agents system compositional architecture 
complete specification directly executed broadly speaking considering unit concurrent theorem prover bridge rules rules inference connecting theorem provers implementation possible described :10.1.1.18.3821
related main strands related executable agent architectures multi context systems 
mentioned previous produced formal models agent architectures example dmars agent grate failed carry forward clarity specification implementation leap faith required :10.1.1.36.6876
hand maintains clear link specification implementation direct execution specification exemplified running example 
relation direct execution distinguishes modelling agents possible directly execute specification directly related desire concurrent metatem :10.1.1.26.1679
desire modelling framework originally conceived means specifying complex knowledge systems 
desire views individual agents system compositional architecture 
functionality designed series interacting task hierarchically structured components 
differences point view proposal advocated see desire tasks modules information links bridge rules 
exemplar uses essentially order logic albeit order logic labelled arguments logic choose restricted temporal logic metatem 
differences previous multi context systems model agents beliefs 
different units containing belief predicate represent beliefs agent beliefs acquaintances agent 
nested beliefs agents may lead tree structures units called belief contexts 
structures solve problems wise men :10.1.1.23.6723
case nested beliefs typically included single unit module 
provide comprehensive formalisation autonomous agent additionally show capabilities reasoning beliefs incorporated architecture 
respect extends idea modules links approach strongly software engineering tradition :10.1.1.36.2807
proposed general approach defining agent architectures 
nested beliefs agents may lead tree structures units called belief contexts 
structures solve problems wise men :10.1.1.23.6723
case nested beliefs typically included single unit module 
provide comprehensive formalisation autonomous agent additionally show capabilities reasoning beliefs incorporated architecture 
respect extends idea modules links approach strongly software engineering tradition :10.1.1.36.2807
proposed general approach defining agent architectures 
provides means structuring logical specifications agents way directly executable 
approach number ad 
firstly bridges gap specification agents programs implement specifications 
addison wesley uk 
brazier dunin keplicz jennings treur 
formal specification multi agent systems 
proceedings st international conference multi agent systems pages 
cimatti serafini :10.1.1.23.6723
multi agent reasoning belief contexts approach case study 
wooldridge jennings editors intelligent agents pages 
springer verlag berlin 
inverno kinny luck wooldridge :10.1.1.26.1679
cimatti serafini :10.1.1.23.6723
multi agent reasoning belief contexts approach case study 
wooldridge jennings editors intelligent agents pages 
springer verlag berlin 
inverno kinny luck wooldridge :10.1.1.26.1679
formal specification dmars 
singh rao wooldridge editors intelligent agents iv pages 
springer verlag berlin 
dubois prade 
oxford university press oxford uk 
giunchiglia 
contextual reasoning 
proceedings ijcai workshop knowledge context 
giunchiglia serafini :10.1.1.16.1418
multilanguage hierarchical logics modal logics 
artificial intelligence 
ingrand georgeff rao 
architecture realtime reasoning system control 
artificial intelligence 
ingrand georgeff rao 
architecture realtime reasoning system control 
ieee expert 
jennings :10.1.1.36.6876
controlling cooperative problem solving industrial multi agent systems joint intentions 
artificial intelligence 
jennings 
agent computing promise 
noriega sierra 
layered agents 
muller wooldridge jennings editors intelligent agents iii pages berlin 
springer verlag 
parsons :10.1.1.1.6298
approach degrees belief bdi agents 
yager zadeh editors information uncertainty fusion 
kluwer dordrecht 
parsons jennings 
kluwer dordrecht 
parsons jennings 
negotiation argumentation preliminary report 
proceedings international conference multi agent systems pages 
parsons sierra jennings :10.1.1.36.2807
agents reason negotiate arguing 
journal logic computation 
sierra parsons jennings 
case study engineering executable agents 
springer verlag berlin 
wooldridge 
agent software engineering 
iee proceedings software engineering 
wooldridge jennings :10.1.1.119.2204
intelligent agents theory practice 
knowledge engineering review 
contains description messages depicted table 
note 
