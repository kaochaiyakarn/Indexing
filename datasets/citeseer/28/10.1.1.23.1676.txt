learning stochastic logic programs stephen muggleton department computer science university york york yo dd united kingdom 
stochastic logic programs slps shown generalisation hidden markov models hmms stochastic context free grammars directed bayes nets 
stochastic logic program consists set labelled clauses interval rst order range restricted de nite clause 
summarises syntax distributional semantics proof techniques slps discusses standard inductive logic programming ilp system progol modi ed support learning slps 
resulting system nds slp uniform probability labels de nition near maximal bayes posterior probability alters probability labels increase posterior probability 
stage implemented di ers previous versions progol allowing user de ned evaluation functions written prolog 
system demonstrated worked examples involving learning probability distributions sequences learning simple forms uncertain knowledge 
representations uncertain knowledge divided procedural descriptions sampling distributions 
stochastic grammars young hidden markov models hmms declarative representations uncertain statements 
probabilistic logics fagin halpern relational bayes nets 
stochastic logic programs slps muggleton introduced originally way lifting stochastic grammars type representations level rst order logic programs lps :10.1.1.23.1676:10.1.1.31.1630
showed slps represent undirected bayes nets type representations 
slps presently muggleton de ne distributions sampling inductive logic programming ilp muggleton :10.1.1.31.1630
copyright american association arti cial intelligence www aaai org 
rights reserved 
stochastic grammars young hidden markov models hmms declarative representations uncertain statements 
probabilistic logics fagin halpern relational bayes nets 
stochastic logic programs slps muggleton introduced originally way lifting stochastic grammars type representations level rst order logic programs lps :10.1.1.23.1676:10.1.1.31.1630
showed slps represent undirected bayes nets type representations 
slps presently muggleton de ne distributions sampling inductive logic programming ilp muggleton :10.1.1.31.1630
copyright american association arti cial intelligence www aaai org 
rights reserved 
previous papers describing slps concentrated procedural sampling interpretation 
rst summarises semantics proof techniques slps 
organised follows 
section introduces standard de nitions lps 
syntax semantics proof techniques slps section incomplete slps shown multiple consistent distributional models 
section introduces framework learning slps discusses issues involved construction underlying lp estimation probability labels 
overview ilp system progol muggleton section section describes mechanism allows ned evaluation functions progol derives user de ned function learning slps :10.1.1.31.1630
worked examples learning slps section section concludes discusses 
lps summarises standard syntax semantics proof techniques lps see lloyd 
syntax lps variable denoted upper case letter followed lower case letters digits 
predicate function symbols denoted lower case letter followed lower case letters digits 
parameter estimation 
vary labels increase posterior probability respect progol implement search stage 
stage implemented algorithm assigns label clause laplace corrected relative frequency involved proofs positive examples limitations strategy strategy sub optimal ways implementation stage approximate involves greedy clause clause construction slps implementation stage optimal case positive example unique derivation 
overview progol ilp systems take lps representing background knowledge examples attempt nd simplest consistent hypothesis holds 
section brie describes mode directed inverse entailment approach progol muggleton :10.1.1.31.1630
equation equivalent 
assuming ground conjunction ground literals true models 
true model contain subset ground literals 

set negative literals determined mode declarations statements concerning input output nature predicate arguments types user de ned restrictions depths variable chains 
progol uses covering algorithm repeatedly chooses example forms associated clause searches clause maximises information compression bounded sub lattice 
hypothesised clause added clause base examples covered removed 
algorithm terminates examples covered 
original version progol muggleton search clause involves maximising compression function number positive negative examples covered number literals minimum number additional literals required complete input output variable chains computed considering variable chains :10.1.1.31.1630
versions progol function reduce degree search 
function estimates global compression expected nal hypothesised set clauses extrapolated local coverage size properties clause construction 
hypothesised clause pruned speci re nements exists previously evaluated clause acceptable solution covers noise threshold negative examples input output variable chains complete associated associated user de ned evaluation progol user de ned evaluation functions progol implemented allowing rede nition prolog equation 
shows convention names progol built user de ned functions variables 
pointed section method nd optimal solutions 
author views method described rst attempt hard problem 
believed improvements search strategy 
interesting topic research 
author believes learning slps potential interest domains ilp success muggleton :10.1.1.31.1630
domains believed slps advantage lps producing predictions attached degrees certainty 
case multiple predictions probability labels allow relative ranking 
particular importance natural language domains general application bioinformatics muggleton :10.1.1.31.1630
author wray buntine david page furukawa james discussions topic stochastic logic programming 
interesting topic research 
author believes learning slps potential interest domains ilp success muggleton :10.1.1.31.1630
domains believed slps advantage lps producing predictions attached degrees certainty 
case multiple predictions probability labels allow relative ranking 
particular importance natural language domains general application bioinformatics muggleton :10.1.1.31.1630
author wray buntine david page furukawa james discussions topic stochastic logic programming 
due wife daughter clare support happiness give supported partly esprit project project epsrc closed loop machine learning epsrc protein structure prediction development benchmarking machine learning algorithms epsrc machine learning natural language computational logic framework 

loglinear models rst order probabilistic reasoning 
