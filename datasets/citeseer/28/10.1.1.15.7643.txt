schemas integration translation structured semi structured data beeri tova milo hebrew university beeri cs ac il tel aviv university milo math tau ac il web emerging universal data repository offering access sources data organization varies strictly structured databases completely unstructured pages 
consequently research focused data integration data translation systems goals allow applications utilize data sources possibly widely varying formats :10.1.1.122.4181:10.1.1.48.8190
research efforts established common data model semistructured data uniformly representing data source 
realized having common schema model beneficial necessary translation integration systems support tasks query formulation decomposition optimization declarative specification data translation 
example motivation suggested tools data translation semistructured data model common middleware data model data sources mapped :10.1.1.45.8410:10.1.1.122.4181
translation source target formats achieved importing data source middleware model translating middleware representation better fits target structure exporting translated data target system 
schema correspondence translation data target structure component translated type 
data exported target supported israeli ministry science academy arts sciences idea fact implemented translation system architecture functionalities described 
elaborate theoretical foundations middleware schema model 
model informally sketched properties investigated 
refer system motivation results relevant translation systems yat applications semi structured data data integration :10.1.1.45.8410
main contribution presentation schema definition languages expressive flexible investigation properties expressive power complexity significant decision problems context data translation integration 
schema languages considerably expressive schematic constraints semi structured data providing combination expressibility tractability :10.1.1.15.9610:10.1.1.165.6422
contribution extension data model support order data supported common semistructured data model data schema level 
closest model yat supporting order expressive schema language lacking features described :10.1.1.45.8410
elaborate theoretical foundations middleware schema model 
model informally sketched properties investigated 
refer system motivation results relevant translation systems yat applications semi structured data data integration :10.1.1.45.8410
main contribution presentation schema definition languages expressive flexible investigation properties expressive power complexity significant decision problems context data translation integration 
schema languages considerably expressive schematic constraints semi structured data providing combination expressibility tractability :10.1.1.15.9610:10.1.1.165.6422
contribution extension data model support order data supported common semistructured data model data schema level 
closest model yat supporting order expressive schema language lacking features described :10.1.1.45.8410
mention expressiveness complexity results 
comparison section 
refer system motivation results relevant translation systems yat applications semi structured data data integration :10.1.1.45.8410
main contribution presentation schema definition languages expressive flexible investigation properties expressive power complexity significant decision problems context data translation integration 
schema languages considerably expressive schematic constraints semi structured data providing combination expressibility tractability :10.1.1.15.9610:10.1.1.165.6422
contribution extension data model support order data supported common semistructured data model data schema level 
closest model yat supporting order expressive schema language lacking features described :10.1.1.45.8410
mention expressiveness complexity results 
comparison section 
organized follows 
section data model schema specification languages 
schema mixed data 
assume nodes representing web pages ordered reflecting order elements page 
mixed db mixed label dom ord root ref label dom ord ref db article label dom article defined fig 

schema web site containing articles oodb note schema information captured schema graphs graphs nodes represent types edges describe possible children node certain type may :10.1.1.165.6422
argue scmdl powerful express schema constraints expressible schema graphs require node certain outgoing edge schema graphs allows state edge possible :10.1.1.165.6422
deal order constrains don 
proof omitted space reasons 
mentioned fact edge labels node labels prevent meaningful comparison 
assume nodes representing web pages ordered reflecting order elements page 
mixed db mixed label dom ord root ref label dom ord ref db article label dom article defined fig 

schema web site containing articles oodb note schema information captured schema graphs graphs nodes represent types edges describe possible children node certain type may :10.1.1.165.6422
argue scmdl powerful express schema constraints expressible schema graphs require node certain outgoing edge schema graphs allows state edge possible :10.1.1.165.6422
deal order constrains don 
proof omitted space reasons 
mentioned fact edge labels node labels prevent meaningful comparison 
proposition 
proof 
sketch determine possible type assignments node going leaves 
unordered nodes dynamic programming avoid considering possible orders edges 
non tree data handled efficiently cases 
case class schema graphs shown proof proposition simple syntactic characterization scmdl :10.1.1.165.6422
matching type derivation problems class solved polynomial time details omitted :10.1.1.165.6422
consider detail case definition 
say cf scmdl schema tagged type name types lang label predicates disjoint satisfied label value 
schema tagged equivalent cf scmdl schema constructed proof proposition tagged 
sketch determine possible type assignments node going leaves 
unordered nodes dynamic programming avoid considering possible orders edges 
non tree data handled efficiently cases 
case class schema graphs shown proof proposition simple syntactic characterization scmdl :10.1.1.165.6422
matching type derivation problems class solved polynomial time details omitted :10.1.1.165.6422
consider detail case definition 
say cf scmdl schema tagged type name types lang label predicates disjoint satisfied label value 
schema tagged equivalent cf scmdl schema constructed proof proposition tagged 
observe relational object oriented databases general strongly typed databases homogeneous bulk types tagged union naturally described tagged real schemas 
example query integration system broken components pushed sources corresponding results translated integrated 
natural issue arises derive schema query result 
facilitate translation retrieved data 
opposite direction query evaluation source benefit schema information prune search 
known idea classical database systems attracting attention systems manipulate heterogeneous semi structured data :10.1.1.15.9610:10.1.1.165.6422
direction derive schema information node variables query restrict search 
query languages semi structured data classical ancestors body head 
body node variables introduced operated predicates related edges paths 
consider component difficult treat deriving schema information generalized path expressions form pn xn variable names regular expressions path variables 
mentioned schematic description semistructured data 
works focus describing patterns paths data precisely describing structure 
example specify edges property going node may exist require occurrence easily done language 
closer classical approaches schemas types 
significant presents comparable approach yat :10.1.1.45.8410
order data schemas nodes ordered natural modeling unordered components sets 
importantly seen schema language essentially uses regular expressions similar scmdl support virtual types 
instantiation mechanism provides notion matching data schema provide explicit type assignment instance nodes formalism 
offers subtyping treat 
