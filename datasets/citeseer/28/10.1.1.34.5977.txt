amdb visual access method development tool shah marcel joseph hellerstein university california 
berkeley marcel cs berkeley edu development process access methods ams database systems complex tedious 
amdb graphical tool facilitates design tuning process height balanced tree structured ams 
central amdb user interface suite graphical views visualize entire search tree paths subtrees tree data contained tree 
views animate search tree operations order visualize behavior access method 
amdb provides metrics characterize performance queries tree structure aspects am implementation 
tool encapsulates knowledge am structures operations exposes am specific higher level interfaces needed 
amdb graphical tool simplifies design verification tuning process height balanced tree structured ams 
amdb comprehensive data type independent development tool ams built generalized search tree gist framework 
gist encapsulates core am functionality page management exposes domainindependent extensible interface implementing search trees 
amdb leverages gist reduces implementation effort encompassing broad class ams :10.1.1.144.2507
amdb provides debugger functionality level basic actions comprise search tree operations 
actions node oriented actions node traversal node split node update designer observe reason larger scale mechanics tree individual lines code gain better understanding am behavior 
furthermore workload tree set queries amdb reports metrics characterize input tree performance terms fundamental performance relevant properties tree cluster ing data items 
metrics broken node query basis 
metrics broken node query basis 
breakdown enumerates sources performance loss 
determining improve am performance involves large collection metrics understanding search tree behavior requires ability navigate 
key challenge building amdb enable navigation search tree facilitate browsing metrics terms tree structure 
techniques proposed representing navigating large hierarchies :10.1.1.20.1530
suited requirements search tree access methods typically short height balanced high fanout 
amdb provides hierarchy visualization tools tightly integrated debugging analysis facilities fulfill unique requirements 
visualizations global view tree view subtree view shown 
linked views represent help user navigate structure contents properties search tree various levels ranging global perspective individual entries node 
user experience initial prototype indicated representation effective high 
obscured parts tree hindering ability grasp tree global structure 
cone tree requires rendering animation support 
current implementation relies simple java toolkit primitives amdb easy port 
hyperbolic browsers focus context technique visualizing hierarchies :10.1.1.20.1530
lay hierarchy hyperbolic plane mapped circular disk 
places root center node density increasing exponentially 
similar global view circular orientation 
change focus performed dragging node interest center 
places root center node density increasing exponentially 
similar global view circular orientation 
change focus performed dragging node interest center 
drawback approach node direct ancestors children brought focus time 
furthermore user study indicated provides weaker sense directionality location space :10.1.1.20.1530
applied search trees tend obscure difference internal leaf nodes critical distinction application 
treemaps represent hierarchies screen real estate 
node assigned section display divided children 
area allocated related property node 
appear vldb sept 
shah hellerstein 
analysis framework access methods 
submitted publication icde 
lamping rao pirolli :10.1.1.20.1530
focus context technique hyperbolic geometry visualizing large hierarchies 
acm sigchi may 
livny ramakrishnan beyer chen 
devise integrated querying visual exploration large datasets 
