critical note experimental research methodology ec eiben rk jelasity department artificial intelligence free university amsterdam de boelelaan hv amsterdam netherlands point essential shortcomings contemporary practice performing documenting experimental research ec 
identify crucial problems limitations practice elaborate research directions pursued improve quality relevance experimental research 
aim deliver contribution improving commonly practiced experimental research methodology evolutionary computing 
main goal initiate discussion means ends experimental ec research 
long term hope discussion result widely accepted practiced sound research methodology supporting research results better founded relevant today 
studying literature clear publications related various aspects subject 
treatment deliberately chose light citation policy order avoid impression annotated bibliography emphasize messages better acknowledging inspiring contributions fellow researchers 
furthermore explicitly state criticism practice applicable 
approach methodology question angles generalizability performance measures reproducibility 
illustration nature problems wish address consider imaginary example representing common practice experimental ec research 
note discussion restricted kind papers 
imaginary proposes new feature eas shows merits new feature experiments 
experimental section structured follows 
testbed functions respectively problem instances specified 

new ea standard ea run functions problem instances 

outcomes experiments reported presenting performance measures graphical table form 
drawn merits new ea arguing newly added feature main contribution improves performance 
problem imaginary represents eiben cs vu nl 
jelasity jelasity cs vu nl univ hungary 
testbed functions problem instances chosen ad hoc manner motivating choices 
instance functions chosen literature implicit suggestion selection criterion functions 

outcomes terms performance measures averages standard deviations measures relating research objectives expectations investigated algorithms 

formulated general new feature improves ea performance 
authors restrict scope claims test functions suggest claims hold functions specifying kind functions 

results hard reproduce details eas explicitly specified source code available 
remainder discuss related problems 
restrict discussion illustrative example adopt general context 
section ii concerns issue generalizability corresponding items previous list 
performance measures statistics considered section iii related item section iv addresses related experimental objectives 
issue reproducibility handled section close summary important issues carrying hints research 
ii 
generalization results essence empirical science generalization generating scientific knowledge empirical data induction 
important methodological issue establish framework process possible 
large part evolutionary computing mainly empirical nature practice fact collection real generalization 
progress decades direction size test suites increased famous de jong functions 
underlying hidden assumption ea performs better test suite ea ea probably better general 
true data gives reliable picture increase number test functions purely quantitative 
probably straightforward idea qualitative improvement divide test functions classes functions class similar functions different classes different 
generalization performed classes state ea works better problem class ea 
clearly find way allows defend kinds statements say simply establishing ea outperforms ea arbitrarily selected functions clarify scope results making explicit 
second item related wide spread skepticism general scope undefined scope claims result partly nfl theorem debate partly growing evidence supporting superiority approaches deploy domain specific algorithmic components representation 
remaining part section elaborates issues raised paragraphs possibilities classification problem instances proper justification inductive claims 
problem classes define optimization problem instance problem finding minimum function called search space phenotype space 
problem class set problem instances common search space 
sake simplicity exclude constrained problems multicriteria problems discussion extended cases 
useful purposes problem class general specific 
general reasonable induction specific able differentiate algorithms algorithm classes 
instances class quite diverse common properties expressible form knowledge 
possibility find specific neighborhood relation reflects structure problem class specific operators optimized problem class special representations 
obviously quite research needed draw borders problem classes meaningful way 
want express caveats careless usage notions 
useless classes unfortunately general practice inappropriate class labels 
mistake terms defined purposes np hardness class scheduling problems 
mistake vocabulary composing classes turn inhomogeneous ea behavior 
discuss features prevent class useful ec research examples class np hardness irrelevant 
class scheduling problems general 
classes defined selection function properties distinguishing eas 
np hardness 
definition np hardness see 
label research literature suggest problem instance hard 
extremely misleading np hardness property problem property problem classes 
furthermore infinite problem class np hard 
think property characterization infinite problem instance size 
useful complexity theory label completely meaningless heuristic optimization 
note notion np complete characterize decision problems optimization problems 
adds mistake 
furthermore consider problem instance problem class np hard problem question easy solve 
label np hard advisable turn theoretical results exist np hard problem classes describing instances really hard 
possible way define meaningful challenging problem classes 
sections ii ii return question 
scheduling problems 
seriously involved solving real life scheduling problems agree thing scheduling problem general 
mathematical definition scheduling problem general turns equivalent resulting np hard class see making induction practically impossible 
claims scheduling algorithm better general questionable 
words main problem class general help meaningful induction 
known semi practical problem illustrate matter graph coloring 
sounds narrow meaningful problem class wellknown specific features graphs colored great impact hardness instances subclasses defined features 
think instance flat graphs graphs 
commonly test suites 
importance composing proper test suites noticed ec 
effort explicitly addressing appropriateness classes test functions resulting commonly features multi modality separability attempts direction indicate vocabulary problem classes definable vocabulary inappropriate 
instance explicitly aimed relating ea behavior problem classes defined traditional lines failed achieving experiments showed significantly different ea behavior classes question 
similar experiences strongly indicate new vocabulary needed capture ec relevant properties test functions 
natural classes classes problem instances emerge specific real life situation call natural class 
instance timetabling university universities country specifies natural problem class 
perception class conforms requirements useful general emerges real situation consists instances 
hand sufficient specificity normally follows particular constraints circumstances typical real life setting 
artificial classes natural classes interesting research field find artificial classes general reasonable induction specific able differentiate algorithms algorithm classes 
list directions motivations research 
find hard easy problem classes specific algorithms 
field years 
finding hard easy royal road problems helps justify existing theories behavior algorithms helps develop new theories 

find classes capture properties natural classes see section ii easier handle experiment easier describe theoretically 
classes help develop test algorithms corresponding natural class 

find classes simply interesting required balance generality specificity able differentiate algorithms 
useful 
case artificial classes shown classes appropriate 
order develop problem instance generator generates instances class question 
demonstrated class relevant appropriate statistical experimental method 
intend prescribe done example show algorithm tuned perform better class statistical evidence 
additional research field aim finding methods recognize instances class kind sample search space 
methods context hard easy problem classes suggested 
way properties natural classes identified terms existing established artificial classes allow selection appropriate optimizers techniques grounded way 
problem instance generators problems subjects intensive study algorithmic community exist random problem instance generators create instances class question 
typically generator needs random seed problem specific parameters set user 
great advantage generator enables systematic study varying parameters algorithm behavior related problem features 
known examples graph coloring sat problems generators available location hard instances known terms parameters generator 
collection generators initiative example experimental theoretical justification usefulness generators desirable extension list 
relationship algorithms problem classes set established problem classes available natural artificial scientific research clarify relationship classes different algorithms 
note established problem classes possible 
outcome research projects diverse 
examples follow ea ea equivalent problem classes problem class best algorithm date ea best problem class algorithm ea claims sense problem classes established research sound experimental methodology statistical methods 
impossible prescribe way doing proper experiments 
give example section ii discuss theoretically oriented possibilities section ii 
learning best algorithm example give scenario doing proper experiments finding best parameter set problem class algorithm 
scenario machine leaning community inductively find optimal models databases knowledge choose number functions problem instances calibrating algorithm training set choose number different functions problem instances evaluating algorithm test set run algorithm functions problem instances training set calibrate tune algorithm run calibrated versions algorithm functions problem instances test set report outcomes experiments test set kind techniques widely machine learning called wrapping 
point evaluation done test set training set common practice ea community 
result application techniques gain reliable indicators algorithm class 
idea generalized cases interested relationship algorithms problem classes 
fitness landscapes theoretical approach possible tools fitness landscape analysis 
mentioned earlier problem instances usually landscapes 
due fact search space usually structure form distance function neighborhood relation 
way problem classes fact fitness landscape classes 
offers level abstraction actual details problem ignored landscape taken account 
situation analogous calculus continuity real functions generalized topological space 
established problem class try characterize terms landscapes 
ea defines landscape applied representation operators miscellaneous features elitism thought transformation landscape 
promising research direction looking successful algorithms problem classes trying reverse engineer way algorithm transforms problem landscape 
results directly applicable practice fitness landscape natural problem class turns belong known landscape class 
apply shelf landscape transformations algorithms appropriate operators representation 
course huge obstacle lack powerful methods characterize landscapes sampling data algorithm trajectories random samples 
meaningful landscape classes recognized methods sufficient reliability 
especially thinking long term solution huge amount data collected landscape advanced algorithms 
iii 
performance measures statistics experimental comparisons evolutionary algorithms discussion foregoing sections assume usage algorithm performance measures 
claims ranking algorithms meant claims ranking performances 
stochastic nature eas number experiments needs conducted gain sufficient experimental data performance measures ec statistics 
section discuss performance measures usage emphasizing usage interpretation results follow goals pursued eas question 
different performance measures problems optimal solution recognized easily define success criterion finding optimal solution 
type problems success rate sr measure defined percentage runs terminating success 
problems optimal solutions recognized sr measure 
general case optimum objective function unknown lower upper bound available 
example think university timetabling problem 
mean best fitness measure mbf defined problem tackled ea ea fitness measure 
run ea best fitness defined fitness best individual termination 
mbf average best fitness values runs 
note sr mbf related different general advice algorithm comparison 
difference measures obvious sr defined meaningful way problems mbf sound measure 
furthermore possible combinations low high sr mbf values occur 
example low sr high mbf possible indicates algorithm gets close consistently seldomly really 
outcome motivate increasing length runs hoping allows algorithm finish search 
opposite combination high sr low mbf possible indicating murphy algorithm goes wrong goes wrong 
runs terminate optimal solution disaster bad best fitness value deteriorating mbf 
clearly second type algorithm behavior preferable depends problem 
mentioned timetabling problem sr measure meaningful interested high mbf 
demonstrate situation think solving sat problem number unsatisfied clauses fitness measure 
case high sr pursued mbf measure formally correct useless number unsatisfied clauses termination says general little close ea got solution 
notice particular application objectives coming original problem solving context necessitate refinement picture 
instance sat problems solved represent practical problems tolerance solution measuring mbf striving mbf value appropriate 
aforementioned measures assumed taken priori specified limit computational efforts 
sr mbf reflect performance fixed maximum amount computing 
complementary approach specify candidate solution satisfactory measure amount computing needed achieve solution quality 
roughly speaking issue algorithm speed 
ec algorithm execution times typically measured number evaluations cpu times system times 
clearly meant eliminate effects particular implementations software hardware making comparisons independent practical details 
corresponding speed measure average number evaluations solution aes defined runs terminate solution candidate satisfactory quality 
average number evaluations termination measure aes clear disadvantages 
runs finding solutions specified maximum number evaluations calculating average 
measure mixes aes sr measures outcome figures hard interpret 
aes measure generally gives fair comparison algorithm speed assuming fitness evaluations cost amount computing fitness evaluations consume execution time algorithm 
aes misleading cases 
evaluations take longer 
instance repair mechanism applied evaluations invoking repair take longer 
ea variation operators proceed chromosomes repaired ea need repair 
aes values may close second ea slower artifact implementation second case evaluations done fast 
aes reflect algorithm speed correctly components ea relatively large impact 
algorithm speed pace progress measured cases specify satisfactory solution quality advance 
cases best worst average fitness value consecutive populations plotted time axis typically number generations fitness evaluations 
clearly plot provides information aes clear success criterion available 
particular progress plot help ranking algorithms score aes 
example progress curves disclose algorithm achieved desired quality halfway run 
maximum number evaluations lowered competition redone 
chance high algorithm keeps performance mbf algorithm motivated preference formulated 
possible difference progress curves algorithms steepness run 
instance curve flattened curve extend runs 
chance high progress extra time algorithms distinguished 
peak vs average performance performance measures additional question interested peak performance average performance considered experiments 
ec typical suggest algorithm better algorithm average performance better 
practical applications interested best solution runs days peak performance average performance relevant 
precise assume algorithm investigation meant solve real life problems 
type problems context problems arise implications typical problem solving session algorithms applied 
cases distinguished 

problem solving session time runs problem final solution selected best solutions runs 
instance creating timetables university take weeks allowing say runs ga doing job 
case algorithm setup high peak performance appropriate average performance 

problem solving session time run deliver solution 
case computationally expensive simulation needed calculate fitness values real time application 
kind problems algorithm high average performance best option carries lowest risk missing chance 
notice kind problem solving frequently occurring practice 
light strange huge majority experimental ec research comparing average performances algorithms 
example consider interpretation figures concerning averages standard deviations 
ec common express preferences algorithms better averages performance measure higher mbf lower aes especially better average coupled lower standard deviation 
attitude discussed self evident 
key consider objectives applying algorithms 
remaining timetabling example assume algorithms compared independent runs resulting mbf results 
tempting nr 
runs fitness performance algorithms est fitness termination fig 

comparing algorithms best fitness values conclude algorithm better slightly higher mbf consequent behavior lower variation best fitness values termination 
notice runs algorithm terminated solution quality algorithm achieved 
typical problem solving session allows runs eas algorithm preferable higher chance delivering better time table 
obviously reasoning applied problem problem context peak performance desirable 
discussion performance measures far exhausting 
sufficient illustrate point sound comparison necessary specify objectives algorithms light problem solving context derive performance measures comparison objectives 
words choice evaluate compare eas consequence want eas 
alg alg alg alg iv 
experiment objectives explicit distinction possible goals experimentation 
roughly speaking distinguish goals optimizing understanding algorithms 
optimizing commonly practiced sport designing ea beats problem set problems 
kind experimental research finishes establishing fact superiority ea 
fully legitimate research programme discussion far implies caveats 
scope claims regarding algorithm superiority established carefully see section ii 

usage performance measures interpretation statistics done blindly algorithm see section iii 
research programme aiming understanding goes fact finding 
particular limited establishing ea better investigates 
developing understanding meant serve optimization implicitly 
name simple example take problem class ea variant instance bit string ga having degrees freedom exact algorithm setup various operators selection mechanisms population sizes 
trying understand different combinations algorithm features influence algorithm behavior needs careful design experiments brute force approach trying combinations practicable 
go general principles experiment design treatments subject instance :10.1.1.34.4103
note case algorithm performance measures extended indicators algorithm behavior 
leading question indicators happens execution far get 
commonly indicators include population distribution phenotype space allele distribution genotype space progress rates execution alike 
reproducibility results verifying results literature practice impossible 
running reportedly algorithm data difficult task 
details typical insufficient ensure implement algorithm 
overcome difficulty possibilities 
advocate idealistic solution standardization code 
particular developing standardized evolutionary algorithm library double edged sword 
hand individual researchers freed implementing algorithms scratch 
coding new ea restricted writing code newly invented features guarantee rest code thoroughly tested works correctly 
hand fellow researchers ec community simple way reproducing experiments 
library new code fetched author electronic repository tested problems environment 
vi 
concluding remarks discussed various aspects current practice experimental research evolutionary computing 
briefly summarizing touched issues 
investigations targeted acquiring generalizable knowledge 
wrapping approach machine learning imported ec improve inductive power results 
defined appropriate problem classes necessary follow wrapping approach lacking 
intensive research efforts needed develop classes ec research 
objectives experimentation studied algorithms explicit 
performance measures statistics line objectives 
reproducibility experiments verification results improved 
aware fact treatment extensive 
consider problems provide ready solutions problems discuss 
hope initiate awareness concerning issues general lack solid experimental methodology ec 
discussions follow publications wish trigger hopefully lead widely accepted practiced sound research methodology supporting research results better founded relevant today 
acknowledgments authors ben paechter valuable comments earlier versions 
david wolpert william macready free lunch theorems optimization ieee transactions evolutionary computation vol 
pp 
apr 
martin gr tschel szl lov sz alexander schrijver geometric algorithms combinatorial optimization springer verlag nd edition 
tsang foundations constraint satisfaction academic press limited 
thomas ck michalewicz test landscapes handbook evolutionary computation thomas ck david fogel michalewicz eds pp 

institute physics publishing oxford university press 
eiben thomas ck empirical investigation multi parent recombination operators evolution strategies evolutionary computation vol 
pp 

william spears genetic algorithms evolutionary algorithms repository test problem generators www cs edu generators html 
ron kohavi george john wrapper approach feature extraction construction selection data mining perspective huan liu hiroshi motoda eds vol 
kluwer international series engineering computer science 
kluwer 
richard barr bruce james kelly mauricio resende william stewart jr designing reporting computational experiments heuristic methods journal heuristics vol 
pp 

hooker testing heuristics wrong journal heuristics vol :10.1.1.34.4103
pp 

