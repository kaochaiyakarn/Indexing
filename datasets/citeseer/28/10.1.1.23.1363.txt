executable object modeling statecharts david harel revised february 
appear ieee computer early version proc 
th int 
conf 
soft 
eng ieee press march pp 
behaviorally expressive set diagrammatic languages modeling object oriented systems 
constitutes constructive subset uml supported tool enables model execution full code synthesis 
reports effort develop integrated set diagrammatic languages modeling object oriented systems construct supporting tool 
want models intuitive structured behaviorally expressive rigorous 
goal support full dynamic analysis automatic synthesis usable efficient code object oriented languages heart modeling method language statecharts specifying object behavior structured object model language describing classes structure inter relationships :10.1.1.20.461
objects interact event generation direct invocation operations 
approach consistent uml effort ra 
statecharts adopted uml main booch method omt main medium specifying behavior 
second participated quite extensively uml definition effort led group rational order ensure uml fully consistent 
soft 
eng ieee press march pp 
preliminary name mate tool 
background overview statecharts conceived listed author 
published statecharts portrayed isolation visual formalism specifying raw reactive behavior :10.1.1.20.461
adopting statecharts behavioral component general system modeling approach quite different matter links various aspects system description subtle 
modeling approaches ought detailed precise enable model execution dynamic analysis code synthesis 
language set rigorously defined closed possible combination graphical textual constructs clearly characterized syntactically legal illegal legal combinations unique formal meaning 
decade ago full language set built statecharts structured analysis paradigm sa see hp 
parts approach consistent methods described cook daniels cd address definitional issues relevant 
statechart attached class specifies behavior instances thereof 
statecharts drive entire model specify behavioral aspects objects 
capture state object terms willingness server respond events requests services dynamics internal behavior carrying responses maintaining relationships client aggregate objects 
utilize full power statecharts language including state hierarchy multi level orthogonal components history connectors internal broadcast communication :10.1.1.20.461
main technical issues arise devising setup concerns choice mechanisms inter object interaction 
tradeoff high level mechanisms easier model lower level ones easier translate efficient code 
tried compromise adopting kind approach events operations process careful distinctions 
object generate event queued handed target server object turn object directly invoke operation object causing carry appropriate method return value 
able refer addressee done legal navigation expression directly name addressee components composite regular aggregation 
case denoting generically write chosen framework server 
gen parameters special server object client address event stands client object 
fact omission server object assumes default 
interesting consequence expressions form gen parameters appear object statechart really just standard events broadcast limited statechart :10.1.1.20.461
generation event gets queued single system queue 
client object reaches stable situation see section system resumes continuous process applying events queue appropriate server objects order 
servers simple syntax act event parameters 
actual parameters represent data comes event server may formal parameters shall see example 
contrast authors built tool similar code synthesis capabilities 
differences 
takes layered approach allows closed approach 
allow concurrency statecharts 
harel statecharts visual formalism complex systems sci :10.1.1.20.461
comput 
prog 

preliminary version appeared tech 
