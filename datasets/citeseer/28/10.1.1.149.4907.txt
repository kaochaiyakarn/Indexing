probabilistic noninterference concurrent language dennis volpano computer science department naval postgraduate school monterey ca usa volpano cs nps navy mil geo rey smith school computer science florida international university miami fl usa cs fiu edu give type system guarantees typed multi threaded programs noninterfering :10.1.1.149.7391
thread scheduling probabilistic typed programs may probabilistic timing channels 
describe eliminated making type system restrictive 
show typed concurrent programs probabilistically noninterfering total command high guard executes atomically 
proof uses concept probabilistic state computation kozen 

motivated applications mobile code programs downloaded needed executed trusted host examples include web browsers commerce applications smartcards set top boxes 
host may sensitive data downloaded code may need want assurance leaked code 
cases best approach forbid access sensitive data access control mechanism 
code legitimately need access data order function 
case need ensure leaked code 
speci cally concerned identifying conditions concurrent programs corrected version appeared proceedings th ieee computer security foundations workshop ma june pages 
material activities supported darpa national science foundation agreement nos 
ccr ccr 
proved free probabilistic timing channels 
previous centered developing type system typed multi threaded programs possibilistic noninterference property :10.1.1.149.7391
proof relies purely nondeterministic thread scheduling semantics 
property rules certainty deducing private data practical utility somewhat questionable 
trouble thread scheduling usually probabilistic real implementations case easy construct typed programs probabilistic timing channels 
show rule channels making type system restrictive 

basic idea consider simple imperative language threads thread sequence commands threads scheduled nondeterministically 
thread may access shared memory variables classi ed low public high private 
want ensure concurrent programs copy contents high variables low variables 
suppose high variable value low variable command takes steps complete 
consider program thread thread program typed secure ow system satis es possibilistic noninterference prop erty :10.1.1.149.7391
changing initial value change set possible nal values suppose threads scheduled ipping coin 
threads run roughly rate value ends copied high probability 
probabilistic interference thread scheduling obeys probability distribution program typed 
initial value changes probability distribution nal values obvious way treat program type system 
adopt severe restriction guards conditionals low 
case example rejected longer typed 
approach require conditional executed asynchronously 
cases want conditional execute synchronously 
strategy extend language way allows high guards conditionals provided certain machine checkable condition satis ed 
approach 
fact condition impose simple 
require conditionals high guards executed atomically 
accomplished wrapping conditional new command called protect guarantees conditional executed atomically multithreaded environment 
show welltyped programs satisfy probabilistic noninterference property says probability distribution nal values low variables independent ofthe initial values high variables 
general property requires total command high guard protected 
commands include primitive recursion forms guarded statements programming languages 

syntax semantics threads expressed simple imperative language phrases expressions commands protect metavariable ranges identi ers integer literals 
integers values false nonzero true 
note expressions side ects contain partial operations division 
de ne small step transition semantics individual threads 
assume expressions evaluated atomically 
simply extend memory obvious way map expressions integers writing denote value expression memory rules de ne transition relation 
con gurations 
con guration pair simply memory rst case command executed second case command terminated yielding nal memory thread protected section time 
capture property appealing standard natural semantics commands hypothesis rule atomicity written hypothesis means command evaluates completely memory memory trick atomicity command simple noninterference proof 
natural semantics standard described 
assume protected sections nested 
reasonable assumption protected sections transparent sequential language natural semantics treats 
avoid having introduce rule protect natural semantics 
assume command occurs protected section 
reason simplify probabilistic semantics 
protect execution thread may block protect true skip needs compute probability thread selected unblocked threads 
prohibiting potential nontermination protected section guaranteed threads thread pool unblocked transition 
probability thread selected thread pool determined simply size pool joj 
take concurrent program set commands run concurrently :10.1.1.149.7391
set called thread pool grow execution 
represent mapping thread identi ers 
commands 
addition single global memory shared threads maps identi ers integers 
threads communicate shared memory 
call pair global con guration 
execution concurrent program takes place xed probability distribution noninterference property depend atomicity time takes evaluate expression depends values high variables 
update dom 
sequence 
branch nonzero loop nonzero atomicity protect 
global 
joj joj 

sequential concurrent transition semantics scheduling threads semantics prescribes uniform distribution simplicity 
execution de ned rule global lets prove judgments form asserts probability going isp 
rst global rules specify global transitions thread pool 
third global rule introduced accommodate notion probabilistic state 
shall see ensures probabilities state sum 
global rules represent concurrent program discrete 
states markov chain global con gurations stochastic matrix determined 
type system types type system data types phrase types var cmd simplicity limit security classes just possible generalize arbitrary partial order security classes 
type system system extended rule protect :10.1.1.149.7391
rules 
rules allow prove typing judgments form subtyping judgments form 
denotes identi er typing whichis nite function identi ers phrase types 
note guards conditionals may high 
say typed typed dom say typed 
probabilistic states loosely speaking formulation probabilistic noninterference sort probabilistic lock step execution statement 
memories may di er high variables wewant know probability concurrent program reach global conguration memories probability reaches equivalent con guration 
concurrent program represented discrete markov chain states global con 
stochastic matrix markov chain determined relation example consider program skip program get di erent con markov chain states 
stochastic matrix markov chain 
probability transi 
stochastic matrix tion state instance state hypothesis rst global rule rule allows transition occur 
set markov states may countably nite simple example nonterminating loop increments variable 
case stochastic matrix countably nite 
general stochastic matrix global con gurations nonempty andt joj empty andt 
kozen uses measures capture distributions values variables probabilistic programs 
strategy similar 
markov chain model execution concurrent program deterministically sequence probabilistic states 
de nition probabilistic state probability measure con gurations 
probabilistic state represented row vector components sum 
stochastic matrix probabilistic state probabilistic state sequence states modeling concurrent computation simply vector matrix product st instance initial probabilistic state program preceding example states 
indicates markov chain begins state certainty 
state product state stochastic matrix giving 
state indicates markov chain states probability 
multiplying vector get third probabilistic state determine complete execution way 
rst ident int val var sum assign var cmd compose cmd cmd cmd cmd cmd cmd cmd cmd protect cmd protect cmd base reflex cmd cmd cmd subtype 
typing subtyping rules skip skip skip skip 
states markov chain fg skip skip skip fg skip skip skip skip fg skip skip 
probabilistic state sequence probabilistic states sequence depicted 
fth state instance tells probability terminates memory steps 
thread pool example concurrent program probabilistically total halts probability nondeterministically total nite computation path 
note may nitely states markov chains corresponding programs probabilistic states arise program executions assign nonzero probability nitely 
execution single global con guration factor step number threads extend language random number generator returns arbitrary integer respect probability distribution consider probabilistic states probabilities nite number global con gurations 
probabilistic states probability distributions sensitive high variables programs types system 
consider example instantiated skip skip skip skip thread typed assuming skip type cmd 
give sequences state transitions 
begins equal equal 
notice change distribution nal values initial value high variable changes 
instance probability nal value equals falls equals 
going initial value ects amount time required execute conditional turn ects order assignments executed 
suppose protect conditional example 
conditional ect executes step regardless value sequence transitions equivalent state state sequence transitions figures 

probabilistic noninterference ready prove main result 
lemmas proved lemma simple security identi er lemma con nement cmd var identi er assigned 
de nition protected command protected conditional command guard type falls scope 
de nition identi er typing say memories equivalent written domain agree identi ers 
skip skip skip skip skip skip skip skip skip 
probabilistic state sequence skip skip skip skip skip skip skip skip skip skip skip skip skip skip skip skip skip skip skip skip 
probabilistic state sequence protect skip skip skip protect skip skip skip protect skip skip skip 
probabilistic state sequence protect skip skip skip protect skip skip skip protect skip skip skip 
probabilistic state sequence execute typed protected command equivalent memories executions proceed lock step lemma lock step execution suppose typed protected exists 
exists proof 
induction structure interesting cases protect command conditionals 
particular need consider conditionals guards type guards type protected fall protect case 
conditionals guards type theorem follows lemma guarantees evaluation conditional may proceed branch evaluation suppose protect rule atomicity 
termination agreement theorem theorem memory protect wish extend lock step execution lemma probabilistic states :10.1.1.149.7391
need notion equivalence probabilistic states 
basic idea probabilistic states equivalent high variables projected 
suppose example equivalent case result projecting high variable notice projecting high variables cause con gurations collapse requiring probabilities summed 
formally equivalence follows de nition di ers workshop proceedings 
proceedings incorrect 
de nition identi er typing memory denote result erasing high variables probabilistic state projection low variables denoted de ned say probabilistic states equivalent written ifs probabilistic state typed protected global con guration thread typed protected dom 
global con guration point mass denoted probabilistic state gives probability probability global con gurations 
corollary lock step execution lemma congruence respect stochastic matrix typed protected point masses 
lemma congruence point masses typed protected point masses proof 
exist thread pool memories fg global rule see suppose nonempty 
show 
suppose global con guration 
point mass 
de nition joj thread command 
ando 

rst case lock step execution lemma exists rule global 
joj de nition joj point mass joj 
second case similar 
con guration exists 
sum 

symmetrically ort wish generalize congruence lemma point masses arbitrary probabilistic states generalization direct consequence linearity oft precisely set measures forms vector space de ne measures real measure respect vector space linear transformation 
furthermore respects vector space operations lemma si theorem probabilistic noninterference typed protected probabilistic states st proof 
argue expressed possibly countably nite linear combinations necessarily distinct point masses corresponding coe cients corresponding point masses equivalent 
know express linear combinations point masses assume point mass note ai bi sum understood partitioning unit interval unify coe cients linear combinations take partitions splitting terms cross partition boundaries 
example picture wewould split term 
wewould split term 
continuing way unify coe cients describe splitting process precisely follows 
simultaneously traverse splitting terms go 
terms uni ed 
keep terms unchanged 
term split handle case symmetrically 
sums nite course algorithm gives nite sum 
term split nitely ai bi sum exception nite sum nite sum term split nite sum 
far unify coe cients case point mass general case rst rearranged sums sums equivalent point masses ij ik ij ik aij bij 
algorithm forth 
form single sum sums standard way 
nal result ort express linear transformation st congruence point masses lemma lemma st 
discussion need probabilistic view security computer systems understood time 
security properties models treat probabilistic channels nondeterministic systems formulated mclean gray 
important recognize orts address di erent problem consider 
consider computer system number users classi ed high low send inputs receive outputs system 
problem prevent high users access high information communicating low users access low information 
treating privacy setting especially di cult users need processes control system may external system observe system behavior outside 
result high user may able communicate covertly modulating system performance encode high information low user turn decodes real time clock outside system 
furthermore low user measuring real time modulations depend low level system implementation details paging caching behavior underlying hardware 
implies prove privacy respect high level system semantics semantics 
guarantee privacy necessary system model address implementation details 
mobile code framework hosts trusted ensuring privacy tractable 
akey assumption attempt compromise privacy arise mobile code internal system 
result system control mobile code observe 
example mobile code threads allowed see real time clock measure timing threads observing variations thread interleavings 
assuming correct implementation semantics threads able detect running time protected command able detect timing variations due low level implementation details 
consequently timing attacks impossible typed protected programs language 
instance kocher describes timing attack rsa 
basically argues attacker discover private key observing amount time required modular exponentiations yx mod framework modular exponentiation protected means useful timing information exponentiation available threads appear execute exactly step 

related research secure information ow parallel setting includes andrews reitman melliar smith moser focardi gorrieri banatre bryce 
melliar smith moser consider covert channels ada 
describe data dependency analysis nd places ada programs depend relative timing operations system 
andrews reitman give axiomatic ow logic treating information presence process synchronization 
sketch treat timing channels logic 
banatre bryce give axiomatic ow logic csp processes treating information ow arising synchronization 
orts gives satisfactory account security properties guarantee 
focardi gorrieri identify trace bisimulation security properties systems expressed extension milner ccs call security process algebra 
properties possibilistic nature system set traces low observer see system possible regardless highlevel actions enabled disabled system 

signi cance result 
depends observed 
respect internal program behavior probabilistic noninterference result rules covert ows high variables low variables 
external observation running program allowed course covert channels kind discussed section remain possible 
case elaborate security properties gray information ow security may needed 
note allow commands occur protected sections requires program modular exponentiation terms primitive recursive looping construct 
mobile code setting ords control external observations normally possible 
execute mobile code machine limit communication outside world preventing precise observations program execution time example 
andrews reitman 
axiomatic approach information ow programs 
acm transactions programming languages systems 
ban atre bryce 
information ow control parallel language framework 
proceedings th ieee computer security foundations workshop pages june 
feller 
probability theory applications volume john wiley sons third edition 
focardi gorrieri 
classi cation security properties process algebras 
journal computer security 
focardi gorrieri 
compositional security checker tool veri cation information ow security properties 
ieee transactions software engineering 
gray iii 
probabilistic interference 
proceedings ieee symposium security privacy pages oakland ca may 
gray iii 
mathematical foundation information ow security 
proceedings ieee symposium security privacy pages oakland ca may 
heintze riecke 
slam calculus programming secrecy integrity 
proceedings th symposium principles programming languages pages san diego ca jan 
kocher 
timing attacks implementations di hellman rsa dss systems 
proceedings th annual crypto conference aug 
kozen 
semantics probabilistic programs 
journal computer system sciences 
mclean 
security models information ow 
proceedings ieee symposium security privacy pages oakland ca 
mclean 
security models 
editor encyclopedia software engineering 
wiley press 
melliar smith moser 
protection covert storage timing channels 
proceedings th ieee computer security foundations workshop pages june 
nielson nielson 
semantics applications formal 
wiley 
smith volpano :10.1.1.149.7391
secure information ow threaded imperative language 
proceedings th symposium principles programming languages pages san diego ca jan 
volpano smith :10.1.1.149.7391
eliminating covert ows minimum typings 
proceedings th ieee computer security foundations workshop pages june 
volpano smith irvine 
sound type system secure ow analysis 
journal computer security 
johnson 
information nondeterministic systems 
proceedings ieee symposium security privacy pages oakland ca may 

