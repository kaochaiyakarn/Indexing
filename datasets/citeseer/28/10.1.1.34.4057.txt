concurrency communication transaction logic anthony bonner university toronto canada 
bonner db toronto edu michael kifer suny stony brook kifer cs edu previous developed transaction logic deals state changes deductive databases 
provides logical framework elementary database updates queries combined complex database transactions 
accounts updates important related problems order update operations non determinism transaction failure rollback 
propose concurrent transaction logic ct extends transaction logic connectives modeling concurrent execution complex processes 
concurrent processes ct execute interleaved fashion communicate synchronize 
focus concurrent processes interact communicate database 
ct provides logical foundation exactly kind interaction 
programming states common practice logic programming shows unavoidable 
unfortunately classical logic stateless 
way get problem represent states terms situation calculus :10.1.1.85.5082
approach taken roots logic programming reasons including complexity dealing frame problem 
prolog efficient techniques developed states represented lists terms require frame axioms 
techniques rely heavily prolog control strategy cuts non logical features 
clear approach practical large states databases 
example producer consumer consider transaction base defines processes produce jlist send ch omega produce list produce send ch done consume sum receive ch omega consume sum consume receive ch done executed concurrently producer sends list numbers consumer number time 
consumer receives numbers adds running sum argument consume 
producer sent numbers list sends message done consumer 
consumer receives done message terminates recursion returns total sum second argument consume 
instance transaction gamma produce consume causes producer send numbers consumer consumer concurrently receives sums returns :10.1.1.22.2040:10.1.1.51.278
section described predicates sending receiving messages oracles 
worth mentioning ct defined run mill insert delete primitives ground atoms 
rules implement simplified version predicates communication channel set messages queue 
intuitively rules treat channel pool messages stream 
intuitively channel ch msg means channel ch contains message msg 
sending message channel amounts inserting tuple channel relation message amounts retrieving tuple receiving message amounts deleting tuple 
receiving message requires message channel tuple deletion preceded query sure tuple 
note modal operator fi ensures checking message consuming done atomically preventing processes actions test channel ch msg update channel del ch msg 
model theory semantics sequential transaction logic sequences database states called paths :10.1.1.51.278
concurrent transaction logic extends idea sequences paths called multi paths paths 
multi paths provide basis logical semantics concurrent conjunction 
section describes intuitive motivation multi paths develops formal model theory ct multi paths user executes transaction database may change going initial state final state 
doing database may pass number intermediate states 
multi paths provide basis logical semantics concurrent conjunction 
section describes intuitive motivation multi paths develops formal model theory ct multi paths user executes transaction database may change going initial state final state 
doing database may pass number intermediate states 
example transaction oe ins omega ins omega ins takes database initial state intermediate states fag fa bg final state fa cg 
sequential transaction logic finite sequence states called path transactions true paths :10.1.1.51.278
example transaction oe true path fag fa bg fa cgi initial state empty database 
say fag fa bg fa cgi execution path oe 
execution paths allow model wide range dynamic constraints 
model concurrent processes generalize notion path multi path path 
multi path structure assigns classical order structure path specifying atoms true 
turn atoms determine formulas true paths 
intuitively formula true path represents action takes place path 
multi path structures generalize path structures sequential transaction logic 
subtle points path structures apply equally multi path structures reader referred thorough discussion :10.1.1.51.278
main path structures paths interleaving operation reduction account concurrent atomic processes 
recall ct comes language pair oracles determine syntax formulas semantics databases described section 
rest language oracles implicit 
denotes satisfaction classical order models 
illustrates possibility 
shows derivation sequent fg sequent table derived inference rule 
deduction succeeds bottom sequent axiom 
carried topdown deduction corresponds execution transaction atoms inserted empty database order theorem soundness completeness concurrent horn transaction base concurrent serial goal executional entailment holds iff deduction sequent 
model theoretically transaction true path form path corresponding single database :10.1.1.51.278
having developed inference system remind original goal proving statements form oe form dn oe database state time user issues transaction gamma oe 
note intermediate states dn gamma final state dn unknown time 
important task inference system compute states 
general notion deduction tight conveniently general deduction may record execution unrelated transactions mixed way 
note intermediate states dn gamma final state dn unknown time 
important task inference system compute states 
general notion deduction tight conveniently general deduction may record execution unrelated transactions mixed way 
interested execution particular transaction introduce specialized notion executional deduction sacrificing completeness defines narrower range deductions 
notion executional deduction needed exactly developed sequential transaction logic :10.1.1.51.278
leads naturally proof theoretic notion execution path 
remains show executional deduction concurrent transaction logic sound complete model theory section 
established theorem 
theorem executional soundness completeness concurrent horn transaction base oe concurrent serial goal 
semantics emphasizes combination elementary database operations complex processes 
elementary operations built semantics ct play role parameter logic 
focused concurrent horn subset ct developed model theory sound complete proof theory 
ct logic unrelated isolated extensions 
idea orthogonal proposals logic structural hilog higher order logic programming annotated logic reasoning uncertainty easily integrated endow static formalisms ability capture database dynamics clean logical fashion cf :10.1.1.50.9156:10.1.1.115.3586
communication paradigm ct inspired calculus 
ct programming logic calculus algebra specifying verifying finite state concurrent systems databases logic programs 
growing interest designing programming languages calculus application domain languages different ct languages functional flavor ability express data driven non determinism limited 
process committed certain execution path possibility failure 
simple extension direction hilog ct pass transactions processes remote execution 
miller shown calculus encoded linear logic 
reduction process calculus simulated proof theory linear logic 
semantics linear logic give direct meaning execution communication ct programming paradigm arise encoding imitate behavior calculus quite different programming style ct draws deductive databases logic programming 
linear objects concurrent formalism linear logic :10.1.1.22.2040
processes represented atomic formulas execution corresponds branches proof tree 
semantics provided mapping linear logic strictly speaking provide model theoretic account concurrency 
furthermore processes communicate obvious way process change database query changes different views changes 
programming language specifying processes evolve 
anthony bonner supported part individual research natural sciences engineering research council canada 
michael kifer supported part nsf iri 
consens discussions preliminary ideas concurrency transaction logic 
grateful jose meseguer helpful comments 
:10.1.1.22.2040

linear objects logical processes built inheritance 
new generation computing 
bernstein hadzilacos goodman 
deductive object oriented data languages quest integration 
intl 
conference deductive object oriented databases dood lecture notes computer science pages singapore december 
springer verlag 
kifer lausen wu :10.1.1.115.3586
logical foundations object oriented frame languages 
journal acm pages july 
kifer subrahmanian :10.1.1.50.9156
theory generalized annotated logic programming applications 
springer verlag 
kifer lausen wu :10.1.1.115.3586
logical foundations object oriented frame languages 
journal acm pages july 
kifer subrahmanian :10.1.1.50.9156
theory generalized annotated logic programming applications 
journal logic programming april 
mccarthy hayes 
philosophical problems standpoint artificial intelligence 
