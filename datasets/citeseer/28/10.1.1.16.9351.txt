execution monitoring high level robot programs 
giuseppe de giacomo dip 
di informatica sistemistica universit di roma la sapienza roma italy dis uniroma ray reiter dept computer science university toronto toronto canada reiter cs toronto edu dept computer science university toronto toronto canada mes cs toronto edu imagine robot executing program line insofar reasonable wishes continue line program execution matter exogenous events occur world 
execution monitoring robot process observing world discrepancies actual world internal representation recovering discrepancies 
provide situation calculus account line program executions monitoring 
account relies specification single step interpreter logic programming language golog theory supported implementation illustrated standard blocks world robot executing golog program build suitable tower 
finite set sentences mention situation term situation independent 
golog traditional approach high level robotic control provide suitable goals derive plans achieving goals robot execute plans 
planning known computationally intractable general case question deriving complex behaviors involving hundreds possibly thousands actions 
perspective pursued cognitive robotics group university toronto reduce reliance planning eliciting inter robot behaviors provide robot programs written suitable high level language case golog congolog 
extended golog logic programming language primitive actions background domain theory :10.1.1.22.558:10.1.1.54.7045
typically golog programs intended executed line sequence actions returned line computation executed line 
consider variant golog intended executed entirely line 
includes constructs nil empty program primitive action oe test truth condition oe ffi ffi sequence ffi ffi nondeterministic choice actions ffi nondeterministic choice argument action ffi nondeterministic iteration proc fi procedure formal parameters body fi 
contrast straight line partially ordered plans golog program arbitrary complex including loops recursive procedures nondeterministic choice 

move 
move 
move 
move associate programs transition semantics semantics single steps program execution :10.1.1.22.558
informally semantics declares program proceeds program counter moves program intermediate states 
configuration pair consisting program state part original program left perform situation 
specify semantics introduce predicates trans final 
ffl trans ffi ffi program ffi situation tells possible step computation returning resulting situation program ffi remains executed 

ffi evolve ffi ffi provided ffi evolve ffi 
observe ffi evolve ffi final definition see 
simplify discussion omitted axioms procedures 
extended version :10.1.1.22.558
final predicate final characterized axioms 
empty program final nil true 
primitive action final false 
test action final oe false 
sequence final ffi ffi final ffi final ffi 
nondeterministic choice final ffi ffi final ffi final ffi 
pick final ffi final ffi 
iteration final ffi true trans possible configurations reached program ffi starting situation obtained repeatedly transition relation denoted trans starting ffi reflexive transitive closure transition relation 
relation denoted trans defined situation calculus formula trans ffi ffi oe ffi ffi stands conjunction universal closure sentences ffi ffi trans ffi ffi ffi ffi oe ffi ffi trans final give new definition relation ffi ffi trans ffi ffi final ffi words ffi holds iff possible repeatedly single step program ffi obtaining program ffi situation ffi legally terminate vs line golog interpreters describing approach execution monitoring distinguish carefully online line golog interpreters :10.1.1.54.7045
relation fl means terminating situation resulting execution program fl situation relation natural prolog implementation terms step interpreter trans offline prog sf final prog sf trans prog prog offline prog sf 
brave line interpreter difference line interpretation golog program select action program commit physical world repeat rest program 
interpreter online prog sf final prog sf trans prog prog select action prog 
commit action 
ffi relationship current program state ffi current situation situation resulting exogenous event occurring example express ffi terminates line executed executed weak termination correctness ffi ffi oe monitor ffi ffi oe ffi task verify condition monitor determines new program resume system computation exogenous event occurrence program terminating line computation resulting final situation holds 
strong termination correctness ffi ffi oe ffi monitor ffi ffi ffi condition monitor determines new program resume system computation exogenous event occurrence program terminating line computation resulting final situation holds 
stronger termination correctness ffi ffi oe ffi monitor ffi ffi ffi ffi oe correctness property condition monitor determines new program terminates line terminating situations satisfy possible formulate various correctness properties entire monitored system example weak property provided monitored program terminates desirable situation ffi ffi nil oe transitive closure variations themes possible purpose pursue issues depth simply point correctness properties monitored systems easily formulated framework 
framework entirely situation calculus correctness proofs constructed totally classical logic 
discussion systems designed interleave monitoring plan execution :10.1.1.22.558
differ similar proposals formal approach secondly fact story monitoring arbitrary programs simply straight line partially ordered plans 
assume monitored plan generated automatically scratch provided programmer 
sequence papers schoppers proposes idea universal plans address tension reasoned behavior timely response caching reactions classes possible situations 
point view notion universal plan closely related notion controllable languages developed discrete event systems control 
point view notion universal plan closely related notion controllable languages developed discrete event systems control 
language set linear plans controllable iff effects possible uncontrollable events lead outside set plans language contains 
words just schoppers required system reactions possible contingencies compiled controllable language 
framework different complementary favors line generation appropriate reactions exogenous events opposed golog program 
congolog richer version golog supports concurrency prioritized interrupts exogenous actions :10.1.1.22.558
reactive behaviors easily representable congolog interrupt mechanism combination reactive behaviors deliberative execution monitoring possible 
allow experiment different mixtures execution monitoring reactivity advantage preserving unifying formal framework situation calculus remains open research problem 
theory embedded planning introduces notions planning failure motivations similar 
authors propose formal languages golog include constructs sequence conditionals loops recursion 
morgan kaufmann publishers san francisco ca 
baral son 
relating theories actions reactive control 
robots softbots theories action planning control working notes workshop held july conjunction aaai providence rhode island 
:10.1.1.22.558
monitoring execution dynamic environments 
reasoning actions planning complex environments proceedings workshop international conference formal applied practical reasoning bonn germany june 
available technical report technische darmstadt germany 
mcdermott 
ieee transactions automatic control volume 
fikes hart nilsson 
learning executing generalized robot plans 
artificial intelligence volume 
de giacomo lesp levesque :10.1.1.22.558
reasoning concurrent executions prioritized interrupts exogenous actions situation calculus 
th international joint conference artificial intelligence ijcai 
de giacomo levesque 
congolog incremental interpreter 
high level robotic control planning 
integrating robotics research big leap 
position 
aaai spring symposium stanford university march 
available www cs toronto edu levesque reiter lesp lin scherl :10.1.1.54.7045
golog logic programming language dynamic domains 
logic programming special issue actions volume 
lin reiter 
state constraints revisited 
