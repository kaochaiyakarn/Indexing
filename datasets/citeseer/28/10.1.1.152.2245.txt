strategy efficiently verifying requirements specifications composition invariants ralph jeffords naval research laboratory code washington dc usa jeffords itd nrl navy mil heitmeyer naval research laboratory code washington dc usa heitmeyer itd nrl navy mil describes compositional proof strategy verifying properties requirements specifications 
proof strategy may applied model checker theorem prover uses known state invariants prove state transition invariants 
proof rules standard incremental proof rule analogous manna pnueli incremental proof rule compositional proof rule 
advantage applying compositional rule decomposes large verification problem smaller problems solved efficiently larger problem 
steps needed implement compositional rule described results applying proof strategy examples simple cruise control system realworld navy system 
navy example compositional verification theorem proving model checking times faster verification standard incremental rule 
addition rules proving invariants new compositional proof rule circular assume guarantee proofs invariants 
principle strategy rules described proving invariants may applied state specification parallel composition components specifications expressed scr software cost reduction tabular notation auxiliary invariants proofs automatically generated invariants verification supported scr tools 
categories subject descriptors requirements specifications languages methodologies tools software program verification formal methods model checking general terms documentation security verification keywords requirements specification formal methods compositional verification invariants software tools model checking theorem proving 
challenging problem applying formal techniques software development demonstrate large requirements specifications associated practical systems satisfy supported office naval research 
authored employees united states government public domain 
esec fse september helsinki finland 
acm critical properties 
hand users model checking technology overcome state explosion problem exhaustively search explicitly implicitly large state spaces practical system specifications 
hand theorem provers pvs handle large infinite state spaces lack automation formulating proving inductive invariants necessary complete proof 
typically applying theorem prover requires user ingenuity formulate needed invariants theorem proving skills detailed knowledge particular prover 
contributions verifying system software requirements specifications 
contribution compositional proof method verifying invariant properties requirements specifications 
method decomposes large verification problem smaller problems solved efficiently larger problem 
mathematically sound foundation method may applied state machine models parallel composition lustre rsm reactive modules scr software cost reduction 
addition method may large part automated 
inspired general compositional proof rule mcmillan second contribution compositional proof rule circular proofs special classes invariants 
classes invariants state transition invariants defined section 
shows compositional proof strategy may applied scr method tools conjunction model checker theorem prover 
examples required system behavior specified scr tabular notation system properties restricted form firstorder logic 
examples state invariants automatically generated scr specification 
invariants constructed applying algorithms described 
verification tools experiments include theorem prover called salsa applies decision procedure combining bdd algorithm linear integer constraint solver symbolic model checker smv explicit state model checker spin 
salsa customized prove properties scr requirements specifications 
smv spin scr specifications translated smv language promela methods described 
provide basis illustrating proof strategy section introduces simple cruise control system scr specification system set state invariants automatically generated scr specification set properties wish prove specification 
section describes classes proof rules invariants verification versions standard incremental proof rule introduced manna pnueli compositional proof rules goal improve efficiency verification 
illustrates application proof rules cruise control example 
section presents general circular assume guarantee rule shows compositional rule special case section describes results salsa smv spin apply proof rules practical navy system 
section discusses related section presents plans 

background simple example specifying cruise control scr illustrate proof strategy consider simplified automobile cruise control system derived 
cruise control system ccs monitors quantities environment position cruise control lever automobile speed uses information control throttle 
ignition engine running brake driver enters cruise control mode moving lever const position 
cruise control mode automobile speed determines throttle accelerates automobile maintains current speed 
driver overrides cruise control engaging brake resumes cruise control moving lever resume exits cruise control moving lever 
specifying cruise control scr shows scr state variables specify ccs requirements 
monitored input variables represent state automobile ignition engine automobile speed positions cruise control lever brake 
distinguished monitored variable time indicates time passage 
controlled output variable represents state throttle 
ccs specification contains auxiliary variables term capture state history specification concise 
refer auxiliary controlled variables scr specification dependent variables 
scr value dependent variable defined function tabular format 
see appendix overview scr requirements model review scr tabular notation table types examples scr tables 
tables describes function 
functions define values dependent variables scr specification ccs 
technical reasons dur time duration operator scr abstracted ccs specification verification applied 
see appendix example dur operator 
important point compositional strategy applies earlier abstractions performed specification 
example slicing scr specification removes variables affect validity candidate invariant automatically performed salsa verification applied 
invariants ccs specification define system state machine set states boolean initial state predicate boolean state predicate 
associated set rf fr rng state variables monitored dependent variables function ty maps state variable set legal values 
state function maps variable rf value rf ty 
scr specifications classes properties interest state properties predicates defined single state state properties predicates defined state pairs 
system invariant state property holds reachable state transition invariant state property holds adjacent pairs reachable states designed algorithms constructing state invariants tables defining dependent variables scr specification 
suppose dependent variable set fv vng 
ifr defined mode transition table event table types tables scr specifications vi algorithms generate invariants form vi ci ci predicate variables depends 
invariant generation scr tables intuitive result scr specification vi ci invariant ci true value changes vi event falsifying ci unconditionally causes value vi 
stronger invariants may computed knowledge previously computed invariants full algorithms repeat computations invariants fixpoint reached 
current implementation scr invariant generator applies algorithms mode transition tables event tables 
lists state invariants scr specification ccs invariant generator constructed mode transition table mode class see table appendix 
state invariants constructed mode transition table called mode invariants 
properties ccs assertion dictionary lists properties want prove ccs specification state property state properties 
assertions expressed notation scr tables addition 
assertion expression denotes event indicating change value boolean false old state true new state 
expression represents value new state 

proving invariants rules section describes proof rules standard incremental proof rules compositional proof rules 
rules known state invariants prove new state transition invariants 
section enumerates steps compositional proof method illustrates application proof rules verify properties ccs 
standard proof strategy cases properties listed proven directly specification 
complete proof properties auxiliary invariants usually name generated invariant description mode ignition 
inactive inactive mode ignition 
cruise cruise mode ignition engine running brake lever 
override override mode ignition engine running automatically generated invariants ccs ccs assertions 
needed 
variant known strategy invariant prove property invariant proof rule call basic incremental proof bip rule 
system state transition invariants state properties defined variables basic incremental proof rule defined inv inv right premise bip rule unprimed property denotes property new state 
bip proof rule slightly better incremental rule manna pnueli derive proof rule sv prove rule rule 
similar rule proving state property invariant modified incremental proof mip rule defined inv inv suppose state invariant prove invariant verifier determine right premises bip rule hold 
prove state properties invariant proceed similar manner determine right premise mip rule holds 
define conjunction mode invariants state properties application bip sufficient prove properties state invariant 
properties excluded state properties proven shown model checking properties false 
similarly defined state property mip proves transition invariant 
general automatically generated invariants may sufficient complete verification 
automatically generated invariants means user normally required supply auxiliary invariants needed complete proof 
step prover supports similar proof strategy automatically generated invariants supplement user develop hand 
efficient compositional strategy major limitation proof strategy proof relies entire system specification 
strategy smaller systems performs verification smaller systems larger 
smaller mean number initial state definitions function definitions smaller 
recall function definitions describe values dependent variables 
standard strategy strategy depends auxiliary invariants complete 
suppose state invariant state property wish prove invariant compatible systems derived jj parallel composition composition defined conjunction jj 
consider systems compatible set variables type set associated variable 
compatible systems proof rule called basic compositional proof bcp rule sound inv inv jj similar sound compositional rule proving state property invariant modified compositional proof mcp rule inv inv jj compositional verification method described compositional method constructing compatible systems applying compositional proof rule 
method consists steps 
specification system construct set state invariants algorithms 
alternatively prove set state invariants form shown 

state invariant derived dependent variable partition set dependent variables sets frg 

construct follows delete initial state definitions variables assign result 
delete functions defining values variables assign result 
similarly construct follows delete initial state definition variable assign result 
delete function defining values variable assign result 
verify invariant 
verifier check right premises bcp rule hold implies implies state invariant definition parallel composition construction described follows jj note steps form scr specifications generalized customized state machine models 
note step verifying invariant may problematic general hold automatically generated invariants algorithms generate 
see section details 
intuitive way understand compositional rules rule replaces dependent variable specification abstraction set state invariants derived variable 
example prior bcp rule prove properties ccs specification replace definition values mode class function defined mode transition table table appendix mode invariants 
analysis system efficient sufficient verifying properties original system 
apply technique ccs specification recall invariants derived mode transition table table appendix table defines mode class function values monitored variables 
information form set dependent variables partition sets contains variable invariants constructed contains remaining dependent variables 
define system equal initial values function definitions scr tables deleted 
similarly define equal initial state definition function defining value deleted 
deleting initial state definition function definition dependent variable means may nondeterministically take type correct value 
evaluate state properties interest define properties conjunction mode invariants 
verifier prove right premises bcp proof rule hold 
proof succeeds compositional proof rule tells property state invariant jj salsa applied standard strategy compositional strategy verify properties 
standard proof strategy bip rule required total seconds verify properties compositional strategy bcp rule required total seconds 
compositional proof strategy efficient speed minor ccs example small justice approach 
case state property salsa apply compositional strategy mcp fails prove known transition invariant 
example illustrates inherent weakness compositional proof rules mcp bcp cases property proved incrementally proof rule mip bip rule invariant proved compositional strategy invariant case applying compositional proof rule mcp replaced detailed part specification function defining values mode class conjunction invariants produces approximation original specification specification allows additional behaviors invalidate invariant property proved 
cases remedy strengthen invariant dependent variable case ccs dependent variable basis constructing subsystems 
general proof strategies section describes basic reachability properties hold applying parallel composition systems shows special case scr systems automated method constructing state invariants usually produces invariants satisfying left premise bcp mcp rules 
section introduces circular assume guarantee rule applies cases desired properties require proof subsystem depends proof subsystem depends compositional model checking proof cmp rule special case assume guarantee rule 
bcp rule easily derived cmp rule 
reachability invariants proof rules section general rules introduced section hold subsystems necessarily scr systems composition defined conjunction jj 
proof rules apply systems specified lustre reactive modules state languages similar scr 
definition composition subsystems follows reachable states jj reachable 
consequently invariants subsystems invariants composition inv inv jj 
special case scr systems straightforward show decomposition system described section satisfies properties 
decomposition satisfies jj scr specifications easy show left premise bcp mcp rules holds invariant 
case example dependent variable generated invariant definition depends monitored variables ccs additionally depends non monitored variables constraining definitions assumptions invariant generation cd system see section 
assume guarantee rules assume guarantee rule inspired mcmillan rule circular compositional reasoning 
mcmillan rule proving invariance ltl linear time temporal logic properties 
system suppose compatible systems derived constructed method section jj parallel composition 
special case state properties mcmillan rule expressed follows inv jj ltl operator expression means steps implies holds number steps far system history 
intuitively means fails 
proof strategies rely state invariants assuming formula step soundly replaced conjunction assumed state property say 
produces new system 
applying replacement premises mcmillan rule including additional premise hold initially jj produces preliminary assume guarantee rule inv inv inv jj proof rule improved ways include auxiliary state invariants inv inv 
including auxiliary invariants establish relative completeness proof rule proof rule relatively complete failure proof rule means property invariant jj 
generalization verification task easier just ensures necessary transition invariants handled similarly rules transition invariants formally developed 
relative completeness means completeness assumption theorems number theory hold system 
theoretically obtain completeness developing stronger stronger auxiliary invariants aid proof 
assume invariant holds old new states assumed old state 
circularity needs broken place 
mcmillan rule proving general invariant properties improved manner 
improvements result better assume guarantee bag rule inv inv inv inv inv jj note assumed old new states assumed old state 
reducing bag rule special case true true obtain compositional model checking proof cmp rule inv inv inv jj replacing second premise cmp rule manna pnueli basic rule inv produces bcp rule see section inv inv jj general form second premise cmp rule expressed invariant directly suitable model checking 
cmp rule directly amenable theorem proving order formulae transform cmp manna pnueli basic rule obtain order formulae resulting bcp rule 
developed extensive proof rule rules including rules transition invariants may derived 
see appendix details soundness relative completeness proof rules 

verifying practical system cd cryptographic device practical system designed provide cryptographic processing navy radio receiver 
evaluate correctness cd prose specification developed scr specification cd formulated security properties specification satisfy 
scr specification cd moderately complex consisting variables monitored variables mode class terms controlled variables 
lists security properties state properties state property hold scr specification cd 
lists mode invariants invariant generator constructed scr specification cd 
case ccs mode class cd specification partition set dependent variables technique establishes state invariants consider model checking 
name property description key key key stored location key key algorithm loaded location alg 
storage segment backup power unavailable primary power unavailable alarm cd enters alarm mode backup power initialization cd initialization standby standby alarm mode 
alarm required cd security properties name generated invariant description available mode backup power unavailable 
standby standby mode backup power available voltage unavailable device tampered switch true primary power unavailable 
available config config idle mode healthy background true idle backup power voltage primary power available 
available automatically generated invariants cd sets contains mode class contains remaining dependent variables 
systems constructed insection 
conjunction state invariants properties 
theorem proving salsa salsa applied standard proof strategy bip mip rules compositional strategy bcp mcp rules verify cd specification satisfies properties 
verify properties standard strategy bip rule mip rule state property required total seconds compositional strategy bcp mcp required total seconds 
compositional proof strategy approximately times faster non compositional strategy 
symbolic model checking smv applied cmp rule smv compared result smv model checking composition 
theorem proving model checking composition require auxiliary invariant 
due inefficient encoding integers smv necessary reduce size system parameter 
change smv failed finish left run overnight 
easy show data abstraction sound respect properties 
verification smv highly sensitive variable ordering constructing bdds order scr function definitions appear smv specification 
time required model check cd properties composition different bdd orderings different definition orderings varied seconds seconds 
corresponding orderings model checking cmp rule required seconds seconds fastest ordering composition compositional approach significantly faster 
expect similar speed ups verifications scr specifications practical systems model checking theorem proving 
explicit state model checking spin comparison applied compositional verification spin explicit state model checker 
smv represents states system symbolically spin explicitly generates actual states system 
intuitively expect compositional verification bcp slower spin number concrete states increases concrete definitions replaced sets invariants system 
compositional verification cruise control system spin giving sound results generated reachable states slower symbolic model checking 
compositional proof strategy appropriate explicit state model checking try verify cd properties compositional approach spin 
hand efficiency verification achieved smv salsa 
performance verification tools affected number concrete states size formulas encoding state transition system 
invariants generated variable simpler logical expression corresponding tabular definition expected verification invariants usually efficient 

related model checking lustre programs specifications similar specifications scr systems halbwachs introduced compositional model checking proof rule 
earliest general case circular reasoning appeared context safety properties networks processes 
essentially approaches breaking circularity proof depends proof depends 
safety properties suffices show subsystems nonblocking behavior assuming allows subsystem proceed state similarly assuming allows subsystem proceed 
abadi lamport case interleaved processes alur henzinger case synchronous reactive modules ensure behavior placing restrictions types properties may proved 
approach works liveness properties define proof rules explicitly break circularity 
approaches include imposition founded order properties auxiliaries rules involving ltl temporal logic operator 
importance relative completeness incorporated rules auxiliaries described 
related project naval research laboratory compositional verification addressed secure operations language sol toolset 
sol prototype language specification analysis multi agent systems 

preliminary results show compositional approach may easily integrated current scr toolset method verification state transition invariants efficient 
cmu smv model checker salsa theorem prover may applied unchanged prove properties basic compositional proof rule general rule bag rule 
preliminary experiments shown true tame interface pvs theorem prover provided tame performs extra simplification needed applications 
best way incorporate extra simplification tame invariant proof strategy remains determined far significantly better average proof times state invariants achieved tame bcp rule 
plan apply compositional strategy newer symbolic model checkers nusmv cadence smv 
simple task implement decompositions coordination subproofs salsa text processor salsa input specifications convenient incorporate compositional theorem proving tool avoid recompilation textual form multiple times various subsystems 
fact cadence smv includes scripting language coordinating various analyses required performing assume guarantee proofs 
remains problem best decompose system doing compositional verification 
systems examined natural simple decomposition fmg wherem scr dependent variable automatically generated invariants variable 
general multiple sets invariants describing abstractions various variables decompose system 
automate process possible keeping philosophy verification capabilities toolset directly accessible non experts 
developed assume guarantee rule places direct restrictions properties may require user derive necessary auxiliary properties 
need circular rule encountered far scr specifications requirements phase circularity problem phases system development anticipate need circular reasoning requirements specifications 
interesting compare proof strategy reactive modules understand effective practice 
compositional verification strategy applies abstractions performed notably abstractions sound complete 
example salsa automatically employs slicing verification 
additional abstractions performed preparing cruise control specification making smv verification cd system feasible 
proofs may fail compositional approach due difficulty strengthening invariant may outweigh advantages faster verification 
approach verification provided salsa smv supplemented automated generation invariants new approach incorporating compositionality contrasts predicate abstraction refinement approach 
predicate abstraction constructs versions subsystems goal reducing model state space tractable size model checking practical 
lakhnech show theoretical point view approach equally difficult just difficult find strong auxiliary invariants prove property design appropriate predicate abstraction 
iterations strengthening invariants failure compositional approach due approximation analogous failure predicate abstraction approach repeat process refinement current predicate abstraction counterexample returned failed model checking step 
plan investigate methods complement combined verifying requirements specifications expressed scr 
acknowledgments give special nrl colleague archer useful discussions insightful comments 
especially grateful john conducted numerous experiments evaluate compositional proof strategies salsa smv spin tame 
nrl colleague ramesh bharadwaj summer john anonymous reviewers constructive comments 
ramesh bharadwaj steve sims designed implemented salsa 

abadi lamport 
conjoining specifications 
acm trans 
prog 
lang 
sys may 
alur henzinger 
computer aided verification 
draft book manuscript sept 
alur henzinger 
reactive modules 
formal methods sys 
design july 
archer 
tame pvs strategies special purpose theorem proving 
annals mathematics artificial intelligence february 
berry gonthier 
esterel synchronous programming language design semantics implementation 
science computer programming 
bharadwaj 
framework formal analysis multiagent systems 
proc 
formal aspects multi agent systems warsaw poland apr 
etaps 
bharadwaj heitmeyer 
model checking complete requirements specifications abstraction 
automated software engineering journal jan 
bharadwaj sims 
salsa combining constraint solvers bdds automatic invariant checking 
proc 
tools algorithms construction analysis systems tacas berlin mar 
chandy misra 
proofs networks processes 
ieee trans 
softw 
engin se apr 
choi heimdahl 
model checking rsml requirements 
proc 
th ieee int symp 
high assurance sys 
engin 
tokyo japan oct 
cimatti nusmv open source tool symbolic model checking 
proc 
computer aided verification cav copenhagen denmark july 
clarke grumberg peled 
model checking 
mit press 
graf saidi 
construction state graphs pvs 
grumberg editor proc 
th international conference computer aided verification cav volume pages 
springer verlag 
halbwachs 
programming verifying real time systems means synchronous data flow language lustre 
ieee trans 
softw 
engin sept 
heitmeyer 
software cost reduction 
editor encyclopedia software engineering 
sons new york ny second edition 
heitmeyer archer bharadwaj jeffords kirby jr tools tabular specification analysis requirements 
technical report naval research laboratory washington dc 
appear 
heitmeyer kirby labaw archer andr bharadwaj 
abstraction model checking detect safety violations requirements specifications 
ieee trans 
softw 
eng nov 
heitmeyer kirby jr labaw andr bharadwaj 
scr toolset specifying analyzing software requirements 
proc 
computer aided verification th annual conf 
cav vancouver canada 
heitmeyer jeffords labaw 
automated consistency checking requirements specifications 
acm transactions software engineering methodology april june 
holzmann 
model checker spin 
ieee transactions software engineering may 
jeffords heitmeyer 
automatic generation state invariants requirements specifications 
proc 
sixth acm sigsoft symp 
foundations software engineering nov 
jeffords heitmeyer 
algorithm strengthening state invariants generated requirements specifications 
proc 
fifth ieee international symposium requirements engineering aug 
kirby jr example nrl scr software requirements automobile cruise control monitoring system 
technical report tr wang institute graduate studies 
kirby jr archer heitmeyer 
scr practical approach building high assurance system 
proceedings th annual computer security applications conference acsac 
ieee computer society press dec 
lakhnech bensalem owre 
incremental verification abstraction 
margaria yi editors proc 
tools algorithms construction analysis systems tacas number lncs pages 
springer verlag apr 
manna step stanford temporal prover 
technical report stan cs tr stanford univ stanford ca june 
manna pnueli 
temporal verification reactive systems safety 
springer verlag new york ny 
mcmillan 
symbolic model checking 
publishers 
mcmillan 
getting started smv user manual 
cadence berkeley laboratories berkeley ca mar 
mcmillan 
methodology hardware verification compositional model checking 
science comput 
prog 

completeness compositional reasoning 
emerson sistla editors proc 
computer aided verification cav chicago il july 
lncs springer verlag 
parnas madey 
functional documentation computer systems 
science computer programming oct 
pnueli 
transition global modular temporal reasoning programs 
apt editor proc 
nato adv 
study inst 
logics models concurrent systems la sur france oct 
springer verlag 

empirical studies compositional abstraction 
technical report naval research laboratory washington dc 
draft 
sa di shankar 
model check prove 
proc 
computer aided verification cav trento italy july 
shankar owre rushby 
pvs proof checker manual 
technical report computer science lab sri intern menlo park ca 
van 
requirements model reexamination real time systems application monitoring systems 
technical report tr queen univ kingston canada 
appendices scr overview appendix briefly reviews state machine model underlies scr requirements model gives examples tables define values dependent variables scr specifications 
example tables defining values dependent variables ccs specification introduced section 
scr requirements model scr requirements specification describes system environment nondeterministic required system behavior usually deterministic 
environment contains quantities system monitors represented monitored variables quantities system controls represented controlled variables 
environment nondeterministically produces sequence monitored events monitored event signals change value monitored variable 
system represented model state machine begins execution initial state responds monitored event turn changing state 
scr esterel system behavior system completely processes set inputs processing set 
scr contrast esterel allows input change transition input assumption allows monitored variable change state 
state machine model special case parnas variable model uses relations nat req define required system behavior 
nat describes natural constraints system behavior constraints imposed physical laws system environment defines possible values monitored controlled variables 
req defines additional constraints system relations system maintain monitored controlled variables 
specify req concisely scr model contains types auxiliary variables mode classes values called modes terms 
mode equivalence class system states useful specifying required system behavior 
term state variable value depends monitored variables mode classes terms 
scr model represents system state machine states initial state set set monitored events transform describing allowed state transitions 
model transform function maps monitored event current state state function maps state variable monitored controlled variable mode class term type correct value condition predicate defined system state event predicate requiring system states differ value state variable 
value state variable condition changes say event occurs 
notation denotes conditioned event defined def unprimed conditions evaluated current state primed condition evaluated state 
stated section consider system state machine wheres set states boolean initial state predicate boolean nextstate predicate 
define state machine corresponding scr machine represented tuple initial state predicate state true iff state predicate pairs states true iff exists event enabled predicate simply concise way expressing transform events 
scr tables transform composition smaller functions called table functions derived condition tables event tables mode transition tables scr requirements specifications 
tables define values dependent variables controlled variables mode classes terms 
welldefined circular dependencies allowed definitions dependent variables 
variables partially ordered dependencies state values 
table defining term controlled variable condition event table 
condition table associates mode condition state variable value state event table associates mode conditioned event variable value state 
table defining mode class mode transition table associates source mode event destination mode 
formal model requires information table satisfy certain properties 
properties guarantee table describes total function 
illustrate scr tabular notation example tables 
tables define values dependent variables cruise control system specification 
table event table defining term function current mode monitored variables 
second row states system inactive driver changes lever const ignition engine running brake new value equals speed automobile 
row contains dur operator introduced describe time dependent behavior 
row expression dur const true iff length time lever const position exceeds constant 
described dur const occurs lever changed position const having const milliseconds 
row states system cruise conditioned event occurs new value actual speed 
presence third row indicates event change value system override 
table event table defining term table mode transition table defining new value mode class function current mode monitored variables 
example row table states current mode driver turns ignition new mode inactive third row states system inactive driver puts lever const ignition engine running brake system enters cruise mode 
table condition table defining value controlled variable function modes monitored vari table mode transition table defining mode class table condition table defining controlled variable ables term 
row states cruise mode system accelerate automobile desired speed minus constant tolerance exceeds actual speed time lever const exceeds gives similar conditions system decelerate automobile maintain current speed 
second row states modes cruise throttle 
soundness completeness apply manna pnueli basic rule better assume guarantee rule bag section obtain theorem proving assume guarantee tag rule inv inv inv jj stronger stronger soundness rules rules just replaced manna pnueli basic rule follows soundness bag rule 
special case soundness bcp rule follows soundness cmp rule 
similarly completeness rules rules just replaced manna pnueli basic rule follows completeness tag rule 
establish soundness bag rule require lemma stating reachable state jj reachable state system system 
proof lemma straightforward induction number steps initial state reach 

relative completeness tag rule established choosing characteristic predicate set reachable states 
proving completeness tcp rule inv jj 
may expressed equivalently prove holds hold 
initial states system subset reachable states ri substitutions indicated respective follow immediately primed version fact bcp cmp rules complete easily complete additional auxiliary invariants 
