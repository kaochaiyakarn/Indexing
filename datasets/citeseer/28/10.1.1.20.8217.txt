efficient management multiversion documents object referencing shu yao chien vassilis tsotras carlo zaniolo traditional approaches versioning semistructured information edit subsequent document versions represented edit scripts 
proposes version management scheme preserves logical structure evolving document object 
preserving document structure versions new scheme facilitates efficient query support 
particular examine queries involving projections selections document versions queries document evolution history 
show proposed scheme provides effective representation xml documents transport exchange levels 
fact scheme document history viewed processed xml document 
proceedings th vldb conference roma italy advent www abundance semistructured documents stored disseminated different application domains 
documents evolve updates new releases problem document versioning significant interest content providers cooperative information systems general 
various groups recognized importance versions left standards research issues unresolved 
situation creates exciting window research opportunities 
little previous versioning web semistructured documents relevant done applications software configuration management cad systems temporal databases :10.1.1.74.3527:10.1.1.49.4094
problems occurring multiversion documents similar transaction time databases object histories maintained new objects added discarding old ones :10.1.1.52.1431
timestamping provides effective technique deal evolving objects temporal databases version management schemes oodbs designed support documents optimize retrieval complete versions 
sophisticated schemes previously proposed managing semi structured change information include chorel discussed main focus modeling version changes individual objects performance storing retrieving complete documents discussed 
version management schemes software configuration management rcs sccs 
documents evolve updates new releases problem document versioning significant interest content providers cooperative information systems general 
various groups recognized importance versions left standards research issues unresolved 
situation creates exciting window research opportunities 
little previous versioning web semistructured documents relevant done applications software configuration management cad systems temporal databases :10.1.1.74.3527:10.1.1.49.4094
problems occurring multiversion documents similar transaction time databases object histories maintained new objects added discarding old ones :10.1.1.52.1431
timestamping provides effective technique deal evolving objects temporal databases version management schemes oodbs designed support documents optimize retrieval complete versions 
sophisticated schemes previously proposed managing semi structured change information include chorel discussed main focus modeling version changes individual objects performance storing retrieving complete documents discussed 
version management schemes software configuration management rcs sccs 
rcs uses edit approach representing multiple versions evolving textual object 
version current extra processing needed apply reverse editing script generate old version 
symmetric approach problem uses forward editing script original versions stored intact successive versions generated script 
timestamp scheme sccs textual object marked timestamps version number denoting lifespan textual object 
versions retrieved sccs scanning file retrieving valid segments timestamps 
rcs sccs lack sophistication secondary storage management compared transaction time temporal databases developed efficient indexing clustering techniques :10.1.1.74.3527
approach support complex queries queries evolution structure document 
fact today software configuration tools treat document sequence lines text ignoring rich structure document 
requirement web semistructured documents ability versioning scheme support transport multiversion documents applications remote sites 
xml environment play pivotal role 
effective transport level 
scheme allows history document represented regular xml document 

efficient storage level 
achieved extending scheme storage techniques notion page usefulness similar techniques transaction time databases clustering temporal information :10.1.1.49.4094
rest organized follows 
versioning scheme introduced section 
section examines various version related queries efficiently evaluated new scheme 
section discusses transport level support shows scheme xml representation 
versioning scheme introduced section 
section examines various version related queries efficiently evaluated new scheme 
section discusses transport level support shows scheme xml representation 
section propose techniques efficient storage retrieval documents 
compare scheme previous techniques multiversion tree partially persistent list show effectiveness :10.1.1.49.4094
denotes version node denotes element node denotes node denotes attribute node denotes text node instance version model 
scheme previous proposed techniques efficient storage retrieval multiversion documents represented edit schemes :10.1.1.30.2020
soon realized limitations popular version scheme 
fact support queries information split actual database script 
section discusses transport level support shows scheme xml representation 
section propose techniques efficient storage retrieval documents 
compare scheme previous techniques multiversion tree partially persistent list show effectiveness :10.1.1.49.4094
denotes version node denotes element node denotes node denotes attribute node denotes text node instance version model 
scheme previous proposed techniques efficient storage retrieval multiversion documents represented edit schemes :10.1.1.30.2020
soon realized limitations popular version scheme 
fact support queries information split actual database script 
furthermore edit script represents special object easily transport level xml extensions 
representation discussed solves logical problems performance drawbacks version model background 
soon realized limitations popular version scheme 
fact support queries information split actual database script 
furthermore edit script represents special object easily transport level xml extensions 
representation discussed solves logical problems performance drawbacks version model background 
discussion describe changes versions commonly tree edit operations insert subtree delete subtree update content node copy subtree move subtree :10.1.1.45.9173
define element changed ffl textual content updated ffl sub element changed 
unchanged 
maximum unchanged element unchanged parent node changed 
model 
ing selection referenced elements previous version discussion topic take limited scope page count 
evolution history retrieval 
generating evolution history users request important feature version management systems 
typical query retrieve differences version previous version 
typical algorithms computing differences structured documents share phase strategy matching segments versions edit script constructed :10.1.1.45.9173
phase computationally expensive second phase requires bottom breadth search versions 
model phase longer necessary information embedded denotes matching segment 
generating version difference requires pass bottom breadth search version previous version 
summary provides excellent basis supporting assortment queries different types typical versioned xml documents 
easy maintain hashing scheme 
object insertion hashing scheme finds integer associated position insertion tree updated 
deletions similarly 
note deleted integers reused 
various approaches making tree partially persistent :10.1.1.74.3527:10.1.1.49.4094
exper version id list array sa sa sa sa sa sa artificial entry partially persistent list example 
mvbt code publicly available 
mvbt directed acyclic graph embeds trees :10.1.1.49.4094
number root nodes root provides access subsequent versions ephemeral tree evolution 
note deleted integers reused 
various approaches making tree partially persistent :10.1.1.74.3527:10.1.1.49.4094
exper version id list array sa sa sa sa sa sa artificial entry partially persistent list example 
mvbt code publicly available 
mvbt directed acyclic graph embeds trees :10.1.1.49.4094
number root nodes root provides access subsequent versions ephemeral tree evolution 
temporal access methods appends data records lifetime intervals form insertion version record valid versions lifetime interval 
records clustered pages indexing attribute values key space lifetime interval version space 
index records appended lifetime intervals 
exception root pages page useful long valid records page capacity 
inserting deleting object version performed searching mvbt target leaf page change applied 
search similar ephemeral tree takes account lifetime intervals index records page valid reached 
page non useful version split key split performed valid records page moved useful pages 
due space limitations details mvbt splitting merging policies refer :10.1.1.49.4094:10.1.1.49.4094
space mvbt log chg version objects mvbt reconstructs log chg :10.1.1.49.4094
utilizing partially persistent list notion partially persistent list discussed presents list list structure collection pages contain versions data records clustered oid :10.1.1.74.3527:10.1.1.74.3527
list solves different query oid version interval find versions oid interval 
interested query version number reconstruct list version 
inserting deleting object version performed searching mvbt target leaf page change applied 
search similar ephemeral tree takes account lifetime intervals index records page valid reached 
page non useful version split key split performed valid records page moved useful pages 
due space limitations details mvbt splitting merging policies refer :10.1.1.49.4094:10.1.1.49.4094
space mvbt log chg version objects mvbt reconstructs log chg :10.1.1.49.4094
utilizing partially persistent list notion partially persistent list discussed presents list list structure collection pages contain versions data records clustered oid :10.1.1.74.3527:10.1.1.74.3527
list solves different query oid version interval find versions oid interval 
interested query version number reconstruct list version 
answer query take list structure maintains document logical order partially persistent 
search similar ephemeral tree takes account lifetime intervals index records page valid reached 
page non useful version split key split performed valid records page moved useful pages 
due space limitations details mvbt splitting merging policies refer :10.1.1.49.4094:10.1.1.49.4094
space mvbt log chg version objects mvbt reconstructs log chg :10.1.1.49.4094
utilizing partially persistent list notion partially persistent list discussed presents list list structure collection pages contain versions data records clustered oid :10.1.1.74.3527:10.1.1.74.3527
list solves different query oid version interval find versions oid interval 
interested query version number reconstruct list version 
answer query take list structure maintains document logical order partially persistent 
ephemeral list elements 
sequence elements list version aim reconstruct accessing pages useful version achieved maintain list useful pages mvbt page useful version long valid records version assume version stored sequentially pages 
deletions arrive pages non useful copied 
copying needs maintain list logical order relative positions list elements 
insertions happen list space needed inside page insertions 
problems solved splitting merging policies mvbt :10.1.1.49.4094
list reconstruction starts top element list page identified version 
list page version second page version located 
appendix solution problem utilizes small arrays pointers called sa arrays 
shown partially persistent list maintains linear space 
new scheme effective transport level history document represented regular xml document 
enhanced scheme notion page usefulness technique objects version clustered data pages 
showed experimentation scheme performs better competitors modified mvbt persistent list 
introduces versioning scheme semistructured documents theoretically sound practically effective storage query transport levels 
becker seeger widmayer asymptotically optimal multiversion tree vldb journal vol :10.1.1.49.4094
pp 

generalized version control object oriented database ieee fourth international conference data engineering feb 
garcia molina representing querying changes semistructured data proc 
generalized version control object oriented database ieee fourth international conference data engineering feb 
garcia molina representing querying changes semistructured data proc 
international conference data engineering pp 

chawathe rajaraman molina widom change detection hierarchically structured information proc :10.1.1.45.9173
acm sigmod pp 

:10.1.1.30.2020
chien tsotras zaniolo version management xml documents webdb workshop dallas tx 

chawathe rajaraman molina widom change detection hierarchically structured information proc :10.1.1.45.9173
acm sigmod pp 

:10.1.1.30.2020
chien tsotras zaniolo version management xml documents webdb workshop dallas tx 
sleator tarjan making data structures persistent journal comp 
syst 
sciences vol pp 
rcs system version control software practice experience july pp 

tsotras snapshot index optimal access method timeslice queries information systems international journal vol 

verma efficient multiversion access structure ieee trans :10.1.1.74.3527
knowledge data engineering vol pp 
world wide web consortium xml path language xpath version 
nov 
see www 
