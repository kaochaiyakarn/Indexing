predicate migration optimizing queries expensive predicates joseph hellerstein 
traditional focus relational query optimization schemes choice join methods join orders 
restrictions typically handled query optimizers predicate pushdown rules apply restrictions random order joins possible 
rules assumption restriction essentially zero time operation 
today extensible object oriented database systems allow users define time consuming functions may query restriction join predicates 
furthermore sql long supported subquery predicates may arbitrarily time consuming check 
evaluating predicate requires executing arbitrary query scanning result matches operation arbitrarily expensive depending complexity size subquery 
subquery predicates converted joins subject traditional join optimization strategies sophisticated sql rewrite systems starburst convert subqueries joins 
forced compute subquery order evaluate predicate predicate treated expensive function 
applicable majority today production rdbmss support sql 
related stonebraker raised issue expensive predicate optimization context postgres multi level store sto :10.1.1.68.4262
questions posed stonebraker directly addressed vary slightly definition cost metrics expensive functions 
main applications system described sto project sequoia sd university california project manage terabytes geographic infor mation system gis data support global change researchers 
expected researchers writing queries expensive functions analyze data 
benchmark queries 
questions posed stonebraker directly addressed vary slightly definition cost metrics expensive functions 
main applications system described sto project sequoia sd university california project manage terabytes geographic infor mation system gis data support global change researchers 
expected researchers writing queries expensive functions analyze data 
benchmark queries 
ibaraki kameda ik krishnamurthy boral zaniolo kbz swami iyer si developed refined query optimization scheme built notion rank :10.1.1.76.1079
scheme uses rank reorder joins restrictions 
techniques consider possibility expensive restriction predicates reorder nodes single path left deep query plan tree technique optimizes paths arbitrary tree 
furthermore schemes proposal completely new method query optimization extension applied plans query optimizer 
possible fuse technique develop ik kbz si focus issue schemes widely 
introduce function postgres user writes function compiles issues postquel define function command 
capture expense information define function command accepts number special flags summarized table 
cost predicate postgres computed adding costs expensive function expression 
postgres predicate expense tuple recursively defined cpu cpu byte pct bytes access cost function constant tuple variable recursively computed expense argument bytes expected return size argument bytes access cost cost retrieving data necessary compute function 
data may stored various levels postgres multi level store sto require user define constants specific repeated applications function collect performance statistics curve fitting techniques estimates function behavior :10.1.1.68.4262
techniques scope 
different levels multi level store 
computed postgres system statistics providing accurate information distribution caching data storage levels 
cost sql subqueries query language functions sql allows variety subquery predicates form expression operator query 
cases primary join predicates fact decrease number distinct values passed function 
see function caching pulling restrictions joins increase number function calls decrease number 
current sql systems support arbitrary caching results evaluating subquery predicates 
benefit techniques described sql system enhanced caching duration query 
interesting note original optimizing discussed hel done functions functions calculate time day :10.1.1.20.9548
functions unusual result ill defined queries answer queries dependent order tuples scanned non deterministic relational systems 
table function expense parameters postgres table tuple size tuples maps weeks emp dept table benchmark database sql queries system sac description limited form caching correlated subqueries 
system saved materialization correlated subquery evaluation subsequent tuple values columns referenced subquery predicate evaluated scanning saved materialization subquery 
system cache single materialization subquery cache result subquery predicate 
represent subsequent non index predicates subscript predicate represents place order predicates applied tuple base table 
represent expense predicate selectivity assuming independence distinct predicates cost applying non index predicates output scan containing tuples lemma demonstrates cost minimized simple sort predicates 
lemma cost applying expensive restriction predicates set tuples minimized applying predicates ascending order metric rank selectivity cost tuple restrict week restrict channel restrict coverage picture scan emp plan rank rank rank restrict coverage picture restrict week restrict channel scan emp plan execution plans example rank rank rank proof 
results directly done smith smi job scheduling 
reviewed database context han ik kbz hel :10.1.1.20.9548:10.1.1.76.1079
intuitively ordering gives priority execution restrictions low selectivity low cost 
reduces number tuples processed expensive predicates 
see single table queries predicates optimally ordered simply sorting rank 
swapping position predicates equal rank effect cost sequence 
termination predicate migration algorithm produces tree stream ordered optimally ordered subject precedence constraints 
proceed prove predicate migration algorithm guaranteed terminate polynomial time prove resulting tree ordered streams represents optimal choice predicate locations plan tree 
theorem plan tree input predicate migration algorithm guaranteed terminate polynomial time producing join order equivalent tree stream semantically correct ordered 
proof 
proof appears hel deleted due space constraints :10.1.1.20.9548:10.1.1.20.9548
develops conservative upper bound algorithm running time number nodes plan tree 
theorem demonstrates predicate migration algorithm terminates ms assures stream resulting tree ordered 
sufficient establish optimality algorithm output prove resulting tree ordered streams minimal cost tree 
guaranteed theorem plan tree unique join order equivalent plan tree semantically correct streams 
guaranteed theorem plan tree unique join order equivalent plan tree semantically correct streams 
minimal cost tree join order equivalent semantically correct 
proof 
deleted due space constraints 
appears full hel :10.1.1.20.9548
theorems demonstrate predicate migration algorithm produces desired minimal cost interleaving predicates 
simple illustration efficacy predicate migration go back example 
illustrates plans generated query postgres running predicate migration 
performance measurements plans appear table 
theorems demonstrate predicate migration algorithm produces desired minimal cost interleaving predicates 
simple illustration efficacy predicate migration go back example 
illustrates plans generated query postgres running predicate migration 
performance measurements plans appear table 
implementation measurement predicate migration algorithm pruning optimizations described hel implemented post generation dbms optimizer system addition predicate migration postgres fairly straightforward requiring slightly person month programming :10.1.1.20.9548
implementation consists files containing total lines statements language code 
clear enhancing optimizer support predicate migration fairly manageable task 
ease implementation potential benefits standard sql extensible query languages belief predicate migration worthwhile addition dbms 
motivate examples model sql queries natural run commercial dbmss 
jhingran 
performance study query optimization algorithms database system supporting procedures 
proc 
vldb pro 
kbz ravi krishnamurthy boral carlo zaniolo :10.1.1.76.1079
optimization nonrecursive queries 
proc 
th international conference large data bases pages kyoto august 
guy lohman dean daniels laura haas ruth kistler patricia selinger 
