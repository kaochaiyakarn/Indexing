architecture pervasive computing martin ilya matthew phillip ramachandran college computing georgia institute technology atlantic drive nw atlanta ga usa reason rama cc gatech edu distributed framework designed support pervasive computing applications 
specifically architecture consists transport engine peripheral clients addresses issues scalability data sharing data transformation platform heterogeneity 
key features type aware data transport capable dynamically transforming data en route source sinks extensible system describing types streaming data interaction transformation engine type system 
details architecture implementation 
experimental study show reasonable performance selected streaming media intensive applications 
example relative baseline tcp performance incurs latency overhead achieves roughly tcp throughput streaming items larger kb infrastructure 

proliferation special purpose computing devices sensors embedded controllers handhelds wearables smart phones power constrained laptops marks departure established tradition general purpose desktop computing 
disparity computation communication capabilities smallest network aware device highperformance cluster machine grid hardware continuum rapidly increasing 
vision pervasive computing suggests inclusion devices spanning entire hardware continuum 
major challenge developing efficient pervasive applications finding right framework ease construction 
search solution investigate concrete applications currently researched smart space domain :10.1.1.24.6338
consider family intercom application sensors including microphones speakers attached desktop computers wireless mobile devices distributed smart space 
user location tracking performed series cameras relay location information user interface form sensor 
users actuate commands connect speakers microphone audio streams initiate conversations 
disparate applications accessing similar resources facility share resources 
camera track people family intercom record scene application 
complex pervasive applications family intercom require acquisition processing synthesis correlation streaming high bandwidth data audio video low bandwidth data user interface sensor 
application may distinct non overlapping requirements common goal bridging heterogeneous platforms provide uniform predictable means data distribution warrants infrastructure level support 
consequently infrastructure accommodate loss generality device types regardless breadth purpose provide means terms functionality corresponding apis develop variety distributed applications 
contributions architecture design addressing data typing transformation data sharing requirements implementation proposed architecture performance analysis implementation 
rest organized follows 
discuss requirements target applications section 
architecture section imple proceedings second ieee annual conference pervasive computing communications percom ieee mentation section 
survey related section 
analyze performance implementation section conclude findings section 
requirements requirements architecture follow directly environment operates sample application listed 
applications highly connected smart spaces encompass sensors demand scalability underlying infrastructure 
high bandwidth audio video streams part applications require system support high throughput low latency transport convenient stream abstraction 
dynamism involved allowing sensors actuators join leave system runtime demands high degree adaptability underlying infrastructure 
core requirements scalability low latency high throughput adaptability 
diversity devices application space observe facility transforming data en route important 
major requirements support transformation common type language describing transported data meaningful organization transform functions applied data flexible stream abstraction data transfer allows data sharing uniform api spanning entire hardware continuum 

core requirements scalability requirement important requirement distributed application especially true application space large number devices may simultaneously underlying architecture behalf concurrent applications 
expectation viable distributed runtime give performance accommodate increase number active devices 
terms throughput data produced faster transferred throughput bottleneck 
adaptability entails distinct requirements 
assumes ability devices establish new destroy existing communication channels runtime maintaining system consistency stability 
instance user may choose leave intercom session point time 
system continue uninterrupted disturbances 
adaptability refers architecture ability shift gears consuming party request 
consuming client may request share data stream consuming party receive data lower fidelity 
architecture adaptable accommodate runtime change media sink requests 

common type language organization data transforms consider applications available sensors embedded controllers attached camera devices 
desired outcome system able utilize camera sensors regardless feature set camera model may produce video different formats resolutions frame rates color spaces 
inherent diversity devices data streams may produced consumed calls standard highly flexible facility composing data type descriptions 
important requirement proposed infrastructure language enabling definition exchange type properties 
selection standard way describe data types eases implementation data transformation logic 
type descriptions provide necessary context transform type meaningful serve unique tags implementation archive retrieve type transform functions 

underlying transport abstraction prevalent pattern data production application space stream 
camera device microphone primitive sensor viewed producing data streams 
case video audio streams data stream meaningful consumer long data received exactly order produced timely manner 
proposed architecture support notion stream offer stream api application relies data streaming functionality 

providing uniform flexible api successful solution undoubtedly include api portable different platforms transports 
portability ensure distributed system utilized maximum number devices architectures 
turn flexible api enable large number applications built minimum effort retaining data access semantics variety platforms 
proceedings second ieee annual conference pervasive computing communications percom ieee media broker server media broker engine data broker producer client data broker colocated client 
data broker 
colocated client data broker consumer client colocated client 
stacking data brokers clients data broker 
overview architecture 
architecture 
overview principal components mb architecture clients transport transformation engine type system facility name server 
type system name server form foundation higher level components client engine depend 
employ term client describe entity acts media source data producing media sink data consuming 
demonstrates basic data flow clients transport engine 
making client api available engine enable colocated clients share computational resources engine 
diagram produces engine colocated client consume stream 
colocated client takes data modifies redistributes 
negotiation data types takes place mb engine requests type compatible colocated client request 
core mb engine collection data brokers 
data broker execution context mb engine transports data media source media sinks 
essentially data broker satisfies data sharing requirement outlined 
addition data broker responsible type negotiation media source media sinks attached 
instance address issue multiple media sinks requesting data media source multiple formats 
important note data brokers clients stacked top 
demonstrates stacking colocated distributed clients data brokers 

clients multiple sinks allowed single client instance client perform simple data aggregation 
fact mb client api permits client instantiate terminate number media sinks media sources 
seen single colocated client media sink media source consumes data produces data 
new source instantiated client mb allocates new data broker binds newly instantiated media source 
media source relies dedicated data broker system scale long computing communication facilities exist new data broker media source pair 
new sink instantiated client bound existing data broker 

engine important piece engine functionality allowing new clients join leave runtime 
new client begins connecting mb engine 
engine client connection establishes command channel client associates listener entity channel 
client decides introduce new media source signals listener accordingly 
point non volatile attributes describing source media name provided client engine 
listener creates data broker connecting media source notifies client success supplies source handle data broker 
time listener creates mapping resources allocates behalf new producer stores resources name server 
likewise client creates new sink transfers sink attributes listener 
fundamental distinction media sinks provide name media source want consume 
source name listener queries name server find corresponding data broker 
success proceeds notify data broker addition media sink communicating data broker handle back newly attached sink 

data broker high level view data broker 
data broker monitors status attached media source commands attached media sinks 
defer description type system section source status sink commands formatted proceedings second ieee annual conference pervasive computing communications percom ieee mb client data media broker server data broker data mb client domain text data char set unicode compression false parent child sibling command status status command domain text data char set ascii compression false domain text data char set unicode compression true comp type gz domain text data char set unicode compression true comp type zip 
data broker source sink data type 
status signifies provided data type commands signify data type requested 
data broker goal rectify source status sinks commands 
data broker achieves goal finding upper bound lub types data requested media sinks 
lub type data broker communicates producer command channel expecting produce 
data broker performs necessary data transformations lub type types demanded data sinks 
essentially data brokers satisfy data sharing data transformation requirements outlined section 
channels type negotiation depicted 
observe distinct scenarios runtime adaptability system occurs 
scenario prompted media sink stating command consume data new type 
data broker attempts adaptation providing new requested type media sink soon possible 
new media sink command output media sink paused new lub type calculated appropriate transformations need applied new lub type determined 
scenario involves media source changing status type effect pausing sinks lub type recalculated transformations need applied satisfy sink request 
scenarios imply media sinks paused data broker effects required adaptation 
quantitative measure adaptation latency section 
type system define convenient language describing data types relations type transformations 
type defined tuple type domain set type attributes 
type domain refers higher level description type 
instance types pcm audio data belong domain 
type attribute consists attribute name domain text data char set ascii compression true 
sample type map attribute value 
attribute name arbitrary ascii string attribute value value attribute 
shows sample data types 
type map bearing strong resemblance type lattices data structure describing relationships various data types 
types connected directed edges 
type map consists non empty set types designated root types collection directed edges 
define types edges parent child sibling 
root types defined parent child edges 
root type parent edges highest type root type child edges lowest type 
path defined sequence edges 
formed type map path types 
shows simple type map consisting data types 
normally type map information interpreted follows 
highest type best quality type data producer capable supplying 
likewise lowest type worst quality type data 
quality left intentionally vague 
instance applications may choose equate lowest quality resource consuming highest quality exactly opposite 
supports notion quality 
edges connecting types signify data converted type 
media source provides type map representation data types capable producing 
likewise engine contains set default type maps specify possible transformations performed engine 
media source throttle amount transformations performs reducing size type map letting engine perform rest default type map 
supplying comprehensive type maps encompassing possi proceedings second ieee annual conference pervasive computing communications percom ieee ble types engine media source normally required manipulate data arrive lub type relieved 

name service name server crucial component framework simplifies maintaining mapping producer consumer names computation resources data structures associated runtime 
functionality components depends name server containing reliable information write access name server restricted mb engine external clients read access 

implementation 
overview mb architecture implemented main pieces engine written running cluster machines single machine mb client library written clients distributed system 
implemented top stampede distributed computing system mb gains stampede abstractions allow ordering data channels provide streaming support uniform api number computing platforms aforementioned hardware continuum 
stampede implemented top reliable transport layer mb implementation contains bindings stampede allowing portability transport framework long offers stream semantics transferring data uniform api multiple heterogeneous devices 
stampede inherits functionality stampede system includes powerful clustering component enables mb engine effectively high performance cluster machines cpu intensive transformations applied high bandwidth low latency streams appealing colocated clients 

engine master thread delegating connecting clients listener threads 
listener thread authority instantiate data broker threads notify data broker threads information new clients instantiate internal threads dynamically loaded application code 
internals data broker shown 
data broker set threads consisting transport thread command thread lub thread source watch thread sink watch thread 
threads necessary stampede mb client ata command status media broker server data broker transport thread lub thread source watch thread sink watch thread message data status mb client 
data broker internal implementation facility polling multiple interfaces newest data 
thread transfers data source sink transforming necessary 
command thread blocks command channel listens server listener threads messages adding removing sources sinks 
lub thread waits sink updates status calculates optimal data type request source requests 
source watch sink watch threads block sinks sources update commands statuses 
respective watch thread updates appropriate structures data transformations thread uses transform data moves source sink 

client library mb client library written top stampede 
library leverages stampede client api 
fact calls map directly corresponding stampede api calls 
library includes standard calls initiating clients media sources sinks calls manipulating type maps type descriptions 
detailed discussion mb client library api scope 

types type maps mb type library written part client library mb engine 
types implemented simple structures sets implemented linked lists types associated memory pointers 
data structure relies pointers traversal library supplies functions serialization type maps pointer free architecture neutral representation marshaling network 
type system api part client library allows construction types type maps comparison individual types type map traversal 
mb api header file may www cc gatech edu media broker api proceedings second ieee annual conference pervasive computing communications percom ieee type system api includes algorithm finding lub type 
shared type information objects dynamically loadable shared libraries 
runtime default type maps corresponding transformation functions loaded demand media sources media sinks require 

name server directory server implementation lightweight directory access protocol name server 
features readily available open source implementation scalability replication enhanced security features ability extend existing schemas lead ldap natural selection 
scalability ldap particularly important application domain 
process integrating ldap server runtime intention remain name server agnostic 
small ldap interface library provided convenient translation structures ldap entries 
arguably little effort expended port mb alternative name server implementation 

supporting heterogeneity designing system provide common interface continuum devices heterogeneity paramount 
fortunately stampede serves core implementation instance ported architectures including arm popular embedded device space 
result able support clients running low powered compaq ipaq handhelds wireless connections alongside high performance clusters data manipulation 

related stampede developed cluster parallel programming runtime interactive multimedia applications 
stampede focus provide efficient management temporally evolving data buffer management inter task synchronization meeting real time constraints 
features stampede include cluster wide threads consistent distributed shared objects 
stampede extends stampede programming semantics distributed environment spanning devices sensors back clusters 
stampede simply temporally ordered transport mechanism recognizes types data flowing stampede channels built mechanism type transformations 
transcoding usually performed suit specific requirements receiving device conserve network resources 
project shares similarities mb project targeting exact set requirements exception strong data typing facility 
time emphasizes transcoding useful technique facility similar mb extensible type system 
focus active networks concept similar transcoding albeit implemented ip level :10.1.1.17.2974
active networks originator data packet specify need applied data en route 
mb applies concept higher level abstraction allowing execution complex transformations 
aura odyssey projects aim designing comprehensive infrastructure pervasive computing include provisions runtime application adaptation deal unanticipated shortage resources type transformation variety facilities masking uneven conditioning :10.1.1.24.6338
adaptation application behavior dynamic conditions addressed 
focus mb different addresses problem overcoming complexity multi format data transformations similar tom project allowing effective data sharing multiple sinks 
implies multiple applications operate single smart space mb facilitates sharing device applications commensurate advertised capabilities device 
type description languages recognized technique structure provide context transcoding functions 
aware architecture employs type map approach deal transcoding complexity 
done terms constructing transcoding pipelines specifically context graphics subsystems 
mechanisms currently confined single host 
diverse application level data sharing approaches proposed :10.1.1.35.1680:10.1.1.19.7440
proliferation explained part difficulty associated configuring deploying de facto ip multicast typical ip network 
generally find open challenge especially domain pervasive computing 

performance analysis results experiments testing mb implementation section 
understand basic costs api calls results proceedings second ieee annual conference pervasive computing communications percom ieee benchmarks 
api costs data movement costs relative baseline tcp costs 
understand implementation supports scalability respect number sources sinks similar data movement costs scenarios 
analyze fast data broker implementation respond type adaptations sink source 
set experiments show implementation provides reasonable support application space 
tests ldap name server runs machine ghz pentium iv processor kb cache mb memory 
name server runs redhat linux linux kernel 
noted tests run machines equipped quad ghz intel xeon processors kb cache access gb shared memory 
test machines run redhat linux smp kernel installation 
test machines connected switched mb ethernet 
name server located switch lan 
api call time seconds std 
dev 
mb init producer mb destroy producer mb init consumer mb destroy consumer table 
normalized benchmarks 
micro measurements table show costs mb connect mb disconnect connect disconnect clients mb 
examine mb init source mb destroy source mb init sink mb destroy sink create destroy media sources sinks respectively 
name server api costs low normalized mb client api costs independent name server implementation 
normalization subtracting call time name server calls mb api call 
costs depicted expected implementation 
example mb init source involves creation threads allocation stampede data abstractions 
client api benchmarks demonstrate system supports applications dynamically allocate deallocate sources sinks frequency tens second 
supports application space family intercom allocate deallocate source sink streams human speeds 
benchmarks colocated clients regular clients band communication mechanisms 

data movement costs establish mb viable implementation support streaming data media sources media sinks target applications mb exhibit ability move data low latency high throughput 
experiments follow latency half time required sending item source sink back throughput measured system devoted entirely streaming items source sink quickly possible 
vary sizes test items exponentially byte mb 

isolating engine overhead majority engine overhead data broker routing transforming data sources sinks 
examine engine overhead factor network test latency throughput communication single host 
versions data transfer single host source sink mb source sink colocated clients running internal mb engine address space source sink mb source sink running externally directly source sink transferring data solely tcp ip baseline comparison 
figures show latencies throughput associated various item sizes test scenarios 
item sizes increase mb latency increases faster baseline tcp latency mb api involves round trip time innate request response semantic underlying stampede api 
transmission item internal mb source internal mb sink involves round trip times data broker transport thread scheduling 
overheads low relative tolerance application space latency 
example second khz single channel bit audio data approximately kb measurements indicate latency seconds 

engine overhead network introducing network previous experiment hope show overhead mb imposes data transfer minor relative overhead imposed limitations network communications 
sink mb machines source sink relay implemented solely tcp ip machines 
proceedings second ieee annual conference pervasive computing communications percom ieee internal mb external mb tcp latency milliseconds latency milliseconds kb mb packet size bytes tcp kb mb packet size bytes 
latency data transfer varying sized items single host 
latency data transfer varying sized items relayed hosts throughput mbits second internal mb external mb tcp throughput mbits second kb mb packet size bytes tcp kb mb packet size bytes 
throughput data transfer varying sized items single host 
throughput data transfer varying sized items relayed hosts figures show latencies throughput associated various item sizes test scenarios 
network introduced throughput latency measurements parallel tcp baselines quite 
aforementioned audio load easily handled throughput capabilities 
furthermore low resolution fps uncompressed video formats fit bandwidth 

testing scalability test scalability mb implementation experiments testing mb ability perform numerous sources sinks local engine host connected system 
performance transfer degrade gracefully limited proces sor memory bus resources shared multiple sources sinks 

sink stream scaling situations multiple sinks drawing single source need ensure system performance degrades gracefully sinks added 
run experiment single source sending latency throughput information shown 
application space sources data needs shared multiple sinks 
example applications may want share media stream centrally located microphone 
mb performance degrades gracefully data broker distributes sinks 
proceedings second ieee annual conference pervasive computing communications percom ieee latency milliseconds throughput mbits second latency number sinks sink throughput total system throughput number sinks latency milliseconds throughput mbits second latency number source sink pairs source sink throughput total system throughput number source sink pairs 
fan scaling latency throughput data transfer single 
parallel scaling latency throughput data transfer sources sinks single uniprocessor host 
data broker scaling mb implementation scale multiple data brokers instantiated serve media source data media sinks 
instantiating sources sending sinks single engine host hope show linear performance degradation 
test varying number sources sending kb packets distinct sinks 
results clearly latency throughput information shown result running experiment machine single pentium iv processor 
machine equipped kb cache gb memory 
find graceful linear degradation source sink pairs added 

type adaptation latency discussed section necessity occasionally pause data broker 
examine latency imposed data streams pause context different scenarios media source changes data type media sink requests new data type 
order perform tests null data transforming logic data broker measure latency transfers 
measure adaptation latency media sink instantiate source sink 
sink requests data type simple text type map shown source produces data highest type 
iterations source sink transfer sink randomly changes data type requesting source order measure time data broker takes recalculate transformation logic sink 
average latency resulting recalculation seconds 
similar sink type adaptation sources may change data type produce 
order isolate time required stabilize system media source status change modify sink type adaptation experiment source randomly changes produced data type updates status iterations 
average latency resulting source type recalculation seconds 

mb architecture application domain pervasive computing 
motivated architecture examining requirements applications common smart spaces 
particular discussed key features architecture type aware data transport capable transforming data extensible system describing types streaming data interaction 
demonstrated performance implementation sufficient streaming media applications 
proceedings second ieee annual conference pervasive computing communications percom ieee 
acknowledgments funded part nsf itr ccr nsf ccr hp compaq cambridge research lab project state georgia georgia tech broadband institute 
equipment experimental studies funded part nsf research infrastructure award eia intel help previous prototyped mb architecture design implementation 
paul ramachandran 
stampede distributed programming system ubiquitous computing 
proceedings nd international conference distributed computing systems icdcs vienna july 
ait kaci boyer lincoln nasr 
efficient implementation lattice operations 
programming languages systems 
amir mccanne zhang 
application level video gateway 
proceedings acm multimedia san francisco ca 
brewer 
network architecture heterogeneous mobile computing 
ieee personal communications magazine oct 
chawathe mccanne brewer 
architecture internet content distribution infrastructure service feb 
unpublished 
cheng garlan sousa steenkiste hu 
software architecture adaptation pervasive systems 
arcs pages 

chu rao zhang 
case system multicast 
proceedings acm sigmetrics pages santa clara ca june 
acm 
de lara wallach zwaenepoel 
puppeteer component adaptation mobile computing 
proceedings rd usenix symposium internet technologies systems san fransisco ca mar 
fisher gruber 
pads processing arbitrary data streams 
proceedings workshop management processing data streams san diego california june 
garlan 
tom server main page edison srv cs cmu edu 
garlan siewiorek andp steenkiste 
project aura distraction free pervasive computing 
ieee pervasive computing 
jain 
art computer systems performance analysis 
john wiley sons 
jannotti gifford johnson kaashoek james toole 
overcast reliable multicasting overlay network 
knudsen 
java graphics 
reilly associates 
mccann chandra 
packet types specification network protocol messages 
proceedings acm sigcomm stockholm sweden august 
nikhil ramachandran rehg halstead joerg 
stampede programming system emerging scalable interactive multimedia applications 
proceedings th international workshop languages compilers parallel computing 
noble satyanarayanan narayanan flinn walker 
agile adaptation mobility 
proceedings sixteenth acm symposium operating systems principles pages saint malo france 
shi verma waldvogel 
almi application level multicast infrastructure 
proceedings rd symposium internet technologies systems usits pages san francisco ca usa mar 

programming microsoft digital video television 
microsoft press 
ramachandran 
system architecture distributed control loop applications extended 
proceedings th international workshop trends distributed computing systems san juan puerto rico may 
ramachandran nikhil harel rehg knobe 
space time memory parallel programming abstraction interactive multimedia applications 
proceedings principles practice parallel programming pages 
satyanarayanan :10.1.1.24.6338
pervasive computing vision challenges 
ieee personal communications pages aug 
shankar brad fox 
portability extensibility robustness iros 
proceedings ieee international conference pervasive computing communications percom dallas fort worth tx 
tennenhouse smith wetherall 
survey active network research 
ieee communications magazine 
tennenhouse wetherall 
active network architecture 
computer communication review 
howes 
rfc lightweight directory access protocol mar 
proceedings second ieee annual conference pervasive computing communications percom ieee 
