heuristic randomized optimization join ordering problem michael steinbrunn guido moerkotte kemper universitat passau universitat fur mathematik fur und informatik informatik iii passau germany germany kemper steinbrunn db uni passau de pi informatik uni de developments database technology deductive database systems rise demand new cost effective optimization techniques join expressions 
different algorithms compute approximate solutions optimizing join orders studied traditional dynamic programming techniques appropriate complex problems 
possible solution spaces space left deep bushy processing trees respectively evaluated statistical point view 
result common limitation processing trees advisable certain join graph types 
basically optimizers classes analysed heuristic randomized genetic algorithms 
extensively respect working principle fitness desired application 
regard resembles ingres decomposition strategy wy strategy considers operands cardinalities minimum selectivity heuristic selectivity factor oe join gamma achieve small intermediate results 
set relations joined divided subsets set relations incorporated intermediate result denoted initially empty set relations joined intermediate result denoted remaining initially consists set relations 
step algorithm relation remaining lowest selectivity factor oe fi fi fi fi fi gamma gamma ru fi fi fi fi fi jr delta fi fi fi fi fi gamma ru fi fi fi fi fi function inputs rels list relations joined outputs pt processing tree pt nil pt nil relation smallest cardinality pt ffl ffi fi fl relation rels smallest selectivity factor join pt pt omega omega pt ffl ffi fi fl gamma rels rels rels return pt algorithm minimum selectivity joined far intermediate result moved remaining shows complete algorithm left deep processing trees 
krishnamurthy boral zaniolo algorithm foundation law ms ibaraki kameda showed ik possible compute optimal nesting order polynomial time provided query graph forms tree cycles cost function member certain class 
result krishnamurthy boral zaniolo developed kbz algorithm called kbz algorithm computes optimal solution tree query time number joins :10.1.1.76.1079
step relation plays turn role root query tree 
roots tree linearized means ranking function establishes optimal evaluation order particular root 
linearized tree obeys tree order words parent node placed son nodes 
evaluation order lowest cost result algorithm 
text return chain auxiliary function function kbz inputs outputs join order tree minimum spanning tree forall node tree lin node undo normalization cost cost lin cost lin cost return kbz algorithm main function kbz procedure carried relation join graph acting root node 
sequence lowest total cost result optimization 
algorithm extended general cyclic join graphs straightforward way reducing query graph minimal spanning tree kruskal algorithm 
weight join graph edges determined selectivity appropriate join minimal spanning tree determined tree lowest product edge weights sum edges weights usual applications kruskal algorithm 
extension suggested kbz :10.1.1.76.1079
join graph cyclic result longer guaranteed optimal heuristic approximation 
speak kbz algorithm sections refer extension computation minimal spanning tree join graph 
due working principle kbz algorithm requires assignment join algorithms join graph edges optimization carried 
requirement restrictions concerning cost model main drawbacks kbz algorithm 
query optimization simulated annealing 
proc 
acm sigmod conf 
management data pages san francisco usa may 
kbz krishnamurthy boral zaniolo :10.1.1.76.1079
optimization nonrecursive queries 
proc 
conf 
large data bases vldb pages kyoto japan 
