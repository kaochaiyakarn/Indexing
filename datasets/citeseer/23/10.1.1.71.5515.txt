comparison global partitioned edf schedulability tests multiprocessors tr theodore baker florida state university dept computer science fl usa baker cs edu compares performance variations edf global partitioned multiprocessor scheduling algorithms associated feasibility tests variety pseudo randomly chosen sets sporadic tasks 
new hybrid edf scheme shown perform better previously studied priority global scheduling schemes edf fit partitioned scheduling 
trends microprocessor design drawn interest multi core multiprocessor designs high performance embedded real time systems 
predominant approach scheduling multiprocessor hard real time systems partitioned task assigned statically processor 
partitioned scheduling virtue permitting schedulability verified understood single processor analysis techniques 
alternative partitioned scheduling global scheduling single job queue jobs dispatched available processor global priority scheme 
believed global scheduling policies fixed job priorities earliest deadline edf guarantee schedulability systems hard deadline tasks total processor demand exceeded capacity single processor 
improvements worst case analysis global hard deadline multiprocessor scheduling :10.1.1.21.7889
developments edf scheduling policy high utilization tasks scheduled top priority tasks scheduled deadlines shown guarantee worstcase schedulability processor utilization level partitioned edf scheduling 
global scheduling remains controversial 
individuals believe strongly overhead synchronizing schedulers processors lost performance due translation look aside buffer memory cache misses migration task processors inevitably negate possible improvement scheduling efficiency 
hand concept global scheduling appealing especially systems average worstcase response time important 
known result queueing theory single queue scheduling produces better average response times queue processor scheduling 
attempts compare state art global edf scheduling state art partitioned edf scheduling 
worst case performance approaches shown case deadline equals period comparison empirical performance 
odds randomly chosen set periodic sporadic tasks guaranteed schedulable combination scheduling policy feasibility test 
contribution introduces previously unpublished improved global edf feasibility test previously unpublished hybrid global scheduling algorithm 
prior mentioned theoretical worst case achievable processor utilizations global partitioned scheduling approaches shown similar sporadic aperiodic task sets deadline equal period 
andersson baruah jonsson showed utilization guarantee edf static priority multiprocessor scheduling algorithm partitioned global higher processor platform 
doing partitioning optimally reducible bin packing integer partition problems known np complete 
research focused analysis heuristic algorithms assignment tasks processors bounding badly compared optimal algorithm 
research looked average case performance 
example lee studied general multi resource allocation problem empirically compared average solution quality execution time search bounding heuristic algorithm dynamic programming integer linear programming algorithms 
research attempted find tight bounds worst case performance heuristic partitioning algorithms 
partitioned scheduling lopez diaz garcia garcia showed possible schedule processors system independent periodic tasks maximum individual utilization umax total utilization edf edf edf umax 
unrestricted case umax edf says guaranteed utilization bound 
follows andersson baruah jonsson result tight 
baruah fisher studied partitioning algorithm assigns tasks processors deadline monotonic fit order 
single processor test fit analysis demand bound function follows theorem gf set sporadic tasks 
edf schedulable processor hold task di dbf di ci ui ci ti global scheduling dbf ui ui di ci di ui goossens funk baruah showed system independent periodic tasks scheduled successfully processors edf scheduling total utilization umax umax umax maximum utilization individual task 
showed utilization bound tight sense utilization bound umax umax guarantees edf schedulability 
srinivasan baruah examined global edf scheduling periodic tasks multiprocessors showed system independent periodic tasks utilization individual task scheduled successfully processors total utilization 
srinivasan baruah proposed method dealing heavy tasks hybrid scheduling policy 
idea give highest fixed priority tasks utilization greater constant schedule tasks basic edf algorithm 
algorithm called edf 
algorithm edf shown correctly schedule processors periodic task system total utilization rm shown correctly schedule processors periodic task system total utilization 
baker derived sufficient feasibility tests processor preemptive edf scheduling sets periodic sporadic tasks arbitrary deadlines showed optimal value edf respect maximizing worst case guaranteed schedulable utilization utilization bound 
follows argument bound tight identical worst case utilization bound edf fit decreasing ffd partitioned scheduling 
improvements global edf schedulability tests 
observed proof utilization bound test extends naturally cover pre period deadlines utilization ui replaced ci di 
observed sanjoy baruah proof extends case post period deadlines ci di replaced ci min di ti 
theorem set sporadic tasks 
edf schedulable identical processors max max 

max developed new schedulability test 
theorem bcl set sporadic tasks 
constraint di ti edf schedulable identical processors task true min min min ci max dk dk dk di ni ti demonstrated bcl baker tests generally incomparable observed bcl test better rest task sets heavy high utilization tasks 
reported simulations personal communication collections pseudo randomly generated tasks sets heavy tasks bcl able discover significantly schedulable task sets tests 
compare results edf hybrid method handling heavy tasks proposed srinivasan baruah 
key observation bcl task misses deadline due interference tasks maximum fraction workload task contribute interference baker incorporated observation analysis obtain previously unpublished schedulability test theorem bak set sporadic tasks 
edf schedulable identical processors task true exists ck tk max tk dk min min min max ui ui di ck tk ci ti ci di dk dk ci dk ci ti ci ti ci ti ci di ci di proof similar analysis notion busy interval refined 
definition busy interval total processor demand time interval necessary permit missed deadline 
pointed processor demand interference tasks causes missed deadlines interference ik task time interval defined sum lengths subintervals backlogged unable execute due preemption 
tempting believe redo analysis processor demand replaced ratio interference interval length proof appear go form 
compromise look ratio block busy time interval defined sum lengths subintervals processors executing 
uses definition define busy interval theorem proven 
definition interval busy constant ck tk block busy time interval 
tk dk theorem schedulability test attempting tp verify conditions value test complexity values need considered minimum points discontinuous ui 
ci di di ti empirical comparisons evaluate efficacy new bak test comparison previous global edf feasibility tests compare efficacy global versus partitioned scheduling series experiments conducted pseudo randomly generated sets periodic tasks 
methodology variety edf scheduling policies schedulability tests tested datasets 
dataset contained sets tasks 
task periods generated pseudo randomly uniform distribution 
processor utilizations implicitly compute times chosen distributions truncated bound utilization including 
uniform distribution period 
bimodal distribution heavy tasks uniform light tasks uniform period probability heavy 
exponential distribution mean 
exponential distribution mean deadlines chosen different ways constrained deadlines uniformly distributed execution time period unconstrained deadlines uniformly distributed execution time times period datasets generated processor systems follows 
initial set tasks generated tested 
task generated added previous set schedulability tests run new set 
process adding tasks repeated total processor utilization exceeded procedure repeated starting new initial set tasks 
experiments run datasets 
results experiments reported due space limitations trends experiments quite similar 
representative global edf choose representative global edf scheduling simulations run compare performance various schedulability tests pure edf scheduling hybrids 
experiments performed compared sufficient tests feasibility global edf scheduling bak baker test funk baruah test extended arbitrary deadlines stated theorem 
bcl test stated theorem 
intended bias cases heavy tasks similar experiments 
bak baker revised test stated theorem 
figures show performance tests datasets 
graphs histogram buckets bucket corresponding range percent full range total utilizations possible number processors 
processors buckets represent total processor utilization range percent 
lower lines graph show task sets verifiably feasible tests 
upper line shows total number task sets bucket including feasible infeasible task sets 
infeasible task sets included count necessary sufficient test feasibility global edf scheduling tasks processors known author worst case execution time order mn 
author implemented tested algorithm running datasets size considered practical 
reporting relative performance efficient sufficient tests feasibility large numbers tasks sets important comparing perfection smaller number task sets smaller periods 
note claimed simulation schedule hyper period checking missed deadlines necessary sufficient test schedulability 
author aware proof simulation sufficient test feasibility sporadic task sets periodic tasks sets arbitrary initial release time offsets 
assumption strictly periodic tasks simultaneous start times periods exceed deadlines simulation sufficient 
bak bcl bak 
constrained deadline bimodal utilization distribution cpus datasets bcl test effective tests range utilization distribution 
dataset shown constrained deadlines bimodal task utilizations processors 
datasets test accurate range utilization distribution 
dataset shown unconstrained deadlines exponentially distributed task utilizations mean processors 
cpu dataset unconstrained deadlines exponentially distributed task utilizations mean 
tests cases accurate determining feasibility sense apply combination starting computationally expensive bak bcl bak 
constrained deadline exponential utilization mean cpus bak bcl bak 
unconstrained deadline exponential utilization mean cpus 
apply test 
test fails deadlines exceed periods apply bcl test 
tests fail apply bak test figures show results applying stage test datasets reported figures 
typical results datasets 
clear combination applicable tests winner feasibility tests pure edf scheduling 
test called gbb short point 
hybrid global schemes addition basic edf scheduling performance hybrids edf highest utilization scheduling tested bcl bcl bak total cases 
constrained deadline bimodal utilizations cpus bak total cases 
constrained deadline exponential utilization mean cpus 
edf give special priority tasks utilization greater cut value guarantees highest worst case utilization deadline period 
edf um give special priority tasks highest utilization smallest value system verified schedulable gbb test 

edf lm give special priority tasks highest value ci max ti di smallest value system verified schedulable gbb test 
figures show results applying hybrid edf scheduling policies gbb test datasets reported figures 
gbb test applied remaining tasks processors choosing special tasks receive top priority 
result typical observed datasets edf lm hybrid scheme clearly finds highest number verifiably schedulable task sets total utilization level 
gbb gbb gbb um gbb lm representative partitioned edf 
constrained deadline bimodal utilization cpus gbb gbb gbb um gbb lm 
constrained deadline exponential utilization mean cpus select representative partitioned scheduling edf partitioning schemes evaluated 
case tasks assigned processors fit heuristic order metric relative deadline di 
tests fit evaluated gf sufficient test necessary sufficient test baruah 
strength gf test simplicity 
contrast worst case upper bound complexity bhr test lcm task periods 
avoid long running times possible bhr test applied task systems resolved known simpler tests 
task set feasible ci min di ti 
task set feasible ui screening tests bhr test converged quickly task sets tested 
principle appears bhr test may practicable integer overflow long compute times 
gf test lower worst case computational complexity 
surprisingly bhr test exact produce best ffd partition ffd heuristic 
figures show success rates methods different order heuristics ffd decreasing ui ffd decreasing ci min di ti ffd increasing di 
datasets bf ffd bf ffd gave best results having slight advantage different datasets 
gf ffd scheme chosen comparison global scheduling 
partitioned versus global bhr ffd bhr ffd bhr ffd bf ffd bf ffd bf ffd 
constrained deadline bimodal utilization cpus bhr ffd bhr ffd bhr ffd bf ffd bf ffd bf ffd 
constrained deadline exponential utilization mean cpus figures show performances gbb gbb lm hybrid schemes gf partitioning scheme datasets 
pattern exhibited examples persisted datasets tested 
cases hybrid global scheduling scheme improved success rate significantly pure edf fell short success rate partitioned scheduling 
bhr ffd bhr ffd bhr ffd bf ffd bf ffd bf ffd 
unconstrained deadline exponential utilization mean cpus gbb gbb um fb dm total cases 
unconstrained deadline bimodal utilization cpus gbb gbb um fb dm total cases 
unconstrained deadline bimodal utilization cpus gbb gbb um fb dm total cases 
unconstrained deadline bimodal utilization cpus gbb gbb um fb dm total cases 
constrained deadline exponential utilization mean cpus gbb gbb um fb dm total cases 
unconstrained deadline exponential utilization mean cpus gbb gbb um fb dm total cases 
unconstrained deadline exponential utilization mean cpus experiments reported indicate available schedulability tests global edf scheduling improved significantly 
global approach pulled ahead 
partitioned scheduling appears advantage best feasibility tests global scheduling respect statistical chance able schedule arbitrary hard deadline task set 
add fact static task assignment lower runtime overhead partitioned scheduling looks stronger 
global vs partitioned scheduling question 
progress analysis global edf scheduling appear possible 
global edf ultimately prove competitive partitioned edf scheduling global scheduling schemes considered 
worst case schedulability higher processor utilization levels worst case bound job static priority scheduling 
variants concept 
baruah cohen plaxton showed scheduling optimal scheduling periodic tasks multiprocessor linear time necessary sufficient schedulability test sufficiently small quantum size guarantee schedulability processor utilization levels arbitrarily close srinivasan anderson showed approach optimal multiprocessor scheduling sporadic rate tasks variations extensions theory 
main problem scheduling need slice time small quanta consequently high implementation overhead 
regard fixed job priority algorithms considered advantage applied globally partitioned 
algorithm break bound require frequent time slicing approach 
possibility throw forward shown johnson optimal scheduling independent jobs multiprocessor system 
interesting see analysis throw forward scheduling extended provide sufficient test schedulability periodic sporadic task systems 
course remaining questions comparative implementation overhead global vs partitioned approaches 
global scheduling higher overhead respects contention delay synchronization overhead single dispatching queue higher processor queues cost resuming task may higher different processor due interprocessor interrupt handling cache reloading processor executed 
cost quite variable depends actual portion task memory remains cache task resumes execution referenced overwritten 
issues discussed length srinivasan includes simulation results comparing overhead global edf scheduling variant 
experimentation actual implementations conclusive case serious overheads balance advantages global scheduling may time completion tasks real applications 
andersson baruah jonsson 
static priority scheduling multiprocessors 
proc 
nd ieee real time systems symposium pages london uk dec 
baker 
multiprocessor edf deadline monotonic schedulability analysis 
proc 
th ieee real time systems symposium pages 
baker 
analysis edf scheduling multiprocessor 
ieee trans 
parallel distributed systems aug 
baker 
improved schedulability analysis edf multiprocessor platforms 
technical report tr florida state university department computer science fl nov 
baruah fisher 
partitioned multiprocessor scheduling sporadic task systems 
proc 
th ieee real time systems symposium miami florida dec 
baruah goossens 
rate monotonic scheduling uniform multiprocessors 
ieee trans 
computers july 
baruah cohen plaxton 
proportionate progress notion fairness resource allocation 
proc 
acm symposium theory computing pages may 
baruah cohen plaxton 
proportionate progress notion fairness resource allocation 
algorithmica 
baruah howell 
algorithms complexity concerning preemptive scheduling periodic real time tasks processor 
real time systems 

improved schedulability analysis edf multiprocessor platforms 
proc 
th euromicro conference real time systems palma de spain july 

new schedulability tests real time tasks sets scheduled deadline monotonic multiprocessors 
proc 
th international conf 
principles distributed systems pisa italy dec 
fisher baruah 
partitioned static priority scheduling sporadic real time tasks constrained deadlines multiprocessor platforms 
proc 
th international conf 
principles distributed systems pisa italy dec 
funk goossens baruah 
line scheduling uniform multiprocessors 
proc 
nd ieee real time systems symposium pages london uk dec 
ieee computer society 
goossens devillers 
feasibility intervals deadline driven scheduler arbitrary deadlines 
proc 
th international conf 
real time computing systems applications 
johnson 
deadline scheduling real time multiprocessor 
proc 
conference pages 
kleinrock 
queueing systems volume computer applications 
wiley interscience 
lee lehoczky siewiorek rajkumar hansen 
scalable solution multi resource qos problem 
proc 
ieee real time systems symposium phoenix az usa dec 
lopez diaz garcia garcia 
worst case utilization bound edf scheduling real time multiprocessor systems 
proc 
th euromicro conf 
real time systems pages 
srinivasan anderson 
optimal rate scheduling multiprocessors 
proc 
th acm symposium theory computing pages 
acm may 
srinivasan baruah 
deadline scheduling periodic task systems multiprocessors 
information processing letters 
srinivasan anderson baruah 
case fair multiprocessor scheduling 
proc 
th international workshop parallel distributed real time systems apr 

