unix time sharing system ritchie thompson unix general purpose multi user interactive operating system larger digital equipment pdp computers 
offers number features seldom larger operating systems including hierarchical file system incorporating volumes ii compatible file device inter process iii ability initiate asynchronous processes iv system command language selectable user basis subsystems including dozen languages vi high degree portability 
discusses nature implementation file system user command interface 
versions unix time sharing system 
earliest circa ran digital equipment pdp computers 
second version ran unprotected pdp computer 
third incorporated multiprogramming ran pdp computers described previously published version widely today 
describes fourth current system runs pdp computers 
fact differences various systems small revisions originally published version aside concerned style details implementation file system 
pdp unix operational february installations put service 
engaged applications computer science education preparation formatting documents textual material collection processing trouble data various switching machines bell system recording checking telephone service orders 
installation mainly research operating systems languages computer networks topics computer science document preparation 
important achievement unix demonstrate powerful operating system interactive need expensive equipment human effort run hardware costing little man years spent main system software 
hope users find important characteristics system simplicity copyright association computing machinery reprinted permission 
electronic edition reprint version appearing bell system technical journal part july august 
turn revised version article appeared communications acm july pp 

article revised version fourth acm symposium operating systems principles ibm thomas watson research center yorktown heights new york october 
differences versions occur acm version printing incorporated updated numbers material portability 
elegance ease 
operating system proper major programs available unix compiler text editor qed assembler linking loader symbolic debugger equation setting programs dozens languages including fortran basic snobol apl algol tmg pascal host maintenance utility recreation novelty programs written locally :10.1.1.100.7314
unix user community numbers thousands contributed programs languages 
worth noting system totally self supporting 
unix software maintained system likewise documents issue generated formatted unix editor text formatting programs 
ii 
hardware software environment pdp research unix system installed bit word bit byte computer bytes core memory system kernel occupies bytes equally divided code data tables 
system includes large number device drivers enjoys generous space buffers system tables minimal system capable running software mentioned require little bytes core altogether 
larger installations see description pwb unix systems example 
smaller somewhat restricted versions system 
pdp mb moving head disks file system storage swapping 
variable speed communications interfaces attached baud data sets additional communication lines hard wired baud terminals satellite computers 
baud synchronous communication interfaces machine machine file transfer 
variety miscellaneous devices including track magnetic tape line printer voice synthesizer digital switching network chess machine 
preponderance unix software written abovementioned language :10.1.1.44.9066
early versions operating system written assembly language summer rewritten size new system third greater old 
new system easier understand modify included functional improvements including multiprogramming ability share reentrant code user programs consider increase size quite acceptable 
iii 
file system important role system provide file system 
point view user kinds files ordinary disk files directories special files 
ordinary files file contains information user places example symbolic binary object programs 
particular structuring expected system 
file text consists simply string characters lines newline character 
binary programs sequences words appear core memory program starts executing 
user programs manipulate files structure example assembler generates loader expects object file particular format 
structure files controlled programs system 
directories directories provide mapping names files files induce structure file system 
user directory files may create subdirectories contain groups files conveniently treated 
directory behaves exactly ordinary file written unprivileged programs system controls contents directories 
appropriate permission may read directory just file 
system maintains directories 
root directory 
files system tracing path chain directories desired file reached 
starting point searches root 
system directories contain programs provided general commands 
seen means necessary program reside directories executed 
files named sequences fewer characters 
name file specified system may form path name sequence directory names separated slashes file name 
sequence begins slash search begins root directory 
name alpha beta gamma causes system search root directory alpha search alpha beta find gamma beta 
gamma may ordinary file directory special file 
limiting case name refers root 
path name starting causes system search user current directory 
name alpha beta specifies file named beta subdirectory alpha current directory 
simplest kind name example alpha refers file current directory 
limiting case null file name refers current directory 
non directory file may appear directories possibly different names 
feature called linking directory entry file called link 
unix system differs systems linking permitted links file equal status 
file exist particular directory directory entry file consists merely name pointer information describing file 
file exists independently directory entry practice file disappear link 
directory entries 
name directory refers directory 
program may read current directory name knowing complete path name 
name convention refers parent directory appears directory created 
directory structure constrained form rooted tree 
special entries directory appear entry exactly directory parent 
reason simplify writing programs visit subtrees directory structure important avoid separation portions hierarchy 
arbitrary links directories permitted quite difficult detect connection root directory severed 
special files special files constitute unusual feature unix file system 
supported device associated file 
special files read written just ordinary disk files requests read write result activation associated device 
entry special file resides directory dev link may files just may ordinary file 
example write magnetic tape may write file dev mt special files exist communication line disk tape drive physical main memory 
course active disks memory special file protected indiscriminate access 
threefold advantage treating devices way file device similar possible file device names syntax meaning program expecting file name parameter passed device name special files subject protection mechanism regular files 
removable file systems root file system stored device necessary entire file system hierarchy reside device 
mount system request arguments name existing ordinary file name special file associated storage volume disk pack structure independent file system containing directory hierarchy 
effect mount cause heretofore ordinary file refer root directory file system removable volume 
effect mount replaces leaf hierarchy tree ordinary file new subtree hierarchy stored removable volume 
mount virtually distinction files removable volume permanent file system 
installation example root directory resides small partition disk drives drive contains user files mounted system initialization sequence 
file system generated writing corresponding special file 
utility program available create empty file system may simply copy existing file system 
exception rule identical treatment files different devices link may exist file system hierarchy 
restriction enforced avoid elaborate bookkeeping required assure removal links removable volume 
protection access control scheme quite simple unusual features 
user system assigned unique user identification number 
file created marked user id owner 
new files set protection bits 
specify independently read write execute permission owner file members group remaining users 
tenth bit system temporarily change user identification user id current user creator file file executed program 
change user id effective execution program calls 
set user id feature provides privileged programs may files inaccessible users 
example program may keep accounting file read changed program 
id bit program may access file access forbidden programs invoked program user 
actual user id invoker program available set user id programs may take measures desired satisfy invoker credentials 
mechanism allow users execute carefully written commands call privileged system entries 
example system entry superuser creates empty directory 
indicated directories expected entries 
command creates directory owned super user id bit set 
checks invoker authorization create specified directory creates entries 
may set set user id bit files mechanism generally available administrative intervention 
example protection scheme easily solves moo accounting problem posed aleph null system recognizes particular user id super user exempt usual constraints file access example programs may written dump reload file system unwanted interference protection system 
calls system calls designed eliminate differences various devices styles access 
distinction random sequential logical record size imposed system 
size ordinary file determined number bytes written size file necessary possible 
illustrate essentials basic calls summarized anonymous language indicate required parameters getting underlying complexities 
call system may potentially result error return simplicity represented calling sequence 
read write file assumed exist opened call open name flag name indicates name file 
arbitrary path name may 
flag argument indicates file read written updated read written simultaneously 
returned value called file descriptor 
small integer identify file subsequent calls read write manipulate file 
create new file completely rewrite old create system call creates file exist truncates zero length exist create opens new file writing open returns file descriptor 
file system maintains locks visible user restriction number users may file open reading writing 
possible contents file scrambled users write simultaneously practice difficulties arise 
take view locks necessary sufficient environment prevent interference users file 
unnecessary faced large single file data bases maintained independent processes 
insufficient locks ordinary sense user prevented writing file user reading prevent confusion example users editing file editor copy file edited 
sufficient internal interlocks maintain logical consistency file system users engage simultaneously activities writing file creating files directory deleting open files 
indicated reading writing sequential 
means particular byte file byte written read call implicitly refers immediately byte 
open file pointer maintained inside system indicates byte read written 
bytes read written pointer advances bytes 
file open calls may read buffer count write buffer count count bytes transmitted file specified byte array specified buffer 
returned value number bytes transmitted 
write case count exceptional conditions errors physical medium special files read may error count 
read pointer near file reading count characters cause reading sufficient bytes transmitted reach file typewriter terminals return line input 
read call returns equal zero file reached 
disk files occurs read pointer equal current size file 
possible generate file terminal escape sequence depends device 
bytes written affect parts file implied position write pointer count part file changed 
byte lies file file grow needed 
random direct access necessary move read write pointer appropriate location file 
location offset base pointer associated moved position offset bytes file current position pointer file depending base 
offset may negative 
devices tape terminals seek calls ignored 
actual offset file pointer moved returned location 
additional system entries having file system discussed 
example close file get status file change protection mode owner file create directory link existing file delete file 
iv 
implementation file system mentioned section directory entry contains name associated file pointer file 
pointer integer called number index number file 
file accessed number index system table list stored known part device directory resides 
entry file node contains description file user group id owner ii protection bits iii physical disk tape addresses file contents iv size time creation modification vi number links file number times appears directory vii code indicating file directory ordinary file special file 
purpose open create system call turn path name user number searching explicitly implicitly named directories 
file open device number read write pointer stored system table indexed file descriptor returned open create 
subsequent call read write file descriptor may easily related information necessary access file 
new file created node allocated directory entry contains name file node number 
making link existing file involves creating directory entry new name copying number original file entry incrementing link count field node 
removing deleting file done decrementing link count node specified directory entry erasing directory entry 
link count drops disk blocks file freed node de allocated 
space disks contain file system divided number byte blocks logically addressed limit depends device 
space node file device addresses 
files device addresses point blocks file 
file larger blocks device address points indirect block containing addresses additional blocks file 
larger files twelfth device address node point double indirect block naming indirect blocks pointing blocks file 
required thirteenth device address triple indirect block 
files may conceptually grow bytes 
opened bytes numbered read single disk access bytes range require accesses bytes range require accesses bytes largest file require accesses 
practice device cache mechanism see proves effective eliminating indirect fetches 
foregoing discussion applies ordinary files 
request file inode indicates special device address words immaterial specifies internal device name interpreted pair numbers representing respectively device type number 
device type indicates system routine deal device number selects example disk drive attached particular controller similar terminal interfaces 
environment implementation mount system call section quite straightforward 
mount maintains system table argument number device name ordinary file specified mount corresponding value device name indicated special file 
table searched number device pair turns path name scanned open create match number replaced number root directory device name replaced table value 
user reading writing files appear synchronous unbuffered 
immediately return read call data available conversely write user workspace may reused 
fact system maintains complicated buffering mechanism reduces greatly number operations required access file 
suppose write call specifying transmission single byte 
system search buffers see affected disk block currently resides main memory read device 
affected byte replaced buffer entry list blocks written 
return write call may take place actual may completed time 
conversely single byte read system determines secondary storage block byte located system buffers byte returned immediately 
block read buffer byte picked 
system recognizes program accesses sequential blocks file asynchronously pre reads block 
significantly reduces running time programs adding little system overhead 
program reads writes files units bytes advantage program reads writes single byte time gain immense comes mainly avoidance system overhead 
program rarely great volume may quite reasonably read write units small wishes 
notion list unusual feature unix 
practice method organizing file system proved quite reliable easy deal 
system strengths fact file short unambiguous name related simple way protection addressing information needed access file 
permits quite simple rapid algorithm checking consistency file system example verification portions device containing useful information free allocated disjoint exhaust space device 
algorithm independent directory hierarchy need scan linearly organized list 
time notion list induces certain peculiarities file system organizations 
example question charged space file occupies directory entries file equal status 
charging owner file unfair general user may create file may link user may delete file 
user owner file charged second user 
simplest reasonably fair algorithm spread charges equally users links file 
installations avoid issue charging fees 
processes images image computer execution environment 
includes memory image general register values status open files current directory 
image current state pseudo computer 
process execution image 
processor executing behalf process image reside main memory execution processes remains main memory appearance active higher priority process forces swapped disk 
user memory part image divided logical segments 
program text segment begins location virtual address space 
execution segment write protected single copy shared processes executing program 
hardware protection byte boundary program text segment virtual address space begins non shared writable data segment size may extended system call 
starting highest address virtual address space stack segment automatically grows downward stack pointer fluctuates 
processes system bootstrapping operation new process come existence fork system call fork fork executed process splits independently executing processes 
processes independent copies original memory image share open files 
new processes differ considered parent process parent returned identifies child process child returned value 
values returned fork parent child process distinguishable process may determine parent child 
pipes processes may communicate related processes system read write calls file system call pipe returns file descriptor creates inter process channel called pipe 
channel open files passed parent child process image fork call 
read pipe file descriptor waits process writes file descriptor pipe 
point data passed images processes 
process need know pipe ordinary file involved 
inter process communication pipes quite valuable tool see section completely general mechanism pipe set common ancestor processes involved 
execution programs major system primitive invoked execute file arg arg 
arg requests system read execute program named file passing string arguments arg arg argn code data process invoking execute replaced file open files current directory inter process relationships unaltered 
call fails example file execute permission bit set return take place execute primitive resembles jump machine instruction subroutine call 
process synchronization process control system call wait status causes caller suspend execution children completed execution 
wait returns terminated process 
error return taken calling process descendants 
certain status child process available 
termination lastly exit status terminates process destroys image closes open files generally 
parent notified wait primitive status available 
processes may terminate result various illegal actions user generated signals section vii 
vi 
shell users communication system carried aid program called shell 
shell command line interpreter reads lines typed user interprets requests execute programs 
shell described fully section discuss theory operation 
simplest form command line consists command name followed arguments command separated spaces command arg arg arg shell splits command name arguments separate strings 
file name command sought command may path name including character specify file system 
command brought memory executed 
arguments collected shell accessible command 
command finished shell resumes execution indicates readiness accept command typing prompt character 
file command shell generally prefixes string bin command attempts find file 
directory bin contains commands intended generally 
sequence directories searched may changed user request 
standard discussion section iii imply file program opened created program order get file descriptor file 
programs executed shell start open files file descriptors 
program begins execution file open writing best understood standard output file 
circumstances indicated file user terminal 
programs wish write informative information ordinarily file descriptor 
conversely file starts open reading programs wish read messages typed user read file 
shell able change standard assignments file descriptors user terminal printer keyboard 
arguments command prefixed file descriptor duration command refer file named 
example ls ordinarily lists typewriter names files current directory 
command ls creates file called places listing 
argument means place output hand ed ordinarily enters editor takes requests user keyboard 
command ed script interprets script file editor commands script means take input script file name appears argument command fact interpreted completely shell passed command 
special coding handle redirection needed command command need merely standard file descriptors appropriate 
file descriptor file ordinarily associated terminal output stream 
output diversion request specified file remains attached terminal commands may produce diagnostic messages silently output file 
filters extension standard notion direct output command input 
sequence commands separated vertical bars causes shell execute commands simultaneously arrange standard output command delivered standard input command sequence 
command line ls pr opr ls lists names files current directory output passed pr input dated headings 
argument requests double column output 
likewise output pr input opr command input file line printing 
procedure carried ls temp pr temp temp opr temp followed removal temporary files 
absence ability redirect output input method require ls command accept user requests output print multi column format arrange output delivered line 
surprising fact unwise efficiency reasons expect authors commands ls provide wide variety output options 
program pr copies standard input standard output processing called filter 
filters useful perform character transliteration selection lines pattern sorting input encryption decryption 
command separators multitasking feature provided shell relatively straightforward 
commands need different lines may separated semicolons ls ed list contents current directory enter editor 
related feature interesting 
command followed shell wait command finish prompting ready immediately accept new command 
example source output causes source assembled diagnostic output going output matter long assembly takes shell returns immediately 
shell wait completion command identification number process running command printed 
identification may wait completion command terminate 
may times line source output ls files assembly listing background 
examples output file terminal provided done outputs various commands intermingled 
shell allows parentheses operations 
example date ls writes current date time followed list current directory file shell returns immediately request 
shell command command files shell command may called recursively 
suppose file contains lines source mv mv command causes file renamed 
binary output assembler ready executed 
lines typed keyboard source assembled resulting program renamed executed 
lines command sh cause shell sh execute commands sequentially 
shell capabilities including ability substitute parameters construct argument lists specified subset file names directory 
provides general conditional looping constructions 
implementation shell outline operation shell understood 
time shell waiting user type command 
newline character line typed shell read call returns 
shell analyzes command line putting arguments form appropriate execute 
fork called 
child process code course shell attempts perform execute appropriate arguments 
successful bring start execution program name 
process resulting fork parent process waits child process die 
happens shell knows command finished types prompt reads keyboard obtain command 
framework implementation background processes trivial command line contains shell merely refrains waiting process created execute command 
happily mechanism meshes nicely notion standard input output files 
process created fork primitive inherits memory image parent files currently open parent including file descriptors 
shell course uses files read command lines write prompts diagnostics ordinary case children command programs inherit automatically 
argument offspring process just performs execute standard file descriptor respectively refer named file 
easy agreement smallest unused file descriptor assigned new file opened created necessary close file open named file 
process command program runs simply terminates association file specified file descriptor ended automatically process dies 
shell need know actual names files standard input output need reopen 
filters straightforward extensions standard redirection pipes files 
ordinary circumstances main loop shell terminates 
main loop includes branch return fork belonging parent process branch wait reads command line 
thing causes shell terminate discovering file condition input file 
shell executed command input file sh commands executed reached instance shell invoked sh terminate 
shell process child instance shell wait executed return command may processed 
initialization instances shell users type commands children process 
step initialization system creation single process invocation execute program called init 
role init create process terminal channel 
various init open appropriate terminals input output files waiting necessary carrier established dial lines 
message typed requesting user log 
user types name identification appropriate instance init wakes receives log line reads password file 
user name able supply correct password init changes user default current directory sets process user id person logging performs execute shell 
point shell ready receive commands logging protocol complete 
mainstream path init parent shells wait 
child processes terminates shell file user typed incorrect name password path init simply process turn appropriate input output files types log message 
user may log simply typing file sequence shell 
programs shell shell described designed allow users full access facilities system invoke execution program appropriate protection mode 
different interface system desirable feature easily arranged 
recall user successfully logged supplying name password init ordinarily invokes shell interpret command lines 
user entry password file may contain name program invoked log shell 
program free interpret user messages way wishes 
example password file entries users editing system specify editor ed shell 
users editing system log inside editor immediately prevented invoking programs intended 
practice proved desirable allow temporary escape editor execute formatting program utilities 
games chess tic tac toe available system illustrate severely restricted environment 
entry exists password file specifying appropriate game playing program invoked shell 
people log player games find limited game unable investigate presumably interesting offerings unix system 
vii 
traps pdp hardware detects number program faults non existent memory unimplemented instructions odd addresses address required 
faults cause processor trap system routine 
arrangements illegal action causes system terminate process write image file core current directory 
debugger determine state program time fault 
programs looping produce unwanted output user second thoughts may halted interrupt signal generated typing delete character 
special action taken signal simply causes program cease execution producing core file 
quit signal force image file produced 
programs loop unexpectedly may halted remains inspected 
hardware generated faults interrupt quit signals request ignored caught process 
example shell ignores quits prevent quit logging user 
editor catches interrupts returns command level 
useful stopping long losing progress editor manipulates copy file editing 
systems floating point hardware unimplemented instructions caught floating point instructions interpreted 
viii 
perspective paradoxically success unix system largely due fact designed meet predefined objectives 
version written thompson dissatisfied available computer facilities discovered little pdp set create environment 
essentially personal effort sufficiently successful gain interest author colleagues justify acquisition pdp specifically support text editing formatting system 
turn system proved useful persuade management invest pdp pdp machines developed form 
goals effort articulated build comfortable relationship machine explore ideas inventions operating systems software 
faced need satisfy requirements freedom grateful 
considerations influenced design unix visible retrospect 
programmers naturally designed system easy write test run programs 
important expression desire programming convenience system arranged interactive original version supported user 
believe properly designed interactive system productive satisfying batch system 
system easily adaptable noninteractive converse true 
second fairly severe size constraints system software 
partially antagonistic desires reasonable efficiency expressive power size constraint encouraged economy certain elegance design 
may disguised version suffering philosophy case worked 
third nearly start system able maintain 
fact important 
designers system forced system quickly aware functional superficial deficiencies strongly motivated correct late 
source programs available easily modified line willing revise rewrite system software new ideas invented discovered suggested 
aspects unix discussed exhibit clearly design considerations 
interface file system example extremely convenient programming standpoint 
lowest possible interface level designed eliminate distinctions various devices files direct sequential access 
large access method routines required insulate programmer system calls fact user programs call system directly small library program page long buffers number characters reads writes 
important aspect programming convenience control blocks complicated structure partially maintained depended file system system calls 
generally speaking contents program address space property program tried avoid placing restrictions data structures address space 
requirement programs usable file device input output desirable push device dependent considerations operating system 
alternatives load programs routines dealing device expensive space depend means dynamically linking routine appropriate device needed expensive overhead hardware 
likewise process control scheme command interface proved convenient efficient 
shell operates ordinary swappable user program consumes space system proper may powerful desired little cost 
particular framework shell executes process spawns processes perform commands notions redirection background processes command files user selectable system interfaces essentially trivial implement 
influences success unix lies new inventions full exploitation carefully selected set fertile ideas especially showing keys implementation small powerful operating system 
fork operation essentially implemented genie time sharing system 
number points influenced multics suggested particular form system calls name shell general functions 
notion shell create process command suggested early design multics system dropped efficiency reasons 
similar scheme :10.1.1.44.9066
ix 
statistics numbers suggest scale research unix operation 
users involved document preparation tend system program development especially language 
important applications programs 
today user population maximum simultaneous users directories files byte secondary storage blocks background process runs lowest possible priority idle cpu time 
produce digit approximation constant problems 
counting background average daily commands cpu hours connect hours different users log ins acknowledgments contributors unix traditional especially phrase numerous mention 
certainly collective due colleagues computing science research center 
contributed basic design file system 
particularly thoughtful criticism constant support morris mcilroy 

deutsch lampson online editor comm 
assoc 
comp 
mach 
december pp 

kernighan cherry system typesetting mathematics comm 
assoc 
comp 
mach 
pp 
march 

kernighan lesk document preparation bell sys 
tech 
part pp 
july august 

programmer workbench proc 
nd int 
conf 
software engineering october pp 


programmer workbench bell sys 
tech 
pp 
july august 

unix microprocessor bell sys 
tech 
pp 

july august 

kernighan ritchie programming language prentice hall englewood cliffs new jersey 
second edition 

aleph null computer software practice experience april june pp 


bourne unix shell bell sys 
tech 
pp 
july august 

deutsch lampson sds time sharing system preliminary manual doc 
project genie univ cal berkeley april 

organick multics input output system proc 
third symposium operating systems principles october pp 


bobrow murphy tomlinson paged time sharing system pdp comm 
assoc 
comp 
mach march pp 

