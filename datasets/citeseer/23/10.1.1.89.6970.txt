continuously maintaining quantile summaries elements data stream lin university new south wales sydney australia jian xu university new south wales sydney australia statistics observed data elements required applications involving data streams intrusion detection network monitoring stock price prediction financial markets web log mining access prediction user click stream mining personalization 
various statistics computing quantile summary probably challenging complexity 
study problem continuously maintaining quantile summary observed elements stream quantile queries answered guaranteed precision developed space efficient algorithm pre defined requires scan input data stream log space worst cases 
developed algorithm maintains quantile summaries elements quantile queries elements answered guaranteed precision worst case space requirement algorithm log 
performance study indicated actual quantile estimation error far guaranteed precision space requirement theoretical bound 
query processing data streams received considerable attention research breakthroughs including processing relational type queries xml documents data mining queries optimal histogram maintenance data clustering context data streams query processing algorithm considered efficient uses little space reads data element just takes little processing time data element 
greenwald khanna reported interesting efficient quantile computation 
quantile ordered sequence data elements element rank 
shown hongjun lu hong kong university sci 
tech 
hong kong jeffrey xu yu chinese university hong kong hong kong order compute exactly quantiles sequence data elements scans data sequence algorithm requires space 
quite lot reported providing approximate quantiles reducing space requirements scan data techniques reported referred gk algorithm able maintain approximate quantile summary data sequence elements requiring log space worst case scan data :10.1.1.6.6513
quantile summary approximate answer quantile query precision rank approximate summary returns value rank guaranteed interval 
quantile summaries maintained gk algorithm applications summaries concept aging quantiles computed data elements seen far including seen long time ago 
wide range applications data elements seen early outdated quantile summaries seen data elements important 
example top ranked web pages accessed pages produce accurate web page access prediction top ranked pages pages accessed far users interests changing 
financial market investors interested price quantile bids 
considered problem maintaining statistics data streams regard data elements seen far referred sliding window model 
provided algorithms maintaining aggregation statistics computing number sum positive integers 
apparently maintaining order statistics quantile summary complex simple aggregates 
approximate join processing histogram techniques sliding window model reported relevant maintaining order statistics 
motivated studied problem space efficient pass quantile summaries tuples seen far data streams 
different gk algorithm tuples quantile summary merged capacities tuples space needed newly arrived data elements maintain quantile summary partitions time stamps outdated data elements deleted summary affecting precision 
quantile information local partition novel merge technique developed produce approximate summary partitions data elements 
extended technique maintain quantile summary data elements way quantile estimates obtained elements best knowledge similar reported literature 
contribution summarized follows 
extended sliding window model model 
sliding window model quantile summaries maintained seen elements data stream 
model quantile summary sliding window produce quantile estimates elements 
words sliding window model viewed special case model 
sliding window model developed deterministic approximate algorithm maintain quantiles summaries 
algorithm requires space log 
general model developed pass deterministic approximate algorithm requires space log 
algorithm approximate technique developed merge multiple approximate quantile summaries single approximate quantile summary directly distributed parallel quantile computation 
rest organized follows 
section background information quantile computation 
section provide algorithms sliding window model model respectively 
discussions related applications briefly section 
results comprehensive performance study discussed section 
section concludes 
preliminaries section introduce problem quantile computation sequence data followed number computation models 
review closely related 

data stream arrival time stamps quantile quantile sketch notation simplification assume data element value ordered sequence data elements quantile computation means increasing ordering data values 
furthermore denote number data elements 
definition quantile 
quantile sequence data elements element rank 
result quantile query data element rank 
example 
shows sample sequence data generated data stream data element represented value arrival order data elements left right 
total number data elements sequence 
sorted order sequence 
quantile returns element ranked quantile returns element ranks sequence 
munro paterson showed algorithm computes exact quantiles sequence data elements scans data sequence requires space 
context data streams able see data 
hand size data steam theoretically infinite 
impractical compute exact quantile data streams 
applications keeping quantile summary quantile queries answered bounded errors sufficient 
definition approximate 
quantile summary data sequence elements approximate rank returns value rank guaranteed interval 
generally quantile summary may form 
definition lead specific query algorithm find data element approximate summary precision resolve structured approximate summary needed support approximate quantile queries 
study quantile sketch sketch brevity data structure proposed quantile summaries data sequences 
definition quantile sketch 
quantile sketch ordered data sequence defined ordered sequence tuples vi properties 

vi 
vi vi 

ri ri rank vi example 
sequence data shown example quantile sketch consisting tuples 
greenwald khanna proved theorem theorem 
sketch defined definition 


approximate 
vi theorem states rank able find tuple vi approximate sketch linear scan rank ri vi precision ri rest conditions theorem define approximate sketch 
example 
verified sketch provided example approximate respect data stream 
hand sketch approximate 
note conditions theorem general originally due applications elements 
proof techniques proposition corollary may lead proof theorem omit details 
quantile sketches data streams quantile summaries case quantile sketch maintained data streams different computation models 
data stream model 
previous working data stream model 
sketch maintained data items seen far 
sliding window model 
sliding window model sketch maintained seen data elements 
compute quantiles elements data stream seen far pre fixed number 
model 
model sketch maintained seen data elements 
quantile queries issued return quantiles elements data stream seen far 
consider data stream 
data stream model sketch maintained data elements seen far quantile returns time time 
width sliding window quantile returns time time ranked sixth elements 
assume sketch maintained model time quantile queries answered 
quantile returns 
seen different sketches different applications 
example databases sketch maintained data stream model useful estimating sizes relational operations required query optimization 
web server appropriate maintain sketch accessed web pages sliding window model page access prediction cache management user access patterns 
security house sketch bid ask prices maintained model appropriate answer quantile queries clients different investment strategies 
maintaining approximate sketches study interested deterministic techniques performance guarantees 
algorithms available data stream model model disk residence data 
manku lindsay developed deterministic scan algorithm polylogarithmic space requirement approximately computing quantiles precision guarantee greenwald khanna algorithm reduced space complexity log data stream elements seen far 
gk algorithm maintains sketch pass scan data stream approximately answer quantile queries 
generated sketch guaranteed approximate 
presentation simplification gk algorithm uses parameters gi control tuple vi generated sketch gj ri gj gj gj 
gk algorithm maintains invariants ensure generated sketch vi approximate 
invariant gi invariant element ordered data stream 
invariant vn element ordered data stream 
challenges note sliding window model actual contents tuples change new elements arrive fixed 
existing summary techniques dataset trivially applicable 
example 
gk algorithm generates sketch regarding data stream depicted 
data elements involved sketch 
want compute quantiles elements sketch useless 
clearly desirable data elements outside sliding window removed considerations 
contents sliding window continuously change new elements arrive infeasible remove exact outdated elements space 
challenges develop space efficient technique continuously partition data stream summarize partitions achieve high approximate accuracy 
quantile summary problem model harder 
pass summary sliding windows section space efficient summary algorithm continuously maintaining approximate sketch sliding window 
basic idea algorithm continuously divide stream buckets arrival ordering data elements data elements preceding buckets generated earlier buckets 
capacity bucket ensure approximation 
algorithm issues new bucket preceding blocks full 
bucket maintain approximate sketch continuously gk algorithm keeping data elements 
bucket full approximate sketch compressed approximate sketch space 
oldest bucket expired currently total number elements consequently sketch oldest bucket removed 
merge local sketches approximately answer quantile query 
illustrates algorithm 
note gk algorithm applied algorithm smallest space guarantee existing techniques 
algorithm able accommodate new algorithms maintaining approximate sketch 
rest section organized follows 
successively novel merge technique compress technique sketch maintenance algorithm query algorithm 
merge local sketches suppose data streams di di ni data elements 
suppose si isan approximate sketch di 
subsection novel technique merge sketches merged sketch approximate respect di 
technique key ensure approximation summary technique query part 
algorithm depicts merge process 
represented vi si 
algorithm merge input si ni si approximate 
output 
description si choose tuple vi smallest vi si si vi vk vi ni ni vk 
prove sketch di 
important issue 
suppose rank find tuple vk guarantee rk rank vk rk elements expired bucket elements elements elements compressed approximate sketch bucket elements 
summary technique current bucket gk lemma 
suppose data streams di di ni data elements 
suppose si isan approximate sketch di 
generated algorithm merge si sketch di si tuples 
proof 
immediate si tuples 
algorithm merge properties sketch definition immediate verified 
need prove vk rk rk rank vk ordered di 
vk vi jk jk jk denotes tuple si merged obtaining vk 
note jk tuple si merged vi ri 
clear vk vi jk consequently rk ri jk jk algorithm merge line immediately verified rk prove rk 
jk immediate suppose rk pi pi denotes number elements vk merged stream 
assume vk stream 
clearly jk jk jk 
pi note jk ni jk jk ni rk ki ni ri ki consequently vi jk jk jk tuple si merged vk 
contradict 
pi jk ni pi 
algorithm merge line jk jk rk theorem 
suppose data streams di di ni data elements 
suppose si isan approximate sketch di 
generated algorithm merge si approximate sketch di 
proof 
property property definition approximate theorem immediate 
equation property immediately follows 
sketch compress subsection sketch compress algorithm sketch construction algorithm 
algorithm outlined algorithm 
takes approximate sketch data set elements input produces approximate sketch tuples 
algorithm compress input approximate sketch output approximate sketch tuples description add tuple tuple kj kj kj kj 
add tuple 
note ordered sequence tuples 
algorithm tuple satisfying condition clearly algorithm implemented linear time respect size suppose ordering immediately verified sketch 
condition line algorithm property definition theorem approximate immediate 
approximate sketch data stream 
theorem 
suppose approximate sketch 
generated algorithm compress approximate tuples 
note regarding precision guarantee new compress technique takes half number tuples compress technique 
sketch construction maintenance ready algorithm continuously maintains sketch answer approximately quantile query sliding window model 
theorem sketch maintenance algorithm need maintain approximate sketch bucket 
algorithm outlined algorithm follows scheme depicted 
note bucket algorithm keeps sketch time stamp number elements contained bucket 
algorithm quite straightforward 
new data item total number elements remained consideration size sliding window sketch oldest bucket dropped line 
current bucket size exceeds corresponding sketch compressed sketch constant number tuples line new bucket created current bucket line 
new data element inserted sketch current bucket gk approximation line 
note algorithm maintaining algorithm sw description new generated data element drop sketch oldest bucket current compress current current increase current gk current algorithm current represent sketch current bucket record number elements current bucket current 
note new bucket issued line initialize sketch current bucket size assign time stamp new bucket arrival time stamp current new data element 
algorithm compress immediate local sketch bucket current approximate restricted local data elements current approximate 
space required algorithm sw 
theorem 
algorithm sw requires log space 
proof 
sketch bucket produced algorithm gk takes log space compressed space bucket full 
clearly buckets 
theorem immediately follows 
querying quantiles subsection new query algorithm answer quantile query precision light theorem 
note algorithm sw number data elements remaining buckets may maximum difference 
consequently applying algorithm merge remaining local sketches guarantee sketch element 
guarantee sketch elements 
expired current 
example suppose stream arrives order depicted 
element arrives bucket elements expired local sketch dropped 
local approximate sketch second bucket current bucket 
applying algorithm merge tuple 
note example elements 
rank 
rank sketch elements 
solve problem lift operation outlined algorithm lift value tuple algorithm lift input output description tuple ai vi update ai insert ai theorem 
suppose data steam approximate sketch elements elements 
generated algorithm lift approximate sketch proof 
prove sketch suppose vi tuple tuple vi ri rank vi ordered data items rank vi ordered clearly ri ri 
sketch data items ri consequently 
sketch properties immediately verified 
approximation immediately verified definition theorem 
query algorithm algorithm 
theorems algorithm sw query correct rank able return element vi ri query costs note implementation algorithm sw query completely implement algorithm sw query step apply algorithm merge local sketches produce merged approximate scheme non dropped local sketches 
step generate sketch algorithm lift asking 
step rank find tuple vi return element vi 
algorithm merge algorithm lift materialize 
steps algorithm sw query implemented pipeline fashion tuple generated algorithm merge passes step algorithm lift 
tuple lifted passes step 
tuple qualified query condition step algorithm terminates returns data element tuple 
algorithm merge run way similar way merge sort fashion 
consequently algorithm merge runs log total number tuples sketches 
algorithm merge takes dominant costs algorithm sw query runs time log 
note algorithms apply gk algorithm records vi gi vi fact calculations equations pipelined steps algorithm sw query 
affect time complexity query algorithm 
pass summary section space efficient algorithm summarising elements answer quantile queries elements 
sliding window model desirable sketch support model properties data element involved sketch included elements ensure approximation sketch answer quantile query elements built elements 
different sliding window model model arbitrary integer consequently data stream partitioning technique developed section accommodate requests example applicable 
instance algorithm eh technique partition data stream 
introduce eh partitioning technique 
eh partitioning technique eh bucket carries time stamp time stamp earliest data element bucket 
stream data elements elements stream processed arrival ordering eh maintains buckets bucket consists data elements consecutively generated 
eh proceeds follows 
step new element arrives creates bucket time stamp bucket time stamp step number buckets full merge oldest buckets bucket carry oldest time stamp iteratively 
level merge done number buckets merge iteration terminates level buckets data stream merge starts bucket merge starts merge starts bucket merge starts 
eh partition illustrates eh algorithm elements ei assumed time stamp theorems immediate theorem 
elements number buckets eh 
log theorem 
number elements bucket property number elements generated elements sketch construction algorithm bucket eh record sketch sb summarize data elements earliest element number elements earliest element time stamp tb 
buckets merged keep information earlier illustrate algorithm 
algorithm algorithm 
note ensure approximation choose algorithm run eh partitioning algorithm gk algorithm applied maintaining approximate sketch 
algorithm nn new data element arrives time step create new sketch record new bucket time stamp te ne 
initialize sketch se 
step drop sketches number buckets full iteratively till current number new element arrives buckets greater 
get oldest buckets buckets drop th bucket list drop sketch sb assume older add time stamp buckets list 
scan sketch list oldest delete expired buckets sb nb tb nb step maintain sketches remaining sketch add sb gk algorithm approximation nb nb 
theorem algorithm nn maintains log sketches sketch requires space log gk algorithm 
consequently algorithm nn requires space log 
querying quantiles subsection show get approximate sketch sketches maintained algorithm answer quantile query elements 
query algorithm described algorithm consists steps 
choose appropriate sketch maintained sketch 
algorithm lift check query condition 
theorem 
algorithm correct algorithm able return data element element returned algorithm meets required precision 
proof 
prove theorem need prove bucket insert buckets buckets bucket insert 
algorithm nn buckets buckets merged new algorithm nn query input sketches maintained algorithm nn 
output element elements rank elements 
step scan sketch list oldest find sketch step apply algorithm lift generate 
step rank find tuple return vi 
approximate sketch elements 
note algorithm maintained approximation bn elements 
case 
suppose bucket eh just bn 
nb largest number larger consequently nb 
theorem 
implies note theorem covers expired bucket inequality holds oldest 
inequality theorem lift approximate sketch elements 
case 
immediate approximate sketch elements theorem 
fact case algorithm lift algorithm presentation simplification include operation case 
note apply pipeline paradigm steps way similar section speed execution algorithm 
consequently time 
gorithm runs log discussions applications algorithm developed ranka ars compute quantiles approximately scan datasets 
partition algorithm originally designed disk resident data may modified support sliding window 
algo rithm requires space 
merge technique algorithm ars specifically designed support algorithm ars instance support sketches generated gk algorithm retain approximation 
merge technique algorithm ars applicable algorithm sw 
section compare modified ars algorithm sw experiments 
note applying eh partitioning technique may option maintaining local sketches bucket merge local sketches corresponding buckets merged 
retain approximation cases keep tuples buckets prevent space guarantee 
section report space requirements heuristic option 
show techniques developed immediately applied important quantile computation problems 
list applications 
distributed parallel quantile computation applications data streams distributed 
light merge technique theorem need maintain local approximate sketch local data stream ensure global approximation 
period applications users may interested computing quantiles data elements period 
algorithm nn may immediately modified serve purpose 
modification ensure approximation need change expiration condition sketch sketch expired time stamp expired 
oldest remaining sketch answer quantile query 
space requirement log maximum number elements period 
note application unknown approximated eh 
omit details due space limitation 
constrain sliding window applications users may interested elements meeting constraints elements 
application modify algorithm nn support approximate quantile computation elements satisfying constraints elements 
modification algorithm nn allow elements meeting constraints added sketch count number elements meeting constraints seen far number elements seen far meeting constraints 
oldest sketch approximately answer quantile query 
space requirement log 
similar period model need approximate number qualified elements elements 
notation definition default values size sliding window guaranteed precision data distribution uniform dd qp query patterns random length rank interval number queries table 
system parameters 
performance studies experiments modified ars algorithm support sliding window model 
modification partition data stream way shown leads minimum space requirement 
implemented algorithms sw nn heuristic algorithm nn 
algorithm nn adopts eh partitioning technique nn maintain local sketches bucket eh gk algorithm merge local sketches corresponding buckets merged 
discussed section obtain bound space requirements nn 
algorithms implemented 
conducted experiments pc intel ghz cpu mb memory synthetic real datasets 
possible factors affect quantile queries shown table default values 
parameters grouped categories window size guaranteed precision quantiles ii data distributions dd specify data stream iii query patterns qp lengths rank intervals tobe queried number queries 
experiments data distributions tested take random models uniform normal exponential 
examined sorted partially sorted data streams global ascending global descending partially sorted 
estimation error error metrics evaluate tightness upper bound 
estimation error represented exact rank queried rank returned element number elements queried 
sliding window model 
query patterns qp addition random quantile queries consider rules queries focus small rank interval length queries access arbitrary ranks 
sliding window techniques subsection evaluate performance sliding window techniques 
experiments examined average maximum errors quantile queries parameter quantiles form avg estimation error sw ars avg errors space usage tuples sw ars theoretic bound sw space consumption 
avg max errors space consumptions rank sliding window performance 
evaluation performance sw ars shown sliding window model set experiments data stream generated uniform distribution elements 
tested different 
illustrates average errors 
shows ars performs similarly nn regarding accuracy 
confirmed larger set queries error metrics relative error 
shows relative errors quantile queries form 
relative error decreases increases necessarily monotonic 
fluctuations sw smaller ars average relative errors close 
space usage tuples estimation error uni norm exp sort rev block semi 
space consumptions vs distributions avg error max error uni norm exp sort rev block semi 
errors vs distributions gives space consumptions sw ars respectively theoretical upperbound sw 
note measure space consumption maximum number total sketch tuples happened temporary storage computation 
algorithm ars sketch tuple needs keep data element size sw 
number tuples reported algorithm ars actual number tuples fair comparison 
showed theoretical upper bound sw derived gk algorithm algo rithm sw 
space required ars algorithm asymptotically larger theoretical space upper bound sw chance smaller sw fixed small 
caught experiment avg estimation error relative error error fi avg errors sw ars rank cluster cluster cluster rank vs errors max estimation error 
query patterns query cluster rank query cluster rank query cluster rank max errors see situation actual space sw smaller ars 
experiment clearly demonstrated modified ars competitive algorithm sw 
similar accuracy algorithm sw requires smaller space algorithm ars 
experiments demonstrated actual performance sw better worst case theoretical bounds regarding accuracy space 
evaluate sw techniques possible impact factors data distributions query patterns 
data distributions 
conducted set experiments evaluate impacts different distributions algorithm sw 
include random models uniform normal exponential sorted models sorted reverse sorted block sorted semi block sorted 
block sorted divide data sequence blocks 
bn elements block sorted 
semi block sorted means elements bi smaller bj block necessarily sorted 
figures report experiment results 
note experiments total number elements 
experiment results demonstrated effectiveness algorithm sw sensitive data distributions 
query patterns 
run random quantile queries sw techniques sliding window data stream experiments 
light rules allocate quantile queries small interval set experiments tested values 
tested impact positions intervals lengths specifically allocate intervals avg estimation error space usage tuples nn nn avg errors total time sec nn nn theoretic space upperbound space space usage tuples nn nn theoretic upper bound space consumption 
avg max errors space consumptions rank avg estimation error sw nn nn 
query performance cpu positions 
experiment results shown 
shows average errors shows maximum errors 
note lines query cluster correspond respectively different values 
maximum errors approach theoretical upperbound simply number queries large probability having maximum error high 
techniques repeated similar set tests evaluate nn nn 
results shown model 
data stream experiments 
algorithm nn clearly outperforms nn worst case theoretical bounds 
conducted set experiments examine impacts algorithm nn nn 
data stream elements 
experiment results reported 
shows space consumptions algorithm nn changes 
note theoretic space upper bound means algorithm nn 
show average maximum errors respectively changes nn nn avg errors 
space errors space usage tuples relative error error fi max estimation error nn nn rank rank nn nn sw nn nn space max errors estimation error 
real dataset avg error max error sw nn nn errors avg max 
run randomly queries 
query costs show total query processing costs cpu running queries parameters take default values number data stream elements 
note algorithm nn query efficient merge operation 
real dataset testing topic detection tracking tdt important issue information retrieval text mining www ldc upenn edu projects tdt 
archived news stories received reuters realtime contains news stories duplicate words 
articles removed term stemming 

shows space consumptions average max errors sw nn nn 
follow similar trends synthetic data 
summary experiment results demonstrated algorithm sw algorithm nn perform better worst case theoretical bounds respectively 
addition theoretical bounds algorithm sw algorithm nn outperform techniques 
table 
comparing results results quantile computation authors year computation model precision space requirement data sequence deterministic manku data sequence deterministic log manku data stream appending conf log log log greenwald khanna data stream appending deterministic log gilbert data stream deletion conf log log log lin data stream sliding window deterministic log lin data stream deterministic log results maintaining quantile summaries data streams 
quite lot related reported literature reported attempts develop space efficient pass deterministic quantile summary algorithms performance guarantees sliding window model data streams 
furthermore extended sliding window model propose new model believe wide applications 
performance study indicated algorithms proposed models provide accurate quantile estimates guaranteed precision requiring smaller space worst case bounds 
table compare results results quantile computation various models 
immediate investigate problem maintaining statistics new model 
furthermore technique developed merges multiple approximate quantile sketches single approximate quantile sketches expected applications distributed parallel systems 
possible investigate issues related maintain distributed quantile summaries large systems sliding window 
agrawal swami 
pass space efficient algorithm finding quantiles 
chaudhuri deshpande krishnamurthy editors 
ranka singh 
pass algorithm accurately estimating quantiles disk resident data 
vldb journal pages 
chen dong han wah wang 
multidimensional regression analysis time series data streams 
vldb 
das gehrke 
approximate join processing data streams 
sigmod 
datar gionis indyk motwani 
maintaining stream statistics sliding windows extended 
acm siam pages 
dobra garofalakis gehrke rastogi 
processing complex aggregate queries data streams 
sigmod 
garofalakis kumar 
correlating xml data streams tree edit distance embeddings 
sigmod sigact sigart 
gehrke korn srivastava 
computing correlated aggregates continual data streams 
sigmod pages 
gilbert kotidis muthukrishnan strauss 
summarize universe dynamic maintenance quantiles 
vldb 
greenwald khanna 
space efficient online computation quantile summaries 
sigmod pages 
guha koudas 
approximating data stream querying estimation algorithms performance evaluation 
icde 
guha koudas shim 
data streams histograms 
stoc pages 
guha mishra motwani callaghan 
clustering data streams 
focs pages 
gupta suciu 
stream processing xpath queries predicates 
sigmod 
kang naughton 
evaluation window joins streams 
icde 
manku motwani 
approximate frequency counts data streams 
vldb 
manku rajagopalan lindsay 
approximate medians quantiles pass limited memory 
sigmod pages 
manku rajagopalan lindsay 
random sampling techniques space efficient online computation order statistics large datasets 
sigmod pages 
munro paterson 
selection sorting limited storage 
tcs 
olston jiang widom 
adaptive filters continuous queries distributed data streams 
sigmod 

database management systems 
mcgraw hill 
zhu shasha 
statstream statistical monitoring thousands data streams real time 
vldb 
