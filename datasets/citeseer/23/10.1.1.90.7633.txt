carleton university systems computing engineering technical report sce july survey middleware paradigms mobile computing thomas kunz department systems computer engineering carleton university colonel drive ottawa ontario canada sce carleton ca current advances portable devices wireless technologies distributed systems created mobile computing environment characterized large scale dynamism 
diversities network connectivity platform capability resource availability significantly affect application performance 
traditional middleware systems corba dcom achieved great success dealing heterogeneity underlying hardware software platforms offering portability facilitating development distributed applications 
prepared offer proper support addressing dynamic aspects mobile systems 
modern distributed applications need middleware capable adapting environment changes supports required level quality service 
represents experience research projects related generation middleware systems 
define middleware indicate major challenges mobile computing systems 
take broader perspective try identify main requirements mobile middleware systems 
review different categories mobile middleware technologies show strength weakness 
discussion surveyed provide number observations remaining issues 
availability lightweight portable computers wireless technologies created new class applications called mobile applications 
applications run scarce resource platforms personal digital assistants notebooks mobile phones limited cpu power memory battery life 
usually connected wireless links characterized lower bandwidths higher error rates frequent disconnections 
distributed applications services designed assumption terminals powerful stationary connected fixed networks 
conventional middleware technologies focused masking problems heterogeneity distribution facilitate development distributed systems 
allow application developers focus application functionality dealing explicitly distribution issues 
different middleware systems corba dcom java rmi proved suitability standard client server applications 
highly variable computing environment conditions characterize mobile platforms believed existing traditional middleware systems capable providing adequate support mobile wireless computing environment 
great demand designing modern middleware systems support new requirements imposed mobility 
survey provides general overview relevant mobile middleware systems highlights modern solutions goals need achieved 
main aim survey assist middleware researchers evaluate strength weakness proposed approaches gain knowledge requirements mobile middleware systems 
organized follows section define term middleware primarily role distributed systems 
major challenges mobile computing environments 
identify number requirements building generation middleware 
section illustrates simple case study highlights necessity adopting requirements 
section gives detailed review major solutions proposed date 
approach reflective middleware systems support reconfigurability adaptability 
solution concept open implementation reflection provide access underlying system 
reviewed number middleware systems including opencorba open orb dynamictao flexinet globe 
tuple space middleware provides solution handles problem disconnected operations supporting asynchronous communication paradigm 
tuples basic elements category middleware read written participants 
discuss tuple space solutions lime tspaces javaspaces 
context aware middleware exploits concept awareness expose internal external execution context applications may direct middleware better performance 
middleware systems called nexus 
review event middleware provides basis building lightweight middleware asynchronous interaction model 
publish subscribe paradigm forms general idea type middleware expressed hermes 
describe middleware solutions bayou jini particularly developed target specific mobility issues disconnected operations service discovery 
section provides simple discussion surveyed presents number remaining issues 
section draws need new approaches generation middleware 
mobile architectural requirements people come different definitions term middleware agree plays vital role hiding complexity distributed applications 
applications typically operate environment may include heterogeneous computer architectures operating systems network protocols databases 
unpleasant application developer deal heterogeneous plumbing 
middleware primary role conceal complexity developers deploying isolated layer apis 
layer bridges gap application program platform dependency 
middleware defined follows 
middleware enabling layer software resides application program networked layer heterogeneous platforms protocols 
decouples applications dependencies plumbing layer consists heterogeneous operating systems hardware platforms communication protocols 
limitations mobile computing common factors affect design middleware infrastructure required mobile computing mobile devices network connection mobility 
mobile devices vary term resource availability 
devices laptops offer fast cpus large amount ram disk space pocket pcs phones usually scarce resources 
impossible expensive augment resource availability 
middleware designed achieve optimal resource utilization 
network connection mobile scenarios characterized limited bandwidth high error rate higher cost frequent disconnections due power limitations available spectrum mobility 
wireless mobile networks wavelan organized geographically defined cells control point called base station cells 
hosts cell share network bandwidth bandwidth rapidly decreases new host joins cell 
mobile devices may move different areas coverage high interference cause sudden drop network bandwidth loss connection entirely 
unpredictable disconnection common issue frequently occurs due handoff process shadowed areas 
wireless network services charge flat fee service usually covers fixed number messages 
additional charges levied packet message basis 
contrast cost sending data cellular connection time 
forces mobile users connect short period time 
physical host mobility greatly affect network connection accordingly adapt user mobility user respect new location 
mobile clients may interact different types networks services security policies move area 
requires applications behave differently cope dynamic changes environment parameters 
due limitations conventional middleware technologies designed fixed distributed systems prepared support mobile systems 
target static execution platform host location fixed network bandwidth fluctuate services defined 
identify number important requirements provided middleware mobile computing 
analyzing requirements mobile computing system lifetime application behaviour may need altered due dynamic changes infrastructure facilities availability particular services 
dynamic reconfiguration required achieved adding new behaviour changing existing system runtime 
dynamic changes system behaviour operating context runtime trigger re evaluation reallocation resources 
middleware supporting dynamic reconfiguration needs detect changes available resources reallocate resources notify application adapt changes 
adaptivity part new requirements allows applications run efficiently predictably broader range conditions 
adaptation system adapt behaviour providing uniform interface situations 
middleware needs monitor resource supply demand compute adaptation decisions notify applications changes 
asynchronous interaction tackles problems high latency disconnected operations arise interaction models 
client asynchronous communication primitives issues request continues operating collects result appropriate time 
client server components need running concurrently communicate 
client may issue request service disconnect network collect result 
type interaction style reduces network bandwidth consumption achieves decoupling client server system scalability 
context awareness important requirement build effective efficient adaptive system 
context mobile unit usually determined current location turn defines environment computation associated unit performed 
context may include device characteristics user activities services resources system 
context awareness systems systems sense execution context location 
system performance increased execution context disclosed upper layer assists middleware making right decision 
lightweight middleware needs considered constructing middleware mobile computing 
current middleware platforms corba heavy run devices limited resources 
default contain wide range optional features possible functionalities unused applications 
example invoking method remote object involves client side functionality dynamic static invocation interface 
existing orb implementations provide single separate libraries client server sides contains functionality 
forces client program glued entire functionality having choice select specific subset functionality 
get better insight requirements mentioned illustrate simple case study section 
motivations new requirements case study section presents electronic home shopping bidding application case study motivates need new middleware solutions support various requirements discussed previously 
example particularly aim highlight different degrees complexity introduced mobility role new requirements developing better middleware systems 
shown customers bidding system access information different items various online commerce sites pcs pocket pcs 
prices products hosted commerce sites fixed left subject competitive bidding real time auction 
consider scenario particular customer uses pc access sites home ppc moves 
assume pcs usually resource rich high internet connectivity bandwidth 
kind environment allows customers access data sites needed low computational network latencies 
contrast mobile devices pocket pcs resource poor usually connected internet poor quality links 
frequent access information sites 
data replication common solution suggested problem 
example products information needs replicated locally updated availability price items modified 
due memory disk limitation support replicating entire information locally 
products information replicated nearby pcs accessed pcs directly commerce sites 
current middleware replication done transparently client application 
transparency hides execution context available disk memory space client applications know data need access influence replication decision 
location awareness form context awareness client applications need support 
may happen customer wants collect order way home 
application needs aware location locate nearby store send order 
ppc laptop pc ppc commerce site commerce site electronic home shopping bidding system get impression dynamic reconfiguration functionality assume customer uses mobile device order different products available different servers 
assume server runs different middleware platform corba rmi run single instance object provides services 
mobile device needs dynamic configuration allows support method invocation mechanisms rmi corba objects 
middleware running mobile device needs discover platforms retrieve properties reconfigure generate appropriate request 
adaptivity key requirement allows applications react efficiently various changes conditions 
example focused network bandwidth candidates adaptivity 
assume customer submits query particular site 
may happen site server overloaded responsive 
assume data replicated server application may adapt situation switching server preserve consumption different resources bandwidth cpu battery 
assume user indicates request interested receiving picture video clip product 
application adapt case activating filtration protocol passing incoming data 
filtration process may include compressing resizing dropping non essential frames reduce bandwidth requirements 
common interaction model existing middleware platforms synchronous method invocation caller remains passive receiver responds 
inadequate mobile systems high latency disconnected operations occur 
example consider scenario seller adds new item selling list customer puts bid item 
involve registration item site notifying interested customers returning notification receipt 
asynchronous model convenient seller customer blocked receive 
may continue doing collect notification receipt 
customer certain product search process takes place match product site 
synchronous model available customers perceive delay due matching process 
delay may increase happens server holding database busy 
matching process needs repeated disconnection occurs receiving response 
small case study motivated number mobile middleware requirements 
section illustrates proposed middleware technologies highlights strengths limitations respect requirements 
mobile middleware technologies section sheds light different types mobile middleware technologies including architectures characteristics limitations 
start introducing classification allows contrast evaluate different categories 
middleware systems reviewed identified categories middleware 
category aims support requirements imposed mobility 
categories reflective middleware tuple space context aware middleware event middleware attempts address previous requirements different approaches 
middleware solutions reviewed discussed separate category 
targeted specific problems disconnected operations service discovery 
table illustrates various requirements met different categories 
requirements reflective tuple space context aware event synchronous connection asynchronous connectionless re configuration adaptation awareness light weight reflective middleware reflection technique initially field programming languages support design open extensible languages 
reflection applied fields including operating systems distributed systems 
principle reflection enables program access reason change behaviour 
smith defined concept reflection quote computational process constructed reason external world virtue comprising ingredient process interpreter formally manipulating representations world computational process reason virtue comprising ingredient process interpreter formally manipulating representations operations structures 
reflective system consists levels referred meta level base level 
performs computation objects residing lower levels 
performs computation application domain entities 
reflection approach supports inspection adaptation underlying implementation base level run time 
reflective system provides meta object protocol meta interface define services available meta level 
meta level accessed concept reification 
reification means exposing hidden aspect internal representation accessed application base level 
implementation openness offers straightforward mechanism insert behaviour monitor alter internal behaviour platform 
enables application charge inspecting adapting middleware behaviour needs 
lightweight middleware minimal set functionality achieved run mobile systems 
main motivation approach middleware adaptable environment better able cope changes 
examples middleware systems adopted concept reflection opencorba open orb dynamictao flexinet globe 
review major characteristics reflective systems 
opencorba opencorba reflective corba broker provides dynamic adaptability orb run time behaviours remote invocation idl type checking interface repository error handling 
opencorba architecture implemented smalltalk implementation supports metaclass programming providing clear separation object base level meta level 
base level consists classes denote behaviour instances meta level consists metaclasses define behaviour classes concerning object creation encapsulation inheritance rules message handling 
achieve dynamic modification provides protocol enables objects alter class run time 
protocol associated objects class allow inspection object behaviour life cycle dynamic alteration metaclasses change class property run time 
offer plug play environment add remove different class properties regenerating code 
illustrates example achieving dynamic adaptability opencorba 
metaclass metaclass class meta level base level dynamic adaptability class properties originally metaclass associated class association changed metaclass data type checking instance 
eventually class retrieves original state altering class association metaclass major reflective aspect opencorba dynamic modification remote invocation mechanism proxy class 
idl compiler opencorba creates proxy class similar client stub links metaclass intercepts request launches remote invocation real server object 
invocation semantics easily redefined associating proxy different metaclass run time 
scheme capable introducing new mechanisms object migration replication improve performances distributed systems 
performance issue opencorba mainly related performance message delivery depends technique called method wrappers 
method wrapping done compile time run time 
compile time difficult idl compiler anticipate methods wrapped 
wrapper technique needs applied methods involves extra cost 
run time opencorba introduces additional method invocations due metaclass indirection 
metaclass executes invocation received wrapper introduces extra invocation connect actual object server 
degrades system performance indirection level applied message send 
open orb open orb reflective middleware implemented python 
open orb designed target configurable dynamically reconfigurable platforms applications require dynamic requirements support multimedia real time mobility 
principle component unit composition independent deployment constructing open orb middleware 
component model derived rm odp computational model components multiple interfaces implementing various entities middleware functionality 
component associates meta space 
meta space partitioned set different meta space models model deals different view middleware implementation 
open orb currently supports meta space models interface architecture interception resources meta models illustrated 
structure meta space open orb meta model accessed associated meta object protocol mop defines services provided meta model represent 
component may associate meta objects provide access meta models 
structural reflection aspect supported interface architecture meta models behavioural reflection aspect supported interception resources meta models 
interface meta model deals external representation component 
interface definitions associated mop dynamically discover services provided particular component 
architecture meta model turn deals internal representation component 
composition aspect represented form component graph interconnections constituent components achieved local bindings 
associated mop provides operations inspect adapt graph structure add delete replace components offers dynamic adaptation 
interception meta model charge execution environment component interface 
provides ability inserting additional functions message arrival dispatching unmarshalling scheduling thread creation interface 
associated mop manipulates functions form dynamic interceptors perform preand post processing interactions 
resources meta model deals resource awareness resource management components represent underlying platform resources associated managers 
associated mop enables inspection reconfiguration activities associated resources adding removing resources altering parameters algorithms resource management 
open orb middleware architecture offers promising step robust design generation middleware platform overcomes corba limitations supporting multimedia 
middleware performance remains major issue system 
unwise run open orb middleware mobile devices built top corba implementation imposes heavy computational load 
investigations enable open orb middleware run efficiently minimal devices palm pilot matter ongoing 
dynamictao dynamictao reflective corba orb extends tao support run time reconfiguration orb engine non corba applications 
exports meta interface transferring components distributed system loading unloading modules system run time inspecting changing orb configuration state 
dynamictao internal system representation exposed set objects known component 
component configurator stores dependencies orb components orb application components 
instance component configurator obtained process 
maintains instances orb servants run process domain 
holds hooks linked different strategies concurrency scheduling monitoring 
strategies realised dynamically loadable libraries attached running process 
shows main structure dynamictao 
dynamictao structure illustrates dynamictao architecture framework 
component implementations stored local file system 
persistent repository responsible storing manipulating component implementations browsing deleting creating 
runtime component implementation easily loaded local file system linked associated process 
network broker triggers reconfiguration action receiving request mobile agent injected network 
mobile agent travels orb inspects necessary issues reconfiguration request 
network broker redirects request dynamic service configurator holds 
dynamic service configurator provides collection operations enable dynamic reconfiguration 
functionality assigned particular 
configuration tasks ace service config ace service repository manage start configuration files loaded implementations respectively 
dynamictao components supporting run time reconfiguration raises major consistency issues dynamictao 
consider scenario involves replacing old strategy sold new snew 
system crash unloading strategy sold occurred run strategy sold invoked replaced 
necessary sure strategy sold running state called 
second issue occurs state information strategy sold required passed strategy snew replacement 
dynamically loading unloading components introduces drawback system 
certain tools achieving mechanism required 
subsequently increases core component size unsuitable mobile devices 
default corba orbs contain possible functionality single library 
forces application attached entire functionality application uses subset entire functionality 
corba orbs split client server functionality different libraries leave choice applications select particular subset functionality 
substantial overhead introduced dynamic invocation interface dii client invokes certain method 
flexinet flexinet platform java middleware places emphasis reflection introspection layers 
layers flexinet protocol stack viewed reflective objects support different transformation method invocation 
flexinet offers generic binding framework set meta objects implement basic rpc operations 
flexinet stubs transform simple invocation generic invocation pass protocol stack layers 
stub functionality shifted stubs protocol stack 
may simplify stub generation run time increases protocol stack complexity 
different types high level functions serialisation replication object management part protocol stack layers 
flexinet layers designed highly autonomous allow replacing inserting extra layers 
flexinet currently realizes protocol stack rex reliable rpc protocol udp 
protocol stack generated single binder object called green 
describe different protocol layers follow flow client request server response protocol stack flexinet interfaces implemented client server layers respectively 
generic invocation passed layer calling methods 
layer processes generic call needed pass layer 
process continues call reaches bottom layer message form top layer call form 
interfaces need implemented rpc layer downward layers 
methods deal messages communication rpc layer message passing 
call initiated client stub converts call generic representation 
stage argument validation modification achieved reflective classes may called 
green protocol currently provide reflective meaning call forwarded directly 
layer contacts acquire session object associates session call 
responsible serializing methods arguments results 
client side stores server name identifier buffer 
server side restores server identifier find target object 
translates generic call call correct target object 
map rpc semantics series unreliable messages 
outgoing message reaches session id encoded message 
simplify re establishing session server side 
layer media access layer sending receiving udp messages performed socket 
request written socket client blocked reply returned server side 
generator resolver objects perform bindings server client sides respectively 
generator maps target interface name contains specific information enable clients locate target interface 
contrast resolver converts name proxy object stub related communication stack represent exported interfaces 
binding mechanism works flexinet 
binder term usually refers object generate resolve names 
flexinet support multiple binders protocols single process 
opens door choosing appropriate binder performing bindings 
protocol stack may associate binders selected dynamically 
presents different basic binders named green red 
green binder uses protocol rex udp red binder uses iiop tcp 
choice binder selects binder interface type name named resolved 
hierarchy binders flexinet achieves reflection implementing method reflection 
typically method calls target object intercepted parameters method calls forwarded meta method 
possibility applying modification method 
reply received meta method called apply meta transformations 
illustrates mechanism 
advantage approach stub needed apply functionality reflection remote invocation 
reflection flexinet java framework aimed modularity reusability performance 
modularity easily allows management policies plugged tradeoff performance resource usage 
flexinet framework performance tested rmi 
performance lower flexinet pure java depend external tools perform invocation 
contrast rmi respectively depend native method stub compilation tools function 
flexinet synchronization model communication 
type communication model characterized poor utilization bandwidth 
globe globe distributed system middleware platform particularly constructed dealing large scale systems 
principle reflection achieved supporting replication caching distribution object state 
globe architecture special kind object model called distributed shared object dso 
distributed shared object viewed conceptual object physically distributed machines 
object viewed wrapper encapsulates object strategy replication distribution 
allows different application objects encompass policies fit requirements 
communication processes done distributed shared objects 
large number processes may share single object 
globe object usually provides multiple interfaces define set methods 
processes interact invoking methods 
transparency aspect distributed objects achieved hiding method implementations client process interfaces 
process fires call object method binding object take place 
binding done object contact points 
interface implementation result binding process 
interface belongs dso placed client address space 
resulting implementation called local representative object 
local object representative dso care implementations replication communication protocol state distribution 
illustrates globe object distributed address spaces 
globe object model shows distributed shared object dso distributed address spaces 
address space local object represents dso 
local objects communicate reside different address spaces 
local object self contained composite object minimally consists subobjects shown 
distributed object general implementation semantics subobject implements part actual distributed object semantic consists user defined primitive objects written programming languages java 
communication subobject handles communication distributed objects residing different machines 
communication subobject may provide different types communication point point multicast 
replication subobject keeps global state distributed object consistent local objects coherence strategy 
different replication subobjects may different replication algorithms 
control subobject takes care method invocations process controls communication semantics replication subobjects 
communicate distributed shared object client process requires bind object 
different phases achieving binding 
finding distributed object phase consists name location look steps 
client process send object name naming service 
object handle sent back naming service 
handle basically worldwide unique location independent object identifier oid identify dso 
identifier passed processes object 
oid mapped contact addresses obtained location service 
installing local object second phase consists selecting appropriate contact address interface implementation 
suitable contact address describes dso reached needs selected 
address selection done different criteria determine preference address 
local run time system generates new local object client address space associates new representative dso 
describes binding steps 
binding process distributed shared object tuple space middleware communication wireless environment characterized frequent disconnections limited bandwidth 
communication models message passing rpc rmi drawback tight coupling 
means sender know exact identity address receiver 
sender wait receiver ready exchanging information synchronization paradigm 
distributed open systems tends restrictive 
decoupled opportunistic style computing required 
computing expected proceed presence disconnection exploit connectivity available 
solution concept tuple space initially introduced gelernter part linda coordination language 
tuple space systems proved ability facilitating communication wireless settings 
general tuple space globally shared associatively addressed memory space processes communicate 
tuple space system realized repository tuples basically vector typed values fields 
client processes create tuples place tuple space write operation 
concurrently access tuples read take operations 
tuple space systems support versions tuple retrieval operations blocking non blocking 
template similar tuple match contents tuples tuple space retrieval operations 
template matches tuple equal number fields template field matches corresponding tuple field 
form communication fits mobile setting logical physical mobility involved 
review tuplespace systems linda 
lime linda mobile environment lime model designed provide application designers developers coordination layer deal logical physical mobility 
lime inherits adapts communication model proposed linda :10.1.1.113.9679
coordination aspect linda accomplished tuple space globally shared mobile units 
tuple space accessed basic set linda primitives allow inserting reading withdrawing tuples 
processes interact shared tuple space basically realized repository tuples 
multiple processes simultaneously access tuples 
tuple data structure ordered sequence data types 
tuples inserted deleted read rd operations respectively 
rd operations implemented synchronous model 
means processes performing operations suspended matching tuple available tuple space 
communication aspect offered linda require sender receiver available time 
need advance knowledge participant location data exchange 
idea static persistent global visible tuple space assumed linda reasonable meet mobility demands 
global context formed transient community mobile hosts mobile agents 
component contributes individual context 
naturally global context needs changed transient communities dynamically changed due connectivity variation agent migrations 
lime adapts linda model notion transiently shared tuple space shifts fixed context dynamically changing 
basically linda tuple space divided tuple spaces permanently attached mobile hosts agents 
transient sharing accordingly allows dynamic tuples contents 
shown mobile unit access global context interface tuple space permanently attached unit travels migration happens 
transiently shared tuple spaces lime contains tuples shared mobile units :10.1.1.113.9679
accessed linda operations rd 
new mobile unit arrives tuple space contents engaged mobile units 
resulting set tuples accessible unit dynamically recomputed 
similarly mobile unit departs tuple space contents disengaged tuple space 
mobile agents active units carry concrete tuple space 
transient sharing gives mobile host illusion local tuple space holds belonging multiple agents located machine 
local tuple space known host level tuple space 
host level tuple space transiently shared connected hosts forming federated tuple space 
lime supports coordination hides details distribution mobility 
relieves designers dealing changes mobile applications demand deal data distribution explicitly 
lime provides kind control extending linda operations tuple location parameters 
operation extended adding location parameter represents agent host identifier responsible holding tuple 
new semantics equivalent steps 
inserts tuple agent invoking operation 
tuple locations current location destination location 
agent connected tuple moved destination location 
tuple remains current location 
location parameter notion available rd operations 
achieve full context awareness lime exposes necessary information read tuple space called 
tuples hold information mobile units exist community relationship 
lime extends basic linda tuple space notion reaction 
operation tuple space reaction chosen pattern compared content tuple space 
matching tuple executed reaction skip 
lime provides form context awareness overhead cost high 
blocking behaviour lime primitives adds overhead 
support behaviour adaptation 
tspaces tspaces network middleware platform combination tuple space idea database technologies 
provides lightweight database extensible computation environment secure communication layer 
implemented java adds portability feature system 
tspaces expands linda framework real data management capability downloading new data types functionality dynamically :10.1.1.113.9679
tspaces contains features available tuple space systems 
tspaces supports nonblocking blocking versions tuple operators read take 
new data types operators dynamically defined downloaded tspaces server immediately 
tspaces operations performed transactional context ensure data integrity 
tspaces provides indexing mechanism query capability facilitate data retrieval 
data operations fully decoupled order add remove operations affecting database 
tspaces client server communicate tuples 
tuple basically ordered field describes type value 
tspaces server may accommodate tuple spaces 
tuple spaces created server side tspaces client may perform variety operations 
illustrate view clients communicating tspaces server 
tspaces server forms centralized model listens responds client requests 
shown client triggers write operation write test tuple tuple space 
test tuple stored tspaces tuple database 
client triggers read operation indicating test required tuple 
request sent server search test tuple database 
test tuple copy tuple passed client 
read operation take operation copy test remain tuple database 
types server system tuple spaces galaxy admin 
galaxy space contains tuples describing tuple space exists tspaces server 
galaxy tuple space start point operations 
implements operations 
admin tuple space contains access control permissions tuple space groups client belongs user name password client 
primarily check issuer operation proper access control privileges 
tspaces overview tspaces support kind replication improve system performance 
usually server tspaces 
system performance affected server overloaded crashed 
clients need kind caching technique overcome disconnections issue 
due sudden disconnections clients access information retains tspaces server 
efficient caching mechanism may resolve problem 
executing transactional operations tuple space database introduces high costs terms delay time consumes bandwidth 
clear write operation performs checks avoid tuple redundancy 
javaspaces javaspaces attractive technology dynamic communication coordination sharing objects distributed computing environment 
javaspaces package provides management structure virtual space shared objects exist accessed client processes 
enables providers requesters exchange tasks requests information form java objects 
implementation provides developers useful tools java style methods support tuple space operations read write take create store objects persistence 
javaspaces system inspired linda differentiates linda objects represent tuples 
field tuple object may methods 
allows objects expressed java classes communicate tuple persistent 
shows main ideas javaspaces technology 
discussed tspaces space hosted server computer manages objects placed client processes 
server side assumed powerful machine may run relational object oriented database achieve persistence tuple space 
javaspaces architecture supports mechanism implement transactions compound objects multi operations 
objects managed space need implement entry interface 
client process write entry objects space read copy objects take objects space 
entry objects need matched read take operations pattern matching data field 
objects shared asynchronous communications object buffering persistence automatically managed 
javaspaces technology general tuple space systems support notion context awareness considered important element mobile environments 
data structures represent tuples hosted server provide context information applications 
current primitives allow applications influence middleware behaviour 
complex primitives needed support notion adaptation 
currently provision reconciliation mechanism tuples 
important requirement possibility tuple duplication tuple space systems 
different clients may obtain copy tuple keep updating disconnected 
reconnection tuple space system check hosts share tuple 
reconciliation mechanism needs initiated reflect updates due clients 
context aware middleware mobile systems run extremely dynamic environment 
execution context changes frequently due user mobility 
mobile hosts roam different areas services available disconnecting may available 
bandwidth connectivity quality may quickly alter mobile host movements locations 
application developers predict possible execution contexts allow application know react scenario 
middleware expose context information application aware dynamic changes execution environment 
application instructs middleware adapt behaviour order achieve best quality service 
context aware computing proposed 
research groups gave special attention particular location awareness 
example location information exploited provide travellers directional guidance discover neighbouring services broadcast messages users specific area 
location aware systems depend underlying network operating system obtain location information generate suitable format system 
heterogeneity coordination information supported different positioning systems required deal different sensor technologies global positioning system gps outdoors infrared radio frequency indoors 
briefly review middleware system supports different positioning systems common interface 
nexus middleware designed generic platform kinds applications 
platform consists components need cooperate user interface sensor systems communication data management 
shows architecture nexus platform 
user interface runs mobile device carried users enables nexus clients location aware applications communicate nexus platform 
adapt variety nexus stations related diversity computing power memory size network connection displays 
user interface platform independent 
sensor systems required provide positioning information nexus system 
set sensors system nexus applications may run outdoor indoor area 
difficult sensor positioning environments 
example global positioning system gps outdoors indoors satellite signals blocked buildings 
possible combine measurements different sensors increase accuracy 
real need multi sensor tool verity environments high accuracy 
communication unit takes care data exchange different components platform 
usually mobile devices different types network connections access necessary information 
major task unit decide network component best 
communication unit support adaptivity system case bandwidth fluctuation 
data management responsible different aspects concerning management data 
organizes data distributed environment enables processing shared different servers reduce response time 
spatial data needs offered multiple representations meet needs different applications 
interoperability data guaranteed 
architecture nexus platform system supports type context awareness location awareness 
necessary take account types context awareness internal resources memory size battery processor power external resources network bandwidth connectivity quality 
making application aware execution context adds additional level complexity application developers 
efforts need directed easy context representation simple interfaces enables applications interact underlying middleware 
event middleware invocation middleware systems corba java rmi useful abstractions building distributed systems 
communication model platforms request reply pattern object remains passive principle performs operation 
kind model adequate local area network lan small number clients servers scale large networks internet 
main reason request reply model supports communication imposes tight coupling involved participants synchronous paradigm 
model unsuitable unreliable dynamic environment 
event communication paradigm possible alternative dealing large scale systems 
event notification basic communication paradigm event middleware systems 
events contain data describes request message 
propagated sending components receiver components 
order receive events clients subscribers express subscribe interest receiving particular events 
clients subscribed servers publishers publish events sent interested subscribers 
paradigm offers decoupled communication model clients servers 
asynchronous notification events supported naturally 
examples middleware event systems limited hermes cea steam jedi 
discuss examples briefly 
hermes hermes distributed event middleware architecture powerful support large scale distributed applications 
system architecture consists main components event clients event brokers 
event clients represent event publishers subscribers communicate event brokers asynchronous message passing xml 
event brokers contain entire functionality middleware event clients 
allows event clients lightweight components run mobile systems 
main role brokers receive subscriptions subscribers content routing algorithm deliver events publishers interested subscribers 
consume bandwidth increase scalability event stream filtration done close possible event publisher 
shows distributed application built top hermes 
event broker event subscriber event publisher distributed application built hermes hermes depends service peer peer overlay routing network similar 
overlay routing network provides abstraction routing route message destination id function 
allows broker send message broker routed overlay network 
advantages gained overlay network event dissemination 
global state knowledge required event routing 
means event broker need advance knowledge subscriptions event sources 
system robustness increased overlay network transparently deals link node failures 
overlay routing operation set rendezvous nodes special event brokers known publishers subscribers 
responsible creating event dissemination trees 
hermes events part event type hierarchy contains event attributes 
event client subscribes needs specify event type interest 
provides filtering expression operates event attributes supplied type 
event type attributes known middleware simple type check events subscriptions runtime notify user mismatch 
qos security composite events discovery reliability event middleware layer type attribute pub sub layer type pub sub layer overlay routing network layer network layer ip unicast multicast transactions layered architecture hermes hermes architecture represented layered stack illustrated 
overlay routing layer offers basic communication service event brokers 
functionality publish subscribe split pub sub layers implement event dissemination algorithms source side filtering 
middleware services qos security reliability implemented form modules top event middleware layer 
hermes support notion composite events 
architecture extended adding composite event services combine primitive events composite events 
composite event services register clients interest appropriate event resources notify clients composite events 
special mechanism needed model event arrival different sources specify composite events 
may complicate system architecture add extra cost 
hermes event broker provide persistent storage events stored provision reliable event service 
storing events guarantee correct delivery events interested subscribers brokers failures 
brokers provide mechanism prevents mobile user missing events interest disconnected networked systems 
middleware solutions middleware solutions proposed particularly target mobility aspects 
unpredictable disconnections major mobility issues addressed systems 
systems coda successor odyssey bayou xmiddle data replication increase data availability mobile users 
allows users access replicas continue tasks 
disconnection operations take place 
system uses different mechanisms guarantee ultimate consistency replicas 
mechanisms include support discovery inconsistent data data reconciliation 
services discovery know problem introduced user mobility 
static environment new services easily discovered asking service providers register known location service 
mobile computing environment situation different mobile hosts roam various areas 
services disconnecting network may exist 
jini ninja service discovery service sds examples systems support dynamic service discovery 
section describe main architecture features systems support disconnected operations bayou discovery services jini 
bayou bayou system platform provides replicated highly available mobile storage building collaborative applications 
maintains conflicts caused concurrent activity relying weak connectivity mobile computing 
replication required order allow disconnected users access common storage 
bayou system enables users read write copy database 
communicating replicas may feasible time affects correctness performing write update operations replicas 
leads weakly consistent replicated data transparent applications 
applications aware weakly consistent data involved solving conflicts 
bayou system provides support application specific conflict detection reconciliation 
conflict detected performing write operation includes data dependency set 
collection queries expected results supplied application 
conflict detected queries run copy database return expected results 
bayou provides means resolving conflicts 
write operation includes procedure called called write conflict detected 
mobile agents clients create pass servers run resolve conflicts 
bayou system ensures copies database converging identical states 
servers propagate write operations database copies anti entropy protocol 
protocol adopted guarantee machines able propagate updates 
machines directly communicate exchange updates intermediaries 
server periodically selects server perform pair wise exchange writes 
servers identical copies database 
eventual consistency reached having write operations applied order servers 
illustrates main components bayou architecture 
bayou system model bayou system uses application knowledge dependency checks merge procedures achieve conflict detection resolution coda promotes transparency conflict detection resolution 
bayou allows replicas remain accessible 
permits clients continue read previously written data issue new writes may lead cascading conflict resolution newly issued operations depend data conflict 
shown client server may resident host laptop pda 
enables lightweight servers run portable machines 
main drawback bayou system client server model architecture 
model uses rpc protocol communication follows synchronous paradigm 
disadvantage complete data collection needs replicated full number servers 
inadequate handheld devices due capacity limitation 
handheld devices play role clients architecture 
partial replicas contain subsets data collection important portable devices need supported 
jini mobility poses interesting problem mobile users locate particular network service device available services devices 
key challenge users discovering appropriate service certain task accessible services 
word appropriate depends user specific definition cost location accessibility 
concept service defined entity user application service 
service form computation storage communication channel user software filter hardware device user 
example service controlling lights doors house 
accessing services secure manner crucial requirement 
clients expected keep track running services knowing ones trusted 
jini middleware system provides dynamic discovery services built idea groups devices software components single dynamic distributed system 
main aim federation increase flexibility networks simplicity access ease administration support sharing 
system focusing making network dynamic entity enabling services added removed federation flexible manner 
jini services resolved lookup service maps set interfaces offered service collection objects service 
protocols discovery join add new service lookup service 
service provider uses discovery protocol find appropriate lookup service registers service object proxy service attributes lookup service join protocol 
client requests service copy service object moved client client talk service 
client able interact directly service provider service object proxy 
lookup happens client needs find call service described interface type 
describes lookup process 
lookup process jini system services jini system accessed lease manner gives guarantees access services time period 
service lease negotiated user provider service 
lease needs renewed freed client network fails 
exclusive leases prevent concurrently resource 
leases allow users share resource 
jini system supports notion transactions number operations belonging single multiple services wrapped transaction 
supports distributed event programs discussed previous section 
distributed security model offered provide access resources authorized users 
jini system relies availability high network bandwidth enables services devices users join leave network transparent manner 
assumes devices memory processing power network latency reasonable 
exist mobile computing environment limited bandwidth devices scarce resources 
jini infrastructure java simplifies jini architecture java programming language implementation language components 
adds ability dynamically download run codes platform features jini architecture 
jini architecture relies java application environment java programming language 
implies programming language supported jini system long compiler generates compliant bytecodes java programming language 
java remote method invocation rmi support communication services 
rmi follows synchronous communication model blocks requester returned result received requester 
discussion section summarizes previous discussion generation middleware emphasis lessons learned investigating proposed solutions previous section 
particularly aim highlight extent solutions suitable mobile settings 
major challenge solve problems mobile distributed systems 
true due high degree dynamism mobile environments 
current middleware platforms corba successfully run environment 
urgent need new solutions support particular application requirements dynamic reconfiguration context awareness adaptation 
believe reflective approach described section provides solid base building generation middleware platforms overcomes limitations current middleware technologies 
specifically architecture follows white box philosophy provides principled comprehensive access internal details 
decrease problems maintaining integrity object interface attached single metaobject time 
modification meta object affect single object 
reflective systems support higher level reflection add remove methods objects classes dynamically alter class object run time 
contrast concentrate simpler reflective paradigm achieve better performance 
reflective mechanisms part usual flow control invoked required 
reflective middleware flexinet dynamictao built concept object oriented component frameworks respectively 
component frameworks cfs initially defined szyperski collection rules interfaces govern interaction set components plugged advantages cfs object oriented approach 
uses cfs limited particular programming language inheritance relation components framework 
components cfs developed independently distributed binary form combined run time 
noticed issue consistent dynamic reconfiguration research 
area focused developing reconfiguration models algorithms enforce defined consistency rules minimizing system disturbance 
performance issue remains matter investigation 
reflective systems previously impose heavy computational load cause significant performance degradation mobile devices 
tuple space systems exploit decoupled nature tuple spaces supporting disconnected operations natural manner 
default offer asynchronous interaction paradigm appears appropriate dealing intermittent connection mobile devices case server reach mobile client requires voluntary disconnect save battery bandwidth 
tuple space approach decouple client server components time space 
words need connected time place 
tuple space systems support concept space spaces offers ability join objects appropriate spaces ease access 
opens possibility constructing dynamic super space environment allow participating spaces join leave arbitrary time 
ability multiple spaces elevate throughput system 
study noticed tspaces typically require mbytes ram 
affordable handheld devices available market nowadays 
context aware systems provide mobile applications necessary knowledge execution context order allow applications adapt dynamic changes mobile host network condition 
execution context includes limited mobile user location mobile device characteristics network condition user activity driving sitting room 
context information typically disclosed convenient format applications instruct middleware system apply certain adaptation policy 
knowledge context aware applications focusing user location things interest mobile changing 
believe reflective approach may improve development context aware services applications 
general reflective system provides mobile applications context information need optimise middleware behaviours 
reflection solution suggested metadata reflection support context aware applications 
traditional invocation middleware corba follow request reply communication style scale large networks internet 
event paradigms interesting style supports development large scale distributed systems 
system clients announce interest receiving specific events servers broadcast events interested clients 
event model achieves highly decoupled system interaction style clients servers 
believe lot managed merge publish subscribe communication approach event middleware systems 
existing systems combine traditional middleware functionality security qos transactions reliability access control event paradigm 
feel event middleware successful functionality provided 
event systems integrate object oriented programming languages due major mismatch concept objects events 
events viewed untyped collection data attribute value pairs current programming languages support typed objects 
events support data typing order treated objects 
addition developers responsible handling low level event transmission issues 
current publish subscribe systems restricted certain application scenarios instant messaging stock quote dissemination 
indicates systems designed general middleware platforms 
discussion realize moment middleware system fully support requirements mobile applications 
solutions considered aspect door research wide open 
proliferation development wireless technologies portable appliances paved way new computing paradigm called mobile computing 
mobile computing software expected operate environments highly dynamic respect resource availability network connectivity 
traditional middleware products corba java rmi assumptions applications distributed systems run static environment fail provide appropriate support mobile applications 
gives strong incentive researchers develop modern middleware supports facilitates implementation mobile applications 
discussed state art middleware mobile computing 
common characteristics set requirements mobile computing middleware allows better understand relationship existing bodies middleware 
explained reasons failure traditional middleware systems supporting mobile settings 
identified illustrated comparatively discussed middleware classes reflective middleware tuple space context aware middleware event middleware 
categories pool middleware solutions developed address specific mobility issues 
middleware systems support requirements highlighted section 
concluded category simple qualitative evaluation number observations related issues need investigations 
ledoux opencorba open broker reflection volume lncs saint malo france july pp 

springer verlag 
new smalltalk kernel allowing explicit implicit metaclass programming workshop extending smalltalk language oopsla san jose california october 
brant foote johnson roberts wrappers rescue proceedings ecoop springer verlag brussels belgium july 
gordon blair geoff coulson anders andersen lynne blair michael clarke costa hector duran tom fitzpatrick lee johnston rui moreira nikos katia design implementation open orb ieee distributed systems online 
szyperski component software object oriented programming acm press addison wesley 
iso iec open distributed processing model part foundations itu rec iso iec iso iec 
kiczales des rivi res bobrow art metaobject protocol mit press 
fabio kon manuel roman ping liu mao luiz claudio roy campbell monitoring security dynamic configuration dynamictao reflective orb proceedings ifip acm international conference distributed systems platforms open distributed processing middleware number lncs pages new york april 
springer verlag 
douglas schmidt chris applying patterns develop extensible orb middleware ieee communications magazine special issue design patterns may 
kon campbell dependence management component distributed systems ieee concurrency 

hayton flexinet architecture report ansa phase iii report february otway rex remote execution protocol object oriented distributed applications ieee press 
van steen tanenbaum globe wide area distributed system ieee concurrency march 
picco murphy 
roman lime linda meets mobility garlan editor proc 
st int 
conf 
software engineering pages may 
gelernter generative communication linda acm computing surveys jan :10.1.1.113.9679
wyckoff lehman ford spaces ibm systems journal 

waldo javaspaces specification 
technical report march sun microsystems 
fritsch volz nexus positioning data management concepts location aware applications proceedings nd international symposium nice sophia antipolis france pp 

kiczales des rivieres borrow art metaobject protocol mit press 
reflective operating system concept implementation proceedings oopsla pp 

acm press 
meta level architecture support distributed objects proceedings san francisco pp 

smith reflection semantics procedural programming language 
ph thesis january mit 
gelernter generative communication linda acm transactions programming languages systems vol 
pp 
january 
schilit adams want context aware computing applications proc 
workshop mobile computing systems applications santa cruz ca dec pp 

indoor wireless system personalized shopping assistance proceedings ieee workshop mobile computing systems applications santa cruz california dec pp 

ieee computer society press 
bennett richardson harter teleporting making applications mobile proc 
ieee workshop mobile computing systems applications santa cruz california dec pp 

ieee computer society press 
dey salber abowd conference assistant combining context awareness wearable computing proc 
rd international symposium wearable computers iswc san fran sco california oct pp 

ieee computer society press 
jean bacon ken moody john bates richard hayton ma andrew mcneil oliver seidel mark generic support distributed applications ieee computer pages march 
peter jean bacon hermes distributed event middleware architecture submitted workshop distributed event systems debs 
meier cahill steam event middleware wireless ad hoc networks proceedings international workshop distributed event systems icdcs debs 
vienna austria pp 

antonio carzaniga alexander wolf content networking new communication infrastructure nsf workshop infrastructure mobile wireless systems scottsdale az october 
antony rowstron peter druschel pastry scalable decentralized object location routing large scale peer peer systems proc 
middleware november 
tony ballardie paul francis jon crowcroft core trees cbt acm sigcomm ithaca usa 
antony rowstron anne marie kermarrec miguel castro peter druschel scribe design large scale event notification infrastructure proc 
rd int 
workshop networked group communication ngc november 
cugola fuggetta jedi event infrastructure applications development opss wfms ieee trans 
software engineering sept 
satyanarayanan kistler kumar okasaki siegel steere coda highly available file system distributed workstation environment ieee transactions computers april 
satyanarayanan mobile information access ieee personal communications february 
demers petersen spreitzer terry theimer welch bayou architecture support data sharing mobile users proceedings ieee workshop mobile computing systems applications santa cruz california december pp 

terry theimer petersen demers spreitzer hauser managing update conflicts bayou weakly connected replicated storage system proceedings th acm symposium operating systems principles sosp cooper mountain colorado august pp 

mascolo capra emmerich xml middleware peer peer computing proc 
international conference peer peer computing sweden august 
arnold sullivan scheifler waldo wollrath jini specification second edition 
addison wesley 
demers greene hauser irish larson shenker sturgis swinehart terry epidemic algorithms replicated database maintenance proceedings sixth symposium principles distributed computing vancouver canada august pages 
steven czerwinski ben zhao todd hodes anthony joseph randy katz architecture secure service discovery service fifth annual international conference mobile computing networks mobicom seattle wa august pp 

bernstein middleware model distributed system services communications acm vol 
pp 
february 
application integration business enable enterprise leung 
jacobsen predicate matching subscription matching publish subscribe systems proceedings workshop distributed event systems nd international conference distributed computing systems vienna austria ieee computer society press july 
szyperski component software object oriented programming addison wesley 
kramer evolving philosophers problem dynamic change management ieee trans 
software engineering vol 
num 
pp 

november 
capra emmerich mascolo middleware solutions context aware applications proceedings reflection 
third international conference metalevel architectures separation crosscutting concerns kyoto japan sept 

