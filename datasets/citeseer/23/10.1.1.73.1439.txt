brics rs olivier interpreter logic engine brics basic research computer science interpreter logic engine danvy olivier brics report series rs issn march copyright danvy olivier 
brics department computer science university aarhus 
rights reserved 
reproduction part permitted educational research condition copyright notice included copy 
see back inner page list brics report series publications 
copies may obtained contacting brics department computer science university aarhus ny munkegade building dk aarhus denmark telephone telefax internet brics brics dk brics publications general accessible world wide web anonymous ftp urls www brics dk ftp ftp brics dk document interpreter logic engine olivier danvy brics department computer science university aarhus march starting continuation interpreter simple logic programming language propositional prolog cut derive corresponding logic engine form machine 
derivation originates previous article ppdp applied lambda calculus 
key transformation reynolds transforms tail recursive continuation passing interpreter transition system machine 
similar denotational operational semantics studied de bruin de article tapsoft compare study derivation 
additionally direct style interpreter propositional prolog expressed control operators delimited continuations 
appear proceedings 
basic research computer science www brics dk funded danish national research foundation 
dk aarhus denmark 
email danvy brics dk contents simple example 
advanced example factorial function 
propositional prolog generic interpreter propositional prolog generic notion answers results 
specific answers results 
solution 
number solutions 
generic interpreter semi compositionally 
specific interpreters 
specific interpreter computing solution 
specific interpreter computing number solutions machines propositional prolog solution 
number solutions 
related direct style interpreter prolog previous derivation interpreter machine possible connect known calculus interpreters known machines calculus discover new ones 
goal test derivation programming language calculus 
pick simple logic programming language propositional prolog cut section 
syntax informal semantics computational model base success failure continuations section 
specify interpreter propositional prolog generic parameterized way leads logic engine 
logic engine transition system obtain success failure continuations section 
analyze direct style interpreter propositional prolog appendix 
machines consider models computation devices high performance transformations consider changes representation optimizations 
prerequisites expect passing familiarity notions success failure continuations standard ml module language 
originates reynolds seminal article definitional interpreters higher order programming languages 
point transform higher order program order program replacing function types sum types 
inhabitants function type instances anonymous lambda abstractions 
program amounts enumerating lambda abstractions sum type function replaced corresponding constructor holding values free variables lambda abstraction function elimination application replaced case dispatch 
inhabitants function type represented elements corresponding sum type 
danvy nielsen study contains examples article self contained consider concrete cases 
simple example trivial program higher order auxiliary function aux passed function type int int argument aux int int int int fun aux main int int int int fun main aux fn aux fn inhabitants function space int int instances anonymous lambda abstractions declared main fn band fn free variable second closed free variables 
program enumerate lambda abstractions sum type lam define corresponding apply function interpret summands datatype lam lam int lam apply lam lam int int fun apply lam lam apply lam lam program lambda abstraction replaced corresponding constructor application replaced call apply function aux int lam int fun aux apply lam apply lam main int int int int fun main aux lam aux lam resulting program order 
advanced example factorial function continuation passing version factorial function fac int int fun fac fac fac fn main int int fun main fac fn consider program main fac 
polymorphic type domain answers instantiated int 
candidate function space continuation int int 
inhabitants instances lambda abstractions initial continuation main free variables intermediate continuation induction case fac free variables corresponding data type constructors datatype cont cont cont int cont apply cont cont int int fun apply cont cont apply cont cont apply cont correspondingly apply function associated data type interprets constructors initial continuation intermediate continuation 
observe cont isomorphic data type lists integers 
adopt simpler representation continuations type cont int list apply cont cont int int fun apply cont nil apply cont apply cont program continuations replaced constructors applications continuations replaced call apply cont fac int cont int fun fac apply cont fac fac main int int fun main fac nil resulting program order calls tail calls computations actual parameters elementary 
transition system sense automata formal languages 
main fac actual parameters form configurations ml definitions specify transition relation expressed table 
top transition specifies initial state bottom transition specifies terminating configurations 
machine consists mutually recursive transition functions operates pairs integers second operates stack integers integer nil fac fac app fac fac app app nil app accordingly result continuation passing interpreter transition system machine sense automata formal languages 
property calculus propositional prolog 
propositional prolog syntax propositional prolog reads follows structure source struct type ide string datatype atom ide ide goal goal cut fail withtype goal atom list type clause ide goal datatype program program clause list datatype top level goal goal goal program consists list clauses 
clause consists identifier head clause goal body clause 
goal list atoms empty list represents logical value true non empty list atoms represents conjunction 
atom identifier disjunction goals cut operator fail operator 
intuitive semantics language standard 
prolog program goal try verify goal follows program sense propositional logic terms logic programming sld resolution algorithm goal program stops empty clause 
answer positive stops subgoals waiting resolution answer negative 
unification algorithm consists looking clause specified head program 
atom disjunction goals chosen body lead positive answer disjunct tried backtracking 
backtracking find possible solutions resolution tree case propositional prolog amounts counting positive answers 
operators provide additional control traversal resolution tree cut operator removes potential paths fail operator current goal unsatisfiable triggers backtracking 
generic interpreter propositional prolog account backtracking necessary implement resolution success failure continuations 
failure continuation parameterless function thunk yielding final answer 
success continuation maps failure continuation final answer 
initial success continuation applied solution 
initial failure continuation applied solution 
addition account cut operator pass cut continuation cached failure continuation 
usual continuations domain answers left unspecified 
generic notion answers results specify answers ml signature 
type answers comes initial success continuation initial failure continuation 
signature declares type results extraction function mapping generic answer specific result 
signature answer sig type answer val sc init unit answer answer val fc init unit answer type result val extract answer result specific answers results consider kinds answers solution total number solutions 
solution notion answer simplest define 
answer result defined type booleans extract identity function 
initial success continuation ignores failure continuation yields true initial failure continuation yields false 
structure answer answer struct type answer bool fun sc init fc true fun fc init false type result bool fun extract number solutions notion answer delicate 
tempted define answer type integers resulting implementation longer tail recursive 
extra layer continuations define answer type functions integers integers result integers extract function triggering resolution applying answer initial count 
initial success continuation takes note intermediate success incrementing current count activating failure continuation 
initial failure continuation passed final count returns 
structure answer answer struct type answer int int fun sc init fc fn fc fun fc init fn type result int fun extract generic interpreter semi compositionally define generic interpreter propositional prolog displayed recursive descent source syntax parameterized notion answers implementing signature signature interpreter sig type result val main source top level goal source program result run goal empty list atoms interpreted true accordingly success continuation activated 
non empty list atoms sequentially interpreted run seq extending success continuation interpretation fun sc init fc fc call fc tail call 
functor structure answer interpreter struct open source type result result type fcont unit answer type fcont answer type fcont run goal goal clause list fcont answer fun run goal nil sc fc cc sc fc run goal sc fc cc run seq sc fc cc run seq atom goal clause list fcont answer run seq nil sc fc cc run atom sc fc cc run seq sc fc cc run atom fn fc run seq sc fc cc fc cc run atom atom clause list fcont answer run atom ide sc fc cc case lookup fc run goal sc fc fc run atom sc fc cc run goal sc fn run goal sc fc cc cc run atom cut sc fc cc sc cc run atom fail sc fc cc fc main top level goal program result fun main goal program val run goal sc init fc init fc init extract generic interpreter propositional prolog singles atom properly tail recursive manner 
identifier interpreted failing head clause program resolving corresponding goal cut continuation replaced current failure continuation 
function lookup searching clause head reads follows lookup source ide source clause list source goal option fun lookup fun walk nil walk walk walk disjunction goals interpreted extending failure continuation 
cut operator interpreted replacing failure continuation cut continuation 
fail operator interpreted false accordingly failure continuation activated 
interpreter compositional sense denotational semantics interpretation identifiers denote proper subpart denotation interpreter semi compositional jones sense denotes proper subpart source program 
interpreter compositional follow tradition denotational semantics environment mapping identifier function evaluates goal denoted identifier calls failure continuation 
environment threaded interpreter program 
resulting ml interpreter represents valuation function denotational semantics propositional prolog 
specific interpreters specific interpreter computing solution specific interpreter computing solution obtained instantiating corresponding notion answers structure prolog structure answer specific interpreter computing number solutions specific interpreter computing number solutions obtained instantiating corresponding notion answers structure prolog structure answer appendix contains direct style counterpart interpreter uncurried cut computing number solutions 
machines propositional prolog successively consider specific prolog interpreters section continuations 
illustrated section factorial program case result machine 
interpreters continuation passing style calls tail calls run iteratively subcomputations computation actual parameters elementary 
cases types success failure continuations read follows datatype atom goal clause list fcont fcont fcont goal clause list fcont withtype fcont section data types isomorphic data type lists represent presenting machines 
solution machine defined transition system shown 
top part specifies initial state bottom part specifies terminating configurations 
machine consists mutually recursive transition functions operate quintuple element tuple 
quintuple consists goal program success continuation failure continuation cut continuation register caching previous failure continuation 
element tuple additionally atom goal element 
number solutions machine displayed similar previous operates element tuples 
extra component counter 
machines deterministic derived deterministic functions 
atoms goals programs control stacks ide cut fail sc nil cc sc fc nil sc cc fc cc fc initial transition transition rules final transition nil nil nil goal nil cc sc fc cc goal sc fc cc seq sc fc cc goal sc fc cc seq nil sc fc cc seq sc fc cc atom sc fc cc seq cc sc fc cc atom ide sc fc cc atom sc fc fc goal lookup succeeds ide sc sc cc fc cc atom sc fc cc goal lookup fails sc fc cc atom sc sc cc fc cc goal cut cc sc fc cc atom sc fc cc seq fail sc sc cc fc cc atom sc fc cc goal nil nil fc cc goal true ide sc nil cc atom false lookup fails fail sc nil cc atom false cut nil fc cc atom true machine computing solution atoms goals programs control stacks ide cut fail sc nil cc sc fc nil sc cc fc cc fc initial transition transition rules final transition nil nil nil goal nil nil sc cc fc cc goal sc fc cc goal nil cc sc fc cc goal sc fc cc seq sc fc cc goal sc fc cc seq nil sc fc cc seq sc fc cc atom sc fc cc seq cc sc fc cc atom ide sc fc cc atom sc fc fc goal lookup succeeds ide sc sc cc fc cc atom sc fc cc goal lookup fails sc fc cc atom sc sc cc fc cc goal cut cc sc fc cc atom sc fc cc seq cut nil sc cc fc cc atom sc fc cc goal fail sc sc cc fc cc atom sc fc cc goal nil nil nil cc goal fail sc nil cc atom cut nil nil cc atom ide sc nil cc atom lookup fails machine computing number solutions related previous derivation interpreter machine curious see applied functional programming language 
reports application logic programming language propositional prolog 
entirety derivation consists closure conversion transformation continuationpassing style cps 
closure conversion ensures higher order values order 
cps transformation flow control interpreter manifest continuation 
materializes flow control order data structure 
case propositional prolog order language interpreter consider continuation passing style cf 
appendix 
derivation reduces 
result simple logic engine mutually recursive order transition functions 
derived invented example stacks arise continuations 
similarly properly tail recursive interpreter properly tail recursive 
correctness established correctness logic engine corollary correctness original interpreter 
prolog specified formalized functionally 
example carlsson shown implement prolog functional language 
continuation semantics prolog studied de bruin de nicholson foo 
closest related de bruin de continuation semantics prolog cut de bruin de denotational semantics success failure continuations semantics course compositional comparable compositional interpreter outlined section 
difference success continuations expect failure continuation cut continuation success continuations expect failure continuation 
analyzing control flow corresponding interpreter observed cut continuation definition point point success continuation 
need pass cut continuations success continuations 
de bruin de operational semantics prove equivalent denotational semantics 
contrast interpreter corresponding denotational semantics interpreter corresponding operational semantics 
interpreter corresponding de bruin de operational semantics observed resulting interpreter closures example implement higher order logic programming 
corresponds denotational semantics success continuations passed cut continuations 
designing machines favorite functional programmers 
unsurprisingly case logic programmers example warren machine incidentally device high performance model computation 
just unsurprisingly functional programmers functional programming languages meta language logic programmers logic programming languages meta language 
example kursawe showed invent prolog machines considerations 
goal modest simply aimed test interpreter machine derivation works calculus 
logic engine obtained basic plausible 
chief illustrative virtue show representation denotational semantics mechanically representation operational semantics vice versa 
shows proper tail recursion control stacks need invented original interpreter 
alternative deriving machine interpreter factor interpreter compiler virtual machine wand combinator compiler derivation scherlis staging transformations hannan pass separation approach generally binding time separation techniques partial evaluation 
currently experimenting factorization stage prolog interpreter byte code compiler virtual machine executing byte code 
acknowledgments grateful mads sig ager ma jan anonymous referees comments 
supported esprit working group ii www 
org danish natural science research council 
direct style interpreter prolog interpreter section continuation passing style account backtracking necessary implement resolution 
derivation method entirety consists steps closure conversion cps transformation reduced step 
natural making derivation closer original specification start interpreter direct style 
failure continuation eliminated transforming interpreter direct style 
success continuation remain 
non tail recursively clause disjunctions technically called delimited continuation contrast usual unlimited continuations denotational semantics 
structure prolog ds interpreter struct open source type result int run goal goal clause list int int fun run goal nil run goal run seq run seq atom goal clause list int int run seq nil run atom run seq val run atom run seq run atom atom clause list int int run atom fail shift fn sc run atom ide case lookup shift fn sc run goal run atom shift fn sc val sc run goal sc run goal main top level goal program int fun main goal program reset fn val run goal direct style interpreter propositional prolog transforming interpreter direct style requires control operators delimited continuations compatible continuation passing style shift reset 
presents direct style interpreter propositional prolog cut counting number solutions 
cps transforming interpreter success continuation appear 
cps transforming result failure continuation appear yields interpreter section minus cut 
interpreter yields machine section minus cut 
reset control operator delimits control 
subsequent shift control operator capture delimited continuation composed delimited continuation success continuation 
conjunction run seq implemented function composition 
failure run atom implemented capturing current success continuation applying 
disjunction run atom implemented capturing current success continuation applying twice 
interpreter properly tail recursive achieved functions run goal run seq single atom goal 
interpreter new example nondeterministic programming direct style control operators level cps hierarchy 
order interpret cut operator control operators second level shift reset 
mads sig ager olivier danvy jan 
interpreter compiler virtual machine functional derivation 
technical report brics rs daimi department computer science university aarhus aarhus denmark march 
mads sig ager olivier danvy jan 
functional correspondence evaluators machines 
dale miller editor proceedings fifth acm sigplan international conference principles practice declarative programming ppdp pages 
acm press august 
mads sig ager olivier danvy jan 
functional correspondence call need evaluators lazy machines 
technical report brics rs daimi department computer science university aarhus aarhus denmark february 
extended version article appear information processing letters 
hassan kaci 
warren machine tutorial reconstruction 
mit press 
anindya banerjee nevin heintze jon riecke 
design correctness program transformations control flow analysis 
naoki kobayashi benjamin pierce editors theoretical aspects computer software th international symposium tacs number lecture notes computer science pages sendai japan october 
springer verlag 
ma olivier danvy 
operational foundation delimited continuations 
thielecke editor proceedings fourth acm sigplan workshop continuations technical report csr department computer science queen mary college pages venice italy january 
mats carlsson 
implementing prolog functional programming 
new generation computing 
chen michael kifer david warren 
hilog foundation higher order logic programming 
journal logic programming february 
olivier danvy 
back direct style 
science computer programming 
olivier danvy 
rational deconstruction landin secd machine 
technical report brics rs daimi department computer science university aarhus aarhus denmark october 
olivier danvy andrzej filinski 
abstracting control 
mitchell wand editor proceedings acm conference lisp functional programming pages nice france june 
acm press 
olivier danvy andrzej filinski 
representing control study cps transformation 
mathematical structures computer science 
olivier danvy bernd morten 
unifying approach goal directed evaluation 
new generation computing 
extended version available technical report brics rs 
olivier danvy nielsen 

harald editor proceedings third international acm sig plan conference principles practice declarative programming ppdp pages firenze italy september 
acm press 
arie de bruin erik de 
continuation semantics prolog cut 
josep az fernando orejas editors tapsoft proceedings international joint conference theory practice software development number lecture notes computer science pages barcelona spain march 
springer verlag 
stephan diehl pieter hartel peter sestoft 
machines programming language implementation 
generation computer systems 
andrzej filinski 
representing monads 
hans 
boehm editor proceedings annual acm symposium principles programming languages pages portland oregon january 
acm press 
john hannan 
operational semantics directed machine architecture 
acm transactions programming languages systems 
neil jones 
computability complexity programming perspective 
foundations computing 
mit press 
neil jones carsten gomard peter sestoft 
partial evaluation automatic program generation 
prentice hall international london uk 
available online www dina dk char sestoft 
ulrik william scherlis 
compilers staging transformations 
mark scott johnson ravi sethi editors proceedings thirteenth annual acm symposium principles programming languages pages st petersburg florida january 
acm press 
peter kursawe 
invent prolog machine 
new generation computing 
john martin 
languages theory computation 
mcgraw hill 
torben 
mogensen 
separating binding times language specifications 
joseph stoy editor proceedings fourth international conference functional programming computer architecture pages london england september 
acm press 
tim nicholson norman foo 
denotational semantics prolog 
acm transactions programming languages systems 
nielsen 
denotational investigation 
technical report brics rs daimi department computer science university aarhus aarhus denmark december 
john reynolds 
definitional interpreters higher order programming languages 
higher order symbolic computation 
reprinted proceedings th acm national conference foreword 
christopher strachey christopher wadsworth 
continuations mathematical semantics handling full jumps 
higher order symbolic computation 
reprint technical monograph prg oxford university computing laboratory foreword 
mitchell wand 
semantics directed machine architecture 
richard de editor proceedings ninth annual acm symposium principles programming languages pages 
acm press january 
brics report series publications rs danvy olivier 
interpreter logic engine 
march 
pp 
appear bruynooghe editor international symposium logic program development transformation proceedings revised selected papers lncs 
report supersedes earlier brics report rs 
rs patricia franck emmanuel rs kim larsen 
optimal strategies priced timed game automata 
february 
pp 
mads sig ager olivier danvy jan 
functional correspondence call need evaluators lazy machines 
february 
pp 
report supersedes earlier brics report rs 
extended version article appear information processing letters 
rs gerth st rolf ulrich meyer norbert 
cache oblivious data structures algorithms undirected breadth search shortest paths 
february 
pp 
rs luca aceto willem jan fokkink anna ing bas 
split bisimilarity finite axiomatization ccs hennessy merge 
january 
pp 
rs goo peter mosses 
composing programming languages combining action semantics modules 
december 
pp 
appears science computer programming 
rs peter mosses 
pragmatics modular sos 
december 
pp 
invited published kirchner ringeissen editors algebraic methodology software technology th international conference amast proceedings lncs pages 
rs ulrich kohlenbach 
bounds iterations asymptotically quasi nonexpansive mappings 
december 
pp 
rs 
layer approach computability complexity real numbers 
december 
pp 
