queueing analysis relational operators continuous data streams jiang computer science engineering university texas arlington jiang cse uta edu currently stream data processing active area research includes algorithms architectures stream processing modelling analysis various components stream processing system 
analysis relational operators stream processing queueing theory study behaviors streaming data query processing system 
approach enables compute fundamental performance metrics relational operators select project join data streams 
furthermore approach establishes way find probability distribution functions number tuples waiting time tuples system 
designed implemented number experiments validate accuracy effectiveness analysis 
believe results useful performance evaluation continuous query processing system streaming data design stream query processing system understanding behaviors streaming data 

research traditional database management systems dbmss concentrated data collected stored 
wide variety applications network management finance system sensor system generate real time data streams processing requirements different traditional applications 
example applications required process streaming data single pass computation fast keep data flows 
applications require predefined quality service qos specification met order respond events timely manner 
clear traditional dbms little consideration qos requirements designed process streaming data assumes stored data accessed times needed 
new processing requirements forcing permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
copyright acm xxxxx xx xx xx 
sharma chakravarthy computer science engineering university texas arlington sharma cse uta edu re examination approaches techniques dbms 
number architectures designated data stream management system dsms proposed support new requirements system berkeley stream system database group stanford niagara system university wisconsin aurora system name 
common characteristic architectures associate queue operator support continuous queries data streams 
consensus queue data structure necessary effectively handling unpredictable characteristics continuous data stream 
analyzed queue system affects performance support predefined qos requirements 
focus analysis queues stream data processing step direction 
number properties queues associated operator simple select project join spj clause data stream analyzed 
issues resource management qos management important issues aspects dsms process streaming data efficiently effectively unpredictable input characteristics unbounded size data streams limited memory resource system 
motivated look effective approach estimate memory requirement continuous query streaming data effective approach estimate tuple latency query processing system 
specifically try solve problems data streams input rates respectively estimate amount memory needed join data streams efficiently specified time window losing tuple inverse problem computational resources memory size maximum input rates query processing system handle specified environment 
ii computational ability system input characteristics data streams estimate tuple latency operator spj clause 
solutions problems extremely important help design optimize dsms management qos 
example admit query system violation predefined qos requirements 
contributions extend symmetric join window symmetric join streams analytical models select project join operators 
discuss performance characteristics models detail include mean number tuples mean waiting time subsystem queue distribution number tuples distribution waiting time tuples system 
extend join model handle situation relation local disk 
furthermore impact bursty inputs operators performance briefly discussed 
implement window symmetric hash join algorithm stand application 
number experiments conducted validate analytical models 
results guide design queues data stream management system including allocation initial buffer size queue incremental buffer allocation queue input characteristics changes ii help online query processing system estimate response time iii optimize continuous query plan statically dynamically meet specified qos requirement data stream management system 
remainder structured follows 
section formalizes window symmetric join algorithm 
section model select project join operators detailed characteristics models discussed formalized 
extend model window symmetric multi way join system section 
results experiments section followed summary related section 
section directions 

window hash join window symmetric hash join algorithm architecture infinite queue attached data stream illustrated 
denote queues attached left data stream right data stream respectively output queue qo store results 
typically size tuple smaller size tuple avoids duplicate storage tuples 
observation thread maintain global tuple pool including adding new tuples pool passing new tuple corresponding queue deleting expired tuple queues 
tuple expires deleted difference arrival time stamp current time stamp greater largest time window required operator system 
purpose analysis define phases join algorithm transition phase steady state phase 
transition phase defined period tuple removed hash table due expiration 
transition phase system enters steady state phase mean number tuples system fluctuates slightly constant input rates obey poisson distribution window size big 
transition phase short terms lifetime continuous query analyze steady state phase window symmetric hash join 
notations similar defined assumptions 

probability distribution interarrival time input data stream exponential distribution mean arrival rate 
tuples specified time window fit main memory 

window symmetric hash join hash function hashes tuples buckets evenly 
processing cost tuple steady state analyze computation cost required processing new tuple steady state find average number tuples hash table hi stable hi iii ii predefined time window join operator illustrated time window largest time span newly arrived tuple find match corresponding stream 
process new tuple stream join operator needs operations 
insert tuple hash table hash 
hash tuple hash table hash find corresponding bucket 
search corresponding bucket join condition 
output matching tuples output queue 
mathematically total cost processing tuple hj di ch ce mj ch cost hashing function call system constant ce cost evaluation join condition mj number buckets corresponding hash table 
cost output cost passing matched tuple upstream operators applications processing 
output cost negligible compared cost condition evaluation 
consequently total cost di processing tuple left data stream constant 
model select operator holds true tuple data stream costs may different 
considered cost accepting newly arrived tuples deleting expired tuples far 
useful take look new tuple added system expired tuple located deleted model costs addition deletion 
general query processing system natural order tuples global buffer time axis tuples arrive increasing timestamp order 
system dirty link list maintains active tuples adding newly arrived tuple head free list links unused tuples 
deleting done periodically checking truncating tail dirty list 
expired tuples linked back free list 
cost accepting tuples deleting tuples small portion say system load costs taken consideration multiplying factor service time equation 

modelling select project join data management systems select project join frequently operators 
get detailed performance metrics operators able compute detailed performance metrics query entire query processing system 
aggregate operators sum average sliding window modelled similar way 
modelling select project select project single stream processing operators input output queue 
select operator works filter evaluate select condition primitive condition composite condition input tuples 
select operator primitive condition case tuple evaluated unique condition service time constant 
selection primitive condition modelled queuing system shown 
select operator processes tuple seconds data stream mean input rate mean variance number tuples select subsystem respectively ar similarly mean variance waiting time tuple waiting time queue plus service time respectively ar noting second component mean waiting time tuple queue 
select operator composite condition composite condition consists primitive conditions conjunction disjuncts assumed 
worst case select operator needs evaluate primitive conditions determine tuple output 
hand possible decision evaluating just conditions best case scenario 
service time constant depends selectivity condition 
cases primitive condition relatively small selectivity rest order selectivity 
small portion tuples needed evaluate condition 
service time considered exponential distribution tuple evaluated conjunct applicable second conjunct 
apparently number tuples evaluated successive conjunct decreases exponentially 
select operator modelled simple queueing system 
situation described section mean variance number tuples select subsystem composite condition respectively ar mean variance waiting time respectively ar project operator project operator works tuple extract subset attributes tuple 
traditional database project operator may required eliminate duplicates 
may applicable data stream environment output project operator data stream 
elimination duplicates introduce blocking undesirable stream data environment 
operator modelled duplicate elimination consideration works select operator primitive condition modelled system constant service time time extracting specified subset attributes tuple relative performance metrics queueing system summarized section 
modelling window hash join hash join sub system considered typical queuing system input queues single server duplicated tuples eliminated locally maintaining hash table time window 
window symmetric hash join provides join service 
consider join operator service facility input queues 
combine input queues single logical virtual queue different classes tuples service facility provides constant service time class tuples analysis section 
steady state constant service times may different different classes tuples 
model join subsystem model illustrated logical virtual input queue mean arrival rate service times process tuple coming data stream respectively 
different scheduling schemes decide tuple served different scheduling schemes affect waiting time individual tuple queue 
example tuples higher priority wait lesser time queue tuples lower priority 
service times join model constants conservation law mean waiting time mean number tuples queue change matter sophisticated elaborate queueing disciplines may 
come serve discipline 

steady state analysis queueing system model service times deterministic type tuple 
queueing system simple markov chain system service time obey exponential distribution satisfy memoryless property 
fully describe queue state need number tuples queue service time tuple service facility remaining service time prior departure join service facility 
dimensional state system queueing analysis complicated dimensional state system 
method finding mean number tuples mean waiting time join subsystem embedded markov chain approach 
basic idea method simplify description state dimensional description onedimensional description 
usual way sample dimension state information special discrete time point explicitly describes number tuples system implicitly contains information time spent tuple join service facility 
usually select points instant tuple service facility departs system 
specify number tuples system know service time spent tuple just enters join service facility instant zero 
considering point tuples leave join service facility state transitions take place points form discrete time space 
fortunately solution embedded markov points happens provide solution points time 
define random variables 
cn represents th tuple enter system 
represents arrival time cn 
tn represents interarrival time cn cn 
xn represents service time tuple cn 
qn represents number tuples left departure cn service 
represents number tuples arrives service time cn 
theorem 
window hash join system data streams input mean rate service time tuples left stream right stream respectively mean queue size steady state detailed proof appendix 
remarks 
part equation mean number tuple arrivals service time tuple 
second part mean number tuples left queue tuple service entered service facility 

mean queue size invariant increasing processing ability input rate times shown substituting equation 
utilization factor affects system 
theorem 
window hash join system described theorem probability distribution number tuples system steady state dk ak dk jif ak 

bk 
ck detailed proof appendix 
theorem follows corollary 
variance number tuples join subsystem ar dk proof 
follows theorem second de dk 
variance number tuples system ar dk theorem 
window hash join system described theorem mean waiting time tuples join subsystem queue steady state respectively wq proof 
little result waiting time tuples system substituting equation get 
second part mean waiting time queue 
remarks increase time processing ability input rate times earlier mean waiting times tuples system queue decrease original mean waiting time 
shown substituting changed factors equations 
corollary 
variance waiting time tuples join subsystem give ar dk proof 
generalized little formula know dk wk th moment waiting time tuples system 
variance ar dk obtained dk 
theorem 
window hash join system described theorem probability distribution waiting time tuples queue steady state negative root equation proof 
queueing model cumulative distribution function cdf service time probability density function computing lst sd sd lst interarrival probability distribution function substituting characteristic equation defined lindley equation sd sd obviously zero roots 
easily find numerical solution equation matlab mathematical tools 
cdf waiting time model distribution waiting time system queue need add constant service time equation 

extensions approach far generally true window symmetrical join operator difference value service time 
stream data processing system accesses stored database may need join tuples data stream data set stored disk 
hand input process may poisson processing briefly discuss impact bursty inputs performance models 
relation local disk entire relation local disk fit main memory start join algorithm load tuples memory 
input data stream case 
join operator works single stream processing operator system modelled queue mean arrival rate constant service time 
tuples relation local disk fit memory cost processing tuple includes costs listed section extra cost loading tuples disk paging probed tuple disk 
service time constant 
system modelled queue larger service time 
corollary 
mean number tuples join system relation local disk follows setting 
corollary 
mean waiting time tuples system queue wq respectively 
similarly results derived setting 
queue size corollary mean waiting time corollary forms results standard section 
verifies correctness analysis section 
impact bursty inputs data streams approximately modelled poisson input model researchers shown class input data streams bursty poisson inputs 
class input data streams exhibits called self similar property wide range time scale 
partial explanation property input data stream superposition theoretically infinite sub streams distributions length periods heavy tailed distribution 
input data streams sensor database may demonstrate self similar property thousands sensors send data periods sleep model order save energy investigation needed prove 
due known difficulties study queueing systems fed self similar data streams intend exact analysis 
highlight key points impact bursty input data stream queueing performance 
steady state 
queue size tuple latency queue heavy tailed distribution different power 
larger queue size longer tuple latency decrease exponentially poisson model tails distribution longer standard poisson model 

bursty input data streams longer queue size tuple latency 
bursty property input data streams mainly dominated distribution periods departure distribution tuples periods 

queueing metrics obtained poisson input process similar obtained self similar input streams system load high 
system load increases difference inputs increases dramatically 
section experimental results validate analysis 

experimental evaluation previous sections modelled spj operators analyzed aspects queueing models 
section describe implementation spj operators stand application 
limited space discuss join operator 
implementation system shown consists buffer manager stream manager set basic operators select project join stream generator 
stream generator generates standard wisconsin benchmark tuples interarrival times follow exponential window symmetric hash join distribution heavy tailed distribution sends connectors 
buffer manager manages tuples system acquires memory maintain list free tuples space tuples 
expired tuples returned buffer manger reuse 
stream manager waits connection request stream known port receives new stream threads new connector receive tuples stream 
connector detects arrival new tuple requests free tuple buffer manager encapsulates newly arrived tuple standard tuple stream identifier arrival time stamp pushes stamped tuple input queue shared connectors simulate fcfs scheduling 
join operator reads earliest arrival time stamped tuple input queue stamps departure time stamp tuple passes tuple log facility charge computing waiting time tuple number tuples input queue 
tuple inserted hash table probes hash table tuple comes left stream inserts tuple hash table probes hash table 
matched tuples inserted output queue 
waiting time tuple queue obtained log facility computing difference departure timestamp arrival time stamp 
waiting time join system obtained adding constant service time waiting time queue 
need time stamp tuple probing hash table 
experimental setup results experiments run alpha quad processor computer ofs operation system gb ram 
able keep tuples predefined window completely main memory 
user applications system performing experiments 
tuple data fields stream identifier arrival time stamp departure time stamp expired time stamp 
simplify delay equivalent table delay queue size window size item exp exp input rate sec utilization mean delay theory mean delay exp mean theory mean exp cdf delay queue window delay tuples queue tables figures illustrated section 
conducted wide range experiments varying processing rates window sizes input rates 
due space constraints small important portion experimental results 
window size streams set experiments measures mean cdf waiting time tuple queue data stream input rates mean number tuples queue 
case stream generators send tuples system poisson distribution mean value 
window sizes data streams tuples seconds processing rates data streams tuples second 
results obtained log file deleting records records logged transition phase 
table shows mean queue sizes experiments close theoretical results obtained second part equation section 
mean delays little larger result calculated equation overhead associated recording departure time passing hash join facility input queue 
shows cdf tuple latency queue close analysis results obtained equation 
digit numbers legend represent total input rates number tuples second curves digit numbers letter represent results theoretical analysis represent experimental results 
different window size streams sets experiments done differ table delay queue size different window size item exp exp exp input rate sec input rate sec utilization mean delay theory mean delay exp mean theory mean exp cdf delay queue different window ent window sizes 
tuples hash table tuples hash table 
service time tuple comes right stream needs twice comes left stream 
specifically processing rates tuples tuples second left steam right stream respectively 
table shows mean queue size mean delay decreasing system utilization decreases 
mean delay decreases service decreases utilization 
indicates increase processing ability system decrease input rates order achieve better response time 
experiments longest delay tuple input queue seconds utilization high service time low second 
observation delay tuple system primarily depends waiting time input queue utilization high depends service time tuple service facility low utilization 
shows cdf delay tuples input queue different window sizes different input rates 
results show small probability tuple wait queue times longer mean waiting time 
may difficult meet response time tuples hard achieve higher confidence interval 
analysis experimental results believe design data stream processing system especially response time requirement accurate estimation waiting time queue service time important decide computational ability system capacity 
numbers tuples input queue service facility negligible terms number tuples hash table memory size mainly depends sliding time window size 

related query processing data streams received attention 
system point view different architectures proposed investigated 
architecture supports continuous data stream traditional static data set connecting push operators pull operators queues 
steam project trying build general data processing architecture support functionalities traditional database data processing data streams 
aurora system presents architecture process data streams qos requirements decoupling continuous query pre defined operators 
works provide framework data stream processing macro point view share common fundamental data structure queue target similar application domains need respond results query processing real time qos requirements 
best knowledge past considered analyzed problem behavior queue affects performance system predict response time system micro point view 
hand query processing techniques algorithms proposed handle various aspects continuous query processing data stream 
analytical framework evaluate performance processing techniques algorithms 
related memory characteristics problem discussed authors characterize memory requirements query possible instances streams results provide solid way evaluate query bounded memory 
proposed way evaluate response time requirement query computation ability memory size system 
complementary memory characteristics 
furthermore tradeoff storage requirements number passes results accuracy data stream model studied 
discusses problem computing moments lp differences data streams 
considers various statistics sliding window data stream model 

modelled analyzed basic operators spj clause data stream management system 
analyzed detail mean number tuples mean waiting time tuples queue distribution number tuples distribution waiting time tuples system 
believe results provide crucial information needed design data stream management system optimizing queries qos specifications 
experiments show analytical results accurate effective 
number extensions addressed current 
working extending results complete query consisting basic operators 
enable evaluate user query submit system see system meet qos specification associated query 
analytical results provide basic metrics decompose query restriction qos specifications optimize query processing system locally globally 
intend provide alternative approach optimize queries restriction maximal capacity qos requirement query 
analyze statistically maximal capacity system computation ability 

alon matias szegedy 
space complexity approximating frequency moments 
proc 
acm symp 
theory computing pages may 
arasu babcock babu widom 
characterizing memory requirements queries continuous data streams 
proc 
acm symp 
principles database systems pages jun 
babcock datar motwani 
sampling moving window streaming data 
proc 
annual acm siam symp 
discrete algorithms 
babu widom 
continuous queries data streams 
sigmod pages september 
carney cetintemel cherniack convey lee stonebraker tatbul zdonik 
monitoring streams new class data management applications 
vldb 
chandrasekaran franklin 
streaming queries streaming data 
vldb 
chen dewitt tian wang 
niagaracq scalable continuous query system internet databases 
sigmod pages 
datar gionis indyk motwani 
maintaining stream statistics sliding windows 
proc 
annual acm siam symp 
discrete algorithms 
feigenbaum kannan strauss viswanathan 
approximate difference algorithm massive data streams 
proc 
annual symp 
foundations computer science pages oct 
grossglauser bolot 
relevance long range dependence network traffic 
ieee acm transactions network october 
henzinger raghavan rajagopalan 
computing data streams 
may kendall 
problems theory queues 
journal royal statistical society 
kleinrock 
queueing systems volumes ii 
john wiley sons 
madden franklin 
stream architecture queries streaming sensor data 
proc 
intl 
conf 
data engineering ca 

stochastic models queueing theory 
academic press 
naughton 
rate query optimization streaming information sources 
sigmod 
wilschut apers 
pipelining query execution 
conference databases parallel architectures applications 
appendix proof theorem 
proof 
considering time point cn left system cases 
tuples qn queue 
case number tuples queue number tuples arriving service period xn cn 
qn tuples qn queue 
number tuples left queue number tuples arrive service period time xn cn plus number tuples left tuple cn left system minus 
analysis qn qn vn qn qn qn vn define step function rewrite qn qn vn system ergodic system busy 
random variables independent vn qn qn qn 
take square expectation sides equation qn vn qn vn 

get term unknown 
properties transform get th moments easily find transform function random variable definition transform 

derivative dv dz second derivative find substituting yields proof theorem 
proof 
take transform sides qn transform property transform sum random variables equals product random variables transform 
qn qn qn qn qn zk qn 
qn qn denote transform random variable qn vn respectively simplify substituting 

zk ck 
rewrite 
ak 

dk 
furthermore bk ck 
ak 
