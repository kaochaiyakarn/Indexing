dimensional inference symbol lives brian liverpool hope university university cape town hope ac uk scientific equations embedded computer programs obey rules dimensional consistency 
efforts enforce rules computer programs 
methods require user modify program adding dimensional information extensions programming language existing language facilities 
large amount effort required modify large scientific engineering programs way usually prone error done manually 
consequently methods require modifications program developed 
methods limited discover find hard tell user precisely program error 
describes novel approach employs concept symbol lives analyse dimensional implications users source code 
method implemented fortran programs software engineering toolkit winfpt fast systematic identifies locations errors user source code 
keywords software engineering dimensional analysis static analysis fortran 
background important class errors particularly scientific engineering programs incorrect implementation formulae 
errors manually detectable applying dimensional analysis applies principle physical dimensions components formula consistent formula incorrect 
physics engineering dimensions physical quantity describe quantity related fundamental base dimensions 
mechanics base dimensions mass length time 
international system units si adds temperature electric current luminous intensity amount substance 
physical quantities dimensions products base dimensions result multiplying powers base dimensions 
consider example mechanics base dimensions mass length time represented symbols physical quantity speed dimensions area dimensions force dimensions powers may john collins university cape town uk com fractional 
general base dimensions 
physical quantity dimensions 
real numbers 
terms units dimensions interchangeably fact mean different things 
dimension particular property unit measure property terms arbitrary scale 
length dimension metre unit length defined length path travelled light vacuum time interval second 

fortran term dimension refers specifically mathematical property arrays 
order avoid confusion terminology decided word units dimensions describing mechanism employed winfpt 
method rely physical units deals entirely dimensions distinguish example metres felt able causing confusion 
consequently terminology units represents dimensions quantity describe section circumstances method identify erroneous mixing units metres feet 
winfpt suite tools writing maintaining migrating fortran programs 
commands checking reporting modifying fortran source code 
currently extended include dimension checking inference 
reports progress 
methods described applicable high level languages deal scientific engineering quantities 
fortran chosen study authors access powerful existing analysis tool winfpt fortran 
implementation methods languages require equivalent analysis tools 

dimensional constraints identify dimensional constraints labeled winfpt aims apply analysis 
real numbers 

relational operator units units units units 
units units converse 
units means dimensionless 

units units units 
transcendental function units sin units 
return values transcendental functions dimensionless 
sin units 
certain fortran functions polymorphic max units units units 
function definitions determine dimensional relationships actual arguments subroutine definition subroutine call implies units units glance appear side assignment statement dimensionally consistent 
assumes left hand side dimension assignment takes place 
left hand side annotated dimension declaration case 
dimensions assigned variables declared assignment establish dimensions left hand side 
constraint 
concept lives introduced notion 
note constraints base dimensions 
show constraints check programs base dimensions demonstrate powerful set checks carried suitable tool need modification source code examination 
rest organised follows section describes related section shows dimensional analysis reveals possible errors section introduces concept symbol lives section shows symbol dimensions related lives section illustrates winfpt dimensions analysis mechanism means example 
section describes winfpt output discusses opportunities issues associated done developing winfpt section contains closing remarks 

related efforts detect dimensional inconsistency order trap errors computer programs 
attempts normally employ modifications programmers source code 
modifications required language extensions 
examples include house van delft 
proposed program modifications rely changes programming language existing language features 
hilfinger defines ada package handle units 
cmelik gehani introduce unit aware classes replace double int data types 
overloading operators detect attempts violate dimensional consistency 
uses templates defining operations dimensions enable inconsistencies detected compile time 
petty proposes structure replace real data type fortran 
structure stores dimension information alongside magnitude variable value 
operator overloading detects dimensional inconsistencies variables run time 
approach follows established cmelik gehani 
new approaches inspired type inference mechanisms provided languages ml 
type inference enables compiler infer types programmer leaves 
authors including wand keefe kennedy proposed feature embed unit types language type systems 
inference mechanism looks consistency unit types derived user supplied set base units 
linear algebra solve constraint equations generated dimensional consistency analysis 
ml language extended enable unit type annotations symbols 
similar done simulation language sandberg annotations form tagged block comments avoid need language extensions 
scientific engineering computing dimension checking obvious application quite normal find large bodies complex legacy code 
applying modifications described previous paragraphs economically feasible 
system developed jiang su uses type inference carry dimensional analysis programs need comprehensive code modifications 
uses pipeline tools constraint solving 
annotation unit types code required 
may discover unit errors sufficient annotations program 
guo developed system programs infers unit types variables programs 
infers base units identifies combination variable constant program 
require user unit type annotations code 
resulting analysis programmers identify bugs indicated unit types matching intuition 
system provides framework systematically associating base units real world units automating process identifying combinations base units program variables 
stages system constraint generation analysis program source code constraint simplification applying transformations heuristics constraint solving linear algebra techniques outputting minimal set inferred base units 
variable expressed terms inferred base units 
user interface guided annotations allow user provide user defined units variables guidance solved constraints 
method limited static analysis flow insensitive 
associates variable unit type quite possible variable may different unit types course program 
example program single global variable repeatedly reading floating point values number different units causing considered dimensionless 
explain problem overcome concept symbol lives 
analysis proposed guo context insensitive 
function called different locations may occasion passed arguments unit types differ 
method able assign set units return value function 
method avoids resulting inconsistencies treating return values dimensionless 
different unit types fields data structure handled 
fields assumed unit type 
elements array treated having unit type 
important issue arising various methods applied meaningfulness generated warning error messages 
example petty error reported indication code took place 
help efficiency debugging 
solves constraint equations source reported error difficult identify 
describes technique dimensional inference overcomes problems related described 
section shall indicate dimensional inference 
applying dimensional inference consider implications applying dimensional constraints fortran programs 
real variables real constants functions returning real values checked consistency 
code fragment real variables represent physical quantities program dimensions dimensions dimensions similarly fragment dimensions dimensions multiplied dimensions inferences propagated program 
analysis yields set dimensions describe physical quantities relationships dimensions checked consistency 
fragments followed fragment measured dimensions measured square dimensions error detected 

symbol lives possible attach single inference dimensions variable 
consider code fragment sort tables weight change true 
change weight weight temp weight 
weight weight weight temp temp height 
height height height temp change true 
endif enddo enddo fragment temp dimensions weight dimensions height 
implication weight height dimensions 
problem overcome defining lives variable 
variable symbol life starts assignment fortran initialisation data specification ends assignment variable longer 
example temp independent lives started respectively 
different lives case different dimensions 
note assignment necessarily start new life 
fragment loaded weight vehicle wt payload 
weight vehicle wt 
endif acc thrust weight 
values weight assigned may expression 
cases lives combined dimensions weight assignments 
leads extra dimensional constraint addition listed section 
assignment start life example embedded statements dimensions 
units units general lives considered equivalent code path exists input expression 
meaning results program change separate life variable declared independently different name 
analysis dimensions separate lives variables identified dimensions associated lives variables 
give definitions usage employment symbol right hand side assignment input argument sub program call part condition statement 
assignment employment symbol left hand side assignment output argument sub program call 
symbol deemed lives 
life started symbol defined assigned value 
subsequent stages life consist uses symbol 
stage called moment 
life terminated program source code assignment symbol 
example code fragments symbol lives 
integer life second life third life life begins declaration second life begins assignment third life begins assignment 
life moment second moments third 
semantic analysis winfpt lives determined symbol turn usage statement turn algorithm symbol symbol table usage statement symbol trace back reachable assignments symbol previous usage example usage statement previous assignment 
life includes consists statements cases describe particular cases 
branches path control determines assignment statements started life includes usage statement assignment statements considered started life 

structured data types combinations symbols identifies field inside structure record treated symbols 

constants real constants handled way symbol lives associated dimensions 

arrays arrays problems analysis units dimensions 
firstly difficult identify separate lives array elements array may assigned code fragment 
secondly units dimensions different array elements may different 
single array store example gender age weight height set medical patients 
reasons initial implementation dimensional analysis restricted scalar objects 
algorithms designed handle arrays implemented 
section examine connection variable dimensions lives 

symbol lives dimensions life dimensions variable fixed 
rule applies re assignment may happen course life dependent condition 
lt endif print single life starts re assignment takes place condition satisfied exactly way endif presume original assignment re assignment share dimensions 
altering second assignment results potential inconsistency final line prints dimension dimension lt endif print variable life indicates programmer may variable multiple reasons 
assume programmer intends life variable dimensions 
consequently dimension checking assume variable particular dimension course life lives different dimensions 
important consequence checking assignment statements 
assignment statement starts new life variable left hand side declare dimensions left hand side variable left previous life different right hand side inconsistency 
fact say variable left hand side new life dimensions right hand side 
example start life start life code lives 
life dimensions second life dimensions understanding lives regard situation inconsistent 

dimension checking inference winfpt static analysis winfpt constructs internal representation user source code 
representation includes sequences statements component tokens symbol tokens operator tokens 
symbol lives identified algorithm section process internal representation resulting symbol tokens replaced life tokens 
pass internal representation units recorded life data structure illustrated 
units data structure winfpt stated earlier name units preference dimension avoid confusion properties array variables 
shows unit winfpt maintains list usage records identify location program symbol life unit list related unit records identify location program unit identical combination powers units application constraints section 
able record kind unit ways relates units places user code discovered 
winfpt implements dimensional constraints modification expression analysis routines 
implements seventh carrying units pass internal representation bottom walk user program call structure 
winfpt knows call site relationships arguments return value analysed lower levels 
dimensional checking consists confirming consistency sets related units reporting inconsistency 
illustrate process example introduce notation describe winfpt units data structure 
define units units life symbol raised power case symbol life reduces units usage records data structure enable find locations user code related particular unit 
represent units usages life nn location code extend notation describe related units unit follows 
suppose units units expressed units related units units units related units units shall describe dimensional checking fortran code fragment read length width height box surface area volume sqrt 
diagonal error situation read statement starts lives unit records created represent units units units assuming sake simplicity notation symbols fragment life 
processing right hand side statement results units related units units units equivalent units units equivalent units units related units units units equivalent units units equivalent units intermediate symbols representing quantities respectively 
data structures show results winfpt analysis determined units units units square root units units left hand side know units life right hand side 
winfpt records life usage units 
results units related units units usage life location code units equivalent units units equivalent units units related units units units equivalent units units equivalent units changes previous data structure state shown bold 
winfpt identified real symbol replace symbol units related units units usage life location code units equivalent units units equivalent units units related units units units equivalent units units equivalent units winfpt completed processing statement 
recorded units square equivalent 
comparing sets units equivalence heart process 
winfpt compares sets units denoted units units solving equation units units equation outcomes possible case factors cancel left 
tells consistent sets units 
case factor remains left hand side 
tells factor dimensionless error 
presumed real variables dimensions error report error caused 
case factors remain left hand side 
gives combinations relationships hold units consistency 
example analysis statement assigns value winfpt checks units units units units 
applying equation get units units units units gives units units units units cancelling factors reduces units units example case 
deduce units units processing statement data structure units related units units related units units units usage life location code units equivalent units units equivalent units units related units units related units units units units equivalent units units equivalent units units related units units units intermediate symbol assignment identifies units intermediate renamed table show association variable life units related units units related units units units usage life location code units equivalent units units equivalent units units related units units related units units units units equivalent units units equivalent units units related units units units usage life location code sqrt processing statement data structure units related units units related units units units usage life location code units equivalent units units equivalent units units related units units related units units units usage life location code units equivalent units units equivalent units units related units units units usage life location code units right hand side evaluated 
operator implies units units applying equation units units get units units winfpt checks sets units related units consistency 
units replaced related units units units 
equation units units units reduces units example case 
dimensionless error detected 
statement reported error 

winfpt dimensional analysis output give output produced winfpt carrying dimensional analysis code fragment 
note alternative fortran notation raised power employed winfpt 
line file projects box inconsistency detected units dimensions units identified units units units units variables variable lives units units units units variables variable lives units units units variables variable lives units variables variable lives units symbols units units units units units units units winfpt identified error assignment system recording unit usage locations winfpt able report source code line operator line gives rise error 
addition reporting errors winfpt lists units appear program final lists related units 
de facto fundamental units programmer 
relationships listed systematically 
user able scan lists confirm winfpt telling user units related expected way 
meaningful symbol names considerable difference ease carried 
winfpt lists symbols giving units terms de facto fundamental units 
mentioned earlier situations method detect erroneous units sense trying mix feet metres 
consider code fragment feet metre outer feet inner metres outer inner pi outer inner programmer created conversion factor variable forgotten apply formula calculating winfpt report error assignment result units outer equivalent units inner units assignment result units outer equivalent units inner winfpt see 

remarks previous methods aimed checking dimensional consistency computer programs described issues arising discussed 
novel approach concept symbol lives introduced 
approach allied internal representation user fortran program enables winfpt carry fast systematic checking user having modify source code 
noted winfpt carries great deal checking unit records works way user code 
achieved efficiently comprehensively maintaining set cross tables enable unit usages located rapidly user source code 
timing experiments large bodies source code indicate winfpt analyse thousands lines code second 
winfpt analyse number large fortran programs 
large helicopter simulation reported dimensional errors 
progress extending facility arrays sub programs 

cmelik gehani dimensional analysis 
ieee software may pp 
mohr programming pascal physical units 
sigplan notices december pp 
guo annotation unit type inference mit program analysis fall 
hilfinger ada package dimensional analysis acm transactions programming languages systems vol april pp 
house proposal extended form type checking expressions 
computer journal nov pp 
jiang su practical type system validating dimensional unit correctness programs 
proceedings th international conference software engineering shanghai china 
kennedy dimension types esop pp national institute standards technology web page physics nist gov units february petty automated computation consistency checking physical dimensions units scientific programs 
software practice experience 
sandberg persson automatic dimensional consistency checking simulation specifications sims ster editor erik september 
fully static dimensional analysis 
sigplan notices september pp 
van delft java extension support dimensions software practice experience june pp 
wand keefe automatic dimensional inference computational logic essays honor alan robinson pp winfpt home web page www uk com 
