security amplifying combiners collision resistant hash functions marc fischlin anja lehmann darmstadt university technology germany www de 
classical combiner comb class hash functions provides collision resistance long underlying hash functions secure 
statement complemented multi collision attack joux crypto iterated hash functions bit outputs 
shows break classical combiner steps find collisions time respectively 
address question security amplifying combiners security building blocks increases security combined hash function beating bound joux 
discuss combiners somewhat surprisingly light results nandi stinson eprint hoch shamir fse solution essentially efficient classical combiner 
hash function combiner takes hash functions combines single failure resistant hash function 
collision resistance combined function granted starting hash functions secure 
classical example secure combiner comb class concatenating outputs hash functions 
combiner collision immediately gives collisions hash functions 
quantitative viewpoint classical combiner provides security guarantee breaking requires steps respectively finding collision classical combiner takes steps 
matches upper bound joux showing merkle damg ard hash functions bit outputs classical combiner broken steps 
means security level hash function degraded moderately new attack method classical combiner merely warrants reduced security level ideally better security bound combiners moderate degradations going limit bound due joux 
results 
introduce notion security amplifying combiners hash functions 
combiners guarantee security level sense stronger sum components 
note classical combiner similar proposals security amplifying previous discussion indicating constructing security amplifying combiners far trivial 
discuss achieve security amplification 
consider merkle damg ard hash functions compression functions classical combiner blocks exactly limited input messages mt comb amp mt mt clearly secure combiner traditional sense guaranteeing collision resistance hash functions collision resistant 
show security amplifying combiner assuming underlying compression functions behave ideally 
precisely consider attack model compression functions random functions adversary combiner subroutines generate collisions corresponding compression function 
intuitively collision finder oracles implement best known strategy find collisions time adversary calls cb get collision fb charge tb steps 
adversary task turn collisions derived combiner 
note adversary combiner model quite powerful 
query collision finders adversary significantly bias outcome parts colliding messages 
give support significance model show implement attack joux classical combiner model 
realize similar attacks advanced combiners comb 
main result certify security amplification combiner proof basically split parts covering general statements model pre image resistance presence collision finders part uses basic facts prove specific combiner security amplifying 
security proof show calling collision finder polynomially times help find collision successful attacks combiner require poly steps 
viewed different perspective think result supplementary lower bound attack joux 
attack breaks classical combiner steps hash functions allow process message blocks 
result indicates restricting input blocks suffices combiner security amplifying overcome bound joux 
situation remains open 
recall proposal point allows hash messages blocks 
extend combiner handle arbitrarily long messages hash trees straightforward way combiner placed node tree 
finding collisions hash trees requires come collisions nodes security amplification result carries instantaneously 
messages blocks classical combiner takes applications compression functions compared roughly applications tree combiner coming stronger security amplification guarantee 
limitations model 
hash combiner guarantees security amplification idealized world underlying compression functions behave random functions 
model generic attacks hash function allowed sense adversary take advantage weaknesses compression functions ability generate collisions albeit collision finders quite flexible 
remains open similar results obtained non idealized setting 
currently collision finders return values mapping compression function output 
yu wang shows weak compression functions md may allow multi collision attacks able find simultaneous collisions compression functions 
expect results transfer case number message blocks log related 
idea cryptographic combiners considered explicitly herzberg 
analyzes classical combiner concatenating hash function values 
hash function combiners boneh boyen subsequently show collision resistant combiners better classical combiner terms length output length secure combiner essentially equal sum output lengths hash functions construction 
interestingly idea security amplification cryptographic combiners appears implicitly yao 
shows existence weak way functions inversion may succeed probability poly turned strong way functions inversion surely fails 
construction viewed security amplifying self combiner way functions 
see improvements related results 
relevant works upper bounds nandi stinson hoch shamir 
extend attack joux arbitrary combiners iterated hash functions message block possibly processed compression function constant number times 
transfer results tree constructions 
model output compression function serve input compression function disallowing mixes intermediate hash values 
hash tree extension combiner circumvents bounds 
concurrent canetti consider amplification collision resistance 
contrast idealized setting approach 
organization 
start defining model security amplifying combiners section 
section discuss classical combiner similar proposals security amplifying 
section general model 
main result appears section proof result section 
proofs version moved appendix 
preliminaries hash functions combiners hash function pair efficient algorithms input returns description hash function input deterministically outputs digest 
hash function called collision resistant efficient algorithm probability negligible function 
definition 
hash function combiner comb hash functions efficient deterministic algorithm input returns digest comb 
addition pair comb generates outputs collision resistant hash function long collision resistant 
popular merkle damg ard construction hash function takes compression function initial vector iv 
compute digest divides possibly pads message mk blocks mi bits computes digest ivk iv iv ivi ivi mi 
case description hash function simply consists pair iv 
note order construction collision resistant messages arbitrary length needs apply compression function bit length message 
idealized merkle damg ard construction assume compression function behaves random function drawn set functions mapping bit strings bit strings 
particular algorithm gets input description idealized md hash function understood algorithms gets iv input string oracle access random function holds combiner comb idealized md hash function comb gets oracle access receives strings iv iv input 
write comb comb iv iv 
emphasize combiner may assemble solution compression functions initial vectors necessarily iterated hash function 
model iv iv fig 

attack model analyze security amplification com idealized md hash functions iv iv consider adversary oracle access input iv iv 
task algorithm find collision combiner 
finding collisions random compression function directly restricted birthday attack allow oracle access collision finder oracles generating collisions compression function oracles access 
collision finders viewed best known algorithm generate collision compression function 
see 
simple form algorithm query collision finder cb forwarding values ivb iv getting collision mb fb ivb mb fb iv cb 
generally adversary may want influence colliding messages enforce dependencies initial values ivb iv messages mb model advanced collision finding strategies allow adversary pass description circuit cb possibly containing gates cb ivb iv 
collision finder applies internal stateful source cb continuously generate bit strings successively provides input circuit cb 
see 
ivb cb fb mb cb contains tested pairs cb fb cb cb collision search input circuit cb cvalb contains collisions returned collision finder cb fvalb contains pairs fb appearing direct queries evaluation circuit cb fig 

operation collision finder cb sets function values circuit output ivb mb cb input value finder computes fb ivb mb checks previously computed value iv collision fb ivb mb fb iv occurs 
cb immediately stops outputs collision ivb mb fb ivb mb iv fb iv 
stores new triple ivb mb fb ivb mb continues computations 
cb find collision bit inputs circuit returns 
assume adversary implicitly gets know consulted input values gathered ordered set sval cb 
note leave essentially adversary choice cb minimize likelihood undefined outputs trivial collisions pre image 
lucky collisions collision finders possibility derive collisions exclude accidental collisions say ignoring collision finders finding collision querying oracle times 
capture lucky collisions assume answer ivb mb fb ivb mb iv fb iv cb augmented preimage image pairs gate evaluations circuit computations search 
stress excludes samples cb fb cb collision finder probes find collision sample appears circuit evaluations see discussion 
query cb cb denote set pre image image pairs returned cb denote union cb queries cb cb computation 
assume set updated immediately function gate evaluation circuit evaluation 
similarly stands pre image image pairs generated queries answers fb box directly 
set fval union 
definition lucky collision 
pair called lucky collision execution fval source thought collision finder strategy generate collisions input circuit possibly known quantify collision finders specify distribution reader may think sequentially outputting values 
binary 
definition considered successful lucky collision occurs execution 
lies responsibility prevent lucky collisions querying boxes collision finders 
notational convenience collect pre image image pairs collisions generated collision finders set cval union answers cvalb cb collision finder cb query cb queries cb 
cb denote samples cb fb cb collision finder cb collects find collision query cb samples stands union cb queries cb 
clearly cvalb cb cb 
informal overview sets 
include pairs cb fb cb collision finder probes fvalb appear circuit evaluations 
order punish adversary collision finder search strengthens model lucky collisions 
answer collision finder adversary re compute values browsing ordered set sval cb containing inspected values submitting cb fb oracle 
value added set fvalb course 
security amplification costs oracle call collision finder cb charge adversary predetermined number tb steps call tb cb implements birthday attack ignoring fact collision finder may fail probability case 
charge adversary steps calls 
definition restriction number calls collision finders want limit number non trivial way main result assume adversary polynomial number calls 
definition 
hash function combiner comb idealized merkle damg ard hash functions called security amplifying oracles running times respectively algorithm making steps prob exp amp comb experiment exp amp comb initialize iv iv iv iv output iff comb iv iv comb iv iv lucky collisions computation occured 
combiner called security amplifying security amplifying function sufficiently large definition allows converge rapidly exclude cases explicitly merely long polynomially related combiner security amplifying find suitable function bounded away polynomial fraction 
simplicity defined compression functions equal output length security parameter 
definitions results remain valid different output lengths considering min 
warming attack classical combiner section get accustomed model attack joux classical combiner showing security amplifying secure combiner traditional sense 
proves finding far trivial 
recall classical combiner comb class idealized merkle damg ard hash functions 
obviously combiner collision resistant long hash functions property 
desired security amplification property adversary strategy joux find collision rapidly 
idea build multi collision set size calling times search pair messages multi collision set constitutes collision 
adversary af iv iv circuit iv iv iv get iv mi yi iv yi mi choice set iv yi construct circuit containing received collisions mi stage follows th input bit si mi mi si mi round compute iv iv mi iv iv circuit output iv mk get iv mk yk iv yk reconstruct successful combination values pairs mi output collision finder called times adversary derive pairs colliding message blocks mi iv mi iv circuit passed evaluate functions lucky collision occur stage 
query collision finder requires compression function evaluations circuit input selects multi collisions derived answers 
common prefix values function evaluations repeated set contains pre image image pairs circuit evaluations 
implies probability lucky collision hand collision fval occurs circuit outputs distinct set probed values collision finder find collision values constant probability roughly equal euler constant 
adversary succeeds constant probability steps 
implies classical combiner security amplifying appropriate function exists 
model allows implement attacks sophisticated hash combiners comb may secure classical combiner glance due dependency hash functions 
circuit compute valid inputs realize similiar attack 
basic section provide basic model functions pre image resistant presence collision finders 
results useful proving combiner security amplifying 
lemma basically known birthday paradox adversary experiment exp amp comb queries directly collision finders lucky collision occur succeed anymore 
result results section hold arbitrary combiners idealized merkle damg ard model assume fvalb dn constant probability lucky collisions occur negligible particular probability experiment returns negligible 
lemma birthday paradox 
consider experiment exp amp comb proof 
suppose fvalb dn birthday paradox implies probability exp dn exp lucky sion 
term grows exponentially lucky collision occurs experiment outputs 
show images sample values samples cval appearing search collision finder returned essentially uniformly distributed viewpoint sets fval cval 
holds point execution win lemma image uncertainty 
assume experiment exp amp comb cn calls collision finder fval fval contain cn elements constant 
iv iv fb iv fvalb cvalb prob fb iv fval cval sufficiently large 
proof 
consider information image value iv appearing fval cval available fval cval 
suppose value iv appears course collision search claim follows image completely undetermined image belongs samples fval cval 
leaks information image iv distinct images collision search collision finder output iv part collision 
information available fval cval exclude images samples fvalb cvalb values bit relevant set size fvalb cvalb cn cn calls cb yields entries cvalb 
large cn candidate images left equally 
lemma says collision finders break pre image resistance despite ability find collisions searching pre image chosen value infeasible 
formalize executing adversary mode challenge explicitly determines image pre image fb 
avoid trivial attacks presume iv fb iv point 
continue execution mode find tries find suitable pre image iv 
assumes try collision finder replies cn constant lemma chosen pre image resistance 
algorithm constant experiment comb negligible probability returning experiment exp pre comb initialize iv iv state bf challenge iv iv fvalb cvalb point iv bf find state return iff fb iv iv cn calls collision finder cb phases lucky collisions occured computation phases proof delegated appendix proof idea follows 
value appearing fvalb cvalb find phase probability matching image uncertainty 
furthermore birthday lemma set fvalb contain dn elements lucky collision 
probability finding pre image values negligible 
harder part show significantly influence collision finder cb search collision image appear cvalb output 
property model saying circuit output cb sample essentially determined precise previous values fval cval 
image uncertainty lemma applies sample cb yields probability final step note collision search requires approximately samples initiates cn searches overwhelming probability value image samples find phase value cvalb 
shows chosen pre image resistance 
final model prove collision iv iv produced collision finder cb generating pre image mapping fb iv fb iv infeasible 
proof steps showing fb boxes find additional value second lemma shows remains true tries collision finder call collision finder polynomial number times 
aspect refers collisions compression functions collision generated finders course extend collisions iterated hash function appending message blocks lemma replication resistance 
assume adversary exp amp comb cn calls collision finder set fval fval contains dn elements constants 
probability exist values iv cvalb iv fvalb cvalb negligible 
proof 
fix bit cn calls cb reply returns elements set cvalb size cn consider value iv cvalb value iv fvalb cvalb 
iv cvalb iv iv 
case match second case match occur probability image uncertainty considering point execution second values appears time 
sum cn dn combinations probability finding match negligible stays negligible sum choices note fact indicates having generated collisions finder finding matching function values boxes infeasible 
holds point execution may successfully produce collision prematurely 
fact pre image resistance prove replication resistance respect collision finders lemma replication resistance 
assume adversary exp amp comb poly calls collision finder fval fval contain dn elements constant 
probability exist values iv iv iv cvalb pairwise distinct iv iv iv negligible 
proof appendix basic idea point execution values cvalb call adds third value image 
contradicts chosen pre image resistance right call collision finder polynomially ones guessed probability poly 
note full argument needs take care case third value appears fvalb 
security amplifying combiner input restricted security amplifying combiner takes messages mt exactly blocks en constant applies hash functions message mt outputs concatenation theorem 
idealized merkle damg ard hash functions 
constant assume en 
combiner comb amp mt mt security amplifying poly adversary experiment poly calls collision finder 
exp amp combiner obviously classically secure combiner non idealized setting 
theorem shows get improved security amplification guarantee attacks idealized world 
proof idea instructive investigate straightforward application attack joux case message blocks fails 
case build multi collision set hash function size time probability pairs multi collision set collides hash function approximately approximately multi sets help find collision hash functions 
proof follows lines reasoning bounding size multi collision sets probability message pairs multi collision set collide hash function 
stress full proof model needs deal general adversaries possibly advantage collision finders clever queries 
process messages arbitrary length losing security amplification property apply hash tree construction combiner 
construction somewhat standard merely give example 
similar formal treatment see instance 
general input restriction hash combiner gives ary tree processing message blocks mk 
comb amp comb amp comb amp amp comb amp length length amp fig 

example hash tree construction combiner messages lead collision root hash tree result non trivial collision final application combiner different message lengths case get non trivial collision basic combiner tree structures identical 
case collision traced back collision earlier application combiner 
cases reason tree collision collision basic combiner 
efficiency full ary tree tr number message blocks power apply basic combiner times 
time need applications compression functions making solution times slower classical combiner applications advantage security amplification combiner 
proof security amplification giving proof show technical stating adversary input restricted combiner essentially win function values output undetermined proof lemma follows image uncertainty appears appendix lemma output knowledge 
assume experiment exp amp cn calls collision finder constant 
assume eventually outputs mt ivb iv ivb ivb fb ivb mi iv fb iv suppose ivb mi ivb iv iv belong fvalb cvalb 
probability experiment returns negligible 
lemma proves message blocks long collision finder called polynomial number times lemma multi collisions 
assume attacker experiment exp amp poly calls collision finder experiment returns 
probability ivb set ivb mt contains elements negligible 
ivb fb ivb mi fvalb cvalb ivb ivb lemma holds multi collision set elements distinct values ivb mi iv iv mapping image fb 
previous lemma assume belong fvalb cvalb lucky collision values fvalb refute replication resistance value fvalb contradict replication resistance value fvalb 
lemmas prove combiner security amplifying 
full proof appears appendix outline consider multi collision sets defined previous lemma 
lemma implies order win adversary know images final output messages appear multi collision set constitute collision hash function hb appear multi collision set yb yb 
messages collide hash functions simultaneously belong intersection multi multi 
lemma says multi collision set elements 
en pairs multi collision set 
furthermore bound number multi collision sets number elements fvalb cvalb dn constant fact 
possible pairs proof shows image uncertainty pairs multi collision set yb collides hash function hb probability negligible 
put differently overwhelming probability intersections collision sets hash functions empty adversary find appropriate messages acknowledgments anonymous reviewers valuable comments 
authors supported program fi german research foundation dfg 

dan boneh xavier boyen 
impossibility efficiently combining collision resistant hash functions 
advances cryptology crypto volume lecture notes computer science pages 
springer verlag 

mihir bellare phillip rogaway 
collision resistant hashing making practical 
advances cryptology crypto volume lecture notes computer science pages 
springer verlag 

ran canetti ron rivest madhu sudan luca trevisan wee 
amplifying collision resistance complexity theoretic treatment 
advances cryptology crypto lecture notes computer science 
springer verlag 
proceedings 

ivan damg ard 
design principle hash functions 
advances cryptology crypto volume lecture notes computer science pages 
springer verlag 

oded goldreich russell impagliazzo leonid levin venkatesan david zuckerman 
security preserving amplification hardness 
proceedings annual symposium foundations computer science focs pages 
ieee computer society press 

amir herzberg 
tolerant cryptographic constructions 
topics cryptology cryptographer track rsa conference ct rsa volume lecture notes computer science pages 
springer verlag 

jonathan hoch adi shamir 
breaking ice finding iterated concatenated expanded ice hash functions 
fast software encryption fse volume lecture notes computer science 
springer verlag 

antoine joux 
iterated hash functions 
advances cryptology crypto volume lecture notes computer science 
springer verlag 

henry lin luca trevisan wee 
hardness amplification way functions 
theory cryptography conference tcc volume lecture notes computer science pages 
springer verlag 

ralph merkle 
way hash functions des 
advances cryptology crypto volume lecture notes computer science pages 
springer verlag 

nandi stinson 
attacks class hash functions 
number cryptology eprint archive 
eprint iacr org 

krzysztof 
non trivial black box combiners collision resistant hash functions don exist 
advances cryptology eurocrypt lecture notes computer science 
springer verlag 

andrew yao 
theory applications trapdoor functions 
proceedings annual symposium foundations computer science focs 
ieee computer society press 

yu wang 
attack compression functions md pass 
number cryptology eprint archive 
eprint iacr org 
proof chosen pre image resistance lemma section prove lemma showing adversary determine image find pre image value 
proof 
constant 
assume fvalb contains dn elements 
lemma implies executions contribute negligible probability success 
condition bound dn number elements fvalb 
image uncertainty conclude probability iv fb iv fvalb cvalb find phase yields fact function evaluation adding fvalb cvalb direct call fb box fb gate evaluation computation circuit carried collision finders 
case input function depends values fval cval corresponding query fb box queries clear circuit computations follows circuit chosen previous function evaluations immediately appear fvalb 
uncertainty bound applies 
summing dn values fvalb shows probability hitting bounded negligible 
sequel presume iv fvalb cvalb appears case anymore successful run 
investigate effect collision finder calls cvalb addressing question force collision finder bias collisions way 
recall collision finder cn runs assume run probes en new elements previously samples 
single run probability finding collisions en trials fresh values double exponentially small see lemma note remains true slightly larger probability 
probability cn calls require fresh samples negligible 
presume call adds en new entries samples 
consider th call cb collision finder cb find stage 
set cvalb call denotes set cvalb find phase 
note change collision search finder returns collision 
suppose contain element iv obviously true crucial aspect consideration circuit values cb collision search fully determined fvalb containing pairs entire execution images distinct assumption uncertainty bound applies probability specific sample cb gives new pair cb cval cb fb cb fvalb noting entry image different assumption 
en new samples probability new sample cb cb search yields follows probability set including new collisions contain suitable entry 
sum cn calls cb derive cvalb contain new entry iv cvalb probability negligible 
holds fvalb cvalb probability finding suitable pre image iv including possibly final output member fvalb cvalb negligible 
proof replication resistance lemma section prove adversary find values cval mapping image 
proof 
discuss find values contradict replication resistance chosen pre image resistance 
consider adversary chosen pre image resistance basically runs black box simulation challenge phase initially guess specific call adversary collision finders 
runs point receives answer iv iv cb th call 
outputs internal information state concludes stage 
find phase continues simulation waits see value iv execution outputs iv stops 
analyze success probability 
call collision finders adds new values cvalb point execution iv cvalb possibly iv cvalb call cb adds value iv cvalb far iv cvalb 
suppose conditional probability value iv image really appears execution value belongs fvalb corresponding call cb noticeable 
clearly contradict replication resistance bounding polynomial number calls cn constant 
may assume iv cvalb fvalb point 
guesses right call probability poly predicts function value noticeable probability 
contradicts chosen pre image resistance 
proof security amplification theorem section provide proofs claims section theorem 
prove adversary essentially know function values output lemma proof lemma 
suppose outputs values succeeds noticeable probability 
assume simplicity ivb mi ivb fvalb cvalb case iv iv treated analogously 
maximal fix bit lemma assume fvalb dn max negligible probability 
condition fvalb cvalb dn success messages collide hb 
fb ivb mi ivb output hash function value appear fvalb cvalb probability matching iv bounded image uncertainty 
exist entry ivb mi ivb fvalb cvalb chosen maximal 
probability value fb ivb mi appears prefix dn values fvalb cvalb negligible 
hand prefix fb ivb mi appear fvalb cvalb contradicts maximal choice doubling probability choices concludes proof 
prove lemma bounding number messages multi collision set proof lemma 
assume experiment returns negligible probability fval fval size dn constant 
set ivb contains elements index distinct values ivb mi iv iv mapping image fb 
values belong fvalb cvalb constitutes lucky collision refutes fact experiment returns 
values lies fvalb cvalb values belong cvalb contradicts replication resistance happen negligible probability 
case values belong cvalb happen negligible probability replication resistance 
give full proof combiner security proof theorem 
definition combiner called security amplifying algorithm making steps probability finding collision negligible 
show overwhelming probability collisions en constant computed poly calling collision finders poly times 
constant larger 
assume fval fval attack contain dn elements probability winning negligible 
assume number collision finder calls bounded poly dn sufficiently large 
assume fvalb cvalb contains dn elements 
ivb consider sets multi collisions ivb mt ivb fb ivb mi fvalb cvalb ivb ivb time divide different stages depending calls collision finders 
denote set multi collisions th call collision finders 
transition phase adds messages respect new function values collision finder reply subsequent function evaluations boxes 
clearly poly denote contains multi collisions hb execution 
lemma adversary know function values final output belong fvalb cvalb 
messages collision hb output appear set yb yb 
basically reduces task showing fails proof multi multi exist small probability success requirements absence lucky collisions violated 
show success requirements violated overwhelming probability intersection multi collision sets empty course execution 
done careful inductive argument invariant yb set multi yb contains collide clearly true multi yb point collision finder called queries set multi yb contain element lucky collision occurs 
multi collision lemma set multi yb contain elements overwhelming probability 
additionally dn non empty multi collision sets element set value fvalb cvalb 
point dn collision pairs appearing multi collision sets constant 
suppose th call collision finders cb 
call subsequent function evaluations take pair belonging set multi yb yb 
step note pair belong multi 
note lie multi collision sets multi clearly collide sets disjoint 
assume contradiction appear single multi collision set know belong previous stage pairs constitutes collision hb negligible probability 
messages say added yb fb function evaluation cb direct evaluation fb account cvalb change points time 
suppose added set yb new fb value cvalb assume added set call 
consider maximal new function value added process blocks mi message iterated hash function 
final value ivb fb ivb mt added processing final message block ivb fb iv fvalb added fvalb lucky collision 
ivb fb iv cvalb 
contradict replication resistance 
note fb ivb mi determined probability matches prefix dn previous values fvalb cval negligible image uncertainty 
contradict maximal choice pairs value fval cval point probability pair collides probability pairs constitutes collision negligible 
argument applies vice versa pair set yb yields collision hb negligible error 
gives invariant 
argument set forth poly phases showing final multi collision sets intersect element 
proves theorem 

