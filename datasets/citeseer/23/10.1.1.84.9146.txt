transparent automatic migration interactive resource intensive applications andr eyal de lara satyanarayanan david hallaron january cmu cs school computer science carnegie mellon university pittsburgh pa electrical computer engineering carnegie mellon university pittsburgh pa usa university toronto toronto canada research supported national science foundation nsf numbers cns ccr national science engineering research council nserc canada number canada graduate scholarship canadian foundation innovation cfi ontario innovation trust number 
opinions findings recommendations expressed material authors necessarily reflect views nsf nserc cfi carnegie mellon university university toronto 
unidentified trademarks mentioned properties respective owners 
keywords bimodal applications interactive resource intensive crunch cognitive virtual machine vm migration code mobility application partitioning snowbird system simplifies development applications alternate phases heavy computational resource needs phases rich user interaction 
examples applications include video editing animation scientific medical engineering diagnostic design tools 
traditionally applications implemented distributed programs 
snowbird lets developers design applications monolithic units automatically migrates application optimal execution site achieve short completion time crisp interactive performance 
snowbird augments vm migration automatic migration manager graphics hardware acceleration peer peer storage system accomplish goals avoiding shortcomings limited adoption previous code mobility prototypes 
snowbird require applications written specific language specific libraries existing applications 
experimental results including closed source commercial applications validate snowbird approach automatic migration 
growing number applications alternate resource intensive crunch phases intensely interactive cognitive phases 
example character modeling graphics animation package involves cognitive phase animator character skeleton obtain desired intermediate positions visualizes low fidelity previews animation 
followed crunch phase generates production quality rendering photo realistic frames character movements 
examples include video editing amateur professional movie production simulation visualization phenomena scientific computing computer assisted design engineering architecture protein modeling drug discovery pharmaceutical industry computer aided diagnosis medicine 
refer class applications bimodal applications 
simultaneously optimizing performance phases applications difficult 
crunch phase may cpu intensive memory intensive data intensive combination 
leads execution remote supercomputer 
cases operations performed huge datasets large cache mirror locally constrained organizational regulatory policies forbid data copying implicit caching mirroring 
option case execute application dataset located halfway world 
unfortunately remote execution hurts interactive performance harmful effects internet latency jitter 
local execution preferable cognitive phase reasons 
provides low latency interaction unaffected internet load congestion 
second enables local hardware graphics performance acceleration 
challenges complicate application development slow emergence new applications 
today developers address different demands crunch cognitive phases manually splitting application distributed set components 
approach requires developers manage communication coordination various application components forces aware times particular component executed locally remotely 
adds software complexity intrinsic complexity application developed 
created system called snowbird cleanly isolates intrinsic application complexity distractions remote local execution 
snowbird developer focus creating bimodal application monolithic unit 
runtime snowbird automatically detects phase transitions migrates application optimal execution site 
achieves short completion time crunch phases crisp interactive performance cognitive phases 
snowbird exploits virtual machine vm technology accomplish goals 
wraps application including executables scripts libraries configuration files vm refer agent 
support agents extended existing vm technology novel mechanisms migration manager automatically trigger application relocations support hardware accelerated graphics vm applications peer peer storage subsystem optimized transfer persistent agent state 
best knowledge snowbird system exploits vm technology purpose simplifying development bimodal applications 
snowbird functionality conceptually similar process migration vm technology provides critical advantages software deployment maintenance 
process migration extensively investigated decades operating system widespread today proprietary open source supports standard facility 
conjecture process migration brittle abstraction typical implementation involves external interfaces easily rendered incompatible modest external change 
snowbird implements resilient abstraction code state implementing interfaces part guest os transported application 
snowbird offers additional advantages previous approaches mobile code 
application written specific language java need built specific libraries 
second existing closed source applications snowbird recoding recompilation relinking 
experiments conducted number real world applications including commercial closed source show applications running snowbird typically come optimal crunch completion times compromising crisp interactive performance 
background related closest spirit snowbird large body process migration research mentioned earlier 
body snowbird requires host operating system changes 
exposing numerous software interfaces precisely matched snowbird builds stable rarely changing interface hardware 
language code mobility explored approach moving computation 
best early example genre emerald 
example world 
growth popularity java support remote method invocation approach feasible relevant wide range computing environments 
unfortunately established application domains java domains involves legacy libraries tool chains 
contrast snowbird require modifications legacy applications 
require applications written particular language internal structure application unconstrained 
example application single monolithic process tool chain scripts glue chain 
crunch phase finer structure multiple large datasets located different internet site 
snowbird function complement grid computing toolkits globus condor widely scientific computing community today 
considerable variation functionality provided toolkit representative sample includes finding idle machines authenticating users remotely executing application machine transferring results machine checkpointing restarting applications 
developer typically constructs script wrapper application uses toolkits chain sequence individual computations data transfers collection machines 
snowbird complements functionality provided toolkits transforming single monolithic application entity easily migrated toolkit control 
improved interactivity agent user desktop compute cluster agent improved compute power internet improved data access agent data repository shows example application transitions data compute intensive phases returning user interaction intensive usage 
example migrating agent vms advocated grid :10.1.1.10.773
simplify deployment complex middleware necessary grid functionality easily packaged configured distributed vm 
researchers developed toolkits distributed visualization large remote datasets 
examples include dv gvu cactus 
snowbird tools require applications written particular interface useful application source code available 
broader perspective snowbird inspired substantial body applying vm technology wide range systems problems including security mobile computing software maintenance :10.1.1.112.1874
snowbird system leverage vm functionality simplify development bimodal applications 
design implementation snowbird implements notion agent embodiment application transparently seamlessly relocates achieve optimal performance 
agent contains single logical application application tool chain processes executing simultaneously sequentially pipeline fashion 
shows example agent starts user desktop execution interactive cognitive phases optimal 
migrates remote sites favor cpu performance performance returns desktop cognitive phase 
illustrates snowbird peer peer nature agents execute hosts providing desirable resource separated wan links potentially high latency 
life cycle commands migration commands administration commands agentname suspend agentname agentname hostname launch agentname resume agentname hostname sync agentname hostname kill agentname suspend resume agentname hostname agentname purge agentname hostname agentname table snowbird commands despite symmetry setup agent unique home host acts authoritative machine commands modify agent state issued 
home host typically user local desktop nearby computer user spends time interacting agent 
ssh access credentials necessary prerequisite agent execute hosts ssh credentials encrypt communications 
table shows command line interface snowbird 
includes commands managing agent life cycle controlling agent migration system administration 
migration control commands typically migration manager described section 
available explicit user application control desired 
snowbird offers key advantages existing approaches code mobility 
rest section describes implementation effort necessary realize advantages 
applications written specific language need built specific libraries 
second legacy applications modified recompiled relinked snowbird 
greatly simplifies real world deployments proprietary opensource applications 
third migration transparent seamless user obviously desirable effects improved interactive computational performance 
fourth clear separation migration policy mechanism 
code decide trigger migration independent code implements migration 
virtual machine technology snowbird uses virtual machine monitor vmm isolate agent vm 
agent application binary written programming language running major os 
current version snowbird xen vmm 
chose xen open source nature attractive experimentation 
design sufficiently modular different vmm vmware workstation require modest changes 
snowbird uses vm migration dynamically relocate agent source target host 
migrate agent vm suspended source 
suspended vm image typically mbs metadata serialized memory contents transferred target vm execution resumed 
snowbird uses live migration allow user continue interacting application agent relocation 
mechanism migration appear seamless iteratively prefetching vm memory target vm continues execute source host 
amount prefetched vm memory reaches critical threshold brief pause sufficient transfer control 
building snowbird goal leverage existing vm technology possible 
spite goal minimalism implementation effort substantial 
add new mechanisms implement agent abstraction migration manager automatically triggers relocation support hardware accelerated graphics vm applications peer peer storage subsystem persistent vm state 
discuss detail sections 
sensor driven migration manager applications explicitly control migration decisions directives table snowbird provides system controlled agent relocation key features 
words decision migrate choice migration site collection information base decisions happen covers manner transparent user agent 
solution uses migration manager module 
module bases migration decisions performance sensors extract relevant data vmm snowbird user interface migration profiles express migration policy transitions finite state machine triggered sensor readings 
snowbird clean separation policy mechanism simplifies different profiles sensors 
enables migration managers entirely different principles 
performance sensors implementation currently provides performance sensors cpu utilization network utilization interaction intensity interaction smoothness 
cpu network sensors periodically poll vmm cpu network usage particular agent 
poll interval configurable default value second 
interaction sensor built snowbird agent graphical user interface described section 
shown interaction sensor collects stream time stamped events corresponding keyboard mouse inputs screen updates 
intensity user interactive demand smoothness agent response inferred stream 
measure interaction intensity number input events unit time 
measure interaction smoothness number frames second triggered input event 
metric derived assuming screen updates causally related input event 
frames second fps triggered input event number related screen updates divided time event updates 
fps metric reflects smoothness interactive response 
remote interaction usually relies conserving thin client algorithms vnc adverse network conditions update update update total response time timeline shows raw output interactivity sensor 
screen updates assumed causally related mouse input event 
resulting fps interaction intensity smoothness skip frames catch output 
low fps responses result jerky screen tracking mouse keyboard inputs annoying distracting 
quantify interaction smoothness event window average fps yielded inputs window 
high interaction intensity combined low interaction smoothness cue migration manager trigger remote local transition 
migration profiles migration profile defines finite state machine fsm model agent behavior 
shown state machine characterizes particular level resource demand interaction 
state transition rules define sensor readings trigger state transitions 
profile specifies amount past sensor information evaluate rules 
state defines optimal execution site 
exemplifies typical fsm derived sensors implemented profile writers free generate complex fsms sensors making decisions finer granularity 
profile creation involves characterization agent resource usage may done application developers third parties user groups administrators technically adept users 
absence application specific profile migration manager uses generic profile identifies typical crunch cognitive phases 
experiments section able generic application profile experiments 
straightforward cases machine learning techniques derive migration profiles 
relevant concern handling applications overlapping crunch cognitive phases compromise agent stability thrashing states 
straightforward solution implemented specify priority favoring interactive performance conflicting migration rules simultaneously triggered 
solution invoke traditional hysteresis mechanisms shield migration manager adopting erratic behavior 
fps input interaction intensive usr home cpu intensive cycles org cpu net mbit fps input net mbit network intensive data edu partial diagram agent states transitions 
state includes matching migration target boldface 
example fsm agent states hardware accelerated graphical interface graphical user interface agent comply requirements 
user able interact seamlessly agent agent running user desktop remote host 
second applications targeted snowbird scientific visualization digital animation require graphics acceleration hardware feature absent virtualized execution environments 
meet requirements snowbird provides enhanced thin client interface vnc 
agent running remote host thin client protocol communicate screen updates user input events keystrokes mouse network 
agent running user desktop network loopback connection 
interaction interrupted agent relocated network connections persist live migrations agent relocated subnet gratuitous arp reply binds agent ip address new physical host 
relocations subnets supported layer proxy 
efficient virtualization graphics hardware requires manufacturer support virtualize opengl api 
ubiquitous standard supported major graphics hardware vendors pervasive cross platform api applications 
library preloading masquerade system native gl driver intercept gl calls application 
gl primitives forwarded network remote rendering module rendered directly graphics acceleration hardware 
setup allows complete flexibility expect rendering module execute user desktop administrative vm physically located agent vm cognitive phases 
opengl api virtualization systems require application kernel modifications supports agent migration 
agent user desktop gl app standard app vnc server vnc updates network gl commands network user input combined vnc viewer direct rendering vnc example shows intensive applications running agent benefit hardware acceleration user desktop 
snowbird extensions support architecture opengl virtualization system shown 
framework originally designed distributed rendering clusters opengl transport protocol 
gl primitives bypass vnc server rendered hardware user desktop 
updates non apis xlib standard applications rendered vnc server virtual framebuffer shipped viewer 
modified vnc viewer composes streams offers combined image user 
input events handled entirely thin client protocol 
wandisk storage system vm migration mechanisms transfer memory processor state transfer vm disk state typically orders magnitude larger 
vm disk operation migration usually involves network access source host 
may acceptable lan environments typical vm deployments data centers unacceptable high latency wan environments envision snowbird 
distributed storage mechanism needed take advantage read update locality disk 
distributed file systems mature technology today systems production 
examples include nfs afs coda lustre 
storage area networks sans gained widespread popularity 
parallax proposed storage subsystem clusters vms 
unfortunately systems designed lan environment perform poorly wans 
furthermore client server solutions centralize data transfers support single replica inefficient snowbird usage model involving hosts 
include file systems perform acceptably wans afs coda existing vm disk transfer mechanisms distributed block stores 
implemented distributed storage system called wandisk provides efficient wan access multiple replicas agent virtual disk 
provide flexibility choice migration site wandisk follows approach internet host maintain persistent replica agent state 
reduce data transfers wandisk relies persistence replicas created demand new migration sites identified 
wandisk replica control mechanism uses techniques optimizing efficiency agent migration 
agent remote chunk store admin vm remote chunk store local chunk store wandisk storage system architecture lazy synchronization avoid unnecessary data transfers inactive migration sites unused parts virtual disk 
second differential transfers replicas reduce synchronization overhead 
shows tiered wandisk architecture consists kernel module user space disk manager operating xen administrative vm 
kernel module presents pseudo block device mapped agent virtual block device 
block requests handled pseudo block device redirected user space disk manager 
disk manager partitions agent virtual disk chunks uses chunk table keep track versioning ownership information 
chunk size configurable agent creation time chunk size kb experiments practice 
agent modifies blocks virtual block device mapped chunk version number incremented ownership transferred host agent executing 
host owns chunks agent modified executing 
agent accesses chunks different host chunk table point wandisk location copy 
chunk table piece metadata necessary correct execution wandisk crucial addition agent state 
account modified live migration xen include chunk table actual chunk transfers involved critical path agent migration 
wandisk fetches chunks exclusively demand rsync algorithm perform efficient differential data transfer 
heavyweight sync command shown table available bringing replica date explicit user control 
command may performance reliability reasons 
command blocks replica specified migration site complete date 
point agent execution continue site disconnected replicas 
implementation limitations vm technology coupled additions described enables seamless transparent relocation bimodal applications snowbird currently limitations focus ongoing research 
relevant restriction snowbird uses shared memory model applications execute single smp virtual machine 
xen current choice vmm supports processors highly parallel applications require multiple machines large cluster 
vms running cluster nodes homogeneous kernel loaded libraries running processes plan exploiting similarity hosts enable concept gang migration greatly amortizing cost migrating large set vms 
second restriction affects systems vm migration techniques code migration prototypes interpreted languages 
vendor extensions instructions set architecture intel sse amd dnow problematic 
startup application configure take advantage extensions available machine crash migrating machine lacking extensions 
dynamic binary rewriting employed lead significant impact performance 
propose extending migration mechanism check extensions available source available destination migrate superset 
ongoing efforts vendors support competing extensions onerous restriction 
example amd started supporting intel sse extensions release athlon chips 
intrinsic limitation implicitly assumes distinct separation crunch cognitive phases 
applications consistently overlap crunch cognitive phases amenable snowbird 
experimental validation experimental evaluation objectives 
determine benefit automatic migration compared static approach runs crunch cognitive phases location 
benefit measured terms reduced completion time crunch phase improved interactive performance cognitive phase 
second determine snowbird overhead compared ideal application partitioning optimizes crunch cognitive phases application 
rest section describe applications corresponding benchmarks developed 
followed description experimental testbed methodology 
describe vnc redux tool implemented enable consistent repeatable replay interactive user sessions 
application benchmarks application domain source maya digital animation closed simulation visualization open adf quantum chemistry closed video editing open table application characteristics demonstrate snowbird broad applicability experimented applications representative domains professional animation amateur video production scientific computing include open source commercial closed source products 
application designed representative benchmark consists crunch cognitive phase 
table summarizes main characteristics applications 
maya digital animation maya commercial closed source high graphics animation package character modeling animation digital effects production quality rendering 
industry standard employed major motion pictures lord rings war worlds chronicles benchmark consists user loading partially complete animation project completing 
cognitive phase lasts approximately minutes consists specifying degrees freedom motion bounds joints digital cowboy character see tweaking character skeleton obtain desired intermediate positions scripting patterns movement repeated 
part phase user periodically visualizes low fidelity preview animation 
maya leverages local graphics hardware low fidelity previews 
animation design complete user initiates production quality rendering crunch phase 
parallelizable cpu intensive task photo realistic frame rendered number lighting effects 
maya graphics hardware phase 
result collection frames encoded movie format 
simulation visualization interactive earthquake simulation visualizer benchmark accesses remote dataset 
benchmark consists visualization gb volumetric dataset depicting seconds ground motion seismic source los angeles basin 
computationally intense crunch phase mines dataset extract ground motion isosurfaces 
surfaces inside volume points moving direction speed 
result set triangular meshes representing isosurface successive points time 
series transformations including decimation smoothing normals calculation applied generate visually appealing result 
maya character modeling ground motion isosurface adf energy density amino acid molecule video editing application screenshots ensuing cognitive phase scene synthesized meshes rendered screen see 
phase user examines rendered isosurfaces zooming rotating panning moving forwards backwards time 
cognitive phase benchmark lasts approximately minutes involves exploration seismic reaction isosurfaces different time steps 
adf quantum chemistry amsterdam density functional adf commercial closed source tool scientists engineers model explore properties molecular structures 
adf benchmark crunch phase consists performing geometry optimization amino acid molecule self consistent field scf calculation method 
cpu intensive scf calculation generates results visualized subsequent cognitive phase isosurfaces coulomb potential occupied electron kinetic energy density properties see 
analysis properties rotation zooming panning examples actions performed minute long cognitive phase 
video editing lan storage server compute server emulated wan user desktop experimental testbed kde media encoder open source digital editor amateur video post production 
users cut paste portions video audio apply artistic effects blurring 
process avi mpeg encoded video export composite movies number formats 
benchmark exploit graphics acceleration hardware 
cognitive phase benchmark load mb video group split episodes see 
edit episode cropping re arranging portions recording adding filters effects 
cognitive phase takes approximately minutes 
user starts crunch phase converting mpeg format edited episodes 
convert episodes parallel significant gains obtained executing multiprocessor 
experimental testbed shows experimental testbed consists user desktop compute server storage server 
user desktop ghz intel pentium iv equipped ati graphics processor unit gpu 
compute server way smp dual threaded cores ghz intel xeon 
storage server pc serves dataset nfs share 
note uses nfs dataset policy serve external public datasets known shared storage mechanisms wandisk virtual disk containing vm internal state intermediate files generated applications final results 
linux kernel snowbird experiments linux kernel non snowbird experiments 
kernels configured mb ram 
snowbird uses ssh wan optimized ssh variant data transfers 
user desktop communicates storage compute servers wan link emulated 
internet bandwidth measurements planetlab configure wan link bandwidth mbit table shows nlanr measurements representative rtt latencies internet hosts different cities europe leading choice rtts ms storage compute servers connected gigabit lan 
points min rtts ms mean max berkeley canberra berkeley new york berkeley trondheim pittsburgh ottawa pittsburgh hong kong pittsburgh dublin pittsburgh seattle rtt measurements obtained nlanr 
hosts connected high bandwidth internet links 
column gives lower bound rtt endpoints speed light 
table internet round trip times experimental configurations investigate configurations local execution application executes exclusively environment user desktop 
interactive phases graphics rendered locally available hardware acceleration 
represents best scenario cognitive phase worst case crunch phase 
remote execution application executes exclusively environment smp compute server 
user interaction takes place standard vnc thin client rendering remote server software 
represents best scenario crunch phase worst case cognitive phase 
snowbird snowbird dynamically switch local remote execution modes 
user desktop remote compute server run snowbird infrastructure xen vmm wandisk hardware accelerated agent gui migration manager 
benchmarks initiated agent running user desktop wandisk state hosts initially synchronized 
single generic application profile experiments 
running complete benchmark remote local modes obtain sets results 
measure clearly undesirable running crunch phase configuration local interacting application executing wan link remote 
comparing results quantify benefits snowbird terms reduced completion time crunch phase improved interactive performance cognitive phase conversely quantify snowbird overhead comparing execution crunch cognitive phases remote local configurations respectively 
second combination represents ideal application partitioning provides upper bound performance manual partitioning include communication overhead added computational complexity 
interactive session replay challenges evaluating interactive performance reliable replay user sessions 
address problem developed vnc redux tool vnc protocol records replays interactive user sessions 
session record phase vnc redux generates timestamped trace user keyboard mouse input 
addition mouse button click release vnc redux records snapshot screen area mouse pointer 
replay events trace replayed appropriate times 
ensure consistent replay replaying mouse button events screen state compared previously captured screen snapshot sufficient discrepancies detected session reinitialized replay restarted 
screen synchronization succeeds vnc thin client protocols non conserving skip intermediate frame updates slow connections 
results client reaching stable similar albeit identical state input 
identical initial application state entire recorded interactive session reliably replayed 
unfortunately simple screen synchronization algorithms replay tools high latency environments 
algorithm performs strict pixel comparison threshold specifies maximum number pixel mismatches allowed 
simple mouse button release delayed milliseconds due network jitter cause object position offset small amount 
offset causes algorithm detect large number pixel mismatches stalling replay 
address problem developed algorithm manhattan distances estimate image closeness 
pixels rgb space manhattan distance sum absolute differences corresponding values 
pixel manhattan distance original pixel captured record greater distance threshold classified pixel mismatch 
total number pixel mismatches greater pixel difference threshold screenshots compared declared different 
experiments confirm improved matching algorithm works high latency networks 
results section results experiments benchmarks introduced section 
benchmarks include cognitive crunch phase 
maya cognitive phase precedes crunch phase adf cognitive phase follows crunch phase 
time minutes maya adf application remote local snowbird snowbird snowbird shows crunch completion time local remote snowbird experiments 
snowbird evaluated different wan latencies 
results mean trials maximum standard deviation corresponding mean 
total completion time crunch phase time seconds best latency ms latency ms latency ms application snowbird detect migrate suspend detect migrate suspend detect migrate suspend maya adf detect migrate suspend columns measure time taken migration manager detect transition crunch phase time spent live migration time agent suspended migration complete 
results mean trials maximum standard deviation detect migrate suspend corresponding means 
magnitude comparison best snowbird column shows best observed crunch time snowbird 
crunch phase table crunch phase migration times shows total completion time crunch phase benchmarks configurations local remote snowbird 
show results different network round trip latencies snowbird performance crunch phase local remote configurations unaffected rtt 
expected maya adf access external data 
reads large gb file nfs expected differences network latency affect performance 
appears readahead nfs client effectively masks latency 
migrating remote compute server snowbird able significantly outperform local configuration 
specifically ms snowbird approximately halved length crunch phase applications came ideal performance remote configuration 
crunch phases benchmarks cpu intensive benefit increased computational power multiprocessor server 
takes advantage cdf cdf remote snowbird local remote ms remote ms remote ms snowbird local smoothness frames second cdf remote snowbird local remote ms remote ms remote ms snowbird ms snowbird ms snowbird ms local smoothness frames second maya quake remote snowbird local remote ms remote ms remote ms snowbird ms snowbird ms snowbird ms local smoothness frames second cdf remote snowbird local remote ms remote ms remote ms snowbird local smoothness frames second adf shows distribution interactive responses cognitive phases maya quake adf 
snowbird results maya independent latency interaction local execution mode need migrate 
interactive response lower latency increased bandwidth data server 
table shows time takes migration manager detect transition crunch phase time takes migrate agent remote compute server 
maximum time taken migration manager seconds 
worst case latency ms agent migration took seconds complete 
cases agent spent minutes user desktop entered crunch phase total benchmark time 
table shows maximum time agent appear unresponsive user input migration seconds order magnitude smaller optimal non live migration entail mb mbit seconds 
time seconds latency ms latency ms latency ms application detect migrate suspend detect migrate suspend detect migrate suspend maya relevant adf relevant detect migrate suspend columns measure time taken migration manager detect transition cognitive phase time spent live migration time agent suspended migration complete 
maya results relevant workload include cognitive phase crunch phase finishes remote server 
results mean trials maximum standard deviation detect migrate suspend corresponding means 
cognitive phase table cognitive phase migration times shows cumulative distribution functions cdfs number frames second fps benchmarks configurations local remote snowbird 
show results different network rtts remote snowbird configurations 
cognitive phases adf start remote compute server soon crunch phase terminates 
migration manager detects transition migrates back user desktop 
hand cognitive phase maya start agent running user desktop 
results show snowbird delivers better cognitive performance remote interaction 
importantly median number fps delivered snowbird long established fps threshold needed crisp interactivity 
example results benchmark seen show median case snowbird delivers times fps ms latency cases respectively 
th percentile case delivers times fps ms latency cases respectively 
agent migrate compute server user desktop snowbird cognitive performance tends independent wan latency 
table indicates occurs network latency negligible impact time taken decision migrate time required migrate agent 
results show fps delivered high local interaction 
local execution experiments delivered times fps median case times fps th percentile case 
difference snowbird local execution fundamental limitation design artifact opengl virtualization described section 
software intercept opengl calls proved cpu intensive 
adding cpu core user desktop optimizing implementation bring snowbird performance closer local interaction 
speedup crunch phase min min min migration time minutes plots snowbird migration cost vs application speedup duration crunch phase hypothetical applications 
parameter space curve indicates snowbird beneficial 
snowbird useful 
discussion improvements results section demonstrate feasibility value snowbird realworld applications 
important note applications written modified snowbird 
applications maya adf commercial products success marketplace confirms importance 
applications substantial open source user communities 
representative growing class applications embody distinct crunch cognitive phases 
expand snowbird applicability applications crucial understand tradeoffs inherent behavior 
illustrates application space snowbird applicable 
horizontal axis shows migration time minutes depends quality snowbird implementation 
measure system agility includes migration triggered efficiency completed 
vertical axis shows crunch speedup executing remotely depends application available remote resources 
rationale agent executes locally user desktop provide best possible interactive response application enters crunch phase agent migrates remote site expected performance gain exceeds switching cost 
curve plots relation speedup migration time hypothetical applications crunch phases different lengths relation formalizes behavior snowbird splits parameter space parts 
curve snowbird beneficial bellow curve harmful 
simple model illustrates improving migration time broadens set applications snowbird applicable 
speedup workloads smaller crunch time benefit migration time decreases 
crunch time migration reduces constraints quality remote resources needed 
conversely high migration times limit applicability snowbird applications long crunch phases remote platforms capable yielding high speedups 
combination short crunch time modest crunch speedup defines particularly challenging workload snowbird 
current prototype detection change modality occur roughly seconds migration follows typically takes seconds plus lazy wandisk chunk fetches 
mapping values indicates crunch phases minutes speedups approximate limits applicability snowbird 
explore section straightforward means improve snowbird migration costs attacking wandisk bottleneck 
noted complementary attribute agility stability characterizes ability implementation avoid migrations may lead thrashing 
known control theory agility stability sides coin considered design adaptive system 
current implementation reasonable agility 
simple provisions adopted deal thrashing see section needed experiments 
infer stability prototype reasonable tested applications 
harder formalize reasonably conclude snowbird agility cognitive phases beneficial applications 
challenging networking conditions thin client painful interactive user confident agent revert local execution roughly minute 
mentioned section room improvement compared configuration 
plan address streamlining combined vnc stack significantly reduce processing overhead latency 
improving wandisk performance snowbird performance significantly affected storage subsystem wandisk 
initial implementation results section areas inefficiency 
kernel module support concurrent requests 
second significant overhead arising kernel module duplicating part functionality xen virtual subsystem 
third separate rsync process forked chunk fourth prefetching readahead wandisk 
implemented new version wandisk number performance improvements 
wandisk uses asynchronous local disk 
second kernel module uses interface 
third wandisk opens persistent tcp connections remote hosts fetches chunks host connection forking additional processes 
rsync raw byte copying transfer data 
left prefetching 
quantify effect improvements conducted number experiments synthetic benchmark 
run throughput benchmarks inside xen linux vm gb wandisk block device sequential read sequential write random read sequential random test read write read write wandisk kb wandisk kb speedup wandisk kb wandisk kb speedup wandisk kb wandisk kb speedup wandisk kb wandisk kb speedup wandisk kb wandisk kb speedup wandisk kb wandisk kb speedup throughput comparison wandisk original wandisk 
speedup ratio wan disk performance wandisk 
test size gb remote fetches happened mbit ms rtt link 
result mean trails 
maximum standard deviation wandisk wandisk corresponding mean respectively 
table wandisk throughput benchmark random write 
wandisk uses default kb chunk size performs units kbs 
benchmark evaluate wandisk different hit ratios local chunk cache 
chunk wandisk fetches entire chunk remote cache mbit ms rtt link 
table presents results benchmark versions wandisk 
wandisk performance improvements encouraging consistently outperforms predecessor order magnitude 
expect results section better wandisk 
focus growing class bimodal applications alternate crunch interactive intensive cognitive phases 
describe snowbird system simplifies creation bimodal applications combining vm migration support vm graphics hardware acceleration wide area peer peer storage system automatic migration manager 
snowbird lets programmer focus application logic develop monolithic unit 
execution snowbird seamlessly transparently relocates application execution 
allows easy efficient remote resources compute servers scientific datasets crunch phases 
provides crisp interactive performance cognitive phases 
experiments including closed source commercial applications snowbird interactive performance far exceeds achievable remote execution crunch phase performance significantly improved remote resources 
snowbird promptly detects application transitions crunch cognitive phases automatically migrates application appropriate execution site 
emergence fields computational biology expect number importance breadth bimodal applications grow substantially 
simultaneously trends promote distant supercomputing centers steadily increasing creation large scientific datasets spread globe connected high bandwidth high latency links 
challenging combination circumstances snowbird enabling role find fertile ground 
acknowledgments rajesh involvement earlier versions 
angela brown dash jan jing su alex feedback early versions 
help adf julio lopez help brian paul help singh help maya 
michael fabian angelo renato ferreira robert miller mark joel saltz alan sussman hubert tsang 
digital dynamic virtual microscope 
proc 
american medical informatics association amia annual fall symposium lake vista fl november 
john john jr frederick brooks 
image realism interactive update rates complex virtual building environments 
si proc 
symposium interactive graphics pages snowbird ut 
george ioannis antonio fernandez omar kim julio lopez david hallaron tu john 
high resolution forward inverse earthquake modeling computers 
proc 
acm ieee conference supercomputing phoenix az november 
finkel designing process migration facility charlotte experience 
ieee computer 

prototype remote distributed visualization application framework 
proc 
siggraph annual conference new orleans la july 
peter 
lustre storage architecture november 
www lustre 
org docs lustre pdf 
christopher clark fraser steven hand jacob hansen eric jul christian ian pratt andrew warfield 
live migration virtual machines 
proc 
nd usenix symposium networked systems design implementation nsdi boston ma may 
czajkowski kesselman 
practical resource management visual exploration 
proc 
ieee international symposium high performance distributed computing hpdc san francisco august 
douglis ousterhout 
transparent process migration design alternatives sprite implementation 
software practice experience 
george dunlap samuel king peter chen 
revirt enabling intrusion analysis virtual machine logging replay 
proc 
th symposium operating systems design implementation osdi boston ma december 
renato figueiredo peter dinda jos fortes 
case grid computing virtual machines 
proc 
rd international conference distributed computing systems icdcs page providence ri 
foster kesselman 
globus metacomputing infrastructure toolkit 
international journal supercomputer applications high performance computing summer 
goodale allen seidel 
cactus framework toolkit design applications 
vector parallel processing th international conference 
springer 
grimm davis macbeth swanson anderson bershad borriello gribble wetherall system support pervasive applications 
acm transactions computer systems 
jacob hansen 
blink multiplexing virtualized applications 
technical report dept computer science university copenhagen april 
stephen 
emulating real networks lab 
proc 
linux conference australia canberra australia april 
howard kazar menees nichols satyanarayanan sidebotham west 
scale performance distributed file system 
acm transactions computer systems february 
greg humphreys mike houston ren ng randall frank sean ahern peter kirchner james klosowski 
stream processing framework interactive rendering clusters 
proc 
th annual conference computer graphics interactive techniques pages new york ny 
filesystem benchmark 

www org 
eric jul henry levy norman hutchinson andrew black 
fine grained mobility emerald system 
acm transactions computer systems 
keahey ian foster timothy freeman zhang daniel 
virtual workspaces grid 
lecture notes computer science august 

sourceforge net 
michael satyanarayanan 
internet suspend resume 
proc 
fourth ieee workshop mobile computing systems applications new york june 
sung ju lee sharma banerjee basu rodrigo fonseca 
measuring bandwidth planetlab host 
proc 
th passive active measurement workshop pam boston ma march 
bin lin peter dinda 
mixing batch interactive virtual machines periodic real time scheduling 
proc 
acm ieee conference high performance networking computing sc seattle wa november 
julio pez david hallaron 
evaluation resource selection mechanism complex network services 
proc 
ieee international symposium high performance distributed computing hpdc san francisco ca august 
maya 
maya 
www com maya 
fred douglis yves richard wheeler zhou 
process migration 
acm computing surveys 
issn 
doi doi acm org 
rtt loss measurements 
national laboratory applied network research nlanr august 
watt nlanr net active maps active php 
osman su design implementation zap system migrating computing environments 
proceedings th symposium operating systems design implementation boston ma december 
parker johnson 
scientific programming environment computational steering 
proc 
acm ieee conference supercomputing san diego ca december 
pitt java rmi remote method invocation guide 
addison wesley professional 
michael powell barton miller 
process migration demos mp 
proc 
th acm symposium operating systems principles sosp october 
chris rapier michael stevens 
high performance ssh scp ssh www psc edu networking projects ssh 
philipp reisner 
distributed replicated block device 
proc 
th international linux system technology conference cologne germany september 
richardson stafford fraser kenneth wood andy hopper 
virtual network computing 
ieee internet computing jan feb 
sandberg goldberg kleiman walsh lyon design implementation sun network file system 
summer usenix conference portland june 
constantine ramesh chandra ben pfaff jim chow monica lam mendel rosenblum :10.1.1.112.1874
optimizing migration virtual computers 
proc 
th symposium operating systems design implementation osdi december 
satyanarayanan michael casey david hallaron 
seamless mobility pervasive hardware 
pervasive mobile computing 
satyanarayanan evolution coda 
acm transactions computer systems may 
peter dinda 
virtual networks virtual machine grid computing 
proc 
rd virtual machine research technology symposium pages san jose ca may 
te velde matthias jan lia fonseca stan van jaap snijders ziegler 
chemistry adf 
journal computational chemistry 
douglas thain todd tannenbaum miron livny 
distributed computing practice condor experience 
concurrency computation practice experience february april 
theimer cheriton preemptable remote execution facilities system 
proc 
th symposium operating system principles sosp orcas island wa december 
tridgell 
rsync algorithm 
technical report tr cs department computer science australian national university canberra australia 
andrew warfield steven hand fraser tim 
facilitating development soft devices 
proc 
usenix annual technical conference pages anaheim ca april 
andrew warfield russ ross fraser christian steven hand 
parallax managing storage machines 
proc 
th workshop hot topics operating systems hotos santa fe nm june 
miller livny process hijacking 
proc 
th international symposium high performance distributed computing hpdc redondo beach ca august 
ramesh chandra 
interactive performance measurement 
proc 
usenix annual technical conference freenix track anaheim ca april 

