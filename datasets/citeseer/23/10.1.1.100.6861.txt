responder anonymity anonymous peer peer file sharing vincent brian neil levine clay shields cc gatech edu brian cs umass edu clay cs georgetown edu dept computer science university massachusetts amherst ma dept computer science georgetown university washington dc data transfer tcp ip provides privacy network users 
previous research anonymity focused provision initiator anonymity 
explore methods adapting existing initiator anonymous protocols provide responder anonymity mutual anonymity 
anonymous peer peer file sharing apfs protocols provide mutual anonymity peer peer file sharing 
apfs addresses problem long lived internet services may outlive degradation current anonymous protocols 
variant apfs unicast communication requires central coordinator bootstrap protocol 
second variant takes advantage multicast routing remove need central coordination point 
compare tcp performance apfs protocol existing overt file sharing systems napster 
providing anonymity apfs double transfer times requires additional traffic carried peers overhead constant size session 
internet pivotal medium information dissemination content sharing globe 
internet protocol suite tcp ip takes account numerous network performance issues data transfer internet inherently provides privacy 
packets tcp data transfer easily study supported part national science foundation dt cx department justice office justice programs 
contents solely responsibility authors necessarily represent official views department justice 
traced back host specified ip source address field 
protocols maintaining anonymous internet connections proposed previously specifically addressed maintaining anonymity initiator connection :10.1.1.30.3785
providing anonymity user awaiting connections responder anonymity crucial responder anonymity allow privacy network interactions anonymous web servers anonymous mail private peer peer file sharing 
offer number contributions regard comprehensive anonymity 
provide techniques adapting current initiator protocols provide responder anonymity solely unicast communication second takes advantage multicast communication 
second show protocols initiator responder anonymity composed provide mutual anonymity parties forming connection internet 
specific design mutually anonymous protocol called anonymous peer peer file sharing apfs protocol 
apfs takes advantage peer peer environment solve problems specific maintaining responder anonymity 
offer versions apfs solutions responder anonymity unicast transmissions second multicast routing protocols 
show multicast routing eliminate need centralized coordinator system yielding apfs completely distributed file sharing service 
unicast solution requires bootstrapping point 
evaluate network performance apfs comparison overt peer peer file transfer protocol napster gnutella 
apfs directly applies previous anonymous routing protocols offer security analysis protocols 
argue introduced security flaws 
section introduce peer peer file sharing anonymity 
section propose techniques responder anonymity detail operation apfs 
section evaluate simulation additional network overhead caused apfs compared overt file sharing techniques 
lastly section summarizes contributions 
background little specific research area anonymous file sharing extensive research done file sharing anonymity separately review section 
multicast routing proposals review ip multicast space limitations extensive overviews design operation 
multicast widely available uunet sprint begun deploying pim source specific multicast ppm ssm multicast implementations 
peer peer file sharing distributed files systems classified broad categories centralized distributed 
centralized system main server communication coordinated distributed system lacks centralized server 
general centralized file sharing system simpler search design return search queries faster distributed systems 
due fact server knows location files user base increases additional hardware added server compensate heightened load 
server bottleneck performance system server unavailable entire system halts 
case napster system peer peer file sharing central server responsible storing lists available files servicing queries users searching files peers learn location desired file directly contact remote peer request file 
distributed system server responsibility coordinating communication distributed users 
order conduct search query forwarded members system centralized knowledge resources exist 
querying process limits speed searching expensive terms network traffic 
gnutella distributed peer peer system reviewed detail 
napster known peer peer file sharing systems napster 
napster designed specifically transmission audio files theory employed peer peer needs 
napster fully centralized system napster maintains cluster servers conducting searches 
napster protocol proprietary simple reverse engineer 
open nap open source reverse engineering protocol napster 
apfs partially open nap protocol review operation 
join going napster session client sends central server login id file list list files client available share 
search napster community files client sends query server 
server replies list matching files name user sharing file 
user may choose remote file client contacts server requesting ip address user 
client contacts user directly requests file sent 
napster system lacks significant security privacy measures single point failure server cluster 
gnutella gnutella popular fully distributed file sharing system 
review operation point lack anonymity gnutella gnutella central point querying file transfer coordination point allows new clients learn clients running protocol 
order conduct searches client picks clients querying 
query answered neighbors query relayed neighbors neighbors 
process recurse hops cost traffic queries extreme 
immediate originator query obvious neighbors querying entirely anonymous 
discovering originated query simple answering request falsely waiting originator directly request desired file specified gnutella design 
unfortunately popular press claims gnutella anonymous see brown gnutella paradox salon sept 
anonymity ip addresses uniquely identify users machines network goal anonymous routing protocols user ip address traffic user initiates network 
previous research anonymity largely focused initiator anonymity exceptions 
protocols protect half connection 
goal protect anonymity initiator responder connection 
protocols designed anonymous ip communication organize group members forward messages trading bandwidth anonymity 
examples type protocol onion routing crowds 
general method protocols initiator creates path group member path called tail node contacts responder 
tail node forwards request responder returns reply back initiator 
method provides anonymity step path possible tell previous hop initiated message forwarding member 
approach anonymity requires considerations taken respect maintenance group 
specifically users required join exit group periodic intervals group members clear reform paths interval 
reason periodic join new member attempting form new path immediately recognizable initiator path group members constructed long standing paths 
choose onion routing base protocol path approach 
section discuss onion routing detail 
onion routing onion routing path anonymous protocol uses known public keys participants hide path information 
certificate authority store distribute keys 
send message onion routing session initiator randomly chooses path proxies encrypts message multiple times public keys proxy desired route creating onion 
example onion path kp kp kp kp kp indicates cipher created encrypting message public key 
proxy path decrypts message find identity proxy forwards encrypted payload proxy decrypt 
process repeats proxy sends message final destination 
enable destination respond proxies pass session id onion neighbors path 
destination responds message routed back path reverse direction 
degradation anonymity previous shown inability protocols maintain high degrees anonymity low overhead face persistent attackers 
occurs time path initiator responder path reformation provides attackers opportunity learn information initiator 
path attackers determine increasing probability initiator connection 
onion routing expected number path required determine initiator participants length path initiator responder 
persistent coordinated attack applies protocols untraceability 
section show responder anonymity affected result 
comprehensive anonymity previous focused primarily providing anonymity initiator connection 
section discuss protocols techniques hiding identity responder providing completely anonymous communication initiator responder anonymous 
prominent difficulties providing responder anonymity compared providing initiator anonymity 

protocols responder anonymity designed route packets responder opportunity set path initiator responder ahead time assume responder know initiator desire communication 

responders tend servers 
servers commonly need stay long period time conflict previous degradation anonymous protocols 
see section initiator 

proxy responder steps proxies responder anonymity 
section provide solutions problems 
problem presently propose different techniques forward messages anonymous responder set connection initiator protocol initiator anonymity see section 
technique call proxy responder anonymity pra utilizes unicast routing proxy trusted 
second technique call multicast responder anonymity mra utilizes multicast routing proxies 
second problem take advantage properties peer peer networking services allow servers way avoid problem longterm anonymous degradation 
responder anonymity protocol initiator anonymity provide responder anonymity 
publicly advertised proxy accept relay datagrams anonymous responder 
technique requires additional steps responder contacts proxy anonymously prior receiving communications initiator 
illustrates technique 
step responder sets connection known proxy protocol provides initiator anonymity 
proxy maintains public alias knowing true identity responder 
step packets initiator sent proxy anonymous channel encapsulating data header specifies alias responder 
step proxy received data forwards pre established anonymous channel responder 
step optional avoid bottleneck proxy responder set connection initiator protocol initiator anonymity 
anonymous responders may wish just alias advertised 
example proxy may identify type service responder providing 
responder may wish generate public private key pair sign alias time stamp past correspondents identify responders past sessions 
proxy need trusted engage denial service attack dropping requests trusted maintain responder anonymity 
techniques proxy avoided altogether responder listens multicast address new requests 
equivalent idea put forward past broadcast networks multicasting natural mechanism applying technique ip networks 
advertising proxy address alias responder advertises responder alias id multicast address id random number 
id serves unique marker case anonymous responder chooses listen multicast address 
choice multicast group may user network responder hijacking existing group allows responder indistinguishable receivers multicast group 
step chooses id public key kr advertises values public site irc channels web sites newsgroups 
step initiator sends message multicast group 
transmission reveals identity 
id data kr step responder receives initiator packet multicast address checks alias data portion packet 
reply sent connection initiator set protocol initiator anonymity just pra 
ar initiator anonymity set multicast create traffic proxies past shown 
proxies require cooperation third party host need trusted hide identity responder 
details multicast return paths initiator previous protocol 
protocol especially adaptable multicast responder anonymity initiators multicast return path 
mutual anonymity apfs shown responder anonymity possible simple modifications initiator anonymous protocols 
section address important problems 
show providing mutual anonymity initiator responder simultaneously simply requires composition types anonymous protocols 
address conflict long lived servers degradation anonymous protocols advantage peer peer networking 
peer peer file services napster file transfers responsibility peers server performs duty having central location store query file indexes 
apfs removes single central server recruiting peers fill position time short revealed anonymous degradation 
peers share servers responsibilities serially shift responsibilities peers anonymous degradation occurs 
explanation apfs protocol distinction overt clients hosts act overtly create anonymous routes anonymous peers hosts anonymously contact purposes file sharing 
apfs accordingly separate stages 
initialization clients join form anonymous connections crowds onion routing 
messages stage overt group membership required known 

peer peer services peers anonymously relay queries current server server anonymously answers queries providing information allowing contact peers requested file 
periodically new anonymous servers chosen 
messages stage anonymous 
apfs relies unicast communication requires untrusted proxy called coordinator initialize session 
section show coordinator replaced multicast communication clients removing single point 
clarity subsequent discussion assumes onion routing anonymous protocol participants session protocol 
apfs initialization apfs begins start coordinator bootstrapping point clients 
coordinator initiator peer anonymous client server coordinator multicast address responder ip address client anonymous transmission peer session id tn tail node initiator nv nonce chosen server time reset frequency resets time idn anonymous alias id peer fi file table table variables 
ip address public key advertised potential clients web pages mail irc 
multiple sessions bootstrapped coordinator distinguished unique identifiers 
client begins protocol sending join message coordination point contains ip address session id ipi client learns coordinator set clients available forming anonymous routes 
new members allowed join periodically 
anonymous protocols routes periodically torn recreated process called resetting new routes group associated new members 
coordinator returns time reset time frequency resets list clients enabling new client construction paths anonymous group 
ip 
optionally messages may authentication authorization mechanisms include 
starting time paths formed onion routing see complete description process 
apfs starting servers initialization willing peers announcing servers coordinator users issuing search queries servers 
messages stage sent anonymously 
server step 
peers willing act query server send anonymous message coordinator encrypted coordinator public key 
message includes unique server identifier large random number suffice nonce nv current tail node server tv server start flag associated session id nv tv server start kc denoted mean node uses anonymous protocol send message 
nonce encryption prevents denial service attack described 
optionally coordinator may acknowledge message 
message resent coordinator server tail node changes due path reset server stays constant path resets 
server step 
server begins waiting peers anonymously send lists files share 
receiving file list user server records newly available file list queries 
server step 
servers process queries 
query anonymous peer yielding results server sends peer information match 
result includes filename fn anonymous id sharing peer idn tail node user contact sharing peer tn 
id 
fn idn tn server step 
server wants participating session remove server lists stored users 
server sends message coordinator declaring non server encrypted coordinator public key 
message message start flag changed server 
tv server nv kc incremented nonce easy nodes forge message resulting denial service attack 
server continues receive search requests may ignored error message may anonymously sent requesting peer 
error message nonce exchange similar described limit effectiveness denial service forged error messages 
apfs anonymous peers peer step 
peers start anonymously querying coordinator available servers current session peer server list request peer step 
coordinator responds current list servers 
server server id current tail node provided 
id 
idn tn peer step 
peer sends message known servers announcing user shared content 
includes peer anonymous id idp current tail node tp list files user sharing 
fn 
idp tp 
fn users send message learn new server 
user periodically sends updates file list servers inform server user active 
sending message previously known server file list message omitted changes occurred 
peer step 
anonymous peer anonymously sending queries 
user spread queries different servers avoid poorly connected heavily loaded servers 
multiple queries aid finding files reported subset possible servers 
peer step 
client ready leave session simply send server message stating longer sharing files 
join period user re announce member 
apfs multicast apfs multicast differences unicast version 
protocol added complexity key advantage having central coordinator 
describe differences protocols 
apfs multicast begins initial participant starts session selection multicast address currently ip multicast doesn allow reservations addresses collision applications easily detected cumbersome 
chosen address posted advertised form web pages mailing list irc channel 
advertisement includes base join time frequency join periods gmt 
see loose clock synchronization required 
advertisement optionally signed initial participant integrity 
participants join session subscribing multicast group overtly sending messages periodically multicast address 
clients learn clients waiting long hear sufficient number participants 
server peers send message multicast group coordinator assumption onion routing unicast protocol means tail node multicasts message servers handle queries return query results unicast 
servers quit answering queries sending message multicast group coordinator 
server continues receive search requests message may resent multicast unicast search requests cease 
peer searches operational differences unicast version apfs 
peers learn new servers advertisements multicast group 
overlapping periodic reset perform periodic resets efficiently centralized server propose sessions overlap construction deployment 
session points interest called deploy 
points route building begins session routes old routes cease respectively 
overlap sessions deploy deploy deploy give session creation implementation session follows steps see 
reset step 
time period deploy nodes announce message shown previously 
reset step 
deploy deploy routes determined 
servers need multicast message ensure users know servers new tail node 
peers may request retransmissions timeout 
reset step 
time deploy clients server routes session new session routes 
clients update servers sending message 
client omit file list servers sent date file lists session point normal functioning may resume session preparations session underway 
performance analysis primary cost providing anonymity set clients additional latency data delivery responders additional bandwidth consumed forwarding time build build deploy deploy build build deploy shutdown shutdown overlap session phases 
traffic members 
additional latency querying 
chose study costs data delivery expenses involved maintaining system performing queries costs queries 
rationale decision data delivery expensive operation point studying anonymous query mechanisms data delivery feasible 
results show delivery possible include study costs querying 
simulated protocol hierarchical topology determine protocol compares equivalent overt protocols napster 
evaluated tcp performance apfs generic path protocol similar crowds onion routing 
calculated amount required support peers session 
previous performance studies anonymous protocols considered tcp performance 
reiter rubin calculated amount required participants crowds protocol 
levine shields compared simulation round trip time link utilization crowds onion routing overt connections computed required participants 
syverson report performance results onion routing terms processing overhead 
methodology simulated apfs overt peer peer file transfer ns network simulator 
simulations ran internet topologies generated georgia tech internetwork topology modeler gt itm 
performance analysis focuses overhead introduced directly apfs reason evaluated performance transfers peers 
simulated variety sizes client groups 
size client group simulated different gt itm topologies nodes 
client base limited choose clients edges generated topologies 
edge generated gt itm random latency ms ms randomly selected fashion approximates internet network 
links simulated bandwidth mbs 
routing clients determined ns internal shortest path unicast routing protocol 
startup preselected path peer peer 
simulate generic overt peer peer application path simply initiating peer peer chosen uniformly random 
simulate apfs path peers consisted peers simulating mutually anonymous connections paths length paths length respectively 
peers transfered mb file remote peer tcp reno clients path 
ran total simulations 
group sizes path lengths generated runs simulation simulations different randomly chosen paths peer topologies 
simulated separate loss rate scenarios links geometrically distributed loss processes 
loss rates aggressive appeared link network accumulated 
anonymous protocols traversed links disadvantage simulation environment 
graphs section error bars report confidence intervals 
transfer latency analysis difference latency overt systems apfs 
latencies distributed file sharing system import transfer times files direct bearing interactive usability system 
shows average transfer time mb files initiated simultaneously peer various group sizes path lengths loss links 
note path length zero case equivalent overt protocols napster 
transfer time increases apfs path length 
note increase path length see additional increase 
gather initial increase transfer time increase level anonymity relatively cheaply 
due pipelining tcp connections forward data path clients 
shows experiments constant loss links 
extreme loss greatly delays tcp transfer time affecting transfer time units transfer time files pathlength pathlength pathlength nodes apfs session transfer latency loss links 
transfer time units transfer time files pathlength pathlength pathlength nodes apfs session transfer latency loss links 
anonymous protocols worse overt protocols due additional network links traversed 
resource consumption user decides join apfs session client offers network resources data 
analyzed factors effect amount resources consumed data versus traffic generated users file requests 
shows amount data bytes carried clients session peer transfered exactly mb 
comparison peer file transfer amount traffic carried high 
fortunately amount traffic forwarded clients directly related path length chosen clients number clients session predicted reiter rubin analysis 
clients limit path length chosen nodes deny requests nodes join path control amount perform 
fortunately clients onion routing locally pick routes avoid nodes haven denied route requests 
traffic donated proxies traffic donated proxies 
pathlength pathlength pathlength nodes apfs session percentage data carried connections 
scalability prominent quality performance results figures excellent scalability anonymous protocols terms resulting latency carried traffic 
number clients peers grows simulation apfs protocol perfect scalability respect transfer times resource consumption 
due fact users join session bring data require add proxy count 
effect distributed path structure change transfer time resource consumption 
noted section gnutella anonymous protocol mistaken 
simulate protocol safe conjecture say gnutella scaling properties extremely poor clients join session 
due expensive querying mechanism 
apfs offers true anonymity gnutella napster central serving point 
contributed new techniques providing responder anonymity existing protocols initiator anonymity 
solve important problems providing responder anonymity problem allowing initiators locate contact anonymous responder problem providing anonymity long lived server face anonymous degradation 
apfs untrusted central coordinator multicast routing eliminate problems providing responder anonymity 
apfs uses features peer peer net working solve problem degradation anonymity time servers 
simulations show latencies incurred providing reliable anonymous peer peer communication increase transfer times data apfs suffers high network loss rates protocols 
trade gaining anonymity increase bandwidth consumption scale size session length anonymous paths constructed 
network simulator version 
www isi edu nsnam ns 
open source napster server 
sourceforge net 
gt itm georgia tech internetwork topology models 
www cc gatech edu fac ellen zegura graphs html 
almeroth 
evolution multicast mbone inter domain multicast internet deployment 
ieee network january 
chaum 
dining cryptographers problem unconditional sender untraceability 
journal cryptography 
diot levine lyles 
deployment issues ip multicast service architecture 
ieee network january february 
goldberg wagner 
taz servers rewebber network enabling anonymous publishing world wide web 
monday 
holbrook cain 
source specific multicast ip 
ietf internet draft march 
draft holbrook ssm arch ast txt 
holbrook cheriton 
explicitly requested source specific multicast express support large scale single source applications 
acm sigcomm september 
pfitzmann waidner 
networks user observability design options 
eurocrypt lncs pages 
reed syverson goldschlag 
proxies anonymous routing 
th annual computer security applications conference pages 
ieee december 
reiter rubin 
crowds anonymity web transactions 
acm transactions information system security november 
shields levine 
protocol anonymous communication internet 
proc 
th acm conference computer communication security acm ccs november 
paul syverson goldschlag reed 
anonymous connections onion routing 
th annual symposium security privacy pages 
ieee cs press may 
wright adler levine shields 
analysis degradation anonymous protocols 
technical report april 
university massachusetts amherst 
zegura calvert bhattacharjee 
model internetwork 
proceedings ieee infocom san francisco ca 
zegura calvert 
quantitative comparison graph models internet topology 
ieee acm transactions networking december 
