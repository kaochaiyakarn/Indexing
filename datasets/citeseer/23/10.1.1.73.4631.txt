pairs shortest paths real weights log time timothy chan lambda may describe log time algorithm pairs shortest paths problem directed graph vertices 
slightly improves series previous slightly algorithms fredman takaoka han takaoka zwick 
new algorithm surprisingly simple different previous ones 
pairs shortest paths problem apsp course studied problems algorithm design 
consider general case input weighted directed graph edge weights arbitrary real numbers 
problem compute shortest path distance pair vertices representation shortest paths shortest path vertex pair retrieved time linear length 
classical floyd warshall algorithm solves apsp problem time graph vertices 
fredman realize running time attainable gave algorithm impressive looking time bound log log log 
takaoka refined fredman approach reduced bound log log log log respectively 
just year interesting independent developments occurred han announced improved log log log time algorithm takaoka announced better log log log time algorithm zwick algorithm current record log log log time 
record turns short lived note obtain algorithm improved running time log 
related 
sparse graphs efficient solution apsp apply dijkstra algorithm times described decent algorithm textbook 
fibonacci heap implementation johnson preprocessing step negative weights allowed running time log mn denotes number edges 
long time best result known pettie ramachandran pettie managed bring time bounds mn log ff log log mn undirected directed graphs respectively complicated techniques 
lambda school computer science university waterloo waterloo ontario canada uwaterloo ca 
flurry activities decade concentrated case graphs small integer weights particular unweighted graphs number genuinely algorithms developed known methods matrix multiplication rings 
currently best apsp algorithms undirected directed graphs run time respectively denotes maximum edge weight absolute value 
note running times known matrix multiplication methods help apsp case real weights matter integer weights range ng 
answer affirmative algorithms involve called fast matrix multiplication necessarily attractive practical point view 
feder motwani described log time algorithm avoids fast matrix multiplication algorithm works unweighted undirected graphs 
new algorithm 
confess result represents minute improvement previous slightly algorithms general real weight case mere log log factor speedup previous result zwick 
believe algorithm interesting conceptually simple note length ii markedly different previous approaches approach originated fredman continued takaoka broke barrier relying table lookup tricks storing solutions small sized subproblems array retrieval constant time 
approach avoided explicit table lookups exploiting word ram operations specifically performing bitwise logical operations log bit words unit time 
algorithms han takaoka zwick involved complicated combinations approaches 
example zwick nontrivially combined approach known table lookup technique boolean matrix multiplication resulting algorithm uses table lookups word ram operations 
contrast approach uses table lookups word operations 
fact algorithm readily implementable pointer machine model 
curiously approach geometrically inspired multidimensional divide conquer technique commonly seen computational geometry 
considering long history apsp problem amusing little idea beat previous algorithms arbitrary real weighted dense graphs 
geometric subproblem may appear complete digression problem computational geometry concerning special case line orthogonal range searching similar maxima problem 
problem find dominating pairs red point set blue point set dimensional space red point pd ir blue point qd ir said form dominating pair iff pk qk algorithm lemma standard traditional analysis computational geometry interested case dimension constant 
fair mention algorithms table lookups modified run pointer machines example variants radix sort 
true previous apsp algorithms modification require additional effort 
lemma red blue points ir report dominating pairs time constant gamma 
proof describe simple divide conquer algorithm 

just output pairs red blue points 
compute median th coordinates points fl resp 
fl denote subset points color fl th coordinates resp 

note avoid linear time algorithm pre sort th coordinates 
recursively solve problem red blue red blue projection red blue gamma coordinates 
note avoid projecting points just ignoring th coordinates 
correctness immediate 
excluding output cost running time obeys recurrence td td td gamma td 
additional output cost bounded pair reported 
naively establish induction td log yielding log time algorithm 
result known 
fact known save logarithmic factors handling base cases directly 
offer alternative analysis recurrence better certain non constant values slightly effective application section 
change variable fixing parameter letting max td cn constant single variable recurrence solved standard techniques 
example induction bound gamma follows gamma gamma cn long constant sufficiently large holds setting implying td lemma follows 
note passing variable recurrence recast fit type studied eppstein considering exponential function td 
apsp algorithm ready new apsp algorithm 
previous algorithms employ wellknown reduction apsp computation distance product known min plus product theta matrices matrices result multiplication defined matrix cij mink aik 
algorithm distance product solve apsp problem repeated squaring increase running time logarithmic factor obviously afford apply reduction described text aho section corollary avoids extra logarithmic factor 
sufficient upper bound complexity distance product problem 
emphasize strassen matrix multiplication method relatives applied directly min plus case elements form semi ring 
notational simplicity assume minimum term expression mink aik unique 
general perturbation techniques ensure necessary break ties consistent manner 
note algorithm automatically identify index attaining minimum cij 
property required determine shortest path distance retrieve shortest path 
lemma reveal key connection earlier geometric problem distance products rectangular matrices lemma compute distance product theta matrix theta matrix dc time 
proof outline algorithm simple compute set pairs xk aik aik bk jg set cij aik xk 
obvious observation previous approaches aik aik bk equivalent aik gamma aik bk gamma observation missed previous approaches computing xk fixed corresponds exactly computing dominating pairs dimensional point sets aik gamma ai aik gamma ai aik gamma aid gi gamma gamma gamma gj dimension gamma th coordinates lemma computation takes time lemma follows 
highlight approach 
get algorithm distance product square matrices consequently apsp remains choose appropriate value dimensional parameter theorem compute distance product theta matrices log time 
proof split matrix matrices dimension theta second matrix matrices bn dimension theta compute distance product lemma return element wise minimum matrices dimension theta total time time bound lemma multiplied theorem follows choosing log times sufficiently small constant depending 
example set ss ss ss ln minimize constant factor dominant term 
corollary solve apsp problem log time 
conclude mentioning easy adapt algorithm run pointer machines lemma poses problem linked lists 
lemma pair xk directly set value cij random access forbidden insert pair bucket 
sort bucket value scanning pairs bucket putting index slot collecting slots 
set cij time 
discussion demonstrated slightly time bound general apsp problem real weights obtained cheating ram table lookups word operations algebraic techniques fast matrix multiplication 
taken geometric approach resulting algorithm shares similarities previous algorithms example proof lemma fredman algorithm successors primitive operation weights comparing values difference entries common row column addition algorithm goes index compute set xk index pairs different way course 
series slightly sub cubic upper bounds obtained log looks natural interesting contemplate reached limit far algorithms concerned 
case reducing running time logarithmic factor difficult simpler problem boolean matrix multiplication best known algorithm algebraic techniques runs log time improved decades 
algorithm simple implementation primarily theoretical interest 
preliminary experiments indicate size graph order best choice dimension geometric subproblems 
compared naive cubic method computing distance products log speedup felt input size large cases caching issues important 
interesting theoretical question similar log factor type speedup possible sparse graphs 
example simpler problem computing transitive closure unweighted directed graph yuster zwick asked mn time algorithm mn log time bound easy get word ram 
similar mn running time obtained apsp real weighted graphs 
author progress question case unweighted undirected graphs 
original fredman concerned decision tree complexities nonalgorithmic way solve general apsp problem comparisons sums edge weights led slightly algorithmic result 
remains open problem find improved upper bounds nontrivial lower bounds number comparisons required 
proof assume graph acyclic precompute strongly connected components linear time contract component 
want find set su vertices reachable vertex vertex reverse topological order compute su union sv vertices incident set union operations carried log time representing set log word vector bitwise operation 

reviewer bringing attention 
supported nserc 
aho hopcroft ullman 
design analysis computer algorithms 
addison wesley reading ma 
alon galil margalit 
exponent pairs shortest path problem 
comput 
sys 
sci 
dinic 
economical construction transitive closure directed graph 
soviet math 
dokl 
buchsbaum kaplan rogers westbrook 
linear time pointer machine algorithms common ancestors mst verification dominators 
proc 
th acm sympos 
theory comput pages 
coppersmith winograd 
matrix multiplication arithmetic progressions 
symbolic comput 
cormen leiserson rivest stein 
algorithms 
mcgraw hill nd ed 

efficient algorithm min plus multiplication 
int 
computer math 
eppstein 
analysis backtracking algorithms 
proc 
th acm siam sympos 
discrete algorithms pages 
feder motwani 
clique partitions graph compression speeding algorithms 
comput 
sys 
sci 
fredman 
new bounds complexity shortest path problem 
siam comput 
galil margalit 
pairs shortest paths graphs small integer length edges 
comput 
sys 
sci 
han 
improved algorithm pairs shortest paths 
inform 
process 
lett 
pettie 
new approach pairs shortest paths real weighted graphs 
theoret 
comput 
sci 
pettie ramachandran 
shortest path algorithm real weighted undirected graphs 
siam comput appear 
preparata shamos 
computational geometry 
springer verlag new york 
seidel 
pairs shortest path problem unweighted undirected graphs 
comput 
sys 
sci 
zwick 
pairs shortest paths undirected graphs integer weights 
proc 
th ieee sympos 

comput 
sci pages 
strassen 
gaussian elimination optimal 
numerische mathematik 
takaoka 
new upper bound complexity pairs shortest path problem 
inform 
process 
lett 
takaoka 
faster algorithm pairs shortest path problem application 
proc 
th int 
conf 
comput 
comb lect 
notes comput 
sci vol 
springer verlag pages 
yuster zwick 
fast sparse matrix multiplication 
proc 
th european sympos 
algorithms lect 
notes comput 
sci vol 
springer verlag pages 
zwick 
pairs shortest paths bridging sets rectangular matrix multiplication 
acm 
zwick 
slightly improved sub cubic algorithm pairs shortest paths problem real edge lengths 
proc 
th int 
sympos 
algorithms computation lect 
notes comput 
sci vol 
springer verlag pages 

