thomas 
modelling analysing user views telecommunications services 
dini logrippo eds 
proceedings ieee fourth international workshop feature interactions networks distributed systems june pages pp 
montreal 
eprints gla ac uk archive glasgow eprints service eprints gla ac uk modelling analysing user views telecommunications services mu thomas department computing science university glasgow user views calls modelled behaviour trees synchronised form network users 
high level presentations models process algebra explicit theory features including precedences 
precedences abstractly encapsulate possible state spaces result di erent combinations features 
high level presentation supports incremental development features testing experimentation animation 
interactions detected experimentation phase may static analysis high level presentation dynamic analysis underlying low level transition system veri cation temporal properties model checking 
case interactions resolved manipulation feature precedences 
keywords formal speci cation modelling analysis reasoning techniques feature interaction detection resolution 
telecommunications services increasingly pervasive important services deliver expected behaviour 
hand service providers develop services software market encourages multiple providers potential interactions interworking inconsistencies services grows 
detection resolution interactions known feature interactions focus research telecommunications telephony systems past years see 
develop line analysis resolution techniques focussing interactions users viewpoints results inform line hybrid techniques 
describe approach speci cation modelling allows systematic detection resolution certain classes feature interactions 
approach involves specifying properties temporal logic modelling calls behaviour trees 
model re ects aspects operational world implementation software mainly re ects high level task analysis users viewpoints 
provides testbed studying phenomena developing supported bt laboratories fellowship features concrete model satisfaction properties veri ed 
explicit model avoids frame problem particularly acute distributed systems 
analysis uncover resolve predictable interactions encapsulated speci properties unpredicted ones systematic analysis model 
state spaces involved enormous number features users employ high level presentation message passing process algebra 
possibly unique presentation explicit theory features guides generation trees 
features static dynamic entities call modes theory includes precedences complex functions depend call states 
ect incorporated form negotiation features expected precedences particular combinations calls respective states 
choice alternative behaviours feature context respective actions ered 
model certain classes interactions manifest additional unexpected non determinism detected resolved manipulating feature precedence relations 
section brie describe background context feature interaction problems 
overview approach sections 
details user processes feature theories section modelling entire system particular scenarios discussed section 
analysis techniques results discussed section conclude section 
background features telecommunications service said interact changes functionality see categorisation feature interactions 
complexity feature interaction problem unfolded clear arise invalid assumptions features services network environment phases software development 
need specifying designing services rigorously universally recognised 
scale speed system evolution strongly motivates automated analysis tools 
avariety formal description techniques system models properties including nite state machines extensions sdl promela labelled transition systems process algebras lotos state notations object classical temporal non monotonic logics 
formal approach stated descriptions features network properties expect combination operator 
interaction 
words expect behaviour feature preserved presence feature 
problems approach 
quali ed carefully 
failure satisfy meta property necessarily indicate undesirable interaction features necessarily alter override aspects features network calls terminated callers call waiting alters properties busy state 
second de nition operator usually left unde ned raising questions formal notation 
velthuijsen raises important concerns possible nature operator particular notes need incorporate aspects non monotonic nature network extensions 
model behaviour operator explicit 
model high level model motivated need design features independently reuse existing behaviour possible 
example feature ects originating call behaviour designing feature rede ne terminating behaviour context feature 
model developed naturally expressed high level message passing process algebra expressive data theories guarded processes 
lotos adopted presentation language 
language drawbacks supported toolsets lola topo toolset simulation property checking caesar toolset model checking 
overview telephony system may regarded distributed system primary components user processes 
salient aspects user view system internal state active features possibly state active features users 
incorporate awareness global state 
level model consists user processes network manager 
network manager process receive transmit information users users 
current model designed speci cally party calls extended multi party calls 
model reasonably chosen identify lines users numbers 
regard particular model prototype designed realistic demonstrate utility approach 
user processes move various internal states engaging actions state 
concurrency system modelled synchronisation actions required synchronise 
entire system consists user process es network process parallel synchronising particular actions shown 
synchronisation typically required user processes connection established user network manager receive transmit information user state 
actions unobservable system level 
helpful describing model distinguish kinds actions user initiated actions handset replace handset dial anumber er speech actions represent physical actions initiated user may involve synchronisation user 
synchronising actions users 
form action 
network initiated actions busy tone line unobtainable 
events typically experienced user initiated user consequence global state network 
important note single physical action may representations model context action takes place determines representation 
example user replacing handset order disconnect line user originating caller represented user initiated synchronising action disconnect user replacing handset operator denotes synchronisation actions list network mgr user user user user user system model unobservable actions observable actions line disconnected user terminating party represented action 
example transition system basic call behaviour 
user initiated actions times font network initiated actions courier font 
synchronising actions id refers user process identi cation pid refers partner process identi cation synchronisations basic call behaviour users 
example disconnect pid id denotes action disconnecting call partner user user user terminating party call partner originating party 
modelling static dynamic aspects features high level presentation allows state abstraction way 
user process deemed operating set modes mode determines set possible behaviours state 
mode abstraction active feature determine possible transitions actions state 
example basic call behaviour considered mode 
modes explicitly assume ered user process basic call mode 
model set features user process subscribes may active called service 
user process parameterised modes service current call partner party party calls 
modes dynamic service static 
important note mode necessarily mean feature uences current behaviour exactly correspond active feature may ect behaviour 
typically initial idle state modes user process service features potentially active 
modes evolve asthe call evolves usually reverting back service termination call 
evolution modes call allows features built incrementally reusing previously speci ed behaviour 
example user process sort diversion mode divert busy divert reply evolves process basic call mode originator call 
designing new features new user states added new behaviour required 
words modes allow abstractly group states super states 
example basic call calling state divert busy calling state divert state encapsulated calling super state 
features discrete ordered partial orderings 
orderings explicit potential interactions may resolved allow experimentation di erent orderings 
types ordering intra user orderings inter user orderings disconnect pid id pid id disconnect pid id disconnect id pid disconnect id ped connect pid id connect id pid idle calling id pid dial basic call terminating party originating party depend state user processes involved 
de ne priorities features user 
example user behaving divert mode divert busy mode intra user ordering idle state may determine feature precedence user called 
course relations need total model may deterministic 
de ne priorities features involving di erent users behaviour user may determined users state modes services 
means information user modes services state received transmitted process 
return feature precedences mode evolution section section give user process 
user processes feature designed separately sub process structure user process choice logical disjunction processes associated features shown gure 
lotos operator choice 
essentially feature sub process ers number alternative actions depending user current state mode possibly mode state partner 
alternative appropriate predicates 
basic call divert divert busy divert reply user process call waiting call barring de ned data theories states modes 
include state predicates idle user idle state mode predicates user basic call mode 
choice operator employed combining alternatives feature behaviour combining features 
user process parameterised current state current modes current partner collected explicitly data type sort interest user 
ignoring formal actual events process declarations calls assuming unary functions sort user alter state modes process form process call user action call action call simplicity observable action followed recursive call general complex sequences choices involving unobservable actions ered 
example process corresponding basic plain old telephony behaviour user 
idle status write id busy call user id mode partner connect partner id id call user id mode partner dial id call user id calling mode call user id mode partner call user id idle mode partner idle calling user constructor sort user rst operand user second operand state calling third operand mode nal operand partner 
id mode partner just selectors 
note mode user change basic call 
simple example mode change illustrated diversion feature 
feature originating call idle state evolve call state basic call mode 
example assuming replaces divert mode basic call mode divert feature 
dal dnr bc states cw state idle cw current speech state feature precedences user 
idle call user id partner designing feature important specify new behaviour arises user originating party aswell terminating party cover possible reachable state mode combinations 
typically needs consider reachable idle state 
means agiven new feature mode may need consider consequences satisfying new guards associated mode new consequences existing guards user 
idle idle non determinism arises unguarded choices idle state basic call mode subtly overlapping guards 
state predicates disjoint idle call may mode see mode predicates may overlap 
mode evolution precedences lotos model modes represented concretely sets feature constants denotes particular operational feature 
mode predicates refer simply presence absence feature constant set true feature maximal intra user feature precedence respect state process 
rich theory features allows model quite subtle feature behaviour particular behaviour respect 
mode evolves call corresponding feature constant replaced feature set 
common mode evolution basic call bc 
example assume user divert mode dal initiates call mode evolves bc diversion active user called 
user behaving divert dal divert busy basic call mode modes bcg 
user ordering calling state dal maximal mode dal 
user initiates call modes evolve bcg maximal new mode 
note reasonable speci cation feature stipulate evolves bc user initiates call 
shows portion example precedence 
divert precedence divert busy divert reply dnr 
call waiting cw precedence divert busy idle state precedence reversed current speech state speech state call waiting see section description 
means going party call rst incoming call activate call waiting alert signal second incoming call diverted user 
feature precedences sensible er call waiting diversion service 
feature precedences crucial indirectly control behaviour call processes 
user state feature list mode predicates true may undesirable source non determinism feature interaction 
system system de ned parallel synchronised composition instantiated user call processes appropriately instantiated network process 
synchronisation pairwise user processes actions share users network 
single user single component multiple user multiple component scenarios modelled instantiating appropriate user processes 
user process instantiated providing actual user renaming observable actions 
actions generic process dial renamed appropriately dial user dial user 
network manager process provides access external view user 
ering read write information externally observable states modes calls unobservable structured event status call process synchronise 
example features high level model currently consists lines lotos includes avariety features divert calls subscriber diverted user 
divert busy calls subscriber diverted user user idle 
divert reply calls subscriber diverted user pre determined number unanswered rings 
dial barring subscriber permitted call numbers barred list dialling directly preclude connection user user barred list may possible diversion user 
call barring subscriber permitted connected users barred list precludes connection user user barred list diversion user 
call waiting subscriber set toggle calls 
feature signi cantly complex transition system synchronising actions 
feature subtle scope give behaviour 
british telecom call waiting described 
new behaviour included results user call waiting mode users basic call mode participating call waiting call 
simplicity initiated events included 
informally rst call established second caller attempts connect subscriber special alert tone issued subscriber second caller second incoming call received 
subscriber may respond depressing buttons 
rejects second call disables special alerts termination rst call 
disconnects rst call connects second call possibility re connecting rst call puts rst call hold connects second call 
case subsequent actions allow subscriber toggle calls subsequent action disconnects current connects holding call 
subscriber disconnected current call subscriber rung back subsequently connected holding call 
informal description subscribing user may ect partners call current active partner partner hold 
model retain notion partner user state refer partner formal parameter pid parameterise subscriber call waiting speech state holding partner refer holding partner formal parameter hid 
subscribing user know active holding partner active holding partners know partners subscriber 
diagram id denote user events way way level synchronisation indicated number data ers 
case way synchronisations convention subscriber rst followed active partner followed holding partner 
example imagine user speech originator cw mode user bc mode 
user user 
user bc mode say attempts call user user state calling er event alert event previously ered part basic call 
user er alert move state cw sub speech user er alert move state current speech 
synchronise alert ongoing call user receives alert incoming call user 
mode partners user process represented graphical representation 
overcome structured events require substituting swapping data ers annotation denote denote 
event user mode bc denoted action mode bc 
reduce number arrows transitions multiple labels separated comma choice single multiple label signi cance dictated layout 
interaction analysis relationships properties high level presentation low level model kinds interaction analysis performed summarised 
include analysis logical properties analysis properties respect particular model analysis high level low level presentations model generic properties testing symbolic simulation 
solid arrows indicate inputs kind analysis dashed arrows indicate feedback features theory may result 
logical properties formalise application speci mainly temporal calling alert id pid id pid id pid id pid id alert pid id current alert pid id speech disconnect pid id alert id pid alert pid id pid id pid id disconnect pid id idle id hid disconnect pid id id pid hid disconnect id hid id hid mode bc id pid hid disconnect id pid speech alert id pid call waiting properties user rings user user engaged user call forwarding user user connected user 
interaction analysis context involves checking conjoined properties consistency satis ability su cient completeness desire complete axiomatisations 
consistency intuitive concept interactions captured inconsistent requirements 
note automating proofs meta theoretic properties di cult pursued 
analysis low level model involves checking generic properties deadlock livelock reachability unexpected non determinism 
techniques may indicate undesirable interactions known protocol analysis 
early crucial form analysis run simulations tests system variety scenarios permutations users services 
lola lotos laboratory tool madrid extensively animation tests validation properties testing 
value tests discovered numerous small errors way 
con dence model gained moved property checking static analysis described detail 
model checking temporal properties number logics appropriate expressing temporal properties modal calculus natural supported caesar model checking evaluator 
brie logic includes usual propositional connectives modal operators 
hki expressing existential quanti cation universal quanti cation respectively properties consistency satisfiability suff 
completeness lotos presentation model property checking network theory features static analysis interaction analysis denotes non determinism deadlock checking model 
symbolic simulation operators denoting greatest xed point operators respectively 
example consider temporal property associated basic call user calls issued 
express property respect particular user hoff quickly shows formula satis ed scenario user idle state basic call mode 
consider case user idle state divert mode user diversion 
case formula fails satis ed property invalid presence feature 
course desirable interaction 
closer examination failure witness transition system point failure lead insights event possible 
order nd event possible try satisfy formula hoff ih denotes wildcard action 
property satis ed witness transition system matching wildcard event connect example global property case lift handset replace 
expressed xed point property hon false 
property proved single call process consideration states transitions hours elapsed time 
clearly indicates model checking caesar environment cient transition system respect weak bisimulation system generated 
initial experience toolkit promising scale requirements prototype model new release toolkit may overcome obstacles near 
alternative direction may compile lotos language promela large scale model checker spin 
static analysis model analysis concept interaction non determinism 
course de nition non determinism distributed nature system call process unexpected non determinism may indicate feature interaction 
overlapping guards observable event ered call process guarded overlap may may introduce non determinism 
analysis overlapping guards consists nding solutions conjunctions guards uni cation narrowing considering consequences generated solutions 
expect nd solutions pairs guards basic call process 
example user state idle holds 
consider possible overlap basic call divert processes 
example basic call process originating call basic call mode calling state ers depend status dialled party idle busy unobtainable 
possibilities expressed calling minimised transition system respect weak bisimulation insert unobservable actions hii corresponding hidden status events 
strictly speaking lotos allow structured events events data ers unstructured events actual model connect 
unfortunate restriction overcome version lotos 
status readwrite partner idle busy bc ser ist status read partner busy bc ser ist status read partner bc ser ist divert feature ers possible behaviour originating call basic call mode calling state 
dialled number divert service call diverted 
possibility expressed calling 
status read partner dal ser ist id guards fact identical consider overlaps subsequent guarded events 
status event synchronise network process consider process er status read partner busy bc ser ist status read partner dba ser ist 
inspection network process reveals ers mode mode 
status read id state dba service diversion mode 
status read id state bc service diversion dal feature precedence bc states possible solution satisfy guards 
consequently new nondeterminism interaction point 
static analysis prototype model uncover previously unknown interactions features considered 
surprising taken care feature precedences 
uncover interactions result incorrect implementations features call barring network manager 
interestingly errors discovered animation property checking value kind analysis con rmed 
discussion high level presentation higher level features orderings features rst class concepts modelling principle sources di culty con icts features explicit possible 
helped achieve goals avoiding replication behaviour descriptions developing new features capturing certain kinds interactions logical inconsistencies non determinism model 
analysis overlapping guards new idea interaction analysis technique context lotos model appear novel 
furthermore feature theories allow experiment feature precedences design away classes interactions 
course speci cation theories may hide potential interactions 
call non monotonic extensions network behaviour addressed employing lotos operator choice operator monotonic respect testing relation red red responds tests way responds converse necessarily hold 
note authors employ lotos modelling processes guarded choice model aspects refer policy feature behaviour 
case predicates simply model subscription feature 
interactions explicitly addressed interesting note similar modelling approaches developed independently 
high level presentation may provide underpinning informal graphical notation service creation environment 
provide common notation linking service creation environment low level model prompting developer consider appropriate states synchronisations 
properties provide starting point natural language descriptions features service currently incomplete ambiguous 
experience high level presentations variety feature theories may inform development line resolution techniques 
particular feature precedences action sequences detected run time 
approach may necessary interfacing undocumented legacy systems 
consequences interworking inconsistencies feature interactions simply expressed sources notoriously di cult de ne resolve 
formal models may help get handle complex problems involved 
described level modelling approach properties lo tos description transition system 
approach allows systematic detection resolution certain classes feature interactions 
tried nd level abstraction re ects aspects implementations high level task analysis users viewpoints 
formal approaches uncover resolve predictable interactions encapsulated speci temporal properties analysis lower level model 
case automated prototyping model checking 
interesting uncover interactions systematic static analysis high level presentation model 
interactions resolved designed away rede nition feature precedences 
issue class interactions detected resolved way 
process algebra data theories provided right abstractions high level presentation may necessary order employ ective model checking employ level process description language 
conjecture needs con rmed experimentation 
supported bt laboratories 
particularly ben tim regan richard help valuable advice probing questions 
advanced personal network services product breakdown 
british telecom laboratories 

alfred gri th 
feature interactions global information infrastructure 
proceedings rd acm sigsoft symp 
foundations software engineering software engineering notes vol 
oct 
combes 
formalisation user view network services feature interaction detection 

proceedings international workshop feature interactions telecommunications systems ii st petersburg ieee communications society 
bouma velthuijsen eds 
feature interactions telecommunications systems ii 
proceedings international workshop amsterdam ios press 
cheng ohta eds 
feature interactions telecommunications systems iii 
tokyo ios press 
cameron gri eth lin velthuijsen 
feature interaction benchmark 

logrippo 
structural modals specifying telephone systems 
appear computer networks isdn systems 
caesar toolkit 
available hubert imag fr 
hennessy milner 
algebraic laws nondeterminism concurrency 
journal association computing machinery 
information processing systems open systems interconnection lotos description technique temporal ordering observational behaviour 
international organisation standardisation 

lin 
lin 
building block approach detecting resolving feature interactions 
holzmann 
design validation protocols tutorial 
computer networks isdn systems pp 

fernandez 
transforming lotos speci cation lola parameterised expansion 
turner editor formal description techniques elsevier science publishers 
north holland 
lola 
lola user manual 
dpt 
de univ de madrid 
stirling 
modal temporal logics ccs 
moller editor logics concurrency structure 
ban higher order workshop 
ban alberta canada 
velthuijsen 
issues non interaction detection 


