international journal information technology volume number issn compression semistructured documents leo jan lansky michal search engine indexes web allows search web documents 
hit list contains url title hits snippet tries shortly show match 
snippet assembled algorithm full knowledge original document html page 
implies search engine required store full text documents part index 
requirement leads pick appropriate compression algorithm reduce space demand 
solutions common compression methods instance gzip bzip preferable develop new method take advantage document structure textual character documents 
exist special compression text algorithms methods compression xml documents 
aim integration approaches achieve optimal level compression ratio 
keywords compression search engine html xml 
motivation full text search engine written entirely java 
platform chosen beneficial attributes portability simplified code management fast linking modules rd parties 
issue discussed related development proper compression algorithm respect amount data processed entire system 
problem discussed context inverted index compressed 
focused improvement database original documents 
database called meta data database context engine plays important role process snippets generation 
major consumer disk space system 
better explain motivation brief system performance 
second generation system consists web robot indexing search modules 
robot able crawl web speed pages second 
indexer throughput pages second searcher limited disk bus capacity 
obviously performance values influenced average length documents structure web hardware capacity values measured dedicated server amd opteron 
snippets generated algorithms common factor knowledge original document structure user query 
system finds hits bit identifiers retrieves textual contents supported projects intelligent models algorithms methods tools semantic web realisation methods intelligent systems applications data mining natural language processing program information society thematic program ii national research program czech republic 
inverted lists meta data robot new chunks indexer merger ids fig 

architecture hit list inverted lists meta data live index snippets database original documents 
prepares adequate snippets final hit list 
common process described 
base version system implemented compression algorithm database top existing gzip method 
question compression suitable html documents adequate substitution base similar compression methods 
aim develop method gives better similar compression ratio better decompression time gzip 
hand compression time need fast gzip 
organized follows 
brief compression 
discuss textual methods methods suitable xml compression 
novel method html xml documents introduced 
experiments list open problems 
ii 
compression web full text system gathers lot documents html pages 
number pages estimated billions average size kb 
capacity issue solved compression typical way reduction data size 
successful compression method take advantage knowledge input message structure 
document database contains html documents idea benefit html tree structure 
obviously forget html features pick compression methods gzip bzip running textual representation input documents 
compression level suboptimal common case 
solution chosen simplicity existing system 
words syllables basic compression units compression algorithms 
way compression html documents 
existing methods xml compression instance thought ijit volume number issn org international journal information technology volume number issn effective method xml data 
sort algorithms effective coding xml tags structure 
unfortunately html standard strict xml tag structure harder 
real html documents need formed 
fix input html documents formed xml extend original xml compression methods support documents formed 
original xml solution tries separate processes 
encodes tags attributes structure second encodes cdata content common compression method 
improvement achieved different compression method second process 
presents similar approach extension html documents 
iii 
compression methods text text compression derive benefit views textual content content seen stream syllables words 
word methods older implementations classical methods exist instance huffman coding lzw burrows wheeler transformation ppm arithmetic coding 
syllable methods young initial implementations huffman coding lzw 
port classical character methods syllable word easy 
transformation heavily influences inner data structures able undefined high number syllables words original alphabet characters 
large input alphabet syllables words requests encoder export elements alphabet decoder 
issue solved exporting alphabet part encoded document 
confrontation comparison word syllable methods depends language input document 
languages simple morphology english better compressed word algorithms 
hand languages complex morphology czech german compressed better syllable methods 
word methods word methods require divide input document stream words non words 
words usually defined longest alphanumeric strings text non words remaining fragments 
previous definition words non words implies assume elements groups alternated regularly 
heuristic word followed special non word space 
skip space encoding 
right decompression guaranteed ensure successive words interleaved space decoder 
practice words length limited constant value 
longer words broken resulting parts interleaved special empty word opposite type word versus non word 
example long word divided parts parts interleaved empty non word 
syllable methods syllable methods decompose input document words words decomposed final stream syllables 
word compression recognizes types words syllable compression performs better effective grouping 
words containing lower letters denoted lower river 
words containing upper letters upper msft 
words starting letter upper having letters lower mixed john 
word contains digits word classified number 
non alphanumeric words form catch group special 
words groups named letter words groups denoted non letter words 
input textual document decomposed words greedy algorithm 
words decomposed syllables 
process need unambiguous 
case satisfied approximation significant impact final compression ratio 
algorithms able decompose words syllables 
briefly algorithms need know linguistic rules processed language 
fact need recognize vowels consonants correctly 
algorithms common start phase 
words declared syllables divided 
letter words vowels consonants recognized 
longest strings vowels 
string block maximum length letters possible extend contiguous vowel 
blocks cores final syllables 
consonants block assigned block consonants block assigned block 
algorithms differ step assigning remaining consonants existing blocks left right 
universal left algorithm assigns consonants left previous block vowels 
similarly universal right algorithm pur assigns consonants right block 
universal middle right algorithm assigns half consonants respective adjacent block number consonants 
number odd right block gets consonant 
universal middle left algorithm antipodal prefers assign consonant left block 
exception exists just consonant assigned right block 
ensures word endings formed single blocks vowels handicap algorithm 
example table algorithms hyphen word czech word 
blocks vowels ou order 
ijit volume number issn org table hyphenation czech word algorithm syllables correct hyphenation od str en ou pur ods tr od str example presents surprising fact recognition vowels consonants simple languages 
basic vowels obvious letters called basic consonants 
context language cause basic vowels may start play role consonants vice versa 
instance czech sounds playing usually role consonants play role vowels adjacent sounds consonants 
english similar ambiguity holds letter represent vowel dirty consonant yellow 
anyway small imprecisions division words syllables spoil compression ratio 
syllable methods fact text consists sentences described rules sentence starts mixed word letter upper lower ends special word containing dot 
lower special words alternated regularly 
sentence starts upper word upper special words alternated 
model hyphenation process 
word different number syllables may cause issue 
lower word followed special word lower syllable followed lower syllable obviously special syllable 
observation helps define model able predict type syllable 
details 
iv 
xml structure compression algorithms compressing xml data 
available xmill 
successors similar principles 
algorithms add new features xpress able query compressed data structure cost worse compression ratio 
xmill international journal information technology volume number issn xmill algorithm principles structure separation structure includes tags attributes ordering 
sequence fields textual content tags values attributes rated data 
data grouping data values grouped containers sense groups compressed separately 
instance container formed input xml file sax parser path processor structure container data container data container data container gzip gzip gzip gzip compressed xml file fig 

data flow xmill content name tags second container formed content phone tags 
separate compression containers container processed different compression method 
data flow xmill method described 
input document processed sax parser forwards sax events path processor 
processor separates structure data groups data containers 
special container processes structure document 
data stream format tag content replaced number container processes tag tag names attributes replaced vocabulary tags attributes 
content containers compressed gzip resulting stream saved final output 
xml compressor prediction partial match ppm encoding 
proposes technique called multiplexed hierarchical modeling mhm employs basic ideas multiplexing text compression models xml syntactic structure injecting hierarchical element structure symbols multiplexed models 
input xml document converted stream sax events 
element start tags tags attribute names dictionary encoded sent corresponding ppm models running predictions encodings 
uses compression models element attribute name model sym element structure model elt attribute values model att string value model char 
illustrate operation consider xml fragment elt att abcd xyz elt 
assuming tag elt seen represented byte attribute name att available byte attribute name 
att char models injects enclosing token index nn order retain cross model dependencies tokens different contexts 
nn token indicates particular token seen token indexes explicitly encoded models 
able achieve better compression ratio default mode xmill 
ijit volume number issn org contribution section presents older methods test joint methods xml structure compression methods 
proposal methods try combine compression xml structure text 
method modification xmill algorithm 
structure container compressed gzip method uses syllable compression methods original gzip 
second method tries modify existing syllable methods tags 
sax parser sends sax events structure coder 
coder uses separate dictionaries tags attributes encoding replaces tag attribute names respective dictionary 
output stream processed data container 
data container dictionaries encoded 
methods syllable methods roots differ 
classic dictionary lzw algorithm inspired uses principle different syllables 
international journal information technology volume number issn new method burrows wheeler transformation 
burrows wheeler transformation chosen success bzip compression 
method consists steps replacement tag names division words syllables dictionary encoding burrows wheeler transformation move front transformation mtf run length encoding null sequences rle canonical huffman 
steps described examples 
replacement tag names sax parser produces sequence sax events processed structure coder 
coder builds separate dictionaries elements attributes encoding 
processed element attribute corresponding dictionary substituted assigned identifier 
element dictionary substituted lowest available identifier put proper dictionary 
name element attribute written output just new identifier 
ensures dictionaries need coded explicitly reconstructed extraction processed part 
example suppose input note importance high money note note importance low money note dictionaries look element dictionary attribute dictionary ea tag importance note empty output high ea money ea low ea money ea 
division words syllables output previous step divided words syllables described section iii 
coder creates dictionary basic units syllables words 
phase coder creates syllable word dictionary 
processed basic unit dictionary substituted code identifier 
added dictionary assigned unique identifier occurrences code replaced identifier 
resulting stream denoted stream 
part outputs stream dictionary basic units 
dictionary encoded necessary document reconstruction 
example continue previous example syllables dictionary associations high mo ney low 
stream ea ea ea ea 
dictionary encoding previous step generates dictionary words syllables text 
effective dictionary compression methods td 
method encodes dictionary represented trie separate items stored inside 
trie compression dictionary td coding trie representing dictionary 
node trie attributes represents boolean value stating node represents string count number sons son array sons extension symbol extension son 
latest implementation td algorithm employs recursive procedure traverses trie depth search dfs method 
encoding dictionary call procedure root trie representing dictionary 
example 
example dictionary contains strings acm ac 
procedure code number sons distances extensions sons 
nonleaf nodes bit encode node represents dictionary item syllable word 
leafs represent dictionary items necessary code 
differences extensions sons distances ord function values extending characters 
coding number sons distances gamma delta elias codes 
tested elias codes best results achieved gamma delta codes 
number sons distances reach value standard versions gamma delta codes start means codings support value 
slight modifications elias gamma delta codes gamma gamma delta delta 
ord function reorder symbols alphabet ijit volume number issn org international journal information technology volume number issn node encode number sons output count count return node string 
represents output output previous symbol previous iterate encode sons node count count encode distances sons distance ord son extension previous output distance call procedure son son previous ord son extension fig 

procedure ically symbols types occurrence frequencies typical language 
distances sons smaller usual coding ascii represented shorter elias delta codes 
representing codes 
example symbols reserved lower case letters upper case letters digits symbols 
additional improvement knowledge syllable type determined letters syllable string begins lower case letter lower word lower syllable letters lower case 
trie son node representing lower case letter lower case letter 
similar situation comes words 
string begins upper case letter examine second symbol recognize type string mixed upper 
example know sons nodes lower case letters 
ordering described function ord symbol type interval potential order 
function returns type symbols lowest order available symbol type 
moment recognise syllable type son node decrease distance virtual left brother value function 
case left brother node imaginary knowing syllable type value diminish distance increasing value syllable type acquaintance 
node labelled describe coding procedure works 
node encode number sons 
node sons write gamma 
state represented word string part dictionary writing bit 
value son encoded distance value zero delta 
subtrie node encoded recursive call encoding procedure fig 

example dictionary td son actual node 
burrows wheeler transformation step want transform stream better stream 
better stream achieves better compression ratio 
obviously transformation reversible lose information 
specifically achieve partial grouping input characters 
process requires sort permutations step input 
suppose sorted matrix input permutations 
transformation output composed column matrix column index input matrix 
example output ea ea index 
move front transformation output stream transformed transformation step mtf 
step translates text strings sequence numbers 
suppose numbered list alphabet elements 
mtf reads input elements writes list order 
soon element processed moved front list 
example starting alphabet ea string ea ea alphabet ea output 
run length encoding null sequences mft step may generate long sequences zeroes null sequences 
successive step rle shrinks null sequences replaces special symbol represents null sequence length 
output stream numbers special symbols 
unfortunately example show proper rle 
alter problem replace string 
canonical huffman rle step stream encoded canonical huffman code 
huffman coding assigning shorter codes characters occur frequently characters frequent appearance 
example assigned codes 
output 
ijit volume number issn org international journal information technology volume number issn ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea table ii results compression files english pages method compressed ratio kb gzip kb bzip kb kb words kb syllables kb vi 
experiments discusses methods html pages compression 
section presents respective experiments input robot files 
files size mb contains html pages retrieved ac uk domain 
html pages fixed repaired comply wellformed xml format 
summary results average file table ii 
column table specifies method column presents size original file compression column shows compression ratio achieved 
seen absolute winner ratio 
implies original file occupies tenth original size 
output needs space compared bzip gzip 
syllable methods worse case language simple morphology english slightly better core 
suppose better result languages rich morphology may simply prefer syllable method 
factor important time compression 
fastest program gzip seconds file 
bzip runs slower needs seconds 
ends seconds 
program available beta version fully optimized speed 
obviously fig 

example slowest tested algorithms run needs seconds suppose seconds full optimization 
hand unoptimized achieves decompression time seconds 
result primary beta version search engine 
results show existing gzip suitable 
gzip fastest achieves worst compression ratio test group 
unfortunately method best compression ratio ready go live earth needs significant optimization 
vii 
open problems methods xml structure compression require formed input documents 
unfortunately requirement html documents web documents tags incorrectly tags attribute name twice 
needed modify existing xml structure compression method support bad formed documents cost lowering compression ratio 
text compression methods especially syllable able take advantage language specification headers html meta data block 
practice specification false cover situation document contained paragraphs sentences different languages 
hand html standard positive aspect uses limited set tags attributes names 
aspect may improve efficiency compression process 
negative aspect html seen support scripting languages 
scripts structure natural language textual compression methods achieve best results 
presently robot stores html pages single file 
reasons rooted robot optimizations 
unfortunately implies easily access single documents decompression documents file 
plan compress ijit volume number issn org international journal information technology volume number issn single documents final file contain documents compressed separately 
ease access single documents 
solution may utilize methods effectively 
viii 
full text search engine collects stores huge number documents html format 
practical reasons documents compressed obviously 
discussed selection suitable compression method utilize semantics structure html documents 
guess method best chance achieve optimal level compression ratio 
branches compression algorithms discussed textual special xml mix previous 
branch represented novel algorithm combines textual method method xml structure compression 
words source alphabet symbols ppm 
data compression conference ieee cs press los alamitos ca usa 
move front inversion coding 
data compression conference ieee cs press los alamitos ca usa 
burrows wheeler block sorting data compression algorithm 
technical report digital equipment palo alto ca 
word compression methods large text documents 
data compression conference ieee cs press los alamitos ca usa 
elias universal codeword sets representation integers 
ieee trans 
information theory vol 

gzip program documentation 
source code ftp prep ai mit edu pub gnu gzip tar ir systems 
krzysztof eds proc 
int 
iis poland 
asc springer isbn 

www org cheney compressing xml multiplexed hierarchical ppm models 
data compression conference ieee cs press los alamitos ca usa 
lansky syllable compression xml documents 
proceedings annual international workshop databases texts specifications objects 
ceur ws vol 
moffat word block sorting text compression 
proc 
th australasian computer science conference gold coast australia lansky compression dictionary 
proceedings annual international workshop databases texts specifications objects 
ceur ws vol 
lansky compression small text files syllables 
data compression conference ieee cs press los alamitos ca usa 
lansky text compression syllables 
proceedings annual international workshop databases texts specifications objects 
ceur ws vol 
suciu xmill efficient compressor xml data 
proc 
acm sigmod conference sax simple api xml 
www 
org min park chung xpress compression xml data 
sigmod san diego ca usa moffat neal witten arithmetic coding revisited 
acm transactions information systems neill lavoie bennett trends evolution public web 
lib magazine seward bzip official home page 
sources redhat com bzip query friendly xml compressor 
proc 
ieee international conference data engineering 
moffat housekeeping prefix coding 
ieee transaction communications 
welch technique high performance data compression 
ieee computer 
witten moffat bell managing gigabytes compressing indexing documents images 
van nostrand reinhold 
world wide web extensive markup language xml 
www org xml world wide web hypertext markup language html 
www org markup leo senior assistant professor charles university prague 
head developer fulltext system 
interests include web search engines related technologies 
previously worked various commercial companies built business sites 
jan lansky ph student charles university prague 
studies syllable compression compression vocabularies 
td implemented 
michal ph student charles university prague 
author coauthor scientific publications approaching different areas software engineering parsing data compression data structures experts education 
got msc 
software system charles university 
defended master thesis syllable compression xml 
contributed programming skills convert database formed xml 
version algorithms designed implemented 
implemented steps 
ijit volume number issn org 
