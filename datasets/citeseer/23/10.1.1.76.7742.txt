critical analysis vulnerability taxonomies matt bishop david bailey cse september thi critical analysis vulnerability taxonomies matt bishop dave bailey computer vulnerabilities omnipresent 
system fielded programming errors configuration errors operation errors allowed unauthorized users enter systems authorized users take unauthorized actions 
efforts eliminate flaws failed miserably attempts patch vulnerability increased danger 
designers implementers rarely learn mistakes part security holes rarely documented open literature 
taxonomy system classification allowing uniquely identify 
best known example science systematics classifies animals plants groups showing relationship 
classification unique animal classified groups 
considers hierarchy tree structure uniquely numbers branch species animal plant uniquely identified tuple classes orders family genus 
taxonomy security vulnerabilities provide benefits 
specific goals taxonomy provide historical record vulnerabilities form system designers implementers anticipate flaws systems describe vulnerabilities form useful detection show common characteristics related flaws prevention elimination enable security monitor detect exploitation attempted exploitation flaws 
taxonomy similar biological classification plants animals 
taxonomy allows classify vulnerability unique ordered tuple 
essential detecting new vulnerabilities 
importantly allows determine instances larger class flaws known turn suggests efforts reduce eliminate flaws focused 
allows 
author address department computer science university california davis davis ca electronic mail address bishop cs ucdavis edu 
supported contractual arrangement united states air force 

author address galaxy computer services box albuquerque nm electronic mail address com 
supported office computer security award mda 
characterize conditions flaw arises suggesting ways detect new instances flaw 
distinguish vulnerability attack 
attack specific method exploit vulnerability attack program command script jcl social method lying misleading take advantage vulnerability achieve desired 
drawing analogy systematics right taxonomy vulnerability genus attack specific creature practise attack 
major studies attempted security flaws 
risos study focused flaws operating systems program analysis pa study included operating systems programs 
interestingly taxonomies similar classes flaws mapped 
studies taxonomies results 
classifications defined studies taxonomies sense word fail define classification schemes identify unique category vulnerability 
aslam study approached classification slightly differently software fault analysis 
decision procedure determines class soft ware fault placed 
suffers flaws similar pa risos studies 
section contains precise definition taxonomy review pa risos aslam classification schema 
third section shows security flaws may multiple ways schemes 
concludes observations taxonomies ideas develop precise taxonomy 
vulnerabilities attacks taxonomies computer system composed states describing current configuration entities computer system 
system computes application state transitions change state system 
states reachable initial state set state transitions fall class authorized states class unauthorized states state transitions authorized unauthorized defined security policy 
definitions classes transitions considered axiomatic 
vulnerable state authorized state unauthorized state reached authorized state transitions 
compromised state state reached 
attack sequence authorized state transitions compromised state 
definition attack begins vulnerable state 
vulnerability characterization vulnerable state distinguishes non vulnerable states 
generic vulnerability may characterize vulnerable states specific may characterize 
example unix system password file world writable vulnerable state vulnerability may stated password file writable specific system protection domain incorrectly set generic 
computable function domain set vulnerable states range finite set integers decision procedure refers application function specific vulnerable state 
taxonomy sequence decision procedures classifies state exactly tuple 
conceptually may think taxonomy tree 
interior node represents discriminating property distinguishing class vulnerabilities branches node children represent possible output decision procedure classification question 
leaves represent classifications vulnerabilities corresponding tuple sequence outputs decision procedures node encountered path root leaf 
uniqueness vulnerability classification requires distinct vulnerabilities distinct tuples 
tuples classification mechanisms allows identification similar classes vulnerabilities common ancestor paths 
provides mechanism determine taxonomy incomplete 
decision procedure require result function range taxonomy extended include value function range 
example systematics decision procedure determine body covering outputs labelled fur hair scales body covering creature birds correspond outputs schema incomplete expanded adding new output feathers 
discriminating properties differ different paths tree systematics creature bird asking details placement hardness scales irrelevant just asking color feathers fish 
type taxonomy captures different vulnerability single unique corresponding tuple exists defined procedure deriving tuples corresponding vulnerability 
program analysis study neumann presentation study organizes classes flaws show connections major classes subclasses flaws 
improper protection initialization enforcement 
improper choice initial protection domain incorrect initial assignment security integrity level system initialization generation security critical function manipulating critical data directly accessible user 
improper isolation implementation detail allowing users bypass operating system controls write absolute input output addresses direct manipulation hidden data structure directory file written regular file drawing inferences paging activity 
improper change time check time flaw changing parameter unexpectedly 
improper naming allowing different objects name resulting confusion referenced 
improper deallocation deletion leaving old data memory deallocated process reallocated process enabling second process access information failing session properly 
improper validation checking critical conditions parameters leading process addressing memory memory space referencing pointer value allowing type clashes overflows 
improper synchronization 
improper interrupting atomic operations locking cache inconsistency 
improper sequencing allowing actions incorrect order reading writing 
improper choice operand operation unfair scheduling algorithms block certain processes users running wrong function wrong arguments 
placing framework taxonomy vulnerabilities tuples class tuples class 
breadth categories argues uniqueness holding example tuples time check time flaw improper change improper 
fact ambiguity lies heart problem system problem acute mere ambiguity 
risos study risos research secure operating systems study defines classes security flaws 
incomplete parameter validation failing check parameter array index range array 
inconsistent parameter validation routine allowing shared access files accepts blanks file name file manipulation routine routine revoke shared access accept 
implicit sharing privileged confidential data sending information modulating load average system 
asynchronous validation inadequate serialization checking file access permission opening non atomically allowing process change binding name data check open 
inadequate identification authentication authorization running system program identified name having different program name executed 
prohibition limit able manipulate data outside protection domain 
exploitable logic error preventing program opening critical file causing program execute error routine gives user unauthorized rights 
vulnerabilities tuple 
pa study ambiguity classes indicates vulnerability may multiple tuples example passes pointer address supervisor space kernel routine changes tuple flaw incomplete parameter validation prohibition limit 
symptom problem classes taxonomy 
aslam taxonomy taxonomy wad developed organize vulnerability data stored database 
consequently far detailed focuses specifically unix faults implementation level 
operational fault configuration error 
object installed incorrect permissions 
utility installed wrong place 
utility installed incorrect setup parameters 
environment fault 
coding fault 
condition validation error 
failure handle exceptions 
input validation error 
field value correlation error 
syntax error 
type number input fields 
missing input 
extraneous input 
origin validation error 
access rights validation error 
boundary condition error 
synchronization error 
improper inadequate serialization error 
race condition error taxonomy study precise pa risos studies 
provides depth classifying implementation level flaws faults language study 
appears meet requirements implementation level taxonomy clearly lacks high level categories classify design errors 
fact suffers severe problem 
flaw xterm log file flaw program xterm program emulates terminal window system 
reasons relevant discussion run omnipotent user root unix systems 
enables user log input output file 
file exist xterm creates log file owned user file exists xterm checks user write opening file 
root process write file system extra check necessary prevent user having xterm append log output say system password file gain privileges altering file 
suppose user wishes log existing file 
code fragment opens file writing access usr tom ok fd open usr tom append semantics unix operating system cause name file loosely bound data object represents binding asserted time name 
data object corresponding usr tom changes access open open open file checked access 
interval attacker deletes file links system file password file name deleted file 
xterm appends logging output password file 
point user create root account password gain root privileges 
summarizes 
second flaw fingerd buffer overrun flaw internet worm publicized flaw continues recur implementations browsers world wide web versions smtp agent sendmail 
finger protocol obtains information users remote system 
client program called finger contacts server called fingerd remote system sends name characters 
server reads name returns relevant information 
server check length name finger sends storage space name allocated stack directly return address routine 
attacker writes small program machine code obtain command interpreter pads bytes 
sets bytes return input buffer rightful caller main routine case 
entire byte buffer sent daemon 
bytes go input storage array excess bytes overwrite stack locations caller return address status word stored 
input routine returns code spawn command interpreter 
attacker access system 
see 
passwd passwd data usr access usr tom ok 
tom data 
shows state system time access system call solid arrow indicates access refers usr tom 
usr tom passwd name distinct objects 
process open system call usr tom deleted direct alias hard link passwd created named usr tom 
open accesses data associated passwd opens usr tom usr tom passwd refer file 
shows dashed arrow indicating data read solid arrow indicating name open 
flaws chosen underlying problems typical security flaws 
types exist different systems frequent relative number security flaws 
fortunately exploited occur causing security problems 
unfortunately pose security problems warrant study 
discussion classification problem issues central understanding problems taxonomies point view flaw level abstraction 
passwd data passwd data open usr tom write 
usr tom gets local variables return state info return address main parameter gets input buffer main local variables message flaws discussed depend interaction processes trusted process xterm fingerd second process attacker 
xterm flaw attacker deletes existing log file inserts link password file fingerd flaw attacker writes name long 
processes operating system services communicate 
processes involved flawed process attacker process operating system service routines 
view flaw considered perspective may differ view considered perspective 
example point view flawed process flaw may incomplete validation parameter process adequately check parameter passes operating system system call 
point view operating system flaw may prohibition limit parameter may refer address outside process space 
classification appropriate 
levels abstraction muddy issue 
lowest level flaw may say inconsistent parameter validation successive system calls check argument refers object 
higher level may characterized race condition asynchronous validation inadequate serialization problem 
higher level may seen exploitable logic error resource object deleted 
levels abstraction defined differently system contributes ambiguity 
example system psos 
follows higher level implying precisely abstraction hierarchy level occurs 
relationship distance levels important context 
gets local variables return state info address input buffer program invoke shell program invoke shell main local variables 
picture left stack frame fingerd input read 
right stack bogus input stored 
input string overwrites input buffer parameter gets allowing return contents input buffer 
expand questions sample flaws 
xterm log file flaw pa taxonomy 
point view xterm process flaw clearly type flaw problem time check access time open referent name changes 
respect attacker process flaw type case binding name referent deleted improperly 
operating system point view flaw type flaw opening file atomically check access allowed 
reconsider problem higher level abstraction point view operating system 
level directory object seen simply object deletion creation files directory semantically equivalent writing directory obtaining file status opening file require directory read 
case flaw may seen violation bernstein conditions means flaw improper sequencing type 
abstraction level corresponding design attacking process able write directory place leading characterization flaw type improper initial protection 
valid characterization implementation level attacking process xterm executed user semantics implementation unix operating system require processes able access objects way 
implementation level respect xterm process risos taxonomy xterm flaw clearly type file access checked opened 
point view attacker ability delete file flaw type exploitable logic error type attacker manipulating binding system domain 
operating system point view flaw type flaw inconsistent parameter validation access check open parameters objects refer different checked 
interestingly moving hierarchy abstractions flaw may characterized violation bernstein conditions improper sequencing type flaw non atomicity operation atomic 
process view prevails 
design level write allowed flaw type inadequate identification authorization authentication resource containing directory adequately protected 
due nature protection model unix operating system valid characterization implementation level 
single flaw different characterizations 
implementation level depending classifier point view xterm flaw classified different ways 
trying underlying principles taxonomy places flaw fourth class view xterm process view prevails 
moving design level completely different classification needed 
clearly fails meet definition taxonomy ambiguity pa classifications difficult classify flaws purposes 
consider aslam taxonomy 
selection criteria fault classification places flaw class point view attacking program object installed incorrect permissions attacking program delete file class point view xterm program access rights validation error xterm properly validate file time access class point view operating system improper inadequate serialization error deletion creation interspersed access open 
aside absent explicit decision procedure flaw placed class race conditions 
taxonomy satisfies decision procedure criteria uniqueness 
ambiguity classification unique characteristic flaw apparent study second flaw fingerd 
fingerd buffer overrun flaw respect fingerd process pa taxonomy buffer overflow flaw clearly type flaw problem checking parameters leading addressing memory memory space referencing bounds pointer value 
respect attacker process finger program flaw type operand data written connection improper specifically long arguably fingerd 
operating system point view flaw type flaw user allowed write directly process space return address execute treated data 
note architectural problem 
moving higher layers abstraction storage space return address variable object 
operating system point view flaw type parameter specifically return address changes unexpectedly 
fingerd point view issue execution data input improper validation specifically validating type instructions executed 
flaw type flaw 
highest level system changing security related value memory executing data executable 
ia type flaw 
valid characterization implementation level architectural design system requires return address stored stack just input buffer allocated stack hardware supporting unix operating system word protection page segment system requires process able write read stack 
respect fingerd process risos taxonomy buffer overflow flaw clearly type flaw problem checking parameters allowing buffer overflow 
respect finger process flaw type limit input data sent ignored violated 
operating system point view flaw type flaw user allowed write directly process space return address execute treated data 
moving higher storage space return address variable object 
operating system point view flaw type parameter specifically return address changes unexpectedly 
fingerd point view issue execution data input improper validation specifically validating type instructions executed 
flaw type flaw 
highest level type flaw system changing security related value memory executing data executable 
due nature protection model unix operating system valid characterization implementation level 
aslam taxonomy flaw class point view attacking program boundary condition error limit input data ignored class point view xterm program boundary condition error process writes valid address boundary class point view operating system environment fault error occurs program executed specific machine specifically stack machine 
aside absent explicit decision procedure flaw placed class access rights validation error code executed input buffer data return address outside process protection domain altered 
taxonomy satisfies decision procedure criteria uniqueness 
risos classifications somewhat consistent levels abstraction improper authorization classification runs layers abstraction 
point view plays role classification applies operating system point view levels process view 
usefulness classification scheme purposes 
summary analysis flaw classification consistent different levels abstraction 
ideally flaw classified levels possibly refinement lower levels 
problem ameliorated somewhat overlap flaw classifications refines flaws flaws may shift class 
classes distinct leading problem 
point view problem 
point view affect class flaw falls examples show clearly 
tool classification classify flaws triple classes fall 
problem classes partitions overlap clear class component triple 
short examples demonstrate pa risos aslam classifications meet need taxonomies meet uniqueness welldefined decision procedure requirement 
pa risos studies give high level view basic types flaws refinement serve high level classes taxonomy 
studies taxonomy 
aslam study gives low level view flaws classification scheme tailored particular operating system 
lack levels abstraction serious problem 
serious discriminatory criteria orthogonal taxonomy orthogonality apparent 
example flaw classified race condition object installed incorrect permissions 
characterize large class race conditions 
discriminating properties embodied decision functions determine classification 
properties may occur taxonomic tree may occur multiple times different points classification procedure 
example incorrect permissions may discriminating property node away root race conditions away root unauthorized access 
eliminates problem unnecessary orthogonality taxonomy 
discriminating properties important vulnerabilities classify 
example suppose particular security vulnerability os 
recur system hand hardware software completely different 
vulnerability instance genus vulnerabilities example genus time check time flaw occurs different systems 
role attack classifications merits discussion 
attack classification vulnerability classification considered problem considers attack exploitation vulnerability 
distinction allows separate mechanism exploitation underlying vulnerability example different attacks may different programs exploit vulnerability different programs programming flaw 
view vulnerability containing class genus biological taxonomy attacks elements class 
unifies complete consistent taxonomy landwehr tried 
game animal suggests approach building taxonomy 
flaws discriminating question captures difference 
flaw matches earlier ones discriminating question distinguish flaws 
proceeding inductively clear taxonomy constructed 
relationship levels taxonomic tree clear discriminatory properties grouped properties level 
properties characterized 
open research issues summarized quite simply 
rejected classification schemes unsuitable taxonomies new taxonomy discriminatory questions 
questions level taxonomy 
secondly discriminatory questions 
levels abstraction mirrored classifications nodes close root distance root implies lower level abstraction levels intermingled implementation questions 
appropriate top level classifications 
experience area needed 
abbott chin webb security analysis enhancements computer operating systems institute computer sciences technology national bureau standards apr aslam taxonomy security faults unix operating system master science thesis department computer sciences purdue university west lafayette 
bishop taxonomy unix system network vulnerabilities technical report department computer science university california davis davis ca 
ii hollingsworth protection analysis project final report isi rr ad usc information sciences institute may 
landwehr bull mcdermott choi taxonomy computer program security flaws computing surveys pp 
sep 
neumann computer system security evaluation national computer conference proceedings afips conference proceedings pp 
june 
tour worm proceedings winter usenix technical conference pp 
jan 

