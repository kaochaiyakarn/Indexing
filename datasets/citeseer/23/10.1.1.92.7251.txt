implementing orthogonally persistent java alonso stephen blackburn gavin mercer john department computer science australian national university canberra act australia alonso gavin mercer john cs anu edu au department computer science university massachusetts amherst ma usa cs umass edu 
orthogonally persistent java combines power abstraction persistence java rich programming environment 
report experience designing implementing orthogonally persistent java 
design approach anchored view system brings java orthogonal persistence far possible avoid strengths java principles orthogonal persistence 
approach distinguished features complete transparency persistence support intra inter application concurrency acid transactions preservation java property portability 
addition discussing design implementation results show approach performs 
orthogonally persistent system provides abstraction persistence enabling programs execute respect transient persistent data distinction 
provides simple programming model reducing complexity application code offering substantial software engineering advantage 
java platform standard encompasses programming language virtual machine execution environment 
write run philosophy development java platform key success motivator approach orthogonal persistence java opj 
practicality orthogonal persistence powerful tool managing complex data increasingly recognized industry 
commercial developments gemstone gemstone systems pjama atkinson java data objects jdo standard sun microsystems indicate importance java catalyst interest 
term orthogonal persistence java opj generic sense encompassing attempt apply orthogonal persistence java programming language 
gemstone trademark gemstone systems java pjama trademarks sun microsystems orthogonally persistent systems distinguished persistent systems object databases orthogonality data data persistence 
orthogonality comes product principles orthogonal persistence atkinson morrison persistence independence form program independent longevity data manipulates 
data type orthogonality data types allowed full range persistence irrespective type 
persistence identification choice identify provide persistent objects orthogonal universe discourse system 
impact principles design implementation orthogonally persistent system fundamental pervasive 
report experience applying orthogonal persistence java 
approach anchored view system brings java orthogonal persistence far possible avoid strengths java principles orthogonal persistence 
consequence view opj marked distinguishing features complete transparency persistence support intra inter application concurrency acid transactions preservation java property portability 
briefly addressing related describe key design issues section discuss major implementation issues section conclude performance analysis opj systems built date 
related moss hosking taxonomy approaches developing orthogonal persistence java 
taxonomy explores choices model degree transparency implementation approach 
implementation approaches range source byte code modification compiler modification runtime system modification 
taxonomy explicitly include key implementation technology approach user definable class loaders transform classes class loading time 
number examples orthogonally persistent java implementations outstanding systems pjama gemstone take approach modifying java virtual machine jvm 
pjama pjama system joint project glasgow university sun microsystems atkinson 
sun jdk platform jvm modified extend system semantics enable persistence 
system consists single jvm integrated persistent object store 
pjama uses checkpointing mechanism flushing updates store proposals transactional mechanisms pjama 
gemstone gemstone systems developed gemstone gemstone systems system targeted java server solutions 
multiple jvms transactional mechanism concurrently operate respect centralized store 
implement system gemstone developed java compliant jvm directly supports persistent mechanisms 
technical details gemstone implementation disclosed 
design design heavily influenced ideal constructing orthogonally persistent java system true principles orthogonal persistence compromise java strengths 
objective raised significant design issues method persistence identification approach concurrency control preservation portability 
persistence identification third principle orthogonal persistence states choice identify provide persistent objects orthogonal universe discourse system atkinson morrison 
widely interpreted requiring persistence objects defined implicitly reachability root roots 
interpret principle fully mean roots defined implicitly interpretation concordant principle orthogonal persistence states form program independent longevity data manipulates atkinson morrison 
achieve making class variables static variables implicit roots persistence 
approach significant consequence making persistence truly transparent java program requires modification orthogonally persistent see 
contrast systems required programs associate explicit textual labels root persistence odds principle persistence independence 
public class simple static int count public static void main string argv system print count count fig 

depending loaded persistence enabled class loader simple program exhibit persistent 
non persistent semantics 

pjama long time depended explicit roots persistence jordan atkinson supports explicit implicit modes reachability 
concurrency control strong support concurrency crucial goals 
non transactional modes concurrency control shared variables provide rich cooperative programming environments difficult effectively approaches persistence blackburn 
reason transactions conventional choice concurrency control persistent systems databases 
transactions deliver coherency face concurrency isolation contrast liberal cooperative approach implicit models concurrency control 
unfortunately combined impact principle persistence independence atkinson morrison strict acid transactional semantics reuter means orthogonally persistent system implements simple acid transactions face extreme limitations concurrency execution application confined single acid transaction inter application concurrency blackburn 
order avoid having dilute transactional semantics compromise principles persistence forgo goal strong support concurrency spawn transaction model blackburn 
model provides environment observes strict transactional semantics principles orthogonal persistence permitting intra inter application concurrency 
portability goal maintaining java write run philosophy led develop portable design 
portability issues arise key aspects design mechanism java semantics extended include support persistence portability storage layer 
semantic extension behavior normal java programs extended order incorporate semantics orthogonal persistence 
extensions include automatic faulting objects storage memory demand writing modified objects back disk necessary transformation objects storage heap formats addition state information object recording updated moss hosking review wide range ways making semantic extensions java 
approach explicitly mentioned moss hosking java class loader mechanism semantically extend programs class loading time 
approach advantages requiring modification java virtual machine jvm jvm depending compiler modifications post processing java class 
required class orthogonally persistent loaded appropriate class loader 
feature combined approach specifically create subclass classloader implements semantic extension mechanisms persistence 
ensure userdefined classes loaded instances 
program invoked java class args execute persistence semantics invoked java optional store args class args 
persistence identification section means compiled java class orthogonally persistent depending solely class loaders load classes program aspect execution environment including class file choice jvm remains unchanged 
method semantic extension introduces complication relating java reflection mechanism provides methods examining classes objects creating modifying objects 
order preserve transparency persistence application reflection mechanisms show trace semantic transformations performed class loader 
transformations suitably transform semantics reflection operations 
similar complication arises user defined class loaders potentially bypass bytecode transformation process 
clean solution provided semantic extension 
method lang 
classloader semantically extended apply bytecode transformations just prior loading class 
persistence semantics added classes semantically extended class loaders 
course solution addresses issues relating mechanism semantic extension 
address problem semantic extensions may clash orthogonal persistence persistence mechanisms 
problem may arise java semantics extended class loader modifying vm means 
storage interface architecture opj implementation embodies clean interface java runtime underlying store 
making strong separation gain portability respect underlying store 
psi storage interface blackburn stanton providing strong transactional semantics allows efficient implementations virtue runtime system having direct access store cache 
implementation design opj outlined previous section raises challenging implementation issues 
major implementations system experimented number implementation possibilities 
common systems mechanism performing semantic extension classes class loading time 
specifics mechanisms incidental goals omitted brevity 
semantic extension class support orthogonal persistence involves basic transformations including insertion read barriers ensure object faulted memory storage insertion write barriers ensure updates heap objects propagated storage addition mechanisms transforming objects heap object store fact successfully developed bindings stores major commercial dbms product shore object database carey object database 
representations 
semantic transformations fairly simple insertion call read barrier method prior getfield raise major implementation issues 
structural choices shells fa experience important implementation issues choice structure representing objects 
objects exist consequence eager swizzling strategies 
variety swizzling strategies choice strategy significant impact design system moss 
purposes discussion broad options exist eager swizzling swizzled soon object faulted memory lazy swizzling swizzled traversed swizzling remain store format conversion time traversed eager swizzling handles handles hold oids store level object identifiers memory pointer referenced object established time handle traversed 
java strong typing goal portability severely restrict approaches take swizzling 
fields java object contain appropriate type precludes simple overloading field oid ruling lazy swizzling swizzling 
experimented remaining choices eager swizzling objects eager swizzling handles 
choices lead different mechanisms representing objects shells fa respectively 
shells shell approach uses empty object call shell object 
oid swizzled time object appropriate type created oid replaced object 
subsequent oid result translation oid java object 
time shell object accessed corresponding object read store initialize shell 
initialization process usually involve swizzling case process recurses 
shell approach relatively easy implement 
oid field added object appropriate store object read object traversed 
field serve purpose identifying object state respect initialization update presence valid oid oid field indicate object remains uninitialized value indicate object updated 
semantic transformation required shell approach quite trivial read barrier inserted getfield byte code 
read barrier simply checks see object read initialized faults storage necessary 
unfortunately shells potential drawback uninitialized shells may consume large amount memory 
term swizzle refers translation persistent transient forms 
empty mean object initialized state store 
fa memory intensive alternative shells fa additional significant advantage mechanism removing read barriers 
fa ade lightweight representation object real object time real object required 
fa ade behave object represents point accessed accessed transparently replace real object 
requires fa ade real object type equivalent classes fully virtualized non private fields private external accesses fields transformed accessor methods 
fa ade br br br fig 

order fa ade transparently replaced real object pointers fa ade redirected point real object 
reason fa maintain back referring objects 
fa may accessed method invocations remembering classes fully virtualized trapping access fa simply requires implementing faulting mechanism fa ade methods 
fa ade method invoked creates corresponding real object initializes faulting store object uses back replace existing fa ade real object calls corresponding method real object returns result 
subsequent method invocations respect object incur read barrier penalty pointers refer directly real object fa ade 
semantic transformation required fa ade approach complex required shells 
illustrates transformations simple level class hierarchy 
class undergo virtualization transformation 
virtualized class cv define interface ci concrete classes cv cf implement ci 
cf fa ade class real class example implementation bi inherits functionality fields implementation interface ai 
fa ade represent state real object fa ade smaller corresponding real object containing state perform faulting replacement operations 
fa ade ap number back maintained fa ade bounded adopting policy eagerly faulting objects number fa ade reaches threshold 
virtualization transformation class hierarchy transformation fig 

fa requires stage transformation order fa real objects type equivalent 
transformations occur transparently automatically class loading time 
proach may offer significant space advantage shell approach 
furthermore fa ade approach incurs read barrier access object 
unfortunately advantage may offset costs associated full virtualization 
implementation concerns object packing unpacking object faulted memory transformed store object java heap object 
refer process unpacking involves creating java object appropriate type initializing non transient fields swizzling necessary 
transformation heap object store object commit time referred packing simply reverse transformation 
experimented quite different approaches packing unpacking 
implementation pack unpack methods 
took approach account perceived performance benefits associated hope implemented map structures swizzling faster java implementations structures 
quickly critical minimize number traversals java boundary traversal extremely expensive 
java reflection mechanism establish structure transformed object expensive 
subsequently re implemented pack unpack methods java 
including automatic generation class pack unpack methods semantic extension transformations occur class loading time 
major advantages approach minimizes number traversals java boundary avoids reflection mechanisms runtime hard coding appropriate instructions methods class loading time 
completely avoid jni calls read write objects underlying store necessarily calls functions 
java packing unpacking depends great deal java libraries efficiently implementing map structures swizzle process 
transactional isolation requirement isolation acid transaction means transactions concurrently executing single jvm isolated uncommitted actions 
implementation fine grained locks ensure isolation transactions single jvm expensive 
fortunately java class loader mechanism provides powerful feature respect namespace isolation 
namespace isolation ensures computations running distinct class loaders strictly isolated 
class loaders share instances classes system classes exception instance class variables visible namespace boundaries 
class loader mechanism cheaply implement transactional isolation binding transaction class loader 
knowledge opj system incorporates mechanism enforcing strict isolation semantics 
system classes user defined class loaders security boot strapping reasons able intercept loading system classes 
consequence system classes semantically extended class loading time 
key impact limitation insert read barriers trap accesses fields system classes 
simple unsatisfying solution adopted eagerly load objects referred system classes 
impact particularly clear case arrays 
arrays system classes trap accesses fields arrays eagerly fault objects referred array 
detailed discussion problem interested reader referred 
thread persistence current opj implementations execution state threads persist 
java threads class objects limitation violation principle data type orthogonality states data types allowed full range persistence irrespective type atkinson morrison 
believe possible implement persistent threads opj framework techniques similar implement thread migration yee 
thread migration depends thread state encapsulated revived transmission common problem encapsulating thread state storage 
results design outlined section basis distinct implementations 
process explored major dimensions implementation note achieve semantic extension creating new class loader class achieve isolation creating new class loader instances 
mechanisms achieving semantic extension transactional isolation orthogonal 
space shells versus fa objects versus java object packing unpacking 
analyze performance impacts choices compare approach opj versions pjama 
experimental setting oo benchmark oo object database benchmark suite carey 
suite consists large number operations including traversals navigational queries query retrievals 
oo schema modeled cad application 
implemented oo benchmark java 
chain checkpoint anu opj pjama respectively oo commit points 
non persistent java implementation builds oo database memory set benchmark operations executed 
execution benchmark consisted iterations operation 
elapsed time iteration regarded cold time cache cold times subsequent iterations excluding averaged produce hot time 
help measure transaction initiation commit costs oo allows operations executed transactions commit iteration transaction single commit set iterations 
size oo database configurable sizes commonly small medium large 
due limitations oo implementation underlying systems possible small configuration operations executed systems undo 
gain quantitative impression performance system take geometric mean results operations 
systems measured systems label description anu opj anu opj shells packing 
anu opj anu opj shells java packing 
anu opj anu opj fa packing 
pjama pjama version 
pjama pjama version 
java non persistent java 
java systems jdk exception pjama pjama hot spot just time compiler jit 
pjama uses jit described lewis 
anu opj systems version shore object database carey 
benchmarks executed sun ultra mb ram separate hard disks persistent store log 
performance analysis provides picture performance systems 
see anu opj implementations perform worse pjama pjama cold suggests cost starting transaction anu systems greater pjama systems 
large performance differential cold results persistent systems java unsurprising java system incur overhead associated faulting objects store 
anu systems perform better hot anu opj slightly lagging pjama performing times better pjama 
particularly performance shorter operations suggests fast commit times factor result 
hot results show performance systems normal processing excluding startup commit 
indicates performance pjama close optimal cf java 
anu systems appreciably slower significantly faster pjama 
shells versus fa comparison anu opj anu opj indicates fa produces slow order 
success fa ade approach depends heavily factors ability jit inline final field access methods average size objects appreciably bigger fa 
results suggest jit may inlining aggressively hoped small size oo objects limits memory saving fa ade approach offer shells 
java versus packing unpacking comparing anu opj anu opj see java management oid java object mappings packing unpacking operations leads performance compared case 
hot times indicate significant slowdown runtime performance slowdown times 
probably java leads efficient packing unpacking avoiding java expensive reflection mechanisms 
performance results indicate opj implementations lagging state art 
number important factors moderate result 
systems opj systems fully transactional implementing fully acid semantics supporting inter transactional concurrency just implementing atomic checkpoint mechanism 
second sufficient resources believe significant improvements performance systems results outcome limited implementation effort 
exclude value virtual machine modifications approach happily exploit suitably targeted jvm enhancements sacrificing portability 
obvious source performance improvement systems optimization read write barriers 
hosking demonstrated significant performance improvements code analysis detect remove redundant barriers 
approach incorporated byte code transformations perform class loading time 
difficult constraints java prohibition user defined class loaders modifying system classes section 
key time normalized wrt pjama log time normalized wrt pjama log time normalized wrt pjama log pjama anu opj anu opj anu opj pjama java oo parameters cold 
reflected results read io transaction startup commit including write io runtime overheads 
pjama anu opj anu opj anu opj pjama java oo parameters hot 
reflected results transaction startup commit including write io runtime overheads 
pjama anu opj anu opj anu opj pjama java oo parameters hot 
reflected results runtime overheads 
fig 

performance systems 
results plotted log scale impulse reflects average execution time particular operation system normalized respect time pjama query 
result lower indicates better performance pjama 
set results grouped follows queries left traversals right 
geometric means normalized results system appear brackets 
impact limitation insert read write barriers respect field accesses system classes 
relaxation policy allow greatly improve performance systems 
radical step extend java native support generic semantic extension language developed project 
semantic extension language allows extensions specified high level extensions applied classes inheritance relationships 
native support language open possibility semantic extensions applicable system classes 
feature application implementation opj 
object faulting mechanisms expensive means directly moving object image java heap 
new java heap object created fields separately initialized 
extension java allowed process sped improve cold performance results 
designed built orthogonally persistent java system strongly motivated desire remain true principles orthogonal persistence sacrificing java strengths 
product effort working system credible performance distinguished key respects complete transparency persistence support intra inter application concurrency acid transactions preservation java property portability 
achieved making class variables implicit roots persistence chain spawn transaction model making java provision user definable class loader mechanism 
performance results indicate system competitive latest release opj system custom jvm performance differential susceptible erosion improvements jvm technology improvements implementation approach 
gap narrowed provision suitable hooks jvms 
optimistic novel approach opj outlined genuine contribution goal bringing orthogonal persistence popular java 
bibliography atkinson atkinson jordan spence 
design issues persistent java type safe object oriented orthogonally persistent system 
connor nettles eds seventh international workshop persistent object systems cape may nj may pp 

morgan kaufmann 
atkinson morrison atkinson morrison 
orthogonally persistent systems 
vldb journal july 
blackburn stanton blackburn stanton 
transactional object cache foundation high performance persistent system construction 
morrison jordan atkinson eds advances persistent object systems proceedings th international workshop persistent object systems pos proceedings rd international workshop persistence java sept ca 
san francisco pp 

morgan kaufmann 
blackburn blackburn 
concurrency fly 
morrison jordan atkinson eds advances persistent object systems proceedings th international workshop persistent object systems pos proceedings rd international workshop persistence java sept ca 
san francisco pp 

morgan kaufmann 
carey carey de witt naughton 
oo benchmark 
buneman jajodia eds proceedings acm sigmod international conference management data washington may volume sigmod record june pp 

acm press 
carey carey dewitt franklin hall mcauliffe naughton schuh solomon tan white 
persistent applications 
snodgrass winslett eds proceedings acm sigmod conference management data volume sigmod record minneapolis mn may pp 

acm 

implementation automated fine granularity locking persistent programming language 
software practice experience april 
gemstone systems gemstone systems 

gemstone www gemstone com 
reuter reuter 
principles transaction oriented database recovery 
acm computing surveys dec 
blackburn kirby 
platypus design implementation flexible high performance object store 
proceedings ninth international workshop persistent object systems norway september 
yee yee 
migrate agents 
www cs ucsd edu users pub migrate ps 
jordan atkinson jordan atkinson 
orthogonal persistence java 
mid term report 
morrison jordan atkinson eds advances persistent object systems proceedings th international workshop persistent object systems pos proceedings rd international workshop persistence java sept ca 
san francisco pp 

morgan kaufmann 
lewis lewis 
architecture high performance orthogonally persistent java virtual machine 
proceedings ninth international workshop persistent object systems norway september 
blackburn 
fast portable orthogonally persistent java 
software practice experience april 
moss moss 
working persistent objects swizzle swizzle 
ieee transactions software engineering se august 
moss hosking moss hosking 
approaches adding persistence java 
jordan atkinson eds international workshop persistence java scotland september 
available online www dcs gla ac uk carol workshops pj programme html 
sun microsystems sun microsystems 

java data objects specification jsr 
java sun com jsr july sun microsystems garcia avenue mountain view ca 
