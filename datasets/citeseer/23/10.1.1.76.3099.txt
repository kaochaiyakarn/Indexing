computational semantics basic protocol logic stochastic approach bana okada dept computer science university california davis davis ca usa research center verification semantics national institute advanced industrial science technology osaka japan department philosophy keio university tokyo japan cs ucdavis edu aist go jp keio ac jp 
concerned relating formal computational models cryptography case active adversaries formal security analysis done order logic 
argue way datta defined computational semantics protocol composition logic gives rise problems focusing occurrences bit strings individual traces occurrences probability distributions bit strings distribution traces 
introduce new fully probabilistic method assign computational semantics syntax 
considering simple example formal model basic protocol logic okada technique suitable extensions complex situations pcl 
idea usual mathematical treatment stochastic processes able treat arbitrary probability distributions non negligible probability collision causal dependence independence 
way point instances original syntax modified sound formal semantics sound computational semantics 
keywords 
cryptographic protocols formal methods order logic computational semantics past years linking formal computational models cryptography central interest 
different methods emerged active passive adversaries 
consider relationship models formal security analysis done order logic 
formal approach interest protocol correctness analyzed defining syntax axioms inference rules proving property 
logical proof ensures property true formal model semantics syntax 
link computational world done assigning computational semantics formal syntax proving axioms inference rules hold property correct syntax true computational model 
turns unambiguous define computational semantics property deemed true computationally 
datta gave computational semantics syntax protocol composition logic cf :10.1.1.19.480
protocol composition logic project overview 
treatment action honest participants recorded execution trace partially supported packard fellowship 
identical probabilities bit strings emerging checked recorded earlier action corresponded actions adversary recorded send receive 
way define property true particular trace say property true model true overwhelming number traces 
method relies negligible collision probabilities large probability identifying bit strings wrong actions 
comparisons done trace separately possible track correlations 
approach puts emphasis probabilities 
defining true trace say property true model cross section traces provides right probabilities computational realizations property question 
underlying stochastic structure ensures detect depends past 
coincidences traces look correlations probability distributions 
introduce method simple syntax somewhat modified version basic protocol logic bpl short okada leave extensions complex situations protocol composition logic 
reason partly limited space partly avoid distraction elaborate formal model main ideas complete axiomatization syntax datta computational pcl published fragments available 
emphasize point give computational semantics bpl provide technique works general situations 
bpl logical inference system prove correctness protocol 
originally included signatures simplicity leave analysis 
bpl defined give simple formulation core part protocol logics proving aimed properties framework order logic 
give axiomatic system order predicate logic proving agreement properties 
message represented order term uses encryption pairing symbols atomic formula sequence primitive actions send receive generate principals terms 
set properties nonces cryptographic assumptions non logical axioms give specific form formulas called query form expressive power specify intended authentication properties 
bpl sound respect purely formal semantics order ensure soundness computational semantics modifications original syntax bpl necessary 
denoting encryptions original version purely symbolic model bpl inference system indicate random seed encryption datta turned consistent computational interpretation harder impossible random seed syntax 

original subterm axioms computationally sound just take certain subset computationally sound 
sound term axioms known give complete characterization 
uses subterm relations essential correctness proofs protocols general including bpl pcl 
symbolic term model reflect symbolic term structures term model called standard model respect subterm relations 
bpl symbolic semantics takes standard term model satisfy certain properties nonce verifications listed non logical axioms bpl syntax 
result shows truth certain useful subset subterm theory axioms preserved computational interpretation 
show nonce verification axioms turn sound 
original bpl proved completeness formal semantics original set axioms consider completeness 
open question completeness said computational case 
define computational semantics 
involves giving stochastic structure results protocol executed 
principals output bit strings opposed terms certain probability distributions 
bit strings recorded trace generated sent received principal 
provides probability distribution traces 
show answer bit string corresponding term sent high probability 
example formal term sent computational model cross section traces provides correct probability distribution corresponds sending nonce generated cross section provides right probabilities distribution independent happened earlier 
way define certain formula syntax true computational semantics 
analyze axioms syntax true semantics conclude formula proved syntax true semantics 
merits approach compared computational semantics datta point main aspects problems arise case treatment datta think method works better theirs 
datta derive satisfaction formula model satisfaction formula individual traces sure accidental coincidences 
result method works collision probability negligible importantly results weaker set syntactic axioms possible method 
example postulate send send axiom evaluation variables bit strings send 
principal term action carried principal thread assuming carried 
words axiom send action send action long evaluates send way 
coincidence evaluations prevents axiom 
think unnecessary restriction 
long probability distributions different computational interpretation send include send send axioms consider modal formulas really limitation simpler syntax bpl actions included premise formula 

problem soundness proofs datta questionable define formula send satisfied satisfied traces negligible probability 
ignore fact position send traces may vary badly trace trace may depend trace 
simple example situation traces coincide step say send chosen trace trace chosen 
traces coincide step time picked trace picked trace 
important soundness proofs cca security shown certain things happen happen algorithm constructed breaks cca security 
constructed algorithm may executable things happen depending 
possible prove bad choice positions choice see indication concerns papers datta suggest standard tool filtration stochastic processes problem taken care semantics 

ignoring probability distributions correlations give rise pathologies putting doubts correctness soundness proofs suppose encryption scheme bit strings generated randomly nonces public key bit string random seed encryption public key bit string random seed contradict cca security 
suppose principal generates randomly nonce principal receives adversary 
case semantics datta new receive satisfied 
pathologic consequence ignoring fact created adversary correlate sent 
furthermore contradict axiom saying send subterm meaning case send action sending occur problem persists coincidence efficiently computed 

rely counting equiprobable traces 
unequal probabilities may dealt counting trace priori quite clear lead problems 
allow arbitrary distributions 
method certainly applies executions number possible computational traces security parameter finite 
probabilistic complexity classes formulated average case bounds opposed worst case bounds allowing infinite number traces may useful 
method easily extended infinite number traces 
related 
formal methods emerged seminal dolev yao computational cryptography grew goldwasser micali 
link methods abadi rogaway soundness passive adversaries case called type security 
number papers passive adversaries followed proving generalizing weaker realistic encryptions schemes considering purely probabilistic encryptions including limited models active adversaries addressing issue forbidding key cycles considering algebraic operations static equivalence 
approaches including active adversaries considered backes canetti reactive simulatability universal composability frameworks respectively 
non trace properties investigated context order logic 
organization 
section outline syntax basic protocol logic 
section give computational semantics basic protocol logic discuss soundness 
section conclude directions 
special 
st phane jesus roy john mitchell valuable discussions topic matthew franklin 
basic protocol logic section syntax basic protocol logic modified suitable computational interpretation 
original bpl please consult 
language sorts terms 
section briefly describe syntax basic protocol logic modified suitable computational interpretation 
original bpl please consult 
language order sorted cname finite sets constants sort name constants sort nonce terms sorts name nonce terms sort message finite set constants sort cname terms sort sort coin compound terms sort message built grammar cname free variable sort message constant free variable sort name constant free variable sort coin 
write ra notations ra 
resp constants variables resp 
sort name 
resp constants variables resp 
sort nonce 
resp constants sort variables sort variables sort coin resp 


constants variables sort message denote term sort name denote sort coin 
denote terms denote terms sort nonce 
formulas 
introduce binary predicate symbols generates receives sends represent generates fresh value nonce receives message form sends message form equality subterm relation identical subterm respectively 
called action predicates meta expression acts denote action predicates generates receives sends 
atomic formulas form acts acts pk tk called trace formula 
trace formula represent sequence principals actions sends message receives message 
short denote acts pk tk indicates length 
pi identical denotes trace formula 
say includes denoted increasing function 
formulas defined bound variable obtained substituting occurrence free variable sort meta expression indicate list variables occurring 
substitutions represented terms notation 
introduce notion strict order preserving merge trace formulas order preserving merge trace formula increasing functions union ranges cover 
called strict order preserving merge furthermore ranges disjoint 
roles 
protocol set roles role principal say described trace formula form acts tk 
axioms basic protocol logic extend usual order predicate logic equality adding axioms ii iii 
axioms sufficient protocols checked protocols may need additional axioms defined computationally sound 
term axioms 
consider set countably infinitely elements sort name sort nonce sort coin includes elements cname 
free algebra constructed appropriate sorts indexes encryption terms 
elements sort message 
postulate axioms 
variables occurring corresponding terms 
require cname true mt axiom 
true mt axiom 
msq sb sb sb sb mn mq qn ms sb sb mn ms mq ii rules trace formulas 
postulate list order preserving merges 
axioms express intuition trace happens subtrace happens traces happen possible merges happen 
iii axioms relationship properties 
introduce set formulas non logical axioms 
axioms represent properties nonces cryptographic assumptions 
ordering nm acts generates 
mean way occurs 

nonce verification constants sort name constant sort coin postulate qn generates sends receives ra ra sends ra sends receives sends receives ra set axioms original formulation bpl axioms computationally sound 
example original axioms included ra equal 
principal generate public key properly randomization honest interpretations terms may turn equal distribution 
nonce verification sort name may coincide constant sort constant sort postulate generates sends receives ra ra sends ra sends rb rb sends rb sends possible axiomatizations authors particularly useful exactly somewhat general version 
meaning ordering axiom clear 
nonce idea authentication tests 
nonce verification means sent nonce encrypted public key sent way received nonce form encrypted nonce go reason require constant arbitrary variables want require principals arbitrary run encrypt securely 
query form correctness properties introduce general form formulas called query form represents aimed correctness properties 
order discussion simpler consider case party authentication protocols query form easily extended represent correctness properties respect types protocols include principals 
definition 
query form query form formula form 
honest precise definition honest appendix 
means performs actions honest represents performs run initial segment ends sending action action 
example responder view non injective agreement protocol described formula honest remarks 
choose set formulas iii section non logical axioms power prove aimed agreement properties various protocols public keys needham schroeder lowe protocol iso iec key transport mechanism cf 
protocol 
additional syntax non logical axioms shared keys signature prove correctness core part kerberos cf 
protocol iso protocol example 
bpl provide flexible compositional treatment proofs protocol composition logic 
computational semantics computational asymmetric encryption schemes fundamental objects computational world strings strings families probability distributions strings 
families indexed security parameter roughly understood key lengths need notion negligible function function said negligible nc nc 
pairing injective pairing function strings strings strings 
assume changing bit string argument bit string length influence length output pairing 
encryption scheme triple algorithms key generation encryption decryption plaintexts ciphertexts publickey nonempty subsets strings 
set coins probability field distribution dependent security parameter stands coin tossing randomness 
definition encryption scheme 
computational asymmetric encryption scheme triple param coins publickey key generation algorithm param publickey plaintexts coins ciphertexts encryption function strings plaintexts output coins plaintexts 
algorithms computable polynomial time respect security parameter 
assume length output encryption depends length plaintext 
assume encryption scheme satisfies adaptive chosen ciphertext security cca defined way definition adaptive chosen ciphertext security 
computational public key encryption scheme provides indistinguishability adaptive chosen ciphertext attack ppt adversaries sufficiently large security parameter pr mb neg oracle returns returns returns 
adversary assumed keep state invocations 
required length 
probability includes instances randomness key generation choices adversary choice encryption 
shown definition equivalent stricter tuple encryption decryption oracles separate encryption decryption keys bit choose submitted plaintexts 
adversary allowed invoke oracles order submit message received encryption oracle corresponding decryption oracle 
stochastic model computational execution bpl discuss mathematical objects represent computational execution protocol 
plan define computational semantics show syntactic axioms hold encryption scheme cca secure result query form provable syntax true computational model 
main improvements computational semantics proposed datta explained 
approach avoids necessity tell trace satisfied want avoid pure coincidences 
computational behavior probabilistic natural ask satisfied particular trace 
natural question traces produce right kind probability distribution certain variable 
probabilities complexity involved need probability space value security parameter 
time plays important role execution need probability space stochastic process 
presentation limit finite probability spaces explaining notion measurability stochastic processes simpler way familiar notions infinite spaces near trivial generalize method allowing infinite steps polynomial expected run time 
assume security parameter maximum number execution steps notions introduce standard probability theory 
denote finite probability space execution protocol security parameter subsets called events 
denote set subsets including empty set 
subset containing element called elementary event 
set meant include randomness execution protocol additional information 
probability measure assigns probability subset additive respect disjoint unions sets assign probability element probability subset computed 
clear probability space talking just notation pr 
order describe randomness carried step assign subset closed union intersection includes fi 
fi represents happened step elements considered tree branches go step elements contain branches branches separate step elements contains branches vice versa 
detail please see example 
set called filtration 
finite fi atomistic element obtained union disjoint minimal respect inclusion nonempty elements 
minimal nonempty elements called atoms 
introduce notation pr param 
included allow initial randomness key generation 
discrete random variable function discrete value 
contains events determined step random variable depends randomness exactly constant atoms saying possible value set element case say measurable respect need somewhat complex dependence notion 
need consider random variables determined randomness step certain random paths step paths possibly paths 
consider function tells time step consider 
function depend past require set call function stopping time 
events occurred stopping time contained 
random variable depends events stopping time iff range furthermore random variable said independent happened iff possible value pr pr pr 
easy see random variable stopping time measurable respect jf minimal sense measurable respect 
example 
suppose coins tossed times 


defined analogously 
step outcome coin tossing known 

step outcome second coin known contains atoms possible unions 
subsets 
function measurable respect constant depends outcome coin tossing rest 
similarly measurable constant 
stopping time example equals position ai ak ak 
atoms fj 
principals nonces random seeds 
pr param stochastic space execution protocol 
define principals nonces random seeds encryptions represented space 
principals essentially bit strings describing names public secret keys 
set polynomially bounded number elements form pair probability distributions measurable respect pr range negligible function 
assume 
nonces choose definition 
cca security length revealing assume nonces fixed length security parameter 
set elements form param value means bit string value particular execution uniformly distributed param param independent pr pr pr 
set describes nonces generated overwhelming probability execution protocol 
nonces independent uniform distribution length 
nonces independent happened earlier generated require 
set elements form param coins 
rg subset properly randomized values coins distribution required encryption scheme condition value 
distribution 
messages 
messages simply randomly distributed bit strings 
set messages elements form param 
render messages equivalent differ sets negligible probability write iff negligible function 
factor respect equivalence distributions equivalent computationally distinguished 
dm dn dm dp dm pairing encryption subterm relation computational messages 
define mean pairing encryption messages stochastic field 
defined straightforward way fixing randomness representatives respect dm write param param arbitrary elements equivalence classes ensemble random variables param element encryption messages write param ensemble random variables param element value input distributions take output 
define subterm relation previous definition pairing encryption consider element free term algebra dm dm element dm dm denote subterm relation dm 
generates subterm relation dm defining true iff element dm dm execution trace execution trace defined tr tr param tr tr tr acts pn acts security parameter natural number dp acts generates sends receives tr meaning generate send receive action happened 
require tr tr acts measurable respect require tr ppt computable earlier ones 
domain interest 
computational semantics want syntactic formulas meanings happens certain subset randomness single fixed randomness happen set 
security parameter claim things sequence sets non probability 
consider set subsets param non negligible 
say dm param param say iff element dm dm computational semantics explain give computational semantics syntax means formula syntax true semantics 
security parameter execution played number participants 
assumptions 
particular execution assume principals corresponding names syntax correspond elements cname regular non corrupted 
assume participants generate keys encrypt correctly keys properly distributed properly randomized cca encryption scheme private keys computation decryption 
participants possibly corrupted assume 
encrypting correctly essential able prove nonce verification axioms 
assume pairing messages differs nonce principal name sets non negligible probability 
network completely controlled adversary 
sent received bit strings recorded trace order happen 
freshly generated bit strings produced regular participants recorded 
combined algorithms participants adversary assumed probabilistic polynomial time 
situation definitions previous section produces computational trace structure associated execution form pr rg tr function cname dp cname measurable respect correct key distribution different constants independent ii dn iii rg sequence subsets focus attention non negligible 
extension evaluation free variables function constants variables sort name nonce message coin respectively dp dn dm rg hold 
term dm defined terms ii mentioned earlier elements dm considered elements dm say ensemble random variables param defined realization term denote require independent jm condition see paragraph example 
give interpretation bpl 
note interpretation conjunction disjunction negation defined standard manner 
define formula satisfied remember terms satisfied iff satisfied iff term acts sends receives acts satisfied iff stopping times apart sets negligible probability tr form acts param param denote acts acts generates nonce param means case require independent negligible probability condition 
precisely independent 
sequence actions satisfied satisfied jk stopping time belonging require jk jl param jl 
formulas satisfied iff satisfied satisfied iff satisfied satisfied satisfied iff satisfied satisfied 
satisfied iff satisfied 
formula bound variable obtained substituting occurrence free variable sort resp 
satisfied iff satisfied resp 
extension differs formula true structure iff satisfied extension structure basic protocol logic axioms true case structure called model standard arguments order logic follows provable syntax true model 
particular query form provable syntax true model 
turn attention axioms satisfied structure 
truth term axioms 
axioms trivially satisfied properties equality subexpression relation pairing encryption assumptions execution 
axioms containing encryptions item true cca security encryptions produce distributions identical negligible probability interpretations terms 
truth ordering axiom 
suppose extension domain formula sends generates satisfied non negligible probability formula stopping times sends generates 
sends implies measurable respect satisfied obtained series decryptions breaking pairs new randomness depends randomness measurable respect generates implies element measurable respect independent independent 
differ negligible probability independent possible pr negligible 
means negligible probability contradiction 
truth nonce verification axioms 
order show axioms true assumption regular participants encrypt cca secure encryption scheme 
suppose non negligible premise axioms satisfied 
satisfied means non negligible probability ra go premise says shows recovered negligible probability series de coupling decryption ra decrypted 
show ppt algorithm constructed breaks cca security 
algorithm breaks cca security simply protocol execution modifications decryption oracle algorithm may access definition cca security job decryptions private key db 
algorithm generates samples protocol execution samples 
protocol execution produce ra compute samples realization samples samples parts 
submit encryption oracle cca game pair samples ciphers outputs ra occurs 
sample ra goes terminate 
continue receives sample 
recover sample de coupling decryption decryption oracle necessary 
bit string obtained plaintext encrypted oracle bit value game determined 
axiom satisfied algorithm non negligible probability winning cca game non negligible 
order show truth second nonce verification axiom modified version cca equivalent original encryption decryption pairs oracles corresponding independently generated encryption key decryption key pairs 
algorithm decryption oracles algorithm may access modified definition cca security job decryptions private keys db dc 
algorithm generates samples protocol execution samples 
protocol execution produce ra compute samples realization samples samples parts 
submit encryption oracle cca game pairs samples 
skip step decrypts ra rb constructed compute samples just case 
samples different length submit results second encryption oracle 
continue receives sample 
recover sample de coupling decryption decryption oracle necessary 
bit string obtained plaintext encrypted oracles bit value game determined 
ppt algorithm protocol execution ppt breaks cca security 
nonce verification axioms hold 
soundness axioms true structure standard argument order logic theorem true theorem 
assumptions execution protocol associated computational trace structure pr rg tr formula query form particular provable syntax order predicate logic axioms ii iii true proof 
showed term axioms non logical axioms bpl true model 
routine check logical axioms logical inference rules order logic true model followed usual order logical operations composed formulas interpretation 
theorem holds 
reflect points 
introduce modal formulas syntax progress extend approach pcl 
keep track actual probability distributions correlations problem define semantics modal formulas axioms hold long interpretations distributions bit strings send different negligible probability 

filtrations random variables measurable dependence taken care measurability 

required distribution keys measurable respect generated nonces independent past anomaly mentioned happen independent interpretations 
reader may worried don require generated dependent generated adversary corrupted participant 
true introduce filtration indicates knowledge adversary certain time may needed complex syntax example allow corrupted participants generate keys middle bpl necessary result undesired coincidences proofs tool 

removing bound length executions trivial step change finite sequence filtration infinite definition measurability standard infinite spaces framework presentation definition measurability involved case 
computational semantics basic protocol logic uses stochastic structures showed soundness theorem 
order show axioms bpl true semantics modify bpl original axioms computationally sound 
showed method bpl simple concise presentation 
argued semantics looks promising datta apply methods complex formal syntax protocol composition logic 
formal completeness theorem bpl provided investigate completeness computational case 

website www stanford edu logic derivation html 

abadi baudet warinschi 
guessing attacks computational soundness static equivalence 
proceedings fossacs lecture notes computer science 
springer verlag march april 

abadi rogaway 
reconciling views cryptography 
journal cryptology january 

ad bana herzog scedrov 
soundness formal encryption presence 
proceedings esorics volume lecture notes computer science pages milan italy september 
springer 

ad bana scedrov 
computational information theoretic soundness completeness formal encryption 
proceedings csfw pages aix en provence france june 
ieee computer society press 

backes pfitzmann waidner 
composable cryptographic library nested operations 
proceedings ccs pages washington usa october 
acm press 

baudet cortier kremer 
computationally sound implementations equational theories passive adversaries 
proceedings icalp volume lecture notes computer science pages 
springer verlag july 

bellare micali 
public key encryption multi user setting 
proceedings eurocrypt pages 
springer verlag 

boyd 
protocols authentication key establishment 
springer 

ran canetti jonathan herzog 
universally composable symbolic analysis mutual authentication key exchange protocols 
proceedings theory cryptography conference tcc march 

cervesato meadows pavlovic 
encapsulated authentication logic reasoning key distribution protocols 
proceedings csfw pages 

datta derek mitchell pavlovic 
derivation system compositional logic security protocols 
journal computer security special issue selected papers csfw 

datta derek mitchell shmatikov 
probabilistic polynomial time semantics protocol security logic 
proceedings icalp volume lecture notes computer science pages lisbon portugal july 
springer 

dolev yao 
security public key protocols 
ieee transactions information theory march 
preliminary version focs 

mitchell pavlovic 
compositional logic proving security properties protocols 
journal computer security 

goldwasser micali 
probabilistic encryption 
journal computer systems sciences april 
preliminary version stoc 

guttman thayer 
authentication tests 
ieee symposium security privacy pages 

guttman thayer zuck 
faithfulness protocol analysis message authentication 
proceedings ccs pages 
acm press november 

okada 
completeness counter example generations basic protocol logic 
proceedings rule volume pages 
elsevier science 
available keio ac jp person downloads rule pdf dx doi org entcs 

laud 
symmetric encryption automatic analyses confidentiality active adversaries 
proceedings pages 
ieee computer society press may 

micciancio warinschi 
completeness theorems abadi rogaway logic encrypted expressions 
journal computer security 
definition honest aimed correctness properties described special form formulas called query form 
role acts acts tk sends receives generates ti term built messages mh may nonces coins si names ql 
denote initial segment ti acts ti 
query form includes formalization principal honesty honest defined follows intuitive meaning follows role may complete honest def acts sends denotes formula intuitive meaning performs 
generates generates sends sends receives receives sends denotes set tj sends tj receives generates defined similarly 
set theoretical notation sends receives generates abbreviation disjunctive form example sends 
sends denotes formula 
special case sends empty sends denotes impossible 
intuitively disjunct honest represents historical record actions step run sequence actions represents performance step represents performs means performed 
honest represents performs run initial segment ends sending action action uses data items run 
needham schroeder protocol example consider needham schroeder public key protocol informal description follows 

ra 
rb 
ra initiator responder roles needham schroeder public key protocol denoted respectively described formulas 
init ns generates sends sa resp ns receives sends sa receives generates sends sb receives brackets indicate variables occur formula 
honesty initiator needham schroeder protocol honest ns sa sa generates sends generates sends receives sa generates receives generates sends sa receives sends sa generates sends sa sa receives cc cc cc aa sends sa 
